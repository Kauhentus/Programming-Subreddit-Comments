ABSOLUTELY! First off, if you are worried about final application size, that is silly. You don't necessarily avoid it with micro libraries because your 30 dependencies could all have different versions of that micro library. That bloats things. But further, especially in the case of left pad, we are talking about 237 bytes of code uncompressed, ungziped, unminified. If all 30 of your libs had their own version of left pad, that is an addition of 7kb in the worst case. (best case, there are a ton of extra functions and functionality you don't bring in because you only needed those 10 lines, so you end up ahead code size wise). If you are worried about testing, well, why would I use your crappy library at all if you aren't willing to test your own code? Even if you depend on the microlibrary, you still should be testing those interactions and, effectively, you would do the same amount of work writing tests as you would if you had just written the micro library functionality yourself that you need. If you are in the business of writing a library and the thought of writing left pad is too scary for you, you have no business writing a library. I could understand at an application level bringing in left pad. However, it is a total mistake at the library level.
Buy i mean only the SASS file itself, not the library. There should be a built in library inside each browser. So when you download for example google chrome, you already have that library. In my opinion it's stupid to let w3c.org choose the standards. You can't even give your idea to them, stacking and preventing useless code like for example: CSS footer a{color:#fff} footer .box{padding: 6px} footer ul{display:table;margin:0 auto;} footer ul h2 {padding-bottom: 14px;font-size: 16px} footer ul li {font-size: 12px;line-height:20px} to this: footer( a{color:#fff} .box{padding: 6px} ul( display:table;margin:0 auto;} h2 {padding-bottom: 14px;font-size: 16px} li {font-size: 12px;line-height:20px} ); );
Where you searching ‚Äúnode postgress‚Äù, ‚Äúnode postgres ‚Äú, or ‚Äúnode postgresql‚Äù?
because what the hell does that have to do with the framework?
This looks very cool! But I think your nomenclature is off, as this is a simple React Component that takes React Elements as children. A higher order component is a function that takes a Component and returns a Component. 
That's perfect! Let me know if you need anything extra from CodeSandbox to make it better for the class in April, I'd love to help in any way. Also, if you have time after the class. I'd also really love to know how it went, teaching others was one of the main reasons I wanted to build CodeSandbox.
Thank you so much, I really appreciate it!
absolutely will. I'll plan to have a little survey too for each "student" to get their feedback as well.
It has everything to do with its build tooling and process. The point is to make a **production-ready app**, not just pull everything in from a CDN or something. And stop calling things ‚Äúretarded‚Äù just because you don‚Äôt like or understand them. It makes you look like a child. 
I mean... no compiling... the browser should support native the SASS file. SASS should become the new CSS. No compiling to CSS, just SASS itself.
But with correct loose semver versions you shouldn't ever have different versions of a library. And with bundlers like webpack or roll-up you can tree shake and get rid of any unused functions in libraries. And like you said, that's 7kb for something left pad sized. Get a slightly larger dependency and now you are talking 30kb+ of pointless bloat. If you want, I'll pre-bundle my library for you that way you can pretend I wrote it all myself and never used any dependencies, also double-tapping any hopes of deduplication and tree shaking.
&gt; "Oh I see, I rendered on this div with this id... now I gotta check my HTML and find that div." Just isn't a workflow that ever occurs for me. 
It sounds like you're proposing to change the syntax of CSS, which is different from your original question of having JavaScript parse SASS in the browser.
You could try r/LearnJavascript... But anyway, you have a lot of information about the dev tools at the [MDN, here](https://developer.mozilla.org/en-US/docs/Tools). In particular [this is about the console](https://developer.mozilla.org/en-US/docs/Tools/Web_Console) or to be even more precise... see [those buttons right there?](https://i.imgur.com/Q5BHRcD.png) You can use those to filter which types and severity of messages you want to see in the console. Other than that, when you open the dev tools on a browser tab, you will _only_ see messages related to that tab.
To finally come to the conclusion that the web platform is terrible at providing structure and that frameworks give that...
&gt; Look at left-pad for example - at one point it was needed Was it? Usually when I needed it, it was to do something like formatting (e.g. `00:09`), in which case I'd just do something like `('0' + num % 60).slice(-2)`, which turns out to be shorter than even `(num % 60).toString().padStart(2, '0')`... I mean, at some point of granularity, the code manipulations become more trivial than an average interview question, and one could argue that a developer that is competent enough to be hired should be able to just write the damn snippet. One can argue that writing leftPad-like things from scratch is not ideal for X or Y reasons, but like most things in life, making something a library comes with its own set of challenges too: Does making a fix break a downstream relying on previously undefined behavior? Does it incur non-obvious transpilation costs? Is there a clear outline of how/when bug fix PRs are landed/released? Will you really be getting back to mainline after forking a library whose bugfix release timeframe doesn't align with your deadline? etc.
Well, I don't really understand what the actual problem is, so bear that in mind. I mean, is it performance? But there are a maximum of around 500 checkboxes and 3 levels, right? So I don't think there's much of a problem with performance there unless you're doing some painfully expensive operation repeatedly. So maybe the problem is elsewhere, but _from what you've explained_ I would say that unless there's something more then yes, a tree is most probably the appropriate structure. On a not-so-unrelated note, you might want to re-think that user interface where you throw 500 checkboxes at a user.
Not to mention hurtful to people who have family or friends that suffer from the condition.
For anyone looking at this, this is just a marketing AD to buy his course. No actual information.
I would totally marry this guy. I don‚Äôt care if he‚Äôs a dude. 
That‚Äôs actually how LESS worked. You could pre-compile it like Sass (the better option) but you could also include the JS with a script tag and it would create the CSS on-the-fly. But it‚Äôs a bad idea overall - besides creating a reliance on JS (maybe not so big of a problem nowadays) it‚Äôs just plain slower. The browser has to download the Sass/Less, download the JS compiler, *then* compile it into CSS. Rather than just downloading CSS and applying it right away. 
Author/creator here! Thanks for your opinion- looks like the 2k people who clapped for my article disagree with you though. Doesn't mean you're wrong/aren't a smart guy, but I think I'll stick with the results on the scoreboard for the time being üëç Also, would love to check out any critically acclaimed work you've personally created! Especially if it's used by over a million people üôÉ
Scoreboard? I've published an article that reached over 2 million readers. And it wasn't on a self-publishing platform like Medium, but one with ya know, editors and such who would put a foot down on things like emojis. But yeah, classy response here buddy. Thanks for proving my prediction that you'd be reading all this to be correct. Arrogance is a very predictable personality trait. 
Not a CSS expert, but if you want to be able to see content hidden via overflow, you'll probably have to set the overflow property to something else (like auto) first. If the user can't scroll to it, javascript can't scroll to it either, unless the scroll mechanism is changed, I think.
This is minified code. You'll find it easier to read if you run it through a prettifier first (or better yet, use the source code instead). What exactly are you trying to figure out about it?
What is it exactly that you need to know? This function simply applies some regular expressions to extract from the User Agent string the name and version of the browser. In some particular cases, it applies further expressions to account for some browsers which have some _shared_ keywords in the UA string. There's not much to say about "how it works". [Browser detection through the User Agent String @ MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent). [Regular Expressions @ MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
Link to comedy article? ü§ì
http://www.cracked.com/article_19609_5-horrible-things-nobody-tells-you-about-legally-growing-pot.html And as I follow that rule I mentioned above, I'll be blocking you.
I've had more luck using [codesandbox.io](https://codesandbox.io/) but they are both incredible tools.
newbie here, what is the difference between plain javascript and es6?
How is it better than webpack chunks?
Forgot about my comment here. At least from how I understand it, es6 has a number of additions from es5 such as classes, some syntactical sugar like arrow functions. http://es6-features.org/ is a good resource to look at for es5 vs es6.
Author here, happy to answer questions :) Here's a GIF that shows the tool in action: https://github.com/feross/thanks/blob/master/img/example.gif
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [feross/thanks/.../**example.gif** (master ‚Üí aacaa07)](https://github.com/feross/thanks/blob/aacaa075464a846b569fdb533e4b3691d8440164/img/example.gif) ---- 
I guess it feels like I'm trying to do some really cute super modular trick instead of just having 3 different events/functions. I do have a working prototype that way and it isn't noticeably slow, I was just trying to improve it. With regards to too many checkboxes, it's unlikely that more than one of the top level ones will get checked which means only about 3-15 mid level ones will be visible. Out of those, only maybe 6 at most will be checked. At any given time I don't anticipate more than 50 or so being visible at a time and the labels are short. I wish I could show the prototype but unfortunately its under NDA
Can you please make `console.log(undefined)` actually log `undefined` in the built-in console, rather than `null`?
Cool! I think most people would refer the what you have here as a "Render Prop" component, rather than an HoC
Don't paste long chunks of code + HTML + CSS here, use jsfiddle or something similar instead. Also, the place for this sort of thing is /r/learnjavascript
I appreciate your sharing despite the fact that I don't care.
This is great if you need to honor responsive breakpoints in both CSS and JS. My current project does this - in just one place; there's one particular component that turns into a modal on mobile devices. When I coded it I figured hey, I'm just doing it once, no big deal, not enough to justify trying to share variables between Sass and JS, I'll just keep it defined in two places and remember to update one if I update the other. Then, of course, I later changed the responsive breakpoint in Sass but not JS, leading to some ugly behavior in some narrow slice of viewport widths that included my client's browser window. Oops! Lesson learned: one same-but-not-shared variable is one too many.
Hey stupid friend! We can be stupid together! I stupided today for hours!
Hi /u/Jetals, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I've been working on this for two weeks and it is suppose to take ten minutes. Most of it was written by the teacher already. Brutal.
Ah, you are most certainly correct.
I am in mobile so can‚Äôt fully explain, but you are doing sort of weird things with prototypes and object instantiation... However, to make your code work, move your prototype extensions out of the constructor: function Store () {} Store.prototype.method... And in DOMContentLoaded: Change Store.displayBooks to Store.prototype.displayBooks()
/u/anonymousmanitee has some good points, I was a little confused by how the prototypes methods/etc were defined as well. For the sake of consistency in how you're using the `Store` object elsewhere, instead of anon's suggestion of using `Store.prototype.displayBooks()` I'd probably do something like: document.addEventListener('DOMContentLoaded', function() { const s = new Store(); s.displayBooks(); }); Purely personal opinion though. :)
I actually just posted a somewhat broken project with some interesting css in it, and the credits for that part are in the readme, it‚Äôs probably not exactly what you want, here‚Äôs the link though: https://github.com/Twitchkidd/slider-app
The first thing I would say is that when you get stuck instead of making your "complex" app to work, focus on what you really want, in this case Save/Retrieve information from localstorage. Since you have a lot of stuff going on there, the error could be happening in several places. Breaking the problem into smaller pieces an working on each piece at a time will help you in your next challenge. Now regarding what is happening. I checked the example a bit and I see several places where your code could go wrong: - You create several new UI instances, and several new Store instances everywhere. - Try to get the books from localstorage only once (this is not where the error is but it is a good practice). and store them in the store. For example: ``` function Store() { this.books = []; } Store.prototype.getBooks = function(){ let localStorageBooks = localStorage.getItem("books"); if(localStorageBooks){ this.books = JSON.parse(localStorageBooks); } ``` Using this you can access to this.books in all of the other functions of the store without getting them from the localstorage. For this to work you have to stop creating new UI or Store instances as I said. Then you will have to update the functions to use this.books instead of the books from localstorage because they will be already saved in the store instance. Doing that and fixing this line to not lose the context "this" when calling display books makes it work for me in codepen. from: ``` document.addEventListener('DOMContentLoaded', store.displayBooks); ``` to: ``` function display() { store.displayBooks.call(store); }; //DOM Load Event document.addEventListener('DOMContentLoaded', display); ``` Again the code is a bit messy and I don't think this is the best solution but it works. I don't know exactly where the error is but doing these two improvements made it work for me. Cheers! 
At the very beginning, if you're just trying to get it working, you'll probably find it a lot less complicated without all the classes, and if you try plain procedural programming instead - at least at first. That would indeed be a 10-minute exercise. (though if you have to use OOP, so be it - and yes, it does take longer, though it arguably scales better)
Thank you. I got so discouraged, I started to whine.
Thanks. That helps.
This video is about Javascript DOM
Thanks. Yes I'm going to try to get it to work on a smaller scale.... with get, set, and remove, and start simple or simpler. I just got so disappointed. 
Can confirm. Fortune 100 employee highering node developers and building a new event based microservice architecture in node.
It was actually saving the data all along! The trouble was that Store.display() was never called correctly when the page was loaded, so the list of books was always empty on page load. Depending on the browser you're using, the built-in dev tools can be very useful. For eg, with Chrome you can do: 1. Menu 1. More Tools 1. Developer Tools 1. "Application" tab 1. Expand "Local Storage" 1. Select the appropriate domain 1. View list of key/value pairs of any data in local storage By following that process I could immediately see that your code was in fact saving data, and something was stopping it from being loaded correctly.
https://github.com/gaoryrt/gelerator Syntactic sugar for element generator.
Hear ya. Hang in.
It's not like donating is required, but it's a nice tool for those who want to contribute back to the people who spend a lot of time making things for us.
I expected some 23 year old scrub giving another introduction to ReactJS's setState function. The first thing I see: Introduction to the DOM. The second thing I see: Majestic Beard. Bookmarked.
It's a perfectly cromulent word. Also, it is actually a very rare synonym of numerous.
Thank you!
*Numberous.js*
A nitpick: please don't call it "a ECS". "Entity-Component-System" pattern is about storing data in dumb Components and moving all the logic to separate Systems. While Element Behaviors is certainly an interesting concept, it just uses regular composition and not related to the ECS pattern in any way.
If you‚Äôre using css modules you can use :export {} to share sass variables the same way classnames are exported 
Thanks for sharing. Seems great as well.
You should start watching from 0th video 
postgresql is much better than mysql. postgresql is of course fully supported in node/express. the npm package for it is called "pg-promise"
 const Numberous = x =&gt; !isNaN(parseFloat(x)) &amp;&amp; isFinite(x);
Numberous
You have to loop through every element, loop through every still available pixel und do some calculations that depend on Dom values (offsetWidth) in each iteration. Seems pretty heavy on the first look. But that is just a feeling, since I haven't tested it myself. 
Hi Twitchkidd88 Thanks for posting this.. not sure how to use github or what this does, do you have a codepen of it? Then I could have a better idea. I am new to programming .js so- still have a lot to learn.
Yeah, but the sass takes time to compile into usable CSS code. More compiling = more clock cycles = more electricity = more in utility bills. All this is not even getting into the time it would take. The fact of the matter is text based CSS files are such a small part of the DL size of a web page that it's not even worth it. Let's say your 15% is true but if the CSS is only 2% of the page DL then you're saving .15 of .02 or .30% Quick test on this mostly text page: 4.31MB DL 96.28kB is CSS or 2.2% This is why no one worries about CSS beyond minifying. While video and image compression is so talked about. It's orders of magnitude different. And no one is going to slow down a website for all their users for a data decrease of that size. Time on the Internet literally is money.
The only things I can think of are: * support for native es modules as an output format * common chunks are handled automatically (not necessarily better)
No idea but after a quick evaluation of webpack and rollup, I've found rollup to be significantly faster and easier to use.
Thanks! Just checked, Yeah, I have it set to auto :D Thanks! :D
Thanks for your code, I tried just swapping out window for the id of the div with content and that worked! Much appreciated! 
I found a solution. It's called Autolinker and it has a live sample here with custom code creator: http://greg-jacobs.com/Autolinker.js/examples/live-example/. Please help needed in implement the custom code on my html website?
A good proper beard is like +10 to wisdom
They are now in open beta as far as i know
No, this doesn‚Äôt belong in the browser. If we had no standards and browsers did as they chose then we‚Äôd be back to the nightmare of early 2000 web development. Not sure how old you are but trust me, we have it really good right now. CSS is the way it is because it‚Äôs fast and is parsed top down. SASS can do all sorts of magic and that would slow stuff down considerably. And this isn‚Äôt even an issue in the first place. Just get a build step going and you‚Äôre sorted. 
I don't know why, but I was not expecting that voice to come from that profile pic. 
This thing is intended for prototyping only, at least for now. Like if you want to try at least some pipeline working before building an actual app (kind of like Jupyter). However, talking about GPU acceleration, there is no limit actually, given that WebCL is slowly coming: https://github.com/PAIR-code/deeplearnjs/issues/158 and WebGL is already supported. P.S. I'm not Javascript developer (Scala, lol)
Thanks for the update, I hope your contribution made your feel righteous and forget the petulant child that you are.
It is cool the day you made a thing, and managed to publish it, but then litters the commons in the global namespace forever and the package manager becomes a graveyard of half baked experimental learning stuff. it is not the place for it, use your on namespace to learn what is valuable; just that you made a thing doesn't mean it has to be shared with everybody forever.
Is this his real name or just a word play?
&gt; Scala, lol This guys legit.
You don't need to loop twice. const obj2 = Object.entries(obj) .reduce((carry, [key, value]) =&gt; ({...carry, [key]: value+1}), {}); But in any case, you can do pretty much anything in userland without adding more fluff to the language: const collapse = f =&gt; pairs =&gt; pairs.reduce((k, [key, val]) =&gt; ({...k, [key]: f(val); }), {}); // identity = x =&gt; x; const dump = collapse(identity); dump( Object.entries(obj1) ); // inc = x =&gt; x+1; const incDump = collapse(inc); incDump( Object.entries(obj1) ); Or going all the way... // compose = (f,g) =&gt; x = f(g(x)); const clone = compose(dump, Object.entries); const incVals = compose(incDump, Object.entries); clone({a:1, b: 2, c:3}); incVals({a:1, b: 2, c: 3});
http://i.imgur.com/HLPnOc5.jpg
Nice to see an Algonquin student here! 
I just posted my updated guide for JavaScript testing in 2018 :)
Why aren‚Äôt objects iterable over properties, by default? The reasoning is as follows. There are two levels at which you can iterate in JavaScript: 1. The program level: iterating over properties means examining the structure of the program. 2. The data level: iterating over a data structure means examining the data managed by the program. Making iteration over properties the default would mean mixing those levels, which would have two disadvantages: * You can‚Äôt iterate over the properties of data structures. * Once you iterate over the properties of an object, turning that object into a data structure would break your code.
Why not look up an ISBN validation in VB instead and put it directly inside your Access database? Like [this](http://www.vbforums.com/showthread.php?448044-RESOLVED-ISBN-Validation-vb-net-2003).
I have no Idea how to do macros or VB in access. I don't know how to apply that to my database. I will look for some tutorials and reply back if it works.
Do you want to build a web app that uses UI elements typically found in mobile apps? If so, you could check out e.g. [Onsen UI](https://onsen.io), [Framework7](https://framework7.io/), [Ionic Core](https://github.com/ionic-team/ionic/tree/core), [Keen UI](https://josephuspaye.github.io/Keen-UI/) and [Vue Material](vuematerial.io). A lot of other ones exist too, but at least the three former frameworks mentioned are targeted towards building (fullscreen) mobile apps using web technologies.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ionic-team/ionic/.../**af9942df55dea96a3969232d237aee7c47385b70** (core ‚Üí af9942d)](https://github.com/ionic-team/ionic/tree/af9942df55dea96a3969232d237aee7c47385b70) ---- 
When you say "data structures" do you mean objects defined as instances of a class? If so, aren't they still plain objects at the end of the day? I'm having trouble seeing what would break about iterating over objects.
HAPPY CAKE DAY!!!
Really cool! Hopefully it catches on
This just inspired me to get back into development. I've started to get away from day-to-day coding at work, but still enjoy it as a hobby. Now's the time!
Nice article. I actually have an idea of what sagas are now. I typically just use redux-thunk middleware for API calls. Is the main difference that the UI is still available for interaction when using sagas where thunks could potentially lock things up?
Lol the sarcasm was strong but was not received well. 
Might as well go full on Typescript. It's basically ES6(+) + optional type annotations. You can slowly migrate over time or just add types where you think you'll get the most benefit (type inference can help too, without you doing anything).
The recommended sub for learning JavaScript is /r/learnjavascript. What you are looking for is not the browser console, which covers all tabs, you want the developer tools, which are scoped by tab. You can open those via Tools &gt; Web Developer &gt; Toggle Tools.
The author knows nothing about either of these things. I'll just leave this excerpt here. &gt;Deploying applications and frameworks created with NodeJS requires a fairly complex server infrastructure and preparation. However, Node is ideal for creating high-load multi-threaded applications and micro-service architectures.
Thank you for putting it out there.
It's just comparing some strings of the User Agent. Not a reliable browser detection, IMO.
According to NPM latest version of Adonis is 5.0.4. When did it happen?
You need to provide more information. What is the specific error or thing that is preventing you from doing this?
I agree. React and angular were largely the innovators of the virtual dom. I dont see Vue as really that innovative conceptually. To me its innovation is to package up what has come out of react and angular in a framework with a single perspective. The result is a very understandable framework from the docs , to tooling is a joy to use . I dont have to really track down other packages when there is a single approach to it. Of course you can swap these out or customize as needed but there is a well established base. 
Are you sure that the http request is really reaching your node app? Seems more likely to me that the miner is providing that UI on port 4001, and your browser is connecting to the miner program. If that's the case though, it _is_ a little weird that your app isn't immediately crashing when it tries to open port 4001...
This code... document.addEventListener('DOMContentLoaded', Store.displayBooks); First of all, the `displayBooks()` is a method of `Store`'s prototype, so it only exists in instances of the `Store` object. On the above code, you tried to access a non existant method from the `Store` function. In order to call that method, you'll have to call it from an instance of `Store` object. i.e. you'll have to create an instance of that object first.
&gt; I've tried combining into one JavaScript code but it's not parsing recipes. Any ideas why? Yes. The code is unknown.
thanks! just subscribed 
None of these things are mutually exclusive. You can use Typescript with ES6 features and JQuery.
 // our Car "type" const Car = ({ speed = 0, direction = 0, signals: false } = {}) =&gt; ({ speed, direction, signals }); // enum const Turn = { LEFT: 90, RIGHT: -90, AROUND: 180 }; const accelerate = (car) =&gt; Car({ speed: car.speed + 5, ...car }); const decelerate = (car) =&gt; Car({ speed: car.speed - 5, ...car }); const turn = (car, turn) =&gt; Car({ signals: false, direction: (car.direction + turn) % 360, ...car }); const signal = (car) =&gt; Car({ signals: true, ...car }); // example: // unfortunately, we cannot redeclare (immutable) bindings in JS // in functional PLs, the `let` declaration creates a new scope every // time it is used because it is syntactic sugar for a lambda function const myCar = Car(); const myAcceleratedCar = accelerate(myCar); const mySignalingCar = signal(myAcceleratedCar); const myTurnedCar = turn(mySignalingCar, LEFT);
The code is available in the github repository when you click this link: https://github.com/jdarling/ingredientparser/tree/master/lib
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jdarling/ingredientparser/.../**lib** (master ‚Üí aa05875)](https://github.com/jdarling/ingredientparser/tree/aa05875c164fbdfaa473e0f366a1bf8f6c19d48a/lib) ---- 
It says the module function is not defined. This is the first line module.exports = {};
good for you. I would advise to just go with native es6. if you still think typescript will benefit your project then you will have a much easier time migrating your codebase from es6 to typescript then if you were to go to typescript right away. imo many of the benefits of typescript have become redundant when es6 was made available for common use. same way as jQuery has become kind of useless now that there are hardly any browser compatibility issues, concerning web development.
Use a `Map`. There are several reasons you shouldn't use Objects as Dictionaries: Promise incompatibility (if a key is `then` and stores a function`) and performance. Not saying that *I* always use Maps, but I'm saying that the language already has a direct response to your complaint: they added the proper data structure to solve your problem. It's not their fault that we're a bunch of crazies. :)
I'd rather make sure there's something around that allows for modules (imports/exports) as well as being able to deal with npm package. In other words: webpack. Then adding babel+typescript is just a loader away.
lmao
Are you saying you wanted to do this because you have to manually type out the ISBNs? Why not scan them using using an ISBN scanner app to prevent typos?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
I never actually finished it. I was in progress building this out while interviewing and haven't had time to go back after getting hired, but my ability to talk about this project and rationalize the decisions I made while beginning to build it out definitely helped seal the deal for my current role.
__Meh.__ There's no real reason to 'revert' from Typescript, it compiles into a from that all browsers must accept, and if you don't want types they are optional. If Typescript stopped being developed __at all__ one day, ATM there is no proposal that would make sticking with ES worth anyway.
Not all lodash is fp. There is a lib called lodash-fp that is, though. For the most part I think lodash-fp just removes mutating functions and rearranged parameter order for others so that the data being transformed is the last param (thus making it curriable and composable)
Sigh.. I really don't understand the Java argument. Nothing forces you in Typescript to write classes. Our team actually recommends against it with the exception of React Components. Making it nearly impossible to revert? That's just wrong. Legit you can set the tsconfig to Target esnext and you have JS without the types. Stop giving false advice when your usage is obviously limited. 
The best resource for this imo is [Professor Frisby‚Äôs Mostly Adequate Guide to Functional Programming](https://drboolean.gitbooks.io/mostly-adequate-guide-old/content/). All the examples are JS and it has changed how I program (particularly because I work only in React these days and the FP paradigm works quite well with the React ecosystem).
Break away from tutorials. Following tutorial after tutorial won‚Äôt make you a great programmer. You have to be able to apply the things you learn from the tutorials to make something different. I built 10-15 projects by following tutorials and didn‚Äôt learn half as much as I did when I started my own personal project. Think of something you feel is more than the basics and what tutorials don‚Äôt cover and start building that. If you get stuck you can still look up a tutorial to try and work through a problem. If that doesn‚Äôt sound like what you want to do you could try and take a tutorial and make it more advanced. Most tutorials make very basic apps that could easily be expanded on if you wanted.
It‚Äôs true, you don‚Äôt need to know backend or deployment to be considered a senior. There‚Äôs no line, it‚Äôs certainly a grey area, and there‚Äôs a touch of ‚Äúfake it til you make it‚Äù in the title. I had the title of ‚ÄúSenior‚Äù engineer a few years before I actually considered myself one. No matter what area of dev, never stop improving your skills :D
If you really want to understand fp, it‚Äôs easier to do so in an fp language. That will prevent you from falling back into other paradigms when you face more challenging areas to learn. Once you know how it works in a pure fp environment, you‚Äôll have a real understanding of how to translate it back and you‚Äôll begin to see where the benefits and shortcomings are for jsfp. I‚Äôd highly recommend Elm for doing this, but there are a number of good options.
Yeah because you don‚Äôt sound arrogant at all
Never said I wasn't. Takes one to know one, don't it?
&gt; how to organize my code "Organizing the code" is a beginner thing. Experienced programmers talk about *design* or *architecture*: defining the project infrastructure that will allow your application to [scale properly](https://en.wikipedia.org/wiki/Scalability). I have a strong belief that, no matter how other people's projects you've seen, you only learn to design a large project when you actually design one. There are a number of decisions to be made that have future consequences, and when you're not experienced enough, you may be forced to refactor things many times, and that's *exactly* when you learn to "smell" what works and what doesn't. It helps greatly if there's someone with experience on your team, but you're also directly involved taking decisions. Like learning to ride a bike: you must *do* it. &gt; Really looking to start making some stuff beyond the basic shit Pick an idea and start a project today. What idea? Any idea that you think it would be *hard* to implement.
&gt; Nothing forces you in Typescript to write classes. Our team actually recommends against it Mind to elaborate on 'why?' 
ES6 will be adopted to run natively on browsers. At some point in the future you won't need any tool to translate your code into JavaScript, because ES6 *is* JavaScript. Plus, ES6 is a natural step after ES5. That's my point for choosing ES6 over TypeScript (I actually have *nothing* against TypeScript, that's my opinion to your particular case).
I hire a lot of JS devs, and I never look at portfolios. Generally for first time devs I'm looking for: education (university or code school), ability to code (we do an exercise during the interview), and enthusiasm for the product and to learn.
&gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( &gt;:( 
But why?
gustix, great post! what would you recommend for a small sized project(ecommerce store) moving away from jquery. We do not really need react/angular/vue. So i wonder what route should we take. Considering es6, but not sure if it's what we should do.
I had a page which I used 0% JavaScript. The page was gorgeous, all made with HTML5 and CSS only, including a picture slideshow. I was told I got the job at the end of the interview, and started the next day. :)
Your migration run failed and left a dangling lock on the `knex` migration table.
^ This. Another thing: it's very rare that a hiring decision would be made based on a portfolio project alone, especially if the portfolio looks beginner-ish. They'll typically still want to chat about technical fit: here's where there's a dance of you selling yourself and them evaluating how much it's going to take to train you.
[github.com](https://github.com)
It would be helpful if you could share your website or the code you're working on.
Two I had when applying for jobs. https://arcane-sands-45470.herokuapp.com/ http://protected-beyond-21980.herokuapp.com/ I haven't touched them in a while and there's stuff I'm not happy about in them, but it's the best I had at the time. One built with a framework and one without. My boss later told me it was the interview that got me the job, but we talked about my projects for a lot of the interview. (I don't have a relevant degree, and only had a little contract work in my professional background) As for following tutorials, it's a good start for learning the architecture of something and a way to do it, but your job is going to be solving problems. when you follow tutorials, they're solving the problems for you. Come up with something you make and solve the problem of making it yourself. I did A LOT of tutorials. Probably too many. They're good for making you feel like you've made something when really you haven't.
My work doesn't care about portfolios either for our entry level positions. Maybe some interviewers look at them if you included it in your resume, but I've never bothered. Most of the time I don't even look at the resume. I do the programming part of the interviews. 
People normally use git for this. Also why not take the time to copy the files on the computer instead of running from the thumb drive?
Jest runs tests in parallel by default. Make sure none of your tests are triggering migration runs. 
Oh well then apologies :p Sadly there's a lot of people like that in open source who would have been dead serious when they said something like that, so can't really tell lol
To be fair, maps aren't exactly a shining example of functors (aka "mappables", for the non-FP folks): const obj = new Map([[1, 1], [2,2]]) const obj2 = new Map([...m.entries()].map(([k, v]) =&gt; [k, v + 1])) Similar to u/ugwe43to874nf4's answer, that's an awful lot of intermediate collections just to avoid a multi-statement snippet. I think the simplest way to address the original complaint (i.e. that there isn't an elegant way to map over an object) is to just KISS and write a helper function: export default (obj, fn) =&gt; { const result = {}; for (const key in obj) results[key] = fn(obj[key]); return result; } import mapObj from './map-object' const obj2 = mapObj(obj, v =&gt; v + 1) In many cases, you can also use the roughly equivalent helpers provided by your [favorite](http://ramdajs.com/docs/#map) [libraries](https://lodash.com/docs/4.17.5#mapValues)
Just a quick comment, I thought that in FP you can only have one method argument. Eg turn function would be more like; const turn = car =&gt; direction =&gt; Car({ ...car, signaling: false, direction: (car.direction + direction) % 360 }); Then, const myTurnedCar = turn(mySignalingCar)(Turn.LEFT);
The question arised motivated by lazzines: if the thumb Drive is ok then I dont have to copy the files every time I want to work
I'm also building a chat application in order to demonstrate my abilities to land my first job ‚Äì your story is inspiring ! You mention that employers reached out to you upon seeing your project: is this a common occurrence ? 
https://github.com/brunofin/fingertools and https://github.com/brunofin/multicadeiras, the latter is still online at http://multicadeiras.com.br/ I know I could have made it much better using modern concepts, but those pages are from different, simpler times :)
I did freelance work for a long time. The process was usually 1) set up a joomla / wordpress / drupal site for some customer 2) train them on how to update it 3) hand it over to them and usually not hear anything after a few months. Id go back 6 months later and look at the site I made, with all the pretty UI components, colors that complimented whatever, all the images in the right place and sized appropriately, and It would now just be a hot mess. 7 fonts on the front page, everything underlined, etc... lol. I didnt have a 'portfolio', in that sense. What helped me the most was 1) A link to my github account, 2) A link to my codepen.io profile, 3) A link to my stackoverflow profile. That, and being able to fluently discuss php / javascript / mysql and general web dev at any level is what gets me interviews.
You probably want it the other way around: const turn = direction =&gt; car =&gt; Car(...) The point is that with curried args, you can compose const go = compose( accelerate, turn(Turn.LEFT), ) go(car) 
Besides unfamiliarity I think a big reason for the lack of widespread usage of Map is that there is no literal notation like there is for objects.
Its very common. I've been involved in the hiring process for devs a few times and nobody would ever say "look at this person's portfolio". You have to know that for any given position a company might receive dozens if not upward to a hundred resumes. A very diligent interviewer might give your site a quick glance but that's all it'll get. Nobody has time to go through your application in that level of detail. 
Yeah, point taken. I was thinking more that the language offers a native, imperative way to iterate (for-of loops) which we can build on with functional-style helpers. But this is at odds with the language's built-in map and filter methods on arrays but not on Maps. function mapValues(m, cb) { return new Map(function* () { for (const [k, v] of m) { yield [k, cb(v, k)]; } }()); } const obj2 = mapValues(obj, v =&gt; v + 1);
I am not a fan of TS after a month or so of full-time working in it. It might be the rest of the codebase that makes TS not my thing but it just feels like extra work for very little gain that tests don't offer. I would go with ES6+ via Babel and testing.
That's called "currying" and originates from *lambda calculus*. In functional programming languages like *Haskell*, this is the norm. But even in *Haskell*, you sometimes write a function that takes a tuple as a single argument and operate on the element of it: -- curried f :: Int -&gt; Int -&gt; Int f n m = n * m + 2 -- uncurried f' :: (Int, Int) -&gt; Int f' (n, m) = n * m + 2 So it's not really an anti-pattern to use tuples (which are almost identical to argument lists) in some cases. The prelude of *Haskell* even offers the two functions `curry` and `uncurry` to convert a given function: f'' = uncurry f f''' = curry f' So you are not required to use currying exclusively (or at all) to call your program functional. [This article](http://2ality.com/2017/11/currying-in-js.html) talks about currying not being idiomatic in *JavaScript*. This is simply because the language was not designed that way in the first place. New *ECMAScript* features also conflict with currying like **rest parameters** (`...`). In my opinion, partial application will be better suited to *JavaScript* if [this proposal](https://github.com/tc39/proposal-partial-application) makes it. Not every concept of functional programming translates nicely into *JavaScript*. You have to accept that.
Did you used Django? i`m a beginner still so i don`t really understand all the files :p
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/node] [Show r\/node: All Tests Pass, a weekly JS debugging puzzle newsletter](https://www.reddit.com/r/node/comments/7wg7s6/show_rnode_all_tests_pass_a_weekly_js_debugging/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Good point. These styles work, but you're right, neither is a literal notation: function newMap(...keyValuePairs) { assert(keyValuePairs.length % 2 === 0); const map = new Map(); for (let i = 0; i &lt; keyValuePairs.length; i += 2) { map.set(keyValuePairs[i], keyValuePairs[i + 1]); } return map; } const obj = newMap( 1, 1, 2, 2 ); function mapBuilder() { const map = new Map(); return { map, add(k, v) { map.set(k, v); return this; } } } const obj = mapBuilder() .add(1, 1) .add(2, 2) .map;
I don't know if I could say it's common in general. I do think that if you can build a presence for yourself, even only temporarily, you can definitely grab the attention of employers. Although to be totally honest with you, I don't think that's a very worthwhile goal to pursue. I think that I was very lucky to receive the attention that I did and, while I've published some work that's gotten a bit of attention since, I haven't had employers clamouring to hire me. With that said, I have had some very excellent career opportunities in no small part because I have built a corpus of work that demonstrates my skills, interests, and drive. If you have an ideal job in mind, you can always rely on yourself to take steps towards getting that job. Now that I have a few years of industry experience behind me, I'd say that demonstrating your ability to take responsibility for yourself is the best thing you can do to bolster your odds of getting your ideal job. Hope that helps.
Do you ever interview with people who haven't had formal education?
Great explanation. I'd also add that while we're waiting on partial application syntax, there's always arrows to bridge the gap: compose([ accelerate, _ =&gt; turn(_, Turn.LEFT) ])
I was set a code exercise to create a connect four style game in React. Took a little while but having no previous professional experience I didn't mind that. Repo is here https://github.com/alsiola/connect4 - not incredible code and I would do things somewhat differently now, but it got me the job :)
the thumb drive is more troublesome than learning git in the long run
Nope - always been the interview(s)
How can someone without knowledge of the existing code base possibly recommend a path forward? You and whoever else maintains the site need to determine your needs, use cases, and preferences and decide what is best for you. I mean clearly you‚Äôve gotten opinions and such from others but honestly you and your team need to invest the time to make the right decision for yourselves. 
Yeah, [this](liamness.co.uk) is the portfolio site I made coming out of my masters (with stuff I made during the course, mostly). I've barely touched it in the four years since, in terms of content. I've tweaked the build process a few times mostly as a learning exercise (it used to be built using PHP). For this reason, I'm considering scrapping it entirely and just making a cool splash page with links to Github etc. But yeah, I think it may have helped me get some interviews, at least when I was looking for my first and second job, quite a few of the interviewers mentioned it positively. But I don't think it's a make or break thing. I would personally see it as a red flag if a graduate developer had not tried to create any sort of online presence, but just having a Github is fine to be honest. You can host projects directly by pushing a gh-pages branch, which I've found super useful for demoing things live at interview, as it's simple and free. As you gain more commercial experience though, companies are going to care less and less about any projects you've done in your own time. It is strictly a nice bonus to have when you're trying to get your foot in the door, I think. For context, I am somewhere between mid to senior and I've been involved in the interview process a number of times, but have never had anything close to the final say when it comes to hiring people, so maybe put more weight on other people's responses.
I don't think he is talking about the actual final hiring decision though, just how you get your foot in the door. Would you really not even look at a website or github if included on a CV? For a junior dev, I would see it as a bit of a red flag if they didn't have this to be honest. If you want to be a front end dev but haven't bothered to create your own website, or some small projects, how interested in the field can you really be?
What about the recruiters / hiring managers and more senior engineers who filter out applicants before you even hear about them though? It is probably at least a minor factor for them.
I wrote this 5 years ago, with at the time, experimental web audio api, hopefully it still works: http://mmagyar.com/webSeq/ This got my first job, without any other prior experience or qualifications. 
No. The HR recruiter might before they get to me, but I doubt it, since they typically wouldn't know what to look for.
Nah
typescript. can always give the &lt;any&gt; to start with.
Oh sorry I forgot, lots of emojis and badges are more important than making smart development decisions or writing actual code. Great job! Keep up the awesome work!
Not necessarily a job - I got the first job on the back of my Hack Reactor projects, though, and this is one of the three sites that got me into Hack Reactor: http://brianboyko.github.io/consoley/ It's not much, and it's buggy, but it was something I wanted to build to make sure I understood JS well enough to apply. I also built a crowdfunding site, not really using JS, just HTML/CSS/Jekyll, and JUST enough Ajax to connect to a Postgres database with stripe integration, which was not only part of my application but also paid for the deposit to Hack Reactor (I then have re-gifted all the funds I raised crowdfunding to the Science Ambassador Scholarship, to pass on the good fortune.) 
For me it was my university dissertation project which I don‚Äôt have anywhere online. It was an OpenCV C++ application made to monitor and track people over extended periods. It was a proper mess, but it definitely helped me get the job simply because I had reasons for each decision I made and even if it wasn‚Äôt the best reason the guy who would later be my boss seemed to get on with my line of thinking. So, sorry don‚Äôt have an examples, but build something yourself from scratch. Like don‚Äôt use a tutorial or anything for a starting point. Think about your decisions for everything in there. It‚Äôs your first job, nobody expects a rockstar. What they‚Äôre primarily looking for are quick learners, good problem solvers and people with a can-do attitude. The last one sounds like corporate fluff but there is a world of difference between a developer who says ‚ÄúI don‚Äôt know how to do that‚Äù and one that says ‚ÄúI will have to learn how to do that‚Äù. Remember that juniors, graduates and interns are basically useless for their first 6 months. The company is looking to mitigate the risk of paying a salary to someone with 0 productivity. Play to that knowledge, make them feel comfortable that if they hire you you won‚Äôt be a dead weight on your team.
Thanks! üëçüëçüëçüëçüëçüëç
First time I've heard of it. Currently I'm trying out Cypress for integration testing... Will take this into consideration as well. 
Noomberous
Noomberlous.
Noomberlous
‚ù§Ô∏è
I was a pretty earlier adopter in AVA (August 2017). I still think it is good, but at some point tests broke before we ensured that tests never broke in our CI (the product was stable despite the tests having broke) and when we got around to it I couldn't manage to successfully get the tests reliably working again. I switched over to Jest and got it working again and for the most part they are pretty similar. The biggest differences I can recall is that AVA had better test failure reporting due to power-assert, AVA supposedly has/had serious speed problems for tests that don't run in parallel, Jest seems to have more and faster development, Jest has more bells and whistles available to config, AVA uses assert vs Jest's expect, Jest recommends their global injection like Mocha vs AVA being slightly more function with things actually being passed into functions and required. Both cannot run in a browser, but you can theoretically move to Jest without changing all your unit tests by using their jest-runner-mocha, which would then allow you to run your mocha tests in parallel through jest and in the browser in serial.
Have you looked at electron? You can build with web technologies and package for any system. Using in combination with React Native would be easy as pie. If you don‚Äôt mind the app running in the browser, you don‚Äôt even need to build the site as a PWA, just leverage service workers to make an offline website. Devdocs.io would be a great example of this, load it up in any browser and disconnect the internet. The app will function perfectly fine, even through refreshes. 
Frankly, it's a really great way to learn. You will learn at least: * How to use sockets / network concepts and communication in general * Input sanitization, validation, and encoding * Databases, if your application persists data * Minimal parsing, if your application has "commands" * Security for all of the above * Maybe multi-process or threaded programming - parallel programming in general * In this day, probably asynchronous programming * Keeping a long-running application stable (memory leaks, overflows, locks, contention, etc) * Performance, if your application will be busy * Module loading and unloading, if your application supports something like this * STDERR, STDOUT if your application is command-line And more. Chat applications can be very involved. I'd argue everything we know about programming can be implemented into a chat application in a useful way.
Your question is: "Does my testing tool (which I won't tell anyone about) harm a USB drive?" A JavaScript forum will not answer that question for you.
Things like coding the game of life or other simple, well defined tasks. I've tried to do more "real-world" exercises in the past, but it's really tough to fit a real world exercise into a 2 hour interview. Even the simplest real world coding tasks tend to take several hours. The things I like about in-person exercises are you get a feel for how the candidate would solve problems and work with you in real life, it's more equitable since both the candidate and the interviewer are spending their time on it, and it has a well defined time box. Different candidates take different amounts of time. If you tell a candidate to spend two hours on it, they might spend 4 on it. That's not fair for the candidate, especially if there is no corresponding time put in by the interviewer. By the time we get to an in-person interview I want it to be a 2 sided, equal discussion, not asking someone to put a bunch of time into a take home project and then saying "nah, we don't like it, sorry you wasted 2 hours". 
For sure, We view 'this' and context as a main problem with run time issues. We were having a lot of problems before es6 with event callbacks and ensuring context was the same. The architecture of the app didn't gain anything from having class type objects. Instead data is stored as plain objects. We view classes as a benefit to easily encapsulate behavior but we get the same benefit with modules. For us, this makes sense. For others, I can understand classic OOP style is familiar.
I've hired people who have degrees in non-STEM majors and have self-taught themselves programming. They are definitely at a disadvantage compare to comp sci majors on average, but I've hired and worked with some phenomenal self-taught coders. It will also affect your salary for several years until you have a strong track record of experience and references.
I have a bunch of js files and an index.html that loads them. I test the code using a browser, and whenever I make a change that I want to test I just refresh. The constant refreshing is the aspect that makes me think that maybe the USB is not the perfect device to store the code. Pd: I should've added some more detail to my post üòÖ. I will edit it
I had not considered Electron. I didn't know it ran on iOS and Android as well. 
I suggest you draw a clear distinction between the language you're using vs. how you interact with the DOM (I'm deliberately simplifying jQuery's scope). So maybe you're comparing ES6 (vanilla JS) with TypeScript for language, and jQuery vs. HTML5 API for DOM. * If you want to pull out jQuery, then just do it. You're left with DOM API calls, probably in ES5. Nothing wrong with that. But understand that you now probably support a few less browsers. * ES5 is great. Lots of support. And it's vanilla JS so you can start adding newer language features at any time. Depending on your support targets, you might not even need to transpile! TypeScript is cool and good to have under your belt, but now you're trying to learn a new language and associated tooling, so be prepared. Also consider the extent of TypeScript's benefits for a small code base. Final thought: maybe take a look at Flow. Consider it against what you want to achieve vs. how much you want to invest.
Small editing issue: PhantomJS section says Puppeteer will be discussed next but it‚Äôs actually the previous section. Great guide!
OP: Happy with any feedback, just open a git issue and I'll fix up. 
Ah, it appears that this library was meant to be run on Node and not in a browser. You have a few options. You can find a different library or you can try to bundle this into browser-usable code using Webpack.
Its not answering the question
You‚Äôre looking for ‚Äúpooling,‚Äù where a pool of work is created that workers can pull from. Writing this from scratch isn‚Äôt trivial, but may be a good exercise. It‚Äôs quite a bit simpler if you ‚Äòchunk‚Äô the work instead of truly pooling, as there‚Äôs less room for concurrency errors that are difficult to reason about. An example lib doing what you want (using async/await) is here: https://github.com/mixmaxhq/promise-pool/blob/master/README.md
I spent a long way programming the same way, but, my friend, we live in 2018 with things like we have things like HMR (Hot Module Reloading), imagine if every time you hit save your page was instantly reloaded before you could even tab back to the browser! Think of all the time you'd NOT hitting F5+waiting. Go pickup a framework like VueJs, nu-man. Stop programming in Notepad++.
&gt; jQuery and bootstrap are necessary for PRODUCTION READY APPS, right? Not right. And not even remotely what I said. I never mentioned jquery **at all**. What I said about Bootstrap is that **if you're going to use it** you should be doing it in a way that is maintainable and production-ready. Stop being dishonest or keep your nonsense to yourself. If you have to make up lies about what people said in order to argue about it, maybe your point doesn't have any merit. You should know better.
I only discovered Jest a week ago and it‚Äôs amazing. Simplest test framework for JS and it runs super fast too. 
I would suggest making something you have an outside interest in. If you're showing a project you're detached from and don't really care about as a subject, I don't think that sells as well as sharing something you're passionate about. When I was looking for my first job, I made a drum machine as a project and showed that to interviewers, and I think being able to share something I cared about that was outside of the normal crud apps really helped set me apart from other candidates. 
I like using Object.keys(obj). This returns an array of the keys, and then you can use any iterator method, accessing each property with obj[key]. for ... in loops are ok too. But yeah, it would be nice to have a nice shorthand syntax.
I agree, I think the best thing to do when you're at that "what's next" step in programming is to give yourself your own project. Once you have a goal you can ask questions and look up answers for that stuff. This is the true programming way.
At the moment, once delayedLog resolves, the light has just turned off. Sounds like you just need another `await` to wait until you want to start at the beginning of the loop again?
I've been really liking AVA: the simplicity of it really is nice. But perhaps my favorite feature didn't get a mention in this article: `power-assert`. It lets you write your tests very simply, but get output like this: t.true(ary.indexOf(zero) === two) | | | | | | | | | 2 | -1 0 false [1,2,3] [number] two =&gt; 2 [number] ary.indexOf(zero) =&gt; -1 It's the best of both worlds, no need to remember a fairly complex assertion API, and you get better error reporting, too. 
Ava is fantastic. I use it to drive headless tests in Puppeteer and it has meet all my needs and then some.
Holy shit, thats sick. Could definately use some styling upgrade but damnnnnnnnnnnnnn thats sick. 
So your port 3030 is most likely React dev server or something of the like that‚Äôs starting up a front end server and serving up assets so that you can interact with the app in the browser. However, when you deploy a node server (like sails) to heroku, you‚Äôll want to already have compiled your assets and include them as part of the server code, to which you‚Äôll serve from your server (with hopefully a CDN in the middle). Think of front end code as static files (to be generated with Webpack or something of the like), while your sails server as the only thing actually running on a port in a production heroku environment. Does that make sense?
But it is. It may not be the answer expected but it is really the next step. I am 90% self taught and it was a big ah-ha moment for me when I realized mimicking tutorials was good and fun but it limited me to the knowledge that person was trying to give. Most tutorials are basic/beginner and trying to find an advance tutorial that was doable from the experience I had following other tutorials was difficult. Not until I started to explore things on my own and work through things that a single tutorial couldn‚Äôt cover was eye opening. Don‚Äôt get me wrong tutorials are great and I still watch hundreds of them, but once you get to the point where you want to go to the next step it really is a good idea to break away from them. Even if it‚Äôs just doing like I said and working on it until you get stuck and THEN look for a tutorial that will help solve the problem, but once you solve that problem go back to working it out yourself. In the end people learn differently and it may not work for everyone. It is however my suggestion for a next step because this is what I did and can only recommend what I know. 
You have a lot of magic, and very little documentation explaining how or why I should use said magic. You mention REST APIs, but it's not obvious that your core example even creates a simple endpoint.
I use it at work primarily for unit testing. It‚Äôs okay though it has no convenient way of running a single unit test like it.only in Jasmine or Mocha and that really bothers me. 
PWA is a spec, soooo ...
Not understanding 5. Sum Below. Isn't the sum of all integers below a given negative integer `-Infinity`?
Care to elaborate? That really isnt a helpful comment.
I'm using Brackets in my house, and Notepad++ at home. Brackets üôå
You're right, the docs are very thin - and the how &amp; why need a lot of attention. As for the core example, argh, you're right there too. It has code how to initialise things but leaves out the very important api definition simply pulling it in with 'require' but never showing what magic lies inside... Thanks for taking a few minutes, I appreciate it!
Stephen Grider's "Node with React" on Udemy course walks you through deployment of a Node/create-react-app app to Heroku, if you're willing to shell out the $15 or however much it costs now. You don't need both servers to be operating on the same port--it's mostly a matter of configuring your package.jsons properly. I can PM you my github account if you like. I'm working on a few personal projects that run on heroku.
I think you‚Äôre a wonderful person regardless of the workload you‚Äôve done.
I write a program when I was 13 to track dkp for a guild in world of Warcraft that tracked members, attendance to raids, and member community strikes. It was my first program ever, but I had a lot of downloads and it was pretty popular. I passively mentioned it in a job interview at a CRM company and was hired on the spot
I just wanna let you know you're not alone. I'm in a similar situation, financially and probably in JavaScript as well (just starting to get familiar with those things you mentioned). If you wanna chat or do some pair programming just PM :)
You technically can have both servers running. localhost:3030 would be your "CDN" in this case. What I like to do for development purpose is only have my backend server running and having it serve my index.html and static files.
I see many, probably at least one will work https://www.google.com/search?q=xml+to+xsd+javascript
What realistic use is there for closures? 
For a person with no experience, this is seriously an overkill. You don't really need anything fancy like that to apply to your first gig.
How does it conpare with jest?
Ahh some open layers going on! I was contracted to create a GIS app with that framework
Don‚Äôt have time to watch the whole video. My critique? ES6 arrow function should have been written this way: sayHello = (name) =&gt; `Hello ${name}` 
That's the theory - with the understanding that CRUD only gets you so far. In any half-complex app there's going to be something more that you'll need to write custom code for. We're trying make the simple things as easy as possible (hopefully we can make that clear in the docs) and get out of the way for adding your own code when it's necessary. Strongloop has a lot going for it but it's a big hammer and not for everyone.
Nice, thorough explanations üëå
Since this is an video for - what I believe - are new developers, I would actually leave it with the currlies. I've found that people that are just picking up JS/ES6 have hard time understanding the difference, so always use currlies in my examples.
Just copy your webpack build into directory of static files in sailsjs.As for me,I write it in my dockerfile.(I use docker the deploy my app) Otherwise,Some changes must be made into your code.For example,When in prod mode,you should change your ajax url from localhost3000 into '/'(After all,you are in the same server) hope i can help you~:-D
I agree, i feel like a waited for a bit too long to throw myself to the market, but i just was not confident. Obviously i didn't just pop up knowing this, there is 4 years of practice and learning beside a job behind this.
I would strongly advise you put a note in there somewhere to not use PhantomJS or anything that relies on it. It's no longer in development and it's based on an already very out of date WebKit. It's basically pointless using it now as it's getting outdated day by day. Personally I get everything I need to do done with just Jest and Puppeteer. I'm also using jest-image-snapshot maintained by AMEX for UI visual regression testing. 
No, it's not damaging the device. It's warm because you're reading and writing to it. This is normal. Over time, with use, the drive's memory will degrade, just like any other USB memory stick. However, you're right - USB isn't perfect for this. Eventual wear on the drive and the risk of physically losing the code are real. Instead, you could use git (via Github, etc) to store your code, and "clone" it onto the computers you're using. This would let you keep a history of all your changes, and have your code stored safely online. Alternatively, services like Dropbox or Google Drive, where your files are synced to the cloud would also allow you to take them between locations with you. 
checkout my site and soecifically project "vote for us". mackraicevic.com
What benefit is gained from having a CDN when www is only serving static files? Does www just return an index.html, and all references CSS JavaScript and image point at assets.?
This was back in 2011. During high-school and first year of uni I made a website for a friend that was selling football betting tips. Website was made in php. I took a html template and slapped my php there to load page content from a database. The content was edited via wysiwyg editor in the administrator panel (another html.template with php) A copy pasted newsletter form. A little script in admin panel to send mails to subscribers and another page to send SMS to subscribers (via nexmo) It was spaghetti code but it worked as my first project. That site and the fact that I integrated an API landed me my first php dev job
Thanks! Great explanations One thing I didn't understand was the Closure part, why calling outer() two times, each one give a different result, I mean, I understood that one got the first i which is equal 0 and the other 1, but why? It's been called at the same time. Another quick thing I didn't really know is that you can assign functions to variables after the function, and call the variable in the function former.
Thanks! I was reading the first one YDJS, but it's harder for me to understand by reading, most of the stuff just pass off my head, I can't really focus much. I will give it a go!
Since you are using some ES6 functionality, then i'll have mostly critique on that #Block Scoping You talk a lot about function scoping of var, and here you could perhaps talk about block scoping of const/let for(const i;i&lt;10;i++){} console.log(i); // undeclared For var this would be the result for(var i;i&lt;10;i++){} console.log(i); // 10 #Arrow Functions Next is the curly brackets of arrow functions. You can reduce var sayHello = (name) =&gt; { return 'Hello ' + name; } to cosnt sayHello = name =&gt; 'Hello ' + name; It might be confusing at first, but in ES5 terms the arrow function with no curly brackets looks like this var sayHello = (function(name){ return 'Hello ' + name; }).bind(this); No curly brackets means that there is an invisible `return` before the expression `'Hello ' + name;` # Deconstructing Again since we are using ES6, we do not need to define the prototype of a function, instead we can deconstruct the arguments const Person = function(name = "Jade", age = 25) { this.name = name; this.age = age; } const oldJade = new Person(undefined, 58); console.log(oldJade); // Person {name: "Jade", age: 58} Now it has the same functionality as the prototype one. However, deconstructing makes more sense with Object literals, because the order of the arguments don't matter. #Promise A promise has three components, and a lot of the time you JSON parse in the success function. is its better to write the reject function in the `then` rather than `catch` var promiseTest = function(aBoolean){ return new Promise(function(resolve, reject){ aBoolean ? resolve("success") : reject("rejected"); }); } const success = function(result) { throw "oh no"; } const reject = function(reason) { console.log(reason); }; const error = function(error){ console.log(error); } promiseTest(true).then(success, reject).catch(error); //Ends in error promiseTest(false).then(success, reject).catch(error); //Ends in reject # .finally(onFinally) This is the feedback i could give you from watching the video, hope you can use it :) 
Ava was easier to get started with for me. The default parallel execution is a key difference. As is the power assert as mentioned above. I commented because the tests I created with Ava are fast, clear, reliable, and informative. I enjoy Ava‚Äôs simplicity.
&gt; Also, what happened to ES5? That's what you compile to for IE11 support. IE11 is at about 3%. Writing new stuff in ES3/5 is usually a bad idea.
Hehe, no problem! I was really excited to learn Python and Django, but sadly I had go give up because at my college they teach php and node. One question, did you had to learn pure Python first before going to Django? If yes, how much of python?
Yes, you're missing out a bit. With a new project, you'd benefit a lot more from TS. You'd be able to auto-complete more, immediately catch silly mistakes, and write fewer unit tests. Transitioning an existing codebase over to TS still does have its merits, though. The types act as documentation and doing things like adding features or refactoring will be easier. Non-nullable types are also very nice to have.
&gt; ES6 is the future of Javascript 2015 is the past. &gt; typescript is a just a 3rd party library Eh? It's a language.
Have you considered that maybe programming is not for you?
Thank you! Interesting to hear that jest can do all that
User Agent was the only way to detect web browser type, back then. Nowadays, detection by browser feature(s) is more reliable since it's more difficult to be faked. If you can think of a way to fake a browser information, then you shouldn't use that to identify the browser type.
Actually I'm sure it is, I'm 18 years old and even with all my questions, I'm better than everyone in my college class which is 23+ and I'm already working in the area. I'm just asking for advice to get better at it and reach the advanced part, I think that not knowing something doesn't mean programming is not for you. And I think that asking for everything and make it seen that I don't know nothing, it's better than have that doubt in my head. Other thing is that there is no "programming is not for you". If you are sure you wanna be a programmer, you CAN be a programmer, doesn't matter who and where you are at this.
&gt; If you are sure you wanna be a programmer, you CAN be a programmer, doesn't matter who and where you are at this. That's where you are wrong kiddo. 
Well. I agree with /u/carrot_gg that programming is not for everyone, but I am also sure that it was not personally meant for OP.
Where I am wrong here? Only if someone have brain problems can't do it maybe, but there is ton of stuff out there, if you know how to read and write you can learn to program
What makes a great programmer? One of the most important things for me would be curiosity. How can I do this? Why I can't do this? A never ending stream of questions is what will in the end build a great programmer. So keep it up ;)
It might take some time to develop the proper way of thinking for programming, but you'll get it if you stick to it. There's no shortcut here, take small steps and don't try to bite more than you can chew. Make it clear to yourself what it is exactly that you don't understand and work from there. That's as specific as I can give advice with the information from your post. Good luck and don't give up!
That's right, thanks!
I remember when I started programming. I was around 15 and went to a school programming class. Just as you I was better than most others but complex things seemed very out of reach. Everything I wanted to do with programming was hidden behind a mountain of knowledge I didn't have. Yet I didn't give up. Instead I slowly tried understanding everything about programming. After 3 years of school I was very confused as the only projects I've done were for class and the teacher was very bad when I think of it now. When I went to a university I finally understood the concepts behind the basic principles of programming. Functions, expressions, objects, statements. With this strong foundation I tried building more and more projects and then my progress really became fast. The more I knew the faster I learned. Hard problems became very easy. From toy programms I transitioned to building real applications and then libraries. Ultimately I think there is no other way to be a better programmer than to be a bad programmer first and slowly learn from your mistakes and accumulate new knowledge. 
Thanks for the advice, yea I guess you're totally right, practice and learning towards the right way is the key, I went to a public school ( in a bad country) and very bad education, so I guess I'm in the right way.
Practice practice and practice! I always have been doing mini-projects. When I read about something new and I _think_ I have a reasonable understanding of it I always go for a little mini-project. I sit down and decide what I want to do. Can be completely stupid and unnecessary things. The point is not to build something useful even though it would of course be nice. The point is to build _anything_. In the (for me) unlikely case that it works as planned, I go for expanding it with more functionality. I mess around with my little mini-project until I get bored with it. I would like to think that the project gets boring when it doesn't offer me any more challenges. Then I move on... Small lie there... Before I move on I always spend some time to analyze what I did. If I had to do the same thing again, how would I approach the problem this time? This gives some very valuable knowledge for the future. The biggest problem I had in the beginning was to decide what the mini-project should be about. That could take me hours. Then I learnt that it doesn't matter at all. The end project could be complete BS, but at least the code and structuring was good.
React can render on the web (react-dom), and natively on windows, mac and linux, gtk, qt, Android, IOS, and so on. If that is what you want, i wouldn't waste time on PWAs and web views. There's also the possibility of truly universal apps, either using react-native-web, or micrsofts reactxp, which is a wrapper around react-native. If it's rather that you want to share as much code as possible without the need for performant mobile applications, then Electron gets you there quickly. If it's just a simple site, PWA is fine as well, just know that on lots of devices you'll have to polyfill or fallback, as well as the limitations when it comes to using the hardware to its fullest. 
Yea that's exactly what I do! Except that now I will integrate the small lie hehe, great. Instead of watching a entire Playlist of tutorials, I watch a piece and do something with it to learn more, most of the time I encounter a problem and search about it, which is good, after that I continue.
&gt; ~~currlies~~ curry-lies FTFY
I can't say I've ever loved a language enough to want it on my body. Now, some vim pants, though... that'd be a whole different story.
I don't think Electron runs on mobile. It would be nice axctually, but at least back then when i last checked they've closed all issues regarding it. But even if it did, it still wraps a web-view. RN is a native bridge, the resulting application is native. There's no web-view any longer.
Why is there jQuery? It's not used.
CDNs generally *only* serve static files. Google what a CDN is used for ;) But the tl;dr is that it takes load off your server and puts assets on multiple servers around the world so that they're closer (thus faster) to the end user.
Not everyone's brain works the way it needs to for a career in software development. Doesn't mean they're not smart.
My wife is an accountant. I could learn to do her job... I have no desire to ever do what she does. It's not worth it. So yes, people might be able to learn to at least a rudimentary level, but if it's not interesting to them, why force it? It's the old "can I" vs "should I" argument. You sound interested and motivated. You're super young. You'll get past the stuff that's holding you up, or you'll move into management.
Yea I'm totally motivated! Thanks, I'm sure I will get there, it's just not easy and from one day to another.
&gt; puts assets on multiple servers around the world so that they're closer (thus faster) to the end user. What's the benefit if you already use AWS for this purpose?
AWS has a CDN as one of their services (or however it's set up, I don't use them). Or do you mean controlling your own servers in multiple data centers around the world?
emacs &gt; vim
Here are some [more stylish threads](https://naughtygits.com/).
I'm seeing an ad here based on this since months! 
notepad.exe &gt; emacs &gt; vim
I disagree, I think it's uglified. 
Great, until you realise you've forgotten how to get out of them.
my kind of girl
First one: ‚Äúsmash(patriarchy);‚Äù No thanks, I‚Äôm good. 
For me it was the final project from Colt Steele's Web Dev Bootcamp. I once posted a url here and someone from reddit rapidly filled the site I was showing employers with vulgar images. On the plus side I learned how easy mlab database administration was. 
I know you mentioned that Angular is verbose and I absolutely agree. However the documentation has gotten much better and if you use Angular CLI alot of the cruft is taken care of and you have unit testing frameworks built in. 
Great feedback and write up. Using promises still a good practice in es6?
I am my own dev ops.
Hi /u/ovvn23, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
yes, in a coupe of ways: - The response time of many CDNs is faster than what an out-of-the-box Apache configuration can do, so you shave a few ms - A CDN most likely has servers closer to your user than wherever your AWS server is. This can save hundreds of ms You also reduce load on your own server allowing you to run smaller VMs for longer
Yes. Significantly.
It sounds like you are a decent Angular dev, and probably the best frontend dev in your organization. Don‚Äôt forget that being the most senior skill set in a particular organization does not make you a senior dev. Most senior devs have generalist knowledge, the ability to lead confidently and deliver on time. I work with guys who have been in it for 8plus years but due to lack of delivery and time estimate skills still would not be considered senior. Perhaps if you go to meet ups or find a job with a more mature / hungry dev team you will feel pushed by people in the building more. It will help you realize what you still don‚Äôt know.
Ah so this is an ad the. Cool. 
Why aren't you using Arch?
Free blogging platform that originally only allowed higher quality content onto it. It sort of is its own social network in the post blog era.
People like you are what's right with the world. Thanks for taking time to give this person feedback.
My first video where I explain the difference between return await asyncFn() and return asyncFn(). https://youtu.be/4tfvLvLi2gI
remove();
punchcards &gt; notepad.exe &gt; emacs &gt; vim 
Minified!
No, not intended as an ad. Someone on a different thread asked where they could get one so I just posted that link here, too.
Nice summary alzee76 üëçüèª
It is probably my JSDocs that are causing the auto completes and I do agree that HoFs are rather verbose to type. Maybe I'm a TS guy in JSDoc clothing?
 function1((data1) =&gt; { function2((data2) =&gt; { // Do stuff with data1 and data2 }) }) It's gross and this situation would be a good use case for Promises or async/await, but you should have a good grasp of callbacks.
Hi MisterCremaster, might be worth mentioning your setup would work really well on aws with AWS Amplify (on github.com/aws/aws-amplify) and the mobile cli. Amplify/CLI makes it really easy to publish your front-end (static site) to S3 (github.com/aws/awsmobile-cli). Amplify will give you authentication, analytics, and API calls using api gateway super easy (with javascript specifically in React with HOCs)...i.e. API.get('myApi', '/stuff').then(...). The awsmobile-cli (npm install -g awsmobile-cli) let's you publish and update your static site to S3 via CLI in one command, as well as update your Lambda functions behind api gateway. Your setup would be a good use case for api gateway + lambda proxy which is automatically setup with the mobile cli for you. 
https://www.dunnbydesign.us/home/greeting I built my site with a Waka integration so whenever recruiters ask me what I've been working on most recently I can give them a graph that displays it.
Yes but what is the premier minification js library called ... ?
So that console.log(text) should be return text?
I wrote what you said. By the way it is still maintained, but not by its original creator and obviously much less.
No. It doesn't need to. I'm not sure what he's talking about. You are passing the value to the callback in fn1 and 2 correctly. 
&gt; PhantomJS its there man :)
Notice that AVA runs in parallel as well.
Yes I also added more info
That's a good piece of advice. This could well be a single blog post.
Merge conflicts detected. Please resolve before the tug.. pull request can be approved.
Kinda old-school, but this was one I built for a job a few years back https://github.com/mlabieniec/angular-etsy I know it has a framework, it's angular 1, but it does use the etsy jsonp api which is kinda cool (full client side api)
JavaSkirt.
So then how will you get that value in function_final?
Callback function is fine, unless you need to collect the value from it
I created a Node app that turns 4chan threads into video playlists: http://www.4webm.org For example, here's a YGYL on /wsg/: http://boards.4chan.org/wsg/thread/2090235 To load up that thread, just replace "4chan" with "4webm": http://boards.4webm.org/wsg/thread/2090235 Repo [here](https://github.com/ScottyFillups/4webm)
AVA always ran in parallel? Jest does too, but their parallelization strategy might not be as good based on https://github.com/lorenzofox3/zora
My website is justanotherrecipeblog.tumblr.com. Thanks
Oh, thanks. I'll try looking for another library
By referencing them like I did in my answer. I'm not sure what you're meaning to accomplish by returning in a function that uses a callback? It's very likely that I could just be misinterpreting what you mean.
function1 and function2 have to have a callback
Thanks for the info. I was trying to set up the project in the getting started section of the React native Windows repo but kept running into issues trying to run the UWP version of the project. I was able to get the android version working on my phone so I am pretty confident I can do the same on an iOS device.I had not heard of ReactXP I will take a look at that and see how it goes. I am beginning to wonder if I would have better luck with vanilla JS + electron + native script 
But... what kind of skirt is that?
Wait, doesn't async work only on promises?
I was just doing a version and then saw the above. This is roughly akin the above answer ``` var function1 = function(cb) { return cb('done 1'); } var function2 = function(cb) { return cb('done 2'); } functionFinal = function(functions, cb) { // aggregate here is the collection of return values as an array var aggregate = functions.map(function(fn) { return fn.call(null, cb); }); console.log(aggregate); console.log(aggregate.join(" --- ")); }; functionFinal([ function1, function2, ], function(text) { console.log(text); return text; }); ``` 
This is how I understood the required usage and implementation: var function1 = function(cb) { return cb('done 1'); } var function2 = function(cb) { return cb('done 2'); } functionFinal = function(functions, cb) { // aggregate here is the collection of return values as an array var aggregate = functions.map(function(fn) { return fn.call(null, cb); }); console.log(aggregate); console.log(aggregate.join(" --- ")); }; functionFinal([ function1, function2, ], function(text) { console.log(text); return text; }); 
[removed]
It does but it only comes in certain types. 
As of now just the file-system I believe 
For those who don't get it - read the next sentence in the article: &gt; A Memory leak in simple terms is forgotten data forever waiting to be used. Let us see an example before we jump to a scientific definition.
University. If you want to go into that side of things it is very useful to have a related degree. You‚Äôre going to learn the theory underpinning everything, you‚Äôll learn boolean logic, linear algebra, and discrete maths. Then with that knowledge you‚Äôll start implementing complex algorithms in actual code.
Others are right in saying there‚Äôs loads of ways to do this and no right way, just the right way for difference situations. I keep my front end and APIs separate, but I still have a server for the front end. Rendering a React app on the server and sending the result over on the initial response and serving the static files separately is pretty common nowadays. It also means I can break down a large web app into smaller React applications, which has a massive effect on performance in most conditions. However if you don‚Äôt need to server render your front end and your app is on the smaller side having a single server for everything is perfectly fine but may not scale so well. The way think of your current set up is that when you view your React app it‚Äôs running as static files in your browser, sent over and just started up like usual. Instead of doing that it‚Äôs just being served from its own server that is serving the files, which can be useful when developing the app.
The UI is really well designed for authoring. It has nice social network features. Some people take advantage of the SEO help you can get from using Medium. If you maintain a blog on your own site and occasionally contribute high quality pieces to Medium, you can link back to your site and drive traffic there.
I did this intentionally to emphasise the difference, I agree using destructing with the Promise version vastly improves readability.
Because `i` gets incremented by the `++` after each return.
You can emulate private methods with them. They are used in the revealing module design pattern.
So if you're using typescript, there isn't much use? 
Nice. Could you please add github link? You also shouldn't use "var" and brake code into small modules.
You can define private methods in typescript.
Don't paste large amounts of code here, use something like jsfiddle instead.
Emulating privates is certainly a clever trick we use them for, but that's not the problem they were invented to solve. Closures were invented to support functions as values (aka first-class functions), because once a function can be spontaneously created, passed around, and returned, then a problem arises... what happens to the non-local variables it refers to? Under conventional stack-based scope implementations, those non-local variables would have probably been destroyed. Now, instead, we need variables to stay alive for an unknown length of time, for as long as a function is alive that refers to them. So variables get allocated on the heap instead of on the stack, and a function object keeps a reference to those heap-allocated variables. That function object, which contains both a plain function and a reference to heap-allocated variables, *is* **the** closure. So the use and benefit we get from closures is that they allow first-class functions to Just Work. If you've ever written a callback function, for example, that's a realistic use of closures. function f() { var xhttp = new XMLHttpRequest(); // This callback function is a realistic use of closures xhttp.onreadystatechange = function() { if (this.readyState == 4 &amp;&amp; this.status == 200) { // This reference to `xhttp` is only possible because of closures document.getElementById("demo").innerHTML = xhttp.responseText; } }; xhttp.open("GET", "filename", true); xhttp.send(); } ---- CC /u/angels_fan /u/PatrickRNG
No, it comes in any type.
Async/await is just sugar around the .then() syntax so you can definitely mix them. Both are just different perspectives on the same idea. think it really depends on the situation though. It can be much easier to express certain control flows in one vs the other. Async/await is also much more verbose in cases where you just need to chain promises. In any case, I don't think you'd be able to write the most optimal code in async/await without fully understanding promises and how async/await desugars.
**Advanced Javascript** by *Asim Hussain* is awesome course, perfect for developers who are already familiar with JavaScript and want to take their skills to the next level. [https://www.udemy.com/top-javascript-interview-questions-and-answers/](http://www.udemy.cc/top-javascript-interview-questions-and-answers)
I made this React app: Gauge Generator : https://veerasundar.com/gauge-generator/
If this was really realistic, there'd be a lot more typos and backspacing :P
Any type is only in kotlin
Yeah that's exactly what we have. So I should research running the whole static site on a CDN?
Yes, it will be significantly cheaper and more performant. However there are no redirect capabilities at cloudfront at the moment. 
Nice! Thanks for that!
Here is the code on jsfiddle. https://jsfiddle.net/1j8473sc/
It's not just about courses or books -- find a mentor to guide your learning. Learning from a more advanced engineer is a crucial part of transforming into a senior developer. That said, [p1xt guides](https://github.com/P1xt/p1xt-guides) are great, as are the more advanced tracks in [FreeCodeCamp](https://freecodecamp.org). Anything by Eric Elliott. [Eloquent JavaScript](https://eloquentjavascript.net/3rd_edition/), too. 
tree shaken
It's no good then, is it?
Butterflies &gt; Writing out your ones and zeroes by hand and paying a human to interpret them &gt; punchcards &gt; notepad.exe &gt; emacs &gt; vim
I want one in JSX
I'd totally but this if it wasn't a stupid miniskirt.
Don't know if you will find this helpful or not, but this is the text they used for many years at MIT: https://mitpress.mit.edu/sicp/full-text/book/book.html If that is too dense for you, the most helpful idea I know of is that you should break down a problem into sub-problems and those down into sub-sub-problems until you reach a level where the sub-problem is easily solvable. (The you put the pieces back together). Also, don't be afraid to draw pictures and do a walk through simulation of your code. You might also find "pseudocode" helpful: https://en.wikipedia.org/wiki/Pseudocode
https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q
If you're interested in writing simple command line stuff, install Node.js. Then you'll be able to run/debug your programs from within VS Code by simply pressing F5. (Pressing F5 will also save the file.) Whatever you print via console.log will show up in the "debug console" panel.
Thanks.
Consider this, it's a playground that displays errors and outputs inline in the code https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode
You should figure out his aspirations. Pigeon holing developers is a pretty easy way to lose them. That said, there are still a lot a CASE specialist can do (e.g. building grid/style guide system, building animations, etc. However, unless your shop has Node.js backend it is pretty common to differentiate front-end vs back-end.
Thank you for your attempt 
we all take off our pants one ! at a time
The best resource for writing advanced JavaScript is your own personal experience writing an advanced application. There is no better teacher than continuous failure until you get it right and then gradually improve it. You cannot cheat or bullshit around the value of practice.
Not common, because honestly CSS is super simple skill. Honestly, if your developers cannot figure out CSS they probably don't need to be anywhere the front-end, because there are many other areas they will also get seriously wrong like the DOM, semantics, and accessibility. It used to be hard back in the days of IE6 which had a different box model, but even then it was only vaguely separated. In those days designers would write visual comps as best they could using some application to write most of the actual working code and hand touching where necessary. When the CSS got really challenging like cross-browser rounded corners in the IE6 days then a front-end dev would help the designer out.
Nice, thanks for sharing. I should've known from the hair.
CSS is so much harder than JS. It's an order of magnitude more difficult to test, more likely to break cross-browser than JS, and if you do it wrong it turns into a soup of unmaintainable global variables.
It means exactly what it means. You have a button on a site and need it to do something? You use javascript. There‚Äôs also a lot more JavaScript can do. 
The web serves up documents, document fragments, bits of code, display instructions to browsers. Browsers have an engine inside that is built to manipulate these all of these fragment types. Javascript is that engine. The really cool part of this is its ability to retrieve pieces of itself and run them. I love my job.
That's not quite true -- HTML's form element is capable of making buttons do something.
OMG! I sat and started watching that tutorial. I have to say that it is the absolute worse tutorial I think I have ever seen. I could not get all the way through it. Very unprofessional. The guy didn't know what he was doing. If you just want to learn React, you don't need to learn it with Boostrap components. That's a bit too much. You want to first get the fundamentals down. I strongly suggest you take a look at the free tutorials by Wes Bos: https://reactforbeginners.com
How would you lock things up with thunk? You don‚Äôt have to wait for the action to finish if you don‚Äôt want to.
This is an incredibly deep and nuanced question. The short answer is: everything. JS runs the web. Without JS you could have really gorgeous websites that do literally nothing. JS can make network requests for resources, trigger and react to events, and control every aspect of a site. Think of it very limitedly like this: HTML is your bones. It's the structure and layout of your site. CSS is your skin: it's what keeps (some) people from looking like a creepy bag of flesh and bone. JS is your brain, your heart, your nerves.. everything that makes you function. Obviously there are some issues with this analogy, but at the level you're at, this'll suffice.
where does one get this? 
Thank you very much, I'll definitely look into those.
You getValues() from fullRange twice, once when assigning the variable and again in the loop. I think that that might have an effect, although that would probably throw an error, do I'm not sure.
egghead.io had a lot of courses on reactive programming, functional programming and tons of modern libraries. It all depends on what you are defining as advanced JavaScript. 
By the way, the version of React-Bootstrap that he's using is really, really old. Older than what you are trying to use it with, therefore you're having trouble getting things to render. I just put something like his recipe list together with the latest version--piece of cake. But it's completely different markup, etc. to what he's using. I'll see it I can put together a Codepen example for you, tomorrow.
I love a good analogy
I can‚Äôt imagine working with someone who only writes html and having that person throw stuff over the fence to the guy who only writes JS. To be even a 4 out of 10 on the front end you need to know how to write all three. I‚Äôd send the html guy to code boot camp or something to get him writing js, if you really value keeping him long term.
HTML describes what information is on a page, CSS describes how it looks and JavaScript describes what it *does*. That upvote button to the left, for instance. When you click it, some JS runs that makes contact with reddit's servers to let them know you've upvoted, then makes it orange. Or you could have a button (HTML) that looks fancy (CSS) and when you click on it, it changes the `src` attribute on some `img` element. For that you need JavaScript.
Yes, and also I know to try and look things up at least a tiny little bit before wasting people's time. Glad you're getting help here, doubt it'll do any good
If you read my original post I did look things up a tiny little bit that's why I came here to ask for anyone who knew more about the subjects I mentioned. Also, no one forced you to respond. If you read it and deemed it unintelligible then you shouldn't have answered at all instead of giving a snide remark. 
bump 
I pulled that out into a separate package: https://www.npmjs.com/package/fitness-planet
I can appreciate what you're trying to do here, but a vague answer like this is exactly what's beginner does not need.
Did you answer his question?
Start using vim with tmux and zsh, keep [FengShangWuQi/to-vim-tmux-zsh](https://github.com/FengShangWuQi/to-vim-tmux-zsh) for future reference.
&gt; Not hardly... at least not any more. More than a decade ago I would have agreed with you. A decade? Edge wasn't even around 3 years ago. So it doesn't take 10 years. But that's not to say that even today we can ignore IE. If 10 years you do go, you're back to when IE _was_ king - back far enough when netscape was on its way out getting replaced by firefox. Back when you developed for IE first and hoped everything else worked... assuming you bothered to check at all. Plus, back then, you didn't have to worry about mobile at all. All things considered, looking at modern browsers, things _are_ more consistent as far as CSS/JS goes. Support for standards have improved dramatically across the board which has been a huge boon. BUT, when it comes to inconsistency, from my experience, it's usually CSS's fault. The only cross-browser JS problems we've run into lately have been DOM APIs assuming to exist everywhere, but missing in some older browsers, usually, if not exclusively, IE. &gt; CSS is a super stupid simple skill This I don't agree with. But I find the overall question interesting: **Which is harder? JS or CSS?** ... I was going to go off about the different qualities of each that are difficult, but that started to spin wildly out of control with a mess of rambling (it is a bit of an apples to oranges question), so I put a heavy finger on the backspace key and figured I'd just address the quoted text directly, focus on some general CSS topics that keep it from being stupid simple: selectors types, combinators types, pseudo classes, pseudo elements, style priority, selector specificity, media features/queries, all the different properties, all the different values (and various formats and units), inheritance, transitions, animations, transforms, box model, font rendering (and the true nature of v-align)... and how _do_ you vertically center something ü§î? columns, grids, flexbox, positioning, flow, floating... and probably a bunch of other stuff I can't think of. Some of the items in that list are simpler than others, but the more complex topics are easy to lose yourself in.
no, but that has nothing to do with what I am critiquing your answer for
Html has events. Click a button, type a key on your keyboard, move your mouse, etc. If you do one of these events, say, click a button to sign in, the javascript is the code that actually communicates with the server and checks if your username and password are correct. 
Quite possibly my favorite use of JS is Node! I thoroughly enjoy my company's full-stack implementation of JS from AngularJS to Node/Express, and MongoDB.
&gt; what javascript does that html and css don't do HTML: Controls what stuff is in the page and how it's nested. CSS: Controls what the stuff looks like. JS: Basically anything else. Adding/removing stuff on the fly (e.g. a hovering tooltip or modal window). Communicating with a server after the page has loaded (e.g. from an external API). Almost anything dynamic that happens in a page (e.g. online calculator apps, games, calendar widgets, etc.)
Ahhh, the ol "Your solution to the problem is wrong, yet I have no solution of my own." I've heard that's exactly what beginners need when they have a problem they'd like explained to them.
Have you tried anything at all?
looks like lodash
:-)
teradaktul, For your answer, JavaScript normally makes your page come to life and user friendly. It comes with a decent set of libraries, for managing, * DOM manipulation, allowing us to add or remove web content and controls dynamically * UI animation * Input Validation * AJAX (Asynchronous JavaScript and XML), which is more useful for dynamic loading of partial or entire page. * Complex business logic, reducing the need for server postback. In case you don‚Äôt want to read books, and have healthy learning discussion, you can always ping me back at sid321988@gmail.com. And if you love books, you can always look at few listed here by Eric Elliott https://medium.com/javascript-scene/12-books-every-javascript-developer-should-read-9da76157fb3. 
Ware you taking my reply so personally? It is exactly because I care about the quality of the post that I was critiquing your answer. Does irony make my response untrue?
No. I don‚Äôt think you can. But you can create an issue and I‚Äôll work towards it. Thanks 
So provide sourcemaps.
Hah, thank you! I actually received the same suggestion in another thread. I love this idea and am definitely going to implement it in the next release :)
&gt; Without JS you could have really gorgeous websites that do literally nothing. That is complete nonsense. There is tons of useful functionality just in HTML/CSS. The vast majority of your modern layout and styling just needs CSS. Your responsive designs would still work without JS. Navigation stills works. HTML is hypertext after all. Forms are a big part of HTML and work without JS. Of course you can make websites without JS. That is just how we did it 10 -15 years ago or more. 
HTML has some meat and brains too, but they are more limited, and the feature set is fixed. Try loading a Web app like GMail in HTML-only mode. That's not an apple to apple comparison because AFAICT the HTML-only version uses an older visual theme as well, but it should give you an idea. https://mail.google.com/mail/u/0/?ui=html Without JS, most clicks on a links and buttons trigger a new page load, and you can't customize what happens when users move the mouse pointer/scroll/type (or in limited ways through CSS with things like :hover pseudo-classes).
Coder Runner plugin. 
explicame 
Works on node. So what? I'm gonna play some Mario in the terminal? 
@brodega full disclosure, I do report to someone in marketing. So I suppose you will never reply back but in case you read: I do get you, maketers didn't build a good reputation over time, believe me, I navigate these waters and is full of BS. But make a distinction between a marketer and salesman. I had a chat with a friend of mine who is a fullstack dev and he told me that his company was having problems hiring developers. So I thought on taking a look and understand better how you guys make up your mind. I appreciate any insight you can give but I understand if you think I am a "hack". I am trying to represent a new generation of marketers, more showing what we have to offer and let the user decide, less buzz words and candy to "hack you". 
My reply above
it's like playing pokemon on a toaster, doesn't work.
When you interview do something called [The Joel Test](https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/) with the person hiring you. For me it's 10 and above and you're good to go. 4 and below and get the fuck out. Anything in between is subjective and you need to make your choice in other ways. Also don't make the mistake I made first time and accept their answers as the truth. Probe a bit deeper and really see if they do CI or just say they'd like to.
Not exhaustive, but I would want to know about the developer culture at the company. I‚Äôd be looking for answers to questions like: - What‚Äôs the scenario for testing the code we write? Do developers write tests? Is there a separate testing team? Do they not write tests at all? To me this can really signal how much the team and developers care about their product. I have friends that work at companies where code is submitted that doesn‚Äôt even compile.... scary stuff. - How is code review done? How many people review? How do people handle feedback on code? I‚Äôm looking for people that can give _and take_ criticism. Never being told you‚Äôre wrong means people aren‚Äôt looking hard enough. People that take every critique as a personal attack can breed a hostile environment. - What does the deployment pipeline look like? Do we have to babysit the process? It is a weekly, daily, hourly thing? If there is a problem, how do we undo it? I think this question speaks a lot to the way the team operates day to day. Slow deploys usually means they‚Äôre stressful too. Tiny, rapid deploys tend to be aligned with less pressure around releasing code since it happens constantly. - How much is the company invested in the growth of the developers? Can they try new technologies? Expense conferences? Take work time to educate themselves? I want a company that encourages me to grow. At my current job, it‚Äôs looked down upon if you haven‚Äôt done anything recently to improve yourself. These are just my perspectives and not everyone might agree with what I get out of the answers to these questions, but these are the things I‚Äôd want to know about. 
Actually one part of marketing is product marketing, and it's not necessarily bullshit. Marketing is not just running ads or putting lipstick on a pig.
This seems a bit dated doesn‚Äôt it ? Daily build ? In times of CI and TDD feedback should be significantly faster than that. 
There are plenty of Dev Shops that don't do TDD or CI... Obviously, not ideal but it happens much more frequently then people know!
If you were one of my junior programmers, I'd start assigning more complex things to you to help you advance. I'm sure you're fine with all those things in a small setting, but when it comes to making a *huge* project, your probably don't have the skills necessary to see it through cleanly. To that end, I recommend creating something huge. Many pages, complex interactions, etc. Try to abstract things and create your own libraries to make your job easier, such as a system that lets you make front-end forms a lot easier from your model data, rather than coding each one by hand. Also, try doing types of projects that you haven't done before. It sounds like you've done a lot of standard data-entry interfaces, so try something with more complex back-end code, like a small RPG game or something. Even and "incremental game" would probably force you to think about how to abstract and organize code more efficiently. (See /r/incrementalgames for examples.) Of course, picking a project for my junior devs is easier since I have real-world cases that need to get solved for them. Picking one for yourself is harder because nobody is telling you that you *have* to do it, and so the motivation to finish it is a lot harder... And you don't have a mentor that is reviewing your code and guiding you along.
thanks u/piratemurray. The company I was talking about it is actually refactoring to make use of React and Continuous delivery. How do you probe a bit deeper?
Also, if they don't have a designer/project manager/etc. it won't be good for long.
The Elon Musk of marketing? Elon Musk is the Elon Musk of marketing? Why do you think he put a car in space?
The reason they have a problem is either their culture is bad or they don't pay enough 
My previous job I didn‚Äôt know these answers going in, and over time learned how important the answers are. Some aspects, like testing and having the ability to grow, were great. Others, like deployment schedules and code review, less to. My current job is at a company that‚Äôs pretty well known for their developer practices, on a team with someone I knew from before the job. Between a really clear, publicly available culture deck, their reputation, and the experience from the people I knew on the team, I knew what I was getting myself into. Stack Overflow wouldn‚Äôt be the appropriate place for this kind of thing. Maybe a blog post, or just in the interview. I think that getting answers to these questions in an interview can tell you a lot about the company you‚Äôre joining and how they treat their developers. 
lol, you have just killed my dreams and ambitions. I don't think I can afford to send a Tesla into space myself. I'll need to chose to be someone else of marketing then. 
If the company is a) not an outsourcing company, b) writes tests and c) pays much more than any other similar company. Basically if they write tests then it is highly probable that any other thing is also automated.
This is a very broad question. You might as well be asking: what type of company do you all like? Understand that what is "good" for someone, might not be the case for someone else. Granted, there might be some common ground between preferences. I'll try to cover that. First of all, let's assume an ideal scenario: you're not desperate and need a job ASAP. You can afford to look for more than one option, and choose. So, what are you looking for in a company? Companies have three main tiers that they can be categorized for. 1) Compensation/renown 2) Environment/atmosphere 3) Tech Ideally, you want to get a company that is an upgrade to the three categories. However, some of them it's difficult to determine. How to tell? Company interview process follow (for the most part) this pattern: HR interview, tech test/preliminary tech interview, final tech interview (which either follows up with a salary discussion, or a salary follow up with HR) Disregard the first two steps. They won't tell you shit about the company. Blaze through those, nod, be polite and attentive. Don't be overly concerned on the HR interview, and try to ace the tech interview as much as you possible can. The third interview is really where it is at: it is as much an interview for them, as it is for you. Now, let's cover the three categories I mentioned before. 1) Salary: this is pretty straightforward. There's no digging to be had, unless the companies purposely obscure it and wait until the last moment to tell you they will pay you like shit. If you feel your experience is worth more, and/or you did well on the tech interview, don't hesitate to ask for more. Normally offers display ranges up straight, so you'll know ahead more or less what you can expect. 2) Atmosphere/environment: this is a tricky one to tell. Let's focus first on the personal side (atmosphere) and then on the professional side (environment). There are some key elements to look out for to gauge the atmosphere, although you have to come to terms with the fact that this is the one category you'll not be able to tell 100% by a mere interview. Who's doing the interview? Is it one of the devs, or a manager of a manager? How are they dressed? Formally of casually? Likewise, how do they speak to you? What's their tone? Are they cracking jokes, or being very serious? When you walk through the office, notice the age of the people in the office. Are there people your age? Is everyone older? If this is a particularly important topic to you, ask questions! What do they do for lunch? Are there any events that are organized that people can join in? Again, this is up to you and exactly what you're looking for. I'd recommend not focusing too much of the interview here because, while it is important (in that it will help your day to day), you're looking for a job, not necessarily a party or a group of friends. For environment, ask more pointed questions. How is overtime handled? Is it a regular occurrence? Do they use AGILE? How are deadlines decided? Do they have an on-call policy? Think about all the shitty things you didn't like about previous jobs, and try to mask them in a question that would force them to admit they have the same practices (or not). If they look at you weird, don't hesitate to use the "oh, it's just that in my previous company they did so and so" card. 3) Tech: finally tech, and not less important, this might be your priority number one. The third interview is very good for finding out what they actually use. Now, again, this depends on the tech in question. Basically what you want to find out here is: do they use their custom solution, or do they use a framework (e.g. for ORMs, for frontend, for APIs, etc). Ideally you want to avoid an all custom-solutions system, because that experience will only serve you in that company. Be realistic and understand that is hard to find a company who will not have legacy that needs to be maintained, and everyone has custom implementations. Ask them what you'll be doing, about their architecture, about their different apps. If they say, for example, that you'll be working on System X, ask them: what is system X's tech stack? If you see a lot of we use "framework Y but with..." or a lot of knowing smirks followed by light excuses like, "well, it's a system from long ago but we're trying to change that" know that you'll have to deal with legacy yourself. Lastly, if a company is riddled with legacy, but they are actively rebuilding their systems bit by bit, this can in itself be a good or a bad thing. If the company is actually committed to it (something you'll have to judge) this can be a great learning experience for you because everyone will be learning alongside you. However, if for the company it's more a to-do than a necessity, you'll be dealing with legacy. My final, general company-seeking advice is this: don't be overly concerned until you get to the final interview. Assume you'll be compensated well, and ask some questions about the atmosphere as well as the environment. Then, turn a page and find out as much as you can about their tech stack. Here is where red (and orange) flags will pop up mostly. 
[The UI](https://github.com/bfirsh/jsnes-web) is separate
Marketing departments generally have their own priorities that don't come anywhere close to aligning with sane development practices ‚Äî sometimes they don't align with sanity in general.
&gt; A decade? Edge wasn't even around 3 years ago. So it doesn't take 10 years. But that's not to say that even today we can ignore IE. If 10 years you do go, you're back to when IE was king - back far enough when netscape was on its way out getting replaced by firefox. This is stupid. Edge is easy to write cross-browser CSS for. Had you been doing this work back in the 90s you wouldn't have mentioned Netscape in connection to CSS. A lot of places and candidates may find CSS challenging if they are trying to cheat on experience. I have found that some places will retask a Java developer to be a front-end developer when they cannot find competent candidates to hire. JavaScript vaguely looks like Java so they can bullshit through with spaghetti code for a while, but CSS is an allergy that makes them instantly cry due to no frame of reference. The problem there isn't the technology.
Well I'll give you an example. One job I took I asked about their CI set up and got the response, "We don't have one at the moment but that's one of the first things we are going to put in come the new year". This was in an interview at the tail end of November so on that point I said yeah that's cool. Little did I realise that even though setting up a CI server really isn't difficult they had such a hard on for process and box ticking and separation of duties that it took them almost a year later to set up a production CI server. I was running a Jerry rigged one on my PC and doing the builds from there for a year. Sucked so much ass. What I should have said asked in reply was, "How long do you usually take to deliver new servers into a production state that have access to dependency managers and upload permissions to app stores". What I would have got in reply is (unless they flat out lied), "Well it's not actually us that do that it's the infrastructure team. And they are understaffed at the moment and working on regulatory changes only so we'd have to try and get that prioritised. Oh and it won't have access to the internet either. We'd have to raise a request to open up the firewall and there is only one person in the company that does that." Having probed a bit deeper I wouldn't have accepted their, "oh yeah we're thinking about it in the new year" line. I would have seen that as a red flag and would have rethought that job. Oh well... You live you learn I suppose. Ask for examples of where they have done it before. If it is wishy-washy then perhaps they haven't. That's not to say you should reject the team. But at least you'll get a better understanding of what you're getting into. Don't be afraid to ask hard questions yourself. You're interviewing them as much as they are interviewing you!
Well said. I just don't agree with beeing a junior developer as I have about 10 real world web projects behind me, working for agencies as well as freelance projects. If you have a smaller project as the one you drscribed above let me know as I want to challenge myself whenever I can. Thanks
How are your testing skills? Are you comfortable with BDD? Do you write tests first then work on implementation? How about functional and end to end? Do you think about performance before implementing something new? What are you doing to optimize the JS, CSS and asset delivery to the client? Are you familiar with modern bundling and transpiling tools? What is your experience with client rendering JavaScript libraries/frameworks (Angular, React, Vue, etc)? How much knowledge of client state management do you have? What‚Äôs your opinion on unidirectional vs bidirectional data flow? How are your JavaScript language skills? Do you use ES6 ain‚Äôt a daily? Are you aware of what‚Äôs coming down the road for the language? Are you opinionated about classes in JavaScript? What do you think of functional programming and do you have any experience with libraries that facilitate programming in that paradigm? I‚Äôd expect a senior frontend dev to have a pretty good response for most of these questions.
&gt; Edge is easy to write cross-browser CSS for. Right. That was my point.
Your answer is detailed oriented which I was looking for from the start of this post. I lack better knowledge and skills for javascript in general. Performance was not a big factor so far in my projects but I do use compressed and minify version of my scripts, stylesheets for the deployment. I tend to work with git whenever project and time allows. I learned ES6 in school but didn't use it since, same goes for Angular and React. Functional programming is what I know how to use and work with but I haven't worked on bigger projects where this would be tested to greater extend. Working for agencies in Van was a learning curve but a limittation as well as whenever bigger programming should be involved a plugin or library was used. So practice was and still is learn how to work around existing libraries and framework rather then creating a new one from scratch.
Hah didn‚Äôt realize this was true for more than just my company. Yes, op, if you even come close to reporting to or working heavily with marketing folks run run run. 
https://www.worldwidelearn.com/education-advisor/questions/synchronous-asynchronous-learning.php Maybe this explains it a bit better than looking up a closed definition. Remember, you need a case in which the defined word needs to be used in order to understand that word in the circumstance of the use case. Hopefully my non-native english will make sense to you :-)
My bad. I completely misread your comment ;)
At first glance I thought the author may use emscripten, but looks like it is written from scratch. Nice work!
If you didn't change anything then it's probably on their end, I'm not sure why you would need to scrape JS anyways. Maybe it's some caching issue or something. 
I wish it was more common so I could offload tasks like creating the umpteenth custom-styled checkbox input to some frontend-frontend CSS person..
Thanks for your answer Siddharth. I think I know what async means in JS. I'm just confused by its english definition. Lets take your example. You wrote that synchronous means waiting in queue. But according to definition from Oxford Dictionary 'synchronous' means 'occuring at the same time'. But in your example I'm just waiting, so only one event happens at the time.
Adding on: how long is a typical workweek? How common is overtime? What is their philosophy around work-life balance? How would you describe the company culture? (Things like "work hard, play hard" are sometimes a euphemism for "work hard, never go home, have no life") A fun one, especially if you get a group interview, is to ask as 2 questions: what is your favorite thing about working here? What is your least favorite thing about working here? OP, don't forget that an interview is not just the company interviewing you, it's also your chance to interview the company and make sure it's a good fit for you. 
Good point my friend, the meaning is not full and quite misleading. Actually synchrony means ‚Äòoccurrence at the same time‚Äô, but in a few other context, it does mean ‚Äòcoordinated set of actions‚Äô also. Or we can say, both these are synonyms in, since only coordinated actions can occur on time. Coordination does also relate to relaying, in some context. So in summary, synchronous means, ‚Äúcoordinated set of actions, occurring at the same time and sometimes in a sequence, like a relay‚Äù. But yes, you do have a good observation.
Write in Scratch!
Some questions that I think are good to ask: * Who tests builds/signs off on them? Is it a QA team or is it expected by the devs? (Apart from normal unit testing and such) * What‚Äôs the collaboration like? * What‚Äôs the code review process entail? * is there a call/Support schedule? Sometimes devs are asked to take overnight call shifts to repair systems depending on the product * Do any people work remotely all the time? (This is an indicator of culture and how much you‚Äôll be collaborating) Always ask questions during interviews. They‚Äôre just as much being interviewed by you. 
Yes? The language hasn't changed much. All the "old" concepts still apply today regardless of ES2015, 17, and 18
Low change resistance is what makes a company worth to work at for me. I always get to find solutions to development problems after some time. Being able to implement those changes is one of the best incentives. 
sorry I did not understand. Why?
Always great to talk to other devs. Learn who the stakeholders are, and what their management style is. 
nodejs isn't a language, so you can't write a framework or tool in it. You'd say "written in JavaScript" just as the JDK reference would be "written in Java".
oh ok now it's much clearer, of course I know that nodejs is not a language but the code I wrote is strongly based to work on nodejs (eg use express for API). So it's written in javascript but you need nodejs to make it work :)
How about asking marketing to have a cross-over position with a like minded dev who is trained in frontend and marketing. Having that communication person can go a long way. 
big props for being the first person to even mention atmosphere/environment. these are people you are going to spend at least 40 hours of your week with. if they are a bunch of vile people, or people you can't get along with, the actual tech stack doesn't much matter. 
Yeah, I think most people would've gotten that. And maybe the comment was intended more like, "looks great, but this should probably be changed." I was just explaining the comment, because I've known plenty of JavaScript developers who had no idea what JDK was.
FYI: Several containers (e.g. w-1 w-11, and vice-versa) break on Firefox. The cool thing about flexbox is that is content-aware. For example, it knows how what dimensions it needs to fit a container. So I don't really get why you would want to have those "responsive classes" anyway. Kudos for the project, though :)
I was in sales for 7 years before I became an engineer. I actually enjoy working with the sales and marketing people, to the point where I'll go to bat with my PM if a sales manager (not going to take an individual rep's word on it, sorry) thinks a low-priority-but-easyish feature will close a big deal. The road map is important but closing deals is the only reason we can have a road map.
Hi mack2015rai07, It all depends on the kind of application you want to work on. For front end we have technologies like Angular 4, React JS, vu.js, or jQuery to begin with. For back end or sever tech we have Node JS, which is going good in today‚Äôs date, along with MongoDB as database, which is also around JavaScript. In fact, in today‚Äôs date people are working towards MEAN io development which stands for Mongo (database), Express (api), Angular (front end) and Node JS (server). There are some amount of books and videos on the same, do let me know, if want to explore in this direction. Thanks, Siddharth
Now that we have Flexbox and Grid, what it's the purpose of these predefined grid libraries? The whole point was that grid-based layout was tedious with before we had those modules.
Hello Siddharth, Thank you for recommendation. If you can please share links for learning more about these technologies as well as where and how to start. I have experience with Node, npm, git, jQuery so far. Other applications I didn't have the opportunity to work with and to implement them in real projects. Thanks
Thanks :)
Sorry, I was trying to explain to a novice programmer how we build sites in 2018. I did address CSS and nothing I mentioned is at odds with your response. Yes you can build a website without JS, and yes you'd spend a lot of time reinventing the wheel. There's no point in telling a beginner you can build a site without JS because there's no job or real-world scenario where a website without JS is the right answer.
Exactly my point! Well-said.
A lot of sensible stuff already mentioned. Some will probably disagree with me but my stress levels improved a lot when I switched from employers that had a B2B model with a handful of clients that had enough power to squeeze deadlines and make changes when they please using money (or the lack of potential payment) as leverage compared to a B2C model where employees had real control over the direction of their in-house projects. I don't think it's enough for the business to have a B2C model though it actually needs to be profitable and an expanding team is a more positive sign than a contracting one.
A place I interviewed at recently introduced me to [the Joel test](https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/). I think it's a pretty good set of questions.
Like this: &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; 
Wrong sub. Try /r/webdev and/or /r/web_design.
Maybe clicking the link and actually reading will unfuck your low capacity brain
Maybe you need to use a different IP address. Sometimes sites can block you if you scrape too much
You figured it out. You don't need it.
That article has held its ground well, but is also very antiquated in spots. 
I reported to marketing. Most of my time was spent doodling in meetings, occasionally someone would ask me "can we do this?" "Yup" and that was the last I heard of it
It‚Äôs useful for people that have to support browsers that don‚Äôt have css grid support. I‚Äôve worked places that have had to support really old browsers for legacy reasons. It sucks but techniques like this can help reduce the pain of having such awful support policies.
I've found that asking how many projects each developer AND PM handles in a typical week/day. This gives a good indication if you as a dev are going to be involved in a rotating fire drill type situation with PMs that struggle to keep up with client demands and questions, or if you as a dev will have time to plan and build properly, without your PM breathing down your neck with a different client's needs on each exhale.
This is the only scenario that makes sense. If the employee is a designer that knows html and css then that's awesome. If the employee is a front end dev that doesn't design or know js they are fraudulent. 
I‚Äôve only taken a cursory look at the documentation but how do you think this compares to GraphQL and the Apollo client?
You're doing it wrong if you're using flexbox for grids...
Thank you for taking the time to post this! I saved it for later. I plan on applying for front-end dev this fall. I'm currently finishing up certifications. Do you have any certs that is worth having?
But I did, I told him he was being vague
THIS. MY GOD. THIS. DO NOT EVER WORK FOR A COMPANY THAT SELLS SOFTWARE. WORK FOR A COMPANY THAT DEVELOPS SOFTWARE. THERE IS A DIFFERENCE!
Best advice I had was to remember you are interviewing them as much as they are interviewing you. Ask plenty of questions during the interview. Think about how you like to do things and compare to the answers they give. Research the company a bit first too.
Ask them what their project management looks like. How do they collect and organize issues and features? Who has control over what's prioritized and how often does that change? How long is the usual development life cycle? Ergonomics is also important. Ask where the developers are located. Is it quiet and distraction-free? Do they give you adequate budget for equipment? Do they let you choose your tools or are you locked into a specific IDE/OS? If you want a second monitor, will they give you one?
This is a great list, definitely wishing I hadn't underestimated a few of these things going into my current gig.
Why is that ?
I recommend you use Python. /r/learnpython
Why not ?
Fun Fun Function is an excellent channel. Although not necessarily aimed at the beginner level.
I think i get what you're saying. Can you give an example?
On the home page for npm - https://www.npmjs.com/ There is a search bar for searching through the packages.
Pool tables, karaoke singing nights with machine and drum kit are all huge red flags. In other words, a place that promotes itself as fun -- run the fuck away.
How does NPM's search ranking work? When it's about authority for anything, I find that Google is pretty good to return the most relevent answer. 
As an alternative to that tutorial, you might want to check out [my list of suggested resources for getting started with React](http://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-react/), and the articles and tutorials in my [React/Redux links list](https://github.com/markerikson/react-redux-links).
Thanks, will do.
Guys, heard the man. He knows what he's saying.
I think it is common at mid to large size shops. At my office we have a "UI/UX" position and that guy does, not all the css in the office, but a large portion of it.
Not really. The industry has so much demand that even without a degree you'll find work. It depends on the company, really. Established, huge, multinational companies might turn you down solely on the basis of your degree. Many companies don't care. I don't mean to take your spotlight here, but a shmuck like myself got offers from Apple and Facebook. Don't be so concerned with certs. If you have time to spare, code some projects with the tech you want to work with. Push them to GitHub. That's worth more. Even so, both certs or a GitHub page are the icing on the cake. Best you'll get out of them is a passing comment: "oh, I saw that you did X". Clap yourself on the back. A lot of people will pass the HR interview and the technical challenge; it's really about making a good impression on the last interview, provided you fit the requirements, of course. 
Because flexbox isn't meant to be used for layouts, that's where grid comes in. Floats were never intended to be used for layouts either, but hey, inline blocks are annoying. Grid is usable in all major browsers, IE11 needs to die and the best way to kill it is to start breaking it. You can provide bare minimum fallback layout with floats if you need to support ancient browsers, as grid (and flexbox) take precedence over floats when they're supported. If they're not, floats are used.
AI is compute heavy, JS is single threaded, so it can do only a single compute operation at a time. You can fake multi-thread by forking processes, but it's rather rudimentary and not going to pull of the kind of complexity needed for efficient AI
good point, thanks.
I find MDN guides to be the best resource consistently. 
For example, I work for a company that develops a cool product. However, I have to report to a marketing team that takes priority over everything. Bug that negatively affects users? Don't worry about it, I need a PR for this garbage new page I want built so I can throw money at Google AdWords. Atrocious interface? Legit let's just build separate useless features that we can market instead of fixing the features our users actually use. It's sucked out the energy and pride I used to have in our product. I'm an extremely committed 23 year old engineer that really loves innovation and commitment to user experience. It's hard working at a company that only cares about their quarterly goal.
Joel Test
So... for someone that has only ever used JS/nodejs... would you recommend Python instead?
Are there any advantages to bundling small-medium NodeJS CLI tools?
https://github.com/cazala/synaptic
Element.classList is the way to do it. It lets you easily add, remove, and toggle classes. Even IE11 supports the basic classList stuff. https://caniuse.com/#feat=classlist
Thanks for the solid advice! I'm finishing up certification from a state University. I am a bit intimidated by GitHub. I have barely scratched the surface with it. I will keep in mind to drum up some GitHub projects for my portfolio website. Could you elaborate what type of tech tests they often do?
Contrary to my original idea, I gave this a [more stable home](http://www.tinselcity.net/reddit/webpack), in case anyone finds it useful and it finally disappears from here.
I figured what is the point of writing a spellcheck script when there should be once already available. Trying to avoid reinventing the wheel.
The misspelled install...
Tech test depends on the stack of the company. Some small companies don't even do a test! Some companies go for questionnaires, and some even timed. Others go for a live coding session. There are some companies that even use a combination of these, making the interview process very time consuming (and often, in my opinion, not worth it). Either way, in your case (frontend dev), it'll probably be making a simple app that interacts with some existing api to print some results. They might sprinkle some requirements, depending on the framework like, "it needs to have a component with so and so" or "it needs to use pattern x or y". They'll usually give you from a couple of days to a week to complete it. Again, I want to stress that this really depends on the company in question. 
That was insightful! I have never done a tech type test. I'm pretty much switching from graphic design to web dev. I just feel like it's more challenging. Thanks again for your response!
Python suffers the same problem. But I believe it is used in AI a bit more. You honestly might want to look into Golang.
Nvm a simple *ngIf is enough. 
If they don‚Äôt have a team to do QA you‚Äôre most likely the QA team. Corollary to this, if they don‚Äôt have Dev ops ask about on call schedule.
Sounds like this is the first place to look, then: https://www.google.com/search?q=javascript+spellcheck I see a bunch.
The hacks I would do to support even-height columns on IE 6 were pretty hellish. Deep deep nested divs and background images.
You raise a good point. The Oxford definition for asynchronous is helpful in this regard, though: &gt; Controlling the timing of operations by the use of pulses sent when the previous operation is completed rather than at regular intervals. [source](https://en.oxforddictionaries.com/definition/asynchronous) Asynchronous program flow means that circumstances external to the main program flow dictate when code is to be executed. In the case of asynchronous callbacks/promises, it is when the callback/promise completes that the handler is executed, versus when some main program condition is reached. So, synchronous in programming does not refer to multiple events happening at the same time but rather to events happening in predictable, rigid series according to a regular clock (versus an external condition). 
https://www.npmjs.com/package/jsnet
So you want to go through an array (API list) and return each element if it's included in your list - the tools to use for that are `.filter` and `.includes`. One should probably prefer using the built-in array iteration methods over for loops.
Shadow one of their engineers for a few hours.
So you are trying to see if any of the words inside of `field.title` match a word inside of your `someArrayofData` array?
Python doesn't execute the computationally intensive code in machine learning libraries, Tensorflow for example is implemented with highly optimized c++ and cuda, the python api is just a binding to call into this code because python is a popular language in data science. This is generally true of all the python math libraries.
I guess it depends on how frequently input needs to run through the neural net. Multiple times per second is compute heavy, but a single run per user or page load wouldn't be so intensive.
Yep 
Listen to this guy
Here's a version that returns an array of titles that includes one of the countries: let someArrayofData = ['Canada', 'Syria', 'China'] async function basicReliefWeb(listOfCountries) { let payload = await axios.get('https://api.reliefweb.int/v1/reports?appname=apidoc') let payloadData = payload.data.data let matchedTitles = []; payloadData.forEach(function(data) { let title = data.fields.title; listOfCountries.forEach(function(country) { if(title.includes(country)) { matchedTitles.push(title); } }); }); return matchedTitles; } Here it is running: http://jsbin.com/vatozuwari/edit?js,console
&gt; That is just how we did it 10 -15 years ago or more. Technology moves fast. Dont set someone up to get left behind.
This reminds me of a meme... https://github.com/cazala/synaptic is likely what you are looking for. If you are super noob with AI, current technology requires you break down data, state, or observation into an image/data 2D matrix usually. Then most things start to fit together snuggly.
it is true that python is much more rich with regard to ml ecosystem, but the creator of node, ryan dahl, has recently created propel: http://propelml.org/ i suggest looking into it, if anything is going to build a big ml community in js, my money is on this new project
Thats true, but you have to also consider that the end result of your code gets compiled to JavaScript. Any other developers that utilize your code and extend it via JS (say in an OSS scenario) do not get the same private safety as they would with the initial typescript implementation. Closures provide this privacy natively in JavaScript. Disclaimer: I am not saying you should utilize closures for privatizing protected class members in typescript,just pointing out that closures do still have some value on a case by case basis. 
Python is the go-to language for AI and data science in general. While it is usually single threaded due to the global interpreter lock, there are many ways to get around that issue. It recently introduced async/await in 3.4, and asynchronous libraries such as celery allow you to run multiple Python interpreters in parallel.
How the thing works: In "main" you can call or text your friends just as skype or icq. when you are in the app, you need to put informations in your profile about (age, gender, location, first language, second language, knowledge of). "notifications" is where you receive notifications ! it's a message. "people" is the list of all that are online Lets say have a question about nebuchadnezzar. You go to "people", use the filter and select "knowledge of history" after applying the filter, you find 32 000 matching people out of 500 000 online. you send a notification to them, they will receive the notification and will reply to you, also by notification or by instant message or by calling, from the 32 000 , there will be like 15 that know the subject very well. last step: call them and enjoy your instant answer !
Python was either used or was an option to be used in all of my AI classes at university
I don't think that all of what you described is a result of working for a company that sells software, it is a result of a *poorly managed* company that sells software. Good product managers and product owners will prevent (as much as possible) the type of backwards prioritization you are describing. Yes it still happens but in my experience it is not always as bad as you are describing.
Just a quick note: all these people telling you that JS is no good for AI don‚Äôt know what they are talking about. Sure, a lot of AI/ML folks use python, mostly (in my experience) because python has a reputation for being a simple ‚Äúnon-programmer language‚Äù (which it does not deserve.) In any case, the issue there is the availability of libraries. If learning about AI is, to you, about calling other people‚Äôs libraries, then why does the programming language matter at all? AI algorithms can be learned just as easily in JS as any other language. Modern AI deployments are typically done in environments that have little need for programmers to consider multithreading. If you‚Äôre trying to write a system for deployments see a specific set of circumstances then thats a different issue. 
We think it is more intuitive/easier set-up than GraphQL. It includes the idea of subscriptions from Apollo with React Agent's 'on' and 'emit' methods.
good point
Very interesting, I made a smillar one few month ago https://github.com/seifsay3d/vulma
A couple of points. 1) This isn't particularly novel or interesting as an idea, but good luck. 2) We don't care two shits about ideas this vague in here. This is /r/JavaScript, not /r/OMGYourIdeaLooksNice. Thanks for understanding!
Don't post large chunks of code here, it's unreadable: use something like jsfiddle instead, that way we can interact with it.
A quick google of ["leaflet use image as map"](https://www.google.ca/search?q=leaflet+use+image+as+map) yields [this](http://leafletjs.com/examples/crs-simple/crs-simple.html) documentaiton page which outlines exactly how to do that. 
https://itpnyu.github.io/ml5/
I mean... Mark Zuckerberg wrote an AI system in PHP. People only use Python, because other people use Python. Javascript would be fine for AI.
No flexbox and grid are both for layouts. Grids are basically just used for more complex layouts. A single column layout? Perfect for flexbox
Floor plan, but a 3D version sounds interesting too.
In my experience words "synchronous" and "asynchronous" are not from JavaScript. They are computer science terms. So JavaScript is just following an existing convention. A synchronous operation is one where the operation is guaranteed to complete before the next operation (e.g. next line of code) is run. An asynchronous operation will kick off an operation and the programmer must pass a callback or later on perform a synchronous operation which will wait for completion. I would agree that it is a bit misleading. I don't understand why the terminology is used. There is one way I can make sense of it: If program using synchronous operations exclusively were to log before and after each operation, that list would be identical (i.e. seem to be synchronized) for all executions of the program. This would not be true for a program with asynchronous operations because operations could complete in a different order.
canvas or d3js?
D3js
He did ask for advanced JavaScript
Yes, that sounds very possible with JS, but you'll run into CORS issues, so you'll have to do work on both the frontend and the backend. In vanilla JS, you could accomplish this by POSTing the song name to an endpoint on your server, which then makes a request to an API https://www.quora.com/Whats-a-good-api-to-use-to-get-song-lyrics which responds to your server with the lyrics, which your server then sends back to the user's browser.
It's not possible for your own website to affect someone else's website like that. So if you want that, you're out of luck. It's security thing. However, if you're just looking for a few browser scripts, it's probably possible. The first part (searching the website) is probably easier to just use their existing search tool. The second part would be a script that just runs in your browser. If you want the search words to be different each time, you'd probably have to make a browser extension. It's possible to do it with just a bookmarklet, but that's getting ugly. In the end, it's a fair bit of work for something that it's probably easier to just use the browser's search for. Also, if you did manage to automate this completely, you'd probably be violating the TOS of the lyric website, and they could sue you.
nice, I would suggest maybe somehow include a list version you can toggle that shows the order of the numbers you choose.
I would like to add that in some companies not developing yourself is looked down upon, but also something to be done in your own time. 
Why reinvent the wheel, even if it‚Äôs a small wheel? No harm in having a goto framework to save you writing something. And a grid like the one here fits into the current pattern most people are using, of composing different layouts for different pages easily. 
If you don't like npmjs.com you can use npms.io (which I do), much quicker.
To me besides pay what is most important is my individual freedom. Can I choose to work from home if I feel like it? And will I get my own office as I'm unable to work in open spaces.
It's much clearer to use the appropriate array iteration methods than to use forEach: https://jsfiddle.net/o7wL7h2y/
IE11 is "old" or "legacy"? Ha. Come to pharma where IE6 is still supported.
Node can run multiple threads. 
A lot of folks get scared away by the sentence "IE11 doesn't fully support flexbox" but really what that means is like a few features that you're likely not using anyway don't work 100%.
Same goes for financial services/accounting. Really if the business views IT as another ops division or basement dwellers and not as a top level partner, then it's likely going to be shit. You'll never get a big enough budget approved to stay up on tools, and you'll be criticised and, likely, micromanaged to the point of contemplating working in the food industry.
Can you demonstrate how to override the "+" token without using transpilation?
&gt;very small This is probably why, though all I can really do is refer you to Google on it: https://www.google.com/search?q=canvas+html+blurry
Ah, that makes good sense now, thanks!
You are correct it's not always this bad. A lot of times, however, it is.
Leaflet is the common one. Also check out Cesium
No, I said that notation matters. Argument to prove my point is that while any language can perform linear algebra easily (including JS, ASM, BF, etc.), there is a difference of how you actually express/write/code the idea you have. Operator overloading was just one example. Another would be pipe operator, which is getting into JS, but there is none in Python. The notation of linear algebra (how you declare and manipulate matrices, tensors, ranks, gradients, etc.) is the language which you use to learn and comunicate. If the programming language forces you to write normal linear algebra stuff in a convoluted way, then there might be a space for improvement.
devdocs.io
To answer your 4th question: http://engineering.pivotal.io/post/the-test-double-rule-of-thumb/ (Skip the TL;DR at the top, as it's intended as a reference for people referring back to the post after reading it.)
The difference is only: the product is a who instead of a what. 
Hi /u/alexcambose, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Phanomjs
I'd look at Rust for this, although C/C++ are also good choices.
&gt; If one sits down to write code that executes matrix math (or whatever), and one starts out by trying to make a (any) programming language "look like matrix math" then I'd argue one has gone the wrong way. You are going to hate APL with passion!
This is great - I hope to learn from some of the techniques that you used. Thanks for sharing!
Thanks for sharing, looks neat.
I think maybe you're missing my point. APL is a great example. It was designed for non-programers, so that guys who wanted to get some time on a mainframe to run their "math jobs" could express things in notation they understood **instead of** learning to write software code. I don't hate Matlab code. I don't hate APL. In real life, those kinds of languages typically get converted into "real world programming languages" later before they go out into the real world. My point is that making the claim that one language is "better then another" due to the constructs in the language providing a more accurate representation of one model or another is not very useful for actual programming. Typically, languages (especially scripting languages like JavaScript) use chosen for a system for totally different reasons having nothing to do with the original problem domain. As a software developer, you should be prepared to pick up whatever the language is and work with it. If you tell me to write ML in assembler I'm not going to like it, and it's going to take a long time, but I'll be happy to do it. (Though it would be faster to just port a compiler for some other language I imagine, but I think you get my point.) 
That‚Äôs actually a plus, I‚Äôve been working with Angular 2 for ages now and being redirected to Angular 1 questions annoyed me since the very first day.
I don't find these as important. The first few I view more like an exciting challenge. If the deployment is cumbersome, I'd liked to make it better, etc. The growth and open source points I can understand may correlate to a respectful company. However I also don't specifically care about these. But they could be indicators of a good work life balance and developer respect, which I do care highly about.
I'd use request (well, request-promise-native) and cheerio to parse the document. Searching for the right page to parse is the hard part. 
Worked for B2B with a major client that made up most of their income. Can confirm. Anything the client wanted, even if not legal, happened. No matter what. Which also was terrible for morale and turnover. Haven't worked for a successful B2C yet, but now it sounds like that is what I want.
I made a bookmark that adds "angular -angularjs" to the Google search box because I got sick of having to do that every time!
I'm curious as to what is the perceived difficulty of setting up GraphQL? How does this differentiate itself in that department? GraphQL solved a lot of caching issues that I would have with typical REST APIs. It also, made it extremely simple for me to make an efficient backend compared to REST. I could have lazy loaded fields that are only requested if the client requests them, and I don't need to do anything, I just get it for free. REST is perhaps arguably easier/ more intuitive to set-up than GraphQL, that does not mean GraphQL is difficult at all, and probably more a reflection that developers are comfortable with REST as most developers "know" it, and GraphQL might be foreign to them. In reality it solves a lot of complex issues, and if there are deficiencies in GraphQL, let's document them, and evaluate whether a new tool is needed to solve these deficiencies, or can they be solved with GraphQL by contributing to the eco-system with either examples, documentation, or fixes to the current popular libraries.
Written in notepad++ 
Sure, you can take any of these as challenges to overcome. However, these are the list of questions I would ask to get a temperature for where the team‚Äôs collective head is at. If there‚Äôs no tests, that could be an opportunity to add them. Or maybe there are business folks that don‚Äôt find them valuable and aren‚Äôt allocating time to best practices. The answers to the questions are really revealing. 
Depends what you are trying to accomplish. Check out mapbox, leaflet, cartodb, or arcgis online. Mapbox, cartodb, and arcgis online are sass geospatial with Js apis. Leaflet is just a JS library
Hi /u/sadmagnet, For javascript help, please visit /r/LearnJavascript. Thank you!
Thanks 
If you know algebra, you'll be fine for 99% of jobs and roles in JS. Personally, I think you should take the one where you'll learn the most. 
Javascript CRUD App
how do you keep record of all this? if you are juggling like many interviews it may be hard to remember their answers and compare them later. Can you take notes while on interview?
yea you can learn them at your job. GET A JOB, YOU BUM
I thought deep nets were considered general AI, but I suppose it depends on who you ask. I'd still recommend Python since you can also get libraries like sklearn that let you do some of the simpler machine learning tasks and you won't need a GPU for those.
What is the syntax for that? Ive been trying to do it all day.
 const thisMenuItem = elm.menu.popup.menuitem; const lastMenuItem = arr[i - 1].menu.popup.menuitem; As a side note, the base array object here is fundamentally flawed; Javascript should never be inlined, always attach your handlers in the Javascript itself, not the HTML.
If you haven't already, load the script in your html file with script tags. Then, you'll need to query the DOM for the text you want to replace with autolinked text. This is what you want to replace in your sample code: var myLinkedHtml = autolinker.link( myText );` At a glance, all of your instagram links are in p tags, so here is some code you could set up that gets an array of all the paragraphs so you can replace them with the autolinked code var textEls = document.getElementsByTagName('p'); for (var i = 0; i &lt; textEls.length; i++) { textEls[i].innerHTML = autolinker.link(textEls[i].innerHTML); } However, this seems like overkill if you aren't using many links. Have you considered modifying the source html with hardcoded anchor tags?
Ok thank you a ton.
Thanks for the suggestions. i am trying leaflet out right now and am liking it so far. right now I need to figure out how to actually generate the map then import it to leafleft. I'm thinking of using an .svg but that's only because its a format that other libraries are using for their maps. I've seen some leaflet tutorials that use .png as the map's format. 
This talk has one of the best simplifying illustrations I have ever seen.
It's been swapped for me, i can't get angular (no js) docs to show up to save my life. I've converted all my projects to angular 5 and can't get any Google-fu to work for me
How many developers are in senior management?
Indeed it is. Also, their database is distributed as npm-package, so it's pretty easy to use it in your own modules.
I do some JS testing on a modern stack. I am by no means an expert, or authority on the subject, but I can share a little insight from my experience at work, and describe what we use. I find the best place to learn about these things are the docs on their pages. But maybe you can find a tutorial that strings all of these together. Disclaimer: We're finding this setup to be a bit slow with a lot of tests(~1100) and, frankly, poorly written tests. We're looking into switching to Jest, which looks much faster. I think it would replace Karma in our setup. [Karma](https://www.npmjs.com/package/karma) [Mocha](https://mochajs.org/) [Jest](https://facebook.github.io/jest/) [Chai](http://chaijs.com/api/) [Enzyme](http://airbnb.io/enzyme/docs/api/) [Sinon](http://sinonjs.org/releases/v4.3.0/) The process goes: Gulp task to start a Karma server, running against files, and with a framework set in options. We use Mocha for a framework. Inside the files, we use Chai for the assertions, and when we want to mount a React component we use Enzyme. Sinon is also used for Spies/Stubs/Mocks. Sinon is really cool, use that shit. I think as far as best practices, it should be the same as any language, generally. I do have a couple minor points about testing react... * Using Enzyme, you can do a full mount of the component, and it's children components. This can be really time consuming when the tests bootstrap. Using shallow instead wont render children, and helps keep your testing scope low for things really only in this component. * Some things in a component don't need render in order to test. For example say you have a function that is used as a click handler. You don't need to render, then simulate a click, then test that function's result. You're basically testing react's render, and click events work right, then your handler. Just run the handler directly, and mock the event with testable parameters. Your tests will run faster if they don't have to render, or use event listeners. Plus it keeps them more concise. I'm still learning all of this, so I may have a couple of details wrong here or there. Anyone else also into all of this stuff, feel free to jump in and correct me. 
So damn true!
Could you specify what type of map your are wanting to make? Some services like mapbox are great for IRL maps and not great for fantasy DnD maps.
I feel the same about companies that let you bring your dog to work. Despite not wanting to be around peoples' dogs, it seems to me to say that you'll be here so much that your dog will die from starvation if you don't bring it.
Ewwww... Bing...
I never thought about that. I guess I am going to have to say my dog died and I have a retard child with autism instead and his mother is an alcoholic. I got to go to let him out to play in the yard. I can't stay late or he'll pee on the rug. 
It's a map for the store I work at that can be used to display the location of items inside the store. 
Thanks. I haven't really considered modifying the source code with hardcoded anchor tags but this seems like a good idea. I'll look into it now.
Even a dumbass noob like me understands event loop. So nice. 
* Being a good software engineer is knowing what to Google so that the answer is on the first page, preferably with the color purple -Senior softwareguy at previous job 
Yeah, he's very opinionated, but some of his content is good. For instance, the [five questions every unit test must answer](https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d).
I report to our marketing head. I work on the teams knowledge base. No idea why, I suppose it's because we support a lot of stores, and the tool we've created is used by around 60,000 users.
Nice. I like how you explicitly acknowledge prior art and the advantage (speed) of this library.
/r/titlegore
But why?
Well, you have a point, in that it's important to keep track of the different companies you talk to and the stage you're at with them. As for tracking conversations, that's not really necessary. You see, once you're past the last interview, you have a pretty good idea which can be summarized by: do you like the company? Is the monetary compensation acceptable? Are you ok with their tech stack? In this way, it's pretty simple to come up with a rating by the time you walk out. That being said, yes, you can take notes if you feel you the need to keep track of every detail. Do announce you'll be doing so before the talking starts.
Have you seen [Superhero.js](http://superherojs.com/)? Very useful if you're trying to improve your JS skills, and it's got a section of resources on [JS testing](http://superherojs.com/#testing).
Is there a point of reinventing the wheel?
not they aren't.
Gotta be honest the best places are random medium articles IMO. They are usually quite good
In order to dynamically control classes. The same you'd otherwise do with jquerys addClass/removeClass/toggleClass or classList.add/remove/toggle.
I'm sorry that was not a good question, I meant why create an alternative to classnames? It has no noticeable impact in speed or size whatsoever :)
I don't know c++ but after a quick Google search it sounds like it would be most similar to an object. From my understanding a record would be a constant time access key value data structure. And a struct would define what a record contains.
A strong background is JS will always be in demand, but I would recommend you actually take on small projects. Front end is probably the fastest way for you to enter the field the fastest and then you can just grow from there. 
r/LearnJavascript
That's great, except that the service you're including will change their script occasionally and your site will break when they do. So for resources like including JQuery from Google's CDN, this is great, because you know it'll never change. However, the script above has a disclaimer at the top that says not to self-host the script because they won't support you. Why? because they intend to update the script as needed. It will change whenever they want. It's not a versioned resource, and they won't support older versions. So SRI won't actually help here. Instead, it'll cause constant headaches on your sites.
Objects are records in Javascript. You can have arrays of objects.
Wow, looks really really good!
Evolution inherently leads to a lot of dead ends. That doesn't mean those attempts were wasted.
- [ConvNetJS](http://cs.stanford.edu/people/karpathy/convnetjs/) - Library for training Deep Learning models - [deeplearn.js](https://github.com/PAIR-code/deeplearnjs) - Hardware-accelerated machine intelligence library - [dn2a-javascript](https://github.com/dn2a/dn2a-javascript) - Digital Neural Networks Architecture - [Mind](http://www.mindjs.net/) - Flexible neural networks - [neurojs](https://github.com/janhuenermann/neurojs) - Deep learning and reinforcement learning library - [synaptic.js](http://synaptic.juancazala.com/#/) - Architecture-free neural network - [Tensor Fire](https://tenso.rs/) - Neural networks in the browser using WebGL 
It has nothing to do with ES6.
You should also try using SVG on its own. It's supported in almost all major browsers, and I think much easier than learning a whole library.
Thanks for asking this question Junkyardogg. The information in this post is very helpful for me.
Yeah i wanted to have the diagram account for them as well. Great talk though!
I'm sorry, am I missing something? What is the motivation here? As far as I understand, this plugin provides functionality that is very similar to passing an arguments object to a function, and deconstructing the object back: ``` function foo(args) { const { a, b, c } = args; // ... }; foo({ c, b: 'b', a: 42 }); ``` 26 kbs and decreased runtime performance sounds like a bit too high of a price for this. 
Looks like a lot of files don't follow the style guide. :p
/r/python is leaking
Here's a sneak peek of /r/Python using the [top posts](https://np.reddit.com/r/Python/top/?sort=top&amp;t=year) of the year! \#1: [Automate the boring stuff with python - tinder](https://gfycat.com/PointlessSimplisticAmericanquarterhorse) | [357 comments](https://np.reddit.com/r/Python/comments/7kpme8/automate_the_boring_stuff_with_python_tinder/) \#2: [MS is considering official Python integration with Excel, and is asking for input](https://i.imgur.com/l2f9Zvb.jpg) | [418 comments](https://np.reddit.com/r/Python/comments/7jti46/ms_is_considering_official_python_integration/) \#3: [Python Cheet Sheet for begineers](https://i.redd.it/4iklecheyw601.jpg) | [130 comments](https://np.reddit.com/r/Python/comments/7mwgtw/python_cheet_sheet_for_begineers/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I'm impressed. 
He said all micro tasks run at the moment when the stack goes from having an item on it to empty.
I can tell this one is.
Nice design, thanks.
Or function foo({ a, b, c }) { // ... };
It's written in ES6
Type Angular.io instead of angularjs
Intuition.
Cool, I just don't like how you can scroll the page through the pop up.
It primarily is about simplified syntax and convenience. Especially if you mix positional and named parameters or use named arguments to pass positional parameters. Passing an object means always having to pass an object. This Babel plugin in contrast allows you to use regular positional parameters, regular object-based options and any mixture of them.
That behavior is customizable with the `backdrop` boolean parameter, set it to `false` to prevent disabling scrolling on a document.
Nobody cares about your random flailing to get "frameworks" to work or your opinion on which was best.
Yes, but this means you are then forced to always call this function with the parameters in an object. If you instead use the regular... function foo(a, b = 42, c = 7) { // ... } ...you can use multiple ways to call this... foo("foo", undefined, 5678) foo("foo", c = 5678) foo(c = 5678, "foo") ...and always effectively get the equivalent of a call: foo("foo", 42, 5678) You can even combine your object-based options with this plugin: function foo(a, b, options = {}) { // ... } foo(bar = "bar", 1234, a = "foo", quux = "quux") // -&gt; foo("foo", 1234, { bar: "bar", quux: "quux" }) 
I've been using this for years, pretty decent. Unfortunate reddit auto-image...
We have a beautiful integration with Angular, take a look as well: https://github.com/sweetalert2/ngx-sweetalert2
But this is what I expect function foo(a, b = 42, c = 7) { console.log(b) // 5678 console.log(c) // 7 } var c = 0 foo("foo", c = 5678) console.log(c) // 5678 and it looks like this plugin wrecks that potentially breaking any code that depends on that existing, valid behavior
If you are using Typescript with source maps for debugging, you should hardly care what your compile target is, but ES5 is not going to make you dumb. Arrow functions not make one great.
Compiling to ES3/5 adds overhead. It increases the file size and there's often a performance hit, too. There really is no point in doing that. Especially if you're using APIs and CSS features which IE11 doesn't support anyways.
The first question is: what do you need your website to do that would require JavaScript? You can build websites using just HTML and CSS, and maybe a server-side script for some added functions. If you're building a simple display site, then you could probably build it without JavaScript unless you need it added bells and whistles. 
Thanks for using SweetAlert2! Reddit auto-thumbnail should be fixed in https://github.com/sweetalert2/sweetalert2.github.io/commit/81255c9ba7a2b21d3bc9bf069109481894591de2
Love this. How long did it take you to craft this?
my website is a Laravel website with PHP, it is a enterprise application and can't build it without javaScript. it has a lot of AJAX call everywhere. but i want to make it work in a simplest way if user wasn't able to access javaScript. how i can do this. how i can if user javaScript wasn't enable redirect him or show different content?
This is awesome!! I'll use it in all my future projects!
Really great job thanks for sharing
upvoting for accessibility, great job
&gt;if user wasn't able to access javaScript. Is this an actual problem that you run in to? Are your bosses telling you that it needs to work without JavaScript? Are there users complaining? The reality is, making pages work without JavaScript usually requires much more work than it's worth. Even considering those who don't have JavaScript enabled can cause huge time sinks to essentially maintain 2 versions of the same page, or if you buy in to the "progressive enhancement" mindset, it could possibly cause poor user experiences for those who do have it enabled and you're still left with maintaining 1.5 apps instead of 1. There are definitely some use cases where making the page work without JavaScript, but those use cases are becoming smaller as time goes on. It mostly depends on your userbase. JavaScript vs No JavaScript has actually been a huge argument between the current generation of developers and the last, mostly because of a lot of problems with earlier versions of the web and JavaScript. It has only been in the last 3-4yrs that people have finally accepted that we don't really need to support NoScript... unless of course you do, but for most enterprise applications you have the ability to tell your users "you must use JavaScript" without much pushback. So, to answer your question. You have to make your page work with fully server rendered code. If you're a JS heavy page built in something like React or Angular, you will most likely just need to create a NoScript version of the page and maintain that separately. 
 const record = [ { name: 'Ned' }, { name: 'Jon' }, { name: 'Robb' } ]
Yes, if you really use assignment expressions within a function argument list (which I personally consider a rather nasty coding style) it breaks this code, of course. As explained in the README of the Babel plugin the assignment expressions inside a function call argument list is now treated as "assigning to a named parameter" instead of "assigning to a variable in the lexical scope". Well, that's by design.
Yes, if you really use assignment expressions within a function argument list (which I personally consider a strange coding style) it breaks your expectation, of course. As explained in the README of the Babel plugin the assignment expressions inside a function call argument list is now treated as "assigning to a named parameter" instead of "assigning to a variable in the lexical scope". Well, that's by design.
I didnt RTFM :(
So far IMO I really enjoyed the Jest + sinon + enzyme for reactjs tests. I came from JUnit testing in java and front end js testing seemed too complicatef upfront. Later, after studying more deeply I found it ok to do. About mocks and stubs, you could go to the sinon web doc. They have a good documentation and examples. Another thing: try to run some test coverage report tool. It helps you see which code parts you're actually covering and what necessarily needs to be tested. Again, jest has a good coverage report. I've seen some courses on udemy and egghead on js advanced testing. I did not do any of them but maybe they're worth trying.
I have been using this for a really long time.. excellent library :)
I think it was forked a long time ago. The original was abandoned I believe.
Looks awesome but scary - don‚Äôt want the user to get stuck with a broken site.
This is the intended behavior, because all promises in the array are resolved. That allows you to use the following construct: Promise.all([ condition1 ? promise1 : null, condition2 ? promise2 : null promise3 ]).then(...); instead of having to filter the array before running it through `Promise.all` to avoid errors.
Been using this for 5 years. Excellent library.
Okay I see, but why does the Integer 1 resolve? I am struggling on this particular because it is not a Promise which could not ever resolve ...
Because all the promises that you passed in were finished. You passed 0, and all 0 of them finished.
oh man i never knew this existed but its awesome! definitely going to look more into it later
Because not-a-promise is transformed into a resolved promise with whatever the value was.
I have no idea why echojs has been terminated... if somebody finds a link with the reason please share it
The promise API will effectively wrap non-promises in promises when used in situations where promises may be expected. Promise.all is an example where, given an array, it will wait for all promises in the array, and assumes all non-promises are immediately resolved promises with those values. Promise.all([1, 2, 3]) // can be seen as Promise.all([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)]) Same applies to return values from then() callbacks. These can be regular values, or promises. When not promises, it basically assumes the value to be an immediately resolved promise with that value. somePromise.then(() =&gt; { return 5 }).then(() =&gt; { // when previous promise in chain resolves... }) // can be seen as somePromise.then(() =&gt; { return Promise.resolve(5) }).then(() =&gt; { // when previous promise in chain resolves... }) This is not unlike how thrown errors in promise callbacks get wrapped in a reject somePromise.then(() =&gt; { throw 'error' }).catch(err =&gt; { // when previous promise in chain rejects... }) // can be seen as somePromise.then(() =&gt; { return Promise.reject('error') }).catch(err =&gt; { // when previous promise in chain rejects... })
Looks great, although on a quick test on mobile (iPhone) the modal with long text doesn‚Äôt scroll very fluidly, takes ages to scroll. Are you aware of this? Also, content changes behind the modal when opening a modal but returns to its original state when closing, and its really obvious, also looks and feels weird. Again, known issue?
Thank you for this very detailed answer! Now it seems to be clear to me. I just missed that all non-Promise values are turned into Promise.resolve(value) by default what then gets resolved. Cool!
So it is faster but nobody notices even with very large and complicated apps? :)
If it's about changing the appearance of a web page, I'd rather override the site's CSS using a UserStyle with the help of a browser extension such as Stylus or Stylish. Because having too many browser extensions will slow down my browser. The CSS override code would be: .metabar, .js-stickyFooter { display: none !important } You can post the code to https://userstyles.org/ if you want to made it available for other UserStyle users.
How can i call `.showLoading()` using angular integration? Or any other method from native sweet alert.
This is really ‚ÄúSweet‚Äù üëçüèª
Yup. I like to write my own open source libraries and use them instead.
This is cool. I didnt know of this. Thanks for pointing out.
First and simplest answer is simple statistics. A population of a billion people is going to produce a lot of losers. Likewise, you're talking about the freelancers who weren't good enough to get hired for full-time work, though that doesn't explain why Eastern European freelancers are better than Indians.
With ES6, it's as easy as using the "await" keyword. If that's possible, you should do that. If you can't use ES6, my recommendation would be to use webpack (or something else) to write this in ES6 with await, and then compile to ES5. If that's not possible, you've got a fair bit of pain in your future. You'll have structure your code to use callbacks and only continue processing as you get the callback from each file check. It's not fun, and I'm not even sure how I'd structure the above to do that cleanly. Did I mention ES6's await command yet?
A11y is a must in 2018.
Thanks guys, but yeah, I can't use ES6. Await is part of promises correct?
The spring animation is a little sharp, I'd put some more damping on it.
careful, the webdev subs are lousy with hacks who'll scream at you over this claim 
The original plugin was unmaintained for a long time, than a short period of maintainace and now it's unmaintained again. External PRs and issues are ignored. Compare: - http://isitmaintained.com/project/t4t5/sweetalert - http://isitmaintained.com/project/sweetalert2/sweetalert2 I forked it 3 years ago. Here's the migration guide from the original one: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2
Pretty cool ;) Have any other projects as well?
You will not regret this :) We are extremely good in hearing out the community: isitmaintained.com/project/sweetalert2/sweetalert2
Not a lot by any means, but here's some: - https://github.com/JorgeBucaran?tab=repositories - https://github.com/hyperapp/hyperapp - https://github.com/picodom/picodom
&gt; Looks great, although on a quick test on mobile (iPhone) the modal with long text doesn‚Äôt scroll very fluidly, takes ages to scroll. Are you aware of this? Now yes, thanks for reporting: https://github.com/sweetalert2/sweetalert2/issues/905 &gt; Also, content changes behind the modal when opening a modal but returns to its original state when closing, and its really obvious, also looks and feels weird. Again, known issue? Nope, and I can't reproduce this. Could you please record that and submit the issue: https://github.com/sweetalert2/sweetalert2/issues Many thanks @davidknight for mentioning these issues, we'll work on the iOS user experience.
I don't think there's enough information to determine whether it's possible or not. Also, the `this` seems to be a HTML element (most probably a link), but you tried to assign its `click()` method with a boolean. This doesn't make sense.
Like this: &gt;&gt; &lt;&lt; &lt;&lt; &lt;&lt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &lt;&lt; &lt;&lt; &lt;&lt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &lt;&lt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt; &lt;&lt; &gt;&gt; &lt;&lt; &gt;&gt;
I mean you can do it wherever you want. For my job we put them on the exact location on a global map. Setting it at the Equator would be super easy and would probably get you what you need
GraphQL is great, but we've found that sometimes GraphQL server-side set-up (and client-side use) has a steep learning curve. The differentiation, as you point out, is that 'REST is perhaps arguably easier/more intuitive' -- so in the meantime, we're trying to bring out some of the features of GraphQL in a paradigm that's might be more familiar. 
‚ÄúZero dependencies‚Äù. Is there a better phrase in JS world than this??? Thank you op. üòä
But please customize it. Shady AD sites are all using this alert style.
Append `-angularjs`to your search term. For example `Angular DI -angularjs`.
I'd probably then toss the framework and write my own PHP if it was a dire necessity to not have JS. Still, I'm more aligned with u/trout_fucker in that sometimes we can't just pander to those seeking to keep JS out of their lives, and instead let those few users fall through the cracks and be left behind in the world.
Those aren't shady AD sites, that's Carbon Ads which aren't included in the library, but in the presentation website. Carbon Ads is highly relevand technical ads, a lot of open-source projects are using it, Vue.js, jsfiddle, etc.
Neat. I can think of a few ways to do this but none so simple as your lib.
This depends on Promises doesn't it? If so, the dependency on Promises means no IE support: https://caniuse.com/#search=promise and as such you can't use it as a script execution blocker until you have a result like the native confirm(). (not saying that's a bad thing, just that its a thing to be aware of)
Not quite, `await` is syntactic sugar on top of promises. You could do this (just roughly, haven't tested it): function checkIfVideoPartExists(videoId, partIndex) { return new Promise(function(resolve, reject) { var url = '/videos/' + videoId + '-Part-' + partIndex; fetch(url).then(function(response) { if(response.status !== 200) { return resolve(null); } return resolve(url); }); }); } function getLastVideoIndexOfPlaylist(videoId, index) { return new Promise(function(resolve, reject) { checkIfVideoPartExists(videoId, index).then(function(url) { if(url !== null) { getLastVideoOfPlaylist(videoId, index + 1).then(function(index) { resolve(index); }); } else { resolve(index); } }); }); } function loadPlaylist(videoId, index) { return new Promise(function(resolve, reject) { getLastVideoIndexOfPlaylist(videoId, 1).then(function(index) { var playlist = []; for(var i = 1; i &lt;= index; i++) { var url = '/videos/' + videoId + '-Part-' + partIndex; playlist.push(url); } resolve(playlist); }); }); }
Yeah the question actually becomes *more* ambiguous after reading the example
fixed in https://github.com/sweetalert2/sweetalert2.github.io/commit/75087f4f75cca441a6f3758251587ccc2da3ed67 thanks for reporting!
Looks smooth and professional. 
I use it in most of my projects, really nice work. Well done
Thanks for all the information and the responses! I ended up keeping the front end separate from the backend and just deployed both to heroku as separate apps. I still need to figure out a better deployment process so I'm not shifting my variables for the API and few others between dev/prod, but its up and kind of working! Thanks
Good point but to be honest I‚Äôve long stopped worrying about IE support - partly because it‚Äôs excruciating but mostly because I make Cordova apps these days. üòä
Thanks, I'll have to check that out - especially since learning AWS is probably a good career move right now anyway.
üëç 
No its not an HTML element its code taken from a class I wrote in javascript
Hate to rub it in... but just explored the GitHub repo and found this: https://github.com/sweetalert2/ngx-sweetalert2 Angular support...! THAK YOU AGAIN OP!!! :D
**Reported for referral link spam.** https://www.reddit.com/user/UnkindTabore/submitted/ https://www.reddit.com/user/fegertsa/overview/ https://www.reddit.com/user/trukirukia/submitted/ https://www.reddit.com/user/buyuksd/submitted/
I just tried to replace sweetalert with swal2 in my project, but the swal2 window pops behind a bootstrap modal. I thought it was related to z-index, so I gave the swal2 window z-index of 10000000, but it didn't help :(
I'm a little unclear on what result you're trying to achieve. Are you trying to get an in order list of the videos that exist? If I'm understanding correctly, you can create an array to store the results and a counter so you know when to handle results: if (v.toUpperCase().indexOf('-PART') &gt; 0) { (function loadPlayList() { var numberOfVideos = 4; var counter = 0; var results = []; for (var i = 0; i &lt; numberOfVideos; i++) { check_file(i, 'videos/' + vcleaned + '-Part' + i + '.mp4'); } function check_file(i, path_of_file) { console.log(path_of_file); http_check = new XMLHttpRequest(); http_check.open("HEAD", path_of_file); http_check.onreadystatechange = handleHttpResponse_check; http_check.send(null); function handleHttpResponse_check() { counter++; if (http_check.readyState == 4) { if (http_check.status == 200) { console.log('file exists'); results[i] = path_of_file; } else if (http_check.status == 404) { console.log('file does not exist'); results[i] = null; } } if (counter === numberOfVideos) { on_checks_end(); } } } function on_checks_end() { // do something with the results array } })(); } 
According to specs, if any of supplied values are not promises, they are wrapped with Promise.resolve
We are trying to make this project as much community-driven as possible, the contributing steps are very easy: https://github.com/sweetalert2/sweetalert2#contributing I would be more than happy to review and merge your PR, thanks in advance! 
Hi /u/murder0tica, For javascript help, please visit /r/LearnJavascript. Thank you!
Promise is still a normalized, living standard. Polyfills cannot be considered as "normal" dependencies. SweetAlert uses standard, nothing more, nothing less.
Should work just fine, here's the Bootstrap 4 + SweetAlert2 example: https://jsfiddle.net/limon/hz6un8s0/
Very nice and professional looking. My only concern with using something like this is the HUGE footprint - minified and gzipped it's 13KB - to put that into comparison, it's almost half the size of jQuery 3 (which is 30KB minified + gzipped). I'd imagine that's just because of the shear amount of flexibility and options you get but meh, seems pretty hefty for a confirmation box. Would be nice to have a more "modular" design so you can import the bare basics and styles you need.
Yes! We're totally aware of that and this is due to a big number of features, some of which being decouplable. We recently added bundlesize to watch the final bundle size and be more careful on future additions. Also, we're thinking about important rewrites in the feature to allow a more modular system and benefit from tree-shaking in module bundlers, for example. In the end, 13 KB is a lot or is tolerable depending on what you're doing. If you're working on a big backend with a lot of UI libraries that already weighs more than 500 KB and make intensive usage of modals, then it's nothing. If you want a super fast website with a single alert, it's just big. But to conclude, don't worry, we're on it. Just don't expect it tomorrow as we're in a stabilization phase and future APIs are not defined yet as there are many ideas but no concrete proposals.
cute : )
I've been using this for years. I use it instead of a bootstrap modal whenever I can. I believe the main reason for when I can't use it is when I need to have more than 1 input in the pop-up. And I don't think I remember it having a good way to customize the HTML content. In version 1, I modified it to allow for more than 2 buttons and that's now a feature in version 2. 
Reflection is a bit misleading, isn‚Äôt this like an Observer sorta thing
Are you sure? Inspecting at the generated HTML I am not seeing what I normally see on an accessible dialog.
Looks really nice. I recently made basically the same thing for a Vue project building on bootstrap-vue's modal to be able to change the modal content and buttons and 0-inf inputs. By the end it got pretty custom, to the point I feel I should make it from scratch, without bootstrap-vue. I might look into this later :)
A little late to the party, but I'm in the process of building a website hosting platform with support for social media management. https://imgur.com/a/XuPPX
So you want to grab the ingredients list and nothing else? One solution would be to take all `.caption &gt; p`s and filter out those whose lines don't (for the most part) start with a digit or a fraction.
Even if you have to support IE, you can still use ES6 and then use Babel / polyfills to make sure everything is ES5 compatible.
I like it! However, I am getting a slightly jarring content change when the modal opens/closes, as mentioned by /u/davdnknight From what I can tell, it's caused by the modal getting rid of the side scrollbar (and changing the width of the page in the process), then having the scrollbar reappear on close (and going back to its original width). This makes the content "jump" a few pixels left then right. Here's a gif: https://imgur.com/a/q0T1m
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/NQSVyYP.gifv** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20du5f25i) 
What you're looking at here is website scraping. The most effective tool is either `cheerio` (jQuery for node.js), or a Chrome Snippet. From the website there, something like this will pull out individual paragraphs; var elems = $('div.caption'); elems.map((x,i,a)=&gt;{ var elem = $(i).find("p"); elem.map((xx,ii,aa)=&gt;{ var ing = $(ii); ing.map((xxx,iii,aaa)=&gt;{ var paragraph = $(iii); paragraph.map((xxxx,iiii,aaaa)=&gt;{ console.log($(iiii).text()); }); }); }); }); From there, you can parse using a combination of regex, or by identifying keywords such as 'INGREDIENTS', or by recognizing character return characters (e.g. \r\n) and working from there. It's not a quick task, but it works well if you get it right and you know the general layout and format.
I contacted few freelancers from India, almost 100% satisfaction. I gave them projects and they always told me yes, but they knew nothing. All they want is that I will release money asap. Always have to run behind, but freelancers even from Latin America are better. I don't want to generalize but 90% of them are just very bad. Eastern European on the other hand are asking around and want to finish problem!
your username implies you'd be only _slightly more_ obnoxious than you actually are. So I guess that's good news.
Since you can't use async or any other ES6 features, you'll have to utilize the good 'ol callback function: var v; var vurl; var vfile; var vcleaned; var endfile = 0; document.addEventListener("DOMContentLoaded",function(event){ (function(){ vurl = window.location.href; v = vurl.split('?v=')[1]; vcleaned = v.split('-Part')[0]; var video = document.getElementsByTagName('video'); vfile = 'videos/' + v; video[0].setAttribute('src', vfile + '.mp4'); })(); (function showTitle(){ document.getElementById('vTitle').innerHTML = v.replace(/-/g,' '); })(); function check_file(path_of_file, callback) { console.log(path_of_file); http_check = new XMLHttpRequest(); http_check.open("HEAD", path_of_file); http_check.onreadystatechange = handleHttpResponse_check; http_check.send(null); function handleHttpResponse_check() { if(http_check.readyState == 4){ if (http_check.status == 200) { console.log('file exists'); return callback(true); }else if (http_check.status == 404) { console.log('file does not exist'); console.log(http_check); endfile = 1; callback(false); } } } } if (v.toUpperCase().indexOf('-PART') &gt; 0){ (function loadPlayList(){ for (var i=0; i &lt; 4;i++){ check_file('videos/' + vcleaned + '-Part' + i + '.mp4', function(fileExists) { console.log(fileExists); }); console.log(endfile); } })(); } }); 
Don't uses &lt;dialog&gt;
Wow! Love these and have used them for awhile. Great job and great looking modals üòÅ
You might have to explain your problem in more detail then. I'm afraid I'm not understanding.
I read wetback :/ I was a bit confused lol
Yeah, it is JavaScript. Unfortunately the code for the performance is on the iPads at school so I can't get to that till tomorrow. I'm pretty sure it was something very simple like "While (true) { setMainLed({ r: Math.round(Math.random() * 255), g: Math.round(Math.random() * 255), b: Math.round(Math.random() * 255) )} await delay(0.5) } Would I put setInterval at the beginning of the loop and clearInterval at the end? Sorry, I'm quite new to programming in general.
Thanks for making it. I've just realised that variables.scss has been added. Top work!
I'll try that tomorrow, thank you. And I understand. The way I described the loop is pretty much exactly how that is and that loop is at the very beginning of the program anyways. The only code before the loop I specified in my previous reply is a speak command that just helps with timing pressing play on the song it will be in sync to. 
Looks great in ServiceNow 
I wouldn‚Äôt use canvas. Try [something like this](https://codepen.io/jo-asakura/pen/stFHi) 
You could use requestAnimationFrame to keep rendering the circles.
You're a bit confused about the event system here, I strongly suggest reading up a bit more on mozilla: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener Long story short, you need to add the event listener outside the lemon() function. that will handle the events. inside your function you want to call jokeElement.click()
With Canvas, you'd want to have a setInterval that runs a function that: both clears the canvas, and draws each circle according to the current time.
The second issue could have to do with overflow changing thus removing and showing the scroll bar on &lt;body&gt;. Totally just making a guess though since on mobile. 
Surely you don't enjoy using Cordova.... 
http://imgur.com/svvvegL Did you see the secret message?
Nice! Can you explain how you did it?
You need clipping for that. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip
Ha this won't go over well
I just used inspect element and added "checked"to all of them. 
In my example I used a finite limit, but was hoping to get rid of it and exit the XHR requests when the first 404 is returned, but that wouldn‚Äôt be reliable anyway since they are asynchronous. I like what you did with the counter. I will try that. I didn‚Äôt realize I could break out of the XHR function that way. Thank you.
Ideally, your build process should take care of all of that automatically, so it's not actually that tedious.
I see the same issue. Using the web view inside Apollo. Tried in Safari too, and it‚Äôs the same. 
True, thanks again for showing me some new things!
If I'm understanding you correctly, then it would be easier to work with because the coordinates would be easier to manipulate right? If that's the case then you addressed a future problem I was considering that may come up. 
It looks good.
Prior to `classList`, the only way to manipulate (or compare) the classes was to use the `className` property. The extra spaces didn't really matter. The render engines look for white space separated class names which makes the trailing space harmless. The standard libraries (or mini libraries) to add/remote/toggle/search classes all knew how to handle the white space safely. Today, `classList` is well supported and I'd use it in any new work, but I doubt I'd go back over my older code and update it.
Thanks a lot!!!
https://codepen.io/anon/pen/BYZrVZ
Already make heavy use of it. 
Discovered this gem a few months ago, absolutely love it, using the Vue wrapped version in most of my projects.
Es6 is vanilla javascript and it‚Äôs not ‚Äònecessary‚Äô but I feel it would be pointless to get into any of these without at least a basic understanding of the core. 
It'd be like trying to learn Calculus without knowing Algebra. It might be possible to a small extent if you're smart enough to see the patterns, but you won't *really* understand much until you have some idea of how the base language works.
Yes. Node.js is just vanilla JavaScript. ES6 is just the latest version of the language, meaning that it is incompatible with some runtime environments (eg. Some browsers)
I know a lot of people would probably say you need to learn the basics first, but I would just start playing with React or Node and see if you can make any sense out of it. If you get super confused maybe start with the basics. As for ES6, it is the new JS. I would start learning it off the bat. It will run in all modern browsers, so there shouldn't be a huge barrier to entry. [Wes Bos has a good, free series for JS beginners that utilizes ES6 throughout while providing practical examples of modern web apps. ](https://javascript30.com) For starting off with React check out [create-react-app](https://github.com/facebook/create-react-app). 
Said before, but your template is horrendously broken, for a start, so you should probably start there before moving on.
Naw man, [sTUdlYcAPs](https://en.wikipedia.org/wiki/Studly_caps)
Honestly you could learn ES6 (aka new vanilla) without having to learn old vanilla. Although. Not EVERYTHING has moved to new vanilla, so you would learn new vanilla and then not understand how your x amount of third party dependencies work because they‚Äôre in old vanilla. In the end, do what you want. If I were going to get back into JS for a new project, I‚Äôd do ES6 straight up
I've used jsfiddle many, many times and have never seen it do that, the problem is on your end.
That's weird. Likely the browser. The template actually has the correct syntax (non-caps) on all smaller case, I just didn't notice back then... and until a few hours ago. 
You know, Vanilla JS can do absolutly same things what other frameworks can do.. so imo it is better to understand not only basics, but how language works itself and after that learn some frameworks.. Because learning basics is so damn easy, but learning how to program is really hard :) i suggest to read some indepth book about js, starting from basics through advanced... for example YDKJS series is amazing.. not only for js, but for overall progrmming.. you will notice after reading this books how good you are in that field and how fast you will be able to learn another language. NEVER start learning from framework.. its like learning maths without knowing how to count.
Good stuff
Event listeners only first when the event occurs. Perhaps you just want to call the method: function lemon() { let randomNumber = Math.floor(Math.random() * Math.floor(array.length)); let randomJoke = array[randomNumber].id; console.log(randomJoke); addFavorite(); } 
This is impressive. Good work!
ramda already does this.
I once knew this guy who worked with me and he came out of a bootcamp. He was stellar with Angular, and great at CSS. He even topped me in CSS on a few occasions. I was impressed with how much he knew until we were tasked with building a medium sized static site. He had no idea what to do. He asked me questions about the 'application state' and how that would work without a framework. He couldn't create a linked image without a component to help him. The guy was still great at what he did, and I think eventually he'd make a great full-stack dev, but that's a serious achilles heel. Master the basics, then learn the frameworks. Frameworks come and go, but the underlying languages and patterns are what really matter. Its not the tools in your tool belt, it's how you use them. Having a framework on your resume might get you to the interview, but demonstrating holistic knowledge of programming, logic, and software architecture is what gets you the job.
In [its own introduction](http://jsonapi.org/), JSON API describes itself as "your anti-bikeshedding tool". And you're bikeshedding the shit out of it.
What is bike shedding?
&gt;#[Why Should I Care What Color the Bikeshed Is?](http://bikeshed.org/) "The really, really short answer is that you should not. The somewhat longer answer is that just because you are capable of building a bikeshed does not mean you should stop others from building one just because you do not like the color they plan to paint it. This is a metaphor indicating that you need not argue about every little feature just because you know enough to do so. Some people have commented that the amount of noise generated by a change is inversely proportional to the complexity of the change."
Discussing for hours about stupid things you can understand when the time would be better spwnt letting smarter people discuss things you don't understand.
Surely if this was actually a problem for you it could be fixed with a regex in about 5 minutes. Right? What am I missing?
Thats true ramda already does this, but if someone is not using ramda and want to do function composition so they can use this. I am also handling promises in it so if your first function return promise so you don't have to expect promise in your second function, it will pass response to your second function.
Thank you. I was thinking I could use something like getElements. Would that work?
Thanks how do I filter out? Should I use if regex matches?
Its written in ES6, but it will be also available in ES5 soon, so if someone are not using ES6 and they still want to use fn-pipe so they would be able to use it.
It would be easier to come up with an array (or character codes) of numbers/fractions - you're only concerned with the starting character, after all.
Sweet stuff! 
Have you looked in the browser console or network traffic inspector? If there are errors being produced they will appear there.
That's true but some ingredients do not start with numeric characters. For example, "oil for frying" but I can leave out stuff like that. What do you think of this code? I'm not good in js var string = document.querySelector(".caption &gt; p"); var re = new RegExp("^([a-z0-9]{5,})$"); var ing= if (re.test(string)) ; document.write(ing); 
I‚Äôd learn the basics of JS before diving into frameworks. You can start with ES6 but make sure you understand how classes really work (they aren‚Äôt real classes, but actually just objects that have a special function for a constructor, and methods on a prototype). I would recommend understanding in depth: - Primitive vs object types - Pass by value - How ‚Äúthis‚Äù works and how to manipulate it - Scope and closure - JS‚Äôs single-threaded nature and call stack - Async: callbacks and Promises - Basic functional programming with Array methods forEach, map, filter, reduce Once you understand these things you‚Äôll be much more prepared to tackle something like React.
I said &gt;One solution would be to take all .caption &gt; ps and filter out those whose lines don't (for the most part) start with a digit or a fraction. Not all lines need to start with numbers, but when identifying &lt;p&gt;s with ingredient lists, *most* of their lines should start with numbers. It's not that the lines without numbers get dropped, but that *entire paragraphs without lines* that start with numbers/etc get dropped. That would be the technique to identify lists in the style of the RED VELVET BROWNIES section. It's a whole lot easier with the sections that use &lt;ul&gt;, since they're almost certainly the ingredient list you want. document.write is definitely not what you want.
Since I'm already using Bootstrap, I was using [Bootstrap Dialog](https://nakupanda.github.io/bootstrap3-dialog/) which means that JQuery was also needed. SweetAlert2 might be a better solution!
I'm not familiar with that service api but it seems reasonable to expect that the image from the api is a uri and not an image itself. If that is the case it might be as simple and parsing the results from the Api and replacing any desired image links based on a pattern with local paths to images. I'm assuming this is a web server using the Eventbrite API and 'locally' means on the web server. 
Thanks for the nice issue-report! Could you please specify OS and browser you were using to record this gif? 
Username checks out. Consistency in your own API is key, who cares what case the variables use if you have that. I've seen plenty of snake case, too.
Did you check https://openlayers.org/?
Ok. Could you please draft like a sample code? If I dont use document.write() should I use console.log?
/r/ProgrammingBuddies 
Kebab-case JSON is good because it forces JavaScript to have an data access (brackets) notation and possibly and explicit import step or schema serialization tool instead of just being lazy and assuming and taking the data structure as-is.
I'm glad Edge is still improving. For me though, Edge is still irrelevant as long as it's not available on the older windows. IE11 will still have to be supported until then. That's a shame.
https://jsfiddle.net/ra608rvL/ That should give you enough of an idea to figure out the rest &gt;If I dont use document.write() should I use console.log? No, you should create an element and insert the HTML, or something like that
Thanks. I plan on using the code with Google tag manager to automatically add recipe schema. I've been thinking of how to do this for days. Thanks again. 
I stopped reading after it says this is correct code. reassigning(a_constant_value) === bad; const foo = 0; const boo = 0; if (foo === 0) { boo = 1; } else { boo = 2; }
Thanks for the heads up. Will try to replace that old sweetalert soon.
Same feeling here :)
Finally.
Fill out the array with unchecked checkboxes each time the button is clicked. Alternatively, remove the checked element from the array when you check it.
So what? My point was that in a real world application data has to be validated, deserialized and mapped and whatever anyway, which does a bit more then a single bracket access would cost. 
The link attempts to take us to the /graphs/traffic page which isn't accessible to people outside the development team. The correct link is https://github.com/mdbootstrap/bootstrap-material-design/
From what I can gather looking at it quickly, it looks to do the following; - Get all `ul` elements for each item in `menuIds` array - For each `a` element, it adds a class `subfolderStyle` - It adds an offset to the width of each item - It assigns function handlers for `onMouseOut` and `OnMouseOver` for submenu items - It then hides all the sub menu items by setting their `display` property to `none` This is called after the window `load` event is triggered.
This is exactly what I would suggest too. Change each element to unchecked, run your random selection function, and then check the box based on the result. Alternatively, if they're allowed to have more than 1 check box ticked, you could use a selector (jQuery would work for this); `$('input:not(:checked)')` will return all input elements which are not checked.
Tagging for future reference (Chrome background sync api)
I wanted to see what your response would be to it ;) `document.querySelectorAll("input:not(:checked)")` will do the same with regular JS
https://media.giphy.com/media/9MFsKQ8A6HCN2/giphy.gif
My brain kept reading this title as "Javascript: Promise.prototype is finally at stage 4"
The property this.click is there just to store the boolean that the when function returns. Its like memorizing what happened last time so the function can determine what happens this time. So lets simplify the queston: Can I create a uniqueid when the function executes ? --&gt; Does a function have a unique property when executed which says from what file and which line it has been executed ? I already tryed to console.log arguments.callee but it just logs undefined.
You said the function should auto check (which I assume tick the checkbox), yet your code toggle the checkbox. Which one is correct?
No coding in vanilla and es6 are completely different. There‚Äôs very little uses for vanilla unless you are working on someone else‚Äôs project where they decided to use vanilla.
Well. That should have happened like three years ago. How was `finally` not in the original A+ Promises spec?
There are only two things I can't stand in this world. People who are so overly fastidious as to actually argue about naming conventions, and kebab-case.
 (async () =&gt; { try { await foo(); } catch(error) { logError(); } doFinally(); })();
&gt; How was `finally` not in the original A+ Promises spec? Promises were not seen as a _flow control structure_ but rather as their original intention of being a _future value_.
I think it's important to note that everything basically compiles down into vanilla JS. Even ES6 gets transpiled if you want full browser support. So, yeah, you should learn to cut some wood and hammer some nails if you want to build a house.
And honestly, with async await, why would we still need a finally?
This really is a beautiful UI framework. I wish the designer would make a React version, too!
It seems disingenuous to put "used by 40,000 companies!" when they are, in fact, referring to Bootstrap, not mbd.
I appreciate the help. For some reason, I am running into the same issue where nothing returns on success of 200. What I mean is: if (http_check.status == 200) { console.log('file exists'); results[i] = path_of_file; } Does not print to console and does not increment the array. The results of the array are 3 null, length 4. In my other tests using a basic XHR call, I can only get console.log to print when status == 404, but not == 200. What am I missing?
Should we write our code like [this](https://www.reddit.com/r/javascript/comments/7x8z1v/javascript_promiseprototypefinally_is_at_stage_4/du6jm9r/)? I'd much rather use `finally`.
&gt; I'd much rather use `finally`. But which `finally` of the two are you referring to?
That's why we generally let eyes do their job and brain its
I went to a bootcamp for primarily Ruby that discouraged frameworks and the like until the very end. We weren't allowed to use Rails (had a modified version of Sinatra that forced MVC, etc) until the very end so that we'd have an appreciation for everything it does for you. To teach myself JS I made a tetris-clone that uses vanilla JS and Canvas. I learned A TON doing that. Working on a MERN tutorial right now and the ability to draw parallels is really nice.
Upvotes for your teacher.
I'm saying this from the total noob perspective, but I don't see why it would be intelligent to learn a framework before you have a clue what the language is doing. Also i would recommend reading the docs. I ignored arrow functions in ES6 and thought they were stupid since it's easier to write the word "function" for me. Then I learned what the lexical this is, and then I realized why many of the tutorials seemed to fuck me in the ass. I was doing the 'that = this' thing that everyone including myself hates to get around it because I refused to read.
Yeah. You'd store the information for the image in a database, and use GET parameters to choose the one you want to look at.
In case anyone's wondering what the difference is: (async () =&gt; { try { return 'return' } catch (e) {} finally { console.log('clean up'); // runs } })(); (async () =&gt; { try { return 'return' } catch (e) {} console.log('clean up'); // does not run })();
yeah, i'd go with a map, i don't know how to deal with databases
You can do this front-end, no databases with a router. You'll find plenty of you search for "JavaScript router" Like this one: https://github.com/krasimir/navigo
And it's not the same. If the try or catch returns, doFinally() never runs, with finally it does.
This is just me, but my advice is: Don't fuck with default scrolling behavior. It may look cool, but it sucks to use. 
With Redux the con may be the amount of boilerplate code you have to write. But, if the project is big and there are multiple developers involved, this definitely helps with the consistency and easy to understand what's going on in the codebase.
It is my real name. :)
You say that like babel isn't a thing. 
Sure, the simple example I gave can be condensed. An even slightly more complicated one couldn't. Look, don't get me wrong, I'm glad `.finally` is being added. I'm honestly just shocked people prefer promises over async/await. Especially the nightmare of dealing with conditional promises / early breaking from a promise, I don't know why this is even a topic the community would argue about. 
Hi /u/LineDetail, For javascript help, please visit /r/LearnJavascript. Thank you!
Next stop: Vuetitityfy JS
Hi /u/frontjes, For javascript help, please visit /r/LearnJavascript. Thank you!
So far this one is the best I've found ( but a lengthy read) : https://addyosmani.com/backbone-fundamentals/
A good 200+ pages of "downsizing" :D
Not JS, but here's a pretty simple implementation you can play around with. It doesn't have the blur effect... which JS could do, but.. here.. https://codepen.io/anon/pen/vdJxjJ
Http://ninjacodegen.com
Not really clear what you are trying to achieve with this sample. Maybe if you explain what you want at the end. Something to consider if you are trying to save a function to run later under a specific context would be the Function.bind( ) method. https://www.youtube.com/watch?v=uBdH0iB1VDM
Awesome! very well explained. You should definitely create the second part.
Backbone in 2018 makes no sense - it hasn't been actively developed in years (only maintenance), and the plugins you need are slowly being abandoned by their developers. What "downsizing" are you talking about exactly? Filesize? It's not that much smaller then react. Don't paint yourself in a corner. React (or Preact), Vue or one of the other modern ones (Inferno, Svelte, etc) are really much better choices. 
I‚Äôm currently using vuetify on a project. It‚Äôs a very nice UI, however replacing tags like &lt;select&gt; to &lt;v-select&gt; ignores the browser‚Äôs native display of a select function. On iOS Safari for example, the ‚Äòwheel‚Äô of options is replaced by a list of options. a wheel takes less real estate to display, and performs better as a native browser function. Also, it‚Äôs not supported in IE9/10. I can‚Äôt justify prioritizing UI over functionality, no matter how much I wanted to like vuetify.
It's pretty arbitrary whether to call something a library or a framework. Some use your definition, some say something is a library if it is more lightweight and/or optional and a framework if it makes a lot of decisions for you. Some say it is a library if you just use it for a small part of the application (like how React was originally used sparingly in existing websites) and a framework if it was built around it (like how SPAs are built now). I don't think it is an unpopular opinion to call React a framework. After all, every time one makes another blog post about front-end frameworks, they list React as one of those frameworks.
react's distinction as a "library" is more a historical reaction to the full-featured "frameworks" like angular.js. react initially presented itself as "just the view library" (or "The V in MVC"), which was a breath of fresh air compared to having to learn a massive API set, as with angular.js. (incidentally, this ended up being a huge reason for its success; many businesses initially turned up their noses at react &amp; were intent on sticking with angular as they didn't want to throw away their accumulated knowledge &amp; code. it wasn't until angular 2 threw away that strategic moat that react started gaining steam) at this point, yes, you do practically need an entire react ecosystem because it turns out "just the view library" is kind of a red herring; just about *everything* in a browser context is reducible to how it's being rendered, meaning everything *must* be in concert with the renderer (in this case, the VDOM implementation).
Not sure I agree, my app is a single page tradingBot prototype that basically does a bunch of API calls, Angular and React/Redux seem overkill, especially considering I'd need to either update to the newer Angular ( plus work on node ) or deal with redux, so I opted to try backbone, if there is a faster/simpler way I would consider it.
Using a finally to perform cleanup AFTER a **return** seems like a codesmell to me.
&gt; Library - your code calls it &gt; Framework - it calls your code I've seen this definition before too, but I think it's overly simplistic. A promise calls my code, but it's certainly not a framework. You can "call" `angular.bootstrap()`, but angular is definitely a framework. The way I tend to think of React, or other "frameworky libraries" is: can I easily pull it out of my project? With something like lodash, yes, the strategy to do that is very clear: you refactor each local call until there's no more lodash code. With React you're much more locked in; if you decide you want to migrate to Vue or whatever, it's kind of an all-or-nothing effort.
You are right about Angular, in fact I didn't put it in my list, although I don't understand what you mean with "work on node". But React, come on, it's dead simple, you don't have to use Redux - you can just have a single container component that that does API calls in its ComponentDidMount using fetch or axios, and then individual components for each result - trying to do that with BB is more complicated. You can learn how to do that by watching the free React beginner Kent C. Dodds course on Eggehead and in a couple of hours you are good to go https://egghead.io/courses/the-beginner-s-guide-to-reactjs Or just use jQuery / vanilla JS; I insist, BB is pointless, it will take you longer to learn its quirks than it will take you to get something quick and working with React
You are right about Angular, in fact I didn't put it in my list, although I don't understand what you mean with "work on node". But React, come on, it's dead simple, you don't have to use Redux - you can just have a single container component that that does API calls in its ComponentDidMount using fetch or axios, and then individual components for each result - trying to do that with BB is more complicated. You can learn how to do that by watching the free React beginner Kent C. Dodds course on Eggehead and in a couple of hours you are good to go Or just use jQuery / vanilla JS; I insist, BB is pointless, it will take you longer to learn its quirks than it will take you to get something quick and working with React
**[MsIeAi](http://ai.neocities.org/MsIeAi.html)**.html is a free, open-source Artificial Intelligence in JavaScript and it needs not perfection as a single, unique version but rather forking and evolving with new features and new **[MindBoot](http://ai.neocities.org/MindBoot.html)** sequences so that JavaScript may become a strong player in Strong AI, and so that any decent JavaScript or Perl or Forth coder may embark upon a new career as an **AI Mind [Maintainer](http://ai.neocities.org/maintainer.html)**. The JavaScript Artificial Intelligence has already been accepted as subject matter for a JavaScript livestream/video on **[GitHub](https://github.com/BuildingXwithJS/proposals/issues/22)**, where you may submit your own ideas for the livestream or video, and you may make AI in JavaScript more usable by other people. The **[AI Mind](http://ai.neocities.org/index.html)** in JavaScript solves the AI-hard problem of **[Natural Language Understanding](http://medium.com/p/3ede95b4f104)**. 
I've never had a use case for a finally instruction. At worse, you can easily create a passthrough function that would execute some code then return the value it got before. Can someone provide an actual useful use case for a finally call?
The semantics of `finally` always running are pretty standard across many languages. Not knowing how finally works doesn't make it a code smell. A code smell is something that isn't a bug, but increases risk of a bug appearing down the road. Imagine we had just started with a bog standard async function that needed to do some clean-up. Code not breaking when someone adds a early return is a good thing. Code not breaking when your `catch` throws is a good thing. Code that breaks because of unrelated changes is a code smell. (async () =&gt; { try { return 'return' } catch (e) {} console.log('clean up'); // does not run })();
Yeah, having used Backbone in production, but also React and Vue, Backbone actually has a bigger scope. It doesn't cover the View layer of MVC at all, but it has a fairly complex API for dealing with models and collections, it has jQuery and Underscore as dependencies, and comes with it's own type of overhead. If you just want to remove the need for a build tool like Webpack, maybe give Vue a try. It doesn't require a build process (although I think it's worth it to have one), and it's crazy simple to learn.
Closing a MySQL transaction whether an error occurred or not. 
Title Translation: "The most click baity title I can possibly come up with"
[removed]
In most real world cases it will be, as long as your catch block is lightweight. But in theory if the catch threw an error, it wouldn't execute another then, but still would execute a finally. 
Article is an incoherent mess about building a rudimentary template engine using template literals that doesn't ever mention anything about employment. /r/savedyouaclick 
Wish you'd have posted this about 10 minutes ago when I clicked and wasted 10 minutes reading this incoherent mess of an article. :( Have an upvote.
`setState` vs `$digest` imo
Don't you close it when you commit or rollback it usually ?
Yes but isn't the point of these frameworks in part to bypass browser-specific styling and to offer your users consistent experiences across devicers and browsers? I can understand your point about screen real estate on mobile, as for performance is there truly a noticable difference?
When I have an asynchronous call for a button click, and I need to show a spinner on that button. If you add state for that spinner, it is incorrect to show the spinner state on before the call, and in the "Then" block set the state off. When your asynchronous call fails, you need to set the spinner state off as well. The half correct thing to do is set the spinner state too off in both the "then" and "catch" block. This is what finally is for, when you need to do something in both the "then" and "catch" block.
I still use Backbone heavily (even in 2018). I've used more recent frameworks of course, but depending on project requirements it's a nice fit. Wish I could recall what tutorials I started with..my humble apologies. :(
But you can easily achieve that with a then.catch.then and setting the off state in the final then. It will be exactly the same.
Hi /u/ARCIIICUlTRI, For javascript help, please visit /r/LearnJavascript. Thank you!
Thanks for your suggestions, I think you might be right and I am overthinking this, I'll go back to plan js/jquery and lock down the requirements before adding more overhead if need be ( probably react ). 
Not necessarily. The semantics for catch means it can return a promise, so you can actually yield a failed promise in your catch block, so a "then" after a catch may not fire.
Because not every case is well-covered by async/await. Particularly, I've had the experience that parallelism and batching still benefit from dotted promises. And in those cases, I've almost always wanted a .finally at the end.
From what I remember this is impossible Cross-Browser. What I did was to give a container rem dimensions and compare it's actual size to what it should have had at 100%. Sadly enough this did not work in FF at that time as it seemed to scale the view completely independent of anything measurable. This might have changed though ;)
Symmetry.
loadImage('a.test/moar.jpg') .then(showImage, e =&gt; console.error(e)) .finally(stopLoadingSpinner); vs. try { const img = await loadImage('a.test/moar.jpg'); showImage(img); } catch(e) { console.error(e); } finally { stopLoadingSpinner(); } I agree that async/await is better in most cases - basically as soon as there's some logic that's complicated enough so it can't be condensed, as you said. But saying that it's incomprehensible if people prefer Promises over async/await is a little to black and white if you ask me. I use - and prefer - async/await 9 out of 10 times, but native Promises have their place where they're preferable imo - like really simple chaining, as in the example above.
True, but this isn't for a client currently, this is for a school assignment for a course on Web Design.
I would say React is a Framework since often times the entire app is built around it. To me a library is something like moment.js which you just import, but I could easily swap out for something else
It sounds like you've been scared off of backbone, but its not really so bad. While its not cutting edge - nor do I ever think it claimed or attempted to be - it's a good way to get used to MV* patterns with views getting updated by changes in models. If you ever sit down and try to do some basic model-view stuff from scratch in vanilla JS, you gravitate towards recreating what Backbone is already offering. The giant encyclopedia of Backbone linked earlier, I think, is too much. With Backbone, I wouldn't suggest trying to fully dig into everything there is to know about it, but if you can find a simple tutorial somewhere that works through a basic example, that might be a good place to start. And then maybe even end. Backbone is fine for the simple stuff, but it doesn't scale well. It _can_, but it doesn't make it easy and you'll need to plan ahead to make sure things work right (and this is when maybe that encyclopedia becomes necessary). But if you reach that point, that's when I'd suggest jumping over to one of the other more modern frameworks/libraries. Then again, it sounds like this was your thinking to begin with - you're not there and you want to stick to the basics?
Heres my companies new style guide: 1. Do not follow the style guide published at https://github.com/altayer-digital/react-styleguide
CSS pixel ratio might help you out. https://stackoverflow.com/questions/5063489/how-can-you-get-the-css-pixel-device-pixel-ratio
Thanks, my original post was about finding a simple tutorial which I couldn't find in the end...I just finished what I set out to do today in a couple of hours with jquery/axios, it is neither beautiful nor cutting edge, bunch of buttons calling bunch of functions and api calls, but hey,working prototype ! I guess what we might be missing is something in between vanilla JS/jQuery and the top frameworks that you can later somehow painlessly port to them.
Fair point. Thanks for explaining.
This looks like a cool project, but calling it "ass-js"? That's bold, lol.
Oh, post in that subreddit? Ha, thx
I hate to be that Vue guy but I always felt like Vue is the spiritual successor of backbone and it‚Äôs pretty light weight. I work in Angular but occasionally do things in Vue and the bundle sizes are worlds apart. 
It's really very simple in my mind. React is not a framework because it doesn't provide all the tools needed to make a fully functional app. It simply renders components. Things like react router are not part of react, it was a side project. React is not complete without other libraries, like react router and redux. Angular.on the other hand includes everything you need to make a fully functional app.
Because some people feel it indicates "lightweight". It's a distinction without a difference.
Frameworks are a type of library. If the library wants to take over the page, it's a framework.
TL;DR cross-site scripting
What's your use case?
Awesome. I wonder though, will someone figure out how to use this to spread an adaptive worm/virus over browsers with some zero-day. :\ Anyway yeah, this is really cool.
I think I just figured it out. I‚Äôll create a listener web service in powershell and serve the data as json and just leave the service running. Use case will be varied. For now I wanted to add a gallery for a corporate intranet video service I‚Äôm making. You‚Äôll see my JS solution in a previous post. But with this service I can listen to a folder for any changes or video uploads then formulate json data composed of a file list and meta data. I‚Äôll use webvtt resource files for chapters etc but that‚Äôs just as easy with a standard xhr. For other uses this will work great for server stats, wmi, etc. I just need to play with how the http listener will handle the memory or if I can interact with appfabric as a cache service. Either way I would like to see if I can do periodic interval queries for updating the data or querying SQL for other uses, and then my web apps can query cached json...super fast and secure. I also could have my REST request trigger a function in powershell to return the data real-time, again very secure as I can do all my regex cleanup server side. Just some initial ideas.
Coolness, I'll give it a shot after mocking it up, thanks!
I use knockout a lot, but for a specific scenario, and I have a lot of those scenarios. Knockout is 1 single JS file, and it's unobtrusive. It doesn't change the behavior of any prototypes and it doesn't mess with how hash tag links work, etc. It's 1 small file that I can add to just about any system without breaking anything. Unless we have another JS library in play that uses the data-bind attribute syntax then we are kind of borked if the don't play nice together, but that's never happened. So I mainly use Knockout on old legacy systems that were exclusively Jquery, maybe some Jquery UI, or even JQuery UI Mobile.... I introduce knockout and design new features in knockout. So instead of having this Huge 300 line JS function that works with a form in html via $('#blah').val('new value'), I can just have a js object and bind to it with knockout. That's the just of where I use knockout. All 3 of my last jobs and my current job I have been working with monstrous legacy systems, I put knockout on all of them. I through some lodash in there too because lodash functions are invaluable, especially _.isEqual.
Well said.
Try this. It is basically going to accomplish the same thing. e.logo.url = undefined;
Which is weird because im only trying to alter events before that time.
Microsoft bought Xamarin for Mono for .Net Core development mainly. Knockout is just a side trophy getting dusty on the shelf.
Even though there's no gap/beginning... that reads as "eheheh" to me rather than "hehehe" for some reason.
The if-statement is comparing strings instead of dates. Try wrapping both dates in "new Date(..)" and see if the if-statement starts working as expected. 
That's a good explanation 
I believe that by just deleting the property and not returning anything, the filter would omit the element since you aren‚Äôt returning true. If all you want to do is remove a property from each element, you could do a foreach instead of a filter 
I want to replace the image with an image stored locally.
Okay, similar concept - you could do a foreach, and when the date comparison matches what you want, just overwrite the URL 
Why?
Vuetify as in Beautify for Vue?
I've been using something close to this for over a year now, called Reflux. To be honest I think reflux tops hyperapp for me. Either way I think redux is the most overhyped part of the entire js world right now 
Filters are used to reduce an array. The new array only consists of the objects that you return a truthey value for, [filter documentation ](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) See previous answers mentioning the forEach method for iterating through an array. [forEach documentation ](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) Sorry about any formatting submitting from mobile.
It looks interesting, but that's too much `class` and `this` for my own personal taste. To each their own.
What an awful way to write promise flow in your first example. 
I like it because it behaves like a react component. It has a state, and the actions call class methods which change the component state using setState. Any component subscribing to the changed keys immediately have their states updated 
Why do we do anything as developers? Because we can.
Thanks for sharing. Hyperapp aside, Reflux looks a lot more complicated than Redux, but maybe that's just me. 
&gt; Library - your code calls it &gt; Framework - it calls your code That's not really what the distinction is. First of all, a framework is a library, as in "external code, that supplies you with a set of tools to build and run an application". However, frameworks are defined by you ability to build an app *upon it* rather than *using it*. Hence the name ‚Äî they provide *a framework* for your app, not just a disjointed set of tools or, like with React, only a subset of tools. Frameworks can often be instantiated and run without any of your code, with zero to little configuration, and then you just extend their basic flow to cover your needs. You can't and don't build apps upon React, because React is only an abstraction for your views. You still need some logic controllers and data management. And however you plant React into your architecture, it's up to you. True, there's the Flux method for the overall design, but it is implemented in many ways and it is not the only solution.
[Alright, then](https://media.giphy.com/media/l1IY18cH5aXyrrYju/giphy.gif)
I can see how Reflux might be familiar to folks who prefer the React model of state over Redux. I just happen to fall into the latter functional programming camp.
? Is this thread shills or something? You have to watch like 20 vids on egghead.io to even have a basic grasp of Redux in a React app
You sound pretty low-information. I‚Äôd try taking people‚Äôs advice in this thread since (no offense) you don‚Äôt seem to have enough knowledge to make a good decision here.
Seriously lol. It‚Äôs either this or a single ‚Äúthinking in React‚Äù jsFiddle
While the video tutorials are a great resource, they're not even remotely required to grasp Redux. The real learning curve is on the paradigm shift behind the underlying FP concepts and not anything specific to the Redux implementation.
I agree that redux is a little verbose, though the explicit nature has often been helpful. The problem was, in situations when you shouldn't use it there weren't any easy alternatives. setState is only local and mobX are way too much abstraction. Thankfully has changed now with Reacts new context api. Render props: https://codesandbox.io/s/3vo9164z25 Higher order component: https://codesandbox.io/s/3ykqjvznwq The lib is something i made to help get around the low level nature of context, but it's only a [tiny abstraction](https://github.com/drcmda/react-contextual/blob/master/src/store.js).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [drcmda/react-contextual/.../**store.js** (master ‚Üí 3eb25fc)](https://github.com/drcmda/react-contextual/blob/3eb25fcdf9aa8dc31b9e53cea8a86491ab029f16/src/store.js) ---- 
Sorry to be that guy, but what editor theme did you use on the screenshot in your README? I've never seen a theme that highlights multiple paren levels with different colors. 
current version is on babel-preset-es2015 which is called ES6, sorry if i misunderstood your question.
That's VSC, Material Palenight + Operator mono font, Bracket pair colorizer
They have rewritten context from scratch. &gt; Does this only work with a flat state tree, or also with nested namespaces like Redux It works as deeply nested as you like, on the component level and also for state. Though if you set nested state, you need to reduce again: myActions: (id, object) =&gt; state =&gt; { items: { ...state.items, [id]: object } }
Immediate converted.
Thanks for sharing!
I wonder if Preact is going to implement this.
Look like it does: https://codesandbox.io/s/4zm1ypo1n0
You should use forEach, not filter...
In the link I mean: https://www.reddit.com/r/TryMyThing/ 
It won't. Many users are using high density screens so they are "always zoomed". There's no reliable way to do that and there are no reasons to do that.
&gt; Smart enough to implement assembly in js &gt; not smart enough to not call it ass
Google needs to get a handle on this. Trust nothing you install. 
[removed]
Would this work with preact? Been looking for a minimal state management for the widgets we deploy
You are right, the API hasn't been stable until now. But 1.0 was just released about a month ago: https://hackernoon.com/introducing-hyperapp-1-0-dbf4229abfef &gt; This milestone means the API has reached stability and the churn is finally over. It took us almost a year to arrive at the current API and while it will never be perfect, done is better than perfect and I am extremely pleased with the result.
&gt; I can confirm that large-scale applications are hard to do in hyperapp. Do you mean historically because of API changes? Or is there something else you find lacking about the API. I can confirm that large-scale apps are not any harder to build in Hyperapp than they are in React+Redux. We are already using Hyperapp to build [Qiita](https://qiita.com), which is Japan‚Äôs technical knowledge sharing and collaboration platform for programmers. 
Video linked by /u/prof3ssorSt3v3: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Real World AJAX Fetch to Live HTML &amp; CSS](https://youtube.com/watch?v=QYQs-Z4_tcs)|Steve Griffith|2017-08-07|0:13:47|5+ (100%)|78 &gt; How to bring together all your HTML, CSS, and JavaScript... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/prof3ssorSt3v3 ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=du890fi\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
This epidemic is all over the place. Cryptominers embedded into hacked websites finally forced me to get the NoScript extension.
Since the object is to do it with CSS alone you might get better answers in r/WebDesign
Germans specifically? I'm curious about this
This is the wrong way to use filter. Here is a quick video on it - https://www.youtube.com/watch?v=WrB_--bVbbs You should be using Array.map - https://www.youtube.com/watch?v=hfYa4ugeyuc
&gt;The apps were uploaded on the Play Store around Christmas and Sophos researchers reported all apps to Google. All have been removed from the official Play Store at the time of writing. &gt;A list of all the 19 Coinhive-laden apps is available on page 7 of the Sophos report, and users can review the list and see if they installed any of the apps on their devices. I consider that impratical, and inconsiderate from Google towards the unsuspecting users. peOPLE
Implying it wasn't 100% intentional
I installed a No Coin chrome extension for regular browsing and the speed in which web pages render for me has skyrocketed. I believe that cryptomining scripts are far more prevalent than is commonly believed.
You can‚Äôt ‚Äúeasily swap out‚Äù momentjs because another library will have different API. React, however, has a few popular alternatives with similar API and drop-in compatibility - see preact, inferno and nerv
That is awesome! Thanks for sharing
&gt; I think Google should instead create a harmless "update" to each of these apps Apps need to be signed by their creators, precisely to avoid this kind of tampering. The warning should happen at OS level instead, in my opinion.
How about the [official documentation](http://backbonejs.org/) and the [annotated source](http://backbonejs.org/docs/backbone.html)? I have been working in a Backbone application for the past 3 years. All I can say is that there are better options out there. Even Angular 1.x would be better.
Nice. I'd upvote a second time for not melting my CPU if I could.
Google made that rule. Google can make an exception, in exceptional cases.
"add" stands for Assembler
https://stackoverflow.com/questions/41146373/access-function-location-programmatically 
Thanks
Capturing `new Error().stack` will get you close if not what you're looking for.
If you want to use ES6 and get this done in one line: const shots = [ {id: 1, amount: 2}, {id: 2, amount: 4}, {id: 3, amount: 52}, {id: 4, amount: 36}, {id: 5, amount: 13}, {id: 6, amount: 33} ] shots.reduce((acc, item) =&gt; acc = acc &gt; item.amount ? acc : item.amount, 0); The issue with the reduce function you produced on SO, your reducer accumulator/initial value (0) was placed in the wrong spot.
Yea thats what I want, but how do I access the info as a string
No.
Really nice idea! Is the repo public? If yes, can you add the link here or to the article?
If you don't mind looping twice, it can be reduced to: Math.max(...shots.map(s =&gt; s.amount));
Haha and theses guys must have made like 20$
https://github.com/glutch/ninjadb I created this wrapper for myself a couple of months ago and i find myself using it a lot. Electron support too! &gt; This is how you would use lowdb const low = require('lowdb') const FileSync = require('lowdb/adapters/FileSync') const adapter = new FileSync('db.json') const db = low(adapter) // Set some defaults db.defaults({ posts: [], users: []}) .write() // Add a post db.get('posts') .push({title: 'lowdb, good stuff'}) .write() // add user db.get('users') .push({name: 'lowdb'}) .write() &gt; This is how you use ninjadb const ninjadb = require('ninjadb') const posts = ninjadb.create('posts') const users = ninjadb.create('users') // add a post posts.push({title: 'ninjadb, pretty simple'}) // add user users.push({name: 'ninjadb'})
For anyone interested in Vue, I can't recommend this Udemy course enough, [Vue JS 2 - The Complete Guide (incl. Vue Router &amp; Vuex)](https://www.udemy.com/vuejs-2-the-complete-guide/) Max also has a React course which is great as well, [React 16 - The Complete Guide (incl. React Router 4 &amp; Redux)](https://www.udemy.com/react-the-complete-guide-incl-redux/) [Looking through his courses](https://www.udemy.com/user/maximilian-schwarzmuller/) he also has a new [Nuxt.js course](https://www.udemy.com/nuxtjs-vuejs-on-steroids/), which I'll have to check out. He's basically tearing it up.
I don't think this is the correct definition of what a library or framework is. Most libraries have a lot of callback code implemented and methods in frameworks need to be called. IMHO a library is something you **can** use when you need it. While a framework means you **have to** use, even when you don't need it. A library is a pair of glasses while a framework is a pair of contacts. 
OP wanted the object, not the value. With a slight adjustment: shots.reduce((max, shot) =&gt; max &amp;&amp; max.amount &gt; shot.amount ? max : shot, null); This also handles empty shots lists returning null rather than an initial value that appears to be a valid amount object (as would be the case in the accepted answer).
This is a good way for developers of free apps to get some compensation for their work. 
Thanks bud, gonna try to refactor into this
Or you could just not use a unidirectional pure functional immutable reducer state machine management solution, since you probably got into them because Redux was trending, and you wanted to be all smart, too, not because you identified a legitimate engineering problem only they could solve.