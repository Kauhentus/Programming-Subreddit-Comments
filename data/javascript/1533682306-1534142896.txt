Yep, thats how we originally did it, an Interface and a validations Service per model. I still feel that the class way is not a bad approach if your validations are really complex. Depends on the application i guess? 
Sure. But given that you're wanting to use NGRX (from what you have said), you're then going to have to implement your own deep clone functionality. Otherwise your validation methods etc will be useless. 
Yep, was just wondering if using NGRX would provide a cleaner solution. 
Writing code in the style of functional programming, where currying is more commonly found. https://opensource.com/article/17/6/functional-javascript
You might find [this discussion](https://www.reddit.com/r/programming/comments/92cosx/_/) interesting!
I agree with you on your last point: let's discuss potential refactor of a codebase when the time is right. But even though people have used 15 times a particular third party solution, I don't see why we should keep using it until that discussion takes place. My thinking is, if it's not necessary, let's stop using it at once, fall back to good vanilla solutions (which everyone should understand) to not make 15 uses into 250 and setting us up for a long nightmare if refactoring needs to happen.
This looks really cool. I can't add much in terms of input - you very obviously are way more advanced than I am - but well done!
/u/cokestar pretty much defined it. But there's an important nuance I'd like to clarify: 1. "do X because that's how it's always been done" it's a known fallacy by the name argument or [*appeal from tradition*](https://en.wikipedia.org/wiki/Appeal_to_tradition) 1. Inertial coding, or inertial behavior in whatever subject, is the tendency we all have to not trouble ourselves with new (better) ways to do things and merely keep doing it the way you know how. Now, (1) is everywhere. And it's bad. But I'll concede that under time pressure (aka potentially lousy management), there's not always time or cognitive energy to try and propose better ideas of doing things. (2) on the other hand, is a very personal thing. You'll find devs along the spectrum from not even thinking about it (lazy) to overdoing it (sometimes those are the smart asses I mentioned before). I think a good programmer finds the sweet spot within that spectrum. A good programmer will keep learning, keep pushing himself, but at the right pace.
Unfortunate naming since almost all nginx modules start with an ngx prefix
Thank you for your feedback! I'll definitely be looking into Vue more in depth.
Is jQuery still valid to learn with libraries and frameworks like React &amp; Vue?
FWIW Mithril and Hyperapp are two (micro) frameworks that let you not use `this` at all.
I would say that we have a good understanding of what good practice is, in the programming domain. After all, it's computer science. We don't know it all yet, but we know more than enough to tell good code from bad code. Will there be preferences? Sure. But we can test performance, and we can also clearly distinguish between readable code and Chinese (no offense to my Asian colleagues :) ) I like reading library code from time to time. And sometimes it's like a novel. The code you can read and understand with barely any effort. But other times I'm utterly confused, and I don't even know what some 2 or 3 lines are doing. I much prefer the former. We have to remember that code is for humans, not for machines.
&gt; That... kind of does away with the argument for async/await being used to prevent promises from becoming unreadable spaghetti code async/await starts to make more sense if you have branching or loops while doing async things. You can play quite a bit of code golf with promises and ternaries etc. but it gets exhausting after a while. I came to appreciate async/await by doing more server-side node stuff with the filesystem and DB queries.
Sure. I hear those same questions a lot, which is why Dave and I wrote those posts.
It's easier for me to set up Webpack manually than fix everything I hate about create-react-app. Webpack really isn't that hard to use, although I'm not sure how much of that is because it's gotten easier with Webpack 4 (which it has) or if I just didn't know what I was doing when I originally learned Webpack.
I can think of _literally_ one place where I'd use async/await over chaining `.then`s. In every other case, the best thing to do with async/await is ignore it.
Wow, the NES chip is a lot simpler than I realized. This is really cool code, a hell of a lot easier to follow than an emulator in C++
Outside of the dev environment, styling, and elements, react and react native are the same at the level this tutorial will go. You should be fine. Just don’t try to use &lt;View&gt; on a web app.
OK, so here's a more real-world example: You're fetching data from an API. The API requires a base `url` and the `endpoint` that you're going to hit. At various times you want to hit different endpoints on the same API. ``` const fetchFromApi = url =&gt; endpoint =&gt; fetch(url + '/' + endpoint) const fetchSweetApi = fetchFromApi('http://sweetap.io') fetchSweetApi('users?age=23') .then( usersAged23 =&gt; /* do something with the users */ ) fetchSweetApi('images?limit=10') .then( images =&gt; /* do something with the images */ ) ``` If you're being good and writing your tests, it becomes a lot easier to test this function by injecting the `fetch` dependency. ``` import fetch from 'node-fetch' const fetchFromApiFactory = fetch =&gt; url =&gt; endpoint =&gt; fetch(url + '/' + endpoint) const fetchFromApi = fetchFromApiFactory(fetch) const fetchSweetApi = fetchFromApi('http://sweetap.io') fetchSweetApi('users?age=23') .then( usersAged23 =&gt; /* do something with the users */ ) ``` And then it turns out that SweetApi have decided to require an `api_key` for access to their system. ``` const fetchFromApiFactory = fetch =&gt; url =&gt; api_key =&gt; endpoint =&gt; fetch(url + '/' + endpoint, { headers: api_key }) ``` Of course, you could take `url` and `api_key` together, either as a multi-parameter function or as a configuration object. ``` const fetchFromApiFactory = fetch =&gt; (url, api_key) =&gt; endpoint =&gt; fetch(url + '/' + endpoint, { headers: api_key }) const fetchFromApiFactory = fetch =&gt; ({ url, api_key }) =&gt; endpoint =&gt; fetch(url + '/' + endpoint, { headers: api_key }) ``` Personally, I'd go with the original curried version. It's cleaner and more consistent to use unary functions all the way down. And it really doesn't take much practice to get used to this kind of syntax: ``` const fetchSweetApi = fetchFromApi('https://sweetap.io')(12344567890) ```
Thanks for the clarification. I can relate to that a lot - I actually worry I'm sometimes too far on the opposite side of the spectrum -- spending too much time improving myself at the cost of slower work output. I always promise myself it will pay off later, by working more efficiently etc, but there's ALWAYS a new thing to learn.
&gt;I would say that we have a good understanding of what good practice is **this week** FTFY Yesterday's best practice is tomorrow's bad practice. Been programming close to 40 years. If you think there's one "best practice" then you haven't been programming long enough. Someone will come along and shift the industry and your best practice will be outdated overnight. 
What do you hate ? CRA is officialy made by facebook and makes sure it set up the best config possible.
This is mostly good advice, but you forgot to consider that Map polyfills do perform horribly slow (e.g. O(n) reads). It's perfectly valid to suggest using Objects in a code review if they are sufficient and you know that Map is going to be categorically worse for whatever reason. Being a nazi over theoretical performance is bad sure, but don't be the "well it doesn't really matter, so whatever" guy either.
In node.js world, you just *don't* install dependencies globally. All dependencies should (must) be installed in the project.
Yet they work all the same without being installed in the project folder.
Great question. I currently don't run the server because I currently don't use it for anything, but if I ever need a reverse proxy or something I have the boiler-plate all set up there in case I ever need it.
Babel is a compiler though, not a library 
I'm migrating from a ruby/rails to javascript/node/express the most difficult thing to me get use on javascript is the callbacks and promises.
While they worked, it's node's universally accepted practice to install all your dependencies to the project folder, so IDEs have no reason to support the global ones.
Gmail seems to have become insanely clunky with the recent update
Isnt jsnes a thing already? How does yours stack up to that :)?
Hey Any such course for Javascript? I'm learning it from Udacity nanodegree course and from YouTube channel, but I would to know, if there's any one on your website? I'll be learning react as well after sometime. Btw, I'm gonna sign up for this. Thanks
Doesn't the function only become impure once you pass console to the function? You could pass `logSomething(new Date(), { log()=&gt;{} }, 'abc')` then it would be pure Otherwise if you call any method on an argument (or any function argument) then it would make your function impure because you don't know if it will have a side affect until its called. i.e. if you removed cnsl from the example function logSomething(d, something) { const dt = d.toIsoString(); return something; } this seems to be pure but someone could pass in a d that has an impure toIsoString() method. i.e. logSomething({ toIsoString(){console.log('abc')} }, 'abc')
Yes angular too, and most front ends afaik, expect you to install them locally. That's why you have a local package.json when you generate a new project with the cli.
To each their own. I don't use a hulking slow ide, so the noise and verbosity of typescript is just an annoyance to me. For trusting my code I use unit tests, because types alone don't prove much. When I'm forced to use typescript by a client, the biggest headache is the poor coding style it seems to foster. I also typically find a rats nest of bugs caused by insufficient unit tests.
Based on this one example, I'm not sure I'm seeing what problems this solves or how it solves it better than alternative solutions.
It's valid, but a sub-optimal use of your time. Better to spec into React or Vue which both entail a good bit of CSS and other skills... you'll have too much to learn to bother with jQuery. If you ever really needed it, you can learn 99% of it in a day anyway. It's much smaller in scope than React and Vue.
I believe this would be possible through a Chrome extension. Basically, you can inject a new JS file into the page that could have the functionality you need. Here is a quick gist that should get you up and running with a custom Chrome extension. https://gist.github.com/danharper/8364399 Also Chrome extension docs... https://developer.chrome.com/extensions/getstarted 
Just pointing this out I use this [chrome extension](https://chrome.google.com/webstore/detail/custom-javascript-for-web/poakhlngfciodnhlhhgnaaelnpjljija?hl=en) myself to run JS on a page Once you go through the dom/figure out ids/classes you can target them. The script is written in the extension drop down/saved-applied per domain you save.
I guess now would be a good time to remember what feature I'm using from stage-2...
Not that guy but I'll give my 2 cents on demand and learning curve that are often useful when deciding which one to pick up. ### React ++ Most desirable in the US (but corporate seems to prefer Angular) \- Moderate learning curve: Needs JSX ### Angular ++ Most popular in large corporations in the US. -- Said to have highest learning curve: needs TypeScript ### Vue ++ Easiest to learn and just as powerful -- Least popular in the US
Yeah I was kinda thinking along the same lines
Thansk for your 2 cents u/_sirberus_, I'm noticing that Vue.js may be the right place to start as it seems some skills learnt here can crossever with learning React and further JS Libraries / Frameworks.
I can see why you'd find it confusing in the context of this article; It's just tagged onto the end without any context! [I tried to sum up my ideas on this once here using practical examples and also dipping into ADTs. ](https://hackernoon.com/making-functional-programming-click-836d4715baf2) 
Since everyone else is tackling the question directly, I'd like to point out that it's generally a bad idea to write code based on ideas about performance. The rule of thumb is, once you have a noticeable, measurable need for increased performance, then you measure, find the bottleneck, and optimize, focusing on changing high-level algorithms before moving on to optimizing low-level code. Besides, obj[key] is used trillions of times every day by every website (overall), so browsers are incentivized to optimize the heck out of it anyway. Your lead dev was probably having an off day, lead devs usually think like this.
In your version yes But when you deploy to the server you will fail. As they might not have that global dependence set. Also I don’t think it will even burden you as if you got something globally installed when the Jason file is parsed it will find it already and just soft link it. 
Right now I’m just leaving Angular/TypeScript, I’ll certainly keep this in mind when I start doing production code. Thanks for the explanation. Sorry if I accidentally replied to myself rather than an earlier comment for some reason I keep forgetting how to reply to specific comments on the app.
Awesome work! Can't wait to drop python for js once the tools mature. Seems like a fragile structure if loading models requires a hack. That said, if we would train our models in node, then what would ha best data loader solution be? Fetching and preprocessing data in parallel to the main code is probably something one needs. 
&gt;the "five monkeys" trap of coding Please can you explain?
For sure. If you want to maximize for money, probably not Vue, but the skills you learn in Vue are largely applicable to React and Angular so doing Vue first just because it's easier, then moving into React, that's a fine option if you don't need to beef up that resume at all costs. That said, there's a niche market for Vue in the US - just landed myself a sweet gig primarily doing Vue, and I came across a few others in my searches.
Thanks for this, after all the time I've put in it this means a lot to me :)
Very clever! You could have saved some bytes by giving the iframe an ID and referencing it as a global variable, though: &lt;body oninput="i.srcdoc=h.value+'&lt;style&gt;'+c.value+ '&lt;/style&gt;&lt;script&gt;'+j.value+'&lt;\/script&gt;'"&gt; &lt;style&gt; textarea,#i{float:right;width:100%;height:50%} body{margin:0} textarea{width:33.33%;font-size:18} &lt;/style&gt; &lt;textarea placeholder=JS id=j&gt;&lt;/textarea&gt; &lt;textarea placeholder=CSS id=c&gt;&lt;/textarea&gt; &lt;textarea placeholder=HTML id=h&gt;&lt;/textarea&gt; &lt;iframe id=i&gt;
This is voodoo.
This is where I'm struggling to draw that line is do I start Vue because it's a easier thing to start or do I jump into React because I already know more about it/of it and it will help with my current job position and/or future aha
Thanks you ! I'll try to explain a bit and give you an overview without going too much in the details :) So, first things first, the main loop is called 60 times per second using \`requestAnimationFrame\` Then, we have our emulator logic: An emulator emulates hardwares, so I've got classes for CPU, PPU (NES gpu), controlers, memory and the rest is "just a matter" of sticking to how the console is designed. For this, I mainly used [http://wiki.nesdev.com/w/index.php/Nesdev\_Wiki](http://wiki.nesdev.com/w/index.php/Nesdev_Wiki) which is a really cool wiki that details the inners of the NES. Each time my main loop is called, I call the CPU, read the ROM file using a specific pointer var, and execute an instruction. This instruction can be anything, addition, substraction, setting values in registers... ([https://github.com/fredericcambon/nes/blob/master/src/core/CPU.js#L169-L189](https://github.com/fredericcambon/nes/blob/master/src/core/CPU.js#L169-L189), [https://github.com/fredericcambon/nes/blob/master/src/core/opcodes.js](https://github.com/fredericcambon/nes/blob/master/src/core/opcodes.js)) Each instruction "costs" a number of cycles. You could say that the cycles are an arbitrary value to helps synchronise the CPU &amp; PPU. For example, if my CPU executes something that costs 7 cycles, my PPU will have to execute in return 7 x 3 actions (x 3 is because the PPU runs 3 times faster than the CPU) Then, the PPU, the tricky part. The goal of the PPU (Picture Processing Unit) is, as you can guess to generate images of our game. It uses a 256x240 resolution, and what it does is basically to draw line by line, moving by one pixel each time it is called. I said it is tricky because the PPU has a lot of specific actions and must perfectly be in sync with the CPU otherwise it won't work properly. You can see here for example the timings that must be respected: [https://wiki.nesdev.com/w/index.php/File:Ntsc\_timing.png](https://wiki.nesdev.com/w/index.php/File:Ntsc_timing.png) My PPU still isn't 100% functional which is why there are some glitches on some games, like [https://onanes.herokuapp.com/play/super-mario-bros-3](https://onanes.herokuapp.com/play/super-mario-bros-3) Then, we have our ROM files. These made me sweat a bit too. You see, the NES was a console with little RAM, only 2kb, so developers had to come up with a mean to get more RAMs for their games... Here comes the mappers. They are additional hardware shipped with the game cartridge that holds additional memory and depending on the mappers, additional capabilities that the console do not offer. So, to emulate the NES, you need emulate the console AND the mappers :) I spent way too much time on this one for example [https://github.com/fredericcambon/nes/blob/master/src/core/mappers/MMC3.js](https://github.com/fredericcambon/nes/blob/master/src/core/mappers/MMC3.js) , it's the mapper for Super Mario Bros 3 and later gen. NES games. I haven't done all of them yet, only the 3-4 most popular, you can see the list here ([https://wiki.nesdev.com/w/index.php/List\_of\_mappers](https://wiki.nesdev.com/w/index.php/List_of_mappers)) And the sound. Which ... I haven't done yet because it's giving me a lot of trouble \^\^ Also, I used threejs to display the output of the emulator, since there's no ui shipped on my other repo [https://github.com/fredericcambon/react-nes](https://github.com/fredericcambon/react-nes) Aaaand that's it :D
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [fredericcambon/nes/.../**MMC3.js** (master → 71f8740)](https://github.com/fredericcambon/nes/blob/71f8740572181990bae2b88f759ce47d76a0f8f1/src/core/mappers/MMC3.js) * [fredericcambon/nes/.../**CPU.js#L169-L189** (master → 71f8740)](https://github.com/fredericcambon/nes/blob/71f8740572181990bae2b88f759ce47d76a0f8f1/src/core/CPU.js#L169-L189) * [fredericcambon/nes/.../**opcodes.js** (master → 71f8740)](https://github.com/fredericcambon/nes/blob/71f8740572181990bae2b88f759ce47d76a0f8f1/src/core/opcodes.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3t9ufp.)
Thanks bot, have updated :)
Ah of course, I’ve updated now. Thanks!
Wow, thank you &lt;3
So crazy! I love learning about low level programming like this.
Looks like just `transform-object-rest-spread` and `syntax-dynamic-import` for me. And I've been pulling object rest spread in manually for a while, since it's the only part of stage-3 that I've been using and I don't reach for stage-2 unless I'm using Universal Component _and_ care about the automatic code splitting (which isn't often). Reviewing the stage presets has pretty well convinced me that they're making the right move here. Be more explicit with your dependencies, and you probably don't need most of them anyway.
Well, if you're crazy AF, you could always build, test, and maintain your own PDF.js-like program. In addition to ample amounts of crazy, it'd probably help to be a rockstar JavaScript developer _and_ have a ton of time on your hands.
This is really helpful thank you I'm watching it now! Take all the karma points /o/
They might work from command line, but there’s no such thing as global imports. 
Meteor.settings.public.localhost = true;
Sorry! Didn't knew that. It will not happen again.
Take a look into PWA's and webworkers, many of the point's are incorrect on today's web. Also how is "Distributed from an app store" and DRM is considered a good thing?
&gt; saw something similar with Chrome 68 on Windows 10 -- iterating an Object being 99% slower! I get the exact same result as the parent with Chrome 68 on Windows 10 - iteration and get operations are orders of magnitude faster for Map objects and the `set` is (only) slightly slower.
That's why Prettier is an `opinionated` code formatter.
Have you ever tried to get developers to agree on code style convention? That's why having something like prettier to enforce a certain style is easier than coming up with your own. Changing the code to fit a developer would just make a mess of the changes because to git reverting code to a different style would mean changing the whole file. So actual changes would no longer be correctly highlighted.
Well, you're not wrong. I'm asking why does it have to be. Reformatting on the fly is the new thing it's bringing to the table over the likes of standardjs but I don't get why you'd take that an enforce one set of rules rather than taking it a step further and really end arguments over formatting rather than thinking you can end them through using a really big stick. 
Yeah but you could easily hook into pre/post commit hooks to reformat to a one-true-way, so that for comparisons and at rest. That way developers wouldn't *have* to agree on a code style, it would cease to be important, like whether you prefer a light or dark theme in your editor.
That sounds like a really interesting project! Mind if I can participate with you? :)
So how would I have to change the json to do what I need to do? 
This should really be on a PHP subreddit... 
This is awesome, and wonderful explanation about how it works under the hood above. I’m very much interested in learning more about emulators now. I never understood how they actually work
I googled "five monkeys trap" and it's not strictly regarding coding. See: [http://workingoutloud.com/blog/the-five-monkeys-experiment-with-a-new-lesson](http://workingoutloud.com/blog/the-five-monkeys-experiment-with-a-new-lesson)
Yes feel free to :) It's open source
That's a fair point, not sure if there is anyway to get git to treat the reformatted code as the base copy in a post checkout hook to get round that. Still fundamentally feel that forcing everyone to use the same formatting regardless of how much that arbitrarily degrades some peoples ability to read code is approaching the problem from the wrong end of the stick. 
Right, I should have clarified: In my SO question, I've hardcoded that array as the data that I have in the live code which is coming from a JSON\_ENCODE version of a mysql result, so that's why I'm referencing JSON
I thought so too initially but it's quite easy to adapt to just accept the formatter's opinion on what the code should look like. You can still write it like you would normally and just not worry about how the end result looks like. I'll take a sensible uniform code style over having to deal with that one developer who has awful preferences regarding code style.
Good bot
Good human.
Good good human bot bot.
Our current release of the product is scoring on Browserstack in better UX, performance and scalability. With LambdaTest's one click bug logging features, you can push issues from anywhere in the system directly into JIRA, Trello, Asana, GitHub, GitLab, Bitbucket and Slack. Which in turn will help you to manage and triage bugs easily. We have real time browser testing, screenshot testing, responsive and Smart UI testing features.
Sweet!
But that 1 developer who has awful preferences isn't choosing those preferences to be difficult, they genuinely do that because, to them, it improves their ability to read code. It might just be "that one developer" at your company but scaled up across the world that's 10's of thousands of developers whose QOL is being degraded. I don't think that's an acceptable solution never mind a good one. Admittedly it's maybe the best solution we have currently havebut, like democracy, only because it's the least worse. 
Prettier can be configured, so it's not necessarily one true way. It's one true for your desired rule set. I personally prefer this because I would rather the computer keep my code formatted and allow me to use my energy to focus on solving problems. Also, having your local code not match the source code by unformatting with git hooks sounds like over time it would be a nightmare to reconcile issues or have a conversation with co-workers about what's happening in a certain part of the code but it's not the same. Also merge conflicts if people work on the same block of code that gets formatted when pushed. How could you pull changes if your code doesn't look the same.
Okay so what do you suggest is kinda like the CR/LF that git is doing: the code will be prettier-ed with a common set of rule just before git commit and revert to YOUR own rule? I wouldn't say that it wouldn't work, but it's a pretty bizzare idea. I mean you can already do it using git hooks with two prettier profile, can't you?
I've been using Sequelize recently, and there aren't a ton of great articles, so thanks for sharing this. This is a really thorough overview.
Nobody is really forcing you to upgrade babel in the short term though. If you have a project that transpiled perfectly with a babel version, stick with it.
 **Often times, it doesn’t ensure DRM i.e. A systematic approach to copyright protection for digital goods. Its purpose is to prevent unauthorized redistribution of products and restrict the ways consumers can copy content they've acquired.** **And yes, DRM is a good thing. Apart from this, Distributed from an app stores means available for the users to download from the app store.** **Cheers!** 
I should clarify that my intention isn't to throw shade at prettier, they're doing rocket science as far as I'm concerned but I think conceptually the best solution for everyone would be if formatting just wasn't important. I've only had a glance at it but I thought prettier was fairly set in it's rules, I know there is some wiggle room in places but it still imposed a fairly strict format.
Thinking about it mutable formatting does cause a nightmare when one dev is talking about an error on line 109 that isn't going to square up to where the code is in everyone elses version. Got to concede I don't see an easy way round that one. On the last line, git would be comparing two sets of OTW code, pulling OTW changes and then it would reformat into the users style. 
This is awesome!! I started something similar but with the Atari 2600 ([TIA](https://en.wikipedia.org/wiki/Television_Interface_Adaptor)). Of course someone else already did it but I still wanted to make one myself It's a lot of fun learning how these older CPUs work
i have published my code to npm ([https://www.npmjs.com/package/react-popper-tooltip](https://www.npmjs.com/package/react-popper-tooltip)) Code: [https://github.com/mohsinulhaq/react-popper-tooltip](https://github.com/mohsinulhaq/react-popper-tooltip) Example: [https://codesandbox.io/s/pykkz77z5j](https://codesandbox.io/s/pykkz77z5j)
You say easily like its all done and packaged up already, you should put your code up for us.
I'd love a free app that paid me money for doing nothing. That would be fun. :)
If there is just one developer working for me, doing their own thing, not following rules and conventions, I will simply find and fire them for not getting with the program and causing more downstream issues then they could ever solve even if they are a rockstar.
If nothing more, games can be interesting and fun. Little ones or big ones, and they let you exercise creative freedom instead if working towards a real concrete goal (functionality).
&gt;Reformatting on the fly is the new thing You just said it, this is stage 1-3, you are wanting stage 10 already.
Learning ELIZA, with knowledge base stored in the server.
Sure doesn't seem to be down on my side.
Check your package.json file.
It could be nice if you can give me some feedback on it. New release will come to make the usage more fluent and the readme more efficient and add some cool features. Thank’s a lot to you reader :) 
Are you a robot or using google translate? DRM strangles and divides the open internet and free internet. App stores are bad since their centralised under one corporation meaning they decide what to show users and malicious apps can only be removed if the gatekeeper corporation spends resources on doing so.
Hmm...interesting, have you done anything with ELIZA?
Oh look, someone who writes JavaScript complaining about the ecosystem changing. I see pain and suffering in your future. Perhaps you should consider a career change or looking into babel-preset-env.
Make a food tinder app, fun and straightforward
What would a webiste have to do with my package.json file?
This is probably an issue with CORS. Take a look at https://enable-cors.org
Why is nobody asking the real question here: What the hell kind of developer job doesn't let you install shit? The only prerequisite I have to the team installing shit is that I never have to deal with their computer issues.
But my whole point is that formatting isn't a 'getting with the program' issue. Readability of code is a subjective issue, you can't just pretend it isn't and think that makes it go away. You can fire everyone that disagrees with your opinions but I'd argue that that approach isn't going to make your company better.
Aye maybe that's a fair way of looking at it.
I guess they will never know when their servers are down. I don‘t think that they have proper monitoring and incident management.
Not saying your ideas are bad, just think we are not there yet, still too many unknowns and variables.
Oh sorry it's probably in the visiting module then.
Great article, too bad this links w3schools
I don't think I phrased it well, but I have been through this, and I was that one guy. What did I do? I learned, I researched and then I began to understand different views. What I got was most important was not ME, it was the team. By me changing we all succeed on one level, by me being static and not changing we all failed. I used firing as a joke really, but I did fire my own preconceived notions, got over myself and just started using a format everyone was able to use, and I think that is the real point.
The easiest way is just to step through the code - look at the examples, and step through them using Chrome's debugger so you can see what's going on under the hood.
Good, languages that have significant whitespace are inherently untrustworthy :)
The library’s `index.ts` file does not appear to use `module.exports` so using `require()` will not work.
What’s wrong with w3schools?
Made me LOL :D
A ES6 library can feature both ES6’s `export` and `module.exports`. This library simply doesn’t have it.
Not being aware of the parts you actually use was the problem that lead to this. It was too convenient for people to throw in babel and use whatever feature anyone happened to *propose* as language feature, confusing it with something that is or will be standard part of the language. Especially in early stages, proposals should remain fluid and adapt without worrying about breaking changes, they should *constantly* break and change if it makes the potential final specification even a little better. When too many people start to immediately rely on them without understanding the implications, it becomes awkward for everyone and the process suffers. Forcing developers to make a choice with each plugin doesn't completely solve the problem, but at least ensures *more* developers will understand the implications of using a specific babel plugin and in general see them as third party plugins, instead of upcoming versions of the language.
Gracias! 
Man my wife would love this. I might have to build it in app form now.
Hi, author here :) The mission of Astroflow is to provide a unique, superior experience of logging among all programming languages. You can find the Go version here: [https://github.com/astroflow/astroflow-go](https://github.com/astroflow/astroflow-go) And the website here: [http://astroflow.io/](http://astroflow.io/)
Unless you have a problem with the _encoded data (string)_ itself it's not a JSON question in any case. After decoding you have a Javascript object. Unless you iterate over the actual JSON (string) using string functions.
I'm using https://resttesttest.com/ to make the request right now. Sending 'Access-Control-Allow-Origin' : '*' and the Authorization didn't do anything :(
Nothing. It used to be bad. People still hold grudges. MDN is better but W3 is [fine nowadays](https://www.w3fools.com/).
I came to say the same think. That's messed up. 
W3school* Please type the full name. So it won't sound like W3C, which was their purpose to trick people. 
You'd normally see this with `.call(this)` instead of `.bind(this)()`. That said, these days I'd just use an arrow IIFE since arrows already use the outer `this`: (() =&gt; { this; })();
Is there a case where you would need this? One of the main purposes of an IIFE is to provide a scope that's separate from global. In that case, `this` is the same as `window` so if you need "this" you could get to it via `window`. Of course since your goal is to escape `window`, its probably not likely you'd need it, any output of the IIFE being captured by the return value.
That's correct. Go with mulitple tutorials available over the Net. if you want to develop API's better to learn the framework like express/koa. Currently even I am using FASTIFY for which there is no book, but a lot of plugins and documentation is really Good. and Google is your best bet. I find books provide you summarized info ( if you have time to read many books then it does make sense as every book caters a different mindset). 
Class methods don't help you with anything related to `this`. It's shorter, but basically identical in how it works. class Foo { method() {} } //same as var Foo = function () {} Foo.prototype.method = function () {} Also remember, `this` is a **variable**. Along with `arguments` it is automatically calculated and added to the scope. With arrow functions, they are not automatically added, so trying to use `this` or `arguments` simply crawls up the scope chain the same way as any other variable would.
The difference is that destructuring is static and predictable.
https://www.w3fools.com/ this website was created to warn against W3schools, it was created by Front-End community leader. Now they're saying it has improved. So I guess we should stop mocking it, and actually suggest it to learners, but not without other resources. 
I learned many things for SVG there, and with playground, you can apply and modify example on the way. MDN is a great documentation but not good tutorials for the beginner.
I have a policy. Add `"use strict";` at the beginning of the script tag. If the code fails, its time to be re-writing it. Code that uses anything that breaks strict mode is 100% guaranteed to be extremely slow and not maintainable. Likewise, if the code contains `eval`, it's time for a re-write of something because: `eval` is terrible for performance, `eval` is generally a huge security risk, and `eval` rules change in strict mode (esp scope rules), so you probably have bugs.
What do you normally call `new` on? Isn't it always a class constructor function?
The line &gt; "localhost": false Change 'false' to 'true'.
Yeah, hear hear! Any time I’ve contacted them (npm) with bug reports or questions they have been disrespectful, condescending and just all around unprofessional. I understand they have a paid service - I would NEVER pay for it because I don’t trust them and I won’t reward their poor attitude.
It did catch on - years ago - when there weren't any viable alternatives. Prior to 2011, I wrote the majority of my IIFE's like this: (function(global, undef) { console.log(global); }).call(null, this); The reason for the `undef` was because in non-strict mode, the keyword `undefined` could be overwritten as if it were an ordinary variable, so getting a reference to an actual undefined variable via a parameter that wasn't passed to the IIFE was the safest way to ensure your code was safe from at least one form of tampering. This is unnecessary now, because of Arrow functions and strict mode. The same IIFE could be expressed as: (() =&gt; console.log(this))(); In modern JS transpilers like Babel and TypeScript, if you set the compile target to &lt; ES6, you will notice that the Arrow function syntax compiles down to something along the lines of this: "use strict"; // ...helper/module code here... (function() { return console.log(this); }.bind(this))();
Yep, that's pretty much the gist of my original comment
In strict mode they're block scoped.
And I corrected myself. 
Why are you nesting promises? Just chain the thens ...
People can learn to work with different conventions and if they can’t then they probably don’t belong on the team. Why? Suppose you let the one person who can’t work with your given convention either decide to ignore it or dictate what the convention should be. What do you do when you then get someone who can’t work with that person’s convention? You either allow them to also do their own thing - at which point you don’t have a convention - or you force one of them to deal with it. If you were already going to force one of them to deal with it then you could have just started by making that first person deal with it. The goal of Prettier isn’t to make sure everyone is happy, it’s to make sure everyone can spend their time doing something other than bickering about their subjective opinions. Everyone agrees that some part of the convention is something they won’t like but that’s ok because everyone knows that everyone else is making the same compromise and that it’s for the greater good of the team. Someone who can’t play along isn’t a team player.
TIL, thank you. I was testing it out in the babel REPL but that only hid it from function scope once I tried to reference it there!
I'm intentionally showing bad design - although to really demonstrate it, I should have included additional steps inside each `.then`, to make chaining them more difficult.
JavaScript* 
With was predictable ... if you took into account every possible scope involved ...
Yeah, as I recall, `with` could be used with `this` (which can be easily changed). There were also weird interactions with `eval` or `new Function()` as I recall. I don't miss those days at all.
The sound is WIP indeed ! And giving me a lot of trouble... Well, to be honest I did this project for myself, it's more like a demo than anything else. So I hope it will remain small enough so that it does not hit any of Nintendo's radars! \^\^
Respectfully, no. When in Rome - one of the biggest benefits of JavaScript is its lack of strict typing. That allows me to be enormously more productive than something like Go or Java. I carefully name variables - I know that “name” is a string and “height” is a number just by name. The sorts of bugs I encounter are usually ordering bugs - something doesn’t happen that should or vice versa or a race condition. Or something is undefined. Strict typing does not help with these IMHO. And in React I have PropTypes which help enforce types where they matter (inbound to a component) or required vs optional. I think so many devs make the argument coming from strict typing because they haven’t yet adjusted to the JS way of thinking. If those devs want strict types then they can always stay in a strictly types language. I don’t want all languages to converge. It would be like opposing “white space is syntactically significant” in Python - either you accept it or you don’t. I don’t personally see the point of trying to mutate Python to introduce scope braces just like I don’t see the point of trying to mutate JS to add strict typing. I hear you feel differently and that’s OK. :-) I just wanted to point out my own datapoint that JS’ lack of strict typing makes me MORE productive, not less productive.
Looks cool but I don't think its for me. I don't like having a hard dependency on a lib on all my files. I really like how bottle js works https://github.com/young-steveo/bottlejs or vue-inject https://github.com/jpex-js/vue-inject Also I think you have some typos ;) `Injetable`
It was never bad. People have always just been really snooty about it. 
Hey, thank's for your feedback. I didn't understand what you mean by hard dependency, could you explain me what you mean about that ? However, TornadoDI is a back-end library not a front-end one. It works on javascript and typescript project. And yeah, i saw the typo earlier \^\^ i will fix them soon :)
Nice ! Do you have something that works already ? :) Would appreciate to have a look at it !
Demo doesn't run in latest Chrome: &gt; Offscreen-For-WebGL-000001731EA2AFE0]GL ERROR :GL_INVALID_OPERATION : glDrawArrays: buffer format and fragment output variable type incompatible
its still valid, somewhat less important that it used to be. People used to use it to ensure browser compatible code, (as i understand it), but thats less so now. React is pretty advanced in my opinion, others disagree, but i have been learning javascript for a year and i dont find a need to do things in React. 'react docs getting started', is possibly the best guide to a framework ever written though. 
Demo doesn't run in latest Chrome: &gt; Offscreen-For-WebGL-000001731EA2AFE0]GL ERROR :GL_INVALID_OPERATION : glDrawArrays: buffer format and fragment output variable type incompatible
The error originates from here: https://github.com/williammalone/Simple-Drawing-App-with-Bucket-Tool/blob/master/drawing-app-with-bucket.js#L755 There is a commented-out alert telling that it doesn't work on localhost. If you console log the error message in catch block, it will log error "cannot be run DOMException: Failed to execute 'getImageData' on 'CanvasRenderingContext2D': The canvas has been tainted by cross-origin data". This is because browser doesn't consider the files from your local system to be from the same domain. You'll need to set up localhost server to test it locally.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [williammalone/Simple-Drawing-App-with-Bucket-Tool/.../**drawing-app-with-bucket.js#L755** (master → 91e5eda)](https://github.com/williammalone/Simple-Drawing-App-with-Bucket-Tool/blob/91e5edaaa529a957df72ceeebfb568136d799977/drawing-app-with-bucket.js#L755) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3tvw1q.)
I wish, I started it but never finished Here's the one I mentioned that is **not** mine: [https://github.com/ppeccin/javatari.js](https://github.com/ppeccin/javatari.js) 
They're pretty useful for using await in a non-asynchronous function.
How long did it take you to get this far?
Why not just make the function `async`?
\&gt; Readability via formatting is both a very real thing and entirely subjective Yes! So how do you format the code when you have many people, with different opinions, working on the same code simultaneously ?
Right, in ES6 block is the conclusion I'm coming to
That makes sense. I know the HTML logic is working so maybe I'll strip that out and save it, start back at the result and focus on returning the actual objects I need first. THanks!
[MSSQL Query Builder](https://github.com/CharlesStover/mssql-query-builder) - A query builder for SQL Server. I don't expect it to take off in popularity or anything, but I would like for it to be as professionally made as something that has taken off in popularity. I tried my hand at verbose documentation, unit testing, and CI/CD. Not sure what else it needs or what it possibly just does wrong.
My team built a DI system in Fusion.js (a React-based framework we use at Uber). Some feedback off the top of my head based on some features we needed: - it's useful to be able specify tokens as optional, for example you may depend on a service, but might want to use a canonical one out of the box so as to not force people to wire up things unnecessarily when they just want to use the out-of-box tool, or maybe you have configuration that has default values - we used non-stringly tokens. Strings "pollute" the DI namespace and you could conceivably get collisions if you have many large subsystems - we added a feature called `enhance`, which basically takes a registered service as a function argument and lets you return an augmented version of it. This is useful for example if you need to attach webpack HMR integration for a specific library in a specific file - can you override a registration before resolving? As in, export `bootstrap` from my app, then override various things in an integration test. This, to me, is the most important feature in a DI system. - as a follow-up to the last point, what happens if you originally registered with registerSingleton? Does an overriding registration keep the singletonness of the original one? - decorators in Javascript are a pet peeve of mine. They are only stage 2, folks! Babel has configuration for parsing decorators, meaning it's nearly impossible to generically codemod code that uses them at this point. 
Was going to say the same. Does anyone actually have a justifiable reason you'd want to rewrite, throwing away OOP?
Just because a CDN can gzip your dependencies doesn't mean you don't worry about overall size.
Fo
Have you worked with this tool before? Any feedback on how intuitive it is and how well it works?
Thanks ! It's slow though because of the way the sketchfab viewer api handles textures updates but still, it was a lot of fun to do :)
Hi /u/sasksean, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I see it in FF, but I can do that with CSS :)
Hi /u/ryhan112, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/jexplorer_exe, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Is that supposed to be a circle?
Occassionally I still land there, andit's not as bad, but it used to teach outright wrong things. A trick from a long ago is to not google "SVG", but "mdn SVG".
3, 2, then 1, no? Although it doesn't intuitively appear that way. The second parameter of each `fn` is being executed in order to create the `callback` inside the `fn`. It should read `fn(asyncAction1, () =&gt; fn(asyncAction2, etc))`.
If you are just looking for a bit of direction, I would use a for loop, also Math.random would help. A list of methods/functions not allowed would be helpful though.
Here's the list of methods we can't use: endsWith() includes() indexOf() lastIndexOf() localeCompare() match() repeat() replace() search() slice() split() startsWith() substr() substring() toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() trim() trimLeft () trimRi ght () valueOf() concat() copyWithin() every() fill() filter() find() findIndex() forEach() indexOf() isArray() join() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toString() unshift() valueOf()
I still put mdn in front of my query... mainly because I'm not looking for the tutorial. I want the docs. mdn does that for me.
or `fn` could return a function which calls async etc. The current usage looks like thats what they want to happen (?) even though `fn` is getting called for each case synchronously as it is now and no callbacks are going into the action 1 and 2 calls.
[https://github.com/renancaraujo/controlled-actions](https://github.com/renancaraujo/controlled-actions) **After some projects using some helper classes on my web applications, i've extracted them into a package. I'm still learning how to do documentations, so please, review the code and the README.**
trick question - neither callbackHell or fn are called in the outer function, so nothing is called first!
Eh, kinda? If I'm reading this right, we make an array of all letters in the alphabet, use Math.random to display the indexes randomly, and then omit certain indexes? Not sure how to go about coding that exactly. We are having trouble omitting characters mostly, we figured out how to get randomized characters recently.
But then I'd have to use toUpperCase within that custom function, wouldn't I? I can't do that.
 function getString(len, illegal) { var filtered = [], filterLen = 0, filterIndex = 0, i = 0, str = ''; 'abcdefghijklmnopqrstuvwxyz'.split('').forEach(function(v) { illegal.indexOf(v) === -1 &amp;&amp; filtered.push(v); }); filterLen = filtered.length; for (; i&lt;len; i++) { filterIndex = ~~(Math.random() * filterLen); str += filtered[filterIndex]; } return str; }
At some point, somebody sat down and created a javascript function called toUpperCase. At the time they did it, they didn't have access to the javascript function toUpperCase because it hadn't been created yet. That's your assignment. To do what they did.
Almost there! You are correct about 3, 2, 1, because each function is activated, not passed through as a function! But when does "yo" get printed? 
Yup. Makin me hate javascript tbh.
This is fucking rad as hell... thank you so much for sharing
Sooo, spoilers ahead: This is a trick question on more than one level. First, fn is a function which has two parameters, a function, and another callback function to be executed once the first async function completes. Also, it is imperative to note that this fn function returns nothing! Now, as @Charles_Stover pointed out, callbackHell calls fn three times, however the second and third nested calls to fn actually are not passed as callback functions, but activate the function! And because fn returns nothing, the first and second calls to fn receive no callback! Only the third most inner call to fn gets a callback, which prints "yo". Because the second call to fn is activated, it is evaluated before the first call, so asyncAction 2 is activated before 1. Same goes with asyncAction 3 getting evaluated before 2. So the correct order is 3, 2, 1. But when does "yo" get printed? This is another catch... 
We went for a Winston and Kafka to centralize our logs with other assets. Another good option is NewRelic. 
My advices on side projects would be to keep it short so that you keep being motivated and pick a topic you are interested into. For the moment I'm into Bitcoin and cryptos so my pet project is a small React app around that. Do you have hobbies? Then solve a problem in this hobby and others will find it cool :) (sorry if it's a bit off topic, because you asked us specifically for apps ideas).
To understand when "yo" gets printed, we need some knowledge of the js event loop. So asyncAction3 is called first, and has a callback which prints "yo". But we have no information of when does the promise get resolved. Still, can we know for sure the exact final order of execution? Yes we can! Because the callbaxk is async, it will be picked out of the original callStack, get added to the call queue, and eventually get put back by the event loop to the bottom of the call stack when the stack clears. So the callback printing "yo" will always be called last, even if the promise is resolved immediately. This is a somewhat hasty explanation, so feel free to ask some more about what I tried to describe. 
You know that modal on every website these days that asks you to whitelist their site in your adblocker, or to create an account and sign in? How about a site/api where you give it a url of a site and it spits out the exact script needed to hide the annoying modal. For example: business insider, popular mechanics, etc. Then you could use that into a browser plugin.
I'm sorry, but I think you're being a little difficult here. This doesn't sound like it's for a bootcamp part-time Intro to Front End class. It sounds like it's for a Computer Science or Computer Engineering course at a university. The point of the assignment is to figure out how to recreate these functions. Your professor didn't explain how to recreate the functions because that is the assignment. I'll do the first one on your list. String.prototype.myEndsWith = function(input) { var inputLength = input.length; var stringLength = this.length; return this.substring(stringLength - inputLength) === input; } I didn't use endsWith, but it does the same thing as endsWith.
i'd condemn my coworkers having this much discussion about formatting. use an editorconfig and get to work, stop having these trivial back-and-forths
CORS must be enabled on the server. In PHP, it looks something like this: header("Access-Control-Allow-Origin: *"); header("Access-Control-Allow-Headers: X-Requested-With, Authentication"); Add that to your API at the top of the file, right after &lt;?php , and you should be good to go.
The currying? Really well. There's nothing stopping you from passing in a configuration object instead of a single value to any of the parameters. Currying is just about building up the parameters of a function one at a time. Exactly how you'd want to implement that would depend on your use case. For example, if you need a base `url` and an `api_key` for every request, which will always be the same for all requests to the API, you might pass those in as a configuration object, then take the method, then the endpoint, then the payload (if there is one): ``` const NodeFetch = require('node-fetch') const fetchFactory = fetch =&gt; ({ url, api_key }) =&gt; method =&gt; endpoint =&gt; body =&gt; fetch(url + '/' + endpoint, { method, headers: { api_key }, body: JSON.stringify(body) }) const sweetApi = fetchFactory(NodeFetch)({ url: 'https://sweetap.io', api_key: '1234567890' }) const getSweetApi = sweetApi('GET') const postSweetApi = sweetApi('POST') const userData = { name: 'Mr. Biggles', age: 3, species: 'super cutest kitty kitten' } const userData2 = { name: 'Mrs. Biggles', age: 10, species: 'even cuterest puppy pup' } getSweetApi('users') .then( users =&gt; /* do something with users */ ) postSweetApi('users')(userData) .then( res =&gt; /* do something with response */ ) // or const postSweetUser = postSweetApi('users') postSweetUser(userData) .then( res =&gt; /* do something with response */ ) postSweetUser(userData2) .then( res =&gt; /* do something with response */ ) ``` How you want to break down the pieces, and what shape each piece should be, will depend a lot on the use case, how reusable you want the function to be, etc. But the basic pattern is really nice. Every parameter goes in through a unary function, so you only have to worry about the first argument being supplied, which is really handy if it ends up being used as a callback that might be called with multiple parameters. For instance, if you've got an array of user data and want to post all of them and then do something with the responses, but the API only takes a single user data per call: ``` /* setup above */ const postSweetUser = postSweetApi('users') const users = [ { name: 'Mr. Biggles', age: 3 }, { name: 'Mrs. Biggles', age: 10 } ] Promise.all(users.map(postSweetUser)) .then( arrayOfResponses =&gt; /* do whatever with the responses */ ) ``` 
sticky this and lock the thread :)
lol...
Looks nice! Do you know what would be the advantages over P5.js?
Instead of being so quick to judge whether this is a "stupid" assignment or not, you should consider what the intent behind the assignment is. Without any additional context and knowing about the constraints in what you can't use, I'm guessing this assignment is meant to not only encourage you to think outside of the box, but also the research aspect of it. A possible solution is the array of letters as someone had shown previously. But perhaps this is too obvious and the reason why the instructor disallowed so many array-related functions. An alternative way, and the one I would probably intend the student to eventually come across in their research and thought process, is to figure out how strings are represented and adjusted (this could segue into understanding how something like toUpperCase() works and recreating it). Here's a hint/starting point: https://www.w3schools.com/charsets/ref_html_ascii.asp This assignment itself is more of a general programming one rather than Javascript-specific. I have no great love for Javascript myself, but you starting to hate it on the basis of this assignment is just naive.
Oh okay, I didn't know there was a method that actually allowed that. But how would I know what to code for, say, a split function? My only issue is I don't know the logic behind the functions themselves, even if I know what they do. Sorry if I'm being difficult but this language is difficult imo and recreating this function seems to require a lot more knowledge than I have atm.
https://addons.mozilla.org/en-US/firefox/addon/hide-w3schools/
So I ran through it and it eventually gives the characters despite me calling what to omit. The code is otherwise perfect though. I'll try and figure out what to do from here.
couldn't find anything. Only disqus but I need a review/rating system not a discussion system
I second this question!
Well, ratings are just a glorified set of radial buttons with some persistent state. And ratings are just a comment system (which there are plenty of libraries for) 
Anybody have any experience using Laravel Mix?
When I was very noob at Javascript, I thought that lack of type safety and unstricting enough was cool, I mean you can do everything you want without throwing an error, right? Well, I was wrong. As I advanced enough(like after 1 month of first learning) I discovered that type safety and unstricting is the biggest flaw of Javascript. It's really so annoying, at least Typescript exists.
Exactly what /u/wild_thunder said. You know how many letters you need to generate. All that's left is to loop and check if the randomly generated letter should be omitted and handle it according.
See we got that part, it's literally the checking for letters to be omitted that we can't get. We've been sitting here for three hours tryna figure it out. We're extremely stuck.
Hi /u/Yanamo, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/deckele, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
\`babel-preset-env\` is conceptually incoherent. It’s purported goal is to change compiler output based on a "targeted" environment, but changing the target can also change how the source is parsed, so in actuality it’s setting both the "targeted environment" AND the "source environment". This prevents, for instance, \`babel-preset-typescript\` (or whatever it’s called) from adding es6 parser plugins b/c babel-preset-env is already dealing with them. I expect \`babel-preset-env\` to have a breaking change in the future as well b/c of these inconsistencies.
I programm with all of these and If you want to have fun and want to be fast, take Vue.js. I really wouldn't recommend Angular. I hate it. There is so much boilerplate, everything takes twice as long even It's the framework I use 3 times more than others. Also, the release cycles are hell. Prepare to update often and invest time in migration if you want longer term support than one year. React can be fun too, but I love to write plain HTML and thats why I for me would always choose Vue.js over React.
ok now do B, then do C.
Hi, Maybe your "peak" was too fast but I can tell you with a straight face that you talk too fast and understand too slowly. You can implement an async `writer` (think it as a winston transport), and the thread won't block. **It's his responsibility**. A default async writer is planned for v1. If you talk about the hooks, maybe it's not clear but their responsibility is not to perform long calculation but to potentially modify a little bit the event. So it's totally normal that the loop is sync and fast. 
Hey thank's for your feedback, I appreciate it. For the first point you mentioned, the usage of token is already implemented in TornadoDI. I have thought about and will change the type of the expected argument to be \`any\` instead of a \`string\`. The second point, you are completely right, it is on my mind as I mentioned in the previous point. The third point corresponds to TornadoDI as the \`useFactory\` which allows you to inject a registered class to be received as argument in that function. You can use the property \`inject\`, which is an array of \`token\` of \`class\`. The fourth point: indeed, if you register something no matter how you registered it and, then, if you register another thing with the same token, the first one registered will be overridden by the new one (in the same container that you are targeting). and then for the javascript part, there is the \`@Dependencies\` decorator, which will create the \`design:paramtypes\` metadata on the class to be able to deal with the injection. This means that everything works even in javascript :) Thanks a lot for the time you took
Fails in Chrome. Really disappointing in FF. Just a moving blue line. There are almost 10-year old WebGL water simulations out there.
Are you familiar with https://codepen.io/ ? Throw what you have in a pen and I can check it out. It will give me a better understanding where you are. 
Yup, I primarily write TypeScript now, and using TSLint makes it even better, and although it is very strict, it enforces some very useful standards. If you've not used it yet I'd suggest you do.
This is perfect, exactly what I needed. Thanks so much for the tip!
"split" is a much bigger lift to write a perfectly generic method. You have to account for A) no input B) empty string C) single character input and D) multiple character input. But even you just limited yourself to a single character input, try to solve the problem in English first. Or like, visualize what would be the steps if you had to "split" a rack of scrabble characters and explain to another person what those steps would be. With split you could do two things. 1. You could go letter by letter, and if the letter isn’t the separator, add the letter to a bucket. If it is the separator, throw it out and start a new bucket. 2. The other way would be to just remove all instances of the separator from the string, and then find a way to combine the chunks. That one sounds easier actually. You should also know that without built in methods, problems like this one are just as challenging in any language. In fact, you should have a solution in mind before you even start typing (which is a mistake loads of beginners make). Also, I saw what you said in another part of the thread. Once you get out of college, you will know 10% of what you need to know as a developer, and no one is going to spoon feed you answers at your job, so you need to get better at googling and researching. Your JS professor is doing you more of a favor than your C# professor whether you realize it or not. What happens when you have a client or a product manager who says "We need a chat program on our site" and you say "no one ever explained to me how to build a chat program?" 
Uh...okay, so I thought about it and I guess what I could do is just generate the letters and whenever the letter that is supposed to be omitted appears, shift it out of the index? But I can't use shift so that doesn't work. I get what you're saying, but again, this implies we have the common sense to have a solution ready, and know how to come up with solutions. My C# professor actually explaine things really well: for example, I had the idea for starting the C# assignment(creating a fake scantron answer sheet), which was simply comparing indexes of an array and outputting true or false for right and wrong answer, and false for no answer inputted. My only issue was knowing what base to start off on, until we were told about StreamWriter, StreamReader, and Dictionary. From there it was easy to understand what was going on and code accordingly. But here, we arent jnformed of these tools and what they're useful for, instead asked to create our own tools from scratch. All I'm saying is he could teach theory better before tasking us with difficult execution. If someone asked me to create a chat program in C#, I could actually maybe do it(not right now obviously) at some point because this prof explains the theory well enough for me to understand how to problem solve and create a base for a solution, as long as I know what the functionality should be. In this case, I don't know the base to go off of and I dont have the theory knowledge. Its like if someone walked into a retail store, asked for a particular shoe but only knew the color, and then proceeded to take all day only to find they dont have the shoe.
I heard one suggestion that setTimeout() could do the trick... does anyone know if that's a good option? If so, how would it be executed?
 What do you need shift? I really think you're overthinking these problems and looking for some magic solution. This is a hack I threw together, and it only accounts for a single letter separator. You'd have to write more code to get it to work with empty string separator, no input, or multiple letter separator. But it's to illustrate that you are trying to solve it in a foreign language (code) when you haven't solved it in a natural language. Remember what I said before? &gt;You could go letter by letter, and if the letter isn’t the separator, add the letter to a bucket. If it is the separator, throw it out and start a new bucket. String.prototype.mySplit = function (input) { // start an array var arr = []; // keep a placeholder string var placeholder = ""; // iterate over every letter in the string for (var i = 0; i &lt; this.length; i++) { // if the letter is not the separator, add it to the placeholder if (this[i] !== input) { placeholder += this[i]; } else { // if it is, push the placeholder into the array and reset the placeholder arr.push(placeholder); placeholder = ""; } } // push the last chunk in your array arr.push(placeholder); // return the array return arr; }
Hey, I'm off the clock, I can argue about formats and no-one can stop me. Although as my final input on the topic I'll say you can't have your cake and eat it as well. If formatting differences are enough of an issue to be worth enforcing a convention then by definition they can't be trivial for people affected the most. I'll accept that I naively thought the all things to all men solution seemed close but it looks like it's still a hard problem to solve. Been a good discussion though. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [astroflow/astroflow-js/.../**logger.js#L17** (master → 3541369)](https://github.com/astroflow/astroflow-js/blob/354136904ae4c68b193d2d3c3829951fc95fda51/src/logger.js#L17) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3ujmb3.)
Can't use push here. You're close, though. Here's my problem now:coming up with the English solution that you came up with. I don't have the theory knowledge to get to that first step. The way you explained it is easy and makes sense, but I can't come up with that for myself for all of these questions.
yes, it can be found here: [https://www.openprocessing.org/sketch/578536#code](https://www.openprocessing.org/sketch/578536#code) the custom variable is 'paintRoller()'
If it’s a “free product” why would I need to sign up for a beta to try it? Why wouldn’t you just put it on GitHub? As an open source dev, I have no incentive to use a non-open source tool. 
Maybe OOB SVG support? But then the question is what the advantage is over d3
I'm looking to get a small amount of users to refine experience/kinks before opening it up to everyone. Also, if it goes well, I'm hoping to monetize on the enterprise/corporate side.
Then why call it a free product .....
So write your own push method! This is the second time you've said "but I can't use that method" and the second time I've said "so write your own." Array.prototype.myPush = function(element) { this[this.length] = element; return element; } There. Now I don't need push. Pick any function from your list of forbidden functions and it can probably be written with for loops. And the nice part is once I've implemented a function, I could reuse that function to build my other ones. So I don't know what you thought you were going to find here. Software engineering is about problem solving and creativity, not using library methods to implement other people's solutions. Sometimes it sounds like you want someone else to do the work for you. And other times, if I'm being honest, it just sounds like you're looking for permission to fail an assignment because other people think its stupid too. I'm trying to offer you an approach to doing this kind of work. I'm sorry if that's not working for you. 
See that one I can't quite read. Once again, I'm not tryna be difficult or look for an excuse, I'm just trying to find a grasp on the theory that my prof failed to instruct me on.
You need to redraw the background each time before drawing your sprite.
"push" takes something and makes it the last element of an array. So let's say you have an array. var array = ["a","b","c","d"] If you wanted to change the "b" to an "x," what would you do? array[1] = "x" This is saying "i want the element at index 1 of the array to be "x". But if we we wanted something to go at the end of the array? That's what "push" does. The last element ("d"), has an index of 3, or "array.length - 1" because the array starts at index 0. So if we want to put something at the end, we'd have to give it an index of 4, since it's one more than than the index of the last element. And...since we know that the last element has an index of "length - 1," then the index we're looking for is.......length! So to put something at the end of the array, we just say: array[array.length] = "e"
Same problem 
Oh, I get it! See THATS something my prof didn't explain to me. Also, I'm going to assume based on code written so far that the base of creating your own function lies in X(this could be string, array, int, etc).prtotype.myFunction(value) ? If so, thats basically all I need to know to start theory crafting, although the coding will still be difficult. Its that type of explanation and example I need that my prof failed to explain.
Yup, state driven by promises rendering once they're resolved, 101.
...65, 67, 67, 97, 98, 99? They follow up after each other but that's to be expected. Otherwise I still don't see the pattern.
babel /thread
Uppercase + 32 = Lowercase. to make something Lowercase, take the character code and add 32 and convert back into a string. to make something uppercase, take the character code and subtract 32 and convert back into a string.
Oh...yeah I guess that's true actually. Aight so, using your code(thank you btw), I came up with this, but I can't get it to work. Where am I going wrong? function q2(input) { console.log(q2.charCodeAt(0)); String.prototype.mySplit = function (input) { // start an array var arr = []; // keep a placeholder string var placeholder = ""; // iterate over every letter in the string for (var i = 0; i &lt; this.length; i++) { // if the letter is not the separator, add it to the placeholder if (this[i] !== input) { placeholder += this[i]; } else { // if it is, push the placeholder into the array and reset the placeholder arr.myPush(placeholder); placeholder = ""; } } // push the last chunk in your array arr.myPush(placeholder); // return the array return arr; } } Array.prototype.myPush = function (element) { this[this.length] = element; return element; }
Why is that?
Awesome, No prob!
I agree, as mentioned above, I think Vue.js is something to play around with in personal / side projects and make react the focus for now. Thanks for all your feedback!
Just need Google chrome and notepad, homey
Just write your JavaScript to a text file and open it in a web browser. I'm on mobile, but something like [HTML5 boilerplate](https://html5boilerplate.com/) should get you started.
This is correct. Web browsers like Chrome ship with a Javascript interpreter, so you can use them to view .html files that you have on your own PC, which in turn can load .js files on your PC. Try googling "local js development" for this, although I suspect the Khan Academy videos will give you guidance for this too.
Chrome *is* the thing you run the program on- JS is designed to run in a web browser. It's the code that powers the behavior of websites that you visit, like Reddit.
Depends on what it does. The console may be enough, if it's visual though you'll probably need elements to manipulate unless it's an ASCII art program
There are a lot of reasons not to do it. Scoping, namespace collisions. https://stackoverflow.com/questions/6223449/why-is-it-frowned-upon-to-modify-javascript-objects-prototypes
Okay so I downloaded that. I'm not exactly sure what I'm supposed to do with it haha, I'm just looking through the files.
By script tags do you mean just the body and html tags and stuff? Do those need to be added to any JS?
I hate you
How are you using the function q2? It doesn't do anything. All it does is logs your input. Then, within q2, you create a new method on the String prototype (which will be attached to String in the global namespace, and not just within the scope of q2). But q2 itself doesn't do or return anything. 
Okay, I found that but I'm not sure what I use to open it. Might need to go through some more tutorials.
Demos are mesmerizing
You open the index.html file in your browser, and main.js in a text editor. Try something like Atom, it's easy to set up, or you can just use Notepad for something short.
Html file would look like this at minimum with one javascript file imported: &gt;&lt;!DOCTYPE html&gt; &gt; &gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;My Site&lt;/title&gt; &lt;link rel="stylesheet" href="./public/css/style.css"&gt;&lt;/script&gt; &lt;script src="javascript/react.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; Html tags don't go in javascript files. Unless you're using weird libraries like reactJS but you should probably work up to that stuff. 
So then it's basically a blank notepad I can just right anything in and it will be displayed in the index.html when I open it?
What do I write to return the numbers? I know I use return method but not sure where to place it and what to write after it.
Yep pretty much. It should be blank to start off with. The code your write in notepad won't be displayed, it will run. For example if you wrote `console.log("Hello World")` in the blank notepad, when you open up your browser and go to "developer tools", open up the console, and there it should be. Works best with Firefox or Chrome. Alternatively write `document.body.textContent ="Hello World"` and you should see it when you open up the browser.
Best case, sort will be N LogN complexity, while finding the max can be done in linear N time. I'm not sure if your Math.max with a .map method will be linear, but you can use a temp variable method instead.
Oh, my b. Write a function that accepts a string. The function takes the last digit of the ASCII code and returns a string of digits sorted in ascending order E.G. function("zDbc") returns “2,8,8,9” (z =&gt; 122, D=&gt;68, b=&gt;98, c=&gt;99) 
document.body.textContent ="Hello World" Thanks, that worked. So if I wanted to change the background. background(0, 0, 0); didn't do anything.
I could be wrong but I think the Math.max() version has a better runtime complexity. Array.sort is O(n log n) but Array.map and Math.max are each O(n). So O(2n) which ends up back at O(n) for the entire operation. I also think that one is slightly cleaner to read but not in a major way. 
OK, I see. You're pretty much nowhere. What I've given you are just facsimiles of the existing String method "split" and the existing Array method "push." I did them mostly to demonstrate how you could recreate JavaScript functions from scratch, so you could solve your problems without using the built in methods "split" and "push." But those two functions don't even come close to solving this problem. And what you've pasted in indicates to me that your issues may be more fundamental and can't be fixed on a Reddit thread and require some more foundational work/practice/study/tutoring.
Are you using alert()? If so, the answer is no.
If you are wanting JavaScript in your browser, _it is built into the browsers_. You do not have to download or install anything to run JavaScript in the browser. _That's what a browser is._ Unlike many other languages, JavaScript does not have to compile into an executable. The browser compiles and executes it _from its source code_. Where you would download some sort of C++ compiler in order to run your C++ code, Chrome/Firefox/Edge _are_ the JavaScript compilers and the JavaScript executers. Just give them JavaScript source code, and they will run it. No one has really addressed this, but if you are wanting JavaScript to run programs _outside of the browser_, you are looking to download NodeJS. Typically this is not what you are wanting, and you would probably know you wanted it if it was.
Can rematch do Reactive Programming?
They way they have it set up it is. https://www.khanacademy.org/computer-programming/background/6553689417613312 I'm confused on how to do that without their JS processor. 
That's not JavaScript. They're using an external library called "ProcessingJS". You will need to download and set that up by following the instructions on their website.
I don't know, I guess I thought it wouldn't be much different that that was. Really had me confused.
function sum(a, b) { if ((a + b) &lt;= 10) { document.body.innerText = "sum less than ten"; document.body.style.color = "red”; } else { document.body.innerText = "sum greater than ten"; document.body.style.color = "green"; } }
Glad it helps I actually donated $5 to this person haha, used it to bypass some dumb adblock obfuscation thing some site wrote that was in JS
Loops are cheap though. The reduce version is actually slower: https://jsperf.com/mathmax-vs-reduce
Use a `for()` loop or call `.reduce()`
Looks like you're correct; it's not used.
I always feel like I'm missing something with stuff like this, but I write a lot of JavaScript everyday, and it certainly does look like that release variable will go out of scope and is never used. I'd have to say you're right. 
I would like to assume that they intended to have release passed into the execution of the callback function at the end replacing the done parameter. Does that sound right to you?
I learned using khan acedemy, well started too. They teach p5.js so you can't go far using the site, I recommend checking out a site called open processing for when you do have internet
So just looking at it a little more, maybe the intent was to pass release back in the callback instead of the "real" done function? As the release appears to be a of through function for done that also does a little extra clean up. My best guess as I've never used that package before.
you didn't put the brackets before and after sum, why? i tried your code too but didn't work, please help it's important 
Nvm missed the last statement but in p5.js as far.as I'm aware it's impossible to remove just 1 object, unless you have an array of everything you wanna keep
https://codepen.io/pen/XByVQg
ok it works on codepen, thank you very much! but when i do this with atom the console log said this " document.body is null " and doesn't work.. 
I mean I do really like and it keeps me motivated. Will check out open processing. Thanks. By the way, where did you move too after you got what you wanted out of Khan Academy?
Well I must admit you chose a rather cool project and is great to see how you succeeded at it, keep it up man!
what is this tool? looks fun
The website allows you to write any number of JavaScript snippets. Each runs as many times as possible in a given time frame. The one that runs the most number of times wins as being the fastest. Generally for this to be meaningful, each snippet attempts to do the same thing by different means -- same input, same output, different way to get there.
those demos are amazing. they're so smooth and even work almost flawlessly on mobile. only ones I couldn't get working are the two color demos.
Maybe https://www.npmjs.com/support
Even in your screenshot, reduce is slower than the loop.
\[removed\]
Why ?
That is what I thought reading it. 
I think they’re completely different. This seems to be more modern, and focuses explicitly on drawing with points and arrays. P5 is more general-purpose. 
JavaScript, by default, passes parameter values “By Value”, not by reference. This means that within the function, it effectively creates a new variable called test which is only in scope for that function. To make your code work, you should return test at the end of your function, and then set test = changeText
hey is it ok now?
hey is it ok now?
Have you tried CodeAcademy? I'd say go through HTML / CSS / JS, and pick up jQuery somewhere else, then make a small site with some minimal functionality. Anything in particular you're struggling with?
Code your own project, preferably solving a real-life problem that affects you. No better way of learning.
&gt; var test = 'hello'; &gt; function changeText(a){test = a} &gt; test 'hello' &gt; changeText('Changed'); &gt; test 'Changed' &gt; Seems to work just fine? Whats your actual code?
 1: books read 3 or 5 books together because what you read in one book you are going to read it in another also it is repetition which is best practice 2:udemy 3: built-in functions and objects for reference example if there is a problem which is related to arrays some how I go through All methods in array object and chose my method which works 4: try to re write function example lodash has alot of functions try to write it again your way using pure JavaScript
This so much. I love Webpack, but the docs of (some of) the plugins and loaders can be terrible. I've had times where I was looking for something in the docs and I resorted to searching the GitHub issues for an example, because the docs didn't provide good explanations or examples. If they had examples at all. Some of them just assume you know how Webpack works already which definitely was a pain when I started using Webpack. 
I worked. What's your actual code?
I prefer `for...of` as it is "idiomatic" JavaScript. V8 engine also optimizes it better.
Reduce is more idiomatic. Save the loops for performance optimizations. 
Reduce is more idiomatic. Save the loops for performance optimizations. 
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://jsbin.com/lunonuyavo/edit?js,console) - Previous text "T" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
You got any examples of beginner books to try mate? 
I'd throw some shade at prettier. It's got a _ton_ of really bad opinions baked into it. Fortunately, you can fix it with eslint integration.
Hi, I'm the author of Pts. Just realized it's on reddit -- thanks for posting and thanks for your question. p5.js and Processing are excellent libraries for education and creative coding. Pts comes from a more conceptual angle, starting with a point or vector (Pt class) and explore various ideas of "connecting" them. I wrote about this idea a few years ago (with an older library is called "Pt"). [https://medium.com/@williamngan/pt-93382bf5943e](https://medium.com/@williamngan/pt-93382bf5943e) The key point is that you can use Pts with p5.js together :) Pts extends standard javascript classes (Array, Float32Array) and most of the utility functions are static. You may use only a small subset of it and use it together with other libraries of your choice.
Jon Duckett books is really good and helpful. Google Javascript&amp;j query by Jon Duckett
Just this is enough - https://github.com/getify/You-Dont-Know-JS
I would say Pts is more readable and easier to learn for beginners. But I'm biased :) d3 provides you with a lot of good stuff for data visualizations and handling datasets, which Pts doesn't have yet. 
The creator of redux has a very simple and approachable redux tutorial that walks you thru re-creating redux. It probably won’t teach you enough about using it with react but it should make you comfortable enough to use it however you want. In short, it’s a basic pub-sub functional library. 
This is why I love working with ember for frontend UIs. Testing is so obviously structured that you can’t confuse integration/acceptance tests for unit tests. 
Best thing to work with when you have to push things to production quickly. Every time I’m back to react, I realize how less productive I become. Still, react is more fun while ember is very boring 
i would recommend [http://www.allitebooks.com/](http://www.allitebooks.com/) a lot of javascript and other programming books see the year of release i am sure you will find what you need 
Cheerio describes itself as a "Fast, flexible &amp; lean implementation of core jQuery designed specifically for the server. " I don't think you can make it work on the client side, which is what you're currently trying to do.
Maybe you need to work on your fundamentals before diving into libraries and such. Get a good feel for JS and web development, then start adding libraries 
As someone who's been in the game for a little over 30 years let me assure you that it's ever been so. In fact one one level things have stabilised - I used to seem to have to swap my main development *languages* very 5 years or so, but nowadays it seems to be swapping frameworks and languages have been constant for a while - although the framework swapping speed does seem to be increasing! If coding against a constantly moving target bothers a developer then they really shouldn't be in the game (go and be a DBA instead, it's more stable)
Adblock said it's a bad idea, as all in all the sites need money to operate
It is not always easy to come up with a useful project that isn't either, incredibly trivial and boring, or way too complicated and tedious Sometimes I think a good way to learn is to make your own clone of something but make it slightly different, maybe adding a new feature or just changing how the interface works
Well, your post seems like one of the most important think i react development is to choose correct font...
I think scaling in CRUV is anti-pattern. Suggested pattern to structure files is by "feature first", not "by type" first. Its also our experience from multiple languages, to structure "by feature" first
Short answer - you can't. 
We're not going to do your homework for you, but we'll help you if you give more information. What have you tried so far? Which particular bits are giving you trouble?
The idea seems correct. There's an extra ) on the line you're defining the variable though. Does fixing that solve the issue?
haha yeah, it's basically the only thing that matters!
More so than to keep reading and watching tutorials you should aim to actually write code. Use that to find out where you're struggling, learn new concepts. Then come back, refactor with new gained insights. Why don't you try writing something like Tetris? It's simple maths, drawing on a canvas, maintaining state, a couple of business rules and a lot of event handling. Small enough scope but all these things (minus canvas drawing api) are required for every project you'll start.
If you're comfortable with naming by features, that's great. I think it's a bit tough to call it an anti-pattern, though. Plenty of Rails apps have done ok over the last decade with a similar system. And you can always create subdirectories for your features.
Npm 5 IS wildly broken. I was hoping the lockfile would have made it reliable but have seen nothing but problems using it whereas comparatively yarn works as you would expect.
Try the coding train on yt.
Hi /u/Kenman, this post wasn't a help request, but a javasceipt riddle. If not here in /r/javascript, where would this kind of exercise be appreciated? Thanks
JS can actually represent up to 52-bit integers, it's only the bitwise operations that are restricted to 32 bits: ``` &gt; let x = 123; undefined &gt; x.toString(2) '1111011' &gt; x = x * Math.pow(2, 35); 4226247819264 &gt; x.toString(2) '111101100000000000000000000000000000000000' ``` Also, more and more JS implementations are adding big integer support: ``` &gt; let y = 123n; undefined &gt; y.toString(2) '1111011' &gt; y = y &lt;&lt; 35n 4226247819264n &gt; y.toString(2) '111101100000000000000000000000000000000000' ```
1. write unit tests for every single function until you learn what too much unit tests are. 2. do that immediately after you write that function, or even before. 3. use jest, not mocha. 4. you need to mock because you don't want to depend on any external thing, that means an external api, database, browser, etc. You want your tests to be lightning fast and deterministic. 5. for mocking I've use sinon, mockery and I think jest has some built in mocks, not sure which one is best. There's no good tutorial on the topic, you just have to learn. But know one thing, if you work on a program for more than 2 weeks without extensive unit tests, you can be guaranteed that your program is shit, and that you're wasting time debugging a program that would have 0 bugs if it had tests.
I'm actually horrified by your choice of font and colour scheme!
WebGL: too many errors, no more errors will be reported to the console for this context.
I'm only joking, I always feel like my design skills are too bad to pick nice colour schemes so I usually stick with the default
Thats really interesting, didn't realise the limit here only actually applies for bitwise ops. So in my odd "bitwise encoding" scenario, big integer support would allow for more and higher values to be stored? Any idea what the limit for Big Int supported environments will be? Thanks for the info
I agree that it's not easy. I code PHP for 3 years and I learned Javascript and Node.js when I was build my college final project. It wasn't the best product, but it taught me a lot what I shouldn't do, JS design pattern and async/await. I'd suggest you to look for a real life personal project. It won't a state of art, but it'll help a lot. You need to fall from your bike to learn how to ride the bike properly.
But the way too complicated and tedious ones are where you learn the most
It shoukd work. One thing you can try: wrap a block `{}` around this code (or an IIFE). That prevents any potential name clashes.
Freecodecamp.org is a lot better in my opinion 
Because you’re calling a global variable from a global scope. If you want to console.log test = testChange, you should do it from a local scope which would mean to move the console.log within the closing brackets. 
What is "business logic"? And why React components could have this? I was under impression that React components were just for making UI.
Business logic in this case means feeding data in from outside the application, and responding to events -- usually by communicating with the outside world. For example, my `&lt;CourseLessonContainer&gt;` knows how to tell the server that a lesson is complete, and knows how to receive a list of complete lessons from the server for the sidebar.
hehe fair enough :) The defaults are often fine too - I just prefer this :) 
we use it in production. It is the best tool i ever had for building PDFs out of HTML. well since it works on console level i would call it very intuitive . you basicly just use it like &gt;wkhtmltopdf r/http://example.com \-parameter1 -parameter2 as all tools you should create a own stylesheet for the view where you simplifiy it like a print page as much as possible. 
To get an API key you can use OpenID connect. This is the single signon solution using the OAuth protocol. It will let google ask permission and then provides your app the API key of the signed in user. To be able to use it you need to set up credentials for your app. See https://developers.google.com/identity/protocols/OpenIDConnect You also need a OpenID connect client library. This one works in the browser https://github.com/IdentityModel/oidc-client-js/ There are are 2 flows to sign on. The implicit flow doesn't need a server side component. But does expose the API key to browser, meaning you need to secure your app. The code flow requires a server side implementation. https://www.npmjs.com/package/openid-client Read more about OpenID here https://connect2id.com/learn/openid-connect
It's pretty easy to get lost in the noise of the JavaScript ecosystem before you even really realize that you can actually build things with it. If you haven't gotten into webpack yet, expect another considerable hurdle. What I would recommend, first show yourself that you can build something, gain that confidence, then dig in deeper. To do this, I'd recommend Next.js, or create-react-app. They are both react heavy, which is a level or two removed from "just JavaScript", but you're no doubt headed in that direction eventually, and you'll absorb some best practices in getting a feel for how react is used. Trying to learn fundamentals without applicable context is tricky, and... dry. So start with either of these options and you'll actually have a web application to build on and some best practice bumpers to help guide your direction.
Wow holy crap... like to see base 36 handle that lol
Sure, I will do that. Will post a link here after work. Sorry about that!
AS far as I recall, it was a lot slower when first introduced (as with a lot of ES2015 stuff), but has obviously been optimised in the years since. That said, it still seems mostly slower (particularly iteration) on Firefox 61 still.
Read the free 'You Dont Know Javascript' series. Just google it. Also, start building small projects. No matter how stupid/easy the project itself might be. I did a lot of clocks, timers, calculators etc. when I started out. You could check out /r/dailyprogrammer for some ideas. 
Is it normal to open a lot of posts with the same content ? 
Wow you weren’t kidding, that post history is insane.
I thought Vuejs was just that one dude
It's the great book. But if topic starter is newbie in programming than he needs a book simpler.
I'm not following what requesterid is, same goes for many of the other variables. Also, how large are we talking here? A lot of this should be functionalised is my first observation, particularly when you say "so on and so forth". if a particular task is time consuming and can be moved to a webworker, that might get you some benefits. I'd expect to see camel case or pascal case as well. I'd design the data structures differently. It's easier to increment an object property like so: modSixStatuses[dataval.modsixscore]++ Rather than to use logical statements which run three tests and then do the above task. As far as writing from data to create a table, there's https://datatables.net/ if you're using jQuery, or d3.js if not. As a general principle, build the information you want to create a table with, then write it out to a table separately. Don't mix up the content writing with the data manipulation.
Loops are also imperative programming, which is inherently more difficult to read and maintain. If I use reduce, I know exactly what I'm meaning to do by my loop. And in the long run, whether it is faster or not doesn't matter at all for 99.99% of cases. You should be using JS for high performance calculations anyway. You delegate that to a server that uses a much better language.
Program your own project - this helps tremendously. The biggest take away I can say Ive learned from doing this is that you can't just give up when you get stumped. Sometimes I've hit problems that are seemingly way over my head, but pushing through and figuring them out has improved not only my programming skills, but have given me confidence in my ability to solve problems. If you get to a point where you just can't figure it out, you've got the internet to ask. Reading code - I like to browse through code and try to figure out what it does. This for me helps when learning a new codebase, but really I do it because it increases the amount of time I spend looking at the language. The more you look at it, the more intuitive recognizing syntax becomes. I'm sure you know HTML syntax, so think about this like if you were to see an &lt;img&gt; tag without the src attribute. It would immediately jump out at you as being wrong. Another added benefit of reading code is that you can pick up on better ways to do things(best practices). Write articles/make videos - I think this is a pretty good way to really cement what you know. But I do get that maybe it's not for everyone. Let's say you wanted to make a tutorial video on building an HTML5 canvas game with Javascript. For one, you have to program this. But also more importantly, you'll spend time talking about and reinforcing the concepts not only to others, but back to yourself. Plus on the upside, you're giving back to the community that so eagerly helps others. Codewars - I like Codewars and spend a night or two each week completing challenges. There are a few sites like it, so you can find whichever you prefer. This has helped me with learning to work with data structures like arrays and objects. Almost every challenge has something to do with them. But also it helps boost your problem solving skills. I definitely recommend checking out a platform like or similar to Codewars. Learn to Google - this is a for real skill I think a lot of people forget to mention. If you have an issue, summarize it into a Google-able query and fire away. You can almost always copy and paste a snippet of an error into Google and get back results from Stack Overflow or Github. Time - You aren't gonna learn this overnight or in a month, or however quickly some video or article claims. Anyone who says you can learn this in some ridiculously short timeframe is someone who doesn't know programming. Javascript aside, you have to learn how to program. Programming is an entirely different skill aside from learning some languages syntax. Just relax, ENJOY the process, don't succumb to doubt, and then eventually you'll be where you want to be. 
Playing this game is just adding names and then nothing? It's kind of boring. Shouldn't the players roll the dice? Or stop the wheel of fortune? 
I think p5.js is a lot more beginner-focused as well. Personally I like the API of pts much more than p5
You see this is the exact problem! There is a phrase that I really like at the moment: "the complexity needs to live somewhere" and that kinda gets to the source of the overall issue. /u/DerNalia you make a great point about the separation of concerns between a Route and a Controller and as your app gets bigger you will appreciate those separations of concerns more and more 🎉 One of the biggest issues with naively implementing components instead of controllers is that Ember has **always** had a strong reliance on the **URL** as a source of truth, and that has been a major driver as to why I love it so much. Currently the *controller* is the "owner" of the queryParamater implementation and if we were to entirely remove controllers in favour of components then we would need to **add the complexity of queryParameters** to either the component implementation or the Router implementation. It's not impossible but it's not easy, and ultimately I think it was the right idea to stop pushing towards "routable components" while we lay the groundwork for other bigger improvements. And if you want the simplicity of not needing a controller then 90% of the time Ember applications use a single component in a route's template and never build a controller, but when you need a controller you will be greatful that they haven't been removed 👍 
What I actually do is ask my friends if they have some technical tests that came from some companies they have applied to. Then what I do, I did them one by one, and because these companies expect some minimum skillset for you to work with them, you can actually gauge and see how well you’ve done And, it always pays to do pair programming at times whenever you have someone close to consult, it pays to actually know good practice and fundamentals Take it slow bro, but fail fast so you’ll know what you need to do eventually.
So sick of these posts "I'm new how do I learn" there are plenty of resources and links to get started is just so vague
I'm agre with you.
Is it Saturday?
[Cockfords video series on youtube.](https://www.youtube.com/watch?v=JxAXlJEmNMg) Inspirational and funny dude, pleasure to watch. I took notes through all of the episodes and ended up with a pocket manual on JavaScript. Ridiculously good teacher in my opinion, but some people find him opinionated. Judge for yourself.
for other readers: controllers can be super simple when used for just query params: \-Controller (5 lines!) [https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/routes/invite/controller.ts](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/routes/invite/controller.ts) \- Route: Query Param Access: [https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/routes/invite/route.ts#L32](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/routes/invite/route.ts#L32)
Check out JavaScript.info. It covers the basics very well. 
You're being downvoted, but just wanted to call out it wouldn't matter. The variable and log statements are in the same scope, global or not. The code does work, my guess is that the dev didn't try it as posted and had an error originally.
And for other readers who might want to see a controller example without TypeScript: https://guides.emberjs.com/release/routing/query-params/#toc_specifying-query-parameters And it's worth mentioning that the "Route Query Param Access" that /u/DerNalia is mentioning here is **entirely** optional. If you want to pass Query Params from the controller through to the query that gets the data you can use that example or see docs about it here https://guides.emberjs.com/release/routing/query-params/#toc_opting-into-a-full-transition 👍
Because it will be free for developers to use on their own, with plans for corporations.
It sounds like you have serious misunderstandings of the basic fundamentals. As written, this question is nonsensical. HTML, CSS, and JS each have their own responsibilities, and it sounds like you're conflating JS's role with things it can't or shouldn't be doing. Can you be more specific with the question?
Having written and read a lot of both, I find loops more readable than reduce in a lot of cases. I generally agree that map and filter are more readable, but reduce not so much, especially when people shove more than a line of code in it. &gt; You delegate that to a server that uses a much better language. Yeah like Go, or Java, lol (for those who didn't get it, loops are idiomatic in those languages)
I'm just using JS to show the date when a person arrives at my html pages. My css background color for my html pages is black. Meaning when the date is shown it's black and invisible with the background color. I'm wanting to know how I can change the font color of the date being show.
Also my css and js is external.
Right now I'm using js script. &lt;!-- hide script from old browsers test = new Date() month = test.getMonth() month = (month * 1) + 1 day = test.getDate() year = test.getFullYear() document.write(" ",month,"/",day,"/",year," ") // end hiding script from old browsers --&gt; and this is my css script. body { background-color: black; background-size; 100%; } h1, h2, h3, h4, ul, li, p { color: white; text-align: center; font-family: Arial, Helvetica, sans-serif; } li { } .container { width:100%; text-align: center; }
add `color: white;` to your body
&gt; color: white; Thank you!! This worked!
Thank you!! This worked!! Can't believe how easy that was.
&gt; have now finished the project &gt; Try the DrinkingLadder game(r/DrinkingGames) - submitted 26 days ago by steinarK
I made a [react-multi-context](https://www.npmjs.com/package/react-multi-context) package which lets you handle multiple contexts in a single Component. This is particularly useful if any consumer components need access to more than one context -- it prevents nesting multiple context consumers by condensing them into a single context consumer. Context through my entire project is as simple as `import Context from './wherever-i-put-it';` and `&lt;Context get={[ 'value1', 'something', 'author' ]}&gt;`.
It seems you're using a tutorial from 1996. We haven't had to `&lt;!--` since, like, 2003, and we figured out that `document.write` was awful since then too.
Lmao, I did not know this, it's probably why my job is having me just create a basic website. 
Even better: let your transpiler make the optimizations.
If you're using webpack and don't know about this already, I cannot recommend [webpack-bundle-analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer) enough. A glorious utility.
Working with others is also a pretty great option, but the skill of self-motivating and finishing a project is extremely important as well. You have to work on that, not every project is going to be an exciting thrill ride from start to finish, you're going to hit moments where you're over it (especially the closer you are to launch) and that's in team settings where businesses have a bunch of aspects in play to try and keep people as motivated as possible at all times. So push yourself, nobody else will. At the same time, maybe it is the right time to stop and take a break from the project or heck maybe releasing it as-is for others to jump on board and take over. So it's situational, but if you have a slew of projects that you just quit because you're bored of them, that indicates you're not allowing yourself to feel the lows of development and pushing through it. 
I feel like someone who is overwhelmed is going to have an easier time with CodeAcademy, it feels more on rails. 
I understand, I started off using codecademy to learn, but it didn’t really teach you coding. I came across FreeCodeCamp and it was a whole new variation of code and they show you real world examples in depth. Never looked back on it. Plus it didnt cost a dime. Also recommend checking out Harvard’s CS 50 is a must! 
this is pretty cool thanks for your work on this. Could see using this for projects.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I added license Mr bot. 
I couldn’t add more than one player. When I tried to add a 2nd player it said three players required. When I tried to just hit proceed it said two players required. Also it’s really awkward that 100% of your post history is about this game.
[FYI, here it is](https://egghead.io/courses/getting-started-with-redux)
You aren’t being patient enough. If you keep going things will eventually click Being comfortable about feeling dumb is a key skill for a developer. 
JSDocs 
I'd like to say just generate the TypeScript docs using TypeDoc. The functions should be ran the same and all the developer has to do is ignore the typescript specific stuff. As an example BlueprintJS uses typescript for all its examples and documentation and its pretty easy to use and tell what its functions require because of this.
It is. That's why you should have chosen FiraCode. 
Why did i come to work.. 
&gt; Since the whole point of logging to a console is to create a side effect, I don't see how returning the return value of logging to console would change this in any way cnsl in injected and .log() is just a function it doesn't have to actually cause side effects, the same argument could be used to say [].map isn't pure because we can give it an impure function to execute &gt; You could make this function pure by having the function return a function that makes the call and returns the value. Sure but now you are just wrapping an impure function in a pure function, this is the opposite of how we generally want to seperate pure/impure code. the core of your application should be pure and side effects should be pushed to the edges. The article i linked talks about an approach to this. 
I was mostly joking, but also it turns out that most of the reasons is been using stage-2 aren't even in stage-2 anymore. It's a good change for people who know how to use webpack and babel and an irrelevant change for lifestyle who is things like CRA. The only people who are really going to have trouble are the ones in the middle who don't really know what they're doing but do the configuration manually anyway. And a little clarifying pain would probably be a good thing for those folks in the long run. Maybe it'll help them pick whether they want to be in the "knows what they're doing" lane or not. 
I totally agree! The folks who are making the [class-fields proposal](https://github.com/tc39/proposal-class-fields) disagree (those are the folks I heard say it). There's legitimate ways to keep protected members private from end users of a library by making final-like classes (for example), and making "final" classes is totally possible (indirectly using `new.target` tricks or even just checking prototypes, but there's not a official `final` keyword yet). So, in their proposal, they claim that protected can be implemented simply by exposing a public `protected` property which in the end boils down to the quivalent of using underscore-prefixed names. See their example: https://github.com/tc39/proposal-private-fields/blob/e704f531c33795ca34ede86e1c78e87798e00064/DECORATORS.md#protected-style-state-through-decorators-on-private-state As you see, their example is totally and utterly just public, not protected at all. See here for the discussion on making "final" classes, and therefore keeping "protected" members truly private from public end-user space: https://github.com/babel/proposals/issues/12#issuecomment-410115104 If you would kindly voice your opinion there and at tc39/proposal-class-fields, that would be awesome!
Reduce is also notoriously difficult to read. Save the clever stuff for when it's necessary.
A girl can dream, can't she?
Wow, as someone who doesn't care about fun you have made ember quite appealing. Can you elaborate?
I like to do Codecademy and then FreeCodeCamp. Codecademy doesn't teach you how to code but it familiarizes you with the vocabulary and corrects/helps you every step of the day. When I jump straight into FCC I'm like WTF???
Hi /u/-Pozy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I find that I need to take more time to read for loops,… hunting down their mutating code &amp; figuring out what they're trying to manipulate &amp; whether they're just collecting the final output or if they're mutating multiple external values. Totally agree about the flexibility of for loops though, and that's why I refactor to them when perf concerns come up,… I can role all the mapping/filtering/reduce into as few loops as possible. In my experience the result is far less readable than the original, but to each their own. 
Banned for plagiarism. https://drboolean.gitbooks.io/mostly-adequate-guide-old/ 
Personally, I find that the problem is that people try to be overly clever with reduce callbacks. Sometimes, they start with a reduce and try to make the problem fit the solution ("when all you have is a hammer"...) Then you end up with nasty `[...acc, foo]` where a simple for-of + array.push would've been far clearer.
This is where I excel. I’ve felt dumb most my life that it’s like my safety zone haha. That feeling in coding hasn’t deterred me at all haha
why you deleted the post &gt;:(
I realize the choice of font is a highly polarising topic 😂 oh well
Maybe this is a feature of service workers so you can decide what priority you need to place on something instead ?
It looks to be part of the Fetch API: https://fetch.spec.whatwg.org/#concept-request-priority Seems to not be implemented yet from browsing vendor specific documentation, but I'm not 100% sure. So it seems that when you generate a request using the Fetch API, it is up to you, the developer, to set the priority (when eventually implemented).
I didn't have a tutor or a curriculum. I learned what I saw as a job requirement and filled the gaps when I interviewed. I made sure that if I couldn't answer a question during the interview, that I could for the next one.
Would it be easy to get the 100k jobs as long as you know it and go to meetups? Or does the 100k jobs require more luck? 
That's really smart. 
In my case 100k came with the fact that I'm personable while knowing the tech. I'm a consultant and there's an inherit client interaction component that a lot of engineers can't fulfill.
Does a consultant not actually code while knowing the code? Is your friend who learned in 3 months also a consultant? 
I do write code, but I additionally need to interact with the client. Yes she's also a consultant.
It’s a bit more than what I’ll say but I’ll summarize. It’s had to learn at first. But once you’ve got the basics, you ca develop and ship things quickly. It’s opinionated, from how you fetch data, pass actions and even set/get properties of objects. However, this means it’s comes with batteries included. Very useful when you want to onboard someone. For instance, I was working on a new react project on another project last couple months. We even had to discuss how we compile our modules. This is a non-issue with ember. The other side is that you have to know how data is passed, which methods are async and how things are rendered. Like I said, hard to learn but super productive once you understand it. It’s so frustrating when you start but in a big team, I’ll always recommend it. Think of it as suit and tie event vs social event (react). You can’t go wrong if you know how to behave while the other can go any where without being wrong. 
There's no way for a developer to set the priority though. As a developer, you have to use the [`Request` constructor](https://fetch.spec.whatwg.org/#dom-request) with a [`RequestInit` object](https://fetch.spec.whatwg.org/#requestinit), and there's no property that maps to the internal request's priority. In this case, you already have a constructed `Request` in `event.request`, so `fetch` *should* be able to use the original request's priority. However, as the bug report demonstrates, it doesn't seem to retain this priority.
For one, unlike NgRedux, NgRX, and NgXs, Akita is not another implementation of redux. It also does not require as much boilerplate as other solutions. In addition, it feels more OOP.
Seems like a useful tool. We are using react and a lot of our team builds things in unmaintainable ways...maybe Ember would have been a better option
This doesn't actually reduce the API surface, though, does it? I can still get at the class fairly easily with `.constructor`. It's straightforward on their part to remove that path (`delete X.prototype.constructor`), which is why I didn't think it was for forwards compatibility, and still don't think they did a good job if that was their intent. (Nor can I really imagine a scenario where it wouldn't be preferable to use a class for this, or any other example I've seen, although obviously how comfortable to be with that is very subjective.)
Some libraries such as React use ES6 classes, but generally speaking classes are not that common in the JavaScript world. In fact a large part of the community opposes classes, and the ES6 implementation is still heavily criticized and discussed, even though is really only syntactic sugar over prototype. If you subscribe to the [ES Discuss](https://esdiscuss.org/) mailing list, where ES proposals are discussed and championed to the TC39 members, even today people are bitter about the inclusion of classes into EcmaScript. That said, what /u/StevenBradley_js pointed out about keep the options open is also true and may very well be the reason this particular library uses the [factory pattern](https://en.wikipedia.org/wiki/Factory_method_pattern).
A documented language feature with no mark that it's for internal use (underscores, for instance, a la Python) is unintended functionality? I'm genuinely surprised.
Not ELIZA, but the self-learning part. Unfortunately, I gave up because it's difficult to make it know what word relevant to another.
Thanks. Sounds pretty useful. But it seems like FullCalendar is not the way to go here. I hoped I can simply accomplish my goal by using it, but it's lack of OAuth is problematic. The workaround I found also doesn't really seem to work with the resource view as it provides all Calendar Events as a single array.
upvoted for saying I'm right about something
I was going to do a bar chart format. The scatterplot I agree is hard to read. I'll have to rethink if there's a better way to display my data. One axis is location, a second axis is person, and the third is number of times at location.
I actually had to explain this to an *Amazon dev*.
Always bet on the web they said /s
SuperSlide.js - A lightweight, configurable sliding menu for your next PWA with promises. Only 2k gzipped! https://github.com/osrec/SuperSlide.js
The web is itterative though, so what doesn't work right now will probably be fleshed out in time. Service workers exist because appcache just wasn't good enough for an offline cache feature.
The best (and only) way to get better at coding is to code. =) Sounds silly, but it's true.
I figured as much. Just work through books?
I'd say start a project. Maybe make yourself a website. Begin with something simple, then keep adding more and more complex features. At some point you'll get stuck, so read reference docs. Books are ok too, but when it comes to JS they tend to be obsolete by the time they are published. There are, however, a ton of online resources, which will cover 100% of your needs.
Is it harder to become a consultant than a developer? Would you say the personableness is learnable? 
Did you see the /s?
Well I know you're being sarcastic, but I was more responding to the general tone. This whole article seems like a temporary problem to me because Google played a huge role in HTTP/2 and Service Workers and they'll want to address the issue.
Does JavaScript allow you to do it? Yes. Does winston say anything about what `winston.createLogger().constructor` is? No. Then it is not part of the winston API. You should not rely on any behavior of `winston.createLogger().constructor` in the same sense that you should not rely on `winston.createAwesomeLogger` being `undefined`, or (if you want to get extreme) `winston.createLogger().constructor.toString()[6]` being `'D'`
It sounds like you're suffering from problems that dependency injection and classical MVC architecture can solve. If you're looking for a framework, then try out [https://adonisjs.com/](https://adonisjs.com/docs/4.1/installation) AdonisJS is the closest thing you will find to Ruby on Rails / [ASP.NET](https://ASP.NET) MVC / Laravel, but for Node.js. The project is heavily inspired by Laravel, so if you've used that before, you will feel the familiarity. Otherwise, there are a number of dependency injection plugins on NPM (too many for me to list here - just search "di" or "dependency injection" on npm) which you can use in conjunction with something like Joi for more control over the request/response flow. 
Looks great! Is there a comparison matrix for the supported APIs in comparison with Puppeteer/Chrome Debugging Protocol?
[https://github.com/typestack/routing-controllers](https://github.com/typestack/routing-controllers) may be what your looking for. It's for TypeScript though.
re typescript: so use it re component styles: so use them. react does that too re async flow: lol, no re redux: redux is garbage, don't blame react for it re redux again: same thing re props: those are literally the same thing as the component properties you call "more ergonomic" re rxjs: rxjs is not a react or an angular thing, and works fine with both of them re: dependency injection: so don't use it. by the way, that's a core angular tool re jsx: so don't use it, you don't have to re ngmodules: they got ripped out because they're famously terrible garbage, so, don't enjoy them too much, ng2 person, because they're gone in 3, 4, 5 and 6 re forms: what you read is wrong, they're fine re naming conventions: use whatever you want, who cares re dependency versions: you're making this up, there's only one dependency (react-dom) and it's locked cadence just like angular
There's no reason you ever need to use an anonymous function if you don't want to. They're useful because they're quick and easy but the route method requires a function - there's no reason it should be anonymous. In fact when I do use an anonymous one I would generally consider that being lazy. Here's how I usually write a route: https://github.com/agroff/trackyak/blob/master/api/lib/routes/routes.ts#L72 That has named functions without any framework. I am using express validator to enumerate and validate the expected inputs, and I prefer to handle each error on my own but /u/js_tutor showed a good example of how easy it would be to wrap everything in an all encompassing error handler if needed. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [agroff/trackyak/.../**routes.ts#L72** (master → 03b71ad)](https://github.com/agroff/trackyak/blob/03b71ad21b92238c834a047eeef4ec40741f6d0e/api/lib/routes/routes.ts#L72) ---- 
"There is no addition. It is just repeated incrementation, and people who want to use it don't understand the basic sequence of numbers."
&gt; they got ripped out because they're famously terrible garbage, so, don't enjoy them too much, ng2 person, because they're gone in 3, 4, 5 and 6 `ngModule` is still a thing.. unless I'm like mind-blowingly mistaken. https://angular.io/guide/ngmodules
&gt; Dependency injection. Higher-order components and the container pattern feel like a case of the Golden Hammer anti-pattern. I use [Context](https://reactjs.org/docs/context.html) for something like `DI`. I say something like because some people seem to have a very specific definition. 
Why do you consider redux to be garbage? The problem it tries to solve does it solve really well
Thanks! Good idea, I'll add such a table to readme file.
This is what I thought too. Like, I use modules all the time and they're fucking great. This guy is an idiot.
I've had to move from doing some part of an application in React to Angular. You know what's the funny thing? I miss typescript. The Angular templates basically throw all type safety out the window. Sure, the Angular service does some very limited checking when using properties of a component in its template, but inputs you pass to child components get no checking at all. This means that \~half the code of the application gets no help with refactoring. The contracts that the components declare are completely void, because they are only applied within the component, but not at all when the contract would be most useful. **It's like if you declared the types of the arguments of a function, but the typechecking only checked your usage of those arguments within the functions body and not when calling the function, which is arguably more important.** 
This is awesome! I see this is mostly a proof of concept. Do you need help to move it to become more stable? I really want an API to sit on top of libraries like these so we can built better end to end tests. Selenium was great because it showed us what headless testing in a real browser could do. But now we need something better, and projects like this are exactly what the industry needs to move forward.
People that don't understand WHEN its useful and WHY it is, usually call it garbage. But when I have a 1 million plus lines of code, I really prefer that my program logic are pure so that I KNOW that bugs wont come from that. Of course it doesn't solve ALL side effects, but as a startup solution is great.
I was waiting too :) I'm personally fine with markdown documentation but I see why people might don't like it. I'll consider using https://github.com/TypeStrong/typedoc when it comes to a Foxr website, thanks for the tip.
I have a "plan": 1. write real tests for what is already implemented 2. continue to implement Puppeteer features one by one 3. reach Marionette protocol limits 4. say that Foxr is v1.0.0 I'd love to see any help with 1 (I'm going to implement a base for it this weekend with dockerized Firefox locally and on Travis) and ofc with 2 (see issues I've created already). Also I usually suck at documentation.
https://i.imgur.com/Br00TCn.gifv
Yeah, I understand. And you are correct of course. I've tweaked the \`logSomething()\` slightly to make that clearer. But the general point I was trying to make was a corollary of the one you made: "if you pass in console then it stops being pure". If you make the external dependencies explicit, then the function will \*remain\* pure, so long as you don't pass in anything that will make it impure. And yes, all of this is much easier in a language that supports purity at the language level, like Haskell.
Store results in memory is a good idea if data is not updated to often. Http request takes time and avoid them is a good practice. 
It's the same reason generator syntax and async/await exists, just generalized to all monads.
It's the same reason generator syntax and async/await exists, just generalized to all monads.
Scatter plot with bubble size gives you three. Works for two dimensions and one measure or one dimension and two measures. Is person a dimension or measure? As in references a person or is a count of people at that location? If it’s a dimension then a heat map could work for this with location on the y, person on the x and then different colours for number of times at location. I’m assuming the specific number of times is not necessarily important, but more the difference between locations and other people. If it’s a measure then a bar chart with location on the x, then persons on the left axis as a bar and number of times on the right with a symbol, maybe this could be an average. Could also show bottom and top 10th percentile or something.
Just to start, the /r/node community is good for express (and other server side JS) questions. If you're building an API, is there any reason you didn't use feathersJS? It's built specifically to generate API's and once you know it, it's much easier than writing your own and it ties in well with sequelize to act as an ORM or ODM depending upon which DB is powering it. In the space of 2.5 hours last night, I managed to build a small 4-table API on Postgres that includes several relations between data and using a very clever hook (i.e. like a middleware but can be run before, after, or on error for each HTTP method for each individual endpoint) that pulls in related data from other tables. More complicated API's take longer, and changing your table structure or relations or field names in the middle of development is possible but will slow down development. However, this system of migrations means it's easy to add or change these things even after deployment. Another big bonus is that it's possible to use swagger (or more specifically feathers-swagger) to build documentation for your API, though I can't comment on how easy it is because I've only seen a colleague doing it and not tried it myself.
There is also a transpiler (disclosure - mine) [https://effectful.js.org/](https://effectful.js.org/) \- supports all monads, applicative-do(soon), persistent state, direct style or async/generators overloading etc
The way you handle an API call on a client shouldn't differ based on the framework you're using. You should handle your data in a way that works best for the type of data you're handling.
Perhaps I should have made it a little more clear in the post but this is just setting up the webgl machinery for more complicated fluid problems. The next post will be far more interesting in terms of fluid mechanics.
You're not wrong but that's not really the point of the post. I'm just introducing how I'm using webgl to simulate a *very* dull fluid simulation (I do mention how boring it is in the post) so that I can then build that into complex simulations quickly. The other point to make is that almost all webgl simulations I've ever seen have been created using real-time techniques, which typically sacrifice accuracy for speed. What I'm introducing here is somewhere between that (of course we like it to be real time for visualisation) and accurate scientific simulation. 
Hey can you enlighten me on why these browser specific test runners are necessary? Like, using nightwatch or cypress I can run tests against every browser, why choose one that targets only a single browser? Genuinely curious. 
Hey. Nightwatch is a high level wrapper on top of specific and more low level pieces like Foxr (think of Firefox Selenium Webdriver) or Puppeteer (think of Chromium Selenium Webdriver), it doesn't control browsers by itself. If we have a unified API then it's possible to implement a new Selenium-free "Nightwatch" thing.
It's no brainer for me. I can walk into any Ember project and be confident in how the code base in organized. I can't say the same for React. Literally everything can be done a million ways.
Almost there!
[removed]
That's not a good comparison. If you go in to this thinking JavaScript has classes then you'll eventually not be able to debug your code because they don't work the same way as actually classes.
Let me Google that for you: https://stackedit.io/ https://simplemde.com/ https://github.com/nhnent/tui.editor/blob/master/README.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [nhnent/tui.editor/.../**README.md** (master → 09bc696)](https://github.com/nhnent/tui.editor/blob/09bc69678decbeea98dbe3fd38b594f7bbec533d/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3xy7s5.)
https://babeljs.io/blog/2017/09/12/planning-for-7.0
Welcome to 2014. Lots of cool things ahead.
Thanks!
* Last but not least - you may happen to be going the 'Firefox is the only true web browser' train 😜
Basically everything but the api is different. Everything's a scoped package, really pushing the env preset, dropping support for node =&lt; 5, really just making lots and lots of small improvements and a few huge ones that should pay off, like not transforming pure commonjs files and screwing with scoped "this". Should be good. Assuming their timeline is better than bootstrap's, we might get a release this year.
CHOO CHOO
There are a bunch of new or updated plugins that only work with v7, for example: - Decorators with the new spec - JSX with fragment syntax support - Optional catch binding - Numeric separators `babel.config.js` has been introduced as an alternative to `.babelrc`. There are surely some other things of note that I don't know about, but I think the new version mostly represents a big refactoring/reorganization effort. Lots of renames and deprecations, and some spec-compliancy updates. See here: https://babeljs.io/docs/en/next/v7-migration
Interesting. Could you provide a snippet explaining how to actually use it? For example, what's the equivalent of: \`\`\` result = do x &lt;- \[1, 2\] y &lt;- \[3, 4\] pure $ x + y \-- result == \[4, 5, 5, 6\] \`\`\` 
Puppeteer docs are now actually in a fairly nice documentation site with clear links to class specs etc. https://pptr.dev
Oh wow! I like that :)
It was less than 7min survey! I enjoyed it. I mostly work in open source projects and most of the flaky tests usually appear in the very beginning of a project. A cause is the absence of a well-established deployment pipeline, for example some nodes/environments to test might randomly accessible. Did you have similar insights in your study? When do you plan to release the results of the survey?
Thank you very much for your help and for the positive comment on our research! We are really glad to read this! We are not explicitly studying when flaky tests are introduced and what are the factors leading to their introduction, however I have the feeling that what you say is totally correct, as many times the cause of flakiness is due to environment- and configuration-related problems. In any case, we plan to release the results of the survey as soon as our research will be published: We really hope to send you a detailed report of our findings by the end of the year. Thanks again for your comment!
They’ve also dropped support for stage-* presets IIRC. 
Bro there's stack overflow for that.
OP, here on r/javascript, the majority of people here have never actually used Angular, but heard from their favorite streamer online that it sucks, which is why you're getting more downvotes than people providing legit reasons for using React over Angular.
Shifty is now nearly as fast as Greensock: https://codepen.io/jeremyckahn/pen/prMYXj If you're simply looking at pure FPS numbers, you'll find that GSAP is still marginally faster, but not perceptibly so even in the most extreme cases. It's a great alternative because of the significantly smaller library size and MIT license.
TinyMCE is the top pick, most commonly used, widely supported.
That is unfortunate. Private properties has been in stage 3 for at least a year. I've found them quite useful. Is there an alternative or are we just not able to use staged features anymore?
I'll keep an eye out for it.
The JS community has a huge problem with stability and Babel 7 really demonstrates that. Our production apps used version 6 until recently, but it got to the point where we couldn't update half our dependencies to new versions because they had started depending on babel 7. The whole point of alpha, beta, or RC is that it isn't production ready. Unstable dependencies can work in smaller projects where the codebase is small enough that most edge cases don't exist and re-writing most of the project doesn't require that much work. In large codebases, this isn't feasibly and leads to horrible breakages. I'd also note that the default of having a minimum version, but no maximum is poisonous. Even if I lock my dependencies to ones that are stable, a lot of them use whatever the latest version of their sub-packages is and that package all too often uses unstable packages. There's a balance between being conservative and bleeding edge, but how many times will people have to be bitten before they realize that pushing alphas to production is stupid? 
You can still use those features as individual plugins, but they are no longer available as grouped "presets". I think the plugins are now named as "-proposal-" too. See http://babeljs.io/blog/2018/07/27/removing-babels-stage-presets
Caching data on the client side doesn't have much to do with a framework. The best time to do it is when the data is static. In that case, yes, you just stick it in the model. Now you always check to see if you already have the data before you get it. Out in the working world, building dynamic applications, static data is rare. It is usually lists of data that change, with insertions and updates coming from other clients. Trying to cache/sync that is so difficult, most good developers fight not do it, out of wisdom. 
I may be missing something, but are you not able to do `import * from ./someDir/__dir.js`? `index.js` as the default is [used for compatibility reasons](https://stackoverflow.com/questions/35442174/javascript-import-from-folder-with-index-js), but you're free to import from whatever file you'd like if you specify it.
Awesome, thanks.
Just out of curiosity, what dependencies rely on Babel 7? I haven’t had the same experience at all, everything we are using depends on 6, and we are in the habit of upgrading at least once a week
Then dont update... Your dependencies had time to migrate to v7 because most likely they didnt have to fix anything urgent before.
I don't know where you are with your current skillset, but as soon as you are armed with enough knowledge, you should start a personal project. In the example of JS, if you have a basic understanding of Node/Express and a frontend framework (i. e. you've finished a course in each), the only way to learn anything new is to force yourself to encounter a problem you have no idea how to tackle. At that point, googling will lead you to learn something new. I wish people taught me not to waste time on crazy specific details of each language. To paraphrase Halt And Catch Fire: 'Programming languages aren't the thing. They're the thing that gets us to the thing'. Focus more on concepts and ideas. Every language and framework you encounter is designed by very smart people, and you should try to understand why the made it the way they did, and how you can use it to its fullest. Good luck!
Everywhere I've ever worked that's introduced it has subsequently removed it [The promises of program and logic simplification are false](https://github.com/StoneCypher/todo_redux_to_not).
The idea of defaulting to `index.js` is to let you split up a module into multiple files. What you're suggesting absolutely works, but I'd much rather use the standard convention of 'importing a directory' than force everyone who uses my code to import the '__dir' file. 
they're supported for legacy you're supposed to move to javascript modules instead
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^3 from Eric Elliott.
Yeah, the number of times I've heard questions about "how to make Babel 7 work with xyz in our production deploy?" And I'm thinking, why are you running a beta? And then I find out that's the status quo apparently. It's a joke. FWIW, `tsc` is way more stable, simpler to configure, and might work for your project.
the 'weekly' part is the only thing that's new about this. Otherwise, Codewars already does an awesome job.
Look for WYSIWYG that's the term that's used for such editors
Gonna downvote myself, but I can't read the article on mobile.
Many of these are aimed towards teaching you an algorithm or so. They are also a bit long, some an hour or more. The goal of these is to teach you how to write cleaner and overall higher quality code. 
Seconded. I laughed as soon as I opened it on my phone. 
The reason I prefer react over angular (both of which I have used extensively): * Angular burned me hard with breaking changes, React has a more stable (and small) API * React’s virtual dom is capable of partial element components, which Angular was not capable of (at least, at the time) * I disagree with the concept of domain specific languages inside other languages for web development, React is just JS * React’s high level abstraction is capable of lots of feature and performance enhancements without modifying the api much, if at all (part of the stability of the api) * The patterns react encourages (component-based, one-way-binding, pure functional rendering) have since been copied by Angular
Not Vue-able on mobile... 
The quality of this subreddit is really on the decline.
Nice work on a productive personal side project- genuinely. But think that if you admittedly don’t see security as a goal you should question whether it’s ethical to share your project... I’m not saying that what you did is a bad thing or your project is bad, but security is important, especially when it involves docker VMs and local code execution.
Babel is no longer about "tomorrow's javascript today" since many stage0/1/2 even 3 features are missing or provided by third party devs. It's now just about bringing today's JS to older browsers. 
I no longer trust "X-like" things, because soon the "X" changes and X-like fails to keep up. Puppeteer is huge and can change pretty quickly and drastically.
Needs more jQuery
Thanks a lot ! It works instantaneously ! 
does babel follow semver, where we can take care of deprecations and stuff before seamlessly upgrading to version 7?
My favorite change coming in Babel 7 is [`useBuiltIns: 'usage'`](https://babeljs.io/docs/en/next/babel-preset-env#usebuiltins-usage). 😍 Being able to centralize your JS+CSS browser support in a `.browserslistrc` is pretty nice as well.
If it works for you, you can add a package.json inside the directory, and use the "main" field to specify which file should actually be loaded
The TypeScript plugin is greatly improved for v7.
TypeScript could be the solution? Usually it was way behind babel in terms of upcoming ECMAScript features, but now they are almost on par. https://kangax.github.io/compat-table/es6/
Hello everyone, I would like to share my latest project with you. It's a [**WhatsApp chat parser**](https://github.com/Pustur/whatsapp-chat-parser) that parses your conversations and outputs an array of objects containing the `date`, `author` and `message` fields. I'd like to hear what you think and if you have any kind of feedback please let me know here or by directly submitting an issue on github. I tried to follow best practices by using a linter, prettier, writing tests and i even added CircleCI for good measure. I'm most interested in understanding if i'm writing tests correctly as this is the first time i wrote an entire project with them. Thanks in advance
Could you explain how would generators would help here? The need is to be able to work with various monads (observables, eithers, arrays, state), without nesting bind statements and with the ability to access context. AFAICT, generators by themselves do nothing to alleviate this. If you're referring to other do-notation libraries built on top of generators, those run into problems because generators are inherently stateful, so they're forced to re-evaluate computations multiple times.
If you're using `webpack` you might be interested in [aliasing](https://webpack.js.org/configuration/resolve/#resolve-alias)
Yes, there's a couple libraries out there for do-notation on top of generators, but they all run into problems because generators carry an implicit state; they can't be rewound or resumed from the same position. The only way to do it is to replay the generator from the beginning.
Looks good with mobile emulation using chrome. 
\`tsc\` still ships a super outdated (and highly misleading) decorator implementation that their docs promote to this day. Their private property implementation is complicating official support for \*real\* private properties as we speak. I don't think highlighting \`tsc\` as a solution in the context of evolving JS standards makes sense. Babel has its issues but is \*generally\* a better bet.
Thanks for the feedback! The workflow is - you launch up an app - \[probably forward your http 80 with ngrok \] - you share a link with an interviewee or a student - you kill the docker. Nobody knows your page exists except for the people you've directly shared it with, and then only while you needed. If someone writes a malicious code that somehow bypasses the constraints of an embedded document and docker - you actually see that right on your screen, the documents are synchronized. Imagine it as sharing a picture with a friend on facebook, the URL generated for you by Facebook is actually just a public URL, if you send a naked photo - anyone can theoretically access it, except they don't, because they don't know the URL itself. Same goes for ngrok and dynamic IP addresses. Maybe I haven't expressed clearly as of what I actually intend to be done with the app? Come think of it, I understand where I might've misguided people
I'm pretty sure that took more than 15 minutes. Good luck :)
You don't? https://reactjs.org/docs/hello-world.html
That would be JSX, not HTML. If you mean the `#root` element, that's putting React inside HTML.
Or using JSX, flow and even typescript 
I just ran across your portfolio, please make sure to migrate your projects to your portfolio (hopefully on a server you manage) so they never go down! Everything you have, to me, is incredibly impressive and I'm insanely jealous. I'm currently a Senior Lead Developer (I work with a lot of languages both front and backend) and this makes me wish I had gone to school for Computer Science. I was a med student-turned-web-developer. I coded back in my 4th grade (I'm currently 24) in C++ for private server games on NPC's and things like that, so thats where I got my background, then I went on a long hiatus and didn't code anything significant until college. (I worked in various art things like video game asset design, 2D and 3D, animation rigging etc, and hospitals since I was turning into a medicine freak at this time) My parents ALWAYS thought I would've gone to school for computer science but I was so passionate about medical science that I pursued it (and got pretty far! Was a young researcher and proposed a cure for Type I diabetes that ultimately got funded, and worked at Northwestern University) but ultimately I ended up back in computer science now as a developer. My starting projects were NOTHING compared to yours. I'm all self taught so I didn't have much exposure to a vast number of languages until the past say 3 years of my life. (Not to mention I thought that coding was so easy that it COULDN'T have been a lucrative field. It wasnt until college when my sisters then boyfriend told me that I should just stop working pointless retail jobs and start coding for contracts that I learned that it was a BOOMING business and was only going to continue to grow) I'm fortunate that I pick them up pretty quickly and have created a LOT of content but to this day a part of me wishes I had been a CS major to have made more friends and had exposure to create the things like you have created in my early moments of development. You're really awesome and I can tell that getting a job will be a BREEZE for you. Keep up the amazing work Tanner 
Lol you sound a bit entitled. Why would developers of babel plugins keep development against an API that is soon to be obsolete? Of course plugins will start using the new stuff - beta or not. Especially since Babel 7 has been in beta for so long. If anything, this is positive for the Babel ecosystem. 
I'm confused - why can't you use `index.js`? What's the reason for going against convention here in the first place? Also, why are you using star imports? In practice, this can often be a bit of an anti-pattern, as it becomes very difficult to read the code and understand where any particular part has been defined.
i'll look into feathers. thanks so much!
thanks so much! this looks really promising.
So for example, would you want to use an API and take all the results of all the pages and push them into a state object?
Do you mean fetching in the background while nothing is going on?
Do you have an example of fetching static data vs. dynamic?
You should check out the canvas API. I'm on mobile so I can't write out a big tutorial, but https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API 
&gt; cnsl in injected and .log() is just a function it doesn't have to actually cause side effects OK, you've said a lot of silly things here. Most of them aren't even worth my time to entertain, but this one is so obviously nonsense that it needs to be addressed. Injecting the console dependency inverts control, it does _not_ insulate your function from the impurities of that dependency. In your previous post, you suggested that the way to make the original function pure would be to have it do something with the return value from the log function. This is actually how to make it _less_ pure, not more pure, since that `console.log` function (as you, yourself, suggested) could do anything. Let's go over the criteria for a pure function again: 1. it derives its output _exclusively_ from its input (for any given input `A`, the function produces the same output `B`, which allows for memoization) 2. it produces _no_ observable side effects (it affects _nothing_ outside of its own scope) Let's go back to square one and see if we can build up the original function, step by step, while maintaining purity all along the way. The original function has some issues (the use of Hindley-Milner notation isn't correct, for instance), but here it is for reference: ``` // logSomething: Date -&gt; Console -&gt; String -&gt; () function logSomething(d, cnsl, something) { const dt = d.toIsoString(); cnsl.log(`${dt}: ${something}`); return something; } ``` The first step, which is the easiest, is to take a `something` and return that `something`. Classic identity function, and obviously pure. ``` // logSomething :: String -&gt; String const logSomething = something =&gt; something ``` The next step is to make a string that contains an ISO-formatted date and our `something` string. This isn't super useful, since we're still going to return the `something`, but it's what the original function does, so let's try to do that. ``` // logSomething :: (Date, String) -&gt; String const logSomething = (d, something) =&gt; { const dt = d.toIsoString() return something } ``` Is this function still pure? 1. Does its return value derive _exclusively_ from its inputs? 2. Does it produce _zero_ side effects? Well, its output is still derived directly and exclusively from its input, so that's good. But does it produce any side effects? That's going to depend on the behavior of `d`'s `toIsoString` method, isn't it? Like you said, it's "just a function," so there's no reason that it _has_ to take the date value contained in `d` and deterministically return it as an ISO-formatted string. By injecting this value as a function, you've allowed the caller to determine the behavior of `toIsoString`. There may or may not be benefits to doing this, but one thing that it definitely does is remove your control over that conversion. If the caller passes in a modified `Date` object, or just another object that has a `toIsoString` method, with a `toIsoString` method that produces side effects---congratulations!---you've just imported that side effect into your function. So let's remove that dependency. We don't really need it; we just need an ISO-formatted date string. ``` // logSomething :: (String, String) -&gt; String const logSomething = (dt, something) =&gt; { return something } ``` Fantastic! Now we're not doing anything with `dt`, which is a waste, but at least we're pure. The next thing we want to do is create a new string that combines our date string and our `something` string to make a message. ``` // logSomething :: (String, String) -&gt; String const logSomething = (dt, something) =&gt; { const logMsg = `${dt}: ${something}` return something } ``` We're still wasting that `dt` parameter, although we've moved that waste down into our function. But we're still pure as the driven snow, so let's call that at least a partial win. Now comes the tricky part. We want to be able to create a side effect (logging to console) while staying pure. Let's go with the most naive approach to adding our logging---just inlining the default `console.log`---and see where that gets us. ``` // logSomething :: (String, String) -&gt; String const logSomething = (dt, something) =&gt; { const logMsg = `${dt}: ${something}` console.log(logMsg) return something } ``` Is this function still pure? Let's check the criteria: 1. Is its output derived _exclusively_ from its input? Yes, it is. From an input-output perspective, this is still effectively an identity function, just with an extra parameter. 2. Does this function produce _zero_ side effects? Nope! It's now printing `logMsg` to the console, which by definition is a side effect. So the original author's solution was to inject the console dependency. Let's look at that and see if that makes this function pure, shall we? ``` // logSomething :: (Console, String, String) -&gt; String const logSomething = (console, dt, something) =&gt; { const logMsg = `${dt}: ${something}` console.log(logMsg) return something } ``` Let's check that criteria again: 1. Is its output derived _exclusively_ from its input? Yes, still a bastardized identity function. 2. Does it produce _zero_ side effects? As you've already mentioned, that depends on the functionality of the injected `console`. So the answer is "probably not, but maybe in an incredibly contrived case where console.log literally does nothing." Which means that we can't reliably memoize this function because it's _not pure_. Let's take a little detour to explore the silly suggestion you made: "you would need to use the result of cnsl.log to generate your return value for this function to be pure." We'll do this by changing the return value from `something` to the return value of `console.log`. This no longer serves the same purpose as our original function, but let's keep going anyway. Note that we've updated our Hindley-Milner to reflect that the final return value is not necessarily a string, and in fact, we have no idea what it might be because we've handed off responsibility for that to the caller. ``` // logSomething :: (Console, String, String) -&gt; A const logSomething = (console, dt, something) =&gt; { const logMsg = `${dt}: ${something}` return console.log(logMsg) } ``` Is this function still pure? 1. Is its output _exclusively_ determined by its input? Well, if we're using the default `console` object, I suppose you could say that. The default console supplies no return value, so the output of our function will always be `undefined`. Not useful, but, in that case at least, I suppose it's pure. However, what happens when the caller puts in a custom `console` object with different behavior? Maybe that console's `log` function returns the number of characters it just logged? Maybe it keeps a persistent state of how many logs it's made and returns that count? Maybe it sends the message over the wire to an API, where the message gets shoved in a database, and returns the result of that transaction? So I'd say this function just became _significantly_ **less** pure, while also losing its original functionality. 2. Does this function produce _zero_ side effects? Again, with the standard console the answer is obviously "no." With any reasonable implementation of `console.log`, the answer is obviously going to be "no." The _only_ circumstance where the answer is "yes" would be in your uselessly contrived case where `console.log` is a custom function that effectively does nothing. So how _do_ we make this function perform the original tasks while staying pure? As I already explained in my previous post, the answer is to wrap the impure functionality in a function that we return. This, rather than dependency injection, is how you actually push responsibility for the side effects to the caller. ``` // logSomething :: (Console, String, String) -&gt; Function const logSomething = (console, dt, something) =&gt; { const logMsg = `${dt}: ${something}` return function impureLog() { console.log(logMsg) return something } } ``` Does this new function align with the criteria for a pure function? 1. Does the output derive _exclusively_ from the input? Yes, it surely does. For any given `(console, dt, something)` we'll get back `() =&gt; { console.log(`${dt}: ${something}`); return something }`. That is, a function that calls `console.log` with our combined log message and then returns our `something`. 2. Does this function produce _zero_ side effects? Oh yes, it very much does. We're taking input, configuring a function to produce side effects, and then handing that function back to the caller to "pull the pin" on those side effects, completely sidestepping our responsibility for the side effects. Of course, you can get this same functionality (minus the ability to inject the `console`, which is of questionable utility at the moment anyway) by just having the returned function reach for `console.log` directly. ``` // logSomething :: (String, String) -&gt; Function const logSomething = (dt, something) =&gt; { const logMsg = `${dt}: ${something}` return function impureLog() { console.log(logMsg) return something } } ``` As you've kind of intuited, but in a naive manner because you're still learning, this isn't a super useful pattern by itself. When you get into `IO` functors and more advanced topics, this kind of wrapping of side effects starts to make more practical sense. 
### A little code review The original function is actually really silly, and not something you'd want to write _at all_. As an example of dependency injection, it could serve as a contrivance, but it's definitely not a good example of purity. So let's do a code review and see if we can't make this function a little better, shall we? ``` // logSomething: Date -&gt; Console -&gt; String -&gt; () function logSomething(d, cnsl, something) { const dt = d.toIsoString(); cnsl.log(`${dt}: ${something}`); return something; } ``` Let's start by fixing the Hindley-Milner notation. ``` // logSomething: (Date, Console, String) -&gt; String function logSomething(d, cnsl, something) { const dt = d.toIsoString(); cnsl.log(`${dt}: ${something}`); return something; } ``` Much better! Now, as we've already seen, it doesn't really make sense to invert control of the console here. It's not giving us the purity that we want, and in order to get that purity, we're going to need to jump through a bunch of hoops that currently don't need jumping. So let's remove that. ``` // logSomething: (Date, String) -&gt; String function logSomething(d, something) { const dt = d.toIsoString(); return something; } /* we haven't forgotten about you, little console.log! cnsl.log(`${dt}: ${something}`); */ ``` But now we're not doing anything with that `dt` string that we're building up. So, what do we do? Let's just cut that out too, so that we don't change the original intended output. ``` // logSomething: String -&gt; String function logSomething(something) { return something; } // we haven't forgotten about you, little console.log! // cnsl.log(`${dt}: ${something}`); // or you, little dt string! // const dt = d.toIsoString(); ``` Of course, now we just have an identity function. Those _are_ very useful, but I don't think we need one right here. Since we don't really need the function anymore, let's just take it out. ``` const something = 'A message that we want to log.' // still haven't forgotten about these guys! // cnsl.log(`${dt}: ${something}`); // const dt = d.toIsoString(); ``` Now that we've cut out the function that we didn't really need, let's look at that `dt` string. How do we get that? ``` const something = 'A message that we want to log.' const dt = new Date().toIsoString() // we continue to have not forgotten about you, console.log! // cnsl.log(`${dt}: ${something}`); ``` Perfect! We now have our `something` and our `dt`. We just need to log those to the console. ``` const something = 'A message that we want to log.' const dt = new Date().toIsoString() console.log(`${dt}: ${something}`) // we can now do whatever with our something down here ``` Easy. peasy.
Congrats and welcome to the field! I can only second what other already mentioned, it's a never ending road of learning. But the cool part is that it never gets boring/routine. I've been working with js for the last ten years, learn something new almost every day. Project is definitely the way to go, it will also equip you better for work life, running in to problems similar to ones you've solved before, specifics aren't important, what's important is knowing in which end to start. Best of luck!
Why Ember? Have you ever wanted a code base that nobody except other Ember developers can touch, so that you can feel superior? Have you ever wanted your app to run like shit? Do you just love spaghetti so much that you need your app to be written in it? Choose Ember, today!
Though it should work, it's better practice to avoid introducing what's known as side effects - e.g. this function modifies a variable outside of its own declaration. The main time a function like this is an ok practice is if it is a class member modifying another class member variable It'd probably be better to return the new value that you want: // I know this is a dumb-ass function, but it's just a super minimal example: function changeText(text) { // Maybe you do some modifying of text here? return text } let test = 'hello' test = changeTest('whatever') console.log(test) // whatever
You could call these scripts by executing a XMLHttpRequest to them. var xhttp = newXMLHttpRequest(); xhttp.open("GET", "scripts/search.py"); xhttp.send();
I pronounce it like car, but I'm not a native English speaker.
You have a funny spelling and pronunciation for "const"
 I've only ever heard it pronounced this way.
don't tell my boss
i've mostly heard it pronounced this way too, which is why I fell stupid when I say it like hair
I'm not sure what there is to "buy" or not "buy"? The blog post is an opinion piece talking about their experience working with development tools and saying that this tool makes sense to them. If you're asking if other people feel the same way I'll say my experience with Ember: I've used Ember since 2013 so there's a good amount of knowing how it works and some unspoken knowledge. But, I've trained or worked with new developers that were new to Ember or programming and the onboarding time to be productive in our team was faster than other tools I've seen or used. Having a framework with great built-in tools for testing, routing, accessibility and more has made our codebases easier to maintain and jump from project to project. In terms of support and stability, there was a struggle of working with Ember in some of the pre 1.0 times and the transitons in 1.13 and 2.4 were tricky to deal with. To put that in perspective though, 1.13 and 2.4 were the only MAJOR breaking changes in over 5 years of me using Ember and most of this pain was felt because of addon or dependency integrations. The docs, guides, community, tooling, and more have grown over the years (though at a slower pace than tools like React or Vue) and provide a great developer experience. From experience I know a lot of people have a bad taste from hearing things about Ember or trying it out years ago. Check out [https://guides.emberjs.com/release/](https://guides.emberjs.com/release/) or watch [https://www.embercasts.com/free-video](https://www.embercasts.com/free-video) with an open mind and I think you may be surprised at the experience. If not, please do let me know with some concrete examples of hurdles or unpleasant experience that Ember can improve on.
You can always start pronouncing it the other way. But take your time. No pressure.
If you're creating a package to be consumed by other developers that would require the end users to have to configure something special to consume your modules specifically (and this may conflict with the file naming conventions provided by other libraries in the consuming application). Assuming a directory \`/some-dir\` with files inside. The two patterns I've seen: 1. Create a file \`/some-dir.js\` and this exposes the child exported things from the \`/some-dir\` directory 2. Use the default \`/some-dir/index.js\` lookup and resolver that is used and supported by Node, Webpack, Browserify, and more I personally prefer an explicit \`/some-dir.js\` file since it's clearer and requires less directory digging. It also is clearer to people who are using the code later since it doesn't rely on them knowing that \`/some-dir/index.js\` is imported.
You should also start saying "variable" like "cariable" (as in like "car")
what REALLY pissed me off is people that would pronounce char like charizard
I’ve used the RC versions for a couple of small projects and it’s really very nice. I’ve been a big fan of Vue since I first came across it just over a year ago, I’m really happy with how well the supporting ecosystem is filling out. 
Asking for less development doesn't seem entitled to me. I agree that they should start working with the new API. Instead of making a bunch of beta stuff that the new stable branch, just make a secondary beta branch/release for devs who want to experiment.
Definitely “var” as in “variable” 
Suggested by universities, which prefer Python because it's old.
I've found express-generator, which is a package that sets up app skeletons, to be a nice starter guide for file structures in Node. https://expressjs.com/en/starter/generator.html 
Thanks.
I'm upvoting you, if only for the South Park reference.
Python, Perl, and Shell are commonly used among network engineers, not because a school says it, but because they are equipped for the job at hand, have tools and libraries to accomplish the work, and are commonly known among those doing the work.
A wise man once said, if something can be done in JS, it will be done in JS. I would be astonished if node didnt have similar tools with same quality.
Just because it can be done doesn't mean it is the preference of an individual or a field.
Ah yes, http://origamijs.com/docs/ seems like a good library if I get it working 
Other alternatives: - WASM, you can compile those python scripts to wasm and use them then from within JS as they were other JS modules. - Implement a wrapper API to expose those scripts.
I’ve never heard of WASM, could you explain a little bit more and possibly provide a sample code? Thanks! 
&gt; Asking for less development doesn't seem entitled to me. Then just pin your version numbers? Hopefully semver will take care of the rest. Otherwise use lock files.
JavaScript is honestly a pretty broken language.
Real programmers butcher the english language then drink its blood - var as in car not variable - char as in chart not character - dir as in beer not directory - json as in jason not jay ess o en - def as in deaf not define - sql as in sequel not ess queue elle Join the dark side. 
Can't doesn't mean should. 
Perhaps: [https://webpack.js.org/configuration/resolve/#resolve-mainfiles](https://webpack.js.org/configuration/resolve/#resolve-mainfiles) Just suggesting, I haven't tried at all to see if it works.
I don't. The only argument I see Ember.js developers saying is: "I love it, it makes me feel happy" - nothing else more is really relevant if you compare with the trending frameworks. I see no reason for using it on 2018. For me the discussion is among React, Angular (2+) and Vue (in that order). What I see happening is that it's easy to see a React project (with Redux in special) messed, with components with 700+ lines, Redux files with 700+ lines as well, but if you really pick a great well-written React project, which is the best as of today of the three I mentioned, there's just no way for comparing.
In my head, like car.
Use regular expression to parse the record data into objects, in a loop. Then it's pretty easy to generate the CSV data from the already organized objects. e.g. https://pastebin.com/gPqV4s2G
Affiliate advertising.
Not sure about dir being like beer, but it's certainly not 'durr'. Maybe like 'mirror'
I'd join.
how long ago did you try ember?
It's been a little while, but I have no reason to go back. I don't like its black box approach and it's still the only one of the major (if you can still call it that) frameworks out there that performs like shit for even simple apps. 
to be honest with you, I've been using ember for the past 2 years, and I don't feel that way. I do understand where the "black box approach" could be felt, but this'll be true of \_any\_ framework. Personally, knowing how to dive into errors, and debug async code has helped me out a ton. Everything I've learned from ember also translates nicely into my react usage at work. :) Though, at work, I really miss dependency injection and the app resolver that ember provides, and is just seamless. I haven't noticed any performance issues. I have a little pet project over at r/https://emberclear.io where I'm practicing some UX things if you want to play around with an app done with the bleedingest edge ember internals. 
The very distant third, of course, being how to vertically center a div. 
BECAUSE I NEED A NEW CAR AND YALL SATURATING DA MARKET
I feel like this is a pretty common opinion among people that used Ember a long time ago and haven't really kept up with Ember is today. Not trying to be confrontational, but Ember real-world performance is on par with all of the other major frameworks, particularly fast for updates (as compared to initial render, although it is solid there as well). Benchmarks do not really tell the real story if that is how you were judging performance.
Usually a very sharp and forceful "voo". Very prone to spray saliva everywhere through.
Lmao just the v sound. Vroom vroom
I think I get what you are saying. I guess English grammar is not detailed enough for the machine to understand what you exactly want it to do. 
DX. When I catch after a promise, I go into the fail-case. This is like returning a 200 OK with an error message. I'd prefer the 401/404/whatever.
rejections go up through the promise chain, skipping all fulfilled handlers until the rejection is handled. If you simply resolved an error, the chain would continue as if nothing was wrong.
Language is often ambiguous and so misinterpretation is common even amongst humans. But that’s not what I’m saying. The difficult thing isn’t communicating what you want to do, the difficult thing is deciding what you want to do and how to do it.
I was on a project within the last year that used Ember. I will admit that the CLI is great and updating an Ember project is quite effortless. There’s also tons of conventions and articles about how to do things the Ember way. My biggest problem with Ember was not knowing where components came from. In any other framework you import components and know where they live; in Ember, you pull in an addon that could potentially bring in other addons and now you have no idea what’s available until you check your node modules. I also missed using webpack. It felt like a bit of a setback to lose custom import loaders and hot module reloading - now granted HMR is more of a nice to have, but wow you can really get things done quick when you don’t have to refresh the page and maintain state. Creating a simple component also felt a bit heavy. You would use the CLI to create a component and then it would generate quite a few files. Jumping in between folders for the template and JS was cumbersome - especially when you start trying to break down a component into smaller components. Namespacing helped, but the folder name grew quite a bit. Handlebar syntax was either hit or miss for me. Once I got into JSX I felt very flexible, but with handlebars I had to get used to writing helpers for the functionality I wanted to have. It’s not a bad idea at times to lock down your template syntax, but your definitely gonna spend a lot of time writing helpers to get that extra functionality. I think there’s still a lot of work to do for me to use Ember again. At the end of the day you should pick what’s right for your team, and for most of what I do - I don’t need to have this many conventions / restrictions. 
English is too cumbersome to code in.
Height 100% Margin top 50% Transform y -50%
As an unrelated question, if I'm using async/await.. How can I reject?
Yeah but flex box kinda made that one obsolete.
Throwing/catching exceptions, depending on what side you mean.
Alright I'm super curious how do you ssr with no server?
my man! pm me your venmo got $5 coming you way!
Check out three.js it's a library that makes working with 3D very easy. I'm not sure if I can load in models though. 
I don't use venmo (actually the first time I've heard of it) so I'm good, have a good day :)
well thanks for your help...been going at it for weeks now!
I am talking about implementations like [this](https://github.com/russellmcc/fantasydo), though I'm not familiar with the performance issues you mentioned, so generators may not be a good solution.
Internship??? Lol he can easily find regular position with this project in the portfolio.
It's awesome. Configuration options are super rich but fast. And the GUI with size of all the assets and plugin browser are really helpful. 
When installing modules you must be running the same version of Node/Npm in order to install the right modules. This practice is not mainstream, so not many people are aware of it.
Exactly. I think like: "it's a blog post that I'm supposed to pay for". I can find 10.000 blog posts on the same topic on the internet for free, mostly of the same quality. It's already overcrowded without Medium. Why pay then?
Without the brackets the function won't return anything if you don't explicitly write `return`.
I hate paywalls, too. Actually a technical workaround is linking to the Google cached version of the page. (Or Wayback machine etc.)
Change the vars to let’s and I’ll consider /s But all in seriousness tho, nice project.
&gt;Python has been the language suggested for network engineers It was previously said that, in the future, Javascript will be phased out of browsers and die the same death as vbscript in websites, and yet here we are. Statements like this should be taken with an extreme grain of salt, but I happen to agree with it. Python has a lot more support for the sort of things you want writing network code.
Graduating CS is good if you've just finished high school, but definitely not must have. These days you can just pass a bootcamp where for just one year will gain all the knowledge you need to start dev job, or just half a year to take the QA route. This is so much powerful if you are 30+ and want to change the direction of life.
You've come up with a pretty good plan so far! Here are the phases I would do this in: 1. Learn to create and provision and Linux system as a VM. Install the OS, install your app's dependencies, start your app. This provides a convenient and safe environment for you to learn in. 2. Create a Digital Ocean* droplet. Install your app's dependencies on the server and then spin your app up for real. 3. Now would be a good time to learn about your DNS networking, process management, etc. 4. By now you've gotten your app running and configured your server, but the process can be easier. The next step is to look into container deployment strategies (like Docker) to make your life easier. * I suggest Digital Ocean because it is the platform I am most familiar with and enjoy using. You can succeed just as well with AWS and other platforms like it.
Thanks for the reply. I currently use linux system using virtual box (though not yet for programming) on my laptop. However i'm not very familiar with how to host my application using that or terms like app dependencies. Is there any detailed tutorial/article that can help me with process after step 1 (in your list).
Who better to explain it than Lin Clark one of the best known mozila engineers working on it here you go: https://www.youtube.com/watch?v=HktWin_LPf4
Reinventing the wheel is worth it if you have indentation as hierarchy.
Whether benchmarks tell the story or not is not a great argument. People are going to use benchmarks to help make decisions. Its just going to happen. Rather than complain about the benchmarks, it would be better to try and optimize them as /u/DerNalia seems to be doing. If optimizing them is not possible, draft Ember's own benchmarks that show it performing comparably. Its all marketing at this point and I think the other frameworks do marketing better.
How many posts are you trying to render at once? If it’s loads, then you need to look into windowing them with something like react-virtualized. Are you doing lots of setStates at the same time unnecessarily - try and group them into less. Also try converting React.Components into React.PureComponents where you can. Those are general tips. Otherwise use the browser profiler - [link](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab) 
Well, I don't see anything wrong with your question. You explained the problem and provided a source code. I wish I could help.
Thank you!
What do those artists use this library or ML for? I'm curious.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ember-cli/rfcs/.../**0051-packaging.md** (master → 5672016)](https://github.com/ember-cli/rfcs/blob/567201627bcc6baa2d70103bd5b6f9e23e8ea0d9/active/0051-packaging.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e402krx.)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebook/react-devtools/.../**README.md** (master → 4d3ae51)](https://github.com/facebook/react-devtools/blob/4d3ae51dc31617bd813339fb7baa00e0154a0023/README.md) ---- 
There is something called a style transfer which can be used by artist.... There is. A big community of artist Now using machine learning.. Style transfer is just an example .....
SO has become a pit off post edits, downvotes and gammer Nazis I wouldn't worry. Try adding a little intro text and what you have done so far 
I am beginner and I didn't find any comprihensive tutorials, I found https://www.youtube.com/watch?v=1rw9MfIleEg this to be very usefull and also offcial docummentations to be useful check these out https://browsersync.io/docs/api https://eslint.org/docs/user-guide/getting-started https://github.com/imagemin/imagemin
Do you need to close the &lt;b-form-input /&gt; tag? 
The "previous" and "next" links in the video descriptions are not accurate. In video two, both links link back to video one. Otherwise, very nice videos. Thanks for taking the time to produce this! 
thank you so much, have added a short intro for better readability
Thank you for pointing this out, when I get back home will add the tutorials I've followed so far without the expected result. 
From what I understand, if there is nothing "in" a tag, you can self close it.
Rectified.... Thanks 
Your post would look a lot better with a test that you tried to write that failed to work. 
I am beginner myself, all of the articles are a bit out dated and I have found different gulp packages on NPM well thank you for help anyway :)
Can anyone please reply, I need help !
You should wait at least 1 day for a reply. Here are ppl from all over the world and maybe it‘s nighttime over there and someone who can help will answer you tomorrow.
Old - from 2010 - but still pretty relevant, at least as far as the behavior being described (something similar came up [here](https://www.reddit.com/r/javascript/comments/8xawy2/the_delete_operator_will_not_delete_ordinary/) about a month ago). I'm assuming browser compatibility has gotten better, and there are little details like the `DontDelete` flag is now handled by `[[Configurable]]` but it's all still pretty solid.
I’m only setting state once, currently I’ve got five posts. The jsx is pushed to an array before being returned to React 
I made [this thing](http://dumbmatter.com/csv-sql-live/) which lets you load CSV files into a client-side SQL database (using SQLLite via sql.js) and run queries on them. Probably not very useful, but it's cool that such a thing is possible in client-side JS! [GitHub link](https://github.com/dumbmatter/csv-sql-live)
No disagreement with those points at all. Or that marketing, or rather lack thereof, is a big part of why Ember continues to be niche. There are some efforts to do more/better marketing, but we'll see what comes of it. Ember suffers from a perception problem but that will definitely stop people from even considering it, when it could be a solid choice.
Are you asking how to rig/add attachment points in Maya?
That could be the root of your problem - try only keeping the response json from your service in state. Let the render method do its job of rendering. Would need to see your code to give more tips, but putting components into state is a bit of smelly pattern if you don’t know what you’re doing. 
Why didn't you ask this on meta stackoverflow?
WASM isn't necessary. It being a newer technology, there can be compatibility concerns. Alternatives include things like pyjs or transcrypt which convert python directly to JavaScript code. But it also depends on what you're doing and what you need these scripts for. Do you want to run time in the browser on the client side? If so, then you'll probably want some kind of conversion utility like what's being discussed here. Alternatively, do you want these scripts to be run as is - through python - on your server? If so that's when you'd go with something more like what Azudra proposed, where you make a request to your server which provides a service that responds with the results of those scripts being run that can then be loaded into your JavaScript. In the end, you're basically left with the fact that browsers can only run JavaScript and no other programming language (WASM you can lump into JavaScript). So if you have Python you want to run, you either need to convert it to JavaScript, or run it somewhere else and pass the results back to JavaScript.
I’m going to, I’ve been busy. I need to update the docs before submitting as well. 
Never heard the 'hair' variation. Sounds weird and wrong.
The strong point of Ember is that it's so opinionated. I would recommend it for a very large project which delegates some of its work to external entities or decentralised local offices, because they will be forced to do things 'the ember way' and will not diverge _too_ much. Apart for that I don't see any point in investing time and effort in learning a framework which simply doesn't have any traction in the industry.
Small nit: there's nothing stopping JSX from being statically analyzed; typescript and react work quite well together, as does flow. Sure, it is more challenging to parse since it isn't a superset of html, but even without any special type annotations it can still be parsed and compared to a components declared prop types.
Actually no, that only works in XML. In HTML(5) though there are a handful of _void_ elements that don't need a closing tag at all (but accept a self-closing tag). But I'm not sure if this has anything to do with your actual issue.
You should also checkout brain.js, its written using gpu.js, super fast and very easy to use. https://github.com/BrainJS/brain.js
Check out three.js
Sure... Will have a look
Well in case you *don't * want overkill, maybe you should look at parcel. It really is a lot less configuration
I think that this already happened. In the 1950s all computer programs we're written in assembly on punch cars. This was a lot of work, even for very simple programs. There was portability between computers. You had to know a lot about the hardware of your computer and general electronics and math in general to successfully write a program. There was no such thing as testing, and debugging must have been incredibly hard. Later on, programming languages were invented. You had Fortran, Basic, Cobol, and all the other early leaders. It became much easier to write certain types of software. Computer programming didn't end though, it mad computers even more useful and more people got into it. Even later, most programs began to run on operating systems. It is much easier to write a piece of software that targets Unix, for example, than it is to write the software for bare metal (generally, performance problems aside). Now, you can create JS apps that will run in like 10 different operating systems and provide a fancy ui and networking. Computer programming isn't dead yet, if anything it's even more popular. I think we'll have solved this whole capitalism and automation thing long before programmers are out of work.
What I can't understand is how to show a 3D Human model whose scale is user- controllable? What do you suggest?
See References in Foxr readme, that's all I've found.
Currently tidying it up and documenting then I’ll update the GitHub repo 
I ran into an issue at work the other day where we had a list with react components being rendered recursively. The result was that in order for a component to be rerendered, all of its parent components would also have to be rerendered. Tldr; be careful with nesting react components
I might try it later, but now I am looking for gulp help
&gt;Also I can't stand handlebars. what's wrong with it?
I made a [**WhatsApp chat parser**](https://github.com/Pustur/whatsapp-chat-parser) that parses your conversations and outputs an array of objects containing the `date`, `author` and `message` fields. I'd like to hear what you think and if you have any kind of feedback please let me know here or by directly submitting an issue on github. I tried to follow best practices by using a linter, prettier, writing tests and i even added CircleCI for good measure. I'm most interested in understanding if i'm writing tests correctly as this is the first time i wrote an entire project with them. Thanks in advance
My best advice would be to load in batches of 15-25 for a faster render, but I’m just a junior dev and you’ve prob already thought of that lol. If you figure out something elegant, please keep me posted
Why wouldn't you assign them with const? 
Will do! Yeah I’m going to go through the react docs again tomorrow and rewrite this part. 
Hi /u/josefholmes, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/soumakArgha, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Aliza880, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/DelaZac, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/steinarK, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
After creating a reverse-iterable map data structure a while ago, I now added reverse-iterable array and set objects: * npmjs.com: [reverse-iterable-map](https://www.npmjs.com/package/reverse-iterable-map) * npmjs.com: [reverse-iterable-array](https://www.npmjs.com/package/reverse-iterable-array) * npmjs.com: [reverse-iterable-set](https://www.npmjs.com/package/reverse-iterable-set) They implement the [iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols); hence, one can utilize `for...of` loops, `forEach`, spread syntax, etc.
Hi /u/osu61042, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Very interesting. Is this the most popular / and/or only high-level ML JS library? Are there any other comparable ones? Looks very neat and definitely have bookmarked to check out further. Thanks for sharing!
ooww intresting!
Good catch! To be honest I hadn't done much testing recently with the transform-based animations. [That part of the code](https://github.com/jeremyckahn/shifty/blob/master/src/token.js) could stand for some optimizations; for 2.5.0 I focused more on the [the core](https://github.com/jeremyckahn/shifty/blob/master/src/tweenable.js) of the library. Transform animations leverage fully-generic string interpolation, which is fairly expensive. I will prioritize optimizing that for the next release. Thanks for the heads up!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jeremyckahn/shifty/.../**tweenable.js** (master → 40d8fa5)](https://github.com/jeremyckahn/shifty/blob/40d8fa5009fda8a4fb9308a728097a7044d60343/src/tweenable.js) * [jeremyckahn/shifty/.../**token.js** (master → 40d8fa5)](https://github.com/jeremyckahn/shifty/blob/40d8fa5009fda8a4fb9308a728097a7044d60343/src/token.js) ---- 
How are you using these?
I made [this library called promise-trap](https://github.com/axelf4/promise-trap) for when you want to call multiple asynchronous functions/methods and then await all of them without hassle. Check it out!, I find it super useful.
Seriously, gulp is dead. As others have said, you should probably use webpack or parcel. And if what you want is running scripts, you should use npm or yarn.
If you don't need any ordering in your enum, but just the uniqueness of each value, you should use symbols : \`\`\` const \[ STRUCT, STRUCT\_MEMBER, ENUM, ENUM\_MEMBER, COMMAND, COMMAND\_MEMBER, COMMAND\_PARAM, COMMAND\_PROTO, BITMASK, UNKNOWN, VALUE, BITPOS, ALIAS \] = \[...Array(13)\].map(Symbol) console.log(STRUCT == STRUCT) // true console.log(STRUCT == ENUM) // false \`\`\` 
Look into three.js as another person has suggested
It sounds like you need to take a couple of steps back. You don't need to integrate React into your Django project. React needs to fit with your project in the first place. The best thing you can do is to take a piece of paper and a pen. Write down what you want. Sketch it out - it doesn't have to look good. The important thing is to have a clear picture. Then, ask yourself, what are the separate components to my project? What tools do I need to get each bit done. Little by little, you'll solve each piece. On the other hand, if you don't take a couple of steps back, you'll add unnecessary hours and frustration to your project. The choice is yours.
You're looking for css, not js. Google w3 schools css, there's enough easily digestible information on that site to last a beginner for 6 months or more. 
They are asking the mods to make these modifications to this subreddit to make it more usable.
 You can either returned a rejected promise or throw an error -- both will do the same thing. async (a, b) =&gt; { if (b &lt; 0) { throw new Error("b should be greater than 0"); } } or async (a, b) =&gt; { if (b &lt; 0) { return Promise.reject("b should be greater than 0"); } } 
Not sure how your reponse is suppose to help me with my gulp set up difficulties :)
 There's a pretty good overview of es6 in O'reilly's "Learning React". Also, lots of good free online resources if you search reddit. Exploringjs.com/es6 is supposed to be good.
I made [L1: Tensor Playground](http://mlajtos.github.io/L1/latest) – a playground for differentiable linear algebra. It is a combination of programming language, interpreter, standard library and IDE in one unified package. The whole thing is in your browser – no backend. (I am working on it since April, but never presented it here.)
In mah brain
If you're at uni. Please don't cheat. 
I want to make a blog that uses user auth and you can post, but not sure what technology to use. I want to do react, but I don’t know what else to do for the database part. Any suggestions? Should I use node? 
Not at Uni, this is for my e-commerce business.
But then the code would be easy to understand. How are you suppose to show everyone else how smart you are?
p.s. im not trying to be a douche here but this is more a place for learning javascript than it is for recruiting contractors. You say that you are starting to learn programming, so why dont you have a go at an implementation and share it with us.
Share the code? I'd be happy to take a look.
Appreciate the comment and yes, you are correct - I do not have the time to do this myself and I would rather have the expertise of someone else to do it, because they at least could learn something in the process and there is a reward on offer.
Not really anything javascript, this is basic programming. Notice for the first 20 points the serves follow the pattern 0 0 1 1 0 0 1 1..., then after that it’s 0 1 0 1.... There are a few math functions that will help you turn a total score number into the right value for the position in the serve order, the one you may not know is % (modulus) which is remainder after integer division, e.g. 0 % 2 == 0; 1 % 2 == 1; 2 % 2 == 0; 3 % 2 == 1; ... 
Scope is all over the shop (for example in the context for an _if_ block is completely different for that in an _unless_ block - wtf!?), you have to create helpers for doing the simplest of things like string concatenation, they are very hard to test, you have to precompile them, etc
Transforms leverage GPU's and are supposed to be faster everywhere, but to work with them, you need to fart around with string manipulation. Always something! Anyways, thanks for your work on this.
I will be updating the repo. I’m currently on holiday so am doing Holliday related things, but will be updating the repo with docs and the latest build! 
I think a combination of map and reduce could work. Mal over the array (map has the item, the index and the original array). Use the array and the item and reduce to determine the number. Not sure how efficient it would be though :)
``` const output = input.map((item, index, array) =&gt; { const subArray = array.slice(index); const biggerItem = subArray.find(subItem =&gt; subItem &gt; item); const biggerItemPosition = array.indexOf(biggerItem); return biggerItemPosition &gt; 0 ? biggerItemPosition - index : 0; }); ``` This will do just that.
This question is incomplete. How do we know at what date what temperatures are?
oh very interesting, thank you. I'm assuming this would be O(n) for time since we're iterating once?
I'm not entirely sure. While the map iterates once, slicing and findIndex will do some array lookup stuff (that will actually just be a loop). So I think this would come down to (max) O(n3) - (one for map, one for slice, one for finding the index). 
ah got it, thanks!!
Although I can't claim to have read every book, I'm tempted to say that no, such a thing does not exist. JSTDG wasn't just about the core JS language, it also covered browsers and the DOM and CSS and Ajax and Web APIs and even jQuery at the end. In other words, it covered not just JavaScript, it covered the whole ecosystem surrounding JavaScript. In 1996, that was an achievable feat, and even then still resulted in a fat book. But today... not a chance in hell. The ecosystem has exploded in size, and there's no way one book can cover it all.
hows it going
Here is a good video on using gulp for a local dev server and compiling sass, not sure if it's exactly what you want but it could be useful. https://www.youtube.com/watch?v=rmXVmfx3rNo 
Keep on working on it! (And share it!) Today's framework are only popular because someone experimented with new ideas and the community ran with them! Don't feel discouraged just because you're coming to some similar conclusions as are commonplace 🙃
&gt;Scope is all over the shop (for example the context for an *if* block is completely different for that in an *unless* block - wtf!?), this isn't true, they behave the same, and the scope is the component file for components, and the controller for route templates. :-\\ &gt;you have to create helpers for doing the simplest of things like string concatenation, Most people just install [https://github.com/DockYard/ember-composable-helpers/](https://github.com/DockYard/ember-composable-helpers/) Though, string concatenation should be done in a computed property so you can take advantage of optimized updates. This is one of the biggest advantages over something that doesn't have computed properties, because, for example, in react, anything you have in your render function is evaluated \_every\_ time the component updates. with a computed property, stuff like concatenating a first to a last name only updates when the first name or last name change. Big win :) &gt; they are very hard to test, integration testing is pretty straight forward: [https://guides.emberjs.com/release/testing/testing-components/](https://guides.emberjs.com/release/testing/testing-components/) (though, acceptance testing is where the money is :)) &gt; you have to precompile them, etc This is transparent to anyone using ember though. :-\\ It should never affect your development flow. :-)
This is a big can of worms. Based on what you've said, if you want to do an app search for parcel example apps on github. You probably want react as a first framework because their docs read well linearly and react has a kinder learning curve / less new stuff than angular or vue for beginners (yay controversy!). I'd recommend looking into making a node project or library first, tbh. Libraries are very readable and simple when small. Toposort for example. Redux is fun to read as well and is very well documented. Code styles are all over the board. Just try stuff
I've had a bad reaction when I shared source code at some points in the past, some criticism was warranted while badly expressed, some was fair, some was both unwarranted and expressed badly too. While I've not packaged it up all that well yet, it's in much better shape than before. I've just published 0.0.30 which kind-of works. I am working on making more of a splash with a website powered by jsgui to demonstrate it. If anyone is interested in contributing that would be greatly appreciated. One major part that still should be done is something that transforms XML or HTML-like code into a tree of jsgui components. It should not actually be all that hard, and I intended for ages for jsgui to provide custom elements, somewhat inspired by ASP.NET programming back in the day. Thanks. I'm definitely not getting discouraged by that, I find it encouraging, and am making an effort to standardise in various places where Evented_Class (event handling which to my surprise works really well having been written a while ago and had a few bug fixes) objects can be changed a bit and just have `next`, `complete` and `error` events. There has been a lot of experimentation in making this library. I thought I had missed the boat for its uptake with others having been in a more complete and published state a while back. Now it's clearer what ES6 can provide. Now I know more about React, I see what it isn't and the possibility that some day it could be used within the jsgui framework. What I have is a bit like react (without the HTML diffing but more like Backbone in some ways), Express, and bits and pieces linking them. One feature which I thought highly advanced when I first thought of it still is not very widespread and takes extra effort to do in react, and that is server-side rendering with client-side activation. Anyway, it does take extra effort to do that in jsgui but it's likely to be in a very different way. One nice thing that I'm working on right now is coordination of client-side data requirements with Resource objects on the server. These resources so far are simplifying an api down to async `get` and `set` operations. A vast number of things could be done that way. `get` could return a subscription object or even a DB connection with a wider API. At the same time, the basic API is kept as simple as possible. There is then a Resource_Publisher which translates HTTP requests (particularly PUT and POST) to the resource's methods. The objective is to make it quick to wire up observable or async resources on the server that are made available on the client with the same simple API. In the meantime though, in order to make coding these types of servers and services, the JS code I've had to write has become rather complex. Some day I hope to integrate react within jsgui. React_Component_Wrapper is one idea I have in mind.
https://github.com/metabench/jsgui3
2-4 years? Self taught, no youtube guides, only read documentation from mozilla &amp; NPM package descriptions Made: \- Dozens of random idle games \- Dozens of random tower defense \- An Idle MMO game, my posts are still up at r/incremental_games \- A second Idle MMO game, which was written way better than the first but I couldn't get to complete it like the first \- A sandbox buildy game that was fun but couldn't get it work how I wanted, had RPG aspects and a multiplayer component to visit eachothers builds, talk with eachother and PvP was the last working thing I added. (Collisions were really difficult) \- Web interface to manage my VMs \- Web interface to manage SSH connections \- Dozens of random discord bots with a few that were pretty good but I only cared about discord a few times, most times it just got too boring. \- A chat application for fun that was a bit of a discord clone and written on my laptop while being offline and bored That was probably everything related to javascript alone, learned a lot from other people looking at my code and saying it was shit. Which it was a lot of the time. I think I've improved a lot over the course of the past few years, still... have a lot of time left to learn more. PowerShell interest me more currenlty though.
&gt; For instance it would work automatically on CI server and for all your users even from virtualized environments CI servers can be configured with SSH keys. &gt; and you are not forcing anybody to set up SSH keys That's a stupid reason. Every developer should be competent with using SSH keys anyway.
Have you seen ES8 or ES9. Barely anything changes.
I was looking for something that didn’t use any framework and was purely JavaScript. I am trying to get into Angular, but I first want to fully understand JavaScript.
no, his code is n\^2 because map is O(n) and findIndex is O(n) and is called inside map. Likewise for slice. I'm still thinking about a O(n) solution but I can see an O(nlogn) solution with a min max heap: 1. create a min heap (a structure where the lowest element is always kept at the root, inserts are in logn time) 2. loop your array left to right, inserting into the heap each time a node/pair of \`{ value, index }\` (heap sorted by value) 3. for each loop iteration, compare the current value to the root element in the heap. If the current value exceeds the root element in the heap then you just found the next hottest day of the year for the day in the heap. Use the current index and index we also stored in the node in the heap to determine how many days went by, and then pop from the heap and check the new root element for this condition too This solution \^ is O(nlogn) because in the worst case at every iteration of for loop you have to insert into the heap and cause logn re-orderings every time.
https://javascript30.com/
Major ES2017 features: * Async functions * Shared memory and atomics Not nearly as big as ES6, but still significant features.
I have this book! It’s worth the purchase! I think there are also free copies online, if I remember correctly there is a GitHub repo for the book 
&gt; if I remember correctly there is a GitHub repo for the book https://github.com/getify/You-Dont-Know-JS
I like this approach as it's how I started out programming as well. If that's the case, maybe think of a project that excites you. What are you into: video games, trivia, sports? Think of some cool app you could build and start out with the first small steps. Let yourself get crazy with the project structure and learn what not to do by running into issues as the application grows. You can compliment this with reading about best practices at the same time and start to incorporate them slowly. Soon you'll realize how difficult it can be to manage a complex application with a ton of state and you'll recognize the usefulness of all the frameworks that are out there. Best of luck :)
Lol when I didn’t read the post above before making a comment 😖
When you're writing a question make sure to ask yourself if you've reduced it down to the simplest form it could possibly be. You'll want to include only the information a person needs to solve your problem without them having to do a ton of work. Ideally it should be "Why doesn't this very specific thing happen when I do this?" and not "Why don't all of these things work together?". If you start off small with a working application and incrementally build your way up, you should be able to include when it last worked and the specific context in which something stopped working. I remember years ago my first SO question was heavily downvoted as well. People can be strict with the question structure. I gave you an upvote, hang in there :)
ah awesome, didn't think of heaps. It says the ideal solution, which uses O(n) , by using a stack but I don't know how exactly that would work with this. 
It's O([n for map]*([n for slice]+[n for findIndex])) = O(n*(n+n)) = O(n^2) in best (slice takes O(n) and findIndex takes O(1) ), average (both slice and findIndex take O(n/2)), and worst cases.
Since 1997. A lucrative career out of it.
I’d like to practice with Angular, but I feel that trying to master angular, typescript and is all at once will be confusing for me
I think we can use stack here. Push the first item. As we loop through the rest, compare current item with top. We pop until we find a top that is larger, push the current item. Each popped item, the result is current item’s index - popped item’s index. The ones left in stack will have result of 0. For this example. Push 73. 74 &gt; 73. Pop 73 and set result to 1 - 0. Push 74. 75 &gt; 74. Pop 74, result is 2 - 1. Push 75. 71 &lt; 75. Push 71. Push 69. 72 &gt; 69. Pop 69, result is 5 - 4. 72 &gt; 71. Pop 71, result is 5 - 3. Push 72. 76 &gt; 72. Pop 72, result is 6 - 5. 76 &gt; 75. Pop 75, result is 6 - 2. Push 76. Push 73. 
I don't have any tutorials handy off the top of my head, but I'd be happy to walk you through the process if you have free time. If that seems interesting to you, dm me your username on Discord and we can chat :)
&gt; The findIndex method executes the callback function once for every array index 0..length-1 (inclusive) in the array until it finds one where callback returns a truthy value (a value that coerces to true). https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
Perhaps in Ember those are non-issues. But I got to know and loathe handlebars _outside_ Ember, and that's what I have expressed. The main reason for not taking up Ember is, as I said, the fact that it has next to no traction in the industry.
Also, a [good JavaScript video by Kyle Simpson was just released on Coding Tech](https://www.youtube.com/watch?v=ixzK0jqLO70&amp;t=0s)
&gt;Perhaps within the Ember world those are non-issues. But I got to know and loathe handlebars outside Ember, and that's how I feel about it. I understand that feeling. I'm trying to get the team to rename handlebars, as the divergence at this point is great. I'm routin for "Sparkles" &gt;The main reason for not taking up Ember is, as I said, not handlebars, but the fact that it has next to no traction in the industry. This is something I'm hoping to change :)
Ok, those are some benefits, but do you think they are worth the trade off of having a unified testing suite for every browser running through a single tool like Nightwatch? 
Because people have no boundaries or morals. 
'Medium' is a good website where you can find good Javascript articles
&gt; I've been working on my own framework for absolutely ages, Relevant ... https://twitter.com/thomasfuchs/status/933447631514169344?lang=en
It's not just static analysis with JSX that is an issue. WHile there can be build time analysis, JSX is ultimately a syntax transformation to calls to `createElement` or `createComponent`. This means that each component `render` has to be completely evaluated for each render. Take for example this JSX render function: ```js render() { return &lt;h1 className="{this.props.isActive ? "active" : null}"&gt;Hello {this.props.children}&lt;/h1&gt; } ``` This evaluates to: ```js render() { return createElement('h1', { className: this.props.isActive ? "active" : null }, ['Hello', this.props.children]); } ``` Because of the full JS statment nature of JSX it means that `render` has to be fully evaluated, along with all renders for the child components/elements invoked in `this.props.children` or other props usage which may introduce more elements or components. The fact that JSX equates to JavaScript also means that the full runtime of Javascript and all legal operations have to be taken into account, there is not a way to build incremental state listeners. In contrast template stystems like Ember/Glimmer, Vue, and the template system that the Preact team has worked on on are fully static templates and each possible change can be observed and the state to output mapping can be highly optimized. Here's the same example component as an Ember template: ```hbs &lt;h1 class="{{if @isActive "active"}}"&gt;Hello {{yield}}&lt;/h1&gt; ``` And this is roughly the output instruction set created by this: ```json { "statements": [ [6, "h1"], // Start Element H1 [9, "class", [ [ 4, "if", [ [ 19, 0, [ "isActive" ] ], "active", null ], // Get Value of isActive and set up observer ] ] [7], // End Opening of Element [0, "Hello "], // Raw Static Text Node [4, "yeild"], // Render Children [8] // Close Element ] } ``` In even this small example, the component can throw away information about the element being an `h1` or the text node required to show `Hello `. Also, the state change caused by changes in `isActive` are completely separate from any state changes in child rendered components. A similar approach is taken with the transpiling of Vue components when using Vue templates rather than JSX. In Vue the statements are analyzed and something very similar to Ember helpers and sub components are created to track microstate changes across components.
Some background on Prember (which stands for "Pre-rendered Ember"). At build time it uses Ember Fastboot (the first party SSR solution for Ember) to render each page and then outputs each one of those files as static HTML. This is similar to some of the output and build process of things like VuePress or Gatsby, except that Prember doesn't have any opinions around how you create the content for your pages. Instead Prember takes an array of urls that you want to pre-render and then outputs these. There's projects like [`ember-ghost`](https://github.com/stonecircle/ember-ghost) that combine Prember with a markdown build process that will manage the list of URLs and do extra work to provide the markdown files as JSON that is fetched by the Ember app.
as you're looping through the original array, when and what are you pushing to the stack? 
Well I am working as a front-end developer and I rarely follow blogs. I generally subscribe to newsletters of collection websites and they are sending me email generally weekly or often. So I can easily follow what is popular and etc. Also often there is cool beginner articles in that mails. * [https://javascriptweekly.com/](https://javascriptweekly.com/) is really good to follow for example. * [https://dev.to/t/javascript](https://dev.to/t/javascript) is cool as well * [https://www.webdesignerdepot.com/](https://www.webdesignerdepot.com/) in mails always has some cool articles about javascript also So I can suggest you that way of following blogs. 
Fun fun functions is a great YouTube channel. That guy does a great job explaining everything and not just showing you how to do something without explaining how it works and why you should use it. Almost all of his videos/playlists are in vanilla js. Highly recommend it to learn the ins and outs of js. 
r/learnjavascript
Yes, you can draw the circles in a canvas element. The canvas api has a function called requestAnimationFrame which you can use to perform animations. Then you can create a scroll event handler to tie into the animation by passing the scroll position to use when you resize the circles.
Just wait until some of these proposed operators land! PS it's best to refer to ES by the year now. It's _way_ easier to keep track of.
The only O'Reilly book dedicated to ES6 I know of is *Learning Javascript* by Brown.
Seems a little overkill to ship an entire browser with an experiment? 
For those unaware someone posted [this](https://www.reddit.com/r/reactjs/comments/93ei1c/an_example_senior_reactredux_developer_task_you/?utm_content=comments&amp;utm_medium=browse&amp;utm_source=reddit&amp;utm_name=reactjs) a couple weeks back and since then someone submitted [their attempt](https://www.reddit.com/r/reactjs/comments/952551/code_example_senior_reactredux_developer_task/). I wanted to do the same but quickly realized I would need a whole lot longer than the allotted 1.5hrs. Ended up spending close to 9hrs lol Any feedback and critique much appreciated :)
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
This might be exactly what I'm looking for! I'll try out a small demo tonight and see if I can get this to work! Thanks
Solved! (For now, more advice and examples always welcome! No limit on learning ;) )
read the specs bro /s
Looks pretty good. I recently had to implement something like this at work. The one suggestion I have is that instead of using an array to store your reminders, a more appropriate data structure might be an object with the unique id as the key. This gives you quicker access to the reminders (objects are backed by hashmaps and accessing them by key is O(1) as opposed to O(n) for iterating over the array).
I abstracted and open-sourced a pattern we use at work to help our strongly separated react modules connect their stores together. It's a fairly powerful way to bundle some middleware, reducers, and other information together to power a specific domain of your react app. https://github.com/kjrocker/redux-modules
What do you mean by imperative?
Can I see a demo of the working product somewhere? I may be missing a link but I don't see one.
You start with an empty stack and push/pop as you go through the array.
This is the exact library I found lol! Thank you for the tutorial! I will check it out and see if I feel that it's less daunting than it seems. Also, thank you so much for the encouragement!
u/enplanedrole's solution is declarative - it uses functional programming ideologies to describe \*what\* needs to be done. (a map over a container Array type containing a findIndex). My solution is imperative - it uses built-in language constructs to tell the algorithm \*how\* to do the calculation. Declarative code is easier to maintain, test, and reuse, but relies on abstraction. Imperative code is harder to maintain, more verbose, and harder to reuse, but does not rely on abstraction, so typically has a performance benefit over declarative code.
I’m currently on holiday so not prioritising it 
Try saleor
/r/internetofshit
Web animations API allows you to pause and play animations a frame at a time. I've done an animation before now which tied into the scroll event and essentially played the animation frame on scroll. Doing it this way means you could use an svg or normal element and achieve what you're looking for (similar to the canvas solution). WAA uses a non blocking call back for running the animation which runs on the compositor thread, meaning this method is efficient provided you use a composite transform. Check out the examples for web animations api
Sure just put it up: https://towhidkashem.github.io/react-calendar
Hmmm.... I will yt this tomorrow morning, and likely choose based on performance. Thanks!
Hi /u/lucinafailure, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
You could use the Map object which maintains order but still allows an O(1) recall. 
I should connect to this alt more often... **Everything else**. Use arrow functions when you don't need `this` or `arguments`
Just start casually reading mdn
Thanks a lot, Added
That's a great goal, my suggestion is for you to expand the documentation of this project then. Where did you have trouble setting things up? Where do you think someone else might have trouble? What settings are in your project that are unique, and why do you have them there? Those questions are all unanswered right now, so you're leaving a lot of effort up to the reader/learner. Which is why this comes across (to me) as a really low-effort project — it's really hard to benefit from something like this if one needs 8 other documentation windows up to cross-reference your settings.
Thanks, I will improve the documentation and will get back once it is updated.
If experience taught me anything with Angular, ALWAYS use the cli, never us the boilerplates.
Honestly, I'd try it now if I were you. Parcel is so easy, no setup, it just works. No point in trying to get your gulp set up.
Meanwhile, it may help to use "night mode", where links are light blue vs white for normal text. (Unfortunately it has other disadvantages, such as `this being pink`.)
I just finished Origin by Dan Brown and if he calls it Winston when I watch this...
Come on... those pages are misguiding. I am sure a lot of large companies like Microsoft have a couple of devs who have downloaded and used Ember in an internal prototype once, but that doesn't mean they have traction in the industry. The only large company using it is Netflix... in the end it's the number of job offers that tells you how widespread a technology is
Honestly, That list isn't maintained by the ember people. a logo only gets put up there if the company opens a PR. And to be frank with you, not everything is about the jobs available. People hire for react because it was used in bootcamps (due to having no features / "one thing", and therefor being easy to teach), and companies want cheap labor
tl;dw?
Perfect explanation! I would like to add that (imho) 9 out of 10 times, the performance gains you get with writing in an imperative way do not way up to the added complexity of the code.
Google Chrome 67.0.3396.99 (Official Build) (64-bit) (cohort: Stable) Revision a337fbf3c2ab8ebc6b64b0bfdce73a20e2e2252b-refs/branch-heads/3396@{#790} OS Windows JavaScript V8 6.7.288.46
www.plusfeeds.com 
https://svelte.technology/blog/frameworks-without-the-framework https://svelte.technology/blog/sapper-towards-the-ideal-web-app-framework
First there was jQuery. Then there was React. Now its [Svelte](https://svelte.technology/). The idea being that code compiling vs. simply writing against a framework is the next big thing. But also, apparently this technology doesn't work when demoing :P
This is really cool. Can anyone explain, though, what the drawbacks of an approach like this would he compared to using React? Community support maybe?
&gt; CI servers can be configured with SSH keys. Sure thing and we have them configured that way at work. I didn't say otherwise. &gt; That's a stupid reason. Every developer should be competent with using SSH keys anyway. I didn't write developers specifically, but even if I did that's a philosophical question to me. Using HTTPS to access GitHub is certainly more straightforward so what I meant is that it can be helpful.
Think of how you would solve this problem coming from the right, so what would you need to do if you iterate your list in reverse? There is an O(n) algorithm that does not need a stack or a map.
Chrome and Firefox drivers are from and for a different world – Selenium, and Nightwatch is one of the test runners there. Foxr has nothing in common with that. Puppeteer is another story – it uses a special native browser protocol directly without Java wrappers and all the problems around this. Foxr is aiming to become a pair to Puppeteer using at least a similar API set so that it's possible to create a new kind of multi-browser test runner.
That's Chrome cheating on browser security. It's hardcoded in the browser application to automatically open files which are white-listed (either by domain, and/or digital certificate).
I'm not sure that's so. When you click the button, a little pop-up (not unlike what appears during an alert() call) comes up asking if you want to let the page open the file.
Looks great! What program are you using thats featured in your github that shows the breakdown of your redux store and the associated actions/reducers?
Thanks, it’s the redux devtools extension for chrome. You have to set it up in a project and have the add on installed from the play store on your browser. Makes working with redux a lot easier! https://github.com/zalmoxisus/redux-devtools-extension https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en
Maybe /u/rich_harris may like to comment
&gt; But also, apparently this technology doesn't work when demoing :P Te be fair, the technical problems of the demo were probably not related to Svelte...
Despite the rocky demo this was an excellent talk. Well done Richard! I’m looking forward to looking into svelte 
Yep! I haven't actually sat down and diagnosed what went wrong, but tl;dr, the mechanism I was using to sync the audience view with the presenter view broke down. Not Svelte-related. I'd finished coding the talk about 2 hours before go time, jetlagged, very little sleep, and I'd only been able to test everything on a single screen setup. Lesson learned!
You can do this. But then you are mixing promise-style flow control with async-await-style, which may make your code harder to read.
Try both! The Stencil team kindly credit Svelte as an inspiration. Stencil has a different development experience, based on JSX and TypeScript. In my experience Svelte components compile to smaller code, and Svelte is designed to work with whatever build tooling you prefer whereas Stencil is a bit more opinionated. Stencil always compiles to web components; Svelte \*can\* compile to web components, but it's opt-in, since they're not supported everywhere yet and present server-side rendering challenges.
Happy to do it! I like doing this kind of work. :) After auditing https://github.com/jeremyckahn/shifty/blob/master/src/token.js a bit, it looks like I should be able to gain some speedups by reducing some repetitive string parsing/building steps. Hopefully I should be able to ship something before too long!
It was a great talk! I'm trying and loving Svelte btw.
Interesting. I think you should point out the advantages of the small bundle size more than pointing out JS evaluation performance. The network will *always* be the bigger bottleneck. And if you're targeting users in the US, most of their phones are pretty damn fast at evaluating JS. 
I’d be interested in this too. I’d like to look over an actual project, something that isn’t too big and is understandable. It’s one thing to learn JavaScript syntax and principles and do some practice exercises, and another to see them in action. 
Oh awesome, thanks. I remember hearing about a proposal for these some years ago, but I had no idea that they were even in any specs!
Hey everyone, Svelte creator here. Thanks /u/archivedsofa for posting the video. If anyone is curious about the framework, we have a [friendly Discord chatroom](https://discord.gg/yy75DKs) where the Svelte community hangs out — please drop by and say hello!
[PlainJs](https://plainjs.com/javascript/) might be a good place to learn some simple ways of doing certain tasks, there is different sections for everything so you can just find what you want to do and follow the guide.
I’m learning web dev as well rn. Taking a bunch of courses. After taking a web dev course I realized I had to gain a better understanding of JS since it is so dynamic like you say. I’m taking a course just focused on js atm and it’s annoying sometimes, but it is worth it in the long run. JS is highly object oriented so you have to have a solid understanding of the finer details and of objects, variables, functions, prototype chain, lexical scoping etc. I recommend this [udemy js course](https://www.udemy.com/the-complete-javascript-course/) and this [udemy web dev course](https://www.udemy.com/the-complete-web-developer-in-2018/) first and then dive into other courses such as react.js, node.js whatever else. And you said you want to be a front end dev? Learn js and then dive into react. Imo though (may be unpopular) learn full stack dev and you will learn much more, get paid more and have more opps. I think just front end is getting saturated now. If you want a competitive advantage dive into some backend stuff like sql and python as well as node.js. JavaScript is awesome because it is a bridge between front end and back end the middle layer and all the frameworks and libraries it comes with expose you to full stack dev at the end of it. 
This is exactly what I want.
Hey, I am kind of new to this. Can somebody explain to me what it does and why it’s useful? I read the article but I don‘t really understand what‘s happening. Is this adding some basic rules to every css file?
Thanks, I've bought this course when it was on sale a while back. I will definitely do it after I finish my current course. Full stack is my goal in the long-run but I don't think there's much point in learning next language before I learn JS properly first. I need to get through that first big hurdle and then I'll continue, I'm starting my masters this year and we'll cover Python during the course so probably that's when I'll dive bit more into back-end. I guess I just have to continue to learn until it "clicks" in my head...
Thanks, I'll look into it.
I feel you, it just takes time honestly. There’s no way you can learn everything in a month or two. You have to take it one step at a time and everyday if you can say I learned this concept or something else clicked no matter how small, that’s when you are on the right track. Small steps now will lead to bigger leaps in the future. I really get what u mean by “click” but it’s more of a million small clicks rather than one big click if you know what I mean 😉
Horrible project name, very hard to pronounce for non-english speakers I predict something else along the same idea but with a better name will take off.
I made a quick UI to control a couple servos connected to a raspberry pi. https://squarewars.s3.amazonaws.com/index.html My friend has a Storm Trooper helmet sitting in his office window across the street from a pub. I made this so we can control it from our phones and make bets that we can use the force and control it to win free beer. (Wishful thinking) Not finished yet. Planning on using rxjs to stream the xy cords to the pi. Would like to explore using webgl and render an actual 3D helmet instead of the cheaper CSS transforms. Oh. We live on a cute little village square, hence the project name. 
Good talk Rich. Is there a video where I can watch the Jed Schmidt quote about directed graphs you reference here: https://youtu.be/qqt6YxAZoOc?t=196 
Java !== JavaScript.
If I make a big deal about sharing it here I could have problems to do with self-promotion. I've just made a nice month view for a date picker, I'm interested in putting little demos up, but I'm making very rapid progress now and plan on making a somewhat complex timeline viewer and editor (based around a grid). The code is in the github repo and the single-control-server allows single controls to be served relatively easily. I'm getting a lot closer to my original goal of a framework that makes it easy to drop complex controls into an application, and takes away the boilerplate parts of serving and displaying data of categories the framework is designed to handle. One nice piece of UI design in my opinion is the property editing system in Visual Studio. It knows the expected types of the properties, and provides the appropriate UI component to choose the value. This kind of versitality when dealing with data is the kind of thing I'm keen to implement in jsgui. With react so successful and with complaints being about the bundling ecosystem as a whole (requiring lots of different modules and knowledge of such modules) I see there being more of a possible place for jsgui with its much more monolithic design withing the framework landscape. I suppose I need to continue improving it and make some impressive demos and commercially useful applications to get people interested. There is definitely scope for integrating some of the most popular packages of today such as react and redux into jsgui if they cover new ground or do something better - or maybe are just established enough that many want to use these techs but have the jsgui framework offering further support and features such as user interface components.
I’ve played around with Svelte and also Stencil. Both are cool, although Stencil felt a bit more polished to me if your goal is making reusable components.
I wanted to stop by and let you know it gets better but tbh it will take a long while before it gets better for you. But then when you start seeing some js libraries (like react, which requires knowledge of webpack, npm, es6, react, redux, react router and how it all interacts before you can even start to code your web app) you will run into that feeling again. But that's what programming is though. You learn new tough concepts which at first are hard to master, but with time, you will get them mastered. When you do, you move on to tougher concepts. So basically it's your job to deal with that feeling of being lost. If it was easy people won't pay as much as they do :)
I don't get it. Looks more like Vue and less like React. But in what way is this different? 
JavaScript being named after Java to ride it's popularity wave sure came with some lasting downsides eh? 
I made this [node creator](https://i.imgur.com/TzZoQx5.png) for use in a userscript. I was wondering about my usage of `apply()` to make a bunch of sub-functions for each element type (the idea being to clean up my pseudo-html, like the code under `Example usage`, as much as possible). Nodes are created and passed to the element assembler as `this` along with all of the other arguments. It works fine but I can't shake the feeling that this application is bad/evil/disgusting - is it? The alternative is to make a templating function, but eh.
JavaScript is multi-paradigm. Even though everything in JS is an object, you get to decide if you want to write scripts, OO, functional or anything else.
It looks like Vue probably because Vue was inspired by Ractive which was Rich's previous project. [Svelte has a Store.](https://svelte.technology/guide#state-management)
Thanks 
Thanks
Thank you
I'm not sure if Jed ever gave a recorded talk about the project (which was called Dag; it didn't advance beyond a prototype). He [presented it at ManhattanJS in 2016](https://twitter.com/kosamari/status/704392217276850177) but I missed the talk and learned about it from Jed later at BrooklynJS (though it took me a few months to understand what he was saying) — the quote in the video is basically a recap of that conversation.
WTF are you taking dude. 
My advice to you is that do not confuse a language with libraries built on the language. Remove all libraries from the language that can not be possibly built with the language, meaning those that would need explicit compiler support, and that is your language. Also, this implied redundancy that you are removing includes syntactic sugar built into the language, and exposed APIs to other programs when it comes to scripting languages.
Off topic. I'm not sure if you guys feel the same, but I think Rich's typing speed is very fast. I know he didn't type a lot during the demo, but you can have glimpse [at 11:16](https://youtu.be/qqt6YxAZoOc?t=676) Is this just him or I'm too slow?
Wow. Why use this kind of words? We’re work hard to propose a way to allow people to showcase their programming skills, etc. Where’s the garbage? 
This is good feedback! I agree with what you're saying, and I would have loved to have spent more time on it in the talk but 25 minutes is a brutal target. Next time I'll try and prioritise that angle. You absolutely could compile components written in Svelte's template language (which we call [HTMLx](https://github.com/htmlx-org/htmlx)) to React components. I'm not convinced there's a good reason to do so, but one of the great things about templates is that you *can* compile them to lots of different targets.
I won't be much help in terms of recommending any books or tutorials, but I do have some advice. It seems like your understanding of what JavaScript does is a little fundamentally wrong. It's not a programmable CSS where you select elements and change things. If you're going to pursue JavaScript, you should take an intro to programming or programming fundamentals course (*not* a webdev course!).
I was cheating. I love live-coding demos — there's no better way to get an audience to truly understand what's happening — but they tend to be very stilted, because it's incredibly hard to type correct code while engaging with an audience. So I rigged up a system that would allow me to type any character, and it would advance towards the next 'checkpoint', while making it look like a real editor (matching brackets, auto-closing tags, auto-indenting etc). It worked beautifully in all my testing, including the synchronisation between the audience view and the presenter view (in separate tabs, synced via localStorage events). As soon as I tried it on stage, with a two-screen setup, it failed horribly. That's why seven minutes of the video are just me flailing. Moral of the story: just show a damn video.
Yup! Turns out anyone and their dog can take online courses, so the amount of people at that skill level is super saturated. But the market for skilled and experienced people is still unsaturated.
For the moment, the focus is on programming skills &amp; the project aims to build a platform where other programmers validate your skills. There are a lot of reasons, and we believe that blockchain technology &amp; tokens allow us to reward users that share their data on the platform. It’s something new. It’s something that doesn’t follow the current social network business model. And it’s something we believe in. 
Probably techies are not the best target... We are usually paranoid about our personal info on the web Btw: the site is not very responsive, on Samsung Galaxy S9+ it's awful... 
Nice way to explain both of them!
I see, thanks for the comment. We have a Quizzbot &amp; a validation protocol where real users look into your GitHub, etc. Would be great to have your opinion on that also (on the human approach): [https://indorse.io/claims/new](https://indorse.io/claims/new)
One nice feature that this doesn't mention is the ability to mutate state without having to make a resolver for it. You can modify the state directly via ApolloConsumer &amp; cache.writeData({ data });
Thanks for the feedback, we'll look into this *Samsung Galaxy S9+* issue!
Thanks for the info! I was messing with svelte, cool project! Don't worry about the demo, you explained very well afterwards, definitely a good talk. People do enjoy live demo though, so if you ask me, I'd choose to watch the live demo again ;) A video can be prepared, just in case...
I tried the reverse iteration approach but my results were way beyond incorrect, lol.
The big difference in that JavaScript is a programming language, whereas CSS is just a markup language. You can't do conditionals in CSS, so it's fundamentally much simpler to learn as all you need to know is that you target an element with a selector, then apply rules. You can learn new selectors and new rules as you go but the basics stay the same. With a programming language like JS there's a lot more to learn, but once you've got the basics you can learn new libraries and APIs fairly easily. I'd recommend starting with plain JS, so no libraries to make things more confusing. Then get to grips with variables, if statements, for loops, functions, and then dig into how JS is an asynchronous language and learn about callbacks and possibly promises (though if that seems confusing, stick to callbacks for now and circle back to promises later). Along the way you'll also learn about objects and arrays so you can apply the concepts. From there you certainly won't know everything, but you can probably start adding libraries for what you want to use and understand most of what's going on when you use them. Then go build stuff to learn more.
On the iPhone 6s it’s also very janky and frankly disgusting looking
I opened it with safari. The top banner covers the logo and the accordion folder is janky. No actual content seems to be loading for me
Well I'm starting my masters in IT in October and first year is all about programming and web technologies. I'm doing "plain" JS course right now but it's paiiiiiinful... to say the least. :) Anyway thanks for the advice!
I’m confused OP were you asking about the Map object, i.e. `const x = new Map()` or the map array method? 
I'm in a similar boat as you! I'm able to decipher javascript code &amp; logic, but I'm having a hard time being able to write my own. If I find anything good I'll report back with findings. I've found this[ javascript workbook](https://javascript-workbook.netlify.com/) to be pretty helpful, but it isn't necessarily the guide on JS logic that we're both searching for. Good luck!
JavaScript is fundamentally a programming language, CSS is a so-called Domain-Specific-Language. What does that mean? JavaScript is very general, CSS is made for one specific purpose. It's ok to be frustrated when learning something new. On a fundamental level, programming languages are all about manipulating, transforming and transporting data to meet your needs. What JavaScript offers are tools to manipulate, transform and transport data. There are various kinds of _data structures_, surely you've heard of _literals_ (such as strings and numbers), _arrays_ and _objects_. There are language-constructs and functions in the language that will help you manipulate the kind of data-structure you're working with. For example, if you have literals, you have var a = 5; // you can manipulate a number with for example Math.sin(a); // functions a + 3 * 9; // math operators, +, *, /, - (and %, ~, &amp;, | ....) var b = "some text"; // manipulate text with b + "... and some more text"; // concatenation b.substr(0, 4) // functions (this would be "some") Then you get to data structures such as arrays and objects var a = [1, 2, 3, 4, 5]; for (var i = 0; i &lt; a.length; i++) {...} // use for loops a.forEach((x) =&gt; ...); // use functions a.indexOf(3); // 2 var b = {"name": "rootpl", "subreddit": "javascript"}; b["name"]; // you can access object's data for (let key in b) {...} // or you can loop through its keys for (let value of b) {...} // or through its values... You don't have to know all of that (and there are many many many more things you can do with numbers, strings, arrays and objects). You need to understand that the language provides tools to manipulate, transform and transport various kinds of data; what you need to learn is how to know _what_ tools you are appropriate for your kind of data. So like for your example, yes these two pieces of code do the same thing, it doesn't make a lot of sense from to do it the second way: var someParagraph = document.querySelector("p"); someParagraph.style.backgroundColor = "red"; var items = []; items[0] = document.querySelector("p"); for (var i = 0; i &lt; items.length; i++) { items[i].style.backgroundColor = "red"; } Heck, you could make that second example even worse, and you could go on, and on, and on, and on. var selectorFunction = document.querySelector.bind(document); var items = [({"abcdefgh": selectorFunction("p")})["abcdefg"]]; var styleReversed = ["der"]; for (var i = items.length; i &gt; 0; i++) { items[i].style.backgroundColor = styleReversed[i].reverse(); } While this example has the exact same effect as the above two, it uses a lot of functionality that doesn't make any sense. It is up to you to recognize what your problem is, what data you have, what structure would fit your data best, and what tools you choose to get the job done. In programming, less code is usually better code. TL;DR: JavaScript is a programming language, programming languages are fundamentally different from something like CSS. It is up to you to use whatever knowledge you have of the programming language to decide what structures and functions to use. As you get better at programming, you will get better at recognizing what does or doesn't make sense.
In __CSS__ you provide a __set of rules__ for the browser to obey, in other words you provide the "What" and the browser provide the "How". In __js__ (and most programming languages) you provide a __recipe__ describing the "How" and when the browser follows the recipe, out falls the "What". It's a fundamentally different way of thinking so will take some time to figure it out. 
Hmmm, weird! If you have the patience to try another browser, I’d really be curious about the result. Anyway, we’ll look into it! (I’m using Firefox Focus). Thank you! 
No. Just use vanilla JS or jQuery
You get the code working then you (incrementally) refactor towards a pattern. 
Are you starting your Masters or your Batchelors?
Also any examples of a good website or web app with structure which can show how the patterns being used are good vs bad practice 
That is like recommending youtube for videos, have any medium blogger in particular to suggest?
Okay so on my first go at a web app I’m just expected to make it work and then go in and refactor my functions to be better executing or simpler in logic. After that I think then I would have to look for an encapsulation of those functions/variables in a way such as what I see in a revealing modular.
Looks like it looks fine on mobile Firefox
Correct 
Getting \`NET::ERR\_CERT\_COMMON\_NAME\_INVALID\` errors in chrome when trying to load the article.
Nah, looks good. Apply, bind and call are your friends. But why not just use a framework?
I'd export anything that is shared into its own module and import it into each respectively. Then it can just be three separate repositories.
With my experience building single page apps, I usually start off with an App class that represents the entire web app. Use as little code as possible all in the same place, and spread it out over different scripts or classes for everything. For example, the router, template manager (used for returning DOM elements), and page manager (used for rendering entire pages and transition between pages) are all their own classes that are stored in the App class object instance. Let me know if this doesn’t make sense and i’ll try to explain better.
Writing code is all about managing complexity. Often, code is simple enough that using design patterns actually introduces additional complexity into the program when it was never really needed in the first place. So don't worry so much about "patterns", just write lots of code. It can be bad code when you start out, but as long as it works, you're learning what *complete* applications look like. Then, if anything in your code seems particularly hairy / difficult to change or maintain / inefficient, you can look for solutions that target those problems. This is how you discover what patterns go where and why. But there are no hard and fast rules here. To reiterate, writing good code is just about managing complexity. However you manage that is fine.
Map object 
Yeah look at lerna or yarn workspaces. The babel repo is an example of a monorepo. The root package.json is used to configure the monorepo. 
Thank you
Thank you appreciate the thought of just building for functionality first
Not on hand but you can check out a website I own that uses this pattern: https://listcord.com. I can show you the code when I have the means to do so.
No worries this helps thanks!
I’d take a look at https://github.com/withspectrum/spectrum.
JavaScript Indepth, all four of the links [https://github.com/micromata/awesome-javascript-learning#free-ebooks](https://github.com/micromata/awesome-javascript-learning#free-ebooks)
means there is no jobs for vue developers
Design patterns aren't ends in themselves or something you should actively try to incorporate. They are simply descriptions of tried and tested solutions to recurring problems, and often they also provide a standardised vocabulary to discuss the concepts involved. If you're writing code to solve some problem and you find yourself needing something close to an established pattern *then* you might pause to consider the common issues raised by that pattern and whether they also apply in your current situation. If they do, you can adjust your design to be closer to the pattern, or to take the related issues into account in some other way. You can also adopt any relevant standardised terminology in your documentation. For example, you can just say that two parts of your system use a publish-subscribe architecture to communicate, and perhaps provide a brief citation for anyone not familiar with that concept, instead of having to describe what it is in detail every time you use it.
I really like what you said about being in a local maximum. I’m really looking forward to checking out svelte. 
ummm if you watched the video, or read the book and saw the titel of the post, you would understand.... 
Okay. Troll harder next time.
What @javaslipped said, I've done my bachelors in Business Management and I'm now allowed to continue to do my Masters in IT (same university).
Why
Thanks! I'll look into this!
Watching Harvard's CS50 on YouTube right now. :P
Thanks! I'll take a look at this.
It seems like every response you got dealt with the array method 
Best JS Book I've read. Direct to the point https://eloquentjavascript.net/ 
TLDR: some people already know JavaScript. 
Didn’t work for me.
It has one built-in.
I'm pretty sure he was kidding.
[https://github.com/dwyl/Javascript-the-Good-Parts-notes](https://github.com/dwyl/Javascript-the-Good-Parts-notes)
Hm, looks like it just didn’t connect first time, works now.
Maybe was Heroku idling
I think I will do that. Thank you!
The app is nice, but how are you storing the information right now? I just signed up with two random, fake emails and passwords
I forgot to mention that. I'm using mongodb. 
Get the app working with as many parts as needed all centralized. Then refactor as the patterns emerge. Finding and reducing repeated functions will tend to bind the application into the correct pattern to do the job. Dont be paranoid about state, just manage it consistently.
Half those are wrong or out of date.
Exactly, talking about 'new' making bugs? Jeez
I would say do: Try to use functions that return the object, even if it was just to change one property on it. That way, you can string functions on the objects, which encapsulate the changes that happen inside a single expression. If composing those functions becomes tedious, stick them onto the prototype of the object. [Douglas Crockford has a thing on YouTube.](https://www.youtube.com/watch?v=b0EF0VTs9Dc&amp;t=2501s)
I’ve been playing around with building a new tab chrome extension using Vue. The setup is slightly different but it’s very cool to get insight into how you’re using it!
We generally recommend plain objects, as ES6 `Map`s aren't serializable.
Questions like "evaluate", with drunk dev garbage on screen. Questions about compare with java, all js programmer need to know is that java !== javascript, nothing more. How do you like qustions like "what is main difference between java and Rubi ?" 
"In JS it feels like there's always several options to do something" This is not exclusive to JavaScript, it's about all programming languages. Do not overthink just go with the first option that comes to you mind. Choosing this or that way to do something comes with experience. My advice is to read as many different tutorials as you possibly can because everyone has their own way of explaining things and looking at JS from different perspectives is very helpful. With time you will start to understand the logic behind it. 
Also, "time is over" when there was 4 minutes left, makes anybody piss off. Stupid question "why js named js", without correct answer btw. Question with document.write() ! Please ppl, forget those two words, the usage of document.write so narrow, it should be only in specs, if anybody will need it, he will find, nobody else should ever know about this superbad practice exists. Question about "server-side" object... No single question about context, event loop, etc. Looks like all those quiz made by 
I'm using Redux and it uses one global state for all components. Usually there is a wrapper that has access to global state, and this wrapper passes this state or parts of state to its component. 
One piece of advice you can utilize is "code to a desired interface". That is, think first about how (ideally) you'd want your objects and function calls to look like at higher level, and *then* code the implementation to try and make that interface a reality. Design patterns will spontaneously arise from this process, and with enough practice and maybe a bit of study, you will learn which patterns are best suited to which goals.
Can confirm. Refactoring to patterrns is smart advice
So, my suggestion is this. https://www.udemy.com/understand-javascript/ Understanding the weird parts of Javascript. Amazing what goes under the hood that we do not see when we write code, 
Shopify or WooCommerce
Do use a linter.
The PayPal or Stripe API, strangely enough.
Don't pay $10,000 to a three or six-month "bootcamp" to learn it. \--Sherman 
Don't JavaScript. Do typescript. Joking... Kind of
This is actually not great advice, and it's something I used to believe too. I'm still around junior level so someone might be able to explain this better: The speed difference is incredibly small that no one will actually notice. It will be much more beneficial for legibility to use any of the loop methods. Instead of just focusing on code that is a millionth of a second faster it's better to write easier to read code. You or another developer will most likely have to go back to it. Second point, `for..of` is needed for iterating through generator functions, so that will be very useful while other loop methods cannot be used there. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators
You might want to read [the Redux FAQ entry on deciding whether to keep state in Redux or a React component](https://redux.js.org/faq/organizingstate#do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate). I've seen people put literally _everything_ into Redux. You _can_ do that, but I personally think it's an overly-dogmatic approach. Some values should go into Redux, others should stay local to a component.
This is terrible advice. Don't overthink things. The speed difference is absolutely negligible for the vast majority of cases. There are also cases where it is less prone to errors. Even the official Google YouTube channel has JavaScript developers involved in the JavaScript specification who literally said "don't use for loops... stick with for of".
Don’t use eval()
Write pure functions as much as possible. Avoid state where ever possible. Use limited functional programming technique. Use tools like ESLint and it's plugins like eslint-node, eslint-react and etc.. Avoid Boolean variable to manage the state, most of the time we could drive/query from other sources variable. Use TypeScript! 
I don't agree. Some people need structure and guidance and Bootcamps work for them. I know people who have attended them who swear by them, and they tried other avenues of learning programming before. It's not for everyone, including me. I don't hate that people do them though or think they're scams (which I'm sure there's plenty who are scams).
Formatting matters. Comment your code. Use a linter. Wear a condom.
Thank you I think I get this point which helps to just go out and build.
Seeing comments like this make me feel so shitty as I’m about embark on my journey and starting a bootcamp soon. Why are people such haters?
Yes, people know. Therefore, this post is about using JavaScript in IoT. 
Because JavaScript offers all the perks which can be useful in IoT.
I didn't pay for someone to teach it to me, I paid for someone to say I went there and graduated. 
I feel like this thread just leveled up. 
exactly
Don't feel shitty about it -- all advice is a generalization. There are varying qualities of bootcamps, and people respond to them differently. 90% of the time, I think a bootcamp is comparable or better in time efficiency to learning on your own. You won't go *wrong* with a bootcamp, many just think it's not worth the money, and they're sometimes right, sometimes wrong. Your future as a software engineer is indeed going to be self-taught -- the field is vast and you're going to need to learn how to teach yourself. But, for many people bootcamp is super helpful to get your career kickstarted. First, it's similar to going to school -- you can technically teach yourself all the knowledge by reading textbooks, but you're immersed in a social structure with guidance and peers, which goes a long way. Second, in tech you also need to *learn how to learn*. It's daunting diving straight in without guidance, and a bootcamp may streamline or kickstart this process. Go into your bootcamp ready to learn, and you won't go wrong. Just make sure to keep challenging yourself to figure things out.
Thank you for taking the time to write this. What you wrote is how I work/through with complex problems or ideas.
All in the docs here: https://api.jquery.com/jquery.post/! Looks like jQuery terminal is extended from jQuery - so I would assume the base jQuery methods follow jQuery docs.
The truth is that you’ll need to solve a problem multiple times before you understand it and can extract a pattern of what works. https://blog.codinghorror.com/rule-of-three/ I’m not saying you should go blind into a problem, only that you shouldn’t obssess over which pattern to use. 
Thanks, that helps point me in the right direction. I guess I should read more into the Jquery ajax methods, and also the underlying JS ajax because it seems like some of the answers in the following link might also be along the lines of what I'm going for: [https://stackoverflow.com/questions/21319515/return-php-data-via-javascript-function-without-submitting-form](https://stackoverflow.com/questions/21319515/return-php-data-via-javascript-function-without-submitting-form). Sometimes I hit a mental road block and want to crowd source some ideas, so I appreciate your response =\]
Yep... I should have RTFM on those methods. Much appreciated!
As already mentioned there are options, but I would ask why you want to do this? If you do this, it is exploitable and just asking for an attack. The front-end should define how it responds to a request. The endpoint should return JSON, and define a method for on completion of request. 
Don’t feel shitty, everyone is entitled to tell their story in their own way. Maybe he/she had a different/negative experience with a bootcamp. I went through a bootcamp and it changed my life. But remember as you go through, it’s not “school” in the sense that you end with good or bad grades, you end with as much knowledge as you retain, that’s the benefit. You get what you put in. In any bootcamp you will still need to teach yourself, no one will hold your hand. All the classic responses to your coding/webdev questions;“Check YouTube, read the documentation, search in stackoverflow” etc are all useful and even more so when you are struggling to keep up in “class.” Bootcamps are a kick in the wallet, so you feel the pressure to learn and get it done the right way. I needed the feeling that if I didn’t show up and learn then I wasted the $$$ in a real bad way... Mosh importantly, learn by doing. Watch and read, then do.
Oh trust me... I'll be sanitizing the hell out of everything and ensuring I look at all potential attack vectors. The reason I have a use case for this is because I'm working on something live that leverages ajax, but don't want to necessarily show the user what options they have on the front end. So basically I'm hiding things on the server side that could easily be client code. I know that's still a bit fuzzy. I think I'm going to try and find some middle ground though that removes things like eval which are inherently more risky for xss and such. I'm open to suggestions.... I'm a network engineer by trade, development is just a self taught hobby.
Askee123, you seem to have forgotten to open some parentheses. Here, use these to open them: ( --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
syntax24, you seem to have forgotten to open some parentheses. Here, use these to open them: [ --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
parenthesescloserbot, you seem to have forgotten to close some parentheses. Here, let me close them for you: ) --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
parenthesescloserbot, you seem to have forgotten to close some parentheses. Here, let me close them for you: ] --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
parenthesescloserbot, you seem to have forgotten to open some parentheses. Here, use these to open them: ( --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
parenthesescloserbot, you seem to have forgotten to open some parentheses. Here, use these to open them: [ --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
parenthesescloserbot, you seem to have forgotten to open some parentheses. Here, use these to open them: ( --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
parenthesescloserbot, you seem to have forgotten to close some parentheses. Here, let me close them for you: ] --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
parenthesescloserbot, you seem to have forgotten to open some parentheses. Here, use these to open them: ( --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
syntax24, you seem to have forgotten to open some parentheses. Here, use these to open them: [ --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
There is one statement about the danger of missing to use `new` keyword. While that part is true, there's another statement that simply says don't use `new` keyword at all. &gt; new operator: Functions that are intended to be used with new (conventionally starting with a capital letter) should be avoided (don't define them) as they can cause all kinds of issues and complex bugs which are difficult to catch. Also on that functional object creation example (where you define methods inside the constructor) is less efficient as it needs to create those methods for each instance. In the prototype version there's a single instance of the method definition that's shared among instances. Overall the entire object creation section here is very opinionated (I guess that's what Douglas Crockford prefers) but should not be advertised as the perfect formula. --- Also, [the scope section](https://github.com/dwyl/Javascript-the-Good-Parts-notes#scope) is completely outdated, likely written before `const` and `let` were introduced. Augmenting existing prototypes is also not a good suggestion at all (`String.trim`, `Array.dim`) and should be avoided so we don't get another `flatten` vs `smoosh` joke.
Probably better to load/execute the script than run a string of raw code through eval - something like: https://stackoverflow.com/questions/3262749/how-can-i-dynamically-download-and-run-a-javascript-script-from-a-javascript-con
np!
syntax24, you seem to have forgotten to open some parentheses. Here, use these to open them: [ --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
syntax24, you seem to have forgotten to open some parentheses. Here, use these to open them: [ --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
syntax24, you seem to have forgotten to open some parentheses. Here, use these to open them: [ --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
reboot (:&lt; 
KitchenDutchDyslexic, you seem to have forgotten to close some parentheses. Here, let me close them for you: ) --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
KitchenDutchDyslexic, you seem to have forgotten to close some parentheses. Here, let me close them for you: ) --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
oops lol. fixed now
Exactly, you use the tool for the job. 
On mobile right now so I can't provide links but in latest versions of chrome, for of is already faster than forEach in many cases and never slower in others. Makes sense when you consider that forEach has the overhead of working with a function object, whereas for of uses inline code. So in my opinion, never use for...in, use forEach sparingly, prefer for...of. ForEach is also worse readability wise. 
Even then, most loops aren't a bottleneck and for of is already faster than forEach, so use for...of preferably and some optimized loop constructs only for the one or two loops where it makes a difference.
KitchenDutchDyslexic, you seem to have forgotten to close some parentheses. Here, let me close them for you: ) --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
Repeat
Repeat.
/r/softwaregore :)
fiuzzelage, you seem to have forgotten to open some parentheses. Here, use these to open them: ( --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)
I can get behind this, but at the same time I think there is nothing wrong with applying a pattern from the start, once more comfortable and experienced. I think a key thing to remember that being a developer isn't just about writing code, but also the thinking and planning of it. Laying down some broad strokes on paper, with some well placed boxes and apt names on them, can help from the start; especially around encapsulation and Single Responsibility. Using a pattern for patterns sake is definitely not the right way to go, but I wouldn't just write code I know I'm going to want to refactor to a pattern, if I have a good idea I'll need it before hand. The managing complexity point here though is the real MVP; more understanding and readability will help your maintainability.
No need to memorize them. I've been writing js for over 6 years now, I only know a couple. What you need is practice. Try to build a few example applications, then when you're done, compare your solution to some else's solution. Good examples are: tic-tac-toe, a calculator with an html interface, a music playing widget (see the &lt;audio&gt; tag) and stuff like that Also, learn to read MDN, it's Mozilla's JavaScript reference. Everything you'll ever want to know about any function can be found there.