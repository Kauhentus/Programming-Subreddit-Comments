Note as of node 0.10 I think it is process.nextTick will not do what you expect here. process.nextTick will add the call to the end of THIS call so in fact it will still block if you keep adding to the stack. You need to use setImmediate to be non blocking. See http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation for an explanation. Docs are unclear.
Hadn't used Ember before, so this was all new to me and I learned a LOT in a very short amount of time. The course is beautifully crafted and a lot of fun to take.
I'm running node 0.10.21 and tested his JavaScript promise code and it ran as expected, which was counting 1 to 10 with 250ms delays. Is that not what it was supposed to do? 
I have this implemented in a library of mine https://github.com/eborden/promiscuous/blob/master/lib/promiscuous.js#L324
Very javascript indeed
&gt; it requires JQuery. Is that bad? But removal of the dependency is on the roadmap. &gt; It's larger in filesize than Backbone, Marionette, Knockout, and Angular combined. I would also argue that it does more for you. What if it makes up for it by making the rest of your app smaller? I'm not saying that that is the case but it might be for larger apps, especially if you compare it with Backbone. &gt; It requires separate templates on the client to generate HTML (which is itself a template on the client). Which is completely convoluted. I'm not sure I understand what you are trying to say. That you cannot reuse server-side templates? &gt; It doesn't require dependency injection, which while allowing more "free form" development, also makes it easier for novices to shoot themselves (and their dev teammates) in the foot. It does have dependency injection, look up Ember.inject. But regardless, you are assuming that dependency injection is something that is required. It seems as if someone was saying that e.g. Haskell is a bad langauge because it does not have pointers or something. &gt; It doesn't solve any important problems Angular doesn't solve. Such as? I tried Ember in August 2012 and it was really confusing. I tried it again this April and it got a lot better. Recently, I've looked at it again and it seems pretty cool. I have a hunch that it will eventually emerge as the best framework. 
More Errors. More handling of more errors.
I don't think the benchmark is fair for Backbone. He is creating 200 todos in succession causing 200 sequential dom inserts which is not real world. A real world scenario is fetching a collection of 200 elements and rendering from there. In this case it's easy to create a document fragment that contains the markup for all 200 items then do a one time insert into the DOM. Overall I think that Om is a neat idea, especially using requestAnimationFrame to let the CPU breath, but I think the results from the tests are insignificant and aren't relative to real world scenarios.
I've wanted to use Sails for a while, but dislike that they use Socket.IO as the Websockets wrapper. If there was a really easy way to switch that to SockJS, I'd be using it in a heartbeat.
I don't understand, how do module systems provide the same benefits as MVC? They seem orthogonal to me. In my current Node app, I am using both Backbone and Browserify, and I don't know how I would do without either. (BTW, Browserify is working great, thanks!)
Hooray! I've been waiting for this.
I would just add that the reason for injecting all of your code is unit testing. With DI, managing your code and mocking it is easier.
Koa looks to be different than sails though. Sails is a full-fledged framework that emulates ones like rails. Koa looks like it's a microframework, something you use to build something like sails on, so something like Sinatra (or, you know, Express).
Hmm, I'd say the biggest disadvantage is the [insane hoops](http://sorcery.smugmug.com/2013/12/17/using-phantomjs-at-scale/) you have to jump through to get search engines to index your content.
I found this in one of the issues and it looks promising: https://github.com/balderdashy/sails/issues/945 Think they're still working on a bunch of other features (they're recently working on Associations which arguably is a lot more important than the websocket implementation.) Would probably help to +1 the issue though, since it'll mean you can use any websocket framework you want.
Working on implementing this now, though there is something I don't understand. If every object you create has to be assigned BaseClass's methods one at a time, isn't that just a *slightly* shorter way than appending methods directly to each new object? .factory('SubClass', function () { return { this.foo: function() { }, // do stuff this.bar: function() { }, // do other stuff this.name: 'name' } }); This still seems like more steps than having an actual prototype outside of Angular. Maybe it is but it just works inside the Angular methodology, or maybe I'm misunderstanding something about prototyping.
The (pseudo) code iterates through the scores array, adding up the values of each element in the array and storing them into the "sum" variable. It then takes the sum and divides it by the length of the array to get the average. Note: The length property returns the number of elements in the array.
Mouse events? Like: var elem = document.querySelector('#click-me'); elem.addEventListener('click', function (ev) { // handle the click event here }) or something more complicated? See also: [weaning yourself off jquery](http://substack.net/weaning_yourself_off_jquery) for the vanilla DOM counterparts to most of the stuff you might use jquery for. For templating just load a template library with `require()` and use its API. There are [plenty of transforms](https://github.com/substack/node-browserify#list-of-source-transforms) to help with that. I personally tend to just load vanilla HTML with [brfs](https://npmjs.org/package/brfs) and modify the content with css selectors using [hyperglue](https://npmjs.org/package/hyperglue) or [hyperspace](https://npmjs.org/package/hyperspace) if I have a realtime stream wired up. One of the big benefits of using node-style abstractions browser-side is that all these libraries work in [both the browser and the server](http://substack.net/shared_rendering_in_node_and_the_browser).
[This post](https://groups.google.com/d/msg/sockjs/lgzxVnlth54/NbQKNEAzB5cJ) on the SockJS Google Group provides a lot of the reasons.
Right, so Backbone doesn't do much more than let you write that as: 'click #click-me': function (ev) { // handle the click event here } When you're handling a lot of events, it's nice to have a more compact format. It's just a way to avoid writing boilerplate code. DRY. You could argue that it's not worth adopting a library like Backbone to avoid writing boilerplate code. But it's only like 1000 lines of JS, so I use it.
Been waiting for this since I saw it announced. Looks like I wont be sleeping much tonight.
I'm 93.45675% sure that the future of JavaScript MVC is going to be beautiful and awesome. Totally unbiased opinion though!
&gt; but how can you have MVC of a view itself? because there are parts of your front end application that, in fact, are not views but that you have been treating as views all this time even though its not appropriate to do so. A Model is the data itself. On the front end this typically is a Javascript Object that receives its data from a json response sent by the server. A Controller is where your business logic lives. It connects the data (model) and the presentation (view). A View is what your user interacts with. On the frontend the view part is rendered html, DOM manipulation, and form inputs. 
You're right, that's a better way to do it.
D3 makes my brain bleed.
Data-binds bro data-binds
Can you be more specific? Without any further context, I assume "native" to mean "without plugins." The `&lt;audio&gt;` and `&lt;video&gt;` HTML tags allow browsers that support them to play audio and video files without requiring java or flash or any additional plugins. You can use javascript APIs to interact with those files, once the page has loaded them. Here's a beginner-friendly article on the `&lt;video&gt;` tag: http://diveintohtml5.info/video.html
Your stuff must be so exciting
Thanks for catching that, edited
I highly doubt you'd want to launch a large application to live status with only a baseline user understanding of Backbone without doing proper JS optimizations. The example provided by the parent comment would also easily qualify as just a generic and basic optimization case regardless of the library, if any, that you're using.
Probably unrelated, but if you're using strict, you should maybe declare your variables with 'var'.
I should have mentioned in the post, my code is in coffeescript, I posted the javascript output as I know alot of people rage on CS. CS puts the var declarations at the top automatically. This issue is maddening though.
What does lead you assume that there is no module to avoid DRY? NPM is a big market, and you can find a lot of modules to avoid DRY. Here some for you: https://npmjs.org/package/on-off https://npmjs.org/package/delegate-dom https://npmjs.org/package/bind-key You can compose these into something handier, like this library does: https://npmjs.org/package/domquery Also there is github.com/component, which shares a lot of stuff with NPM.
note the remote url for the script being loaded: "...cloudfront.net/rum/bacon.min.js" someone was hungry/thirsty
all coders make mistakes here and there and, with more coders working on the same codebase, that chance goes up exponentially.
1000 lines is a bit much for just: module.exports = function (map) { Object.keys(map).forEach(function (key) { var elem = document.querySelector(key.split(' ')[1]); elem.addEventListener(key.split(' ')[0], map[key]); }); }; There are probably already plenty of modules on npm already for it.
Cool, I didn't know about those, thanks. But at this point we're agreed on principle that it's helpful to use some packages to reduce boilerplate and help you write code, and we're just talking about which ones are most useful. (From my point of view, Backbone is just another module.) Maybe what you and/or SubStack are saying is that rather than use one package that has most of what you need, you'd rather knit together a bunch of smaller modules in your own way. That is certainly the Node aesthetic, and I get that. I think that criticism is more relevant when leveled at an all-encompassing framework like Ember (which describes itself as “ambitious”) than it is when leveled at Backbone, which is a relatively small library (that doesn't even call itself a framework). Would you like Backbone better if it came in five separate modules—one each for events, models, collections, views, and routing/history? For that matter, would you like Underscore better if it came in separate modules? How many would you break it up into? I'm asking seriously, not rhetorically. Not trying to argue for my point of view here; I'm really trying to understand this philosophy. I'm a big fan of a set of loosely coupled, highly cohesive, maximally composable tools. At the same time, I don't see why every package has to be broken up absolutely as fine-grained as possible, and I do see some benefits to having somewhat coarser granularity in some cases. Thanks for your thoughts.
Right, but it gets you a lot more than that—and I find that I actually need most if not all of what it provides, so the 1000 lines pay off. (By the way, I'm not sure why you contrast Backbone with “npm modules”; Backbone *is* available as an npm module, and that's how I use it: https://npmjs.org/package/backbone) But more to the point, see my comment just now in reply to oakaz. I gather that you'd rather import several smaller modules than one larger one? What do you think is the right granularity for modules? Absolutely as small as possible? It seems to me that that has a limit, that there can be benefits to larger modules, and so there is a tradeoff. Maybe you agree with that and we're just debating where the tradeoff should be made, and you're pushing for smaller modules. That's cool, I just find myself surprised by how small you seem to push them, and I'd like to understand better how you think about this.
After I enabled *Enable Experimental JavaScript* over at *chrome://flags*, the "Generators (yield)" cell in the "current browser" [1] column turned green. If you hover that gray 'c' dot, you can see the code which was used to determine whether this feature is supported. [1] Chrome 33.0.1750.5 dev-m
Here is a rather simple rule I try to follow: A module should do one thing that can be used by more than one chunk of code. From this single rule it follows: 1. If you want to re-use a part of your module into a new one, you split off that separate part into a new module. 2. If you want to create a new module, define well the one thing it does (by writing its readme) then do it. Don't worry about splitting it up, if it needs to be split up, you'll notice soon. Alternatively, you'll notice it when you need to do #1. Worst case, you'll notice it when you get to #3 3. If you get cyclic dependencies, that is an indicator that one of your modules is doing too much. 
`x = x || {}` means if x doesn't exist, assign a new empty object to it. If that was your question. I'm not really sure if it was.
They are setting the global namespace of the objects to be BACON. http://elegantcode.com/2011/01/26/basic-javascript-part-8-namespaces/
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch
 Basically it sounds like what you want is covered here: http://www.w3schools.com/js/js_switch.asp var mon = 'abr',numberOfDays; switch(mon) { case 'jan': numberOfDays = 31; break; ... } console.log(numberOfDays);
I'm not sure immutability is going to help as much in JavaScript as it does in other languages, performance wise. JavaScript runs a single-threaded event loop, so immutability doesn't matter at all with asynchronicity like it would in a multi-threaded app. Not to mention the JavaScript GC isn't quite as efficient at times, and it will have to clean up those dropped references. I don't know any of this for a fact, but I'm suspicious.
&gt; I read in order to make ES6 work in Chrome need to enable the flags and also **define the version in your script tag**. Out of curiousity, where did you read this re: Chrome? Are you sure you're not thinking of Firefox? What version of chrome are you using? I am using Chrome Version 32.0.1700.68 beta and Chromium Version 31.0.1650.63. Enabling "Enable Experimental JavaScript" in chrome://flags lets me use generators in both. Note that Chrome's [implementation](http://code.google.com/p/v8/issues/detail?id=2355) tries to stick to the (current) [ES6 spec](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts), whereas Firefox's [current implementation does not](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators). The upshot for you is: function foo(x) { Needs to be: function* foo(x) { as per the grammar in the spec. Otherwise you should get a syntax error for trying to use *yield* outside of a generator. Note also, as per the spec, regarding *.next()*: &gt; The function returns an object that conforms to the IteratorResult interface. If a previous call to the next method of an Iterator has returned an IteratorResult object whose done property is true, then all subsequent calls to the next method of that object must also return an IteratorResult object whose done property is true, ...so you will get back an object (*{value: 4, done: false}* in this case) as opposed to a plain value like in Firefox currently. 
I think it's something that should be introduced early, but by no means have a huge amount of emphasis. It's a very useful tool for many, but there are some that just won't ever use it for various reasons. "Being a good programmer" doesn't require you to use TDD, though I would argue that using TDD helps you be a better programmer. At the least, it is a demonstration of the thought processes I describe which is what I think makes a great programmer. I'm willing to bet a lot of money that the same approach used by TDD is what most of the world's excellent programmers use: to tackle the problem piece by piece; identify the pieces, implement it bit by bit to ensure you aren't doing too much. e: spelling
Literally as I describe in my penultimate paragraph. Identify the first interesting thing (test) about your requirement. What is the very first thing you expect from your system? Write a test for it. Does that test fail? Does it fail as you would expect it to? (i.e. check it isn't an unexpected exception or error) If it does, good. Now you can implement the thing that is needed to make that test pass. Then you can write the next test. And so on.
I thought everyone says Backbone isn't a MVC framework?
Because it's similar to "beacon" and because someone thought it would be funny.
rum = real user monitoring
Yep--that's part of why claiming to be 'the future' is a bit odd. 
Thanks. As someone stuck in the middle of trying to wrap my head fully around both of these, I really appreciate your effort.
I'm quite new to Express as it is, so I can't actually see much difference. Anyone have a quick comparison list?
var month=prompt("Please enter your Month","Jan"), days = 30; switch(month.toLowerCase()) { case ''jan": case "mar": days = 31; break; case "feb": days = 28; break; default: days = 30; } return days;
Or, they could just be like me and be a really bad speller.
How is this different from the dirty checking that Angular does in its ModelView update cycle? React does diffing on the DOM, kind of like TogetherJS?
Or they could be foreigners like me and simply think that beacon and bacon is the same thing ;)
I recently joined an Ember team and deliberately put off learning it because I heard you had this course coming up. I'll be taking it over the winter break and will be more than happy to give you my feedback then! Been holding onto a 3 month gift card for just such an occasion!
Some coders aren't lazy enough. 
I would use the addEventListener method to attach events.
When you read the 'why use this' of all these tools/frameworks, they all appear to do the same things. It is only when you use them that you know which one suits your coding philosophy and style better. Reading the 'why use this' can only help you filter out the unwanted options but it can (almost) never really help you gauge which one is the best for you
Props for such a detailed response. It's people like you who set out industry apart.
There are many demarcation issues that come up when modules try to do many unrelated things instead of doing exactly one thing well: * turf wars - what belongs and what doesn't belong? In your other post you mention underscore, which has [extremely arbitrary ideas about belongs in core](https://github.com/jashkenas/underscore/search?q=%22feel+free+to+mixin%22&amp;type=Issues). There's `_.template()` but no `_.maxBy()`. The steady state for modules is to do one thing or to do every possible thing. * discoverability - It's really hard to find and reuse code if it's buried in some big collection of utilities. The other stuff will either get in your way or you won't even discover that the big module does the thing you want in the first place because it doesn't come up in the `npm search` or github search output. * hard to contribute - the bigger a project becomes, the harder it gets for newcomers to submit meaningful contributions. There is more process, more surface area, and more opportunity to break things when projects attain a certain scale. * granular versioning - If you use a grab bag utility library that lumps a bunch of features together, the [semantic versioning](http://semver.org/) becomes less useful. Did that breaking change in a major version bump only affect some function you weren't even using? You've got to dive in and inspect the changelog yourself. With smaller modules, it's much more clear what you need to update when you upgrade a library version. For some more context, here's how these arguments have played out before: https://github.com/substack/node-mkdirp/issues/17
React does diffing in it's virtual representation of the DOM before it flushes out changes to the real DOM. I've only looked briefly at TogetherJS, but it doesn't appear to be quite the same.
Backbone is barely a framework. It is much much smaller than it appears at first. Using React for views fixes about 95% of the performance issue shown. React is new so people are still coming to terms with it. But using Backbone in this way is perfectly acceptable. It is very flexible. The problem with this blog post is that it distracted everyone with DOM performance due to how kickass React is. But the topic was supposed to be Om and immutability. It is still a good point just wasn't very even in focus. So unless the reader is familiar with all the concepts, it is going to be very prone to misunderstandings.
get an old machine, bung ubuntu on it then open up a command line and type: sudo apt-get install npm sudo npm install -g sails you'll thank me :)
I actually ended up setting a VM up to run sails :) but went to bed after setting up the VM and never got round to touching sails again haha. Maybe I should give it a go...
As someone who has been doing Ember since it was Sproutcore I can agree to the learning curve part.
This doesn't explain 90% of Javascript articles/tutorials being about the same things all over again.
I can certainly see the merits of the small module approach used by SubStack. What's missing for me is how to get started using this method as a beginner. I don't have the knowledge to know which modules to pick from npm. I don't know which are well written or even what to look for. If I pick a framework or library I don't have to spend hours searching npm and I have some assurances that the features provided are designed to work well together (or at least better than I could manage). How do you recommend a beginner gets started finding good and appropriate modules for a web application from npm?
Count Mediaelement.js as well useful for playing audio (and video) with Flash and Silverlight fallbacks. http://mediaelementjs.com/ 
Yess ,Thanks
That depends on what you're trying to build, but generally: start very small and go search for small things as you need them. For example, you could start with a simple http server: var http = require('http'); var server = http.createServer(function (req, res) { if (req.url === '/') res.end('beep boop\n'); }); server.listen(8000); and then notice that you need to serve static files too. You could then search npm for `static web server` and maybe after poking at some stuff you decide to use [ecstatic](https://npmjs.org/package/ecstatic): var http = require('http'); var ecstatic = require('ecstatic')(__dirname + '/static'); var server = http.createServer(function (req, res) { if (req.url === '/') res.end('beep boop\n') else ecstatic(req, res) }); server.listen(8000); If that goes well, the next time you need to serve some static files, you already have a go-to module to do this job. Repeat, building up your application piece by piece as you need more functionality.
This is a fantastic reply; thank you for taking the time and explaining things so well. Where is your blog? :)
Thanks for the reply. The example kind of illustrates my point. If I search "static web server" on npm, 'ecstatic' is on page 10 of the results! Sure there are some suitable modules on page one, but ecstatic might be the best and most actively maintained. But without experience in the npm landscape I don't know this and paging through over 200 results I start to feel lost quite quickly!
It can be helpful to follow people whose code you like on github and twitter and see how they do things. It's also really useful to ask questions on irc. [nodeschool](http://nodeschool.io/) is good for picking up the basics and [raynos has been busy](https://github.com/Raynos/http-framework) writing a guide for how to compose lots of tiny modules with a huge number of examples.
Common issues means one should do everything he doesn't understand. Maybe first one should read and learn? As for reading, we see plenty of same articles floating around and appaering every other day. I am offended, because I can't find quality resource on Javascript as all of them throw the same issues, the same ideas, the same common problems. Maybe it's enough for now? One more thing. Writing about closures, anonymous functions sound really cool but articles seem not to show the usage of it. I get it, it's cool feature, yeah great and so what..? To find real usage of them I had to experiment a lot. To become proeficient using them I had to experience a lot. Why not throw these examples in? And for gods sake, how can every article recommend JSLint or JSHint :) it's not needed if you're not writing with your feet. Please do not take any offense. I want to make Javascript world a better place and articles about the same five issues are really enraging me.
Agreed - I think that's the best approach. As an avid follower of your code and ideas I think that's a good start ;-) OK I'm off to start making things out of small pieces!
I removed the specialized script tag and changed the syntax it works. I got that syntax from a tutorial I was reading and assumed it was correct. When I got the initial error is when I assumed I needed to add the specified script tag per another recommendation I read ........digging my self a hole. 
here's one. just haven't written a thorough explanation. https://github.com/koajs/koajs.com/issues/19
I think that one mistake a lot of people make is using something without reading it. If you're going to depend on something, it's worth at least skimming it so you understand it. This also biases me toward small modules. It's a lot easier to read ecstatic than it is to read express. You can try several options -- in fact, you should. Doing so, analyzing trade-offs is a key skill for programmers. And if modules are small and interfaces obvious or simple, then if you make the wrong decision, it's relatively easy to excise and fix.
One thing you can do is grep the command-line npm search to filter it. I've done a lot of `npm search foo | grep -v express | grep -v somethingelseunrelated`.
Thanks, these are good points. Let me add two thoughts in reply that maybe you will find useful: First, I agree that a module should do one thing well. But it can be hard to define “one thing”. Some cases are clear: Underscore is a grab bag. Others are not. Is mkdirp “one thing”? Or is it a part of something, and what exactly? Underscore is more than one thing, but how many things is it, and where would you draw the lines? Maybe you would argue that Backbone is more than one thing. How many things is it? Are Backbone Models and Collections one thing together, or are they two things? What about support for relational modeling, having nested/associated models? Should that be a part of the core Model, or not? (For the record, jashkenas has always rejected this, and so it is left to other modules on top of Backbone.) What about a test framework and an assertion library? One thing together, or two separate things? It takes many years of experience to build up good intuition about the answers to these questions, and even then reasonable people can disagree in some cases. If you, James, want to promote the idea of “one thing”, I think it would help if you also try to articulate how you decide where the boundaries are, even if we agree in principle on finding them. Second, I think there are some benefits to larger or more integrated modules that put pressure in the other direction, which is why I say there can be a tradeoff. I don't have this fully articulated, but here are some of the things I'm thinking: * There is overhead to the developer in adopting each package. You have to search for it, evaluate whether it meets your needs and whether it's well-designed, compare alternatives, try to figure out which ones are still supported, etc. Yes, it's easier to evaluate a smaller package. But there is still overhead for each one—cognitive load, and time spent—that is not directly proportional to the size of the package. * There can be benefits to integration, if a module pulls together *related* functions. Again, look at Backbone. Its Models and Collections are designed to work together. Even if you were going to split Backbone into smaller modules, there would be an argument for keeping those two together, even though they could theoretically be separated. * When using multiple smaller modules, there is typically a bit of glue code you have to write yourself to get them to work together. You may not consider this a big deal, but for my part, I prefer to write as little code as possible. For all the problems with “frameworks”, they do have the advantage of letting you write just the code you really care about, with no plumbing, and I think that is why they have an enduring appeal. * There can be benefits to consistency even in arbitrary choices about API design or style. I would rather than all of my fs utilities work the same way and have the same style, and that might not happen if they come from different packages from different developers. When I started on Node several months ago, I had to pull together like 10 different packages just to create a simple webapp with a database, some HTML templates, some client-side models and rendering, and tests. This is a steep learning curve for a newcomer. I consider myself a moderately experienced developer, and I wasn't too fazed by the challenge, but someone less experienced might find it daunting. None of this is an argument for “grab bags”, or mashups of unrelated functionality. But it is an argument for modules that integrate related functionality which could theoretically be separate, and it is at least an explanation of why frameworks have appeal. Summary: * Even if we agree on “one thing”, finding the right demarcation lines takes intuition built from experience, and is a bit of an art. * There are benefits to integrating related pieces of functionality into larger modules even if they could in theory be separated. Hope that's helpful. Thanks again for your time and your thoughts.
Sorry, I meant like the article suggests which is using Backbone with React. I'm curious to see how well this works now, think I'll give it a whirl over the Christmas break
I used +
This sounds like a homework question.
Yehuda Katz gives a good talk about this: http://www.youtube.com/watch?v=s1dhXamEAKQ
With /u/codersaurus in that they should probably be a service or factory; which just depends on usage. Further, I like to organize them with namespacing, which doesn't provide any additional benefits within Angular, but helps me to keep things straight: // app.js var app = angular.module('app', []); // service.js var services = angular.module('app.service', []); // foo.service.js var services = angular.module('app.service'), foo = services.service('app.service.foo', []); FYI there is also a /r/AngularJS sub!
This [list](https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#professional-development) has some Javascript books that should be helpful. For just one book to read Douglas Crockford's [Javascript the Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/) is often recommended. Check out [r/LearnJavascript](http://reddit.com/r/LearnJavascript) and [r/learnprogramming](http://www.reddit.com/r/learnprogramming) for other resources too.
I wouldn't recommend reading Crockford's book until you have a good understanding of Javascript. It's difficult to understand the good from the bad parts until you have worked with both. At least in my experience anyway.
The reddit title is disingenuous; the _full_ title is: &gt; The Future of JavaScript MVC Frameworks: Introducing Om If you go into this expecting a well-thought out discussion of current MVC frameworks with an eye towards the future, then you'd be woefully disappointed. The article doesn't mention AngularJS, Ember, or any other similar framework except for Backbone -- which might seem odd, until you realize that the entire article was written to shoot down Backbone in an attempt to fluff-up Om. I despise these types of articles. If your project is really that good, there should be no need to try and discredit the other guy(s). Sure, tell us _how_ and _why_ your preferred choice is different and better, and feel free to draw parallels and differences with other frameworks, but to put a bullseye on a single project and then try and deconstruct it by piecemeal comparing it to whatever your preferred choice is, just comes across as juvenile and borderline intellectually dishonest. You can cherry-pick facts that support your arguments for practically anything, and it really doesn't accomplish anything worthwhile other than working as a vehicle for propaganda.
Fair enough. That's why I included the list of free books too. That book does seem to be the most recommended though. Any suggestions on a better first book?
The book I would have recommended is Eloquent Javascript, but that's on your list ; ) . I believe a new version is being worked on. I do agree that Crockford's book is most recommended, it's a really great book.
So OP there you go try Eloquent Javascript and then maybe Javascript the Good Parts. Thanks chapStick for the help!
Used that recently, really simple to use.
Are you a beginner programmer, or just a beginner at Javascript? If the latter, *[Javascript: The Definitive Guide](http://shop.oreilly.com/product/9780596805531.do)* is a great introduction and reference to the language. Also, what do you aim to do with Javascript? Enhance mostly static web pages? Write front-end browser apps? Write back-end server apps? 
Hey Paragonbliss, Adam here from Code School, very interesting comment! We've had a lot of debate over the way we released the course, and your comment hits close to some of our biggest concerns. The actual course right now is 60 minutes of video (longer than our average course). After we release the second half, there will be another 9 videos, and will probably be another 50(ish) minutes of video. We've had a lot of talk about whether we should make the course into 2 parts, or if it should be one longer than average course. Since the remaining content will pick up where the first part leaves off (with the same sample application), we went with 1 longer course. Hope that clears things up! If you're still disappointed and want a refund, please let us know on the Code School support forums and we'll be more than happy to make things right!
Dunno, don't know LiveReload and the information to what can do with LiveReload is poor. There is a demo here showing pourbico http://www.youtube.com/watch?v=K48PKli7TUM
The trick is simplified state management due to use of persistent and immutable data structures and declarative UI specifications. There's nothing specific to ClojureScript.
I recently used howler.js which is still very buggy but had very simple syntax and good compatibility fallbacks for sprite-style audio
So far it's a great great course, i guess i was just a bit surprised, it just stopped abruptly and i couldn't continue on. However, it does say it comes out in January, so i hope it will still come out during the duration of the month i purchased
You never pass the result into the `compare()` function. You should generate the computer choices and user choices first, then compare them by calling the compare function. var userChoice = prompt("Do you choose rock, paper, or scissors?"); var computerChoice=Math.random(); if(computerChoice&lt;0.34) {computerChoice="rock";} else if(computerchoice &lt;=0.67) {computerChoice="paper";} else {computerChoice="scissors";} compare(userChoice,computerChoice); function compare(userChoice,computerChoice){ if(userChoice==computerChoice) {console.log("The result is a tie!");} //first check if there was a tie //add the rest of the win conditions }
Would you have read it if the title was "Introducing Om: Clojurescript Based MVC Framework"?
No offence taken. I think you are simply seeing the symptoms of a language maturing. Sure JavaScript has been around for a while, but it wasn't until recently it was being taken seriously as a language. Until now, you would see lots of articles like "Ooh, looky, JS can be used for more cool stuff than simply validating form inputs client-side" to articles about "Wow, jQuery is awesome" to "I &lt;3 Node.js, here's why" to "Yay, client-side frameworks. Backbone.js is the bees knees". With all this development, we are reaching the stage where a lot of new programmers are entering the web dev world and their first projects are entirely focused around JavaScript. So, you end up getting a lot of articles like this. I remember PHP going through that process as well. Just the way it is. :)
Most of these are not JavaScript Audio Libraries but just Flash wrappers.
I had to take a test like this once. Was told to create a modal window from scratch with plain js. 
no worky on firefox, uses lots of webkit specific stuff. otherwise pretty neat, though it moves a bit too fast with the mouse and it makes you a bit dizzy
Jesus that projection is disorienting. Cool project!
You can format things on reddit as "code" so that they show up nice and readable. this is a "code block". you just need to have a line break before it and to have exactly 4 spaces at the start of each code line. Second: You've got everything pretty close to working here. JavaScript allows you to do neat things like assign a function to a variable. In the line var compare = function (choice1,choice2) ... What you are doing here is telling javascript to store a "nameless" function into a variable. It is "nameless" because functions can also be called by a name which you assign by instead writing it like this... function compare(choice1,choice2) ... See here how there is no "var compare = " ? It is just smiply function [name_of_function](arguments...){ } Without the [] brackets of course. Now I explain that difference not because the way you're doing it wont work... but rather just to show you the difference between the two styles of doing so. Programmers use "nameless" functions for things a bit more structurally complex than a single function comparing two strings. They are a great way to organize and structure, they provide ways of creating dynamic functions, event handlers, and all sorts of other neat stuff. For learning javascript? You should start off by using the normal named function syntax till you're more clear on everything! The last bit of info on functions: when you write a function it simply needs to be enclosed by the { and } brackets. function Compare(choiceA, choiceB){ if(choiceA == choiceB){ console.log("The result is a tie!"); } } The function can be written on a single line it just needs to have an opening { after the arguments and a closing }. Pretty much like the if/then statements use. Now that you hopefully understand the functions a little bit better you can write and play with more of them and then move onto the more complex ways of using functions.
I agree, If you have time, read this book, Flanagan's book is an comprehensive book that will teach you all you need to know to start a JavaScript career, don't be afraid of the size of the book, is divided in parts, and the most important part of this book is the first one "Core JavaScript", Part II is really good too, that talks about Client-Side JavaScript (JavaScript for the browser or browser like environments), part III is reference (you can skip that and reviewed later), though I'd recommend you to get it for some e-reader (I use kindle, the book is really big, and I found big book uncomfortable), the first section 
An objective title is always preferred, whether I read it or not :)
Am I supposed to be inside the Earth?
http://games.usvsth3m.com/javascript-under-pressure/
Very cool, I like the way it comes with source-map support. What could be handy is some more getting-started info and links to relevant jison documentation. I've had an urge to try to hack on some DSL stuff with jison before but it is hard to get your first few attempts working.
http://mislav.uniqpath.com/poignant-guide/images/the.foxes-4g.png
If it's for a non-junior JS position, you might consider using this: http://chopchopjs.com/. I created it out of the coding tests that I used during interviews. I'd recommend making it "open web" so that they feel free to google around for help on the more difficult/trivial puzzles.
You can see all of the questions here: https://github.com/joelbirchler/chopchopjs/tree/gh-pages/puzzles Example: https://github.com/joelbirchler/chopchopjs/blob/gh-pages/puzzles/array-of-arguments.json
Well, it's considered to be used by people already familiar with Jison but those who don't like to do same routine operations when creating parser (just fork&amp;go). But you're right, some explanation and article could be added for better understanding. Will work on this later. So far you can look at https://hacks.mozilla.org/2013/05/compiling-to-javascript-and-debugging-with-source-maps/ that this repo was inspired by (as said on beginning of it's description).
Let them use Google, you cannot expect them to know and remember every bit of JS. Make them create something simple, yet testing many skills - DOM manipulation, AJAX, CSS, HTML and so on. For example "get me ten selected posts from a selected Google+ user, displaying them in a responsive grid", or something like that. Add some theoretical and practical questions, for example: - What are CSS preprocessors? (There are many so the candidate won't know them all but she should get the idea) - What design patterns in OO JS do you know? - Is a function in JS a variable? Is it a class? Is there such a concept as class in JS? - How can you declare objects in JS? How can you perform inheritance? - A website you are taking care of does not work. What do you do? (This is a great question because the candidate will have to think about many practical scenarios and come up with her own questions about the situation. I is almost like an RPG where you are the game master :-)) - What is your opinion, if any, on CoffeeScript? - What code editor do you like and why?
I think the closing thoughts are off: &gt; I don't think there is much of a future in the current crop of JavaScript MVCs It is possible for the current set to keep their API and change how they work under the hood to incorporate these optimizations.
These are my "cliff notes" of things to ask candidates about. also see these questions: [About to face an interview for lead JS engineer, what should I must know?](http://www.reddit.com/r/javascript/comments/quhjp/about_to_face_an_interview_for_lead_js_engineer/) [What are your vanilla JavaScript knowledge standards that every JS developer should know?](http://www.reddit.com/r/javascript/comments/1jw96t/what_are_your_vanilla_javascript_knowledge/) [What kind of questions can I expect on JavaScript interview?](http://www.reddit.com/r/javascript/comments/17d7xv/what_kind_of_questions_can_i_expect_on_javascript/) HTML * inputs - select, checkbox, textbox, textarea, radio (password,file,button) * label * HR - horizontal rule * BR vs P * UL vs OL * TH * span vs div CSS * selectors * padding vs margin * border shorthand * border width shorthand * px vs em vs % * common font props * specificity JS * alert/confirm/prompt * loop types - for vs while * variable declaration / scope * this keyword * Array/Object declaration * Array vs Object (behavior, looping) * closure * event bubbling * ternary operators jQuery * selectors - tags, classes, id, attributes, pseudo * chaining * traversing * filter vs find * append vs appendTo * attr vs prop * hide/show/toggle * css * each * events * is * empty vs remove 
I got bored at work... (Friday before vacation!) http://jsfiddle.net/f9V25/ It probably has some inefficiencies, but I don't really care.
&gt; Let them use Google, you cannot expect them to know and remember every bit of JS. Could not agree more. Fuck people with their paper tests. 
Awesome! I'll be using it for my lectures in computer science for undergraduate students
While I've never used it myself I am aware of the jquery libraries for draggable and dropable: http://api.jqueryui.com/droppable/. You could do something like that, and when an item is dropped you could add it to a list item you have associated with each field in the background.
For a technical exercise, I like this one: Given a tree-like data structure that represents a menu, develop a javascript algorithm that will render that menu. The developer should immediately land on a recursive function, you should ask how they could do this without recursion. This should take about 15 minutes, and I would be very concerned if it took longer than 30. For a design exercise: Let's say that you--the interviewee--are leading a small development team tasked with putting together an asset manager for our customers. A user needs to be able to upload files and easily retrieve them using the interface, but it's up to you to decide how they do that. I--the interviewer--is the stakeholder, and I can answer any questions you might have about the system. Have the nature of the system clear in your mind, but you can make stuff up about it if they ask you a curveball. But the goal is for the developer to open up his head and start thinking out loud to you. First, this gives them a chance to make design decisions and you can make them defend those positions. Why Ember and not Angular? Why not straight-up JS? How will you test this? Second, this should give you a sense of what "level" the developer can think coherently about a user's problems, interaction models, and so forth. If they talk about what libraries they would use and in what way, they're way closer to a junior developer. If they ask a lot of questions about the nature of the files, how technical their user base is, how many files are likely to be stored, they're able to abstract away implementation details in favor of providing a good user experience. Lastly, it also gives you a little insight about how they work with others, especially other people they don't know very well. If they spend a lot of time grinding away on this idea quietly, maybe they aren't used to collaborative problem-solving. If they throw out a ton of ideas looking for design feedback, they might be fishing for approval rather than trying to solve the problem in the best way they can think of.
Check out this js utility: http://alogicalparadox.com/drag.js/
The most frustrating thing about this is that Angular is a Google sponsored project. Talk about mixed messages.
At that point, you just need to be honest and ask "what do you mean by 'modal window'. I had no idea what it meant either, but understand the problem 100% now that it went from 'modal window' to 'console dialog'. Don't let semantics get in the way of nailing an interview.
https://github.com/darcyclarke/Front-end-Developer-Interview-Questions I highly recommend this for covering all bases. 
Only good advice in thread. 
Probably a lot of menial html/text changes, low level bug fixes, and small css tweaks. All the boring stuff that senior developers don't want to do. 
Clockwise starting at midnight. 
Amm. Is it "alert()" function?
I consider myself a junior front end developer (just over a year doing it) and I have experience with css animation and hardware accelerated techniques as well as developing single page apps using angular. I'm often in way over my head and have wished for a company that thought of junior developers the way you described. Seems like companies just pick out popular projects/tools and expect you to have serious experience with them. Its hard out there starting out.
Don't forget to step away from the technical for 10-15 minutes, you will likely be spending more time with this person over the coming years than your family &amp; friends. Ask things like what does he do for fun, try to get common ground and see if you can have a normal conversation (taking into account they will likely be nervous) Code can be taught, a bad attitude, or someone you just cant get along with is a much bigger issue.
Falafel's aren't similar to burritos. The naming convention is flawed. I'm getting a gyro.
TReBLe is how I usually remember it. 
This is fine if you're interviewing for a job working on a "traditional" website which uses Javascript for enrichment, these questions aren't in depth enough for a web app developer though. This really is the basics.
That was fun, I noped out on the hieroglyphics though, it's too late for that stuff
In my opinion, above all it's about enthusiasm and the ability/desire to learn more. What you actually end up doing depends largely on your employer but you should be constantly learning, pairing and challenging your current skillset. Certainly not the senior developers bitch as slackmaster suggested.
For facts, Google is everyone's bitch. Don't worry about that. To paraphrase Ben Franklin - Never memorize something that you can look up. I'm a fan of behavioral interviewing. Don't ask _how they would do something_, but instead ask _what they have done_. Use the interview as an opportunity to learn something that you don't know. You'll quickly know if the person has done anything complex and does s/he know it well enough to explain it to you and answer technical questions. In my experience, this approach is much more successful at identifying people that not only know how to do something, but it also helps to identify those with good communication skills. It makes for a much more enjoyable interview overall. As Joel would say: Hire smart people. They can learn.
Thanks for insight! I didn't see this issue through this perspective :)
I'm not sure I am totally understanding. Why would you want to use require and browserify ever in the same project? You should never have multiple loaders.
Dumb question, but how will you, as a back end dev, know if a front end dev is qualified?
Great project dude! A well deserved star.
No. I couldn't do any of it but that's what was asked of me. I tend not to say "I can't" when asked if I can get something done. If it wasn't for google, I don't know where I would be in this life. I'm still struggling every day but it's true, the fastest way to learn how to swim is to jump in. Helps to have some lifeguards on duty in the form of a patient senior dev on the team. Still looking for one of those so if anyone out there wants to show an up and comer the ropes...
For last few months I've been implement a DOM-based templating engine built on top of the Handlebars runtime. Completely agnostic to any frameworks and other libraries, it even makes reactive templating with Backbone.js a breeze. With the latest couple of commits, the project is finally 100% stable and implements all the features I wanted. There is still plenty of progress to be made though. The project is currently being used for one major client project and has improved development ten-fold.
Where I work front end devs are still expected to be engineers. From your stance, I wouldn't ask them any questions that specifically relate to the back end nor ask them anything related to specific front end abilities that you wouldn't be able to assess a good answer to anyway. However you can still ask them engineering questions that envelope both your roles. For example: * What's your experience with version control? (then dig deeper) * What's your experience with command line tools and shell scripting? (give examples) * Maybe a badic data structure and algorithm question (bonus for analyzing efficiency) * How do you structure and organize code? * Ask about what they like about OO and/or FP * Ask about testing in general (see if they talk about just unit testing or also other kinds, see if they're realistic about coverage) * Ask about using RESTful APIs (see how detailed they get) * Ask about cool tools, frameworks, challenges (again, see how detailed they answer) * Ask about caching (you can get a wide variety of answers and depth from this one) You get the idea. If you're just looking for an HTML/CSS monkey none of this applies, but if you're looking for a Jaascript engineer then you'll be able to learn all you need to know from these questions and you can assume they have the easier stuff down or can learn it quickly. 
A modal window in UI terms is a window that blocks user interaction with the application until it is dismissed. The `alert()` function dialog is the perfect example of this, though that's probably not what the interviewer wants. 
So 2001
I went into a front end development job straight after college and was (and still am after a little under a year and a half) working on all aspects of rich web apps using Backbone, Handlebars and Require. After a short while I also began writing unit, integration and acceptance tests for my code, and was always involved in UX discussions and framework analysis/comparison from the very start. I've learned a massive amount and love it.
Asking a question to drill down into requirements is the best thing you can do.
I like to have them start by drawing a navigation bar on the white board and asking them to write the markup and css. This allows me to quickly gauge their basic html/css skills and will open up possible conversations about float versus inline-block or maybe table-cell layouts. Generally I am looking for the typical ul/li but I am not opposed to other markup if they explain why. Then I ask them to add menus that appear when they hover over one of the navigation item. This will allow you to see if they grasp relative and absolute positioning as well as pixels versus percent, etc. Then I ask them to remove the hover and implement a touch device friendly version. Here they should transition to using javascript to deal with the necessary event handlers (jquery is ok as I don't really mind jquerys "on" implementation). I like interviewees who optimize with event delegation or at least acknowledge when their jquery is attaching multiple event handlers. I find this to be a good way to kick off white boarding because it represents a simple progression in skill level that allows me to gracefully bail out at any time. If they answer this question extremely well then I may be satisfied with ignoring the white board altogether and just discussing more interesting frontend topics for the rest of the interview.
DOM-based templating is a simple enhancement for most MVC frameworks and the fact that some people are still doing string manipulation is worrying. The biggest advantage is the ability to update a single node in place (think the username instead of the whole view). This has a huge performance improvement overall and also circumvents that odd behaviour of things like losing context when wiping out the whole DOM tree. We can also build some really cool things on top of this since I'm emitting events each time something is created. Data binding also becomes 100x easier, since you no longer need to hook up manual listeners. Just set the subscribe and unsubscribe function and the template handles the rest. There goes a ton of boilerplate code in most Backbone.js projects. Edit: Punctuation
What do you need the candidate to do in the job? Do you want someone you can work with or are you happy to work with a spode that you have to fight the urge to blind with your thumb every working minute of the day? You need to see if they're technically capable of the work you need them to do, and find out if you can work together, for me, this is key. I like to find out what their opinion is on whats going to be the next dominant/capable technology in the field... What are they thinking in the field they work in?
Wanted to just throw out how I am currently doing things and would love to hear your thoughts. 1. Each individual component on the page is a Backbone.View 2. Each view owns a template 3. The view renders the template and modifies this.$el.html to be the template string 4. A post render method fires after render that caches dom elements i need to use later by doing jQuery selections and assigning them to instance variables. It also runs an addListeners function where i setup my "this.listenTo" subscriptions for various model or global change events. 5. Event listeners or subscription triggers may lead to situations where I access those cached dom elements and manipulate their look by adding classes or changing their text 6. Each view is compact and only holds enough logic that makes sense EDIT: For my templates I am using precompiled handlebars For me this pattern is tried and tested and works well especially when a master view region creates multiple views and delegates events between them. What are your opinions on where this method lacks vs. DOM based templating and data binding?
With browserify, you need to build every time you make a change, no? You could accomplish that with a supervise, but with this there is no build necessary until you push to a production environment. I built it for myself to make development as simple as possible. Obviously it's not for every situation, but I found it helpful.
That's not a dumb question. I was going to reply to OP with "don't assume you're smarter than they are."
I'd love to see an example of one of your views or the base view that handles this sort of behaviour. Maybe we could hit out something awesome. Anyway, traversing the DOM unnecessarily whenever you need to cache elements seems more expensive than it needs to be when using something that is already DOM nodes and has direct references to the correct node. In that aspect it helps decouple the structure from the view too. I'd have to see step 4 in action to understand how you are actually caching. It sounds like you might be checking the existence of the cached DOM object and reinserting if it exists? In this case, your still rebuilding the DOM. DOM-based templates on the other hand only update parts that change. Also, you no longer need to set up `listenTo` calls since the template will listen for you. What I've found I do with this too is that every view has it's own "view model", where I store things like class name changes.
yeah, i'm not surprised that some companies would hire you with a lower title (and lower pay scale) and then throw full-scale work at you. my description is more what i would hire a junior developer for, if i had my choice. those are the things i would want to have someone else deal with ;)
Where I work you would need to still have a very solid understanding of HTML/CSS, and would be doing a lot of layout/templating, maybe content loading into a CMS where the content is complex. You also would need to have a decent understanding of JavaScript and jQuery, enough to do basic animations, or utilize jQuery plugins to get the desired functionality. Basically, given the architecture, design and project overview, a Junior FE Developer where I work should be able to create entire templates from scratch that implement the design and functionality as given in tech specs, wireframes or PSDs (or all of the above). Now, that doesn't mean the Junior wouldn't be expected to have questions and need help from time to time, particularly with more advanced portions of an interface. As a more senior FE developer, I will frequently sit with and assist the junior devs with portions of their code, help answer questions, and make it clear that any question is worth asking by always being willing to both answer the question and (if desired) give a brief overview of "why" I am answering it that way so they have a better understanding of the reasons behind doing things a certain way. (I personally believe part of the job of a senior dev is to assist junior devs to learn more and grow.) We definitely challenge our junior devs, we will give them what is in effect small apps to build (or rebuild) in JavaScript - as a relatively junior dev one of my first really challenging projects was to take a 7 panel flash "style guide" that asked questions and then gave a final "result" based on the questions and redo it using JavaScript. I learned a ton doing that, and while looking back now I see a lot of things I would do differently/better, those types of challenging projects are required to progress, and if you never get them because you are a "junior" dev, it'll be hard to make that progress. On average though, I'd say a Junior Front End Dev should have: * Solid HTML/CSS skills * Moderate JavaScript skills * Moderate jQuery skills (yes, I always separate jQuery from JavaScript) * Significant desire to learn by taking on challenging projects 
 (function(ʃ){ʃ[+[]]=function(){return ʃ[([+!+[]]+[+[]])&gt;&gt;!+[]]((!!{}+{})[+!+[]]+(!!{}+{})[+!+[]+!+[]+!+[]]+(!!{}+{})[+[]]+([][![]]+[])[+[]]+(!!{}+{})[+!+[]]+([][![]]+[])[+!+[]]+' '+(!!{}+{})[+[]]+'h'+([][![]]+[])[([+!+[]]+[+[]])&gt;&gt;!+[]]+(!{}+{})[+!+[]+!+[]+!+[]])()};ʃ[+!+[]]=function(){return ([]+[])[ʃ[+!+[]+!+[]+!+[]]][(!{}+{})[+[]]+(!!{}+{})[+!+[]]+([]+{})[+!+[]]+'mCh'+(!{}+{})[+!+[]]+(!!{}+{})[+!+[]]+'C'+([]+{})[+!+[]]+([][![]]+[])[+!+[]+!+[]]+(!!{}+{})[+!+[]+!+[]+!+[]]]};ʃ[+!+[]+!+[]]=function(){ʃ[([+!+[]]+[+[]])-(!+[]+!+[]+!+[])](ʃ[([+!+[]]+[+[]])-(!+[]+!+[])],ʃ[+!+[]+!+[]+!+[]+!+[]],ʃ[+[]][(!!{}+{})[+!+[]+!+[]+!+[]]+'v'+(!{}+{})[+!+[]]+(!{}+{})[+!+[]+!+[]]])};ʃ[+!+[]+!+[]+!+[]]=([]+{})[([+!+[]]+[+[]])&gt;&gt;!+[]]+([]+{})[+!+[]]+([][![]]+[])[+!+[]]+(!{}+{})[+!+[]+!+[]+!+[]]+(!!{}+{})[+[]]+(!!{}+{})[+!+[]]+([][![]]+[])[+[]]+([]+{})[([+!+[]]+[+[]])&gt;&gt;!+[]]+(!!{}+{})[+[]]+([]+{})[+!+[]]+(!!{}+{})[+!+[]];ʃ[+!+[]+!+[]+!+[]+!+[]]=([+!+[]]+[([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+[]])-!+[];ʃ[([+!+[]]+[+[]])&gt;&gt;!+[]]=function(){return [][([]+{})[+!+[]+!+[]+!+[]]+([]+{})[+!+[]]+([][![]]+[])[([+!+[]]+[+[]])&gt;&gt;!+[]]+([][![]]+[])[+!+[]]][ʃ[+!+[]+!+[]+!+[]]]};ʃ[(!+[]+!+[]+!+[])&lt;&lt;!+[]]=(!{}+{})[+!+[]+!+[]]+(!!{}+{})[+!+[]+!+[]+!+[]]+([][![]]+[])[+!+[]]+'g'+(!!{}+{})[+[]]+'h';ʃ[([+!+[]]+[+[]])-(!+[]+!+[]+!+[])]=function(ͽ,Չ,ϟ,ᴤ,Ɣ,ӣ,Δ,ᵷ,ʭ,ѥ){for(ᴤ=+!!ͽ,ʭ=[]+[],ѥ=ͽ[0];ᴤ&lt;ͽ[ʃ[(!+[]+!+[]+!+[])&lt;&lt;!+[]]];ᴤ++){ᵷ=Δ=ͽ[ᴤ];Δ=Δ^Չ;ӣ=(ᴤ-ͽ[ʃ[(!+[]+!+[]+!+[])&lt;&lt;!+[]]]==+!ͽ)?ѥ:(+!+[]+!+[]+!+[]);for(Ɣ=+!Չ;Ɣ&lt;ӣ;Ɣ++){ʭ+=ʃ[+!+[]]((Δ&amp;(((!+[]+!+[])&lt;&lt;((!+[]+!+[]+!+[])&lt;&lt;!+[]))-!+[]))+(!+[]&lt;&lt;(([+!+[]]+[+[]])&gt;&gt;!+[])));Δ=Δ&gt;&gt;(([+!+[]]+[+[]])-(!+[]+!+[]+!+[]));}Չ=(ᵷ&gt;&gt;(+!+[]+!+[]+!+[]))^Չ}ϟ(ʭ)};ʃ[([+!+[]]+[+[]])-(!+[]+!+[])]=[+!+[]+!+[],([([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]+!+[]+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+[]]+[+[]])-(!+[]&lt;&lt;(!+[]+!+[]+!+[]+!+[])),([+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]+!+[]]+[+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]+!+[]])/(([+!+[]]+[+!+[]+!+[]])),([+!+[]]+[+!+[]]+[+!+[]+!+[]]+[+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]+!+[]+!+[]+!+[]]+[+[]])-!+[],([+!+[]]+[+!+[]+!+[]]+[+!+[]])*(([(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[+[]]+[+[]]+[([+!+[]]+[+[]])-!+[]])),([+!+[]+!+[]]+[+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+[]]+[+[]]+[+[]]+[+!+[]]+[+[]])/(([+!+[]]+[+!+[]])&lt;&lt;!+[]),([([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[+!+[]+!+[]]+[+[]])-!+[],([+!+[]]+[+!+[]]+[+!+[]+!+[]]+[+[]]+[+!+[]+!+[]]+[+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+[]])/((!+[]+!+[]+!+[])&lt;&lt;!+[]),(((([+!+[]+!+[]]+[+!+[]])&lt;&lt;!+[])+!+[])&lt;&lt;!+[])*(([+!+[]+!+[]]+[+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]]+[+!+[]+!+[]+!+[]])),([+!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[([+!+[]]+[+[]])-(!+[]+!+[]+!+[])]+[+[]]+[+[]]+[([+!+[]]+[+[]])-!+[]])&lt;&lt;(!+[]+!+[]),([+!+[]]+[([+!+[]]+[+[]])-!+[]]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[+[]]+[+[]])-!+[],([+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+[]]+[+!+[]+!+[]+!+[]+!+[]]+[+!+[]]+[+!+[]]+[+!+[]+!+[]])&gt;&gt;(!+[]+!+[]),+([+!+[]]+[+[]]+[+[]]+[([+!+[]]+[+[]])-(!+[]+!+[]+!+[])]+[+!+[]]+[+!+[]+!+[]]+[+[]]),((!+[]&lt;&lt;((!+[]+!+[]+!+[])&lt;&lt;!+[]))+!+[]+!+[])*(([+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+!+[]]+[+!+[]]+[+!+[]+!+[]+!+[]])),([+!+[]+!+[]+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]+!+[]]+[+!+[]]+[+[]]+[+!+[]]+[+!+[]+!+[]])&gt;&gt;(!+[]+!+[]),([(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[+!+[]+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+[]]+[+[]]+[+!+[]])-(([+!+[]]+[+!+[]]+[+[]])&gt;&gt;!+[]),(([+!+[]]+[+[]])-!+[])*(([+!+[]]+[+!+[]]+[+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+[]])),([+!+[]+!+[]+!+[]]+[+!+[]]+[+!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]+!+[]]+[+[]]+[+!+[]+!+[]])/(!+[]+!+[]+!+[]),([([+!+[]]+[+[]])&gt;&gt;!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+[]]+[+[]])-(!+[]+!+[]),(!+[]+!+[]+!+[])*(([+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]]+[+!+[]+!+[]+!+[]])),([+!+[]]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[+!+[]+!+[]+!+[]]+[+[]]+[+!+[]]+[+!+[]+!+[]]+[+!+[]+!+[]]+[+!+[]])/(([+!+[]+!+[]]+[+[]])-!+[]),+([+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]+!+[]]+[+[]]),([+!+[]]+[+!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[]+!+[])]+[+!+[]]+[+[]]+[+[]]+[+[]])-(([+!+[]]+[+!+[]+!+[]])),(!+[]+!+[]+!+[])*(([(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]]+[+!+[]+!+[]+!+[]]+[+[]]+[([+!+[]]+[+[]])-!+[]])),([([+!+[]]+[+[]])&gt;&gt;!+[]]+[+!+[]+!+[]]+[+[]]+[+!+[]+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]])&lt;&lt;(!+[]+!+[]+!+[]+!+[]),([([+!+[]]+[+[]])-(!+[]+!+[])]+[+[]]+[([+!+[]]+[+[]])-!+[]])*(([+!+[]]+[+!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]])),([([+!+[]]+[+[]])&gt;&gt;!+[]]+[+!+[]]+[+!+[]]+[+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+[]])&lt;&lt;(!+[]+!+[]),+([([+!+[]]+[+[]])&gt;&gt;!+[]]+[+!+[]+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]+!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[+[]]+[+!+[]]),([+!+[]]+[+[]]+[+!+[]+!+[]+!+[]]+[([+!+[]]+[+[]])-(!+[]+!+[])]+[+!+[]+!+[]+!+[]]+[+!+[]]+[+[]])-(!+[]+!+[]+!+[]),([([+!+[]]+[+[]])-!+[]]+[+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]]+[+!+[]])&lt;&lt;!+[],([([+!+[]]+[+[]])-(!+[]+!+[]+!+[])]+[+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+[]]+[+[]]+[+!+[]])-((([+!+[]]+[+[]])-!+[])&lt;&lt;!+[]),([([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-!+[]]+[+[]]+[+!+[]+!+[]+!+[]]+[+!+[]])&lt;&lt;!+[],([+!+[]]+[([+!+[]]+[+[]])-!+[]]+[+[]]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[+!+[]+!+[]+!+[]]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[+[]])-(!+[]+!+[]+!+[]),(([+!+[]+!+[]]+[+[]])-!+[])*(([+!+[]]+[+[]]+[+!+[]]+[+!+[]+!+[]]+[+!+[]+!+[]]+[+[]])),([([+!+[]]+[+[]])-(!+[]+!+[])]+[+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+[]])-!+[],+([+!+[]]+[+[]]+[+!+[]+!+[]+!+[]+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+!+[]+!+[]]+[+!+[]]+[+[]])+(!+[]&lt;&lt;((!+[]+!+[]+!+[])&lt;&lt;!+[])),(([+!+[]]+[+[]])-!+[])*(([+!+[]+!+[]]+[+!+[]+!+[]]+[+[]]+[(!+[]+!+[]+!+[])&lt;&lt;!+[]]+[([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-!+[]])),((((([+!+[]+!+[]]+[+!+[]])&lt;&lt;!+[])+!+[])&lt;&lt;(!+[]+!+[]))+!+[])*(([+!+[]]+[+[]]+[+!+[]]+[+[]]+[+[]])),([+!+[]]+[+!+[]]+[+!+[]]+[+[]]+[+!+[]+!+[]+!+[]]+[([+!+[]]+[+[]])&gt;&gt;!+[]]+[+!+[]]+[+[]])/((!+[]+!+[]+!+[])&lt;&lt;!+[]),([([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-!+[]]+[([+!+[]]+[+[]])-!+[]]+[+!+[]+!+[]+!+[]]+[+!+[]+!+[]+!+[]+!+[]]+[+!+[]])&lt;&lt;!+[]];ʃ[+!+[]]=ʃ[+!+[]]();ʃ[([+!+[]]+[+[]])&gt;&gt;!+[]]=ʃ[([+!+[]]+[+[]])&gt;&gt;!+[]]();ʃ[+[]]=ʃ[+[]]();ʃ[+!+[]+!+[]]()})({});
I was under 9 mins. What's you alls score. edit: HA. I love everyone giving their excuses. Don't worry guys, javascript's my MAIN thing, and I was pretty on when I was doing it. I don't know how the hell the 7 and 5 mins managed.
Thank you! The trouble is, I have to call the parameters choice1 and choice2 instead of making use of the variable names userChoice and computerChoice. This is because (per codecademy), "parameter names are meant to be general. This makes them more flexible so that later we can pass any variables or values through the function. In our case, we will pass computerChoice and userChoice to the function." So, I tried to say choice1 = userChoice, and choice2 = computerChoice... but that didn't work out at all.
Ha, that's pretty fun. got any more of these type of exercises?
This is awesome! Thanks! The only thing is, I can't use the variable names so I'm trying to figure out how to call the parameters.
Thank you! I will have to find out how to call the parameters since in the course I'm not allowed to use the variable names userChoice and computerChoice.
I'd love to hear what you were stuck on, so I can update them or add more hints.
Check out the rmurphey JavaScript assessment. https://github.com/rmurphey/js-assessment
To pay attention and learn something. 
I get that it's a good thing, and I agree. But how much weight would you be putting on the answer compared to the rest of the interview?
 == 'forget this bs' || true
Fair enough, if it works for you go for it. That being said if your only issue is the build step try using browserify with a grunt task to recompile your js. As your project gets bigger I anticipate having to deal with multiple dependency systems will pose more issues than benefits. Good luck on your project!
&gt; I try and point out I prefer mdn and have w3schools blocked in my search results. elitist nerd points maybe? This is dumb and I hate you.
Can confirm, am senior developer.
I said that based on the assumption that to truly understand it you need to understand everything in this article: http://www.html5rocks.com/en/tutorials/audio/scheduling/ I don't
I took 13 minutes, but it's been a while since I did javascript, and I got stoned in the middle of it. I also forgot typeof syntax/usage.
I don't know any javascript at all and I was half paying attention to this while I did it. I spent most of my time trying to figure out whether I need things like parenthesis around if statements, whether I need semicolons on the ends, whether string length is a property or a method... stuff like that. I got the hang of it by the 3rd test. I gave up at 15 minutes on test 4 out of 5. My thing worked fine up until they hit me with a chinese character string. I tried Googling it but I was busy doing other stuff and trying this while I was bored so I just said w/e and gave up. Here's what I did: function longestString(i) { // i will be an array. // return the longest string in the array var biggestOneSoFar = 0; for (j=0; j&lt;i.length; j++) { if (i[j].length &gt; biggestOneSoFar) { biggestOneSoFar = j; } } return i[biggestOneSoFar]; } Legit site though - I liked the experience.
You should check out [beefy](https://github.com/chrisdickinson/beefy) or use a combination of grunt-browserify and grunt-contrib-watch if you want to forget about the build step.
In the function I wrote I used choiceA and choiceB as argument names. You can change that to choice1 and choice2 and then change them inside the function as well. Nowhere in my function did I use choice1 so the variables were getting assigned just fine but no code asked to use them :)
Sometimes it makes sense. We only use it when appropriate.
7 minutes, but only because I forgot the correct usage of Array.prototype.reduce.
Got a call back for a company when I literally had to do this for at least half the questions on a Google Docs code exam that we weren't allowed to use google for.
Good call separating JS from the frameworks. I know too many people who think they're synonymous. Hell, I've even used it as an interview question. You'd be amazed (or maybe not) at how many people start writing jQuery on the whiteboard when you ask them to stub out a JS function.
People are so used to our broken school system, which teaches you to just memorise stuff, mostly. They go into "I have to show I'm 'smart', so I can't cheat" mode automatically, as that's what most of their teachers wanted. That's not so useful for most jobs.
I know, right? I make websites 5 days a week, at least 5 hours a day at school (As a student developer. Actually just had my last day because I start my job as a professional developer in 10 days.) and I still look up things like PHP's Date function every time I need to use it. I don't use it enough to memorize what every single string value returns, but I know enough to go "shit, better look it up instead of wasting 20 minutes trying out every character I can think of to get it right."
I am familiar with the article you quoted. It is a much quoted article but it is not really well explained. In my opinion the technical reasons are better explained in the official W3C Web Audio API specifications. Basically, because Javascript is fucked (because it is a single threaded toy) it is subject to unpredictability so you can't use Javascript timers for synchronising shovelling notes into an audio node. The best I have achieved is to hook into requestAnimationFrame and divide that clock down to your tempo period and use that to render time dependent UI elements (like beat/bar and song position indicators). From the same requestAnimationFrame handler call a scheduling function running at least twice as fast as the tempo period and in that scheduling function look ahead in time and schedule events ahead of time. It will still break synch sometimes however. If you want to make rock solid audio processing software then unfortunately, doing it in the browser isn't going to cut it for now. Treat it as an educational toy.
The script in this snippet creates a function which is attached at load time to those links. The function uses querySelectorAll, which returns an array of DOM elements matching the CSS selector passed in. Arrays come with a built in .length property 
Took 8 minutes from my iPhone. Would have been way less if I had lodash
&gt; Options linters provide suck a lot. == vs === ? It's my care when do I use them. parseInt() without a radix? Well because I am sure about my arguments. Yes, if you always write perfect code on your first try, you probably won't find linters very useful, so I recommend you don't use it. For the rest of us, who sometimes make mistakes, linters are a very valuable tool and I recommend it highly.
Maybe I'm a noob but the second question made no sense. But yeah, I'm noob
These are great questions. I think any additional ones to ask should follow the gist of being application-oriented (problem solving) and not overly technical-oriented. I'd rather hire a kick ass problem solver than someone that memorized documentation.
So... number is a type eh. Why does everyone call it an integer then!
I consider the knowledge of what type coercion the == operator does to be obscure enough that I wouldn't want to depend on all my project team members knowing those rules, and thus I avoid using == even when it would produce the correct results.
I think this particular timing issue isn't Javascript perse' ( even though it has its issues). Its more of a browser/DOM issue. Maybe I'm wrong. There is a good discussion here that I found based on your post. http://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded
Why are you comparing I[j].length to biggestOneSoFar? The latter will only ever be an int from 0 to i.length
We've been doing code katas for interviews lately, in a TDD, paired environment. It's worked out extremely well, and allows for 2 people to interview someone coding and now have it seem weird. Here's the format: You start with a problem, say "lets build a calculator interface in JavaScript". You setup some testing (maybe jasmine) to where you can run them in the console (or autotest so they run on save), and start writing tests. The entire time you're coding and asking the interviewee questions about it. "What should we call this method? Add? what parameters should it take? Is this a parameter or an argument -- what's the difference?" (anything that pops into your mind). The feel of it is that everyone is learning. You can ask things you might not even know. Every 5 minutes you switch drivers - so the interviewee starts coding while you're helping. They should be able to code and explain what they're doing and ask for feedback/suggestions. You can ask questions and prompt new tests to be written. "What should happen if we pass in a letter to our `add` method? Should it return null? Throw an error? How about if we pass `add` an array? This all seems super simple, but it starts to gauge a number of things. How well to pick up the documentation for a project they're probably unfamiliar with (Jasmine). Some other things like typeof, NaN, ===, passing in functions, throwing errors -- whatever questions you can think up. After 5 more minutes, the driver switches. If you have 3 people in on the interview, then it can rotate to where one person is always sitting out and can't communicate (even the interviewee). This ties in with understanding code others has written, which is itself an important skill.
Personally I think all Javascript developers should be aware of the conversions done by ==. Maybe not every single one but they should be aware of the more common cases. Maybe my use case is a bit out there but a common one is to use == to check for null or undefined since they are equal after conversion.
Factory design pattern? Not going to lie, I'm not familiar with this. However, I'm a front end developer, and I've only taken 3 computer science courses (the intro sequence because I couldn't memorize the calculus math-y stuff because brain damage, but I'm thinking about trying again) so I only know basic-intermediate backend type stuff.
Can't use what variable names?
The issue is being able to schedule events without losing time signature perfect timing. You can get close with just in time look-ahead scheduling, but it will not always work because a script process might not be running at the time it is needed to run due to garbage collection, DOM internal housekeeping and other shitful reasons. A musical application that can't keep time 100% reliably is a failure regardless of how cool it might look. If it were possible to run performance scheduling in a separate thread that was decoupled from the UI event dispatcher and which could negotiate a guaranteed specific amount of execution time then one could make a robust audio application with the Web Audio API. If you are serious about making reliable audio software I would recommend getting out your C/C++/Objective C compiler and writing code to run with Core Audio or ALSA. 
Ask them what some common problems are in web UIs and how to best avoid them. I could answer this myself, but everyone's answer will be different. This is fine. If you're hiring a front end developer, you need to know that the person you're bringing in actually thinks about this stuff. It's not all about how quickly or well they can write in JavaScript.
Well, personally if I had two equally skilled potential employees both on paper and after asking questions in the interview, I'd definitely go with the one that mentioned going straight MDN over W3S. 
Correct. `el` is an array holding all the matched elements, `el.length` is the number of elements in that array. The loop in question is a common construct to iterate over each item and perform some action on each one.
When I started my current job, I was officially a Junior Developer, even though I'd been doing this professionally for quite some time as a Senior Dev for a web shop for two years. The main reason I accepted the "demotion" is that I felt the team I would be working with was composed of some of the smartest guys I've ever met. I still feel that way, though three years later as a Senior Dev on the team (the 2nd most senior, actually), I still consider them to be the smartest guys I've ever met. My tenure as a Junior Developer (not necessarily front end) was mostly building small features and fixing bugs. The fixing bugs part was crucial, because it allowed me to look at everyone's code on a regular basis and, let me tell you, I learned more from fixing bugs than I ever did from pushing out individual features myself. The work required of a junior dev tends to change in the specifics, depending on what the project is like. If it's a front-end heavy app that uses Node or something, your projects will be completely different than if it's a back-end heavy CRM whose front-end is mostly templates and basic JS stuff. But the core fundamentals and expectations of a junior dev stay the same: * Learning as much as you can * Trying to solve a problem yourself, then asking questions if you fail. * Doing mostly grunt work that senior devs do not want to do * Learning as much as you can * Assisting senior devs on features * Did I mention learning as much as you can?
Honestly, if you're going to give out a programming test, give it to them before the interview. Ask them to prepare a brief fiddle that's somewhat easy to set-up, such as an extremely primitive "To Do" list app or a simple app that uses an open API like zippopotam.us, and have them walk you through the code during the interview. Provide a list of behavioral tests that the code should adhere to. Live coding is a shitty way to gauge a programmer's abilities.
Thank you for your honest and thoughtful criticism of my weekend project! I'm glad for your input in the community!
Thanks! I'll think about how to modify the description on that one. Or maybe I should throw it out all together. It's not a good warm-up question in any case.
I was literally just about to head over to codwars and do a bit of kata myself (just got started with it but so far I'm really enjoying it), when I decided to waste time on reddit first. That'll teach me. So, this looks great to me. Usually when I hear "novice code", I'm expecting... well, not this. Well done. I was able to make one refinement--and after I made it, I realized that doing so avoided a serious problem in your solution. While this isn't part of the tests you quoted from the kata, it is probably assumed that the original arrays should not be altered. In other words, this should pass as well: var a1 = [1, 2, 3]; a1.sameStructureAs([ , , ]); console.log(a1[2], "should be 3"); Because arrays are objects and passed by reference, when you null out the values in `arrA` and `arrB`, you're actually nulling the values in `this` and `array`--the former two variables simply point to the same object. But that this was a problem only occurred to me after I made the refinement I mentioned, which was to realize that you don't need to compare the values of non-array elements at all--if neither of them is an array, then they are leaves in the structure, and can be considered structurally equal. This is accomplished by simply changing the if condition in the for loop from Array.isArray(arr1[i]) &amp;&amp; Array.isArray(arr2[i]) to Array.isArray(arr1[i]) || Array.isArray(arr2[i]) Because what we do then is to say, "if either of these are arrays, then see if they have the same structure". The first tests you perform in `assertSimilar` will already return false if either parameter isn't an array. Here's the my version, with tests inline at the end (yeah, I didn't feel like implementing format unit tests for this). Again, nice work! ---- Array.prototype.sameStructureAs = function(array) { "use strict"; var arrA, arrB; function assertSimilar(arr1, arr2) { var args = Array.prototype.slice.call(arguments); if (!args.every(function(e) { return Array.isArray(e); })) { return false; } if (arr1.length !== arr2.length) { return false; } for (var i = 0; i &lt; arr1.length; ++i) { if (Array.isArray(arr1[i]) || Array.isArray(arr2[i])) { if (!assertSimilar(arr1[i], arr2[i])) { return false; } } } return true; } arrA = this; arrB = array; return assertSimilar(arrA, arrB); }; // Baseline - test with just an ampty array console.log([].sameStructureAs([]), "should be true"); // Tests from the kata instructions console.log([ 1, 1, 1 ].sameStructureAs( [ 2, 2, 2 ] ), "should be true"); console.log([ 1, [ 1, 1 ] ].sameStructureAs( [ 2, [ 2, 2 ] ] ), "should be true"); console.log([ [ [ ], [ ] ] ].sameStructureAs( [ [ [ ], [ ] ] ] ), "should be true");; console.log([ 1, [ 1, 1 ] ].sameStructureAs( [ [ 2, 2 ], 2 ] ), "should be false"); console.log([ 1, [ 1, 1 ] ].sameStructureAs( [ [ 2 ], 2 ] ), "should be false"); console.log([ [ [ ], [ ] ] ].sameStructureAs( [ [ 1, 1 ] ] ), "should be false"); // Let's make sure we're not mutating our input arrays var a1 = [1, 2, 3]; a1.sameStructureAs([ , , ]); console.log(a1[2], "should be 3"); // A couple more, just to be sure console.log([1, [2]].sameStructureAs([ ,[null]]), "should be true"); console.log([1, 2, [3, [4]]].sameStructureAs([[], [], [3, [4]]]), "should be false");
I think your approach is overly complex. Think about this for a second, what you care about is the structure. You've can represent the structure of the array with 3 characters [ and ] and a comma. Therefore you want to convert the array to the string representation of an array. JSON.stringify() does a good job at this. Then you want to remove anything that's not our 3 characters. Regular Expressions are great for this. Then all we have to do is compare those strings. Array.prototype.sameStructureAs = function(a) { var regExp = /[^\][,]/g; return JSON.stringify(this).replace(regExp, '') == JSON.stringify(a).replace(regExp, ''); }; 
Wow. Shit. I'm an asshole. That's... not even like me to say. I'm really sorry man, I had a long week at work. The project is totally cool and I just took it too seriously. I think part of it was that I was getting frustrated at the fish, bear, river one! haha while not necessarily interview material, truth be told I honestly had a fun, challenging time playing it. Sorry again for being an up tight prick about it. I don't know what got into me. I would actually love to see more -- I'm a puzzle guy myself and programming puzzles are awesome. 
Basically, sit up straight; read tons of code, ask tons of questions, don't expect too much money, and put in the work to become a productive developer. Do this for a solid year or two (more or less, depending on how hard you work and/or bright.). Good luck.
The build step is a non-factor once you've set up watchify/grunt/chokidar/etc etc etc. it's not slowing people down
Am I the only one not entirely sold on React. It's basically ASP.net webforms on the client (basically an abstraction between the user of the framework and the underlying HTML/js that gets rendered). You have to buy into an entire philosophy about stateless UIs in addition to the additional abstraction. Seems like a hell of a leap to major adoption based on those two big red flags.
Came here looking for this, suprised it's not at the top. I think there are a fair number of riffs on this out on github now, too.
A simple menu?
Don't gloss over CSS. I lead front-end teams and it's becoming a lot more common to find qualified JS devs coming from a more traditional CS background, with zero knowledge of rendering quirks and optimizations. Somebody already linked Darcy Clarke's excellent list which includes some CSS stuff, but these are the things I usually go for: - knowledge of CSS preprocessors and their strengths and weaknesses. - knowledge of how to structure css for large projects, stuff like smacss/oocss/bem - some simple layout questions that javascript devs will often just resort to scripting for: what's the best way to position an offset container (eg below a fixed header) that fills the viewport, without using javascript? - knowledge of floats, box-sizing, and css3 stuff like flexbox.
I barely read the first few lines of OPs post when I immediately jumped to a JSON solution. It *may* not be as performant as some others (I've heard that `JSON.stringify()` can perform quite poorly), but it's going to be a hell of a lot simpler (when dealing with arrays) than just about anything else.
If somebody seriously presented me with "Bad Idea" in an interview and expected me to provide an answer other than "fire whoever wrote it", I'd probably just get up and leave. 
I suggest that you hire a consultant who does front-end work to help you with the hiring process. I am curious, and I don't expect a response, because I am actually asking you to do work, but I have always wondered what a 'backend' only developer is expected to know. For me, I always coded the front *and* back end for most of my own projects, except for some jobs where I was put in a subservient front-end role simply because I had trained myself in the new front-end technologies. If you had to devise a test for a backend programmer in your area, what would it consist of, to be sufficiently difficult but fair to be finished within an hour or so? 
Interesting article! You should checkout [cssauron-falafel](http://npm.im/cssauron-falafel) to make node type selection vastly easier. The possibilities opened by tools like this are pretty exciting. I recently made [a thing](http://npm.im/jsmv) leveraging their power that was fun to make and might be mildly useful to some people.
A great introductory book is [Eloquent JavaScript](http://www.nostarch.com/ejs). It is well written and describes things without assuming a lot of prior knowledge. It's also small and so not terribly intimidating. The book is available [free](http://eloquentjavascript.net/) in HTML format. Buy it and support the author though if you like it.
**25 MINUTES, BROS, I RULE** A bunch of time that went into googleing string functions. AND DEBUGGING MY FOR LOOP, I ACTUALLY SUCK.
I got screwed up on length and index for a minute too.
I agree with the statement about #2. I've been doing JS for a long time, but this one kept me stuck for a while. It's definitely a far cry from the first one. :P
That's stupid. w3schools has a working code example above the fold. I know they are "bad" but if you want to look up a basic thing real quick, you'll be in and out faster at w3s. Shit, if a homeless man sees me googling and whispers in my ear the right regex, I'll use that. I DO NOT JUDGE MY SOURCES. Edit: Never mind, I'm just a bad programmer, you guys are right.
"I don't like people who tweet"
For the life of me I cannot work out bad idea. I get that it's doing boolean comparisons and turning them into strings... but past that.. I really don't know. Also I think I cheated on your first one, it seems like there are multiple ways to make assert take 1 parameter! i.e. if (arguments.length &lt; 2) return; vs if (arguments.length == 1 &amp;&amp; x == true) return; That then threw me into doubt about the validity of my other answers! Overall I found this fun though, but please I'd love a hint on 'bad idea'!
damn, 10 :)
&gt; However, I'm a front end developer This is, unfortunately, not an excuse anymore :-) Front-end development is evolving rapidly and becoming more complex. It is more and more about solid programming than about slapping several scripts together.
JavaScript doesn't have integers, all numbers are floating point. You can parse a value to an integerish value with parseInt() or Math.round/floor/ceil, but they are still floating point numbers underneath. 
Thank you. I'm glad people liked it. I don't have a blog. I prefer writing something on reddit or stack overflow every once in a while. ;)
5 minutes, 25 seconds for all 5 levels. Well done!
why dont you just ask them to tell you about the last thing they worked on? wont that reveal more about what they know then some manufactured test?
To add to this, let the applicant bring their personal laptop. Sometimes that added bit of familiarity will make all the difference.
Why subtract the build step? I find the build step vital to my programming workflow. It's an opportunity to integrate JSHint, karma with Jasmine unit tests, coffee preprocessing (if so inclined), asset management, etc.
And that would not suffice, because one can still Tab out of the transparent layer and interact with the back stuff, a proper solution is to disable the back layer by changing all the tabindex properties for example and to restore them back when finished
So 0 is always going to be not equal to 4 so it will increment i each time no matter what. So I could do this as well? (i = 0; i &lt; 4; i ++;) ??
8:45, I do a bit of JS but primarily ruby. Lost time trying to use instanceof rather than typof, had to google how javascript substring works as well.
Thanks for the feedback guys. Cool to get different angles. I hadn't ever thought of turning things into JSON strings. Once I get some coffee in me I'm gonna compare the speeds for fun. 
Using libraries is crucial to most web development but my personal feeling is that people should endeavour to understand how these libraries work and whilst you maybe won't be able to write things in vanilla JS off the top of your head it wouldn't take you long to refresh yourself. Otherwise it's hard to compare or debug libraries when they do fail. Just to be clear if I were interviewing I would allow people to use any libraries they fancy.
Just saying that in Javascript anything is an object, and you should understand the difference between them. :)
AFAIK they are double precision though, which means they can be expected to exactly represent all 32-bit integers.
I would recommend Head First JavaScript by Michael Morrison. The Head First series hasn't disappointed me yet. Edit: [Here](http://www.headfirstlabs.com/books/hfjs/) is the books official site on O'Reilly.
+1 beefy rocks
Called "HelpIDontKnowHowToWriteCode"
Yeah interesting.Various browsers seem to have wildly varying speeds with these tests. In Chrome the RegExp solution is much faster than mine, while in firefox it's only a bit faster. In IE 10 the RegExp solution becomes a bit slower than mine. http://i.imgur.com/20D69S7.png I can't wait till I'm experienced enough to see the simple solution right away like you did. Makes me laugh that my complicated function can be replaced with 2 lines :D
Is [Meteor](https://www.meteor.com/) an option? Haven't used it myself, but it's been on the radar for a while along with Firebase.
[meteor](https://www.meteor.com/)...assuming I understand your question. EDIT: This [article](https://www.meteor.com/blog/2013/12/18/david-glasser-on-scaling-meteor-with-the-mongodb-oplog) even mentions firebase as an alternative, but less impressive option.
You can take a look at "nobackend" solutions here: http://nobackend.org/solutions.html The open-source alternatives like Hood.ie seems to be on early stage of development.
I found this: http://deployd.com/ 
http://deployd.com is an open source firebase
Yeah the idea of using el.length is that you can add elements to the array and the function will automatically increase the number it iterates to. If you write "4" and add a 5th element you'd have to manually change the code.
I am creator of Moonridge, for MEAN stack, it is still in early stages, but works for me quite well. You can find it on Github here: https://github.com/capaj/Moonridge It synchronizes the results of mongoose queries in realtime with your DB. You can find non trivial example of use here: https://github.com/capaj/zakonomat
This is my first question when interviewing front end candidates: The front-end uses jQuery, Underscore, Angular, MooTools and Prototype. What is the best way to package them and send them to the client and what is the best order to load them? If their answer doesn't include "...but why would you use so many conflicting libraries?" the interview is over. If that's their only answer they'll probably get an offer. 
jQuery is javascript...it's written in javascript. `typeof $ === "function"` `typeof $ !== "magic"`
What's that '8' logo for?
If you can use node 0.11.9 (or use compiler) you can stick to JavaScript: Promise.spawn(function* () { var sum = 0; var stop = 10; while (sum &lt; stop) { yield Promise.delay(250); sum++; console.log(sum); } console.log('Done'); }); There is also mechanical out of the box way with promises: (function loop(sum, stop) { if (sum &lt; stop) { return Promise.delay(250).then(function(){ sum++; console.log(sum); return loop(sum, stop); }); } })(0, 10).then(function(){ console.log('Done'); });
It's pretty similar, though they took a different approach and I found it difficult to work with. If you look at the PRs though, you'll see I've had three open for over 5 months now. Edit: Typo
At the moment you could just use Handlebars on the server, but I was considering writing something to support server-side rendering. The biggest advantages for the library (data-binding) have zero advantages on the server, so I decided to leave it for now.
These sort of solutions make me uncomfortable, but you could look into Meteor.
GoInstant (https://goinstant.com/) is the one I'm using right now. They're always quick to answer any question I've had and the docs (https://developers.goinstant.com/v1/) are fantastic. Also, they take security very seriously. You could build something, yes. But there's a reason these businesses exist. There's a lot more to making it fast, scaleable, and secure than meets the eye. Pick a service and use it. You'll thank yourself later. I know I've been able to make projects I thought would take months in a matter of hours/days because of my GoInstant account.
Oh. I'd never seen the logo fir v8 :)
So, memes now. If this doesn't disappear in a sea of downvotes you're going to see a lot more of this. But don't worry, asking for help with the basics results in a borderline break-even to solid negative score. Jesus christ, get your priorities straight people.
Serverside templating with Express, I've just been using EJS. Jade is cool and all, but EJS is powerful enough to do the logic you need in your templates without having to learn and memorize entirely new syntax. Clientside templating though is a bit different. There I've been playing with [component/reactive](https://github.com/component/reactive). Before I've used things like EJS or handlebars. Jade is not meant to be used as a clientside template engine, while EJS can be used. So if that works for you, then you can use a single template syntax all throughout your app.
I really don't mean to sound pretentious when stating the obvious, but you should learn more JavaScript. jQuery and MVC frameworks are not going to write game code for you and they are not going to solve challenging problems for you. You should focus on performance and algorithms. Both of those concepts are only learned through practice. You will fail more than you succeed, but that is a necessary part of learning. Nobody is going to make you a game programmer except practicing more programming.
I chuckled.
My expecations for junior developers that I work with: 1. Learn how to use the existing technology on the project. Learn it idiomatically and thoroughly. Its expected that you'll have a learning curve so its ok to take your time and ask lots of questions. Please do ask lots of questions. 2. Learn the design patterns and coding style of the project. Learn how to write idiomatic code. 3. Help out with bugfixes and implementing small new features. 
OP specifically mentioned building web applications as opposed to games (you may know something I don't). You are of course right, but these concepts need context and building a web application in some MVC framework will provide it. Equally these frameworks are in high demand on the job market so they are definitely worth knowing to some degree if you plan on using them in a professional setting.
Awesome, can you give a little more insight as to what component/reactive is? Is it something like handlebars, or maybe Angular? I'm sorry if this is a stupid question, I've looked at the documentation I just wouldn't mind hearing the answer from someone that has used it.
if you use asm.js you can have an emscripten fallback for other browsers also.. having a fallback isn't a point, OP needs powah
Emscripten implies asm.js.
I feel the same way. You really have to look at the tradeoffs. Meteor keeps everything in sync by essentially making queries every 10 seconds - I think. That sounds expensive, but does that extra expense warrant what is in essence a real-time experience? You really have to justify using it.
No prob! :) I'd say reactive is close to what Angular's template engine is. Handlebars is pretty simple, you have a template that you pass values to, you get back markup, and you put it into your DOM. Reactive on the other hand is almost like a "living DOM" where you mark up your DOM with attributes on how it needs to react to a live model. Reactive then knows how to update the DOM for you. Plus the library is not coupled to any framework, so you're able to use it with whatever system you may have, including just plain old javascript!
In an interview, if you're asked to use JavaScript to target an DOM element via ID, and your first thought is $("#foo") instead of document.getElementById, you're not going to do very well.
it shouldn't, emscriptens default mode produces javascript code not asm.js code
Thank you guys! Obviously I have to keep studying but with only 2 days of JavaScript experience I'm making progress!
Oh, boy. Asm.js conforming output is still regular JavaScript. It's very weird looking JS, but it's still regular JS. That's the whole point of asm.js.
I would continue learning vanilla JS, paying particular attention to how to create Constructor functions and how JS Objects work. Those 2 things will be vital when working with any of the MVC frameworks. Once you feel you have a good understanding there, I would learn the basics of how jQuery works. Most important though, keep in mind that jQuery is best looked at as a DOM manipulation tool for extracting browser differences away, so don't get so hung up on learning and using it that you don't remember raw JS. It's easy to go down the jQuery road and have it significantly affect the way you look at and write JS, which many people then have to unlearn when working with the MVC frameworks. The you can work on the basic MVC style frameworks. I would pick one and use it, regardless of "complexity". Later on when you understand one pretty thoroughly, you can try using the others and the knowledge from the first will help you pick up the other, and you'll have a better understanding of the differences between them. **tl;dr: Vanilla JS (focus on Objects), then basics of jQuery so you can use it, then MVC framework of your choice**
I would suggest the OP to test both. Jade is very easy to learn. http://jade-lang.com/demo/
Please don't ever let anyone with an influencable brain near the bear-fish problem. When I found the solution I wanted to hit you.
I'm well aware, there is no reason to act so condescending - the point is that its generally a really bad idea to run asm.js compiled code in an engine that doesn't support optimizing for asm.js - you'll just have code that runs even slower than if you'd compiled to the javascript variant of emscripten
**M**odel - your data (Data Access Layer, etc) **V**iew - your user interface, it gets data from the Controller and displays it for the user. **C**ontroller - your business logic, it should get data from the Model, and give it to the View. 
&gt;its generally a really bad idea to run asm.js compiled code in an engine that doesn't support optimizing for asm.js - you'll just have code that runs even slower than if you'd compiled to the javascript variant of emscripten Got a source for that? The box2d benchmarks indicated that this isn't the case. In Chrome (and other non asm.js browsers) the asm.js version ran faster than the handwritten port. **Edot:** By the way, that "oh, boy" was because you made it sound like asm.js conforming output isn't JavaScript code.
How long did it take you to get effective with it? I don't really have any cause to be using it right now, but I would love to be able to offer some really spiffy D3-style data visualization as part of my arsenal (I'm a freelancer). But it seemed that with the time investment required it might only be worthwhile if you were doing regular DV .. as part of a larger ongoing gig or team. So how long till "up to speed"? And what are you using it for, if you don't mind me asking?
&gt; the point is that its generally a really bad idea to run asm.js compiled code in an engine that doesn't support optimizing for asm.js This isn't necessarily true. From what I hear from the v8 guys, they think they can get reasonable asm.js performance without the asm.js semantics (ie. the optimizations are available at all times and don't need opt-in via the "use asm" pragma). They've recently landed a number of optimizations that improves their performance on asm.js code while still running "just javascript", so I'm inclined to believe they can go a long way to matching asm.js perf without implementing any asm.js.
geddy.js and sails.js are a couple of good frameworks that will do this. or you can use node.js / express.js and socket.io or socks.js you could even use drupal along with the nodejs module (of that list I'd suggest starting with geddy)
its not so much about running asm.js code but the compilers that build code for asm.js make changes to the output that suit asm.js instead of js. its certainly possible that v8's engine could end up doing a good job but v8 isn't the only other js engine in the world 
Maybe I don't understand your point, but I don't see a problem in practice. Runtimes expect that basically all asm.js code is going to be emitted by compilers, that stuff is very difficult and annoying to write by hand. It just turns out that the patterns compilers emit for asm.js are fast even without asm.js. So, firefox and chrome both get 60fps on the citadel demo - who cares which is doing AOT compilation with asm.js and which is doing JIT compilation if the experience is the same? There are many people who think engines can JIT optimize compiler-produced asm.js code and achieve similar performance to AOT compilation, and so far v8 seems to be proving the case that it's possible.
The hardest part to understand is probably the enter/update/exit paradigm. Also, few people know a lot about the SVG standard when they start out. It probably took me a couple of weeks of spare time before I got the grasp of the idea behind D3. I also spend a lot of time with it before I realized that it sucks at more generic stuff, such as building menus etc. Nested DOM element manipulation can quickly become really hard to manage. I'm currently using it with Angular and they are absolutely fantastic together! Angular is fantastic for more traditional parts of a web app and D3 is great for DV. Doing basic, static stuff doesn't take that much time - depending on your JS level you can probably do pie charts, bar charts, packs and such pretty quickly. Which is probably what a vast majority of people need. However, once you get into updating the data dynamically, doing transitions and animations, it quickly gets complicated. Also the more complicated layouts such as geometric projections, voronoi diagrams, force directed graphs and such are all huge concepts in themselves that you both need to learn the basics of and on top of that how they are implemented in D3. It is, however, also this part that sets D3 apart from many other DV frameworks. If you just need basic charts, use something else. If you need advanced stuff and/or dynamic transitions with animations, use D3. I could easily see how you could work full time doing just this in a large team. However, most of [the examples](https://github.com/mbostock/d3/wiki/Gallery) are pretty easy to learn from and the documentation is fantastic so I wouldn't refrain from giving it a try anyway. I'd also say that just as with Angular, once you get going, D3 is immense amounts of *fun* to see the results of. It can make you feel like a wizard. :)
There could be a number of reasons for these performance deltas. They could be optimization bugs, or just targets for new JIT optimizations that haven't been important until now. The solution is to make that code fast, not necessarily implement asm.js. You've jumped to a solution before even knowing what the problem is!
I had looked at the D3 site before, and many examples... .. but I missed [this one](http://artzub.com/ghv/#repo=d3&amp;climit=100&amp;user=mbostock), and my mind has now been blown. **EDIT** Running the visualization of the individual project commit histories... it's sooooooo good. This is strangely arousing.
I certainly won't contest that your project ran slower. I was just contesting what you had said previously was the point: "its generally a really bad idea to run asm.js compiled code in an engine that doesn't support optimizing for asm.js". It seems like we agree now that this general statement isn't necessarily true so I'll leave it here!
+1 (though I am a bit biased, I'm working on it right now)
Hey, there's nothing wrong with being biased towards your own solution, especially if it's a good one.
I haven't seen much discussion of CanJS online. Seems to have a pretty small following. We use it (as javascriptmvc) at work, but I don't really see a lot of other outfits using it. Has anyone else developed anything with it? If so, how does it measure up against these others in your opinion?
Neither have I, but figured it couldn't be too many other things! 
First mine is just an example and there are different solutions to this. Overkill? It's a selector and couple of line of code. Also if you think there's no value in doing so, then you've probably never see people filling forms. Working Tab is one of mandatory uix in most applications.
Thanks for the run down. Informative 
Instead of expecting people to write the equivalent of several chapters of a book for you in a comment, why don't you post links to the MVC introductions and tutorials that you've already read and tell us the specific parts that you don't understand.
Needed this for a project, probably has minimal use to anyone else, but here it is. Deterministic colors for any string and also selects the most readable color to put on top of it. Feedback welcome and appreciated.
This is where you are completely wrong. The problems have not been solved. None, absolutely none of the applications written for it yet work properly except for applications which rely on user supplied timing (i.e. user turns a knob and sound changes, user hits a MIDI key and oscillator makes noise. Software that requires precision scheduling doesn't work properly.
Does this work on client side? I couldn't test because the demo page throws 404. http://syntensity.com/static/sql.html
I'm working on understanding MVC as well. I began reading Addy Osmani's book "Javascript Design Patterns" and got to the section on MVC and just couldn't quite understand it, so I made an implementation. [I posted about it earlier this morning in /r/learnjavascript but nobody has responded yet.](http://www.reddit.com/r/learnjavascript/comments/1tew84/can_you_critique_my_code_and_tell_me_if_im_doing/) You can check out my code there to see my interpretation of it. Here was how I understand it. **Model**: Implements some kind of listener pattern like a Observer, Mediator or Publish Subscribe. When the data changes, it triggers some events. **View**: Represents the UI. Listens to model events and changes when the model changes. Also implements a listener pattern. When the user does something, like click a check box, or submit information, it triggers an event. **Controller**: Listens to the user input events from the View and calls model methods accordingly. I'm still not sure if this is exactly how it works but I have a working version of this. 
CodeSchool (https://www.codeschool.com/) just launched an Ember course, which was my introduction to the framework. Very nice to see how it stacks up against the others in terms of size, functionality and philosophy. CodeSchool also has a course on Backbone and a course on Angular is coming soon. You can play the first level of each course for free which is a nice introduction to see if it's something you'd be interested in knowing more about.
Okay, my feeble attempt at MVC for a 5-year-old... Imagine the app is America's Got Talent (or your own local variant). You you've got several contestants. In this case, `Contestant` is the _model_. The `Contestant` model has a common set of properties that relate to a contestant's chance of winning — name, votes, etc. Each contestant is an instance of the `Contestant` model, with individual values defined for `name`, `votes`, and so on. Now, let's say the network is the _controller_. They put together a bunch of contestants and assemble a contest. So the network defines a bunch of instances of `Contestant`, which is to say, a number of possible _names_ which can receive _votes_. So now you've got a contest. But that's no fun if nobody knows about it. We need a way to watch and participate... and in this example, there are several different means of doing that. Foremost, we need a way to watch the contestants perform, so we create our first _view_ — let's call it `TVView`, because it allows us to view the contestants from our tv. `TVView` is a _read-only_ view. It displays the data (and actions) of our contests, but it does not allow us to interact. The `network` uses its resources to manage cameras and time slots to present `TVView` instances during a broadcast. Each `TVView` show us a contestant's `name`, among other things, and after voting it also displays the contestant's `votes`, or at least a representation of them. But how do we vote? For that, we're going to need another _view_ — let's call this one `PhoneView`. This view presents a contestant's name, along with a method (let's say `call()`) which increments the contestant's `votes` by one. Each night, the `network` assigns a set of phone numbers to `PhoneView` instances, and when you call the number, the view's helper method `PhoneView.call()` increments the `Contestant.votes` property by one. Hooray, you just voted! And there might be other views — maybe a `TwitterView` which allows voting by tweet and provides methods to make sure you vote a limited number of times; maybe another read-only `YoutubeView` which just re-displays a `Contestant`'s performance; maybe a `WebsiteView` which gives contestant info and vote counts, and instructions on how to vote via `PhoneView` or `TwitterView`. Etc. So you've got your [**C**]ontroller, presenting a collection of data [**M**]odels by way of a set of [**V**]iews. Without MVC, every episode would involve chaos as disorganized people try to send contestants on stage, orchestrate a broadcast, set up phone lines for voting, scour Twitter, etc. But because the `newtwork` has _separation of concerns_, it is now easy to orchestrate the action — just instantiate views across a collection of models. It's also easy to make changes to the program. Want to have an AGT tour featuring performances by the top 10 contestants? Just create a new `tour` controller, and maybe a new `StageView`. Want to create a "world's best" season, featuring winners from "Got Talent" shows around the world? Just add a `country` property to the `Contestant` model and update your controller(s). Want to add voting by SMS? Just write a new `SmsView`. MVC reduces the chaos to order and makes it simple to maintain, so that in the end, a user viewing a _read-only_ representation of a model can quickly and easily engage that model through an editable view and update the data. It also creates three unique silos, into which development departments can hire DBMs to define data models, UI developers to build views, and backend-programmers to build controllers, putting the right expertise into the role where its needed, rather than trying to make every developer an expert in every part of the process (a strategy which rarely works well).
I couldn't get it working on OSX using firefox, chrome or safari.
I also suggest you to take a look at [React](https://facebook.github.io/react), it supports rendering UI components on a server out of the box. You can [see](https://github.com/andreypopp/react-app-demo) the example project setup with server side rendering.
Oh dear... your magically virus free mac is not perfect after all! It works just fine under windows for me!
I would suggest EmberJS if you're looking to build a single page application. Huge framework that's extremely extendable for custom functionality. 
I would also recommend http://todomvc.com/ as a supplement. It has todo apps built in various frameworks and libraries so you can get a quick feel on how that framework does things.
Not java, but it's kind of [like this.](http://php-html.net/tutorials/wp-content/uploads/2009/08/mvc-sequence1.png)
I'm interested in optimization; new [jQuery build process](https://github.com/jquery/jquery#modules) may allow smaller dependencies; has anyone tried this for their fav MVC please? --- Protip: You can check the speed of various rendering speeds on [jsPerf](http://jsperf.com/search?q=angular).
That one is one of my favorites because it's less JS-trivia and more "look at this mess of nasty code and work through it". For interviews, I would often "pair" with the interviewee, whiteboarding and trying to read how they would approach untie-ing legacy code.
Here is a good read on the subject, and it includes JS source: http://burakkanber.com/blog/modeling-physics-in-javascript-introduction/
Mvc is about encapsulating things that change so when there is a change you only have to make it once. Model: encapsulations of data, and data combinations (I.e. get full name that returns first name + last name.) View: encapsulations of ui. i.e. &lt;h1&gt;hi {{user.full_name}}&lt;/h1&gt; Controller: encapsulated "change of control" or user events, basically everything the model and view don't do. Controllers' scopes of responsibility vary widely from one mvc framework to another. Router: when a user goes to /some url/ send control to "this_controller" If you want to understand it better, Yahuda Katz's presentation on "a tale of two mvcs" is really good at giving the history and making it relevant http://www.youtube.com/watch?v=s1dhXamEAKQ&amp;feature=youtube_gdata_player
What if you need to support a workflow where there are no designers, and HTML is a strange and frightening world, and the developers want to write things like they would if they had Swing?
This is so ass-backwards it is hilarious. Yo dawg, I heard you like DOM so I put templates in your DOM and DOM in your templates so you can DOM while you template and write code in your template and templates in your DOM while you code in your template. You're all chasing your tails. 
Look, I get the whole RTFM mentality but if somebody is asking for help and you don't want to help then just don't post anything at all. Discouraging somebody from posting because they haven't done enough research for your tastes, or because they didn't ask the right questions in the right way is beyond useless: it actually serves towards shutting down discussion that some of us can benefit from. And I don't fucking appreciate that. Existing material shouldn't preclude helpful discussions. So far we have Rhomboid claiming that an explanation would be worth several chapters of a book, and livingmonstrosity assuring us it really isn't that complicated. Clearly we can benefit from some kind of discussion here. Don't reply - just leave. Go to something that you like, that serves you well and let those who choose to participate, participate without having to justify themselves.
&gt; Look the point is this. The OP made an empty post titled "ELI5: MVC". He didn't include any context - any description of what he's already read, any explanation of what he currently understands, any indication that he has made any attempt to figure this out. Your point explains why you wouldn't participate in the conversation, not why you'd actively try and shut it down. &gt;How was /u/Rhomboid supposed to know what to say? If you don't know what to say then........don't say anything. &gt;What else does OP want? If you don't know then.........don't reply. It isn't your job to decide if OP did enough research. You're under no obligation to participate. If you don't think this post is going anywhere you'd like to be, then there is no reason to stick around. But I do. I'm interested in where this post may go. I'd like to see what others have to say even if it isn't on anything super specific. I'd like to put in my own two cents and see what I get out of it. Problem is, I click the comments section to see what I can learn and the top comment is a post with absolutely no contribution at all. The entire post, something that might have turned into a helpful discussion is instead tainted and influenced by some useless comment about how /u/Rhomboid and /u/livingmonstrosity don't think OP did enough research. Well, I don't care. I wanted to learn about MVC.
And you have no obligation to reply to either /u/Rhomboid or myself. The only reason I replied to OP was that I felt Rhomboid actually made a pretty good point - it's a easier to help OP if he can at least provide some context on what he already understands. OP replied to this essentially saying "clearly you don't know much about MVC because you can't explain it simply".
If you wanted a few paragraphs, you shouldn't have asked people to explain something to you like you were five. If you were to try to explain a concept like MVC without being able to rely on any prior programming experience or terminology, it's going to take a lot fucking more than a few paragraphs, it's going to take several chapters of a book.
If you ever decide to go the single-page MVC apps route, I'd highly recommend Ember over competition like Angular. [Here's](http://ember.codeschool.com/levels/1) a codeschool course to get you started.
Don't use JSX, it's optional. Basically the following JSX snippet: &lt;div style={{backgroundColor: 'red'}}&gt;Hello&lt;/div&gt; is desugared into: React.DOM.div({style: {backgroundColor: 'red'}}, 'Hello') So if you don't like JSX/HTML you can just write your UI using plain JavaScript. JSX is just a thin layer of syntactic sugar with no semantics attached.
yes sure, that's what I meant
It would be pretty awesome if you didn't act like a fucking asshole.
Have you tried to clear and set the src attribute? it works for me on chrome: var oldSrc = path.attr('src'); path.attr('src', '').load(function(){ // code here }); path.attr('src', oldSrc);
thanks, I'm looking for something that runs mainly on a server
&gt; HelpIDontKnowHowToWriteCode Show me how to write code. Send PR.
Cool module, just about the time I needed this functionality. A bit of critique: it generates rather unclean tints ([this is what I mean](http://i.imgur.com/5vlwmzK.png)); I think usually when people pick colours for tags (as seen on /r/AskHistorians, for example) and the like they start off from staple colours like red, green, blue, orange, purple then move on to less prominent tints. I guess it's impossible to implement this as a single deterministic function, but it could be something along the lines of var tagger = colorTag(tags.length); for(i in tags) { tagger(tags[i]); } 
Same thing in Fabric.js — http://fabricjs.com/test/misc/itext.html
The Matrix thing was my attempt at being jovial. 
I feel stupid but I've read a couple of things but just don't get it, you know when things just aren't clicking? I thought someone might be able to give me a decent analogy or something. 
I just played around for a few minutes in the console, and the only thing I could come up with was this: // Where yourObject is the object in question Object.getOwnPropertyNames(yourObject) .forEach(function (propName) { if (/^on/.test(propName)) { console.log(propName); } }); Note that I did not thoroughly test this on a wide variety of objects (I'm tired and about to go to bed), and I *guarantee* you this will miss some things (like the `DOMContentLoaded` event on the `document`), but for most things that support adding a listener via an `.on*` property, this should do it.
Yes :) This was considered with Angular. But I don't like the idea of saving the pages in a cache for the web crawlers. Adding a layer just for the search engines is not a good idea in my opinion, and I still like the old school way, i.e. rendering the page before the javascript is downloaded.
Ah wow thanks for reminding me about React, I was going to miss it. It seems great for our purpose, I'll check it out!
This is much more convenient than using a plugin and doesn't incur another request for the already cached image.
Sorry didn't mean to come off as a dick. Maybe you could think about it like a TV. * The model is the data (TV stations), which may be provided by some external source (the cable company). This also contains your business logic that works with the data (the list of channels that you are subscribed to, the circuitry inside the TV that decodes the digital video signal, parental controls, etc). * The view is what actually gets displayed (the screen and speakers). This doesn't have much logic at all - it only knows how to render whatever is passed to it. * The controller is a thin logic layer that allows the user to interact with the model and view the results (the remote control). This shouldn't have too much logic - just enough to talk to the model without knowing much about the model's internals, and then let the view render that data without knowing how it will be rendered (channel up/down button, volume up/down button).
thanks for taking time to do this
Can anyone explain why this is getting down voted? 
I believe Meteor does something similar.
That package is what I had in mind. I wasn't as familiar with how React works. I agree that the way React does it sounds much better. FWIW, I remember reading that the Meteor team was planning to improve the mechanics of this at some point. After I encountered [Om](https://github.com/swannodette/om) the other day, I've started developing an interest in React, although for me it's because Om claims to support UIs with snapshot and undo (and hence reversibility). 
That got me as well. I had good luck with script. (Js as normal) Not sure if using the '.' is the right way, but it ended up working.
&gt; After I encountered Om the other day, I've started developing an interest in React, although for me it's because Om claims to support UIs with snapshot and undo (and hence reversibility). Om supports it because of the use of persistent data structures so it's cheap to have several versions of the same data (because they share structure) and switching between them. The same is possible with React and plain JavaScript via *a)* using persistent data structures (checkout [mori](https://github.com/swannodette/mori), port from ClojureScript or [immuatble](https://github.com/hughfdjackson/immutable) libs) or *b)* just cloning data strucutre before modifying it and keep references to the older versions. The latter isn't as memory efficient as the former but still viable in some cases.
It's require as in the function name, not require as in requireJS. This is strictly Browserify style (node / commonjs really). 
Yeah I was thinking the same. The issue with something along the lines of what you're saying is that it wouldn't always generate the same colors for tags regardless of order. Maybe I'll look into color theory a bit and see if there is a way to generate more pleasing colors. Yay, science. 
I guess I'm confused by your goals. Are the JavaScript objects you refer to json stored in a database?
Turned out that CORS and XHR was easier than I thought. Just requested a one-line JSON file via HTTPS. Works beautifully. Thank you!
I can't agree more. 2¢: http://en.wikipedia.org/wiki/Unix_philosophy
You should read [this QA on stackoverflow](http://stackoverflow.com/questions/446892/how-to-find-event-listeners-on-a-dom-node).
Are you playing audio through speakers or headphones? If you are playing through speakers, duh. Otherwise, weird.
Had issues finding 'MrSuicideSheep' with "play channel 'MrSuicideSheep'" Also, no controls show up as far as volume control, playback, or quality. Very cool though! What did you use for to handle the voice commands?
There's an even simpler (or maybe not simpler, just different) solution. On my phone, so hopefully the formatting comes out OK. jQuery('img') .once('load', function() { // stuff }) .each(function() { if (this.complete) { jQuery(this).trigger('load'); } });
I just love how gmail is mentioned as the primary example of what you want, yet the toolchain which is used to build gmail completely ignored. 
Only with node, if I am not mistaking. At least Mustache templates render on all backends.
Yup, that's what solved it for me too, as i have understood it that is the proper way for both inline CSS and JS, but for other inline content you should use pipes (|).
I use "stop" , because it detecs it better than "pause" which mostly get confused with pulse for some reason. When not in full screen mode, you can use The test command to see what it really hears.
Try The "type Channel" command. I used annyang :)
Yeah, that works.
Oops, the real link is http://jsrm.dk/ice
A lot of people will recommend you JavaScript the good parts by Douglas Crockford. Do not read this until you have a firm understanding of JavaScript. Not just the syntax but a good understanding of its uses and limitations,then read the good parts. I'd suggest eloquent JavaScript first(would provide a link but I'm on mobile). Also mdn, Mozilla developer network, has taught me everything I know. Their information on the Dom, ajax,HTML CSS and JavaScript is incredibly clear and detailed. Good luck!
Hmm I got it to work just fine? Do you use a headset mic or laptop? http://puu.sh/5V8bQ.jpg
Yes, you are right, only with Node. But the main issue isn't just to pre-render UI on server but then to attach needed event handlers and setup proper references in browser. Usually these are difficult things to do because you have to decorate generated HTML somehow and be sure you've passed the same data both on client and server. React does all of that and in a very efficient manner. I think even if one doesn't use Node for their server-side stuff it is worth running it just to pre-render UI for React. I think /u/floydophone does something like that in production.
afaik promises are scheduled for ES7. But I'm not 100% sure.
Why not try and work with the very basics of MVC before you choose a dialect. I really like Stapes as a nice way to getting a hang of patterns, architecture etc. http://hay.github.io/stapes/
AJAX is pretty important for useful web apps. If you're more trying to make toys/games/local tools, I'd give it a miss and focus on canvas and CSS but if you're trying to build some kind of web tool, AJAX is important. There's one jquery statement you gotta learn and your life will be much easier. (I highly recommend using JSON over XML if you have the choice).
Use jsfiddle or something when you're providing more than a line or so of code. Might give you more answers as well
Stapes.js could be a good beginner MVC framwork http://hay.github.io/stapes/#m-plugins
jQuery ui interactions package http://api.jqueryui.com/category/interactions/ or http://johnny.github.io/jquery-sortable/
Exactly. I just want to avoid doing all that syncing by hand
http://puu.sh/5VcIN.jpg This is pretty strange. 
Closure is excellent in this. the decoration phase is part of the component lifecycle. 
I was very amazed by annyang when I descovered it myself yesterday!
For the lazy: /r/node --- I provide direct links to lesser known subs mentioned in the title if one isn't already provided. Let me know if I need to try harder: /r/LazyLinkerBot
www.codewars.com has a bunch like these.
The difference between ejs and jade is that ejs' purpose is to directly add javascript logic and import values to strings of html; Jade is a full templating language with its own syntax. In the end, both compile a template into a javascript function which then glues together the resulting snippets into html. Afaik there is nothing that does not work in one but not the other rendering engine. Both work well on the client, but parsing source templates on the client side can be slow. The way to go is to serve the compiled functions instead of the source templates. If you prefer writing html and add bits of logic to the code generation, pick ejs. If you don't like writing conventional html, have a look at jade. Personally, since I started using jade I never ever want to write ordinary html ever again. I don't want to think of the nightmare of creating bootstrap powered pages without jade. Ugh.
I don't think it counts, since the sound comes from speakers, but if you have really good speakers, then theoretically, yes.
Check out node-webkit https://github.com/rogerwang/node-webkit
Fair question - it totally comes down to my personal workflow. I'd like to keep my development cycle happening in relevant applications and I think that I'd get a lot of use out of an app that's dedicated to documentation / reference. Additionally, having a bunch of tabs open in my browser is a little distracting and inefficient. I also have to use my sys resources wisely because I'm on an older machine. So yea - mainly just trying to streamline my workflow a bit.
Sure, I just found React be much more easier to use than Closure.
Dash.. Best app for your needs. http://kapeli.com/dash
http://kapeli.com/dash
Considering you would need to: - open the application - type your search term - read the results Why not just set up MDN as a search engine. Go to [developer.mozilla.org](https://developer.mozilla.org/), right-click the search box and choose 'Add as search engine'. Give it a keyword of 'mdn'. Now, when you need to reference it: - ctrl-n for a new window - type 'mdn ____' using your search term - read the results
The author doesn't point out that the module pattern allows for data hiding using the closure created when the "constructor" is invoked. function MyModule() { // Items is "hidden" from implementors var items = []; // A specific interface to items is provided // Implementors cannot access items directly return { pop: function() { return items.pop(); }, push: function(item) { return items.push(item); } } } He also doesn't point out another specific drawback to the module pattern: one closure and N functions are added to the heap every time an instance is created. That is, each function the instance has is redeclared every time the "constructor" is invoked, and a closure remains on the heap as there is a reference to functions that were created within it. This can lead to increased memory usage. var arr = []; for (var i = 0; i &lt; 1000, i++) { arr.push(MyModule()); } // 1000 closures and 2000 functions are added to the heap Another property of the module pattern is that it prevents monkey-patching. That is, you cannot modify or add to the prototype and have all instances get the change. This can be seen as both a benefit and a drawback, depending on the use case. **When should you use the module pattern?** * When you want to hide data from implementors. * When you only have one instance of something and never extend it. **When should you avoid using the module pattern?** * When you have many instances of something. * When you want to inherit from something. * When you want instances of something to be identifiable. * When you want something to be patchable. 
That's a great way if you're looking for just reference - a desktop app might be a little much. However, I'm looking for something a bit more involved. Dash integrates with other apps for reference on key command and Dash supports things like favorites and code snippets. Seems like what I'm looking for but we'll see.
If you want a _real_ module pattern, use RequireJS or node. :) And use simple constructors for best performance, as described [here](http://www.html5rocks.com/en/tutorials/speed/v8/), rather than tinkering with instanceof. Add instance methods by attaching them to the prototype.
Can you please provide an example? I am just starting with RequireJS after watching some youtube videos of Jesse Warden, so I currently have this: http://pastie.org/8570247 Is that wrong? I wish I could finally understand these 'small' differences in implementations. I am trying to get better at JavaScript (have already read few books/articles and also developed some web components), but I am still unable to get grasp of all the theory there is. Every time I feel like I am finally getting into it, someone like lazd come and ruin my world :)
Yeah we aren't using that word in that way, also browserify 4 life!
We're using the word "module" in two different senses. The article is about a technique for making objects. You guys are talking about modules as a method to organize code. The distinction being that whether you organize your code via requirejs, browserify, or you don't use modules, you'll still have to create objects somehow.
I haven't used it but it looks awesome. I am done trying to make custom elements (directives) work the way you would expect in AngularJS. CanJS makes it look like you can do that much more easily. However, I found this http://customelements.io/ and now I am thinking next project I will start using that stuff.
First of, thanks for all the amazing comments, was out for a day and am amazed to see so much help and input from everyone. Kudos! **So Far So Good** I like the idea of learning a bit more about VanillaJS as well as one MVC framework of my choice (either AngularJS vie Eggpoint or Ember together with bootstrap), but here is one more mindblock I got. **Challenge**I'm looking to learn the vital few tools and keep hearing and reading alot about Ruby on Rails, since it's very popular and used for Rapid development. For the kind of webapps I intend to produce (probably not single page apps) I wonder if it wouldn't be better to got down the RoR route. So here are my questions. **Questions** 1. In what aspect is coding RoR easier/more challenging than JS and AngularJS? 2. What I am looking for is to preferably learn one thing more in depth which allows me to create Webapps as well as the option to port those webapps into Mobile Apps(non native), can RoR/Angular provide that? 3. I recently set up an RoR environment on Ubuntu, which was a pain in the a**, is that the same case with Angular and other development Frameworks? 4. Which route would you recommend? Thanks upfront for any input!
Mentioning the heap isn't distracting since it covers memory usage, not just speed.
Thanks for the input, any favorite resources you can recommend for learning VanillaJS? Regarding the demos, no sweat, I understand =) 
Yeah yeah.. The "original" module pattern so to speak was created to fix the issues of global scope, lack of 'private' API, etc. AMD is another, and much improved, "module pattern." CommonJS is yet another "module pattern." But you can argue semantics all day.. :)
Basically, the whole point of the "module pattern" is to keep your code self-contained, and not spilling out into the global namespace. If you want to use a variable you need to "import" it explicitly by passing it along to the arguments of your closure. [See here](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html), where jQuery and YAHOO are passed along. The module pattern also allows you to use "private" functions that won't get exported to users of your API. All these issues can be solved more elegantly by using a solution like RequireJS or browserify, which also manages dependencies and bundling for you. You can have small, self-contained bits of code with their own "imports" and "exports", and private APIs. Your RequireJS code looks great. If you want to see how that example might look with node + browserify: http://pastie.org/8570579
I posted over there, too. Trying to cast a wide net. Thanks for letting it stay!
Go here and do what he says... http://javascriptissexy.com/how-to-learn-javascript-properly/
The main attraction of this isn't the ability to animate html elements, but that that html elements can be animated in an environment similar to the physics engines used by game developers. Being able to emulate attraction, momentum, etc makes the visual effect much more pleasing vs fades, linear transitions, etc that jquery provides. I'm not knocking jquery, but if you're a fan of making the web look cooler without much extra work, aka jquery, this should excite you. 
Let me correct myself, fades, transitions are also done via css3, and can emulate certain behaviors via tweening but this appears to be built in as an environment vs frame by frame type animation. I do like being able to see the growth of projects like these, but the fact that they will be releasing it as open source is a positive note. I don't know what it's like to work on such a public project, but I myself might want to wait until something is truly ready, before release, so early criticism doesn't unjustly limit the potential. 
About time it got rid of the old polling async tests. But now it needs to add promise support, so a promise can be returned from the test, instead of calling the done function! 
fine, edited
you can [data hide like this](https://gist.github.com/calvinmetcalf/8094798), I was contrasting defining methods this way (this.method or api.method, they are both the same since we defined api to be this) as opposed to defining our methods outside the constructor using prototype. 
fixed, thank you
You do not gain any of the benefits you listed with this code. All the benefits come from using prototypes **not** from using "constructor".
Quite slow for me on mobile (Chrome on Android)
I believe this could be done in CSS3. In my book, using JS for what could be achieved with HTML/CSS is abuse.
~~Inside the the constructor we created, `this` which we aliased to `api` refers to the prototype.~~ By constructor I was meaning use a constructor function to create an object with a prototype chain. Edit: Even using 'this' you'll still get some of the benefits.
Search no more. When I migrated from Linux to OS X this was one of the first applications I installed. I found it while still being a Linux desktop user, and I loved it, I was jealous because Linux does not have this kind of software. It's amazing to have all that documentation in the same desktop app.
JS SQL processor with query optimizer is very interesting. Only trivial query can do with sync process. Query op should be async from the ground up. Nodejs don't need your library. 
A really simple example would be buy some amount of BTC if the price goes below some set amount, and sell them if it raises above some other amount. You could make them as simple or complex as you'd like. I should add some examples to the project.
Cool effect! I like it.
This is fantastic! One idea: Maybe map to the outside of a globe instead of to the inside. Limit the altitude and amount of tilt to keep the earth in-frame; that might make it easier to scan around without ruining the asethetics. Super cool!
No it doesn't. `this` refers to the object you are creating, **not** to the prototype of that object. You are re-creating all the functions all over again for every instance separately thus you will not get any of the benefits. To get those benefits you will need to put methods on the prototype.
That's gorgeous.
That is awesome! Great job
true I miss spoke, you will get some of the benifits, but think of it as a stepping stone towards real prototype objects.
does not work
IMO articles like this could be considered potentially harmful. The main thing they seem to communicate is a lack of understanding about how things work. The first thing to realize is that `.data()` and `data-...` are not equivalent. Naming convention problem perhaps, but you need to know this to write good JS. Using `.data()` maps to jQuery's internal representation of what data that element contains, not what `data-` attributes are set on it. The reason for that is that DOM access is very slow, while storing things in memory is not. Here's what the [jQuery docs](http://api.jquery.com/data/) say: &gt; Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute. So, it maps to memory first and then falls back to `data-` attributes. This means that you get unexpected behavior, true. However what you need to know is that you can always rely on `.data()` calls from javascript, and if you ever really **really** need to look at or set the actual attribute use `$.attr('data-...', value)`. There's no need to create a rule to use one or the other exclusively, just understand how they differ. On the string / number thing, the docs say this: &gt; A value is only converted to a number if doing so doesn't change the value's representation. For example, "1E02" and "100.000" are equivalent as numbers (numeric value 100) but converting them would alter their representation so they are left as strings. So what if you don't get the exact data type back you put in? Javascript is a loosely typed language, and that means you can treat data types as other data types. Yes, if you're storing number like sequences you may need to cast them back to strings but you have to do that kind of thing all the time filtering user input. Finally, I wasn't sure what you meant by "the same instance of jquery everywhere". Are you running multiple versions of jquery on one page? Because that's a terrible idea. Or that you have to use variables in the same scope because the data is tied to that? If you see this code, `.data()` is above scope issues. $b = $('body') $b.data('test', true); (function () { var $b = $('body') $b.data('test', false); $('body').data() })(); $('body').data()
If your JS file is several hundred lines long, you should consider using a dependency manager like RequireJS or Node + Browserify to separate JS files. I'd also suggest learning about class patterns and general object-oriented programming. Here's how [one of my projects](https://github.com/mattdesl/cam3d/tree/master/lib) looks with browserify, for example. 
what do you expect and what are you getting?
The module pattern is intended to contain an entire self-sustaining body of code, like a section of a website, or a set of utility functions, or to hide private data relating to that code from the outside. It is not meant as a factory pattern to be called multiple times like the author suggests, and it's not meant to be inherited. It is also typically used with an immediately executing function, or in a requirejs define() (which essentially can be thought of in the same way -- most immediately executed module functions can be dropped into a define() with little modification). The author has mistaken the module pattern as an alternative to a constructor function, which it is absolutely not. 
I believe we are talking about different uses of the term 'module pattern', [the one I'm talking about](http://stackoverflow.com/a/19801321) is promoted as an alternative to constructors. To repeat module being used in 2 different senses.
I feel like this would work really well with a Day/Night cycle 
Your link precisely contradicts your statement. The last block of code is the module pattern. 
That is really slick! I really enjoy how the edges of, say, boxes or the cliff side, shows a that there is a dark shadow if the light source is above the edge. This creates the illusion of a rounded edge. Looks very natural, and yet I can't find the words to explain this type of light behaviour. Very slick indeed. I don't know if it is just me, but when I tried the Lambert shading demo, it appears almost like the texture behind my mouse pointer (directly under the light) is bulging like a fish eye a little bit. It's hard to notice, but enough to distract me. Anyone else see that?
OK shitty link sorry, on the train so can't easily find links, but there is for serious an boat load of code in the wild that uses the module pattern as a constructor, off the top of my head, Pouchdb does (and did before I became involved). I'm not saying it's a good pattern , just that it exists in the wild as a constructor. 
If they are indeed using it as a constructor, then that's improper. The module pattern is a function that is meant as initialization and bootstrapping code to expose an API. 
I'm expecting sound and not getting any. This is from my Android device. 
someone on the internet is wrong you say :)
updated it even more based on your comments
updated it based on your coments
Node.js my nigga
It seems like you may be confused about what PhantomJS does. Phantom is Webkit based browser similar to Chrome or Safari, just without a UI. It's a command line application that is driven with Javascript instead of a mouse and keyboard. You can use PhantomJS or CasperJS to scrape sites, that's one of the use cases for both.
Sounds like they made it a lot more like Mocha.
PhantomJS doesn't use a browser you already have installed. It is it's own WebKit based browser for running tests. So you need to install it just like a browser needs to be installed.
domain didn't resolve when I posted :) 
Well said, /u/drunkenfaggot.
Eff Why Eye, for those not superfamiliary (as I) a simple pipe delineation is sufficient. e.g. this included JQuery, JQueryUI and Knockout knockout|jquery(ui)?
I know yours is an application written in jQuery, but I think you can take a page from other people's books. I personally really like AngularJS's opinion: * **Services** make AJAX calls and can be considered the API with the back-end * **Directives** make changes to the DOM * **Controllers** glue views and the services together as well as hold the application logic. (business logic is _always_ in the back-end. **never trust the client**). This is obviously a loose interpretation and not at all a stead-fast rule, but I've stuck to it pretty closely and it has worked out for me well. Firstly, if your application is a SPA, I would get familiar with requirejs. It's essentially lazy loading dependency injection of your JavaScript files. It encourages modular design through opinion (and helps you by keeping variables off of window), but you can write modular code without it. I would identify the handful of main areas of your application. I don't know your application, so I'm going to make things up based on some simple project management software. * User Settings * Account Settings * Projects List * Todo List * Bulletin These are called modules. For each of these, create a directory in your app's source directory. Each module should have a main file (perhaps the name of that module, mirroring the directory name) that bootstraps that module. Get familiar with the module pattern: window.Accounts = (function(undefined) { var Accounts = {}; ... return Accounts; })(); This allows you keep data that only the Account module should use private. There are variations of the module pattern, but they are all pretty similar. Create a file (or directory if there'll be more than one file of the same type) for code that will interact with the back-end. This will be your module's API. Make it a point to only use $.ajax() in this file. Expose that API with the module pattern and keep it as simple as possible. Create another file (or directory / files) for code that'll interact with the DOM. This means attaching event handlers, updating the DOM with new data, etc. Make it a point to (try) to only use DOM selectors in this file. Expose any API to the DOM with the module pattern. The glue is your controller. This contains your application logic (what the user can or cannot do at certain times), etc. Try not to use jQuery in here -- just vanilla JavaScript. The idea is that because the different files are concerned with only one topic, one purpose (DOM, AJAX, and Application Logic), it's both easier to find the code necessary to make changes, and each portion can change without changing other portions. At this point, it's important to note that both the DOM-related files and the AJAX-related files only talk with the controllers. AJAX and DOM code should never talk to one another directly. There are a couple ways of organizing things, so take your application into consideration, but one way of doing it is having the three sections included before the main module file. These files would simply define functions on the global scope that the main module file would call and then delete their references on the global scope. The module file would inject the module object (var Accounts from above) into these functions so that each portion could have a reference to it Another way I've seen is having the module included first, and then there aren't any global variables besides each module. in the controllers, etc., they'd do: var Accounts = window.Accounts = window.Accounts || {}; I hope I haven't talked to much, and I hope I have helped at least a little. 
Throw in a day night cycle and some particle system dust with some sun rays and you've got yourself a stew going.
I assume it is an illusion due to the orthographic projection.
~~They run on Node.js on the server-side. Not on the client-side in a browser.~~ I was wrong, they are standalone apps. However, the meat of what I said is true, they are server-side(or desktop) applications, not client-side(read: browser) libraries.
[Yup.](http://jsfiddle.net/72v6A/) Your inclination is correct. You can only do this if the originating site sent the correct mime type or if the site used the Access-Control-Allow-Origin method ([see an example with an appropriate error here](http://jsfiddle.net/72v6A/1/)).
It's because the server in question is sending the file as plain text, and browsers are extremely picky about the MIME type for loading CSS files. Your example would have worked because `http://a.thumbs.redditmedia.com/P_ehPG9iLnVtaWzB.css` is returned with the correct MIME type.
Try pasting the stylesheet into a gist.github.com and using rawgithub instead.
Looks like you've found the solution. rawgithub.com automatically sets the correct mime type, which is exactly what I need :) Thanks a bunch!
Surprisingly cool.
There are also some neat plugins. For Alfred: http://joeworkman.net/blog/post-30037947509 For VIM: https://github.com/rizzatti/dash.vim And many others. But I use VIM and alfred constantly. 
Ah, but there's a Kickstarter for that very process: http://www.kickstarter.com/projects/finnmorgan/sprite-lamp-dynamic-lighting-for-2d-art
I don't think they have something to do with Node.js. They are separate runtimes.
document.getElementById("myElementDom").addEventListener("click", function(e){ alert(JSON.stringify(e)); });
what about other event listeners? the same instruction?
I stand corrected. I had read about installing Casper via npm, then found the note on their website saying &gt;While CasperJS is installable via npm, it’s not a NodeJS package I had assumed phantomjs was in the same boat before reading that casperjs note, too. Not because of a phantomjs npm install(which doesnt exist) but because of the casperjs npm install. 
You should use the plugins from Dash's Preferences &gt; Integration, otherwise you might get out of date stuff (like the Alfred one you linked to). Disclaimer: I'm Dash's developer.
Linux and Windows have Zeal (www.zealdocs.org), which can use all of Dash's docsets. Disclaimer: I'm Dash's developer.
Don't take advice from anyone who doesn't understand the requirements of your system. For example, I see in this thread that someone suggested the MEAN stack. Well, MongoDB is a fine DB for SOME things. If you need ACID compliance then you'll have to move the 2-phase commit to the application layer. This can be a huge endeavor that most developers will get wrong. Look at every level of the stack and choose based not on a popular acronym but on the set of tools that works best with the team's skills, you current infrastructure, where you think technology is going to generally go in the future, etc. There's more to picking a stack because you think it's cool or you think everyone's doing it. A word of advice from someone who's done rewrites more times than they can count. If you system is sufficiently complex, you cannot possibly capture all the requirements in the current system. You also will wrongly dismiss features as unnecessary or not used. If your user base is reasonably large, you will find someone uses that feature. When you redesign, beware of the 2nd generation over-design and the first-generation under-design (even if it's a rewrite, this can happen to a team who did NOT design the first system). Make sure your design is flexible and anticipates change and customization through configuration and custom code. I would also suggest a slow migration to the next generation system. Also, give customers a chance to test drive the new. If possible, have a fallback plan. Good luck.
I'm a derp. I guess I glossed over the second line of your original post.
Given your constraints, it sounds like you're doing this to learn the native DOM API and builds skills, not write a serious app. With that goal in mind, I'd suggest you write a bookmarklet that adds some interesting piece of functionality to the page. Here's a fun example: https://kickassapp.com
AngularJS has watch expressions which can look at values of objects and strings and perform some function when those values are updated. Without going the Angular route (steep learning curve IMO), you can use "on" event from JQuery or addEventListener as others have mentioned. This applies to string values and actions for input elements mostly. If you want to watch strings within other variables, then it may be possible using the object.watch function. [Here's a SO example for that.](http://stackoverflow.com/questions/1759987/listening-for-variable-changes-in-javascript-or-jqueryhttp://stackoverflow.com/questions/1759987/listening-for-variable-changes-in-javascript-or-jquery)
This is pretty cool. If you're wondering how it works, it basically uses [Esprima](http://esprima.org/) to transform JS code into an abstract syntax tree, and then [maps node types to sounds](https://github.com/amasad/soundofjs/blob/gh-pages/lib/sounds.js#L32).
Hmmm. What've you found lacking thus far? I haven't gotten into super complex SQL yet and I'm curious what roadblocks I'll hit in the future 
I want a library that allows me to setup keyboard events on certain elements so they only fire when that element (or any of its children) are in `:focus`.
Interesting read. I wonder why key is an optional value when it moves list-wise diffs into O(n) ... couldn't react supply UID keys for nodes that are not supplied with one?
So far joins and group by. Here is an example of my ugly as sin SQL: var archiveByMonthQuery = [ 'select createdAt, count(createdAt) as number, title, content, status, slug from blog ', 'where createdAt &gt; "'+yearTemp+'"', 'and status = 1' , 'and createdAt &lt; "'+yearTemp2+'"', 'GROUP BY MONTH(createdAt) ', 'ORDER BY createdAt desc'].join('\n'); Writing SQL in javascript is misery.
No, because you can't solve an identity issue with UID generation.
Why not? If the user can supply the key in the form of a UID, the framework could also supply it. The docs state without a key the diff is O(n^2 ) with a unique key it is O(n).
Picky? It's a requirement! EDIT: And oblivious to at least one reddiot. And now there are two.
MEAN stack is cool, but if you really need ACID, just use sequilze.js+Postgress instead of Mongo. Angular is the best clientside framework, backbone is shit, ember is shit. knockout is OK, but it's feature set is very limited. Angular fits any project where you don't care about SEO. 
The render function for a list looks something like render: function() { return &lt;div&gt;{someArray.map(function(element) { return &lt;SomeObject someProp={element.someData} /&gt;; })}&lt;/div&gt;; } What React sees between your two renders is // First render &lt;div&gt;[ &lt;SomeObject someProp={{text: 'first'}} /&gt;, &lt;SomeObject someProp={{text: 'second'}} /&gt;, &lt;SomeObject someProp={{text: 'third'}} /&gt; ]&lt;/div&gt; // Second render &lt;div&gt;[ &lt;SomeObject someProp={{text: 'second'}} /&gt;, &lt;SomeObject someProp={{text: 'third'}} /&gt; ]&lt;/div&gt; The only way for React to guess would be to compare all the props and see if they are deeply equal. This is tricky for multiple reasons - Comparing objects is hard. Are two functions always returning the same thing? - Doing a deep comparison can be very expensive quickly. It is not uncommon to pass an entire collection as props. - What if a small part of the object changes (timestamp), should it be the same object or not? How to know which field is discriminative (id vs timestamp)? This is the kind of hard problem that doesn't have a good algorithmic solution. Instead of trying to be magical, React does nothing by default but lets the developer give hints.
Again, the main problem here is identity. I might want to have two fields that are exactly the same in all properties, which still does not mean that they're the same field. For example in a todo application, I can allow the user to just keep adding empty elements to edit later. When the user then goes and writes "foo", "bar" and "baz" into three elements, I want there to be three distinct states being created for all the component and not any other combination of the three.
This actually isn't a hard problem with immutable data structures. Reference equality is really easy. This is how Om[1] makes react so fast. [1] https://github.com/swannodette/om
I had thought I had seen that before, but I went and looked at the Phantomjs pages and couldn't find it on the Download or Quick Start page. But now my confusion is understandable at least.
Immutable data structures is actually not helping in this case. They provide a fast way to check if two structures are different. They do not provide a fast way to tell if two structures are the same: if you generate two times {a: 1} and {a: 1}, they are the same but have two different pointers. Also, we want to return true if two objects are not exactly the same. For example if you have an entry and only change its name, you want to say that the two entries are the same object. Otherwise React would delete and re-create from scratch the associated DOM tree instead of just modifying the name.
English is the only language on the internet that matters. The rest can use Google translate if they absolutely need to read the your content. Don't waste your time pandering to the third world.
Not sure if that was some reference I missed or if it's common knowledge that browsers won't parse external CSS files with an incorrect MIME type. I for one didn't know this until now, especially considering that they are more lax with other file types.
&gt; They provide a fast way to check if two structures are different. Ignoring the obvious issue that we're talking about expressing changing state as immutable objects then which involves a lot of copying thus voiding the idea of reference equality.
Pretty cool man!
http://craig.is/killing/mice mousetrap 
What benefit does using a library add? I've done a bit with keyboard events and didn't have any trouble creating a solution from scratch. I didn't test in IE7 or older though. 
 keybHandler(e) { if (someElement == document.activeElement) {...} }
Looks promising. As a Python person, I have no idea how to run a javascript program from the command-line and [the instructions](https://github.com/mathisonian/benjamin) dont mention how to start it up. Including a few strategies in an `examples` directory would be nice. 
I feel like the merge is too forced. imo but otherwise it's pretty awesome!
I made this and mostly use it personally, but I though it might be useful to someone else. Just use jsprint(foo) instead of console.log(foo) and it'll show up in the document. Good for functional code examples, algorithms, etc. Source code (MIT): https://github.com/brigand/jsprint2 
HTML5 uses JavaScript in its core. What I realized recently is that although HTML5 has features for running your application offline (offline cache manifest and localStorage) it doesn't have much for synchronizing offline captured data with the server when connection is restored. You could base your project on this and make it easy for developers to implement sync between localStorage and server API. 
Here is what the linked meme says in case it is blocked at your school/work or is unavailable for any reason: #***Success Kid*** &gt;***Post Title:*** *Today was a good day meme also applicable here* &gt;***Top:*** *FIXED EVERY ERROR IN JSLINT AND COPY PASTES THE CODE BACK* &gt;***Bottom:*** *STILL WORKS* [Original Link^1](http://imgur.com/o2awSdm) | [Meme Template^2](http://imgur.com/memegen/create/o2awSdm)
Downvoted because memes are a lazy substitute for content that I don't want filling up subreddits I use to find resources to improve my skills.
Just a nitpick, but qSA returns a DOM collection, which is array-like, but not a fully fledged array. 
Please note, this adds a package.json and a node_modules directory to your project directory. If you're like me, you don't want extra cruft introduced into project, so I tend to steer clear of using npm unless I'm writing a node module. Nevertheless, this is an good alternative to purchasing LiveReload.
Looks a bit complicated. I'd like to recommend [James-reload](https://github.com/rikukissa/james-reload) for live reload while developing. It was originally just a plugin for [James.js](https://github.com/leonidas/james.js) but a few days ago I decided to add a binary to use it without using James.js itself. I'm currently using it in couple of my work projects and I think it's pretty handy :)
To play with the code: [liveweave.com/p4l3ds](http://liveweave.com/p4l3ds) Author attribution @ Github: [sebleedelisle](https://github.com/sebleedelisle/) Edit: Here's a version that will work in Chrome (just change 'raw.github.com' to 'rawgithub.com': Edit: [liveweave.com/d2tM9p] (http://liveweave.com/d2tM9p)
You are absolutely right, I add the node related files/dirs to my .gitignore and remove the script from the application.html.erb before pushing to other devs for this reason. 
boo! Only reason you wrote this article because you choose ember. Otherwise the choice is obvious
Won't work for me, Chrome on Windows 7: ``Refused to execute script from 'https://raw.github.com/sebleedelisle/live-coding-presentations/master/2011/JSSnow/js/ThreeCanvas.js' because its MIME type ('text/plain') is not executable, and strict MIME type checking is enabled.``
Use https://rawgithub.com/ instead of raw.github.com for static asset serving please, check this out http://screencast.com/t/t5qg5tt1t
yes...I just noticed Chrome is having this problem. Try this instead: [liveweave.com/d2tM9p] (http://liveweave.com/d2tM9p)
i don't really think of the pre-jQuery days as days of real UI creation :)
Very cool! I'd like to see the drops roll down and merge with others below them. 
Or nothing on Chrome on Mac... Getting the same MIME error.
Great write-up, I'm personally an Angular fan but I could definitely see how the weird API and magic stuff could deter newcomers, it's very much the Angular way or the highway. Still though, if you try out different frameworks and could provide rationale for picking one over the others, you're in a better shape than many others who just pick one and stick to it.
&gt;you need a lot of boiler plate code to make it work well &gt;...prior experience in creating UI with Javascript is rendered almost useless. No matter who you are, you have a very steep learning curve and along the way you really start questioning the benefit. Learn to code in the first place and quit using these crutches. And if you learn one, but get a job where they use another, you're screwed. Note: this is a bad review cause he says nothing negative about his chosen crutch which makes you question the whole write up.
First of all, don't ever shorten JavaScript to Java as it is a different language on it's own. Second, paste your code into something like http://jsfiddle.net/ I don't want to be a duck but your question isn't clear at all, so I can't help you unfortunately :( 
Ooohh... I don't feel so good
$.get is asynchronous by default so you can't store it in a global variable for use outside the function. x is declared in 'MoreTest()' and you can only use it within that function. If you want to store the result in a global variable, you should make it synchronous: check out [this Stackoverflow topic](http://stackoverflow.com/questions/133310/how-can-i-get-jquery-to-perform-a-synchronous-rather-than-asynchronous-ajax-re) EDIT: [This will work, hope it helps!](http://jsfiddle.net/jillesme/HTPKt/)
So in Javascript you can't change the value of a variable outside the function? EDIT: Made it happen, it was the numbers being single quotes instead of double in addition to the HTML case and the var. THANKS EVERYONE!
The *alert* at the bottom executes before the request that loads *testy.php* has had chance to execute/finish. It does not wait until the *$.get* action completes before it continues with the next statement. You can make the request synchronous (instead of asynchronous) and then it will work as you expected but this is not a good idea. A slow request would make your page unresponsive until it was complete. 
lol you'd have to be foolish to write a large app with no framework
I will be using the heck out of this. Thanks!
You could also replace console.log with your function. console.log = jsprint
i've recently read the following statement in a book about angular, quoting from memory: &gt; JQuery is imperative, Angular is declarative. This is a very important point that lets Angular look strange to the newcomer, particularly with directives and stuff like transclusion. In the end it means one thing: overall, you declare WHAT you want, not HOW the thing has to be done. The detailed steps are moved into the directives and services where in an imperative framework, you'd just use that "sweet JQuery magic" (paraphrasing :P). Once you wrap your mind around that, DOM manipulation with JQuery takes a backseat. Angular still does it, jqLite comes to mind, but in a very different an non-obvious way.
raw.github.com is not meant for embedding. Try https://rawgithub.com/sebleedelisle/live-coding-presentations/master/2011/JSSnow/js/ThreeCanvas.js instead
What's wrong with console.log?
I couldn't disagree more. Why reinvent your own framework when so many good options are freely available? In most cases, if you are working for a company, you are wasting the company's time and resources. At least at every company I've worked, they pay developers to produce products, not build frameworks.
Exactly. There are so many 'extra' things beyond just the code itself that you can benefit from when using a good, public framework.
The NHS in the UK seems to be making a switch away from Oracle to an open source framework for their medical records. Here are a few links below that might be of interest to you. Nothing tondo with Javascript specificically but still might be relevant for your situation: http://www.theregister.co.uk/2013/10/10/nhs_drops_oracle_for_riak/ http://vimeo.com/63232221 
This is typical of the mindset of those who need help writing code since they've never done it from scratch before and require plugins cause they don't know how to do it themselves and then have that "me too" boxed-in look they can't break out of. Such developers also think McDonald's is a great meal. Innovation and invention will never come from you or your company.
Console.log sucks in jsfiddle with how divided the screen is already. 
Wow. I guess I should thank you for taking the time to step off your pedestal and show me how I've spent the last 15 years doing software development wrong. I'll be sure to go into the office tomorrow and let everyone on my team know we've made a mistake using a framework for our product the last 8 years. The revenue our company has made during that time was obviously a mistake. Who knew that building our own framework would benefit the company more than the millions of dollars in revenue because we focused on implementing business requirements instead of writing our own framework.
Well MY company made TONS of money which proves what I said was 100% correct!!
This is Luddite-style thinking :/
&gt; but in the Angular framework and memorizing and gaining this skill doesn’t make you a better overall software engineer or Javascript coder, it makes you better in Angular I completely agree with this statement. It really is another language; google seems to like creating their own worlds. Android is another example of this (xml structure, activities,fragments...). When using angular, it never felt like I was developing in js, just like android doesn't feel like java. However I disagree with your statement about using jquery in angular. It is completely fine to use jquery, the idea is that most jquery tasks are common, so why not throw it into a directive and reuse it. I found that Templating and data bindings removed a majority of what I used jquery for and have never had to use jquery in any of my apps. Anytime I think about using jquery, I look up the angular alternative and it always exists (ex ngAnimation). Do you have any use cases for jquery inside of an angular app?
If you give Angular one full day's worth of undivided attention, it'll start appearing simple, logical and beautiful
And i suppose you ship your own browser too, right?
Works on my phone :)
"This code can't be attacked, it's retrieving pure html with some data attributes!" - bam. &gt; Do these vulnerabilities apply if an application is on a corporate intranet? There are heaps of things that shouldn't apply just on an intranet, but most rely on it *never* being exposed in *any way* to the internet at large, which of course *never* happens.
I just have the console on another screen. Text editor on one screen, browser on another and console on another ^^. IMO perfect for web development.
So, I did a find-in-page and looked for the word "test". No results. I don't feel like this can be a serious analysis if you don't at least think about testing; in any serious, real app that's critical. Angular makes a pretty big point of trying to be testable; I don't really know about Ember, but I know many frameworks don't really do anything to stop, as the author puts it, "spaghetti code jQuery". And I really have to disagree with the conclusion, which is basically "Angular forces you to keep your logic and presentation separated; Ember lets you use jQuery everywhere, woo!". And that's a recipe for an untestable nightmare. In short, it seems like he's dinging Backbone because it doesn't enforce any structure, and dinging Angular because it *does*. That doesn't make his eventual choice of Ember seem very objective.
This is good stuff! I would be interested in the performance consequences. Could you provide some data? Also, does this mean a more space-efficient toDataURL for images? 
Is it somehow easier to inject code into attributes of an mvc than to inject a script tag or an onmousemove attribute? I don't really see how this is a major security concern. It would be great with a better example. 
But.. this is normal base64. WTF does btoa do? EDIT: jesus, `btoa` first builds a comma-separated string of ascii decimals, that's hilariously horrible
As opposed to lemming-style? I'd bet 80% of everyone who uses these frameworks does so because they read somewhere that they are supposed to instead of having an actual need and, specifically, lack the knowledge to write their own code.
why? did people not develop any sort of "real" user interfaces prior to the creation of jQuery?
Or you can just JSON.stringify to a `&lt;pre&gt;` tag: function print(o) { var pre = document.createElement('pre'); pre.innerText = JSON.stringify(o, null, ' '); document.body.appendChild(pre); } just as easy to read. No fuss. 
You didn't understand me and saw irony where there was none. I simply do not see any value of linters as for example if it does complain about == instead of ===. Are you gonna change all your == into === despite the fact you're happy with JS casting variables into needed types? I am happy with 3 == '3' instead of writing 3 === parseInt(3, 10) much more. What else - maximum block length? When I write code it gets ugly if my methods are really long or if deeply nested so I avoid them. Using linters in these cases look like I am blind of my own code and don't know what I am doing. That's my point. And when writing software I plan ahead and then write. Not write something, don't understand it so write some more.
&gt; despite the fact you're happy with JS casting variables into needed types I think you're operating on a false premise here. Why do you assume I'm happy with JS "casting" (coercing?) variables? &gt; I am happy with 3 == '3' instead of writing 3 === parseInt(3, 10) much more. I'm happy writing `assert.equal('number', typeof num);` as one of the first few lines of my function. If an `3` ever gets compared to a `'3'`, that's a bug in my code. &gt; Using linters in these cases look like I am blind of my own code and don't know what I am doing. I *am* blind of the code, since the vast majority of the code in my project is not written by me. &gt; And when writing software I plan ahead and then write. I also try to plan, and yet I still find myself introducing bugs in my code. So I find linters helpful. Like I said, maybe you're just a much better programmer than me.
If anyone is interested go [here](https://www.meteor.com/blog/2013/12/17/meteor-070-scalable-database-queries-using-mongodb-oplog-instead-of-poll-and-diff).
For just text filters, check out the knockout punches library. http://mbest.github.io/knockout.punches/
This is why I use and recommend Backbone - gets you closer to the real code so you actually know what's going on, despite it being marginally more complex to set up.
I've been following this closely, associations were released sometime last week. Cheers!
This is just very wrong: &gt; atob(btoa([1, 2])) "1,2" the resulting base64 size is irrelevant, when btoa/atob are just plain broken for anything but strings.
I was very confused, by the way. I thought this was all about typed arrays, not plain arrays that happen to contain numbers. I guess my brain couldn't believe that something like `btoa` would accept anything but a string or a buffer.
No, it doesn't. I have no idea why the OP mentioned efficiency when this is just a standard base64 implementation. If you want a more space-efficient toDataURL for canvases, use toBlob.
I don't think I'd call it broken, "btoa" is short for "bytes to ascii", not "serialize arbitrary objects". It's just a base64 encoder, anything else seems like a complete misuse. 
oops, my bad ! Thanks for report it
people still can't create good interfaces for the web, but that's besides the point. without "real" UI creation there would've been zero need for jQuerys creation, or prototypes before that, to make it easier. jQuery didn't suddenly make GUI's "good"; it just broke down the barrier for a lot of people to hop in a develop them.
That's the issue I find here. I see no purpose of linters but consider myself average programmer despite years of experience. Good point on foreign code. This is maybe the only case I would consider using it but from experience it turned impossible. I used JSHint for it's configurability, however it failed in real life scenario. I would like to hear a success story.
&gt; this is just a standard base64 implementation Exactly, which is why I was so frustrated that there was no native way to convert a byte array to base64 in the browser. This is trivial on the server with Buffer objects.
I consider myself an above average programmer, and I find linters catch things that I miss.
Any software developer who has to reinvent everything when creating a new project is not a software developer. If you think every project has to be started from scratch like that, then read the next paragraph. Any software developer who uses frameworks is just doing "me too" coding. Nothing new. No innovation. Suburban, cracker box, same ol' same ol' living.
3/10
I'm a also a backbone fan, and not sure what I really think of angular. Its major pros are scalability through conventions, and less code to write. Cons are a very opaque DSL, proprietary and opaque abstractions, and a very ugly mixing of concerns between views and controllers.
&gt; there was no native way to convert a byte array to base64 Such as btoa and atob...? (which works in every single current browser) Also, what are you using base64 for? Every browser supports supports ArrayBuffers and Blobs now which use much less memory and are much faster than a base64 string.
A quick test with node gave me a limit around 1,000,000 arguments before throwing an error. Not sure what it is on other engines.
&gt; that's not what btoa/atob do with an array of bytes Firstly, btoa and atob do not take an `Array` of bytes, it takes a string byte array. Secondly An `Array` of `Numbers` representing bytes uses *at least 8 times more memory* than a native mutable byte array (`Uint8Array`) or `String` immutable byte array, as `Numbers` are 64 bit floats. &gt; As for ArrayBuffers and Blobs, can you find an example of natively generating a base64 string from one? Why would you want to do that? Blobs can be referenced directly as URLs so there isn't any reason to be creating data: URIs or other base64 constructs.
btoa is not a serialization format, it's an arbitrary data encoding. It sounds like you want JSON+btoa.
I want functions that only make sense for strings to only accept strings.
Then you should probably switch to a strongly typed language. Almost everything in the standard library and the DOM does type coercion instead of strict typing. It's the *JavaScript way*. It's the reason JavaScript has `==` as well as `===`.
Yep. Regarding the vulnerabilities in this deck, though, bear in mind that an extremely easy mistake to make with a Backbone app is to output unsanitized user-provided data in an Underscore template, a la `&lt;span&gt;&lt;%= userInputValue %&gt;&lt;/span&gt;`. Of course I learned this the hard way when I was first picking up Backbone (didn't get hacked, but got forcibly violated by a pen test tool). If you are using Underscore templates, default to using `&lt;%- value %&gt;`--this form HTML-escapes the value before writing it.
I've switched from the handwritten code to using charCodeAt and fromCharCode, it's a lot faster and a lot less code. Sweet! The one problem is that it fails on larger arrays (tens of thousands) in FF. So I've made a backup method for non-webkit browsers that does it in smaller chunks. https://github.com/bwiklund/blob64/blob/master/src/blob64.coffee#L8 I haven't tested it on any flavors of IE yet.
My usage is to store byte data in urls, and other limited spaces. Such as /my/resource/foo/eWVzIHRoaXMgaXMgYSBhIHJlYWwgc3RyaW5n. It's even more useful with something like msgpack. If you don't have the need for that, then this library is probably of no use to you. 
wow, I had no idea about that tool, superpromising
Really?! Link? I can't find anything on this.
That's why it is helpful to read documentation. http://knockoutjs.com/documentation/fn.html And in reality with "fn" extensions, the possibilities is almost endless, couple with some adapter for remote data loading and you can start loading data from server with one line of code.
Nice one! I don't think it needs improvement.
wat
double wat
So you are suggesting people should write everything using pure JavaScript?
Only a lazy programmer would design their own language and compiler, a real computer scientist would make their own hardware first.
He's a troll. I ain't even mad.
Thank you! There are small things which bothered me: 1. I do not properly mimic spiral's curvature at the top of the tree; 2. Colors need to change more gradually, depending on Z coordinate; 3. Shadows are not accurate; :)
Lol, wut
Here's a [simple example](http://codepen.io/anon/pen/DCkde). [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) returns an epoch time in milliseconds, so all you have to do is convert to seconds and register an interval function that updates the DOM node's `textContent` to that value every second. 
Issue #124 on GitHub.
Apps are big things these days. They incorporate immense amount of functionality - if you told a programmer in the 80s the kind of app you can write now in a month, and distribute to millions of people instantly, they'd be absolutely flabbergasted. We are constantly, and always building on the shoulders of giants. What is possible now is only because at one point in CS history someone decided they could write a C compiler from complete scratch in assembly. Just because we are getting bigger and better doesn't mean everything is doomed to fail and fall in a heap. Sure, it requires that we continue to keep vigilance about making sure our methods and techniques for controlling our process keep up with the scale of what we're using, but it doesn't mean we should shy away from it in fright. 
What are people's experience with this? I have been curious about the xdk for a while and have compiled a few of my web apps too see how they run, but have never actually published an app using it. My mobile web apps tend to be games, so I'm a bit cautious.
Heads up, this application will require an Intel XDK account to use and is an 122MB download. Does not appear to be based on another IDE (e.g. Eclipse, NetBeans). [Screenshot](http://i.imgur.com/UaPNQ5S.png).
To ask such a question shows your ineptitude more than anything, and I shall not answer it.
+/u/dogetipbot 10 doge Happy Holidays to you too!
I was told the IDE is actually Brackets.
You're a shit troll, try harder.
" Ember can do almost all that Angular can and equally fast or faster" Thus is highly biased and abstract statement. I wish author has not filled article with abstract statements like this and given solid examples. 
Cannot agree more. 
Those of us who can code, do. Funny how those who can't, call us trolls. 80% of everyone on reddit can't code.
This is a very basic question and should probably not be here. Try /r/learnjavascript instead. Have you done the JavaScript track on codecademy.com yet? If not, you should start with those tutorials to get you learning the basics. Right now you're trying to check if (the position === the whole array) which obviously isn't correct. Try something like an [indexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) check if (the position appears in the array) or a [forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) loop instead. for each position in the array: if (x === that individual position)... But seriously, you've got to spend some more time learning the basics! It's easy and fun if you just put in the hours.
`indexOf` is the native JavaScript way to do this. If you use the [Underscore](http://underscorejs.org/) library, you can do one of the following: if (_.contains(tile, playerPosition)) { // ... } or: if (_(tile).contains(playerPosition)) { // A bit slower, as it first has to wrap the array in an underscore object // ... } Note that `indexOf` is not supported in IE versions below 9. Underscore uses the native browser `indexOf` if it's available, or its own fallback method otherwise.
It looks like this is only a partial code block, and we can't really inspect the value of playerPosition, or where bla() is called. If possible when submitting examples, consider making a small sample code here: http://jsfiddle.net/ I suspect that your playerPosition is an integer, like 1,2,3, and so it doesn't match the string "1","2","3" perhaps you need == instead of === (which will auto cast your strings as integers before comparison )
&gt;for (i = _i = 0, _ref = str.length; 0 &lt;= _ref ? _i &lt; _ref : _i &gt; _ref; i = 0 &lt;= _ref ? ++_i : --_i) { fuck this coffeescript crap
the more 3rd party tools you toss into your project the cooler, more edgy, it and you are. obviously
Well Done!
Quick nitpick, he says display none when he means visibility hidden.
Some of you may have noticed it, but the author doesn't use JSX in any of his 'examples'. Without JSX: var CommentBox = React.createClass({ render: function() { return React.DOM.div({className: "commentBox"}, "Hello, world! I am a CommentBox"); } }); var Comment = React.createClass({ render: function() { return React.DOM.div({className: "comment"}, React.DOM.h2({className: "commentAuthor"}, this.props.author), React.DOM.span(null, this.props.text) ); } }); With JSX: var CommentBox = React.createClass({ render: function() { return &lt;div class='commentBox'&gt;Hello, world! I am a CommentBox&lt;/div&gt; } }); var Comment = React.createClass({ render: function() { return &lt;div class='comment'&gt; &lt;h2 class='author'&gt;{this.props.author}&lt;/h2&gt; &lt;span&gt;{this.props.text}&lt;/span&gt; &lt;/div&gt; } }); Personally, that makes a MASSIVE difference in usability and is a much fairer comparison to what ClojureScript and Om actually offer to the table.
How often will that be the only js requirement on a page where performance is so important that you can't include jquery?
Or a proper MVC framework...
 var greeting = function(name) { ... } is an anonymous function assigned to a normal variable. The effect is almost the same as function greeting(name) { ... } So... I guess you can solve it now? 
Okay, so it says I got it right. I did this. var greeting = function (InfestationVids) { greeting("Hi" + " " + "InfestationVids") ; }; Thanks for all the help
In the link section at the end of the article there's a reference to Pump, https://github.com/piranha/pump, that provides Hiccup style templating. Edit: to be clear, Pump is a separate Clojurescript library over React 
Correct, pretty sure it says on the site as well.
The sortable stuff is part of jQuery UI, not jQuery. So it's fairly plausible. I have [a project](http://basketball-gm.com/) that includes jQuery UI only for sortable because I couldn't find an easy and smaller replacement.
Nothing here about browser support, though, which is probably the bulk of the jQuery/UI code needed for this.
I've been tasked with building a thing, problem is I've only worked with tape measure, paint, and a little bit with a rubber mallet. What should I do? *TL;DR*: try giving some details at all, and maybe start on a few tutorials.
In essence, you've got data about stuff and what it costs, users can select what they want and you add all the costs together and put 'em on the page. &lt;div id="items"&gt; &lt;input type="checkbox" data-cost="50" id="item-1"&gt; &lt;label for="item-1"&gt;Item 1&lt;/label&gt; &lt;input type="checkbox" data-cost="40" id="item-2"&gt; &lt;label for="item-2"&gt;Item 2&lt;/label&gt; &lt;/div&gt; &lt;button id="submit-button"&gt;Calculate&lt;/button&gt; &lt;div id="output"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; $("#submit-button").click(function(){ var cost = 0; $("#items input[checked]").each(function(){ cost += $(this).data('cost'); }) $("#output").html("total cost is " + cost); }); &lt;/script&gt; I just whipped this up haven't tested it at all, but that sounds like what you're trying to do.... if you're using jquery &lt; 1.6, [the data attribute changes slightly](http://api.jquery.com/data/#data-html5), if I'm reading it right, it'll need to be `.data('data-cost')` -- but I'm not certain.
I *think* what you're asking about is how to write your own Node modules. The official documentation is [here](http://nodejs.org/api/modules.html), and you can find a *very* basic tutorial [here](http://howtonode.org/creating-custom-modules). If you have any more specific questions, feel free to ask.
For larger collections (at least in angular), I've memoized my filters to help with performance. Not always appropiate, but can be a help.
You can organize your files however you would like. For example in some of our projects we have a simple `utils/` folder and we just `require()` right out of there. If you would like to build and share a library, specifically one that can be installed/published later via npm, then you should look in to developing &amp; publishing NPMs. It really boils down to a project folder with a package.json and a script file, organized however you wish. If you're going to just be creating your own individual `.js` files that have your code organized how you want, just look in to how `require()` works, and the `modules.exports` stuff. Again, those parts you can organize however you'd like. Hope that helps!
Basically caches the result of the function, so if the input parameters are the same - returns the cached result instead of the calculated result. For simplicity sake, lets say you have a key/value lookup filter with a few thousand items in the collection, and it's often that you will request the same thing many times. e.g: a city-code or something, where there are thousands of possible values. The filter executes once, looking up 'XXY-23' to return the display value, then caches that result - the next time it executes it see's that you are looking up 'XXY-23' for a given array of thousands of items, instead of looping through it again - it returns the cached result. or, lets say your doing sorting/ordering on a large set of items - first time you say 'sort by X, ascending' - do the sort, cache the results - next time the user does the same sort (ie: sorts by X, sorts by Y, then goes back and does sort by X), the second time they sort - the results will be cached. The classic example for memoize seems to be [fibonacci sequences](http://lodash.com/docs#memoize), but can be applied to many scenarios - and filters is one of them. The key for this to be useful though, is given the same inputs every time - you expect the same out puts. x=1,y=2 returns 3 one time, but 10 another, and 6 another - memoizing wouldn't be appropriate. but, if X=1,y=2 always returns 3 (or at least within a window of which is acceptable to your use case) then it might be a good fit. 
Wow what a tedious and hideous idea!
The disconnect here is the fact that node modules are just javascript files and are not actually compiled down to a library (dll) like you would have in .NET that is versioned on the compiled file itself. You can solve this by packaging your module (library) to publish on npm, and then easily add it with npm install in all your projects that need it, but if it's code you don't want to be published, you would need to set up a private npm repo but it's not exactly easy. https://npmjs.org/doc/registry.html#Can-I-run-my-own-private-registry You also could reference the original absolute path for your "libraries" with require(), or copy and paste the "libraries" to each of your project's own folders, but any changes would have to be dealt with in each project which doesn't make much sense.
 &lt;marquee&gt;&lt;blink&gt;What's wrong with the parallax effect?&lt;/blink&gt;&lt;/marquee&gt;
The issue might be that this mechanism is a very long winded and complicated way to perform a simple task. You could do it with classes instead of ids and never have to register any magic functions. 
Although there are situations where navigation that works in this way may be desirable, it is not going to be desirable in almost every situation -- including your example. Let's imagine you're someone going to a website to read cat facts, do you want to have to load the page, select a fact, read for a few seconds, unselect that fact, select the next fact, read the fact, unselect the fact, select the next fact...? As the other poster said it's *tedious* and anyone that encountered it would lose the will to live. Navigation isn't just about getting from one piece of content to another, it's about logically separating out the different parts of an application. For example imagine you have someone applying for a job, you might have one section where they can input their personal details, one section where they can provide their employment history and one section where they can fill out their application details... this allows the user to switch context ("I'm now entering my personal details", "I'm now talking about my history") and improves their experience. A click or a key from a user is expensive (in energy) so you should aim to minimise them. There's a very thin line between too much separation and too little, although part of the challenge is working out where that line is! :D With regards to the code, registering listeners through Javascript seems like an odd choice when you're working with HTML. You would be much better off if your HTML declared which elements should be listened to, as it separates out your concerns. In an ideal world your Javascript would control the selection process and your HTML defines the information. You should be able to add new elements, change elements, without needing to touch the Javascript. I like to ask myself "if someone who only knows HTML comes along, can they look at this HTML and understand how to work with the Javascript (without needing to try and read the javascript...)." Here is a super lazy example of how you could do it with a lot less code, easier to manage HTML and a better user experience[1]: http://jsfiddle.net/citricsquid/ZnFYR/ [1] I wouldn't design it this way, and the code could be even simpler (I went for expressive over clever) but it should demonstrate the idea.
You also don't actually need to publish to npm if you have a WIP library you can include the package name and a link to a tarball inside your package.json dependencies. The tarball can come from a GitHub branch aswell which is nice, the contents of the tarball must be a valid package in that it must have its own package.json and dependencies etc. Or if it's complete and you'd like to share it to the world then yes you can publish like others have said.
Congratulations, an impressive achievement in its own right!
Thank you!
Angular has been pretty frustrating to learn and debug in the last month I've been using it. I really hope 2014 isn't "the year of Angular", or at least someone works on their documentation to make it easier to understand. I've never had this much trouble getting things to work; more resources on debugging would be extremely helpful.
I am actually afraid to use it. Starting a big project next month. Debating whether to use Angular or just develop my own conventions around require.js and knockout. I'm responsible for getting a large team up to speed and I just don't see Angular as something everyone can get going with quickly.
You have successfully re-invented jQuery-ui accordions. But not as well as they did it.
I'm working on a very large AngularJS project for work. They hired a consulting company to build a website and that company decided to use Angular. It has some impressive features, but it causes some serious side effects as well. With normal JS programming when you have an error in one script or function that error only affects that script and whatever pages it's used on. Angular is designed for one-page apps where each "page" is a view that's loaded at runtime. When you click on a link you don't load a new page, you bring forward a view. This means that in order to instantiate the views you have to run the Javascript for all of them at page load. If a single controller has an error in it then it'll break everything below it, rendering the site useless. Angular can use directives to control the HTML, such as the ng-disabled directive, which disables or enables an element in the page. If that directive were to use an object incorrectly, say it expected an object but received an array, then it will throw an error within angular.js and not tell you where the source of the error really is. This leads to a debugging nightmare that takes hours to figure out. These errors can be fixed by using functions instead of directly using objects, so the point is that you need to adjust your thinking and programming style accordingly. I would say develop your website like you normally would as a multi-page website, but include AngularJS to add dynamic binding to the site. Don't build a very large website as a one-page app that consumes 100 resources and takes 30 seconds to load, killing your back-end services in the process.
That's the best description I've seen of this
I agree completely. While i am having no trouble understanding the ideas and zen behind angular - too often I find myself at the mercy of god awful documentation, and sometimes even convention. Try to figure out which css class-names Angular uses for various change animations for example. Or try to "transclude" a directive which you want to "compile" in a specific "scope". That's not only a mouth full, but I dare you to guess that the "$compile" service accepts a dom element and returns a function taking a scope. Sometimes I know what I want and the only way to get it is to read through angular source code. Fuck angular. But i do love it. 
&gt; These errors can be fixed by using functions instead of directly using objects, so the point is that you need to adjust your thinking and programming style accordingly. This has been my biggest hurdle so far, and why I have a lot of difficulty debugging. Can you give an example (not code, but quick high-level concept overview) of what you mean by using functions instead of using objects directly, and how it would affect the output of the error leading to what went wrong rather than error in angular.js?
&gt; Fuck angular. But i do love it. This sums up my experience with Angular so far perfectly. I think it's more that I'm so excited I finally got something to work the way I want it to that leads me to "I love it" than actually enjoying working with it so far.
they forgot to mention in the first point that "window" is only for a browser environment. It would be the global namespace, which I believe is "global" in node.js
Same for running javascript in windows. "this" defaults to an object with a WShell/WSH property.
I got pissed off enough that there wasn't a single regex that validated IPv6 and IPv4 addresses so I wrote my own with Python, and I wrote a test script as part of that development effort. Here it is on Stack Overflow: [The One IP Regex To Rule Them All](http://stackoverflow.com/a/14452783/1999151)
Why can't we get better terminology for responsive design? "State" and "breakpoint" are concepts that already have a meaning in software development.
THIS.
The documentation issue was what turned me off pretty quickly. I started off excited, after skimming the home page and the basic docs. I really wanted a server-side framework that focused on building a REST api quickly, without learning a new programming language, or running a heavy server. I fired up a test bed, and tried to hook it into a PostgreSQL database. I immediately hit a ton of roadblocks. It took *forever* to get the `sails-postgres` module installed, with almost no feedback. (I finally determined you need Postgres installed on the **development** machine to get the NPM module to compile — wtf?) Once I finally got the module installed, I had absolutely no help on how to set it up. The documentation is so sparse, that you are practically left just reading source code. I finally gave up, since I don't think it's worth putting the effort into learning a framework if I have to *also* learn all of the components upon which it is built just to get something useful running. Truly, I hope that something great comes out of the project, but it's not for me yet. ---- Also, I had no idea that the ORM was so limited! I'm glad I stopped when I did. Relationships are sort of in the *definition*: **O**bject **R**elational **M**apping. 
^ this.
As an aside, the linked page is a good example of why it can be counterproductive to enforce rules arbitrarily. Here's a Stack Overflow question that has been "marked as duplicate", but which has nonetheless managed to elicit one of the clearest answers to the question of what `this` does. Sometimes, a seemingly "duplicate" question, phrased a slightly different way, will produce a different, better answer than the "original".
Node.js is a server-side framework that you write your code in JavaScript. The user does not have control to disable the server-side code(JavaScript). The only exploits you expose are the same that go in any other web application. I don't think it is bad practice to build apps that use JavaScript, where did you hear this? 
that
Now you can just add some methods to make working with the DOM elements simpler. Maybe a `.insertAfter()` method, a `.css()` method, hey you could even do an `.animate()` method. Why does this sound familiar?
Do you have a way to identify a "potentially related" story ?
No. It's just links, images and headlines chosen by me. It's for a big site, but for a very niche article, so I'm putting everything in the old fashioned way. I just want: BOX-1: IMG, Headline BOX-2: IMG, Headline Etc. with the images and headlines linked.
Heh, in one of applications I wrote nearly every method started with var that = this;. I thought it was sort of cute and funny, but I also believed it was better than bind.
Well the markup is simple enough : &lt;div class='item'&gt; &lt;a href="#"&gt;&lt;img src="#"&gt;&lt;h2&gt;title&lt;/h2&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class='item'&gt; &lt;a href="#"&gt;&lt;img src="#"&gt;&lt;h2&gt;title&lt;/h2&gt;&lt;/a&gt; &lt;/div&gt; &lt;style type='text/css'&gt; .item{ width: 100px; } .item h2 { float:left; } .item img { float:left; } &lt;/style&gt; And you can use JS easily enough to generate that markup and append it to the page. But where is the data (i.e. the list of all possible image/headlines) coming from? How do you intend to choose one of them for display? These are questions you need to answer yourself.
See also [Javascript Garden's explanation](http://bonsaiden.github.io/JavaScript-Garden/#function.this). 
The ORM supports associations now.
I haven't tried this yet myself, but I think it could go something like this: app.module.controller('SearchCtrl', ['$scope', ...] function($scope){ $scope.myFunc = function(){ //check something and return true or false }; } ) HTML: &lt;button data-ng-disabled="myFunc"&gt;Ahh smoosh it.&lt;/button&gt; When a bug happens in myFunc the Javascript debugger should throw the error there instead of within the ng-disabled code in AngularJS.
There is no more concern for this than there is for any other web framework. In the end, it's all just TCP packets over the wire--so long as you adhere to the protocol correctly and handle your data correctly, there's no difference between implementing something in node.js vs. C++ vs. Java vs. any other language.
It say's in the documentation that they are planning to support ORM associations in future releases. This is not available in 0.9.0
To remind me of the perils of using `this` without thinking carefully about what I'm doing, I have my syntax highlighter display `this` in red and `self` (my preferred alias for `this` object in a method) in green. [Example](http://i.imgur.com/zX0Wxv5.gif).
I love javascript a lot. But I would love it a whole lot more if "this" could be completely revamped.
Here's a [Gist](https://gist.github.com/cyrus-and/8169187) I wrote that summarizes all the points explained in _this_ great answer. It was a useful and funny exercise.
Why?
Not going to happen. You would have to ditch the prototypal model entirely
wat
JavaScript won't revamp anything. There won't be another "use strict"-like mode. If you want different semantics, you have to use a different language. For example, Dart's `this` is lexically scoped. It's always exactly what you think it is. It always refers to *this* particular instance.
"If it is called as a method on an object, this will be the calling object." This seemingly innocuous rule leads to one kind of JavaScript gotcha: // This works as expected (nothing happens): [].forEach(alert) // This fails: (function() { return [].forEach })()(alert) The failure message is "Array.prototype.forEach called on null or undefined." If I understand correctly, this happens because in the second case we're creating a reference to Array.prototype.forEach, but because the CallExpression is on the result of our anonymous function instead of on a MemberExpression, the implicit binding of "this" to "[]" never takes place, and the method barfs. IOW, CallExpression on a MemberExpression does an implicit bind, but other CallExpressions don't.
I don't think normal browsers track mouse movement unless the browser is focused. You could solve this by using either a browser extension or by using a custom browser. If i understand you correctly your users would download a binary from you, and the browser is embedded in your game? So it wouldn't be a pure browser-based game? If you only need support IE you could use this hack to fix it: http://iedataleak.spider.io/demo or you could repeatedly load an iframe with a simple script in it a la: http://stackoverflow.com/a/10433550
When you say the engine allows you to use HTML in a window for commands, I assume (hope) you mean that the game engine uses IE's rendering engine through a DLL interface. If this is the case, then you should look for a way to inject events from the C++ event loop. If this is not the case, then my only advice is to jump ship. As an experienced C++ and JavaScript dev, this sounds like only the first circle of the embedded rendering engine hell you're descending into.
Yes! That ie hack is exactly what I was looking for. I've been pulling my hair out all night trying to get this thing to work!
I don't think "arbitrarily" means what you think it means.
self is the global in a worker
I've been using Sails a lot recently but have had similar gripes. Are there any decent alternatives?
I haven't tested this at all, but it should work barring any syntax errors, styling issues.... I've used jQuery for the dom creation for verbosity's sake. The array `data` has JSON objects with the details, two random items are chosen, marked up &amp; output to the page. &lt;div id="output"&gt;&lt;/div&gt; &lt;style type='text/css'&gt; .item{ width: 100px; } .item h2 { float:left; } .item img { float:left; } &lt;/style&gt; &lt;script type="text/javascript"&gt; data = [ {title:'title 1', href='page1.htm', src:'1.png'}, {title:'title 2', href='page2.htm', src:'2.png'}, {title:'title 3', href='page3.htm', src:'3.png'}, {title:'title 4', href='page4.htm', src:'4.png'} ]; function pickOne( a ) { return a.splice( Math.floor( Math.random() * a.length ), 1); } $([pickOne(data), pickOne(data)]).each(function(i,itm){ $newItem = $("&lt;div class='item'&gt;&lt;a href='"+itm.href+"'&gt;&lt;img src='"+itm.src+"'&gt;&lt;h2&gt;"+itm.title+"&lt;/h2&gt;&lt;/a&gt;&lt;/div&gt;") $("#output").append($newItem); }); &lt;/script&gt;
Oh, good idea. I was just fooling around in someone's Plunker to test and it does react the way you say. An example is here: http://plnkr.co/edit/n5GSs4 I was playing around with the setDetails function on line 43 and passed in bad variables, which caused the console to give me an error in the setDetails function. I went a line above at 42 and entered "var test = test;" and it gave me an error 'somewhere' in angular.js (it threw undefined variable 'test', but still, it shows the point).
Just look out, it's a "hack" for a reason. The behavior is undocumented, and it might be silently hotfixed at any time.
You do understand that even tough it's JavaScript, it runs on a server and not in the clients machine? I don't know what you've read but either you understood wrongly or someone wasn't clear. Let's do a basic example of how it goes down: - You install nodejs on the server. - You write a small app that creates an http server that listens for incoming HTTP requests and the only thing it does it to "reply" Hello World (like the example here: http://nodejs.org/) - When a user goes into that server address, his browser will make the request and the server will reply. The only thing the user would see is a string of text that says "Hello World". No HTML, no CSS, and no client-side javascript (the one you are talking about, i assume). So in short, server-side javascript is not the same as client-side. And for your sake, if you don't fully grasp these concepts or other major security concepts i wouldn't be doing things that can risk users identities.
&gt; if "this" could be completely revamped. I agree, it can't happen. It's one of the short list of permanently broken features in a language that otherwise I love. 
We are in the process of giving up on Sails since there are too many terrible design decisions baked in: - Change a static file, your entire static directory is copied silently under the hood before the change is reflected when you refresh... what? - No associations in the ORM. - Not particularly stable, not very fault tolerant towards errors. - Your models become magically global and accessible which is terrible for testing. - So much magic loading in `sails lift`, can't disable any of it either since it's not exposed. I'm glad the OP brought up leadership, I've noticed arrogance and dismissive attitudes which isn't what you're looking for when a project is young and incomplete.
I think as evidenced by this framework, monolithic codebases aren't successful in Node.js. Developers typically write single purpose modules and then you glue them together. Having a code branch that starts on this, it's not all that easy... so I can't recommend it as an alternative.
A couple of things, Expand on what you mean by kaput and it'll be easier to solve. You want to be resetting index to 5 I think in function 2 rather than 4 or you'll always miss index 4. --index and ++index make more sense so index is the actual value of the current image.
Can you show us your html as well? I don't see any detrimental syntax errors, but there is potential for breakage if you don't have an element with an id of image2. Do you get any errors in the console?
Three things: 1. The source of your problem is `titles[index=index-1]`. Use `titles[index--]` instead. 2. Avoid using inline operators like this as it can make code harder to read and modify. Instead do: index = index -1; var slideName="images/image" + titles[index] + ".jpg"; 3. Hard coding array lengths is unwise. Instead of doing: if (index &gt;= 5){index=0} Try if (index &gt;= titles.length) { index=0; } Similarly, use index = titles.length - 1; in your moveToPreviousSlide() function. Best of luck in your endeavors!
Well, both of the functions seem to work, in a fashion. If I click the 'next image' button, nothing happens on the first click but then every click after that makes it proceed to the next image. If I click the 'previous image' button, the same thing happens again, the first click doesn't work. If I then click next again, the first click again does nothing. It happens every time a switch which way I click the images.
One problem I see is that your decrement code will always skip the last slide. A ++ or -- operation will return the current value and then perform the increment. You code was performing the decrement and then returning the value. titles[index=index-1] A fix would be titles[index--] Another problem might be the fact that you're trying to access "image2" when you should just be working with "image1"; For a slideshow, I'm guessing it's odd to have two outputs. If you're working with an arrays length, it's usually best to access the length property of the array titles.length // in this case, it's equal to 5 I think you'd have to include your html in order for us to help you correctly. 
This is the relevant HTML code I have within the body; &lt;p&gt;&lt;img id="image1" src="images/image1.jpg" width="400" height="325" &gt;&lt;/p&gt; &lt;p&gt; &lt;input type="button" onClick="javascript:moveToPreviousSlide()" value="Previous Image"&gt; &lt;input type="button" onClick="javascript:moveToNextSlide()" value="Next Image"&gt; &lt;/p&gt; &lt;script&gt;moveToNextSlide();&lt;/script&gt; &lt;script&gt;moveToPreviousSlide();&lt;/script&gt; As I say, it appeared to work perfectly until I tried to bring in the second function.
Yeah switch to using --index and ++index. Value++ reads the value then adds one, ++value adds one then reads the value. (-- subtracts one)
I'm iffy on Sails too but they're moving forward in the right directions it seems. To address your points: * That's the `grunt watch` command kicking in, I personally really like grunt but I could see how it's confusing for people not used to that workflow. If you want, you could set the [log settings](http://sailsjs.org/#!documentation/config.log) to "verbose" to see when it compiles your files. * As of v0.10 [associations are supported](https://github.com/balderdashy/sails/issues/124), though it is still in beta phase... * No arguments here, it's still a very young framework and the slightest error shuts the server down. I believe they suggest you use [forever](https://npmjs.org/package/forever) to run the server such that if it does shutdown, you can spin it up again. * No arguments with the magic stuff, too, especially with their lack of documentation, it does help a little to set the log settings to "verbose" since it'll spit out a ton of information but there are still stuff you'd probably need to dive into the source code to figure out.
If you have problems like this again, get comfortable sharing/pasting your code in something like jsfiddle or jsbin. Helps everyone debug
I don't think that branch is stable, so it's still in beta mode. They haven't even done proper documentation for associations yet, they only have [this issue](https://github.com/balderdashy/sails/issues/124) on the roadmap.
Don't use incremental operators inside indexing brackets. Like... Ever. It is only cause for confusion. The move to next function should increment the index and then modulus it by 5 (or probably the length of your image array would be better do you don't have to change it later). The previous image function should decrement the index and add 5. then also modulus it by 5. This will wrap around the other way. Modify the index in one place in the function, then use it. The function should read as "increment the index, wrapping it around in necessary. Use the new index to get the new Image" Sorry if that's confusing, I'm on my phone. 
Here's a little refactor of your code with explanations of what's happening, should help you understand some stuff better. var index=0; var titles=[1,2,3,4,5]; function moveToNextSlide() { // Do this first, it just makes more logical sense to be running the index you are putting in there through the if statement rather than make assumptions about the result of this function. index++; // Use the array's length property so this function can handle an array of any size. if (index &gt;= titles.length){ index = 0; } var img = document.getElementById("image1"); // I took out your ++index because we put it above instead. var slideName="images/image" + titles[index] + ".jpg"; img.src=slideName; } function moveToPreviousSlide() { // Once again, move this up here soo you test what's going into the key. index--; // The first key is 0, so if it's less, we want to go to the end. if (index &lt; 0){ // Using length here allows this to dynamically handle any size array. The last item in a sequential array is always the length -1, because the count starts on 0. index = titles.length - 1 } var img = document.getElementById("image1"); // Pulled out the -- here because it's now above. var slideName="images/image" + titles[index] + ".jpg"; img.src=slideName; }
I would welcome someone to come up with better terminology, I recently had to describe what a state was, found it very difficult to describe
BTW, for things like this in the future, you might [try using JSfiddle](http://jsfiddle.net/). It lets you post live code snippets that people can edit, and then send back a link to the edited version, also running live. Very helpful for prototyping.
I'm not a fan of type coercion, function scope (ES6's `let` will fix that), and the lack of classes/modules (ES6/7 should fix that). It also lacks lambdas (ES6) and operator overloading. It might allow you to define operators for user-defined types at some point, but the proposal I saw for that looked a bit yucky. Named/optional arguments with default values are also missing (ES6 should have optional [but not named] arguments with default values). So, ES6/7 might be okay, but ES3/5 is pretty lame. There are also some issues with JavaScript's environment. Doc comment syntax isn't standardized and there also isn't a standardized package manager. While this stuff isn't a problem of the language itself, it's something you have to deal with if you're using it.
Instead of having to deal with nasty indexing problems, consider simply shifting your list of slides: var l = [1, 2, 3, 4, 5]; function slideNext() { l.push(l.shift()); } function slidePrev() { l.unshift(l.pop()); } // 1, 2, 3, 4, 5 slideNext(); // 2, 3, 4, 5, 1 slideNext(); // 3, 4, 5, 1, 2 slideNext(); // 4, 5, 1, 2, 3 slidePrev(); // 3, 4, 5, 1, 2 slideNext() simply removes (shifts) the first element in the list and then appends it (push) at the end. slidePrev() does the reverse by removing (popping) the last element of the list and prepends (unshift) it to the list. 
Can I ask why you would prefer tail calls to other ES6 features? Seems like the least impactful feature to me.
One word: templates. Mustache, Handlebars, etc. Take your pick - they'll all let you define your HTML elsewhere.
You could use a javascript template library like moustache or handlebars. It works great and your html stays seperated from your javascript code. 
A simple way is to create all the html in the html file, then simply hide everything you don't need. The javascript only needs to hide or show certain nodes in the DOM based on your logic. If you have server content being displayed, you can inject partial html files via AJAX. You might look into using frameworks like angular, or simpler stuff like mustache.js, but implementation details for these are outside the scope of this comment. Finally, I would say that sometimes it's ok to have a little html in your javascript, especially while you're prototyping. You can figure out how to separate it out once core functionality is established.
maybe start converting (or at least new work) is put into a javascript template object. such as (shooting from the hip here): var jsTemplate = { templates: {}, init: function() { this.templates.arbitraryTemplateIDString = {html: '&lt;strong&gt;%%name%%&lt;/strong&gt;, Hi there %%slang%%'}; } compileTemplate: function(templateIDString, valuesJSON) { //code to validate the template id string here. var returnObject = this.templates[templateIDString]; //loop over json values for (var key in valuesJSON) { if (valuesJSON.hasOwnProperty(key)) { //insert code to sanitize key and val returnObject.html = returnObject.html.replace('%%' + key + '%%', valuesJSON[key]); } else {} } return returnObject; } }; jsTemplate.init(); compiledTemplate = jsTemplate.compileTemplate('arbitraryTemplateIDString', {name: 'Joe Dirt', slang: 'Dawg'}); alert(compiledTemplate.html); --edit: This is an example and not intended to be used as-is. No need to take on another 3rd party library when you can do it yourself.
For the love of god use some kind of templating mechanism! Concatenating HTML strings is the root of all evil. There are literally dozens of options to choose from, from the simplest to the most powerful. Resig posted his micro-templating http://ejohn.org/blog/javascript-micro-templating/ example in 2008. It's only a few bytes.
I often have both types of ajax calls - returning a JSON object and returning a generated html snippet - side by side. I generally try to adopt some naming convention, like if you call foo.json you get the json object, and foo.html gives the html snippet. Anyway, if that still isn't a possibility, I'm a huge fan of templates using mustache or whatever, as everyone is saying. Good luck!
This piece of code is *very* vulnerable to XSS attacks. You **need** to use escaping, or better yet, use a templating language that does the escaping for you (Handlebars is a simple, compatible choice).
again, shooting from the hip, was more of an example than 'here copy and paste this'.
I think you're looking for an answer you're not going to get. You asked how. People have responded with answers (use templating). Your response seems to be, over and over, "Our company doesn't do things that way." So it seems your company has shot it self in the foot. While you may not be doing things right, this is where you are now.
I have yet to meet an ORM that I don't end up despising by the end of whatever project I need it in. 
Break down all of the HTML needed in a page that changes dynamically into small templates, give them a unique ID and enclose them in a DIV that hides them. When a specific chunk of HTML is needed, simply clone the node, do all necessary DOM manipulations and substitutions and then append the node into the document where needed. It doesn't require much JS to implement (and doesn't require an entire template engine), separates concerns, it's reusable, and is reasonably performant (as long as you do all manipulations before appending to the document).
I would also recommend using js-lint or js-hint, this will help with formatting, syntax errors and common gotchas. You should be able to get a plugin for your text editor, if not use a text editor that can. I would recommend Sublime Text and sublime-linter from the package manager.
Use a data binding library like knockout. I use angular but that's quite a big leap.
First time I heard about Ghost. What does it run on? (WordPress being PHP/MySQL) Sounds like it's atop a JSMVC like Ember or Angular. How is the persistence layer handled?
I finished the how to with a good sample, it's easy to start with :)
Okay, I got WebStorm, how should I set it up?
Thanks!
if the json values do not come from a trusted source, one could in theory include HTML into the JSON.. like this: compiledTemplate = jsTemplate.compileTemplate('arbitraryTemplateIDString', {name: 'Joe Dirt', slang: '&lt;script src="url/to/malicious/script"&gt;&lt;/script&gt;'}); that would embed a remote js file that contains malicious code for example. Basically you'd need code to either strip out HTML from the json, or to htmlencode the json. Doing that sanitation is quite simple (just google for 'javascript, strip html from string' or 'javascript encode string entities'). It would add ~10 more lines of code and still be lighter than a 3rd party library.
If the data you insert (the description text) contains HTML/JavaScript that attaches a submit listener to your login form, I can post a comment to your site and steal every user's password if my comment is displayed when they login.
When you use Javascript on the client with PHP and MYSQL the typical pattern is: You write Javascript in the client, send data (objects,variables etc) to PHP via AJAX calls. The PHP script then communicates with the server. With node, node *is* the server (not apache) *and* (some of) the code you write for node acts as the equivalent of PHP code used to speak to a database. You can use many databases with node (Including MYSQL) but MongoDB seems to be pretty popular 
I know it requires buying into a whole system, but Angular does a pretty solid job of keeping you from doing any HTML in your JavaScript.
Ghost is run on Node/Sqlite3 or MySQL. I think the admin/editor is Backbone.
What if the intern reuses the function with untrusted data? Do your checks remove onmouseover attributes? Do they remove nested script tags? You can never be too secure. What's the harm in adding another layer of security? Just do it on everything going forward and pay the intern to upgrade the rest.
I'm going to wear a hole in this post if I click upvote one more time. OP, you really need to bite the bullet and use a templating system. You can come up with objections until the cows come home, but this is a solved problem and if you want your solution to scale, you should stand on the shoulders of giants.
To address why MongoDB and other document databases are popular with Node.js, it is largely because they store data as binary JSON - there is no impedance mismatch for converting between objects and database rows, and no ORM needed to abstract this. Queries are also JSON objects, rather than strings.
Wait, aren't screen readers *supposed* to read what is shown on the page? If we assume a screen reader can load up the entire page with ajax, and build the DOM based on JSON munging, it seems safe to assume its javascript engine can also hide nodes. If, at that point, it stupidly reads the hidden nodes, I hope the user has the tenacity to download a better screen reader.
Regarding your edit, templating is really the only answer, and unfortunately the way it sound of what you guys have, it will be a pretty decent overhaul. The main reason to not do it is to save time on future debugging and development with better organization (if you are getting HTML from ajax calls rather than bare data like JSON, then you are taking a performance and network efficiency hit as well). If you are fairly confident that the time it takes to convert to a more efficient system will as much as break even the offset of time saved on future development, bug fix headaches, etc, it's worth it. I would play around with some of the template libraries a bit, once you get the hang of it you might find that it's not so difficult to retrofit into an existing design, or you might find it hopeless. You wouldn't want to ignore an easy upgrade, nor do you want to pitch something to higher ups you can't follow through on.
Screen readers don't read `display: none` or `speak: none`. If this is executed correctly, there will be no impact on accessibility.
This code is vulnerable to XSS attacks. Don't know what that means? Read the rest of the thread.
It's worth noting that script tags will not be executed when inserted with innerHTML. A more sophisticated attack with `onmouseover="maliciousCode()"` and a full screen element that removes itself after it injects its payload, or an `onload="maliciousCode()"` might be necessary. Regardless, if you run this code in production with user's data, you're putting your users at risk.
Interesting. So why even have a DB? You could ostensibly just have .json files and grab data from those files, if I understand correctly?
The first rule of security is trust no one.
that's right
Type coercion works well enough in other languages. Trouble comes when you combine it with dynamic types. As I say, there are some things so deeply embedded in the language, they're unfixable.
Yes, different hosts will tell you which Node.js versions they support. For example, Nodejitsu supports stable releases of 0.6.x, 0.8.x and 0.10.x, while Modulus allows you to use any Node version, including unstable releases. With your own server or a service like Amazon EC2, you can install whatever version of Node.js you want.
1) You still want an independant process to manage file locks and data caching. Imagine if you had 100 visitors trying to perform writes to the same file at once without some sort of system to manage that. 2) An external DB can be accessed by multiple instances of the application, which is critical for horizontal scaling where every instance of the site needs a common data source. These are the same reasons high traffic PHP sites don't use the built in session management.
Use AJAX to load in your templates. If I'm doing anything that has more then a single element, i do it this way. And I compile them server side and make them cacheable. 
Yes, but unlike with PHP, you don't get large shared hosting environments. Most Node hosting services give you your own VPS to run the application inside and let you choose what version of node to put on that VPS. Heroku, for example, supports any version above 0.8.5.
On your time/money comment: people recommend things because they save time and money, not cost them. Taking shortcuts by not learning useful approaches ultimately slow you down, make it difficult to implement new features, and adapt. In short, you should invest time in appropriate technologies and architectures *because* you are a small company with limited time.
I know what it means but I don't understand how exactly. Thank you
I certainly can. They're all being made custom just for the sidebar.
This looks straightforward. I'll give it a try. Thanks!
Interesting. OK, for my application I am only going to be doing the R part of CRUD. That being the case, it seems like it would be easier for me just to create JSON files and read from them with backbone, rather than just learning another DB.
If it's a health/wellness company, what are the accessibility requirements? I don't understand how companies are relying so heavily on js for their interfaces in these sectors when access tools are still lagging so far behind. I looked at js templating frameworks myself, and I can't fathom implementing them for my clients without a huge risk on the accessibility front. The other week a development team got flagged on some strange behavior in JAWS on a simple pop-up. It wasn't even that it was done "wrong" it was that JAWS was acting funny because we weren't dropping the DOM buffer.
Not a solved problem by any means. OP, the simplest solution for you is probably something like http://domo-js.com. I'd stay away from templates if you can... but look out for pitchforks!
I highly recommend looking into the [React](http://facebook.github.io/react/) library for building UIs on the client.
Go to *Settings*? Read documentation? :-) Nobody can save you that work. *One-time* work that will pay off forever - it will be of use to you to understand that stuff regardless of what you work wit in the future. Don't see it as setting up *Webstorm*, see it as setting up your Javascript development policies: code writing style, automated code analysis, etc.
Sweet thanks, got myself a new wallpaper of hexagons now. : )
I'm pretty sure proper tail calls are part of the ES6 spec. They will probably be implemented by javascript engines sometime this year 
This is beautiful. Thank you!
RethinkDB is another upcoming one similar to Mongo but has a better scaling model and looks to be faster. Either way, they all go hand in hand with Node.
Ah. I'm currently using Meteor aswell for a project, oplog tailing in 0.7.0 is amazing. Full stack frameworks are great for fast productivity but the downsides seem to be that they often lock you into specific database types.
Even if it comes from you, is it generated from user input elsewhere? What if someone names their kid [Robert'); DROP TABLE Students;--](http://xkcd.com/327/) or its equivalent?
[Image](http://imgs.xkcd.com/comics/exploits_of_a_mom.png) **Title:** Exploits of a Mom **Title-text:** Her daughter is named Help I'm trapped in a driver's license factory. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=327#Explanation) **Stats:** This comic has been referenced 90 time(s), representing 1.26% of referenced xkcds. --- ^[Questions/Problems](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Website](http://xkcdref.info/statistics/)
Yeah, but in a way this is not always a bad thing - they are postponing support for other databases so that the MongoDB implementation can be completely solid and ready for 1.0. I think that's better than having half a dozen unstable database APIs in development at once. [Redis support](https://trello.com/c/sWcxRwxN/31-redis-support), [SQL support](https://trello.com/c/Gf6YxFp2/42-sql-support), and [other DB support](https://trello.com/c/6ugalZMG/54-additional-database-support) could be included in 1.1, however.
Pretty nice! Just one thing though: the effect happens because of the shape of the camera aperture, and the resulting shapes are always oriented the same.
Don't forget Meteor - though Meteor is currently moving to its own Handlebars-based template engine codenamed Spacebars.
Yeah agreed. Meteor is going to be really great at 1.0. Although I'm hoping to see a solid RethinkDB package at some point, although the database still needs to mature I think.
There're different answers to this question. The best is, as other suggested, templates. The other - which I like too - is dynamic generation of elements as if they're objects, things like document.createElement('div') or $('&lt;div&gt;'). And also you have frameworks that hide all this stuff from you. Take ExtJS: it uses it's own system of widgets so you can forget about HTML in theory. In practice, only till you have to do something unexpected.
It uses Bookshelf ORM (https://github.com/tgriesser/bookshelf) but currently only supports Sqlite (bookshelf itself supports postgres, mysql, and sqlite). In the future, it was mentioned that there was plans to support postgres, but that currently there is not enough developer resources to properly test and fix any bugs.
Not sure how helpful this is but what I've done for similar use is just have a lot of template HTML files that I load dynamically with AJAX when the control or whatever is needed. It separates the HTML out of the code and makes the templates easy to look at and modify. Loading them dynamically on page request (server side) is better but doesn't sound like an option for you.
you're right. I got things mixed up w/ hiding things from the screen, but not to the reader.
It may not be the exact solution you're looking for but I've written a function that separated the creating of HTML and XML in a logical way. Here is a example I use: var x = ES("div", ES("p", "This is a paragraph") + ES("p", "This is a blue paragraph", {style: "color: blue;"}), {style="margin-left: 10pt; padding: 5px; border: solid 1px blue;"} ); https://github.com/tekrat/eSugar I would also look at something like Knockout - http://knockoutjs.com/ **Edit:** Fixed spelling
This is really cool, just went and made one for a bunch of colors, will have them auto loop on my desktop. I'd love to have a preview of the hue though.
That really is beautiful. 
thank you, i'll add that, i really like meteor
Good work. Put together a presentation on XSS, explaining what it is and highlighting some notable attacks, then setup your dev account to demonstrate possible attacks, setup a meeting to show all this to your manager and fellow engineers, then be the hero and fix it all. In the process, put together a wiki page with best practices on security for working with your product. This is part of how you become a leader, not just a cog in the wheel.
Thanks!
Awesome! I'll add the hue preview next time I work on it. Edit: Now the hue and saturation sliders will show you what color they're set to.
Nice
This is really cool—any chance you'd share the unminified source?
The minified source at the beginning is simply the dat.GUI source; scroll past that and you'll see all of my code.
nifty alternative to templates. thanks, i didn't know about this. 
These guys: http://lensbaby.com/accessories-creative
Haha wow, I stand corrected. That's awesome!
Does Ember render pages server side, for example using node? Because that's the problem here.
I've seen many of these types of email lists before. They ramp up for a while, then stagnate, then become spam. 
For the most part this is true until you start working with directives and have to define your template as a JavaScript string. Ugh.
when doing rotational arithmetic I like to use the following pattern: var max = titles.length; ... //go right: index = (index + 1) % max; //always going to be 0 &lt;= index &lt; max //go left: index = (index + max - 1) % max; 
Agreed. The author seems to think that closures provide strictly private data, which is not the case. It's more about providing loose coupling.
Can you point me to some of them? I want to make sure not to become spam.
Pretty amazing, ajm1321! I'd love to be able to control the size of the shape too. Maybe even add a bit of randomness to the size as well - like a minimum and maximum?
Use promises. JQuery has supported them for a while now. You can refer to the JQuery documentation for more info.
That would work from the setup point of view. The only question is how to do the actual code for it. I'm going to do another bunch of Googling today and post what results I find. EDIT: Found a solution!
So after wracking my brain on this one for days, I thought of a smarter set of search terms. I Googled "javascript random banner" and found code I could easily modify. Thanks everyone for your help! Here's what the finished code looks like: &lt;script type="text/javascript"&gt; var images = [], index = 0; images[0] = "&lt;a href = 'story1.htm'&gt;&lt;img src='img1.gif' alt='' border='1' align='middle' hspace='5' height='70' width='80'&gt;&lt;font size='3'&gt;&lt;b&gt;Headline goes here1&lt;/b&gt; &lt;i&gt;(read more...)&lt;/i&gt;&lt;/font&gt;&lt;/a&gt;"; images[1] = "&lt;a href = 'story2.htm'&gt;&lt;img src='img2.gif' alt='' border='1' align='middle' hspace='5' height='70' width='80'&gt;&lt;font size='3'&gt;&lt;b&gt;Headline goes here2&lt;/b&gt; &lt;i&gt;(read more...)&lt;/i&gt;&lt;/font&gt;&lt;/a&gt;"; images[2] = "&lt;a href = 'story3.htm'&gt;&lt;img src='img3.gif' alt='' border='1' align='middle' hspace='5' height='70' width='80'&gt;&lt;font size='3'&gt;&lt;b&gt;Headline goes here3&lt;/b&gt; &lt;i&gt;(read more...)&lt;/i&gt;&lt;/font&gt;&lt;/a&gt;"; images[3] = "&lt;a href = 'story4.htm'&gt;&lt;img src='img4.gif' alt='' border='1' align='middle' hspace='5' height='70' width='80'&gt;&lt;font size='3'&gt;&lt;b&gt;Headline goes here4&lt;/b&gt; &lt;i&gt;(read more...)&lt;/i&gt;&lt;/font&gt;&lt;/a&gt;"; index = Math.floor(Math.random() * images.length); document.write(images[index]); //done &lt;/script&gt; 
First, I suggest to not put the requests in a setInterval. The request from the reddit API might take longer than the setInterval time. You should put the requests in a recursive function that gets called if there are more comments. For knowing when all the data is loaded, you could use promises as suggested before or you could use a simple callback function. Change the signature of the loadAllComments and loadAllSubmissions to take a callback. RedditInterface.prototype.loadAllComments = function(doneFunction) { // when done this.commentsLoaded = true; doneFunction(); } RedditInterface.prototype.loadAllSubmissions = function(doneFunction) { .... // when done this.submissionsLoaded = true; doneFunction(); } You can create a function to check both values RedditInterface.prototype._checkDone = function() { if (this.commentsLoaded &amp;&amp; this.submissionsLoaded) { console.log("Data loaded."); console.log("Comments loaded: " + this.commentLog.length); console.log("Submissions loaded: " + this.submissionLog.length); } } And then change loaduserData to look like this RedditInterface.prototype.loadUserData = function() { this.loadAllSubmissions(this._checkDone); this.loadAllComments(this._checkDone); }; Now you can use it the same way without the while loop. 
Reading a file or multiple files for every single request would be much slower.
First, you need an idea, then a concept, followed by a proof-of-concept, before you start to develop the final form. I understand you are in the proof-of-concept stage. Though usually I am outspoken against frameworks, I have to admit that many frameworks will save you a lot of time, so you might benefit from learning to use some of them (especially if you want to make a nice gui with less complications). The questions you'll have to ask yourself is: what would the most stupid user still be able to work with (and you'd be amazed how stupid some users can actually be). So keep it simple. Sliders for colors may be fine, but maybe the more inept user needs some bookmarks to select a hue.
Thanks for feedback, I appreciate that! I hoped that examples will help people understand the concept, but I'll also try to include some useful description.
Or use promises instead of callbacks. He is already using JQuery for the AJAX calls...
Looks a bit foreign to me.
did you get any errors? like I say I didn't actually test it... not sure if there's syntax errors or just general bad coding
One issue you do want to prevent on the client side is XSS and this can be solved by HTML encoding user generated content before inserting it into the DOM.
A few things: * You allow the interval to be `Infinity`. * If the image is cached and you set the interval to, let's say 10000, the `done` callback isn't fired for 10 seconds. * If the `done` callback fires before the `dimensions` callback, the `dimensions` callback never fires. * You define a new "noop" function for each callback that wasn't passed in.
Thank you for this reply. Currently, I am going through the node.js training videos on lynda.com. Since my program is a mix between a spreadsheet and a calculator, I want to be able to deliver a small amount of fixed data to the calculator, and then let the user manipulate it and sum the resulting numbers. The summation would take place during events, eg, when a user moves a slider to adjust a number, an event will fire off to calculate a new number. Out of curiosity, do people put their final code up for code reviews on this forum? Since I am new to JS, I want to make sure I have done things right.
Being that all those projects are by a company called Document Cloud, my guess is that they have a tool to generate it.
Docco isn't just literate style (markdown docs with js blocks). It'll also pull comments from regular js source. There are similar tools that mostly change the styling, but docco has worked for me. It's a snap to call it from a grunt task too.
Sounds like your organization has a serious deficit of code management/implementation. I strongly recommend a thorough analysis of the problem before sweeping all the pieces under the carpet (Angular). MVC will not prevent this problem from continuing to occur as it will merely change the appearance of the problem in the short term.
I don't think you understand the term *security*. The word, in the broadest sense, merely refers to risk reduction. In this case the word replies to code safety and it is well used in the context to which it is applied. I have absolutely no doubt the author is intending this context to not refer to leet haxors trying to p0wn your mother's bunny. This common misunderstanding illustrates that many developers seriously do not understand security at all. I can say this confidence since I am a CISSP. Edit: I failed to use the word *leet*.
I was thinking about that. If I have enough time I will implement at least a Chrome extension. Anyway, thank you for the suggestion.
This is nice:) I like these kind of functions
Hi, Just a few "toughts" (might help or not, just some ideas) * **Get rid of jQuery** * Replace jQueryUI by UI-Bootstrap/AngularUI * Use a module loader, requirejs works well with angular * Get rid of globals Good luck 
See also: [Yeoman](http://yeoman.io/), which has a similar Angular generator. 
 var img = new Image(); img.onload = function() { alert('Loaded!'); }; img.src = 'http://whyDoWeNeed.a/library/for/this';
Is this official? If I login from redditjs.com, could I be compromising my account?
Wow, thanks :) I wasn't sure how people would react, but I'll try to do one of these every week then. Is there anything or other information you'd love to see included?
did you read the article? &gt;why we can't afford to put all functions in the global scope as they'll be publically available, which makes them open to vulnerable attacks. I think I understood enough. 
I don't trust JavaScript to do this. I will encode everything on the server side.
You hade me at "Enought now"
Original post by the creator for those interested http://www.reddit.com/r/javascript/comments/1rzyz7/i_rebuilt_all_of_the_functionality_of_reddit/
Not even https? Yikes 
I strongly agree with your approach. This is similar to my article: http://alexkinnee.com/2013/11/binding-js-events-using-data-action-selectors/
this might help me refactor a js lib of mine. handy! thanks for sharing.
why?
I'm not sure why you suggest getting rid of jquery (not mentioned), but keeping jquery makes it seem like he might have an easier time transitioning his current app over. Jquery + angular works well out of the box and also, there are still libraries out there that are rock solid due to how long they have been around. Angular UI/bootstrap have great ideas and utilities, but I found them to not be flexible, and are more of implementations rather than library Apis. For example, If I were looking at angularstrap or whatever, I would rather just use bootstrap.js and implement the directive myself. That is kind of one of the downfalls of using someone else's directives. You might only have the option of customizing it from the template, rather than being able to write/add your business logic in the app code. Just my thoughts. I went that route at first with a large app, but then pulled them out and made custom directives and/or used jquery (and other) libraries when available. Not saying you should need jquery to get the job done, but you might want to leave the option open. If you got down voted, it was not from me.
What is this, a picture for ants?
Gulp looks much much better than Grunt, [I hope the yeoman team picks it up.](https://github.com/yeoman/yeoman/issues/1232)
But then your api that delivers these results are going to be including html entities which might not make sense if you are writing a native app ui. In addition, not all content is returned by the server, take a comment submit textarea. It would be slow to send the result to the server and get back the parsed text before rendering it right away and encoding client side. What are your reasons against trusting JS?
That's a good point. This whole concept works well with querySelector too though. So you can have speedy selections that are less dependent on the DOM. http://codeplanet.io/better-javascript-selectors/
The performance difference is actually negligible. Computers are fast these days! Also, as /u/jkuperman pointed out, jQuery will fallback to using querySelector in supported browsers, which is native and super fast.
As a matter of fact, gulp is being used in yeoman generator already :) [gulpfile.js!](https://github.com/yeoman/generator/blob/a4d8186d074e5eff0fc97eb069389c1575a681df/gulpfile.js)
I roll like this. Idea ==&gt; alpha state ==&gt; beta state ==&gt; beta state ==&gt; beta state... Lots of developers including myself often consider their projects in a state of "perpetual beta". In other words a feature complete beta is the best that you will ever do, because even if it appears that you have written perfect code chances are it is not. I do this to help reduce namespace collisions. (function(global){ // I work inside an anonymous function global.foo = 'bar' // I can get and set global's from inside here. }(this)); // invoke the function and pass the global object to it
That was me pointing that part out, but to your point it's probably fine. I am persnickety about performance in general. I know that data attr selectors even in native implementations are slower than class selectors. It's not terrible for a few things, but I'd still like to do some benchmarking before going the whole hog with all of my JS actions. Again, that's just me being cautious and probably silly about it.
What I like a lot about using data attributes is that it allows you to get all nodes that require JavaScript enrichment in one swoop. Instead of: document.querySelectorAll(".foo"); // loop over result and init all Foo behavior document.querySelectorAll(".bar"); // loop over result and init all Bar behavior You do: document.querySelectorAll("data-module"); // loop over result and init all referenced modules in one loop
Not disagreeing with the article, but another way to solve the problem they present is having standardized prefixes or suffixes on your "just used for event binding" class names. I use the "js-" prefix myself, so if I see any classes that start with "js-" I know they are purely for client-side code and don't affect presentation.
Guess we will just have to agree to disagree. That's not how I read it. No hate here. 
Not sure if this would work. But would be my first attempt. Array.prototype.sameStructureAs = function (other) { var match = function (stack, value) { return Array.isArray(value) ? "[" + value.reduce(match, "") + "]" : ","; }; return this.reduce(match, "") == other.reduce(match, ""); }; Edit: appears to work for the example cases.
 If people want to mess with their own instance of a sites front end code (that only they can see), I don't care. They can always just redefine your encoder code to be an empty function for example, if I tried to block them anyway. The reason i don't trust JS on client side for protection is because it is not secure from tampering with in anyway. Please link me a good article or a book reference for JS security (client side) and perhaps I will change my mind. I am not saying I am an expert I just have not read this information, and I have read the opposite many times, so it will be news to me.
I have been seeing more data-js-whatever="" attributes and have been adapting that approach myself. Keeping actual class names for css.
Woah - this is even cooler now! Great job!
I very much agree with this approach. Edit: I added a bit about this to the article and gave you credit. Check it out.
There's no way the Grunt configuration would be intentionally more complicated (doing different things) than the Gulp one to confirm bias, right?
Does "third party" mean third party code that's hosted on public CDNs, or third party code that you serve from your own domain? Using public CDNs for common libraries helps even though it ostensibly results in more requests than with concatenation, because there's a good chance they already have the asset cached if they've visited another site, allowing the browser to avoid having to make those requests. I'm not aware of any public CDNs that offer concatenating of multiple libraries, and for good reason, because it would cause a combinatorial explosion of the number of possible URLs, vastly lowering the chances of any two sites sharing the same URL and being able to benefit from caching. If you're hosting the third party library yourself, you don't get that benefit, and you should definitely concatenate all libraries plus your own code into one giant file that is minified and gzipped. And make sure that you're serving it in a way that allows it to be cached by browsers, with the [necessary HTTP headers](https://developers.google.com/speed/docs/best-practices/caching). What you definitely do not want to do is serve the libraries separately as with the first option but host them yourself (or link to them on non-CDNified external servers) as with the second option. That's the worst case scenario, although it's one I see all the time on large sites that should really know better. (It's mostly newspaper sites. They always choose to do the slowest, dumbest thing possible.) As to which of those approaches is faster, you'd have to actually test it. But you'd also have to come up with some sort of cost model, because the second option will be almost certainly be slower for the first visit, but it has the potential to be faster on later visits, depending on how many conditional requests for cached assets the browser has to make. 
This may be elementary stuff for experienced coders, but it may be helpful for people who have not used the HTML5 canvas extensively. To make an interactive drawing board and snowflake shapes, multiple canvases are used, some on-screen, some off. Layering canvases with CSS is a good way of handling graphics for an application. The globalCompositeOperation helps with cutting out shapes. (Yes, this link is to my blog, but I hope this reddit post won't be considered spam. Just want to share.) Also, one more trick: shadows are not being rendered in the current version of Chrome correctly when the source is a bitmap with transparency, so I draw the shadows manually using this [StackBlur](http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html) by quasimondo.
fuck it, just merge em and then gzip on the server ;)
Thanks for the comment. &gt; I'm not sure why you suggest getting rid of jquery (not mentioned), but keeping jquery makes it seem like he might have an easier time transitioning his current app over. Jquery + angular works well out of the box and also, there are still libraries out there that are rock solid due to how long they have been around. * I have nothing against jQuery (it's brilliant and I use it too), but angular's jQlite provides pretty much what you need to "work" with the DOM, so one dependency less in the way, which saves a bit of time and a request when loading the app ... just my 2 cents, I know you can use angular and jQuery together, but it may also help focussing exclusively on angular while "learning" it. &gt; Angular UI/bootstrap have great ideas and utilities, but I found them to not be flexible, and are more of implementations rather than library Apis. &gt; For example, If I were looking at angularstrap or whatever, I would rather just use bootstrap.js and implement the directive myself. * I agree with you on that one; however (and that's totally personal) using UI-Bootstrap gives you base components and stuff you don't have to develop yourself, being more a coder than a designer it helped me a lot. I've been using angular in several "medium/large" projects this year and I've also got my "set" of directives, however for learning purposes/prototyping and a lot of cases, I think UI-Bootstap is a nice add on to angular js for the UI. And no worries for down votes, as I said, these were just thoughts, I'm not expecting anyone to agree. Happy new year.
If my encoder function is encapsulated in an anonymous self invoking function then no one can access it from the command line. Even if someone did mess with it then they are affecting their own experience which they could do regardless of the encoding.
Not replying to myself but just wanted to add one point, * Angular is written with testability in mind (that's from their docs but it's also true), and [Karma](http://karma-runner.github.io/0.10/index.html) makes it super easy to test your Angular app. If you use any of the Yeoman generators mentioned in the thread, it'll probably come with a [Grunt](http://www.gruntjs.com) task to run these tests (and maybe code coverage) with Karma. Writting good tests will probably help you a lot during this refactor, once again just my 2 cents. Cheers.
Seems like it's more a battle of whitespace (38 vs 32 lines), although gulp looks much easier to read.
I guess i misunderstood your idea. Maybe we are saying the same thing. Perhaps I am just not expressing my view wrong I thought you meant you let JavaScript encode and then send to server and then have your server not recheck the same text for problems. I am doubtful of anything a client-side gives me is all. So anything i do on the front-end with JavaScript is for aesthetic value. Maybe it mimics the back-end but it is just a bow wrap. I use lots of bow wraps...but i don't trust them at all. 
I was just pointing out that I was *not* down voting, because I wanted to make sure that I came across the right way. Just enjoying the conversation :) &gt; I have nothing against jQuery (it's brilliant and I use it too), but angular's jQlite provides pretty much what you need to "work" with the DOM, so one dependency less in the way, which saves a bit of time and a request when loading the app ... just my 2 cents, I know you can use angular and jQuery together, but it may also help focussing exclusively on angular while "learning" it. I bake jquery in my my minified library code, so its only one request either way. To put it in perspective, jquery+angular is smaller than emberjs before it even has its dependencies (one of which is jquery). I don't put that as a knock against ember, just showing that the reality is it doesn't matter much. I don't need jquery to play with the dom, I add it in for the amount of work out there that is already done for me (jquery validate for example is superior to any validation library I have found for angular). &gt;I've been using angular in several "medium/large" projects this year and I've also got my "set" of directives, however for learning purposes/prototyping and a lot of cases, I think UI-Bootstap is a nice add on to angular js for the UI. This also assumes one is using bootstrap. Not that it is hard to just use the same html, and just use your own CSS, but yeah. 
Isn't this just a disguised and slightly modified form of onclick="myAction"?
Yeah I got that, my sense of humor is a bit screwed up and English not being my mother tongue, I might have expressed myself incorrectly :p I agree, adding your own css is the way to go. I'm just lazy sometimes :)
Beautiful app!
Couldn't you say that about binding events to any selector then? This still uses event listening.
I'm using something kind of similar but this is much tighter with the introspection. Nice.
Not necessarily. I could add a single class and bind multiple events and event handlers to it. With your example, you would need a new attribute for each event handler. Your method tightly couples your JS to your HTML. This means every change you make in JS has to be reflected in the HTML as well. Even something as simple as renaming a function would require searching through your HTML to apply the changes. This gets worse when you have multiple elements with the same functionality peppered throughout your site which you now have to hunt down and change.
If making your code more declarative is too big of a pain, then don't do it.
This doesn't become much of an issue if you use a client-side view wrapper like Backbone Views. They basically encapsulate all the bindings for you, although you *could* integrate the two approaches if you wanted.
Are CSS selectors that use attributes slower than using classes? I haven't embraced them for selecting because I just haven't bothered to investigate that.
Yes, that works too, but the real solution is a mix of yours, OP's, and proper OOCSS techniques. You shouldn't use "js-" prefixes in class names simply because it doesn't follow the re-usability protocol of OOCSS, regardless of whether or not it's being styled by CSS. Conversely, it would be a good approach if you had one "js-action" class on multiple elements. For example: &lt;ul&gt; &lt;li class="js-action"&gt;&lt;/li&gt; &lt;li class="js-action"&gt;&lt;/li&gt; &lt;li class="no-action" data-action="unique-action"&gt;&lt;/li&gt; &lt;li class="js-action"&gt;&lt;/li&gt; &lt;li class="no-action" id="unique-id"&gt;&lt;/li&gt; &lt;li class="js-action"&gt;&lt;/li&gt; You can now have a common action class that shares a common style class, you can query by unique id or unique data action. In our testing, id and custom attributes gave the same performance and maintainability, so we chose to use ids because that's what front-end developers are more familiar with. $(".js-action").click(jsAction()) $("#unique-id").click(uniqueID()) $('[data-action="unique-action"]').click(uniqueAction()) It is probably better to store all the js-action items on page load, though. So instead I'd write var jsActionItems = $('.js-action'); $(jsActionItems).click(jsAction());
**The `class` attribute is understood as a semantic class, not a visual class.** To give an element the `contact-link` class doesn't mean "this *looks* like a contact link" or "this *behaves* like a contact link"; it says "this *is* a contact link", and any appearance and behavior are defined in the document's CSS and JS, respectively. It's not an abuse to bind events to a class, and it's an error to assume that a certain class only affects style: an element's class is a key part of its *meaning*, which can affect all sorts of things. **Still, a web app can benefit greatly from declaring event bindings in the HTML.** Heck, frameworks like Angular do it all the time. If your HTML and JS are very codependent, then it's convenient to declare their relationships more directly. **But the main problem this solves is unclear conventions, and it's not the only solution.** If your team members are having trouble knowing if a class is used for event binding, then all you *really* need is to make events easier to discover. One valid choice is to declare them on the elements. Another is to declare them in a single, clear location in your `.js` files, separate from all other application logic. And another, mentioned /u/rod_kimble, is to name classes differently if events are bound to them. Your choice will likely depend on the type of document you're building. (For example, a semantic document with just a bit of optional Javascript enhancement probably would benefit from keeping events out of the HTML.) (Additionally: How does this technique differ from `onclick="openContact()"`? The semantics seem approximately the same; is performance significantly different?) edit: Whew, that just went through a whirlwind of rewrites. The core message is approximately the same, though.
I should have specified that I am hosting them myself, currently, like the newspaper example you mentioned. Is it a thing to minify libraries you don't own? I just assumed that would cause a lot of problems. Can you recommend a good minifier? I was gonna go with uglify as that seems to be the norm.
Yeah I have minified versions but I want to cut down my 30 or whatever requests on landing page of spa to like 5. Angular and some other ui related ones I plan to get rid of as I see possible. Can I minify those files plus mine into 1 big app.min.js?
Interesting. I'm actually showing the data selector as being faster in Chrome. I do take issue with your implication that we don't need to worry much about small performance gains because computers are so fast. That's all good and fine while doing isolated testing, but you might have a metric crap-ton of JS operations occurring, say, from having 50 tabs open (:cough: Reddit Link Opener :cough:) or be on a not-so-hot mobile device.
It really depends on how big your team is, and how big your project is. With larger teams and projects, it becomes nice to not have a developer dipping their dirty javascript fingers in the designer's beautiful html. 
Is [`window.prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/window.prompt) not what you were looking for?
I like cats. edit: lol, our points are not mutually exclusive, didn't know what else to say.
Maybe I am ignorant but this seems like adding a bunch of code (small amount * X number of classes) to help prevent a syntactical error introduced by the programmer that should be immediately apparent when the code gets executed by a browser or a test framework. In short, I wouldn't do it and it's not a good idea although I understand the intent behind it is good.
I just checked it out and I'm confused. Are the .js files the tests and I'm supposed to know how to modify them so that they pass when I open localhosts:4444? It seems like this is the case, and if so, I'm not ready for this. 
Idk what this TC-39 mumbo jumbo is but the anti-pattern part makes sense for the same reason that you wouldn't work around using other important keywords of a language. Thanks for the confirmation.
They're already running in a combined single namespace if they are all loaded on the same page, so concatenating them into one file should not be an issue. 
I thought the namespace is defined by the scripts and not the page. I will just have to try it and see how it goes. Thanks for your comments, really appreciate it.
In my project, we use data-action on elements where the event handler will _do_ something, and data-role where the element is used _for_ something. So, a button (which when clicked might open a form) would have data-action='openForm', and the form itself would have something like data-role='contactForm'. This helps us make it clear what purpose an element serves. This works best for us, because in our product users can change the HTML that renders the page. By not tying event handlers to classnames, there's reduced risk of users breaking functionality by accidentally removing a bound classname. It's much clearer when there's a specific attribute. We could use the js- prefixed classes mentioned above, but that's not as clear in my opinion.
No. Most browsers support querySelector. See [MDN querySelector: Browser compatibility](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector#Browser_Compatibility) -- IE 8+, Chrome 1+, Firefox 3.5+, Safari 3.2+ That said, it *is* slower than class selectors and ID selectors.
&gt; var jsActionItems = $('.js-action'); &gt; $(jsActionItems).click(jsAction()); Why are you doing a jQuery lookup on something that's already a jQuery object? why not just jsActionItems.click(jsAction());
"Enough to matter" **depends on your use case**. I'm tired of people saying this -- if you're making hundreds of queries per second (for some awful reason), you should be doing it against class names and not IDs (or caching the results of your query if it's not dynamic). In many other cases, query against whatever-the-fuck you want.
Is this not over-engineering a bit? Is it not precisely what `onclick` is for? What I'm asking is, what does &lt;button data-action="openContact"&gt;Contact&lt;/button&gt; &lt;script&gt; var actions = { openContact: function() { ... }, etc: ... } $("a[data-action]").click(function(){ var action = $(this).data('action'); if (actions.hasOwnProperty(action)){ actions[action](); } }); &lt;/script&gt; have over, for instance, &lt;button onclick='actions.openContact()'&gt;Contact&lt;/button&gt; &lt;script&gt; var actions = { openContact: function() { ... }, etc: ... } &lt;/script&gt; ?
the learning curve for Backbone, is way smaller than other frameworks, if you aren't particularly interested in learning, you can use some parts of it, like the Backbone.Views, it will save a lot of time, when writing applications.
But could it be noticable on mobile devices?
I wanted to have more functionality in the pop up besides what is contained in prompt.
Nah I think it looks good, keep it simple:)
this is not meta programming, this is dynamic method dispatch. 
And `actions` and all its methods have to be in the global scope and can therefore be modified by other javascript.
While functional and still not deprecated, it's been considered extremely bad practice to use event attributes in your markup, much in the same way using the "style" attribute is. A clean separation of your form and function yields all sorts of maintainability benefits (among others). When I see this in a code review for a job candidate, for example, it tells me this person isn't thinking about their work holistically or how their architectural decisions will impact future modifications. The keyword to look up on this topic is [Unobtrusive JavaScript](http://en.wikipedia.org/wiki/Unobtrusive_JavaScript). That said, I feel the same way about the displacement of this functionality from an onclick to a data attribute that is basically the same thing. Instead, a higher level approach in my opinion would be a less explicit naming convention that semantically explains why the button exists (and going deeper with namespacing for bonus points), then bind my events around that.
The event binding in Backbone views uses jQuery.delegate(), so you can do this no matter what framework you choose.
Well said... except for the onclick part. /u/Juvenall posted this link earlier: http://en.wikipedia.org/wiki/Unobtrusive_JavaScript regarding the onclick handler. Also, the onclick handler can only call publicly accessible JS functions. You may want to bind your event to a private method.
Absolutely, however I can't think of a reason right now why someone would want to query the DOM that frequently. That smells of REALLY BAD program design. If they're querying for data, they should be using a data structure to store/cache that data. If they're binding events to a group of items (2 or more things with the same basic DOM structure in a parent element), they should be using event delegation, which solves this issue.
Of course. I just can't think of a case where it would matter. If it matters, the developer is probably doing something else poorly (in my opinion).
yeah, but with backbone, you don't need to use an "actions" object literal to contain your methods, as your view acts as that middleman, and Backbone handles the event delegation, so the approach mentioned by atticusw isn't needed if you're using a Backbone.View.
If you do this, then you're missing out on the automatic event binding provided by the `Backbone.View` `events` property. You _could_ just have one record in the object like `'click [data-action]': 'bindElements'`, and have the code above be fired on the element. But then you're losing out on the Backbone event magic (which is meant to remove manual bindings), and makes it super unclear what bindings are actually set (when viewing your JS code). While it's neat, it's not an approach I like.
You are correct. I was not thinking in Backbone mode. events: { 'click [data-action]': 'actionHandler' }, actionHandler: function(event) { var action = $(event.currentTarget).data('action'); if (this.hasOwnProperty(action)) { this[action](); } }
Gotcha—it was meant as a real question, not a rhetorical question ;) I'd argue that this technique is *exactly* as obtrusive as `onclick`. * The presentation and behavior are exactly as intertwined: elements' behaviors are being specified in the HTML, no matter what we name the attribute. * The one reason to avoid polluting the global scope is to avoid naming conflicts between scripts: what if two scripts define `openContact` differently? However, a reserved behavioral attribute is equally vulnerable to naming conflicts: what if two scripts assign different behavioral semantics to `data-action`? These can usually be *almost* resolved with better namespacing: if we were building Reddit, `onclick="reddit.actions.openContact()"` and `data-reddit-action="openContact"` would be practically guaranteed not to cause accidental conflicts with non-Reddit scripts. But, at the end of the day, any HTML convention that uses special names to define elements' behavior *must* be susceptible to some kind of naming conflict, whether it uses globals or not. (You might make the same argument against semantic names like `contact-link`, but the main difference is that two different meanings of `data-action` can produce undefined behavior, whereas two scripts that assign different behavior to `contact-link` are both behaving exactly as intended.) * Binding an event handler to an element makes it public anyway, so there's no privacy lost by attaching it to a global first. In short, as I understand it, **this is a stripped-down version of `onclick` that doesn't rely on globals**. And that's a pretty neat improvement. But it's definitely not Unobtrusive Javascript, and it has its own reskinned versions of `onclick`'s advantages and disadvantages.
You've misunderstood my point. [Go read.](https://en.wikipedia.org/wiki/Separation_of_concerns) OP's technique is tightly coupling his HTML to JS, which is exactly what "on&lt;event&gt;" handlers do and why people avoid them. My argument has nothing to do with how the events are actually bound under the hood.
&gt; a less explicit naming convention that semantically explains why the button exists The article's bad-example code meets those requirements :) It states that the link is a contact link, then binds events around that semantic value. And, for bonus points, we could namespace the class if it made sense for this app.
&gt;Still, a web app can benefit greatly from declaring event bindings in the HTML. Heck, frameworks like Angular do it all the time. If your HTML and JS are very codependent, then it's convenient to declare their relationships more directly. I argue that this is no longer HTML--it is a view definition language that happens to look like HTML. It's in a similar class to Handlebars or Dust. If you simply ran it through an HTML renderer without the Angular JS framework, it wouldn't look like you expect it.
How cross-browser compatible is this? I feel like I've had problems in IE7 and earlier using attribute selectors.
Dynamic method dispatching is metaprogramming
I use this sort of pattern: if (!(this instanceof Constructor)) { return new Constructor(arg1, arg2...); } not often, but in some cases. I think it's useful when your library can be consumed with or without instance state being a known thing. In jQuery's case, something like: var elem = $(".some-elem"); Is (arguably) much nicer than: var elem = new $(".some-elem"); and with jQuery for the most part you don't need to be aware of everything being attached internally to `this` that tracks the state of the current object instance.
We have a convention of &lt;element class="style action-js"&gt; where everything -js has a handler and no style
No, that's not how it works at all. There aren't any namespaces really, it's all one flat namespace. Global variables defined in one script block are visible to all other script blocks -- that's the entire basis behind how you can load jQuery in one script tag and then write `$(...).foo()` in another. That's the whole reason for needing to invent things like the module pattern and AMD and RequireJS, etc. -- to come up with rules and conventions for how scripts are to expose functionality to the rest of the program, to prevent scripts from stepping all over the toes of other scripts by littering the global scope. 
This is a totally separate issue, but are you a grunt user? I have been trying to figure out why this won't produce a min.js file. It's like uglify never even ran, but grunt reports the task as a success. The concat works great... Here's what I'm working with: http://jsfiddle.net/9h6EJ/
&gt; ***As of jQuery 1.7, .delegate() has been superseded by the .on() method.*** [*jQuery `delegate` docs*](http://api.jquery.com/delegate/) jQuery's `on` replaces the older event handling methods like delegate and live and such. [*jQuery `on` docs*](http://api.jquery.com/on/) The article's example should look like this: var actions={ startSlideshow: function(){}, login: function(){}, logout: function(){} }; $('body').on('click','[data-action]',function(){ var action = $(this).data('action'); if (action in actions) actions[action](); }); 
This and the fact that there can only be one "onclick" handler are the two best reasons not use them.
If a random designer, whom does not understand JavaScript or the DOM, is touching your code then there is a serious problem. Either your code is poorly architected, in that changing an attribute on an element causes a failure of event assignment that breaks your entire app, or you have a serious internal security problem. Either way the proposed solution does not solve either of those two problems. Separation of concerns is easily exercised from a simple understanding of the DOM as an external API. querySelector voids much of that understanding and introduces a tight coupling of concerns.
Do you want to run the function on click or does the function return what you want to run on click? You're using the latter...
while true, shit happens, can be helpful to separate this way. It's arguably true also that DOM element classes are not only for styling purposes, are for "element is of this kind", and is valid to assign JS behaviour to kinds of elements. So I'm not completely sold ;-)
Kudos for writing better code than a Senior Software Engineer ;)
There are many benefits to separate markup and code, major ones being readability, ease of refactoring, and minification.
I'd rather not expose constructors at all in a public API. That way you're free to later decide to internally create or not create new objects in response to public API calls and you don't have to change your code's interface.
I now see what you mean, but you failed to articulate it in your original comment. Yes, using , `on&lt;event&gt;` attributes directly put JS in your HTML, which is a nightmare for maintenance, and, as you said, separation of concerns. OP's method, however, actually enforces separation of concerns. Using event delegation, a handler will be called for an event originating on any element matching the specified data attribute. If the HTML tag name, class name, or position in the DOM changes, the event is still triggered correctly -- the JS is not tightly coupled to the DOM structure. Compared to binding based on class names, this respects separation of concerns better as class names are concerned with styling and should not be an identifier for event binding.
it is one small part of a much bigger concept. calling it meta programming is disingenuous. 
Interesting solution for those who need it. 
OP isn't saying "this approach only works with a 1:1 attribute and method naming convention," he's saying use data attributes instead of class names when binding events. There's no reason why you can't be creative and switch on the action name and trigger any number of method calls. Something like this: &lt;button data-action="new"&gt;New&lt;/button&gt; Then, in your JS: $('[data-action]').on('click', function(e) { var action = e.currentTarget.getAttribute('data-action'); if (action === 'new') { doSomething(); } });
I see your point.
That is awesome!!! I have no idea what is going on though. What is each blue dot? How is this being done in a table?
The table is probably there just for alignment. It's being drawn with filled circles on a canvas. Probably uses simple 3D perspective [similar to this](http://books.google.ca/books?id=KZTIFYMLShYC&amp;pg=PA347&amp;lpg=PA347&amp;dq=3d+canvas+z+focal+length&amp;source=bl&amp;ots=-cQITdfGhs&amp;sig=CLrFUnBz_iB9tMqx9g2QHR5iihk&amp;hl=en&amp;sa=X&amp;ei=J0fEUuakAqSQyAHz_4HACw&amp;redir_esc=y#v=onepage&amp;q&amp;f=false).
This may be useful to the developers in /r/incremental_games 
Create a bundle.js file that has all of your individual deps concatenated together. You can use cat to do it http://stackoverflow.com/questions/4969641/append-one-file-to-another-in-linux
Cool solution, this might also be useful for situations where intervals in inactive tabs aren't respected, like in Chrome
I have that already and accomplished it with grunt. I just need to get it minified which is a different issue. I suppose my original question is solved. Thanks.
Thanks. I updated my article to use .on() instead of .delegate()
That works too, as long as you have a convention and stick to it.
[Here's a cleaned up version.](http://jsfiddle.net/QUHBU/18/) I'm not saying it's perfect, or that my understanding is solid (I didn't take the time to work out the spherical coordinate math he's doing), but hopefully it'll make things a bit clearer. Some fun things to do with this could be: using requestAnimationFrame, altering the speed or FPS, or playing with the colors or radius of the dots (maybe make the dots smaller/larger depending upon the Z coordinate).
It seems like this is mostly useful in situations where you should be using requestAnimationFrame. 
I made [something a while back that solves the same problem](https://github.com/mrchimp/Tock). Yours is more of a lightweight workaround whereas mine is more library for timers. They both use the same technique.
You need to be careful of circumstances where the computer has been put to sleep. E.g. The elapsed time was a day rather than a second
There's definitely a fair point there. The idea for me is creating websites where classes and id's are for CSS and these data attributes are for application logic. It just makes the entire process easier, and like I said makes it so entire DOM restructuring re-designs can happen without affecting the code.
Agreed. I think it's completely valid to use classes for more than just styling. However on big teams I think it's really nice to have the design and the application logic separated if possible. I've also seen some people prepend letters like 'js' to classes that JavaScript is reliant upon. So that's an idea too, although I like this one better.
I still strongly advocate: if (action in actions) actions[action](); As opposed to: if (actions.hasOwnProperty(action)){ actions[action](); } And before anyone starts about it, just don't. *"But, but, what if my array prototype has a property with the same name as one of my actions!?".* No, just no. The last time a co-worker of mine touched Array.prototype... *I pushed him off a bridge.* I will do the same to you if I catch you doing anything of the sort. I'd also like a mention on the article that I corrected.
That's pretty nifty! At first glance it reminded me of some of the things talked about in [Learnable Programming](http://worrydream.com/LearnableProgramming/).
So many ways to skin a cat, eh? - I use **classes** for distinguishing elements, and any matter of selecting them (whether it be js or css). - I use **IDs** for fragment identifiers and form relationships (like `&lt;label for="myinput"&gt;`) - I use **data-attributes** for storing state information, generally for Javascript behaviour. As a side-note, I tend to access data-attribute information with `$e.attr()` rather than `$e.data()` -- because .data() doesn't necessarily update the DOM markup for optimization reasons, however, I feel like the DOM should always reflect the state of your data, even at the cost of optimality when feasible. I don't know if this is an ideal I should change or not, but I realize mixing these methods could result in problems. 
Wow! You might have just saved me from an untold number of `console.log`s. This is a really cool idea, and I'd be interested in seeing how it progresses. "Logs" is a bit misleading though. It's more like live value extraction and recording (which is *way* cooler).
I've submitted this once before, but have since updated it to support more form input types (I think most of them now). Really useful for pulling data from forms. I use it with my backbone apps to pull the inputs and convert to json for posting to the server. Feedback/suggestions welcomed!
Same thing for lodash or underscore: var _array = _([1,2,3,4]); _array.each(function(i){ console.log(i) });
The technique in the article is fine for novices. It's simple and easy to understand, but it is not a professional best practice. I structure and encapsulate everything in an object-oriented fashion. With structure like this, finding your event bindings.. simply isn't a problem. The location of the event bindings for a given widget is intensely obvious. &lt;div class="account-panel"&gt; &lt;button class="login-button"&gt;Login&lt;/button&gt; &lt;button class="logout-button"&gt;Logout&lt;/button&gt; &lt;/div&gt; --- $(function whenDOMIsReady(){ window.website = new function Website(){ var website=this; website.accountPanel = new function AccountPanel(){ var accountPanel=this; // Selecting our dom elements var $accountPanel = accountPanel.$=$('.account-panel'); // Behaviour accountPanel.login = function(){}; accountPanel.logout = function(){}; // Delegated events $accountPanel.on('click','.login-button',accountPanel.login); $accountPanel.on('click','.logout-button',accountPanel.logout); }; }; }); I keep most object properties public, unless I have a reason to keep them private, largely for debugging flexibility. It's hugely convenient to debug things by simply looking at the inner workings of your app while it's operating. Pop open the development console, and it's easy to see what's going wrong with a widget by logging all of its properties. &gt; website.accountPanel.loginModal &gt;&gt; LoginModal { status: true, loading: false, $: [jQuery Object], }
The frame rate is a little low on iPhone 5, looks like &lt; 10 FPS. Any ideas?
Thanks, yeah, I use console.log all the time and wished I had a way to log a whole function or whatever.
Thank you. The program is a far cry from what he talks about but hopefully it's a baby step in the right direction.
I've noticed the same on the few Android mobile devices I have access to. I'm still looking into it. There are several pretty basic canvas animation demos that are pretty choppy on my Nexus 4; I found one on html5canvastutorials.com that has poor performance when shown inline with the rest of the DOM, but is quite fast when shown by itself in a new window. Any thoughts/tips, of course, are appreciated. :) [Edit] I'm also looking into touch events on mobile; at least on my Nexus 4, zoom and drag do not work quite correctly.
1. How is the data communicated? Is this a WebSocket (client-server) situation, or RTCDataChannel (peer-to-peer)? 2. Do you support unreliable communications suitable for realtime action (think positional updates in shooters, racing games), as well as reliable transmissions (think leaderboards, game settings, avatars)? 3. What browsers do you support? 4. Does Wasabi maintain a Gamestate of any kind? How does Wasabi interface with a gamestate implementation? 
Brilliant questions, all of which I've been itching to answer: 1. Wasabi itself is transport-agnostic, and has been tested with WebSockets and socket.io. The data is transmitted and received during the call to `Wasabi.processConnections()`, which should be called in a loop, typically about 15 times per second (don't tie this to your render loop). 2. I've been trying for ages to figure out how to support unreliable communication, but as far as I'm aware the only protocol available to browsers is TCP. These leaves Wasabi vulnerable to retransmission DoS attacks. As a side note, the only way I've found to completely measure bandwidth including transport is with npm's pcap module, which requires root access. 3. I want to support any browser that has WebSockets. I've tested Wasabi in Chrome (on my desktop and my tablet), Firefox (desktop and mobile), Safari Mobile (on my iPhone 4), and the "Browser" application that came with my tablet. I don't have access to any windows machines to test with IE, but that's obviously a browser I want to target as well. 4. Wasabi maintains no game state whatsoever. It only maintains a list of objects it knows about, and reads directly from the objects to perform synchronization, using the `serialize` method for each class to figure out how and what it should read/write/serialize. This was done to make Wasabi flexible. The only JS game engine I've tested it with is LimeJS, but it was designed to work unobtrusively and robustly with any other engine.
That's beautiful! Looking at the MDN docs, it's API compatible, so it should work with Wasabi right now, unmodified. I know what I'm doing tonight :)
If you really want to explore this concept then absolutely everything can be a referential hook in the DOM, even comments. Just supply a descriptive HTML comment next to a node you wish to manipulate and then search for a key identifier in the comment. I wrote a handy dandy method to help with this and should have been a native DOM method all along. https://gist.github.com/austincheney/6398215
The short answer is I'm not sure; I haven't really done much with drawing images to canvas in the first place, and I'm not sure how the addition of the D3 projection would change things. It'll definitely go on the list to experiment with, though, and if you get anything working please do let me know!
From the article: &gt; &gt; An Endnote &gt; This was our set of 6 impeccable JavaScript tools to support you in Java Development. In order to receive highly well maintained, scalable and extensive Java based applications, hire Java Developers who skilled and experienced services are available at highly competitive prices.
I had a similar problem in a web-scraper I was building. I wanted to get as close to exactly one minute as possible. It also had to work if I restarted the app at an arbitrary time (so it had to go by absolute as opposed to relative minutes). This is what I came up with; it simply rounds up to the nearest given interval and calculates the difference. (runEveryMinute = function() { var theTime = new Date(); var nextMinute = Math.ceil(theTime / 60000) * 60000; var timeTillNextMinute = nextMinute - theTime; setTimeout(function() { // doStuff(); runEveryMinute(); }, timeTillNextMinute); })()
Could you elaborate on this further?
Check out [TweetMigration](https://github.com/Yonet/TweetMigration) by /u/hackerpotato, which although currently wired up to display a heatmap of tweets streamed over a socket connection, could easily be modified to use other data and map any kind of marker/animation on the canvas overlay. The sunlight is positioned at the correct angle for the current time/day of year and it's also got [clouds and a skybox](http://i.imgur.com/KCqP3Ca.png).
Did you consider using the performance.now in browsers that support it? The date object's accuracy is not quite as good.
Interesting problems. I'd be curious to test how the default setInterval handles these cases.
That's a very cool project! I shied away from WebGL with Planetary.js to keep things as simple as possible (and also because I'm not super familiar with WebGL programming). This looks like a fantastic alternative for folks looking for some more advanced stuff!
Before I make that change, can you explain the advantage of using if (action in actions) instead of if (actions.hasOwnProperty(action)) ?
It doesn't really defeat anything. It's one way of doing it. I was only trying to apply the suggested example in a Backbone context. Though, it probably makes more sense to just bind each selector to its own handler the normal Backbone way. Either way, my post is mainly to advocate using attribute selectors in your JavaScript.
A good choice for now, as WebGL would severely limit the reach of this. IE 11's WebGL implementation is typical MS screwiness, there's no support for WebGL on mobile Safari, and everything depends on the client GPU supporting WebGL.