For the moment, sequencing is still best handled by setTimeout called with a delay of 0ms if you are doing reactive work such a drum machine or sequencer. I'd check out the source here [http://chromium.googlecode.com/svn/trunk/samples/audio/shiny-drum-machine.html](http://chromium.googlecode.com/svn/trunk/samples/audio/shiny-drum-machine.html) for the proper pattern to use to avoid latency and temporal drift. EDIT: Now that I see this is all done using band pass filters, I can see why you'd go with automations. You'd still need to maintain a clock relative to metric time if you wanted to sequence interactively I believe. 
Probably buffer underruns. 1024 is a bit low for web work considering you have no idea what kind of machines people are going to be running this on, especially since latency isn't a consideration here. I'd use a minimum of 2048. 
Nope, a rhythmic click-click-click in both channels even with one generator.
Well if you find out which one it is, let me know. I'm Tim Branyen btw. :-p
Thanks for the tip! Forgot to consider buffer size. I've upped it to 4096 just to be safe.
Maybe I just haven't been looking, but I have yet to see anything that dissuades me from the opinion that YUI is far too heavily dependent on classical object oriented models. In practicality, this isn't the way most modern JS applications are constructed (or, in hell - that 10,000 line global.js). They are a conglomeration of design patterns (and in some cases just bad legacy code) - singletons, object constructors, asynchronous event callbacks, setTimeouts and revealed modules - all constructed in different ways. If, like yahoo, you have a dedicated team of js engineers who really want to write code that can be picked up and put down by reading docs - similar to java, its a great way to use the language. If, like most companies, you have php developers, css designers, db guys, and marketing people all providing a mess of crap js, you simply can't afford the organizational overhead that YUI requires.
What browser/OS/hardware are you running?
YUI2 is the reason YUI3 isn't that much popular. YUI3 is enterprise class JS toolkit and jQuery is for designers.
Chrome 22.0.1201.0 dev-m / Windows 7 / Whatever the latest Realtek integrated chip is.
Unfortunately the noise is still there even with the increased buffer. It'd be interesting to see what the simplest code is that reproduces this problem , then submit a bug report to Chrome. However, your code is beyond me right now.
haha. ummm...in that case it may just be hardware compatibility thing...my only other guess is are you running Diablo 3 on one monitor and an Adobe Premier with 80 gigs of video in another and this in the background? 
hmmm...should run fine. that's really odd. I just checked on my windows 7 machine and had no probs. I am using a presonus I/O for the sound but it shouldn't matter. I dunno, I'm stumped. 
I like. I'm going to give it another look.
A quick look through the YUI 3.* repo commits doesn't show any from him. He may have had something in the YUI 2 repo though.
Ah ok, I didn't know NFL, Mint, and Wells Fargo used it. I looked for a list of sites running it and didn't find anything recent. Good response, but allow me to rephrase the question: Do you feel there is there any particular reason YUI isn't **more** popular than it is currently? Like I said originally, it's clearly built to handle enterprise level web apps, what's holding it back?
I take it chrome stable isn't enough (20.something)
I saw this [blogpost](http://1closure.com/2012/07/object-oriented-javascript-part-2-how-the-prototype-works/) on reddit earlier, and it seems like a decent place to start for understanding prototype vs. object.
It's possible the megamenu script is storing the menu attributes in a single location... this would be odd... but from what you're describing it's possible. You'd need to dig into the script's source to verify though. In the code you showed the values are constants... any chance that in your actual code has these in variables? A separate JS is very unlikely to solve the problem.
Not really impressed. Haven't really learned anything.
&gt;It's possible the megamenu script is storing the menu attributes in a single location... this would be odd... but from what you're describing it's possible. You'd need to dig into the script's source to verify though. Possibly....there's two files in the JS folder that seem relevant to this, "megamenu.js" and "megamenu.js.min" &gt;In the code you showed the values are constants... any chance that in your actual code has these in variables? Looks like that might be the case....here is the contents of "megamenu.js": ------------------------------------------------------ (function($){ function megaMenuOver(){ var dropDown = $('.dropcontent, .fullwidth',this); if(hoverIntentEffect === 'hover_fade'){ $(dropDown).fadeIn(hoverIntentShow); $(this).hover(function() { $(dropDown).fadeOut(hoverIntentHide); }); } else if(hoverIntentEffect === 'hover_slide'){ $(dropDown).slideDown(hoverIntentShow); $(this).hover(function() { $(dropDown).slideUp(hoverIntentHide); }); } else if(hoverIntentEffect === 'hover_toggle'){ $(dropDown).animate({height: 'toggle', width: 'toggle', opacity: 'toggle'})(hoverIntentShow); $(this).hover(function() { $(dropDown).hide(hoverIntentHide); }); } else if(hoverIntentEffect === 'click_fade'){ $(this).click(function() { $(dropDown).fadeIn(hoverIntentShow); $(this).hover(function() { $(dropDown).fadeOut(hoverIntentHide); }); }); } else if(hoverIntentEffect === 'click_slide'){ $(this).click(function() { $(dropDown).slideDown(hoverIntentShow); $(this).hover(function() { $(dropDown).slideUp(hoverIntentHide); }); }); } else if(hoverIntentEffect === 'click_toggle'){ $(this).click(function() { $(dropDown).show(hoverIntentShow); $(this).hover(function() { $(dropDown).hide(hoverIntentHide); }); }); } } function megaMenuOut(){ var dropDown = $('.dropcontent, .fullwidth',this); $(dropDown).hide(); } function megaMenuClickOutside(){ $(document).click(function(){ $('.megamenu').children('li').removeClass('active'); $('.dropcontent, .fullwidth').hide(0); }); $('.megamenu').click(function(event){ event.stopPropagation(); }); } $.fn.megaMenuCompleteSet = function(options){ var options = $.extend({ menu_speed_show : 300, // Time (in milliseconds) to show a drop down menu_speed_hide : 200, // Time (in milliseconds) to hide a drop down menu_speed_delay : 200, // Time (in milliseconds) before showing a drop down menu_effect : 'hover_fade', // Drop down effect, choose between 'hover_fade', 'hover_slide', 'click_fade', 'click_slide', 'open_close_fade', 'open_close_slide' menu_click_outside : 0, // Clicks outside the drop down close it (1 = true, 0 = false) menu_show_onload : 0 // Drop down to show on page load (type the number of the drop down, 0 for none) }, options); return this.each(function() { var megaMenu = $(this), menuItem = $(megaMenu).children('li'), menuDropDown = $(menuItem).children('.dropcontent, .fullwidth'); $('.dropcontent').css('left', 'auto').hide(); $('.fullwidth').css('left', '-1px').hide(); if(options.menu_click_outside === 1){ megaMenuClickOutside(); } if (Modernizr.touch){ $(menuItem).toggleClass('noactive'); $(menuItem).bind('touchstart', function() { var $this = $(this); $this.siblings().addClass('noactive').removeClass('active').end().toggleClass('active').toggleClass('noactive'); $this.siblings().find(menuDropDown).hide(0); $this.find(menuDropDown) .delay(options.menu_speed_delay) .toggle(0) .click(function(event){ event.stopPropagation(); }); }); } else if (options.menu_effect === 'hover_fade' || options.menu_effect === 'hover_slide' || options.menu_effect === 'hover_toggle' || options.menu_effect === 'click_fade' || options.menu_effect === 'click_slide' || options.menu_effect === 'click_toggle'){ hoverIntentEffect = options.menu_effect; hoverIntentShow = options.menu_speed_show; hoverIntentHide = options.menu_speed_hide; // HoverIntent Configuration var hoverIntentConfig = { sensitivity: 2, // number = sensitivity threshold (must be 1 or higher) interval: 100, // number = milliseconds for onMouseOver polling interval over: megaMenuOver, // function = onMouseOver callback (REQUIRED) timeout: 200, // number = milliseconds delay before onMouseOut out: megaMenuOut // function = onMouseOut callback (REQUIRED) }; $(menuItem).hoverIntent(hoverIntentConfig); } else if (options.menu_effect === 'open_close_fade' || options.menu_effect === 'open_close_slide' || options.menu_effect === 'open_close_toggle'){ $(menuItem + ':nth-child(' + options.menu_show_onload + ')') .children('.dropcontent, .fullwidth').show() .parent(menuItem).toggleClass('active'); $(menuItem).unbind('mouseenter mouseleave'); if (options.menu_effect == 'open_close_fade'){ $(menuItem).click(function() { var $this = $(this); $this.siblings().removeClass('active').end().toggleClass('active'); $this.siblings().find(menuDropDown).fadeOut(options.menu_speed_hide); $this.find(menuDropDown) .delay(options.menu_speed_delay) .fadeToggle(options.menu_speed_show) .click(function(event){ event.stopPropagation(); }); }); } else if (options.menu_effect === 'open_close_slide') { $(menuItem).click(function() { var $this = $(this); $this.siblings().removeClass('active').end().toggleClass('active'); $this.siblings().find(menuDropDown).slideUp(options.menu_speed_hide); $this.find(menuDropDown) .delay(options.menu_speed_delay) .slideToggle(options.menu_speed_show) .click(function(event){ event.stopPropagation(); }); }); } else if (options.menu_effect === 'open_close_toggle') { $(menuItem).click(function() { var $this = $(this); $this.siblings().removeClass('active').end().toggleClass('active'); $this.siblings().find(menuDropDown).hide(options.menu_speed_hide); $this.find(menuDropDown) .delay(options.menu_speed_delay) .toggle(options.menu_speed_show) .click(function(event){ event.stopPropagation(); }); }); } } }); // End each }; })(jQuery); ------------------------------------------------------------- ....I notice that the initial script $('#megamenu_first').megaMenuCompleteSet({ menu_speed_show : 300, // Time (in milliseconds) to show a drop down menu_speed_hide : 200, // Time (in milliseconds) to hide a drop down menu_speed_delay : 200, // Time (in milliseconds) before showing a drop down menu_effect : 'hover_slide', // Drop down effect, choose between 'hover_fade', 'hover_slide', etc. menu_click_outside : 1, // Clicks outside the drop down close it (1 = true, 0 = false) menu_show_onload : 0 // Drop down to show on page load (type the number of the drop down, 0 for none) }); .....references ".megaMenuCompleteSet"....could it be fixed by duplicating that section in the js code and renaming it or something? 
hmm, I'd switch to YUI just for being able to type Y.all() in my code while pretending to be a southerner.
Yeah... it looks like the function function megaMenuOver() is relying on the global variables hoverIntentEffect, hoverIntentShow, hoverIntentHide (set in $.fn.megaMenuCompleteSet). The fix for this is straight-forward if you're familiar with how jquery extensions work. Roughly speaking the first three functions (megaMenuOver, megaMenuOut, megaMenuClickOutside) need to be moved to inside the $.fn.megaMenuCompleteSet = function(options) { } definition. Then the options associated with a specific menu need to be stored on the element itself, ie. just moving the functions and making them use the options variable isn't going to be enough. Pretty hard to do without full source and a bunch of time. Maybe contact the developer? Or live with the limitation :) 
I was under the impression that Chrome stable had the Web Audio API enabled by default, but in case it isn't, you should be able to enable the Web Audio API in chrome://flags, like Plornt suggested (though I believe "experimental javascript features" is an entirely different flag, not related or necessary for my page to work).
I can't remember where I read it, might have been a comment here or on stack exchange, but someone said that requireJS was a solution to a problem which doesn't exist. Has anyone used requireJS extensively and decided it wasn't useful for them?
Howdy, y'er welcome to it! --Robert
That's a shame, I was talking to him about it on IRC a few weeks back. I like his product.
I think you raise a good point; jQuery is tailored for Web pages, and YUI is tailored for Web apps. A good example of this is Mint.com. They use jQuery on all their public facing marketing pages, but once you log in, those pages all use YUI. Exceptions of course exist, notably something like Twitter using jQuery, and YUI's [SimpleYUI](http://www.yuiblog.com/blog/2010/09/03/coming-inyui-3-2-0-simpleyui/) module that loads in jQuery-like functionality and exports it to a global.
To address the size criticism, keep in mind YUI is really intended to run from our CDN, and that's how most developers use it. Include the seed file ([yui-min.js](http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js)), then the module loader takes care of loading the files it needs from the CDN, which concatenates all the modules into a few minified files. It's great because you don't need to host any files yourself and you get super-fast, minimal HTTP requests. In the instances where it is preferred to self-host the library, then it's beneficial to set up your own combo-loader to reduce the size &amp; number of requests. So since it's a bit of work to efficiently host it yourself, unless you have a good reason (and there are some), just use YUI's CDN. And yes, all of the documentation, examples, user guides, and unit tests are all included in the main source tree. This is ideal because it allows the community to more easily contribute, and when you download/clone YUI, you get everything. If anyone just wants the library files and nothing else, you can clone the repo and move the /build/ folder to wherever you like.
Is it just me or does anyone else prefer JavaScript?
So what is holding YUI back, or what can it do to become more popular? So here's some personal opinions... Before I throw out my commentary, if anyone wants opinions from some notable names on the strengths &amp; weaknesses of the YUI project, see John Resig's Quora response to [How could YUI3 improve its image compared to jQuery, MooTools, etc.?](http://www.quora.com/How-could-YUI3-improve-its-image-compared-to-jQuery-MooTools-etc/) and the Nicholas Zakas [Response to John Resig’s comments about YUI](http://www.nczonline.net/blog/2010/11/03/response-to-john-resigs-comments-about-yui/) Now, my thoughts... - Like most corporate backed open-source projects, it's very focused on needs of the company funding it. This means that if your company has similar needs to Yahoo (scaling, flexbility) and has the resources to back a development team, YUI is going to be ideal for you, and our roadmap will align nicely with your needs as well. Problem is there are few companies that compare to Yahoo's size, scale, and resources. So, I would like to see YUI become less Yahoo-centric, which really just means more companies funding people to work on YUI full-time for their own projects. SmugMug for example employs a few core contributors, which is great for the project IMO. We need more full-time contributors. - The size criticism (see: greensp's comment) is a growing worry. As the core components are becoming more stabilized, that frees up team resources to work on new fancy widgets &amp; features. The upside to that is it gives the community more new toys to play with and provides a more competitive library. The downside is that it continues to increase the size and gives us more to maintain. Right now there are two silos for hosted modules; The YUI-developed core library, and the community-developed [Gallery](http://yuilibrary.com/gallery/). If we can merge those two together a bit more, that would decrease the size of the core library, increase the pool &amp; quality of modules, and get everything on an even field. - I'd like to see the library a little easier to learn for JavaScript developers. Things like [SimpleYUI](http://www.yuiblog.com/blog/2010/09/03/coming-inyui-3-2-0-simpleyui/) and the [JSRosettaStone](http://www.jsrosettastone.com/) are great ways to get started with YUI, so maybe more focus on evagelizing those starting points. And really, just more evangelism in general. Also, the knowledge &amp; experience of JS developers is radily increasing, which has eased their understanding of what we're trying to do. Long-time YUI things like compressors, modules, &amp; loaders used to seem so foreign to JS devs, but they now see the value as CommonJS Modules, AMD, Require.js, etc. are becoming more the norm. - Some people (see FSFatScooter's buried comment) seem to associate a negative connotation with Yahoo, which apparently means YUI must not be good? I usually get a laugh out of those. So, seems to me that Yahoo producing great products will in turn help out YUI's perception as well. It would give us more chances to have our engineers talking about awesome things they've built using YUI, like most recently "[Expanding Yahoo! Axis Across 3 Screens ](http://www.youtube.com/watch?v=oNki-D0lCsM&amp;feature=plcp)". To conclude, the thing holding YUI back is just not enough awareness of what YUI is or what its strengths are. If people understand that YUI is just a module pattern and a module loader, then they'll see that YUI is really just a small, simple, fast, platform-agnostic JavaScript library. Or, as Mojito has proved, a JS runtime. After that, there's a whole world of optional modules, widgets, and doodads to use, if you like. 
&gt; If, like most companies, you have php developers, css designers, db guys, and marketing people all providing a mess of crap js, you simply can't afford the organizational overhead that YUI requires. I have to disagree here. I work for Canonical on the Ubuntu One team. We use YUI across Canonical, and we regularly have people pick up and put down javascript (we're trying to stop that, but it's a convenience we don't yet have). YUI has a steep learning curve, sure. But when you're not in the javascript all the time, you *need* that organizational overhead, or your javascript is going to be a pile of spaghetti in a hurry.
&gt; One does not simply delete x. http://www.quickmeme.com/meme/3q3ijj/
Hands down, the best part of YUI is Loader. Hipster YUI was loading modules on demand before it was cool. If you only need a single module, you can load only that module. If you need 20 modules, you can load them all in a single HTTP request. We self host our YUI combo instance since we require HTTPS on Ubuntu One. This requires a bit more setup than, say, jQuery. It's worth it once it's set up, since anyone can create new modules without having to think *too* much about performance hits (they should, of course, but the impact is small).
Holy shit, his site is timecube.com plus tons of awesome multimedia. I love how he wants to bill someone at his CEO hourly rate of 247$/hour but can't find any other employees to do the work, despite his admission that he's not the best coder.
Wow, great response. Thanks I don't really care about the "open-source vs yahoo" stuff, in fact I would side with the "meeting Yahoo's needs makes it more powerful" side of the argument. But I will say that you've done a good job debunking a lot of the misconceptions that people (myself included) seem to have about it. As for the awareness, maybe you've done a little bit to remedy that in these comments :P
No - just that most sites aren't enterprise level web apps.
I wondered that for a long time, too. (~2 Months ;)) At first: I'm an intermediate programmer, good fundamental knowledge in OOP (not prototype-oop / object based programming or whatever you call it). 1) I have to develop part-time an internal project-management-software for a company as web-app and 0% experience with front-side development, therefore null experience with javascript. After two or three weeks, with Django as backend and jQuery as frontend, I replaced Django with Mojito (which is based on node.js &amp; YUI) and jQuery with YUI because - except for one django-specific reasons (db-layer) - it has a huge benefit: **ONE Language &amp; ONE Framework on Client &amp; Server**. I think this is a unique property of YUI (except probably GWT, but with Java). 2) It took me a couple of days to realize that YUI is much more than jQuery. Look at the [YUI User Guides](http://yuilibrary.com/yui/docs/guides/). Afaik jQuery is covers "only" the DOM (Node, Events) and AJAX. If people hear "javascript library" they think about the DOM, but that's old-fashioned (? I'm new in js-developing). If you here "c library", do you think about GUI? But on the [YUI Quick Start](http://yuilibrary.com/yui/quick-start/) page are only topics covered who are also a part of jQuery (DOM &amp; AJAX). That's because a simple web page don't need more, but YUI (and other JS-Frameworks) are not developed for simple pages - but usable for this purpose as well. 3) That YUI is a project by Yahoo is not that good: Here in Europe many people don't even know that Yahoo still exists, if you think on Yahoo you think on spam-mails and a company which is a a shadow of one's former self (and also a terrible voice screaming "YAHOO!!!"). That Yahoo makes as much money as Facebook don't know many people (hello web bubble again? :) ). But I think it isn't that bad either. Look at Googles JS Closure Library: Used by many popular Google Apps like GMail &amp; G+ (and Drive-Apps?) . Google is the dream employer. But use of Google Closure outside of Google? I can't name any site. 4) The YUI site itself needs some improvements. All in all good, much better than the YDN site and the design is nice, docu is GREAT but the UI: * yui**library**.com first header: "YUI is a free, open source JavaScript and CSS **framework**" For many Developer are Library and Framework to different kinds. * Quickstart -&gt; Configurator. Yep every body who needs a quick start wants to use a configurator to calculate his dependencies. :&gt; * Documentation -&gt; User Guide &amp; Tutorials. Many people will click at Tutorials, but instead want to see what is on User Guides. * Documentation -&gt; User Guide &amp; Examples: I read e.g. the page about the Using Nodes, now I want to read something about Events, instead of having a overview and click on Events (like most other docus have it), I need Documentation -&gt; User Guide -&gt; *loading* -&gt; Events. * No Overview-Article what are parts of YUI and what it can do for you. Only an indexed based overview (User Guide). * API Docs (great tool). Why isn't the api-tabview scrolling with the page (if it isn't bigger than the screen)? * Other Projects. Sounds bad. YUIs advantage against other Frameworks is that is has also a Compressor, Docu, Testing... "Other Projects" sounds like b-side of a disc. * Community -&gt; Gallery. About a week, I thougt it is something similar to [MDN Demos](https://developer.mozilla.org/en-US/demos). Maybe on "other projects" (sill an bad name imo) * Integrate the blog in the webpage. * I hate dropdowns. :&gt; X) More use of an public question-site like stackoverflow or reddit? :): @stackoverflow: * YUI: 4,791 results * jQuery: 37,473 results Show popular website who use YUI (mint.com, NFL, etc.). As well as Web Apps who use YUI. With Web Apps, all-in-one solutions will get more popular, push the [app framework](http://www.youtube.com/watch?v=wCexiX_eUJA)! **tl;dr** * Promote YUI as an all-in-one solution, an huge framework (where dom is only a part of it), compressor, doc, gallery, and as well a server side solution (with or without mojito). NOT as an enterprise framework - many developer I know automatically think on Java EE &amp; Oracle * Yahoo has an bad image which bleed more or less into YUI. * Improve the yuilibrary.com * More publicity! At last: Sorry for my bad english
too bad Axis doesn't run on Linux.
Not that I'm for dart, but your point about "it'll be slower" is patently false and one of the primary motivators for dart. Remember, these are the same people that work(ed) on V8. The idea behind dart is that it will always produce code that can be optimized by the interpreter, even it's clumsy or counterintuitive to write by hand. For instance, instead of i++ You'd probably see ( i = i + 1 | 0 ) Or some shit like that, because that's more predictable. That's a bad example but the point to take away is that js is difficult to optimize for because it's so mutable and garbage producing, but not if you go out of your way to signal that you are not using those features (unless you are). Even today you'll have a hard time producing js by hand that performs better than C you ran through emscripten.
Only tested in the latest Chrome!
My confession is I rely far too much on jQuery. 
Thanks, I don't feel so bad now.
I don't even write it, I just find working plugins off the internet and modify them very slightly to work however I want :(
Entry-level Javascripter... I don't even know what that means.
I mostly use it just to catch missing 'var' statements during development.
Very nice feel, good job! Also: Choppier but still playable at 1920x1080 in Firefox (to be fair, that seems to be the case in Firefox with anything using WebGL).
I tried it and all I got was "CPU isn't buggy!" My laptop is also an Intel Core 2 Duo. Does anyone have an explanation of how this thing works?
fake?
It looks like SHPAML. The problem is not many editors support syntax hilighting for this format :/. Is there any Jade plugin for Aptana?
First I want to say that in general I agree with several of the other comments in that there is no 'correct' style. There are several things that I have found and try to do consistantly that I find make the code easier to read, especially when one tries to code back to code that they have written months before. Take this, as with all other advise given on the internet, with a grain of salt. * I always var statements at the the top of functions as comma separated values, and only assign simple values to them, if any. Otherwise define the var, then assign it a value later. for example: var actions, whenResetClicked, whenSearchClicked; actions = { ClearFilter: "ClearFilter", Search: "Search" }; also, when you use comma separated variable assignments with complex values, it gets hard to follow. like here: my.getEquipmentFromRow = function (row) { return { EquipmentId: row.EquipmentId, EquipmentCode: row.EquipmentCode, SerialNo: row.SerialNo, PAU: row.PAUDescription, HasAccess: row.HasAccess, MvtStat: row.MvtStat }; }, // &lt;-- this comma should probably be a semicolon. my.layout = function () { $('#btnSearch').button(); $('#btnReset').button(); $('#btnSaveSearch').button(); * Object literals are more readable as multiline my.setMultiSelect = function(selector) { selector.multiselect({ multiple: true, noneSelectedText: "", selectedList: 1, height: 175 }); }; * Capitalization. I agree with some of the other feedback about only constructors in general starting with caps, and the rest being camel-cased, but in this case you stated that you did have a reason for your Caps, so, when possible, try to be consistant with these. Two tools I have found to help with some style elements are [jshint] (http://www.jshint.com), which I am assuming you already know from the strict statement, and coffee to js compiler. Even though I don't use coffee regularly, in general, I like the js style that it compiles to. In looking at your script one of the things I did was run it through a js to coffee converter, then back again from coffee to js. (the only thing i don't like about the output tends to be the excessive use of return statements, which I later edit out) The converter i used lives here: [js2coffee](http://js2coffee.org) For someone who has only been doing JS development for 6 months, this is excellent. I only wish that at six months my js was this good. So, congradulations on that. Especially since there are tons of js tutorials on the web with about half of them contradicting the other half. This is speaking as someone who has been doing js, along with several other langs for 10+ yrs. That link from myslef about Principles of Writing Consistent, Idiomatic JavaScript, actually looks pretty good. Made a revised version of your js for you to look at here: [edited snippet](http://pastebin.com/BWPBePHw) Just my $0.02, feel free to ignore. Hope it helps. 
I just pasted the contents of the page onto my github site, I didn't write the code. It's a hoax anyways judging by the hackernews arguments
$(document).ready(function() { // your code here });
http://www.reddit.com/r/netsec/comments/wku38/intel_core2duo_cpu_cache_controller_bug_poc/ http://www.reddit.com/r/programming/comments/wkxhp/zero_day_javascript_exploit_found_that_affects/ http://news.ycombinator.com/item?id=4245982
Oh how I wished this worked..
I does.
 $(window).load(function() { // Stuff and things });
That's what `onload` is supposed to be — it should fire after all the images and IFRAMEs have loaded. [Here's the documentation.](https://developer.mozilla.org/en/DOM/window.onload) Are you sure the problem isn't elsewhere?
amen
I may be a bit late here, but if you have control over the C# code, than you do have a choice. You can tell the serializer explicitly what names to use and it will stop using the names of the properties and use your custom names instead. It really depends on what JSON serializer you are using, but any decent implementation should have an option to do that. I think you can use DataContract/DataMember attributes for the default one which comes with the framework.
Turned out to be fake yes.
Don't get it twisted. Someone not liking your presentation isn't being an ass.
Actually, you can control the casing using DataContract/DataMember. I have also recently discovered that JSON.NET provides a way to do this as well....so I will be making all of the casing consistent.
Thank you for all of the suggestions. I have been using jslint a lot to try and develop a consistent style. Still have a ways to go I think. I will be adopting many of your suggestions....namely assigning things to my var's after declaring them. Much easier to read. 
&gt; unescape(evilcode); think our friend was a comedian
Also, I'm personally a fan of jshint vs jslint (hint being a fork of lint), since jshint i more lenient in showing you best practices without forcing them upon you (options to dismiss/disable coding options). Since you may have some good reason as to why you don't which to conform to certain practices, it does come in handy being able to disable options (for myself at least). Search for 'jshint vs jslint' or [why-i-forked-jslint-to-jshint](http://anton.kovalyov.net/2011/02/20/why-i-forked-jslint-to-jshint/) if you're interested. Not sure if jslint still has same issues, since i've moved to jshint almost exclusively, but something to think about, anyway. Again, just my $0.02 so feel free to ignore.
Damn this is so true. [Case in point](http://addyosmani.github.com/todomvc/)
More information about implementation: http://nanochess.110mb.com/chess4.html
"Play chess against computer with queen only promotion and without castling or en passant."
Can't castle 
I didn't know you could promote a pawn to anything *other* than a queen ...
Well, I'm not really a chess player, but I think that with the regular rules you can choose freely - it's just that there's never any reason to not pick a queen.
And now I know. Cheers!
I can't find the uncompressed source, anyone have a link?
Try Codeacademy. It worked for me...though I *still* can't quite explain it in words...
Did you read the description: Tiny Chess. Play chess against computer with queen-only promotion and without castling or en passant. Click origin square and then target square to move piece, it will validate moves. Update 1: Big chessboard with Unicode graphics, illuminates piece to move. Update 2: Better gameplay and variety. Now shows immediately user's move. Thanks to @romancortes for optimization tips. Update 3: Illuminates last piece moved. Enhanced strength to evade fool and scholar's mate. Thanks to @kamathln for optimization tip. Update 4: Computer now prefers to checkmate instead of stalemate. I did it after reading the article http://malevolent.com/524
&gt; This only really happens if the person notices the imminent stalemate after the pawn has been moved. If a stalemate is likely it's generally much safer to just back off with one of the other pieces to make some space for the king. Not necessarily. You might see that promoting to a rook gives you a mate in two, whereas backing off to give the king an opening and then promoting to a queen leads to a mate in four. Granted, it doesn't come up that much, but neither does realizing halfway through a move that you're about to cause a stalemate.
so you're matching it only based on being the same url as the address bar? How are you persisting the 2 variables on the serverside? 
Finally, a chess program I can beat! 
What do you mean by persisting the 2 vars ?
you are somehow persisting 2 variables serverside otherwise you wouldn't be able to see PDSI for Arizona (an example). You must be persisting both the "Region" and "Variable" serverside in order to generate the map.
I see you're somehow making cookies as I have a "folderC" = "pdsi" and a "legregC" = "Arizona" as well as "regionC" = "az" (among others)
Try to read it here: http://jsbeautifier.org/ In fact, it isn't compressed.
Thank you. I'm just starting to write Javascript and this will be my base for writing it for my current project.
I haven't watched the video yet, but you mention `Object.create` as the preferred method for creating objects, so I thought I should add a note about its support. It's not supported in older versions of IE, so if that's an issue, you have to either patch it or avoid it until you drop support for the older IEs (I think it supported since 9 - [info](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create)). Here's the workaround that Crockford suggests: if (typeof Object.create !== 'function') { Object.create = function (o) { function F() {} F.prototype = o; return new F(); }; } See more [here](http://javascript.crockford.com/prototypal.html), if you are interested - it's the last update.
Woops, That one flew over the cuckoos nest, I compressed them but forgot to resize them.
An alternative to coping the method is "borrowing " it, like: bar.methodInQuestion.call(foo, arg1, arg2); You can use this if you only need the functionality from inside the object and don't want to expose the method. If you still need to expose it you can call this from a method on the object, but it will break in exactly the same cases the coping approach will - if the method uses other methods or properties of the object that aren't there. That said, I agree that a better solution will be to fix the design, so you don't need to do this, since it'll be hard to maintain and it'll break very easily.
+1 for this solution, if bar only needs foo's method in uncommon cases
i tryed to do it like that, but all i then got was a "Uncaught ReferenceError: getNotes is not defined " in chrome console, even thought i could see my getnotes javascript.
your probaly right, my php part looks like this atm: http://pastebin.com/5hv230Pc
Store the dynamic value in a property like data-id="&lt;?php echo $row['idkunder']; ?&gt;" and then do customer_id: $(this).data('id') Or something along those lines. You can acces the customer_id GET value in kunde_note_vis.php and then echo back what you want to display in #searchresultdata. 
Tim Krabbe's pages probably have the most information about the Babson Task, see the links at the bottom of that last Wiki link. It's a wonderful site so worth visiting anyway.
i am getting this error the javascript part Uncaught SyntaxError: Unexpected end of input jquery-1.3.2.js:661 jQuery.extend.globalEval jquery-1.3.2.js:661 evalScript jquery-1.3.2.js:552 jQuery.extend.each jquery-1.3.2.js:692 jQuery.fn.jQuery.domManip jquery-1.3.2.js:526 jQuery.fn.jQuery.append jquery-1.3.2.js:253 jQuery.fn.jQuery.html jquery-1.3.2.js:488 (anonymous function) kunde_find.php:59 success jquery-1.3.2.js:3645 jQuery.extend.ajax.onreadystatechange any idea whats missing ?
I missed a closing `});` at the end, sorry... Also, if you're using 1.3.2, you need to switch out `.on('click', '.kundid'` with `.delegate('.kundid', 'click'`. Or, if you can, update your jQuery version to latest 1.7. 1.3.2 is really outdated.
There's this thing called prototyping, wonder if you heard of it. If you're going to be a dick and not actually answer the question, all I've got to say is fuck you. I stated the site was far from done, I re-factor code 2-3 times on most projects, It's just how I work. There's was no need to be such a condescending cunt-face about it, not a single thing in you comment was helpful, Or new knowledge. Oh, and idiot, Domready isn't the problem, That would in no way explain why Opera and IE handle it fine, But Chrome and Firefox do not. Especially given the positioning of the scripts in the html page, they're the last things being loaded, which you know, in a prototype suffice just as well $(document).ready();, which, fun fact, fires when the last things have been loaded.
With my example you don't need the getNotes selector, just a function yourAjaxCall (which I would rename :))
I am not being a dick here, you are. I was trying to help you and point you in the right direction, no need to make it personal. From what I see you just aren't very familiar with writing good Javascript so there's no point in talking around it. If you don't appreciate my advice, just ignore it. Maybe somebody else will find it helpful. Javascript is an easy language for beginners to get wrong while still having it kind of work, so I believe sometimes it's better to be a "condescending cunt-face" than just telling you how to fix a single bug. Edit: Just to add to your edit: Domready might still be a problem, and in any case it's lazy and dangerous not to wrap your dom-dependent code in a function that is called on domready. If you don't want to follow best practices, so be it. But then don't run to reddit and ask why your crappy lazily written prototyping code does not work and insult people who give advice.
Oh for fucks sake, How many times must I repeat myself? It's a fucking prototype to show a client, the whole site all together is about a lazy day's worth of work. What on earth has led you to believe this is final code?
If you cannot handle criticism then don't post here. I've pointed out at least two errors (initialization before DOMready, hashchange.min.js not loading), the first being such a standard pattern in JS that even if this is a prototype, it should be there. I've also told you some things that would make you a better programmer if you followed up on them. I did this to help you understand that you apparently still have a lot to learn and you get completely defensive and start calling me "dick" and "condescending cunt-face". Even if this is a prototype, you should pay attention to your style and avoid common Javascript pitfalls. Try to do it right the first time, because I know from experience that once it kind of works, it will mostly stay that way and not be refactored. If you have no intention of doing it right, accepting criticism and learning new things then please choose something other to do with your time than programming. You'll just end up being one of these people everyone hates to work with because they write shit code and don't accept any advice.
Sounds like you want to make a mixin and add it to both objects for that functionality. http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript
You are looking for a flow control library loader: [Frame.js](https://github.com/bishopZ/Frame.js) is a great one. To test image loading and such you may need some additional detection software, but Frame will manage the sequence of what detection you run and how it affects the loading of the rest of the scripts on the page.
&gt; IE9 and 10 are fine For now. But IE has long release cycles compared to the other browsers - as long as a new version comes out only once every 2-3 years, IE *CurrentVersion - 3* will be a problem. 
Old (maybe even newer) versions of IOS don't trigger click events on anchors unless you have a href.
Can you give some actual use-cases? Also, `toString()` is probably more appropriate than `valueOf()` -- at least for string coercion. FYI I don't think `if (foo)` is string coercion; you'd need to do something like this instead: `if ('' == foo)`.
&gt;I guess my real question is what invisible/background/primitive/whatever method is returning the text [object Object] and can that be overridden? `toString()` &gt;&gt;&gt; 'hello ' + ({toString:function(){return 'world'}}) "hello world"
Actually, [your example runs fine in Chrome](http://jsfiddle.net/XfZUE/1/). However, one important distinction to make is your call: `alert(foo + '');` Javascript coerces left-to-right (the expression on the left-side of the operator is the determining expression), and so to coerce that to a string (as in my above reply): `alert('' + foo);` 
Didn't know you could do: $(this).data('attr'); to get data attributes. I've been using: $(this).attr('data-attr'); all this time. Thanks for teaching me something!
You're right. However, omitting href can have side-effects like the cursor pointer not being applied, and to not involve further changes to his (like "fixing" link behavior), I just modified his '#' to 'javascript:;' which would not scroll the user to the top at least (if it ever fails).
Yes, there's quite a few changes between 1.3.2 and 1.7.2. The big differences are the separation of `.attr()` and `.prop()`. In 1.5, a total rewrite of the AJAX module was released. How are you wiring your ajax search (code-wise), using a plugin?
Learn PDO and use prepared statements. Now.
i wouldent call it writing, i would call it find blocks on the internet and put them togerther, trial and error :P i know i know but for some reason i just cant get into real coding, how ever if i am provided with a few blocks i can usaly make everything work out like i want...
will do, any good links?
It's a nice simple function to accomplish a reasonable goal. bravo! you might like to check out [Frame.js](https://github.com/bishopZ/Frame.js) and the library loader it is built on LABjs.
Looks good to me. Also, `minify` not `minimify`.
Simple and readable, looks good. But be careful, it won't work in older versions of Internet Explorer, tags don't trigger any "onload" event. You might want to check this: [onreadystatechange](http://msdn.microsoft.com/en-us/library/ie/ms536957%28v=vs.85%29.aspx). I wrote a very similar script some time ago, I now use AMD modules when possible, though. Edit: Oh, I forgot about the [async attribute](http://davidwalsh.name/html5-async)!
Correct I am persisting both "Region" and "Variable" variables... how can I parse the current href for the folder= or region= variables, and use that specific info to apply the desired bold/coloring in the treemenu? Any ideas?
I do too, but I doubt anyone will think it was intentional.
&gt; Newer versions of IE auto update just like other latest browsers Not quite. For one thing, if you're on Windows XP, you won't get past IE8. Pity the poor corporate suckers stuck with a locked-down XP desktop. For them "IE auto updates just like other browsers" is a cruel joke. It's not clear yet if IE10 will run only on Windows 8, or if it will also run on Windows 7 at some stage. (and Vista?) I really don't see any sign that Windows 8 fundamentally does things *differently* that we won't be saying 5 years from now, "and if you're running Windows 8, you're stuck with old IE11" For another thing, Firefox and Chrome are released far more frequently than IE. Firefox comes out once every 6 weeks. So at any time, the next innovations in Firefox are at most 6 weeks away, whereas IE11 is due in what? 1 year? 2 years? Who knows. If IE10.1 comes out with more than just bugfixes, and in a few months time that would be a big surprise. Probably a welcome one but still not in keeping with history. While the IE release cycle is struggling to keep up with Firefox, the Firefox cycle is shifting up to keep up with Chrome...
How about CoffeeScript? I probably wouldn't have a use for this without CoffeeScript support. EDIT: Seriously guys? I'm getting downvoted because of what I happen to need in my workflow? I'm not forcing CoffeeScript on any of you.. I just wanted an answer from OP.
It does support CoffeeScript, but you must use the type="text/coffeescript" attribute on your script tag.
I've got a buddy who will regularly edit php code on his phone/tablet while he's commuting on the Staten Island ferry. I think he's crazy, but he's used to it and it's some extra time he can get stuff done. what really bugs me is trying to use the built-in console on Android browser. usually I use weinre, but sometimes it craps out / interferes with the page / doesn't load soon enough to be useful.
See my post above. If you concatenate and minify, then you've already taken the 'A' out of 'AMD', so why not use the simpler standard that doesn't have RequireJS's many drawbacks? (Which RequireJS has already added a compatibility shim for so the crazy people who *want* lazy loading of modules can have it.)
The variable names are still compressed, I'm looking for something more along the lines of documentation.
There's no simple answer really. You're going to have to figure out a way to parse what 2 options are selected. **Warning: This is super hacky and definitely not the right way of doing this:** //console.log(document.cookie) //you get a big string like: // "dirC=images; clC=_cl; imgC=png; regionC=az; dsC=PRISM; folderC=pdsi; productC=per; legvarC=Palmer+Drought+Severity+Index; legregC=Arizona; treemenu1=0,1,2,11; "... //you can then parse this. //this will get you "az" var region = document.cookie.split("regionC=")[1].split(";")[0]; $("#"+region).find("a").addClass("Active"); //this will get you "pdsi" var folder = document.cookie.split("folderC=")[1].split(";")[0]; $("#"+folder).find("a").addClass("Active"); 
firebug. chrome dev tools would do allow you do the same.
It's not an app, it is a website ;)
in the click handler add 'font-style' italic to the element: $("#accordion &gt; li").click(function(){ if(false == $(this).next().is(':visible')) { this.style.fontStyle = "normal"; $('#accordion &gt; ul').slideUp(300); } this.style.fontStyle = "italic"; $(this).next().slideToggle(300); });
Great, thanks!
ahhh yes didnt think of that -_- thanks.
 function(e) { callback(e); } Why not just _callback_? EDIT: You may also want to append some sort of ID to them, and remove them on next call, or else the DOM will get cluttered and may lag older machines/browsers, especially if it's being used to load scripts in mass (such as if it's attempt to keep a faux constant connection to the server to display live updates).
While this may be true in other languages, it is not true of JavaScript. JavaScript does not initialize individual cells or reserve space for them when creating an array. In actuality, javascript arrays are really just javascript objects with some special rules, like having a length. Please see 15.4.2.2 of the ECMAscript specification, or chapter 6 of Crockford's book. Consider these two different implementations... var a = new Array(10000); var b = []; In this code, the only difference between a and b will be that a.length is set to 10000 while b.length is set to 0. That is it. Given that, the best answer to the OP is the one from the buried SO post which states that new Array() can be changed by code and thus corrupted, but [] cannot. See the first answer in the OP's SO post: http://stackoverflow.com/questions/11500492/what-are-the-best-practices-to-follow-when-declaring-an-array-in-javascript 
Also, link elements are notoriously bad about firing the load event in older but still in use browsers... See http://www.quirksmode.org/dom/events/load.html.
To a degree, re-inventing the wheel is a great learning process, as long as you know you're doing.
Heck yes. I'd add that if you're going to pick a framework or library, pick one that you can understand, because when it doesn't fulfill that last 5% you want, you'll need to know how it works.
Thank you for sharing. I'm confused whether loading CSS asynchronously is even a smart choice or not.
I was afraid of this. The only solution I can think of is to hide the body, initially, and show it after all css has been loaded.
AMD and CommonJS solve essentially the same problem. But CommonJS needs to be processed (into something similar to AMD, usually) before it can be sent to the browser using something like Browserify. Is there an in-browser CommonJS loader?
Use some CSS framework.
I really, really, really hope that I never need that. But I suppose if one *does* need to edit HTML on a mobile, then having an optimised editor for that will help.
At first I was like: wtf is this shit? But if someone really needs this kind of forEach, this would be a better solution: function asyncEach(array, fn, delay){ var i = 0; window.setTimeout(function iter(){ if(i===array.length){ return; } fn.call(array, array[i], i++); window.setTimeout(iter, delay); }, 0); } My function will create only one function for one forEach. The function in the link creates a new function in every iteration step.
What's the point of this? There's no callback to execute once the foreach has ended, so how do you ever know for certain when the re-sorting has finished so you can do something useful with the results?
[15.4.2.2](http://ecma-international.org/ecma-262/5.1/) only says that the length member variable is set - it doesn't appear to speak to any memory allocation or internal processes/behind-the-scenes optimisations that different javascript engines may make use of. For example, in the first case the compiler/interpreter has a hint that there are probably going to be 10000 objects stored in the array, so it could (itself, behind the scenes) decide to allocate the memory for that array at the beginning of a larger-than-usual free block of memory, to reduce fragmentation and in the hope it'll have to shuffle memory around less as the array is used. Conversely, in the second case it can't know this, so it could allocate the memory to a smaller free window (on the basis that there will be many more of these, and *most* JS arrays in practice don't ever reach anything like 10,000 distinct items. This is all hypothetical (I haven't worked in a language where you have to manually manage memory in years, so I'm fairly rusty), but it's at least plausible, and the paragraph you cited only talks about what the object looks like *to javascript code*, not how the interpreter/compiler has to handle or optimise memory-allocation behind the scenes.
atob: [MDN](https://developer.mozilla.org/en/DOM/window.atob) ascii to binary, decode btoa: binary to ascii, encode They work on all major browsers, but not on IE
I can't thank you enough, cheers. 
Thanx. That was very helpful.
&gt; Owldoc is a tool for generating prose documentation using Node.js, in the style of Sphinx. Great! Now what the hell is Sphinx?
**Modern** browsers - sadly IE is a *major* browser, it's just not really a *modern* browser (in the sense of up-to-date standards support).
"DSK-349776 img elements with svg do not fire onload" was just closed as fixed. Hopefully will be in the next Opera Next build or two. :)
I'm surprised this didn't get more upvotes for the UI behind this, what meemoo *is*. wow. Also, /r/meemoo Eagerly awaiting some documentation on this project.
I love a good benchmark and couldn't write one myself last night, so I will concede the point *slightly* given the raw data. However, I do believe that you need to test multiple size ranges for a full comparison, and I did that [here](http://jsperf.com/literal-vs-object-arrays). While I only ran on one browser (FF13), I kept getting different results when comparing literal vs object approaches. Given the lack of consistency in the results I'm not sure there is a correct answer between the two forms from a performance point of view. So perhaps the best answer is the one regarding code safety: &gt; that new Array() can be changed by code and thus corrupted, but [] cannot. Also, see my reply to Sharper_pmp below. Ps. Also see [this jsperf](http://jsperf.com/array-creation-methods) which just compares the two declarations straight up.
Agreed, the devil in javascript is in the implementation. I was going to say that because javascript arrays are not arrays at all, but javascript objects, allocating a block of memory makes no sense whatsoever. Especially given that the values of the array are untyped and can be anything. However, If you have a hint as to the size, you can at the very least allocate a block of memory to hold the references to the values (an array of pointers if you will), so there may be some logic like that being employed. I suppose one of us could go look at the V8 source code for an answer to this, but I treasure my sanity a little too much to go into that rabbit hole. 
I wrote a loader for one customer that does CSS/JS/Image loading and have used it to great success. There's a lot of browsers specific handling though. Also, one gotcha I noticed is that the load/onreadystatechange event on link elements will not fire if the CSS is an empty file on some browsers.
I like the idea so long as you don't get to aggressive with it. I think this is a great idea for basic formatting, but for some quality issues it may be easier to detect the problem and reject the commit (can't remember if this is possible/easy with svn). As far as formatters go, JsBeautifier is one of the best. I have a decent amount of experience with [the python port](https://github.com/einars/js-beautify/blob/master/python/jsbeautifier/__init__.py), which is excellent. There is also a [javascript port](https://github.com/einars/js-beautify/blob/master/beautify.js), which I have not used yet. For reference, I maintain the [JsFormat](https://github.com/jdc0589/JsFormat) sublime text 2 plugin, which uses the python JsBeautifier library. The plugin is at around 21,000 installs and I have received **very** few complaints about how it formats code.
Hrmm. Uh. Hmmmm. I think the author has misunderstood (or completely ignored) the point of [separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). The *reason* proper, progressively-enhanced Javascript is loosely bound to HTML elements, and nothing in the HTML tells you how the javascript attached to it behaves is because that's the **entire point** of good web design. The loose links between HTML, CSS and JS aren't annoying and accidental, they're completely intentional, and a massive benefit. In fact they're arguably the single most important and profound design decision driving the development of these technologies for the last few years. You don't want presentational crap cluttering up your HTML, so you give HTML elements classes and IDs, separate out all the presentational crap into CSS stylesheets, and then *apply* the CSS to the HTML. The HTML is semantic - it says what the content *is*, and nothing in the HTML says how the content should *look*. Similarly, you don't want behavioural crap cluttering up your HTML, so you give HTML elements classes and IDs, separate out all the behaviour into Javascript files, and then *apply* the JS to the HTML. The HTML is semantic - it says what the content *is*, and nothing in the HTML says how the content should *behave*. This is absolutely fundamental, basic, beginner-level Good Web Design. It it literally the first thing a web designer/developer should understand about the medium. Finally, knowing this, if the author *seriously* still advocates disregarding SoC and going back to mixing up content with behaviour (and hell, why not go back to FONT tags while we're at it!), why on earth would we declare the event handlers in weird, non-standard `data-bind` attributes and then add a weird, unnecessary additional layer of javascript like Ivy to pull out and properly attach them? What's supposed to be better about: `&lt;a class='button orange' data-bind='on: click buy'&gt;Buy Now!&lt;/a&gt;` than: `&lt;a class='button orange' onclick='buy();'&gt;Buy Now!&lt;/a&gt;`?
I like the jsHint idea. Just don't get too liberal with your rejection conditions or the devs will mutiny. I actually stopped using jsHint/linters a lot of the time because they would always flag things that were not issues, even though I had spent time configuring everything. They are great to run every now and then for unintentional usage of ==, etc...
Event handlers are the least of it, the data binding (ie: as values in JS change, the DOM updates) is more important, and I probably should have made that more clear. Anyways, thanks for taking a look. As a slightly more interesting example, take a look here: http://adamsanderson.github.com/ivy/examples/function_bindings.html The HTML/JS below could use some better formatting, but you should get the idea.
Oh man, that's supersimple. I like it. Gonna play with it a bit. Thanks. Debugging individual files is much more pleasant than debugging a single concatenated file. Production will get one file. Dev will get many.
I think I would go nuts trying to write anything on a phone, but it seems like a fun project :)
"Better" is subjective. I haven't bought an Impact license yet, but it looks like a very polished framework and the map editor looks very good as well. The forums seem fairly active, if that's of value to you. If you want a free alternative, I've used [Akihabara](http://www.kesiev.com/akihabara/) and found it easy enough. There are some good Akihabara tutorials around the web. Don't expect too much from the documentation, you're probably better off just reading the source code and figuring it out if you have big questions. You may also find this [list of HTML5 game engines](https://github.com/bebraw/jswiki/wiki/Game-Engines) useful.
Awesome, thank you for finding this.
Do you want an engine, or a library. An engine makes you do thing their way. A library helps you do things your way. Personally, I prefer a library. I use JawsJS http://jawsjs.com/ Impact.js is an engine. Now, Impact.js looks great. They bundle some things that you would have to use other software for, like the map editor (I use Tiled). I especially like the looks of the profiler. But, there is no trial version - pay your $99 and if you end up not liking it, tough. Anyway, it's personal preference, engine or library. If you prefer an engine, $99 is really not that much for what it looks like you get.
I understand why Google does it -- for tracking click-throughs -- but god damn is it annoying to not be able to right-click&gt; "copy url" on Google search results. I may well write a userscript to do it.
Oh, here's an improvement to reduce the chance of scope collisions: function require(lib) { var req = new XMLHttpRequest(); req.open('GET', 'http://self.com/commonjs/' + lib, false); req.send(); if(req.status == 200) { var env = { module: { exports: {} } }; with(env) { eval(req.responseText); } return env.module.exports; } else { throw new Error("Could not load module " + lib); } } The ``env`` mask should catch any globals inside the module scope.
Maybe you could pass oldValue an optional parameter of .on('change')'s callback? Yeah, you can get the value, but it might be beneficial to pass the previous value as the second parameter: (Modified from your examples) a.on('change', function(value, previousValue){ console.log('New value is', value); });
1) The game sometimes thinks the snake is hitting itself even when going in a straight line. 2) Food showing up behind your ad's is just retarded. 3) It moves really fast. For me not a big deal, for casual peeps it may be too difficult.
You're probably right that 'templating' isn't the right word, but I've been using this in the same place as other templates. it's definitely lacking a proper foreach and other things that real templates have. &gt; What did you find lacking in the other JavaScript template frameworks like JQuery Template? I'm not entirely sure, to be honest. I feel like they do the same thing, provide a method for building html dynamically in the browser. Usually I've got a template like this (Same example as the fiddle): &lt;script id="example" type="text/x-jquery-tmpl"&gt; &lt;tr&gt; &lt;td&gt;${name}&lt;/td&gt; &lt;td&gt;${price}&lt;/td&gt; &lt;td&gt;${desc}&lt;/td&gt; &lt;/tr&gt; &lt;/script&gt; &lt;table id='stuff'&gt;&lt;/table&gt; $("#example").tmpl(tbldata).appendTo($('#stuff')); $('#stuff &gt; tr').click(function(e){ var children = $(this).children(); alert("You bought "+children[0].text()+" for "+children[1].text()); }); That has a separation between the markup and the events, which I guess is a good thing. But with the click handler it has to fiddle with the dom to get data out of it anyway, so you're coupled back to the dom again instead of the data that you're representing. Maybe I'm just using these templates wrong? (Probably)
yep, it just scans the headings in your Markdown and generates anchors and a table of contents for them 
http://sphinx.pocoo.org/ It's a pretty awesome documentation generator, if not a bit heavyweight. I just wanted to write a much lighter solution that wasn't quite as complex but could still generate some neat documentation. 
Very interesting.. looking into it now (your example just shows drag.. no drop/ hightlight). I wish it were possible to set 'draggable' like CSS instead (`#object span`) as there are a lot of span elements. Also its a little odd that the cursor for it is the 'banned' one. PS. Can anyone point me to that site that shows what browsers support what features please?
&gt; [...] but if your game isn't tile-based, you'll have to program a bit more. Just out of curiosity: which 2D game (type) isn't tile-based?
Angry Birds, and other physics-based games, come to mind. Of course, any genre of game can be made tile-based. Minecraft made a *sandbox* game tile-based, and that turned out well.
Thank you !
parseInt is slower because the result of the operation is computed, converted to a string, then the string is **parsed** to obtain an integer result. I fail to see how it is surprising that it's slower.
Thanks for taking the time to write and post this. I saved it so I can read it later, I think it's an interesting problem to tackle.
Thanks for that, I'll head over there and subscribe! Yeah, it's a basic wordpress blog and wordpress didn't much like the &lt;a/&gt; tag.
I use a lot of Base 64 encoded strings and numbers. I am forever required to encode/decode them, and the process until now was to find an online encoder/decoder and do it that way. This cuts out a few steps.
I wrote a compiler, and for the different compilation stages, it essentially does this. Each file has 2 or 3 seperate steps, and all of those are placed into an array, which is then iterated over by a timeout. An on end step is also appended to the array, and a callback for when parsing is finished. It dramatically improved the responsiveness of the browser.
If you add .data() from JavaScript, it doesn't add a data attribute to the DOM node. I think jQuery keeps an internal lookup for DOM node --&gt; data collection.
Sure, that makes a ton of sense. I might just do that tonight. Thanks for the suggestion. Edit: Just [pushed that to github](https://github.com/adamsanderson/ivy/commit/a4f7e768bb9d8527ca2ef114a24cc7cae81fbb75)
Just found out - "dragend" is fired on the thing you *are dragging*. "drop" is fired on the thing you *dropped something on*. 
Why the hell would anyone use parseInt to do math? It's not an unlikely thing to do, just poor planning if any major function relies heavily on it.
&gt;[...] backend items whose ID's are base64 encoded on the front end. That sounds completely pointless. Why not use the same ID everywhere? It's an ID, it's purpose is to unambiguously identify things. That's the only thing it's supposed to do. &gt;I can now do this in one click and two keystrokes from within the same tab I am already working. I'd use a user script (GreaseMonkey) which does the conversion when I hit the save button or whatever. Well, that assumes that I cannot get rid of this pointless base 64 encoding of IDs. It's completely retarded, really.
It depends on what you are building. A good alternative that not a lot of people seem to be using is just HTML divs, positioned with webkit transformations and transitions. I'm currently porting a HTML5 game which uses the canvas over to use this, as it's the only thing I've found which gives a solid 60fps frame rate on iOS (especially with large images, and lots of content). There are a couple of caveats, like standard CSS positions and animating opacity can kill performance.
Awesome, have fun with it! Other features of CreateJS I forgot to mention: * Asset loading * Sound management * Tweening
Mate, if you don't personally have a use for it, why complain when someone else finds it useful? You're just coming off as an arrogant dickhead. You'd use a different method? Good for you. There is more than one way to skin a cat. We also don't always all have total control over the systems we administer. Regardless of that, I know for a fact that there are plenty of other places on the internet that use some method of encoding IDs, however. YouTube springs to mind.
Title should read: I couldn't find a ready-to-go, easy-to-use **seeded** 3D Perlin noise generator, so here you go. Note: I did almost no work on this. As I mention in the readme, all credit goes to: &gt; Sean McCullough's port of Stefan Gustavson's java implementation of perlin noise (https://gist.github.com/304522) and the Alea random number generator (http://baagoe.com/en/RandomMusings/javascript/). Thanks guys!
Yes. It's well designed, has a great editor, and you get the full source. I highly recommend it. I felt it was well worth the price.
Ida thunk it more obvious that the function, which expects a string, ensures that the parameter is a string rather than trying to establish a telepathic link with the developer.
I have written something similar for my ray tracer for loading and processing models. Both methods presented so far have a critical failing: those style loops only run at a maximum of **250** iterations per second in modern HTML5 compliant browsers which specifies that the *minimum* interval between successive timeouts is 4ms regardless of the specified delay. Performing those loops against a million element array is going to take quite a while! Another thing missing is that you *must* have some form of a callback parameter that is called after the asynchronous loop is completed or you can't ever reliably do anything that depends on the results of the loop. Instead, I propose an asynchronous loop like this: function asyncEach(array, fn, progress, finished) { var i = 0, maxBurnTime = 100, // ms to run before yielding to user agent finishedFn = finished || progress, progressFn = (finishedFn === progress ? null : progress); function iter() { var startTime = Date.now(); while(i &lt; array.length) { fn.call(array, array[i], i++); if(Date.now() - startTime &gt; maxBurnTime) { if(progressFn) progressFn(i, array.length); return window.setTimeout(iter, 0); } } if(progressFn) progressFn(i, array.length); if(finishedFn) finishedFn(null, array); } window.setTimeout(iter, 0); } Both callbacks are optional but very useful for large and slow processes or just to maintain a sequence of operations. I use node.js-style callback for *finish(error, parameters)* but you can use anything you'd like. The point is that by yielding only a few times a second, you can achieve *almost* native loop performance. Here is an example use: var b = 0; /* Step 1: Generate 1 million numbers from 0 to 1 billion in steps of 1,000 */ /* Step 2: Sum the square roots of all 1 million elements in the array */ asyncEach( new Array(1000000), function(e, i) { this[i] = 1000000000 - i * 1000; }, function(done, total) { console.log("Building Array: " + Math.floor((done/total)*100) + "%"); }, function(err, a) { asyncEach( a, function(e) { b += Math.sqrt(e); }, function(done, total) { console.log("Summing Square Roots: " + Math.floor((done/total)*100) + "%"); }, function(){ console.log('Answer: ' + b); }); }); If this wasn't executed asynchronously the user agent would be locked for several seconds.
I didn't complain. I still don't see the point to do this with a bookmarklet. It's a workaround, it doesn't solve the problem itself. You removed some friction of *manually* converting from/to base64, but this isn't something you should be doing in first place. &gt;Regardless of that, I know for a fact that there are plenty of other places on the internet that use some method of encoding IDs, however. YouTube springs to mind. If it's for short URLs, okay. But why aren't you using the same ID everywhere? &gt;You're just coming off as an arrogant dickhead. That's a problem with your ego, not with my questions or comments. Technical discussions aren't personal attacks. Try to be a bit more professional about that. FWIW, I still recommend to solve the root cause or to use a user script. Zero extra steps are always better than a few.
Damn! I *just* wrote my own implementation for my ray tracer... EDIT This is it in a nutshell if you are interested: http://pastebin.com/DnsvSUVW
That's very tidy compared to the one I found. Nice!
Yeah initially I wasn't that impressed but after reading the blog and mission statement for meemoo, I'm pretty interested.
I pretty much copied it directly from the [PBRT](http://www.pbrt.org/) book. One nice thing about JavaScript is that translating from C (and C++ somewhat) is very straightforward!
What I find interesting is how fast the bitwise stuff is--Crockford said something about not using them in The Good Parts™ because they are so slow.
I cannot get over the name of this project enough to actually look at it. Reminds me of the tickle tests we used to have back in the day. The internet has ruined my mind.
The others take strings too ... Math.floor( "1.234" ); Math.floor( "0xff" ); "0xff" | 0; "1.234" | 0;
Awesome answer, thanks. :)
To be fair, the optimizers are pretty capable, though I'm not sure any would skip this conversion since library calls are involved.
For the operators, one thing that gives them an edge is that their result is much easier to predict. For a long time functions are often seen as black boxes, that just wrappers for native functions. They can also be overridden at any time. Although I believe Chrome now has more information about the provided functions, allowing it to do more clever stuff. On the other hand, a bitwise or will always be a bitwise or. You don't have to worry about the code changing under your feet. The in-built functions also need to care about corner cases. For example parseInt and Math.floor can return NaN. The bitwise operators however don't; they just return 0. For example 'undefined|0' is 0. This means it needs to check for less corner cases, and so really does do less work. It also means it's return type is always a real integer. These combined means that the runtime does less work, or can optimize more with the bitwise operators, when compared to the built in functions. However this is all conjecture.
Neat, I have a project, well [script](https://github.com/adamsanderson/ivy/blob/gh-pages/lib/ducks.js) anyways, I'm thinking of wrapping up and releasing that I used for my generating [API documentation](http://adamsanderson.github.com/ivy/api.html). This might compliment it well. Or I might use it somewhere else, thanks for sharing it :)
im sure i can give you some feedback when i take a look, ill check later
Yea I thought I read 'testicular' at first.
wow!
So what do you suggest? 
kool
This isn't Java, functions aren't typed to take a string or a number. In principle, Math.floor takes a value, any value. This could be a string, a number, null, a HTML element, or anything else. Unlike most native functions, it just happens to try to convert non-numbers to a number, as a part of it's definition. The end fact is that when you call a function, JavaScript does not auto convert from string to number. Math.floor converts from string to number, as a part of how it's implemented in the runtime. If converting from string to number is done by Math.floor directly within it's native code, or by the runtime due to some type of annotation (such as based on it's type), is irrelevant. That is an implementation detail. The end result is that in principle, calling a function does not convert, Math.floor converts. I really don't get why you are defending this, you are just wrong.
The Good Parts was released in 2008, almost certainly before Chrome (December 2008), and so before there was a big rush on optimizing JS runtimes. On more than one occasion, I have created a benchmark which shows one item being significantly faster than another. Then 6 months later, it's now slower. JS performance is something that really shifts heavily from year to year, especially when you try to do 'clever tricks', to out perform built in stuff. Although everything generally gets faster.
People can (and do) use it to truncate doubles. To the extent that most JS engines optimize for parseInt(number). So much sadness.
I think the similarity to Testicular is a lot worse.
I think you've edited your post and now we're saying the same thing! The implementation of the native Math.floor function does not include code to parse strings. It is not written in JS -- it's not necessarily Java, but it might be, or C++, but it's a typed language. There's JS to native glue which converts the JS values to appropriate types for the native function. But it's not really important to the question at hand. Math.floor(13/5) does not require any type conversion operations, so it's fast. Math.floor(("13" / "5") + "") requires several type conversions, so is slower. Both produce the same result. Exactly where the conversion happens in the JS --&gt; native path doesn't really matter. You're right that JS (interpreted) functions aren't typed. AFAIK there's no way to force type conversion when preparing parameters to a JS (interpreted) function, this only happens when calling the native implementations. Again, the important thing to know is calling Math.floor will convert the argument to a number. So will the division operator.
&gt; All numeric values in JavaScript are stored as float values. That's not true: typed arrays now provide methods for storing signed/unsigned 8/16/32 bit values. https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint32Array &gt; Thus, to perform a bitwise operation, JavaScript must convert the float values to integers, perform the bitwise operation, and then convert the result back to a float value. I don't know much about other Javascript engines, but V8 uses 31 bit integers to represent small integers, so bitwise ops can be very fast, without constant conversion to and from a floating point representation. http://wingolog.org/archives/2011/05/18/value-representation-in-javascript-implementations. &gt; Thus, bitwise operations in JavaScript don't offer any speed benefits. That's simply not true, at least not for all Javascript engines. And it entirely depends on what you're doing. This would suggest that a bitwise shift can be faster than a floating point divide: http://jsperf.com/compare-float-bitwise-ops. Of course it's a contrived example, but it's simply not true to say that bitwise ops are slower than equivalent floating point ops. &gt; Without speed benefits to outweigh their esoteric nature, bitwise operators have no place in JavaScript. Again, it depends on what you're doing. As BillyWM suggests, if you're handling binary data then bitwise ops can provide a more natural method for manipulating that data than floating point ops. If I need to extract a flag from a bitfield, bitwise ops provide a natural way of doing that, and it's floating point manipulation that would be unnatural and esoteric.
&gt; operation is computed, converted to a string, then the string is parsed to obtain an integer result The result of the division is a number, not a string, so parseInt gets given a number. So why would parseInt do 'number -&gt; string -&gt; number'? That wouldn't make any sense. If you take a look at parseInt in V8 ([source](http://code.google.com/p/v8/source/browse/trunk/src/v8natives.js)): // ECMA-262 - 15.1.2.2 function GlobalParseInt(string, radix) { if (IS_UNDEFINED(radix) || radix === 10 || radix === 0) { // Some people use parseInt instead of Math.floor. This // optimization makes parseInt on a Smi 12 times faster (60ns // vs 800ns). The following optimization makes parseInt on a // non-Smi number 9 times faster (230ns vs 2070ns). Together // they make parseInt on a string 1.4% slower (274ns vs 270ns). if (%_IsSmi(string)) return string; if (IS_NUMBER(string) &amp;&amp; ((0.01 &lt; string &amp;&amp; string &lt; 1e9) || (-1e9 &lt; string &amp;&amp; string &lt; -0.01))) { // Truncate number. return string | 0; } string = TO_STRING_INLINE(string); radix = radix | 0; } else { // The spec says ToString should be evaluated before ToInt32. string = TO_STRING_INLINE(string); radix = TO_INT32(radix); if (!(radix == 0 || (2 &lt;= radix &amp;&amp; radix &lt;= 36))) { return $NaN; } } if (%_HasCachedArrayIndex(string) &amp;&amp; (radix == 0 || radix == 10)) { return %_GetCachedArrayIndex(string); } return %StringParseInt(string, radix); } ... you can see it checks if it's a number before it does any string parsing, when no radix is given (like in the jsperf). Infact parsing it via a string is checked **last**. Second, converting strings to numbers is also provided by the bitwise operators, so your answer does not explain why they are so much faster. I don't know why the bitwise operators are faster, but the code for parseInt clearly doesn't go 'number -&gt; string -&gt; number'. It also wouldn't make sense to build a runtime that works like that.
I too was interested in ImpactJS, specifically to target the iPhone. However there doesn't seem to be anyway to integrate bluetooth device discovery and communication so was turned off.
I need to run getfilter2 3 seconds after filter1. i believe its just waiting 3 seconds to post the info rather than waiting to take the info?
setTimeout works like that: the first argument is a function (either the pointer, an anonymous function or a string to be evaluated) and the second the time to wait. What you are doing is starting a setTimeout of a string that cannot be evaluated and then executing the rest immediately. var filter1, filter2, changed; function getRawFilter(){ filter1 = CCDCamera.FilterWheelName.replace(/-.*/,''); setTimeout(function(){ filter2 = CDCamera.FilterWheelName.replace(/-.*/,''); compareFilters(filter1, filter2); }, 3000); } /* please complete yourself */ var filterComparison = { 'F1': { 'F2': 2, 'F3': 3, 'F4': 4 ... }, 'F2': { 'F1': 1, 'F3': 3, 'F4': 4 ... }, ... } function compareFilters(filter1, filter2){ /* make a comparison table (object of objects) */ var result = filterComparison[filter1][filter2]; if (result) changed = 'go to filter '+result+' best focus'; }; 
The div structures could have been created automatically by the following function, resulting in much smaller code: function bc(no){ var ciphers = ['oooeeoe', 'ooeeooe', 'ooeooee', 'oeeeeoe', 'oeoooee', 'oeeoooe', 'oeoeeee', 'oeeeoee', 'oeeoeee', 'oooeoee']; return ciphers[no].replace(/./g, '&lt;div class="m $1"&gt;&lt;\/div&gt;'; }
&gt; What you are doing is starting a setTimeout of a string that cannot be evaluated and then executing the rest immediately. Close - if you look getFilter2() doesn't actually return anything, so in fact he's scheduling the `undefined` value(!) to be executed in 3 seconds' time. A string passed into setTimeout() may or may not be valid JS, but the undefined value *never* is, and will result in an error similar to: Error: useless setTimeout call (missing quotes around argument?)
Thanks! I've updated my code to essentially what you have here. This is much easier than what i was doing. EDIT: The command prompt closes instantly after starting it so i think there may be a problem with the socket portion, but shouldn't atleast stay open for the 3 seconds while checking?
Thanks for sharing. There are a couple of things that I would suggest to clean your code up a little bit. The biggest thing would be saving out your template into another JS object. This would mean that you could reuse it later, and it would take out the clutter from your initialize function. Instead of having two almost identical views with the ItemView and AdminItemView, I would use the same view, utilize a heftier templating engine like Handlebars, and add some logic into the template that checks to see if the user is an admin. This way you only have one view and one template to do with. I also know that you're trying to keep it small, but I'm a big fan of using Backbone Marionette, a useful Backbone tool that further extends the list views to give you the same functionality that you have created plus a few more handy features. Lastly, and a very small thing, declaring this.model = options model in your initialize function is not necessary. There are a number of objects that will automatically be set to this.object if they are passed in as options and model is one of them. See [Backbone View Constructor] (http://backbonejs.org/#View-constructor)
&gt; Instead of listening for the model to emit a change event, Ivy binds to attributes on your objects. When those attributes change, the parts of the DOM bound to the Ivy attributes update automatically. MSFT did this like 2 years ago with a [jQuery plugin](https://github.com/jquery/jquery-datalink), though I believe adoption was minimal.
&gt; Without speed benefits to outweigh their esoteric nature, bitwise operators have no place in JavaScript I think this is really misleading; I think they would only have "no place" if you're implementing them for performance reasons. Bitwise operations are part and parcel to many types of programs, and there's many, many situations where operating on bits just makes much more sense. edit: ok, I see that you were justifying Crockford's thinking... &lt;insert beware-of-Crockford dogma warning here&gt;.
And if you checked the jsPerf results, for a good number of v8 builds the results are the same across all implementations. This gives the hint that some compiler optimizations are null'g out any discrepancies before they can even happen. Also, you can't say that just because v8 doesn't follow a specific paradigm, then none of the browsers follow that paradigm; you can only say that v8 -- as of the version which you audited -- doesn't.
It's pretty fast on my machine initially. Also I miss the sort of grid system to visually line up the snake pathing. Still- very good job. :)
Freeform objects are very powerful in javascript, but I miss having accessibility control over elements. Being able to create private/protected variables is something I miss.
With the caveat, of course, that the browser must support CSS3 transitions. Works great in Webkit, Opera didn't handle it so well.
Does anybody else find it odd that this has "moo" in the name but it's a jQuery plugin?
unfortunately, in JS switch statements are often dramatically slower than if chains. http://jsperf.com/switch-vs-if-vs-obj-lookup 
Good point :), I'm so used to working in js frameworks that handle object creation that I'd forgotten this. Thanks.
This is awesome to know - thanks :)
Yup, but at least it's a cool palindrome!emordnilap looc a s'ti tsael ta tub ,puy.js
[To R'lyeh with you!](http://i.qkme.me/3q578w.jpg)!
The output is done via "write", not "print". Have you got any JS errors on your console?
That looks like it has a ton of potential. Thanks, I'll start looking into it.
Watch Nicolas C. Zakas' talk titled "Scalable JavaScript Application Architecture". It should give you some good answers. Another thing you might want to take a look at is client-sided routing. Basically, it allows you to call some specific function if the user is on a specific page (or if the fragment has a specific value). Usually, there is some kind of router object and you can just add new rules on the fly. That's very convenient if you want to create different bundles for different websites. It essentially works like a plug-in system. Many MVC/MVVM/MVP/MV\*/ frameworks are shipped with a router, but there are also some standalone libraries for that. A simple routing example from [Bix's site](http://www.pieratnine.com/bix/): var bix = Bix(); bix.add('/', function () { // Show Home page }); // Use colons for parameters in urls. // These parameters then become the parameters in the function! bix.add('/article/:id', function (newsId) { $.get('/article', { id: newsId }, function (data) { // Display on page }); }); bix.run();
Well, there is another option which works by "module" rather than by page/URI. There can be one global object (e.g. your one main global object) which has a place for options. When a specific module/component is placed on the page, a small script block which sets the options is also written. (Alternatively, those options are added to some sort of manager and are written at a later point as a single script block.) On document-ready, you iterate over those options and call the corresponding functions/makers with those options. Whether this approach makes sense depends on the way the pages are created. Well, it's an option you can keep in mind for future reference. Anyhow. Check that talk. It's awesome.
Very fair point. Maybe directly elaborate on the core usage for this. Especially for PhoneGap, Adobe Air, GitHub Pages, etc. this is very useful.
Anybody else sad this wasn't a bookmarklet to undo all of those awful changes people make to their websites to make them not zoomable (as in Ctrl + type zoom, not CSS transforms)? Some day, I'll make it and share it, but I'm too lazy right now.
Slight error in your code, a jQuery selector will always be truthy even if it is empty because it is an array. You can check the length of the array instead. //only fire if on registration page if ($registration.length &gt; 0) { AppName.Registration.init(); } //only fire if on profile page if ($profile.length &gt; 0) { //whatever }
All I can say is keep at it. It's truly a diamond in the rough and it's a whopper. You're almost there. I've been around a bit. Reddit is a fickle beast. In the big subs, it takes alignment of the moon phases and an appropriately timed flash to get the crowd to notice. Might be popular over in /r/GIFs
Would you explain what this does? That wasn't immediately apparent. Either way, thanks for the contribution.
You're being trolled dude.
Http://github.com/Benvie/Mouse makes it pretty straightforward. Html5 drag and drop isn't particularly useful for dragging things from INSIDE the browser. Rather it's mainly for dragging stuff from outside the browser onto it.
eh... why slow it down? There is no benefit to using the mechanic which operates at 10% the speed. Even if the operations are minor
I am running this through a program called MaxImDL, which is where i got CCDCamera from. I think i still need to define CCDCamera, but how do i do that when it is from a program rather than inside my code?
That depends on the interpreter you are using. If you are using node.js, you can probably use a [Child Process](http://nodejs.org/api/child_process.html). Otherwise I'm off known territory.
A few minor pedants: * your typeof comparisons should be using the triple equal (===, !==) * if(callback!=undefined) should be if(typeof callback !== 'undefined') * what happens is libs is null or isn't passed? * if(libs.length&gt;0) can simply be written as if(libs.length) The first one is more correct to compare typeof to the actual string value instead of letting the js engine interpret the values as strings. The second one is mainly because, in JavaScript, someone can redefine the keyword undefined. The third is just good practice to sanitize your input parameters. The forth isn't necessary, but 0 is false so it will only return true if length &gt; 0 Otherwise, thanks for contributing! edit: Also... * 'destributng' in the first sentence should be 'distributing' * You spelled 'recursion' and 'immediately' wrong in ' If library is loaded next recurstion step is executed emidietely...' * 'This problem has a few aspects that worth attention' should be 'This problem has a few aspects worth mentioning' * Last sentence: 'In this article I ma not...' should be 'am'.
&gt; your typeof comparisons should be using the triple equal (===, !==) &gt; The first one is more correct to compare typeof to the actual string value instead of letting the js engine interpret the values as strings. You can let the JS engine interpret values as strings since `typeof` will never return anything else than a string.
http://www.yaldex.com/JSFactory_Pro.htm is where i got mine from
Very nice! It's fun to see Backbone used in an 'unusual' context. Some of your `this.set(x, y)` in the initializers could probably be moved to the 'defaults' property of the model. Otherwise if you try to create the model with some initial attributes, they're going to get smushed. [Backbone Model #defaults](http://backbonejs.org/#Model-defaults) Also if you look at the Backbone source, you'll see how the events system is basically a mixin - It'd be interesting to see if you can make your observer stuff the same. That way you could add that functionality to any object easily with `_.extend()`
all i want to do is connect to my own server on the network. i dont want to via a browser because thats not going to work. can javascript connect to private servers without using a browser?
You're welcome. The documentation is really good so I don't expect too many questions ;-)
require.js is usable *right now*. There are many existing frameworks which already address these concerns -- Spine, Backbone, etc. I'm not sure you'll get a distinct advantage from rolling your own. Even if you feel your project is a 'special case', it's likely a framework will address most of your needs and can be extended to fit.
Thanks for the tips. That's really helpful.
When implementing this on a website, the designer could take a screenshot of the github page and then have it get pulled down by the image, followed by a redirect to Github. I'm not sure if this would be a good effect or not; at worst, it would delay the loading of the real Github page by a second or two. I'm thinking it would be a neat effect though.
Thank you for all your comments. All of them are really valuable for me. One of the reasons why I love reddit is an opportunity to get qualified feedback (or at least a chance).
Something like this? &lt;div id="aPennySaved"&gt;&lt;/div&gt; function calcSavings(start,savings) { startD = new Date(start); now = new Date(); return kWhCost*savings*((now-startD)/(1000*60*60)); } function show(savings,divToDisplay) { var d=document.getElementById(divToDisplay); d.innerHTML = "You have now saved $" + Math.round(savings*100)/100; } var kWhCost = 10; var start = "July 15, 2012, 00:00";//when was the products installed? (in a format javascript can parse) var savings = 6+4.5+7+5.3;//savings for the different products at this site in kWh var divToDisplay = "aPennySaved";//where should i be displayed? var savings = calcSavings(start,savings,kWhCost); show(savings,divToDisplay) 
You should make http://www.craftyy.com/ into a https://webmaker.org/en-US/projects/ project :-)
It's not my service; I'm a consultant there after using it on a couple of other projects. PubNub and Pusher are essentially infrastructure-as-a-service companies; rather than configuring, maintaining, and most importantly scaling your own node stack in order to support real-time messaging, it's taken care of for you. I'm not saying that socket.io isn't a great library, but as an architect, I'd much rather place that infrastructure on someone else's shoulders.
Who in their right mind would trust sending all their important business data to a third party... rather than just go ahead and build their own architecture on AWS?
You need a Node server in order to run socket.io. Once you get above 5k-6k connections, you're obviously going to need to load balance those connnections between multiple servers; hence, the need for a farm.
Well what's a PaaS company built on top of AWS? Fourth-party?
Wow, I didn't even consider that! Thanks so much for the link, this is a really huge opportunity!
I'm drawn in by the iOS support too, bluetooth doesn't matter to my games, so maybe it'll be worth it for me.
.css("display","none!important") 
&gt; The only way I know to get it to hide is to remove the !important for display:block in the hideSample css class. That's not the only way. You can provide a rule with [higher specificity](http://www.w3.org/TR/CSS2/cascade.html#specificity) and it will override as long as they are both `!important`. In your testcase, that can be achieved as such: $('&lt;style&gt;div.reallyHide { display: none !important }&lt;/style&gt;').appendTo('head'); function failingDivHide() { $("#tryHidingMe").addClass('reallyHide'); }; The selector `div.reallyHide` is more specific than the selector `.hideSample`, so it wins out when applied. But this is just an aside, and you should never be using `!important` in the first place. 
Definitely object oriented javascript would be way to go to organize the code better. We have used jquery and Google Closure Library in a large Asp.net MVC 3 project.
Sometimes you have to to override CSS that you didn't write but you can't/shouldn't change (as in some WordPress plugins).
This is my favourite: http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742
Unless you're forced to use a 3rd party css file thats for whatever reason interfering with your built in styles, there is absolutely no reason to ever use !important. If you're using !important in your css, you're structuring your css wrong. End of story.
Expose your data using Web API helperps. Use AngularJS as your front end, consuming the data using Angular Services. It's awesome, easy to learn an works so smooth with MVC. I built a pretty neat app on it recently, it was a joy. Plus AngularJS is built for testing. Awesome. 
&gt; Microsoft is even including it in the next MVC release. This is the first I've heard of this (though I don't do too much .NET work), but that's amazing. Is there an official source for this announcement? Congrats to Knockout though! :)
http://sug.dotnetprogramming.com/2012/04/a-lap-around-the-knockoutjs-framework/ http://www.asp.net/single-page-application/an-introduction-to-spa/overview/landingpage http://msdn.microsoft.com/en-us/vs11trainingcourse_aspnetmvc4_topic2.aspx &gt; Updated JavaScript libraries &gt; The MVC4 default template now includes KnockoutJS, a JavaScript MVVM framework that lets you create rich and highly responsive web applications using JavaScript and HTML. Like in MVC3, jQuery and jQuery UI libraries are also included in ASP.NET MVC 4.
Eloquent and Definitive guide are both excellent. 
Casting an empty array to a boolean, makes it true. Putting a ! in front of that array makes it a boolean and reverses it, making it false. So you are comparing an array, to 'false'. Of course they shouldn't be equal :) Furthermore, one array doesn't equal another array, as they are not the samme array. var a = []; var b = []; a === b; // false var a = []; var b = a; a === b; // true The first example is two different arrays, the second one is to variables pointing to the same array, they are the same. Also, you should always use triple equal signs.
JS:TGP is short but **dense**, good luck :)
Try [] === ![]
 [] == ![] Is really: // http://es5.github.com/#x11.4.9 [] == !true [] == false So: [] == false // http://es5.github.com/#x11.9.3 // The comparison x == y, where x and y are values, produces true or false. // Such a comparison is performed as follows: // 7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y). [] == +0 // 9. If Type(x) is Object and Type(y) is either String or Number, return the result of the comparison ToPrimitive(x) == y. "" == +0 // 5. If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y. // http://es5.github.com/#x9.3.1 // The MV of StringNumericLiteral ::: [empty] is 0. 0 == +0 true vs. [] === false // http://es5.github.com/#x11.9.6 // The comparison x === y, where x and y are values, produces true or false. // Such a comparison is performed as follows: // 1. If Type(x) is different from Type(y), return false. false Can we learn this time?
This is a cure for the symptom but not the disease. If you find yourself using !important that should be a huge red flag that you've done something wrong. Using !important creates maintainability issues -- such as this one. As someone else pointed out, the only instance where !important is appropriate is when you need to override a style from a third party css. It is awesome to point this out and present an opportunity for this discussion to take place. I'm sure a lot of people run into this.
This is because any "object" is "truish", and arrays are objects, meaning that `![]` is false. But, when you compare two objects with `==` it tries to do coercion on those objects. I'm a little fuzzy on this, but I'm pretty sure it ends up using `[].toString()` to compare the two. The implementation of toString is essentially `Array.prototype.toString = function () {return this.join(',');};` – so this comes down to `"" == false` which... happens to be true, because several falsish objects are equal to each other (also `"" == 0`). Coercion is fun!
Definitely Javascript: The Good parts, but if you're doing a lot of interactive stuff, Supercharged Javascript Graphics is pretty great, too.
Anything from John Resig ?
Eloquent JavaScript and JavaScript: The Good Parts are both a good read. I'd recommend them both. I've just started JavaScript Patterns, and it seems another good one. I'd suggest reading JS Patterns after you've got a grasp of the language though.
Well, as a matter of fact, he just posted an update about something he has been working on for a while: [Resig Book Update.](http://ejohn.org/blog/secret-omens/) Available for pre-order here: [Secrets of the Javascript Ninja.](http://www.manning.com/resig/)
The guy who wrote knockout is on the core MVC team at MS these days....
yup apparently for ASP.Net MVC Knockout is the way to go, however you could easily use Backone or Spine.js
Could end up being the most evil advert.js script if someone could be so evil to adapt it to make adverts chase your mouse.
Also, Synbiota has a conte$t to make a plugin for their editor, so if you come up with something cool for DNA editing in the browser: http://sprize.synbiota.com/
What's your guys thoughts on http://www.javascriptenlightenment.com/ ? As a graphic designer coming to JS, I find TGP too technical and dense for me.
I may just be stupid, but how does this differ from the built in caching in the HTTP layer?
JavaScript: The Definitive Guide or JavaScript: The Good Parts are my personal favourites and the ones that got me up to a decent level with JavaScript. The latter was probably the one recommended to you, it seems to be the most recommended JavaScript book around.
It almost certainly was JavaScript: The Good Parts. No discussion of where to learn JavaScript can be held without it being brought up.
Looks like a potentially interesting link, but if you're going to point to a 45 minute video some sort of synopsis or teaser would help :-).
A way to create state machines declaratively to define a dynamic UI and its interactions, not using state charts, that works in browsers.
[Professional JavaScript for Web Developers](http://www.amazon.com/Professional-JavaScript-Developers-Wrox-Guides/dp/0764579088). Zakas is one of the best.
+1, this book is amazing.
Well here's [Eloquent JavaScrip](http://eloquentjavascript.net/contents.html)t for free! I'm in the middle of going through this, and I find it super informative.
Can we just stop using he double-equals and call it a day? tl;dr for every js wtf article: Weird things happen due to type coercion.
This is also my favorite. I bought this one after reading "The Good Parts". Zakas is a lot easier to relate to, and the book is 20,000x more complete.
I'd recommend Selenium HQ since active development on Windmill seems to have stopped quite some time ago. Also there's this web driver for node.js that looks interesting for running selenium tests: http://admc.io/wd/ 
Type coercion; learn it and deal with it, or just completely ignore it with ===. 
It's a good book so far. I appreciate the sections on the internals of Javascript interpreters, but I'm not a fan of the common sense optimization stuff, like making loops iterate less. I'm about to start the string/regex chapter. Hopefully it gets even better.
Another upvote for the Zakas book.
Your comment is a personal opinion, so I generally don't recommend it. EDIT: Every single book in this thread is loaded with opinions, and there is nothing wrong with that. Crockford happens to be a JS expert, so his opinions on the subject are valuable and generally justified.
The Secrets of the JS Ninja book is excellent. It's available as a preview e-book from the publisher (Manning).
You don't always have control over the server where your documents are stored. Most of our storage is on an Akamai server provided through a third party vendor, so we've no control of expiry headers (wish we did). We do a lot of baking of JS files out to that server with fixed JSONP callback functions (a security issue, I'm sure). I implemented pretty much exactly the caching from TFA a couple months back as a way around the headers issue. EDIT: more info
like PHP :) and it's not "just" type coercion, it's coercing to whatever fuck you can't possibly guess.
not a fan of Resig's books. They are more for hackers than proper development.
Sexy setup
Create a super efficient compositing 2D graphics engine on top of webgl for use in gaming, data visualization, etc.
The problem comes when someone else (not Douglas Crockford) insists on a rigid adherence to Crockford's rules when it has not been agreed upon at the beginning to code only in that style. I encountered that today, and it wasted time when merging changes in Git.
Best response ever... Sometimes I forgot exactly that, AWS is also third party
The big difference between HTML &amp; CSS and Javascript is that while HTML and CSS are languages and cause things to happen, they are "declarative" languages that have no logic control of their own. They just *describe* what should be where and how it should look under certain conditions. Javascript is a Turing-complete language, and rather than describing *what* you want accomplished, you describe *how* it should be done. That's the biggest leap you'll have to make, and while it sounds simple it will take a bit of time for you mind you grok it. When you add 10 numbers together, you don't think about the steps you're following to do it, you just *do* it, but a programmer has to describe all of the steps involved to do it. I'm using the term programmer liberally and including processor designers. They have to describe the very minute, excruciating details of taking a number, adding it to another number, capturing the overflow that will be used in the addition of the next digits, and storing the results in an address in memory. The higher-level you go, the less specific you have to be about the steps. For instance C programmers have to worry about where in memory the data will go when they "write down the answer". They could put it in a pre-allocated variable as part of the program's code space, or they could allocate a chunk of memory at runtime from the operating system, and use one of the pre-allocated variables to store the address of the place they will later write the data into (fortunately they don't have to worry about *raw* memory address numbers, they can be given human-readable variable names). Javascript lets you get *almost* that low-level. You don't have to request the space to store the data, but you can request explict variable names and beyond the allocation &amp; deallocation steps of C the algorithm could be exactly the same. var tenNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Store ten numbers in an array var result = 0; // Store the result of the addition here for(var i = 0; i &lt; tenNumbers.length; i++) { // Create a counting variable to track where we are in the array, then, while this tracking variable isn't the value of the array length, execute the loop body and then increment the tracking variable result += tenNumbers[i]; // Add the current number to the result } console.log(result); // Let the world know that you can add 10 numbers! But Javascript *also* has roots in the Functional Programming world, where the emphasis is on *encapsulating* what steps you want to do into easy-to-read functions and then *composing* these functions in a high-level "do-what-I-mean" way to get your results: function add(val1, val2) { return val1 + val2; } console.log([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] .reduce(add, 0) ); // Immediately prints 55 Here you tell if that you want to print out the array after it has been reduced by adding the values together (along with the initial value of 0). It's shorter and there's less baggage involving the actual "gruntwork" of the original code, but it requires memorizing more function and method names, and what they do (you'd have to know that reduce take the initial value which is zero, and makes that the first argument to the function you provide, and makes the first value of the array the second argument, then it takes the result of that function and provides it to the function again as the first value and makes the second value the next value in the array until it has run the function over all of the variables, and then it returns the result). But once you do, your code can be short, beautiful, and totally self-explanatory to anyone who knows those functions (just like the CSS and HTML is self-explanatory after you've learned the tag names and CSS keys). But because it's still turing-complete, you can accomplish *anything* with the computer -- including locking it up into an infinite loop, but that's why computers don't program themselves, yet.
do you use node-inspector en that setup? I'm using jasmine and couldn't make it work. I even tried with vows, that have a similar sintaxis, but nope. I can debug jasmine's code (and vows's code) but not my tests
fair enough, thanks for the response.
I think the biggest thing that helped me push through limited knowledge was actually having something to accomplish. Not sure what that will be for you, but if you find a project you can help out on, it might push you to further learn more HTML, CSS and JavaScript.
IMO there's isn't a whole lot to know about css/html if you know javascript. For HTML it's useful to know element names(eg: div/span/ol/li) and how the CSS applied to these elements behaves by default, and for CSS it's really just a matter of memorizing the little differences between certain options(eg: margin vs padding, inherited opacity, positioning types). that's pretty much memorization, the rest is all javascript. you may already know this but a nice way to keep javascript clean and organized is to use objects as data islands for example, var foo = { this.bar: 'foobar', this._lol: function() { alert('lul') } } foo.bar //'foobar' foo._lol() //lul ps: im self-taught so i may be butchering that
&gt;Whatever happened to having to invest time in order to learn things? Whatever happened to writing things down? I can't stand this kind of talking head presentation. For the same amount of prep work, he could have written an article that I could digest in 15 minutes instead of a presentation that takes 3x as long. To those who have watched the video: Is it worth watching? I gave up after 3 minutes. 
Seconded.
My suggestion, go read [Crockford's book JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) and/or [the JavaScript section of his blog](http://www.crockford.com/). A lot of people have some really strong opinions on whether Crockford is right or not, but simply reading his book will explode your JS knowledge in a big way. Its a quick read and then you can start having your own opinions on Crockford. Also, as someone else posted here, go build something.
The first edition was published seven years ago, but second and third editions have been published. The [third edition](http://www.nczonline.net/blog/2012/01/09/now-available-professional-javascript-3rd-edition/) was released just a few months ago: &gt; Those who know me shouldn’t be surprised that this book is more than just an update. The 3rd edition features five completely new chapters covering the new HTML5 APIs such as history state managements, canvas, offline applications, web workers, and more. Throughout the book, I’ve added references to changes in ECMAScript 5, including how strict mode works and how to use the new object-creation APIs. All of the existing chapters were also updated with the latest browser support information including mobile support (sadly, that will always be a bit out-of-date). A special appendix about ECMAScript Harmony is also included to give you a taste of the future. - *Nicholas C. Zakas*
I did this exact thing for the Opa Hackathon a few weeks back, and won a few hoodies with it. I have the code (somewhere), but it's written in Opa and not JavaScript and it's a huge mess of hackathon code. I can probably dig it up if you really want.
interesting, i can see its uses for a real time app
That works; however, you'll want to drop the `this.` prefix and you'll generally want `console.log` over `alert`. var foo = { bar: 'foobar', _lol: function() { console.log('lul'); } } console.log(foo.bar === 'foobar'); // true foo._lol(); //lul The above is an object literal with `foo.bar` returning a string while `foo._lol` returns a function. You can, for all intents and purposes, consider `foo` to have static properties of `bar` and `_lol`. When you write `foo._lol()`, what is happening is that `foo` returns the value stored in the `_lol` property which happens to be a function. With `()` tacked onto it, you are applying that function. You could have also written: `foo._lol.call();` 
I also recommend watching his talk of the same title. [Javascript: The Good Parts](http://www.youtube.com/watch?v=hQVTIJBZook)
I learned JS through [CS50](http://cs50.tv). The last assignment is in Javascript, and after that, I felt like I could do my own project. [This](http://offtonic.com/synth) is what came out, a microtonal synthesizer that runs in your browser. How did I do it? Well, I had the basics from the CS50 assignment and from reading the Javascript documentation at MDN. I have to say, reading the documentation is next to worthless, because without actually doing things, you don't learn at all. You do, however, learn what is *possible* to do, and if you have some project in mind, you'll keep thinking, "wow, I can use this in my project", and it'll make learning a lot easier. Anyway, you'll notice that my synthesizer is graphical. That requires HTML5, the canvas element. How the hell does *that* work? Well, there are plenty of tutorials where you can find out. I did some and managed to use those examples to learn how to do what I wanted to draw. You'll also notice that it plays sound. That's kind of the whole point, isn't it? That was harder, but luckily, someone else on the internet figured it out and made a library available. But he didn't include much in the way of documentation, just a few examples, so I had to implement those examples and try to figure out what was going on, which, having zero prior experience in audio programming, was quite a challenge. The eureka moment came when I figured out what the hell a callback function is and how it was filling the audio buffers. The basic takeaway is that you'll only learn if you come up with a project and do it, especially if you can do it in parts, especially if you can look at examples that are similar so that you can reuse some of the code. At some point there'll be something you don't understand -- at many points, usually -- and that's when actual learning happens.
There's nothing like learning on the job. Boy, getting payed makes learning fast!
[Link to author's contact](http://paulrouget.com/s/contact)
Hey what documentation should we be working on first? One thing that has been on our to-do list is a simple introduction app that shows the basic concepts: wire dis/connecting, data types, adding modules...
I concede your point, that the information density of these kinds of videos is low in comparison. However, these videos do much more than what a paper can do. On one hand, you get to 'meet' the person behind the information, and I think it is incredibly important to know the people that have shaped or are shaping whatever endeavor one is interested in. On the other hand these kind of presentations convey a lot more about the practice of programming than papers do. Having said that, I am still not a fan of the TL;DR for these kinds of things. Deepening one's knowledge about programming takes time and depth of study and practice.
I wish it had a way to add or remove a class based on a boolean, like jQuery toggleClass with 2 arguments: $().toggleClass("active", true)
http://getfirebug.com/logging
So how would i adapt this if i had multiple collects (myCollA, myCollB, etc) that i wanted to make the method available for?? I would just go.. myCollA = new MyCollection(); //then assign stuff to mCA ??
That last one is quite cool.
very cool. Would you be willing to use a copyleft license for the scripts ?
in one way you can, but only if that place have stopped using your equipment (othewise tehy should add to it) maybe this (also updates like a counter): function calcSavings(start,savings,kWhCost) { startD = new Date(start); now = new Date(); return kWhCost*savings*((now-startD)/(1000*60*60)); } function show(savings,divToDisplay) { var d=document.getElementById(divToDisplay); d.innerHTML = "You have now saved $" + Math.round(savings*100)/100; } function countsave(){ var saved = 0; var kWhCost = 0.5; var savings = 6+4.5+7+5.3;//savings for the different products at this site in kWh var divToDisplay = "aPennySaved";//where should i be displayed? saved += calcSavings("July 15, 2012, 00:00",0.3+10+500,kWhCost);//wallmart saved += calcSavings("July 15, 2012, 00:00",0.3+10+5,kWhCost);//bobs house saved += calcSavings("July 10, 2012, 00:00",0.3+10+5,kWhCost);//other place show(saved,divToDisplay); } var inter=setInterval(countsave,1000);//update every sec 
Love it!
[A classList polyfill](https://github.com/remy/polyfills/blob/master/classList.js).
Are you looking for contributors at all? This looks really interesting
I would absolutely love contributors! It's quite lonely working on this all on my own, but I'm so passionate I keep spending 20-30 on my weekends and 4+ after work trying to build this up as fast as possible. I don't have any test cases in yet, but if you can make sense of what I have feel free! I'm currently working on this beatport RSS scraping, but there's so much more basic stuff to do... just wanted to do something fun for tonight. :)
Still haven't gotten it as nice as yours, but [here's my adaptation of your last one](http://pcsedit.appspot.com/#view/mbarkhau/spray.coffee). It uses processing.js and coffeescript
Ok I might get in touch with you on github then
This is a really cool idea and I like how clean your front end feels. I'll poke around your source and get in touch with you on github about perhaps contributing a bit here or there if you'd like.
I just did this for the first time. Wasted way too much looking into plugins. Ultimately I followed the file API and form data API on MDN. It actually really makes me mad when I think back to how much time I wasted. 
I am using web API with backbone marionette. I know a few people using ember. I don't know anyone using angular. What do you like about it? Do you prefer it over other js frameworks?
awesome! I assume you created a 'gravity dead zone' to prevent particles being sling shot away? (that was one of the problems I had when I tried to code something like this) Also, your 'squares' demo doesn't seem to work: Error: /home/zach/code/web/gamma-node.w7/views/canvas/canvas.jade:4 2| 3| append js &gt; 4| != js('canvas/'+canvasScript+'/index') 5| 6| append css 7| != css('canvas') No file found for route js/canvas/squares/index.js 
Whilst I agree a generic deep copy function is mostly useless, there are times you do need to deep copy an object in JS. I built a parser which stores grammar rules in a tree. When you use the parser, it then optimizes these rules, and alters the tree. However if you added another rule after that happens, then you could mess up the optimized version. The solution I use is to just copy the tree, and if you alter the original, then I just free the optimized version. However I don't want to copy everything, just it's structure. Leaf nodes are immutable, and so can be shared, and they also hold user given data, which shouldn't be copied. So I have to use a bespoke copy function to do this, as a generic deep copy would be innefficient, and might even break certain corner cases. Another case is when you have a callback, and you want to pass it some internal data, but you are worried it might alter it. So deep copy is one solution. Something like: var old = getInternalData(); var obj = deepCopy( old ); callback( obj ); However you usually know what that internal data is, so it makes more sense to just create a new instance, and pass it in: var old = getInternalData(); var obj = new SomeObject( old.foo, old.bar, old.foobar ); callback( obj ); ... or have it implement it's own custom clone function: callback( getInternalData().clone() ); All of these are usually better than a generic deep copy.
Sometimes you have to post to authenticate. I personally use lscache.
I'd check out [lscache](https://github.com/mckamey/jquery.lscache) if I were you. It provides FIFO style localStorage-based caching for XHR requests. $.lscache({ key: 'current-profile', time: 60 }, { type: 'POST', url: '/api/user/profile', data: { userid: 1234 } }).done(function(user, profile) { // work with both objects together }).fail(function(xhr, status, responseText) { console.log('user/profile failed for 1234: '+responseText); });
&gt;I assume you created a 'gravity dead zone' to prevent particles being sling shot away? Exactly, yes.. gravity is too strong when particles get close. This doesn't happen in real life because particles have a physical space that they take up, so particles can only be that distance apart at the very least because they will collide and push each other away with magnetic force (on the molecular scale). Handling collisions is expensive on the CPU though, so I wouldn't be able to simulate as many particles if I also had to detect collisions. &gt;Also, your 'squares' demo doesn't seem to work Oh right, I haven't uploaded that yet... My site is a work in progress :).
Wow! They simulate a lot more particles than I can O_O... I did all the math myself really, and only have highschool geometry and algebra as my highest math lol. Thanks for the link, I will study that.
Awesome! Well, I am up and awake all day today and am going to be working on this all day trying to clean it up for anyone on Reddit who wants to work on it. Feel free to PM me, get at me on github, or I've got numerous other ways to talk to me if that doesn't suit you :D
They aren't that expensive, really. Your O(n²) Algorithm does much more damage in comparison, I just calculate them on the fly. edit: check out the source on the first link I posted, they have a link to the github page, you might learn something from the code.
&gt;function calculation(industry{i,c,v,s,pp}) That isn't valid JS. &gt;var i1 = {i:1;c:c1,v:v1,s:s1,pp:pp1}; Neither is this. &gt;should I make it an array ((is that an array?))? I'm not entirely sure what you're trying to do. Well, for reference: `[5, 7]` Is an array. `{a: 5, b: 7}` Is an object. If `[5, 7]` is stored in a variable called "foo", `foo[0]` would be 5. If `{a: 5, b: 7}` is stored in a variable called "foo", `foo.a` would be 5. (`foo['a']` would be also 5, but one should always use the dot notation if possible.)
You can find a lot of logic bugs and unused code with this chrome extension: javascript code coverage tool: [Script Cover](http://code.google.com/p/script-cover/) if you can get your project working in a webpage online. It doesn't work with local files or chrome extensions. A cursory glance, I see that var feed is unused in ythelper.
Could you elaborate?
Sounds awesome! I will definitely check it out. Unit testing has been a concern -- I just run resharper over it every once in a while.
 var i1 = {i:1;c:c1,v:v1,s:s1,pp:pp1}; var i2 = {i:2;c:c2,v:v2,s:s2,pp:pp2}; var i3 = {i:3;c:c3,v:v3,s:s3,pp:pp3}; this part is still incorrect. you have a semicolon after the first value. Also are the "c1", "v1", "s1", and "pp1" coming from somewhere else? should be: var i1 = {i:1,c:c1,v:v1,s:s1,pp:pp1}; var i2 = {i:2,c:c2,v:v2,s:s2,pp:pp2}; var i3 = {i:3,c:c3,v:v3,s:s3,pp:pp3}; and also like thocked said your conditional is incorrect if indValue = 0 should be if (indValue === 0) 
Looks like a really neat project. I have always been curious how an emulator is designed and built. Couple questions. How are you testing your code? I see lots of modules but I'm not sure how you are testing. What environment do you see this running? Browser? This goes along with the environment question, but how are you planning to render the graphics and sound? 
That's the thing, it's still being added to so it hasn't even been tested yet. :P It will run in the browser, just like the [JS GameBoy Color](http://gamecenter.grantgalitz.org/) emulator I coded months ago. Graphics and sound is being computed in js, just like with JS GBC. The sound for GBA was so similar to GBC sound that I actually copied JS GBC's sound core and modified it for the extra GBA channels and shit. If you want to know what I'm currently working on, it's the sprites and sprite window layer.
Hi, what are the advantages of this?
We already use the web audio API for google chrome and the mozilla audio data api for firefox. I wrote an audio library just for this: https://github.com/grantgalitz/XAudioJS flash is only used if your browser doesn't support the APIs necessary (Opera, IE, Older Safari, Older Firefox (3.6 and earlier)). The way the "joypad" input was done is so that the wrapper code that calls into IodineGBA or GameBoy Online (JS GBC) and gives us the key up/down of said input (string of the key's name, so we don't map to any API numerically, which was annoying). So technically you can map multiple keys or any API to the joypad input. If you look at Kirby's Title 'N' Tumble on Google Chrome inside JS GBC, we even support accelerometers for the tilt sensors in the emulated cart (A REAL link cable has 0 lag, with even low lag networking something like 30 ms would be too much). WebSockets for link communication is a no-go, as we would have to pause the game emulation itself to wait for messages back.
Good man, upboat :)
What do you need as far as frontend? Very neat project by the way :) I especially like your use of bitwise ops, quite performance savvy.
Never understood this. Isn't Chrome and Safari both webkit? Shouldn't they render the same? (excluding chrome's v8 javascript engine)
I get errors in Safari that I don't get in Chrome or the others (IE9, Firefox). As a whole, I've been pleasantly surprised by how easy the cross-browser experience has been for Javascript / HTML5 canvas games. I develop on a Mac in Chrome, test in Firefox and Safari on Mac, IE9, Firefox &amp; Chrome on Windows 7, and Firefox &amp; Chrome on Linux. I don't usually have any issues, bit when I do it's in Safari.
They use the same renderer (webkit) but have different JS engines. Chrome uses V8 and Safari uses Nitro, see [wikipedia](http://en.wikipedia.org/wiki/JavaScript_engine#JavaScript_engines) for more info.
Awesome. didn't know reddit had json feeds. Our internal web is now littered with cats from r/cats :)
I think it's useless, but I already have a set of patterns that ease object orientation in JS for me, so I'm not the target audience of your script. Take my upvote anyway.
I'm not sure what you mean by advantages, but it provides a module analogous to the Python [`struct`](http://docs.python.org/library/struct.html) module for JavaScript — namely, it allows you to define a codec for binary data so you can parse it into a named object. For instance, I'm using it for binary WebSocket frames I'm sending from Python, but someone is finding use for it to parse OpenType fonts with JavaScript.
You don't always have jQuery to use $.extend()
He explains what it does on the GitHub overview page for the project.
Assuming your 404 page isn't going to get regular hits, and accounting for the fluid nature of the top posts in /r/aww, then you could drop the random option and use something like success: function(data) { var image_link, d = data.data.children; for (var i in d) { if (d[i].data.url.match(/(jpeg|png)/i)) { image_link = d[i].data.url; break; } } $("img#random_aww_image").attr("src", image_link); } Probably a better way to do it, but it works.
define(...) and require(...) are used for AMD. Other than that it looks alright but there are quite a few class libraries for javascript out there. Maybe you should check out how dojo.declare(...) works, quite a interesting read if you are in to these kind of things. http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition
You misspelled *recursiveParent*.
What you have is very similar to Ext's class system. You should look into how they did callParent, because they don't have to pass the function name to it.
Well, first thing I'd look into (after a quick glance) is that you're sending the form as the argument to calculate() in the onclick, but calculate() itself looks like its expecting the document. Secondly, I'm not sure if calling this.form from within the context of the button's onclick even will actually send the form or not. It seems like it would, but that'd be something to check as well. Just throw a console.log(document); in as the first line of calculate to see what it is receiving when it is called.
i like what i see
Any client side file organization which does not include the ability to merge all of your scripts into a single file for the release version of your website is insufficient for large applications. 1. Developers want lot's of small source files. 2. Browsers want a single big source file. I recommend symbolic references to other scripts that must be executed first be added to the top of each source file (I use require statements but don't retain the returned object for client code). Then at build time you can read every source file and perform a topological sort to put them in the correct order automatically. With that list, you can either create a set of individual &lt;script src&gt; includes during development time, or else merge and minify them for the release version.
I use PHPStorm and overall it works great. The downside of it being based on Java is the memory usage but if you have plenty of RAM, you should be fine. What are your concerns? 
I'm interested in this as well
WebStorm is a JavaScript IDE.
uh, that would be the other way around, safari does not get updated anywhere near as often as chrome does.
Looks like you're using both Prototype and jQuery. Unless you run jQuery in 'no conflict' mode, the dollar sign function will be conflicted.
This is all very cool... most of the stuff it is cool at doing is only supported in Chrome, but it's still cool.
my understanding is that phpstorm is a superset of webstorm. it's webstorm + PHP support, so both will have javascript support.
Have you tried browserify, https://github.com/substack/node-browserify
Love WebStorm. A friend and I created [Doodle or Die](http://doodleordie.com) in a weekend using WebStorm. He had never used Node or Git and barely touched Javascript, jQuery before that weekend. WebStorm makes understanding and debugging your code much easier than colorful text editor like TextMate or SublimeText, and the Git integration is life-saving.
Or even better : (function ($) { // do stuff with $ actually being jQuery }(jQuery)); 
Yeah, I was planning on it being native to JS and original. It has to be designed around the hardware core I've done already and a lot of JS-specific stuff that can't be done to quickly ported/emscripten'd code. I saw that arm opcode map awhile back, was useful. :)
And you may not even need the redirect_uri
Hmm, I'm redirected to the URL specified with #access_token=access_token_here&amp;expires_in=4346 after it. So am I supposed to send someone to that URL and then take the access key? What do I do with that key after I have it?
Well, after using up the trial Im thinking of buying it now. I prefer Eclipse JS so it makes sense.
So if you said 'fuck the SDK' how do you go about getting user data? Like I literally just need to be able to get a name and email... if I can do that I can be happy for the rest of my life.
Getting user data is as easy as making a GET request to https://graph.facebook.com/me?access_token=USER_ACCESS_TOKEN You can POST to me/feed to post on the feed.
Jetbrains makes several related IDEs. Basically: * WebStorm has HTML/JS/CSS/Coffeescript/Node support * PHPStorm is WebStorm + PHP * PyCharm is WebStorm + Python/Django/etc * RubyMine is WebStorm + Ruby I use PyCharm all the time, including on pure HTML/Node.js projects, and it's fantastic. Wonderful support for refactoring code, good integration with git, etc. And yes, the web/html/js parts of PyCharm are 100% the same as WebStorm. The only downside to Jetbrains' products is they're Java-based, a little slow, and very RAM hungry. I wouldn't neccesarilly recommend them for a netbook, but they're otherwise fantastic.
Very nice effects! I have noticed that drawing a low-alpha black rectangle over the display to create a fading effect creates gray trails in the long run, due to rounding during pixel arithmetic. The solution is to make the background a matching dark gray rather than pure black. Another approach to fading trails is to explicitly manipulate the alpha of each pixel on every screen refresh, but this is a slower operation. I wrote a blog post concerning this issue: http://rectangleworld.com/blog/archives/214 (See my blog for more particle experiments!) 
You have to register your application with Facebook. The registration consists of your application name, app namespace, and some other information. You can find the registration here: https://developers.facebook.com/apps#_=_ Once registered you'll get a client secret, which is like a password to perform certain functions. This is something that's defined in the OAuth 2.0 specification. The redirect URI is a webpage hosted by you which has logic in it to get the access token. Usually this is the same page that you have the Facebook Javascript on, but you can develop your own method to get the access_token. Once you have the access token you (the logged in user) can perform various functions for some amount of time. The time is based on the access token TTL. You can store the access token in a cookie and use it for future calls. The cookie TTL can be the same as the access token TTL, but be aware that the access token TTL is a optimistic time period. Just because it says 4346 seconds, doesn't mean it'll actually work for 4346 seconds. You must have logic in your code to handle access token errors. Just remember that once you have the token you can perform various user functions. It's like a key. You have to have the key to get in the door. I tend to use PHP and cURL to perform the requests, and I've been working on a similar system to the Facebook pure javascript version for a very large company. We use a couple varieties of OAuth 2.0, but I work on the team that's creating a large scale OAuth-authenticated user information system.
as others have stated you're overriding "document" when you pass in "this.form" change this: &lt;button class="form" type="button" onclick="calculate(this.form)"&gt;Calculate&lt;/button&gt; to this: &lt;button class="form" type="button" onclick="calculate()"&gt;Calculate&lt;/button&gt; and change this: function calculate(document) to this: function calculate() also in the future use [jsfiddle](http://jsfiddle.net) as we can actually make a fork, correct, and post it back.
if you just want to change ABC to something else this would work: document.getElementById("1").innerHTML = "XYZ"; note: I'm not sure if you're allowed to have numbers as div IDs
Install jquery then do $('#1').text('XYZ'); 
Yes, this is because jslint doesn't assume you're running in a web page. It assumes the js you give it is a complete program. For what you're trying to accomplish, I think running jslint on you're javascript is a bit over kill.
It looks like you forgot to copy the closing *&lt;/script&gt;* tag when you moved it to the bottom. You should make sure all of your tags are well formed. And remember to include the *&lt;html&gt;&lt;/html&gt;*, *&lt;head&gt;&lt;/head&gt;*, and *&lt;body&gt;&lt;/body&gt;* tags. Script tags should go inside the *&lt;head&gt;&lt;/head&gt;* tags so they get loaded at the appropriate time. [See here](http://pastebin.com/1bLyZu0A) for an example.
That was for me a nice reminder of how many of those classical patterns are so pervasive on the web… and no mention of the Singleton Pattern! Hurray! My only complaint would be about the suggested way to simulate privacy in JS. I know it's common advice to proceed this way, but it feels wrong to me, since all methods are re-created every time a new object is created instead of being created once and then shared through the prototype. [This free online book](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) linked an the bottom of the article looks really interesting.
Path primitives? dude i love you
http://www.amazon.com/HTML5-Games-Creating-WebGL-ebook/dp/B006HW131K/ref=tmm_kin_title_0 is a pretty good primer, however if you've written any html5 games before, its pretty basic.
WebStorm for me is the no1 IDE for client side web development. I use it to code Javascript, HTML and CSS.. It sugest me names of classes, ID-s, function names,.... All of JetBrains is great.
IMO, [Singletons are evil](http://c2.com/cgi/wiki?SingletonsAreEvil), glorified global variables. Every time it is *not* mentioned in an article about design patterns I rejoice.
You have no idea the damage you have inflicted on the world. J/k
Thanks for checking it out! We really appreciate it. The tool itself is packaged as a Chrome Extension, as it takes advantage of a number of its privileged APIs. It is however built with HTML, CSS, JS and the Montage framework. The output of the tool currently supports WebKit browsers, as the tool is still in alpha and only includes the -webkit- prefixes. We plan to improve support for other browsers in due course. We‘ve put a [FAQ](http://tetsubo.org/home/faq/ninja-faq/) together that answers a number of the questions we’ve received on Reddit and other sites. If you have any other questions, let me know, or ask in our [forums](http://forums.tetsubo.org/categories/ninja)
Why the "just kidding"? The author clearly states on his website that the PHP code run inside of javascript is done in a *blocking* fashion, and there will be a clear tendency for lazy PHP programmers (the ones who still use PHP by choice) to choose to write "front-end PHP" with this. So, since it blocks the GUI while executing, and is a VM inside of a VM, and PHP applications have a tendency towards the, um, "unoptimized", how will this *not* produce absolute shit 99% of the time?
That would be very interesting to find out.
Yo dawg ...
&gt;But I think there is a better way of doing this with java. Java is a completely different language. Your post doesn't contain any questions. I have absolutely no idea what you want. Well, I can tell you that you don't do a redirect. You simply change the location. `document.location = 'http://example.com/';` A redirect is something which is done by the server if the requested resource can be found elsewhere. Then server redirects the client to a different location.
The best solution would be to have two distinct .html files one for each language. You would then link from one page to the other to "change language". But if that doesn't fit your use case, the simplest solution would be to have two divs, one for each language. You would then hide and show each one depending on user actions. var changeLanguage = (function(){ // First store a reference to the DOM elements that contain the text // of each language. var languageA = document.getElementById('A'), languageB = document.getElementById('B'), // And a place to store the currently selected language currentLanguage; return function(){ // When changeLanguage is called hide the DOM element of the // currently selected language. if(currentLanguage){ currentLanguage.style.display = 'none'; } // Decide which language to show if(currentLanguage === languageA) { currentLanguage = languageB; } else if (currentLanguage === languageB) { currentLanguage = languageA; } // Show the DOM element of the newly selected language currentLanguage.style.display = 'block'; }; })(); // Call the function to switch between languages currentLanguage();
Thanks for the info. I guess I wasn't very clear in my post. What I mean is this. I have a page for people that are married with kids, one for single people with kids, and one for married without kids. I want to be able to have them fill out out questions to get them to the right page. I was thinking I could create one single page that extends JFrame and will modify the labels to the questions. That or create multiple Jpanels that will only have one visible at a time. Their responses aren't important as long as they get to the the right spot in the end. 
I think you're taking this too seriously or misunderstanding. What the author has created is a curious and fun exercise, I would be interested to look at the code, and hopefully learn something new about JS and PHP.
You could check out Testacular, which can use Jasmine as the assertion framework. There's a screencast on the homepage. I highly recommend it. http://vojtajina.github.com/testacular/
If I build a brick wall on my property is it my fault when the drunk driver speeds into it in the middle of the night?
The reason for creating something like this obviously isn't to do *bad*. A lot of things like this start from curiosity or just "because they can". Now its our task to try and think of *good* ways to put this technology to use. Maybe we can create online teaching aids for people learning PHP. Maybe it can be used in a browser-based IDE for PHP developers. Maybe it can assist in transitioning PHP-based applications to client-side templating.
You're being obtuse. They aren't directly responsible, as you say so should the people who funded their research be counted responsible, but *society as a whole* is responsible, and therefore they are partially as well. And that is why there is legislation against sharing that information to the general public, because society as a whole, through the government, has recognized the dangers. But it is the scientists themselves who best recognize the dangers, the nuclear physicists who worked on the atomic bomb are the ones who pushed the hardest for UN monitoring and containment of nuclear weapons, and have pushed for the nuclear treaties between the US and USSR, because they were *best* capable of recognizing the dangers of what they worked on, and had a greater than average responsibility in handling it well. You *can't* have a functioning society that consists only of psychopaths like yourself; you have to have empathy for your fellow human beings and take the smaller effort upon yourself to reduce the greater combined effort that would be placed upon others.
No one will use it in real life.
I want to, but I know better not to. I despise everything front end. 
I'm not sure how people are missing your question so badly. &gt; Inside AppName, I have separate namespaced objects which are essentially singletons - they're just grouping related attributes/methods together. Namespaces are just conceptual to simplify understanding. Singletons or not. That's fine. &gt; In my ondomready function at the bottom, I just fire off init methods as appropriate - on every page view and/or certain page views. Is this a viable way forward until we can really start looking at something like require.js? Yes. It's important to understand the require.js manages dependencies. So don't worry about namespacing by page/view, worry about creating individual units of functionality, even if they call other namespaced functions. Spine/Backbone manages binding to a backend model so I'm not sure that's appropriate for what you've asked. require.js will handle including the appropriate declarations out of a pool of all the declarations regardless of their purpose.
TBH, I rolled my eyes at the comment that was highlighted but I LOL'd at highly unnecessary "// If there is only one page" comment!
Especially considering the implementation is wrong.
Thank you so much, it works. I'll start reading that, the only thing I had to guide me was W3schools, and google search results, this should prove to be quite more effective.
He just means using the `var` keyword more than once in the same scope. The alternative is to use `var` once and separate each variable declaration/assignment with a comma. Personally, I prefer the multiple `var`s. Easier to add/remove variables without having to worry about adjusting commas and where the closing semi-colon is. And I think it's just easier/faster to read and understand.
How is this diffrent from Phype? http://code.google.com/p/phype/
What colour theme is this, and is there a .vim?
Only if you distribute your code as a library without a warning that it's stomping on builtins. For your own use in a controlled environment, I see no problem - much like disciplined use of globals. tl;dr: "jerk" implies doing something untoward to other people.
So what ? Let them do their mistakes. Then, they'll know by fact why it's a bad idea to wrap a language in an other, and maybe they'll even be happy to learn javascript where they would had a bad feeling about it before.
I agree. The closure compiler is there to eliminate the unneeded verbosity if it becomes a problem.
+1
I'm actually using molokai at the moment, but it seems different to me, might have to pull this up on my dev machine and compare.
That's a pretty nice foot gun, because your code can cause incompatibilities with 3rd part code (Prototype.js comes to mind). Seems like you already know the risks, though. Just depends on what you're doing. It is very handy and very tempting, but if the code is meant to be used for a long time, or in combination with large libraries, I wouldn't do it. Also bear in mind, 3rd-party poorly-written code might use arrays with for (... in ...) loops, and adding methods to its prototype might also break this. So not only method-name collisions are to be considered.
Could be subtle differences due to different editor / OS (and thus colour rendering) / anything, could be another theme. I haven't used Molokai in a while (switched to Xoria256 a couple of months ago), but it looked mighty familiar. =]
This is a topic for a debate. On one head, the flexibility of JavaScript just asks to add different bell and whistles to it. On the other hand, this flexibility is a source for a whole bunch of different problems, which is why the standard approach to extending std prototypes is "don't fucking touch it, OK?!". But just think about it, it makes so much sense, if I want to find out the maximum of an array, shouldn't I just ask **the array** what its maximum is? Doing *BellsAndWhistles.max(array)* is just stupid in my opinion. I wonder if there is a way of extending an object's prototype only within a scope...
Same as Math.max([12, "a", false]) The problem is not the logic, but *where it is located*
No, the problem is extending the standard objects for dubious reasons, leading to potential problems along the way but solving no real issue. Math.max() takes a variable number of arguments expected to be numbers and returns "NaN" if one is not a number. To use your Array.max you still have to know that it calls Math.max, know all about it's side effect and still can have the problem of someone deciding to be even more clever and adding yet another impl of Array.prototype max.
I used to think that this wasn't a big deal until I read a discussion on the underscore Github page. (can't find the exact issues) They wanted to patch array with some underscore methods. The author of underscore explain that some big library used to do that (dojo I think). The problem was that their implementation was different from a proposal that made it into Javascript. So now they are either stuck with a library that's different from Javascript or they can update their library and break backwards compatibility. 
Sublime Text 2 ftw
&gt; I wonder if there is a way of extending an object's prototype only within a scope. Not that I know of :-( I would rather create a new "class", for example NumberArray, that aggregates an Array internally, and adds on top of it all the needed functionality. I is not so handy, because it's not a real Array (you can't use it as an argument for "apply", for example) but has good advantages, like private variables, etc. &gt; But just think about it, it makes so much sense, if I want to find out the maximum of an array, shouldn't I just ask the array what its maximum is? This would also be solved by my "NumberArray" proposal. You could also check that everything that's pushed to it is a Number and not something else, preventing somebody from poisoning your Array and getting "NaN" out of max(). function NumberArray() { /* Internal array */ var array = Array.prototype.map.call(arguments, function(item) { return parseInt(item); }); /* Exposed interface */ return { push: function(item) { array.push(parseInt(item)); }, max: function() { return Math.max.apply(Math, array); }, toString: function() { return array.toString(); }, print: function() { console.log(array); } }; } var numbers = NumberArray(1, 2, 3, 4, "7", 6); numbers.print(); console.log(numbers.max()); numbers.push("123"); console.log(numbers.max()); This sample is mostly "future proof", you have privacy inside the constructor function and you can have private methods and variables. The sample creates too many functions and objects on the fly, so it is *not* suitable for real-time JS (games, server side). But it should do the trick in the good old client-side browser.
Great stuff here too, we only need that kind of cache for ajax on our project, but that's really clever to wrap it in a jQuery deferred object !
Why not subclass Array and put the methods in that?
Comment says "if there is only one page" and yet the condition checks for "&lt;= 1". Not only that but it also alerts that you need atleast one page, while you can have one page, and it still hit the alert o.O
maybe getPageSetSize includes a cover page, hence the comment and non-intuitive check.
But the function is removePage so it makes sense in that context. The alert is shown when you only have one page and try to remove a page, so it makes perfect sense. Presumably, the code after the `if` block will then remove the page. The comment is also ok because the code is executed when there is currently only one page. I understand that the code says *less than* or equal to but the code inside the `if` statement will only ever be executed when there is only one page (because in theory the application should never be in a state when there is less than one page). Read back through the code in the context of removing a page and it should make sense to you. It's definitely not the most idiomatic code I've ever seen but it looks correct to me.
If you don't like it, don't use it. I think this is a pretty sweet and elegant idea, obviously handy for use with arrays of integers.
I don't see this as ideal, but generally I agree with others who say you aren't a jerk as long as you aren't distributing it without a warning. It should be noted as well that .apply() is not compatible with large arrays. Those min() and max() functions will work nicely with smaller arrays, but if there are too many elements you'll blow the call stack and get an error. 
Slightly nitpicking here, but wouldn't it be slightly better to use the prototype pattern here instead of module? You can then have a privileged member (this.array), or getter if you prefer. FWIW, this solves the 'creating-too-many-functions' problem.
I don't understand the people who add these type of comments. If you have a problem with the code, suggest a better implementation. Don't just attack the person's implementation with unspecific terms like 'retarded' and 'contrived'. That doesn't accomplish anything.
If javascript had a decent module system, I would tend to agree with that notion. As it is, poisoning the global namespace is baaaaad and should be called out.
How would you do the privileged member "this.array"? It's not possible in this iteration of ECMAScript, IIRC. If you declare the methods in the prototype, then they wouldn't have access to the array. You can do the "getArray()" getter trick, but that would be tempting for the class users. I'd prefer the array to be completely private so that I have full control over the data access.
It's only poisoning it if you need its purity. I think the NumberArray solution further down is the best deal, seems to be in line with the rest of the standard's function signatures.
Then that should be stated in a comment.
If "this.array" is instantiated in the constructor scope, then it's equivalent to a privileged level of access. Correct if wrong - bit rusty on JS as haven't dabbled in it for a few months. Besides, for the best of both worlds, define getArray() as privileged and keep array as private, then shift everything else over to the prototype.
"Array" is not in the global namespace? 
Well by that logic, everything that's in any namespace is "poisoning" the global namespace, because the namespace itself is global.
I'd go with something like this: &lt;style&gt; .english, .german { display:none; } .englishView .english, .germanView .german { display:inline; } &lt;/style&gt; &lt;script type="text/javascript"&gt; function translate(chunkId) { var chunk = document.getElementById(chunkId); chunk.className = (chunk.className==="germanView"?"englishView":"germanView"); } &lt;/script&gt; &lt;div id="translatedChunk" class="germanView"&gt; &lt;span class="german"&gt; Ich bin ein mann. &lt;/span&gt; &lt;span class="english"&gt; I am a man. &lt;/span&gt; &lt;/div&gt; &lt;div onclick="translate('translatedChunk')"&gt;translate&lt;/div&gt; Here's a jsfiddle: http://jsfiddle.net/NkYyx/1/
0
Then call it something else. It's still bad.
I personally use something in the middle. Variables closely related, are all defined with the same var, whilst unrelated variables aren't.
I take it you've never had to come into a project mid-swing, or otherwise inherit a poorly-designed codebase.
And just to be clear, it's using Quake 4's assets, title is a little misleading.
Not quite :-P function NumberArray() { var array = arguments; this.getArray = function() { return array; } } NumberArray.prototype.max = function() { return Math.max.apply(Math, this.getArray()); } NumberArray.prototype.otherStuff = function() { /* ... */ } 
Haven't played with this yet so I don't know if it exactly fits the bill, but take a look at [FuseJS](http://fusejs.com/).
A couple of things: - "arguments" is not an Array, it doesn't have slice, push, pop, almost nothing. Just the length property. - You have to store the getArray function somewhere. In your code is defined inside NumberArray(), and it would go away once the method is executed. But yeah, now I get what you mean ;-) function NumberArray() { var array = Array.prototype.splice.call(arguments, 0); this.getArray = function() { return array; } } *Edit: Formatting and splice.*
Why?
No, he's right, we need to go arrest the guy that invented bricks. They're a danger to drunk drivers everywhere. /s Here's what I don't get: isn't PHP already such a "hazard"? 
When you fail at logic, you can always ad-hominem
I'm not sure what you mean. Are you a jerk for using prototypes? I wouldn't say so. Only if you distribute the code without informing the consumer that prototypes are used. They will fuck shit up if someone tries to for (x in arrayvar).
The main idea is the conflict between flexibility and control in JS. I know the *correct* answer, but the point was to see people's opinions on this.
&gt;It should be noted as well that .apply() is not compatible with large arrays. Do you have a link to a benchmark?
I recently set about creating an application for my daughter and decided to document the entire process. At it's heart it is a simple virtual image board for helping with transitions. It just displays a pair of images for "do this" followed by "then that". It displays both images, then as you click cycles between them. That of itself isn't very exciting, but along the way I basically created a complete web application and document the entire process. There are many tutorials that cover the individual pieces, but very few that show how they fit together. In this tutorial you will see: * setting up a node based server * using express to serve static and dynamic content serving a cocos2D based game from Node/Express * hosting said node application on Heroku ( including installing the toolbelt, working with git, ssh keys, etc ) * configuring node using npm and creating package.json files. * creating simple web services with Node/Express * calling said web services synchronously and asynchronously from the client * uploading multiple files using YUI upload widget * client and server side interactions * dynamically sizing a Canvas tag * creating a simple cocos2D HTML game * a half dozen other things I am forgetting at the moment * possibly adding "How to PhoneGap" your app... maybe... If you are wondering how all these different pieces can fit together, or were wondering how to create a web application using Node, hopefully this series will be of some help. The complete sources are included and the project is hosted on GitHub should you wish to fork it and play around yourself. I do not go into a ton of detail about working with cocos2D, as I have [a tutorial series for that already](http://www.gamefromscratch.com/page/Cocos2D-HTML-5-Tutorial-Series-table-of-contents.aspx). There aren't too many tutorials that cover how all the various moving pieces fit together, so I hope some of you find this useful. Let me know what you think. Oh, and you can play with the app directly ( and no, it's not the version I use with my kid! ;) ), so be aware before viewing images, I cannot guarantee what others may have uploaded! It is hosted on the free tier of Heroku, and I have no idea the bandwidth or file size limitations... [Here is the application](http://radiant-planet-8015.herokuapp.com/) hosted on Heroku. It is simple enough, select and image from the left drop down, then select an image from the right. Now click on the screen to cycle between then. In the top right corner there is a "Settings" button, that will bring you to the Settings page, where you can upload images. Select one or more images, then give each a description ( this is what shows up in the drop down ), then click Upload files. If there are no options in the select box, thats because someone deleted them using the settings page. Again, I take no responsibility for what data you might see, nor the protection of your files. Please be mature about this guys and gals... 
Can you dispute my claim that the people more closely involved in something have a greater resposibility to make sure it doesn't cause harm? Can you dispute my claim that people who don't care how what they do could harm others are psychopaths?
I'm not sure what you mean by a benchmark here, but it is easy to demonstrate: &gt; Array.prototype.max = function() { return Math.max.apply(Math, this); }; &gt; var x, a = []; for (x = 0; x &lt; 1000000; x++) { a[x] = x; }; a.max(); And then if you are in Chrome: &gt; RangeError: Maximum call stack size exceeded or FireFox: &gt; RangeError: arguments array passed to Function.prototype.apply is too large or (surprisingly) IE: &gt; 999999 
[DENIED](http://i.imgur.com/TMs55.png)
[Oh you.](http://weknowmemes.com/wp-content/uploads/2012/05/oh-you-show.jpg)
What if you have an array of objects and you want to select only the objects with a specific property value? var arr = [ {select_this : false}, {select_this : true}, {select_this : true}, {select_this : false} ]; edit: punctuation
&gt;on this &gt;I'm not sure what you mean. On using prototypes?
Happy to help!
Oh, the course I'm doing on codecademy is making use of classes, I'm guessing it's just an introduction on OOP. Thanks a lot for clearing up the different definitions though.
From what it sounds like, it's all done in WebGL, so no need for NaCl.
Pure JavaScript.
It was running on a laptop with a NVIDIA GeForce 640M LE, it is mostly pixel shader limited.
Very cool. I think the card in my laptop is comparable.
I agree, no need for [NaCl](https://developers.google.com/native-client/) :-)
I'd rather do something like this: var NumberArray = function() { this.push.apply(this, arguments); } NumberArray.prototype = Array.prototype; NumberArray.prototype.max = Array.prototype.max || function() { return Math.max.apply(Math, this); } NumberArray.prototype.min = Array.prototype.min || function() { return Math.min.apply(Math, this); } This way NumberArray will behave just like an ordinary array, except that it has more functionality (and it won't poison Array's prototype!): var nums = new NumberArray(1,2,3,4,5); nums[2]; // 3 nums.max(); // 5 nums.min(); // 1 nums.splice(0,1); // = [1] and nums = [2,3,4,5]
Awesome, how would someone contribute to this? Fork and then push?
I'm just not sure. Anybody else think they were watching a video _of a video_ especially when it went full screen? 
You're using the very same object as prototype for both *NumberArray* and *Array*. function Foo() {} Foo.prototype = Array.prototype; Foo.prototype.count = function() { console.log('We have', this.length, 'elements.'); }; var foo = new Foo; foo.push(1, 2, 3); foo.count(); var bar = [1, 2]; bar.count(); Will output: We have 3 elements. We have 2 elements. If any, you'd need to do this: Foo.prototype = new Array; or just: Foo.prototype = []; Which I find kind of dirty. At that point I'd rather do the mixin trick.
When in doubt, MDN: https://developer.mozilla.org/en/JavaScript/Guide/Values,_Variables,_and_Literals#Variable_scope Also, be sure to use the `var` keyword whenever you declare a variable. **Always.** The only exception is when you explicitly want to attach a variable to the global window object, and even then you should be assigning it like `window.myGlobalVar = ...`
I'm just wondering if this guy's abilities and time would be better focused on the phpjs.org project which is an already mature and mostly complete project. [There's still a lot of work to be done](http://phpjs.org/unported/index).
And it would also mean you don't know what Array.prototype.each will do.
If the vendor is targetting iOS and Android, probably they are running on one of the following platforms: Android Browser Chrome Embedded webkit Mobile Safari The common factor is they are all webkit based browsers. Webkit pretty much doesn't support indexed DB (except perhaps for very recent versions of chrome on android, I think). It is a reasonable solution to use web SQL.
I guess he copied the title from another discussion at [r/html5](http://www.reddit.com/r/html5/comments/x4rz1/video_quake_4_running_in_webgl_with_realtime/). My post in r/webgl had the title [WebGL demo using Quake 4 assets](http://www.reddit.com/r/webgl/comments/x5fhb/webgl_demo_using_quake_4_assets/), which I hope was less misleading.
What exactly is it that you want to do...? Anything that JS does can be done by the user themselves. You don't even need a web browser to do it. I could just telnet in on port 80 and craft the entire request by hand. What are you trying to secure and why?
* Cross-platform code * JavaScript is fast enough to do something that was done in C
I'd recommend a book called "Javascript: the good parts" by Douglas Crockford.
To anyone interested, I'd like to point you in the direction of www.enyojs.com Cross platform JavaScript framework and really shines. Shameless plug by a strong supporter.
Thanks ill look at it!
How is in compassion to Angular for example?
r0fl thanks
i can never live down that i released the whole thing as wc3js so my username will remain as a constant reminder of my impotence 
The linked blog post is not that interesting. Go directly to http://ariatemplates.com/ or http://ariatemplates.com/usermanual/Writing_Templates for examples
It is fast enough, but it is much harder to maintain a big codebase in javascript. 
My company does this, and we support hundreds of users.
CodeAcademy is great, I recommend it too. 
I completely agree with the, Crockfords book will leave inexperienced programmers pretty clueless. Skip Dummies books. However, depending on your learning style, I recommend the [Head First Javascript](http://www.headfirstlabs.com/books/hfjs/) book. While it will NOT be your last javascript book as it's just a primer, it teaches in a way that's easy to understand for non-programmers. Then you have enough knowledge to move to a more professional level book. CodeAcademy is also great. Remember when buying ebooks to always search for coupon codes for the publisher's website first. Generally its very easy to find 40-50% off coupons at all times.
what's your opinion of it?
In it self, it's just an API layer for access to device, like GPS, camera, contacts, etc. If you're building apps, you're probably gonna need another framework for gui, like [Sencha Touch 2](http://www.sencha.com/products/touch/) or [jQuery Mobile](http://jquerymobile.com/) or countless others. I learned later ST2 has access to device itself so having it on top of Phonegap is a little redundant and I've been wondering lately what really is the purpose of Phonegap then ?
Just started to get into NodeJS development and WebStorm is the best IDE I found for that. SublimeText2 was to Mac for me. Just felt really foreign (it is fast though). Tried to configure Eclipse for javascript development. Total failure. Laggy, slow and crashy. Still on the 30 day trial, but WebStorm allowed me to actually make progress on building an app. So it wins for me.
No. You'll want something like RequireJS to make compartmentalization easier, but other than that, it's not much harder. Compared to C++, namespaces are easier, closures are a thing, and functions are much more flexible. And with requirejs or some other loader, each functionality can be in its own file and export whatever object/Class/API it needs to while hiding the rest of the implementation.
It's kinda weird, I saw Quake 4 and couldn't remember it coming out or playing it at all. I had to find a video of the first 5 minutes of the game before I remembered playing it. 
Two different things in case the above comment confuses people. Codecademy.com is free and awesome. CodeAcademy.org is a pay site that, well, you have to pay for. 
It was yet another decent product sucked up by the Adobe Borg.
I need these because of reasons...
It's a reasonable title. The AI scripting is all that's missing from this reimplementation, and it's not like that would be impossible or performance-ruining. 
There is no such thing as an asymmetric ellipse.
OK I guess I just assumed that they were the same. Could I still use Aide to make a game?
You're looking at the future of MMOs and free-to-play games. You load the website, it downloads the latest version of the code, the code downloads the compressed and procedural assets, and you're playing a full commercial game within minutes - no installation necessary. Instead of just a video, the next Unreal Engine announcement could be a full playable demo, right on Epic's website. 
ah yeah....its .org not .com. My bad. Still similar enough to cause confusion though. http://codeacademy.org/ 
I will let you know when I finish implementing HTML5 support!
Via: https://twitter.com/jashkenas/status/228118947722035201
Wow that helped alot thanks!
this highlighter.. my eyes are bleeding now
It's frustrating when people make good points, but then throw in side-punch arguments that make them look incompetent. I'm with jclogan here, there is not really a reason for him to add AMD support, Sylvester needs to be globally registered anyway (working around that would be messy and totally unnecessary). However, making the point that using AMD "amounts to the same thing" as using global identifiers is silly. It's a straw man, because what we mean when we say "AMD keeps us from polluting the global namespace" is not that we don't make things globally available. What we mean is that we namespace things. I'm assuming jclogan is not arguing against namespacing (if so, then y'all are on your own). The namespacing is a minor point though (you can do that in JS already). The real juice in AMD is in letting each source file declare it's dependencies itself. That is *very* useful given the common knowledge that code is written to be read by humans. Keeping an authoritative list of "this is what I'm talking about when I say Foo" in each source file is a key aspect in making code readable. Not having that is like reading a book that is continuously referencing other sections, but that does not tell you where those other sections are.
i think a good book is always the way to go. this cannot be overstated enough. even today i feel that with all the resources online you will often spend lots of time piecing your own lesson together, whereas a book will bring you through it step by step building on the concepts, referring back to them, creating examples and adding layers as you go. one will learn faster and in a more complete way. there is no better way to learn. the only drawback is that best practices can change. but for an absolute beginner, just go to the library and get a introductory javascript book. libraries... still very relevant.
Except with that I'm eval'ing every source file. How do I set break points? And how do I find out which source file and what line an exception is getting thrown from? I've never actually checked, but does firebug support break points that live across page refreshes on eval'd code?
Why not MIT license?
Like I said, it was a quick example. A more complicated solution would be to use a simple dependency parser to linearize the deps list, put them each in separate ``&lt;script&gt;`` tags, and write a ``require`` function that returns the ``module.exports`` variable for each module listed. A sort of anti-node-browserify. **If** there's demand for that, I could write such a thing.
BSD is pretty much similar. They only place they differ is that BSD requires attribution, I believe.
I found this, but only after googling using terms harvested from kolme's post. https://github.com/amdjs/amdjs-api/wiki/AMD Prior to that I'd only seen arguments for the merits and disadvantages of AMD without much reference to what it actually was. AMD as a straight search term is understandably useless. 
Since we're in r/javascript, it would make sense to google "AMD js" or something like that. Which gives you a ton of good responses.
Well quoted. JavaScript is prototypal, not classical. Can't see the reason for wanting to use these class-patterns except that you might have trouble thinking in the prototypal way, which isn't easy if you only have programmed in Java or such. I am having trouble with this myself, but I believe it is better to use this language as it is intended to be used.
xD
Seems very similar to what I have been working on. Here is my very rough draft project: https://github.com/ithkuil/cureblog Also a video which has the old lame interface (I revised it after making the video, looks more contemporary now) but demos the concept https://vimeo.com/16157639
It is very nice to see Toby wrote it in this way. I enjoyed reading it and following the codes. Great Job!
The reason I'm not using npm to index the components in my system, but rather have my own registry, is because my components are not node.js modules. However, they can and often do use node.js modules, and for that I automatically run npm install. What you could also do is use npm more or less as is but use your own couch db instead of the main npm registry. There are already a huge number of npm modules, probably too many really. Not really going to help to start adding a whole bunch of components in there that aren't really node.js modules.
You kept bringing up AMD and never once mentioned a Javascript module system in general, so I think my question is still valid. Why throw your weight behind a bloated module system like AMD when CommonJS is much easier to read and will be easier to port to Harmony modules (or shimmed into compatibility)?
I tend to write all of my modules to be compatible with both Node.js and a regular browser whenever possible; I've found that I write better code when I'm forced to write something that someone else may use, too.
I like to describe AMD (more specifically require.js) as being 'overwrought'. I just don't believe the added complexity is warranted. see: http://tomdale.net/2012/01/amd-is-not-the-answer/
AMD syntax works in the browser, while CommonJS's `require` is meant to be synchronous. The synchronous call is somewhat problematic for browsers to handle, but AMD works in browsers without much of an issue.
mocha is a much heavier framework, though. I went laterally and replaced it with nodeunit, which is much closer in spirit to expresso than mocha is.
There are many languages that cross-compile through developer effort. WebGL is automatically supported by any platforms that currently support or *will* support modern browsers. &gt; As for hard drive space, instead of dedicated storage on the hard drive, we're keeping all the resources of TF2 in RAM? [Procedural assets can be tiny.](http://www.youtube.com/watch?v=bPXlU6XmvE4) There's no reason a shooter like that has to take up ten gigabytes of space. &gt; I was arguing how impressive it is to see Quake 4 in a browser. Sensible mouse trapping is new and Quake 4 (with or without AI scripting) is the most demanding thing I've seen WebGL used for - on a laptop, no less. It proves the platform is solid enough for a commercial project with up-to-date graphics. edit: nevermind that you initially said "I don't see why WebGL is so impressive. "
Yep. Native apps exist for a reason and we shouldn't spend so much effort to circumvent that just because of money/time
Even worse.. make it pick an operation at random or reverse the array at random. (Especially if it only does this about 1 time in 100.)
To anyone who is against AMD. Please consider the following scenario. Given * You're working for a corporation who works with many sister corporations. * These sister corporations need JavaScript you've written. * These sister corporations do not update their JavaScript libraries at the same time ( not even the ones they require from you ), even if you ask them nicely. * These sister corporations suck at JavaScript. * You can't fix their code, you don't have access to it. Then it is very possible polluting the global scope could overwrite a dependency that they are using thus breaking their site. Build tools will not save you because you may have multiple versions of the same library. You can't expect everyone to be running the same dependency versions, you need to be able to run multiple versions of the same library. I don't think you can solve this issue without declaring your dependencies in each file and wrapping it in an AMD define. 
For what it's worth, browserify has great support for source maps in Google Chrome, allowing every original source file to get its own virtual source file in the Chrome debugger, complete with breakpoints (I think they persist across reloads, but not certain), without any of this eval stuff... just re-run a browserify task any time a file changes during development. 
Wow, had no idea. I never use UI though.
That is great to see! This is looking really quite nice!
What else is there? Is there a good alternative calendar widget? Needs to support everything jQuery UI calendar does.
Not in javascript, but I did. It was quite common when I was freelancing, actually. I quickly began to answer : "that need a complete rewrite", with a diplomatic turned sentence meaning : "next time, take a good developer from start". And if they're not ok with that, well, bye. Of course, I hope someone building a critical piece of software won't use php.js (or they desserve the problems they will have). But I was mostly thinking of people learning web development who try various libs to build a personnal project or something (they are probably the kind of person that will be attracted by such a lib).
[YUI 3](http://yuilibrary.com/) is quite nice.
Well, we didn't want to offend anyone who actually likes it *too* much
How well does it integrate with jQuery?
Well, &lt;script&gt; might be an acceptable value for your input. This very input where I'm writing is a perfect example, ¿should reddit mangle my comment to prevent XSS? That's just silly. Just escape correctly your data and you'll be alright. &lt;script&gt;alert('this is an acceptable value for an input -- especially for a JS forum');&lt;/script&gt; **edit:** Sorry, I was too hasty and didn't notice about the user registration thing. It makes sense to allow only a set of characters *in the username*. Please don't prevent me from using "&lt;&gt;.{}[]" in my passwords. Don't add spaces or weird things to your inputs. Just sanitize them and escape them.
KendoUI is a good project to keep an eye on. But it is still a fairly new framework and the have some maturing to do before it's prime time ready.
&gt; I mean, just adding spaces in between each character would be enough to render any malicious input useless. You're basically advocating trying to fuck up any *possible* attempted attacks on your website at some point in the future by *definitely* fucking up all your data all the time on every web request. That alone should be enough to indicate to you that it's a really bad idea. &gt; depending on your userbase That's the problem - you're advocating a half-assed, incomplete and deeply messy solution that only works for some situations and some applications, when there are already perfectly good solutions available that work more often, more cleanly and more reliably. &gt; how many people just cant live without inputting registration information that includes the specific character combinations of script, href, src, and http? ... anyone who ever wants to input a URL, for any reason whatsoever? Like a personal/professional website, a link to an external avatar image, etc? &gt; Maybe script, but that'd only be an issue with email [Mr Script](http://lastnames.myheritage.com/last-name/Script) disagrees most firmly. As penance, you're banished to [Scunthorpe-by-Clitheroe](http://en.wikipedia.org/wiki/Scunthorpe_problem) - the mythical penal colony for developers who advocate overly-permissive string-matching or overly-restrictive blacklisting of keywords. &gt; can't really perform XSS with an @ and .domain requirement Assuming output of: &lt;a href="mailto:[e-mail address]"&gt;E-mail me&lt;/a&gt; an e-mail address of: `"&gt;&lt;script src="http://nonsenseusername:nonsensepassword@nastyxsspayload.com"&gt;&lt;/script&gt;.com` would pass your hypothetical "@ and .domain" test and would still inject nasty XSS code into the page. &gt; Am I on to something or is this a terrible idea? Sadly, it's a horrible idea. It's insecure, doesn't cover all possible avenues of attack (eg, inserting an obfuscated URL and some in-line JS which de-obfuscates and calls it), covers a whole bunch of false-positives you really *don't* want it to (the inevitable Mr Script, above, who can't ever register for your website), and in general is worse in every way than just properly sanitising your input/escaping your output.
Well, what are the alternatives?
How about ExtJS/that Sencha stuff? Looks complete, possibly a bit overladen to me.
It goes much further than necessary, making it far too easy to develop bloated, slow apps. Of course that's up to the individual developer. What isn't is the fact that the community is arrogant and completely inhospitable. Considering how poor the documentation can be, a helpful community would be nice.
I think you'll find the docs are really good now with ExtJS 4.
You should. jQuery UI is fugly.
You had such a good post until the "sheeple" comment.
It can be shit regardless of what Crockford thinks. Nobody said Crockford here but you.
Honestly, that header markup seems just about right if you have to support IE7 and lower. Wrapper divs for all the crap you can't use box-sizing:border-box on.
Yeah but it doesn't (nor should it) support IE6, IE7 support is not all that great either. You can remove at a minimum 1 of those divs, probably 2. I know I'm a bit harsh on it, but IMO people (nobody in this thread) see Twitter Bootstrap as some kind of wunderkind framework when it's not. It's a reasonable collection on doodads that is sorta cross browser and looks like a million other things like it (although it's got jQueryUI beat to hell in the looks department).
Bootstrap was designed for programmers who aren't graphic designers and just want a presentable look with all the core components of a good UI. It excels at that. If you're a server guy, designing a horizontal dropdown nav, buttons, dialog windows, normalizing form elements, etc, is the last thing on which you want to spend your precious time. The CSS source is huge, but it's a good place to get examples of how to get a consistent look across as many browsers as possible. 
&gt; (although it's got jQueryUI beat to hell in the looks department) Slinging poo at a bare stone wall has jQueryUI beat in the looks department. That's not exactly saying much. =]
I've always explained jQueryUI as the following: 1. It's a great out-of-the-box UI framework if all you do is make very simple websites. For example, if you [want to make a 1-pager for your cat](http://www.youtube.com/watch?v=cShsNyw-RO0), it's great for that. However, the widgets are not best in class and will not be winning any design awards for compelling UI's -- at least not without heavy modifications. 2. It's a nice foundation to roll-your-own widgets, as they provide a lot of the boilerplate for common widget functions. 3. The "todo" list is telling of the momentum of the project: many of those items have sat there for 3+ years, and still there's nothing to show for them. In the mean time, outstanding alternatives have come about.
Addy Osmani is quickly becoming THE go-to source for intelligent and diligent commentary on the every-growing plethora of js frameworks. Highly recommend also checking out his blog: http://addyosmani.com/blog/
 charAt(115) + charAt(99) + charAt(114) + charAt(105) + charAt(112) + charAt(116) charAt(0x68) + charAt(0x72) + charAt(0x65) + charAt(0x66) I just beat your blacklist filter. There are probably other ways to do it, too, it's just too early in the morning for me (CA) to think of them off the top of my head.
You had me right up until you used the word "sheeple".
No, you couldn't. Here, I'll save you the time: * Need to create an ordered list of dependencies.. ok, how do we do that? * Ah, I can use static analysis to find all the require statements in the code, wicked. * Epic regex written * Shit, someone did "var r=require;['one','two','three'].each(function(src){window[src] = r("my/fancy/" + src);});" * Oh! I'll shim require, run it on the server side and pick up the dependencies that way! * WTF, someone required stuff in the middle of runtime. * (Realizes you need to execute all code branches for the shim-solution to work) * Ugh.. ok, I'll pull out the JS parser from rhino and read the AST * Harmony is released
You're being silly. 99% of the time ``require``s *will* be static, and they *will* be declared at the beginning of the source file. There's no point for a helper library designed for making debugging easier (and *not* actually being run on production) to support use-cases that encourage poor module design, so "Shit someone did ``insert crazy javascript here``, tell them to read up on module design and why that's a bad idea." It's the difference between C and C++. C keeps itself simple and handles the vast majority of use-cases for low-level, high-performance code. C++ is a shitstorm of complex syntax, competing concepts (the C++ preprocessor is turing complete, but looks completely different from the "normal" turning complete language), and features that assume the programmer is an idiot. Such a tool for using require on the client-side would be focused on the 99% of the time and let the 1% hang out-to-dry. If you *want* to do the crazy shit you just described, use the other one I wrote above that dynamically grabs the source and evals it. I won't support that shit with Firebug because doing so *is not worth my time*.
/r/newversion
It seems that the whole point of TodoMVC is to provide unbiased examples of all well-established JS MVC frameworks, without any mention of which ones are "the best". Indeed, ExtJS is listed on the front page of TodoMVC.com under the "labs" section. 
"As a bonus one can write AMD loader plugins, which can be used to load data on demand, etc." You're confusing AMD with the loader. Require.JS is a loader, not necessarily 'AMD', what you said is true about Require.JS but nothing stops me from creating a loader that won't accept plugins...
Will do, Addy.
Dude really needs to learn to be concise or partner with a good technical editor. I know effective writing is very hard, but his articles just tend to ramble (but maybe it's just me).
Was non-standard prior to HTML5 but was widely supported. Everyone uses it. view-source:https://www.google.com/
Well, there are really two things here: Javascript-the-language, and DOM-the-environment. You absolutely must know Javascript-the-language no matter what. What most people find painful to learn is not JS but the DOM, i.e. the API that connects Javascript to the internals of the web browser. DOM is the endless source of misery and is responsible for most cross-browser issues. jQuery exists to abstract away the pain of the DOM, but it still requires that you know JS. So I would say you must learn JS, and you should learn enough about the DOM to be aware of its existence and limitations, but not so much that you "bare knuckle" every task without using the assistance of all these great libraries that make life easier. jQuery really can reduce pages of code down a few lines, and in the process result in more portable code. 
Thanks for the help! Yea, messed around with some DOM it got super confusing. I'm glad to know jQuery will help out a bit
That's a *lot* of boilerplate and prototype mangling to solve the issue, and all of your code has to be aware of your particular event API, the event names you use, whether or not you allow cancelling events, and if you do, is that sync or async? Why not something like [async](https://github.com/caolan/async) or my own [queue-flow](https://github.com/dfellis/queue-flow) where there's far less boilerplate to write and the code can look more sync than async (especially queue-flow, but it does it by eschewing imperative style for functional-style only)?
I'm open to debate here: is a full MVC stack on the client side ever really warranted? To me the model is always whatever is already on the server side serialized/expressed into JSON. This should be 1-for-1. JavaScript is really only needed to do views and controllers. Building models explicitly for client-side consumption and doing mappings back to the server seems like a waste of time. I can possibly see value in this if you have complex JSON objects to send back in, but then this really makes me wonder about how sane the server side code is to begin with. It seem you almost always only need an orchestration tier that deals with caching, handling AJAX calls, triggering global events (you can call them a services or controllers, etc). And then just a series of subscribed views that deal with the specific regions of the page. With these two tiers in play, you most likely have a very simple and sound design that covers all the bases. I've never understood why developers are tempted to talk about a full MVC stack client-side. But then again these are just my thoughts and I am open to some perspective from developers who have had other design challenges.
I lolled: http://miketaylr.com/post/6b6709e8.png 
[Oh, the things you could do...](http://discogscounter.getfreehosting.co.uk/js-noalnum.php)
If you want people to take your rant seriously at least explain why you consider it a failure. Browser compatibility?, difficult to write plugins?. too heavy? . You pay a lot of attention to versioning, would it be different for you if the team decided to put a 1.9? JQuery UI has existed for a long time and that obviously means less freedom to innovate because of version compatibility, but diminishing the team effort in that way is not cool. If you don't like it then why are you asking for a grid component?.. remember that it's the effort of a lot of people that are very active solving bugs and improving the code (most of them in their free time), "Where's the grid?" sounds like a demand from someone who paid for some product and didn't receive it.. Please learn how to give constructive criticism 
I'm a contributor to one of these MVC frameworks, and "why do we need a Model structure when we already have the data as JSON" is a question that comes a lot. The idea behind a Model data structure for a JavaScript MVC framework is that it should be an extension on top of a standard JavaScript object that lets us determine what the state of the client-side object is relative to the state of the saved server-side object. The benefit of knowing this information is that then we don't need to re-render our entire view and send across all of our data whenever we've just changed one thing. Instead, each model fires its own change events to notify the application that its data is now different than the last time we've synchronized with the server, so we only need to update *that specific model*. This serves two purposes that are beneficial to developers. First, we end up transferring less data, since we don't need to re-render the entire view if we know only one specific part has changed. Second and most importantly, it becomes easier to debug and manage our codebase, since now we know exactly which data is changing and being re-rendered if there's a bug. If you only had raw JSON/JavaScript objects, it would be very difficult to determine which objects need to be updated. In that situation, you would likely need to be continuously polling your server in order to keep your client-side and server-side objects in sync, which isn't something we want to do, for both performance and development reasons. MV* frameworks might take some time to pick up, but the main benefit they provide is that they keep as many things separate as possible, which makes pinpointing problems in your code more easily, and minimizing the amount of synchronization we need to do.
It's true :-) 
+1 for Mozilla dev network. Also look at dochub.io as the mdn is sometimes under maintenance while they overhaul it.
Block out user names: Seems trivial to parse the user names, split by space and then search the comment fields text for the values and wrap it in a span of the same colors. Won't be perfect with shorthand names (e.g. Mike and Michael) but better than nothing. Similar colors: Store used colors in an array. If identical color is already in array, randomize color. Not sure about color tolerance algorithms.
No Qooxdoo there?
&gt; Similar colors: Store used colors in an array. If identical color is already in array, randomize color. That's a bad algorithm, it's time function is non-deterministic. I think it is technically not an algorithm. 
KendoUI flat out rocks and I've taken the risk and started using it in a long term internal project. The grid widget is a wonder to behold.
well put
we're developing an app with it and have not had this experience at all. we're using Sencha Touch 2 for the most part, but wrapping it with Phonegap for filesystem functionality etc. I'm someone who prefers Android to iOS, but the iOS webkit implementation is drastically outperforming that of Android, so our app runs way better on iOS. We've not run into the problems you've had... but we also ONLY use Phonegap at the very end of our process, we're using Sencha Touch 2 as our app framework.
tell that to clients with small budgets.
what sorts of apps have you built with it? we're using Sencha Touch 2 and Phonegap and pushing the boundaries of what a web app should probably be doing and it's showing in some areas... Specifically we're using leaflet.js for a somewhat complex mapping application, and we've got a pretty sizable searchable database in our app as well using sqlite... that and our app is just a bit more complex than your average "it's just list views and info pages" sort of thing...
Interesting, I've never used innerHTML in that fashion before. I always construct my strings before hand and assign that string to innerHTML as a final step in the process. I rarely run into issues doing so. I guess I'm just lucky that I haven't run into any of the strange edge cases that people are talking about. +1 on the w3schools advice. I keep telling people I work with to never use it as a reference but they still do. Drives me nuts. It's a classic case of "I don't know this. Google search. Yay! First result to the rescue!" I back away slowly struggling not to smash their keyboard.
I've used d3 but never seen that -&gt; syntax that you are using. Can you point me to some reference? 
The fat arrow thing looks awful.
If you've ever used a webos device you would have a better understanding of what it can do. HP developed their entire device using this technology and it has improved in leaps and bounds since the touchpad was released (and killed). I have never use Sencha touch but I'll give it a look. My app portfolio is nothing special, mostly niche apps that serve a single organization. It handles networking well and I've found to to be rather flexible and incredibly light weight. Do you have an example I could see? I love to see the work of other devs. 
The quasi thing looks wierd (and IMO python's %(name)s syntax is clearer), but you really want something to template html in javascript. But then you also want for-loops, if-else....
Wow I actually never knew about insertAdjacentHTML... I was just using appendChild this whole time
People sometimes use += when updating content within existing HTML, such as adding to an existing list of comments from the result of ajax. It happens sometimes, and you can get away with it, but it's best to just do it right.
If you are inserting a large block of HTML, I believe the insert will be faster. It's because the browser will use it's own internal code to turn all that HTML into nodes for you, instead of you building them all manually one by one with JS. Although you'll only see a difference with large numbers of nodes.
Have you ever attended any of these classes in programming at all? Is this a real college or one of those online deals? 
I like lambdas, but the nuances of this syntax don't seem to mesh well with the rest of Javascript :/
Thanks will do 
Yes I have attended all but two classes. It's a summer class that 8 weeks long. Real college. I've read the chapters we are covering as well. My professor only reads from a powerpoint during the class. I've never seen him perform an example program or anything. I'm guessing I should know this by now. 
When you use variables that exist only within a for loop or an if statement, `let` would allow you to declare variables within that scope and these variables won't exist outside of that scope. Some feel that those variables pollute other scopes and it is necessary to keep variables within as limited scope as possible, and this is where the `let` keyword becomes useful.
"case in point"
I get what it does, but what is it shorthand for? var = variable const = constant let = ?
What does it commonly mean in mathematics, Lisp, Haskell, Shell and BASIC?
They're special functions that are designed to be easier for the Javascript engine to optimize. ``this`` is static, no constructor functions allowed, no prototype to traverse. Basically, they're high-performance functions that are used in a functional programming style where you want to use a function in "the same way" as an imperative body (in a ``for`` loop or ``if-else`` construct). You'll probably very rarely assign them to a variable as he's done (which *is* somewhat weird to read), and instead use them as callback functions to other, named functions: var result = [1, 2, 3] .map(value =&gt; value*2) .reduce((cumm, curr) =&gt; cumm + curr); Versus: var result = [1, 2, 3] .map(function(value) { return value*2; }) .reduce(function(cumm, curr) { return cumm+ curr; }); Versus: var result = 0, array = [1, 2, 3]; for(var i = 0; i &lt; array.length; i++) { result += array[i]*2; } Now the functional-programming style takes roughly the same number of lines as the imperative style, and these fat arrow functions are legible in this context where they're being immediately consumed by the function they're passed to. (Technically, for such a simple map-reduce, you could just do: var result = [1, 2, 3].reduce((cumm, curr) =&gt; cumm + curr*2); But most of the time you're not writing something so simple and need the separate steps.) EDIT: If you still have questions about the legibility, read ``=&gt;`` as "becomes". var result = [1, 2, 3] // The result is equal to the array 1, 2, 3 .map(value =&gt; value*2) // where each mapped value becomes value times 2 .reduce((cumm, curr) =&gt; cumm + curr); // and the reduced cummulative and current values becomes the cummulative plus the current value.
I actually have a touchpad, it's nice! I don't have an example yet because this is our first app and it's not out yet, but it will be in about a month or so... it's an app for a Botanic Garden that has mapping functionality including a database of plants in the garden that is searchable (including "find plants near me on the map"), etc...
It's not a shorthand. It's the word "let". As in, "Let me have a piece of that cake". Or like in math, "Let x equal..."
 for(var i = 0; i &lt; 5; i++) { } console.log(i); // 5 for(let j = 0; j &lt; 5; j++) { } console.log(j); // undefined In Javascript, ``let`` simply defines a variable in C-style block scope, so it'll probably be used everywhere in the future since you can simply transcribe C and Java code directly into Javascript without worrying about variable name collisions due to Javascript's function scoping with ``var``.
Heavy usage of [higher order functions](http://en.wikipedia.org/wiki/Higher-order_function) is what makes ``function`` too long of a keyword. It is a lot to type if you're writing it over and over 5-10 lines in a row, and it's harder to follow the code if it's stuffed in there so much just cluttering up the actual purpose of the code. See my [other answer](http://www.reddit.com/r/javascript/comments/xbewa/thoughts_on_ecmascript_6_and_new_syntax/c5kyqpk) where I show how lambda functions make things easier to understand and type.
Fat arrows are a good idea and the fact that they don't have a prototype property and can't be used with new is even more awesome in my opinion because it will allow for even faster JavaScript code. Functions and object literals have always been enough for creating and composing simple and useful scripts and giving people the option of being even more explicit with exactly what they mean when they declare functions is a good thing. If all you want to do is transform one form of data into another then the traditional JavaScript function with its prototype property and the ability to be used as a constructor is just useless cruft that forces JavaScript interpreters to be way more clever than they need to be for running functional JavaScript code.
I wrote something similar to this; however, I had the goal of getting away from JQuery. https://github.com/jgalilee/mastodom Lets you specify DOM objects as anonymous JS objects.
&gt; Sugar is a Javascript library that extends native objects... \*Closes tab\*
Last time I played with it, it was still a bit unfinished IMO. Tab control only had one event for tab switch, click. But their grid is by far the cleanest implementation.
Let is used for scoped variables. If you really want to see how they are used, program in LISP for a bit (Clojure is a good once). (I may be wrong here). Javascript has this thing where it pulls all your variables to the top of the scope (for the function I think?). So let's say you have something like this: &gt; function() { &gt;&amp;nbsp;&amp;nbsp;var foo = [1, 2, 3, 4]; &gt;&amp;nbsp;&amp;nbsp;for(var i = 0; i &lt; foo.length; i++) { &gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var baz = "Count: " + foo[i]; &gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(baz); &gt;&amp;nbsp;&amp;nbsp;} &gt;} Now this example is a bit convoluted, but with `var` the variables *foo*,*i* and *baz* get effectively represented like this at the top of the function. &gt; function() { &gt;&amp;nbsp;&amp;nbsp;var foo = null; var i = null; var baz = null; &gt;&amp;nbsp;&amp;nbsp; ... more code ... &gt; } So this can pollute your function with unnecessary variables, and could perhaps even have unwanted side effects. `let` allows you to specifically force a variable to only live within the scope that of the block it was defined in.
First off, thanks for replying and for using my little library! After some noodling, let me just write down some thoughts: * My first idea was jsSHA.sha256({&lt;INPUT PARAMETERS&gt;}, {&lt;OUTPUT PARAMETERS&gt;}) * The format you said was jsSHA.sha256(requiredInputParam1, requiredInputParam2, requiredOutputParam1, {optionalOutputParam1, optionalOutputParam2, ...}) I agree your option is more standard but part of me likes the grouping INPUT and OUTPUT stuff together. There is another option: * jsSHA.sha256(&lt;INPUT PARAMETER&gt;, &lt;OUTPUT PARAMETER&gt;) &lt;INPUT PARAMETER&gt; could just be a string to be hashed (with defaults) or a "dictionary" with a required *input* key and optional keys about its formatting. It would require some type checking but my first inclination would be it's pretty sweet. Admittedly I'm not a JavaScript pro and I'm sure there is a good reason why this isn't done. 
No, it's really not all that simple.
Then java should not be one of the most used language, right?
Have you taken a look at the [Node.js ``crypto`` module API](http://nodejs.org/api/crypto.html)? Specifically the: var hashObj = crypto.createHash(hashingAlgorithm); hashObj.update(appendedData); var hashResult = hashObj.digest(outputFormat); syntax? This has the advantage of letting the user append more data over time as they want (Node.js can auto-detect the input data format as it has a binary variable type), and specify the output format lazily when needed. For backwards compatibility's sake, your hashing object could behave as before if constructed with the data and format variables set, and when left blank would allow the user to append the data as necessary. You could either convert all of the appended data to a single, consistent format (like Hex) internally so you can append the chunks of data and you can then keep your API totally backwards compatible, but you'll have the issue that all of this is kept in memory, while the Node.js-style API can process each appended result internally with the specified hashing algorithm and only keep the hash result in memory (so Node.js could stream a terabyte of data through this algorithm and not crash, while your's would get an out-of-memory error). This is more of a theoretical concern since your lib is aimed at browsers, and it's *not likely at all* that someone would want to use the client to perform multi-gigabyte hashing instead of on the server. But it's still increasing the memory usage to more than double (original input string + converted string that's probably bigger + final hash result) the Node.js style (original string + final chunk of converted string + final hash result).
Thanks. This is exactly the answer I was looking for. I get the problem it solves concerning variable scope. I just wanted to know why the word "let" was used.
No problem. Now are you going to give me a piece of that cake or not? :)
Bah, you and clarle are making me think sanely and not change things too much :-P Hopefully no one is trying to hash a file using client side JavaScript (looks like Node uses openssl under the covers) otherwise that would be all types of problems.
I find myself wanting fat arrows more and more. I develop in backbone, and I have this in lot of places: var f = _.bind(/*function here*/, this); Also this: var f = _.bind(function(){ doSomething("parameter", _.bind(function(){ //callback },this)); }, this); with fat arrows it would be: var f = () =&gt; /* code here*/ and: var f = () =&gt; { doSomething("parameter", () =&gt; /*callback*/); } This forced bounded context is good sometimes, but it don't change the fact that javascript bites if you don't know what are you doing PS: Reddit has some problems rending =&gt; inside a "code block"
One of the big traps that I fell into is not organizing commonly reused functionality into parent classes. Not every model or view has to be immediately descended from the base Model or View class.
That's pretty typical. You want to split apart your code so it's as modular as possible, and that often leads to having to write a little bit more boilerplate code. It ends up being worth it in the end if you can more easily diagnose where a bug is occurring, rather than having to dig through the many AJAX requests/event handlers that you might have in your app. Take a look at [Step by Step from jQuery to Backbone](https://github.com/kjbekkelund/writings/blob/master/published/understanding-backbone.md/), and compare the initial code to the final code. The initial code is definitely a lot shorter, but the final code is a lot more understandable, and would be easier to fix and maintain.
Common functionality will be modularized.. So I can definitely see writing less code in the long run. I'm using AMD(not require.js) to load functionality that might be used, but isn't guaranteed to be used by every user. I'm a huge fan of only giving the user what they need or request.
Any non coffeescript examples?
Amazing!! Definately going to read again when less tired :D
I've done both and there really isn't much of a difference. I like pub/sub, but IMO, if you go that route, it's important to use it consistently and in as many places as possible.
In my experience MV* frameworks (in any language) only show their value in larger applications, which always present a challenge in advocating for (or even explaining) their usage, because nobody wants to learn the ins and outs of a 50,000 line application in their spare time just so they can compare frameworks. For all of these examples, you have to try to think of how they'd work and compare when scaled up to something more real-worldish.
How could I use DI to share models? Never thought of that... If you have an example, that'd be terrific. :)
Thanks for this... 100% agree with what you say!
Lol oh, no no. I was just making a lame joke about [my sentence](http://www.reddit.com/r/javascript/comments/xbewa/thoughts_on_ecmascript_6_and_new_syntax/c5kyxys) "let me have a piece of that cake"...don't worry bout it :P
Okay then. I just panicked for a sec because I know it's this time of year and I know I'll miss it when it is.
besides using a few of the new html5 tags I don't see why there is the emphasis on it being built by hand with CSS3 and HTML5 or the need to point out that no JS is used.
Try KnockoutJS if you can? I've been using it tons and it seems to be extremely lightweight and can do very similar stuff that Backbone can. 
I have just realized that forEach and map might also be missing from IE. I have no easy way of knowing. Nevertheless, a refactor could remove that dependency. 
is that you, Douglas?
The problem with innerHTML is that it's easy to mis-use it. Are you using it to set some text in an element? Then go ahead, no problem :) Are you using it to set a large piece of HTML code in an element? Then you're doing it wrong. Now, having said that. Every now and then it's just the easiest, quickest way that works. Generate a bunch of html server-side you retrieve through an AJAX call and simply dump it wherever you want. But if you wanna do it the right way, you let you're server generate a JSON object representing the data, which you parse to elements through the document.createElement in javascript, then append them where you need them. Now you have a structured application. If the layout ever changes, you don't have to touch the server and only change the javascript. Certain parts of the data you receive no longer needed? Don't use them. You're much more flexible and since you let the browser create the elements, it's garantueed to be valid HTML the browser understands. The 'standard' way is to use the document.createElement and then append it. But when it comes to simply putting strings in an element, I find innerHTML() to be the right tool for the job.
"Here is some websites as on the internet."
I like that I was downvoted without explanation. Somebody could have said: &gt; In ECMA6, control flow constructs such as `for` now actually introduce a new scope. So that `var` can work backward-compatibally, `let` is the form that is aware of this new scope.
yeah. do you think it would be best for me to post the actual code on the site so people can read it? i'm not sure how you can get people to trust something crazy like a bookmarklet
Just a fast hack because i did not find a sprintf version implemented in js which fits my personal needs. not complete by now but some nice features already in there.
You can replace the test at the top of the function with this: if (!(this instanceof Factory)) { // someone forgot to use "new" }
`Cumulative` only has 1 "m" btw (intentional to avoid a NSFW identifier?).
Very clever. I like the way it works. Thanks for the share
The only place I could worry about client-side file hashing would be in conjunction with the File API. Load the file on the client, generate a hash, then send both portions to the server and compare the hash on the server to make sure it was uploaded properly. I'd need to look into the details of how HTTP POST works, as it may already include a hash for uploaded files. If not, then this could be a legitimate concern for (for instance) a Dropbox web client.
Perfect. Thanks for this, I'm messing around with it now, seems very useful.
What should I put in the few smart models? I feel like all of my logic falls into the root router and the views. My models only seem to contain defaults.
It's a stupid idea. You don't get TCP Sockets on the Javascript client. Either use regular ol' HTTP or Websockets. You'll have to implement HTTP/Websockets in your server stack too, of course.
Nah, the people who would know what to look for (like us) can easily get the code for it. It's no mystery. As long as it's not obfuscated (and it doesn't appear to be) I wouldn't do anything special at all. Look how easy it was, right-click "copy link address": javascript:(function(){var actorLinks=document.querySelectorAll('a[data-hovercard]');for(var i=0;i&lt;actorLinks.length;i++){try{var link=actorLinks[i];link.style.background=link.style.background?null:'#'+link.attributes.getNamedItem('data-hovercard').value.match(/\d{6}$/)[0];link.style.color=link.style.color?null:'transparent';for(var j=0;j&lt;link.children.length;j++){link.children[j].style.visibility=link.children[j].style.visibility?null:'hidden';}}catch(ex){}}var lis=document.querySelectorAll('li.uiUfiAddComment');for(var i=0;i&lt;lis.length;i++){lis[i].style.visibility=lis[i].style.visibility?null:'hidden';}})();
New version is up, and I documented a small problem at the end of the original post. I'm glad you like it :)
[Internet Explorer for Mac the Easy Way: Run IE 7, IE8, &amp; IE9 Free in a Virtual Machine](http://osxdaily.com/2011/09/04/internet-explorer-for-mac-ie7-ie8-ie-9-free/) . Assuming you're running on a Mac that is. 
When I started writing a javascript localization library, I thought about implementing full GNU ``gettext`` compatibility (which would necessitate a full ``sprintf`` layer). Turns out there are a [couple](https://github.com/andris9/node-gettext/) [implementations](https://github.com/DanielBaulig/node-gettext), so I first dropped my intention to write a localization library and try these out. They're unnecessarily complicated in Javascript, because the API was designed to deal with limitations in C and take the fewest lines of code needed for that language. They're also unnecessarily limited by ``sprintf`` as well. The following is a contrived example showing how ``sprintf`` fails to perform it's job in localization: Suppose you wanted to say a *very* simple English sentence that follows the [subject-verb-object](http://en.m.wikipedia.org/wiki/Subject%E2%80%93verb%E2%80%93object) order, such as "Sam ate oranges," but the subject, verb, and object are all determined at run-time. var sentence = sprintf("%s %s %s.", "Sam", "ate", "oranges"); Now, Japan is still the third-largest economy in the world, just barely behind China, so you want your website to work for them, too. But they use [subject-object-verb order](http://en.m.wikipedia.org/wiki/Subject%E2%80%93object%E2%80%93verb), so you try: _.setLocale('ja'); var sentence = sprintf(_("%s %s %s."), _("Sam"), _("ate"), _("oranges")); You can swap "Sam" with "Hiroshi", and translate "ate" and "oranges" just fine, but there is *nothing* you can do with ``"%s %s %s."`` that will adjust the word order. And that's where I realized that ``sprintf`` is solving a problem that doesn't actually exist in Javascript. In C, converting a value into a string is actually a somewhat convoluted process, since the value itself cannot contain any metadata about itself (not an object), and can lead to buffer overflows of your string memory if not careful, so rather than have dozens of poorly written converters for each C application littering your codebase, the C standard library implements the common conversion features in a **s**tring **print**ing **f**unction, ``sprintf``, but since localization wasn't a concern, they never thought that you might want the values in any order other than the one specified, so the initial argument focuses on a tight, simple syntax for specifying the formatting of the provided values, in the order they're described in the string. From your example (I'm ignoring the extra syntax you added [that apparently Ruby has as well] to get around this limitation): var used = sprintf("%3.1f%% of %d MB used", 34.56, 1024); // 34.6% of 1024 MB used But that could have just as easily been: var used = sprintf("%s%% of %s MB used", (34.56).toFixed(1), 1024); // 34.6% of 1024 MB used All objects have a ``toString`` method, and may have other string-formatting methods, as well, so all a Javascript string printing function needs to worry about is concatenating strings. With that, I created [node-localize](https://github.com/AGROSICA/node-localize) (it now works in the browser, as well), and it uses a much simpler syntax: localize.setLocale('ja'); var _ = localize.translate; var sentence = _("$[1] $[2] $[3].", _("Sam"), _("ate"), _("oranges")); and ``"$[1] $[2] $[3]."`` can be replaced with ``"$[1] $[3] $[2]."``. The string formatting syntax is *far* simpler (so translators who don't know *anything* about programming can grasp it) and Javascript objects can take care of converting themselves into strings, or a helper method can be called to provide special rules on conversion. So, an sprintf implementation for Javascript can help someone quickly convert raw C code into functioning Javascript code, but I don't think it really "belongs" in Javascript.
What do you use JavaScript for ? Just curious. Do you really need a factory class when you are developing a webapp for an example 
Can we get this **out of** pastebin. Put it on github or some other version control system so people can see your progress and submit issues, etc...
Fair enough, I'll look into it setting it on github today
Usualy I don't need factories, which is why this is my first time actualy making a class for it. However, I somehow found myself in a project to simulate our solar system.. the amount of objects became quite big and inhertitence started looking like a maze. So, I made this to bring order to the chaos :)
We are discussing over on [SO javascript chat](http://chat.stackoverflow.com/transcript/message/4728859#4728859) if you want to join in.
How is this factory any different from [`Object.create`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create/)?! Or any class system made by Dojo, CoffeeScript and such? I'm coming from a javascript background, I don't have much experience in Java. I may be mistaken, I'd just like some enlightment to see if it has any use :-)
Great to hear that Websockets worked out for you. Rock on :)
&gt; The technical term is 'hoisting' I knew it was something like that. For some reason I was thinking 'pulleying' but knew it was wrong. &gt; This is incorrect, variables are actually initialized to undefined Ah yes, undefined and null aren't the same :/
My preference for localizable strings is something like crockford's [supplant](http://javascript.crockford.com/remedial.html) (although not necessarily on a core prototype). I find code like `supplant("{subject} {verb} {object}", {subject:"Sam", verb:"ate", object:"oranges"});` to be significantly easier to manage, particularly if the format string has to go through a bunch of non-technical folks to get translated.
Looks nifty. Just one question, though: The *template* declares an interface of an object, and the *warehouse* provides the implementation. But what if you want to vary the implementation of the interface by template type, i.e. object type? Using your game example, say you want to have the player move differently from an enemy, but you want both object types to be polymorphically interchangeable, so one component can move() an object without having to explicitly know its type. How do you build such objects when the implementation is looked up by name declared by the interface? Do you specialize a *playerwarehouse* and an *enemywarehouse*, and won't that quickly become untidy?
I haven't used Object.create that much, because I often want to use code inside the constructor, which this provides. Also, this uses 'normal' functions and objects, so everything is writable and interchangable and they exist in the cache of the Factory, which reduces memory. I'm sure Object.create has a lot of benefits but with complex objects I'm not sure if it's the right tool for the job, which is why I made this. I should probably play around with Object.create before I can give a good explanation on how this differs, but at the moment I just don't have the time for that :/
&gt;document.meal.tip15.value = '$ ' + tip15.toFixed; https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number/toFixed Currently, you call the `toString()` method of some function (functions are objects, too) and append whatever that might return to '$ '. You have to call that function by adding "()" at the end. &gt;&gt;&gt; '$ ' + (Math.PI).toFixed() "$ 3"
Hey buddy, toFixed is a method and needs to have parenthesis after it when called. document.meal.tip15.value = '$ ' + tip15.toFixed(); document.meal.tip25.value = '$ ' + tip25.toFixed(); document.meal.dincost.value = '$ ' + dincost.toFixed(); For the final part of the calculator: "Dinner plus 25% tip" I had to swap these two variables around so you weren't using a variable before you declared it. var din25 = (parseFloat(dincost) + parseFloat(tip25)); // You're using dincost here before it's declared var dincost = document.meal.dincost.value; That became this; var dincost = document.meal.dincost.value; // Declaring dincost first var din25 = (parseFloat(dincost) + parseFloat(tip25)); Then I added this to the bottom part where you insert the values into the HTML. document.meal.din25.value = '$ ' + din25.toFixed(); Your figureit() function should now look like this and everything should work. function figureit() { var tip15 = document.meal.dincost.value * .15; var tip25 = document.meal.dincost.value * .25; var dincost = document.meal.dincost.value; var din25 = (parseFloat(dincost) + parseFloat(tip25)); document.meal.tip15.value = '$ ' + tip15.toFixed(); document.meal.tip25.value = '$ ' + tip25.toFixed(); document.meal.dincost.value = '$ ' + dincost.toFixed(); document.meal.din25.value = '$ ' + din25.toFixed(); } If you have any questions please go ahead and ask.
You should check out Dart: http://dartlang.org 
Thank you so much! This made complete sense, once I added it into my code, it worked flawlessly. I sent you some Reddit Gold for your troubles!
Hey while you're looking around at various approaches, take a peak at [Ivy](http://adamsanderson.github.com/ivy/). I think it lends itself more toward data models where the objects have relationships to each other, and makes keeping all those relationships in sync. You also get databinding, and some natural templating for free. Along the same lines, Knockout and Angular are also pretty neat.
Internet Explorer 9. [source](http://dochub.io/#javascript/array.foreach) Sorry, brah. Otherwise, I love it. =D Just swap it out.
Reread Good Parts. I'm reading it for the 2nd and a half time and stuff is seeming to sink in better. Read something in between of course, but definitely a reread.
I think while using Backbone at the beginnings that is normal. But as you get used to it's way (organizing your code through model and collection events) you will realize in fact it saves you writing more code. If you setup structure of your code on model changes and collection events adding or removing features from UI will be easier as it grows, and always use templates
The Definitive Guide is too heavy, /me was looking for something crisp.
* removed _debug code, thx. * What tests?
Professional javascript 3rd edition by zakas
I couldn't get it to do anything in Chrome, Firefox or Mobile Safari. Sorry. :(
Yeah, I've removed and re-added eval several times now. The problem is that it isn't an object I'm trying to 'stringify', it's a function. I want to seperate it from it's prototype to prevent backward inheritance. I'v tried the JSON solution, but it fails in copying a function...
Aw man. I don't have a mobile version working yet. What OS were you running Chrome/Firefox on?
has anyone read Eloquent Javascript?
looks like some special rules on the border.
I tried to but was a little to much for me. Stefanov's book on the other hand, did the job. 
Me likes OO JavaScript 
It's an interesting experiment, but not very practical for production environments.
Search through MDN rather than W3schools. A lot better information.
looks good. does it work with many browsers?
pretty slick
Looks great man! :) Did you post it in /r/jquery
Looks really good, good documentation too!
I use this: var sprintf = function() { var args = arguments; return args[0].replace(/\{(\d+)\}/g, function(match, number) { return typeof args[number] !== 'undefined' ? args[number] : match; }); }; It's short because I rarely need string/number/float/etc formatting. I use sprintf mostly for gluing strings and variables together.
I wonder if it's easy to add a feature where tooltip automatically changes placement when it comes close to some element or close to the edges of bounding box. 
I went in the order of: Eloquent Javascript -&gt; The Good Parts -&gt; Node: Up and Running and I finally feel like I 'get' javascript in all of it's wonderful minimalist glory. Each book taught me more about js. Right now I'm reading through 7 Languages in 7 Weeks and the chapter on Io (another minimalist prototypal language) really drove home my understanding of prototype inheritance, i would recommend it it anyone who wants to be take his/her js to the next level
I've read eloquent js and it's a really, really really well written book. I always recommend it to people looking to get into javascript and I dont think anyone I've told about it has disliked it. I feel that it's written very well, very instructive but not boring and not so out there that it's like Why's poignant guide to ruby. 
The demos on your page work fine in Safari 6.
very cool, but important to note it is not properly functional in IE8. Unfortunately, IE8 still has enough market share that for the vast majority of paid projects, I have to support it. :-\
I notice the underlying DOM for these tooltips is dis-associated, location-wise, from the element being hovered. In my experience this has been a problem in JS-driven apps because when you do something and it overwrites the underlying DOM, it often won't also overwrite the tooltip. So you get this zombie tooltip that won't go away and you have to write lots of dumb cleanup code. Any thoughts on how to handle this?
Like I said, it was an intentionally contrived example to point out the issue of *parameter rearrangement* with standard ``sprintf``. Suppose you had a more complex sentence with two clauses and you're inserting a user's name and some pertinent information (like account balance) in each clause. In some languages you would invert the clause order, as well, and that would be the *actual* problem. I simply didn't want to look for an example sentence and find a language that does that, when I could write far less and just use the basic grammar differences between Indo-European languages and Japanese to demonstrate the *technical* limitation (not implying that "%s %s %s" is *ever* a good idea in reality). As for your second point, I currently have date formatting localization completed (``localDate``), and am working on numeric localization, but I'm still futzing around with the API so it is fairly "slim" like ``localDate``'s. On your final point about ``gettext`` being a standard translation offices can understand, sure, and I have the intention of writing a ``.mo`` and/or ``.po`` importer for ``node-localize``, but the group I'm working with does their translations internally and the JSON format is just as easy to follow as the ``gettext`` standard (in my opinion, of course) that members of that group who have *no* programming experience can add new translations.
How do you do that voodoo with the little arrow pointy thing hanging off the side of the tooltip? Been trying to figure out a good way to do that.
CSS arrows, fairly standard now. (see: http://css-tricks.com/examples/ShapesOfCSS/). CSS heart blew my mind. But in this case I attach the arrows to the :before pseudo (e.g. #powerTip.n:before {}) so that I don't have to make the script generate unnecessary markup.
With borders. [http://css-tricks.com/snippets/css/css-triangle](http://css-tricks.com/snippets/css/css-triangle) Pseudo elements also work great with css triangles :)
Yes, that disassociation does make it a little more complicated. While not specifically for that situation, I did have to handle what I call desynced tooltips because there are edge cases where the mouse can leave a hovered element without firing the mouseout event, leaving the tooltip open. Since I queue the tip hide/show calls it would lock the system. I solved it by running an interval while a tooltip is open that checks for a desynced situation twice a second and closes it if it detects one. It's not exactly an elegant solution, but I did build an iteration where the tooltips were integrated into the elements they're attached to using CSS for the hide and show. The problem with that was that it only works with elements that can have children, so elements like &lt;img /&gt; and &lt;button /&gt; could not have tooltips. In the end I decided that it was more important to be able to have tooltips for any kind of element than it was to not have the less-than-elegant hack.
awesome, looking forward to it! one thing that would be great, though I understand you may not want to cram too much functionality into one plugin: the ability to show a tooltip by command, even if it's not mouse triggered, would be great. Why? It might serve as an all-in one combo of tooltips and replacing a plugin called "[guiders](http://jeffpickhardt.com/guiders/)" that I really like (but last time I used it it did have some issues, though I see it's gotten some updates on github lately so maybe I should try again)
Detecting edge collisions it pretty simple. The mouse-move tooltips are already constrained to the browser viewport. I plan to have fixed tooltips constrained by the viewport x axis (but not the y) and they will flip if they collide with the edge. But I haven't yet implemented it. As for custom bounding boxes, that is certainly possible, but I can't really think of a use case. Do you want to enter coordinates on the document or constrain tips to something like a parent div/section?
Thanks, had seen that video half before reading, now will re-read and watch this :)
Please consider recreating the demos in jsfiddle. The demo page is good as it is, just add links "try this demo in jsfiddle". There are so many plugins to do the common tasks like tooltips and lightboxes that I just don't have the time or energy to download and try them all when looking for one. The ones that have the best demos get tried first, and an *editable* online demo will put you to the top of my list. It will also save time for everyone who want to give it a try as there is no downloading and unpacking needed.
Accessibility dev here. You (and all other developers) should learn ARIA! This is a standard that makes web2.0 content accessible for people using screen readers. [Here](http://test.cita.uiuc.edu/aria/tooltip/tooltip1.php) is an aria tooltip example, you simply need to update a couple attributes when it shows and is hidden. [ARIA Intro](http://webaim.org/techniques/aria/) Another thing you should do is add focus and blur events so people who aren't using a mouse can still see the content.
Except for the part where the guy specifically asks for feedback... right in the title. Then a guy with actual knowledge in a specific area offers feedback and direct links to ways on which he can improve his code and you come around with nothing to offer but to call him a nag. Comments like yours are the ones that get under my skin. I understand self righteousness is running wild in the world lately, but try to do your part and don't be a dick. 
Version 1.0.4 is live with fixes for IE8 and below. Hopefully it works better now. (No fancy arrows or rounded corners though) I found a better way to handle the rgba issue. It seems that I can use the rgba as an override so long as it is overriding a hex value. &gt; the ability to show a tooltip by command Yep, that is a feature I need too, and it is already in progress in the "api" branch. I'll get that feature out soon.
I normally hate jQuery plugins due to their poor quality, see qTip for example. This however seems very nice, well done!
I appreciate the thought, but it's true, the point of this thread is to improve the plugin (and maybe even grow my skills and/or knowledge). While a pull request would have been easier, I didn't even think about trying to make the tooltips accessible (and I'm usually an accessibility fanatic). So this is something I need to go out and learn for myself.
1. Ahh, I see what you're getting at. An ability to set some elements as *avoidance* targets. A way to tell the plugin that "I want you to make best effort to avoid placing a tooltip on top of this paragraph". That is actually a really great idea. I'll check out how difficult that will be to implement. If it's a lot of code then I'll skip it, don't want to introduce too much bloat. 2. Sounds like you want to be able to set an avoidance flag on map pins. Makes sense. 3. Constraining the tooltips to a div is relatively simple (same math as viewport). The only thing I worry about there is what happens when a someone makes a big tooltip constrained to not-so-big of a div. Handling that gracefully sounds like a lot of code (avoid center? let mouse move onto the tooltip some? let the tooltip push out of the div with some elastic math?) 4. Pointing away from center is also a fairly simple calculation, but it should certainly not be default behavior. For example, tooltips appearing under inline text in a paragraph break the flow of reading and make it a little more difficult to keep your position, that's why UX people usually ask that they appear above inline text.
feel free to pm me if you need any help!
Great job. I've been looking for a good tooltip plugin. I'd have to test this to make sure it works for all our supported browsers, including IE6 :(, but if it does, this might be the one.
I am guessing this applies only to iOS mobile devices? I mean is Nitro really faster than V8, or is it just faster on iOS devices? Maybe more aligned with the processor or environment on those devices? If Nitro is really faster than V8 in general, how does it achieve that?
Thanks! Auto placement is something I too would like, but defining how it should work and implementing it is non-trivial. The question with auto placement that avoids colliding with elements is what to avoid. Should tooltips avoid other elements that have tooltips? Should tooltips avoid stacked elements? Should tooltips avoid certain kinds of elements (links, abbrs, h1s)? etc. Then how do you prioritize one element collision over another? It gets very complicated very fast. And I haven't been able to come up with a good answer.
IE6? Owch. Define "works", hah. I don't even have the capability to test on IE6 anymore. I've long since lost my vanilla XP virtual machine.
&gt;What tests? Jasmine, QUnit, etc. A utility function like that is perfect for the BDD (or TDD) workflow. With proper tests, you would have saved *lots* of time. Also, without seeing the tests I can't tell if it's any good. I can't tell what you tried. I also can't tell what you tried with *every* cycle. For example, here is the (seemingly excessive) test suite of my tiny HTML fragment validator: https://github.com/mahonnaise/b0rked.js/blob/master/spec/b0rked.spec.js Testing that stuff manually would have been insane. Those tests were also amazingly useful during development. Just thinking about the exact things it should and should not do helped tremendously.
I've found it weird this wasn't yet supported on Android when I started using Leaflet a year ago. I never knew this was due to a patent... it makes me sad :(
http://pokerrpg.com/
V8 originally compiled to x86 assembly I think, whereas iPhones are ARM(ish). Maybe that's the issue. V8 supports ARM but maybe not as well?
Make it more puzzle-like. The ability to toggle between swap and drag mode would be nice. I ended up with the worst case scenario where an entire row was off by one and had to click swap the whole thing. The only puzzle that I had played, I discovered there was rotation, but it wasn't used in the puzzle.
ouch indeed. it atleast has to show up, if not look pretty. i'll let you know how it goes.
Pieces should swap places when you drag them onto each other. In the beginning because of constant scene changes it took me a few drag and drops to realize it wasn't doing what I wanted to do. If I want to move a piece to a position, but another piece is already in that position the game should assume I want to move the other piece out of the way (swap). Why should it take me 2 steps to do 1 action?
On the javascript side let me ask, your code obfuscation is interesting. Packing the source into a .png is a pretty clever deterrent... Is this your own personal implementation or have you seen that technique used before? I like the idea and it seems like if there isn't already an implementation, it'd be a good module to add to a [static file combiner](http://django_compressor.readthedocs.org/en/latest/index.html).
Do any (good) screen readers actually support ARIA yet?
I wouldn't really call this the easy way and also not really "JavaScript" as while it is JavaScript it's all based on Backbone and jQuery and not showing how this is done using native JavaScript. Also the fact that there are asynchronous operations in JavaScript isn't really an *issue*, it's just how those operations are designed to work. *You* might have an issue with that fact though, but it's not more a problem of JavaScript than it's use of prototype based inheritance over a class based. :) If I were to do this in a truly easy way, I would probably just use a callback.
One downside of client being in JS/HTML5 is that it usually is easier to write bots for or reverse engineer the network protocol compared to the native code counterparts. However I don't think it's too big downside as it's often the easiest part of writing the bot anyway.
They should be *number* boxes. &lt;input type="number" min="00" max="23" name="hour" /&gt; &lt;input type="number" min="00" max="59" name="min" /&gt;
I'm using Qooxdoo, so no HTML is involved. But i used a Qx TextField and set my own validation on those.
There's over a decade of non-standard implementations before that spec came out. A lot of legacy browsers do not handle innerHTML in ways you'd expect. The goto example being that IE will leave off quotes on attributes in certain cases.
Yes, that is exactly what we did.
WebSockets, CSS3 animations, HTML5 audio, etc.
Thanks for the really good reply. And it sounds like an anti-trust suit waiting to happen on Apple's side -- they are intentionally and effectively making it so that non-native apps perform much worse than native apps, with seemingly no arguments for security or stability or anything to be made on their behalf.
have you seen smart time ago? http://pragmaticly.github.com/smart-time-ago/
Can we swap different map providers easily? OpenStreetMap, GoogleMaps, etc.
Then maybe I'm missing a large chunk of what you are trying to do, but you could create a logic object for storing logic like so: var logic = { think: function (dt) { //think logic here }, move: function (keys) { //move logic here }, attack: function (player) { //attack logic here } } And it "should" work if you set up your prototypes, etc. I mean, somewhere you have to define "think", "move", and "attack".
[Leaflet](http://leaflet.cloudmade.com/)
That's true, but it doesn't really matter going forward. Old browsers are old browsers. There exists a spec now so new browsers (or maintained browsers) can have interoperable implementations. And for the most part, the bugs aren't showstopper issues (unless of course you're trying to innerHTML broken markup in old IEs, etc.).
\n vs ; are one byte each. Why are new lines as statement separators worse than semicolons, again? (that said, I use semi-colons, because everything just looks wrong without them)
Leaflet is the best alternative to google maps. In some usecases even better!
As someone who has been writing for 7 weeks, I envy you. I have a narrow possibly idea of what your functions are doing but there is a lot of meat in there that I have never seen.
Is this a factory design pattern?
You're going to hate this advice, but if none of your console logs are running past the click handler, then make sure the selector is correct. Try entering $('.accordianButton') into a WebKit console and see if it gives you an element or an empty list. 
Where in my code would this go? In init or in the clicking function?
Since you said you want it collapsed on load, put it in init. If you put it in the click event handler, it won't happen until your users click the button.
If you can get the input in a way that the user can't mess up, do it. text boxes will only make things more difficult for you later. Selects are about the best solution to use for time input.
Now it gives me errors on this line: $('.accordionButton').removeClass('on'); It's claiming syntax error: unexpected identifier.
There's nothing wrong with the code I gave you or the line you're showing so you must have entered it wrong or it must be something else. Would it be possible for you to put your code in a fiddle like I did? It's much easier to help that way.
http://jsfiddle.net/8ER72/
because you can see semi colons
I think the comment below is the problem. I have the wrong selector. Do you have any idea how I can find the correct selector?
Oh? Perhaps you're right, but I don't think I've ever missed a newline.
I love my semi-colons, but still +1 for that :D
That means there isn't an element with class accordianButton. See if that helps you out. If not, show me the HTML and I'll take a look.
Nope, at least not at the moment. There is an api in development which should let developers manually open and close tooltips. But that hasn't been finished yet.
you could just add an option to the parameters that designates how it's bound, whether through mouseovers or click. Default it to hover, and give the user the option to add click to it.
Thank you! At the moment you can specify the id you want for the tooltip div. Custom classes would be fairly simple to implement but I can't think of a time when you would need classes in addition to the id. What were you thinking of using custom classes for? Or, did you mean custom classes on the element that the tooltip opened for? I can see a use case for that.
Also http://developer.decarta.com/Apis/JavaScript
That's really hard to say without being able to see the HTML. If, after running that code and clicking the button, you don't see anything written to the console, I would agree that your selector is probably wrong. Based on your JavaScript, I would expect to see this in your HTML: &lt;div id="accordion"&gt; and also this somewhere: &lt;button class="accordionButton"&gt; You said in your original question that the accordion should be collapsed on load, but it looks like your code is trying to hide it when the button gets clicked so I'm not really sure what you're trying to achieve. Going through the exercise of trying to replicate in a fiddle what you're trying to do in your app might make the problem obvious. If not, it at least gives the rest of us something to look at and run and even modify if we think we know how to fix it.
WebSockets are not part of HTML5. Nor is CSS3.
Do any browsers support fat arrows, yet? (Serious question, I thought they were waiting for ECMAScript 6's RC at least before implementation begins.)
You're very welcome! Glad to explain.
Is it just me or did Angular sound like (or the author made them out to sound like) they were going to leverage Google Chrome to give their library an unfair advantage? 
For some reason it makes more sense to me if I think about the function as a decorator. Am I wrong? Thanks for sharing. Can you show us an example of a state definition?
Don't tell that to the W3C: http://www.w3.org/html/logo/. Obviously none of the stuff is technically "HTML5," but that is the easiest way to describe it where people know what you are talking about. It seems like you are just arguing for the sake of arguing at this point.
Maybe just a tad bit of resentment ;)
while he's being pedantic (a little moreso in your case than with a lot of projects that dub themselves "html5"), I think there's valid reasons to critique use of the term. unfortunately, the use of "HTML5" as a buzzword has caused me great difficulty in my profession. The fact that there's no definition around it, that it's used in so many nebulous descriptions of technology, has clients asking us for "html5" when they haven't the foggiest clue of what it is they are actually asking for, nor are they in a position to decide what technology should be used to build it. The further misuse of this terminology by the web development community only makes my job dealing with clients even more difficult.
yes.
Works great on Chrome, Windows 7 This is awesome!
if you get a reference to the button (via `document.getElementBySomething`) you should be able to trigger the click event calling `click()` on it, then it's just a matter of putting that on the callback for `window.setInterval`
Any decent JS compressor should be parsing the JS according to the spec.
Mm... makes me want to smack people who still put a javascript function in the href. Without seeing the exact situation you have, I can only give general advice, but it sounds like calling the function :JS_refreshWindow with the parameter of 'refresh' is what you need to do. Because of GreaseMonkey's sandbox, this is slightly trickier than it would be in a regular page, but not too bad. The sandboxed code keeps GreaseMonkey functions from calling functions in the document to prevent any kind of leakage. Basicly, what you want to do is make your timer code as normal (window.setTimeout) and then set window.location = "javascript:JS_refreshWindow('refresh')" (I'm 95% sure that is the right syntax... I don't have that code with me here to check.) If that doesn't work, msg me here and I'll dig out the code I used for something similar.
Sorry this is so late. I haven't been on reddit for a while. I just took the final for my class today and I think I did ok. Thanks for the code! I didn't use it though since I just saw this today. I still don't know very much about programming but hope to learn more. I read a little about javascript and now I know the difference. Why would you pay me if I had used it for my assignment?
thanks :) :)
Same here
There's only one warning in IE discarding the X-UA-Compatible meta-tag because it's too late in the document. However, if it would have been used, it had switched IE into IE8 mode and *then* you get the error: (X) Script65535: Unexpected call or reference. app-3070762802c6d8ec74eb96bed8f6765c.js, line 2 character 31993 The corresponding code is: function(){return thid.domManip(arguments,!0,function(e){this.nodeType===1&amp;&amp;this.appendChild(e)})}, Obviously this is called out of a scope where "this" is not already set (called out of scope) so it can't have any attributes.
I bought "High performance Web Sites", now feeling most of it was already known :(
This is highly informative and exactly what I needed! Thanks
Well, i am not supporting IE8.
After getting complaints from some users regarding the page (and other similar pages) not working in iPad and IE9 I tried some tools to test IE9 and got some errors like undefined is 'undefined' in prefixfree.min.js. It was very weird. I still cannot figure out whats wrong in all honesty. in iPad emulators, it does not render due to some errors in JS that really makes no sense. I am confused, if there is some error in JS, it should reflect same on ALL platforms unless some feature is not supported. Like if some JS code works fine in Desktop (and Mac) Chrome/FF/Opera, then it should definitely work fine in iPad's Safari/FF/Chrome, nope ? and I am sure the code I wrote is IE9 compatible, yet there are some weird errors for some users while for others there's no error. It's kinda driving me nuts :/
Factories are typically static though, and thus wouldn't be a constructor.
I'd think that's a really, really bad idea.
Can honestly say that I've never seen this before, is it intentional? .attr("x", function(d, i) { return x({x: .9 * ~~(i / m) / n}); }) Specifically, the `~~` part; seems to be a no-op, or maybe some type of number coercion/integer casting?
Set it to: `IE=Edge,chrome=1`
don't put curly braces in new line.. i like the track a lot.. nice experiment, nice shadows on dots
The op isn't asking about making a word processor. He's asking about converting a numerical grade into a letter grade. The solution will require one or more *if* statements and the use of the &lt;, &gt; and = signs, and combinations of those three. I can't really be more specific than that without giving away the answer. If you need clarification, please take a look at your textbook and read about conditional statements. Please talk to your professor or other students if you require additional help; Reddit is not your homework hotline.
If you're not using a library like Backbone, you're simply going to end up inventing your own, bit by bit. Nothing wrong with that, but as you move towards applications that are more complex you'll gravitate towards the same ideas that these types of frameworks espouse, or end up with a mess. But yes, this is how people are doing this kind of stuff. You shouldn't have to send the entire thing back, assuming your API supports it. Also, even though you are validating on the client side, you must also validate on the server side -- you cannot assume the input will be correct.
&gt; They just take what I already do, and make it work a little better. Does that mean it plays well with or integrates seamlessly with things like jQuery? Was there anything in particular that made you choose it, even if it was because of a specific project requirement or something you read? edit: clarity
i like the cut of your gib the api is sooooo consistent, you can essentially describe the whole thing with data, and unfold it into objects! great job.
Thanks for taking the time to answer. I thought this was how things were being done but wanted to make sure. I really do want to use something like Backbone or Knockout, but I am concerned with how long it would take to ramp up on it. I also have concerns about how difficult it would be to debug these things when the inevitable problems do occur. Anyway, I guess I wouldn't need to send the whole model back, just new and deleted records? As for validation, I have domain validation on the server, so I didn't mean to imply that validation only occurs on the client, just that I would have some kind of client-side validation in place.
I like the separation. What template engine are you using and can you recommend a skeleton or bootstrap on git? Sorry for all the questions and thanks for the response.
HTML1115: X-UA-Compatible META tag ('IE=9, IE=8, chrome=1') ignored because document mode is already finalized. You probably want IE=edge. And you want to make sure the x-ua-compatible meta tag is the very first meta tag sent.
the main problem I have had with jquery accordion scripts is that they are real jquery version specific,
Speaking from personal experience, the [backbone series](https://peepcode.com/products/backbone-js) from PeepCode is rather informative and approachable. That's just part i; you can check out the two followup episodes [here](https://peepcode.com/products/backbone-ii) and [here](https://peepcode.com/products/backbone-iii). Though I cannot personally attest to its value, Addy Osmani's [Backbone Fundamentals](http://addyosmani.github.com/backbone-fundamentals/) (maintained on GitHub [here](https://github.com/addyosmani/backbone-fundamentals/)) is fairly popular in the community, and Addy has some other great tutorials, so I'm sure it's worth a read.
&gt;I am concerned with how long it would take to ramp up on it. You can focus on your design process and functionality thinking while you do that. While you read the docs and get up to speed on Backbone, you can plan how to integrate with it. &gt;I also have concerns about how difficult it would be to debug these things when the inevitable problems do occur. This is the biggest reason why to use something like Backbone! You'll have a community of developers doing and having done what you are doing to talk to -- maybe even real time chat in ICQ. Serializing. Validation. Transfer. Backup. On and on. These are tried and tested problems that have been solved or at least have many solutions available far deeper in experience. If you don't find exactly what you need, find the closest thing, get the source, and start working on it. I think your time and energy should be spent thinking deeply and putting your energy in the design of the 'business logic' (I hate that term). That's your domain. You'll be a hero if you solve the problems in your domain, and no one will care if you rolled your own cool serialization tool. All they will care about is that the parts system they use every day sucks. I would spend the time to work on how to organize the information on that massive page you're describing. It sounds like an eye-burning headache. Can you create a design which is cool and works? Anyway, I don't know anything about the particulars of your project, but it sounds like the place I've found myself in time and again, and just wanted to offer some unsolicited advice. Good luck!
Thanks! You are 100% correct of course. Gonna start looking at Backbone.
Have you tested on a regular webkit based engine (Desktop Safari, Epiphany, ...)? Chrome's version of webkit, Firefox, and Opera all use different JS engines than the primary WebKit tree.
If you're proficient in JavaScript, just read the code. Backbone is one js file, and it's something like 800 lines and it's heavily commented. Very readable stuff.
Are you a Code School member? Or did you just purchase the standalone Backbone course? I'm wondering if you can download parts of the courses (like the instructional videos, for example). I'm debating the merit of a monthly membership. It seems to have positive feedback; I think it's worth a shot.
I have experience with SpringMVC+JSP, and have looked at these styles of MVC framework and I've never come across a good example of anything which could be called a reusable widget. What typically happens is that the View is some simple template where values from elsewhere are plugged in with minimal computation/processing. Any kind of processing is done in the Controller. This works in the very simple cases like a single text input field in an application, but imagine we have something more complex like a "photo selection widget" which the user can use to select a photo from somewhere. In a proper widget based system you can build a widget, a 'black box', which you can put on the page to do the job. In this style of templated web MVC system that black box would be split in half into the View and Controller. For example, functionality like search or upload which has to be presented in the UI (i.e. View) also requires logic in Controller to implement the processing (i.e. perform the search or store the upload on the server). The View and Controller have to work very close with each other and are very much tightly coupled. This is not what I would call good encapsulation. Changes in the View which are more complex than changing the font or layout require changes in the Controller. This is why I'm not sold on this style of web MVC. The code reuse is not there. Splitting V and C is often not pretty in practice. And lastly, it doesn't scale up to support complex GUIs which are needed in modern web applications. (FWIW, although not perfect, I am enjoying working with Dojo.) 
As a 16-year veteran of web-apps who stays abreast with the newest technologies I must say that this is totally wrong. It's a classic problem of "All you got is a hammer" way of thinking. Smart models, dumb viewers, thin controllers? sure, ok but constricting presumptive frameworks that want me to think about problems in their way? no thank you, I'll pass; true innovation doesn't happen in a vacuum sure, but useful innovation usually doesn't arise from these exercises in programmer-category-theory either; single paradigm programming, go jump in a lake.
It depends on so many things. Using the save-all approach, if you are editing the WO and add one part, but somebody else added another part to the same WO then the last to save will overwrite whatever was submitted before, so you may lose your part. If that is a small shop app, then collisions won't be a problem, but it won't scale or you would have to lock docs whenever edited. So the ideal thing would be to update only what was changed. So if somebody adds a part, and another user deletes a part, both transactions will be recorded (assuming they are different parts). For the scenario where two users are updating the same part, then optimistic or pessimistic locking would be necessary and that will be defined by policy, like the latest overwrites it all, or only one can edit a doc. Either way that won't be hard to implement in your app, whether you choose to go with backbone or angular or whatever, all you have to do is keep in mind the concurrency issues when dealing with data. I say roll your own, learn from the journey and read about backbone in your spare time to complement your experience. Time will tell you when to migrate. You will know when you'll be ready.
Unfortunely, the client wants everything to occur in memory and only be saved when the Save button is clicked. That means I can add and delete all kinds of stuff from the work order and I have to track it on the client. Makes the app way more complicated but that's what they want. Collisions like you describe will be super rare. I doubt they would happen at all given the clients business processes.
Definately a cool idea, I find the number of emails showing in a gmail pinned tab pretty useful. Shame it doesn't work on chrome mobile though...
Some other points of interest: http://favris.info/ or http://www.p01.org/releases/DEFENDER_of_the_favicon/ But yeah this is pretty awesome and a cool idea. Especially since it is fitting with how most browsers already do this when the page is loading so its somewhat intuitive. 
 setTimeout(function() { unsafeWindow.JS_refreshWindow('refresh') }, 60000)
Sounds like a good idea! I recommend Backbone because I think it is very flexible.
Yeah, I think Backbone could still have a place in this project -- and admittedly, I haven't used it enough to fully understand the ins and outs -- but it didn't quite feel like the right tool here. This seems very worth looking into. Thanks!
A very cool idea, but load up the demo + task manager and watch the memory usage slowly tick up... Wait until the icon finishes animating, then hit F5 and watch the memory usage continuing ticking up, and so on. It's a pretty small impact, but it's there.
*don't put curly braces in new line..* I'm gonna go ahead and keep doing that Thanks, though
Hasn't been a problem yet, but thanks for the heads up
it depends on what you control, how you work, and what you are doing. I've got nothing against MVC (and by MVC I'm talking about the categories of MV, not just MVC) if I'm trying to say, display a filterable/sortable database result page in a flat paginated way. I think it works well in the web world because a lot of things are just that. * Dating sites? yep. * Shopping sites? yep. * Job postings? zagat/yelp? message boards? torrent trackers? on-demand video sites? feed-style twitter clones? The reality is that most of the web, which I guess I consider boring, can be expressed pretty adequately like this. That's why MVC enables deploying a wide range of things with different purpose really easy; because of the "programmer-category-theory" exercise I talk about. ---- Bringing this to the client side helps people make this real-time and opens up things to look and feel much more responsive. In this way, I think it's probably ok for most people. I even have a [glue system](https://github.com/kristopolous/EvDa) and [client-side db](https://github.com/kristopolous/db.js). The thing is that rich bold creative user-interfaces and products (e.g., [nico nico douga](http://en.wikipedia.org/wiki/Nico_Nico_Douga), [aviary](http://advanced.aviary.com/tools), [audiotool](http://www.audiotool.com/app/4_am), google docs) simply don't fall cleanly into what is basically a complex form of [REPL](http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop). ---- I fear two things 1. People will assume that the MVC style model is the one-size-fits-all way of thinking about problems (just like lots of people thought OO was a one-size-fits-all 20 years ago) 2. People will be lose insight into problems that fall outside this model and fall victim to this methodology structuring their thinking 3. Oftentimes too many assumptions are made about what kind of site I am doing and I end up sweating the libraries limitations instead of innovating on the thing I want to create. I basically want to do easy programming without compromising flexibility and speed. It's a hard thing to do, I know. I don't think that coffescript gives it to me, I don't think that backbone does ... perhaps some others do. But overall, I think the focus should shift away from all-encompassing frameworks and go back to things that are just happy being APIs (such as jquery), not taking a real preference to the actual structure of the code. 
Thanks for taking the time to write a detailed article.
Although there's no facial hair options right now, and everything is really 2-D looking, it's a great start, and is fun to play with. and "fatness" is a variable, ha!... where else can you find that? 
Your example barely has any javascript in it. Is this the thing that your users are saying has the errors? Or are your users viewing a different page? I assume it's an actual site. document .querySelectorAll('body')[0] .style .backgroundColor = 'whiteSmoke'; Another question... Why are you doing this? Why not just add "background:whiteSmoke" to the body rule in your css? 
From reading the rest of the comments, I'm thinking that link is no longer pointing to your code. http://cssdeck.com/labs/bv45bh6p takes me to a "css-callouts" example. 
If there was enough options, this would make for a neat password hash visual cue thing. Something like [chroma-hash](http://mattt.github.com/Chroma-Hash/)
Just a random question... where do you live, roughly? I'm often looking for new JS developers (I lead the UI engineering group for a large company where I've put in an architecture involving rich internet apps written in JS).
obviously, you don't know what you are doing. but good luck
there is no "thid" in the code at all, you can search the source - http://cssdeck.com/assets/js/build/labs/app-3070762802c6d8ec74eb96bed8f6765c.js Also I am not setting any meta tag for IE really.
The error occurs on the page. The JS code is http://cssdeck.com/assets/js/build/labs/app-3070762802c6d8ec74eb96bed8f6765c.js The errors are not related to the code that you see in codeboxes. Also the errors are weird.
I see. Well now that you say that, that makes more sense. Though I don't get an error from that file and I don't get an error everytime. I did see an error from the prefix-free about RegExp but I only saw it once. It was gone after a refresh and won't come back after clear cache, etc.
Got the error to occur when manually setting the document mode to IE8 mode. some resources: http://stackoverflow.com/questions/6618481/unexpected-call-to-method-or-property-access-in-ie-with-appendchild http://stackoverflow.com/questions/8263069/strange-jquery-error-in-ie-unexpected-call-to-method-or-property-access Do you have a non-minified version that could be put into play to debug this? The error is definitely IE8 and below related so you may just ignore it if you aren't supporting 8. Your users getting the errors are most likely in Compatibility mode.
I like it. Mike's got balls.
Sorry, this, not thid.
This is quite interesting! Do you only generate random faces or is there a way to specify or draw a face?
Seriously. Node and CoffeeScript are awesome. Why does anyone care what I use? If it's all JavaScript in the end, then it doesn't really matter.
This subject needs more visibility in the JS community. Thanks so much for posting!
I dont know Java but why would someone try to write in a verbose language like java for web app dev?
all sencha frameworks are 100% html5 + javascript, exept ext.gwt (which is ext.js für java)
1. Significant whitespace. It's just personal preference, but block delimeters and semi colons disgust me. 2. Function shorthand (-&gt; and =&gt;). I program in functional style with underscore so I write a *lot* of functions. Oh wait, this is a rhetorical anti-coffeescript circlejerk: I use Coffeescript because I am a hipster nerd and javascript is OVER.
After reading this: http://www.codinghorror.com/blog/2007/05/the-best-code-is-no-code-at-all.html years ago, I've taken on the mentality of trying to reduce lines of code. Over time of doing this, I've come to appreciate small, short, and concise code. When I can write "-&gt;", "=&gt;" instead of "function()" and not use block delimiters, I end up saving at least 20% lines of code. I think the resulting code is more beautiful as well. However, I realize beauty is a matter of taste. I started by writing EVERYTHING in CoffeeScript. I then realized that for small Node.js modules, I should probably write them in JavaScript if I hope to get any kind of significant contributions. Now, I'm in the process of rewriting my modules into JavaScript and use CoffeeScript for application level development.
http://shop.oreilly.com/product/9780596529307.do?green=5D1DEDAD-8F74-5427-03B2-BA57CE9BBF4E&amp;intcmp=af-mybuy-9780596529307.IP :(
http://shop.oreilly.com/product/9780596529307.do?green=5D1DEDAD-8F74-5427-03B2-BA57CE9BBF4E&amp;intcmp=af-mybuy-9780596529307.IP :(
Hey, I took a quick look at EvDa your "glue system". It seems like a neat idea, but the readme is very abstract. A few concrete or small real world examples would be nice.
Knockout has a really nice live tutorial, it can be a bit odd getting into the correct mindset at first though
You probably just need a gui/component type of library to help you manage all these widgets. Something like knockout or backbone might help, but you'd probably want to use it in conjunction with some like jQueryUI. Alternatively, I don't really know what you're doing, but you might find [Gridster](http://gridster.net/) neat, I just came across it today.
Because I feel at home in CoffeeScript (similarity to Python), because it has lovely things like destructuring assignment and list comprehensions, because it's less verbose, because it's easier to read, because I like keywords over ascii symbols.
Ok, I don't have that code anymore. Can you send the URL that you are looking at and I'll see what I can do?
That screenshot doesn't show all the code, but the error message is a simple one. Syntax error is usually caused by a typo, it even tells you what character to look for.
Your problem might be on line 5 which is not shown in your screen shot. Maybe you should post your whole proposed solution.
Oh, let's not forget Wakanda IDE - the free version of Sencha Architect.
Doubt it's related but line 6 is really odd. You usually don't have a boolean comparison inside of an array value reference like that.
[Doesn't seem to work for me](http://i.imgur.com/ojXib.png). Chrome 21.0.1180.60
i bought the architect, was worth it, but try to ask them about a open source license - maybe they will make it happen if enough people ask
Ok one sec, i'll post the whole original code in the post. 
Well in general that error message means that you have a syntax error somewhere involving a ( that isn't supposed to be there, or out of place. If you have another ( somewhere that you forgot to close with a ), and start another condition or codeblock with ( then it'll give you that error. Without seeing your entire code, that's all I can deduce. Shouldn't be too much of a problem, just read your code and check for any open brackets that haven't been closed (or closed in weird places) or if you tried to ( where there shouldn't be.
The value in the "content" property is the [unicode character for a snowman](http://www.fileformat.info/info/unicode/char/2603/index.htm) (yes, that's a thing).
Wouldn't it just get casted to Number: 0 or 1?
I love CoffeeScript and use it for everything now but this is hilarious and he does make some good points. Now, when I first saw CoffeeScript, I hated it. I am actually one of the apparently few people who really dislike Ruby syntax. I always felt like Ruby syntax was unnecessarily complicated and it reminds me of Perl. Now, I know that Ruby is very powerful and Rails has (or at least had) superior (to a lot of web development frameworks) software engineering baked in, but I still really don't like the syntax. Anyway, I originally dismissed CoffeeScript on the basis of that original impression that it was sort of a Ruby syntax for JavaScript. In other words, making it more complicated for no good reason. Then I added pdfkit to an application and realized that I needed to modify/add on to the code. There was no way for me to do that without learning some CoffeeScript. Once I realized that all of the @ were just 'this', and all of the -&gt; was just 'function', my opinion of CoffeeScript started to change. Eventually I realized that, although it is possible to use a few Rubyish features, like putting control flow at the end of the line, in a confusing way that to me doesn't help, overall, CoffeeScript is more Pythonic than Rubyish. Anyway to me its even more straightforward and pseudo-code-like than Python. My debugging these days is actually mostly a ton of console.logs. Which is actually what I was doing with Node anyway before I started using CoffeeScript. Obviously that's not ideal, but I assume that there will be good CoffeeScript debugging tools for Chrome and Firefox not to far out (or are there already?). I do like leaving out this, function, a whole bunch of ( ) { } and also the class stuff is nice, the loops and comprehensions are nice, the =&gt; for binding this is great, existential? is very helpful, splats are useful. Basically it makes the code significantly shorter, easier to read, and easier to write. 
Nope.
line 5? for(var i = 0; i &lt; lost.length; i++) {
That was one of the bits that the course didn't explain - what's i++?? I was slightly confused by that
&gt; \&gt; x = ['a', 'b', 'c']; x[true] &gt; undefined &gt; \&gt; x[false] &gt; undefined well... I don't know what I was expecting, but I guess that's the best I could hope for.
You might want to check this out http://www.tizag.com/javascriptT/javascriptfor.php i++; is just shorthand for i = i + 1; so not supprisingly i--; would be the same as i = i - 1; 
oh right I understand now, cheers mate :) 
The code that I see in Javascript is a SWF (flash) plugin detector. The flash code (.SWF) is most likely the culprit. Since it's in binary format, it's not very easy to tell what the flash / actionscript is doing (there are de-compilers out there for it - [here is one with a 10 day trial](http://www.sothink.com/page/swf-decompiler/swf-source-code.htm) ) If you want to see for yourself what this website is doing, couldn't you run a browser on a virtual machine running windows (VMware or others) and see what happens? 
Thanks path411 - I learned something, and am going to file your technique away for future reference. You should also cross-post this to [/r/webdev](http://www.reddit.com/r/webdev), [/r/web_design](http://www.reddit.com/r/web_design) and maybe even [/r/css/](http://www.reddit.com/r/css) (Based on the only other comment) I decided to try to see if I could use without JavaScript enabled a couple of the major websites I use. It seems I can, but sometimes minor functionality was lost (changing the pulldown for sorting on eBay for instance). It would have been nice if they told me I couldn't use their site. 
What's your point with the image? I get that some people don't like significant whitespace, but your examples just manipulate the parser in a way analogous to abusing semicolon insertion in javascript. I have never seen real CS written that crappy and I certainly don't write it like that. &gt; ... the verbosity and complexness only become easier the more you use it. Verbosity never gets easier. I could use javascript for ten years and I still have to type `function(x, y){ return x + y;)` instead of `(x, y) -&gt; x + y` and I will always have to manually bind my lexical scope when writing callbacks/closures instead of using `=&gt;`. You will still write (function(something) { /* some stuff */ })(something); and I will still only write do (something) -&gt; #some stuff In my mind, complexity equates to more bugs, so I continue to prefer a simpler language, especially considering they are strictly equal in power. 
&gt;Verbosity never gets easier. Your understanding of that verbosity does. Ask any Java developer who started with another language first. &gt;What's your point with the image? My point is a mis-placed line-break, comma or space can mean your Coffeescript becomes borked. IMHO, line-breaks, comma/space placement shouldn't break anything in JavaScript. Why bother memorizing where you can/can't/should/shoudn't use *line-breaks* when you could be memorizing the aforementioned verbosity instead? The way I see it, Coffeescript is an unnecessary layer of abstraction. Others will disagree and that is fine.
When semantics are identical, verbosity does nothing but waste developer time. Even developers that like Java bemoan its verbosity, so much so that shorthand lambda functions are coming in Java 8. &gt; My point is a mis-placed line-break, comma or space can mean your Coffeescript becomes borked. That's because whitespace has *meaning* in Coffeescript. For those that are used to it, the rules are intuitive and obvious so forcing the use of manual delimiters is wasteful and ugly. This comes down to personal preference in the end. 
And why exactly do people need to justify their language choices?
&gt;analogous to abusing semicolon insertion in javascript JSLint will tell me if I forgot one. I don't even have to save. There will be a squiggly line right away.
Which is great, but irrelevant. If I wanted I could just as easily extend CSLint to complain about newlines in function applications. Personally, I think the coffeescript parser is a little too lenient with optional parenthesis but that should never be a blocking issue to using the language. 
Brilliant, it works now thanks. I've never used parseFloat before. Does it just turn a string into a numerical value?
Into a floating point number, yes. parseInt() will convert to an integer. Javascript does floating point correctly but some other languages actually see an integer being divided by another integer and return an integer (for example, 20/100 would return 0 instead of 0.2). Due that, I prefer to always parse to float (or divide by a float, for example 20 / 100.0) to force the result to be float.
http://sugarjs.com/native
I needed to dynamically create a background-image for a bunch of elements on a page. I couldn't find anything that could help me do this, so I tried building the pattern in canvas, converting it to a string ("data:image/png...") and then adding CSS like so: #elem { background-image: url(data:image/png;base64......); } into the head and... it worked! Is there a better way to do this already? PS. The plugin is [here](https://github.com/dorey/canvbg). 
For-each loop. in JavaScript, syntactically a for-in loop: for (item in list) { console.log("Oh look, an item:" + item.toString()); } That translates, more or less, to, "for all of the properties belonging to the list -- be that items in an array, or functions which can be invoked with this object/list --- do a little something with them." It can do some strange things if you're not careful. `.forEach()` is an object-oriented phrasing of that. It's a method on Array objects (lists): list.forEach(function(item) { console.log("Oh look, an item:" + item.toString()); }); Because it's specifically on lists, I think it's a bit saner -- but you should check the documentation and play around with it to see what it does for yourself. Got questions on keywords in JavaScript? Google "mdn [keyword]" and the click on the [first result from mozilla](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach). --- edit: wait, do you mean you are learning Java and JavaScript simultaneously, or are you using the wrong name? 'cos [Java ain't JavaScript](http://en.wikipedia.org/wiki/JavaScript#JavaScript_and_Java).
Considering how simple that was, it was actually pretty fun. I killed 300 zombies before checking out dying. I like the art - it's simple and effective. I think it could scale faster or scale geometrically.
You may want to use `sum.toFixed(2)` to output a nicely formatted number, but be careful with that. Some implementations are incorrect, for example: if your calculation somehow ends up with `sum = 0.815`, it may be internally stored as `0.8149999...` but may round to 0.81. 0.8149999 * 100 = 81.499999 rounded = 81 81/100 = 0.81.
I was writing custom bindings in knockout within a day (and yes, I understood why it was necessary to go custom), very easy to "ramp up" on. I can't speak for Backbone, but yes, knockout is great for UIs. You define a "template" for an object and anytime you update the observable array, the UI updates as well.
On thing I have noticed is that you can float in the air just by holding down the space bar. I would also make the bullets travel faster than the character because you can stack them by moving in one direction and pressing space and releasing will one shot multiple zombies. Otherwise quite an awesome game.
I like running forward pressing space bar as fast as i can while shouting Kamehameha and taking out a wave of zombies with one super bullet
I like it. Took two page reloads to get it to work correct though. (chrome) It would spawn two or three zombies then just stop spawning them. After the second page reload it worked. Killed 100 zombies before stopping.
Well right now it doesn't clear it and you have to do it manually ( didn't even think of that. Thanks for reminding me! ) but probably coming up I think just a `ctx.clearRect()` would be my first choice or alternatively you could just draw a rectangle the size of the canvas.
Made a fork that replaces zombies with human beings to make player feel more bad about killing by not de-humanizing the victims. http://codepen.io/anon/pen/hqmbi
Some people like to disable it and then complain when stuff doesn't work. I understand why you might want to disable it, but it's pretty essential nowdays so don't expect developers to make everything twice. Screen reader accessibility is a good point, but you forgot about Facebook bots. Edit: spelling.
you can like fly and land on the zombie's heads! sweet 
Some folks disable Javascript when concerned by their security or privacy. Is your content *essential* enough to your clients in order validate their blindly opening up their browsers to the wide-wide-malwise world? Personally, unless you're my bank and (possibly "or") serving all of your content via HTTPS, I see no reason to grant you that allowance. TL;DR: Please, at the very least, have your site fail gracefully. 
You could do with making it a bit harder, I actually enjoyed it for some reason, but after getting to 800 kills without even getting close to losing a life, I got sorta bored. You could try to spawn mobs about 100px higher than the zombies that fly, to make use of the fact you can jump, otherwise its a bit pointless
This is a terrible stance to take. Your site should be fully functional without javascript, with JS added to make things look better or be more convenient. There should never be any core feature or content that is not available to those without javascript unless your target audience is VERY specific.
Oh right, I have just started learning JavaScript, I thought Java was just a shortening of the word not a different code :/ Cheers for the help mate :) 
You must have read one of my posts somewhere because I've been saying that for years. Smaller companies like mine don't have the personnel to keep everything working when javascript is being used for some functionality. Larger companies do and probably should make the effort. I applaud them for that but the clients I have typically don't always know what they want and change their minds often enough that providing non-js and js functionality is almost impossible. Now after all that I admit that I do think the best of all worlds is for a site to work even if js is off, no matter how rare that happens to be.
Bots Wasn't sure if it had been mentioned yet. 
Uhh, might be a good idea :D
A stellar example and setting the bar high. At the very least rich web applications need a &lt;noscript&gt;, I'm thinking about the developers who use something like ExtJS (single page apps). I would think they'd spend more time on the no JS version than the original unless they cop out and just tell you to enable it. I like the idea of some of those frameworks, bringing more structure to some of the larger enterprise applications but that totally hoses the idea of total functionality without JS.
I'm in Australia, so I'm not familiar with the actual section 508 guidelines, we work specifically off WCAG 2 guidelines, but I'm assuming they are similar... A lot of the problem comes down to the fact screen readers are expensive to update, and it's the older versions that really struggle with JS. The current version of JAWS is not too bad. If you're on a disability pension, chances are you're not going to have the money to upgrade your equipment, and we see a lot of disabled users who are using absolutely ancient versions of screen readers. So you're right in that improving screen readers would reduce the problem, but the problem of affordability and distribution of the updated product would remain. I'm not against JS, not in any way in the slightest, and when it's used well it can really actually improve the accessibility of a site. Nowhere in the WCAG guidelines does it say to NOT use JS on a website. However if you do use technology in a way that is inherently inaccessible, ensure there is an accessible alternative. In my humble opinion, the real problem is this developer mentality that 'accessibility is too hard', and people seem to latch on to ideas and run with them. Accessibility can improve usability, mobile optimization and it allows that fundamental right to information, it's a shame it is just so often thrown in the 'too hard' basket.
I just don't think that is the case anymore for certain classes of sites. They aren't websites at all, but rather full fledged apps written in JS and served over http. As an extremely obvious example: games.
&gt; Those who disable it or use a script blocker can figure it. We like to think of it as "Leave your site and never return", but y'know, whatever... 
If you tap the arrow key and the space bar at just the right rate it makes a super long zombie destroying bullet....Awesome...
As an economic decision, that's often ok. I used to work for an agency and the reality is that the number of people with JS disabled is so small that it would have cost more to cater to them that the value of their custom. Professional pride meant that in reality we always tried to have everything degrade gracefully - but this was *not* a business decision.
awesome, I will try these out. thanks!
&gt; Most people using assistive technologies, such as screen readers. That's actually not the case anymore. Bad JS can still cause problems for assistive tech, but most screenreaders have JS enabled now. &gt; Just as a datapoint, The WebAIM survey results (published yesterday) reveal 98.6% of screenreader users have javascript enabled. http://paulirish.com/2012/accessibility-and-developers/
I use the web all the time from the Linux command line with a program called lynx. Not only does it not have javascript, it doesn't even have images! Put your content at the top of your HTML for god sakes. I usually have to page through a bunch of navigation links and junk before I get to the text content I'm looking for. Why do I do this? Two reasons mainly, both having to do with finding answers to computer problems or challenges. A. My Nvidia graphics driver is out of sync with my Debian kernel or Xorg otherwise shits the bed and I have only command line access to the web. B. I'm ssh'd to remote computer and I need to locate and download a large file from the web. So, there's some real-world use cases of JS-less, and image-less browsing.
Also, check out the [screen reader user survey](http://webaim.org/projects/screenreadersurvey4/) that [kmillns linked](http://www.reddit.com/r/javascript/comments/xnrug/whats_a_scenario_when_somebody_on_the_web_isnt/c5o403d).
Like I said, those who use script blockers can figure out why a site isn't working and whitelist it, or go somewhere else. People that use script blockers know what they are doing and why things don't work. Those 2 million people are a fraction of a percentage of web surfers worldwide. Like it or not they are "almost nobody" and they know the consequences of surfing without JS.
Backbone would force him to write boatloads of glue code. Angular/Ember/Knockout though provide much more. 
I use Opera and run with JS and all plug-ins disabled. Then I per-site (domain) enable it by right clicking, selecting "Site Preferences" and "Enable JavaScript". The process takes about two seconds and there are perhaps ten or so domains I allow scripting and four or five where I allow plug-ins. (Like Youtube and TED) I know how to enable it, but I also know when it's needed. If you say, use JavaScript to unhide/create navigation links on your site not visible when not using JavaScript then I'll just won't visit your site.
&gt; What kind of blame is this? The type that makes economic sense. If I develop a application, I want to provide the best experience possible for the majority of users. That usually means using JavaScript and Ajax. If I want my site to be usable by visitors with JS disabled, I have to make a basic HTML alternative for everything that uses JS. Most developers don't support the insignificant minority of IE6 users. Why would I waste time trying support an equally insignificant minority of users who deliberately go out of their way to disable JS? &gt; That is pure laziness, and the opposite of what a developer's job is. ~~You clearly know very little about what a developer's job is.~~ Edit: Sorry, I'm going to take that back.. no need to get personal. I just don't appreciate being called lazy.
Thanks for taking a look. I fully intend to keep at simple while giving it tons of features and versatility.
Thanks!
Actually, 2% is only in the US, globally it's about 1%. [source](http://developer.yahoo.com/blogs/ydn/posts/2010/10/how-many-users-have-javascript-disabled/)
Yes, but that 2% isn't all people running an addon or intentionally disabling js by other means. There are the greybeards running text only browsers(who cares, they probably don't want to use our site anyway) and people on mobile devices(we have mobile sites for that). 
Is this a challenge for people learning JavaScript (like a series of learn-JavaScript-through-interactive-means) or is this a thing they are doing for all their readers? Because this sounds insanely simple of a challenge.
Pretty slick looking. Your code is extremely well formatted. I did notice your create canvas function accepts an "element" arg that you don't seem to do anything with. I'm hoping this will eventually be the element the canvas appends too. Yes? More thoughts as I get more time. 
&gt; Not having a non-JS alternative will also hurt your SEO [Not it wont.](http://googlewebmastercentral.blogspot.fr/2011/11/get-post-and-safely-surfacing-more-of.html)
I developed a service where event organisers can create events, and visitors can buy tickets. It's javascript-heavy, and I just invested time to make sure that visitors can buy tickets even when they don't have javascript. The organiser-backend does not degrade gracefully, but shows a warning message to use a javascript-compatible browser. The system is used by 15 organisers and thousands of visitors, so I think it's a fair choice.
Unfortunately, I'm new enough to all of this that nothing you said made much sense :X Sorry, but thanks for the reply!
Fixed now :D Sorry D:
Float in the air should be fixed now. And bullets are flying twice as fast as you now :D
Should be fixed now &gt;:D
You changed the projectile's travel speed, but not the maximum firing rate. With my Razer mouse, I can still fire globs of 100 bullets per second in succession &gt;:D&gt;:D
Yea I was thinking you could either create a canvas element yourself and pass it to the function or just have head-on make it for you. I think when I was making it something technical came up and I forgot to add in the other part! (oops!) thanks for reminding me that will be fixed in the next update!
Do you mean [Bitwise Operators](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators) or something else?
JavaScript already has bitwise operations. You can even do things you would usually see in C like this: var N_ACTIVE = 1; var N_DISABLED = 2; var N_MULTIPLE = 4; var options = N_ACTIVE | N_DISABLED; /* 3 */ if (options &amp; N_ACTIVE) { /* true */ } if (options &amp; N_MULTIPLE) { /* false */ }
You could try using [Galleriffic](http://www.twospy.com/galleriffic/). Download and take a look at the demos, you might find something suitable.
At least the first line he said means to format your post as code. Edit your post and add four spaces to the beginning of every code line. Suddenly your code will look like this and will be easier to read!
What's missing in terms of bitwise operators?
He forgot base64, which packs even better than base36. And as the 140byt.es contest shows, that's even doable without wasting too much bytes. Oh, most modern browsers already implement atob/btoa, but there are some old stupid browser replacements from redmond still in use...
This is terribly bad code to read without formatting. What stands out is the single forward slash. If you're commenting a line you'll need to use // or surround with /* */
&gt; since window.history is interpreted as a truthy value which then permits the second argument to the ampersand operator to be returned Thats where I got lost, I had it in my head that the &amp;&amp; would make the return value already truthy, I guess I need to study JavaScript more.
Oh yeah, GD! What would you say is a good limit?
They don't all use JavaScript. The more pressure there is on Facebook to clean up their act and weed out bots, the more bots will be using javascript to avoid detection.
for our benefit, better formatting: var fullName = ""; var name; var firstLetter; /* fixName function definition should go here. */ var fixName = function () { firstLetter = name.substring(0, 1); name = firstLetter.toUpperCase() + name.substring(1); fullName = fullName + " " + name; }; name = prompt("Enter your first name (all in lower case):"); fixName(); name = prompt("Enter your second name (all in lower case):"); fixName(); console.log("And your full name is:" + fullName); res&gt; post source&gt; wrap it in a function() { ... }, copy-paste into a js beautifier, walla. i should just program that shit as an RES plugin or summat .
Because the operator returns it's second argument.
 &gt;&gt;&gt; Math.noSuchThing &amp;&amp; Math.noSuchThing undefined &gt;&gt;&gt; Math.sin &amp;&amp; Math.noSuchThing undefined &gt;&gt;&gt; Math.noSuchThing &amp;&amp; Math.cos undefined &gt;&gt;&gt; Math.sin &amp;&amp; Math.cos cos() &gt;&gt;&gt; !!(Math.sin &amp;&amp; Math.cos) true
Thanks for being helpful and polite lol
Are you freelancing with it? Any sample projects to show?
Interesting. Thanks!
Cool. I like that you won't have to use a head-on created canvas. Very considerate of you. Have you given any thoughts to assigning attributes to head-on created canvases?
Tl;dr: casts to boolean
Apologies for my ignorance. In a year and a half of reading blogs, posts, books, and watching videos about JavaScript, not once have I ever encountered anything to suggest that it had built-in binary ops and functions, especially for so long.
What sort of attributes would you want?
 var i = s.indexOf('thumb'); if (i &gt; -1) { return s.slice(0, i) + 'large' + s.slice(i + 5); } return s;
Sorry but what do I do with that? I'm clueless! I tried just placing it inside my script tags but it didn't work.
There's another case where `!!` or equivalent code makes a big difference. Suppose you have a function that tells you whether a certain object exists at a given point in time. You can just return the object or `null`/`undefined` if the object does not exist, and that will be a perfectly good truthy/falsy result. However, the caller of your function is now holding a reference to your object! This will prevent the object from being garbage collected. But instead of using: return theObject; you use: return !! theObject; Now the caller will not hold a reference to the object and will not prevent it from being garbage collected.