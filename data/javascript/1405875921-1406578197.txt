Thank you :) It was a personal choice to create a small/light prototype. A skybox is a set of 6 images of the same size, and I didn't want to have 6 big images (need more time to download). It has no effect at all on the game performances.
Thanks for great explanation
What do you mean pure javascript? The language compiles to pure javascript and it requires a small runtime for the reactive implementation. If you mean making normal javascript functions reactive, I could parse and do that easily for some subsets of javascript. Keep in mind that you can't make arbitrary imperative code reactive. Some constructs are fine, like for ( key in object ) since that is declarative. Any variable reassignments are out though, and so are most other for loops. My language uses indentation for structure, but other than that is a s close to harmony/ES6 standards as reasonable (while optimized for concise dependent structure definitions). 
Thanks for pointing out my mistakes, updated that section. Yeah ~~ and Math.floor() are neck-to-neck but still technically faster. And correct, like you said it would be bad practice to use anything other than a number!
I don't understand your point : it is possible to create classes in javascript. And for complex games, did you try this one : http://race.assassinscreedpirates.com/ ? Don't tell me it is not a complex game:) 
Probably because Ubisoft teamed up with Microsoft to create the WebGL game...
The chrome debug console is the best one ;)
It's my preferred. And speaking of, this past Friday i showed my boss a tool i have been tasked to build with and it blew up in IE11. Not on machine or my dev server though. Chrome it works everywhere. I didnt have chance yet to find out why yet but fuck IE. I dont have these issues with other browsers.
Especially since an optimizer will make that change for you if it's a proven speedup with no side effects.
I worked 3 years on a webapp with IE6 support... I know what you're talking about :)
Great question. JS works purely in the browser so that unless you use one of the awesome APIs, all of the data you need has to be in a specific file in your project. Not in the same document but usually in a .json or .xml file. PHP does a lot of what JS does but on the server. I think of it as a way of doing the laborious tasks outside the browser, which makes your project burn fewer resources on the users machine. I'm kind of a noob too but I learned MySQL and PHP before JS so I use PHP where I might be able get by as well with JS. MySQL is a standard database package that uses the Structured Query Language to retrieve data. A database is especially useful when you have tens of thousands or even millions of lines of data. It's a really, really simple way of defining which records you want the server to send to the browser, and since only the data that will be displayed in your project gets into the browser, your project is way smaller and efficient than keeping all that data in .json / .xml files in the browser. I find that the query language is much simpler to write than doing it in JS. Now the elephant in the room here is the server. I'd suggest a cheapo hosting plan. I use inmotionhosting.com and even the &lt; $10/mo plans let you do everything I've described - including a couple of free MySQL databases. It's very easy to load data from a .csv file (Excel output) into a db. If you get some good data in a csv file (or even space or tab delimiter txt file) try messing around with a free package called MySQL Workbench. The cheapo hosting services will allow you to access the db via it. But keep in mind a database won't be useful until you have data to put in it. Anyhow, hope that helps.
If anyone is interested, the most recent episode of hanselminutes was about Babylon.js: http://www.hanselminutes.com/432/learning-webgl-and-making-3d-html-games-with-david-catuhe-and-babylonjs
Sequel Pro for MySQL. Codekit (paid but awesome). Gitbox for GIT (although I've recently switched to Tower 2 as a beta tester, Tower is a little pricey) ITerm running a "tail -f" watching your php error log. Just a few daily apps I use.
It's a strange issue, a lot of people have dubbed the article "nonsense" and "wtf", yet it's just looking up object keys for values, the main thing JavaScript does... Interestingly enough, the post has had better response since I added key/value examples with strings, then broke down into functions. The main issue (I feel and have seen this before) is the examples being TOO simple - people cannot envision anything past the post in their own development and take the examples too literal and basic and treat the EXAMPLES as "nonsense" because what they show is very basic and unnecessary. If you're a programmer, you can envision how techniques can really help your workflow, when I first started seeing people talk about this I thought it was genius and jumped on it. After refining it and creating my own way, I posted about it. Drop me a tweet (@toddmotto) when your post is up, would love to read it.
It's also a lot like jQuery.
On mobile when I scroll the top nav bar gets crazy. I'm assuming javascript is being used to position it instead of position:fixed CSS, but to be fair I haven't looked at the source 
For your #2, There's this [jsperf](http://jsperf.com/coercion-vs-casting/3), which I ran just now - interestingly Chrome 34 shows the Math.floor(parseInt()) to be extremely slow, while Firefox 30 finds the ~~ to be the worst. This isn't quite the same comparison because it's parsing from a String, not an int, but it's interesting. Regardless, there's really no use for ~~ these days, since if you do want to truncate (not floor), your number can be represented in 32 bits, and you care a lot about perf, `&gt;&gt; 0` is always better. The AirBnB JavaScript style guide gives a really good run-down of which is most appropriate to use: https://github.com/airbnb/javascript#type-casting--coercion Math.floor() is a true floor (so works as expected for negative numbers), and can handle 64-bit numbers, so you'll get more predictable results than `&gt;&gt; 0`, and either is always preferable to ~~.
This sounds like homework, mostly because it sounds completely useless. If you want to generate a hash then just use SHA256. Considering that A = 5, B = 10, C = 2, then there's no pattern and you'll need a datastructure like, var mapping = {A:5,B:10,C:2} And then you'd iterate through your string, extracting substrings as keys into that `mapping` structure (potentially using toUpperCase()), and you'd total it as you go. Spliting to an array first gives you nothing so avoid that step. 
Lolz,.., i cannot think of anything usefull that this can be used for, I mean you can always call: [].forEach.call(arguments, function() { /* ... */ }); I guess that you learned something doing this. 
Although your code is nice, I don't think it's very performant to split, loop an array and then loop an array again, when it could all be done in one loop. var sumOfChars = function () { // Dict pattern: http://speakingjs.com/es5/ch17.html#dict_pattern var dict = Object.create(null); dict['a'] = 5; dict['b'] = 10; dict['c'] = 2; // ... dict['z'] = 21; return function (str) { var i = str.length, sum = 0; while (i--) { sum += dict[str.charAt(i).toLowerCase()] || 0; } return sum; }; }(); while terminates at i = 0.
Hmm, weird talking about best practices and not mention node's pattern `callback(err[, argN])`. Where `err === null` if no error occurred. 
&gt; Chrome 34 shows the Math.floor(parseInt()) to be extremely slow Relatively speaking. It still happens in nano-second time.
Sometimes it does matter: http://stackoverflow.com/a/1340634/1243162 But for this case, you are right, a simple for would work too.
Scored 32000 something. Please stop reminding me how old machine is. Wonder why it performs so poorly though. Watched it in process explorer and it did a lot of waiting. edit: Waiting without using any CPU cycles, all 4 cores were pretty silent a few times.
What browser are you using? On all the machines I tried it on, one core was consistently pegged on 100% for the duration of the benchmark, as it should be.
Microseconds, actually - the Math.floor would take approx 25000 nanoseconds, but yeah it's unlikely that's going to contribute significantly. Realistically fetching from whatever array or data structure contains those strings and using the results would cost significantly more. I could see this _maybe_ helping if you're trying to take an average of a large set of string-literal numbers or something like that, but even then it's doubtful. I agree with the AirBNB guys' conclusion: don't ever bother with `&gt;&gt; 0` up-front, only ever use it if you actually do identify Math.floor(parseInt()) as a bottleneck, and if you do make sure to comment what it does and why you need it.
Fully updated chrome. Full details. Chrome Version 36.0.1985.125 m W7 64bit. Phenom 5560 OC to 3.6 4870 ATI Going to turn off Hardware accel and see if that changes anything. No change 32682 Same effect CPU wise, I see very brief 100% spikes on the main core, other cores briefly get some use but very little.
When you put them all in one file, the browser can load all the files at once, instead of having to have a full round trip from the browser to the server for every file. It can make a large impact on page load time. This, along with minifying files is a good practice for production websites. Also, you should put almost all scripts at the end of your body tag, so that content can load first. Script tags block the rendering of the page until they are executed, so it has a huge impact on the perceived load time of your page.
In general it's good practice to put different functions/modules into separate files, so that you can organize different logical pieces of your application. However it's also good practice to compile them all into one "production" file so that your application only needs to make one request to get everything it needs. The JS task runners that have emerged recently like [Grunt](http://gruntjs.com/) and [Gulp](http://gulpjs.com/) are perfect for this job.
&gt; Also, you should put almost all scripts at the end of your body tag Is this always the case? What about stuff that would affect the page design? Wouldn't that cause page elements to load and flicker/jump once the Javascript is called?
For minimizing the overall page load + render time, absolutely put them in the footer so they don't block loading any other resource referenced in the DOM. You're right to be concerned about flicker/jump (what's collectively called 'jank', I'm told), but lowering your whole page load time by putting the scripts in the header is the wrong way to do this. This is typically something better handled in your CSS, and should be thought of as part of doing your overall page layout.
&gt; The main issue (I feel and have seen this before) is the examples being TOO simple - people cannot envision anything past the post in their own development and take the examples too literal and basic and treat the EXAMPLES as "nonsense" because what they show is very basic and unnecessary. I used to struggle with this, but now I just nod knowingly when I get that feedback. The fact is, you can only teach one thing at a time. You can teach why the switch statement is a problem in one paragraph, then explain how performing object literal lookups of functions can replace a `switch`. When explaining the mechanism of the object literal, you need an example that is so simple that the mechanism is clear. When it gets that simple, it will always appear ridiculous. And if you make it real-world enough to seem worthwhile, many people will have trouble following your heavyweight example. In the end, I choose to trust that a certain number of readers will trust that you're writing the post in earnest and not trying to troll them, and will understand that an example many seem very simple, but will suspend disbelief for a moment and will learn the pattern. Then, maybe immediately, maybe later, they will feel a little "click" and say to themselves "That would really help me with _____." Many others will say to themselves, "Interesting," but never click. And some small number will not click and will actively scoff. I really think such people are not worth your concern. For whatever reason, they read something, realize an intelligent person thinks it's a good idea, it doesn't click with them right away, and they immediately pen a comment or even a blog post about why you're trying to undermine Western Civilization. I say, let them go their own way. It's like triage in the emergency room: Ignore the people who will learn these ideas on their own, they don't need you. Ignore the people who will resist these ideas, you have no chance of helping them. Focus your writing on the middle third of the people who can actually be swayed by a well-written article that doesn't assume they are already sold, and isn;t trying to defend against every possible criticism.
FWIW, I consider hand-written dictionary lookups to be an intermediate step. When I see this pattern, I ask, "If this were an object-object instead of an inline dictionary, what would it model? Is this a strategy? Is this a state machine? Should these be methods instead of lookups?" Usually, the answer is "no, it's fine." But sometimes, I realize that botha switch and an object literal are hiding the presence of an entity of some kind that deserves first-class status.
It is a MS technology.
Is there a link you recommend?
You could still do it in one loop, with `reduce`: return str.split('').reduce(function(acc, a) { return acc + chars[a.toLowerCase()]||0 },0)
I'm on mobile so I can't really try out your code but is there any reason why you couldn't use something like gridster? We're using an angular port to arrange widgets on a grid.
Thank you! I'll try this!
JavaScript changes to the DOM are blocking (synchronous), so they should be happening as soon as you execute the code above. It sounds like your code is running to completion too fast - verify this with timestamped console.logs on each of your DOM modifications.
He's using bit wise css
Can I please have this JavaScript file? Cheers. Now can I please have this JavaScript file? Cheers. Now can I please have this JavaScript file? Cheers. Now can I please have this JavaScript file? Cheers. Now can I please have this JavaScript file? Cheers. Now can I please have this JavaScript file? Cheers. Now can I please have this JavaScript file? Cheers. Now can I please have this JavaScript file? Cheers. **VS** Can I please have this JavaScript file? Cheers. 
ABC = Always Be Coding Why don't you try having a self challenge on Github or a week or two where you create something new every two days? It's a nice way to fill up your portfolio as well as practice. I have a 'experiments' repo on github where I practice new things! 
What browser is your phone using?
When using requirejs it's nice to setup AMD modules as separate minified js files. Requirejs asynchronously downloads these files which can be faster than one large js file. Requirejs then caches them so if you need a module later on another page it can be quickly obtained. If 5 modules require jquery, requirejs will only download it once. Once you have mastered requirejs move onto requirejs AMD modules. read more here: http://requirejs.org/docs/whyamd.html 
http://gulpjs.com/
I'm glad I don't have to work with people like this. ;-)
Dang, were you lazy loading files as needed before or they were all listed in the header?
[grunt-contrib-concat](https://github.com/gruntjs/grunt-contrib-concat) [gulp-concat](https://www.npmjs.org/package/gulp-concat)
This is really neat! I like how clean the code is. I was skeptical at first but then the troubleshooting example was the perfect use case! I saw myself using it.
This is really cool! I've totally had this problem before, and this is an awesome solution.
Wouldn't you want to pass in the dict? Just means you can change the mapping without modifying the function.
It's even worse than that: &gt; Can I please have this JavaScript file? Cheers. &gt; Now can I please have this JavaScript file? Cheers. &gt; Now can I please have this JavaScript file? Cheers. &gt; Now can I please have this JavaScript file? Cheers. &gt; Now can I please have this JavaScript file? Cheers. &gt; Now can I please have this JavaScript file? Cheers. &gt; ...... now can I please have this JavaScript file? Cheers. &gt; ...... now can I please have this JavaScript file? Cheers. 
AMD is too much hassle if the only thing that OP needs is concatenation
You're right, and it will be the subject of my next tutorial :)
True, but what if you have some function that takes as its argument, an object with a `forEach` method? In general, it's a very nice thing if all of your collections have a consistent interface, it cuts down on having two kinds of code. That being said... Mungling with the prototypes of baked-in objects is always going to lead to tears. Just maybe not your tears, but the person who takes over your code.
This is True. I just thought id mention AMD Modules for the more curious javascripter.
discuss on [echojs](http://www.echojs.com/news/10769)
Is this a parody? My sarcasm detector is fucked at the moment [8]
Competent engineers who want to do their job as well as possible? Yeah, screw those guys.
Maven and Ant also have task plugins for JS concatenation.
For having separate modules in development and bundling them together into a single file, check out [browserify](https://github.com/substack/node-browserify) or [webpack](http://webpack.github.io/). Once you get used to the workflow, you'll never want to go back. Forget about bower and AMD. NPM + CommonJS is definitely the best way to write modern client-side JS.
You can save yourself changing the file name each release by just adding a GET parameter it's URL and changing that (like src="/js/all.js?r=19994").
Try [this talk on promises](http://www.youtube.com/watch?v=hf1T_AONQJU)
Yeah hes pretty cool thanks ;)
Misleading title, it's a DSL for writing "choose your own adventure" stories. Pretty nice though :)
Ah nice :) YES!!! How did I inspire you to use wildcards :D ? Well im not complaining either way :) Good luck with doing that!
Yeah FlickSurfer seems to work pretty well. Not a bad first project for him then!! I do remember commenting on your post about a week ago about Band.js :) I cant remember, is there any way to say define instruments and then import them or anything yet ?
Yup, you can create your own and use them. Have a look at the documentation ☺.
It is recommended to use a unique file name rather than a query string parameter in order to leverage proxy caches. Source: [https://developers.google.com/speed/docs/best-practices/caching#LeverageProxyCaching](https://developers.google.com/speed/docs/best-practices/caching#LeverageProxyCaching)
Indeed, everyone is different. I think a lot of people think all I'm advocating is using a String value to return using an Object, which I whole heartedly agree is a bit "overkill" if you're *just* doing that. It's the concept I'm showing with some basic data, if you can't envision how to use it - simply dont :D
I guess this is the similar route I would like to go too. Anything that would involve R&amp;D. I know London is offering +£50k for senior frontend dev brackets which is slowly catching up with s/w devs.
UK: +£31,866 = 40% Income Tax :(
RequireJS is good in theory but, it fails so much in real life. - Asynchronously or not, downloading multiple files sucks. In a scenario where page 1 requires module A, that requires module B, that requires module C, requirejs will load A.. parse, then load B, parse... then load C. In a complex page, this becomes a loading nightmare, especially for mobile users. - You can group them using r.js, but you have to drastically change your configs and require layout. If you use jQuery/shims and multipage/common, and didn't think about this beforehand, be prepared to change the way you require files drastically. I'm using requirejs at the moment and still cringe at my decision. If I could do a makeover, I'd go with webpack anyday. 
*barfs
As in https://github.com/webpack/webpack
To avoid renaming the files for every update you can use something like this (from [H5BP](http://html5boilerplate.com/)) to return `/css/style.css` when `/css/style.12345.css` is requested: &lt;IfModule mod_rewrite.c&gt; RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.+)\.(\d+)\.(css|cur|gif|ico|jpe?g|js|png|svgz?|webp)$ $1.$3 [L] &lt;/IfModule&gt; 
Is there any advantage to using the separate concat task when grunt-contrib-uglify accepts configurations like uglify: { foo: { files: { 'foo.min.js': ['foo/*.js'] } } } ?
ooooh cool. I saw that you made an issue at some point about making a website for band.js which lets you use it and create music. Would be pretty cool. Is that planned or still in the works?
Each call has an overhead and a roundtrip time. On the other hand, if you can load something later, that might actually improve your performance. So the answer is: test it and choose whatever works better.
There's another aspect to this - evaluating huge files of concatenated JavaScript causes noticable UI hangs in older IEs. Not so much a concern in modern browsers, but I personally aim for 4-5 major JS bundles in a large application. I like to put all commonly used third party libraries in one bundle, as they do not change very often and so can remain cached between product updates.
Pretty cool man. Good job.
Interesting project, but the title is on this post is totally useless.
Sounds nicely crafted and simplistic in concept. This is cool
Neat, Daniel Stern made this?!? I can use real Dilbert code?!?
they were all in the header. There's a lot of garbage in this application. Luckily it's almost 100% internal, with only about 30 online users at peak hours.
Thanks, was hoping to get past "Revolutionary" without reading unnecessarily.
I'd really recommend this tutorial on page load optimisation.... http://www.youtube.com/watch?v=R8W_6xWphtw I saw it recently... It's great stuff. Everything from the anatomy of a request to TCP slow start. Very informative and practical, and explained very well!
Chrome
Reminded me of the [Choosatron](http://choosatron.com/)
Grunt concat, grunt filerev 
Wait, so you got a job solely out of knowing Angular? Angular === new jQuery
Then who cares how fast it loads!
+1 You can always optimize and swap out parts later, but you can't exactly swap out docs, community, etc..
I'm thinking of doing that by adding a `filter` method that allows you to return `true` for disabled dates (when rendering the calendar), and a `validate` method that allows you to say that a date is valid or not beyond the `min` and `max` settings. For example `rome(input, { filter: function (d) { return d.day() === 0 } })`, would disable all sundays.
So it was compatibility mode which is why my app wasnt working. IE is a pain.
Your own ignorance of bitwise operations does not equate to bitwise operations causing buggy code. Bitwise operations are an essential component to many encryption and compression schemes and in a lot of situations can create performance boosts that are simply impossible any other way. Mocking the technique makes you look like an idiot.
- How does it suck? You have direct access to the files as they were written and not mucked by SourceMap nonsense. The pattern you just described is exactly how dependencies should be handled, so I don't get what this means. Loading nightmare exactly how? (Use a build step!) - You can easily share the development configuration with the production build profile. You don't have to change anything about your structure. R.js should be rewritten with saner configuration options IMO. Webpack has its fair share of weird configuration as well.
You won't get any front end dev job these days without having a decent knowledge of at least one framework, and a working understanding of the other big ones.
Interesting. When I was choosing a test framework, I picked Jasmine as it seemed to be the most widely used. I haven't had any issues with it, but I have heard good things about Mocha + Chai, so maybe I'll check those out on the next project.
how does one get a job without a college degree?
These days I see more mocha + chai + Sinon projects than anything. Whenever I see a project using Jasmine, especially new projects (I'm looking at you, [Atom](https://atom.io/)), I head-desk because the Jasmine developers really don't understand the JavaScript ecosystem at all. Callbacks made it better (`runs`, `waitsFor`, `runs` is complete bullshit), but the lack of nodeback and promise support as well as previously displayed arrogance makes be stay away from them.
Well if you want a job in tech, I don't think you need a college degree. I'm actually working on one in a completely unrelated field!
really!!! how you manage to do that if you don't mind me asking.
What? Are you serious? You were told that a college degree is necessary to get a good job?
Completely inaccessible with the keyboard.
Have been using this for many years. It's an interesting building block. It's a great way to set up relationships between things in a "declarative" way as well. It's sad to see so many negative comments.
That does seem reasonable. var sumOfChars = function (dict) { return function (str) { var i = str.length, sum = 0; while (i--) { sum += dict[str.charAt(i).toLowerCase()] || 0; } return sum; }; }(); var dict = Object.create(null); dict['a'] = 5; dict['b'] = 10; dict['c'] = 2; // ... dict['z'] = 21; var sumFn = sumOfChars(dict); sumFn('foobar');
I answered a StackOverflow question on this topic: https://stackoverflow.com/questions/12232848/when-to-use-requirejs-and-when-to-use-bundled-javascript/12232921#12232921 This is a hotly contested issue among many proficient javascript developers. Many other languages have a "compilation" phase where the entire program is bundled up for deployment (JBoss's .WAR files come to mind). Programmers that come from more traditional backgrounds often favor this approach. Javascript has seen such growth in recent years that it is difficult to chart exact best practices, but those that appreciate the more functional nature of Javascript often prefer the module loading approach (like require.js uses). I wrote Frame.js which works much like require.js, so my bias is towards the module loader approach. To answer your question directly, yes, it is one or the other. Most that argue for packing your scripts into a single file believe it enables more compression and is thus more efficient. I believe the efficiency advantages of packaging are negligible in most cases because: (1) module load times are distributed over the entire session, (2) individual modules can be compressed to nearly the same percentage, (3) individual modules can be cached by the server and routers separately, and (4) loading scripts only when they are needed ultimately allows you load less code for some users and more code overall. In the long run, if you can see an advantage to dynamic script loading use it. If not, bundle your scripts into a single file.
Just happened to me to0. I did some toy projects in Angular and then got a sweet contract job that had Angular mandated as the framework. Angular is not the new jQuery, but it is the framework that everyone is raving about (jQuery is not a framework).
Just because few users use an application, doesn't mean performance doesn't matter. What if those 30 users do business critical stuff that rely on reloading the page a lot? 
I've read that best practice is to persist the model inside a provider/factory. That way, any controller that injects this provider as a dependency can mutate the model and the changes will be reflected everywhere else. 
I meant Angular will be the new hotness that newcomers will learn, and then forget other options exist
so how don't I get experience?
Or [grunt-requirejs](https://github.com/asciidisco/grunt-requirejs) if you're using requirejs!
https://github.com/jmcunningham/AngularJS-Learning
It's definitely not a best practice to always be placing your model on $scope. If you take a look at all the "private" $$ methods on $scope you'll see that it handles quite a bit. The larger your $scope is the more overhead you'll bring into your app.
I just started creating a website that would be acting as my portfolio and I don't have any projects in mind to start doing beside the actual site itself.
Give 1. Concat libraries 3. RequireJS 4. [component](https://github.com/component/component) etc a try - they're all built to help you include once in the HTML and load multiple files via build/coding steps. Component is my favorite and I use it at work.
I don't believe the best practise is to put the model inside a provider/factory, even though some recommend that.
[The G](https://github.com/rhysbrettbowen/G-closure) is a jQuery-like interface for the [Closure library](https://developers.google.com/closure/library/)
why not? (I guess we've just proven /u/sehrman's point then XD) 
I explained my reasoning in a reply to sehrman.
There's a medical device called a Dexcom G4. Chromadex gets you the data stored on it. 
I didn't see [ExtJS](http://www.sencha.com/products/extjs/) mentioned.
I feel once i learn javascript that should be easy.
Learn to use github. * Todo List * Picture Slideshow * Polling Application have fun
3 completely different replies to this question, lol
$scope inheritance leads to very messy code quickly, and because it's tied to the DOM, it only really makes sense to inherit properties where the scopes are intentionally coupled (ie, inside directive controllers). Services absolutely *should* be used for storing data across controllers. The only purpose of $scope is to bind that data to the DOM (which is exactly the purpose of a controller!). So ideally your controller shouldn't have any methods or properties not bound to the scope. It's only bad practice to use services and factories *solely* for storing data. But if you have skinny controllers, your services will be fat by necessity.
Most debugger tools have build in [conditional debugging](https://www.google.com/search?q=javascript+conditional+debugging)
You can also do that. The point of the post is to show monkey patching a function to be able to trigger a breakpoint
Uglify is great for minifying &amp; beautifying, but it doesn't have an option (that I know of) to simply concat scripts. I usually process individual scripts w/uglify (foo.min.js, bar.min.js, etc) then concat these to script.js
If you use services for storing data, then there's no automatic data-binding. I agree that scope inheritance can be messy, but I'm not convinced storing the data in services is the way to go. It seems to add a lot of boilerplate code. I'm on the fence about this.
Haha, you and me again! &gt; The pattern you just described is exactly how dependencies should be handled It does and its fine in theory, just not in practice. If you write things in modules where a file does 1 small thing, you'll end up having to load crazy amount of files asynchronously. There should be as less requests as possible in the browser world.. so yeah, you'll end up with a build process. My problem with RequireJS is that it fools you and basically say, nope, you don't need one: http://requirejs.org/docs/whyamd.html#amd (From the site) &gt; It works better in the browser, it has the least amount of gotchas. Other approaches have problems with debugging, cross-domain/CDN usage, file:// usage and the need for server-specific tooling. And a little bit more, after, &gt; There are also hidden costs with the CommonJS format: &gt; - the tooling dependency cost &gt; - edge cases that break in browsers, like cross domain access &gt; - worse debugging, a cost that continues to add up over time &gt; AMD modules require less tooling, there are fewer edge case issues, and better debugging support. But, as we see, its the same thing in the AMD world. You do end up with trying the mess that is R.js, edge cases, and crappy debugging. I guess I'm bitter cause I feel cheated. I got sold on the idea and had to do a lot of maneuvers when I did the build process at the end. &gt; You can easily share the development configuration with the production build profile. You don't have to change anything about your structure. https://github.com/requirejs/example-jquery-cdn https://github.com/requirejs/example-jquery-shim https://github.com/requirejs/example-multipage https://github.com/requirejs/example-multipage-shim
Am I the only one who things writing React views in plain JS with the `React.DOM.div({}, ...)` syntax is OK?
Because it coerces the value to a number, and for whatever reason null coerces to 0. You can observe this behavior with the unary operator `+`. +null === 0
plot twist: in one of my late night coding fits I had structured the command matching fuction to use regexp's, so wildcards for free! As to your question: I thought they were sorely lacking in the codebase. On the up side this gave me time to fiddle with some conf and lay down the framework for some features I have been meaning to add! Now I just have to update the readme, and commit my changes.
A more generalized answer... _How Browsers Work: Behind the scenes of modern web browsers_ (by Tali Garsiel and Paul Irish) * on [taligarsiel.com](http://taligarsiel.com/Projects/howbrowserswork1.htm) * on [html5rocks.com](http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/) * on [Vimeo (video format)](http://vimeo.com/44182484)
Meh, then just pass in Array.prototype.slice.call(arguments).
I think this comes from C++ where NULL==0
Amateurs. Just console.log a few hundred places and its bound to turn up. Bonus points for checking in your log calls to master. /s
I tried it at first, but I found the code too confusing to look at. I didn't like the idea of JSX at first but after using it, I see its value. 
Don't get me wrong, it is somewhat appropriate to call this an example of mapReduce, but it is also an appropriate example of when not to use map reduce. The map step is completely unnecessary. Usually in the large scale mapReduce world, the map step filters, sorts and outputs key value pairs. Sure you can split the string, but even then it won't be as fast as: http://www.reddit.com/r/javascript/comments/2b8rqq/how_do_i_take_a_string_and_assign_a_numeric_value/cj2wf0i
You could use [jqueryUI's accordion](http://jqueryui.com/accordion/) or [bootstrap's](http://getbootstrap.com/javascript/#collapse) if you want to go the easy route.
Agreed, I never formally learned jQuery, just vanilla JS.
Good for you and congratulations!
Vanilla Javascript is all the range these days.
Agreed, you need to get your first break, which is luck (and some skill)!
At 1-minute the timer shows 0:00 then jumps to 1:01.
&gt; If the data needs to be accessible pretty much everywhere, it can be put to $rootScope, which is the "official" recommendation in the AngularJS documentation. Can you point us to the source for that?
&gt;Occasionally there are pieces of data that you want to make global to the whole app. For these, you can inject $rootScope and set values on it like any other scope. Since the scopes inherit from the root scope, these values will be available to the expressions attached to directives like ng-show just like values on your local $scope. - AngularJS [faq](https://docs.angularjs.org/misc/faq) Apparently r/javascript likes downvoting instead of constructive discussion, though. 
Not 100% sure. But I read recently that observe() made it into chrome. 
That does not say what you told us. It says nowhere that your data should be located in the scope, only that it can be made available there, if necessary through the hierarchy, which is the normal idea of the scope as a connecting concept, not a storing one.
It does say what I said. Learn to read. I said: &gt;If the data needs to be accessible pretty much everywhere, it can be put to $rootScope, which is the "official" recommendation in the AngularJS documentation. The documentation says: &gt;Occasionally there are pieces of data that you want to make global to the whole app. For these, you can inject $rootScope and set values on it like any other scope. 
I read that as "making data available" not "data living there". There's a difference. Of course you set values on the scope, that is how you connect things. That faq is about how to access data globally, and one of the answers to that is, with heavy caveats included, to make it available through rootscope and use the prototypal inheritance from there. You talked about where the data should be located, they talk about how to make the data (located *somewhere*) available globally. &gt; If a controller needs to use the data, it can be passed through with scope inheritance. The hell? use dependency injection
At work we package into 2 files: environment-specific and literally everything else. Our compiled.js works out to the 2MB neighborhood, and IE8 chomps through that just fine. WAY FASTER than the network latency on 800ish individual files but really, parse time is so minor in the scheme of things that we don't even consider it. There's so much more low-hanging fruit than worrying about that.
Ok, maybe not the checking-in part, but print-statement-driven debugging is an underrated way of debugging things. I used to do it regularly in college, then when I graduated the people at my first job told me it was a "bad way of doing things", and to *always* use a debugger. Then I left that company, found a job that didn't impose any ridiculous rules on how to do things, and I learned that print statements are a faster way to debug at least 60-70% of problems.
Okay, so you read wrong.
Sinon makes this and similar types of debugging a lot easier. http://sinonjs.org/
&gt; CYO is now all written write in to your HTML What?
The syntax is based on Haskell/ML. There is no "magic" involved - the grammar is small and each construction has a simple interpretation. 
Pretty cool. Something to check out is if there is a drop-off and new fare at the same location on screen. It went by kind of fast but I ran over someone :D 
Seems kind of cool, but its modifying of built-in prototypes wants me to kill it with fire.
I think it has potential! A couple of ideas: - It didn't feel like the speed of the game was increasing (I don't know if it was or not). It didn't get any more challenging, and even after several minutes I was dropping someone off with no new customers on the screen yet. Ramp it up as time goes on to add a challenge. - Add some obstacles to the playing area so you can't just hold down a direction to get from one side to the other - since it's based on a taxi, some road obstructions would make sense. Buildings, etc. - Add customers who should take priority (i.e. instead of color simply being how long they've waited, make it 'urgency'). So that when I'm heading for someone who is green, someone who is red suddenly pops up and I have to divert to them instead. - How about a mechanic where certain customers have extra pickups before they are dropped off? So you actually have to pick up 2 or 3 customers to complete the job.
Hey that's racist!
This is totally brilliant. Suspect the person arguing over code styles are ignorant of the true importance of the topic matter. 
I'll take RxJS any day.
Actually, I don't think I need eigenvectors after all. So this is great, thanks!
I needed this months ago.
This is all around a pretty amazing improvement. Intuitively, you would expect the checking and shuffling of string types back-and-forth to outweigh other gains, but then you see the improvements to inline strings, and string processing. It's great to see such impressive work still being done on Gecko.
I agree completely that the game didn't escalate as quickly as I was hoping. I like the mechanics, just not the challenge.
Awesome explanation. One more ELI5 question: what is the final "(this)" all about?
I'm still trying to decide, but it doesn't seem bad to me at this point. The readability improves a lot if you put `DOM` in scope, instead of prepending it with `React.` - it does a pretty good job of visually distinguishing nodes. For example: return DOM.div({class: 'row', 'hello ', DOM.b(null, 'world') ); Of course, it's easier to type and shorter too.
&gt; Intuitively, you would expect the checking and shuffling of string types back-and-forth to outweigh other gains Not so much. My (perhaps naive) intuition is that a webpage can pretty easily avoid non-latin1 characters if it doesn't have to display them, and I'd be surprised if 1% of the text I view doesn't fit in the latin1 character set.
Right, but it seems like the code still would need to check every string before handling it, and sometimes convert it to TwoByte form. For example, if you want to run a regex over the string, you need to know if it's Latin1 or TwoByte to process it correctly. So, there's at least *some* overhead in checking each string. (And, if this checking leads to a hard-to-predict switching, you could cause constant cache misses in the processor.) To me, the primary goal of this modification is to reduce overhead, but the fact that it comes with performance gains is an awesome plus.
The last line calls the function expression that was just defined, resulting in what's called an immediately invoked function expression (IIFE.) This IIFE was defined as taking one argument (`global`), and `this` is the argument that is being passed to it that will provide the value of `global`. The IIFE uses that parameter to expose a public symbol by assigning to `global.parseCSS`. As this function call happens at the top level scope (outside of any function body), `this` will be equal to the global namespace object. In a browser, that's `window`, in Node.js it's `global`. This technique allows the code to work in both environments without having to write some ugly test. As you may know, you can also assign to the global namespace (at least in a browser context) by just leaving off `var` and writing `parseCSS = ...`, and that would have worked fine without needing to pass any parameters to the IIFE. However, this is generally considered a design flaw of the language as when it occurs it's usually a mistake that has unintended negative consequences. Static analysis tools like JSHint and JSLint will warn about it, and strict mode disallows it entirely. Being explicit about passing the global namespace object allows this code to work in strict mode and not generate warnings under static analysis. Moreover, in Node.js the top-level scope is not the global scope, so the only way to add symbols to the global namespace is by being explicit. The IIFE could have also skipped the argument and written `this.parseCSS = ...` but I suppose the way it was written is more self-documenting as to the purpose, as it's not always easy to tell at a glance what `this` will be. 
Can the OP explain what this offers that Three.js doesn't? And vice versa? 
having to use print statements is an indication the code is written incorrectly. if the only way to inspect running code is to fill it with text output then something is wrong. only the most trivial programs would benefit from print statements.
Wait it appears to work with CSS too?! http://jsfiddle.net/sfUZ4/1/ 
What's the bug? You're saying "I want the element with the tag name h1, the id test, the id test, the id test, the id test, and with the attribute id that equals test." It returns the element that matches that selector.
playing on nexus 7 with bluetotoh keyboard, using the arrowkeys scrolls the page up and down obscuring the top or bottom of the play field depending on whether im pushing the car up or down. maybe prevent default behavoir of arrow keys pls?
I don't know Three.js enough to do an comprehensive comparison, but I've been using both, and my favorite is Babylon.js, because it is easier to maniuplate. It is very easy to create a 3D game prototype quickly. Babylon is much more recent than Three.js, so a lot of features are not developped yet, but he is growing fast. Moreover, I think Babylon is more game oriented than Three js, with a native support for gamepad, virtual joysticks... 
I think it's the same: https://code.google.com/p/v8/source/browse/trunk/src/objects.h#9020
V8 had that from start: at first, strings were either ASCII (using one byte per character) and utf16 (two bytes per character). About two years ago the ASCII representation was abandoned in favor of Latin1.
Note that none of the popular JS benchmarks stress two-byte strings.
I need to find another way to escelate difficulty then, currently I have a number, say 10, and every second, it checks whether time % 10 === 0. If true, a new mission is spawned in. I'll have to figure out another way to do this, since it is very limited.
Will do :)
You shouldn't try with JQuery or any frameworks if your're new. This can be done easly with some Vanilla Code. Here you just need to attach a click event on each tab. Each tab has a data-id (from 0 to n). When you click on a tab, get the data-id of him and do a getElementsByClassName or querySelectorAll if you prefer. You will get an array of the elements found. Now you have the id of the tab and an array with all tab, you just need to tabs[id] and idealy tab[id].style.display = "block" and hide the other with a loop :) 
Ok. Sounds like something from Pokemon :)
How is this different from JSHint or ESLint?
;)) Yes, we have to use something like a bridge... but the proxy should be installed only once for all apps, and we can forget about it... just use a link to it )
Thanks.
What does this do? Why use a proxy or application id? Everybody can already call the Github API directly, with or without a OAuth token. The token is only needed to heighten the rate-limit and allow write-calls or access to private repos.
He actually covers the differences in the article, but basically jshint doesn't cover coding style.
https://www.npmjs.org/package/json5
Nice! Was looking for something similar before writing own helper. However, in my helper unicode characters are supported as valid identifier parts + JSON5 doesn't solve indentation-everywhere problem.
This is exactly what I've been looking for. Awesome!
had this one, too
This seems a bit complicated. Is the ID just the "id='tab-one'"?
I write a lot of funcitonal cucumber tests in java, my single biggest complaint (apart from what a pile webdrivers are) is the noise from your steps and the output. Cucumber in general howeveer is extremely handy, if the specs are well written.
Do you understand what OAuth means and why it is used in practice? I'm not going to leave my credentials anywhere except github. Have you read [this post](http://blog.vjeux.com/2012/javascript/github-oauth-login-browser-side.html) ? 
I'm confused by this. Isn't this pretty much *exactly* how UTF-8 works? Most characters are stored using a single byte, and only special characters that require two bytes use two bytes?
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [self-promotion guidelines](http://www.reddit.com/r/javascript/wiki/index), and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
Oh, I forgot about the token retrieval. I use an app where you create a token yourself in the Github settings and use that. Then it is really 100% user side, not even any shady proxy server in the loop (that's not really browser side now is it?)
Our functional tests are split into Diamond, gold and silver, each denoting a different tier it tests. Diamond is full ui, gold the json feed and silver checks our hazelcast cluster. The diamond tests are notourisly brittle (webdrivers in general are shit and java due to lack of first class functions is a horrible language to write these types of tests in) and the best sollution to the brittleness is to increase timeouts, which slows everything down again. This said, end to end funcitonal tests are great to have.
I like YAML, but the point is to get valid JS representation of object which you can use in code, and not to serialize it to custom format.
One nice feature of Visual Studio which I like is the automatic code styling on return. I personally like Sublime more than VS, but that's the one feature I would carry through to every editor if I had a choice. There may be some extensions for Sublime that I'm not aware of yet.
&gt; forbidden ambiguous type declarations (`!!x` — bad, `Boolean(x)` — good) How is `!!x` ambiguous? It produces a boolean, there is no other result possible. I can support banning `!!`, but the reasoning doesn't jive. **edit:** Sorry OP, I realize that's just an example rule and it could be anything... with that said, I'm definitely going to be looking into the project more. I already have [Esprima](http://esprima.org/) and [ESLint](http://eslint.org/) on my list to play with, though I don't mind adding another!
I guess `!!x` is just *vague*, eg. if you just want to get familiar with the code quickly, `Boolean(x)` is more readable.
Are you Matt.might.net? Good write up, thanks for the link.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**UTF-8**](https://en.wikipedia.org/wiki/UTF-8): [](#sfw) --- &gt;__UTF-8__ (__[UCS](https://en.wikipedia.org/wiki/Universal_Character_Set) Transformation Format—8-bit__ ) is a [variable-width encoding](https://en.wikipedia.org/wiki/Variable-width_encoding) that can represent every [character](https://en.wikipedia.org/wiki/Character_(computing\)) in the [Unicode](https://en.wikipedia.org/wiki/Unicode) character set. It was designed for [backward compatibility](https://en.wikipedia.org/wiki/Backward_compatibility) with [ASCII](https://en.wikipedia.org/wiki/ASCII) and to avoid the complications of [endianness](https://en.wikipedia.org/wiki/Endianness) and [byte order marks](https://en.wikipedia.org/wiki/Byte_order_mark) in [UTF-16](https://en.wikipedia.org/wiki/UTF-16) and [UTF-32](https://en.wikipedia.org/wiki/UTF-32). UTF-8 has become the dominant character encoding for the [World Wide Web](https://en.wikipedia.org/wiki/World-Wide_Web), accounting for more than half of all Web pages. The [Internet Mail Consortium](https://en.wikipedia.org/wiki/Internet_Mail_Consortium) (IMC) recommends that all e-mail programs be able to display and create mail using UTF-8. UTF-8 is also increasingly being used as the default character encoding in [operating systems](https://en.wikipedia.org/wiki/Operating_systems), [programming languages](https://en.wikipedia.org/wiki/Programming_languages), [APIs](https://en.wikipedia.org/wiki/Application_programming_interface), and [software applications](https://en.wikipedia.org/wiki/Application_software). [*[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)*] &gt; --- ^Interesting: [^Unicode](https://en.wikipedia.org/wiki/Unicode) ^| [^Unicode ^equivalence](https://en.wikipedia.org/wiki/Unicode_equivalence) ^| [^UTF-16](https://en.wikipedia.org/wiki/UTF-16) ^| [^UTF-32](https://en.wikipedia.org/wiki/UTF-32) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cj4ht5e) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cj4ht5e)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Not really. Unicode characters are associated with a number between 0 and 0x10FFFF called a code point. Characters up to 0xFFFF are said to belong to the basic multi-lingual plane, and the next ones belong to the "astral planes". A code point can be encoded in different ways. ---- The simplest encoding is UTF-32 (a.k.a. UCS-4, four bytes per character), where each code point corresponds to a 32 bits number. UTF-8 and UTF-16 encode the code points on multiples of 8 and 16 bits respectively. ---- UTF-8 is really elegant. Code points between 0 and 0x7F (127) are represented as a single byte. For larger code points, the first byte is &gt;= 192 and the next ones are between 128 and 191. The first byte in the sequence determines the number of subsequent bytes as follows: 0b0xxxxxxx 0b110xxxxx 0b10xxxxxx 0b1110xxxx 0b10xxxxxx 0b10xxxxxx 0b11110xxx 0b10xxxxxx 0b10xxxxxx 0b10xxxxxx https://en.wikipedia.org/wiki/UTF-8#Description It is now limited to four byte sequences, but it could technically encode values up to 31 bits, using six bytes. It has several advantages: 1. It is backwards compatible with ASCII 2. It is very compact for western, and especially English scripts 3. It is self-validating. ---- UTF-16 is similar to UTF-8 in that it is a variable length encoding. Code points below 0xFFFF are represented by one 16 bits number, and code points after that use two 16 bits numbers. It is however less elegant than its 8 bits cousin. In the early days of Unicode, there were at most `0xFFFF + 1` code points (65536), and UTF-16 was a fixed width encoding, like UTF-32. At some point it became clear that more code points would be needed, and it was decided to make it variable width. However, it was not possible to use the same elegant scheme as UTF-8 because there were already code points using the most significant bits of 16 bits numbers. Consequently, a few code unused points were chosen to mark the start of a four bytes sequence. These code points are invalid by themselves, when represented in other encodings. UCS-2 is the UTF-16 of the early days. Fixed width, two bytes per character with a limited character set (basic multi-lingual plane). It is used by JavaScript engines. Since the browsers can handle characters from the astral planes, these code points end up being represented by two characters in JavaScript. For example, `"𤭢".length == 2`. ---- Latin-1 is an encoding that predates Unicode. It represents 256 characters as a single byte. When Unicode was devised, it was decided to map these 256 characters to the first 256 Unicode code points. https://en.wikipedia.org/wiki/ISO/IEC_8859-1 However only the first 128 of these characters can be represented as one byte in UTF-8. ---- With that out of the way, back to the new Mozilla string handling: Strings that contain code points between 0 and 0xFF are encoded internally as Latin-1. It is trivial, if needed to inflate the characters to 16 bits (`0x77` to `0x0077`), but it is not UTF-8. 
JMat does that, I think.
I get that they're not encoding it in UTF-8. I guess what I'm not clear on is why switching between Latin-1 and UTF-16 is more efficient then just having all the text in UTF-8. I get that it lets you handle characters like é or ç that are in the first 256 using a single byte, whereas in UTF-8 they'd be two bytes. Especially since all string handling needs to be ready to handle Unicode anyway. I also really wonder what happens under the hood when JavaScript engine handles: `var mystring = "In conclusion…"` vs `var mystring = "In conclusion\u2026"`. Feels like if all strings were treated as UTF-8 it would save so much overhead.
Yes it is EDT... I will update. Thanks! 
&gt; This is a book about the JavaScript programming language. It is intended for programmers who, by happenstance or curiosity, are venturing into JavaScript for the first time. It is also intended for programmers who have been working with JavaScript at a novice level and are now ready for a more sophisticated relationship with the language. Pretty much sums it up.
I disagree. Dont rely on written code if you A) dont know how it works or B) dont care to know. This solution is not complex, in fact its very straight forward. Hold variables with places so that your Javascript knows what to do and when! I find reading over a comment that seems complicated makes it easier to digest. Also as a tip, you dont even need to use a data-id. why not add a class 'shown' to the proper div and have shown be display: block?. Maybe you arent comfortable using data attributes yet?
The book is not for beginners. It is great, and they will learn from it, but a beginner can make a better choice of book. 
Read it, code in JS for a month, then read it again.
There are a bunch of javascript inheritance scripts out there, but they all share the same concern: using only anonymous functions, they end up loosing the class names, making it tough to debug big projects. This is more of a POC than anything else. More detailed explanation of the issue on my blog: http://www.nicolasbize.com/blog/javascript-inheritance-without-loosing-class-names/ I'd love some feedback!
I used mongoDB with mongoose as database and database client in nodejs. And I personally tried Restify for creating webservices. But mongoDB is NoSQL.. Anyhow.. This stack worked pretty well for me. 
this is what i'm aware of but there is a lot of server-side framework created everyday :) * [expressjs](http://expressjs.com/) * [sails](http://sailsjs.org/#!) * [koa](http://koajs.com/) * [meteor](https://www.meteor.com/) * [restify](http://mcavage.me/node-restify/ ) have a nice reading ;) many edits : format
http://rutracker.org and search javascript
If he wants to learn a programming language, let him learn the fundamentals of english as well :) it will get him farther than learning Russian JS will on its own. 
thank's, just forwarded this one to him
Thanks! Do you have something more interactive in mind as well? When I was 15 long pieces of text scared the shit out of me.
Right. Any character with a value of 128 or greater requires 2 or more bytes to represent in UTF-8. This is just saying that if all characters in a string are less than 256, use only one byte to represent each one.
Seems more aimed at ClojureScript than JavaScript...
Have you done much programming or are you from a comp sci background? If not get 'headfirst javascript' and possibly 'javascript and jquery' by john Duckett. This crockford book is good, but you won't get anything from it as a novice programmer. Get the good parts when you feel like you have a good understanding of what is actually going on.
I am a programming newbie, and so far the best resource for beginners that I have come across is the book **Head First JavaScript Programming** by Eric Freeman and Elisabeth Robson. I was very glad that I read it.
Sweet! thanks! I should have tried that, but I was dogmatically following this guide http://toddmotto.com/mastering-the-module-pattern/
unfortunate! He will learn it eventually if he gets really into coding :P
What's the way to have properties/variables in the js module pattern? I want to be able to 'attach' a UI element with jQuery to a property to use in the module, something like var DbDiff = (function() { var $foo; function init() { console.log('-------- INIT --------'); this.$foo = $('#someDiv'); }; is it possible?
I wouldnt say anything is wrong with it, although it seems your init function should be doing the heavy lifting instead of returning most of your functions to the global scope. alternatively, I like to use an actual function as a constuctor. (function() { function ChatRoom() { function init() { } this.init = init; } var CR = new ChatRoom(); CR.init(); })(); edit: sorry for the poor formatting
oh cool, thanks for that
Also check out [page.js](https://github.com/visionmedia/page.js). Caveat: it only works in browsers with pushState support (≥ IE10).
cool, thank you! do you know why on line 14, I get foo undefined instead of foo bar? 
As an english-only speaker, I can't even imagine how annoying it must be to have to learn another human language in order to best understand a programming language. Makes me wonder, are there such things as.. Translated JavaScript skins? Perhaps a library that synonymizes all of the builtin function names and whatnot to another human language, like Russian?
I think Python had a proper Japanese version like that. Every class, every method, in native Japanese. 
I subscribe to "there are only three hard things in programming- naming things and off by one errors."
Is there a testing / QA sub Reddit ?
Awesome :)
 if (!nyet) { //do something wonderful for the people, comrade } else { //mercilessly exploit the proletariat you capitalist bourgeoisie pig }
Hey, this guy has written a few good books it looks like: http://zammetti.com/booksarticles/index.htm That "Practical JavaScript, DOM Scripting and Ajax Projects" one looks like a winner. A bit older, but the basics are all still valid. ;) (Come on, how could I NOT shill my own stuff?!)
In Soviet Russia, code writes you!
I'm not really sure what data atributes are. Care to explain, please? 
You might find this interesting: www.mean.io
Looks legit to me. To answer your question about why line 14 isn't working: Your module creates only a single instance of the `DbDiff` object, and that instance isn't bound to a `this`. When you use the `DbDiff` object/"class", you want to instantiate a copy of the object with `Object.create(DbDiff)` (with the code as you have it now) or with `new DbDiff()` (if you switch the module to exporting a constructor function). (If you're not clear on the difference between the two methods, [this might help](http://stackoverflow.com/questions/2709612/using-object-create-instead-of-new)...)
This is a very important aspect. I still get shivers from recalling having to work with code, written by Russian programmers, which was full of transliterated variable names and comments - in Russian. And I do know the language! Writing code in any language other than English is a sacrilege and should be punished by a lobotomy! :[
Learning to program definitely involves scarier things than 15 long pieces of text. Wait until you hit prototype inheritance or array element iteration ... =p
The best online resource: https://developer.mozilla.org/en/docs/Web/JavaScript Try to avoid this website: http://www.w3schools.com/
Maybe pick up an online game where the users are predominantly english (or the common language is english?) so he can have some conversational practice with no pressure?
this is a good idea! I had a friend in estonia in the runescape days who learned most if not all of his english from the game. We still speak in english to this day, and we quit AT LEAST 6 years ago :)
FWIW this was my first google result for "data-attribute": https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes MDN is a good resource generally. You might also want to look at some of the resources linked from /r/learnjavascript.
He should read "Gödel, Escher, Bach: An Eternal Golden Braid" by Hofstadter. It will change his life!
This could be a long term issue - even if he does learn JS, surely his access to the ecosystem is going to be excessively restricted because most of the documentation is in English? Is he taking English lessons? Not only this, but many of the core theoretical concepts of programming, patterns, paradigms are rooted in words that have deep meaning. It must really suck, and I'm tremendously privileged to have learned English from birth.
&gt; in fact i haven’t seen any framework that could provide me with ninjas beeing Ninjas and persons beeing Persons (did i miss it along the way??). [There's actually one built into JavaScript](http://i.imgur.com/ALfPUbk.png). Also, [eval is evil](https://github.com/nicolasbize/moojs/blob/master/moo.js#L69-L71).
Thank you so much for the resource, I'll try to apply it. I now have the source slightly changed, but is different https://gist.github.com/orlybg/88e2280a00832bae412d Now on the new lines 12 and 13 I assign some UI elements to the properties I defined in lines 4 and 5, the plan is to be able to reuse those and probably others in all the module.
http://socioline.ru/book/daglas-r-hofshtadter-gyodel-esher-bah-eta-beskonechnaya-girlyanda
[+1 for caching jQuery objects](https://gist.github.com/orlybg/28a82b42ab86a85d96f8#file-dbdiff-js-L12-L13) [-1 for not using your cached jQuery objects](https://gist.github.com/orlybg/28a82b42ab86a85d96f8#file-dbdiff-js-L28) [-1 WTF exactly were you trying to accomplish here?](https://gist.github.com/orlybg/28a82b42ab86a85d96f8#file-dbdiff-js-L27) [-1 for using jQuery instead of Array.forEach](https://gist.github.com/orlybg/28a82b42ab86a85d96f8#file-dbdiff-js-L29-L30) [-1 for leaky globals due to lack of `var`](https://gist.github.com/orlybg/28a82b42ab86a85d96f8#file-dbdiff-js-L31)
Wow nice feedback, thank you so much for the pointers. I'll fix the var and forEach parts. As for the [Wtf! part](https://gist.github.com/orlybg/28a82b42ab86a85d96f8#file-dbdiff-js-L30) I swear that on line 30 DbDiff.getHostList() gave me an error when I tried to use it with this or alone. I guess the scope/context was lost because of the loops? Does that has a name? I thought it was called de-referencing or something like it.
Recently picked up JCSC to get my team conforming to a particular style. The presets are great! [jQuery](https://github.com/mdevils/node-jscs/blob/master/presets/jquery.json) [Wikimedia](https://github.com/mdevils/node-jscs/blob/master/presets/wikimedia.json) [Google](https://github.com/mdevils/node-jscs/blob/master/presets/google.json) [Yandex](https://github.com/mdevils/node-jscs/blob/master/presets/yandex.json) 
Both UCS-2 (not UTF-16, JS predates the introduction of the astral planes) and Latin-1, are fixed width encodings. Indexing and calculating the length are O(1) operations. Not so with UTF-8 and UTF-16. Regarding `"In conclusion…" `, I suppose that in both cases you end up with the same UCS-2 representation.
What do you mean by returning it to the global scope? The return object is assigned to a variable. This is a very common pattern that is actually called the 'revealing' module pattern and is used over a constructor function to provide encapsulation of variables and functions you don't want to expose as part of the public interface. 
It's a method of encapsulation during object instantion called the 'revealing' module pattern. It's been around... A while lol. I feel old as hell after reading this thread. This was 'the' thing in 2004 before everyone provided an extends method in their library. 
Bingo, they have a [Russian JavaScript](http://www.babylscript.com/mappings/ru.html) there. Thanks for the link /u/mouthus!
/u/mouthus found a site which has [Russian wrappers for JavaScript](http://www.babylscript.com/mappings/ru.html), which might be helpful for your little brother.
Will it be more than a Directives 101 talk?
There will be an introduction, then will go into more advanced topics. We are trying to keep a lot of time open for questions, so if you were interested in any specific topics you can certainly ask :) 
Start with duolingo.
As an Android developer, I still strongly dissuade anyone from creating non-native apps like this. They are mostly a terrible user experience and so much slower, larger, and glitchier than native apps. 
I know what a global variable is... I think his intention was to show the pattern and ask about its costs or benefits. It's not so hard to write app.DbDiff if you are concerned about name collision with something else called DbDiff. As far as modifying the state of *any* variable in Javascript... There is no current way to avoid this (except for the variables declared inside the IIFE in his pattern, those canot be touched and that is the point of the pattern). 
Being able to get English language help from places like Stackoverflow is worth learning the language for alone.
Thanks for your (hum) explicit feedback. &gt; There's actually one built into JavaScript. Well yes... [and actually it's what I am using](https://github.com/nicolasbize/moojs/blob/master/moo.js#L74)... I never said I was replacing that function. I am in fact using it to build namespaced classes through simple configuration. Take a look at this, you will see that [the solution is not that simple](http://i.imgur.com/lJlrgbS.png)... &gt; Also, eval is evil. is it evil because crockford said it back in 2003? it seems that people have a tendency to scan source code for the term "eval" and automatically digard it as *bad code* when found... sometimes eval **is** necessary. But nevertheless your remark is valid: if you can find a way to achieve what i did without new Function, I'd really like to see it.
Hey thanks for posting this here. I wrote the blog post, hoping share some live code soon. Will report back :)
'this' is wrong. use this only when you plan to have instances of your modules
I also like that they applied the principles of MVC on both the front side and the server side.
Well, that should really help OP's brother, it has all the translations right there!
scratch.mit.edu comes in Russian
[Paw](https://luckymarmot.com/paw) is pretty good, though it is a bit expensive. I generally find myself using curl with JSON files most often as I prefer to stick to my terminal whenever possible. EDIT: Paw is Mac only, by the way.
[**@othiym23**](https://twitter.com/othiym23): &gt;[2014-07-23 01:58:50 UTC](https://twitter.com/othiym23/status/491764343206576128) &gt;npm 1.5.0-alpha has become npm 2.0.0-alpha because of these exciting changes: &gt; &gt;[*github.com*](https://github.com/npm/npm/releases/tag/v2.0.0-alpha-5) &gt; &gt;Try it out! File bugs! Enjoy! ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2bgmh6%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
PAW looks great.
Get a dashboard cam.
No, it should be treated with a proper education. You don't cut off a man's legs for having a treatable but crippling post-accident trauma: you rehabilitate him, until eventually he can walk.
One of many. My advice, read 7-10 javascript books. Read the good ones twice.
maybe a use case....?
While there is some truth in that statement you could also say it is really easy to write "bad" apps natively. We use Cordova because we need to be able to serve a multitude of devices and don't have the budget in time, money or experience to get multiple versions of the same app running across the platforms. IMO basic CRUD apps work just fine using corodva. For things like games and other apps that need some power, native is the way to go. Knowing your limits and having some constraints on your design scope can go a long way in making a nice Cordova app.
If that exists, it would be a really bad idea to subject oneself to learning a translated version of the language, since when you hit actual work environment, it's not going to be like that and the others are not the ones who will adapt to you. My native language is Spanish and I recognize that English is the actual Esperanto of the world (for better or for worse) and when programming, just follow the standard way of doing things (English)
Thanks for the suggestion. Gonna try it out tomorrow.
I feel bad for people whose first language is English and have no stimulus to learn any other language :P I only know two languages but would love to be a guy who knows 4-5 languages. More flexibility for the mind, more power to communicate.
Yuri! That script does nothing! You have failed the motherland!
Read all the javascript code you can find on github instead.
Is there a Russian to English JS converter? That converts it? тревога("Здравствуйте!"); To: alert("Hello!"); ---------------- Kind of like this? Функция туРипсЫоп () { вар ул = документ.получитьэлементId("Демо").Внутренний; вар TXT = str.заменять("Mother Russia!", "Мать Россия!"); документ.получитьэлементId("Демо").Внутренний = TXT; } 
Bollocks! We demand a Russian JS interpreter! Функция туРипсЫоп () { вар ул = документ.получитьэлементId("Демо").Внутренний; вар TXT = str.заменять("Mother Russia!", "Мать Россия!"); документ.получитьэлементId("Демо").Внутренний = TXT; } 
You mean.... uses code like this? Функция туРипсЫоп () { вар ул = документ.получитьэлементId("Демо").Внутренний; вар TXT = str.заменять("Mother Russia!", "Мать Россия!"); документ.получитьэлементId("Демо").Внутренний = TXT; } I'm spamming it around, because it took ages to translate in google. 
OMFG! That's awesome!
The c2 wiki has some [thoughts](http://c2.com/cgi/wiki?ProgrammingWhenNotSpeakingEnglish) on the issue. My favorite is: "I remember reading something (I think it might have been in a [DouglasHofstadter](http://c2.com/cgi/wiki?DouglasHofstadter) book) where the author asked a non-English-speaking programmer what it was like programming with keywords and so forth in a language he didn't speak. The guy said he probably thought about it in the same way as English-speaking musicians think about all the Italian "keywords" in musical notation... they're just opaque symbols you memorize and then don't think about."
[Advanced REST Client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo) is okay. Also a Chrome app.
I use Express a lot, I use promises a lot. I've ported this from a service I recently wrote for another project, that has been quite a success. I hope this saves you some time too! Feedback is always appreciated.
https://hexlet.org/course/javascript/ Удачи ему. Пусть английский учит, это ему поможет в карьере. Почти вся техническая документация сегодня пишется в английском.
You are right, of course. I just wanted to stress the importance of learning English - before learning to code, and that writing readable and maintainable code is one of the fundamental principles. Programming language is universal, and introducing a localization problem on top of it - is just evil.
Only works on Windows. Surprise, surprise.
I'm not feelin' it tbh. I do like mongoose-q though for inside my route handlers. There are times when a callback or two is ok, imo. For everything else there is promises. To each his own though. Nice work.
http://www.reddit.com/subreddits/search?q=software+testing
No worries man, thanks for giving it a try! I have nothing initially against callbacks, but find it nice when I'm using a library that can use promises (like Sequelize), to not have to write the boiler plate code. To each his own!
Source is available here: ~~https://github.com/taylorbf/NexusUI~~ https://github.com/lsu-emdm/nexusUI
Поддерживаю.
Anyone know a good one for FireFox? I use 'RESTClient' addon but it is not that great, just good enough to keep using it and not take the time to find something better.
Enough is enough with this bullshit that eval is evil. Please stop.
I feel lucky I haven't ran into this issue yet. I really only use the bluebird library now, mostly for performance reasons. But who knows what type of thenable you'll get when mixing other libraries. As for express-as-promised, it'll convert whatever promise you return into a bluebird one, so hopefully, you'll be alright. If you find any issues let me know :)
I like Advanced Rest Client: https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo/reviews?hl=en-US&amp;utm_source=ARC
Bluebird is the shit, should've been the default implementation and available everywhere . Sadly still a lot wrappers with Q promises around. Not *bad* but not the best.
Speaking of naming things. Im renaming BootstrapThemeEditor to Cluckles .... haha. Bought the domain, just gotta finish making all the changes and then upload the site, and make a new repo for it on Github :)
It's not that bad. I think it's great that I get to use a foreign language in my daily job. It keeps my language skills fresh. Every language, every reference and all other resources are always in English. When I'm writing code my brain completely switches into "English mode" and I notice I'm often even thinking in English.
He's 15. He'll just be learning fundamentals and basics for awhile yet. A long enough while, that he might as well start learning how programming languages work in his native language, before English, if that's what he feels like doing. He can focus on best becoming a great fit for a multi-cultured team of international programmers later down the road. This is a matter of a kid exploring career options, hobbies, and computer skills -- not convincing you that your project needs to now be maintained by a fifteen year-old russian who replaces your code comments with russian ones. Anyways, I think we can all agree that to become a robust and hireable programmer, it's best to learn English, for obvious reasons.
I am Russian, and my English was rather bad when I learned coding, yet I did not see a problem at all. The keywords/functions do not matter, you have to memorize them anyway. Is word `boolean` more familiar to you as a native speaker? What about `pointer`? Even `function` is something different in programming than in everyday language. I think main problem is with the community. If you don't speak English, you lose blogs, you lose Twitter, you lose StackOverflow, conference videos, etc. And no skill would help you with that.
I have no idea what's `туРипсЫоп`, but that casing and translation is terrible. Here: функция перевести() { прм стр = документ.получитьЭлементПоИд("демо").внутреннийТекст; прм текст = стр.заменить("Russia", "Россия"); документ.получитьЭлементПоИд("Демо").внутреннийТекст = текст; } Or this, with `джЗапрос`: функция перевести() { р("демо").текст(р("демо").текст().заменить("Russia", "Россия")); } I wish I could use http://en.wikipedia.org/wiki/Russian_ruble#Currency_symbol for jQuery above, but I think it is not available in most fonts yet.
The Appendix A and B about what to avoid is awesome even for a total beginner. The computer-sciencey parts, not really.
In my experience a good developer can make a native app that works properly much faster then verifying a non-native one. The main problem is that web views are inconsistent. For example, how do you deal with the modified webview text input on Samsung devices? What about displaying long lists? Other things just never come out right; I have yet to see a proper ActionBar in a Cordova app, or a properly implemented menu (they look like an iOS and Android 2.3 hybrid)
this within functions reference the function scope. You need to set another scope to a variable in order to use it within another scope. You did nothing wrong here, except forgot var before it. edit: ok, I see he wtf part. You named this variable the same as your main function name so it's slightly confusing. Declare var DbDiff = this; at the top of the main function. Along with foo, hostlist, etc
Fundie
I have CORS working. But this is supposed to be a non-CORS request. Thats the reason for the whitelisting in their config xml files. Like I said, it sends file:// , and when you dig around apparently that was to get around having to use CORS. So do we have to talk about CORS? CORS.
I just found this. More Rest Api documentation than testers http://mestachs.wordpress.com/2012/08/06/rest-api-documentation/
never heard of it, but that code looks scary and impossible ;) feels like when I first learned how to code. so тревога is alert ? :) 
I/O Docs is nice: http://developer.klout.com/io-docs
While i'm mention API docs: https://github.com/renewablefunding/blueprint-docify http://apiary.io/
funny to see this here; I just started using this plugin in a project a couple weeks ago.
Why do you need it? Events are asynchronous by nature. You should just return a promise from doSomething and chain it from there.
Well, I see high value in having it always return a new promise. It almost remembers me of the jQuery defereds vs real promises case. But it's still a valid point: why do you need it? :) Thanks for your reply
1) I think you should take a look at requireJS. It is a full blown dependency injection framework and it looks almost as if you are trying to build that yourself. http://requirejs.org/ 2) If you wanna build it yourself, consider using promises. If you have some promises, you can pack them into an array and just run Promise.all(myArray).then(doSomething); on it. http://www.html5rocks.com/en/tutorials/es6/promises/?redirect_from_locale=de edit: links
If you wanna go tool time on it, you can also consider using underscorejs's after function. It takes a function and an integer that determines that the function only gets executed after the function was already called n times. So if you have 5 files to load, simply use: _.after(4, function() { ... })
User changes what features he wants in our website, and our loader loads what is necessary on his website. That is why we load things dynamically.
throw new errors.ArgumentNullError('truth');
I heard about RequireJS, but will it be able to load files dynamically on customer websites? It will be something like this: &lt;script type="text/javascript" src="http://static.ourwebsite.com/require.js"&gt; &lt;script type="text/javascript"&gt; var client_id = 1214121; &lt;/script&gt; 1. Before require.js starts, it makes an API call to api.ourwebsite.com/client_id/ 2. Takes a JSON response back. ({ enablewidget1: true, enablewidget2: false ... }) 3. Depending on response, it loads other javascript files. if(response.enablewidget1 === true) require([path() + "widget1.js"], function(widget) { }); if(response.enablewidget2 === true) require([path() + "widget2.js"], function(widget) { }); Another thing that confuses me is, I don't know if I should give link directly to require JS, or give link to loader.js which loads require.js itself. I guess I'll go with second one since I don't want to add my code on require.js file. (then, I need to track if require js is loaded, so I'll use something like promises once again.) Promises sound awesome, but they're pretty new I assume. Compatibility requirements are too high for our project. If this one is possible with basic events, I'd prefer going that way. 
Try Rx or bacon.js for fancy event streams ('functional reactive').
&gt; wrong term Can you elaborate on this? What is the difference? As for the promises: The fundamental problem he faces is that he needs that 'allLoaded' Event, that doesn't exist. So if loadScript were to return a promise, you could have that behaviour easily, using the Promise.all function.
actually, the solution was simply ignoring the origin header (not kicking off CORS) and now everything works with CORS disabled. Cool.
A module loader loads modules, it is a more specific form of a code loader, and RequireJS loads AMD modules. A dependency injection system injects objects into other objects, it build object hierarchies. It is like a specialized factory that produces complex objects. It is quite a larger pattern in software design https://en.wikipedia.org/wiki/Dependency_injection It may look similar but it is conceptually a different kind of thing. And for the promises, yea you could do it like that but you'd have a load more code for the promise aspect then the actual loading code.
Nice, thanks for lifting me onto that :)
&gt; can be confused for a promise? This is a bigger problem than you make it sound, and why it's a bad idea. Promises are entirely built on the premise that thenables will only resolve once. If you create a thenable that breaks that contract, it has huge potential to cause confusion and chaos. The second somebody mixes a real promise into your pseudo-promise chain, shits gonna break big time, and you'll have no idea why because the code looks exactly like it should. It's best to avoid APIs that look exactly like other APIs but have totally different behavior. Much better to use streams, which were built for this purpose.
So the keyword here actually is injection (and/or inversion). Instead of my module knowing about its dependencies (and the names of that modules), it's about someone else passing a dependency into my module at runtime. I don't know how many times I had this wrong :/
I basically agree with you, but I was hoping for mitigating circumstances, since my proposed .then can only ever be at the beginning of a promise chain and it will "resolve" to a real new promise, with all the expected behavior, every time the event gets triggered. I like the idea of streams, but even though I don't know to much about it yet, it seems to not handle my "basic problem". That I need to teach our in-house-javascripters to use .then for everything async, but not for events. edit: and yes, I realize how "all the expected behavior" and "every time the event gets triggered" are kind of contradicting each other. Still mitigating circumstances?
A lot of this is built right into the [YouTube player API](https://developers.google.com/youtube/youtube_player_demo) -- to make the embed "pretty," you can disable "controls", "rel", and "showinfo" and enable "modestbranding".
For reference, I know next to nothing about how to write javascript. I can generally piece together a little bit if I have existing code in front of me, but I can't figure this out for the life of me.
Yea, the fun part comes where you inject different flavours of the dependency so your dependent changes behaviour; For example if your module needs a storage unit, instead of having it create one kind by itself you could rig it so you pass (inject) a storage object of your choosing, like a file-system store or a memory store, or a fancy remote database store or a browser local storage or whatever. Makes stuff modular. And the dependent just call the methods and is oblivious about the backing implementation.
Where's the demo?
Note: besides Traceur there are a few other ES6-to-ES5 compilers, like `esnext` and `es6now`.
This is neat. Do you think we could get it into https://github.com/blixt/ionic-template as a one-liner? Something like `npm run serve-device`?
I'm not sure anyone can help you without seeing the actual code. Try making a http://jsfiddle.net/ with your code and add that to the post, will make figuring out the issue way easier.
I second this. This just creates confusion with juniors (and angers seniors). If it's the fluent interface you like about it, consider introducing some new method names, for example: when('click button') .do( submitForm .then(closeDialog) ); Notice the braces tho. If submitForm returns a promise and you want to chain it, you will create a long expression inside the parens of the do() call. Since I'm arguing that it's a bad idea to convert from an event to a promise implicitly, there's no way to get around the inner expression. This in turn breaks the elegance of chaining and the only way around it is to introduce a new function to wrap both submitForm and closeDialog. And so we're back to square one because w/o chaining you're left with little more than the good ol' .on() syntax. But.. while converting an event into a promise is a bad idea, the opposite it perfectly legitimate. A promise then becomes a special one-off event. Add to that a nice chaining api for manipulating streams of events and you've got Rx. https://github.com/Reactive-Extensions/RxJS
I use a few open source lib's for this task: https://github.com/zynga/loadScript https://github.com/ded/script.js/ Either works, but I'd also recommend using build systems like gulp and/or browserify to concat/package your files.
That's because you're only appending the dots to the coordinates on the svg and not the actual map. You need to link the dots with map coordinates and not svg ones.
I know, I Will when I have time. But I was hoping the issue was well known. Thanks for helpful reference and comment.
Bah, if you walk the DOM recursively without abstraction you can traverse even extremely large documents in mere milliseconds. Modern browser are precisely tuned to achieve maximum performance against vanilla DOM methods, because this is what everything else sugars down to. Here is some simple code to experiment with: https://gist.github.com/austincheney/6398215
Hmm, I am a little confused on how to implement this... I thought svg was my map object? Also is there anyway to change the circles to look like the pins like the last pic and add that tooltip box on click?
Ok, how about this: &gt; eval is almost always used for the wrong reasons Have I used `eval()` or `new Function()` in my code? [Yes](https://github.com/lazd/DOMly/blob/master/index.js#L660) and [yes](https://github.com/lazd/DOMly/blob/master/index.js#L696), but I used it in a compiler ran during your build process that actually builds JavaScript code. This is the proper place to use `eval`, not on the client side when declaring constructors.
Hey, thanks for the link. I had something similar in the beginning, but without the setTimeout trick I got freezing for 2 or 3 seconds. (I tested with facebook.com and tried to parse their 2000+ nodes)
Yup, totally familiar with it, I remember the Yahoo article that popularized it. The WTF moment was for assigning `DbDiff = this;` inside of a method of `DbDiff`.
This is just great, thank you so much for taking the time to answer thoroughly. Separating the class name from its namespace does allow the usage of a named function in Js.create(). That's smart. I'll merge the code and change the documentation. And you are right, it does seem that Object.create is sufficient enough. Thanks again
&gt; I thought svg was my map object? It is but these lines set-up where your dots should be. svg.append("circle") .attr("cx", my_cords[0]) .attr("cy", my_cords[1]) You have to find a way to link these dots to how the map expands. You can clearly see that the distance between them remains the same. It has to expand accordingly. In bostock's example, he uses the `clicked()` fn for expanding and `reset()` for resetting the effect. Use the same thing for your circles.
Cheers man. Sorry for being a dick in my original comment, and thanks for keeping an open mind :) Also, check out [`nsdeclare`](https://www.npmjs.org/package/nsdeclare) -- after I refactored your code, I couldn't help but notice that it was doing something similar. You'll see some interesting use of `JSON.stringify` in there in regards to namespace declaration.
Hi, I use Grunt, with minify/compress/uglify/lint modules. However, combining is not the case. The reason is, we plan to have alot of jQuery plugins that user can simply select via our website and it will automatically load in his website. If I combine everything, that will be huge. That is why we develop a loader. It will both be faster in the target website and save us (or CDN's) some bandwidth. (it loads as async and from our CDN, plus everything is minified already.) I checked both libraries. script.js perfectly suits our needs, but I'm not sure if we should rely on a third party library. A basic event system could also work for us. I'll give them a try - thanks alot! :) 
Looking at the Typecast page it appears to be a library for which defines its own types and operations and enforces strong typing at runtime. (Much like how Python works.) What TypeScript offers is quite different. It uses type inference, manual type annotations in combination with structural typing to do typing checking for your whole program during a compile step way before your code even hits the browser/server. I'm enjoying using TypeScript so far. I've used Java extensively, C++ a bit too and settled on Python's dynamic typing as being the best alternative so far. I had grown allergic to these type systems which get in the way and always insist that you dot all your "i"s and cross all your "t"s before you are even allowed to run your program. (Hearing about Scala's type system just makes me nauseous.) TypeScript seems to have found a sweeter sweet spot than Python's approach. Typing that works for you instead of you for it. It provides a lot of benefits without feeling heavy or requiring too much effort or getting in the way. 
Wow that worked....so simple haha. Now I just have to figure out how to add text and change the circle graphic and im golden. Thank you
And then add your own fancy controls any way you like it.
I think that might be a hardware-level issue, not JavaScript: http://gaming.stackexchange.com/questions/6669/how-do-i-remove-the-limit-on-pc-keyboard-button-presses &gt; In order to save money, keyboard manufacturers often put many keys on the same "circuit" of sorts within the wiring of the keyboard. This prevents multiple keys in the same region of the keyboard from being pressed simultaneously. Sometimes it even prevents more than 2 keys at all from across the whole keyboard being pressed at once. Often the shift, ctrl, and alt keys are not within this limitation, so you can hold shift and press 2 other keys at once and it will still work fine.
I'm the author of this plugin, I'd like to weigh in: @magnusson you are absolutely correct, and that robust YouTube Player API is exactly what enabled me to write such an easy to use plugin. As a front-end developer I am constantly needing to drop in placeholder images for videos, so I wrote a tool which I thought was easier than messing with the API every single time. @Shadow14l you'll only see the effects /before/ pressing play. If your monitor is large enough, the placeholder image automatically selected by YouTube will be the 1080p version, so you won't notice much of a difference. Viewing that same embed on a smaller screen may cause YouTube to auto-select a lower quality image. As for the "black bars" on the sides of the PrettyEmbed side in the demo - that's a CodePen thing, and I'm going to be moving this demo to it's own site to better showcase what it can do. I never thought it'd see this much attention. Please submit pull requests / issues where you see fit! Cheers!
Cool! I'd advise you to use the css `:hover::after` attribute for the text. It's way easier to work with it to create a pop-up. I made a [simple example here](http://jsbin.com/bapexuxo/1/edit)
Yep, that's what I did with [my site](http://resistorsings.com/) ([js](https://github.com/stevengoldberg/stevengoldberg.github.com/blob/master/js/resistor.js)).
No excerpts? 
Nice read. This is related to one of my go-to interview questions about client-side performance. And hey, since you posted this on Reddit: &gt; Believe it or not, I spent more time trying to crash my browser then writing this article. Should be: &gt; Believe it or not, I spent more time trying to crash my browser **than** writing this article. 
I think quasi-literals are the most awesome: http://www.slideshare.net/domenicdenicola/es6-the-awesome-parts (skip to slide 23). They will make templating languages obsolete, and open the door to DSLs for certain tasks.
I sent pull request https://github.com/mike-zarandona/PrettyEmbed.js/pull/10 please check. Thanks for your library :)
I wonder if all the hate comes from the fact that its the bible or that I fucked up the title? The bible should be useful for christian and atheist alike, imagine all the super annoying chat bots that could be created. 
I just post whatever random cool shit I find on github, I'm actually an atheist o.O 
No way around learning English. Bite the bullet.
Whoa I hadn't noticed that. So DbDiff becomes the returned object from the IIFE. So this inside that method *is* the DbDiff variable. So the code actually behaves as expected inside the each callback and so OP probably didn't think it was wrong. I think essentially, this inside the callback wasn't behaving how OP expected so they were basically trying to do var self = this above the each but probably didn't know what to use. I'm guessing anyway (if that makes any sense) . 
http://tympanus.net/codrops/2014/01/09/sticky-table-headers-columns/
Well, as long as we are on the subject... Let's say there someone was to make a mobile app that simply does basic CRUD operations and mostly deals with text? The mobile app requests text from a remote server, then stylizes it a bit, adds a little formatting, and then displays it to the user. The user scrolls through the text a little, perhaps clicks a button to get new text, or bring up a form to add a bit of text, etc. Seriously, how much faster is a native Android or iOS app really going to be? From what I've seen PhoneGap performs pretty well getting and displaying text and doing basic CRUD.
Does the Typescript's compiler make some optimizations to the code in compile time like google closure?
Merged, thanks!
 Object.keys(vegetables).filter(function (veggieName) { return vegetables[veggieName].value == 2; }); Would return `["carrot", "spinach"]`. Also take a look ath `_.where`: http://lodash.com/docs#where _.where(vegetables, {value: 2});
Oh no! What do you mean by windows version? I lose on the first click all the time. 
Like the version of minesweeper that comes pre-installed on windows.
Oh gotcha. I think I can fix that. 
This was my thought as well. My initial interpretation was that this setTimeout trick is being used to support an artificially slow DOM tree traversal. Especially since it's a browser extension, isn't the native representation of the tree available too? Traversing and parsing a mere 2000 nodes should happen much faster than 16.667 ms. Don't get me wrong though, the trick is kinda interesting to ponder about if you're relatively new with the javascript environment, but I think it'd be pretty hacky to use in production.
"!m !m !m" yields an awesome list of fantasy names! http://i.imgur.com/CTRrVc0.png
id suggest you add a feature where when you click on a revealed number with the exact amount of fields marked around it, it auto reveals the remaining fields around it
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Representational State Transfer**](https://en.wikipedia.org/wiki/Representational%20State%20Transfer): [](#sfw) --- &gt;__Representational state transfer__ (__REST__) is an abstraction of the architecture of the [World Wide Web](https://en.wikipedia.org/wiki/World_Wide_Web). More precisely, REST is an architectural style consisting of a coordinated set of architectural constraints applied to components, connectors, and data elements, within a distributed [hypermedia](https://en.wikipedia.org/wiki/Hypermedia) system. REST ignores the details of component implementation and protocol syntax in order to focus on the roles of components, the constraints upon their interaction with other components, and their interpretation of significant data elements. &gt; --- ^Interesting: [^Representational ^state ^transfer](https://en.wikipedia.org/wiki/Representational_state_transfer) ^| [^Representational ^Action ^State ^Transfer](https://en.wikipedia.org/wiki/Representational_Action_State_Transfer) ^| [^Web ^service](https://en.wikipedia.org/wiki/Web_service) ^| [^Resource-oriented ^architecture](https://en.wikipedia.org/wiki/Resource-oriented_architecture) ^| [^Hypertext ^Transfer ^Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cj5y4nl) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cj5y4nl)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Doh which one should I choose? https://i.imgur.com/TlZbH05.png?1
Looks like you've got it in the bag! But if you get stuck again you could always try the konami code...
Suddenly I got really good at this game :) https://i.imgur.com/6Q0j4HA.png?1
The motivation for this repo is: work asked for our own JS style guide. I'm like, "but, there are so many out there already." So instead of make another "this is good, this is bad", enormous document, I thought the OSS world could use a simpler format. I wanted to make only a few essential "rules", and several tame "recommendations". It also is unique (I think?) in that it includes starting point .jshintrc, .jscsrc, and .editorconfig files to match the rules and recommendations. Please let me know if I missed anything :+1:
@Rhomboid it will most likely always look like that, at least in how nested it will be. There may be other things along side of it, not just amount, and increment. On that note, what are those called? I keep calling them sub-variables, but I am pretty sure that isn't right.
I see you're the author of this article. I love the topic being discussed. My question for you is what is the reason for you making a Chair model and then extending its prototype with observables? Is there any reason you didn't just do that all in one object? Something like: var Chair = function (obj) { var self = this; var isObj = typeof obj === 'object'; self.name = ko.observable(isObj ? obj.name : ''); self.size = ko.observable(isObj ? obj.size : ''); self.width = ko.observable(isObj ? obj.width : 0); self.height = ko.observable(isObj ? obj.height : 0); }; I guess I'm not really used to extending prototypes right after the object is declared. I'd love to hear why you do that.
Nice. Where is your source code? I'd like to read it.
&gt; Favor function declarations (function hi() {}) over function expressions (var hi = function () {};) why?
If you're in chrome, you should be able to right click and inspect element and find it in the head. 
NO MORE JQUERY PLUGINS. Write a web component instead.
Network, network, network
The more recent versions of Windows changed that algorithm to what he described, to eliminate losing on the first click. I think the first to change it was Vista, but it could have been 7.
I was thinking what you would typically do is work backwards. In the same way that you might abstract an block of code by starting with what you would like the resulting function invocation to look like, and then only after you have an end vision doing the actual work to get there. The problem is I don't know what 'end' web SDK's typically look like or if there is even an established pattern other than..." block-of-JSON-code". ha! 
&gt; for(let i = 0; i &lt; arr.length; i += 1){ setTimeout(function(){ // something with arr[i], which works! }, 100); } This works with Dart, but as far as I know this isn't yet a part of the ES6 specs. Try it with Firefox: A) let a = []; for(let i = 0; i &lt; 3; i++) { a.push(_ =&gt; i); } console.log(a[0]()); // 3 B) let a2 = []; for(let i = 0; i &lt; 3; i++) { let k = i; a2.push(_ =&gt; k); } console.log(a2[0]()); // 0 If you try example A with node (without the fat arrow and with --harmony --use-strict), you also get 3. Traceur (with --experimental) outputs 0, but that's most likely not intentional.
Is that so you can't accidentally highlight the text?
I came here just to ask this. I've always been told otherwise. Are you aware that you're adding the function to the global namespace when declaring it this way?
A PR would be great!
I encourage you to check out [this tutorial](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/) and learn it yourself! It's important that devs experiment with this, especially senior engineers like yourself. You're in a position to champion [a paradigm shift in frontend engineering](https://www.youtube.com/watch?v=8OJ7ih8EE7s). Polymer is cool and all, but I'd actually suggest you try implementing it fully native -- hell, drop the jQuery! Support only evergreen browsers and use the [CustomElements polyfill from Google](https://github.com/polymer/CustomElements) if you need support back to IE 9 (please don't support IE 9). You could end up with sexy markup like this: &lt;table-sticky&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Address&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;!-- ... --&gt; &lt;/tbody&gt; &lt;/table-sticky&gt; How much cooler would your plugin be? It would be cool, man. It would be *ice cold*.
Honestly the future of JavaScript should be to make it more strict and actually class based. Current Javascript is exhausting.
I had forgotten all about those. It's shame it'll be *years* before this stuff is safely usable in the browser. I know there's ES6 compilers, but that feels risky, especially performance- and byte-wise. **EDIT:** A perfect example of just how *not* acceptable using Traceur is, [try using multiple `let` variables](http://google.github.io/traceur-compiler/demo/repl.html#{%0A%20%20let%20a%3D1%2C%20b%3D2%2C%20c%3D3%2C%20d%3D4%2C%20e%3D5%3B%0A}) (you'll probably need to enable the *experimental* option to even get this to compile). This turns this: { let a=1, b=2, c=3, d=4, e=5; } into this (not including the module wrapper): try { throw undefined; } catch (e) { try { throw undefined; } catch (d) { try { throw undefined; } catch (c) { try { throw undefined; } catch (b) { try { throw undefined; } catch (a) { { { a = 1; b = 2; c = 3; d = 4; e = 5; } } } } } } } Just... holy crap. I'm shocked they couldn't just wrap the inner content in an IIFE, like: { (function(a,b,c,d,e) { })(1,2,3,4,5); } That just seems more logical and more performant than relying on throwing exceptions. Even with `for` loops, you could easily use two IIFEs to get a similar result: for(let i=0; i&lt;10; i++) { setTimeout(function() { console.log(i); }, i*10); } // Could be translated to: (function(i) { for(i=0; i&lt;10; i++) { (function(i) { // purposefully masking the outer variable setTimeout(function() { console.log(i); }, i*10); })(i); } })(); (Plug the original loop into the Traceur page to see what happens!)
One approach is to create a set of combinators like all, any, some, etc that accept a list of specific validations functions and that can run through them and return the appropriate result based on this. Then create discrete composable validation functions specific to your domain and basic things like whether or not a value is a float, a date us greater than another, etc. The important thing is to make sure these are composable and that the higher level functions like all are as well so you can create extremely complex validation rules that can encapsulate large amounts of validation logic but can be used to validate different objects through a single call. There may be existing libraries for this out there but I'm not aware of them. I can throw some simple examples together if this is unclear and if there isn't a good open source solution we should all get hopping on that. 
I know this thread is a couple weeks old, but I just wanted to say good comments here. This is exactly the kind of advice that made me come here.
I mean, could you implement it and submit a PR to the OP Repo? I'd fork the shit out of it.
The `console.log` is what is causing the issue. When you log something the browser must keep track of it, and if you have the console open, render it. It's the same problem as when you were editing the innerHTML on each pass of the loop, you're manipulating the DOM thousands of times.
I tried doing that in vanilla express, and couldn't get it to work. I didn't know that next returned a promise. I'll have a bit more of a look at the docs/code and see if I can make sense of it. Then, I'll ensure it behaves the same in express-as-promised.
Nope it doesn't change the code much... The structure of the code is retained pretty much 1 to 1 except for few cases. Which is basically good if you want to debug at runtime, and don't want to use map files.
Definitely better than the inspect element hack I was using.
Ah, thought you were the project owner. But yeah, got my hands full right now or I'd be all over this and other projects that need some web components love. The tech is pretty easy to learn, though there are some gotchas that you wouldn't expect, but it's easy enough to figure it out. 
With jQuery you can do something like this $.get("textFile.txt", function(data) { var items = data.split(','); }); You may need something like this though var items = data.replace(/"/g, '').split(',');
'Tis the future of the web.
Your proposed function desugaring needs to handle this and arguments at the least. If you do something like function(arguments, a){ }.bind(this, arguments, 1, 2, 3) it might work (wouldn't be surprised if there are other subtle issues) but perf is probably worse.
You could also perform the transformation text → JSON (JavaScript array) via a shell script written in JavaScript: http://www.2ality.com/2011/12/nodejs-shell-scripting.html Apart from what’s described in the blog post, you’ll also need `JSON.stringify()`.
it is in that format, but Im not sure how to get it into JS to set the contents to an array
The resulting code is still DOM bound mess. Same ball of mud, slightly different shape.
Unless I'm not catching what you mean, `let` is [definitely in the ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations).
I agree. I mean the problem is not in the actual parsing of the DOM tree. It is in the things that I'm doing with the element on every pass. I have a short comment in the article `// using e.getAttributes ...` In the real code I actually read the `class` attribute parse it and made some additional calculations with the values. This comes a little bit too much for the browser and the `setTimeout` trick fix that problem for me. P.S. Maybe I should change the title of the section.
I agree with you. I mean the problem is not in the actual parsing of the DOM tree. It is in the things that I'm doing with the element on every pass. I have a short comment in the article `// using e.getAttributes ...` In the real code I actually read the `class` attribute parse it and made some additional calculations with the values. This comes a little bit too much for the browser and the `setTimeout` trick fix that problem for me. P.S. Maybe I should change the title of the section.
Why would you declare a method and assign it to a variable of the same name? That doesn't accomplish anything. Not sure about old versions of IE, but named methods appear as such in Chrome's development tools. http://i.imgur.com/ps31Mg2.png
Here's how I do it: arr = [1,3,5,6,8]; for(var i = 0; i &lt; arr.length; i += 1){ with ({i:i}) { setTimeout(function(){ console.log(i); }, 100); } } 
ajax call to get text file, then split it on ' '. `var words = string.split(' ');`
I could dig up a blog post or dated article that explains "When not to use expressions and when to use declarations" and vice versa. The truth is, I like it for a matter of style preferences. That's why it's only a recommendation. To me, writing out a function declaration is a way to differentiate between a function and other primitives when looking at a long list of `var`s at the top of a function. It's a native way to define a function; it can only be a style preference to use an expression assignment, right? Additionally, I also make use of the fact that the definition is hoisted from time to time. But, again, it's just a recommendation. It wasn't long ago I wrote out all my functions as `var hi = function () {};`. (My apps need to say hi a lot)
are you aware that your recommended syntax uses hoisting while the other does not? those 2 ways of declaring functions are not equivalent! usually, hoisting is not a wanted feature
One could argue that the direction taken is the correct one, and there is still more refactoring to be done.
Yeah, I mentioned how I appreciate how a function declaration's definition is hoisted in the comment you replied to. The comparison between `function hi() {}` and `var hi = function () {}` is in these being the two ways to assign a function to a name. I consider the hoisting aspect simply a feature of a declaration.
$.get the raw file, not the zip.
This is nice. Here's my $0.02: - 2/4 white spaces for indentation, quote selection and camel casing (or not) should be rules as imho they come under the umbrella of consistency (imagine diffs with just quote style differences or just whitespace differences *shivers*) - instead of "return early" I would say, prioritise for the most run block of code or the if block that is entered over 80% of the time Other than that, good on you for providing the necessary dot files. Gj OP!
If I flagged a square, when I lose it should show my flags to see if I was right for my other guesses, and if I flagged the wrong square, it should point that out as well. Good job!
Why hoisting is not a wanted feature? It is an amazing feature, and I use it all the time.
You can use an `input` of type `file` and let the user select the dictionary file. Then you have to read the binary file using `FileReader` and convert it to a string.
From what I understand, there is no anonymous access to realtime files from the API. I wish. :)
Making it class based would take the language in a fundamentally different direction and be incompatible with a lot of existing code that uses prototypes. I suppose that they could settle on a default for how to do class-like OOP and supplement it with some syntactic sugar (like a 'class' declaration). Philosophically I don't know that that would be great in terms of preserving what is useful/different about Javascript.
I feel like whatever you think you want to do with that array ... is best not done with an array. If you're just going to choose a word at random from the file, try using a while loop over results for indexOf(' '). Stop at some random count, restart at beginning if you shoot past the end. Then get the word at that location. Much better than splitting a file into an array. 
I like hoisting as well! This comes with using a function declaration, which I *recommended* over assignment expressions. Either is fine. Some may choose not to embrace hoisting in their applications, as it can be found confusing. That's a choice a project developer can make without sacrificing a maintainable or functioning codebase.
I hate it when people blindly say to use === over ==. Better solution: learn how coercion works and use the appropriate one.
The function also changes arguments.callee, which some odd programs could rely on. This could also be worked around, but I guess it becomes just as ugly as the try catches.
Because a lot of people get it wrong and stuff like this happens: http://jsfiddle.net/sJ7Tw/ Run the fiddle in firefox and chrome. Of course you can argue that you should never define function based on conditions, but some people just don't care because it "worked when i tried it". If you define your functions by assigning them to variables, you still shouldn't create functions in conditionals, but at least the outcome is defined and consistent across browsers.
Yeah... That's a giant violation of privacy law right there.
Is it online or offline? Offline (reading files from file://...) is difficult and often disabled for security reasons. Online (reading files from http://...), you should be able to just do $.get
Thank you for this elaborations. I think I wont put that then method in there. Rx looks very nice!
So keen for this. It's like JSTL. 
It was an introduction to the series. I am working on the rest of the videos. In the video I just talked about the features that will be in ES6 not the syntax itself because many people are confused about ES6, ES5 and JavaScript. I am sorry, the video did not help.
Why do people use spaces for indenting code? Tabs are clearly superior because: 1. Less file size. 1. Less keystrokes needed when fixing indentation issues. 1. Less chance of making the format inconsistent by accidentally adding/removing one indentation character. 1. Tabbed code is easier to copy and paste: there is always one indentation character; with spaces, people may use whatever number they like. 1. Editors allow users to configure tab width, so people can view the code the way they're comfortable with.
I prefer `var fn = function() {}` simply because its forces you to place your code in order of execution: hi(); // ReferenceError: hi is not defined var hi = function() { /* hi is in parent scope */ }; But hi(); // no problem here... function hi() { /* hi is in parent scope */ } And the last weird one is: hi(); // ReferenceError: hi is not defined var wtf = function hi() { /* hi is only in this scope now */ }
So.. this is basically a POS software system he's asking for, tailored for gym memberships, that works with your scanner. He's probably trying to get you to magically set one up for him for free...
True eg. a neat one to know: a == null Is the same as writing: a === undefined || a === null And in the old ways when you wore allowed to overwrite the value of undefined you would need to say: var undefined; a === undefined || a === null or a === void 0 || a === null 
I have never understood people who uses spaces. Can someone please clarify why using spaces is a good idea?
Plugins which I found and which are quite comparable to what i'm looking for: * [Glide](http://jedrzejchalubek.com/glide/) - missing 1:1 touch support * [Unslider](http://unslider.com/) - quite slow
Nice style. maybe a bit to easy to cheat though. Run $('.bomb').css({background: "red"}) in console and all bombs are highlighted. :) [http://imgur.com/Hc70vAE](http://imgur.com/Hc70vAE)
Doubt you'll find any plugin that matches the description perfectly - but writing your own, or modifying an existing one, should be pretty trivial.
I'm sure there is a useful subset of ES6 which compiles to reasonable code.
Functions and anonymous objects gives you more power and flexibilty than classes, so I don't think that would be a bright future. Prototypes are not a drop in replacement for classes and should not be treated as such, even though many developers try so, so hard to make them behave and look like classes.
This is a good post for /r/webdev 
They did that! You can check them out, they're called [Classes](http://wintellect.com/blogs/nstieglitz/5-great-features-in-es6-harmony) 
I've yet to come across a codebase that included the use of a loose operator that couldn't have been replaced with a solution that involved a strict one. When creating maintainable code to be used in collaboration with other developers, a broad rule such as "use strict equality" is helping create a codebase without relying on "tricks". This is a "trick" in my opinion because it is often used in place of writing out longer, more "spelled-out" code. Longer and "spelled-out" is what I've found to be maintainable (my key focus).
Is this spam?
Just make your own. Use it as a learning experience. It shouldn't be too hard.
I highly recommend owl carousel. Very easy to use, small and full mobile support. 
Owl carousel is slick. I don't know how big it is though, but definitely worth a look.
http://kenwheeler.github.io/slick/ Part of my boilerplate now. It's the best.
There are several possibilities: use a text editor that supports search and replace via regular expressions; write a shell script via `sed` or `awk`; write a web page with two textareas and use one as input, the other one for the output. Or you can write a Node.js script (in JavaScript). The following code should get you started: var fs = require('fs'); var args = process.argv.slice(2); var fileName = args[0]; var text = fs.readFileSync(fileName, "utf8"); var words = text.split(/\r?\n/); words = words.map(function (word) { return word.trim() }); words = words.filter(function (word) { return word.length &gt; 0 }); console.log(JSON.stringify(words)); You run it from the command line via node arrify.js dict.txt
Typescript's biggest feature is that visual studio's intellisence integrates with it. When the other IDEs make the same attempts to error-highlight, then other development ecosystems will understand the benefits. Until then it's not very different from other static-analysis tools, save the syntax being more kind. 
I agree for large files. But then you don’t even want to read those into a string, but stream their contents. Otherwise, an array is very convenient: var randomWord = words[Math.floor(Math.random() * words.length)]; 
You cheater! The konami code might do something like that too...
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [self-promotion guidelines](http://www.reddit.com/r/javascript/wiki/index), and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
One approach is to use browserify and brfs. The benefit is that your text file(s) will be bundled into the JS source to reduce HTTP requests. https://gist.github.com/mattdesl/7ca2f195c37d6ec55935 It also means you can test the core text logic of your app with Node... :) 
I'm also a fan of hoisting, especially to make AngularJS controller/service/directive/etc... better organized angular.module('app', []) .controller('myController', MyController) .service('myService', MyService); MyController.$inject=['$scope', '$log']; function MyController( $scope , $log ) { } MyService.$inject=['$log']; function MyService( $log ) { } Not only does hoisting allow me to reference the functions before they're 'declared', but it also allows me to add the `$inject` property prior to its 'declaration' in order to keep the parameter list lined up. Now I can have my module declaration at the top of the file with all of its components, like the table of contents for a book, and all of the component functions declared later in the file, like chapters in a book. This makes finding what I'm looking for easier and faster, all thanks to hoisting.
The user already deleted it so their name is gone and I don't know who it was. Do you happen to remember who it was?
/u/bobsarkar. user has been deleted though. The comment I quoted was from http://www.reddit.com/r/WeAreTheMusicMakers/comments/26rhg1/list_of_free_music_courses_from_reputed_schools/ URL submitted was http://www.mysliderule.com/learning-paths/beginners-guide-front-end-programming/
Ok, well the user looks deleted now, so perhaps the admins caught onto them. I'll keep an eye out anyways, and thanks for bringing it to our attention!
Personally I find spaces to be more readable than tabs. It's true that you can configure tabs to be different widths, but you can also configure it to substitute a tab for x amount of spaces, so they can be equally easy to format. As far as file size goes, I guess that's true, but if you're minifying your code then it shouldn't matter what you use. It's really just a personal preference, I think the idea behind promoting one over the other is just forcing the developer to be consistent.
Polyfills, yo. http://www.polymer-project.org/resources/compatibility.html
Mainly because every library doesn't support AMD and if you need it to, you have to shim the library. Although, I'll say this, the code browserify generates is not pretty looking, which is why I've been using [Smash](https://github.com/mbostock/smash)
Yeah, I missed that. You wouldn't need bind, though, just using `.call(this, ...)` would solve that. That doesn't solve the `arguments` issue, but that could be left as something that could be resolved if the inner code is accessing the current function's `arguments` at any time, where you could revert to using the try-catch solution. I think this would be relatively easy to determine. I can't see how this could *possibly* have worse performance, even in the simplest of cases, over throwing an exception and catching it. JS is highly optimized for calling functions. It's rare to optimize anything for throwing exceptions.
The thing is that you can always convert tabs -&gt; spaces but if you have one type-o (missing one space) you cannot convert spaces -&gt; tabs.
Not sure I understand why you would ever convert? Pick one and use it.
Because it's far less compatible, and browserify aims to incorporate a convention already used (and proven) in node.
[Why not both?](http://webpack.github.io/)
I didn't hear about those before. Thanks for sharing! 
Also, require syntax is ugly.
I've looked at several options for breaking code up into more manageable chunks. So far, Browserify is the best one I've seen. It should hold us over until ECMAScript 6 modules or HTTP2 are fully supported anyway.
File size is pretty irrelevant these days... and almost all IDE/editors support replacing tabs with spaces. That being said, the style you choose should not be in conflict with the style your team agrees on. If you work alone, use whatever you want. 
I disagree. First book I read about JavaScript. Found some chapters very useful.
Nice. I have the same problem when I play. I didn't even know you could do that. I had a bug earlier where you could highlight the game board and see the numbers and bombs. Even when they were display:none. I had to hide the text off screen and put an empty space in the bomb blocks. Your solution is better. 
Compatible with what?
With libraries that have their own dependency management. Lots of libraries require special hacks as well. It's pretty common to fork them just to get require's AMD working.
Best solution: Use a language with a sane type system. 
&gt;2 space indentation Nope. 
Recommendation. Change it to suit your project's preferences.
No, it's not my work. Yes, I'm aware there are eleventy billion JS frameworks, but I find it interesting to see how they all do things differently. Disclosure: I work for a company that would consider this framework "competition" for us in some minor regard, so I'm not here trying to promote (or disparage) MontageJS.
The CustomElements polyfill works great back to IE 9 and perfectly on iOS, I work with it daily. Polymer itself doesn't have support for non-evergreen browsers, but that doesn't mean you can't use its polyfills independently of the project.
Nice to see the controllerAs syntax becoming widespread!
okay lets say without the fingerprints what tools and what do I have to know to be able to make the Database with name and payment info?
I want to learn how to do it. But I've decided no fingerscanner because of personal data being leaked so only name and payment info. what tools may I need or learn to use to be able to do this?
Not if you get stuff from npm, everything there is CommonJS.
Right, it does not have sourcemaps. I personally don't care for sourcemaps, unless something mangles the code like browserify. One thing to be clear, Smash is extremely simplistic and graphs out the import tree putting dependencies before other dependencies and I only use it for my library applications. As a good example, Mike Bostock uses Smash for [d3.js](https://github.com/mbostock/d3).
Todd Motto is quickly becoming one of my more favorite developers when it comes to AngularJS. Probably because I agree with him.
This is what we've settled on as well. It's not exactly tiny (~45k or something), but it does everything we need and does it well. I'd also like to second Owl Carousel. It was really nice the last time I looked at it and I think it's improved since then.
You can either write that as a backend web app with a browser as a client, or just a single computer GUI application (or one as a client for a server... whichever). This is a full-one application, involving GUI, modelling, business logic, data storage, etc... you need to learn tonnes and tonnes of stuff to do this. Absolute quickest would probably be doing MS Visual Studio Express and write a simple GUI application after some tutorials...
I've been using Square's ES6 Module Transpiler, set to CommonJS, then using Browserify on those files. The benefit of this is that you get to use ES6's module syntax! https://github.com/square/es6-module-transpiler
I have a plugins.js file that houses all my stuff like that. Minified with slick, smooth scroll, analytics and a console log fix is less than 20k. When you can, always do that.
Check is in the mail &lt;3
I second that.
You should check out [Angular Classy](http://davej.github.io/angular-classy/) it's really helped us (a three person team) clean up our controllers and make them a lot more readable.
`display:none` should definitely hide it - are you sure it isn't being drawn by something else?
Google's [AngularJS Style Guide](https://google-styleguide.googlecode.com/svn/trunk/angularjs-google-style.html) is also worth a look. As for the guide here, it's mostly ok, but I disagree with using function in e.g. the MainCtrl example. Using the 'app.controller' syntax you don't need to wrap stuff in an IIFE.
Tis zee best! :D
Not really, it generally goes against Angular's patterns. The functionality it provides in views is extremely useful but in controllers it breaks the "Angular style".
Haha, was wondering where the Reddit traffic was coming from Analytics :D found it!
Looks interesting. But you probably shouldn't use the .js name on npm, that is bad form and confuses tools.
I do not like all that chaining. It reminds me of ternary operator abuse; doing it just because you can.
Would be interested in seeing a post on your thoughts on this instead of downvotes! :)
About a year ago I didn't like it either, try it with angular and see how you get on! :)
http://webpack.github.io FTW 
What is the 'angular style' in controllers then? Someone should definitely tell the devs working on the project, as Google's internal style guide explicitly advocates controllerAs!
Your example code seems to miss the point of promises. You are nesting them like regular callbacks.
The whole idea of using `this` in controllers breaks the "Angular way". We inject `$scope` as it is such that its an obvious dependency, one you can quite easily mock for any test. Where is the sense in changing to the use of `this` but leaving all other dependencies injected as they were? It should be `$scope`, not `this`. It was made `$scope` for a reason. Many people recommend `controllerAs` because of the benefits in views (named controllers). It is incredibly unfortunate this nice and handy functionality comes along with the not-so-nice use of `this`.
Because the vast majority of people piling on to javascript at this point still don't get asynchronous programming in JS. They avoid it like the plague rather than embracing it.
Well, if you're a good developer, you could just use backbone instead of angular.
I've done a lot of chaining ... 32 years as a programmer have exposed me to a lot of different things. There's a line past which code is a little harder to read than it was before and you should always prefer simplicity and readability over the cool factor. No doubt you "got used to it" and it reads perfectly simple to you, but it's absolutely not as simple or readable as breaking those calls out to variables. You work for Google? If so, then you are probably influencing a lot of people with your blog posts. You should take a step back and look very, very hard at whether or not you really want to promote this sort of code style. It looks like a rookie mistake that you would teach people NOT to do ... not actively advance it.
How much of your code is modular? That is, how easily could you use just a piece of your application in another application? Learning to break down SPAs from the "one file, one application" mindset that tends to be prevalent in classic Javascript development is one of the most useful skills you can develop. Divide your code into logical components, define their interfaces, and then (in my opinion) add in dependency management (e.g. requireJS) to describe and load dependencies. Basically, focus more on component-based architecture. You know what needs to be done, and have a brute force way of doing it, now generalize a bit more, break up that big file into logical components, and get everything to interoperate well with the new architecture.
Can't you still use `$scope` in controllers even with `controllerAs`? 
 Reddit hug of death? &gt; Deze website is op dit moment helaas niet bereikbaar. Kom binnenkort nog eens langs, wellicht doet de site het dan weer! &gt; (aan de eigenaar: waarschijnlijk is je dataverkeer van deze maand verbruikt, upgrade of neem contact op met de support) or poor Chrome translation: &gt; This website is not accessible at this time. Come again soon along, perhaps the site then does it again! (to the owner: probably your traffic this month's use, upgrade or contact the support) 
Nice breakdown of the angular dependency injection process. I'll take a look into ng-annotate. A preprocessor seems like the best approach to this issue, but I'm not overly hung up on it since multi-line text editing turns typing out args twice into typing them out once.
You should properly consider caching some of your reusable arrays, regexps etc: eg instead of defining `defaultSet ` &amp; `defaultSetDefs`.. inside the function do it on the outside: var defaultSet = [....]; $.fn.acroGrow = function (options) { And please create the regexps upfront instead: this.find('*').each(function() { for (var i = 0; i &lt; opSet.length; i++) { var regExp = new RegExp('\\b' + opSet[i] + '\\b', 'ig'); Should be replaces to something like: var opSetRegexp = []; for (var i = 0; i &lt; opSet.length; i++) { opSetRegexp.push(new RegExp('\\b' + opSet[i] + '\\b', 'ig')); } this.find('*').each(function() { for (var i = 0; i &lt; opSetRegexp.length; i++) { var regExp = opSetRegexp[i]; And also precreate all of your regexps from the default set.
I don't know, I interview a lot of people who call themselves sr web developers or better, and so very few understand JS :(
This talk is a must see for front end developers in my opinion and should have a lot of good insights for you on this topic. https://www.youtube.com/watch?app=desktop&amp;persist_app=1&amp;v=mKouqShWI4o obviously there is a reason people have moved towards all of the mvc, mvvm and whatever you'd like to call react frameworks, but this talk is from an even higher level of architecture (more general anyway) and discusses ideas that you should follow regardless of the technology stack you are using. Edit: I just recalled I just saw this talk as well https://www.youtube.com/watch?v=0Y2xKMJtRCk and the most interesting part is the speakers company has some really cool tooling for taking a discrete view and running it in isolation in this application they've created that allows you to pump mock data into the model driving the view. You'll find with all of these sorts of resources the fundamental idea is that each view (component) should be a leader to exist and work on a page all by itself with no dependency on other components within your page and I'm very interested in co opting the idea they've come up with for verifying this. 
Hence why interviews are necessary: most of what people will say about themselves isn't objectively true.
If you want to check if it is usable, write a game in it..
Why not give AngularJS a try ;) I never re-used as much code before using that framework. We used it for around a year and a half at work and I must say; Really impressed.
It is usable and tested. Games I did write with it are not done or are prototypes. Also planning to write some examples games and include them. But I am just curious if its any good by seeing the features and maybe tips on what i should focus on to make it better/intresting. 
Yes they are. For example when we turned our Meteor.users to models, we can use {{currentUser.fullName}} in the templates, where `fullName` is a method on UserModel (`UserModel = Model(Meteor.users)`)
I really like the idea of controllerAs but how does it affect testing? Does it even affect testing? Does it make testing easier or harder?
This is a good start, I probably would say that if you are being interviewed for JavaScript, you will probably be interviewed on building some UI component on a whiteboard. Good to know of some lightweight framework like Backbone or in general how you can structure your code into lightweight component modules that can be reused and combined.
yeah, I was going to go down the route of talking about Angular/Ember/Backbone/Knockout but then do you start talking about NoSQL db's like Mongo and Couch? I tried to stick to questions directly about Javascript as a language. Might take some time and talk about those frameworks in the future. 
You want promises
$q.all(). I think is what you are looking for....
Just put your $.ajax inside a function that takes offset as an argument. Then in the complete handler, check to see if you need to call again, and if so call the function with the new offset
That's really interesting, can you tell me more about your work? Why JavaScript and not something like C or assembly? Reminds me of https://tessel.io/
yeah I've seen tessel and https://www.kickstarter.com/projects/gfw/espruino-javascript-for-things before. We actually write front end UI Javascript code, but on TV set top boxes. The middleware is C++ but all JS code runs in a funky custom webkit flavour(hellooooo QT). Anyway, constraints on memory and hardware in general put you up against some fairly unique challenges. DOM manipulation is a serious ball game! Pulling back any performance in JS is must. We run JSPerf ALOT! It's pretty fun though, this is my second project of this type. 
Vlad is my hero.
I generally do a variable scope/closure question, review their ability to identify types of objects in javascript and their available methods, and deal with a N arguments recursion problem. Some of the other engineers at the large top 50 web site company I'm at ask candidates to code out library functions from scratch such as pub/sub, promises, $.extend, and async related programs. And yup we do end to end front end js and backend node. 
Learning to serve assets correctly is at least as important. Generally serving gzipped assets will get the size of your delivered code down sufficiently. And in some cases uglification will actually produce slightly larger compressed files because it increases the number of symbols in the file. And while concatination is often helpful it's not a golden bullet. Caching is also your friend. Make sure your etags are setup correctly.
i saw this article on HN last year but its pretty useless in phone interviews. its the kind of thing you know or you dont. during in person interviews its better to crack on coding challenges. 
What he said. If you don't build real things and experience real failure you'll have no context for the stuff your learning. Nor will you retain all that much. Once you're somewhat functional, learn to test and automate sooner rather than later. Build good habits. Value simplicity. Once you have a few months of experience you might want to read some books. "JavaScript the good parts" is good. Wait another year and then read "Effective JavaScript".
I've never heard of intermediate scope though. 
This article was finished about 3 hours ago... (it's been half online for about a week). Do people still do phone interviews when there are things like skype and GoogleHangout freely available?
- if else if is a fairly standard javascript way of doing things... how is this misleading? I did mention you can use a switch statement. - I should probably mention the nonstandard error checking - I think saying jQuery promises are completely broken is a bit OTT. They don't work as someone expects them to? That's a bit more like it. For 99% of the time, when making an async http request, you want a promise back that will resolve if successful, and reject if unsuccessful. This is functional in jQuery promises so your point is? I accept and I did mention that there were other Promise libraries out there. And that native promises will kick all their asses! - I agree that bitshifting to do float truncation is silly but the only reason I know about it is because it pops up in our codebase from time to time from people who think its a cool way to achieve Math.floor.. Would you not rather know about it and know why not to use it than not know about it at all? (Maybe not an interview question but that's why it's in the hacks section ) 
haha good guess.... not quite... but close! 
Last guess, roku?
ohhhhh even closer... but still not quite there :P 
There's no intermediate scope. OP's example is nothing more than assigning a value to "a" if "X" is true. "var a" is always hoisted to the top of the function block by the interpreter / "compiler". An if statement does not create a new scope.
I'm gonna say this in a loving sort of way, but don't be an idiot. Of course people still use the most common long distance communication device available to 99.99% of all people.
Yea, I bought extra bandwidth so it should be online again in a few minutes.
Yes, you can still use $scope with controllerAs, not sure what all the fuss is about. Using 'this' is just class-like syntax for a controller, which gets bound to $scope anyway :)
Hey, it's the Angular framework that promotes the chaining, as does jQuery and a lot of other libs. Like anything, if you abuse it it's going to have negative effects.
There's a link to the Google guide in the article, too! :) If you can automate the IIFE, then there's no issue - I use a gulp task that wraps it during concats :)
indeed you can but it can be visibly confusing to use `this` for those who don't yet know about the fact that it is the scope. it is much better to use `$scope` like we were always meant to, so you can clearly see it is a dep. readability is vastly improved upon using `$scope` just because you can *see* that it is injected at the top and you don't have to define a var like `self` each time you're going out of scope. 
The point was that it's misleading. But I've covered it below in the hoisting section so it will be removed to avoid confusion 
Nothing much changes in testing, $controller('CreateCtrl') becomes $controller('CreateCtrl as vm') and you evaluate anything using scope.vm to access controller.
I think I can address the 1st and 3rd points. 1. I think what sufianrhazi is saying is that if-else-if isn't a special conditional syntax. It's the same as if-else, but it's taking advantage of the fact that you can omit curly braces for the conditional's body if there's only one statement. For example, you could write "if (cond) { return true; }" as "if (cond) return true;" and they'd be equivalent. This is what happens when you write else-if. 3. Here's an article on why jQuery promises are broken: http://thewayofcode.wordpress.com/2013/01/22/javascript-promises-and-why-jquery-implementation-is-broken/. It's also worth looking up some talks by Domenic Denicola (co-maintainer of the Q library and co-author of the Promises/A+ spec) who often mentions how jQuery promises are broken and ought to be avoided.
my bad .. this is a different article. the code snippets style appeared same. this is actually pretty good. but i would not hold it against anyone if they dont use ternary operator or dont declare variables at the beginning of the function as long as they know what they are doing. now if someone thinks NaN === NaN.. thats bad
Sorry I was smashed, New Zealand Privacy Act, but I imagine most international laws?
Point 1 is pedantic because it's still worth knowing. Jquery point when properly explained. I can say I learned something today! Does the then brokenness also stand true for done and fail? 
This is obviously super minor but "Javascript" should be "JavaScript" everywhere in your article.
&gt; The code snippets are the light theme in octopress. Pretty cool blogging platform. 
I've actually standardized my writing to use 'Javascript'. Not sure why. The capital S just bothers me. 
That's awesome! Although I love Meteor, I really missed the MVC way of programming. I will give your stupid-models a try ;-) 
The [async](https://github.com/caolan/async) library could help you arrange the async function calls in a linear way.
Create a single function that returns a promise. That promise will eventually hold all the pins that go on the map. That function will call all your ajax requests, synchronously, so in your main thread/app call the function asynchronously (returning the promise), and when it resolves() then call a function in your main thread to update your map with all the returned pins. Hope that makes sense. Good luck.
A few notes: - Being able to explain implicit globals and variables hoisting is not required knowledge if a candidate consistently declares variables in the scope start. - I would not consider Object.create a thing you *should* know. If you consider OO a requirement, ask for an example of a class and how to extend it (polymorphism). - Why do you mention try/catch conditionals if it's non-standard? - `new Array()` is only useful if you use it for pre-allocation, like `new Array(10)`. `[]` suffices for most cases, also I think you should add array manipulation methods, like shift, unshift, pop, splice, slice, sort. - I think you should remove bitwise operators because it promotes obfuscated code and premature optimization 
Looks like you enjoy writing '_' a lot. You should abandon it, and start over using `pixi.js` as a renderer and reading the `phaser` source as a reference of a game engine.
The non-angular way is now the angular way ;)
== is more "loose" than === explained in simple terms. 
== performs type coercion where === also checks the type. [== can yield unexpected results if you aren't aware of them.](http://zero.milosz.ca/)
I don't like wasting people's time so in my recent interviews (interviewee) I started with this ice breaker: &gt; I don't like jQuery If the interview cannot possibly move on then I can leave immediately because I don't want to work there.
== will allow type coercion so values of different types may be considered equal. With ===, if the values have different types they will be considered unequal. For example, "0" == 0 will be true, while "0" === 0 will be false. This might make it seem like == is a good idea as you might want the string "0" to be equal to the number 0, but a lot of odd cases come out of type coercion. For example, ' \t\r\n ' == 0 is true and so is false == '0'.
I agree about Point 1 being pedantic. I can't imagine an interviewer docking you points for mentioning if-else-if when asked about conditionals in JS. As for done and fail, I don't think the Promises/A+ spec mentions anything about them. For that reason I don't know if you could say those particular features are technically broken, but I wouldn't be surprised if they suffer from the same shortcomings described in the article.
Interesting, this might come in handy, thanks :)
**===** is the *strict equality* operator * 1 === 1 will return true; * '1' === '1' will return true; * 1 === '1' will return false. **==** is the *equality* operator. This operator will attempt to cast the two objects or primitives to the same type before comparing it. * 1 == 1 will return true; * '1' == '1' will return true; * 1 == '1' will return true.
JavaScript’s types are Undefined, Null, (primitive) boolean, (primitive) number, (primitive) string and Object. These are defined in the ECMAScript language specification and not something you see in the language. `===` only considers values equal that are from the same type. `==` converts *some* values of different types to values of the same type and then compares them: If the values to be compared already have the same type, we are done, they are compared in the same manner that `===` would compare them. Otherwise, the following steps are taken: * `undefined` and `null` are considered equal (`===` does not consider them to be equal). * A string and a number are compared after converting the string to a number. * A boolean and a non-boolean are compared after converting the boolean to a number. * An object and a number or string are compared after converting the object to a primitive. * Two (references to) objects are only equal if it is actually (a reference to) the same object. The whole process is described in more detail here: http://speakingjs.com/es5/ch09.html#equality_operators
I do tech evaluations by phone on a regular basis. I ask general questions about the technology stack I'm evaluating and judge the person by how they answer. I don't ask specific questions like, 'can you code a Fibonacci sequence for me?'. I tend to ask them to describe what closures are, see if they know what memoization is, find out what projects they have worked on recently and what stacks they used. If the confidentially respond and seen energetic about something (favorably or disdainfully) I can usually tell that they are passionate and interested in learning if they don't already know. I can usually evaluate someones skill level without seeing a line of code. We generally hire people that are adaptable and can work on any assignment we throw at them and so far I feel as though I've evaluated people well enough. I think I've only been wrong once and that was my second or third interview. I've actually been asked to do an interview via Skype and declined because looking at the person doesn't help me.
Great talk, thanks for sharing
I never knew that `else if` is just an else with an if statement as body. It looks really weird though when writing it out *with* explicit blocks if (false) { } else { if (3 === 3) { console.log('green'); } else { if (4 === 4) { console.log('blue'); } else { if (5 === 5) { console.log('yellow'); } } } } You have to nest the statements, since otherwise you'd be writing invalid code, you cannot do this: if (false) { } else { if (3 === 3) { console.log("green"); } } else { // else-ing an else? if (4 === 4) { console.log("blue"); } } But something I don't quite understand, in order for the engine to understand the way most (if not all people) do it: if (false) { } else if (3 === 3) { console.log('blue'); } else if (4 === 4) { console.log('yellow'); } How come it considers both the if *and* the else as *only one block*. I can see how else if (true) { } translates to else { if (true) { } } But not how else if (true) { } else if ("blue" === "blue") { } Translates to else { if (true) { } else { if ("blue" === "blue") { } } } Since that would mean it considers if () {} else {} as one block, right?
I agree, it's not a requirement to know. Which is why I put it in the hacks section. If I was going for an interview and there was something interesting that I could (rather than should) know, I'd like to know it. Maybe I should make it more explicit that this section is just a little bit extra 
The article is two and a half years old, and one of the libraries is already dead. Also, the author is comparing apples to oranges. Render loop and scene graph solve two completely different problems.
&gt;I would not consider Object.create a thing you should know. If you consider OO a requirement, ask for an example of a class and how to extend it (polymorphism). To which a good candidate tells you that there are no classes in Javascript.
thanks, this looks pretty straightforward. I'll try it out.
If I can't get the recursive solution to work I'll try this next. thanks!
I mean that's kind of why I'm asking this question, right?
Sure, they have used it for ages but it doesn't make it any better. It should be treated the same as any other dependency, because that's how angular dependencies are meant to be. I'm all for the `controller As` syntax inside views but the use of `this` just cuts `$scope` off into its own world for me, whereas it should behave like the rest.
Which means that: var customNumber = { valueOf: function() { return 2; } } console.log(customNumber == 2); // true console.log(customNumber === 2); // false
If anyone asked me any of those questions during an actual interview I would get offended. That's probably the worst list on the topic I have seen. My mother could spend an afternoon on Codecademy and aswer nost of them. 
The strict equality operator is also referred to as the [identity operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators).
Microbenchmarks are worthless.
I guess your mother should take up JavaScript programming then ;)
The "execute a function in 30 seconds" example is wrong on two points: &gt; 1. To clear a timeout, you need to use clearTimeout() rather than clearInterval() &gt; 2. You shouldn't clear the timeout anyway because it will clear itself after executing your function. So this would prevent the function from executing at all. The "execute a piece of code every 10" is wrong on point (2) too. You failed the interview sorry. ;P
I went Java-&gt;PHP-&gt;Python-&gt;Ruby-&gt;JavaScript :-D With other languages scattered in there as well. 
So is JavaScript your primary language now? What tools and frameworks are you using? Are you finding the job market is good and you are perceived as a software engineer (as opposed to the old days when JavaScript was a toy language for making browner-incompatible pop-ups? :)
Writing an "interview questions" article is actually quite tricky. First, you can't make even the slightest mistake, because you're writing from the perspective of an interviewer who's judging our abilities, and we don't have much tolerance being judged if someone can't correctly answer their own interview questions. And second, even if you manage to be perfectly correct with all your JavaScript, then you enter the subjective question of: Which parts of JavaScript should you know off the top of your head? Is it important that the interviewee can write an array six different ways? The non-standard try-catch conditionals? Bitwise operators? And so on. And what about the stuff that didn't get mentioned? Is the DOM important? Is Node important? What about the single-page app frameworks? It's veeery, very hard to find the sweet spot with this kind of article.
To answer your questions though, yes JS is highly marketable *if you are good at it*. It is extremely easy to find jobs right now for JS devs. Especially remote work. You can at this point make essentially the same amount of money at the top level. 
Also in some languages (I'm not sure about JavaScript), using the strict equality operator over the equality one is a speed and performance enhancement. If you can use the strict more often.
I thought some of the questions were pretty hard and irrelevant, like the scope hoisting one. Most JS programmers don't know that stuff.
Stop writing jQuery plugins. Start writing [custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/). There's a [polyfill available](https://github.com/polymer/CustomElements) that works all the way back to IE 9. This is the future of web development.
"Sure, I can tell you how to simulate class based inheritance, but why are we pretending?"
Most questions are to basic, you should have removed everything related to syntax. Any programmer that aspires to work as a JS-developer learns these things. A simple FizzBuzz-type question is sufficient to weed out anyone that does not know simple syntax. The problem is that the remaining questions out of context are not meaningful. If you are interested in figuring out if the candidate knows `Function.prototype.call`vs `Function.prototype.apply` ask them to implement a `Function.prototype.bind`polyfill. If they use `apply`ask them why they don't use `call` instead. Then you see that they can actually use the functions as well. 
I would say that any professional JS-developer worth his/her salt knows that. For every knew programmer that would enter my old team it is day one stuff. It is a source of sneaky bugs, it's a shame that the article doesn't touch on the even "trickier" topic of function declarations. They hoist to btw.
I'd recommend everything nick has ever said basically lol. He has some great talks and a book on Javascript performance as well that are worth checking out. He's also generally hilarious on Twitter. 
assumes i can remember what ember is
Yeah. The grammar (for ES5) is documented here: http://www.ecma-international.org/ecma-262/5.1/#sec-A.4
I'm guessing Echostar. And if you're not, then if you want to play off your current job they're hiring right now and you might be able to pull a raise in negotiation. ;)
As far as I understand it, that's what happens: an if/else structure is parsed as if it were one statement, of the form: { if (condition) { true-statements; } else { false-statements; } } For the purposes of JS, this works out reasonably well because there's no block-level scope. The parsing gets a little more convoluted in C, because it's not strictly a new block, but the result is the same.
For scraping dynamically created web content you may need a completely different strategy. Perhaps something like phantomjs on node, or selenium running on your OS, or a browser plugin that can ferry communication between the page and your domain. 
That's very silly, he doesn't need to start over using pixi.js at all, nor does he have to abandon it and start over after reading the structure of another engine. What he really needs to do is supply some links so we can see his engine in use, the simplicity of the code when developing games, and any neat functionality he has incorporated. Then we can be more critical on it. At which point he can choose to improve/further/redo these areas, or see it as a learning experience, take the mistakes, and start again.
Hovering and then unhovering before the animation has finished will result in the bubble displaying indefinitely.
Seriously what about animations and stuff like that?
I honestly don't care much for AngularJS. When I first started using it I was amazed, but after a few months of heavy usage I had become pretty disillusioned with it - too much black box magic, poor documentation (though to be fair, they are improving it), and the occasional scaling problem that could only be fixed by modifying the digest loop, which kind of sucks. I've been playing around with ReactJS recently, and I have to say, I really like it. It offers a lot of the good points of Angular while being way more clear and concise (in my opinion, at least). It's designed to really enforce the whole component thing (like this: https://cdn.tutsplus.com/net/uploads/2013/11/component-tree.png) , as each component has its own template, which can contain references to other components that get passed certain state variables from the parent component, and you can really easily swap things in and out if you need to. It's also got an awesome templating syntax called JSX that can be pre-compiled or compiled on-the-fly, and it's basically just HTML written inside a `return();` statement, with mustache-style tokens to methods or state variables of the component. edit: Of course, that only takes care of the view portion of the app. You'll also probably need a router, controller, and model. I personally really like [Marionette](http://www.marionettejs.com/) which is built on top of [Backbone](http://www.backbonejs.org). It's more of an ad-hoc framework, so you can pick and choose whatever bits you like. It eliminates some of the annoying issues of vanilla backbone (provides different view types, real render methods, separates controller methods from the router file, the `triggerMethod` function (which I love), as any event fired with `triggerMethod` also looks at the object firing it for a method named `on&lt;WhateverYourEventNameWas&gt;` and calls it if it finds one. That makes it super easy to hook into the various events going on with backbone components and execute arbitrary code on any of them: `onRender`, `onShow`, `onBeforeClose`, `onClose`, `onFetch`, etc. Derick Bailey, the primary author of Marionette, has had a great blog (though he recently announced he was moving on) at [Los Techies](http://lostechies.com/derickbailey/). There are lots of articles explaining the process he went through when coming up with different Marionette components, things he tried, why he went with what he did, etc, as well as lots of other great articles on JavaScript topics.
It's totally possible especially if you dont want to host your own server to and let the client side do all the work. You can look at this file to get you started: http://javarants.com/yql/javascript.xml Also look at the source code for how I use it in my site: http://myredditall.com It has a helpful example as to how I use YQL as a scraper
Would probably be done with CSS or JS (hopefully without heavy dependencies like jQuery). I think /u/lazyduke is a bit simplistic when saying "stop writing jQuery plugins", but for this case either a vanilla JS or custom element solution would probably be better.
Page won't load for me.
== turns numbers into a string, === doesn't. I know that's an oversimplification, but that's probably most important thing to know and the main example everyone shows.
I took your advice and started to look for tutorials, but all I could find was [this kind of tabs,](http://www.elated.com/articles/javascript-tabs/) instead of those I wanted.
Thank you! Will watch those when I have a chance.
Will take a look at it and some other frameworks. I've heard Angular has a pretty steep learning curve, but it'd definitely be good to get to know at least one framework well I think.
Thanks for the tip on React - I'll read some tutorials and see what I can do with it.
Thanks, will take a look.
That's because the element you're trying to create is commonly called an accordion.
Since we're being harsh, maybe you should learn the difference between "your" and "you're" so you won't sound so ignorant. 
Don't worry, someone got your joke
It's gotten better already. From time to time there are nice drawings. And other times there are dicks.
Square &amp; Twitch.tv are both using Ember as well I think, no?
I've done it. Went from writing the back-end of web apps, to writing both ends, to writing only the front-end. We didn't have a Javascript dev, so I just became one. I must say though, I'd rather be on the back-end again. Not only does it pay more, but I miss Scala. :(
Well technically I'm working on CoffeeScript now - because it was kinder on the other Java devs that were on this project. CoffeeScript Backbone Grunt Node Bower The perceptions are definitely getting better, I had some laughs a couple years ago when I told people I was a S.E. who worked with JS. Guess what, I make more money than they do and can easily find jobs anywhere in the US. I've been working from home for 4 years as well, which helps sweeten the deal even more. From what I can tell, it looks like the two contenders for rich web apps, and even enterprise web apps are going to be .Net technologies and JS. I'm hearing less and less about RoR lately, seemingly because most shops that were previously situated to use RoR going in the JS direction. 
Just googled the issue and found tons of results... [https://www.google.com/search?q=objecr+doesnt+support+property+nrthod+start&amp;ie=UTF-8&amp;oe=UTF-8&amp;hl=en&amp;client=safari#hl=en&amp;q=object+doesn't+support+property+method+start&amp;spell=1](https://www.google.com/search?q=objecr+doesnt+support+property+nrthod+start&amp;ie=UTF-8&amp;oe=UTF-8&amp;hl=en&amp;client=safari#hl=en&amp;q=object+doesn't+support+property+method+start&amp;spell=1)
JavaScript is no longer considered a "toy language" and is become much more relevant and demanded due to server platforms that run it (node.js being the biggie). You should really familiarize yourself with what's happening in the JS scene. To start, take a look at: * [Bower](http://bower.io/) * [Grunt](http://gruntjs.com/) * [Nodejs obviously](http://nodejs.org) If you're gearing towards UI: * [Angular](https://angularjs.org/) * [Backbone](http://backbonejs.org/) * [Ember](http://emberjs.com/) Also, read: * [Eloquent JavaScript](http://eloquentjavascript.net/) * [The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) * [Functional JavaScript](http://shop.oreilly.com/product/0636920028857.do) I was never a Java developer, but was a PHP developer back in the day. Things like NPM and Node (for building, or writing back-ends) have made my life a hell of a lot easier and less "hackier". You can primarily concern yourself with just integration/work code instead of busy stuff, like copying crap over or adding another lib to your VCS system. Just add it as a dependency and you're off and going. That being said, JavaScript is *really* hard to get good at. There is no "standard" way of doing anything, and everything has it's benefits and drawbacks. You need to know which is better and why, and when to break the rules. It's quirks can be tool for powerful code, but you need to know why it is that way. If you think I'm joking, [take a look at this rant](https://github.com/twbs/bootstrap/issues/3057). 
Yeah, as an interviewer, I would avoid anything specific to optimizing on a certain platform (and question anything that a candidate did 'for efficiency' that made the code harder to read or understand). These sort of 'improvements' can easily become a bad habit that make code harder to maintain and either have zero effect or a negative effect if the code is not run in the environment that you are used to.
It's only syntactic sugar though.
Thank you, looks great, goona give it a try on the server, pretty much I was following http://css-tricks.com/how-do-you-structure-javascript-the-module-pattern-edition/ Shouldn't the jQuery object assignation be inside the module? (function() { new DbDiff({ hostList: ['SELECT HOST', 'tuna.letstalk.com', 'foo.bar'], $hostSelect1: $('#host-select-1'), $hostSelect2: $('#host-select-2'), $host1Btn: $('#host-select-1-btn'), $host2Btn: $('#host-select-2-btn') }); })();
Not working on chrome for Android. =/
I actually misread that, I thought it was wrapped in a `$(function(){})` call (which waits until the DOM is ready before executing). So, it should probably be: $(function() { new DbDiff({ hostList: ['SELECT HOST', 'tuna.letstalk.com', 'foo.bar'], $hostSelect1: $('#host-select-1'), $hostSelect2: $('#host-select-2'), $host1Btn: $('#host-select-1-btn'), $host2Btn: $('#host-select-2-btn') }); }); Note there's no self-executing `()` when using `$(function(){});`.
Really need to see more code, is the site externally viewable? Also, have you tried toggling compatibility mode in IE?
For those who just want it now: I've been reading some articles on RESTful APIs and it got me thinking that maybe it could profit from a git architecture. The idea would be that when you PUT to api/dragons/haku, you are (git) staging a change to the /haku resource. A summary of the currently staged data is returned by the PUT, as well as HEAD revision number to see if the live data needs to be updated. Different sections of the APIs could have their own 'HEAD' number, so that we can know when the latest dragon has been edited, but not the latest imp. Similarly, when you POST to /dragons, you are (git) adding a dragon to the resource repository. With GET, an HTTP header could say whether you would like the staged data, the live data or the data of a particular revision. Semantically, it could be better to add a new verb COMMIT to commit to a certain resource, but it can easily be circumvented with _post variables or headers to support interoperability. A commit message is posted along with the COMMIT verb. On the database side, I'm not sure how to build it. Are there versioned databases already? or is there a way to use git with a file-based SQL system like MySQL to actually use git to version everything? I thought it could be pretty useful to get data from certain times, and to explain the changes to the resources instead of blindly modifying our entities. Any thoughts?
Not directly. Java to C# to mostly Javascript and still some Java (Google App Engine).
Thanks. I'll take a look at this one.
Currently halfway through codecademy. I'll check it out when I'm done
Orientation and Scroll examples do work, the rest not so much...
They're not really classes. It's been covered in a bunch of posts in this subreddit. Here's a quick link from a google search: &gt;Classes &gt;ES6 classes are syntactical sugar over the Objects and prototypes that we're used to working with. They simply offer a much nicer, cleaner and clearer syntax for creating these objects and dealing with inheritance. http://javascriptplayground.com/blog/2014/07/introduction-to-es6-classes-tutorial/
Maybe check out event sourcing. There are a ton of implementations in different languages. One I looked at is akka-persistence which is pretty stable and easy to pick up. Edit: looks like this is /r/JavaScript lol. There is a node implementation. On mobile now but it should be easy to Google. 
If it looks like a class, acts like a class, smells like a class.... I'm gonna call it a class. I get that OO JavaScript is essentially just a pattern but it's a great one at that! I like that JavaScript flexible enough to be able to write functional JS if you want to but also able to write OO JS (which is widely accepted by all but purists)! 
The Good Parts are great if you are already a programmer, but less suited for beginners. At the moment, authors I often recommend are Nicholas Zakas and Stoyan Stefanov. Additionally, the following website contains a list of free JavaScript books: http://jsbooks.revolunet.com/
Good for you, man! Ideological purity is a huge waste of the employer's time.
Point 1.... Type-O. Fixed. Point 2... Clearing a timeout is a perfectly valid thing to do if you set it up then something changes and you don't want it to fire any more. I thought I'd mention it so that people who aren't familiar with it know that it can be done. (Admittedly I should have gotten it right first time round) Also I'm not the interviewee here, if I was and got dinged for using a clearInterval instead of clearTimeout, I'd probably not want to be in that job :) 
At my previous place we had a rule "You cannot touch JS code before you read JavaScript: The Good Parts by Douglas Crockford". It's a really good book and you will see code quality improvements very quick. You would also have a chance to discuss multiple in-depth topics of JS once you read this book.
You can't do anything, directly. It's on your managers to recognize that he's more harm than good. On a related note, there's also the chance that he's just okay and you are above average. Anyway, if it's really detrimental to the team than I'd address the issue with him first and management second if you don't see improvement. Not everyone learns at the same pace though, so give him a chance and push him forward if you can. 
Drop some books off on his desk and then sneak Vyvanse into his morning coffee
We recently published a code style guide to our development teams. I basically copied the one from [Thoughtbot](https://github.com/thoughtbot/guides). Then we started using a Pull-Request workflow. One where no code gets checked in unless it gets reviewed by another developer. (There is a section in the style-guide about how to code-review too). These aren't cure-alls, but they have already gone a LONG way towards everyone checking in better code.
Last year I spoke to four or five high tech firms for senior developer positions before accepting the job I have now. And they all began with at least one conference call. And since then I have conducted approximately 10 phone interviews myself. For JavaScript developers. Yeah they were using WebEx but we didn't use the video function at all. Nobody is going to bring you into the office unless you pass phone screenings... 
Whatever dude. 
Try to introduce code reviews so that code can't get into the code base if it's not been approved. We use phabricator and it's not ideal because it's not as intertwined into the version control system as I'd like it to be but it's great for reviewing and nobody commits code directly to version control, everything goes through arcanist. Also, do you run a CI server? Have a coverage tool run and fail the build if coverage doesn't pass. That will point his code out as untested and he might realise he's not doing things other people are. 
I bet he knows that his code is not up to par but lacks the know how to master the craft. He likely has skated by on what works for him and doesn't know any better because no one said otherwise. Its likely he would appreciate and probably longs for a couple lessons as long as he doesn't feel threatened. I would know as I was once that guy. 
I've worked both in the corporate world, and as a JavaScript teacher at a college, so I can offer some good advice from two perspectives here. From the professional development POV: it is very likely that your coworker is going to make _you_ look bad. Shitty developers have no trouble pushing out code one feature at a time. When you don't care about good design patterns, fitting your code into an overall architecture, unit testing, or even just taking the time to look up articles/example projects to get ideas for the right way to do something, you can push _one_ feature out very quickly. To someone not developing code, they're not seeing any immediately visible result they know is linked to all your testing + good architecture, but when they send an issue his way and he comes back with an easily demonstrable implementation, he looks good and you look like you're wasting time. If he's not responding to you going to him directly about your concerns, you may want to convince someone to bring in an outside consultant to review. The point here is not that you need someone with technical skills you don't have, but that you need someone who is not you to say these things. "You don't pay a consultant for advice, you pay for them to leave afterwards". From the JavaScript education POV: I'm finding it difficult to infer what you think his actual skill level is - you start off saying "God only knows how he got a senior level position", but then immediately say how his lack of understanding stems from his use of CoffeeScript. I can completely understand how that can completely skew a person's understanding of a language -- I don't let my students even touch jQuery until after they've had the fundamentals drilled into them and learned the DOM, not because jQuery has no place, but because if you can't even write a for-loop, or know that those squiggly-bracket-things you put your jquery animate config into are actually objects, you're really not learning the language. What it comes down to is how willing he is to learn. Good developers aren't good because they simply spent a lot of time learning one thing, but because we're used to constantly re-assessing and improving our skills. If he was a good developer, he would learn that he's on a project which doesn't use CoffeeScript and do some basic tutorials. Even as someone who has been doing this a while, I still like to go back and review the basics now and again. Since he's not doing that, and you're both at the same level, it's not like you can force him to sit down and learn. You can't be too direct in telling him he needs education either, since that will definitely put him on the defensive. Perhaps you could get your project manager to require that all code be given a set of unit tests it must pass? Nothing will confront someone with the reality of their awful code than having a test suite like a bolo tie -- fixing one unit test breaks another, fixing that breaks the first one. He may even come to you willingly for help with understanding proper architecture. There is another unfortunate possibility: he could just suck. Some people just don't have the brain for code. ps. if you think working with (or inheriting code from) a bad developer is tough, try working with web designers. All variables are global, nonsensically calling functions by triggering events instead of just calling them, no exception handling or error checking, and every problem is solved by including another external script. I'm still dealing with code that uses both the jQuery-ui datepicker and the Bootstrap datepicker, both on the same page...
None of those things address what is clearly most broken about the situation. Your team has a serious communication problem. While practices like code reviews, CI, et al will help keep things humming along, things will never be right until you get people REALLY talking on your team. And the things you've proposed above will only create more intractable issues in the future. Siloing work will only create more disconnection and breed apathy and resentment on your team.
Nicholas C. Zakas the best! :)
I've been teaching my Senior JS coworkers Promises. It's one way that I gain their respect. They've gotten to the point that they will ask me before Googling because they get a free education. I don't solve their people, but I do help them think about the language and how it's used.
The same argument could be made for not having your own data center and a lot more. And the point of CDN is to make content available at edge locations globally - I don't think it's reasonable to expect that everyone has their websites running in 10s or 100s of locations on the globe. It's not only about bandwidth, it's about making first page loads faster (since asset requests are terrible) and possibly even be able to deliver certain pieces of content/pages without crossing oceans. I'm pretty sure big(ger) CDN providers all have pretty strict policies about not giving the data they collect to other parties. Now, if you're talking about some fishy free or freemium CDN providers, then the same is true as for every other free or freemium offer: chances are it's not 100% secure and you're exposing your users to risks. But I fail to see how that's connected to CDNs in general. I saw servers almost die where I work after caching headers weren't sent correctly - and those were otherwise pretty beefy beasts. So I'm pretty sure CDNs are not just to "save a bit of bandwidth". Can you tell me any major/bigger website that doesn't use a (3rd party) CDN? Maybe Google has its own. But even Facebook is using Akamai. TL;DR: Either we really have a major misunderstanding or you are talking from an enormously theoretical POV.
Point 2 is poisonous in a team. If you get possessive over code then you get defensive when someone modifies it.
&gt; and then sneak Vyvanse into his morning coffee. Oh god... scribbles of jibberish on every inch of the walls and ceiling...
Just had a closer look at that article... "The problem with jQuery’s implementation (up until version 1.9) is that it doesn’t respect the second part of the specification, “This function should return a new promise…”, that is “then” doesn’t return a new promise object when executing one of the handlers (either the fullfillment, the rejection or the progress handler)." The jQuery site disagrees: "As of jQuery 1.8, the deferred.then() method returns a new promise that can filter the status and values of a deferred through a function, replacing the now-deprecated deferred.pipe() method. " Am I missing something here?
I had a coworker at my old job (also mysteriously senior level) that absolutely refused to learn anything. I would write whole entire blog posts on [my programming blog](http://codetunnel.io) tailored just for him. He would thank me for the posts but would never read them. I would distill things down as simply as I possibly could. I would even stand behind him and show him sometimes, but his mind always seemed to be only half present. I still have friends that work at that job and I'm sad to say that nothing has changed. He still writes terrible code and doesn't understand half of what he needs to in order to be an effective team member. I'm just glad I no longer have to deal with him anymore. It was infuriating that he had a senior level title.
&gt; "[...] it is very likely that your coworker is going to make you look bad. Shitty developers have no trouble pushing out code one feature at a time. When you don't care about good design patterns, fitting your code into an overall architecture, unit testing, or even just taking the time to look up articles/example projects to get ideas for the right way to do something, you can push one feature out very quickly." So much this. It's a classic case of "nice guys" finishing last, as cliched as that is. The only way around this is to have a boss or project manager that understands why your work is worth more in the long run than the said senior developer who releases 10 features a day. Even a year or two later when that developer's code is costing the company more money, if they aren't paying attention to the actual reasons why then it will go completely unnoticed. I've always had to try extra hard to show that I know my stuff. It helps to keep a blog and fill it with really well-written posts that clearly demonstrate how well you grasp the subject you're discussing, but even that's not a silver bullet. If your company doesn't already rigorously track regression bugs, it helps to do that yourself if you can. I was able to convince one of my previous bosses that we needed to require unit tests because I was able to show empirically how few regressions my code introduced in comparison to another colleague who adamantly refused to write tests.
Code reviews.
Obviously I can't comment without knowing the specifics of OP's project, but it doesn't always even need to be 'a year or two later'. You could start feeling pain within a week, but the ability to connect those problems with all the hacks and kludges that were pushed up last week isn't always there. The absolute worst is when someone does a rubbish job testing, and the client ends up doing all the testing for them. Then the bad-developer looks even better to management since not only did they get their features out quickly, but now they're the go-to person for helping out their client.
Yes, that is very true. Luckily, I've usually been pretty good at getting management to notice short-term effects like that. The most trouble I've had is when too much time has passed. Even when I can show a commit log and show exactly why a problem occurred, if it's been long enough they often just shrug.
Dang.. I still don't have a smartphone. I like http://matthew.wagerfield.com/parallax/ personally.
`document.getElementById("...");` not `GetElementById`. Do your references advise for inline JavaScript? Because I would say that is generally a bad idea. "this" will not point to the right thing for one, and it could make your code less readable. The best online resource: https://developer.mozilla.org/en/docs/Web/JavaScript Are you into games? You could do a simple canvas game to get you started with the language. Or perhaps give Node.js a GO. *(badum tish)* I personally learned a lot of JS while using this library: http://threejs.org/ I did learn the basics. But I made massive leaps when I applied the new knowledge to examples I enjoyed working with. Go get inspired by this guy: http://codepen.io/rlemon/ And have a background tab open on https://developer.mozilla.org/en/docs/Web/JavaScript and http://stackoverflow.com/ Happy Coding.
You need to start learning how to debug a problem -- don't just be mystified when something doesn't work, find out why. It's an important skill to master. Start out by reading the messages in the console. The cause of the problem is usually there. Learn to write reduced testcases: remove absolutely everything that is not relevant to the issue until you're left with only the smallest example that won't work. By doing this you'll usually learn what's wrong, and if you don't you have something you can post here or elsewhere when you ask for help. A standalone, complete, reduced testcase (cf [sscce.org](http://sscce.org/)) is the gold standard when asking for help -- if you provide it, your chances of getting an answer are very high. 
 &gt;I don't let my students even touch jQuery until after they've had the fundamentals drilled into them and learned the DOM What would you say is a good online resource for that?
I think the guy (Tim something) that wrote jsgit talked about using git as a db when he was on Javascript jabber a while back. 
So you bullied him into leaving? Nice.
Put them anywhere but in the global space. Just add tem via a object with getters and setters.
So... var vm = MyPageViewModel(.arrays...); ? EDIT: to clarify, that will then pass that into all of my StudentViewModel instances.
Not working on ios/safari
i have someone on my team who can destroy something with a one line code change. then since it was my feature, i always get blamed for having buggy software. everytime I do the 'blame' its 9/10 that person who broke it. i just deal with it. i'm no js god, but i try not to break shit.
I'd love to help you out. Pm me.
Was going to write a comment about maybe introducing a new framework so everyone can be ignorant again and you could all learn together, and homogenize your understanding in the process. Will instead write about how it makes it difficult to be receptive to learning from people who apparently resent and look down at you, as opposed to people who want to help prop each other up. When you soapbox and send him articles about things you think he doesn't understand, and complain about him on the internet, these are all things that can feel hostile, like he's being condescended to. And that creates an environment where nobody's happy, he won't be receptive to your input, and learning won't happen. Take a step back, try to imagine what it's like to be him, and understand his motivations. Appeal to those. Be a friend. Maybe offer to pitch in on a side project of his, so you can pair together, instead of compartmentalizing and actively avoiding working on the same thing. Being a team doesn't mean asserting your dominance. If I were your boss, I'd be less worried about his code, which will generally always get better over time, and more worried about your attitude.
I've heard many good things about [JavaScript Allongé](https://leanpub.com/javascript-allonge/read), reading it online is free of you can buy the ebook.
I think the best resource for it is something that you make. If you can make a simple but not trivial html page, get some JavaScript to do a few things on a few objects in response to clicks, then you will be well on your way to understanding how those simple pieces of code you have written can be used within larger systems.
A global namespace is just a box filled with globals.
Hit me with your questions. I wrote JavaScript /AJAX for Dummies, so I can probably help you with basic stuff. PM for my email address 
Write your automated build so that your jenkins server fails if there is no unit test for a file or not enough test coverage. Your build should also fail if there are 3 layers of callbackhell. 
Performance of what? Are you accessing 7 global arrays from a Student viewmodel 60 times a second for 1 million instances of students in loop?
&gt; On a related note, there's also the chance that he's just okay and you are above average. If he does not understand this or prototypes in JS then he is not just okay.
Performance by prototype lookup is so fast that there will be no diffrence.. If there is, then javascript is not the correct lang for your problem. 
It's probably true that he wasn't a good fit for your team. But, you handled it like passive aggressive children.
My momma always said, "Life was like a box of globals. You never know what you're gonna get." 
His commits must be signed by him, right? Just show the management it is his code that broke shit.
There are a few good coursebooks out there; there's http://eloquentjavascript.net/ in class, which I liked, though I disliked its reliance on their own defined print() function instead of just using console.log() and asking students to open the debugger. New students will have a hard time separating what's included with the language and what's not. It's a fairly minor point compared to teaching javascript w/ jQuery as a first language, though. Most of my resources were just the MDN pages, which I'd always recommend as a first resource. I'd slap a student's knuckles with a metre stick if I saw anyone on w3schools :)
I didn't ever have such a situation in my experience but I can see one thing that might help you. Currently I'm part of a 8 person team that works on an app that is mostly javascript (though we do code parts of the backend, but the main thing is the front-end). We've started out with me and one other person, writing some examples and simple modules, set up some standard that we were trying to uphold when other people joined us. So we've managed to get new team members, and we've had some better or worse code produced but all within the standards that we established. Then we've got some advice from an advisor at our company, he reviewed our code, made some suggestions and we saw what we did right, what we did wrong. Now we're trying to make the new code better and better. In the meantime we've managed to set up a full blown scrum. So we included stuff to the definition of done - autmated ui tests, unit tests, manual testing on various browsers and code review. So basically now - if someone new comes to our project, if he doesn't want to write tests or write good code (by our understanding) - he can't get any task or user story completed. We've set the margin for at least 2 people to sign off on each and every commit for the review part, if it's a bigger/more important change, probably more people need to review it. As far as I know you can even set up many environments that you can only check in to a branch and it can only be pushed into master after code review has been done. I don't know how your project is structured, how you're working but if incorporating code review and writing tests into your process it will not allow that person to actually finish anything without the entire team being happy with it. You need to remember - it's not someones code, it's always the whole teams code. tl;dr: Incorporate code review and writing tests (which will also be reviewed) into your process, so that every change in the code has to be of an acceptable quality for the entire team before saying that some feature is done.
For me it's [Mozilla's Javascript Guide](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide). Plus the MDN also has one of the best javascript references, HTML &amp; CSS guides, best practices, browsers comparaisons/features ... 
not really. the picker is a class, you instantiate it by passing a set of elements to it. the $$('input') is an Elements collection of all inputs, for example). To attach it to say &lt;input class="input-xm date-picker" /&gt;, you'd do `new Picker.Date($$('input.date-picker'), { ... }); where the second argument is the options you pass in to override the defaults. attach is an internal API you shouldn't have to use unless you are trying to add more elements dynamically to your instance, eg. `var picker = new DatePicker(els); picker.attach($('someid')); // attach to another element.`. Here's a jsfiddle that will get you going using the bootstrap theme--see side for external resources. http://jsfiddle.net/SgGLs/ 
Lead by example. Suggest a standards/convention document. If neither of these work he probably doesn't care.
This sounds a whole lot like bullying: &gt; Myself and others started challenging him daily. At stand-ups, meetings, code reviews. Made him follow everything we set out to do, politely argued and put to vote all things he wanted to change / "fix" / "simplify". To have everything you are doing scrutinised is incredible demoralising. Being forced to defend every check-in makes you not want to do work (I know from experience). In general it makes for a hostile environment that you don't want to work in. Now this isn't to say this guy wasn't an ass and he didn't make things harder for you. The fact you failed to reach any kind of compromise and that this was your solution seems like you were just as bad as each other.
Every example I have seen for AniJS and similar tools have had very excessive animations. If you want to show the usefulness of the tool you should show examples with real world scenarios.
Not saying you are. Do you have anyone on the team that would be in a position to listen to your opinions? 
No more like 500 instances, each with ~10 places that check them.
WOW IT'S WORKING! You guys really helped me out here! Amazing! Let me explain what was going on and how I solved the problem with your help: * 1) I went to the [site reziiin gave me](http://aryweb.nl/projects/mootools-datepicker/Test/full.html) and took a look into the source code. Then copied the date picker script and realized that... * 2) ...I didn't use this line in my original code: **window.addEvent('domready', function(){** * 3) First I had the picker attached to EVERY input on my site but thanks to you guys I was able to insert the ID in **new Picker.Date($$('#date'), {** and now everything is doing what it should! 
Work with stronger developers. You should always have some say as to who you work with. JS devs are in very high demand right now. Either you should get more of a say in hiring decisions or find a new place that has higher standards
It's not theoretical or vague enough to be misunderstood: - Either they unnecessarily compromise my security by inviting a 3rd party, some of their employees, in-stream vendors (ISPs, MSPs), into my secure session or they don't. - Either they unnecessarily compromise my security with +N attack vectors or they don't. - Either they unnecessarily compromise my security with faith in 3rd party policies or they don't. You can only trust Google and Facebook's CDNs because you think they must be doing plenty of background checks on their employees, audits on their facilities, penetration testing, etc. Can you say the same for your bank, your hospital, or bitcoin wallet? Even at Google, Facebook, and Akamai - every person, every business, every facility, every computer, every networked device and every software package has vulnerabilities. There are more of those vulnerable things in your service when you use a CDN unnnecessarily than when you don't. And if you've determined that your service will die without globally distributed content, using a 3rd party is still a huge compromise of trust even if it's another giant, like Akamai. Policies are just legal protection, they don't actually stop anything from happening, they just put consequences in place. Criminals make a living by avoiding consequences. They make a living preying on assumptions. The datacenter can scan my retina, my badge and make me sign in. That doesn't mean I don't have malware on my phone, laptop or USB drive or that I'm not being extorted by someone. Every link is weak, so every link you add that isn't absolutely necessary makes your service weaker. All I'm saying is that CDNs are not a best practice for security. You can disregard that best practice for whatever reasons you like.
it's not just him. all merges to master are via a pull request from a feature branch that at least 2 people need to approve. `there is no I in team`, I know it's a cliché but he was given every opportunity to adopt styles/stack/workflow and it was explained multiple times why. he just didn't want to know. &gt; To have everything you are doing scrutinised is incredible demoralising. Being forced to defend every check-in makes you not want to do work (I know from experience). In general it makes for a hostile environment that you don't want to work in. peer review of code is not meant to be demoralising if done right, it's helpful to produce the best possible quality that everyone can read, understand and maintain. nobody is exempt from errors. reality is that most PR comments are superfluous like 'shouldnt you rename this to something more meaningful' or 'I would rewrite this to be positive rather than negative so it reads better' but every now and then, actual problems are spotted. I have learnt most by being corrected by others as well as pair programming. It does not matter, though. If you join a place where there is a set standard as a non-architect, you follow it. If you have problems / suggestions, you bring them up for discussion and accept the decision of the group. 
It seems like I got a little follow up question :) I want to edit the language and date format. The doc already told me the right snippets, but I don't know where to put them: I got * window.addEvent('domready', function(){ new Picker.Date($$('#date'), { timePicker: false, positionOffset: {x: 5, y: 0}, pickerClass: 'datepicker_dashboard', useFadeInOut: !Browser.ie }); }); and I want to include: * new Date().format(date, %D.%M.%Y); * Locale.use('de-DE'); If I include them right below **useFadeInOut: !Browser.ie** it's not working.
Sounds like a guy I worked with at my last company. At least your guy didn't cowboy his "fixes" in the middle of a sprint that the rest of the team had to clean up, recommend a ton of scope creep in the middle of a sprint, or write code that not only was bloated but introduced a number of security issues like eval-ing a form field. Even worse, all his suggestions were that we move to Wordpress or introduce features for him so that our app worked more like Wordpress; it got to the point that the running joke in the office was starting sentences by saying, "In the Wordpress world..." Management figured out he was clueless, but kept him on as a designer -- which was no bueno, either; all we heard from him up until he quit was, "I could implement {some 144-point story} in five minutes, but... I'm only a designer." He eventually quit when we told him that pushing untested code to production was a bad idea, where he responded during stand-up the next day by telling us, "You're the most unprofessional people I've ever worked with." Then again, most of his work experience prior was freelance, and I hear now all he does is tend to his avocado farm up north somewhere; so, it's safe to say I've been taking his statement with a grain of salt.
Sweet, thanks!
Best book I've read on JavaScript is [Functional Javascript](http://shop.oreilly.com/product/0636920028857.do)
Write good, clean, maintainable code, and ask him to do the code review. This gives him a chances to see what good js looks like, and ask questions about the parts he doesn't understand, all while giving the appearance that you respect his professional opinion and want his help improving your code.
Pull requests and code review. Become his mentor.
Pay structure is currently being built. But the current place holder is competitive for teachers. Content writers won't get paid since their content will not be offered as a pay service. It's just to build the community. Teachers will be asked to make tutorial videos, articles, and conduct classroom style webinars.
&gt;I don't let my students even touch jQuery until after they've had the fundamentals drilled into them and learned the DOM I kind of disagree with this. The DOM is such a horrible API, in an alternative (but better) universe the DOM would be a lot more like jQuery.
Quick look at googleImageSearchService.js, your getGoogleSearchService function definitely needs to be refactored into smaller functions. Either adding them to your factory object or keeping them private inside the getGoogleFactory function scope. Also you can look into JSDoc style to add comments to your code.
How would a C/C++ developer know about JavaScript's prototypes?
I believe a programmer with five years of experience could be called senior.
Thanks! I'll take a look.
Hmm, pull-request workflow seems pretty non-agile and bureaucratic. In my opinion it could work well with "mature" applications, or applications that have critical security considerations. However, I wouldn't push for "typical" software projects. I atleast like working as a team, where multiple people may work on a single feature, and typically many of the features being implemented during the sprint have dependencies. We do have a code review for each story/issue to improve code quality. The issue can be rejected if there are any review issues (and often the reviewer fixes them by himself).
I was in a similar situation at my previous job. I had a lot of similar issues with the only other developer, who was senior to myself. He was self taught after having a background in Java. A laundry list of issues: * Limited use of design patterns * Limited understanding of scope * No understanding of prototypes/inheritance * No unit testing * No linting * Refusal to use libraries and frameworks outside of jQuery/jQuery UI * No minification in production Ultimately I decided to move on as it was an uphill battle that I couldn't win. If you don't have the allies at work to support your views, it will be a struggle to change the way your company works. Issues like code quality, testability, and modularity need to be enforced at a management level, and if your management can't recognize them, they can't prioritize them.
And did you experience slowdowns for such a minuscole number because of the global property lookup?
I see every day code full of tests and badly broken. Are you really sure that your code is better than his code?
Sounds like a case of "my way is the right way". Maybe you should focus more on your own work and less on belittling your colleagues. 
Sure, it can be a pretty verbose and clunky - having to Array.prototype.somefunction.call() your NodeLists all the time because the NodeList.prototype is so limited is one thing I really tire of typing out. It's not really about the quality of the API - I think jQuery is a fine library and use it often, but it needs to be used properly and a new developer won't understand how to do that until they've learned the fundamentals of the language. Devs who start with, or go back to study js in earnest will write much better code with jQuery than those who don't understand that jQuery !== JavaScript.
YES! JavaScript: The Good Parts and Functtional JavaScript form the old and new testaments of my bible.
Lots of people like vertically lining up various patterns without extraneous space, and using only spaces prevents the horrible issues that come with mixing the two. The "Alignment" Sublime package is something that is built specifically for this purpose. (which works great with multiple cursors)
Pretty sure it doesn't behave like a class, though, even if it may look like one at first glance.
This takes premature optimization to new heights
Ever try and take him out to lunch or something to discuss the awesomeness that is JavaScript? Maybe he just doesn't find it interesting and it causes his code to be weak. I think if you guys could nerd out about it, that would up his game. And if you can't, you'll know he's generally disinterested and then you can encourage him to become a rodeo clown.
&gt;Prototypes are class declarations and you instantiate them with the new keyword. I don't think that describes JavaScript's prototypes. At the basic level [prototype is a link](http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/) to another object, and these objects form a prototype inheritance chain. There are similarities to how classes work, but they're strictly different from class-based inheritance.
OP: "Im curious, has anyone ever been into a situation like this?" Everyday, my friend. Every-goddam-day!
demo link?
I was curious, [so I made one](http://jsfiddle.net/XJC6z/). Seems to work. Edit: I'm running Chrome 37.0.2062.44 beta-m
It will always look the same. The code in the commits does not change, right? It is there, out in the open, for everyone to see.
Yeah. But when you are the only person pointing this sort of thing out. You look bad. Pure and simple. 
Does not work in ChromeOS running official Version 35.0.1916.155 
Then there is something wrong with the company :-) Someone is blaming you. You point out this is it not your fault and have proof in the commit history. Then you fix the stuff. And then you look bad? Really, it is not the same everywhere and the culture at your workplace is just toxic then.
Chrome 36 and I've got nothing: http://f.cl.ly/items/3X2I3F2v2I1l3A2R3F0X/Screen%20Shot%202014-07-26%20at%204.33.01%20PM.png
Yes, we deal with it. A lot of this can be dealt with by having frequent code review sessions, and setting a best practices standard among all team members. In order for that to work, be sure to do this in a meeting, not by sending them emails or links to articles. I've found code review sessions really effective in getting everyone "in the fold" when it comes to coding standards, because the team can see examples of good and bad code, and actually get to see it in action, rather than reading some convoluted article that's hard to understand. Show him/her how to implement good practices, don't just hand them a resource and hope they get it.
A tiny library: https://github.com/cferdinandi/smooth-scroll Or this snippet: http://css-tricks.com/snippets/jquery/smooth-scrolling/
No, it is not deprecated. ShowModalDialog global function and html5 modal element are two different things.
I'm just saying I see them break it with every commit. and my boss usually gives them bug fixes for my features. If I complain about every single commit they do, yes. I do look bad after awhile. Doesn't mean its right...but I just avoid it now. I leave their broken shit in the codebase until someone else finds it.
I agree with this. Our company handles all commits with GitHub pull requests. Nobody is permitted (although not technically prevented) from merging their code directly to master.
I am the senior developer at my new job, so I can prioritize code quality and accountability. I realize that there will always be room for improvement on one's workflow, but I keep active looking for what's up and coming for development processes. There are places that are willing to give you lots of control, but it comes with lots of responsibility. If I don't maintain good practices, I'm the one who takes the heat.
Meetings are invaluable. Being able to talk through an issue sheds a lot of light on why best practices are just so much *better*. I talked a co-worker through the reasons to use callbacks instead of nested, hardcoded, high-complexity methods. In the end, instead of brushing the idea aside, by voicing his concerns, we were able to talk through why they weren't entirely valid.
...
&gt; I know the implementation is different, but from the end point of "call function from a 'class'", it works. I think you're confusing the concept of 'object' with the concept of 'class'. You're not calling a method of the class in JavaScript, rather you're calling a method of an object. There are some languages that actually allow one to call methods on the class, for example C#. They're called 'static functions'. Class is simply used to define a.. 'class' of objects. You can think of it as a type definition. Using it one can create new objects of this type. Classes by themselves are not that useful, but once you add inheritance you'll start to get the true benefits of object-oriented programming with classes. Prototypes are just a different solution for providing inheritance in an object-oriented programming language. One could also in principle construct an object-oriented programming language without inheritance, but I can't recall off the top of my head any examples.
Have you thought about adding named parameters? For example: route.add('/store/:category/:id?', function(req) { console.log(req.params.category, req.params.id); }); There are few routers out there that do this. That could give you a leg up. Also, I'd suggest submitting your project to [microjs.com](http://microjs.com). Good luck! :]
This only works in Chrome 37 which is in beta. Also no working demos is a huge pet peeve of mine with web dev related blog posts.
The create_xor function could heavily benefit from a different data structure. I think you would find a heavy improvement in performance if you treated the chitab array as a BST or a priority queue and performed sorted inserts. I've added some pseudo code here since I don't have a good BST project you could use (maybe implement your own). The second for loop, just walk the tree in-order or pop from the priority queue using a while: https://github.com/louischatriot/node-binary-search-tree https://github.com/adamhooper/js-priority-queue For example: for (var i = 0; i &lt; 256; i++) { if (distrib) { insertIntoSortedTree(chitab, {key: i, sortVal: Brute_Decrypt._chisqr(distrib, Brute_Decrypt._distrib)}); } else { // This could be further optimized to append to the end of the chitab array insertIntoSortedTree(chitab, {key: i, sortVal: Brute_Decrypt._chisqr(distrib, Brute_Decrypt._distrib)}); } } var key; // Loop tree low to high (do not use this 'for') for (var i = 0; i &lt; n; i++) { key = chitab[i].key res[i] = { key: key, value: chr_list(Brute_Decrypt.encode_xor(key, xs_)) }; } return res; This way, you don't have to splice copy into another array and sort it. Take this with a grain of salt, somethings may work better, some not.
Great idea, thanks. I've been trying to work out how to solve the problem without having to sort the chitab array and this is a good solution. 
No problem. After a second thought, I'd try the priority queue first since it seems more appropriate and if you set the size of it to 'n', it will purge out items that are deemed unnecessary by checking the last item in the queue. Found a good library that has both: https://github.com/montagejs/collections Use deque and sortedarray. Should be quick to try out.
&gt; Please use latest Chrome or Firefox FF 31.0 not newest? weird. Anyway, it is cool but a bit magic people won't expect. So you trade readability for confusion and what?
A question about API standards. As the powers that be have opted for the method show() to display the dialog should its antithetical not be hide()? I would have assume close() as being the opposite of an open() method. And why is the option for a dialog modal separated to completely new method as opposed to being just an argument passed to show()?
Apologies for this. I was in a bit of a rush, I'll get a demo up or at least link to one tomorrow
No, they really can't, not with any credibility anyway. 10 years minimum. The web development world is chock-full of expert beginners and I've seen plenty of them be stumped by the things a *real* senior engineer would call childs play. It simply is not possible to fail enough in 5 years to know what not to do, which is the hallmark of a senior developer - they have paid their dues, they have seen what doesn't work and know how to avoid it. 5 year engineers no matter how succsessful do not have the experience to be called "senior", not even relatively speaking.
I am confused... What is the use of a JavaScript parser that needs a JavaScript parser to work?
I'm a fan of this guys tutorial, super thorough and well documented. Probably too large for an hour. Maybe it will give you an idea though. http://sahatyalkabov.com/create-a-tv-show-tracker-using-angularjs-nodejs-and-mongodb/
lol
Thanks much brotha
awesome, that means a lot. I am a little busy moment so will shoot you a PM and a friend request then follow up from there. thanks
This is great advice. When you meet people who have problems with something you understand, try to be patient and help them learn what they need to get past their hang-up. I try my best to be that way because I have been the noob so many times and will be the noob again another thousand times.
It's about developer tools (Firefox DevTools use Acorn), build plugins, code analyzers, etc.
Setup a Sonar server and have management/QA use it to block a release if the code quality is low. [SonarQube](http://www.sonarqube.org/)
I'm using a library which provides this feature among others. I'd use the official way if there seemed to be any transition ability. My dialogs fly down to the screen, but it seems here HTML dialogs just appear and disappear.
How so?
There likely is a way to do it, but I'm sure that hiding the advertisement will be against their terms of service. You'd be better looking for a different, possibly paid, host.
I got asked the difference between Object.create and "new" in my interview 
Actually it's more like Russian dolls that eventually end up containing a global and it turns out opening the dolls to find the right one takes time ;) 
There are two sides to this. If you have very deeply nested functions there is a scope property chain that must be looked up from within your inner functions until the variable is found attached to window. If you namespace and create a deeply nested object that chain also must be traversed. However, based on some of the other comments, I highly doubt any of this would cause serious performance degradation. Any chance we can see the code, or even heap snapshots and output from the profiler for the behavior where the slow down is occurring? Or did you just read from jsperf that global lookups are slower (they are, but being the cause of slowness in a Javascript app?... There is a metric ton of other shit that is more likely to be the culprit). 
What is the page? I'm sure you could hide it using CSS. If not, some JavaScript ought to do it. 
Link to the page in question? You may not even need a script. You might be able to do it with a css declaration.
 #ads { display: none; }
exactly. just because you can doesn't mean you should.
Probably better to find a host that doesn't force an ad onto your page. Simple hosting like this can be through GitHub:Pages or setting up a thing on Heroku.
http://about.jackgobbephotography.com/about.html
http://about.jackgobbephotography.com/about.html
http://about.jackgobbephotography.com/about.html
Hopefully libraries will start to use the native api when it's available. Animated transitions should still be possible to use.
If you want to write tools that operate on JavaScript source code -- static analyzers, code refactoring tools, syntax highlighters, minifiers, etc. -- you need something that parses the language. It's not relevant that this parser is also written in JavaScript. Many people find it natural to write their tools in JS, for example: JSHint, UglifyJS, Traceur, js-beautify. 
 img[src*="5gbfree"] { display: none; } Pop that in your CSS and it will be gone. You don't need to worry about the div and anchor, as they're dependent on the image to take up any space. I will say that if you're using someone else's hosting, it's a bit low brow to hide their advertisement, but in this case it is huge and ugly.
My pleasure :)
Thanks. That was very useful.
When you say "best practices" I get the impression that you mean what you consider best practices, not what has been formalised by the company you work for. If I'm correct in assuming this, there is a big problem with your approach. If there are rules that apply to everyone, they should be followed and you should approach people who don't in a polite manner. If there are no rules yet, everyone should be involved in making the rules (if only by mandate) and everyone should agree to follow them. You cannot expect someone to take responsibility for something they have no control over.
Stuff like Browserify or Webpack would make use of Acorn during the build step to find `require()` statements and restructure code. 
If you like spams, here is mine: I find Eloquent Javascript to be great. But, to be honest, i haven't really understood javascript until i learned scheme. It is [SICP](http://mitpress.mit.edu/sicp/full-text/book/book.html) which taught me the notion of static scoping. It even have a chapter on signals which are very similar to events in Javascript. after reading most of the book, i was fascinated to find that the SICP video series was recorded and [freely available at youtube](https://www.youtube.com/playlist?list=PLB63C06FAF154F047).
Yes.. But the low hanging, low risk fruit are definitely worth exploring first :) 
This is exactly the point. You should be sure that also your code is broken, like every one's code. It is broken just in a different way, that you can't see yet. Thinking to be superior to others is a mind-trap, expecially when working in a team.
If the properties of Brute_Decrypt starting with _ are supposed to be "private" variables, you can hide them with a closure. Also, BruteDecrypt is better than Brute_Decrypt. &gt;79: while (i &lt; len) { I would use for-loop here for increased readability. I'd also run this through JSHint/JSLint.
Neat, with %o you don't need to write JSON.stringify all the time.
You could watch some Youtube channels like Webdirections, Google developers, New Circle, etc. 
Yes, it is optimised automatically by the browser now, but I do not know which particular minimum version that have it. I personally had a template for this commonly used script to ease typing; so I do not need to bother whether this micro optimisation no longer needed or not, I always using the same template over and over again.
You have your own domain but have no control over the appearance of your own page?
Is it supposed to be faster with Web Worker? Because it's sorting faster without for me.
You're not doing anything with the value in the loop. That means you're just measuring the time it takes to do nothing, which means any minuscule variation will be amplified and appear significant. You're measuring noise. And I notice that on the later revisions when you use a real array instead of a live `NodeList`, the difference goes away. I so hate this infatuation with micro-optimizations. If you are doing something where this could possibly matter, then by definition you don't need to worry about optimization because whatever it is that you're doing is so slight that it won't matter either way. 
Very cool video. Is there a way to load jquery in chrome as there is kn Opera?
&gt;Your browser sorted 50K Array **without any crash or lagging**, because your browser supports Web Worker. When you do a job with Web Worker, **it's just like when you run a program in another thread**. Also you can see the animated progress bar while sorting. The goal is not to make it faster.
Speed shouldn't be affected much in this case. A web worker is just like another thread, they exist so you can continue processing something without affecting user experience (i.e. lagging the browser/rendering). A better example would be something like this while also trying to interact with the page in some way, probably.
Oh, that makes sense! Thank you.
Gotcha. Thanks for clarifying.
I love Paul Irish! [His talk last year](https://www.youtube.com/watch?v=f7AU2Ozu8eo) about workflow is worth seeing if you haven't already. 
Cool video. But I'm extra curious what kind of chair he uses. Looks like a relaxer?
I find myself doing console.log(var2, varx) a lot. 
It only works in Chrome 37 (beta) right now. 
I see. Obviously I'm not advocating wildly polluting the global leader names pace, I've just never heard of that being a serious performance issue. 
Why don't you have unit tests and have your git repo refuse commits if they don't pass?
Code reviewing would mean that everyone would be looking at everyone else's code. As long as the OP doesn't think he himself is above a code review.
not as easily, you'd have to copy/paste the script
Too bad - looks like a smart feature
hm, interesting. Webworkers did it a bit faster on me. I got **without**:8361ms , **with**:8312ms What cpu, browser, OS are you using? I am on chrome, win7-64, phenom x4 955
Google for the "jquerify" bookmarklet. It'll inject jQuery into any page that doesn't have it.
I have a Mac OS X 10.9.2 with latest Google Chrome.
with all the alternatives like zepto and jqlite, being partial to jquery doesn't make a lot of sense. a greesemonkey script or something could be done by the dev to automate this type of thing quickly.
I'm guessing there may be significance to the way they say it, "built with ember" not "built on ember".
Can I get it too, please?
Can you read? &gt;Your browser sorted 50K Array without any crash or lagging, because your browser supports Web Worker. When you do a job with Web Worker, it's just like when you run a program in another thread. Also you can see the animated progress bar while sorting.
ITT: People that can click buttons but that can't read.
`$0` is handy when using Angular too, seeing as you can use `angular.element($0).scope()` to get the current element's scope. Sure you can use angular's dev tools extension, but its still a pretty handy thing to do.
you will very rarely ever find a race condition bug using the debugger... but they're easy to spot with log
This video is about 3 years old now, there have been even more useful additions to the dev tools, my favorite being console.table. Check out https://developer.chrome.com/devtools/docs/tips-and-tricks . 
It definitely lagged for me on the "without" option (~5200ms), it locks up the entire tab. Remember, the goal of web workers is to offload intensive tasks (like this array sort) to another thread where it won't lock up the browser. 
Don't forget y'all released your Flux dispatcher! https://github.com/facebook/flux
One thing that puzzles me: I thought most browsers wouldn't let a function or event handler block the UI thread for anything more than a certain amount of time. But on my machine, performing the sort synchronously blocks the UI for a good six seconds. Under what conditions do most browsers abort events? BTW, another thing about web workers: they don't get in the way of setInterval or onTimeout events. Ideally these should be written so that calls can be dropped anyway, but if you're working with something written naively (legacy or third party, maybe), your timed code may behave much better if you're pushing stuff to workers.
NYtimes is known for its striking D3 visualisations. Very impressive
One of the founders Mike Bostock works for NYtimes
They are if you assign part of the sort to each thread. =) This demo just swaps the entire sort to a new thread, so animation isn't fucked.
IE11 on my Windows phone 8.1. With took 39s, browser worked without issue, no lag, rendering still worked. Without took 33s, browser worked without issue, no lag, rendering delayed until sort finished (as expected)
mike bostock is the best at this, I'm pretty sure all of the source code is kept hidden
I right-clicked on one of the star-leaf things, and clicked Inspect Element. Then "Break On" &gt; Attribute modification Then just scroll to make the animation happen, and look at the code that's running. Most of it is obfuscated but there are a few method names that aren't, and they seem to match up with method names in d3. Other comments in this reddit thread seem to confirm :)
As far as I can tell it's basically just interpolation between the star shape and the leaf shape, using some d3 function which does such things, I suppose. Probably not that complicated, really, but it would have been cool if they'd open-sourced it.
370 ms here: https://i.imgur.com/gDPMPRe.png?1 This is actually really cool, maybe someone made a polyfill that will fallback to normal behavior if WebWorkers is not supported?
Exactly, I created the example using progress-bar to show the busy time of the browser while performing the bubble sort algorithm.
which browser/os you're using?
Linux + ff on my gamer pc, way to op
/r/learnjavascript &amp; google would be a tremendous start Plus there was literally an identical post about this yesterday http://www.reddit.com/r/javascript/comments/2bqlra/whats_a_good_js_book/
Nice; the scrolling is a bit janky for me though though. I wonder if canvas shapes would have performed better. Also, open up the console on the page.. &gt; NYTimes.com: All the code that's fit to printf()
Do you know your distro, CPU, and FF compile options? I'm getting 3600+ ms on my Linux + FF, and am curious about the order of magnitude difference. (For comparison: FF 30.0 on Gentoo w/ CFLAGS='-march=native -O2' (no PGO); CPU is an AMD 1045T that turbos to 3.25 GHz)
I would start using a different color space then rgb. 'Interestingness' of colors is better based on hsl or similar. 
Should also work correctly on IE10 on mobile. 
This worked out perfectly, thanks!
Eventually I'll probably convert to LAB color for comparisons, but this is just a proof of concept, so far.
Already in the process of learning emberjs but I've signed up.
When I read the comments, every single one was "what is the point of this" or "are web workers supposed to be faster" All they had to do was read the text that pops on the screen when the array is finished getting sorted.
Thank you! I'm building the first release of content now so you'll see it in your email as soon as I can get it all compiled. If you had to say, what is your biggest Ember question currently? I'm running this question on [Twitter](Http://twitter.com/embersource) now and the top 3 will get a nod in the first release.
Looking at "Sources" in the developer tools: &gt;http://a1.nyt.com/assets/interactive/20140717-220809/js/foundation/lib/d3/3.4.4.js I was not able to find in a quick search through a few js files whether or not it was being used for that visualization. They use d3 with all the visualizations I've seen on their site and it doesn't make sense you would load assets and not use them.
They could be if: 1. Your operation can be made multi-processor compatible 2. The browser supports executing webworkers on multiple threads. As it stands now, using the UI process will only always ever use a single thread and thus a single CPU core. Given that multicore processors are now the norm, it's likely that using webworkers properly will net you performance gains. Not with a bubblesort, of course, but use a SMP-friendly algorithm like Mergesort and you can really see the improvements.
By specifying the stars element polygons of a star vs. potleaf (directly in the html; look after the flag nodes for #begin and #end ids), d3 can select them and then use the points provided by those SVG polygons and create new paths that can be transitioned from one to another. You are correct in assuming it is path interpolation. Looks linear in nature. http://graphics8.nytimes.com/newsgraphics/2014/07/23/canadian-election/71ffb8856981b0e8b02b3ad90acdd769e10d45dd/build.js Loop to create the stars object: _.each(rows, function(row, index){ if(index === 0){ for(var i = 0; i &lt; self.config.stars[0]; i++){ var s = $(row).find('.star'); self.stars.push( new Star( s[i] ) ) } } else { for(var i = 0; i &lt; self.config.stars[1]; i++){ var s = $(row).find('.star'); self.stars.push( new Star( s[i] ) ) } } }); The stars object: define('Star', [ 'jquery/nyt', 'underscore/1.5', 'd3/3' ], function($, _, d3){ var Star = function(el){ this.begin = d3.select('#begin').attr('points'); this.end = d3.select('#end').attr('points'); this.poly = d3.select( $(el).find('polygon')[0] ); }; Star.prototype = { transitionTo: function(callback){ var self = this; self.poly.transition() .attr("points", self.end).attr("fill", "#FFFF00") .delay(750) .duration(1000) .ease("linear"); }, transitionFrom: function(callback){ var self = this; self.poly.transition() .attr("points", self.begin).attr("fill", "#FFFFFF") .duration(1000) .ease("linear"); } } return Star; });
No real pressing questions on my end. Would be nice to see more tutorials out there that do something besides a todo list app though. Although I have somewhat figured it out now, it would be nice to see more tutorials out there that involve advanced ember concepts like sharing between things controllers, components and mixins and advanced examples of components and mixins generally speaking. I've found there is definitely a bit of a gap between "straight-forward" ember concepts and advanced usage of these concepts. I've been learning emberjs for the past month or so.
[That explains this example from the D3 home page.](http://www.nytimes.com/newsgraphics/2013/09/13/fashion-week-editors-picks/)
It could mean they're only partially built on ember. So, just a widget, or just one page, not the entire website. I've found that to be the case most of the time you hear about a high-profile website using a heavyweight javascript framework.
Exactly, I think I should use another style to show the text!
It was pretty obvious to me, not sure how people didn't see it...
Yay! Thanks for the analysis!
14 seconds for either with Mobile Chrome on the HTC M8
We've built some tools for working with APIs you might like: https://www.runscope.com Also, hurl.it
A few quick tips: * Free online books on JavaScript: http://jsbooks.revolunet.com/ * There is a list of JavaScript user groups: http://communityjs.org/ * Use Twitter, it’s especially useful in the web development community More information: my blog post “[A JavaScript survival guide](http://www.2ality.com/2014/07/javascript-survival-guide.html)” is for people who already know another programming language well, helping them get started with JavaScript.
There is no single book that will take you from 0 to advanced. Becoming advanced only happens after using the language and building things for a few years. After reading some of the introductory books, check out The Principles of Object Oriented JavaScript, JS Patterns, and Eloquent JavaScript. Those are more advanced.
Installing http://trackjs.com/ was pretty eye opening.
I got frustrated with existing E2E tools so I wrote my own. 
"See if it works"
As /u/kenzor says it depends on how the data is returned. Here's a basic tutorial on flask and ajax w/jquery http://flask.pocoo.org/docs/patterns/jquery/ 
We use GEB, for unit tests and end to end tests. It's tests are written in groovy, integrates with many testing frameworks and has different drivers for different browsers. It's working really well http://www.gebish.org/testing
You have to bind to the button's click event as well. $('#button-id').on('click',updateTable);
None for my current project. Autotests with selenium for my previous project (we had a dedicated tester in the team who wrote them). 
Some pretty big name websites are built with Ember. Why not try and emulate some of their features? Twitch.tv is one of those, why not try and copy some of those features? * Registration process * Login ( storing use info ) * Profile page (show users channel if it exists, show subscribed channels) * Search Channels * Create a Channel * List existing Channels * Suggested subscriptions * Infinite scroll of channels. Also, try for a stream lined build process. * Precompiled Handlebars templates * Minified css / js *et. al* * Unit tests I think this type of side project would introduce you to all of the great bits and hairy bits of any framework. *Edit: markdown formatting*
I realise it's answering a slightly different question to that which you asked, but I have learned a tonne about how to write good Ember code from reading the [Discourse](https://github.com/discourse/discourse/tree/master/app/assets/javascripts/discourse) and [Balanced Payments admin dashboard](https://github.com/balanced/balanced-dashboard/tree/master/app) source codes. A sample app won't reach the scale and scope of a production app, so it's much more useful to look at other folks' real code, imo.
Awesome work!
Aha. It was only the second one failing, and it was because some of the table data elements were currently empty i.e. &lt;td name="result"&gt;&lt;/td&gt;. I put padding &amp;nbsp; in to fix it, but I should probably try and figure how to make the code more robust!
Thanks Rhomboid. How should I be coding it?
The browser where the JS/jQ is ran has no idea what language the server is using. The browser makes a request in plain text and the web server with the help of scripts respond in plain text. They do **NOT** interact differently with each other. You're probably overlooking a programming error. Make a data structure in Python, encode it in JSON, then print that out.
Sure, as technical feat it is pretty cool. Maybe combine with sweet.js for some extra insanity.
I would suggest a hybrid approach. Use unit tests for wherever there's calculations or similar stuff that has edge cases and can be isolated from a UI interface and use E2E tests for whatever that is not covered by unit tests or more.
Like /u/mikrosystheme said, Backbone is more to the metal meaning, it doesn't give you much and you're pretty much on your own which as a result gives you a lot of freedom. Backbone also has much smaller footprint than Angular or Ember. 
 if(!node.hasChildNodes()) continue; 
What would be a better way, to return it as html and just insert, or construct with jquery. The first options seems like something i could pull off with my knowledge, however second one seems difficult, but probably better. Where could I learn how to construct a table with jquery by parsing json.?
You could try building the app I take you through in my tutorial: http://ember.vicramon.com It's decently complex.
Did it work? :D
Using [Capybara Webkit](https://github.com/thoughtbot/capybara-webkit), since we're running Rails on the backend. But it's pretty unreliable - lot of non-deterministic feature specs when JS is involved. Also use [Bugsnag](https://bugsnag.com) to catch JS errors on production, but not enormously helpful since everything is minified, and getting sourcemaps on production is... difficult at best. Haven't found a really good solution unless you're using a proper framework like Ember, Backbone or Angular, and rewriting is just not in the cards for us right now. Hoping to see some ideas in this thread :)
If getting a HTML response is the way you are most comfortable then go with that. You would need something like in your html: &lt;a href="/your/data/url" id="yourButtonId"&gt;Get data&lt;/a&gt; &lt;div id="yourTargetId" style="display: none;"&gt;&lt;/div&gt; Then in JS: $( '#yourButtonId' ).click( function ( e ) { e.preventDefault(); var $target = $( '#yourTargetId' ) $.ajax({ url: $( this ).attr( 'href' ), type: 'get', dataType: 'html', success : function ( data ) { $target.html( $.parse( data )).show(); } }); }); I've just written that off the top of my head so there may be errors, you'll need to debug as necessary but that should be enough to get you started. Change the A href ID and URL as necessary, as well as the id of the DIV that will contain the table. The basic run-down is this: * Assign a click function to the A link * When link is clicked don't do the default thing (which is to follow the link) * Make an AJAX call to the URL of the A link and expect a HTML response * Populate the DIV with the HTML returned and show the div. Also you should include error handling for when your AJAX call fails. Edit: just realised you're trying to submit a form. This would be better: &lt;form action="/your/data/url" id="yourFormId"&gt; &lt;select&gt;&lt;option value="something"&gt;else&lt;/option&gt;&lt;/select&gt; &lt;input type="submit"&gt;Filter&lt;/input&gt; &lt;/form&gt; &lt;div id="yourTargetId" style="display: none;"&gt;&lt;/div&gt; Then in JS: $( '#yourFormId' ).submit( function ( e ) { e.preventDefault(); var $target = $( '#yourTargetId' ) $.ajax({ url: $( this ).attr( 'action' ), type: 'post', data: $( this ).serialize(), dataType: 'html', success : function ( data ) { $target.html( $.parse( data )).show(); } }); });
Hah! That's what I wrote in my reply, but it didn't come out like yours did! Guess I needed the quotes. Thanks.
Are you familiar with Google? I don't mean to sound unhelpful, but this sort of thing is easily discoverable.
it did not.. the 64-bit environment didn't seem to like it
the whole point of using a library or framework is to reduce the number of choices you have to make. Each choice you make is an opportunity to choose wrong, and adds risk to your schedule.
As someone who uses both angular and backbone a decent amount each week, I don't think you should learn backbone unless it becomes relevant to you professionally, or for some reason it's the best solution for a personal project. Growth as a programmer can come in a lot of ways, from learning more about our software, to new frameworks, new languages, etc. Were I in your shoes, I'd maybe be looking more towards developing skills in functional javascript unless youre already very well equipped in that way (check out the book javascript allonge, which you can find free to read somewhere online. Or pay for it because it's awesome and worth paying for). Dabbling in a new language, specifically Java or Haskell (for very different reasons) might add more to your effectiveness as a JavaScript programmer than actually just writing more JavaScript. I know in my case, both of those languages have made me a better JavaScript programmer. I don't think you're likely to run in to a job opportunity that says "I see you have a lot of experience with JavaScript and front end JavaScript frameworks, however your lack of experience with backbone disqualifies you from working with us." On the other hand, knowing a functional programming language will not only equip you with skills to frame problems differently, but shows an affinity for self teaching and a broader interest in programming/computer science that many interviewers will appreciate. Cheers
Thank you very much for response. Can i drop you PM if i face some hard problems trying to implement this?
I wonder why this other guy had showstopping perf issues in Firefox when using rAF with scroll mechanics: http://www.thecssninja.com/javascript/scrolllistview
For unit tests, [Jasmine](http://jasmine.github.io/2.0/introduction.html) with [Testem](https://github.com/airportyh/testem) We have a moderately-sized Backbone + Marionette app, so we try to write tests for the model-level stuff and the request/response stuff. For acceptance tests, [Protractor](https://github.com/angular/protractor) with Chrome or [PhantomJS](http://phantomjs.org/) These are a little less structured, but it's basically: go to a page, click something, "expect" something to happen.
I love Ember.js. I'm sure I'll be in the minority but that's probably because it has a relatively steep learning curve. I love Ember so much I decided to start a business based on it. Once learned, it's truly magic though.
[**@GNUmanth**](https://twitter.com/GNUmanth): &gt;[2014-07-28 15:06:19 UTC](https://twitter.com/GNUmanth/status/493774458318909443) &gt;var die = {inlimbo: function(){ return die }}; &gt; &gt;die.inlimbo() &gt; &gt;[#javascript](https://twitter.com/search?q=%23javascript) [*pic.twitter.com*](http://pbs.twimg.com/media/Bto9QInCcAESK26.png) [^[Imgur]](http://i.imgur.com/wJjSEq8.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2by7cv%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
What abt Backbone.js Already started learning it, but not sure about it.
You can learn the majority of backbone in a single day just by reading [the annotated source code](http://backbonejs.org/docs/backbone.html) and a few [good examples](http://chipersoft.com/intro-to-backbone/). So given that, what do you have to lose? While Backbone isn't that great for single page applications (at least not in the way that Ember or Angular are), it is fantastic on progressively enhanced multi-page sites when you just need to organize the jQuery presentation logic for distinct page components. You don't need the full 90k of Ember when all you're doing is responding to some click handlers and performing basic ajax calls, but having Backbone's view and model classes to organize that logic can make it much easier to maintain. And then when you [combine that with RequireJS](https://github.com/ChiperSoft/mash.li/blob/master/srv/public/assets/js/lib/require-components.js) to load that logic automatically based on markup, things get very shiny. Edit: fixed the link
#I assume you meant Ember, and it all depends on the size of your app. Backbone would be great if the app will stay small, Angular are made to handle larger projects well with. I personally only started researching this myself and have decided for Ember myself, but I recommend reading this [article](http://eviltrout.com/2013/06/15/ember-vs-angular.html?utm_content=buffer8cd40&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer) to make your decision. 
Angular.js
It is probably a timing issue. Most testing tools have a real hard time dealing with the asynchronous nature of resource loading, animation and event handling.
Well that's not unobtrusive at all. I assume English isn't your first language? Also, there are plenty of tools out there to do this and much more like backbone, ember, or angular. 
Casper and Phantom. I've run into some oddness but overall I'm happy with it. 
It looks pretty good.
If you don't have any luck with returning HTML take a look at the [JSON to table](https://github.com/jongha/jquery-jsontotable) jQuery plugin, it should help with rendering the table client side. 
you could possibly render one list like normal, use a knockout template for the other, and when JavaScript is enabled, delete the first one
WTF? No one here does unit or functional testing? How the hell do you manage regressions then? The team I'm involved with uses the Mocha harness with Chai assertions. We test PUBLIC interface only (no DOM tests, and no exposing private/closure code), the idea being that we don't want to do a whole bunch of jQuery crap to test UI code. Also, in short, mock or stub all your dependencies so your code can be run in total isolation (even your API requests should be mocked/stubbed). We just started getting a functional testing framework together, which is a Nodejs driven Web Driver thing that we've rolled together in-house. Setup a couple scenarios and scripts, and you're off and rolling. This makes it incredibly easy to run Unit Tests when working on a core lib or some other module that is integrated elsewhere. Then, we we integrate those modules on a screen of some sort, you can be covered with the functional tests. We've also started getting some screenshot stuff rolled in as well, so we can *sort of* test against CSS regressions as well. If time is limited, and you don't want to do a whole bunch of setup, I'd say at least do Unit Testing so you're confident your code should be doing what it needs to.
Split the string into an array, and then output letter by letter using setInterval.
Shouldn't Ember/Angular be reversed? The Ember team is pretty vocal about there being one "right-way" to do things in Ember, and that's their big differentiator compared to other frameworks. Also, another thing to note is plugin support. I've heard that when working with Angular you need Angular built plugins, and I'm guessing the same thing with Ember. However, with Backbone just about anything works, so you're pretty free to integrate whatever you want from the community into your app. You should definitely check out Marionette alongside Backbone as well since it does a lot of hand-holding for you. Backbone is still incredibly relevant (see the apps out there built with it). Angular is the new heat right now, but a lot of infrastructure out there is built with Backbone. Lastly, it will never hurt to learn another framework/language. Each has something that they do well, and will enrich you as a developer.
Small webapp, go with angular. 
helpful, thanks!
'use strict'; Also, the book "Javascript: the good parts" is worth a read if .js is going to be your focus.
I've been working on a similar setup for Coffeescript/React that includes the Webpack react-hot-loader plugin: https://github.com/KyleAMathews/coffee-react-quickstart
Javascript can do realtime audio synthesis these days, with user input changing the variables?
This is hot. How hard is it to remove the Coffeescript portion? I'd like to use this, but don't write a ton of Coffee...
First, realize that if this isn't done correctly, your form can and likely will be turned in to a spam machine. If this happens, good luck getting removed from all of the blacklists. That being said, you need to do two things, Sanitize, and then send. (Example is in PHP) $sanitizedEmail = filter_var($visitormail, FILTER_SANITIZE_EMAIL); mail('recipient@email.com', $subject, $message, 'From: ' . $sanitizedEmail); Another option is to modify the headers of the email and then send it: // Additional headers $headers .= 'To: Mary &lt;mary@example.com&gt;, Kelly &lt;kelly@example.com&gt;' . "\r\n"; //These can all be variables as well. $headers .= 'From: Birthday Reminder &lt;birthday@example.com&gt;' . "\r\n"; $headers .= 'Cc: birthdayarchive@example.com' . "\r\n"; $headers .= 'Bcc: birthdaycheck@example.com' . "\r\n"; // Mail it mail($to, $subject, $message, $headers); That's the quick and dirty of it. Again, make sure you're conforming to the rules and not getting your server blacklisted. Also, Option 1 sanitizes the email so that you don't have spam bots using your form. Option 2 doesn't include the sanitization. 
This shit is rad: http://webaudio.github.io/web-audio-api/
This often repeated mantra is a misunderstanding. Attaching code to scroll events is not a bad idea, it's actually a much better idea than having a timer constantly check for scrolling. The problem comes when you touch the DOM or run heavy code on each scroll event. Delaying that code by one frame is not going to stop jank, it's only going to delay that jank by one frame. It's a much better idea to keep your scroll listeners very lightweight and only do any DOM manipulation or heavy work when you absolutely have to. The Resig article that's quoted is about using a string based CSS selector, which is a big performance problem in older browsers, and is still a problem if you use Sizzle's extensions. In the other article the problems are narrowed down to indiscriminately causing reflows.
Study some computer science.
The problem with recursion is that it (usually) uses more memory, a lot more. That's because each active call to a function is stored on what's called a _call stack_. It's explained quite nicely in this computerphile video: https://www.youtube.com/watch?v=Mv9NEXX1VHc Now each of those calls has to be stored in memory and it takes up some space. If you end up with too many levels of recursion calls, you may end up with it taking up more memory than it has available (that's called a _stack overflow_). Of course, that's not a problem when you have 10-20 levels of recursive calls, but if you have a few thousand, it actually may be too much. Also building a _stack frame_ (i.e. a representation of a function call in memory) takes some time, so recursion may actually be slower than a while loop. Generally in imperative languages (like JavaScript, or Java, C++, Python etc.) you should be avoiding recursion as much as possible and using loops instead. In functional languages (like Haskell or ML), there is something called _tail recursion optimisation_, which can modify (in some cases) a recursive function to act like a while loop internally. But as far as I know, JavaScript does not do this at this point (it was considered, but then the idea was dropped). EDIT: Apparently tail recursion optimisation is a part of ES6 specification and is already implemented in node. Important thing to remember, though, is that not every recursive function can be optimised that way.
I had done something similar for mouse movement previously: https://github.com/rhysbrettbowen/MouseMover
Hi, I'm currently developing a simple lightbox. You can give it a try, although it's not finished yet and I'm not sure about the hashes in the URL. [https://github.com/feimosi/baguetteBox.js](https://github.com/feimosi/baguetteBox.js)
Normal Recursion takes place in linear space (each additional function call eats more memory when it adds another frame to the stack). Unless you have a good reason (for example, checking every descendant element of a DOM node), you should avoid recursion. The issue here is that if you go over a couple thousand recursions, you will overflow the stack and crash. Proper tail recursion is an exception because it takes place in constant space and doesn't need to add a new frame to the stack and it can do some stuff that you can't really do with loops (the continuous passing style of programming). The issue with proper tail recursion is support. The current ECMAscript 6 draft requires JS engines to implement proper tail calls, but nobody has gotten around to doing it yet (and once they do, there's still legacy stuff that will take years to catch up). As such the only tail calls that are easily done are self tail-calls that use a trampoline. tl;dr Avoid using recursion and tail recursion unless necessary because they will break things.
&gt; while loops are faster than (...) if Wh... what? While is nothing but a repeated if statement, how can it ever be slower? To be honest, it doesn't even make sense to compare their speed.
We shipped it! Our whole checkout experience is now React.
There was enough drama on SO (including meta and two chat rooms) regarding this bad answer, no need to expose it more. And BTW it wasn't really about optimization : bjb thought regexes are hard to read and shouldn't be used when it's about replacing a simple string, the experienced JS coders hidden on SO disagree.
Explain further. I love to be proven wrong :). 
Can't you detect the presence of an AMD loader inside your modules? If there is an AMD loader present, use define() to register your module, otherwise just register it on the global namespace as mylib.model.etc. I'm not sure what the best way to detect an AMD loader is, perhaps look into some libraries that do this? A naive check would be to see if define() is defined.
Split? Join? Replace? Let's just do this the right way, guys. var replaced = eval('"' + str + '"');
Technically, they are more complex while loops I suppose. But consider these two implementations of the Fibonacci sequence (requires a number zero or greater as input) (and I didn't check if the syntax or math is 100% but its close enough) **Recursive** function fibanacciRecursion(x) { var result = 0; if(x &gt; 1) { result = fibanacciRecursion(x - 1) + fibanacciRecursion(x - 2); } else if(x === 1) { result = 1; } //could incude else === 0 statement but the var is already set to 0 return result; } **While** function fibonacciWhile(x) { var result = 0; var fNminusOne = 0; //f0 is 0 var fN = 1; //f1 is 1 var count = 0; while(count &lt; x) { //for loop would probably be better, but not sure if you know that yet result = fNminusOne + fN; fNminusOne = fN; fN = result; count = count + 1; } return result; } Personally, I think the recursive example is cleaner. Also, if you scope your variables correctly, the recursive solution is better, since that version is [encapsulated](http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29). The while needs to update the fN, fNminusOne, result, and count each loop. The recursive solution probably does use more memory (don't quote me on that), because it uses a call stack. The people in /r/programming could probably give you a more in-depth explanation, because recursion is not exclusive to JavaScript. It is something that can be implemented in most, if not all, programming languages. If you are just beginning learning programming concepts, realize that they are not teaching programming languages, but programming concepts that are language-independent. Here is a good explanation on [stack exchange](http://programmers.stackexchange.com/a/182334) as well, with an important excerpt. &gt;Experience and research suggest that there is a line between people who have the ability to understand variables, pointers, and recursion, and those who don't. Almost everything else in programming, including frameworks, APIs, programming languages and their edge cases, can be acquired through studying and experience, but if you are unable to develop an intuition for these three core concepts, you are unfit to be a programmer. Translating a simple iterative loop into a recursive version is about the quickest possible way of filtering out the non-programmers - even a rather inexperienced programmer can usually do it in 15 minutes, and it's a very language-agnostic problem, so the candidate can pick a language of their choice instead of stumbling over idiosyncracies.