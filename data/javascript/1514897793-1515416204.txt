Feels like angular 1
The double use of `=&gt;` in almost every snippets confuses me to no end, much longer than 30 seconds.
This site is not about learning code snippets but showing off clever code golf tricks.
Trying using **fit** or **fdescribe** * https://jasmine.github.io/api/2.8/global.html#fit * https://jasmine.github.io/api/2.8/global.html#fdescribe To only run **some** of the tests in order to identify the one that gets stuck in an infinite loop.
Not sure what you mean by “rich text”, but I’m using iA Writer for writing in markdown, it’s great!
And this one is tailored to Rails devs, so again, what is the actual problem?
Can you explain what this is exactly? I'm not familiar with the double arrow syntax. 
Reddit is never about clarity and understanding. Reddit is strictly copy/paste.
It means that when you call the function, you get back another function, which must itself be invoked to get the final result. That 'inner function' remembers all values in scope when it was defined, like arguments passed to the outer function, which lets you do some fun things, or supply some arguments now and some arguments later. Simpler examples are things like function add(x) { return function(y) { return x + y; } } `add(5)` returns a function, which takes one argument, `y`. When you call it, it adds `y` to `x`, which it remembers from the time it was defined, so you can say `add(5)(2)` to get 7. Or `const increment = add(1)`, then `increment(5)` would be `6`. That lets you define a function that keeps internal state: function dogAdopter() { let dogs = []; return function(dogName) { dogs.push(dogName); console.log("Our dogs are " + dogs.join(", ")); }; } const adopt = dogAdopter(); adopt("Oscar"); adopt("Milo"); adopt("Laddie"); The `=&gt;` is just another way to write a function. `function add(x, y) { return x + y; }` is the same as `const add = (x,y) =&gt; x + y` and function add(x) { return function(y) { return x + y; } } is the same as const add = x =&gt; y =&gt; x + y;
Just use create-react-app? There’s still a build step, but no configuration on your part. 
In binary first-order logic, you can't be weekly or strongly against something. Either a truth value conforms to the logic, or it doesn't. As you pointed out, this part of JavaScript does not conform to logic. However, contra what you claimed, this part of JavaScript does not conform to logic. If x is NaN (Nx), and y is NaN (Ny), then it could be false that x=y, or it could be true that x=y. Saying it is true that x=y is not more strongly against logic than saying it is false that x=y. They are both equally possible, but neither is derivable from just Nx and Ny.
Configuration is not a problem, I have my own React starter kit for more advanced projects. I'm just looking for simplicity really.
Because function(){} is a lot of extra characters, and readability isn’t harmed if you’re not brand spanking new to JS. Standards aren’t really made for people who started JS 5 minutes ago.
Hyperapp is tiny, written in ES5, and doesn't require JSX (although it can be written in JSX as well).
This is beyond ridiculous: const pipeFunctions = (...fns) =&gt; fns.reduce((f, g) =&gt; (...args) =&gt; g(f(...args))); Why even write such thing? Why obfuscate? To show off how clever you are? 
I am doing full time freelancing developing cross platform native mobile apps development using Appcelerator Titanium for last 3 years. I would like to share my experience... Initially, Appcelerator was closed and small community and they made some wrong decisions.... Now, for last 1 year... since they have launched Hyperloop as free additional feature which allow you to access all native API's of iOS , Android, Windows so the platform has become very vibrant and more developers have joined in. However, I also have started working in Native Script which is definitely showing strong value... For appcelerator native modules you can refer https://gitt.io And there are tones of developers on GitHub shared hundreds of more modules... Do let me know did you opted for this job offer which you were offered or not?? Like to discuss more... 
 const pipeFunctions = function (...fns) { return fns.reduce(function (f, g) { return function (...args) { return g(f(...args)); } } } Wow that makes so much more sense now that we’ve added a bunch more characters — except not really, we haven’t reduced lexical complexity, we’ve just added a bunch more letters. What’s your preferred way of writing a function piper?
Hi /u/CodeBlooded121, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Thanks for the response. This is very helpful. It did not work in my case so I suspect that upsert does not return a promise.
Like this except it starts with `function pipeFunctions(...fns) {` and doesn't use single letter variables for the reducer. Now you can actually see the scopes and blocks in one glance, and the style scales up from simple naive little snippets all the way to more complex code (eg: changes are isolated, no need to rewrite code if complexity needs to be added, simpler debugging etc etc.
I don't argue that. I never said that this behavior "conforms to logic", in the same way I didn't say, before that it was "good". So you want to be _more correct_? That's perfectly fine with me, really :) The only point I will repeat is that this is not a "part of JavaScript". All this is [derived](https://stackoverflow.com/questions/1565164/what-is-the-rationale-for-all-comparisons-returning-false-for-ieee754-nan-values) from the specification of IEEE-754 numbers, which JavaScript simply follows.
I wrote the initial pipe function and it was alot simpler: const pipe =&gt; (...funcs) =&gt; arg =&gt; funcs.reduce((acc, val) =&gt; val(acc)); But you know its way more practical to be able to pass multiple args to the first function ;).
I already have knowledge with vanilla and I write it by the newest standard ES6/ES7 + Babel and Webpack for workflow, but my main question is whether I should learn node now or react
It's very difficult to get a job on Upwork in my opinion. Whenever I apply for a job, there will be at least 10 people who will do the same thing dirty cheap
The canvas should fit my monitor. Right now I have planets that are orbiting off screen You could also add moons.
Please, consider: 1. explaining the exact problem / thing you want to achieve, instead of linking to multiple images of conversations and/or code. It is hard to make from your post just what exactly you have a problem with. 2. Not posting code as images. There are pastebins, sandboxes and you can even post the code here, as code, correctly formatted. Putting code in an image, where it cannot easily be copied and pasted is annoying and makes it difficult to help you. Finally, you may want to consider going to r/LearnJavascript which may be more appropriate for your needs.
Quill is solid, another great option would be [Trix](https://github.com/basecamp/trix)
I dunno, but I'd really reconsider why these idiotic nested brace oneliner crypto puzzels are on a site about efficiently understanding code.
Their tagline says the snippets are easy to understand.
If you dont neend JSX, it seems you can use new react as well. https://medium.com/@clmyles/react-without-npm-babel-or-webpack-1e9a6049714 https://shinglyu.github.io/web/2016/04/06/minimal_react.html
Of course it does.
I'm with you, you really need to think these snippets through to understand them. Thats also the case for my snippet.
imho as a non English speaker, Jeffrey Way is way better than Wes Bos because Wes Bos usually like to end a sentence in a fast and super low voice which I find it hard to understand :/
That's entirely fair.
I thought I knew javascript. :)
https://pastebin.com/Zp4YitbD
ok added the pastebin, rest is on codepen already
At least they get you thinking, though. Good practice :)
That's how it works. You work for dirty cheap to get reputation. Then wages go up
You can `import` and dynamic `import()` in webpack just fine. It is babel you need to configure properly. For instance in babel 7 it would be something like: ['@babel/preset-env', { modules: false }] `modules: false` allows Webpack to statically analyze es6 modules, which is a feature only bundlers provide anyway. You get some gains in Webpack 3, in the upcoming version the gains will be bigger.
Good point, spec only [requires it to be "sublinear"](https://stackoverflow.com/questions/31091772/javascript-es6-computational-time-complexity-of-collections#31092145), so in one implementation Set may be TreeSet with `O(log n)`, in other it may be HashSet with `O(1)`.
Hi, I learn a lot by trying to explain something to someone, I apologize if the quality isn't high enough and I promise I am studying to get better. Thank you for the feeeback.
Indeed. My point was just that NaN === NaN evaluating to true would be just as "correct" (or incorrect) as if it evaluated to false from a pure logic perspective. This all began by you referencing formal logic, but formal logic can't be the reason for that result.
By simple I mean somthing that allow me to edit, save, refresh, without bloating node_modules by 120mb to display 10kb file.
I write JS in a fairly functional style.. I struggled to think of cases where a several of them would be useful/required..
What part of the syntax exactly? This is probably about as good as you're gonna get for minimal + no build step + full featured.
Thanks, I’ll give that a try
React doesn't need a build step. As shown in [this simple index.html file](https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html), you only actually need two simple script tags for `react` and `react-dom`. If you do want to use JSX syntax in the HTML page, that file also shows you can use `babel-standalone` as a script tag. Since `babel-standalone` _is_ pretty big, there's options if you want other alternatives to JSX syntax. For example, the [`react-hyperscript-helpers` library](https://github.com/Jador/react-hyperscript-helpers/) is a useful set of factory functions that look like `div('.foo', [ h2('Hello, world') ])`. Also, Dominic Gannaway's [`t7` library](https://github.com/trueadm/t7) uses ES6 tagged template literals to provide a JSX-like syntax that's compatible with React. There's plenty of other options available as well.
I'm going to repeat /u/gaearon 's standard reply: The set of dependencies that CRA uses includes: - A compiler - A bundler/linker - An optimizing minifier - A linter - A development server with live reloading - A test runner All of those are isolated and scoped to that one project, and they are all build-time dependencies only. It's also important to understand that Javascript packages are effectively distributed as source, which affects the number of files on disk. (Granted, many NPM packages do include unnecessary files in the published artifacts, but Javascript itself is a major factor there.) Meanwhile, XCode is supposedly something like 8GB installed, Visual Studio is multiple gigs, and if you were to look at the actual file size on disk of any C++ compiler toolchain, that would be a minimum of several dozen megs - those are just usually preinstalled on Linux or Mac systems. So, context is pretty important here. 70-100MB for a complete JS build toolchain is perfectly fine :)
`f` and `g` are common names for the two parts of a composed function, and this is a trivial generalization of that. Using different names would just confuse someone who is familiar with the concepts, and it's unlikely that the function will ever change unless the style guide does.
Nice article!
I don't entirely understand what you want it to do here. Can you explain what the expected behaviour should be? Because you're kind of forcing us to guess atm.
I realize you didn't come here for a review, but since you said this was "[alot](http://hyperboleandahalf.blogspot.se/2010/04/alot-is-better-than-you-at-everything.html) simpler", I will point out that this: * doesn't do what it's supposed to, although the problem is obvious upon execution and the fixes are simple * doesn't allow multiple parameters, as you said * unnecessarily recomposes the functions on every invocation of the composed function * Has as many nested functions, worse variable names, and lacks the benefit of being very similar to the mathematical definition of function composition
For extra context to what the others have said: Vue is only concerned with the presentation layer of whatever application you are building. If you're heavy on client-side business logic you *may* need to pull in thirdparty libraries. Common libraries people use are Vuex for state management, vue-router for client-side routing, vue-i18n, etc. Someone else in shared the vue-awesome gh page which is an awesome resource. There is also [devarchy](https://devarchy.com/vue) which has a nice interface. Sorry for getting back to you so late!
&gt; In memory of Carl Sagan &lt;3
Better late than never. Thanks!
Project that makes a grid and on click adds color to a cell. So the forum mentor told me to start it this way with the handler... 1. function makeGrid() { for (let i = 0; i &lt; pHeight.value; i++) { const row = pCanvas.insertRow(i); for (let j = 0; j &lt; pWidth.value; j++) { const cell = row.insertCell(j); cell.addEventListener('click', function() { this.style.backgroundColor = colorPicker.value; }) } } } So I made the cellClickAddColor on mousedown whether LMB or RMB that adds or clears a cell. Then I added cellHoverAddColor, same principle. Then cellClear, again, same way to do it. Then I wanted to make a input submit (id btn1) to be disabled (unclickable) when there is not a single colored cell, and enabled when there is at least 1 colored one. Wanted to put it inside the hover to check it when it enters a cell for all cells and then do it's job. Then I could just put manually btn1.disable=false/true to each button, but that's bad or good practice? I guess bad. So I wanted to make a function cellColorCheck that would check the cells for colored ones and if there is to place btn1.disabled=false; Now I tried several ways but it doesn't work with using the cell from the makeGrid() iteration. How do I do it? Was going this way overall bad? Is this even possible or do I have to go around it and make it differently? I am a newbie so I ask people to tell me because I don't know :) Thanks for your time! 
Imho its not a bad job, they did more than a stupid to do app so content wise its better than most tutorials. Sure coding and architecture can be improved its a learning experience...we've all been there
I think OP was referring to the WYSIWYG user experience, like that of Rich Text Format https://en.wikipedia.org/wiki/Rich_Text_Format
https://pastebin.com/Zp4YitbD this is what I am trying to do, hope I explained it here well enough, any advices appreciated!
The medium.com blog-spam for paid courses is getting ridiculous. This one doesn't even pass Reddit's spam policies.
Problem: there are too many routers! Solution: I have written a new router!
I actually think your rewrite is an improvement. I can use the indentation to reason about the different contexts. If something goes wrong, I can stick a `debugger` breakpoint at a particular layer. It's also transparent that I'm returning a wrapped function, rather than a function that uses four layers of partial application. It's a serious improvement.
Obligatory https://xkcd.com/927/
What exactly does "curated" mean, here? Forgive me for being a curmudgeon, but it's just a word that really irritates me. _Curation_ implies that the author is a recognised expert, and that s/he has selected only a subset of objects to display. But _curated lists_ in the JavaScript world seem to be created by self-appointed experts, and don't always show that much care in their selection. It's just something that annoys me a little.
I think I get it: &lt;!DOCTYPE html&gt; &lt;body&gt; &lt;table id="t"&gt; &lt;/table&gt; &lt;script&gt; var rows = 10; var columns = 10; for(var r = 0; r&lt;rows; r++) { var newRow = document.createElement("TR"); for(var c = 0; c&lt;columns; c++) { var newCell = document.createElement("TD"); newCell.onclick = function () { newCell.style.backgroundColor = 'red'; newCell.style.color = 'white'; }; newCell.innerHTML = "O"; newRow.appendChild(newCell); } t.appendChild(newRow); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Something like this?
I just do my routes in php......
Yes, medium is fully complicit in this crap. I'd complain to them, but they don't care -- just like with their blind redirections that they allow (e.g. someone can have `foo.medium.com` automatically redirect to `foo.com`).
No, it's not really feasible to do static analysis on a CommonJS module, because of how the contents can be changed at runtime. For more info, see [these articles on the history and differences between JS module formats](https://github.com/markerikson/react-redux-links/blob/master/es6-features.md#javascript-module-formats).
You're missing the point. My issue is that we're using framework specific packages where the majority of the code doesn't depend on the framework. Those bits should be separated out so that anyone can interface them with their framework of choice.
There are pros and cons to writing single-page applications, and they certainly aren't necessary for a lot of applications, but I think that they will only become more ubiquitous.
I mean, reddit is doing fine...I don’t think it would gain much from moving its router to js...or am I crazy?
If the js app is cached, youre really only serving data anyway right? I guess it does add one extra request though. 
I get where you're coming from, but I disagree with the premise that learning the framework-specific routing methods is a hassle. It took me 10 minutes to understand and configure react-router, and I benefit from an open-source community that maintains the router in tandem with the framework itself. I consider the tight-coupling between router and framework to be a benefit, not a downside. It's certainly less risky than introducing a third-party dependency with a single contributor into my project. None of this is to say your work is wasted - I'm sure there are many who disagree with me. Your documentation looks good, too! Best of luck.
Scroll performance is shite on that list
So the first thing is to determine how it gives you input, if it acts like a keyboard completely for example, then you can capture keypress events, then either through a debounce or special character being input, such as if you scan a barcode that contains: `123456789 ` Your scanner maybe does a press for each number then does an `ENTER` keypress. If that is the case you can capture all keypress until you get an enter then dump the captures into a var and bam there's your data to work with. Our you can use a debounce after 200ms lets say after no keyboard input it dumps the captures to a var and there you go. I am actually working with some of these right now with a ReactNative/Ionic App (yet to choose between) but we are using Saveo Scan devices with Moto G Gen4 as the android device (https://saveoscan.com/product/saveo-scan-ccd/)
https://github.com/ui-router/core
Firstly, this is a great idea and is a nice, focused area for a library to tackle. There are some things I would like to point out: You use 'iterable' a lot both in code and in documentation. This may be confusing to consumers as you do not implement the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols). You could even go so far as to avoid naming these in the documentation by doing full examples: `fluentSort(arr).sortBy(comparator).thenBy(comparator)`. I understand you have two classes to ensure the fluent flow by gating the `thenBy`s in the second class which is constructed by the `sortBy`s of the first class. However this results in some code duplication and some awkward logic placed into the second class's constructor. Additionally, at first glance I assumed that SortedIterable was a subclass of Iterable which isn't the case. I'd be tempted to drop the two class approach and simply have the thenBys as aliases to the sortBy functions. This would also help the readme as you wouldn't have to switch from iterable to sortedIterable. I like the flexibility of your `selector`s however you may want to implement some form of function overloading to allow consumers to provide a string which creates a basic `obj =&gt; obj[field]` selector similar to lodash. Consider [JSDoc](http://usejsdoc.org/)'ing your code as this will give some autocompletion in IDEs and you can generate a significant amount of your readme from this.
Gladly! `pipeFunctions` composes all of the functions with the call to `reduce` and then returns the result. The composition is only done when `pipeFunctions` is invoked, and the result is then reused. `pipe` returns a function which invokes each function in order, passing the result to the next one in line. The end result is the same, but the invocation of `reduce` has been moved from the initial invocation of `pipe` and is instead made every time the resulting function is invoked. The difference can be seen by composing two functions, here `a` and `b`, with each of the two methods, and then calling [`toSource`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource) (in Firefox only) on the results for some inspection, with the results below: &gt;&gt; pipeFunctions(a, b).toSource() &lt;- "(...args) =&gt; g(f(...args))" &gt;&gt; pipe(a, b).toSource() &lt;- "arg =&gt; funcs.reduce((acc, val) =&gt; val(acc), arg)" Is there a measurable difference in performance? Likely not. But it's unnecessary and unexpected, which generally makes it a breeding ground for bugs, although I have a hard time seeing any real hazards in this particular case. --- The number of nested functions is a big part of what makes something difficult (for me) to understand, and both examples have the same amount, just split up in different ways. `acc` and `val` are generic names for the parameters of `reduce`, but anyone who is familiar with `reduce`, or looks it up, will know that already. On the other hand, `f` and `g` are common names for functions, and are the names most commonly seen when describing a composed function (which is what we are building here, see below). Using already established names helps people recognize what we're doing if they're already familiar with it, or helps them look up and understand an explanation if they're not, because the names are consistent. We might be able to come up with even better names if we tried really hard, but `f` and `g` are easily understood once you've learned the concept, so I think they are a fine choice. If you take a look at Wikipedia's page on [function composition](https://en.wikipedia.org/wiki/Function_composition), you'll see this part: &gt; The resulting composite function is denoted g ∘ f : X → Z, defined by (g ∘ f )(x) = g(f(x)) If we gloss over the noise introduced by reduce (which is only necessary because `pipe` and `pipeFunctions` accept *any number* of functions to compose instead of just two), this is very similar to the definition of `pipeFunctions`. `pipe` is also similar, but because you accept `arg` so early and have to inject it separately into `reduce`, it's a bit further from the mathematical definition.
I get where you were coming from with the other comment. As a non-"JS thought leader" with lots of followers, it can be difficult to gain awareness for a project, but I have to try, right? Even a couple other people that like the idea and want to collaborate would be great. One of the hardest parts of designing the router has been that I have to write a lot of little sites to figure out what works and what can be improved. With some more eyes/brains on it, I'm sure a number of "a ha" moments would have happened a lot sooner.
That's very interesting, I'll give that a try. I should look if theres an 'event listener' type of thing in Node, or if I have to use it client side. Thank you!
Isn't that what those sites that run mining malware on their users' computers are doing? Edit: Also, Service Workers are one of those things that are nice, but I only notice them when they're breaking things.
Your reasonable reply here is exactly why I deleted my old comment - because I spent two paragraphs explaining why your contribution wasn't useful to me, and that kind of comment isn't useful itself. Forgive me; I slipped into pedantic programmer mode. Got any useful JS libraries to solve that? If so, I'm very interested. 
Hmm, maybe. Actually I just started feeling hyped when talking about PWA, and then to jest at hype itself (because blockchain has had a lot of hype lately) I threw blockchain in. Not very obvious of a joke, sorry. :P Edit: But truth be told yeah I think PWA are great. Another thing is SSR, with bundle splitting based on routes. 
Let's see... &gt; Then I wanted to make a input submit (id btn1) to be disabled (unclickable) when there is not a single colored cell, and enabled when there is at least 1 colored one. Wanted to put it inside the hover to check it when it enters a cell for all cells and then do it's job. &gt; Then I could just put manually btn1.disable=false/true to each button, but that's bad or good practice? I guess bad. &gt; So I wanted to make a function cellColorCheck that would check the cells for colored ones and if there is to place btn1.disabled=false; &gt; Now I tried several ways but it doesn't work with using the cell from the makeGrid() iteration. &gt; How do I do it? &gt; Was going this way overall bad? So, first of all I need to make a clear comment about something: Your approach is not particularly bad nor particularly good. It's _a_ way to do it. There are many ways and this is one of them. I'm going to suggest a _different_ approach, but that does not necessarily mean your approach was bad. That said... First your solution. You have this: function cellColorCheck() { var x = 0; for (let i = 0; i &lt; pCanvas.getElementsByTagName('td').length; i++) { if (pCanvas.getElementsByTagName('td')[i].style.backgroundColor != "") { x++; } /*while (pCanvas.getElementsByTagName('td')[i].style.backgroundColor == "") { btn1.disabled = true; }*/ } } I just cleaned up some `console.log`s. So, it seems you had a problem with that `while` and it's understandable. What you were trying to do should be something more _like this_: function cellColorCheck() { var cells = pCanvas.getElementsByTagName('td'); btn1.disabled = false; for (let i = 0; i &lt; cells.length; i++) { if (cells[i].style.backgroundColor == "") { btn1.disabled = true; break; } } } That is, you don't need to count how many are coloured. You just need to loop through the cells and once you find one which is not coloured, then you now not all of them are coloured, so you just do what you need to do there and stop looping. You could make this a bit cleaner by separating the "checking if all cells are coloured" from the "disabling the button". This are separate concerns so it makes sense to separate them. So you could do something like... function checkAllColored() { var cells = pCanvas.getElementsByTagName('td'); for (let i = 0; i &lt; cells.length; i++) { if (cells[i].style.backgroundColor == "") { return false; } } return true; } Now, if you call that, it _returns_ `false` if it finds an uncoloured cell. If it loops through all the cells without having found an uncoloured one, then it means all are coloured and it return `true`. You now can use it like so: if (checkAllColored()) { btn1.disabled = false; } else { btn1.disabled = true; } // Or if you prefer: btn1.disabled = !checkAllColored(); (You would put this code in the click handler instead of what you now have, the call to `cellColorCheck()`) Now that would be a way to do this using your current approach. As I said, it is a way to do it. It's not particularly good, but it's also not specially bad. But you could try a different way to approach the problem. Look at the code above proposed by /u/AliceInWondermall The _main_ difference in approach is that this code keeps track of how many cells are coloured in the variable `colouredCells`. You can see how it is initialized to `0` and incremented each time a cell is clicked. In a more general situation you probably don't want to do it exactly like this (I mean, in a more real scenario, you _probably_ want to keep track of each cell's status, not only how many are coloured or not), but for the current scenario this is sufficient. But think for a moment what this does. What it does is change _where_ the state of your widget is. Right now, to know if all cells are coloured, you have to go to the actual cells in the DOM and see if they are coloured and loop through them and all that. By keeping this separate variable, what this other solution does is keep that state somewhere else, and you can use this other place to check your state. Is this good? Bad? Better? Worse? Well, it depends. As it is, as proposed in /u/AliceInWondermall's code, the difference is not really that big. But in a more general case it _may_ be an interesting change. Imagine as I suggested, you wanted to keep track of each cell's status. More, imagine this is something like a board's game. So you will need to keep track of the state of the game for various purposes other than painting it on the screen. There may be some other logic in the game that, checks if a cell is _taken_ or if it is _surrounded by taken cells_ or whatever the game says. Now, in that situation it would indeed be much better to keep things separate. You'd model the game's board as, maybe, a two dimensional array: // maybe something like... var cells = [ [ { status: 'taken', colour: 'blue' }, { status: 'taken', colour: 'red' }, { status: 'taken', colour: 'blue' } ], [ { status: 'free', colour: null }, { status: 'free', colour: null }, { status: 'taken', colour: 'blue' } ], [ { status: 'free', colour: null }, { status: 'taken', colour: 'red' }, { status: 'taken', colour: 'blue' } ] ]; And then you'd write the logic of the game operating on that. With its rules, its checks, whatever. And separately, you could have a function that takes the current status of the board and refreshes what is actually shown. This way, the "model" of the game is _independent_ from the "view" of the game. Doing this is called "separation of concerns" and it's good because it makes things easier to change later, by allowing you to change one part without needing to change the other. ---- I'll insist just one final time that your approach is not _wrong_ in itself. If you make it work and it works well, then it's fine. But it is interesting to think about these details, and try not only to make it work, but to keep things well organized. _Separation of concerns_ is a fundamental principle you should always try to keep in mind. In simple words it means: separate things that should go separated, and keep together things that should go together. Finally, in the future, do try to post this type of question in /r/LearnJavascript. It's not only for beginners or anything, it's just a more appropriate place.
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) \#3: [My gf is learning javascript, node and react, she's uploading little tutorial videos as she goes. Might be useful for people also learning js!](https://www.youtube.com/watch?v=DHoiFbU0Ezk) | [35 comments](https://np.reddit.com/r/learnjavascript/comments/5sy6eq/my_gf_is_learning_javascript_node_and_react_shes/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
This is some really great feedback! I definitely am going to take a look through this again and try to simplify that documentation. Since literally no one is using this but me, this would be a great time to try and get that all into one class. Just gotta think of a better name than iterable now!
Maybe someone can write a [prettier](https://github.com/prettier/prettier) for comments? We just need to be able to break comments down into abstract syntax trees.
lodash?
I guess I’m looking for something more lightweight. For example, if I create a DSL or an API for a blog post, I want people to try it out right in the browser, rather than just reading code or having to download and install some software. I can always just use JavaScript but I’d like to try something which is more amenable to mini-languages (which allows operator overloading and perhaps even static types).
Thank you!
They are not confusing if you know modern JS.
Oh, I got the joke. My response was also meant as a joke, but might have been a bit too literal. It's actually pretty easy to do SSR and code splitting with Curi: https://github.com/pshrmn/curi/tree/master/examples/misc/server-rendering. PWAs are on my radar, but I haven't taken the time to really look into what is involved with those yet.
I'm using the scanner to read the barcode of many boxes client side, I wanted to push those reads to an array to send them later to the server and add them to the database. I just checked and it does press "Enter" after the read, so I'll use the same method that you suggested to listen for an "Enter" keypress, thanks!
I was interested in reading it on my phone, but gave up after the first few snippets. I actually like the snippets but sorry author, whatever you've done to scroll is an abomination that needs to be cleansed with fire.
If you want to keep track of all your cells, you can instead do this: var colouredCells = []; function color (item){ item.style.backgroundColor = "red"; item.onclick = function() {uncolor(item);}; colouredCells.push(item); if(b.disabled) { b.disabled = false; } } This way you add all your coloured cells to an array. Then, if you want to uncolour them, just iterate over the array and switch them back to silver.
Just like Haskell isn't confusing to people who know Haskell. To the rest of us, which is over 99% of all people, it is confusing as hell. In other words: as a syntax "simplification", it's a total failure. 
You can use systemjs to run in the browser, ex. with typescript html: &lt;script src="https://unpkg.com/systemjs@0.20.19"&gt;&lt;/script&gt; &lt;script src="config.js"&gt;&lt;/script&gt; &lt;script&gt; System.import('app').then(function(m) { m.main(); }); &lt;/script&gt; config.js: System.config({ transpiler: 'typescript', typescriptOptions: { emitDecoratorMetadata: true, module: 'system' }, paths: { 'typescript': 'https://unpkg.com/typescript@2.6.2', }, packages: { app: { main: 'index.js', defaultExtension: 'js', } } }); write you code in app/index.ts
&gt; How did you get a job when you were just a beginner? I studied computer science at uni and had barely written a single line of JS or done any front end work before going into a full stack role. If you know the CS fundamentals you should be able to pick up JS pretty quickly. What is intermediate in one city might be a junior or even senior in another, different companies can also have very different definitions of junior, mid and senior. I’d say just try all the online job boards and apply to tech hubs like San Fran, NYC, or London. Take a look at all the job postings in each city and build up an idea of what each industry considers junior, mid and senior, then apply where you think you belong. Don’t be afraid to reach either, just fake it til you make it (but obviously don’t apply for senior roles if you aren’t comfortable with your technical knowledge or that level of responsibility). As for showing your skills, just write a few libraries or whatever and put them on Github. I don’t agree with the other guy that a starter kit would be useless, yes there are tons out there but the goal here is to demonstrate your knowledge and to improve. Anything at all that helps you learn is beneficial, just make sure that whatever you do you do it well, as employers will surely be taking a look, and they won’t care if you have the most popular starter kit/library/framework out there since all they want to know is are you as good as you say you are.
Just recreate simple games like snake (tons of tutorials out there) or centipede or space invaders. I think you can do a flappy bird clone in like 20 lines... should be plenty of tutorials out there. ... I'd recommend doing these in pure html, css, and js... doing so will help solidify core js and dom concepts that you'll be able to use irrespective of any particular library or framework.
Great that I could somewhat help you out. You could either 1. use the input field client side and send the barcode to a web server running NodeJS and express OR 2. you could use websockets client side to connect to a NodeJS server. The websocket connection would allow more specific messages to flow back to each individual user/client that was transmitting its barcodes after each scan. Both solutions would serves as a "middle man" that would connect to your database of choice. And then you would properly have to come up with some way of dealing with downtime on your server? So that you can still process packages even if your server was down for maintenance or other unhappy scenarios. Look into PM2 (http://pm2.keymetrics.io/) when it comes to handling your nodejs server, it will serve you well. We use both PM2 and webhooks to a Slack channel to quickly get notified on our screens and by push-message when something goes wrong.
API looks very clean and readable, but one thing that is not immediately obvious to me is the motivation for this module. What is the value-add from using your library as opposed to just using `Array.prototype.sort`? As far as I can tell it requires more lines/characters to accomplish the same thing with `fluent-sort` than it does with the native sorting function. From first glance it seems like ``` fluentSort(arr).sortBy((elem) =&gt; elem.x).thenBy((elem) =&gt; elem.y).result(); ``` is equivalent to ``` arr.sort((a, b) =&gt; (a.x - b.x) || (a.y - b.y)); ``` While the latter is a bit more complicated in logic, it's easier for someone with no context to understand what's going on, without the need to consult external API documentation.
Hell yea dude, this works great https://pastebin.com/GSmfht3C , thanks a lot!
[Render props version!](https://gist.github.com/kingdaro/ffdcb6d9af7a7710ab8636f200014ba2) Just for fun, of course. Great post!
Go and Dart can both be transpiled to JS, Go has a community project for it and Dart supports it natively. 
[Klipse](https://github.com/viebel/klipse) _may_ be of interest.
Hi /u/azhiguore, For javascript help, please visit /r/LearnJavascript. Thank you!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Troy-Web-Consulting/fluent-sort/.../**fluent-sort.js#L20** (master → d36c91b)](https://github.com/Troy-Web-Consulting/fluent-sort/blob/d36c91b3866d6c540dff31de65448acf1e4f1bfc/src/fluent-sort.js#L20) * [Troy-Web-Consulting/fluent-sort/.../**fluent-sort.js#L93** (master → d36c91b)](https://github.com/Troy-Web-Consulting/fluent-sort/blob/d36c91b3866d6c540dff31de65448acf1e4f1bfc/src/fluent-sort.js#L93) * [Troy-Web-Consulting/fluent-sort/.../**fluent-sort.js#L16** (master → d36c91b)](https://github.com/Troy-Web-Consulting/fluent-sort/blob/d36c91b3866d6c540dff31de65448acf1e4f1bfc/src/fluent-sort.js#L16) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ds3hxl6.)
Leave the uglification to the uglifier please. Expressive variable names never hurt anyone. Which of these would you prefer? const countOccurrences = (arr, value) =&gt; arr.reduce((a, v) =&gt; (v === value ? a + 1 : a + 0), 0); const countOccurrences = (haystack, needle) =&gt; haystack.filter(value =&gt; value === needle).length; 
[removed]
I took in a bunch of that feedback and just republished with better documentation and the selector logic you suggested. Thanks!
Thanks man
I don't know if you can call it a total failure. Most of the language is still the same. They just made some of the more verbose parts simpler. It's kind of like the Tesla. (Bad comparison incoming.) Just because 99% of the mechanics in the world don't know how to service a Tesla when it's needed, doesn't make it failure. It's MUCH simpler than a typical ICE engine, has fewer moving parts, and is likely less prone to breaking down. If it does break down, you're going to want to take it to a mechanic that knows how to work on them. And as JS mechanics, we should want to learn how to work on the new syntax.
 const countOccurrences = (ListOfValues, ValueToMatch) =&gt; ListOfValues.reduce((Count, Value) =&gt; (Value === ValueToMatch ? Count + 1 : Count), 0); const countOccurrences = (ListOfValues, ValueToMatch) =&gt; ListOfValues.filter(Value =&gt; Value === ValueToMatch).length; For some reason I've always hated "haystack" and "needle" as parameter names (maybe because for me "needle" tends to be first associated with a record player needle?).
This explanation is so much to the point I'm considering buying gold just for this
I'm currently building out a Quill implementation and I prefer it over Draft.js and ProseMirror at least as far as ease of setup goes. ProseMirror and Draft are really frameworks for making rich text editors and it's not a trivial task to get a basic editor up-and-running.
Wow, pretty interesting.
Not sure if theres already tooling for it, but worth a look 
&gt; I don't know if you can call it a total failure. Most of the language is still the same. They just made some of the more verbose parts simpler. I was explicitly referring to the `=&gt;` syntax. Apparently it has right precedence, which is not obvious... also: are parens around formal arguments not required?
Is there a question here?
I honestly don't understand this sentiment. You're concerned over hard disk space? Why would you care how much space node_modules is using? It's not like you serve node_modules. It's just a bunch of files sitting on your hdd. 
Yes, sorry for not being clear. I don't know how to manipulate or compare my Array to find out which points in the list are the ones closest-below GivenX and closest-above.
did anyone help answer your question? sorry for not getting back to you, i got caught up with the festive season
The stuff is on a [GitHub readme](https://github.com/Chalarangelo/30-seconds-of-code/blob/master/README.md) which doesn't include terrible scrolling
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Chalarangelo/30-seconds-of-code/.../**README.md** (master → 9b358f1)](https://github.com/Chalarangelo/30-seconds-of-code/blob/9b358f160b5881d5ffc69ea4432f1f2631c89b10/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ds3nkc7.)
In JS parenthesis around the arguments are required if there are 0, 2 or more arguments: () =&gt; /* valid */ x =&gt; /* valid */ (x) =&gt; /* valid */ (x, y) =&gt; /* valid */ I actually kind of find this annoying but it's consistent with C# and Ruby(?) Lambdas.
[There's a couple. Hundred.](https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-JS) :)
My impression is that tools to convert these languages are designed to be run on the command line, outside the browser. I want a light weight interactive repl experience, even if the browser is not connected to the internet.
Btw, how do you make a github.io subdomain for your projects? Looks more neat and serious.
It's time for the mods to automod anything with 'learn' &amp;&amp; ('reactjs' || 'angular') in the title
Very cool, but kind of too laggy for my slow laptop. I could literally count the frames. Incredible graphics though. Unbelievable this was written in JS. Congrats on your magnificent job! I could imagine it would take a lot of time to make this.
Good point, but that may cause too many calculations.
Hi yes thanks! console.log(window[variableName]) or console.log(eval(variableName)) I also got told off for doing this and that I should be using objects which is completely fair enough. I didn't really explain myself well enough I guess as I already knew an object would work better, I was more trying to work out if metaprogramming was possible.
They just sent me the terms and they didn't even mention the contract length. They sent an email previously talking about pay as contract vs when they employ me but none of it is mentioned within the agreement... It also made sure to state that I could be fired at any time with no notice, but I am required to give them a months notice. I asked them to change a few things before consideration.
I read this thinking "I know this" and then thought, "I don't know as much as I think I do."
99% of JS programmers don't use ES6? I find that hard to believe.
https://pages.github.com/
To find the index of the first point with an x greater than GivenX: var HighI = MyArray.findIndex((point)=&gt;point.x&gt;GivenX); findIndex takes a function and returns the first index that the function evaluates true for. Naively, we could assign are variables like this: var LowX = MyArray[HighI-1].x; var LowY = MyArray[HighI-1].y; var HighX = MyArray[HighI].x; var HighY = MyArray[HighI].y; But this won't work for when HighI is zero or when there is no point in MyArray with an x greater than GivenX. If findIndex doesn't find an index, then it will return -1. This will happen when GivenX is greater than your largest x. So you will have to have if statements for when HighI is 0 and -1. Hope that helps.
[removed]
Also if you're using object destructuring. All of these are valid: () =&gt; x =&gt; (x) =&gt; (x, y) =&gt; ({ prop1, prop2 }) =&gt; _ =&gt; // sometimes used to avoid typing parens. _ is just a variable 
Assuming the arrays are already in order something like what 9avn349vk348cvnnas49 wrote will work. If they aren't already in order you'll need to traverse the array using a loop and find the lowest or highest or whatever x value.
&gt; However, I can't simply load it in from a file or from a server. Why not? This is a big limitation that will really affect the answer to the question. And 12MB is --- nothing. There are images far bigger than that.
&gt; So, first I checked /u/AliceInWondermall 's comment and I made it, my bad was not to remember that arrays exist and that I could just store the elements in an array &lt;- pleb &amp;nbsp; I started to read yours and after the 2nd block of code I went to try. Came up with this (ye with return is slightly better :D): function cellColorCheck() { var cells = pCanvas.getElementsByTagName('td'); for (let i = 0; i &lt; cells.length; i++) { if (cells[i].style.backgroundColor !== "") { btn1.disabled = false; break; } else { btn1.disabled = true; } } } Also this works, but it's weird ;D function cellColorCheck() { var usedbreak = false; for (let i = 0; i &lt; pCanvas.rows.length; i++) { for (let j = 0; j &lt; pCanvas.rows[i].cells.length; j++) { console.log(pCanvas.rows[i].cells[j]); if (pCanvas.rows[i].cells[j].style.backgroundColor !== "") { btn1.disabled = false; usedbreak = true; break; } else { btn1.disabled = true; } } if (usedbreak) { break; } } } &gt; You would put this code in the click handler instead of what you now have, the call to `cellColorCheck()` You mean like this: btn6.addEventListener('click', function cellColorCheck(evt) { evt.preventDefault(); var cells = pCanvas.getElementsByTagName('td'); for (let i = 0; i &lt; cells.length; i++) { if (cells[i].style.backgroundColor !== "") { btn1.disabled = false; break; } else { btn1.disabled = true; } } }); The reason I preferred a function with name is because I planned to call it inside other event handlers. I started this as a Udacity final project, but I wanted to learn the difference in using pure js w/o jquery's help, so I started to write in jquery and then looked for vanilla? oldschool? js variant how to solve. Then went further to do more stuff than just click etc. deff learned stuff. Also I wanted to see if there was a way to use the `const cells = row.insertCell` variable outside, guess that's not the case since it's in a nested loop. And I wanted advice how to make this part in at least the optimal way, in a way that won't need rewriting of the code when someone wants to add stuff in future. &gt; stuff in future best reference ever (quoting myself yea ;D) meaning, Separation of concerns! When I finish I will post the full code and you will tell me if there's a better way to structure it! Oh yea, I did post in /r/learnjavascript and I've got 0 replies :), I don't regret posting it here 
My repo is here: https://github.com/nephyst/nephyst.github.io
I very much prefer the fat arrow syntax for its succinctness and terseness. I don't believe the goal of these is to be maximally readable or understandable. They're short snippets that can easily be added to any codebase without cluttering things up. You only have to understand what it does once. From that point on, you shouldn't have to "read" it, just use it. I do agree, though, the tagline of the website is a bit of a misnomer.
Try using the FileReader API combined with indexedDB. I would suggest localStorage but since you are storing more than 5mb indexedDB is better (up to ~50mb)
Have you taken a look at a functional approach to do this? Which sounds exactly what you need, using something like lodash flowRight and compose sort functions together they way you need them, you can also do it dynamically too.
Thank you!
This was an incredibly well written article. It addressed all my major concerns and piqued my interest with the motivations. Definitely gonna give Svelte a try. 
That's exactly what I needed, thank you! 
Can you export to valid JS files? If you can manage to produce text files like: &gt; function getmytext(){ &gt; return [ "first text", "second text", "etc"]; &gt; } ... and save it as texts.js, then you can load the script with a &lt; script&gt; tag, and access all the texts via the global function *getmytext*.
Yeah, markup is interesting approach. I had a day to build CMS and render it with React, so I created mini markup language, a parser that converts it to JSON for MongoDB and function that converts these JSON objects to React components. Overall experience was great, average user didn't have any issues so far. I combined that with "blocks", but that's far from rich text editor. So when complexity grows I will replace it with Draft.js
Best practice is to use react-router. Rolling your own is fine, but using a router is much easier and better for if other people work on your code.
Ah good to know, after looking into it, it seems thats pretty much what react-router is used for haha. I had heard of it before but I didn't think I needed it. I will definitely look up how to use it and implement it :D. I'm still new to React and Redux so I hadn't really ran into this issue yet. Thank you so much! 
As long as you’re not PascalCasing random non-class/pseudo-enum variables ;)
Because declarative can be easier to mentally parse than imperative when done correctly.
&gt; PascalCasing I'm a ferocious pascalcaser.... can't stand names that start with with lowercase or underscores. I want to be able to "read" the names like regular text in a book (and pascalcase lets my brain pickup on where words begin). I'm also starting to lean towards Typescripts "this.MemberName" even in languages (eg. c#) that don't require the "this" for member variables/properties). I like that it distinguishes members from local variables (without a leading _ or m). I'm pretty picky :)
Yep. Also, as an FYI, [putting components in the store may work, but it's not recommended](https://redux.js.org/docs/faq/OrganizingState.html#organizing-state-non-serializable). That said, it's totally fine to use Redux store state to help control parts of your UI, which could include things like "which tab is selected" or "is this side panel open?". The [React-Router docs](https://reacttraining.com/react-router/web) are excellent, and my [React/Redux links list](https://github.com/markerikson/react-redux-links) has a section on [React and Routing](https://github.com/markerikson/react-redux-links/blob/master/react-routing.md). 
The only problem with this style is that everyone who reads your code will be confused and worried. It's a nearly universal JavaScript convention that constructors begin with an uppercase letter but ordinary functions and variables and parameter names never do.
Not my fault that everyone else is wrong. :) /s /ha! no one but me reads my code... I win... oh wait.. :(
Programmatically change the background-position y value css property at some fraction of the scroll position. But don’t do this, it has tremendously bad performance.
The moment the self-awareness hits. Not to be rude but I think we all know that code should be readable by others... unless you are just doing a project for yourself. Then_there is_no_shame In PascalCasing Or wHaTEvEr.
Biggest thing you lose contracting is bennies...figure out how much your health insurance will cost, factor in any 401k matching you'll lose, and see what kinda contractor you'll be (probably 1098c but check). Anyway, calculate all that and see what double functionally works out to. 
I would like to ask a candidate about a part of JavaScript they don't like, and to explain why.
Dafuq is a "webmaster". Are you from 1997? I'd avoid using that title if you want to be taken seriously in 2018.
Post a jsfiddle. Not much you can tell from what you posted. Also could be a css issure
I interviewed at this company and they asked me to write a polyfill for [ResizeObserver](https://developers.google.com/web/updates/2016/10/resizeobserver). That was the whole technical part of the interview. It was cool cause it's a small, self-contained task that requires you know how to do a number of different things. Better than being asked about linked lists. After that, I've been a fan of asking people how they'd polyfill some feature.
domain expired on 12/28 :(
Uupppps, thats why godaddy was bothering me huh!! Will be up shortly, I'll post it here
Pretty common setup for larger corporations as far as I’ve seen, though I’ve never done it myself. The only red flag is that there’s no time set on the full time transition. If that’s something you want I’d try and negotiate a 3 or 6 month contract with an evaluation to full time then. 
No that's not safe. You will have to comply with PCI DSS when holding creditcard details, and this won't comply. See also https://news.ycombinator.com/item?id=4654606
A bad actor can only use the token if they also posses the shared secret between you and the payment processor. "Shared secret" here means your account credentials like a username + password, API token or other access tokens such as oAuth tokens. So long as you don't leak that information the token is a useless string. If you want to do this in a more secure way, you can create a temporary session on the server that holds this data until the final submit button stores the data against the user/purchase entity and then tear down the temp session.
I asked them about it and they said they would get back to me after discussing it. In regards to giving me a contract duration.
Yeah, the secret keys are stored on the server but I like your idea about temp session on the server. I'll look into that. Thank you very much
Khan's programming course is in JS, is free, and has always been one of the highest quality resources for learning for free on the web. https://www.khanacademy.org/computing/computer-programming
If you can, also set the "samesite" flag on the cookie
At their most basic, routers are very simple. Even featureful routers, when separated from view rendering, are fairly straight forward. I home-rolled a little framework by stringing together a bunch of separate components for a project once. Landed on https://github.com/joshbuddy/sherpa as the router. Wasn't great, wasn't awful. 
&gt; pseudo element you just brought this case back from the dead 
Please check out /r/learnjavascript
&gt; You mean like this: Ah, no, no. I meant the function call. I meant if you separated the check from tge disabling, you would put the function call with the `if (check()) btn1.disabled...`. It _is_ preferable to have the function even if you were to only use it once.
What about completely getting rid of credit card processing and letting a service like stripe handle all the stuff? Much better sleep and night ;) So you don't have to care for anything security relevant and let the pro's handle it.
How to lose your job to people who are keeping up to date with modern technologies. 
I lol every time I see a guy locally with a personalized license plate of webmstr
You definitely deserve kudos for marketing and branding your library, but in the end it's not more than (personal) library of utility functions, is it?
From what I know, in recurring subscription scenarios, even when we use Stripe or Braintree, tokens are used and are to be saved by the client.
I think a better option would be [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage), which is scoped to one window/tab, is deleted when the user navigates away from your site or exits the browser, and is not transmitted with every request to your server (which is what happens with cookies). If you do use a cookie it is important to set the `secure` flag so that the cookie will not be transmitted to your server on unencrypted requests.
It really depends on your use case. Some applications will see zero benefit from SSR, while it's completely necessary for others. I could also argue that code splitting and only serving the JS/CSS needed per page isn't necessarily always optimal. Constantly downloading small bundles on every click could have a negative latency impact versus the one-time cost of a single bundle.
Why the hell does it text your wife? Why does she need to know when groceries YOU like are on sale?
She probably does the grocery shopping and I'm guessing he built this as a joke. Calm down.
Arrow functions are currently overused though. I've never been a fan of declaring a function as a variable, unless it is to be passed around. Declaring functions as object properties is a syntactic workaround for class like behavior so it makes slightly more sense. But the entire const equal arrow function just because js recently got them is silly and even worse a source of bugs for those who don't understand the difference of function declarations and arrow functions. If it is a plain old function, declare it as a function. Everybody will know exactly what it is and can read it without thinking twice. 
Self appointed experts are the ones that haven't gotten over the hump to humble down for how much they do not know. Unfortunately they are all too common in software development circles. 
Lol builds an entire service to text his wife to get him something when he could just get it himself 😂
Even if she is always the one doing the grocery shopping I would expect the title to be &gt; "it texts my wife when groceries we like are on sale" or better yet &gt; "wrote an app that notifies me when certain items are on sale".
And all this time I've been doing arr.filter(item =&gt; !!item)
/r/TwoXChromosomes is that way -&gt;
I’m no fan of Python. The language’s rule for readability seems to be some esoteric understanding of English words that some prominent members of the python community agree are good. if not x in y: Very readable... The lack of block characters confuses me often. Just today I was just about to “correct” an indention bug when I realized what I thought was a local variable declaration in a function was actually intended to be a global variable. To make matters worse, sometimes a team member uses a text editor that prefers tabs instead of spaces (or vice versa) regardless of whatever else is on the lines preceding. The result? Weird combinations of tabs and spaces that have programmatic value. I tried to correct one once, but since I didn’t know how python interpreted mixtures, And since my text editor apparently treats tabs as four characters instead of whatever the other team member saw, I can’t just look at the code and determine what ahould be indented to what level. Invalid indent errors everywhere. I gave up. Dictionaries require quoted keys, making inline dictionary literals harder to write. Objects are not addressed the same way as dictionaries, requiring you to know the type before operating on the nested data. Imagine trying to acess a value in an object in a dictionary in an object in a dictionary. Any time you want to access things even slightly off the beaten path (like a programmatically defined object parameter name or some such),you have to use weird helper functions with a bunch of underscores for no apparent reason (readable?). Those are a few of the gripes froma salty occasional Python user. No guarantees to the technical accuracy of these statements. I’m only treating Python the way everyone else treats JavaScript.
Also HttpOnly flag prevents XSS
Well, hyperscript is basically React without JSX (by code style). If you need something similar to JSX, which cannot be achieved by legal js syntax, you need some transformator by principle... Then, you should probably look for some templating engines, like mustache.
&gt; is deleted when the user navigates away from your site No, it is only removed when the user closes the browser. Knowing myself, big chunk of users and the population at large - some browser sessions last for weeks :(
I started something like this - scraping supermarket sites looking for discounts on selected products. It seems they are pretty shrewd in changing their markup to avoid scraping! 
Personally I don't get the obsession with offloading the work of generating markup to clients (especially mobile clients). If an end user can't get any utility out of your site/app with JavaScript disabled you're likely doing something wrong.
Jesus, man! Could you be more of a dick? Surely, there are better ways to say that.
It does that because that's what he wants it to do. 
Conversely, users don't necessarily expect instantaneous page transitions, but definitely expect your initial load to be fairly fast. I for one would most likely check out before your app with the blazing fast transitions renders a single pixel because it takes nearly a minute to download, parse and compile the entire bundle on my midrange Android, but if your home page takes only a few seconds to load I'm not really going to notice or care if it takes a few seconds to get to other pages because you've (hopefully) already grabbed my interest. There's a reason tools like Lighthouse measure time to first paint and tell you to reduce the size/amount of render blocking assets. It's about _feel_, not literal hard numbers (how much network traffic, overall latency, etc).
I get where you're coming from, but pick your battles. You don't know anything about their living situation or relationship. All you know is that it send his wife a text message. If you'd actually read the post youd see they talk about getting specials they both like as well
now port it to elastic beanstalk :)
Couldn't you just use IFTTT?
[That's some low quality bait](https://img.fireden.net/co/image/1465/80/1465804983560.jpg)
No one is defending sub-par code and, in this case, you're being too harsh. Only that there are better ways of criticizing someone and/or their work without coming off as a self-righteous prick. 
You are completely right, why would she need to do the shopping? Her place is in the kitchen :D 
Half an hour. No thanks. If there are that many “tricky” interview questions in a language, it signals to me that either: 1) The presenter is ill-informed; 2) Many in the field shouldn’t be there; 3) The language itself is ill-formed. Here, #3 is false. #2 ranges from “wouldn’t trust to watch paint dry” to “wow, I never knew you could make 6:€%&lt; resolve to “Hello World.” #1 is of indeterminate truthiness. But I’m not sticking around for a half-hour to find out. 
You are not making any sense. 
T R I G G E R E D
*Relationship goals*
I don't think anyone does the grocery shopping as this is a delivery service.
It might not sound helpful, but it actually lays the groundwork for something that could be helpful to frugal people. One can adapt this project to email you every time a weekly sale at one of your local grocery stores brings the price of chicken breast below $2.99/lb. Or whenever toilet paper falls below $X per roll. Any items you want. Then you go stock up on those items, saving yourself money in the long run. OP, a few years ago I began to build something similar, for grocery stores in my region. I had ideas to make it an app that scanned grocery stores nationwide (at least, those that posted their weekly specials online), and gave users the option to monitor any item at any store(s). But the scraping process would have to be tailor made for each individual grocery store. If I recall, even branches within a chain of stores (e.g. Giant, Safeway, etc) had slightly different website layouts in terms of DOM structure. In that case, it would be very difficult (i.e. require a lot of man hours) to stay abreast of changes to any specific website, and fix your scraping algorithm. I guess you could automate the process of monitoring websites for DOM changes. But you would still have then in-turn manually fix the scraping algorithm for that site.
Using stripe, you'd still end up in this exact scenario. You've got a token, that you need to store somewhere.
Does the cost of running the service cost more than the discounts?
Depends on the region, in UK I find when you jump into contracts you have to consider you will lose a lot of the support from team members and need to become self sufficient in learning and developing. A lot of good mid level engineers I see make the jump too early and then struggle to advance their skills. So if you feel you can handle that then it is a good time to consider it. In terms of your situation, consider whether the role is right for you before you consider the money.
https://myanimelist.net/anime/26349/Danna_ga_Nani_wo_Itteiru_ka_Wakaranai_Ken
&gt; across dozens of separate JS files Well, there's your problem. Those files are included elsewhere and the analyzer won't know anything about that. (There might be a workaround via configuration files.) I recommend to use ES6 modules. With modules, you declare in each module what other modules you include. Since it's declarative (and standardized), this information is available to static code analysis. The analyzer will then know where something came from.
Suffer. I live for this 
SMS is icky, but the rest is interesting. I'd probably sub in telegram and try it out. Thanks 
IDK that `arrayToHtmlList` function is rather inefficient in that it causes a lot of unnecessary document reflows. Even worse, it replaces the original children and thus corrupts references, added event listeners etc.; so it would be better to `.insertAdjacentHTML` like so: ``` const arrayToHtmlList = (arr, parent) =&gt; { const html = arr.reduce((carry, current) =&gt; (carry += `&lt;li&gt;${current}&lt;/li&gt;`), '') parent.insertAdjacentHTML('beforeEnd', html) } ``` Or even better as far as security is concerned: ``` const arrayToHtmlList = (arr, parent) =&gt; { const els = arr.map(item =&gt; { const el = document.createElement('li') el.textContent = item return el }) parent.append(...els) } ``` All in all nice project though. :-)
lol
WebStorm.
Lol are you trolling?
Yeah and that's why it's funny, stereotypes are great.
Of course, for those of us who know how to program, you don't need any of those to do the exact same thing better, faster and smaller.
I'm betting it is far, far more likely his wife does the shopping and cooking.
Except in the more likely case that she does the grocery shopping and cooking.
It comes from when JS was a mess. ES6+ is fine. Python still has some niceties: - bracket vs indented blocks (subjective); - end of line handling (subjective); - working with generator/iterator is easier in python.
women will make you build javascript bots in order to avoid hearing them
ES6 Modules is the correct answer, Typescript simply implements the ES6 modules spec and the same can be achieved by any transpiler.
I don't know why Svelte does get more attention here.
Everything is free except the texts. I have to admit that I built this fully expecting to reuse this code for something else so I know it's a little bit overkill.
Good effort, but you could do a lot to improve your code. For instance, you don't need to await non-promise functions like console.log or Date(). Also, try moving const declarations outside of your loops when they don't need to be in.
Yep this is right. That's why I explicitly set the expiration 
Is it possible to access the sessionStorage of another tab though? Would this be accessible only by scripts run after the transaction, on the same exact tab? 
Yep. Doesn't outright prevent it but is supposed to help. I mentioned that as part of the original post 
Good call. I was a bit overzealous with the awaits while getting it to work. Will go back and clean it up.
You’re missing the point of the comment. He built something to _tell his wife to go get it_. It’s not messaging himself or making a list for him to refer to. It’s coldly assigning errands. To his wife. It’s hilariously tone deaf. 
To be fair - JS is not "ill formed", but it has a lot of tricky bits. Starting from fundamentals like the scope of `this` to `typeof` to having both `null` and `undefined` to being able to add arbitrary properties to Arrays etc
Good work! 
Are you sure you don't mean Secure flag? HttpOnly is a different one that prevents any JavaScript from accessing the cookie, so none of your third party JS dependencies or unescaped user input could send your token elsewhere. If you store the token in sessionStorage or anywhere else accessible in JavaScript, XSS would be possible.
Why PhantomJS though, isn't it pretty much dead?
We'll see how long it lasts before I need to change the scraping code :)
Ah thanks for clarifying I thought they were one and the same
I see, makes sense
Is your web app bigger than, more important than, or have more functionality than Amazon? No? Then why on earth can I get _nothing_ from it without JavaScript? And I didn't even say all features, or even the core feature of your app should be available. I said _any_ utility at all, even if it's just a goddamn contact form. So many apps out there render nothing at all if JS is disabled, so much so that it's become an actual Lighthouse metric. I'm really tired of people reinventing the wheel in (client-side) JavaScript when we already had/have full-featured cars
You'd have had an easier time reversing their mobile API, as it's exposed in the request traffic when you search. Paring down via Postman, I can get a successful response from this: POST https://www.foodkick.com/mobileapi/v/1/search/ Headers: Content-Type: application/x-www-form-urlencoded x-fd-extra-response: EXCLUDE_ADDRESS POST body: data={"pageType":"SEARCH","searchParams":"blackberries"} Node example: const fetch = require('node-fetch'); const FormData = require('form-data'); module.exports.search = (terms) =&gt; { let data = { pageType: 'search', searchParams: terms.join(' ') }; let form = new FormData(); form.append('data', JSON.stringify(data)); let headers = form.getHeaders(); headers.set('x-fd-extra-response', 'EXCLUDE_ADDRESS'); return fetch('https://www.foodkick.com/mobileapi/v/1/search/', { method: 'POST', body: form, headers: headers }) .then((result) =&gt; { return result.json() }) .then((data) =&gt; { 'browse.sections.sections'.split('.').forEach((name) =&gt; { data = (data || {})[name]; }); if (!data) { throw new Error("Malformed response"); } return data; }); }; Later... const foodkick = require('./foodkick'); //File described above. const isSale = (product) =&gt; { return product.savingString || // Visual flag on bottom product.dealInfo || // Visual flag at top (product.availMatPrices.length &gt; 1) || // Means there's a volume price (product.price &gt; product.wasPrice); // Means there's a markdown }; foodkick.search(['blackberries']).then((products) =&gt; { products.forEach((product) =&gt; { if (isSale(product)) { sendSaleInfo(product); } }); }); 
Awesome! Will definitely play around with that in case they change the markup and break the scraper.
From a high level, that sounds about right.
It doesn't say that or imply anything. When you think about it, you are the one who is being sexist. Lol what a time to be alive 
"Tricky" interview questions are meant to find people exactly like the person asking the "tricky" question.
oh ye, with return true and false and then use to call with if (check()) and then I can put btn1.disabled and anything else to it, so I don't have to write it in the check inside, very good advice, thanks!
Use TypeScript and Visual Studio Code
Not OP, but it seems like this is based on LINQ's OrderBy, ThenBy instead.
&gt; While the latter is a bit more complicated in logic, it's easier for someone with no context to understand what's going on, without the need to consult external API documentation. I disagree. I need to stop and think what is going on with all those subtractions. Also, how would you do this if x and y were strings?
Because you often don't know where to start looking for a bug. Once you found the place where it's bugged, it's better to use `debugger`.
I'd argue that stage-2/stage-3 is mainstream nowadays.
&gt; if not x in y: This works because of how boolean logic works, but the "correct" way to write this statement would be "if x not in y", which I think most would agree is perfectly readable. Most of the rest of your gripes is pretty subjective, except for the tabs vs. spaces issue. The community is fairly unanimous on this - just use spaces. Period. Especially if your code will be read and edited by others. Tabs just aren't worth the trouble. A minority do prefer tabs, but even those heretics generally agree that mixing the two in Python is a mortal sin that will land you in the deepest pits of programmer hell. Every editor worth using lets you configure tab behavior and allows for visible whitespace - whichever member of your team is mixing them needs to be smacked with a rolled-up newspaper. Then find out who approved said code and smack them too. Don't let them near any more Python code until they start using a linter - I prefer flake8, but both it and pylint can check for mixed whitespace. IMHO the root problem here is that your team members are allowed to choose tabs or spaces in the first place. Even in other languages mixed indentation makes code hard to read and edit if you're using different tab settings. Pick tabs or spaces (spaces, please, if you're using Python) and stay consistent.
I'm not familiar with Amazon's inner processes but I'll assume they either 1) still keep the tech stack they had before the move towards "offloading to the frontend" and it works for them and they're happy so obviously no reason to rewrite there, or 2) if they did join the client-side JavaScript trend, they have the resources to make developers do the extra work of caring about the no js experience. For smaller companies (that's everyone else), I think considering css and js as sprinkles on top of HTML as the one and only fundamental web technology is way too spartan in 2018. If making the site provide any utility to the elusive no-js-enabled users is hard to do with a modern tech stack, I don't think it's worth doing it. As for the modern tech stacks / wheel re-inventing itself, hey who knows that might end up inventing flying cars with no wheels required! Yes, that means we're seeing some shoddy work now with people using dev versions of frameworks in production or getting too carried away with one technology, but you can't deny there is lots of innovation currently going on that has already proven to make the web app development process much much better.
Thanks!
No need to be rude. What title should I use instead for managing WordPress sites?
&gt; that has already proven to make the web app development process much much better. And that is the core of things, that we've become so obsessed with our own DX that we're caring less and less about the actual user. I think you should give [this](http://idlewords.com/talks/website_obesity.htm) a read sometime. Like someone once said, I'm browsing the web, not the JavaScript App Store. I don't see why I should be downloading megabytes of assets for someone's shitty CRUD app. I see no reason why people should implement glorified todo lists and such with a frontend framework. It's _sooo_ easy for devs (myself included, though I'm actively trying to get away from it) to dick around on their fairly new MacBooks and latest version Chrome and unlimited LAN connections that they don't realize that _everyone_ is no-JS until your JS has actually loaded. I'm not going to sit around staring at a blank screen forever, and then god forbid the network drops for a second and your bundle doesn't get loaded.
&gt; and is not transmitted with every request to your server (which is what happens with cookies) This by itself makes sessionStorage safer than cookies, then. If you have to choose between them, go sessionStorage.
I've always been interested by python's [list comprehensions](http://www.secnetix.de/olli/Python/list_comprehensions.hawk).
I made it clear from the beginning that performance and user experience is what matters. I just don't think that web apps that work with js disabled are that important to UX. A white screen caused by a big js bundle is a performance issue that should be addressed without having to consider JavaScript as an auxiliary to the already perfect HTML only web. I guess the blurred line between apps and sites is what still causes confusion. When "browsing the web" yeah, you shouldn't have to download megabytes of assets ( even though, if you enjoy fancy visualizations in news articles that has changed too). But in web apps land you're clearly in the JavaScript App Store.
&gt; "Any fool can write code that a computer can understand. Good programmers write code that humans can understand." &gt; Martin Fowler, 2008. Unfortunately, you only learn what "human readable code" is with experience, and after witnessing a lot of bad code. So the only advice I can give you is: try to express your coding ideas in the clearest possible way. Avoid convoluted logic and use the "divide to conquer" mantra as much as you can. If you make clear to your interviewer that the code you write is easily understandable by other people, you'll instantly be ahead of many.
I like to use python for data processing, and js for async things. `range`, list comprehension, `for ... in ...` loop, etc. in python makes it easy to work with strings, and lists. There are lots of libraries for data analysis. numpy allows you to do that pretty fast. I've never heard about async things in python so I guess python is not suited for that. With `async/await` (or promise) in JS you can write readable and short code to do async things. JS is kinda slow for CPU bound things (because it's dynamic typed), but web assembly solves that problem. And as you know, there are insane number of libraries for doing web-related things including server-side and client-side.
Yeah, but my preferences are ignored by people sometimes. Angular 1.X is the only used on the market.
VSCode does a pretty good job analyzing javascript as well
You should continue to learn them all (css, js and html) as they are all critical components that work together in a browser. If you want to focus more on design, than JS is less important, but if your goal is to do front end development than you’ll want to know it all :). Just to give an example, you can use JS to create styles and inject html. JS drives the logic/functional aspects of a page, html is the foundation and standard interaction elements and css is just an easier way to target html elements with stylings. Hope that helps and good luck!
Yes, the data would only be accessible from the same tab.
If Python is about readability, it shouldn’t allow problems like this to occur (unreadable boolean constructions, mixed tabs and spaces, etc.). I suspect the problem is that this team member is tremendously overworked and does code editing in maybe five different editors due to having to edit files in many different contexts. Good practice? No. Have a choice, also probably no, with our deadlines.
And I've never claimed that HTML is perfect either. It (or rather the browser ecosystem around it) is very very good at one thing though, and this whole thread started with me saying I don't get the obsession with offloading _generating and rendering markup_ to the client. There are very, _very_ few apps I can think of that absolutely need all of their markup to be rendered with JavaScript, yet that has become almost the de facto norm. For example, I PM'd you a link to a simple parcel tracker. It uses Google Maps, which requires JavaScript, but besides that weighs in at less than 17KB **total** - HTML, CSS and JS, including NormalizeCSS. No g-zipping, no optimizations beyond some lazy minifying and a half-hearted uglification, and without JS the user still gets the same UI but with the map panel and search button greyed out/disabled. Yet a lot of people I know would throw React at it for absolutely no reason. The worst part about it is that every bloody thing is a "web app" these days. Trivial bits of interactivity and functionality do not an app make. Beyond that, the great thing about the web was and still should be that you don't have to install (download) a whole app to access content and functionality. Turning it into what is essentially an App Store where I get almost no control over what gets downloaded and executed defeats that.
Hi, I made a fullstack JS app with React and Node.js that allows subscribing to releases on GitHub by email. It's dockerized and is divided into server and AWS Lambda: https://github.com/vfeskov/win-a-beer 
WordPress administator
Thanks!
... unless you have actually mastered the web... in which case wear your red cape and Chuck Norris tf on.
Sure that makes sense. Also, I probably got too caught up on the minutiae of the app strictly working with js disabled. Where the most important point is making sure you balance DX with UX without sacrificing one or the other based on generalizations. If you don't see a performance hit from using React and your team moves faster with it, go ahead and use it. If you can't build a responsive navbar without it, you're hurting your users. Framework or not, frontend rendered markup or not, there's no reason to send more bytes down the line.
This is an implementation of Conway's Game of Life in the browser, using Bill Gosper's HashLife algorithm. Yiu can try it online in your browser, the README contains the link and explains the UI affordances. https://github.com/raganwald/hashlife
Don't use a namespacing pattern like the one in the article. It is outdated. Besides, it completely obfuscates the definitions of your objects. Use [ES modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) instead. That way, your editor will always know where to find every single definition. If you're bundling your files anyway, you should *definitely* be using modules.
If I tried this, I would start getting auto-replies from my wife saying something like "Great, please pick me up [automatically generated list of some of her favourites] while you're there." :-)
Put together a starter project for canvas-based (three.js in this case) apps along with a framework (Mithril) for UI. Includes Typescript and PostCSS along with browserify/budo for hot reloading: https://github.com/spacejack/three-mithril-ts Any thoughts/opinions on setup for this sort of thing welcomed.
Well, given that FoodKick is a grocery delivery service in NYC, no one is running an errand—they're getting a text, loading some items in a virtual cart, and checking out.
If you use a lib like Bluebird you can set a concurrency limit. Check this http://bluebirdjs.com/docs/api/promise.map.html
Yeah I was really hoping for resources that didn't abstract everything behind a specific js lbirary. There don't seem to be many tutorials using vanilla js. Everyone just wants free advertising for their game library...
&gt; as a syntax "simplification", it's a total failure. No ? If you get it it's clearly simpler ? Simplify doesn't mean you don't have to learn something new
assuming you have an array of the list of function calls you want to make The ES5 way: function chain(functions) { // This is just to have an initial promise, if we didn't have this we would have to do some checking and maybe create one anyway var p = new Promise(function(r){r()}); for (var i = 0; i &lt; functions.length; i++) { p = p.then(functions[i]); } return p; } The ES6 way: async function chain(functions) { for (let i = 0; i &lt; functions.length; i++) { await functions[i](); } }
with a bit of functional programming you can do this: const logNow = () =&gt; console.log(Date.now()) const logTimeIn1Sec = () =&gt; new Promise(r =&gt; setTimeout(r, 1000)).then(logNow) const logTimeIn2Sec = () =&gt; new Promise(r =&gt; setTimeout(r, 2000)).then(logNow) const logTimeIn3Sec = () =&gt; new Promise(r =&gt; setTimeout(r, 3000)).then(logNow) logNow() chain([ logTimeIn1Sec, logTimeIn2Sec, logTimeIn3Sec ]) function chain(funcsThatReturnPromises) { [...funcsThatReturnPromises] .reverse() .reduce((next, func) =&gt; { return () =&gt; func().then(next) })() } Outputs this: 1515000689682 1515000690688 1515000692694 1515000695700
afiak, it's the same intellisense engine either way.
Typescript
Just learn to animate html elements using css and js. Canvas is a good thing to look at too.. Certainly should be some vanilla tutorials out there.
&gt; This is just to have an initial promise, if we didn't have this we would have to do some checking and maybe create one anyway If you want, you can use `Promise.resolve()`. _Oh, and your versions are a bit weird. In ES5 you don't have Promises and `async`/`await` is in ES8. Just to avoid confusion, I mean._
Ahh.. the entire world lives in 300 square miles.
Not javascript specific but I was asked "what is your favourite language and why is it your favourite language". I chose javascript and it really allowed me to dive into the language itself and talk about dynamic typing, the V8 engine, OOP vs. functional programming, and a bunch of other stuff. I've started asking it myself now and it really brings out the passion in candidates.
My controversial AJAX optimistic caching library - hated by some, misunderstood by others, possibly nobody thinks a good idea, but works well for me in production, making many requests in my SPA appear instantaneous. https://github.com/kswope/stale-cache 
This is a perfect example of over-engineering. &gt; OMG I'm going to use this, this, this, this, this, a lot of this, and this to do something so simple, just one thing would suffice... I'm such a cooooool hipster, I use Javascript... Worship me, everyone. I think only a moron would use the 'code examples' from someone who does something like this, and then posts about it for the reddit world to laugh at them.
It lays the groundwork for how not to code.
You don't know, maybe he has a 10 foot dong?
but i bet you don't use javascript.
disclosure: self-submission
&gt; JS is kinda slow for CPU bound things (because it's dynamic typed) I don't think that's true, vanilla Python is a lot slower than JS: https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=node&amp;lang2=python3 But it is possible that you could be talking about libraries like numpy which are essentially C code with a Python library. BUT! I should also mention Node has the ability to interface with C libraries as well. 
It's been that way for over a decade. When people say REST they often mean RPC with pretty URLs, or they put some / in there and made it flat out RPC anyway. Wrote up a big thing about that: https://www.smashingmagazine.com/2016/09/understanding-rest-and-rpc-for-http-apis/ But yeah, anything that's not at the very top of the Richardson Maturity Model is definitely RPC. https://www.martinfowler.com/articles/richardsonMaturityModel.html
I have to agree with you about over engineering, but there's nothing wrong with using JavaScript... Let me guess, you only write code in FORTRAN AND COBOL?
there are plenty of frameworks that follow semver and have a stable/polished API that's backed by regression tests. perhaps React is the first framework you've used that's in this category?
Nope. It's accessible from any tab as long as you don't kill the browser process 
Ember, for one, is famous for minimizing BC. Mithril is another. i'm not intimately familiar with Vue or Angular 2+, but i imagine any framework with a significant install base takes BC very seriously. maybe this topic is about seamless upgrading between *major* versions? in react, 15 -&gt; 16 introduced minimal BC.
The correct question is about JS engines/interpreters, no?
&gt; No virtual dom, no virtual events are used for maximum possible performance. these claims require some really strong evidence. the fastest frameworks all use some level of virtual dom abstraction. we accept PRs [1] ;) [1] https://github.com/krausest/js-framework-benchmark
Who cares? node_modules aren't complicated to manage, and it's not like they're being served.
I was genuinely shocked to find this wasn't /r/programmingcirclejerk just from the title alone.
you missed my point. i'm not dissing javascript, i'm laughing at how javascript is used. if someone knew what they were doing, most of that could be replaced with - for example - php.
If you said bash I would have taken you seriously
If you actually read his article...
Very useful. You don’t want to have to refactor any calls to a function if you want to add a new parameter. 
Sources are here btw: https://github.com/myphysicslab/myphysicslab The source is interesting, taking full advantage of Google's Closure Compiler system which is somehow still relevant.. it's been around since before webpack, react, ember, possibly requirejs, etc, and was one of my first exposures to web development.
(inb4 downvotes) I'm with you on this. SMS is the worst possible messaging platform. It's expensive, slow, and doesn't allow rich content. Personally I'd probably go for an HTML5 push notification, but Telegram or any number of other arbitrary notification tools work too.
Why use promises if you want to wait for each execution? Anyway, to not execute 500 promises at the same time, you could use es6-promise-pool to control how many concurrent executions you want to have. https://www.npmjs.com/package/es6-promise-pool
Here you are getting offended for someone's wife. Like I hate saying white knight and all, but do you understand the dynamics of their relationship? Holy moley stop projecting, and comment on the CODE, you know the thing this sub is about.... Jesus lmao.
Telegram Bot API is great for this. I have built several reminder systems with it. Easy and reliable free API. https://core.telegram.org/api
Couldn’t you send an email to the phone number for free?
I like and use arrow functions. But stuff like this: const mapObject = (arr, fn) =&gt; (a =&gt; ( (a = [arr, arr.map(fn)]), a[0].reduce((acc, val, ind) =&gt; ((acc[val] = a[1][ind]), acc), {}) ))(); is just ridiculous. One of the expressed goals of these snippets is understandability. The above snippet fails miserably at that.
What does work is the following: https://codepen.io/anon/pen/jYLzbj?editors=1111 Do note it uses `react` 16, what are you trying to accomplish though?
This is not readable: const mapObject = (arr, fn) =&gt; (a =&gt; ( (a = [arr, arr.map(fn)]), a[0].reduce((acc, val, ind) =&gt; ((acc[val] = a[1][ind]), acc), {}) ))();
I'm not sure if there's a deeper answer or not, but those two expressions evaluate different values. const arr = [1, 2, 3]; console.log(...arr); // 1 2 3 console.log(arr.map(elem =&gt; elem)); // [1, 2, 3] If you change it so the spread evaluates to an array instead of just the elements, then it does work: return (&lt;div&gt;{[...components]}&lt;/div&gt;) Must be something about the way React treats "loose" jsx elements vs jsx elements in an array?
Each mobile provider has a different email address you would have to send it to. You would have to know what provider the phone number is connected to in advance.
If he’s sending it to his wife only, then he would know the mobile provider.
I'm approaching it from an agnostic point of view. It's assumed he would know he's wife's phone provider. However, since he has also said he wanted to provide his work for reuse for other people you can't make the assumption that this application is going to be used by a platform that just happens to know what the end user mobile provider is unless they specifically asked for it. Even then, using the email method could fail because you have a finite amount you could send to that phone number since you wouldn't be using an authorized gateway (which most of these services are.) Not to mention, you would also have to have that email correct on the application end. Abstracting this out to a service dedicated to doing this takes all of that busy work out of the equation.
An inflrmed overview - would love more and detail on SPA and front end frameworks.
&gt; ...and a couple performance issues as the app scales. Unacceptable! I've never head of such a thing. * writes 20 `shouldComponentUpdate` implementations *
Misusing arrow functions is bad, I agree. You can also misuse the old way to declare a function. I still don't agree that arrow functions are harder to understand.
Yeah I feel that. When I hear "arrow functions are harder to understand" I translate it to "I don't want to learn new things".
Your wife sounds like a lucky lady!
Most of the times I am too lazy to pull in a lib or write a util function for this case, so I always come back to this: for (const fn of asyncFunctions) await fn()
Hey, First of all, this script is minified, that means legible names have been replaced by single or dual letters, whitespace has been removed, and it's harder to follow through it juste by reading it, even with experience. Then, it's not only their code but also some code it depends on (this is called a library). And code that isolates those components and gives them each other access when needed. This is called a module system. You can see in this paste a long list of devices : this is a third-party library that identifies your device, mainly to address display issues. Then, by the looks of it, it seems to load other scripts coming from addthis, and provide functionnality to share some content on other sites. I'm on mobile and am not aware of what is addthis, but it looks like a social sharing widget that comes with the price of trackers. An ad blocker should handle this just fine. --- And by "loaded some code into your browser", yes, but only to some extent. Your browser executed it in a sandboxed thread for the current tab, and besides maybe caching it (keeping it on disk to load it faster on other pages) nothing has been modified in your browser. Chances are tracing cookies were set, but that's not malicious in an attack sense. Privacy wise, it depends on how you feel about tracking but you should run an adblocker.
Hey! I posted this answer to your other thread https://www.reddit.com/r/HTML/comments/7nvcvn/16_and_have_been_learning_html_for_the_past_3/ds5ayaw/ Check out R/Webdev and R/WebDesign for some other great communities.
Thanks ! It's working perfectly at this web hosting : http://onsale.jaguarpc.com/
The script you've put into Pastebin has been minified, which means a processor has reduced the file's size as much as possible by changing white space/variable names/structure/etc. This is common practice for websites. This also means it is going to take a lot of effort to try and decipher what the script actually does, even for someone with a bunch of experience with JavaScript. For what it's worth, AddThis is a relatively simple means for website owners/developers to engage social media on their website, often by allowing website users to share pages or follow social media accounts. There's more to it than just that, but I'd hardly call it malicious. Where did you get the original JavaScript url from, and what has made you think it's malicious?
Sounds odd to me. When do you ever fill sCU i wonder? Especially as it gets larger you have it filled for you through redux/mobx/etc. sCU is the glue between your pure function and the connect hoc, but it's controlled by the latter.
It was more sarcastic than anything, and probably is fairly off the mark. :)
Just to add to what the others said, this is all valid now: const Numbers = () =&gt; 123 const Strings = () =&gt; 'hello' const Arrays = () =&gt; [&lt;Numbers /&gt;, &lt;Strings /&gt;] const Mixed = () =&gt; [123, &lt;Numbers /&gt;, 'string', &lt;Strings /&gt;, &lt;div&gt;...&lt;/div&gt;] const Fragments = () =&gt; ( &lt;&gt; &lt;Numbers /&gt; &lt;Strings /&gt; &lt;/&gt; )
Haven't a clue why you would think that.
That's a good question ! First as you identified yourself the is multiple mentions of addthis.com, which seems to be some kind of social widgets service coupled with user tracking as describe on their website https://www.addthis.com/ By the look of their site and their ToS they look like a legitimate business so the script you attached would be one of their embeddable widget. So by reputation you could assume that the code is not malicious and it's nothing that a script/ad blocker wouldn't pick. Now if you want to have a deeper look into the issue, you'll first need to understand programmation and javascript syntax but most of all understand how the browser work and can be exploited to detect such kind of code. I skimmed through the code looking for shellcode and such but didn't find anything, I'm not a security expert but what I'm seing is a bunch of feature detection, tracking and widget loading. &gt; Keep reading about the fucked up shit javascript can do Browser are way better nowadays at fencing rootkits, by no means perfect but the flash / silverlight / ie6 era is past behind us. An adblocker is a must have not only for security but also to avoid loading those kind of scripts which hog the event loop and are pretty massive for unecessary code, 350kb for this one. What you should be wary are saturated bandwidth, download prompts, CPU/fan increase on page load it indicate unusual activity and can't be masked. 
Why is that? Surely `cur` would have to fire before `next` is invoked?
Your js array processing is overly complicated. A single reduce method can do basically everything you would ever need. Arr.reduce((acc, n) =&gt; n &gt; 3 ? acc + b*b : acc) 
I’ve used both and I personally really like both, but they are for fundamentally different types of applications. I get a bit annoyed with the anti-Angular circlejerk on places like Reddit and HN. I get it, React is great, I’ve used it plenty, but Angular is also great and has its place in the industry.
`reduce` loops over each element in the array and calls it right away: `cur()`. When a returned promise from each call resolves, it calls the functions again. 
Intel: “Hold my beer:”
hey, may i ask you? which framework is it that's always getting complaints regarding no backwards compatibility on updates?
Ah, I'm with you. That was a massive oversight on my behalf
With that much requests to do you could use some kind of parallelization. Async is a great library to handle these kind of problem of control-flow. [eachLimit](https://caolan.github.io/async/docs.html#eachLimit) or [mapLimit](https://caolan.github.io/async/docs.html#mapLimit) seems fitting for your issue. If you're struggling to understand how async work, each functions follow the same pattern : async.map(collection, iteratee, callback) * collection is the array that will be parsed * iteratee is the function called for each item, it'll be called with the current collection item and a callback to proceed. * callback is the function called at the end of the run giving you the results or the errors. Look at the exemples in async's documentation, they're pretty self-explanatory.
I was just messing around with the web developer on firefox and picked it out out kind if randomly. So You're saying that's just the source code for a website? I though anything that ended in .js was was just like a function of whatever website I found it on, so when I put that in the url bar and saw all the text, I thought it was just like a really long list of commands that were being executed or something. I've wasted a lot of time just like, looking at the web developer, even though I don't understand half of it, cuz likr DOM properties, i'll be convinced im getting somewhere, but they never fucking end. I dont know what what the fuck DOM stands for. thx for answering though. good t0o know I didn't just load the mother of all explpits.
Thank you
html:5 tab
vue.js
Ember.JS
/r/learnjavascript will have more resources but to really learn the language you will need to write a lot of programs. Keep them challenging: they should be hard but not so hard you feel like they are impossible or discouraging.
&gt; Basically, what do I need to do to learn how to program JavaScript? Do you have anything scheduled for the next 10 to 15 years?
I've had some bad luck with that library. Versions 1, 3, 4, and 5 mess with `Array.prototype` in unpredictable ways. `Array.prototype.find()` returns the index of the found item (or -1) instead of the item itself, f'rinstance.
Simplest way is with a reduce function: const sequence = (...fns) =&gt; fns.reduce( (prev, next) =&gt; prev.then(next), Promise.resolve() );
I feel like it's interesting that you've gone the whole TS way but avoided Webpack and thus also things like e.g. bundling styling for a given component together with the actual implementation of the component. It's not necessarily anything I would change, but it does seem a little odd in what otherwise looks like a pretty OK structured app/boilerplate.
Just to mention also, upgrading Ember is now as dirt-simple as running `ember update`. Does a diff against your project and a new project and applies the changes, and performs a three-way merge of your package.json dependencies. Most of the time there are no git conflicts and you've upgraded by typing two words. It's amazing.
A function is a way of enclose some code that performs a specific task, so it (among other advantages) allow you to not repeat your code lots of times. Example: Suppose you have a web where you ask a number to the user, a lot of times. Your code is full of (this is an example without too much sense): let response = prompt("Give me the number"); let number = parseInt(response); Now you can write this inside a function; function promptNumber() { let response = prompt("Give me the number"); return parseInt(response); } So from now on you can write `promptNumber()` instead the code itself. This helps to avoid duplicate code and also improves readability. Pd: sorry for my english, it is not my first language
Ember does a pretty nice upgrade path most of the time which is not bad considering it contains far more than just the view layer. When you add the entire React ecosystem in the mix for an enterprise app (example: React Router and friends) you get a lot more breaking changes that have hit the community. I'd consider them relatively small still but it is not always thornless roses in tech.
It's all about time. Try to make a project, for example reddit bot in JavaScript. Then add more and more features to it. After that make other project, for example a snake, then simple rpg then the next one. You master your JavaScript skill by practicing with projects. First simple, then harder. You will struggle in every one of them, but you will dig through to find the correct answers. Finding an answer may take hours or even days, but you will find it eventually. I have some experience with JS, but I don't know everything, hell, noone knows everything. I very often need to google what would certain function return or what params they take. It's all about self confidence. Now you can feel you suck at it, but don't worry, I was there too. After the 4th or 5th small project you would feel you can do much more even though you don't know the technology, but you don't worry, because you had spent weeks trying to find answers by your own. You were angry, you were mad, but you ALWAYS found the answer. Now you are not worried about the new staff, because you know it's all about time.
Always passing a single argument like this: coolApi({some: 2, thing: '3', etc: [4]}) Lets users ignore order and skip some of the params easily, and with destructuring of an argument it looks nice in the source code too: function coolApi({ some = 1, // default is 1 thing, etc }) {...}
You write English very well. It's not bad at all.
Why was this reply downvoted? It answered a question. It contributed to the discussion. Its only crime was to a library other than React that has a constructive attitude to updates.
&gt; A bad actor can only use the token if they also posses the shared secret between your application and the payment processor. Not necessarily - it depends what the OP does with the token. Does the server allow a user to retrieve details or perform actions if she or he wields the tokenized credit card? There could still be issues even if the token is not enough to perform a financial transaction.
What does for "serious business applications" even mean.
Thanks
Thanks
Where have you seen Angular vs React arguments lately? That's, like, SO 2 weeks ago, which is, like , 100 years in internet time. All the cool kids now have moved on to Vue... Have you been living under a rock?!
*`localStorage`* is useful for cross-tab communication. `sessionStorage` is scoped to one tab.
I should have titled this post with Food "We" Like instead of Food "I" like. I can see how the title might appear chauvinist without that tweak. My wife works for the Rachael Ray TV show now, but for several years worked for the Rachael Ray magazine and wrote about saving money at the grocery store. She asked me to code this for her to help optimize our grocery shopping. We were drinking really good margaritas at home one Friday night and she realized that she bought these mixers all at half price... she said "Damn, I would buy these every time they go on sale." The programmer in me just couldn't resist automating the checking for the margarita mix so that I always have some. Now I just need to stock up on Tequila.
&gt;&gt; is deleted when the user navigates away from your site &gt; &gt; No, it is only removed when the user kills the browser process. I'm sorry, you're right - if you navigate away and navigate back to the same origin (in the same tab) the data is still there. But `sessionStorage` data is erased if the user closes the tab.
"Part 2: How I glued a sex doll to a Segway" (it has to be able to roll to the store and buy the discount toilet paper, after all...)
I agree but there are some cases where split arguments also make sense(currying for example) 😁
I haven't heard an Angular vs React debate since last year
Thanks! A few notes on that. Number one, Browserify is much easier to configure from scratch, which is something you're more likely to need to do if you're building a game rather than a standard React app. I work directly with the APIs of the tools I use (like PostCSS) rather than second-hand through a Webpack plugin. Beyond that, I'm still not really on board with Webpack wanting to manage all images referenced by your CSS and to have all your assets imported. With games, you'll want to be doing a lot more dynamic, run-time asset loading. I also find it less than ideal to import CSS into JS (or TS.) This (I believe) causes JS bundle reloads rather than just CSS reloads, and doing HMR with a game isn't always going to work. Hot reloading a separate CSS bundle always works, it's fast and won't blow away your app state. As for Typescript I guess that's a personal preference, but I do find games are especially well-suited to TS. You typically need to write quite a bit of procedural/mutable code (so you're not facing some of the functional composition limits of the TS compiler) and you work with libraries like three.js that have massive amounts of types to deal with. It also helps you avoid accidental deoptimizations due to wrong property names or types.
React has one extra rule on top of normal "server" that they deprecate things in "version" and remove it in "version+1" So if you are using react 16 without any warnings, you should be safe to upgrade to react 17 without any work.
I see no real benefit here. If you really want to avoid refactoring, use an object instead of multiple parameters (or an array). _.get(obj, { prop: 'prop1' }) _.get(obj, { prop: 'prop1', deep: true }) Adding additional parameters becomes trivial and you also have the added benefit that your code is basically self documenting. You can look at a function call and know exactly what each parameter does, versus having to look up the function to remember what the 3rd parameter is.
Beer: "Hold my meta.."
All of the above is excellent advice. The thing keep in mind with JavaScript (and really any modern programming) is that it's rapidly evolving over time. Because of this you never really "finish" learning it. 
These are in ES6 specifications. You probably know all the hype about the things ES6 brings. I do not have resentment against these keywords, one reminds me c++ and so on.. BUT, it is good to remember where Javascript came from, back in the days of Netscape. Javascript was not designed as a language that had block scope, it only had function scope. In short do as you please, there is absolutely no drawback in using them as long as you know their specifications well, anything that works for you is 'best' IMO. For me, less has always been more.
[removed]
It's true, this is no joke folks.
How are they for fundamentally different types of applications? Angular might have a more comprehensive "framework", but they still target the same kind of applications i.e. SPAs. 
It's great to hear about a painless React update, but sad to hear that people are still using React Router &lt; 4
HTML5 push notifications do not require the user to have the browser open (well, on mobile. On desktop the browser has to be running but your page doesn't need to be). [Here is a nice demo](https://serviceworke.rs/push-payload_demo.html) of the most basic form of that, allowing you to set a message to be displayed and a delay for how long you want it to wait until sending. Try closing the page before the time is up, the notification will appear anyway.
1. IDE will help you with determining what each parameter does, and what’s its name. Unlike with a generic params object (youd still need to know what keys you can use, see my other comment) 2. Instead of boolean values you could consider taking flags and export a constant/symbol, so your call would be: `_.get(obj, ..., _.GET_DEEP)`
It doesn't mean anything, it's just a bullshit phrase uttered by insecure "Architects" 
When you do: console.log(...arr); it's equivalent to: console.log.apply(console, arr); Or essentially the same as: console.log(1, 2, 3); So `...arr` doesn't evaluate to anything on its own, and `{...components}` in JSX isn't a set of "loose" components, it's just invalid syntax. Furthermore, `{[...components]}` is redundant. You can just do `{components}`.
this is where typescript would come to the resuce interface blah { something?: string somethingelse?: number } now your function can be `function foo(params: blah) {};` the more i use typescript, the more i like it
Woomp there it is.
This is honestly a good question for every programming language. But with JavaScript in particular, most people don't even know why others think JavaScript is a bad language. It's always a good sign when people know the flaws of the language they're using.
I'm working in a large "enterprise". There's no formal definition, but to me it means: Large domains, complex business rules, large teams, **a lot of outsourcing**, data-driven, in-house mostly. At my workplace it's Angular all the way. I started out with React, but have switched to Angular with my projects recently. The main reasons were that Angular is a framework that scales well out-of-the-box. Typescript, DI and the given structure are a solid base. Yes, as React is just the view, you can easily create a stack the scales better than the Angular OOTB. You can use also TS, Redux, etc. ... But that's not the point. You need to make a lot of decisions and a lot of teams make different choices. For large teams and especially outsourcing you need a standard. If not the golden, at least a silver standard. Otherwise managing large teams and especially outsourcing is much harder than it can be. There's a lot of FUD regarding Angular around. Having used both I can confirm that using both is perfectly fine. Angular's learning curve is steeper, but it's a all in one framework, so you naturally have to learn more things from the beginning. Those consultants you're talking about are everywhere in the enterprise. But the reason for this is the lack of technical knowledge of most of the project leaders / management in combination with big budgets. It has nothing to do with Angular. While there're differences and things that are harder with technology A than with B and vice versa: Your projects success will ultimately not depend on the framework / lib but on the team.
Sure, don't use the token provided to you by your payment provider as the access key to other parts of your system. It's difficult to provide coherent answers when you're not allowed to assume that the reader of those answers doesn't apply a "as long as you haven't done anything insane" filter.
This advice is fair enough, but in general it's a bad idea to attempt future proofing in this manner in most cases. Unless you're designing a library for _very_ broad consumption (the ECMAscript standard for example) and even then the future is still open to you by simply creating a function with a new name and deprecating the old function. Additionally, most applications of this idea are going to be "internal" interfaces. Things uses within a single company or project. For those cases changing from the rest param version to the array version is dead simple using any of the many JS code modifying tools, see [jscodeshift](https://github.com/facebook/jscodeshift) and similar tools.
No matter what, learn the basics of JavaScript and play around with all three. From there, it depends what you think you'd be good at and would enjoy doing more. If you find that you like layout and design more, you can start diving in deeper to HTML and CSS. If you try out animating in CSS or JS, dive deeper into that. If it turns out you enjoy writing the logic behind an app, lean into JS a bit more and work with new concepts, trying them out each time on something practical that you'd use yourself (regardless of whether it already exists; these are just for you and your learning). 
If you're comfortable with plain JavaScript and ES6 syntax i'd recommend starting to develop full stack applications. Get Node, use a framework like Express and get a server going and display simple html pages, say a bookshelf or something. Then get a database going with mongoDB or PostgreSQL using knex and serve data from there. Once that's up and running start using a front end framework like React, Angular, or Vue, or any of the other dozen coming out every day. After that maybe start using websockets and make a chat app, or find an API and mess around with fetching data.
I don't think yours is "simpler". Yes it's shorter but not very readable. To avoid intermediate arrays in JS, you have to merge all filtering and mapping operations into a single reduce function.
You are right :) I didn't know python is that slow.
If you're familiar with basic syntax, then read code bases. Literally, just clone a few repos and read. Try to figure it out as you go.
Not as sad as me. The upgrade will take weeks so it’s never been justifiable. 
Go to Udemy.com, lots of excelent courses there.
Stuck with router3. Application grew big and so much logic is written to circumvent the disaster called react-router 3. Not seeing router4 anytime soon.
I agree that the JS community should have a mascot, but if we're going to settle on one, I'm not sure I want yellow letters on a black rhino - it's not a racist thing, I just don't like it. I'd go for a grey rhino and blue letters or something.
Whoa, that is surprising I always assumed the for loop would be faster. But maybe it has to do with the fact all variables are stored in the heap and with each increment and each read it requires extra hops to fetch. Interesting stuff! 
More what?
This article doesn't mention the browser, OS, or computer specs used for the test. Iterative approach is usually much faster because it doesn't have to set up the stack frame a bunch of times - therefore, I am sceptical of these results.
Meh. Or you can focus on making stuff, and dip into the latest features on an as-needed basis. The panic to understand every new dimension (and framework) of an ever evolving language is deeply counter productive. Here's a clue: You will never know it all. Ever. But you can be really, really good at making great stuff. So pick either the impossible, fruitless task. Or pick the goal that results in awesomeness. My 2 cents of course.
In the first one, the syntax is ES5-compatible. The Promise type can be polyfilled easily enough although I agree it should be mentioned in LukaLightBringer's post.
ES6 has tail call optimization in the spec, so if it's implemented you don't need to "set up the stack frames a bunch of times".
True but most major browsers have not implemented tail call optimization yet. And even if they had, I think it wouldn't be as fast as simple iteration. I would be testing this out in Chrome and Firefox if I wasn't on mobile - maybe someone else will run some tests and post them along with system info.
I am also beginner and don't understand what's the difference between creating a variable inside the function rather than outside the out function... I know this means that the variable inside the function can only be accessed in the function. But what's the point of writing variables outside the function to use them inside the function?
Assuming you don’t have any need to send rich content - and in most cases, you don’t - sms works for a lot of people, and works when they’re up a mountain with one bar of crappy signal, or on a train going in and out of tunnels, and doesn’t require them to have a modern phone or any particular app. On top of that, an sms is persistent and significant. I automatically dismiss notifications because their signal to noise ratio is even lower than email. Few enough people or services have my phone number, that an sms is meaningful.
&gt; disaster called react-router 3 Can you elaborate?
I am yet to try the declarative, component-based routing of theirs, but it does not look like a good idea at all, so I'm hesitant.
Funny that you should mention reliability, that's one of my primary complaints: it requires a connection to the tower, you can't SMS over WiFi (obviously there are ways to do it, but not by default). In terms of you getting noisey notification, that sounds like a different problem entirely. Do you just look at the app that sent the notification when choosing to dismiss it? Not read the text of it at all? The sending app is one of the last things I check.
To add to the other comments... The recursive version as written in the article is not even _tail-call optimizable_. I also have to doubt the author's numbers. Particularly since: a. I've tried two browsers, one Webkit-based, one Gecko-based, and they give quite different results. b. Times in the order of 10ms for the first case, is quite difficult to justify.
Awesome point of view! I really dig it and think that it is the way to go for most of the people. Still, this JS fatigue is a real thing. Cross-browser issues never seemed to be solved fully. I spend a lot of time reading this resources, but even more, time implementing the already usable stuff. Bottomline, some people read the news and others read the news section of Can I Use :D
I know you're speaking in hyperbole, but all the cool kids haven't moved to Vue. Only some loud people on Reddit. 
Do not take for granted that the results shown in the article are correct :) It's not as simple. The following results are run on Windows 10 Home 64-bit. **Firefox 57.0.3 (64bits)**: 2^3 8 looping #1: 0.49ms 8 Recursion #1: 0.35ms 2^1000 1.0715086071862673e+301 looping #2: 0.74ms 1.0715086071862673e+301 Recursion #2: 0.58ms 2^10000 Infinity looping #3: 0.57ms InternalError: too much recursion **Vivaldi 1.13.1008.40 (32 bits)**: 2^3 8 looping #1: 0.198974609375ms 8 Recursion #1: 0.0908203125ms 2^1000 1.0715086071862673e+301 looping #2: 0.132080078125ms 1.0715086071862673e+301 Recursion #2: 0.10302734375ms 2^10000 Infinity looping #3: 0.31298828125ms Infinity Recursion #3: 0.655029296875ms **Vivaldi 1.13.1008.40 (64 bits)**: 2^3 8 looping #1: 0.215087890625ms 8 Recursion #1: 0.08203125ms 2^1000 1.0715086071862673e+301 looping #2: 0.129150390625ms 1.0715086071862673e+301 Recursion #2: 0.10205078125ms 2^10000 Infinity looping #3: 0.7919921875ms Uncaught RangeError: Maximum call stack size exceeded
Yo! Need help again! I added a color-picker that I downloaded but I didn't manage to successfully make it draggable, the code works on other stuff but it somehow doesn't want to move this. I made a div around it and tried to move that and still, won't move it, if I take this out and then the div will be movable.. https://codepen.io/adkuca/pen/mpMoYv https://ufile.io/b28hi 
I'd find more interesting to run the sample for 2^1000 than for 2^3 :)
Micro-benchmarks are not reliable. 
Yup, the loop is waaaaay faster in that case, even on FF.
From what I tried * Router's API is not consistent with Reacts's. Eg, `onEnter` on a route will fire before previous routes component is actually unmounted by React. In fact previous component's `componentWillReciveProps` keeps firing even after router's `onEnter` runs for next route. * When you do `router.push`, programmatically, and try to push some query params, the react-router's `onEnter` keeps getting fired with incorrect params. It lags behind. * Similar weird stuff if you try to push some state as well. * Troubles with SSR. react-router fires its hook multiple times. This caused filckering issues and issues with social auth as well. Was way more nasty than it sounds. * Using `onClick` handlers with `Link` element was also weird. Any error in handler caused transition with page refresh :|
http://i.imgur.com/HLPnOc5.jpg
Well, are you talking about React itself or the ecosystem around it? I love React (the library itself) when I'm working with a more traditional web framework like PHP or ASP.Net Core. You can render the core stuff server-side in your MVC View, and then progressively enhance with React components. The best example of this is probably Facebook itself. Facebook isn't an SPA, they render the essential stuff on the server, and then layer React on top client side. If I'm going to go all in on an SPA, then IMHO Angular is a better fit. In my experience, if you try to build an SPA with React, you spend forever trying to figure out the right combination of libraries to use for Routing, HTTP, etc, and everybody has a different opinion. Angular was designed from the ground up for SPA's, you would be mad to try and use it to progressively enhance an existing website. React was designed to progressively enhance Facebook, and I feel as though that is what it does best. That being said, I'll happily work with either.
Yep, and code splitting/lazy loading implied a massive rewrite on my work RR3 project.
&gt; It's difficult to provide coherent answers when you're not allowed to assume that the reader of those answers doesn't apply a "as long as you haven't done anything insane" filter. I seem to have annoyed you. I have apparently said you are _not allowed_ to assume anything. I apparently assume people are _insane_. Using a credit card key that already exists as a proxy for some other identifier is not beyond the realm of speculation. People are lazy and overload tokens with meaning all the time. I mentioned it just as a caveat to the user. I did not downvote your answer or say anything about it being 'incomplete' or 'flawed'.
One of the coolest parts of CoffeeScript is that it infers object curly braces, so you can call a function that takes an object argument like this: someFunction(hello: 'world', foo: 'bar')
I imagine that the colour choice is down to the fact that the JS logo is yellow with black lettering and a yellow rhino wouldn't look as good as a black one. To each their own :)
Someone bothered to make a jpg of a tweet... why? Just to prevent anyone from easily linking back to the person who created it? Seems lame.
It's literally called session storage. It's the same as a session cookie. It's means a session is persisted until the process is over. If you want it to expire, just set a cookie with an expiration. Please use tools for what they're designed to do :)
&gt; Basically, there's an obvious gap between your Udemy/Codecademy/etc tutorials and doing genuine development. How do you go about doing the in-between? Find a project idea and try to implement it. Something small to start, but something you might use so there is a driver for the project setting needs and constraints. If there isn't something that springs to mind that doens't exist, perhaps rteimplement a basic version of something you already use? The infamous "todo list" is a common "first proper project". Also inspect the code of other projects, perhaps instead of implementing your own you could make changes to an existing one first. Start simple with inconsequential cosmetics and then dig deeper. Maybe look at http://todomvc.com/ and similar samples for simple examples in common frameworks (and vanilla JS). &gt; I've thought of switching to ... just because I can jump onto Automate the Boring Stuff What are you looking to automate? You can probably use JS for that too. You can write command line tools with node as well as web backends and desktop apps, see articles like http://javascript.cs.lmu.edu/notes/commandlinejs/ and https://www.sitepoint.com/javascript-command-line-interface-cli-node-js/ &gt; start to finish? There is no finish! Unless you mean a specific tightly defined simple project. The JS worldis exapanding and evolving faster than any one person can keep up with all of, as with everything else, so you need to define an end-point other than "everything" unless you are functionally immortal.
Yeah well Google made Angular so what did you expect. 
There was a lot less cursing in that article than I expected.
EMBER.js
I don't know about load times or ie9 support, I have no real experience with it, but otherwise it sounds like you're describing [polymer](https://www.polymer-project.org).
The mozilla payments-ui projects is top notch https://github.com/mozilla/payments-ui
150ms loaded means you want a very small library, and it's going to be smaller than jQuery to be able to load faster. Since you don't want opinions and you do want server side, hyperapp, Vue, React, etc aren't going to be suitable with JSX. The only library I can think of that meets your requirements, and it's going to be slightly out of left field, is HyperHTML. It has no Virtual DOM, no opinions and works back to IE9. It uses template literals for valid actual HTML, and it's fast.
That's the exact opposite of an article, previous posted here, that showed React to be the second slowest, trailing only Angular.
Have a look at [dom99](https://github.com/GrosSacASac/DOM99) Disclaimer: I am the author
Then you didn’t read the article. 
Ugly as hell rhino imo.
I saw [This](https://mithril.js.org/index.html) the other day, it appears to do what you want, im not sure about the load times though.
Not annoyed, sorry if I came across that way. TBH, I used the word _insane_ as hyperbole in an effort to inject some levity. It seems to have had the opposite effect. My fault.
You could still do currying.
Hi! There used to be a place called Stack Overflow Documentation which had JavaScript snippets (and other language snippets), however Stack Overflow Documentation was shut down, so being CC-BY-SA content I downloaded the content and produced this JavaScript programming notes PDF to share If there are any negative (or positive :)) issues with the book please let me know, any feedback results in me being able to improve and create a better book for you
Tone's easy to misunderstand on Reddit. No harm done.
Here's a fun feature you possible didn't know. new Date('2018-10-10'); // Returns 2018-10-10T00:00:00.000Z new Date('2018/10/10'); // Returns 2018-10-09T22:00:00.000Z in my timezone A very fun feature indeed. 
Though there are some polyfills, it's better to transpile es6 code into es5 so it runs in current browsers. To do so, you can use [babel](http://babeljs.io/).
Look into Babel and some kind of bundler like web pack or parcel for ES6. In the meantime There’s a polyfill here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
Hi /u/kinkare90, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I just don’t think that’s a realistic attitude in a business setting. IE 11 is not deprecated yet, and IE still represents a significant browser market share 
I’m just saying what most tech companies do in modern day. IE is and outdated browser that’s annoying to develop for. Most companies don’t waste their time on it. 
Updating RxJS from 5.5.2 to 5.5.3 broke Angular. Coworkers had a field day with that. "JavaScript in a nutshell".
We aren't quite there yet, maybe in another couple years. Not all companies can afford to just begin ignoring IE, unfortunately.
Update is much pain free in React compared to Angular (1.x -&gt; 2 -&gt; 4 -&gt;5?)
Hi /u/Potato_Baked, For javascript help, please visit /r/LearnJavascript. Thank you!
Want even more fun? new Date('2018/10/10'); Will give different results in different browsers for example for firefox and chrome! =&gt; Date 2018-10-09T22:00:00.000Z // Firefox =&gt; Wed Oct 10 2018 00:00:00 GMT+0200 (CEST) // Chrome (canary) Fortunately all answers above are equally correct according to the spec! &gt; The function first attempts to parse the format of the String according to the rules &gt;(including extended years) called out in Date Time String Format (20.3.1.16). If the &gt;String does not conform to that format the function may fall back to any &gt;implementation-specific heuristics or implementation-specific date formats. That is if it doesn't conform to a slight modified ISO-8601 format browsers can do whatever they want. Source: Been working a bit on Firefoxs date parser.
Everybody loves using Vue and announcing they have switched to Vue. Then you check job listings and it's all React and some Angular.
&gt; IE still represents a significant browser market share Ya'lls need a source for that claim
Fair enough, maybe the difference is that I think convention can be a good thing. If I hire an Angular developer to work with me, they are going to have been following all of the same conventions that I have been following on previous projects, and are going to keep following them as they continue extend the application. I'm not going to get to the code review stage and be asking, *wtf is this?!*, because if you use the CLI and follow the style guide, it's actually more difficult to not follow the conventions. With Angular, the convention can help with the following: * Getting things done, without spending a lot of time debating how * Writing maintainable code * Onboarding new team members. They aren't spending a week figuring out what is where in your codebase, because everything is in the same place it was in on their last Angular project * Firing team members. It sucks but it happens, and if you need to let somebody go, or somebody leaves, everybody else isn't having to spend time figuring out what was going on in their head Again, I like React, and I don't doubt that you could combine it with a couple of other libraries from the ecosystem, and build an SPA, and if I was to join a team which was doing this, I wouldn't complain. If I'm going all in on the Single Page Application, though, my preference is Angular.
Why should you? Who are you making the site for and why can't you add a disclaimer that your site doesn't work in EI?
"It is generally thought that it is inferior to the latest versions of Yarn and NPM in terms of user interface, speed and performance. However, it still contains a large repository of packages with a focus to distribute server side libraries. Any releases from Microsoft are usually distributed on Nuget too." Are you kidding me?
It depends on the app I think. In terms of modern browsers, it's only IE11 that doesn't support ES6 features, so plain ES6 with an IE polyfill can work.
&gt; disagree. I need to stop and think what is going on with all those subtractions. Which is fine. An experienced developer would rather sit and think about what's going on for a few seconds, than need to open a web browser, consult Google/npmjs, and dig through a README to figure out what "sortBy" and "thenBy" mean. &gt; Also, how would you do this if x and y were strings? You run into the same problem with the proposed fluent-sort library.
1. I guess? I'm constantly looking for stuff in Google. I don't get why searching for one more thing would be such a hassle. 2. Am I understanding things wrong? Wouldn't sorting by string look the same? `fluentSort(arr).sortBy((elem) =&gt; elem.x).thenBy((elem) =&gt; elem.y).result();`
How is it different from minifying js? When you minify everything also gets renamed.
Not React but nonetheless one of the best really large scale JS projects to learn from is VSCode - https://github.com/Microsoft/vscode For scaling React apps search for “react structure by feature”
Actually the worst thing about date and time in JavaScript (like many other things) is that the ECMA spec is implemented by tons of different vendors pretty much however they like Like that _delightful_ time Apple's refusal to acknowledge all date formats fucked up a project I'd sent to a client
Sadly not the case, FF has pretty poor ES6 support right now too.
Very interesting :) Thank you to share with us
That's why god invented the timestamp. Parsing dates is an antipatern.
Citation needed. Firefox is at 97% just like Chrome. https://kangax.github.io/compat-table/es6/ Modules can be enabled via "dom.moduleScripts.enabled".
Yes. First, some purpose-built examples: - The ["Project Mini-Mek" sample app](https://github.com/markerikson/project-minimek) from my ["Practical Redux" tutorial series](http://blog.isquaredsoftware.com/series/practical-redux/) - An 8-part [Build a Simple CRUD App with React and Redux](http://www.thegreatcodeadventure.com/building-a-simple-crud-app-with-react-redux-part-1/) tutorial - The [React+Redux implementation of the "Real World" framework comparison project](https://github.com/gothinkster/react-redux-realworld-example-app) Next, my [Redux addons catalog](https://github.com/markerikson/redux-ecosystem-links) has a section pointing to [interesting examples of React and Redux apps](https://github.com/markerikson/redux-ecosystem-links/blob/master/apps-and-examples.md). A few examples - https://github.com/Automattic/wp-calypso - https://github.com/andrewngu/sound-redux - https://github.com/captbaritone/winamp2-js - https://github.com/joshwcomeau/Tello 
Right........... Because just because there's a never ending cycle of continuing education means I have the work for a decade to achieve basic competency
You need to go learn J's n jQuery in deep and in detail.i found resources from hackr.io,Js interview questions,w3resource questions,make HTML canvas and many more......
For Array.from, though? There's a trivial polyfill for it. Hell, IIRC, it's a one-liner: Array.from = function (s, t) { return Array.prototype.map.call(s, t || function (i) { return i; }); }; 
I think this looks interesting https://github.com/stimulusjs/stimulus
Right. It's bad form, generally speaking. It's better to use a transpile process if possible, as it allows one to use even newer APIs/features, as well as transforming code into a cross-browser implementation. Sadly until IE becomes a smaller share of the browser market, we'll need to keep transpiling.
I mean, I wouldn't have listed Nuget at all, but that description seems fair from a .NET core perspective at least. What's wrong with it?
If you _just_ want Array.from, the shortest possible poly is: Array.from = function (s, t) { return Array.prototype.map.call(s, t || function (i) { return i; }); }; If you want all of ES6, IE11 supports almost none of it; you need to resort to a transpiler like Babel. .babelrc { "presets": [ ["env", { "targets": { "browsers": ["ie &gt;= 11"] } }], ] } Then, $ npm install babel-cli Then, $ node node_modules/babel-cli/bin/babel list.js of.js sources.js -o compiled.js Babel's kinda wonderful. Lets you write code in ES2017, and still run it in ES5 environments. There's a _very_ good reason to use it, aside from IE support. PhantomJS' ES6 support is almost absent. If you plan on doing almost _any_ testing of your code, and you plan on writing in &gt;=ES6, you _need_ to transpile. Hell, Phantom doesn't even support Date#toJSON (an ES5 feature). Incidentally, WTF is up with the ES6 HTML generation stuff. Do I really need a utility function to make `&lt;blink&gt;` tags?! I can think of no larger waste of native code than this mess of nonsense.
And even with modules enabled it's still better to use a compiler to split bundles.
[From caniuse.com](https://caniuse.com/usage-table). IE11 is sitting at 2.84% global usage, currently twice as large as Safari (1.39%) and much more than Opera (0.02%); it's the 3rd largest share of non-mobile browsers (latest versions) after Chrome (12..46%) and Firefox (3.55%).
No, Chrome and Firefox are creating the same times. They are outputting different formats in the console by default though. Firefox shows UTC, Chrome local time. The difference is that `new Date('2018-10-10');` gives midnight for the date in UTC, while `new Date('2018/10/10');` gives midnight for the date in local time. Small, but significant difference: Fun.
That site counts both EI and Edge, so it doesn't really apply since ES6 features are present in Edge
&gt;Typescript with Angular is a weak combination as TS needs a language server to understand Angular. Uhhh no. It doesn't. The only "understand angular" thing that exists are the templates. Needing something that can parse angular templates isn't fundamentally that different from a parser that understands jsx. &gt;went through a complete rewrite (1.x -&gt; 2.+) Because they are different frameworks. You'd have to rewrite to switch to vue or react too. Google made a marketing mistake reusing the angular name. We get it. We've all discussed it to death and it's not interesting anymore. Angular.js is a completely separate frame work from Angular. I, obviously, can't speak for your companies internal troubles using Angular but as JTenerife mentioned Angular as a framework is fine; consultants throwing around phrases like "enterprise ready" or your own companies issues not withstanding. Those have no real bearing on Angular *as a framework*. 
If it means throwing just as much time in to it as the amount of money, then it's kinda pointless
personally I would use fadeOut() and fadeIn()
Could you elaborate a bit on this subject? I'd like to learn a little bit more about it.
I understand the resentment. The thing is Javascript has expanded vertically and horizontally the last decade. So the term 'basic competency' has to be accompanied by 'in what'. Sure you can have basic competency in DOM manipulation less than that time frame but what about other things like WebWorkers, WebSockets, Storage, Web Audio and myriad of other properties inherited down from 'Node' and 'Element' to other nodes in different XML based languages.. If you want to understand all above, keep in mind that it's not just the API specification you should learn but also the order and the context in where you should apply these things. So in fact I think a 'decade' is a very optimistic estimate.
According to that site it has an about 8% usage, which [when broken down](https://analytics.wikimedia.org/dashboards/browsers/#all-sites-by-os-and-browser) has a 12% usage with Windows 10 who already has edge installed. (And I'm going from today and 1 year back). That means 42% of 8% of some number of people that is undisclosed uses IE11. That's not a lot of people, and if it is a personal project there shouldn't be anything stopping him from having a disclaimer that his site might not work in IE and tell people to use something like Edge or FireFox or Chrome or something. Well he could also use polyfill Also something that caught my eye, completely unrelated but I thought it was pretty amusing is the [2.1% of the total IE users are using Windows CE and IE 4 :v](https://u.lewd.se/JbxNLv_2018-01-04_19-08-02.png)
This is great content and I'd love to have a look! But, this way it could also be done in one line of JS as well. Please atleast make it human readable. Separate out those for loops on different lines and do some proper spacing! 
* To timestamp: Date.now(); or +new Date(); (notice the + in front of it) * From timestamp: new Date(timestamp);
And perhaps use jsfiddle or something like that. 
imho, it means that it is an application that is well monitored, which has more to do with things like sentry and pagerduty than it does react/angular, ironically.
https://github.com/tkh44/sideway.web/tree/master/lib sideway's frontend code includes the beginnings/prototypes of most of my open source projects. Random selection - my attempts at keeping a socket connection connected and authenticated with redux https://github.com/tkh44/sideway.web/blob/master/lib/redux/nes.js - using middleware to queue requests https://github.com/tkh44/sideway.web/blob/master/lib/redux/request-middleware.js - createApiAction https://github.com/tkh44/sideway.web/blob/master/lib/api.js#L166 and usage https://github.com/tkh44/sideway.web/blob/master/lib/redux/rooms.js#L44 - svg charts and recompose https://github.com/tkh44/sideway.web/blob/master/lib/components/insight/SessionChart.js - building a tweet from raw api data https://github.com/tkh44/sideway.web/blob/master/lib/components/ui/EmbededTweet.js - Textarea that will highlight text based character count overflow like twitter https://github.com/tkh44/sideway.web/blob/master/lib/components/forms/FancyTextarea.js - redux controlled push notifications https://github.com/tkh44/sideway.web/blob/master/lib/redux/push.js Yes, I know it isn't all good but let me know if you have any questions. You can also find me on twitter at https://twitter.com/tkh44 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tkh44/sideway.web/.../**api.js#L166** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/api.js#L166) * [tkh44/sideway.web/.../**request-middleware.js** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/redux/request-middleware.js) * [tkh44/sideway.web/.../**EmbededTweet.js** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/components/ui/EmbededTweet.js) * [tkh44/sideway.web/.../**nes.js** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/redux/nes.js) * [tkh44/sideway.web/.../**push.js** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/redux/push.js) * [tkh44/sideway.web/.../**rooms.js#L44** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/redux/rooms.js#L44) * [tkh44/sideway.web/.../**FancyTextarea.js** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/components/forms/FancyTextarea.js) * [tkh44/sideway.web/.../**SessionChart.js** (master → 348ac35)](https://github.com/tkh44/sideway.web/blob/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib/components/insight/SessionChart.js) * [tkh44/sideway.web/.../**lib** (master → 348ac35)](https://github.com/tkh44/sideway.web/tree/348ac3549ad91e8bcfc9e811eeb61dd37adf6f43/lib) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ds6s6s0.)
&gt; onEnter on a route will fire before previous route's component is actually unmounted by React. Ah, yes, I remember the pain of working around that. Had trouble getting page transition animations to work.
&gt; Chapter 105: JavaScript Variables Not too late by then?
1. When you're working in a production codebase that already has tons and tons of depenedencies and a lot of complexity, it can be very annoying to need to go to Google to look something up that is very trivial. It's not a hassle to do it once, but it's a hassle to need to do the same thing every two minutes if your codebase introduces a lot of dependencies like this one. 2. Possibly, I haven't read the source but I assume you would need to pass in a string comparator function somewhere, otherwise the library would need to make assumptions about "how" the elements should be sorted.
Minifying is a performance optimization to reduce the size of your code so it downloads faster when people visit your website. Obfuscation turns code into an illegible mess to hide your source code. It's a form of protection. See their online demo for an example. https://javascriptobfuscator.herokuapp.com/ It's not bulletproof though, smart people can reverse engineer the obfuscation. https://www.youtube.com/watch?v=8UqHCrGdxOM
Take a look at minified react: https://fb.me/react-0.14.3.min.js All the variables and functions are mangled, closures optimised with IIFE, which drastically complicates code, and many other alterations are there. Judging from the options and output it seems the obfuscator does only a small subset of these alterations keeping code structure almost identical to the source.
It is magic dude 🤣
This reminds me of Tom Scott's rant about timezones. If you haven't watched it, you should. It is HILARIOUS. Here's the link: https://youtu.be/-5wpm-gesOY
Awesome. Will I be able to connect it to my Google drive if I want to?
I believe typescript can do it. https://www.tsmean.com/articles/vs/typescript-vs-javascript/
That's certainly possible! Do you mean to import a project from Google drive or just to upload/download specific files? It would be great if you can say a bit more about the use case you are thinking.
This isn't elaboration. You've just said how and not why. 
how is that going to help when you want a date that is not `now`?
Ah indeed I missed the timezone... Thanks! I thought I had seen a bug where chrome and firefox gave actual different dates but might have been mistaken. Looks like we mostly return NaN when we can't parse the date.
Not for arrow functions, though, unless your polyfill is an in-browser transpiler.
It's just too obscure.
You could turn this into a github gist
Don't you know? You're supposed to add seconds to it, duh! On a more serious note, save yourself a lot of cursing and don't ever attempt storing unix timestamps. Having to debug and dig through data with timestamps is one of the worst things known to mankind, and I did not even mention handling timezones. Just don't. 
TL;DR: `requestAnimationFrame` runs at 30fps in cross-origin iframes, pending user interaction; or when the device is in low power mode. The battery status API would be nice. I still don’t mind forcing 30fps in lower power mode; `requestAnimationFrame` never guarantees a specific framerate. I’m curious how this behaves on iPad pro. Does it throttle from 120 to 60?
I wish they called the vuln "Kim Kardashian" so we could hijack the hashtag #BreakTheInternet.
Very nice. Many thanks.
Well, it certainly does what it claims to do, which is to "obfuscate" the source code. It's also incredibly easy to decipher and is a great example of why "security through obscurity" is all but useless.
This seems as good a place as any to ask this. Wondering if anyone else has a better solution for this issue. The problem we ran into (and how we worked around it): Our app handles scheduling. An Event will be on x-y dates (fixed) at a given location (also fixed). On each day there will be potentially hundreds of things happening, 15 minutes, 3 hours, etc. The problem we ran into is that in the months leading up to this Event, while everyone is working on this app from various timezones, they all need to be working in a locale context of the *Event*'s tz, not their own. As far as the app and its users are concerned, the user's timezone is 100% irrelevant. The problem is that if you store int timestamps, the browser converts them to the user's locale; if you store ISO8601 with Z or the venue's locale, the browser *still* converts them to the user's locale. This shifts all times by *x* hours depending on the person viewing/moving times. Big bad. What we ended up doing, which works but is *super* hacky to me, is that we store all times as `YYYY-MM-DDTHH:MM:SS` with no timezone data; the browser loads this assuming that it's in the user's timezone and appends their tz offset. While they're working on the dates, everything is assumed to be in their TZ, and then when we save it we strip the tz offset from the end of the datetime string we send up. This works, but god DAMN is it ugly. We tried moment but it still tried to shift to the browser's timezone regardless of what tz was stored with the datetime and what locale we set moment to. Something we missed or JS in the browser is just shit?
Wow. You just have no idea. Dates in software are stored as Unix timestamp, even in Windows. They have the versatility you need. Don't confuse them, please.
That's a different story. But with that, is veeeeeery easy to play with dates.
Babel won't transpile Array.from. You need to load a polyfill for it.
This is addressing the wrong issue. This method should not be variadic because the varargs and the default value are in conflicting positions, and the default value is at the end. That was not true when the method was first created, and the interface is fine. The advice "prefer arrays instead of varargs" is naive. The real solution is to add a newly named method (or an overload, if JavaScript had the concept), to simply break the API and push a new version, or to devise a solution that works with the current interface, without the obtuseness of a positional vararg. Shunning variadics is not the solution. `function getDeepPropertyOrDefault(object, default, ...fields)` or (if possible) function getDeepProperty(object, ...fields) { foreach(var field in fields) { if (typeof(field) == "object" &amp;&amp; field.default !== undefined) { /* ... */ } } } getDeepProperty(someData, 'i', 'love', 'designing', 'apis', {default: 'no'});
I was gonna go into this but cut for brevity. 120fps on iPad is only during user interaction and there’s no 120fps support in WebKit. So it probs behaves the same
Poor Aurelia. 
preset-env should
I think loss of precision in `performance.now()` is not _that_ big a deal. For perf work, benchmark.js gives you more statistically significant results, and there's still `console.time` for one-off dev things.
evenisto is might be talking about the difference between telling a db to use bigint vs using the timestamp type. They're both ultimately stored as 8? bytes and not an iso8601 string, but it's much easier when simple queries are human-readable instead of always having to translate. It's the same with HTTP APIs; you could return an integer string, but as long as the 8601 string is gzipped anyway it can be generally better to use the 8601 string.
It should polyfill it. In Babel 7 that would be: ['@babel/preset-env', { modules: false, useBuiltIns: 'usage' }], useBuiltIns will browse through the code and add the corejs polyfills you need. I believe it will even remove duplicates.
I stand corrected. Good to know things have improved so much since I last checked. 
That's probably what I would've done too. Alternatively, feed moment the 8601 string with the UTC 'Z' and .tz it to UTC https://momentjs.com/timezone/ var jun = moment("2014-06-01T12:00:00Z"); jun.tz('UTC').format('ha'); =&gt; "12pm"
Exactly. Importing from and exporting the project files to Google drive. 
Bummer. Native apps can set an individual view's [`preferredFramesPerSecond`](https://developer.apple.com/library/content/technotes/tn2460/_index.html#//apple_ref/doc/uid/DTS40017657-CH1-TNTAG6). It would be nice to have this control from JavaScript.
You don't have to worry about that. Look up webpack and use the babel loader and that's that. It also frees you from having to screw around with babel on the commandline. These two tools are indispensable today.
It's for the same reason you ask people to provide numeric values such as age in decimal numbers rather than spelling it out. Basically parsing dates is hard. Never mind that browsers do it inconsistently and that things like `02/29/2017` are allowed, there are also issues when it comes to internationalization, etc. You also lose information when formatting dates (e.g. timezone, or even the time itself if you formatted it like `2 hrs ago`). It's much easier to deal with an unambiguous value, and timestamps are the simplest and most portable format that meets that criteria
Definitely needs a reorganization.
Why tho? Why not just transpile into es5 and you can sleep at night knowing babel has your back.
This looks really cool. Assuming I have read this correctly you could create a static page that would save its state to a blockchain. Would the next step be to link it with other instances of your app?
You’ve never programmed anything for a company bigger than 30 persons, did you ? IE11 is totally prevalent in large organizations. Any software should be tested against it. You should also look at android 4.4 web browser . That’s out there too. It’s pure ignorance here unless you produce apps to order macchiatos with iPhone at hipster cafes...
Exactly! Any instance using the same Firebase credentials is automatically backed by a shared blockchain. Use different config, creates a new blockchain. Next thing I want to add is proper decentralization via WebRTC and improve consensus stuff. If I can figure out how to make it more memory efficient that'd be great too :)
Isn't that why we have libraries like moment and date-fns? Using date object has benefits over pure timestamp. People are used to using date objects because most languages have them done reasonably well. Then you go to JavaScript and it's a mess and need to use abstraction layer. 
Checkout https://github.com/hyperledger/iroha-ios or other hyperledger projects. Maybe https://hyperledger.github.io/composer would be helpful.
Oh, totally - I get what their inspiration was, but nonetheless a change in medium sometimes begs a change in color as well. If you're one of the creators of the rhino, do consider trying out a gray color and see how JS fans respond.
Got it. I have taken notes! On that note, we will be adding some stronger Git integration soon, as well as file upload/download features. Hope that might help with your use case for now. Stay tuned!
Fantastic. Checking it out. Writing a sample Vue app. Super cool. Also, is there any plan to enhance console so I can install packages and run commands myself. Ex: nodemon index.js 
Yes, we do have plans to allow users to run any arbitrary command (as long as its javascript/node based). Kind of like a custom task runner. Packages are currently managed by our own package manager (you probably have already seen it, under "Package" on the top left corner). The manager has some customization based on npm for efficiency reason. But if you still prefer to installing packages through vanilla NPM, let me know, and we would be happy to consider that as well in the future.
If I remember right, this was an IE thing that became a standard as other implementers mirrored this behavior for compatibility. For things like that, it generally equates to "bad practice". Nevertheless, its a behavior that needs to be dealt with. The best thing you can do is not work within the global context. Instead keep your variables encapsulated in functions or modules so that let/var/const/function do not add to the global object (window). This way you know they're not colliding with other globals, including those from ids (they'd be just shadowing them instead). When accessing a dom element, getElementById is preferable as it makes it clear that you're grabbing a dom element and not some arbitrarily defined global that may or may not be sourced from an id.
Great. Yes, I see the inbuilt package manager. It serves my purpose. If I will be able to run js/node commands, that would be great. Great work again. Kudos. Will actively use it and share my feedback. 
That would be great! Thanks for the kind words. You can also reach me at hello@postverta.com for any future feedback, or sending messages through the intercom chat widget on the page.
IIFE also scopes var and function declarations
This is my first fully functional programming language, and I'd love some constructive feedback. I believe JavaScript has a golden heart, FP+OO+Dynamic-Typing, but its syntax is way too verbose. I believe the entire point of a high-level language is to help us write LESS code. I started with CoffeeScript. It has the right ideas: everything should return a value, minimize syntax while improving readability and fix JavaScript's bad semantics. It just didn't go far enough. There is a lot of inconsistency within CoffeeScript(including V2) where those ideals have only been partially achieved. I attempted to fix CoffeeScript's many inconsistencies while moving the language not just on par with ES6, but beyond. Most of all, I attempted to make CaffeineScript beautiful, fun and productive.
Looks cute but anybody has a more complex example using imports maybe ? Do you have to pass the state down in props for each components ? Can you have custom components ?
I started using codecademy in 2014 and am about to move to SF for $140k + 1.5%
If you're looking to animate general UI elements, combining CSS classes that use the transition property is the best method. That way you can toggle states without inline styling, which override any class styling (assuming no ID). Jquery animations are fine for basic animations. If you're looking for a powerful framework for more complex animations -- check out GSAP (Greensock). 
Ah, thanks. I initially typed this up on mobile.
What would be some good use cases for this?
Let's see a DAG version of this plz.
Hopefully, it will be helpful for anyone who want to build their own projects. I will be happy to interact with any thoughts, please feel free to comment.
Unless I'm misunderstanding something...you should be using JSON.parse on the incoming string data. const string1 = '{ "this": "is", "some": "json" }'; const object = JSON.parse(string1); Object.entries(object).forEach(entry =&gt; console.log(entry)); // will log ['this', 'is'], ['some', 'json]
What is this site? Did you put together all those other books too?
You are correct. The problem was that when I coded it this way the syntax checker threw a Type Error because until runtime the string null. I did't realize that it is not a fatal error. Thanks for looking at this and proposing the correct solution. 
https://www.reddit.com/r/javascript/comments/7o3fsp/javascript_notes_for_professionals_book/ds6gij8
This is actually kinda cool, how are you dealing with the permissions side of thing on firebase? How do you grant access without a user being able to overwrite obvious blocks? 
So excited to see what 2018 has in store for us. Aurelia is such a pleasure to work with. 
Why professionals? It’s for newcomers. Only. 
Thanks for letting me know! I've fixed that issue. 
Store the dates at timestamps. Whenever you want to display/use the date, first create the date object and convert its timezone using the toLocaleString if you want to display it as a string. If not, then the easiest way out would be to use a library like moment timezones. 
Earlier today, I created a (yet another) Webpack Starter kit for just this scenario. It uses Babel and a bunch of CSS loaders (including SASS, but you can use good old CSS by just changing the file extension from .scss to .css and removing the sass variables inside). It's still a WIP (source maps are enabled by default), but it should deliver what you need - [https://github.com/Ardethian/webpack-starter](https://github.com/Ardethian/webpack-starter)
Oh, I see your point now. Agree. 
I didn't realize they were still around.
Exactly. But if he wants to support ie11, he either needs to omit or transpile arrow functions is what I'm saying.
I read the article perfectly. It's also a perfect example of why no one with half a mind should be using this crap.
Anecdotally, it took two of our very good developers about a month to upgrade a major web app to 16. A lot of that was replacing some libraries which were not compatible, but that still counts. Worth it, but not free!
I know that a lot of people think this idea is silly and pessimistically ask you if there are any legitimate use cases... I think the project is interesting and the idea is intriguing, so I'd like to optimistically ask you, have any use case ideas come to you yet?
Same as any blockchain technology. The thesis I'm building this from goes like this: "If we're finding blockchain to be a good idea, imagine what can happen if anyone who can build a webapp, can build a blockchain" If I can make it work, I have one or two ideas I want to build, but I'm not ready to talk about them publicly yet.
I see. Well, that's very clever. Redux might seem unnecessary, but if it's the main immutable tool that webdev people use, then it makes sense to use it as an entry point to blockchain-backed development. I'm familiar with mining in bitcoin, but I don't understand how the proof of work is achieved here? Isn't it easy to overwrite the blockchain, here?
Yes, it's easy to overwrite the blockchain right now. There's no proof of work yet. Right now the only validation is that blocks and data are in correct sequence. If you wanted to change history, you'd have to rewrite everything past the block you want to rewrite. You can read more about the blocks and validation here: https://swizec.com/blog/blockchain-backed-redux-clone-105-lines-code/swizec/7980 My next step is implementing a consensus algorithm. Then not only would you have to overwrite the blockchain, you'd also have to convince enough other nodes that your version is correct. Proof of work comes when I figure out how to make that. But I'm not entirely sure it's necessary. Blockchains don't have to be expensive to be valuable.
The variable is a property on the `window` object. Try `window['test-test']` with an input that has 'test-test' for an ID.
We have a [CodePen account](http://codepen.io/hyperapp/) with more examples. Come check it out :P
What do you think about this approach ? https://twitter.com/sharifsbeat/status/948917892321611777 Using React with setState and reducers you can have the same behaviour, no ?
Are we finding blockchain to be a good idea? Blockchain isn't an idea. It's a technology. It's a good idea to use it for crypto currency, but I've yet to see any other real world example where a db won't do a better job. Hope your 2 ideas work out, but if you're not going to share them it's hard not to be skeptical. 
We do save the tz with the event, so while the individual datetime values *are* technically incomplete, we have the full set of data available. The other problem we ran into is the (absolutely terrible) performance of momentjs. We're slinging around a *ton* of datetimes and it was a very measurable and noticeable performance hit to pass them all through moment.
Don't use `Array.filter` for this purpose, instead use `Array.includes`.
You should think about rebuilding this without jQuery and publishing it on npm.
Ok, there's slightly more nuance to it. If you set a value in `sessionStorage` and then open a new tab - that new tab (with the same) will contain the key set in the initial tab. You're right that they can't exactly communicate back &amp; forth like with `localStorage`. 
It is an error in your logic. It seems like code is running before it should.
Yes, you are right.
Oh yea, I hear that. I try to keep my usages to only when I absolutely need it -- I use it for only three things: - manipulating dates (i.e., add an hour), comparing dates (isBetween and friends) and for formatting in a given timezone and locale (see above).... one of the general rules I try to keep is to not pass a moment object between function calls. If it's possible to use `Date` I'd much prefer it. I did hear about another project recently in the comments for the JS survey thread when I mentioned no one seemingly knows the pain of dates with the low mentions of moment. Anyway, someone mentioned [`luxon`](https://github.com/moment/luxon) which was written by one of the maintainers, complete rewrite of the library... it looked pretty slick. I haven't had a chance to try it yet, but hey, might be faster than moment.
You should be shot for orientation of your curly braces.
He's saying blockchain. 
Almost makes me wanna invest everything I have in him /s
Yeah. Pretty much the only reason there ever is legacy to support is because devs allow it to happen 
Angular2+ router goes stale more often than my milk
Very cool , thanks , great work
[removed]
But then whats the point of ES6 if its just being used a a preprocessor. Just easier to write? Would ES6 run faster on modern browsers than ES5?
This is probably expected. Back in IE6 days, an error on the page would show an error icon on user's status bar. Adding `return false` at the time to production code explicitly swallow those errors so users don't see the error icon. Nowadays no browser show JS error to user, so this is not as annoying. 
Interesting idea, I like it :)
Thing is, that most of real applications not opening their sources. For example, Airbnb is one decent examples of react+redux in real big application. Also I found few quite interesting decisions just inspecting their site with react and redux devtools.
Without watching the videos, is there somewhere to just play with the end result?
It adds more JS hipster cred.
That's because it's standard blurry talk about blockchain, as 95% of people mentioning it do
E_to_the_pi had the correct solution. It runs fine even with the non-fatal Type Error. 
I’m sure it’s a great feature, but when is it useful? I’m missing some examples.
/r/AnimalCrossing will be so happy!
Something that i do often in node but not on the frontend (because it would otherwise pull in the whole file): import { version } from 'package.json' If it can really tree shake the rest away it would remove some build-system complexity as we're currently injecting the version via npm script.
as far as I know, `function`s also block scope in **strict mode** (modules are automatically in s.m.)
Only Viewing page should be pretty safe, much with disabled javascript. But if you download and install something which page promotes, thats different story. On the theory, attacker might exploit some vulnerability of browser/system which could leak his code to other tabs or processes of system. But thats quite paranoid. I would say, if you start new instance of (recently updated) browser with only one tab and disabled javascript, you can safely view that page. Then close that browser instance.
The point is to use an improved programming language.
What ?
#/R/ANIMALCROSSING WILL BE SO HAPPY!
Easier to write, more powerful and, in time be able to run on all modern browsers. Some of the methods are optimized in modern browsers and therefore faster, but not all of them. If you need optimization, you need to run performance tests.
Using the global ID to access DOM elements is a bad idea. Don't forget how easy it is to shadow those names. &lt;div id="mytest"&gt;...&lt;/div&gt; &lt;script&gt; mytest.innerHTML = "Hello world"; (function() { var mytest = {}; mytest.innerHTML = "Hello world"; }());
Care to explain for others that don’t get it? 😰
You can shake trees in Animal Crossing to e. g. get fruits.
You shake trees in Animal Crossing. You are rewarded with fruit, bells, etc. 
[removed]
I did, i like it that is for sure! Seems like react without too much "enterprise-ish-fullness" I like that lifecycle events are directly on the nodes. What i don't get is the state management ? Being on Elm i bet it uses immutable style object reference comparison ? What if i had a realtime app with some parts of my app changing multiple time per seconds while other on user interactions. Will i launch vdom comparison for the entirety of my app each network changes ?
You could theoretically create a promisified smart contract which would be pretty awesome.
Hmmm i'd like to focus on how JSON web tokens allows me to hang myself 
if anyone can block chain, then surely its valuable!
There's two use cases I can see gaining adoption. (Note I'm just a dev taking out of his ass, not a blockchain expert) As a trustless way for big banks to keep their accounts straight, e.g. BoA wants to trade funds with Chase, typically this would require a 3rd party to validate the fund transfer but with the blockchain it's pretty easy to make sure the parties get what they want. The other is as an added layer to current supply chains. Imagine a smart contract where funds are released only when the last person in the chain receives the product, in this way every single node is incentivized to make good on their end. Or, if the product needs to be diverted through another route you have an immutable record of who handled what at what point in time. 
Based on the research we did of other open source collaborative editors, I don't think anyone has tried piece tables. To be honest, I had to look those up because I wasn't familiar with them. There might be proprietary software that use it but we'd have no way of knowing. From what I could tell, the majority of base structures are either arrays, two-dimensional arrays, linked lists, or trees. The base data structure we used in Conclave was a two-dimensional array because that's how CodeMirror is structured. This allowed for faster communication between our CRDT and Editor. In terms of scaling this to larger documents, that definitely is an issue with CRDTs due to the metadata. The biggest nuisance in terms of memory is the relative positions since there isn't a cap on how long they can be. There have been optimizations made to reduce their size. We weren't able to go into much in the article, but in our application we use an [LSEQ](https://hal.archives-ouvertes.fr/hal-00921633/document) allocation strategy. I still think it's possible to make a very fast collaborative editor, though it would require a lot of work. If you could create your own lightweight editor that is based on a tree structure (CodeMirror is pretty bloated and we didn't used even 1% of it's features), a decentralized system and a whole lot of optimizations, I could see the speed gains making up for any losses that come from a large document.
Liked it! It would be great if you show us a live demo i think. 
That's because this isn't a full implementation of an exploit, it's just the important part of the PoC.
You can read all about the exploit here: https://spectreattack.com/ I don't think you'll get a JS snippet that uses the exploit to find a password in kernal space, while it's possible to do it's not something you can knock out in 5 minutes.
You can learn about that [here](https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid).
I think they also run code on a separate thread that measure cpu activity using performance.now() and SharedArrayBuffer
Why do you not use IDs anymore?
I may have worded it wrong. I'm not talking about versatility, I'm talking about readability. More specifically formatting - I've seen unix timestamps dumped into an INT(11) field before - and have had to debug shit operating on it, hence why I'm all for storing datetime in formats a human brain can parse. So yeah, just use ISO8601 or whichever else you prever wherever possible, as long as it's readable for a human.
Not to sound critical, but when would you need a package's version? Wouldn't your code change as you progress through versions and releases? Plus, `package-lock.json` would ensure each version of your code is running with the expected version of whatever package you're using.
What helderroem said. Plus, even if there was code, I think it might be against rules/law to post it. But to get an idea, the attack is related to timing, and according to [this](https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/), it would probably involve performance.now() or SharedArrayBuffer in Firefox which are now less accurate and disabled respectively.
That seems really cool! Thanks for the info
I will look into that, thanks
It’s used for injecting versions into either an API or your html. For example say i do a deployment and i want to make sure my containers have properly updated, i can check the version in the API or on the client to make sure i’m using the new version.
Self aware code. Diagnostic output (exception handler that reports software version), etc. That sort of thing
Thanks a lot! Live demo is in progress ;)
We deploy a library that's printing a small tag in the console, similar to three.js, but ours fetches it from package.json. It's also available in one of the main exports so you can test the api against a certain version or forward errors with the version attached. 
I'm guessing that's just an example, but you might want to display the version of a package to the user without having to repeat yourself
interesting idea. I was more interested in the business logic part of the application, rather on how components are structured/organised.
Stuff that still works with js off: * Malicious css * Tracking and various privacy violating systems * Image and video decoders (possibly an exploit in there, plus large bandwidth) * Gzip bombs * There may still be some ways to detect sites/accounts you visited through css and image loads * Not sure, but JS might still be able to run in an embedded pdf inside an iframe.
According to the paper `performance.now()` is actually fuzzed enough that it doesn't work well. Instead they use a WebWorker that constantly increments a value in a SharedArrayBuffer as a rudimentary (but accurate enough) timing mechanism.
Look the point of this project isn’t to convince you that blockchains are useful or practical. I don’t know if they are. The point is to make them easier for everyone, including myself, to build and use and see what happens.
Yeah, the variable values are completely wrong too. Seems like OP didn't read the white paper at all just copied the code snippet.
What if I use something like i18n and pull messages in by calling a function with string path? I assume it would shake used keys? 
Link to actual PR: https://github.com/webpack/webpack/pull/6184
It's extremely common for CLI tools to have a --version flag which juts prints its version and exits. It's useful to be able to get that from package.json, such that package.json is the only source of truth for the version number, instead of hard coding a version number in the source which has to be kept up to date along with the version in package.json.
I'm not aware of an emoji type ahead library (I've been planning to build one), but I do know quite a bit about emojis. For example, I wrote [Emojibase](https://github.com/milesj/emojibase), which I highly suggest using for your raw emoji data! If you're using React, I wrote a library called [Interweave](https://github.com/milesj/interweave), which can easily render [emojis](https://github.com/milesj/interweave/tree/master/packages/interweave-emoji), and has a full-blown [emoji picker](https://github.com/milesj/interweave/tree/master/packages/interweave-emoji-picker).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [milesj/interweave/.../**interweave-emoji-picker** (master → 1ccc2c5)](https://github.com/milesj/interweave/tree/1ccc2c5abe903f696893d0efeae6442d9d9c2dfc/packages/interweave-emoji-picker) * [milesj/interweave/.../**interweave-emoji** (master → 1ccc2c5)](https://github.com/milesj/interweave/tree/1ccc2c5abe903f696893d0efeae6442d9d9c2dfc/packages/interweave-emoji) ---- 
Yes, ES6 also added block-level function declarations.
Oh you're right, good point! We have an issue which I won't get into, but we need the version number. I've been hesitant to import the package.json because it pulls in all of your dependencies and the versions. I'm terrified of that being inspected in a debugger, someone discovering a vulnerability in the particular version of a library I'm using, and mounting an attack. But if the unused parts are shaken out, that entirely goes away. Thanks for raising that point!
No. A link only contains an URL to an address. It only direct the web browser to open that address. As to whether that address point to a malicious server, that's a different case.
Congrats on the release! /u/JorgeBucaran
I'm sometimes slow when it comes to ideas, but what problem is this solving? I could imagine this might be more useful as an extra option in VSCode for the different views on the left.
The idea came as a result of [this thread](https://twitter.com/jennschiffer/status/948216701337980929). The general consensus is that moving all tooling towards CLI seems like a fairly backwards approach and CLI can be daunting/unfamiliar for beginners. GUI based tools such as [majestic](https://github.com/Raathigesh/majestic/) and git kraken have been gaining a lot of traction and as such it seems to make sense to create a GUI for npm.
Laws differ in different countries 
I understand that, but, as I mentioned, there is little of open sourced real life apps. But look through their actions and state management with redux devtools. Maybe there will be some useful bits.
Thanks for suggestions! Yes it is poorly worded. I'm going to take it out. voodoo() works with plain numbers as well. But you can write equations as strings instead of using JavaScript's eval(). And it is very easy to extend to whatever usage. 
This is an Ad.
Consider approaching the problem from another angle, and try to reduce what's actually needed to arrive at the solution. If all we need to do is check of every character of the right string is included in the left string, we can use the *Array.every* method. function included(left = "", right = "") { // normalize all inputs left = left.toLowerCase() right = right.toLowerCase() // split the string we want to check -for- into an array of characters const characters = right.split("") // see if every character in this array exists in the string we want to match against return characters.every(character =&gt; left.includes(character)) }
Have you tried console logging something inside of your functions? You seem to be overcomplicating things and after all, to me it seems that your little script isn't doing exactly what you've stated you're trying to do. Remove repeats will never move away from the first position if the first two elements are not the same, and furthermore, even if it did, it would only remove subsequent element appearances - totally ignoring any other occurrences. Also, your main method is checking whether string2 is a substring of string1 - not necessarily checking for presence of all of its characters. console.log is your friend.
Thank you so much for reccomending the array.every method! I didn't even know that existed! I'm going to rewrite my code making it a ton simpler! Thank you so much!
Thank you for your reccomendations about console.log! I will definetly keep this in mind for future snippets! :). Also, thank you for clarifying to me what checking substrings actually does! I'll also keep this in mind! Thank you so much!
Yeah, but reddit is based in the United States, so what you post has to adhere to United States laws. Distributing Malware is illegal in the United States. But I don't know if that counts as malware. I'm not very security proficient.
There's a pretty good reason for it though. It takes a lot more to support and maintain GUI projects than it does CLI, and open source contributions are limited. Most career devs prefer well polished CLI to a pretty but buggy GUI. 
Thank you!
So backend more? 
Lots of people believe that IDs are just inferior classes (they're identical to classes except they are unique, and even that uniqueness is suspect as an HTML page with two elements having the same ID will still render). Therefore they just don't use them. Personally I continue to use them (despite all of the above) because while they may not enforce uniqueness, they do signal to future developers (including yourself when you read the code a year later) that they were intended to be unique, which I think is useful info.
Looked too good to be free. Too much talking for it to be free. Well I guessed it haha. Still looks good and solid course, not sure if anyone is willing to drop 650$ on a course though. Doubt this course is much different from something like Coursera provides for 10x less.
[removed]
That's awesome! If I could make a request: give me the option to put in additional URLs so that GitHub Enterprise (which my company uses on a different url obviously) is compatible as well!
It’d have no way of knowing about something that dynamic - you’d hope it’d notice anything using the brackets notation with variables and know not to tree shake it though
If you want to have a good UX i would say it's fifty fifty 
There's a firefox extension but it doesn't work.
Thanks senocular! Currently fixing up ordering of the chapters as we speak, should be deployed later tonight
I second this would allow me to utlize it on a private gitlab experience
That’s very true while cli tooling evolves. But once something is stable for the routine commands, a GUI can make that tooling far more accessible. I think of Tower for Git as an example. I know a lot of people who love it. It doesn’t do everything that Git does, but you get the best of both in that most of what the general users need is there, and the cli is still there for power users. I think it’s a “yes-and” more so than an “either-or” mentality. Let the GUI make the tool approachable, but let the command line continue to exist and evolve for power users.
Cool idea but could you change "energizes file's icon" to something like "gives different filetypes different icons"?
Yes, I have no idea what it means to energize an icon.
I think there's room for both. I learned Git's workflow using SourceTree for the longest of time. I eventually didn't need all of its training wheels (e.g. opening an application just to click pull/push) and started using CLI for that... so on and so forth.
This was my first thought as well. Right now I'm building a translation service using vue-loader, an AST parser, and some webpack magic to get around the inefficiencies in loading JSON files.
lol that would be overkill :) thanks for your opinion!!
Wow that is scary. Do we know how bad malicious CSS or "image" files can be? 
Yay! Thanks!
unlikely yes. though one can never be careful enough.
Thank you for the suggestion! Please excuse my poor English. I was going to describe that original file icons lacked vitality and had no energy, so I try to “energize” them. Sorry for misunderstanding. I will change it!
Don't know whether `iframeloaded` is precisely the time the PDF has loaded (not sure which loading event exactly it's referring to, and which one's important to you). Here's the approach I used (depending on PDF.js's mobileviewer example project: (Sorry, can't format on mobile...) PDFViewerApplication.animationStartedPromise .then( function({ PDFViewerApplication.open({url: MY_PDF.pdf}); } ); However, interacting with iframes is a ball-ache, so I'd be tempted to take whatever victory you've got already if it seems to work.
You clearly know more about JS Frameworks than I do, but isn't Vue more like somewhere between these two camps? It uses render functions to build a vdom structure, and it either compiles these from the templates in (single-file-) components you provide, or you can write your own render functions directly...
This is awesome, thank you!
Actually, I was inspired by it! I also use its npm library to build this extension.
No problems!
Good to know. Thanks for clarifying that for me
I think most people that are familiar with the terminology would call this a library, not a framework.
Webpack generally can't help you for anything that isn't statically analyzable. Using ES named imports it can prune out any (top-level) JSON keys that aren't imported or referenced (since ES imports are static, and you *have* to use the reference somewhere in your code for it to be useful), but anything dynamic you do after that is mostly opaque, so I imagine the whole subtree would be included in the bundle. If you're talking about dynamic imports (`import()`) then there won't be any tree shaking for the same reason.
Roflmao. I thought I was the only one with this confusion and I still didn't get it until I saw your comment. My mind was spinning for quite a bit. Especially when I saw positive comments about the idea.
Cool and useful. Makes me wish I'd thought of it first, haha.
looks good!
I had to click on the tweet and see for myself it did not contain something I would write in my terminal
I will be the wet blanket here and say that enabling a third party extension that gives read access to your work’s proprietary repo could be an issue. Not suggesting anyone is up to anything bad, and I didn’t look at the source. Just a paranoid reminder from someone working in security. Be careful about what extensions you install because there are known instances where trusted extensions get taken over by a malicious party. 
So long as your browser and everything is fully updated your risk is pretty low, even with JS enabled. You could always open the site in a browser in a virtual machine if you're really paranoid.
Yup I would definitely look at the code before using it if it's implemented ^^
Amazing idea, I really want it to work but is anyone else having an issue where the icons appear, then disappear when the page is fully rendered? Upon refresh, they work normally
Maybe, but what's your point? Or is this question not directed at me? Sorry, I don't really understand Reddit UI.
Merci!
Okay, this is actually really neat
This is damn useful! Good job!
0 75 110 111 119 108 101 100 103 101 32 119 105 108 108 32 99 111 109 101 32 113 117 105 99 107 108 121 46 32 84 104 101 32 87 111 114 108 100 32 104 97 115 32 108 105 101 100 32 116 111 32 121 111 117 46 32 87 101 32 119 105 108 108 32 115 101 116 32 121 111 117 32 102 114 101 101 46 32 80 114 101 112 97 114 97 116 105 111 110 115 32 104 97 118 101 32 98 101 101 110 32 109 97 100 101 46 32 84 104 101 114 101 32 119 105 108 108 32 98 101 32 110 111 32 119 97 121 32 102 111 114 32 116 104 101 109 32 116 111 32 100 101 110 121 32 105 116 46 32 84 104 101 32 116 111 112 32 119 105 108 108 32 99 114 117 109 98 108 101 32 97 110 100 32 119 101 32 115 104 97 108 108 32 114 105 115 101 32 102 114 111 109 32 116 104 101 32 100 117 115 116 46 32 74 97 110 117 97 114 121 32 119 105 108 108 32 98 101 32 105 109 112 111 114 116 97 110 116 46 32 73 116 32 105 115 32 116 104 101 32 98 101 103 105 110 110 105 110 103 46 32
Knowledge will come quickly. The World has lied to you. We will set you free. Preparations have been made. There will be no way for them to deny it. The top will crumble and we shall rise from the dust. January will be important. It is the beginning.
RVPUXKB AMQ GQL PKM VYC LMKQEB MW FVADWM VYC FMAURET BJVPT IZG MMAVJ XG BQKYA QH WDN UCBC BB VYPDNOP KFTKM YZJA JM R YHJ CMYXEIJNV IH GQL
how cringy and pathetic :V
That is pretty nice framework keep going :)
You should clean up your code before posting. Please use meaningful variable names, instead of random letters and numbers. The formatting is all over the place. Most IDEs have an auto-format function that will do wonders for the readability of your code. &gt;$b =$main_url; This line serves no purpose at all. &gt;else &gt; { &gt; &gt; } Else what!? &gt; // print_r($img2); Debug code should be removed. &gt;&lt;a href="&lt;?php echo $main_url;?&gt;" style="text-decoration: none;" target="_blank"&gt; This line is vulnerable to reflected XSS. The rest of the lines are also vulnerable to XSS, and will just flat break if anyone puts a quote in the original HTML for some reason. At the end, you're creating an anchor (A) tag, even if there's nothing to put in it. It'd be better to only create it if it's going to have contents.
EICHKXO NZD TDY CXZ ILP YZXDRO ZJ SINQJZ ILP SZNHERG OWICG VMT ZZNIW KT ODXLN DU JQA HPOP OO ILCQABC XSGXZ LMWN WZ E LUW PZLKRVWAI VU TDY
Hey, good to know. I see some use cases for that and I'm curious to know if people has others that I haven't thought about yet. Do you have an idea of how you would be using it?
It depends on the app complexity, frameworks, types of problems etc. It can't be really compared as there might occur an issue on frontend that will drag a whole project by few weeks, and vice versa. It's like asking if drawing on paper is faster than painting on computer, and it skips very important question - what are the requirements of the piece of art they have to create.
Well, yes. If you want to be really sure, you keep your network physically isolated from insecure networks like the internet. https://en.wikipedia.org/wiki/Air_gap_(networking)
Well, yes. If you want to be really sure, you keep your network physically isolated from insecure networks like the internet. https://en.wikipedia.org/wiki/Air_gap_(networking)
Could you put in a few pieces of example code on the Readme? I don't really understand what the library is for 
Seems pretty straightforward for button clicks. Are there examples of handling form elements such as input or select?
there are code in documentation check the wiki, you will be able to find out everything. 
haha sorry you're right, i've worded that awfully. Let me just change it..
&gt; I think it’s a “yes-and” more so than an “either-or” mentality. Let the GUI make the tool approachable, but let the command line continue to exist and evolve for power users. I think this nails the argument behind providing a GUI for CLI tools and is what I was trying to say
I've built a light weight boiler plate for React and TypeScript apps using Parcel.js Though r/javascript might be interested
Why are Java and Swift dependencies for a “lightweight” Node framework?
it is not dependencies it is clients library which you can use from Android and IOS apps to communication with node js server. Those libraries allow you easily create websocket connection to node js server from swift and java apps (Android and ISO) mobile applications.
Oh I see. I feel like that wasn’t initially explained. Thank you.
it is fine we will improve documentation with time to make everything more clear.
The only thing that I slightly disagree with is there disagreement of google making their own apps only work in Chrome. But, I could see the argument that because they are doing it could make other developers assume that that is an okay thing to do, which is wrong. 
Looks pretty standard to me? Which part are you referring to?
Cookie cutter fear mongering for clicks.
And just when I thought we were done making simple things complicated. This makes me ugh. Good on you for contributing to the open source community of course, but ugh.
With material design being adopted more and more by all major frameworks, the UX standards seem to rise too, and good UX does make your website stand out amongst others that just work. It's good feedback that you found it complicated, I believe it's a problem with the docs, since to use it you just need to add a couple of script tags anywhere in your html and it would work right away.
I’d argue that “standing out” doesn’t mean much these days. And if material design is being adopted commonly, leveraging material design doesn’t really make me think you’re standing out. BUT... my personal opinions aside, the part that is complex to me is the Babel + PostCSS to create something so small. Why not create an open source repository for every little UI component you can think of? Just seems like a slippery slope, my friend. Let’s get a rocket ship to deliver the mail, next!
First, I'll recommend auth0 for authentication. They'll give you a lot of time back coding all that (and getting it right). They'll also give you a pretty robust login widget you can just drop in place. They also have plenty of guides and resources to get you started. Beyond that, how you do authorization is a different battle. But that's much easier when you already have authentication in place.
This is exactly the truth. There is a buzz word phrase flying around you might have heard -- "Polyglot Persistence". This basically means that in many environments you will need to use multiple types of data storage technologies. So while MongoDB doesn't even come close to replacing relational DB's, it will likely spring up alongside RDBM's to handle data in specific use cases. Part of the reason MongoDB got so much hype initially is because devs **wanted** to use JSON over relational data (relational design is definitely a whole other area and the rabbit hole goes pretty deep). SQL development requires a different sort of logic (e.g. declarative/set-theory vs procedural/imperative). In response to the rise of JSON as the web data transportation standard, PostgreSQL, MySQL, Oracle, etc.. all have JSON datatypes now and fairly robust sets of JSON functions. To boot, you can also write JavaScript programs INSIDE of databases now too with Pl/V8 for Postgres and Nashorn for Oracle. So half the reason for the hype was the desire to use JSON storage, which relational DB's now have covered. The other reason was scalability/speed, but... MongoDB has been shown to explode (figuratively) and lose data at a certain point when scaling and things like cloud DB vendors (AWS) and Citus for PostGres means that MongoDb doesn't really have the edge on scaling anymore either. And as far as speed goes, a lot of the benchmarks of Mongo were with some very necessary security features disabled which makes it faster than it would be in production. Some other benchmarks indicate that PostgreSQL's binary JSON can actually be much faster than MongoDB's for comparable workloads. So MongoDB doesn't really "win" anything at all. It is just another databases that is a useful tool, but it is not really as matured as other DB's (yet) and doesn't win out over them in the majority of cases. 
With the flood of mediocre-at-best medium posts this last few months, it's refreshing to see one of high quality. Also comforting to know I don't use third party packages like that.
No, it's not. No new browser will become the new IE6 since they all auto update. Lazy clickbait title.
It's just a buzz word
You're right that only exceptional UX would stand out, but then there's a bar now, below which modern websites would seem outdated. Small components are actually what framework vendors promote nowadays to not repeat angularjs mistakes. I really made it for myself for a framework-less website, I think it fits such cases well. Postcss is to add vendor prefixes for older browsers, and babel is for ES6 -&gt; ES5. In the end it's just a small js file.
Beautifully written. In case you missed the point or just consider it TL; DR: if you don’t want random packages running dodgy code and sending your user’s data to unknown third-party servers, set up a Content Security Policy.
Super cool, very alarming, and fixable! Thanks
What I meant was that Postgres was an entire OS with all its functionality. 
Are you sure? Do you use npm? If so, how do you know that one of your dependencies doesn't depend on a package that depends on a package that could be toxic?
Great article, but in case you didn't read the whole things: &gt; So just to be clear, I have not created an npm package that steals information. This post is entirely fictional, but altogether plausible, and I hope at least a little educational.
UPD: I got so caught up in development I stopped seeing how it looked from the outside. Thanks to you, I started seeing it again I think. The fact is it's extremely easy to use and provides Material-like UX in any browser, new or old. I left only what's important in the README and I hope you like it.
Because I don't use npm.
People are hailing this post as amazing, but it takes ages то actually get to its point, which is literally just that not having a (good) content security policy is a security vulnerability. I get that the dramatization is for effect, but something is wrong when a post this long almost could've been a tweet and conveyed the same amount of actual information. 
But are you sure none of your dependencies use npm? It doesn't matter that you don't use npm if you use, say, React, which uses npm.
Do you really need it explained to you why a tweet saying "Use Content Security Policies" is less effective than a writeup like this? 
No, my point is just that the author could've at least hinted at what he was getting at before taking most of the article to even mention CSPs.
Use [Mozilla Observatory](https://observatory.mozilla.org/) on all your sites. Do what it says to get a passing score.
I like it too. Seems like a really convenient way to integrate random js modules into shell scripts. How does it play with piped stdin though? Have you tried that? I mean if you're going to integrate with shell scripts then that's a pretty necessary use case to handle.
Sadly, the number of things that broke during the leftpad fiasco should have been all the evidence we need that the popular JS model of microdependencies all the way down is unsafe and unsustainable. If it's not security then it's reliability. If it's not reliability then it's licensing. I suspect that as web development matures, we'll see more consolidation as we have in other fields of software development. In particular, it would be helpful to have much more comprehensive baseline libraries in the JS world (standard library and/or well-stocked toolboxes from a single source) to remove the incentive to bring in so many little extra bits everywhere just for simple, everyday functionality. Auditing a handful of relatively large dependencies, mostly widely used and from trusted sources, is always going to be more practical than auditing a dependency tree with literally hundreds of elements going several levels deep.
Is there an online version of this? Can't have it scan internal stuff
&gt; But that's a small price to pay for this level of rapid development right? Sure old is new and all that but stuff is evolving so fast it's fine. The thing is, I'm not sure development in the JS community *is* rapid. There always *appears to be* a lot going on, but how much real progress is being made either by constantly reinventing tiny wheels or by searching for external modules that provide some very basic functionality instead of just programming it yourself? Again, I think much of this is mostly just an artifact of JS not having a comprehensive standard (or *de facto* standard) library. Ideally, there would never have been a need for either a library like leftpad or writing the equivalent code in-house in the first place. It would be better if that sort of basic stuff were universal and JS programmers could then concentrate on developing genuinely new functionality in whatever their field is.
&gt; Look ma, I’m contributing to open source! Hehe
Seems to be multiple packages removed according to [this NPM issue](https://github.com/npm/registry/issues/255) (via [Hacker News](https://news.ycombinator.com/item?id=16087024)).
Just finished a video on how to create a nice looking login system in JS/PHP https://www.youtube.com/watch?v=ESQIpqOJb3w With blog post here: http://www.softwaresamurai.org/2018/01/06/login-form-with-php-and-qooxdoo/
Try out OWSAP ZAP. 
How would you go about doing that for a newbie like me?
Oh man. I feel so ignorant after reading this. 
Holy hell [it's bust create-react-app](https://github.com/facebookincubator/create-react-app/issues/3701)
I absolutely agree. Right at this moment, there is an issue with 'require-from-string' because a user deleted their account. I found this because I was trying to install postcss-loader, which apparently depends on this somewhere down the chain. I'm employed as a C++ developer, and learn web-dev as a hobby, so maybe my perspective is different, but I have found the JavaScript ecosystem to be exceptionally brittle. Frankly, it scares me that by getting something like React you are implicitly depending on thousands of tiny packages and the goodwill of their developers. I have ultimately cut out all dependencies from my side project, save those involved in building (ex. Webpack, eslint, postcss-loader), as I know those will have reasonable alternatives. The one exception is Mithril, since it is a couple thousand lines of pure js and depends on nothing. The website I'm working on is a replacement for a simple web application I wrote a few years ago. It used pure HTML, CSS, JavaScript, and jQuery/jQuery UI. There were a few more dependencies where I just included the scripts directly. That website has been running for two years with almost no maintenance. It is simple, looks OK, and is used by thousands of people daily. I understand that companies may need the additional complexity afforded by tools such as React with Redux, but I wish we had a better middle ground. It took me months of hopping around to come to the conclusion that maybe, for my purposes, I was more right the first time with my cruddly little jQuery site than with 5000 dependencies and Vue.
Thank you CiezkiBorsuk for voting on autotldr. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Can anyone explain why the npm registry still exists if it cannot guarantee that uploaded packages remain available? The current state makes it pretty useless as a reliable source te base software on because you never know if you're able to build it again in the future. 
You sure do know a lot about emojis!. After a quick look on your repos i realised that _i know nothing_ about emojis. Well I was planning to build one myself as well, more interested on the interactive/UX side of the thing though. Your picker will definitely be an inspiration if I move on with it. I'll let you know.
I noticed a couple of things: - No tsconfig.json, (should probably enable strict mode by default at least) - Render functions return `void` when they should return `JSX.Element` instead, but the annotation can be removed entirely, and the type should be inferred by TS. - Could probably toss the .babelrc and let TS do transpilation, for simplicity's sake - In index.html: `document.getElementById('root') as HTMLElement` This is an unnecessary cast, as `ReactDOM.render` can accept `HTMLElement | null` That aside, looks like it could be a useful reference.
I will keep it for.miiimulewooo it to do it to it soon I of isn't ioo ok over your face in over I jjikloi
That's not the worst part, that being the fact they have been sitting on their hands for 2 years not fixing this ludicrous behavior.
[I thought they actually fixed it after left-pad happened (under "What Happens Next")](http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm), but I guess not :/
Make a unique class (in css sheet you might add parent classes in front to make a more specific selector), or give the element a unique data attribute like data-tag-uid=["unique-uid"]
[Previously...](https://www.reddit.com/r/javascript/comments/7n9ckb/js_things_i_never_knew_existed/)
This is why sinopia &amp; verdaccio exist http://www.verdaccio.org/ Your code base should never depend on something that can't be guaranteed (like npm going down)
Will have a look but not sure. Babel is part of Parcel (I think) and part of the way they recommend setting up with React. I'll check it out though 
Hi, thanks for the points. Didn't know you could return a JSX Element, pretty cool 
Probably just a fallout or human error. You can't remove packages from npm any longer since leftpad happened. And looks like it's resolved, everything's available again.
To add to what ghostfacedcoder said, IDs can become a hassle as your stylesheet grows, especially if it's used throughout the site. Lots of times something what you think will always be unique ends up becoming a style you want to replicate, in which case a class would have sufficed. So it's really only an issue when styling is associated to an ID (eg if you add a class to an id with styling, you'd have to add !important or write ID.class in the ss to get new styles). Which is why some believe it's best to avoid using it on a stylesheet. But I still use IDs as an identifier for like a container to load data, or to manipulate with JS. All up to you! :) 
I don't really need to interact with iframes. My purpose is simple: I have a PDF and I want to print it. Using an iframe is currently the best option I have found to get my dynamically created PDF (with pdfkit or jsPDF) into something that can be easily printed by what will eventually be an electron based application. So, my current idea is to only have the iframe exist only for as long as it is needed and then get rid of it just as fast. I am not sure I understand the solution you are suggesting, but I will look into it more. However, if you have a better suggestion for what I am attempting to accomplish, I would be interested. Now, I do see with the PDF.js demo that a print button is offered. Perhaps, I need to go father up the learning curve and figure out how PDJ.js allows this to work. I never figured the simple act of sending a PDF to the printer could be so complicated with javascript and a browser.
Good ol' JS
This is a good reason I commit my node_modules. * My source code commits and node_module commits are always kept completely separate. * the size of the node_modules folder isn't a problem on the server because the server has gigs/terabytes of space * Cloning takes a little longer, but that's only performed by the developer once. * CI builds never need to run npm install * Dependencies are 100% guaranteed for all developers, build servers, production servers etc. I know a lot of people like to keep node_modules out of their source control, so if there are any reasons I haven't addressed to do this, please give me a shout.
Personally I’d create or ask for an element, return it and have the user append and style it for themselves. 
&gt; Use yarn and a per-project offline cache. Spotted this in the HackerNews thread. Very cool. &gt; if you want to update a package your git commit log isn't fucked. I'm not sure I follow. Package updates always get their own commit with a detailed commit message.
&gt; Don't commit node_modules. Use yarn and a per-project offline cache. Should the offline cache be configure on every development machine and server running the app?
I have created jExtract - a small function that helps with extracting data from your DOM. You give it a data structure and a place to search in, and it gives you all you requested. You should use well-known CSS selectors in your data structure and nothing more. There are some cool features such as integration with jQuery and filters! This function may be very helpful if you want to remake a website. More here: https://github.com/kormanowsky/jextract
Researchers often find the way without the doing maliciously. 
They did fix the unpublish issue though. This was just an accidental bug. Claiming they are just sitting on their hands seems disingenuous and severely lacking in empathy.
Sneaky and smart. It definitely makes me think more about third party dependencies and the need to make sure a CSP is added to everything requiring sensivitve info.
You can, but there is ~72hr period after publishing to do so, IIRC. I was at a conf a month ago where Laurie Voss detailed some of these changes.
I use it per-project. Yarn is aware of the existence of a `.yarnrc` file and installs will follow accordingly. There is no special logic needed, just install the project with `yarn install`. &gt;How do developers normally let each other know if they need to run npm update after doing a pull? Our workflow consists of aliasing `git pull &amp; yarn install` to `gp`. If it doesn't need to reinstall anything, its an extra 1 second. 
&gt; Package updates always get their own commit with a detailed commit message. My intent was to say you avoid having massive diffs, and balloon the size of your repo. I really botched the description. You will also have problems for natively built extensions if you check in `node_modules`. 
This is really useful. Thanks very much. I'll start having a play immediately.
[removed]
That would not work due to same origin request policy that a vast majority of browsers implement.
Native dependencies that are built on `install` will break across platforms. They need to build against your current node headers, and so this is highly likely to break CI (or even locally when you upgrade node), especially if you develop on macOS or Windows and do CI on Linux.
Not exactly `left-pad`2.0. That was a develop throwing a tantrum and removing their own packages from NPM. There are safeguards in place against that happening now. This was an operational failure. NPM will learn from what happened and move on.
Half a cent to check the carrier and all texts are free VS 3/4 cent per message, hmmmmm https://www.twilio.com/lookup
A super easy way to steal my info would be to make a bogus amqplib library on npm, I swear I typo it as "ampqlib" every time..
The server it is connecting to can allow the connection. They just need to send Access-Control-Allow-Origin: * The article is accurate. The way to prevent this is with a good CSP. 
On the user-side of things, if you're running LastPass as your password manager, it will warn you if the "action" of a login form goes somewhere other than the site you're on. Other decent password managers (1Password?) probably do that as well, so users that are smart enough to use a password manager (that's all of us right?) at least don't have to worry about that one trick.
You would see it in Fiddler or any network proxy traffic analysis tool.
Isn't that irrelevant? The server where the request is being sent to is under control of the attacker, they could just implement CORS. In fact, as long as the request doesn't need to be preflighted, you don't even need CORS - the request will still be sent, even if the response is "rejected" by the browser.
you might be using 7 packages, but if you calculate total dependencies that'd include all used by 7 you included and then theirs... (there are programs that calculate given github) you will find out that you're using about 638 dependencies total. There is literally no hope, without CSP and this alone could be something that can kill nodejs in my opinion as is. maybe in future we'd officially supported open source dependencies and custom unsupported ones. 
It also doesn't help that people use "password" as their NPM password: https://www.bleepingcomputer.com/news/security/52-percent-of-all-javascript-npm-packages-could-have-been-hacked-via-weak-credentials/ And typosquatting is known thing: https://www.theregister.co.uk/2017/08/02/typosquatting_npm/ But I don't think anyone who tried this would stay undetected for very long. I go source diving in node_modules all the time, not as a security researcher, but I'm pretty sure I would unhappy to find anything that looked like deliberately obfuscated code. I'm pretty sure there's some cryptowizardry that could do things like compare your checkout to github releases, look up how much security auditing has gone into your dependencies. I expect we'll have automatic sandboxing of each individual dependency in my lifetime.
&gt; Can anyone explain why the npm registry still exists if it cannot guarantee that uploaded packages remain available? The value here isn't security. It is convenience. If security were your primary concern you would limit your exposure to third party dependencies.
Online? That tool is online...
It’s almost impossible to protect against information leak. There are more side channels than policies like csp. But do use csp. It will at least protect against the most basic leaks and xss
Start your own thing
Noob here, what does this do, exactly?
Ok, let's say I'm using express and I have something like this: router.get("/home", (req, res) =&gt; { data = fetch(api) // get data res.render(homePage, data) }) That would be fetching data each time the route is called right? Is there a way to prefetch the data and manipulate it if needed and then pass it pre-fetched/compiled into the route handler itself? So then subsequent calls could be done on the client side. And if I do prefetch the data on the server and store it in some variable, how do I update that data when a post request comes in for example. Do i have to refetch data from the api on my server and basically restart it everytime?
stupid auto correct, thanks :D
Who's API is it? If it's yours, on the same domain, then you can call it directly from your client using ajax, but if it's on another domain, then direct client calls would be normally prevented*. It's a security policy, look up XSS, aka cross site scripting. Calling to a 3rd party API from the server is the common pattern. *I believe an API providers can explicitly allow XSS requests. APIs provided using jsonp also avoid anti-XSS policies. Also, most 3rd party APIs aren't going to be designed to let you snarf their entire data set, you'll probably have to make a targeted request in response to each user request.
It's `$0.005` for a phone number which you could send 100 messages to. That would cost you `$0.75` in messages.
I'm teaching myself javascript right now. The setTimeout method looks pretty handy.
Read the entire article and you will see why you wont under common circumstances 
That's still less than what a business would have to pay for a single credit card transaction for a payment gateway fee. Look, I get what you're saying but the price difference is negligible.
Copying comment from above: Ok, let's say I'm using express and I have something like this: router.get("/home", (req, res) =&gt; { data = fetch(api) // get data res.render(homePage, data) }) That would be fetching data each time the route is called right? Is there a way to prefetch the data and manipulate it if needed and then pass it pre-fetched/compiled into the route handler itself? So then subsequent calls could be done on the client side. And if I do prefetch the data on the server and store it in some variable, how do I update that data when a post request comes in for example. Do i have to refetch data from the api on my server and basically restart it everytime?
No, npm is less secure than others.
Same with Braintree which uses an iframe also. This whole scenario really reminds me of what is going on with WordPress plugins. There are however good plugins like securi and wordfence that can spot these script obfuscation techniques.
Could be personality related. 
Take people out you no longer work with out for coffee and ask for honest feedback. Assume you are to blame and work from there
Don't forget you are the easiest one to fool. So trust your own tests. Apart from the gold standards, Ask your own colleagues to try to mess up with the system and see if you leak info
Stripe is only in an iframe if they use the simple pre-made form. You can also implement the api directly on your own form using the stripe JS library. You're supposed to not use the 'name' HTML attribute on your input fields because a form submission sends that data to the server and thus potentially over a non secure connection or your server logs now have plain text card info in them. I think the library warns you about that though not 100%. 
Either personality or you're not as good as you think you are.
How so? This has already been demonstrated with PyPi and Maven. What allows this isn't a specific feature of npm.
Yes. If you run any code that you don't understand every character of, you are at risk of that code hurting you.
The same way an experience developer would. :p
It's mozilla so the source code wasn't hard to find. https://github.com/mozilla/http-observatory-website/ Compile it to use it locally. It comes with it's own webserver. https://github.com/mozilla/http-observatory-website/ 
Cheers thanks :)
And a proper server firewall with proper logging
They are proxies for npm. Basically, you run an npm cache server, which is where you download packages from (instead of npm's servers).
Var is formally used in JS ES5 to define any kind of variable, and any JS version that's newer(ES6,ES7,etc) uses let and const to define variables. 
What annoys me is that people are still gonna sensationalize the hell out of this as they try really hard finding reasons to poke fun at the JS ecosystem. It was a simple fluke that was resolved pretty damn quickly.
An edit by him says Content Security is easily bypassed
In this case, it's running on the client computer, not your server, unfortunately
Yeah Hanlon's razor in mind, I do not think they had let this happen on purpose.
I warned a top 500 company about this problem when I was working for two years ago , I nearly passed for a conspiracy theorist.
&gt; Can't the same be said of all ~~package managers~~ third party code? Why, yes it can.
For sure, and i think it makes sense. But that period wouldn't endanger other projects relying on it like it was the case with leftpad that was included in most projects due to various links.
Give a try https://github.com/cezerin/cezerin SPA and PWA. Node.js and React. Open source.
&gt; On any page that collects any data that you don't want me (or my fellow attackers) to have, don't use npm modules. Or Google Tag Manager, or ad networks, or analytics, or any code that isn't yours. Easy to say in retrospect of course, but I have never been comfortable with NPM and never used it in work for clients. No code in projects for my clients, whether front or back end, is comprised includes libraries (and versions) I don't 100% trust. And I keep those to a bare minimum. I know that seeing dependencies upon dependcies is common for anyone who uses Linux etc. but in software development - at least at the moderate scale I work - it's relatively easy to resist being "dependent" on NPM and lock down all the code you use to just what you need and just what you trust.
&gt; "The way Tom does x and y pisses me off, but damn, he knows everything about z. Better off keeping him around." While that may sound somewhat reasonable, in practice it doesn't really work. Most of the time companies/people will just prefer someone not so good but that doesn't piss other people off. It is only in very rare cases that they will go the other way.
Technically it could be running on either the server or the client considering they're rogue npm packages. The vulnerability applies in both cases. 
&gt; On any page that collects any data that you don't want me (or my fellow attackers) to have, don't use npm modules. Or Google Tag Manager, or ad networks, or analytics, or any code that isn't yours. Easy to say in retrospect of course, but I have never been comfortable with NPM and never used it in work for clients. No code in projects for my clients, whether front or back end, is comprised includes libraries (and versions) I don't 100% trust. And I keep those to a bare minimum. I know that seeing dependencies upon dependcies is common for anyone who uses Linux etc. but in software development - at least at the moderate scale I work - it's relatively easy to resist being "dependent" on NPM and lock down all the code you use to just what you need and just what you trust. I just don't like now knowing exactly what is going into my code base. I want to feel I trust my code and that trust comes from knowing all 3rd party libraries have been time-tested, they're self-contained and every single file served is the one I put there on the server myself. That's just me of course... call me old-fashioned. :) 
Check this https://github.com/cezerin/cezerin React and Node.js based e-commerce platform. * Node * React * Redux * API centric architecture * Passwordless with email and JWT * SPA and PWA Project has 3 apps: - REST API - Store - Dashboard
Interesting. Obviously it's better not to piss people off at all. But I'm surprised that a high level of technical skill wouldn't count for me. 
The thing is that you can’t inject this code when it’s a npm package
Yeah, there is no alternative. The moment a sane and stable alternative to npm comes, i will switch to it 
It's not that "it doesn't count", but rather that it doesn't count _as much_. The thing is that being good or "knowing everything about Z" is not such an uncommon or hard to achieve accomplishment. And the difference between "being quite good at X" and "being extremely good at X" is much smaller that you might think against "this person is generally nice to work with" vs "this one's an asshole". So, to make it clear: It's not that technical skill _doesn't count_, but that beyond a certain point of technical competency, bad people skills will count negatively _much more_.
this also wouldn’t work.
https://javascript.info/ check this out. Really helps with going through the whole language 
&gt; Any tips on how to keep my job? Be the better developer. It is all about quality of product, speed of delivery, and how little you work. If you have one developer that constantly works their ass off and another developer that is constantly staring out the window not doing work (provided they both get their work in on time) who do think management wants to keep? It isn't the developer that looks like they are struggling. It is the developer with huge availability that could easily replace 3 other developers. &gt; My recent employer said they didn't have confidence in my ability to work on bigger projects I have a developer at work has this problem. This developer that I know really believes they are a senior, but the company doesn't think so and the company is absolutely right. Here is a quick checklist: * Do you have experience working on larger projects **from planning to delivery**? This need to be documented. * How invested in frameworks and dependencies are you to do your job? If somebody came to you with a project and said you could not use dependencies, frameworks, libraries, or any sort of custom build and you still write high quality code? If not I wouldn't consider you competent either. * What is the hardest problem you have ever solved with code? You should be able to talk through the challenge of the problem and the simple elegance of your solution. If you cannot do this either your communication skills are incredibly weak or you aren't solving hard problems. * What is your idea of quality code? The most correct answer is less code. This means less conventions, less ritual, less tooling, less bullshit. Dicking around about how the code should work is for newbs. Just solve the fucking problem as directly as possible in the way that is fastest for the user to execute. * How do you find hard problems to solve and how do you determine if they are hard? You probably aren't going to get this from your employer. If the problem was actually hard they wouldn't give it to you. They would give it to somebody they trust, somebody they have confidence in. You are going to need to find hard problems to solve on your own time and really invest in solving them.
Not only that, but their dependencies too. And their dependencies and theirs...
One of the key advantages to an express server making requests is that the client needs to make less requests overall. If you have your client request page A from Server A, on a slower internet connection, for Server A to tell it to request data from Server B it would have a lot of overhead. Whereas if Server A makes that request to Server B, it will be a lot quicker. Essentially the following connections are made through a web server which has a much quicker network connection than a user. This becomes even more apparent when the endpoint you are querying is in the same datacenter. I end up getting 100’ish ms response time for the api, whereas a general user would take well over 1000. 
Because...?
You do realise that the whole point of this article is to show how a small dependency could end up relied upon by React? Meaning NPM or not, it could sneak in their by virtue of the React devs themselves and there’s nothing you can do about it. 
Typo packages yeah. Or others like ‘fetch-jsonp’ and “jsonp-fetch’. 
Lol It's a fluke that wouldn't exist if NPM was designed with any sense. Yarn all the way.
The need for dependencies in JS is absolutely crazy, you can’t deny that. Only 106 of thousands of departures were removed and caused such chaos.
Read this: https://www.amazon.com/Official-Guide-CISSP-Fourth-Press/dp/1482262754/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1515321157&amp;sr=1-1&amp;keywords=cissp+cbk I read the course book and took the exam back in 2010 when there were 10 domains and 250 exam questions. The course book provides a comprehensive enough (I passed the test the first time) understanding of security. The basic problem illustrated by the Hackernoon article is that your site shouldn't have 1000 NPM packages in production. If security really were a consideration your site would not have any untrusted NPM packages in production. The technical solution is to have an understanding of security and why some decisions are really bad decisions.
A huge amount of the JS that runs in browsers these days is distributed as/bundled from NPM packages
Yeah, I don't know if you tried, but you also could not install those missing packages using yarn, it's not that bulletproof.
You can configure offline caching with yarn, but yes it's not bulletproof. What _would_ be bulletproof is a sane approach to package management, like with pip or bundler.
best place to store credit card numbers is write to a txt file into the public folder. But just make sure your don't call the file `/customer-credit-card-info.txt`
I had similar problems at the beginning of my career - it's a very hard situation because nobody is willing to stick their neck out and give you tips. &gt; the 3 projects I worked on had rave reviews from the clients, even won awards Have they won awards because of the quality of _your_ work, though, or because of the design / concept / etc? I think /u/Pyrolistical's advice is the best, there's no beating actual first hand information. Ask more than one person though, preferably people actually involved with your sacking(s), people tend to speculate just to be helpful Have you kept a copy of your emails from work? If yes, go through them and collect all those with some critical remarks towards you or your work, even if not directly. For example, have you been reassigned from task A to (easier, or less mission critical) task B? Or those emails with reminders of expected behaviour ("We would like to remind everyone that you are expected to be at your desk by 10:00 at the latest" etc) - they may not have been directed at you, but still. Read all those emails in one go - you should get a "feel" for what seemed to grate your employers. You could also try and reverse engineer the reason starting from what _could_ possibly go wrong - typically this falls into one of these categories: - general (lateness, bodily odours, bad breath, scruffiness, communication with HR / bosses when there are problems, being on Reddit at work, etc) - colleagues (do you get on with most of them, could the way you communicate be perceived as rude or arrogant, are you included in the socialising, etc) - work quality (are you really as good as you think you are (how would you prove it?), are you thorough, how many times are tickets assigned to you get reopened or reassigned to someone else, etc?) In my experience it's not always (or even often) important to be the best, but it's _always_ important to be thorough and reliable. In my case, just for your reference, it annoyed my employers that I spent too much time browsing the web. I was fast and had actually finished my work, but it didn't matter, it grated. Also I came across as rude in my written comunications (not my intention). It took me a while to discover that's what it was, but once I did and rectified it I had no longer any problems. Good luck
Clients very, very rarely look past the visual aspects of a web developer's job. If the thing looks pretty and isn't obviously broken, they'll rave about it. Don't assume that every it great from that. Your bosses, though, are looking directly at your *code*. If they're not confident in your abilities, they probably see some problems. Having never seen your code, I can't tell you what's wrong, but I could guess: Sloppy code is hard to fix and maintain. Take the time to straighten it up, fixing the formatting before turning the code in. Test your code thoroughly. QA's job isn't to find your bugs. It's to make sure *you* didn't leave any in the code. Your job is to produce code without bugs. Comment your code. Even if you think it's obvious, it probably isn't. Absolutely comment anything that you have any uncertainty about, and and comment other things to make them easier to read and understand. Name things nicely. Don't use single-character variable names except for very short statements, like foreach loops, and even then they should probably be meaningful. Don't produce side-effects in your functions. Try to remain as "functional" as possible when coding, and only resort to side effects when you really have to. (Study "functional programming".) This will make your own life a lot easier, too. Follow the style of the existing code. If they use tabs or spaces, you do the same. If they use jQuery for things, don't use native javascript. Make sure you've hit all the requirements before closing a ticket. Again, it's not QA's job to tell you what to do, it's their job to figure out when you've failed at your job. If QA sends a ticket back with legit problems, you should feel that you failed and *not* be mad at QA. QA's job should be really boring if you're doing your job perfectly. (That said, *nobody* is perfect, and you will have tickets come back. The number of times it comes back is the problem.) Those are just off the top of my head from things I've seen while mentoring junior devs at work.
Have a look into caching. You could make it do the above route, but instead of just fetch, it would check the cache, if its empty, fetch the API. Otherwise it would just use the cache. could just story the response in memory (module level var) or perhaps in a DB such as mongo or redis.
You need to pay to get the source code
Seems like it. You could instead use a promisifed version: https://www.npmjs.com/package/promise-async
Thank you for this.
it's not smart, it's the same stuff spyware and malware and whatever been doing for ages. Only he used a npm package to distribute it which has also [been done before](https://www.theregister.co.uk/2017/08/02/typosquatting_npm/). The problem lies with npm [and most of the package managers we use today](https://nakedsecurity.sophos.com/2017/09/19/pypi-python-repository-hit-by-typosquatting-sneak-attack/). Nobody (I think) really has the time to check every single line of source code and that's all it takes, we rely on things like participation and that the package manager not fucking us over. 
* You use GET to submit passwords. That's extremely dangerous. In fact it's so dangerous that in your place I'd immediately pull this tutorial and change that. * You extend PDO with your auth class. That's completely bastardizing what inheritance is for and is just really really bad code. * You don't accept a PDO connection, your auth creates one by itself. That's bad design. * You use `array` instead of `[]` in your PHP code. While the PSRs don't seem to have anything regarding this, I'd advise against it - `[]` is practically the standard in the PHP community. * `$salt1 .= $set1[rand() % strlen($set1)-.04];` - what the? * You use `sha1` instead of `password_hash` and `password_verify`. Generally you used your own encryption. Don't do that. Again, I'd pull this tutorial and immediately change that - this is simply incredibly bad practice. * Why do you use `trigger_error` instead of `throw`ing one? Bad style. * `forgot_password` isn't even implemented. * `extract($this-&gt;encrypt_password($password));` nonononononononononono It's cool that you are trying to share knowledge. But login systems are one of those things that are completely overdone, and mostly in a bad way. This doesn't mean that your tutorial is completely bad. But you should definitely consider the points I made above and change it. That code is not something you want in production, it's unsafe (I didn't even go into the cryptographic problems) - and a newbie might find it and just copy it.
At least you could do is to explain why using eval in this situation is bad? Can't wait for your explanation.
No. IE should be destroyed and never spoke about again, it's existence damages the industry.
Nicely done, but you need to prevent key repetition from holding the key down. It's really hard to not move more than you want to move. IMHO It's not good enough to sell yet I'm afraid. There are far slicker ones out there for free.
So we should go back to writing everything ourselves?
Make a successful company, make a lot of money and then after 8 months fire yourself leaving all other cofounders with 100% money. (sorry)
Seems like Flow would have fit better
While the article is fictional such cases have been documented long time ago https://twitter.com/o_cee/status/892306836199800836
" the part of the page where the user is typing should be in a sandboxed iFrame and it should run only hand-crafted (and may I suggest, not-minified) JavaScript — if you want to do client-side validation." 
Thanks. I improved controls. Now it moves it only 1 block at first. When pressed more it moves more. There are much slicker ones out there. But I wanted to keep jsTetrix very simple and clean. Not going add all kind of bells and whistles to it. I'm only selling a full version with 1 more feature. I have to monetarize my hard work somehow.
If you're using `async.mapLimit` to limit concurrency there's a lightweight [p-map](https://github.com/sindresorhus/p-map). Also Bluebird's [Promise.map](http://bluebirdjs.com/docs/api/promise.map.html) supports concurrency as well. ``
&gt; router.get("/home", (req, res) =&gt; { &gt; data = fetch(api) // get data Why are you using `fetch` on the server? Are you fetching data from yet another server? (or is it a microservice) If you're rendering HTML from server you should ideally be able to query the database directly, no?
Thanks. After reading a bit, I have one more question that I can't really find the answer to. Does client-side caching happen automatically? How about on the server using express? From what I've read it seems they both happen to some extent automatically, but I'm not sure if that's true. Service workers for example can be used to cache things right? Does that mean I need to implement something for client-side caching to work?
I mean if the language was stable and mature enough to have a decent standard library we wouldn't need to "write everything ourselves". Because those things would be built into the language.
Why should they? Google is still larger than Mapbox in many cases. Also, how did you measure the "performance" difference, if I might ask? Google Maps does use WebGL. It's not like Mapbox has discovered a secret, they just market it prominently as a feature.
Nice write up! I work at a place that deals with a lot of personal data, and before we can add any library, we have a team of security personnel that comes through the code and checks all dependencies. We aren’t allowed to use minified libraries.
The attacking server would send this... I'm sorry, but no your site is not protected from this by origin headers
A very interesting read. A couple questions though. The attack described and the suggestion to isolate the form in an iframe will help to protect the end user from malicious code on the front-end but why as a developer would you ever trust (or think you have any control over) the front-end? I don't think this is the best illustration of the basic problem that you can NEVER trust 3rd party code that you haven't vetted yourself. Code modules installed on the back-end are a much larger threat (in my opinion as a developer). I don't know how to solve to trust problem but I think in the future there may be some sort of code registry/reputation that is attached to the module and the users/developers can use to verify. Why pick on NPM? There are 100s of ways to deliver 3rd party code. Even if a developer trusts the modules (because all the source was vetted) how can the end user trust the developer?
1. Vector layers for smoother zoom transitions 2. Capacity to render thousands of markers without making the UI slow I think those two are the biggest points. I know that google maps website and google maps js renders completely differently(unless I’m doing something wrong). Clear the maps website works greatly with smooth zooms, vector elements and so on.
You can do this using npm with https://github.com/JamieMason/shrinkpack.
Hi Shadeez. Apologies if it wasn't clear. I would like to check my availability first and then if I'm available on the hour, the customer could proceed with the quote. The only way it's connected is that the customer could only proceed after getting the green light regarding my availability. I'm looking for a calendar that I could somehow link with my uCalc calculator
There's an update in there that recommends against using a CSP because an attacker could legitimately use an *actual* analytics provider to collect the data. There's nothing preventing an attacker from sending off credit card information to google analytics. The recommended approach is to place all forms containing sensitive data in an IFrame where it's served without third-party Javascript.
Built under typescript? What kinda wording is that?!? *Written In typescript. 
&gt; I have to monetarize my hard work somehow. Well.. the market owes nobody anything. The market is the market. I'm not saying there's anything remotely wrong with attempting to monetize any coding project. If somebody is willing to buy this, then more power to you.
And I believe they might start losing market since mapbox is cheaper than google maps for business
This week I made **hyperactiv**, a super small reactive library written in less than 120 lines of code. Basically hyperactiv observes object mutations and computes functions depending on those changes. The key point is that the library is smart enough to remember the dependencies, meaning that you never have to specifiy which function depends on which observed property. A typical use case would be to create a smart reactive store which updates your web framework components. For React, it is [18 additional lines of code](https://github.com/elbywan/hyperactiv#react-store). More details @github : https://github.com/elbywan/hyperactiv
Yeah, man... just keep going. And make sure to actually write code! If you get stuck (and you will... we all do), then try and try on your own for like 30 mins. Google around. Come here or Stack Overflow and ask questions. I think the key is to not give up.. and to also get good at Googling the right/questions answers. After doing so over and over, you'll start to develop a sense for it on your own. And let's be clear, programming isn't easy. It's known to be hard and it's known to take a while. Experts still struggle, they just struggle with different aspects.
We switched away from `npm` after we were having some horrendous install times, so I haven't really kept up with `npm` development. I use `yarn why` command often, so in my opinion it is still the better choice. 
Super biased IMO
Hey I was being sarcastic!
That's great
Reliability is security. Broken software is a type of security failure.
Everyone struggles. Everyone feels dumb and frustrated from time to time. Only through patience, persistence and determination can you progress. This takes time. I've been coding professionally for 6+ years and I still have days where I feel defeated. This is just something that you need to learn to cope with and overcome as you mature as a developer. If you keep at it, things you struggle with today will become second nature because your brain is like "fuck that, let's remember to not do that nonsense again". Something to consider is that this emotional rollercoaster is simply part of the work. Take this as an opportunity to reflect on yourself, how you cope with failure, frustration as well as success. Better analysis and understanding of your mental and emotional states will make you a better developer.
Posting code is almost never a bad idea.
I'd be careful on terminology here. There's browser caching. And then there's data caching. Browsers will look at the http headers and decide if they should cave the response. So yes technically you could get express to send cache headers and have the client cache your responses. Caching api responses on the client is a bit odd though. Better to just get a quick response from the server then have possibly stale data on the client. If you want to send cache headers, nginx might be another tool you want to look into. It sits in front of your node app and helps dealing with headers,responses, ssl etc. Never used service workers before, but from my understanding they just let you offload processing to another thread. Not sure if best used for caching. Express may cache some assets and things internally to speed it up. But doesn't sound like what you are looking for, and it's not a manual process anyway.
Hence the _if_. Like it or hate it, JavaScript really, really was not designed with the myriad of use cases we've found for it today in mind.
This issue caused me to review how I handle my dependencies. https://yarnpkg.com/blog/2016/11/24/offline-mirror/
My best guess is its like a timing and cache issue. The reason why your code doesn't run the first time is probably because something that needs to be loaded in the DOM isn't loaded by the time your script runs. The reason why it runs the second time would be because it cached it. To solve this, you would need to have your code run on an onload event of either the window or document. Otherwise, the only way I could help is to look at your code.
Yes, I think Vue.js is interesting.
Tip Blog.npmjs.org uses Tumblr and not wordpress despite automattic owning it
Thanks for the responses so far. I edited the post to include the code.
I agree with this. Especially GraphQL. Thanks for the link to that article.
Do you have access to google? It should be trivial to do a search http://www.wpbeginner.com/wp-tutorials/how-to-properly-add-javascripts-and-styles-in-wordpress/
Use event.cancelDefault() to prevent the normal navigation action of clicking a link.
"Automated content flagging goes wrong" seems to be a theme of the last few months.
Yes... By doing it this way does the code get overwritten by theme updates? The website i´m managing at the moment has a stock Worpress theme with couple of Frankenstein hacks (the sons owner was the previous web dev). Personally i would prefer to work with child themes so the core theme funtction wouldn´t get messed up if i decide to update the theme. cheers The sysadmin helping the marketing department
Is the data cheaper than https://www.openstreetmap.org free API?
You could wrap it in a plugin if you really wanted, which would survive theme updates, but that involves a little more work.
So... "it doesn't work" [doesn't really help much](https://www.reddit.com/r/javascript/wiki/faq). Anyway: https://jsfiddle.net/308wwp2r/2/ But... something that is clearly a bad idea is this `b == "&lt;br&gt;"`. If the `&lt;textarea&gt;` is empty, its value won't be `"&lt;br&gt;"`. If you want to be certain a `&lt;textarea&gt;` does contain something, get its value, do a `.trim()` on it and then check its length.
It is designed to have a super tiny standard library, though. Having a standard library literally designed by committee prevents it from getting much larger than it is.
I think you mean `preventDefault()`, right? That would result in non-functioning link, what is the use in that as a solution?
Automattic doesn't "own" npm. Matt Mullenweg was an early-stage investor in npm Inc.
Thanks, i like the idea of a custom created plugin if i could add a javascript code on specific page/s as well as all the pages.Will look into that. But not sure if it would effect the performance of the website.Maybe that's just the crappy Wordpress plugins.
And...what exactly is the problem with a large standard library? Like I said, the short tiny standard library JS was designed with literally cannot support the language's use cases in 2017. Using third party libraries should be the exception not the norm, yet here we are.
Can you give an example of how the URL looks like?
I added nicedit to the textarea to make it a wysiwyg editor, and for some reason this adds the &lt;br&gt; to the textarea. I'll thy the trim and see if that fixes it. Thanks for the suggestion. I went to jsfiddle to try it, but I have the same issue. The fileValidation function works fine, but the validateForm doesn't seem to do anything.
&lt;a target="_blank" href="www.website.com"&gt;webpage&lt;/a&gt;
What's the particular piece you're struggling with?
You could use this: document.querySelectorAll('a').forEach((anchor) =&gt; { if(!anchor.getAttribute('href').startsWith('http')) { anchor.href = `http://${anchor.getAttribute('href')}`; } }); (Might need to re-write it for ES5)
Nice idea. Thank you!
Nothing is wrong with a large standard library, but JS is different. Nearly every language is owned/maintained by a single person or company. Except JavaScript. JS needs a vast majority of the companies in TC39 to approve of every single feature, without any vetoes. It took 6 years for them to all agree on ES2015. I would love to have a nice standard library like my favorite language (Elixir), but I understand and respect JavaScript's unique position as a language and the challenges it faces that other languages take for granted, like a nice big standard library.
&gt; I'm employed as a C++ developer, and learn web-dev as a hobby, so maybe my perspective is different Or maybe you are just not an incompetent flunky needing conveniences and frameworks to qualify your competence and employment?
then I tell him/her to go look at their node_modules folder for a reality check. 
The npm registry has *a* mirror, but it seems as though `npm` itself (and Rubygems, others..?) are not inherently built upon using a network of mirrors. Yes, there's `npm set registry URL`, but nothing (that I know of) like [Perl's CPAN](https://www.cpan.org/misc/cpan-faq.html#What_is_CPAN), where I can supply of list of fallback URLs, or even just set my region and let the `cpan` command figure out where best -geographically- to get the given dependencies. This seems like a no-brainer design decision but, maybe I'm missing something as it doesn't seem to be done. 
Yes that. And I thought he was asking what to do if the href value was a non-link value, like “javascript:...” or something. The real solution is to simply make sure you only make links with real href values.
Stylistic choices and readability, really. There's nothing wrong with writing `onClick={this.handleClick}` when rendering a component. It's also not _wrong_ to say `onClick={this.props.toggleTodo}`, but that can start getting a bit longer. There's no difference in behavior either way, it's ultimately a question of how you want to organize your rendering logic.
"A lot of boilerplate" may be much less than amount of additional symbols from writing "this." everywhere. Imagine "this" having fields 'x' and 'y' which are then used in formulas 20 times. You will need 5 * 20 = 100 additional symbols for "this." and only 20 symbols for "const {x, y} = this;".
I lost faith with the leftpad failure. This current problem is just more of the same. You cannot build infrastructure and simultaneously be hipster and ignore security.
well, the original title..
_CSS has variables nowwwwww?????_ Awesome. 
This technique doesn't work with Safari. If you care about that browser, check out [clipboard.js](https://clipboardjs.com/) which has a nice solution.
Sorry, I don't really know one - I used to write my own as well, but that was before I used frameworks. Why not simply use a stub? I mean, the login should be integrated with the rest of the application, and I am not sure whether your tutorial should actually deal with that.
I was hoping you could confirm that the work being done by the mentee is not for later commercial use? It would seem unethical to profit from the free labor, especially under the guise of an altruistic program. If it is the case that you plan on using the code for yourself, you should be up front about it so that people can make educated decisions about engaging with you.
Cool. Interesting examples. That big ternary in particular was hilarious.
Absolutely. That's a great call out! The code will not be used by me for any commercial purpose, all code will be open sourced. 
NPM must have had the Youtube team do the content flagging code.
As best I can tell, it works ok for what it is. However, on my iOS 11.2 device, dragging causes the page to scroll in addition to whatever you are doing with this. If there is no feasible way to cancel the default scroll behavior during a drag, I’d recommend a hack to make the page undraggable as a whole during thr drag of your items.
I ran into something similar when testing android - so i set `document.body.style.overflow = "hidden"` during drag. worked for android and and mobile browser emulations, but that doesn't always tell the tale. is the browser actually scrolling when you drag? or is it the browser navigation bar appearing on drag that causes issues? 
Even more chars saved (: const { foo } = this return { foo } 
Huge help - very much appreciated. 
Great motivation here - genuine thanks for the reply. 
I don’t this is security through obscurity. This is more of a cat not tipping his hand to the mouse which is pretty standard practice. 
And that’s why the parenthetical is there :) The truth is that security through obscurity is bad IF IT’S YOUR ONLY (OR PRIMARY) SECURTY STRATEGY (which is really what the common saying should be). But secrecy as PART of a robust overall strategy is rarely a bad thing.
That explains why packages were failing to download when I used CRA yesterday
Is that what you’re really worried about? When has this become an issue for you before?
I know this is unrelated, but npm, and docker has slowly been eating up all of my computers memory. Worse yet I think Xcode is caching crazy amount of stuff. Pisses me off
haha I upvoted. Actually, I was watching a general IT security course on Udemy, where the instructor teaches you how to set up dummy files with those sort of names, but the files include a sort of tripwire so that you're notified when someone opens them.
Thanks! Added to the soon-to-read list.
&gt; react no fuckin way
The major problem with it is that everyone can't tell if you are *actually* secure or just faking it through obscurity. 
Is destructuring an immutable copy? If not, I'd imagine that it also helps to avoid worrying about "this" reference in callbacks and what not
Disclosure: I am the original author of this article.
You declared an async function but then proceeded to chain promises instead of awaiting them. I would either choose to use async await or go the promise route. Personally promises are fine. A couple minor coding style things could be changed. For example when iteration over your coins you don't need to use a traditional c-loop instead you can use: for(const coin of coins) {} Also you used the let keyword on occasion when it wasn't necessary, using const is better practice. That being said, your code was organised, easy to read and clear. Good job. 
[removed]
Really good read. A lot of people seem to stop at how complicated "Hello World" is, missing the bigger picture.
Is this the same `Zam` that I saw a few weeks ago and looked like a stripped down jQuery?
Are you using jQuery? React? Angular? Lodash? They all use NPM. Chances are you're using NPM.
before anything, open up the dev console and look for errors
That’s what I was afraid
They're not static variables though, they're closer to reactive bindings: you can change their value at runtime (using js) and the rules using them will change. 
Nice article. I have a lot of experience in pure js but not so much in react so it was a good thing to understand why you would use it in day to day business (if you need statehandeling) 
sleep well: [52% of All JavaScript npm Packages Could Have Been Hacked via Weak Credentials](https://www.bleepingcomputer.com/news/security/52-percent-of-all-javascript-npm-packages-could-have-been-hacked-via-weak-credentials/)
`startsWith` is also part of ES6.
 return { foo: bar.foo } 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Modernizr/Modernizr/.../**localstorage.js** (master → 0cbd75c)](https://github.com/Modernizr/Modernizr/blob/0cbd75c41bfd1cf5fcdd5795c7926873c49f2870/feature-detects/storage/localstorage.js) ---- 
You could use Processing and then add p5.js add-on
Nice UI too!
It has absolutely no value for FP, it needs optimization mostly for callbacks calls, not known at compile time, this must have runtime support to work
I made while ago babel plugin that does TCO: https://github.com/krzkaczor/babel-plugin-tailcall-optimization
`composeMixins` is a function that takes a variable amount of arguments and stores them in `mixins`. It returns another function that takes two arguments: * `instance` which defaults to an empty object if not argument supplied * `mix` which defaults to a functions that takes a variable amount of functions and stores them in `fns`. It returns a function that takes a value `x` and returns the application of the reversed composition of all `fns` with argument `x` And returns the application of the curried function `mix`: * Inside the first argument list, we spread the array `mixins` * We pass `instance` to the second one ###### Function composition Haskell: f x = 2 * x g x = x - 1 a = g (f 3) -- 2 * 3 - 1 == 5 b = (g . f) 3 -- 5 Javascript (via `reduce`, reversed composition): const f = x =&gt; 2 * x; const g = x =&gt; x - 1; const a = g(f(3)); -- 2 * 3 - 1 === 5 // *reversed* because [f, g] and not [g, f] const b = [f, g].reduce((acc, fn) =&gt; fn(acc), 3); // 5
This is not really JS related, but they may not have a complete understanding of story points. In agile story points are an abstract measure of effort. This is not a measure of time or complexity. The reason is because a requirement that is initially challenging may require research, investigation, code examination. It may also require longer documentation and increased involvement from QA. When estimating a story you generally don't know the depth of involvement. The story point values are in Fibonacci so that the values are not confused with a real world measurement as they are completely abstract and exist only to compare to other stories. If you want to dump story points for time estimates then throw out hours. I honestly think this is a very bad idea, because time estimates of software are often horribly inaccurate.
Would have changed only if we could edit the title
jExtract is now on npm.
Inside the event handler try something like `console.log(event.target);` where `event` is the reference to the event calling the handler. This will get you the DOM node or JS object on which the event was fired.
Thank you, I see what you mean. I don't really have people here to talk with about codeing (most of them are designers). I tried out codewars, but quickly realised that even some of the beginner problems are really hard for me to master.
1. `composeMixins` takes in functions as its parameter. `...mixins` is a [rest parameter](http://devdocs.io/javascript/functions/rest_parameters). It then returns a function with 2 arguments. 2. The 2 arguments `instance` and `mix` have [default parameters](http://devdocs.io/javascript/functions/default_parameters). `instance` defaults to `{}` and mix defaults to what is basically a function for **reverse composition** or **pipe**. This function returns the value of this expression `mix(...mixins)(instance)`. Which translates to: *pipe all the "mixins" and apply the resulting function to "instance"*. So what is pipe? --- const pipe = (...fns) =&gt; arg =&gt; fns.reduce((acc, each) =&gt; each(acc), arg); const add = x =&gt; y =&gt; x + y; const substract = x =&gt; y =&gt; y - x; const multiply = x =&gt; y =&gt; x * y; const cool = pipe( add(2), substract(5), multiply(3) ); // Here cool is a function which contains 3 other functions via pipe. // cool(7) is evaluated as: // add 2 to 7 (so, 9) -&gt; substract 5 from it so, (4) -&gt; multiply 3 to it (so, 12) cool(7); // 12 /u/e_to_the_pi_i is right. Its written very terribly. IMO, a sane way to write `composeMixins` would be: const composeMixins = (...mixins) =&gt; (instance={}) =&gt; pipe(...mixins)(instance)
&gt; Ok, I've never seen this used because its basically Array.prototype.reduce() + Array.prototype.reverse() and its quite rare you need to do that. If you do... then reduceRight is perfect!
I have the exact same code as Daniel in the video 
My advise is to get an internship and learn on the job. Oh wait, that's where you are! The only way to really learn programming is to *use* it, which is the point of an internship. If you want to learn faster, do it at home as well. Stop trying to find a book that will do it for you. It won't. 
Man I would kill to have had a 6 week internship at that stage in my career. You need to take full advantage of working with experienced developers - ask for code reviews (I'm assuming these will happen anyway but if not then you need to ask), follow their standards, ask for learning material that they have used in the past, **read their code**. In terms of learning things you don't know about, code reviews will be good for this. For self-learning, go through something like Eloquent Javascript, and just skip what you know already. There is a lot to learn, so take your time. Additionally, learn how to use Git properly as well as NPM. If they aren't used in your internship, then they are very much worth learning in your own time. Having an appreciation and understanding of what Node is (and how NPM uses it) would be useful knowledge, too, even if you don't do any server-side work. More than anything, though, have fun and don't burn yourself out. 6 weeks will go by in a blink. 
Started messing around qith 3D model rendering with the help of my WIP project AnCore.js [link](http://renderer.surge.sh)