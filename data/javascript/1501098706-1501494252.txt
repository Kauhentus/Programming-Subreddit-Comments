Give the JSON spec a read, it's pretty easy: http://www.json.org/ You just need to escape that thing. { "key": "valu\"e" } I'd strongly suggest to use JSON.stringify(object) so you don't need to watch out for that stuff yourself. &gt; let o = { key: 'val"ue' } &lt; undefined &gt; JSON.stringify(o) &lt; "{"key":"val\"ue"}" 
Thanks man :)
I'll give it a once-over... First off, I'd suggest you use fat-arrows; some places are just begging for it, like this: let totalFitness = 0; pool.forEach(function(val, index) { return totalFitness += val.fitness; }); Can be shortened to: let totalFitness = 0; pool.forEach(val =&gt; totalFitness += val.fitness); You can also `reduce` this even further: let totalFitness = pool.reduce((total, val) =&gt; total += val.fitness, 0); Secondly, [Lines 64-68](https://github.com/rshageer/ga/blob/master/GA.js#L64-L68): this.genes.map(function (v, i) { if (Math.random() &lt;= mutationRate) { return randomGeneFunc(); } }); Using `Array.prototype.map` is semantically wrong here -- `map` is for transforming one array into another array. However, you're not doing anything with the result, so that's kind of confusing. Is `randomGeneFunc()` expected to produce side-effects (i.e. alter state outside of the current method)? * If so, then you should use `Array.prototype.forEach`, because that method is for the simple case of _"run this code for every array element"_. Also, the return value is inconsequential for `forEach()`. * If not, then you probably want to assign the result of the `map() ` call, maybe something like: `this.genes = this.genes.map(function (v, i) { ... })` Overall, pretty good code though, it's obvious you're not a beginner :)
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [rshageer/ga/.../**GA.js#L64-L68** (master → 59edce1)](https://github.com/rshageer/ga/blob/59edce1cf169683b75d4f14d5bf7310430aac911/GA.js#L64-L68) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dkrefqm.)^.
oh waw, thanks for taking the time. i'm going through your suggestion with my code and making the changes (I understand and agree) &gt; Overall, pretty good code though, it's obvious you're not a beginner :) thanks :-D
Compatibility, error checking; you know, stuff no one cares about.
I'm planning on running through the bootcamp and hopefully get a job, then work on the degree after. I'm definitely motivated. The thing that worries me is not getting a job after.
This looks pretty good, thanks!
Ideally Node
[Woo!](http://isfiberreadyyet.com/) 
If this is sarcasm, look up containerization. It's a thing.
Yes. I went to Hack Reactor a few years ago after a year of learning some Java and Python on my own. It was a great experience, but I wasn't prepared for how much of a slog it would be to get my first job. But, it has paid off in spades. I'm very happy at my current job where I'm writing JS and some Scala. I think the job market is not as favorable to bootcamp grads as it was a couple years, but that's certainly not to say that it's bad. If you do decide to go the bootcamp route, make sure it's one of the better ones (e.g. App Academy, Hack Reactor, Flatiron). Also, how old is the *older side*?
A fair warning: I did not manage to get a basic React v16 application to be index by Google. It looks like something in their code-base is breaking the Google crawler. The same issue can be replicated using old Chrome version, e.g. Chrome v24. I've sent a message about it to a member of the React team, but haven't heard back yet.
37. I'm actually looking into HR. I'm still insure as to what language I should go after, (I'm sure its bias here, but JS looks pretty promising.) Suggestions on language would also be appreciated. 
I went to Dev Bootcamp on Wall Street in NYC 3 years ago. It was the best decision of my life. I've been employed as a developer for 2 and a half years now. I learned mostly Ruby at the bootcamp, but I was hired for a JS position. The bootcamp did more than teach me Ruby though. It taught me how to learn efficiently and how to teach myself new concepts.
Like the pattern matching. Could be interesting to use it with redux.
Two things. 1. Wouldn't this pose a huge risk for the Flash apps still out there? 2. Is it possible some technology is used in other Adobe products, limiting the percentage of the source that will actually be abandoned? 
8 &lt; 11 xD
Honestly, I'll just keep using Bluebird for the sole reason that it outputs otherwise swallowed errors to the console out of the box. And it's also faster, allegedly.
Came here to say this. I didn't look at the source, I just decided to look up how to do it with vanilla js and stopped using the plugin. 
This is great. Love the way it is written. 
That's also Babel-compiled code, which is of course going to be larger regardless.
Not sarcasm, genuine astonishment with mostly myself and the subject matter, but I can understand why you'd think so. It was an awkward sort of thing to let someone know they enlightened you to. All of the commercial software work I've been involved with kept the majority of passphrases stored directly in files referenced in server side code. Seemingly safe if you trusted everyone, had no enemies, and everything worked as it was intended to. But also, as I can see better now, completely unnecessary to risk. Then again going into code to find the passphrases would be somewhat inefficient considering anybody who had access to the code could find the pw.xls at the root of some share directory anyway. I will look up containerization though and come back later. 
JS is a very safe bet. It's also a lot more fun to write now than it was a few years ago.
I would use three arrays. X, Y, whatever. 
&gt; "how to turn this shit into valid JSON" Tell the people who are producing this garbage that they fucked it up. If double quotes aren't escaped, there will be ambiguities.
The biggest thing for me is probably the Bluebird v3 cancellation semantics. They're not perfect, but they're definitely the best Promise cancellation I've seen. 
This is wrong though. Reading through the source you can see it includes dependencies for event delegation and event emitter implementations which are simply not needed. The only cross browser patch it has are for things like query selectors which are supported in ie8+ and also are not needed if you already have an instance of the element or are using literally any other framework. I mean if you want to pull off their exact api, sure you need all of that stuff but for the vast majority of people OP's solution works just fine and is supported just as well as clipboard.js.
&gt; element.select(); &gt; document.execCommand('copy'); Not if thats your implementation :p.
I just got out of a new one LambdaSchool. I did the PT and went in with a beginner level understanding of JS. It was arguably the best money I have invested in myself in a while. They went over CS data structures, binary trees, linked lists and other CS concepts. Then we went into React and building API's. I was the first cohort so things have changed a little but if you are serious about looking into a bootcamp I would strongly suggest at least looking into the offerings Lambda School has. I can't speak to any other bootcamp and I wont share a link as I don't want anyone thinking i'm making money off it :) but your dedication is part of the equation as well. I just am really happy with my results and hope it might help someone else make a good choice whether it's the same bootcamp or another.
Okay, great I could help! And thanks for being genuine :)
Tell them that if they want you to parse their JSON, then they need to format it as according to the JSON specification. What they are trying to send you is not valid and you will only further compromise the system if you try to compensate for the syntax inaccuracies on your end. I've seen stuff like this and it snowballs into a hard to maintain, incomprehensible, bug ridden mess. It should be as simple as them applying a transformation before they serialize their data to JSON.
What campus did you go to? Do they have dorms? I'm going to have to go to the ATX campus. Its about 9 hours from where I live. Are most coding jobs on the coasts?
Coding jobs are all over the place not just on the coasts. I think something that is important too is look at the area you want/have to live in and that can help make a decision too. There are some areas that are not JS friendly (not many but areas with big state/gov't jobs will have more java/c jobs available). Austin is a big tech hub and will be very JS friendly for work along with "most" big cities but again it's always good to check before investing a lot of money and time.
You too :) I checked out [this article on containerization](http://diginomica.com/2014/07/02/virtualization-dead-long-live-containerization/) and I again appreciate the tip! I will definitely be considering this for appropriate projects moving forward. I feel inclined to share something cool with you in return, have you heard of Moon? It was mentioned in r/javascript a few days ago and has thoroughly inspired me to become an Ethereum user / investor.
You know I've read that as well, would be interesting to test them out
[removed]
This looks looks like a great intro! However, I really wish these intro docs would also implement namespaces. Otherwise you're just cluttering the global namespace and asking for trouble if jumping in or creating a larger'ish project. 
According to the documentation, clipboard.js does these extra things: 1. *Provides a success event if copy successful* 2. *Provides an error event and selects the text if clipboard command is not supported* — Takes no extra work because [element.select\(\)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select) seems to have universal support. clipboard.js just provides the error event, while also handling many other errors relating to usage of the plugin itself. 3. *Provides a check to see if copy or cut is supported* — The hard work of that is, again, done in one line that returns a boolean. You can implement the success/error event yourself in just a few more lines: element.select(); try { document.execCommand('copy'); ... //success } catch (e) { ... //error }
Was wanting somewhere to start! Thank you! 
Would somebody please explain how Node is used for front-end?
I went to Codesmith, and it was a great experience. Not only did we get tons of hands on experience was really helpful. Also, I met tons of software engineers that I shared things in common with. I have a CS degree, the difference is in school you do things to get grades. I cut corners and it was a lot more generic, school stuff than hands on project experience. It may be because of the specific school I went to.. but that's my experience comparison. Most of the people in my cohort were employed about a month after we graduated Codesmith, most offers 6 figures and up so it actually does work. I was skeptical at first, but I needed something to change in my life and it was the best decision I could have made. I'm at a startup in Santa Monica now as a full stack engineer and I couldn't be happier
I'm curious why you think starting at the front end, and doing a small piece on node later is the right way to go? I've been instructing new people to build some basic node APIs then build an index page, then do some JS on that as the buildup to a full web app. 
Codesmith looks like they require a degree, or am I reading that wrong?
npm and npm scripts, task runners, bundler, local environment, dev server or just a server-side rendering service for rendering front end code.
Good point... I hadn't thought about the short-circuiting aspect. This isn't really particularly necessary in this specific circumstance as the comparisons are pretty cheap. It's just comparing momen.js dates and the loop running this will only be doing 20 to 30 comparisons once every few minutes, so minor differences in performance will have no noticable effect. The more I look at the code however, the more this feels like a clever hack and I'm thinking I should just stick with something like this: if(modified.isBetween(startTime, endTime) || created.isBetween(startTime, endTime) || startTime.isBetween(created, modified) || endTime.isBetween(created, modified) ){ runMyFunction(); } Which would make fore shorter, more standard code while also preserving the efficiency of short-circuiting. 
It refers to functions that reference non-global variables that aren't defined in the function itself. Your example has an inner function that references a `factor` variable that isn't part of the body of that function. Its instead part of the parent function. The inner function "closes over", as they say, that `factor` variable so as the function gets returned from calling `multiplier`, it still has access to that variable which, under normal circumstances would cease to exist. function multiplier(factor) { return; } multiplier(2); // factor variable created for this function call // is given a value of 2, then gets destroyed here after the // the function is complete because its no longer needed function multiplier(factor) { return function(number) { return number * factor; // &lt;- uses factor from parent scope }; } var twice = multiplier(2); // factor variable created for this function call // is given a value of 2, but then is not destroyed because its still needed // in the returned function assigned to twice which uses it twice(5); //-&gt; 10 - result from referencing the persisting factor variable // because it was "closed over" by the twice function returned from multiplier It doesn't just apply to parameters like this. Any variable or even function from a parent scope can be referenecd in a closure. function setupListeners () { var message = "document was clicked"; function showMessage (msg) { alert(msg); } document.addEventListener('click', function (event) { // this handler is a closure, referencing // showMessage and message from the parent scope showMessage(message); }); // ... } setupListeners();
Where do you see that? There were plenty of people in my cohort that were bartenders/restaurant managers/etc
I agree. Strictly speaking, node is the best way to learn JS. Front end is more memorization then learning to get a feel for the language. Honestly the comnination of node and react made me learn the language, and best practices.
Under the "your background" section.
"Residents come from an exceptional and eclectic range of backgrounds from PhDs to software engineers, from Stanford Computer Science graduates to self-teachers." This line? It's talking about the range of backgrounds.. at the end it says "self-teachers". Either way, if you're looking into it, feel free to contact me.. I'm a graduate, I go there frequently (especially on Thursday nights, they have a Javascript meetup and FREE DRINKS!) I can guarantee you that you don't need a degree.. and know the staff and leads well enough to put in a good word/help you study for your interview.
Where are you getting this JSON from?
I'm currently in the pre pre pre planning stages. I know very little at this point. If I decide its my best option, I doubt I would be ready before the new year. J am looking at these bootcamps as an alternative to spending the next few years getting a degree. If this option gets me into a job soon where I have upward mobility, its looking better and better. I do wish I lived close to one of these camps so I could visit a site, would help I think. Unfortunately, looks like I'm 9+ hours away from the closest one. I very much appreciate the offer for help. Ill keep your username in mind.
Yeah, I know how you feel! Codesmith is in LA. And yeah, definitely will help. It just takes a lot of effort and studying to get in, and also is 12 weeks of your time that you will devote to coding. I was there from 9 am to around midnight every night, 6 nights a week!
I'm pretty sure they're all implemented using loops, so it makes sense that they would be equal or slower. 
How much of that code was added in response to issues raised against the plugin?
AS2 or AS3? AS2 is janky like javascript. AS3 is much more modern, is class-based, and looks a lot like C# and Java. As a former AS3 developer that now works with JavaScript I can say that I miss the structure of AS3. JavaScript is just really janky. React is taking JS to a more structured place but it's still something that has to be opted in to.
I sooooo hate this crap. You are better off posting data about user interaction back to the server either on timed interval, interaction events, or page changes. Otherwise I recommend spending a dump truck of money on something like TeaLeaf.
I live In west texas, so I will most likely be applying to whatever camp I decide on w/o seeing campus. Living space is also a concern. The 12 weeks doesn't scare me. As long as there's coffee.
It's more like Node is a dependency for most task runners and bundlers, like gulp and webpack
I think the max height of the boxes may have messed with your site on mobile, a lot of divs are overlapping where they shouldn't be. Maybe put it behind a media query?
TBH, until Steve Jobs said what he said about Flash (and then found the decency to die of cancer after) HTML/JS was not a threat. I mean, the iphone is closing in on 10 years of being a product right? What was HTML/JS 10 years ago? Was canvas really a production ready HTML element? Was video a production ready HTML element? I really think that Jobberino saying that Flash would never be on the iphone is what spurred HTML5 to get its act together and become a real standard. HTML4 had been the standard for 20 years before HTML5 became a thing that you could actually use for non-cutting edge clients. It's just that no one saw the iphone coming and by the time stevie said what he said it was already too late.
/u/senocular has the correct detailed response. An ELI5 version: as you probably know, a variable inside a function is not visible to the rest of the code. A function's argument(s) is also a variable scoped to the function. What IS visible to the rest of the code is whatever is returned by the function, but you need to capture it in a variable. In your example, when you call `multiplier(2)` it returns a new function and assigns it to the variable `twice`. That new function takes the value (2) that you passed to `multiplier` and remembers it. So when you call your new function `twice(5)` it knows that it needs to multiply your argument (5) by the saved value `2` and thus returns 10. Hope it helps
Run this in the console of that target webpage: `location.href = document.getElementsByTagName("a")[document.getElementsByTagName("a").length-1].href;` You can also create a bookmarklet using a tool like [this](http://mrcoles.com/bookmarklet/). That way it can be run from clicking on a bookmark once on the desired page. It can also be automated using a browser extension. Shameless self promotion: I made a [Chrome Extension](https://chrome.google.com/webstore/detail/ctg-plugins/hjljaklopfcidbbglpbehlgmelokabcp) that allows you to write custom plugins that will be auto executed when any page is loaded specified by a url regex. That would make it even easier to execute.
That's a great idea. Only problem is that it's not the last `&lt;a&gt;` tag in the document, only in that `&lt;span&gt;` element. So I would have to select the last `&lt;a&gt;` in the last `&lt;b&gt;` in the `&lt;span&gt;` in the `&lt;td&gt;` in the ...
Ah okay I was mislead by: &gt; How can I extract the link of the last &lt;a&gt; tag, from somewhere in the DOM structure It's hard to get any more specific if I can't check out the DOM of the specific website. There are all sorts of tricks I can think of to identify it but not without seeing it. If the links in question have something unique about them, then you could iterate the list of `&lt;a&gt;` tags in reverse checking the `.href` against a regex match and stopping at the first one that matches.
clipboard.js is not just the way OP is using it. It has an API of sorts that allows me to use it an a way that I'm definitely not replacing easily or more simply. eg code below sets up clicking on a copy icon and copying the text from a certain place, falling back to showing a dialog with the text... clipboard = new Clipboard('.context-menu .copy-url', { text: function() { return this.getActiveTabUrl(); } }); clipboard.on('success', function(e) { // ... }); clipboard.on('error', function(e) { new CopyClipboardDialog().copy(this.getActiveTabUrl()); }); 
Excellent resource. I'm both reading it, and recommending it to everyone who wants to start a career in web development. I especially like the tl:dr sections since they are not simplistic, but provide an effective summary of each concept. Thanks for sharing. 
Yeah I haven't gotten to responsiveness yet. Thanks for the heads up
Yes it's intentional. Not my decision 
they should put Adobe Connect into a dumpster and set it on fire
Stack overflow is a better place for this kind of thing, and putting your code on codepen, jsfiddle, or equivalent is much appreciated
Damn, nothing but positive feedback. Thanks for sharing OP. 
&gt; Mostly that there's actually no good solution for the "I don't need any CPU or space, I just need a process that stays alive" problem What? What else are you going to use to run your app? &gt; Digital Ocean is a little cheaper than Heroku, but makes you install Node on your droplet instance and knowing myself, I saw this was going to go poorly so I bailed. You can use [Dokku](https://github.com/dokku/dokku) which is very similar to Heroku.
Better worse or 'before' eloquent javascript?
Is this something specific to version 16? If so, do you have a repro? If so, will you add info as a comment on the issue this post links to?
That's setting the clipboard text via JS, which the plugin accomplishes by creating a textarea offscreen then deleting it after copy. I exported that to vanilla too [here](https://codepen.io/joshuaptfan/pen/PKqbRa). To replicate the success/error events, you just enclose the function call in a try/catch block. So you see, there's hardly a thing that this plugin does that justifies its complex emitter structure. try { copyText(this.getActiveTabUrl()); ... //success } catch (e) { new CopyClipboardDialog().copy(this.getActiveTabUrl()); } function copyText(text) { var fakeElement = document.createElement('textarea'); // Move element out of screen vertically fakeElement.style.position = 'fixed'; fakeElement.style.top = '100%'; fakeElement.readOnly = true; fakeElement.value = text; document.body.appendChild(fakeElement); fakeElement.select(); document.execCommand('copy'); document.body.removeChild(fakeElement); }
-23 &lt; 1 xD
Did you server-render?
SF. No dorms. Ditto what u/boomer1204 says about jobs.
How is performance looking for irl apps?
This is my thought as well. Google's not going to crawl an SPA app that's only generated on the client side, since it doesn't execute JS!
http://eslint.org/docs/rules/no-unused-expressions
Implement a lexer.
I just want expression oriented programming. `do` is pretty good but it doesn't work with `switch` and it's all around pretty bulky. Pattern matching is really appealing though, though it's a lot more powerful with a stronger type system. 
Actually Google indexing bots do execute js but will not do it for complex pages.
I'll bring the marshmallows.
I've dealt with my fair share of CSV files with unescaped commas, but I haven't been blessed with an invalid JSON file yet. How about... Iterate over the characters in the string. When you see a quote, ask if it is valid if unescaped (like if it is preceded by : or { or , plus whitespace, or followed by : or } or , plus whitespace). If it's invalid, put a \ in front of it. Then at the end, hopefully it's valid JSON and you can use JSON.parse. That won't be perfect of course, but might be good enough to get the job done.
Right, but you have literally no idea what limited sandboxed JS Google will run. You have to design your pages assuming Google's not going to run anything. 
thx..
As a webOS developer since 2011, I can assure you, that you are incorrect there. HTML user interface for user facing everything (except the app launcher), and node.js for background services. A system communications bus that shipped JSON objects around between web processes and node processes (and a few native processes here and there). webOS was *years* ahead of the curve. 
Not really asking if you like or hate it to be honest.. we've made the decision to use tracking pixels for retargeting (if the person views our ad and then buys it off the shop later on, we should get credit for it), so I'm just asking if it can only be put on during app installation or if it can be modified later on?
Haha sounds great! Let me know when you're making your decision I'd be glad to help
[removed]
I actually followed this guy's course on openclassrooms.fr, which was really similar to this. It is a fun and simple intro to JS. Definitely recommend it 👍
Typscript and Flow have discriminated unions so they might work really well with this one.
Yeah but that's at compile time. I'm not sure you could apply that to the compile target without an alteration beyond the scope of flow and ts
[removed]
I went to Coding Dojo. It was a grind, spent a good 80+ hours a week poring over the material for the three months. They have an okay post-graduation curriculum too. I ended up with a pretty decent paying job so I'm happy with my outcome, but I know luck had a lot to do with it for me. I can't say the outcome was good for everyone in my cohort. A lot of my cohort ended up becoming TA's and eventual instructors of Coding Dojo itself since they were looking to expand, therefore hire. There are plenty of people who either couldn't pick up on the material or just didn't have an appetite to sit and code/read/absorb for hours on end and they kind of drop off at some point - though many stay at Coding Dojo for even longer than the original three months in order to really get the material. I'd recommend bootcamps. I like Coding Dojo since it caters towards beginners/intermediate-ish. I think HackReactor is the best one, though they're purely JavaScript heavy whereas there are quite a few web-stacks at Coding Dojo, of which you pick three. FWIW, there's a stigma with bootcamp grads and I can't say it's entirely inaccurate. Generally speaking though, people who come from a 4-year university, or people who are just Java/C#/Python devs tend to suck at JavaScript so if you become good at JS, you probably can bring value from the get-go. But bootcamp grads generally know nothing about the back-end stack and definitely don't know much about OOP principles and design. I personally had to continue to put my head in books the first few months into my new job since they were using a stack I wasn't entirely familiar with and had to fill in gaps in knowledge that way. 
the problem with the example you gave is that you're not returning a user, only the score. So you know what the highest score is, but not which user it belongs to. I agree that lodash/ramda make things nicer to read, but I do think that reduce definitely has its place. I mean there's a reason that reduce (or fold as it's called in some languages) is part of the standard lib of so many programming languages. For a great talk on folding and where/why it can be useful, check out this talk: https://www.youtube.com/watch?v=JZSoPZUoR58
What class were you in? HR10 here.
"Someone made something I personally like and someone else has concerns in entering sensitive administrative credentials as plaintext into a file that might be accessible by public, this is cancerous and the comment is cancer and I am the only one who is right and I feel justified to insult the one who does not like it and anyone who upvote this comment". Well ... THIS is "a cencerous comment".
Went to HR as well. I loved it. If I were to do it now I’d be very tempted to do freecodecamp AS LONG AS you had at least one other person to go through it at the same time as you and had an external mentor available to unstick you when the time comes.
I think it is pretty solid for a new programmer. I would recommend looking into a tool like ESLINT for consistent style application. I am seeing a couple places where the indenting of braces is inconsistent. 
Thanks man. I'll look into it.
Unfortunately, I don't really have many friends. Recovering alcoholic honestly trying to just get my life back on track. I am hopeful this might be the jump start i need.
Any resources you can recommend that do?
&gt; his work Not his work. OP's work. &gt; ... have put a lot of effort into things. To me it is "security first". And me entering unencrypted Active Directory credentials into a potentially publicly readable Javascript file is something that - sorry - simply won't happen. &gt; *cancerous Thanks a lot for fixing my absolutely obvious typo.
Those are two completely different things. `map.set( 'foo', null )` doesn't _remove_ `foo` from the map, there is still a `foo` entry with `null` for the value. `map.delete( 'foo' )` _deletes_ `foo` from the map completely. Try this sequence of commands in the JavaScript console and observe what it prints after each command. const map = new Map map map.set( 'foo', 'bar' ) map map.set( 'foo', null ) map map.delete( 'foo' ) map 
&gt; &gt; Not his work. OP's work. &gt; &gt; It IS op's work. OP is dthreeds. I answered to skywardblue. Who is "his" for you now? &gt; Someone has to wipe your ass for you. That's how people like you are. Yeah, whatever dude.
It really depends on what you're doing. Probably the biggest difference is that with the `null` approach, you can't use `Map.prototype.has(key)`.
Yeah, but that's purely academic in this instance. 
My test has been always to see if it works on Chrome v24. If it works, it will work for Google bot. I've got that the precision of syntax errors.
It is specific to v16. Repro would be a simple `ReactDOM.render(&lt;div&gt;Hello, World&lt;/div&gt;, [..])` and then just try to render the page using Fetch as Google (see https://medium.com/@gajus/react-application-seen-as-a-blank-page-via-fetch-as-google-afb11dff8562). As to why I have not created an issue, to quote my original message (07/12/2017): &gt; Didn't post on social media/ public as it would cause unnecessary FUD, esp. if unconfirmed by Google
web assembly = future
Just quickly looking at it and you seem to be using arrow functions but you aren’t transpiling down to ES5? 
I am myself a coding bootcamp graduate and wrote a little article about my experience, I think it is a great complement to whatever skills you might already have. Here is the article: https://medium.com/le-wagon/coding-bootcamps-just-go-for-it-feede66b6698?source=linkShare-520d44af6daf-1501140344
谢谢分享👍
Look into the module pattern. https://stackoverflow.com/questions/881515/how-do-i-declare-a-namespace-in-javascript Skip over to Divyanshu Rawat's answer, I think it's a great explanation. 
This is a solution that depends on a library (jQuery) and it wouldn't work if the click is on an element that stops the bubbling of the event up to the document or if one of its ancestors does that. A better solution would be to attach the click handler on the document in the capture phase so that we make sure it executes on any click. document.addEventListener('click', function() { document.querySelector('.open').classList.remove('open'); }, true);
Do you have any source for that? 
[itshappening.gif](https://media.giphy.com/media/5mBE2MiMVFITS/giphy.gif)
Both of them(Angular and React) are commonly used. React Native is successfully used for creation of native web applications , while using standard platform components like Drawer for Android and UITabBar for iOS. And Angular JS is used for creation of web applications that consist of one HTML page with CSS іn JavaScript. I recommend to read this article to figure it out: https://erminesoft.com/what-are-the-pros-and-cons-of-angularjs-vs-reactjs/
Don't know, let's see :)
Both of them are commonly used. React Native is successfully used for creation of native web applications , while using standard platform components like Drawer for Android and UITabBar for iOS. And Angular JS is used for creation of web applications that consist of one HTML page with CSS іn JavaScript. I recommend to read this article to figure it out: https://erminesoft.com/what-are-the-pros-and-cons-of-angularjs-vs-reactjs/
`null` is a valid value and also a valid key. Anything can be put into maps. let map = new Map(); map.set(1, 11); map.set(2, null); map.set(null, 33); console.log(map.keys()); // MapIterator {1, 2, null} console.log(map.values()); // MapIterator {11, null, 33}
I agree, looking forward to pattern matching. Will be a great way to deal with all that unstructured data we get in JS or from api's. No more manual safety checking if it quacks like a duck and walks like a duck. And that's just a simple use case, the more advanced functional oriented uses of pattern matching aside. Observables are pretty cool to be implemented in the long run so that we can reduce our reliance on external libraries. But for now RxJS is sufficient.
This is definitely another valid approach. I considered it but went back to the conventional route for a number of reasons, among which: * Dealing with Node upfront (installation, asynchronicity, modules, etc) might be overwhelming for a complete beginner. * It's not easy to handle user input in Node. * Many people are drawn to JS for front-end dev and won't touch Node until some time. Out of curiosity, did your students had any prior programming experience ?
You still have to acknowledge the benefit of the immediate abstraction/design I gain by just using the library the way I did. The code is much easier to comprehend than what you've written here. It saves me an hour or so; the API makes my code more simple to understand and implement what I want; it's tested so I know it works... I have no regrets.
Completely agree that RxJs has got us covered for now. The main one I'm hoping for is if they combine the proposed symbol.observable with async iteration which would allow us to use async and await. For some situations (though definitely not all), this would have greatly improve the readability of code.
Dan Abramov on Twitter said that Fiber-beta doesn't focus on performance, rather backwards compatibility. There shouldn't be any changes but in one of the next passes (16.x) they will allow you to opt into async rendering, that is the part that will make a difference.
Bought with extras. Thanks!
Gajus just curious-did you include the Map/Set polyfills when you tried that?
Have you checked out [Sinon](http://sinonjs.org/) ?
this article is very poorly written - formatting - almost no content (react docs give better information in a more lucid way) - terrible errors (in react you use single pair of brackets to embed a variable)
With things like [webgl2 coming out](https://webgl2fundamentals.org/webgl/lessons/webgl2-whats-new.html) and [expogl, which wraps your webgl code into fast opengl calls](https://github.com/expo/expo-three), i think the future is pretty bright for javascript as a driver for games in general on the web, mobile and desktop. Web-asm is also a nice addition for cpu heavy computing tasks. 
Both of them are commonly used. React Native is successfully used for creation of native web applications , while using standard platform components like Drawer for Android and UITabBar for iOS. And Angular JS is used for creation of web applications that consist of one HTML page with CSS іn JavaScript. I recommend to read this article to figure it out: https://erminesoft.com/what-are-the-pros-and-cons-of-angularjs-vs-reactjs/
&gt; Skip over to Divyanshu Rawat's answer You can link directly to answers using the share link at the bottom of them, https://stackoverflow.com/a/41962097 in this case. If you are logged in the link generated will include your user ID. If that is a problem for you then open the page in an incognito/private/similar window and use the share links from there.
While it's not an issue in this example, I think it's worth at least mentioning because OP will one day get burned by not understanding the difference and maybe they'll remember that one time on Reddit that someone mentioned they were slightly different. 
Think it's worth mentioning that this isn't a new idea and there are plenty of packages out there that *are* production ready: * https://npm.im/choo * https://npm.im/yo-yo * https://npm.im/bel * https://npm.im/hyperx 
I was using https://polyfill.io/v2/ when testing this, i.e. yes.
Of course I have, but that doesn't allow you to stub ES6 modules. First off, you need to stub only the getter (since it only exports getters), and then the getter is readonly, so you still can't stub it..
Trying the latest technology preview, and it's not supported well yet. 
Don't give up... In the test file, import the file containing the function you want to stub (use * as blah) to capture the whole file. Then use sinon.stub(blah, 'functionName') to stub it. Also look at using sandbox and restore in afterEach so you don't break your other tests.
Moment.js
What is the difference between eloquentjavascript and this one? 
I did all of that. I'll post the whole thing and the output. (It doesn't actually throw errors, it just doesn't do anything at all). OK so I imported the file with the function I want to stub: ``` import * as utils from '../../src/js/utils'; ``` Then, I used sinon to stub the the method that will get called later: ``` sinon.stub(utils, 'add').callsFake((a,b) =&gt; a*b); ``` What this does is replace the `add` function with something that actually multiplies, hence it should fail the test: ``` expect(otherThing.add(1,2)).to.equal(3); ``` The `otherThing` looks like: import * as utils from './utils'; export function add(a,b) { return a + b; } With all of that in place, stubbing actually does.. nothing. The test passes just fine without any error. The point is that here, **the test should fail**.
Ugh, you're right.
If and only if that is your only issue with the JSON, then this function might work. You'll need to repeatedly push the string through it until the returned object's "ok" is true, but for a trivial test case it seems to work: function fix(a){ try{ JSON.parse(a); return {ok:true,val:a}; }catch(e){ let pos=parseInt(e.message.match("[0-9]+")[0]); return {ok:false,val:a.slice(0,pos-1)+'\\\"'+a.slice(pos,a.length)}; } };
There are a number of cases where you would not want arrow functions - basically anywhere that the 'this' context is suppose to be dynamic e.g. * defining methods on Object literals * adding methods to obj.prototype * Class definitions * callbacks that use 'this' as a target Even if that is not the case in your examples, it could be misleading
Cheers for the contentful link, had never heard of them.... another api to add to my ToUse list.......... 
Can you show me the whole test file?
Thanks for the hint!
If your browser didn't complain about the certificate, that implies that your company have a proxy that is signing certificates for every site you visit and your company run machine is set to trust their local CA. This will include sites that already use a secure channel: the proxy will decrypt and re-encrypt using its own certificate. Not an issue if they are honest about it, in some industries certain regulations pretty much require that all communications are monitored which requires that they do this: you can't inspect without decrypting, you can't MitM to do so (at least without client-side warnings or in some cases errors) without resigning using a certificate the client machine is set to trust. You can't fault them for trying to follow law/regulations, but don't assume that *anything* you send to a site "protected" by HTTPS is truly private.
With a well designed PWA (on android, no intel about iOS), Chrome will automatically ask you if you want to put the app on the home screen. https://developers.google.com/web/updates/2015/12/getting-started-pwa#add_to_home_screen_banner
I can only speak to Chart.js, but I'm a big fan. It's very straightforward to get a basic chart with some data up and running, and after some poking through the docs you can customize it really any way you want.
We use Amcharts at work. It works pretty good. 
Only an issue if OP wants to support IE and old safari, which is probably out of the scope of this project 
It tends to be much less boring if you use it on a project as you learn it. A lot of people learn in that manner ... start on a project then backfill in knowledge as they need it. 
I recommend Highcharts. It has had a legacy feel since it has been around for a long time, but they have been moving fast lately getting up to speed. Here's a blog post from last week regarding their React support: https://www.highcharts.com/blog/post/highcharts-abstraction-react-components-react-jsx-highcharts/ I also dig that they are a small company with people from all over the world just doing their thing from their HQ in a [small village in Norway](https://static1.squarespace.com/static/52fe09d1e4b0d3e64dc360c7/t/53030749e4b06573bf2dca95/1392707405375/Vik3_mini.jpg?format=2500w).
It looks something like this: https://jsfiddle.net/1bz0qLom/
Thank you, works nice! var selectedStartTime = timepickerStart.val(); var minimumStartTime = moment(selectedStartTime, ["h:mm"]).add(15, 'minutes').format('hh:mm');
Hmm it does seem right. Could you upload the whole thing to GitHub? I can take a look tomorrow (it's time to sleep) and see if I can help identify the problem.
Yes. We do get firewall pop-ups from time to time asking for our userid and pass. Very annoying
Still, [return types](https://twitter.com/threepointone/status/810058843325546496?lang=en), [error boundaries](https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html), portals and all the other stuff. So much stuff to play with until then. : ]
Other approaches to take are... Use Jest test framework, it is built for mocking by default. Use proxyquire to import your files. It allows you to specify overrides of the particular paths. It is a bit tricky with ES6 style code, but still doable. Basically you may need to do a .default to the file you just proxyquired so that you can the default function back.
Moment is switching the order of the arguments for .add(), you may want to switch them as it's already deprecated 
ok so I read what you say, and honestly do get you on both counts. just one question (I'll try it out here when I'm done but still going to ask :-) ). I've actually looked into the visibility of properties/methods in JS and really wasnt getting anywhere. So in this case even in a class, how can I implement such a private property that would be modified by a method? a closure perhaps?
Jest no longer auto mocks by default, it was too confusing for many users. I use it's manual mocks to mock entire es6 modules, it's great.
It's because of what "this" refers to. If you change it to: var obj={x:10,getx:()=&gt;{console.log(this);return this.x}}; you'll see that "this" is "window" aka the outer scope.
Why is this the window. Isn't the scope the function test? 
`this` in the arrow function refers to whatever value `this` had in the enclosing scope of the outer function. That function was invoked as `test()`, so its `this` is the global object, and therefore that's also the `this` of the arrow function. 
&gt; Is there any way that I can hide or scramble the file name, without manually renaming each file? Well, you can write some script to rename the files.
Maybe rename the file using an hash of the bird name ?
Why do you like it? What's the upside?
What machinations (if any) would be necessary to make *this* work as the OP intended?
You could draw the image to a `canvas` instead of displaying the image element. Or, you could use a put multiple birds in one image, and have your function return `background-image` coordinates, like a sprite.
Sorry to hear that, but be assured that you're taking a step in the right direction. Keep pressing forward.
I'm not fully up to snuff on the new changes, but I thought the arrow notation *replaced* the function notation. This is the first I've heard that it doesn't work in *exactly* the same way that function does, which would mean it is not a replacement, just a further complication and place for confusion. 
To return 7? Just use a simple closure, no `this`.
The code the OP wrote seems like traditional tutorial stuff to try and explain *this*, because, for many, including me, the concept of this is one of the more complicated ideas to understand. The fact that the =&gt; is not an identical replacement for function() makes it even more complicated
Nope, there's some nuance there. I deleted my above post because I was wrong, using function(){} returns 10, since that is bound through the scope of `obj`. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
thanks again! that's very informative.
thanks again! that's very informative.
See, that's what bugs me about javascript, we're introducing something new that replaces function, but not really, because it functions slightly different than function which people have been comfortable using for over a decade. Sometimes fixed structure is a good thing
thanks again! that's very informative.
I noticed that, and this should be correct? you are confusing me :) moment().add('seconds', 1); // Deprecated in 2.8.0 moment().add(1, 'seconds'); Before version 2.8.0, the moment#add(String, Number) syntax was also supported. It has been deprecated in favor of moment#add(Number, String). https://momentjs.com/docs/#/manipulating/add/
thanks again! that's very informative, especially describing the difference between a JSON and js object.
I don't know what you're expecting here. The `x` that holds 7 is not a property of any object so there's nothing you can write in the form of `&lt;something&gt;.x` that would evaluate to 7. If your goal is to refer to a variable in the enclosing scope, you use closure (hence the name), not `this`. 
Honestly, the idea of closure and function scope is one of the most confusing parts of javascript (this post illustrates that confusion!) While they aren't the same implementation, using arrow functions and `let` vs `var` take away most of the nuance that trips up beginners to the language. People that want to continue to use `var` and `function() {}` can, but `let` and `() =&gt; {}` are honestly a bit more straightforward to grok for beginners.
Oh, yes you're right I mixed up which was the new way... I guess the number first still looks weird to me haha
*The Linux Command Line* is the sixth best *JavaScript* book. Interesting.
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
I'd be careful with that. We're currently in the middle of upgrading a very large application that used a homegrown namespacing system. It was using an older grunt based simple concat/minification build pipeline where everything had to be put in the right order etc. Taking this system and moving it to webpack and `import`/`require` statements has been beyond tedious. It's probably best today not to worry about namespacing at all and use `import` and `export`. Then use Babel and something like webpack to stitch the final output together for the browser. 
thanks again! very informative, especially the difference between a JSON and js object. 
electron. 
I like the extra security. If an app is downloaded from anywhere other than the App Store, macOS requires that you right click and open the app the first time. There is no way to circumvent this by an application, so that means any application that gets run has to be explicitly signed off by me before it is run for the first time. This alone doesn't keep the system secure of course, but it's an extra step that doesn't hurt me (it takes a whole one second longer to open the app) and helps OS security in an admittedly small but still real way. 
Author here, so obviously biased, but anyway: * Eloquent JavaScript goes deeper about some topics, but it's not the easiest book to follow along. * The JS Way is designed to be more beginner-friendly and uses the latest language features. EJ uses an older syntax. Both books are free to read online, so you can make your own opinion :)
dam people hating out here lmao
Maybe due to node.js and npm?
It seems like you're saying that a js dev wouldn't benefit from becoming proficient with the command line? I'd love to hear more :) Or perhaps the submission is poorly titled and should read "The best books for JavaScript developers." Personally, I think it's important for js devs to understand some server fundamentals. After all, node and build tools live on the command line, and basic commands like grep are indispensable. Whenever I mentor fledgling devs I encourage them to learn the command line, it's a skill that will be useful your entire career. edit: the site is also user-driven, so if people start upvoting other books then the linux ones will sink.
This is a bit of a convoluted example. It helps to break things down. var x = 5; Assuming we're not in some other, wrapping scope, this creates a global variable named `x` with the value of 5. For browsers this is defined in the `window` object. In this scope we can also refer to `window` as `this` since in the global context, `this` represents the global object (`window`) console.log(x) //-&gt; 5 console.log(window.x) //-&gt; 5 console.log(this.x) //-&gt; 5 function test(){ // ... } This creates a global function called `test`. When it is called as it is currently defined (or even if calling from some other reference to global such as `this` in the current scope or `window`), it will be called with a _context_ of - meaning the value of `this` in the function body will be - the global object, or `window` (or `undefined` in strict mode). This is the standard behavior for any functions called directly by name if not referenced from another object, as is the case below the `test` definition. test(); This function, without being referenced from another object, would be called with a context (`this`) of the global `window` object. In the case where it was referenced from an object, that object is used instead this.test() // context is `this` (which is `window`) window.test() // context is `window` For the case of `test`, its the same either way. Inside `test`, there's more going on... var x = 7; This creates a local variable named `x` in the local scope of the function (not to be confused with context; `x` is not defined in the current value of `this`). Function scopes are unique to function calls. Each time `test` is called, a new `x` is made in the new scope created for that call. Because `x` here shares a name with `x` in the global scope, when referenced by name, this `x` will have precedence and be used in place of the global value - or any other `x`-named variable that may have existed in a higher scope. In the first `x`'s case, because its global, we can access it through the a global object reference, but this is generally not possible for other, non-global higher scopes. Those variables would have been _shadowed_ by this, inner-scoped variable and would be completely inaccessible. Within `test`: console.log(x) //-&gt; 7 console.log(window.x) // 5 console.log(this.x) //-&gt; 5 Remember, `test` gets called with a context of global, so `this` in the `test` body is the global object. var obj={x:10,getx:()=&gt; this.x}; This definition creates an `obj` variable which contains a JavaScript object from an object literal defined within `{` and `}`. Note that though object literals use a syntax resembling block scope, they do not create a block scope as part of their definition. This may seem obvious at first, but it can be easy to look at code, see brackets, and think different scope. For `obj`, there are two properties, `x` which equals 10, and a `getx` which references an arrow function that returns `this.x`. Arrow functions are fairly new to JavaScript and have different rules for how they treat `this` compared to normal functions. Normal functions determine their context from how their called. Arrow functions use the `this` from the surrounding context of where they were defined. This means that for `getx`, the value of `this` inside the function body when called is the `this` of the current block of code, or more specifically, the `test` function. We know this already to be global, which has an `x` property with a value of 5. Even though its defined in an object literal block, that block does not dictate context for definitions within it. While its true a normal arrow function defined in the same manner would reference the `obj` object when called, it would only do this because at the time it gets called, it would have been referenced from the `obj` object, and it would be at that time (not when it was defined) that `this` would be set for the function. return obj.getx(); Calling and returning `getx`, the arrow function defined in a function with a global context - so it, itself gets called in the global context , ignoring the `obj` reference used to the get to the function (which normal functions would instead use) - returns 5 since `this.x` in the arrow function is effectively `window.x`. We can consider other variations: var obj={x:10,getx:()=&gt; x}; console.log(obj.getx()) //-&gt; 7 var obj={x:10,getx: function (){ return x } }; console.log(obj.getx()) //-&gt; 7 var obj={x:10,getx:()=&gt; window.x}; console.log(obj.getx()) //-&gt; 5 var obj={x:10,getx: function (){ return window.x } }; console.log(obj.getx()) //-&gt; 5 var obj={x:10,getx: function (){ return this.x } }; console.log(obj.getx()) //-&gt; 10 var getx = obj.getx; console.log(getx()) //-&gt; 5 Without being prefixed, each direct `x` reference pulls from the current scope. A `window.x`naturally pulls the value of `x` from global in either case. But once you change how the function is defined, `this.x` changes. Originally, with the arrow function, the global value was picked up since the context in `test` was global, but with a normal function, `this` is dynamically determined at the time of the function call looking to see what object was referenced to call the function. This lets 10 to be referenced from `obj` when calling `obj.getx()` but we're back to `window` again once we save that function to its own variable and call it without an object prefix.
I've added this to my curriculum of you don't know JS, udemy courses, freebootcamp &amp; the modern js tutorial. In my short time studying this topic I've learned that immersion and active practice is key alongside my readings. This will be a perfect addition. Thank you very much.
Hi /u/DinterRM, we don't do requests here. If you're trying to learn JS and are stuck on something specific, we're more than happy to help. 
Hi /u/angular_evan, please use the "Submit a new link" option and add any additional info as a comment. Thank you!
Hi /u/nguer092, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I wish it would be possible to submit books that are not published on Amazon. I guess that's the business idea behind the page. However, it could be still a great feature addition to make it a platform for every book.
I agree! That's on my product roadmap. There are a lot of great resources out there.
This may be a little specific for /r/javascript, but we encountered issues with our webpack-ified bundle being over 11 MB, causing slow initial load times. Angular 2+ supports dynamic module loading, which allows for the bundle to be logically split at those points. I got the chance to dig into Angular's source code and recreate that functionality in Angular 1.x. Check it out and let me know what you think!
This. Since there is a standard, follow it because of future compatibility issues.
Fair enough.
It also wont render if there is any asynchronous code/ajax calls.
Low quality article tbh
Nevertheless, great idea : )
I can't decide on which side of this I fall. 
Check out: http://www.thedigitalgarage.io/#/ it's a PaaS that's priced by monthly subscription as low as 5 bucks, but there's a trial for free. It's new, but here's the documentation: http://docs.thedigitalgarage.io/
Relevant xkcd: https://xkcd.com/927/
[Image](https://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 4703 times, representing 2.8629% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dksohw0)
Not for nothing, but you can bring in simple parts of jQuery can you not? You are not required to load the whole library in my understanding (Please, jquery haters, save your pointless attacks?)
I need this feature for a React project, and thus I'd rather not mix the two.
Ok, just curious...thanks
First common mistake is not using semi colons.... well yes if you weird code 
did you start from no programming knowledge and dive into node and then react? I'm teaching a few people and am taking them through important HTML/CSS concepts first
So: 1. You joined a community. 2. That community describes itself as diverse. 3. That community has certain communication preferences or protocols based on that diversity and the idea of making everyone comfortable. 4. That community has enough experience with explaining these policies to people that they've automated the process. 5. You don't "get" what/why they're doing. 6. You screenshot it. 7. You tweet it. 8. You post it on Reddit. 9. 6-8 are because you feel put out in some way. Is that about right? #9 is where I'm a bit muddy.
No I started with an HTML/CSS background.
Where did you get 5 or 9 from?
If the first thing you get after presenting yourself is a correction, that is seen as rude by many people.
I was guessing at his motivations, because I'm not sure I understand them.
Who the fuck says "yinz" unironically? Personally if that was the first interaction with a community I was attempting to take part in, I'd have my answer right there: "Nope, gonna go find a different one. Bye Felicia!"
1. They joined a community. 2. That community thinks of itself as morally superior. 3. That community enforces certain communication preferences or protocols based on that morality and the goal of making the most offended confortable at the expense of common interaction. 4. That community spends so much time on these distractions that they've automated the process. 5. They think this anal policing is so sophisticated ordinary people don't understand it. 6. People screenshot it. 7. They share it to make fun of it. 8. It gets shared on Reddit too. 9. Because this stuff is endemic and the silent majority is tired of it. 
I have strong opinions about it, but I suspect that even if I don't expose them (I won't) this will turn into a flame war pretty soon.
They don't like type declaration.
I err on the side of not picking anything I can find to get offended at when thinking of communities I'd like to be apart of. I don't care if it is insensitive or not to say "guys" (I don't think it is either), that's debatable. What isn't is how rude the response was. That's really not up for argument. It's not just rude, the tenor of those responses is detrimental to the very acceptance they're seemingly holding up on a pedestal. They're shooting their argument in the foot. "We are allowed to belittle in these very specific ways, you're not allowed to even accidentally belittle". It's a toxic mindset.
Automated notifications of the "rules" of a forum/chat room/channel/etc are almost as old as the internet. It happens on reddit just as it does everywhere ("Check the sidebar/FAQ", "did you even search the post archive?", "LMGTFY", etc). If that's rudeness worthy of a screenshot/tweet/reddit post, then I guess my rudeness tolerance might be too high.
&gt; guys in British &gt; (ˈɡaɪz), &gt; plural noun, &gt; informal. &gt; Persons of **either sex** Taken from [Collins Dictionary](https://www.collinsdictionary.com/dictionary/english/guys). Seeking to end genuine sexism or other discrimination? Excellent, please continue. Seeking to be offended by inferring alternative meanings from common phrases and modes of addressing a group of people? Fuck off.
I contest the validity of #2, #3 (premised on #2), #4, #5.
This wasn't an automated response. It was a canned response that someone invoked
&gt; Automated notifications of the "rules" of a forum/chat room/channel/etc are almost as old as the internet That doesn't make it less rude &gt; LMGTFY That's rude as well. E.g. Stack Overflow has a ban on LMGTFY links. &gt; If that's rudeness worthy of a screenshot/tweet/reddit post, then I guess my rudeness tolerance might be too high. Might be, different people have different tolerance levels.
Thats a great idea as well! I'll definitely have to consider that approach for the next project.
have you tried https://github.com/speedskater/babel-plugin-rewire ? 
Yep, this is what I used to use before. But it seems that at some point they (Babel, We pack, whoever..) changed the way they export modules and now follow the ES6 spec where the modules are exported as read-only getters. 
HR13
I can see if I can make a test case available on GitLab tonight, otherwise tomorrow.
Would proxyquire require me to change the current code or can I adapt my tests to use it? Jest is very interesting option that I want to explore in the future, but currently I do not want to switch test runners.
If you don't uphold the morality you impose to your visitors on a higher ground than the rest probable beliefs then there wouldn't be a need to force them to everyone who joins the room, simply because all moral beliefs are equally valid and there's no need to make it a big deal. 
This remind me this issue : https://github.com/traverson/traverson/issues/95#issuecomment-296162337 Is this going to be a new fashion ?
That's nice dear, but you're supposed to offer a counter-argument rather than just stomp your feet. Nobody who's been around the block is impressed by this adolescent posturing. They know that if everyone stopped using "guys", the complaints wouldn't stop, there would just be a new goal post to run to, to maintain that privileged position of being able to tell others what to do. In a different time and place, they'd be telling you not to take Jesus' name in vain or that displays of immodesty are offensive.
I think that's being a bit pedantic; I meant automated in the sense of a macro.
This is a very good point. I agree totally.
Soon: https://github.com/tc39/proposal-flatMap
&gt; you're supposed to offer a counter-argument rather than just stomp your feet "Your premises, and therefore any conclusions, are invalid." is a counter argument. I'm not sure where you're getting foot stomping from. With regards to your second paragraph, they're entirely entitled to tell you not to take a name in vain or be immodest. This is an already established community that someone wanted to join, and then instantly complained about the way that community governs itself. If anything in this whole thing is adolescent posturing, it's that.
wtf is YINZ fuuuuck that slack
Sometimes we just can't know things. No sense in making a wild guess then--but I think it's safe to speculate that he thought it was funny / dumb, so he wanted to share it, not that he didn't understand. After reading the rest of the comments is it helping to potentially understand possible points of view?
The term "[assholes](https://github.com/traverson/traverson/commit/b129d32dc2622df224fcda5e6ae5612f53156fa4)" is a defecatist insult against people who have had their colons relocated due to cancer. I can't believe that someone who would hold gender pronouns with such esteem would insult a whole group of **cancer patients** in his revenge commit to remove the name of a bug reporter from his changelog. 
You're offended at an automated response making a legitimate point that there are better ways to address a group of diverse people. Your first reaction to *a computer* suggesting a very simple change in your behavior is to get snarky and run to Reddit to complain? You're a guest in someone else's community. If they've decided on some rules of conduct (which they "enforce" with a simple reminder from *a computer*) and you don't like those rules, move on with your life. There are far more communities that will have you, and there are other talented developers who are willing to adapt to this specific community's rules. It's not outrageous for someone to say "there are people in this community who you wouldn't call 'guy,' and who would prefer that you refer to them as something else." It costs you nothing to just change one word in your vocabulary to make other people feel more welcomed.
This could have been avoided if he had just addressed the group as 'ladies'. 
No one would care. Go ahead, that's why the reminder is there. 
(I know it's not listed) but I prefer c3.js. It's a wrapper of d3 specifically geared for charts. It's easy to use and more robust than charts.js.
You're in, no zebras.
&gt; (colloquial) Persons, irrespective of their genders. https://en.m.wiktionary.org/wiki/guys
What do these communities actually "do"? Like, is it socializing to discuss code? or paradigms? or technique? Or is javascript coding a fad to these folk? 
I do typically have them run through some JS stuff on CodeAcademy or plunker or something like that to get the feel for it before the setup process. I just try and avoid introducing the DOM and things like that until they have some experience writing logic. I also try and introduce CRUD before front end JS, since you mostly need that concept to unlock front-end potential, but that depends on the student's experience if I do ajax style SPA or just a straight html web server.
Wow, what a guy. If his threshold for uninclusive speech lies at "hello guys", and he can't help himself from arguing with anyone who uses it, he's probably something really special.
There's a big difference. If you tripwire a bad-word bot, it's just a bit of impersonal noise that may or may not be related to the particular situation. It's on a par with a sign on the lawn. If someone fires a bot *at* you, it's someone who proceesed and reacted to that particular situation, *and*, for extra points, was obnoxiously lazy enough to splat off a form reply instead of interacting like a human talking to humans. We expect bots to be reactive and antisocial. They're usually just a dumb trigger=reply mechanism. We expect humans to have a bit more nuance and eloquence. 
&gt; That community describes itself as diverse They're not diverse. A diverse group would know how to handle common human greetings without being a fucking asshole. 
A WeakMap is a pretty good idea if you're concerned about garbage collection. The normal Map implementation is a potential memory leak issue because it keeps references to key objects that prevent them from being marked for deallocation when they go out of scope. A WeakMap uses weak pointers instead, which allows the GC to sweep like it normally would. I don't know what this code is supposed to demonstrate. "Read-only" refers to the mutability of an object or it's properties. WeakMap.prototype.get won't modify the collection but that's not the issue. The problem here is that function invocations are rhs. The container and it's entry are writable, this just isn't valid JavaScript. 
I think they banned lmgtfy because linking to a source, or even worse a source that links to a source which links to dynamic sources, is frowned upon since the link may die one day and you should explain the fix rather than link to a tutorial. 
I'm guessing no one knows? 
exactly.
[whelp](https://media.giphy.com/media/fDO2Nk0ImzvvW/giphy.gif)
You are getting absolutely destroyed in this thread and it's kind of fun to watch lol. Fail.
I wouldn't join, but I would join a community that accepts and encourages offensiveness.
Types and Grammar is hotly debated by some higher Javascript Devs. I'd say Secrets of the Javascript Ninja is one of the better books on this list 
You can read on the meta site about their decision. It was a mixture of what you just said and the fact that is bad etiquette.
"That's their culture" doesn't preclude "Their culture is silly". Yes, it'd be a bit out of bounds to keep poking at them from the inside, especially if it's not a rare community (i.e., there are other similar places to get your fix), but to come out of the room-fulla'-silly, point back, and say "Check out how silly this place is", that's just reportage.
It's a skill share.
Pittsburgh slang for "you all"
we use `proxyquire`: import proxyquire from 'proxyquire'; const module = proxyquire('./some-module', { './another-module': { __esModule: true, default: 'the default export in the module', foo: 'a named export in the module', }, }); const defaultExport = module.default; const namedExport = module.namedExport;
People who've lived in Pittsburgh a long time Source: Lived in pittsburgh for awhile, it is not uncommon to hear "yinz"
&gt; Your premises, and therefore any conclusions, are invalid You need to state why the premises are invalid, though.
Yinz is a term from the Yinzer dialect around Pittsburgh. No idea what its doing on this list though. [Here](https://en.wikipedia.org/wiki/Western_Pennsylvania_English)
**Western Pennsylvania English** Western Pennsylvania English, known more narrowly as Pittsburgh English or popularly by outsiders as Pittsburghese, is a dialect of American English native primarily to the western half of Pennsylvania, centered on the city of Pittsburgh, but potentially appearing as far north as Erie County, as far east as metropolitan State College, as far west as metropolitan Youngstown (Ohio), and as far south as micropolitan Clarksburg (West Virginia). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/javascript/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
In my googling I found that indeed, that's the only region where you'd ever hear it. It's just strange that such a relatively tiny place for the slang to have eeked into the internet at large.
`?yinz`
&gt; Your first reaction to a computer suggesting a very simple change It wasn't a computer. The canned response was activated by another user, the one that replied “?guys”.
Good bot.
This is fine actually
This guy
Sup bitches
My bad, I figured it was implicit that the points I referenced were very obviously conjecture. And if I have to offer proof of invalidity, he needs to do the same for validity.
I never said they were diverse, or made any assertions on their diversity. That's all you.
Ah yes, time for the /r/javascript weekly post decrying political correctness that has essentially nothing to do with JS
Yea you could traverse the html table using Dom for each row and get the amount in the price column
reminds me of the [arch linux mirror](https://www.reddit.com/r/linux/comments/6pepav/someone_got_offended_by_a_hostname_of_an/) thing from a few days ago, people get offended so easily now...
&gt; My bad, I figured it was implicit that the points I referenced were very obviously conjecture Do you know what happens when you assume? &gt; And if I have to offer proof of invalidity, he needs to do the same for validity. This is the [burden of proof fallacy](https://yourlogicalfallacyis.com/burden-of-proof).
Will take a look at that
I think that one is called wealljs. People ask questions about their code, find mentors , post articles , etc. 
The main points of view I see are: * that rule is dumb/pointless/ineffective/counterproductive * that response was rude Both of which are kind of irrelevant, because if you hold those points of view then you're probably not a good fit for this community. Which is fine. Not everyone has to agree on anything, but to dwell on it by tweeting/posting to reddit rather than just moving along and finding a community that you do jive with is just kind of weird.
I never said you said they were diverse. How many more terrible posts do you plan on making here today? 
&gt;&lt;my_github_account_username&gt;@gmail.com
Fair point; we're both asses. I apologize. As far as the burden of proof fallacy, the page you linked says: &gt; The burden of proof lies with someone who is making a claim, and is not upon anyone else to disprove. He was the one making claims, I was simply calling their validity into question, so by your link I'd say the burden of proof is on him: "That community thinks of itself as morally superior." "That community spends so much time on these distractions that they've automated the process." "They think this anal policing is so sophisticated ordinary people don't understand it."
Best by 3 total votes? Not sure if is a statistically relevant majority :)
Ok, I can play this game: I never said that you said that I said they were diverse. My point was that you're making assertions with no real basis for them. You don't know whether they're diverse, aside from your arbitrary metric of "knowing how to handle common human greetings".
Okay, so the answer to my question was, "A whole shitload man. I got nothing better to do today than make terrible, disingenuous posts." Good to know. 
They have the right to request he not use a word, he has the right to call them out on Reddit, some other user has the right to disagree with this post and every Reddit user has the right to down vote it all to oblivion. The net result? Someone looking for help to acquire life changing skills gets their enthusiasm checked a little by a slack bot. Boooooo all the way around.
Functional Programming in JavaScript is there, and its one of the best books of its kind. &lt;3
Right, but why does this community owe some random person this explanation? Why does it owe every person who walks through their doors a hand-crafted explanation?
&gt; He was the one making claims You were the one who started this thread with your claims.
Correct. I tested this is the latest versions of Chrome, FF, and Safari. It all works fine.
Also, he removed the guy's report in the last commit. Seriously? You don't like the person then you decide to erase his contributions?
Right, but burden of proof fallacy doesn't only apply to the first claim made. The burden of proof is definitely on me for my initial claims. However, if someone makes claims in a response to that, or as in this case, further in the conversation, they still own the burden of proof for those claims.
Saw this question and logged in just to answer. Anyways I have used all of them and I would suggest `Canvas.js` for sure mainly because it's fast and perfomant and has a great API. &gt; I need to generate charts and then save each chart to png/svg/jpg Well since Canvas.js uses HTML 5 canvas you can easily just select the canvas element inside and do `canvas.toDataURL("image/jpeg")` . Also for canvas to svg http://code.google.com/p/canvas-svg 
What is wrong exactly. $(this).animate({'opacity': '1'}, 1500); should be $(elements[i]).animate({'opacity': '1'}, 1500); The scrolling variables; I don't usually use outerHeight (I could be wrong I usually don't do scroll events like this on the window) and IIRC I used clientHeight. I [think this](https://stackoverflow.com/a/487124) is more inline what you are looking for.
yeah there is a way I suggest you watch a video from dev tips It is called parralax on the web. it is plain vanilla so no probleme with react. i am on my phone right now but I will comment the link asap
How is this TemplateResult different from a virtual DOM?
Custom iterators are definitely useful for libraries like Immutable.js. It allows these custom data structures to operate correctly in typical JS operations. const Immutable = require('immutable') const map = Immutable.Map({ key: "value" }) for (let [key, value] of map) { // do stuff } const entries = [...map] console.log(entries) // [["key","value"]] It's very similar to defining a `toString()`, `toJSON()`, `valueOf()`, or a number of other special methods on your objects. They provides a way for custom data structures to work nicer in the larger JS environment.
&gt;Maybe it just has to do with whether or not a client wants a dynamic vs static website? Certainly part of it. Another part is that there are a plethora of both front-end and back-end technological choices. Not everything is best served through node.
These kinds of people are a cancer on the software industry.
I recommend the Linux Phrasebook, small and very detailed information about many useful tools.
It's an absolute must for any engineer. If you're coding home projects and ftping to some host, maybe you can scrape by, otherwise I'm not sure how a front end developer can expect to write code, then wash their hands of it expecting the rest will be taken care of for them.
Well, then I also recommend *The Tipping Point* by Malcolm Gladwell. It's completely unrelated to development, but the perspective on the world that it offers will benefit any JavaScript developer.
If you're going to have a chatroom where people ostensibly talk to people, but the first person new people get introduced to is the automatic finger-wagging machine over some dubious faux pas, then you're going to get a reputation as a bunch of stick-up-asses with more rules than social skills. Cause and effect. I don't know that "owe" really comes into the picture. They don't *have* to have a welcoming or personable reputation. But actions dictate reputation, and so here we are and there's their reputation. 
You should be including your JS in your HTML, not the other way around. Take that reference to your 'index.html' out of 'index.js'
You're welcome to that perspective! The site doesn't allow you to submit non-programming books, though. The nice thing about sites that rely on votes is that, in general, good content rises to the top, and bad content sinks. If everyone else finds the idea of frontend devs learning to use the command line as offensive as you evidently do, then those recommendations will eventually sink. You're also welcome to start a discussion, on the site, for that book, on why you think JS devs would be wasting their time learning the command line. I'm still very curious about why you think it's a bad recommendation. So far you've used a vague implication and an exaggerated analogy; it would be nice to hear clearly stated reasons. And to address _The Tipping Point_, I do in fact often recommend non-programming books to programmers. It honestly baffles me that you would adopt a sarcastic tone in response something as innocent as "hey js dev, I think that learning the command line will help you."
So the node.js parts are going to be your API/calls. So your the route ``` app.get('/', (req, res) =&gt; { do code stuff }) ``` That's the "back end". So what you usually do is make an ajax request to those end points from the front end (react, angular or any other framework or just plain javascript) and then you display whatever the server gives you back
Actually, by building the test case I have found out how to do this and why this is a problem. I will update the post.
I never said that learning the command line was a waste of time. In fact, I think that learning Unix is extremely important and beneficial for any developer. My point was that the title says "The best JavaScript books."
Thanks for that clarification! I thought I addressed that in an earlier reply, but I'll say it again: perhaps the submission is poorly titled and should read "The best books for JavaScript developers." The idea is that these are books you would recommend to other js engineers. Unfortunately, it's too late for me to change the submission title.
Seconded, especially if what you're doing is not too difficult or intensive.
Of course! Thanks, man. Gonna go with the canvas route, I think.
That makes a lot of sense. I wasn't thinking of them in that sort of context, so looking at it in that perspective makes it pretty clear where they can be useful. And also they they aren't something you use just for the sake of using them. Thanks!
Yeah, but then I'd need to find a way to make my findMatch function work, if the file names don't include the answer anymore. I'm going to give jotted's suggestion of using canvas a go.
It's a little dated now but surprised Javascript for Web Developers by Nicholas Zakas isn't on there. https://www.amazon.com/dp/1118026691/ref=cm_sw_r_sms_awdb_gSJEzb6NZC36P
Anyone can submit books :)
I put it in another function according to what you said but it still doesn't work: var x = 5; function outertest(){ var x = 2; function test(){ var x = 7; var obj={x:10,getx:()=&gt; this.x}; return obj.getx(); } return test(); } outertest(); 
Depends where you work. There are still places where front-end developers are absolutely forbidden to touch a server. Ops is for that. However developing for the modern Web without being able to use the command line *on your development machine* would be crippling too.
The current public build can be viewed at http://showhaus.org I'm currently going through a redesign and would like to know what I could improve. You can view my current build [here](http://v2.showhaus.org) Please note this version is an extremely early development.
Yes I noticed that too. It was developed by that way by other developer. When I remove it from index.js the whole app is broken. I never saw such setup and don't event know why it is made like that.
I would love to pick up secrets of a js ninja I've heard great things. But I just can't bring myself to pick it up when it's actually a samurai on the cover, and not a ninja.
Thanks for the share.
Static content usually rendered server-side while user interactivity is managed on the front-end. So a review site would mostly be back-end, but when creating a single-page application for example, you'll be writing a lot more client-side JS. It is also possible to create fully front-end powered pages for which you don't need a back-end at all and the html is just statically served. It all depends on the requirements. 
I can't buy it as ninja is one of those idiotic terms that makes me stop reading job postings that use it
Thanks so much for your feedback, let me try to address each point. 1. Do you think a reset filter button is better, or going back into the list and selecting an empty option on top? 1. Great observation, I'll make sure to implement fa-info-circle instead. 1. /u/spagoop, see the above about the city selection menu. Maybe this can be different on desktop? 1. I'm aware of this situation, a fix is currently in development. 1. This is one of the things I'm having trouble with. The JSON returned is huge, dir-paginate is hitting performance issues because of the sort and filters. What would you figure is the best approach? [This is the json returned from my PHP script.](http://showhaus.org/assets/eventlist.php) This file is created every 15 minutes (cron) from the server, so theres no database hit from the client. This also means I can't filter the contents before returning to the client. I'm stuck as to whether this is a front-end or back-end issue. 
Don't use an anonymous function for getx, so this will refer to the obj: var x = 5; function test(){ var x = 7; var obj = { x:10, getx: function() { return this.x; } }; return obj.getx(); } console.log(test()); // logs 10
It depends on what you need. Often backends aren't required, other than for simple hosting, and not even that requires node (like surge.sh, zeit, etc.). Single page applications are very flexible and if you have a bundler like webpack around it can pull in chunks on demand (your articles for instance). Once that becomes messy or the moment you need to store data on a dedicated server node comes into play. But node will not "build" your page, you would most likely still use a SPA and host it somewhere, then fetch data from your node server via rest or whatever protocol suits you. 
Well, it's among JS devs so it's related, though tangentially.
It is important for this to be lexical scope when used as an anonymous arrow function. Otherwise, you would have to bind: setTimeout(() =&gt; { this.doSomething();}.bind(this), 1000); // this would always require brackets or preserve this: var self = this; setTimeout(() =&gt; self.doSomething(), 1000); // doesn't require brackets, but requires setup code 
Hmm... I wasn't thinking full on Linux guru... the book says "command line" so I was thinking more along the lines of at least a working knowledge of it. I'm not even a "Linux guy" myself but on occasion, it's helpful to have a working knowledge of it. It's a little uncomfortable to argue *against* developers having at least this level of knowledge. I would think at some point in your development career, people would have SOME need of it. 
how 'bout `scroll`, `resize`, `touchmove`,`drag`?
And if you want to get all the mouse events, you've to use onpointermove and PointerEvent.getCoalescedEvents, which isn't supported by Firefox yet. Meh.
the thing i'm most curious about is some more insight into what could possibly take up 11MB (gzipped?). i've written some pretty complex apps and they come nowhere near 10% of that. is it a case of each of the "sub-projects" inhaling many large dependencies each (possibly with a lot of redundancy).
[removed]
None of them made a statement claiming that they were offended, to assume such would be a baseless assumption. On top of that, if someone would prefer that you not use guys, even if they're rude, you should still respect their request to the best of your abilities. On top of that, you're using a dictionary definition to try and prove a point, but definitions are variable person to person with dictionaries just dictating popular personal definitions. To view dictionaries as definitive and final sources on the meanings of words is a prescriptivist and unbending way of viewing language. 
They didn't make such a claim, but only because a bot preempted a human response, the contents of which suggests that offence would have otherwise been taken. I'm all for respecting the views of others, but not at the expense of my own, or when a prospective member of a community is immediately shut down by a non-human response for the sake of political correctness. _Some_ definitions can be subjective, including _guy_, but choosing to contrive a pejorative context from a non-offensive utilisation of a word is perhaps proof of one treating a language as being _too_ malleable; picking and choosing meaning as one desires is far more dangerous that rigidity.
Yes the book has a shitty name but it really is a great book and has updated sections for ECMA2015/2016/ESNext stuff
Who is it debated by?
So if it's not the array, and assuming dir-pagination isn't taking up too many resources, what do you think could be the underlying problem? I'm going to go through the code tonight and see if perhaps this has something to do with having some watches in place or the binding of the paginated elements. I'm using Angular 1.2 so I can't do the ::one time binding, I'll have to research this more
If you're using redux you can use [redux-time](https://github.com/Monadical-SaS/redux-time) for this. Edit: there are also a bunch of helpful links on React animation in general the bottom of the redux-time README \^.
I'm not sure that I can technically share the Webpack bundle analyzer result, but below is a short list of reasons why it WAS so big * Our CSS/Sass was also being imported into the bundle. * Locales for supporting Safari 9 &amp; moment also took up a large portion of the bundle, but were unused. * Angular/UI Grid/Lo Dash/C3 make up approximately a third of the (current) bundle size * We have one parent application, one shared UI library (common components), and a "core" library. There are an additional 6 "sub" applications. These are the bundles we load dynamically on user request The most important point is this: the webpack bundle analyzer is executed on non-minified, non-gzipped code. Our minified &amp; gzipped bundle is significantly smaller
I would say that it's best to make words fit as you see them and I can't think of a reason why that's wrong. Also, respecting the views of others so long as it's not at the expense of your own isn't respect, it's apathy. On top of that, why is it bad for someone to shut someone down in the way that they were.
people who essentially think == (equality with coercion) is bad.
I know this is probably not what you were asking for but the colors are a bit.. anemic. Like if the website were a popsicle it would be milk flavor.
This is actually acknowledged at the beginning of the book. They just liked the details in the samurai picture more than any ninja picture they could find.
A real ninja would have posed for their own picture instead of finding one on the internet
Try to import specific functions from lodash rather then the whole thing if you haven't already. Lodash is pretty large 
That doesn't change anything. The arrow function's `this` will have the same `this` as its enclosing scope, which is the function `test`. That function was invoked without a dot as `test()` so its `this` is the global object. 
So Im guessing its not available in IE? Why else include safari for the 5 people that use it?
&gt; the filter function only looks at the current HTML page and it does not search other HTML pages. How can I make the filter function to search/filter items by looking at other HTML pages? I believe the only way you could do this is through some server/API interaction. Since the "other" HTML file is just a response from the server interpreted by the browser, I am not sure that the JS context can access them from memory.
Paste your title into Google.
I love how I see this, test it, realize it isn't working, check the about page, chrome updates, relaunch, and it's working. I had the same experience with the unicode-url bug.
According to the [docs](https://github.com/paularmstrong/swig) for the `swig` repo, it looks like you can pass in values to `indexTemplate(...)` that get used by `'./src/index.html'` to fill in any template values. So. You could just have the name dynamically generated inside of your`webpack` config and point both files to it. // inside webpack.config.js var indexTemplate = swig.compileFile('./src/index.html'); var indexHtml = indexTemplate( { env: TARGET_ENV, bundleName: 'Some random string' } ); // in src.index.html &lt;script src="{{bundleName}}"&gt;&lt;/script&gt;
Can you post a TL;DR of The Tipping Point and how it benefits developers? I'm always curious about non-programming books that can help navigate the many minefields.
Did you try UMD builds or did you bundle the app? Can you provide a full reproducing example please?
Great roadmap to React.
Indeed! Many good resources that are free to read online (and not sold on Amazon): http://jsbooks.revolunet.com
I'll make now a scoped variable and get rid of index since it's not used and probably the reason since it's going through the array for each iteration. Thanks again for looking in to this
Heh, are you referring to the public build or the private one? /u/spagoop, thoughts?
One of the comments might have answered your question...but in case they haven't, I'll take a shot. First things first, it sounds like you don't completely understand the difference between the front end and the back end. Node has nothing to do with the front end. All it does is handle requests from a client, which is normally a web browser. Then it serves the requested file, which can be either .html .css or .js. Using node like this is simply an alternative to using a web server like Apache, Nginx, or IIS. The above is soley based on the assumption of a static website. If you have a dynamic site then that means that the content to be displayed can change depending on a number of factors. So either the webpage is generated with a template engine in nodejs then served to the browser, ort the pages make calls to your node server if you have API endpoints. But in order to get something consumable by an end user who wants a webpage, you **have** to serve HTML files. Btw, I'm on mobile so if any of this doesn't make sense or needs a more thorough explanation, let me know and I'll make it better when I get home.
Yeah, you're right about the docs. Tough to find info on it. I couldn't find anything either except the announcement that they do have support for ES6 moduels https://github.com/stacktracejs/stacktrace.js/releases/tag/v2.0.0, but a couple of things I'd try Maybe it's not a default export? Could try ```import {StackTrace} from 'stacktrace-js';``` or maybe the case is different? ```import stacktrace from 'stacktrace-js';``` 
I use Safari for all non development work on MacOS daily. Mostly because of the way it handles gestures, which in my opinion feels more natural. 
I've bundled the app using webpack. I've tried to setup a simple demo, but for some reason this build is failing entirely; some error about usage of "use strict". https://github.com/gajus/react-webpack-babel-tutorial Will look into it tomorrow morning.
Helps stop your email from getting grabbed by a bot.
After taking a peek at [the source](https://github.com/stacktracejs/stacktrace.js/blob/v2.0.0/dist/stacktrace.js#L2743-L2750), I believe it's import * as StackTrace from 'stacktrace'
Makes sense. I was using ejs I just didn't fully understand what was going on. Thank you for the explanation!
No problem! A lot of this stuff can be confusing at first. Especially when the explanations that people give probably reference things that you don't know about. I would stick to the course and then see what questions you have at the end of it. Feel free to PM me or anything in case you have any more questions. The hardest part of being a self taught dev is having someone to answer questions. Especially someone who can derive meaning from questions, since it is hard to google something when you don't know what to google.
Maybe it's a ninja *posing* as a samurai. Ninjas are masters of disguise afterall.
Thanks a ton! The only issue I am having with the course is there is just a LOT to remember. Such as all of these app.use() So far I have setup a website for gaming that uses authentication and it has been really cool finally seeing how this kind of stuff works. Anyway, I'll definitely PM you if I run into anything. 
Hm yes this does seem to work as far as StackTrace being available in my script however, i have two questions: 1. How did you figure this out? Which part of the code you linked tells you that this is the correct way to import it? Is it this: **module.exports = factory(require('error-stack-parser'), require('stack-generator'), require('stacktrace-gps'));** ? 2. When I run my script I get error: stacktrace-gps.js?30b4:37 XMLHttpRequest cannot load webpack-internal:///33. Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.
&gt; import * as StackTrace from 'stacktrace' Looks like it's: import * as StackTrace from 'stacktrace' as /u/grinde mentioned below, however I'm getting an error. Did you ever use stacktrace in your projects? 
Surprised Clean Code isn't on that list.
1. Yup. If it were a default export it would use `module.exports.default = ...`. If the module loader uses AMD the `define('stacktrace', ...)` also gives you the module name you need to use ('stacktrace' instead of 'stacktrace-js'). 2. Looks like you're opening the file directly instead of via a local server. If the url uses `file:///` then cross origin requests won't work. You'll need a local server so it's being served from something like `http://localhost/` or `http://127.0.0.1`. For simple projects I like to use [http-server](https://www.npmjs.com/package/http-server), though many people prefer something that supports hot reloading. Depending on your editor there's probably a plugin that can accomplish the same thing. [Here's](https://threejs.org/docs/#manual/introduction/How-to-run-thing-locally) a good overview of how to get your projects running locally (I wouldn't recommend changing your browser security settings though).
Hm not sure what you mean, I have the file uploaded in my production server. I thought about using this to catch and log/send to me client errors. I don't really need it during my dev builds, it's more to catch errors that happen in prod when users are doing all kinds of funky things :)
Weird. In that case I have no idea why you're running into cross origin issues.
Hm yea I'll have to investigate it more. But, this library is good for what I'm trying to do right? Have you had any experience with logging user errors like this?
Stage 3, freaking finally. Means syntax is stable and it's relatively safe to use (via transpilation). Also stage 3 now: BigInts and being able to drop the parens from a `catch` clause (and `promise.finally` from a day or two ago).
I googled him. Looks like he may have rage quit the internet. GitHub, SO, Facebook, etc are all gone. You could check his npm page and pull any packages you were using from there. You'll at least have most of the code if it's published to npm. https://www.npmjs.com/~benvie
I agree. Especially private fields are welcome. No more unwieldy work-arounds. FYI: * BigInts: http://2ality.com/2017/03/es-integer.html * `Promise.prototype.finally`: http://2ality.com/2017/07/promise-prototype-finally.html * Optional catch binding: https://github.com/michaelficarra/optional-catch-binding-proposal
I think the joke is that the language is weakly typed. 
Maybe use CSS? E.g. https://stackoverflow.com/a/30125780
Thanks for the links - the `catch` proposal slipped by me and the phrasing from OC made me think it would allow `catch error {}`. Got me all optimistic for paren-less `if` statements even!
You can add it if you want :)
I really liked doing advent of code with modern js. It is language agnostic, so you will have to add this information for yourself but they have a lot of problems, where generators or async await can be used for example. 
You might be looking for r/Java buddy!
Oh wait this is java script mb 
Np! Sure it happens a lot!
http://es6katas.org/ is close to what you describe
Looking forward to private fields. Is there a reason it has to be `this.#prop` instead of `this#prop` or even just `#prop`?
Why do they have to keep bogging down js with OO bullshit? 
Good answer, thanks
Because a lot of people find it very useful.
Consistency.
I don't like the hash. Other than that, cool.
You don't need to use it if you don't want to. If you want to have JS stagnate and eventually die, then fine. Otherwise, if you want JS to stay around and even flourish, then improvements are necessary, even if you personally don't like or use them.
Yes I thought like that way, but problem is I can't get the value of `hash` which webpack creates on each deploy. Or can I get the value? Or do we need to create it manually ?
In all honesty, I'd actually appreciate if you could access class members with this::prop or this-&gt;prop and private fields to be named _field not #field, like convention does right now. I just guess the do not use the underscore, but rather the pound symbol, because it might break a lot of existing code with privacy that was not intended.
I think James Kyle wrote a post about why they moved forward with that syntax.
Hey Jim, thanks for the response! Yep, I figured the same - couldn't find a trace of him anywhere. Here's hoping that all's well with Ben, and that he'll be back online at some point.
So excited that this spec is finalized, but man, that private syntax is jarring. I keep thinking they're comments.
I've worked on a small number of NodeJS projects, and never much enjoyed actually writing tests for them. There was always a friction there, resisting my efforts to write clean test code quickly, and I would quickly grow tired of fighting it. I took up using Vows.js for one project, and that _did_ improve things somewhat, but the luster wore off pretty quickly. For [my latest project](https://github.com/pvande/polliwog), I tried out Jest on whim. I was properly surprised at how much better the testing experience was: very low friction test development, passable documentation, and a polished developer experience... Mocha may have stepped up its game since I last tried using it, but I've never had an overwhelmingly positive experience using it. For the foreseeable future, I will use Jest whenever I am permitted to.
Just a PSA that code from the book is on this cool site https://johnresig.com/apps/learn/
A generator is useful for lazy loading for example. Instead of putting an entire result set of a db query into memory (array), you yield one row at a time as you extract from the sql result. 
EDIT: changed link Here : https://web.archive.org/web/20170627023029/http://thejameskyle.com/javascripts-new-private-class-fields.html ~~http://thejameskyle.com/javascripts-new-private-class-fields.html~~
This page is unavailable when linked to from reddit.com. Please find a less toxic place to spend your time. Here is a great song for your time --- that's what i get
Thanks. Will try.
Wow what the hell ? That's pretty shitty from him, looks like reddit and hacker news are "blocked" from his site. I changed the link to an archive.org link, thanks
I read the article you mentioned and there is no proper reasoning behind this syntax. It reads exactly like something that was written to justify this sort of ugly bullshit.
This! What problem does this solve that cannot already be solved easily using idiomatic javascript?
I'll have to be the guy this time to point out the author doesn't know what "composition" is. There's this persistent myth in the JavaScript community that "composition" is mixins, while the rest of the world understands composition as the idea of having objects as **properties** (be it public or private). In both cases you're trying to build an object that combines some of the features of its sub-components, but composition really doesn't care or touch the prototype at all. This particular author, Eric Elliot, is particularly stubborn in changing the meaning of object composition, to mean just "when you somehow have two things become one thing" regardless if he's talking about inheritance, mixins, or actual object composition. At the same time he likes to quote a familiar quote: &gt; “Favor object composition over class inheritance” ... that makes no sense if inheritance is also "object composition". Not sure how that works in his mind. He also says: &gt; The most common form of object composition is known as mixin composition. ... which is false not only because mixins aren't "object composition", but also because mixins are relatively rare in practice. I've been programming for 20 years, I can count on the fingers of my hand the times I needed or have seen a significant use of traits, mixins and so on. Basically, that guy is confused. He has a personal agenda to convince you that mixins are the best thing ever, and everything that stands between him and his mixins is bad. If you want to drink his Kool Aid, go on, but keep in mind that mixins have almost all of the negative properties of inheritance (tight coupling, fragile base class etc.), and if you think you're doing "object composition over class inheritance" with mixins, you're deluding yourself. 
&gt; while the rest of the world understands composition as the idea of having objects as properties That is still too narrow and suggests a malformed bias. Composition is nothing more than a pattern in which pieces come together and there are several different ways to achieve this. There are alternatives to object composition particularly options that don't require inheritance or something that looks like a language this isn't.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol Helpful when working with Maps and Sets * Maps - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map * Sets - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set
&gt; That is still too narrow and suggests a malformed bias. Composition is nothing more than a pattern in which pieces come together and there are several different ways to achieve this. That's like saying "functional programming is nothing more than the pattern of calling functions". Technical terms have a meaning. You can't just go use English dictionary definition of the word and then improvise the technical meaning to your heart's content. Or if you do, then you can't quote "use composition over inheritance", because the people who said "use composition over inheritance" (Gang of Four) defined object composition in precisely the way I did up there. And mixins, according to *them*, is not object composition.
not agreeing with my opinions == toxic nice
&gt;this-&gt;prop If you wanted PHP you should've bought PHP.
Well then why don't we combine every feature of every language / paradigm in one language to rule them all? Oh wait, that's C#. The fact is that if you clutter your language with multiple ways to achieve the same goal, you've only achieved confusion.
How's JavaScript OO non idiomatic JavaScript?
That's not what I'm saying, OO JavaScript is idiomatic Javascript. The class keyword and class fields are not, and they are definitely not required for OO.
Well, the class keyword is syntactic sugar to overcome Js's prototypical OO that puts many off, since JS is the only major programming language to adopt it. I this "class" is idiomatic OO.
You actually *prefer* the prototype patching syntax? Consider my mind blown.
I favor factory functions, so no I don't need need the prototype patching syntax.
&gt; Technical terms have a meaning. Labels for things have a superficial meaning that may or may not be accepted by a receiver. Fortunately, this isn't how code works.
Or just use ref checks along with immutable data, then you get the speed and easy to use 
Of course I've done that hundreds of times, but that's not what my question is about.
It seems pretty clear to me: &gt; Further, to be truly private, you shouldn't be able to even detect that a private field exists. If you allowed a `private` keyword then either: 1. You could declare a private member variable (`private foo`) and a public one (`this.foo`) with the same name, leading to ambiguities which you meant - eg, when you referred to `this.foo` inside the class's methods. 2. You couldn't declare a private and public variable with the same name, in which case you would leak the existence and names of private variables to code outside the class simply by trying to dynamically add a member with that name to the class. For example: let myObj = new SomeClass(); myObj.foo = true; // This throws an error if private foo exists, leaking the fact of its existence Am I missing something, or are you?
Personally I think a double-equal for deep object equality and triple-equal for object reference equality would've been the way to go.
&gt; Js's prototypical OO that puts many off [citation needed] Javascript is eating the world. It was already eating the world long before ES6 syntax became usable. Frankly the claim that JS was being held back in any significant way by people being put off by its syntax is insane - if its present near-omnipresence is a result of being "held back" then once we get private member variables/methods I can confidently predict it'll be replacing *spoken English*.
I don't think you fully understand the purpose of this "communication" thing. Words are only useful when we share meaning via them. There's no pride and purpose in being told what millions of programmers understand as "object composition" and you stubbornly deciding "I reject this meaning, and substitute my own!". But as I said, if you don't feel like communicating, you and Eric can choose to make up words and meanings all you want, but you **can't quote** people who use the popular, established meanings to support your thesis for your made-up meanings. Everything said about composition by *others* doesn't apply to your special snowflake version. We don't know if it's good, or bad, or what its properties are. It's just putting things together in arbitrary ways. Pros/cons unclear. What you and Eric are doing is the like a scam artist talking about "quantum effects" and "toxin cleansing". Scammers ride on the popularity of some accepted terms, but reject their meaning and make up some B.S. Actual scientists and doctors will be rolling their eyes at the abuse of these words, just like I'm rolling my eyes at you.
This is a great addition to the language, as the actual class syntax doesn't feel complete (mostly because of private fields). Looking forward to it.
&gt; You could declare a private member variable (private foo) and a public one (this.foo) with the same name, leading to ambiguities which you meant - eg, when you referred to this.foo inside the class's methods. &gt; In all other languages, you can't make two fields that only differ in access modifiers. So no, there is no ambiguity, just JS devs creating even more bullshit (as if the language isn't full of shitty design decisions already). &gt;You couldn't declare a private and public variable with the same name, in which case you would leak the existence and names of private variables to code outside the class simply by trying to dynamically add a member with that name to the class: This is hilarious. The point of private isn't to hide the existence of a field. It's to prevent developers from relying on the implementation details and modifying the internal state of an object. All major languages with different field access modifiers tell you that you can't access a private field instead of hiding its existence. What you are proposing is unjustified and shows the lack of understanding of the motivation behind private fields.
&gt; I'd actually appreciate... private fields to be named _field not #field, like convention does right now. That's the problem though - it's just a *convention*, not enforced. Some people follow it, a lot don't. And even some code that claims to follow the convention won't always (eg, unit tests, where people often relax coding conventions and you can cut corners and avoid refactoring by simply peeking at a private variables). When you're designing a change to the language you don't get to play the "well, you shouldn't have done that so fuck you if your code breaks" card - you have to ensure that *any existing code that's syntactically correct* (no matter how stupid) that was working before your changes continues working after your changes, or you haven't added functionality to the language - you've created *breaking changes* to the language, which is an infinitely more serious issue.
I just mean I would like it, not that I think this has to be done or it is the way it just should be. Personal preference.
He might be referring to C.
That's exactly what I said why they won't do it. I said I'd appreciate it because it is convention to do so and you don't have to change it up. However because there's also people who don't object to this convention there will be a shit ton of broken code, which is propably why they've opted for the `#` instead. Finish reading the comment before you post your wall of text, mate.
Type psvm and press tab. However its better to actually understand whats happening. Post the question in r/learnjava . People there are really helpful.
pick a better sigil identifying the private access!
&gt; In all other languages, you can't make two fields that only differ in access modifiers. So no, there is no ambiguity Are you comparing apples to apples though? Certainly you can't do it in something static like Java, but that's a compile-time issue and the very idea of monkey-patching an object to add members to it from outside the class (let alone at runtime) is considered the kind of heinous antipattern that will get you strung up by your thumbs in a code review. In JS there's no such thing as a compile-time issue (everything's runtime), and there's no similar idiomatic prohibition against dynamically adding members to objects, either from inside or outside the object. I'm struggling to come up with examples of a dynamic language which has both public/private members which conforms to your assertion - Smalltalk only has private variables, python and ruby only have public ones, etc. &gt; The point of private isn't to hide the existence of a field. It's to prevent developers from relying on the implementation details and modifying the internal state of an object. What about code where the *existence* of a member alters the object's behaviour? If an object dynamically adds/removes members to/from itself as part of its lifecycle, and checks for the existence of those fields in order to determine its behaviour, then you run into a nasty situation because someone could instantiate an object, dynamically add a (public) field with the appropriate name, and thereby modify behaviour (and hence state) that should be private. Currently this is not possible because you can't add closured-in variables (the closest thing we have to private members) to a method's context from outside the class, but if the same logic uses members of `this` instead of closured-in variables then it becomes vulnerable to it unless you also provide some complex way of determining the private/public nature of the variable, and then *going back and rewriting every line of code* that touches the variable to guard against someone injecting a member in the way I described. &gt; What you are proposing is unjustified and shows the lack of understanding of the motivation behind private fields. I'm open to discussing this like adults, but I'd ask nicely if you can ramp down your obvious emotional butthurt and stop getting so unnecessarily shitty and personal about it.
&gt; OO JavaScript is idiomatic Javascript. The class keyword and class fields are not, [...] Your preferences are as valid as anyone else's, but it appears you're inflating the importance of your preferences to what other people might consider idiomatic.
&gt; The fact is that if you clutter your language with multiple ways to achieve the same goal, you've only achieved confusion. In the case of the `class` syntax in JS, the effect has been the complete opposite. Before ES6 plenty of people were doing their own classes and inventing different styles and libraries to do what was basically the same thing. It was a mess. Having `class` now cleans up that mess with a proper syntax which is readable for humans and for static analysis, and also sets a strong standard which we all can more or less agree on. Things are much better now. 
the hash is horrendous... really.
Well then continue using older JavaScript syntax. Well shit, let's fucking not add features that are in heavy demand to our programming language in newer versions and just keep the standard as is. That is incredibly close minded. Of course the language should not be incredibly cluttered. I've recently spoken out against the [partial application proposal](https://github.com/rbuckton/proposal-partial-application), because it's something that isn't really that important to the language itself, as there's already ways to achieve this, that do not compromise anything. However private isn't just some syntactic sugar. It has actual benefits to the language. Also adding this doesn't affect not using it. Sure, you could still do the following to achieve "private" variables: function Class () { var privatevar; return new function ClassConstructor () { //use privatevar } } However these are basically like private static variables. As soon as you're working with instances you cannot have proper private instance members. This is just not possible right now. That aside, if you just absolutely hate OOP, I can understand it, it's just not your thing, aight. However, JavaScript always had SOME OOP features. I will absolutely not accept an argument that JS is strictly non OOP. And quite frankly, there's a reason why OOP is replacing procedural programming: it is easier to learn and maintain. If you are so against OOP, go back to a non OOP language. If the community wants to make the half assed OOP attempt of JS into a proper OOP solution, then that's going to happen, whether you like it or not. It might be time to go with the flow, old man.
&gt; I don't think you fully understand the purpose of this "communication" thing. I studied communications theory in college from interpersonal behavior to the implications of neuro-plasticity.
Great rant, however I think you're somewhat confused. I have never said I am against OO, on the contrary. I also think you're wrong when you say it is not possible to have private instance members. This can be achieved quite easily with closures which has been heavily embraced in the JS community by use of the module pattern. Have this snippet function createClass() { var privatevar return {} } Above all I think it is quite disingenuous to brush my opinion off as 'old man' and 'stick to old js', I don't think I would enjoy JS anymore without the spread operator, ES6 modules, arrow functions or any of the other features I've come to love. My point was merely that if it does not solve a problem which cannot be just as easily solved right now, why bother cluttering the language? 
Apologies - I misread your last line.
Yeah, exactly. https://www.reddit.com/r/node/comments/6g3a7o/z/dioejmk
Thank you. JS was designed fast; and therefore there was no time for a committee to screw it up with needless extra cruft like this worthless proposal. The only thing I want to know about "class fields" is how I can help veto it. OOP is dead.
Use it when you would have otherwise used the _private naming for methods you think should be internal to an object. They are not technically private as you can still very easily discover them with getOwnSymbolNames. However, it’s one step better than simply naming something with a leading underscore. Folks can’t just accidentally guess/assume the private method. 
Defending and developing OOP features is incredibly close minded.
Do you use [method definition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions) syntax for your prototypes like most other folks using factory functions? That would be a bit awkward, since it's also ES2015 syntactical sugar like `class`, and no more "idiomatic JS" than the latter...
No I don't, don't really see the point of not typing the function keyword when writing... functions. Please don't ask me about arrow functions now or I will be exposed as horribly inconsistent and my only defense will be calling you names.
Is `{ a: () =&gt; 5 }` deeply equal to `{ a: () =&gt; 5 }`?
Ah, you're a great example that theory and practice aren't the same. My condolences on the poor outcome. :) 
The only thing I found (and the reason I assume he rage quit) is a Google cached version of his StackOverflow profile in which the description read "delete me". Last cached July 24, and the profile said "last seen 7 hours ago".
&gt; Are you comparing apples to apples though? Certainly you can't do it in something static like Java, but that's a compile-time issue and the very idea of monkey-patching an object to add members to it from outside the class (let alone at runtime) is considered the kind of heinous antipattern that will get you strung up by your thumbs in a code review. &gt; In JS there's no such thing as a compile-time issue (everything's runtime), and there's no similar idiomatic prohibition against dynamically adding members to objects, either from inside or outside the object. &gt; I'm struggling to come up with examples of a dynamic language which has both public/private members which conforms to your assertion - Smalltalk only has private variables, python and ruby only have public ones, etc. First of all, I consider dynamically adding members to objects outside of adding extension methods a very bad practice anyway. I can't find a single reason why that is useful and I think all classes that utilise this sort of behaviour should be refactored to store that data in internal dictionaries. Secondly, the proposed syntax also introduces a lot of room for error. Making a public field private or vice-versa will require the developer to manually change all references to the field, and if he forgets to change it somewhere, he will get the proper feedback only at runtime. That and the fact that you weren't able to find a dynamic language that has both private and public fields brings me to a question: does JS even need private fields? And why would anyone who is writing something serious enough to warrant that level of encapsulation choose plain JS over something like TypeScript anyway? &gt; What about code where the existence of a member alters the object's behaviour? As I said, to me this practice seems absurd, and that is the reason why your arguments mislead me into thinking that you don't understand the motivation behind private fields.
&gt; does JS even need private fields? And why would anyone who is writing something serious enough to warrant that level of encapsulation choose plain JS over something like TypeScript anyway? The proposal for private fields mainly takes the requirements of browser makers into account. They want to implement Web APIs in JavaScript itself for portability and performance reasons. For example, Edge already implements some of the JS standard library in JS itself, because it's more performant than implementing it in C++. This may sound counter-intuitive, but is explained by the fact that bridging between JS and C++ is relatively expensive, and that bridge cannot be optimized by the JIT compiler. However, a lot of Web APIs also have security implications, and for those it is very important to have true encapsulation provided by private fields. Otherwise "userland" JavaScript could mangle with security-sensitive private parts of the browser APIs, which would be an obvious security risk. So the private fields proposal has been designed with that use case in mind and will allow browser makers to use JS more for their own APIs. I don't think the hash symbol is pretty either (I even made my own [counter-proposal](https://github.com/tc39/proposal-private-fields/issues/14#issuecomment-277476735) to minimize its use) and I'll probably keep on using underscore-prefixed privates in my own projects (they're easier for testing purposes and I don't have a need for such strict encapsulation of privates in my own projects), but that's not to say there are no good reasons for the way it is.
Thank you very much, that's actually a pretty good reason. As for your proposal, I am not sure I like what you are proposing more than what is already proposed. But that's just my opinion.
For the sake of its survival, I would like to see future JS become friendlier to static principles and AOT compilation. With 4-5 years of tweaking, WASM could very well suck up most of the platform.
Please no! This is so ugly! *the hash, in particular 
&gt; Of course the algorithm for deep equality is not totally trivial (e.g. detecting circular references) but still pretty simple to write for any decent developer. I don't think its necessarily that simple. There's a lot to consider as far as what is _really_ equal, and what would the core language use as a basis to define this? Consider the following examples comparing `a` and `b`: // same members, but one object's members are inherited var a = {val:1} var b = Object.create(a) // same members, but one object's members are inherited (same prototype) Object.prototype.val = 1 var a = {} var b = {val:1} // same instance members, but different (yet equal) prototypes function A(val) { this.val = val } function B(val) { this.val = val } var a = new A(1) var b = new B(1) // functionally equivalent but non-equal members var a = { val: function(){ return 1 } } var b = { val: function(){ return 1 } } // nondeterministic members var a = { get val(){ return Math.random() } } var b = { get val(){ return Math.random() } } // member order var a = {a:1, b:2} // stringify =&gt; '{"a":1,"b":2}' var b = {b:2, a:1} // stringify =&gt; '{"b":2,"a":1}' // DOM: &lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt; // "equal" elements, but properties like nextSibling not equivalent // note: isEqual in underscore vs lodash have different opinions here var spans = document.getElementsByTagName('span') var a = spans[0] var b = spans[1] // property description differences var a = Object.create(null, {val: { value: 1, enumerable: true } }) var b = Object.create(null, {val: { value: 1, enumerable: false } }) // hidden state function create (val) { return { getVal(){ return val } } } var a = create(1) var b = create(2) There are subtleties that can create false positives. Its safer to let the user define their own expectations catered to their own data.
What's really happening behind the scenes: - CSS group: "We give you [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables) with `--` prefix". - JS group: "We see your variables, and raise you class fields with `#` prefix."
&gt;Polymer Nah, I'm good
Same here. I think Twitter has soured me on this character, or maybe I just don't like seeing `.#` next to each other like that.
Hi Axel, just want to say that your writing is incredibly valuable. Thanks for working so hard. Have a great day! **[edit]** Also, I purchased your book, so my gratitude is actually corporeal. :)
There aren't any other options available.
The easiest way would be to create it manually/through some hash function that you control and use it for both the `webpack` bundle name and the name you pass to the HTML template. Or at least, that's how I imagine it working based off the docs. Could be way off :/
The `this.` isn't optional anymore? :/ It was in earlier versions of the proposal. I liked that because it would encourage users to make more things private, because they could then skip the awkward "this.".
Backwards compatibility is to blame in both cases.
17 years later, still trying to figure out why this was downvoted...
[You can actually write `#prop` as a shorthand.](https://github.com/tc39/proposal-private-fields) It's possible something changed since the class proposals merged, though.
So true! It's personal opinion, but i don't like the look of the hash - similar to the * in generators. I can see why they didn't propose use of the private keyword, but there has to be a better way than introducing symbols now.....
I don't think so, because nothing will be broken if it's "private foo" instead of "#foo". Likewise with CSS, it's not realistic to think CSS vars can "degrade gracefully". Why would you use variables, if you also have to type next to it the same code without variables for BC? Eliminates the purpose of CSS variables, so either you target browsers that support it or you don't. What you can do is conditionally loading two CSS files depending on var support, but that means `--` is not required, it can just be, say "var foo", and in case of collision, it shadows any built-in values of the same name (i.e. same way var scope works in JS).
&gt; &gt; In all other languages, you can't make two fields that only differ in access modifiers. So no, there is no ambiguity &gt; I'm struggling to come up with examples of a dynamic language which has both public/private members which conforms to your assertion - Smalltalk only has private variables, python and ruby only have public ones, etc. [PHP](https://repl.it/JmxH) Cannot redeclare Foo::$theField
ava is quite similar in terms of DX-pretty smooth. Jest and AVA are certainly my top choices for testing.
Same here, `#` is burned into my brain as a comment char... going to be hard to stop that mental segfault every time I see it.
Hi /u/nonrecursive, tag=constant-awesome-20 Referrer links are the quickest way to get a site banned here. 
Build something: - a todo app. - chat client - refactor an open source npm module with es6
Don't bother with the shitty spam of Harrison Davis. He takes other peoples content, adds advertisement for his own platform and posts it under his name. Here's the original article: https://medium.com/@avodovnik/am-i-a-bad-developer-940efe993ad7 (which he now does link in his copy since I called him out).
Hi /u/obama_come_back, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Oh sure. Don't get me wrong - I think that the future of development is far more of a compromise between static and dynamic programming styles than either extreme, and the degree to which a language proves future-proof will be dictated in large part by how well they straddle that gap between runtime flexibility and amenability to static checking. I'm talking here about what JS is *actually like* though - not making any claims that it's more or less desirable for the future.
Darn useful!
The citation is that JavaScript added "class" and python, c++, java, c# didn't add .prototype
Thanks! ❤️
&gt; The only thing I want to know about "class fields" is how I can help veto it. ... eh, I used to be of the same opinion, but honestly these days I'm not so sure. Syntactic sugar is always useful, and as long as it's not violating the essential nature of JS (prototypical inheritance), the ability to define and decompose classes with a simple, *declarative* syntax is actually very useful for writing terse but readable code. I'll take something like a nice, declarative: class ES6 { myNumber: 42, getMyNumber: () =&gt; this.myNumber } over the messy, imperative: function ES5() { this.myNumber = 42; } ES5.prototype.getMyNumber = function() { return this.myNumber(); } ... any day of the week. It doesn't alter the underlying mechanisms or behaviour, but it lowers the cognitive overhead to understand the code, it makes the code vastly more statically parsable/analysable, and it conforms to the [rule of least power](https://www.w3.org/2001/tag/doc/leastPower.html), and that's a vey important (and much underappreciated) guidelines for designing systems like programming languages.
you think you're funny? &amp;nbsp; ^^^^well, ^^^^I've ^^^^good ^^^^news ^^^^- ^^^^you're
&gt; Got me all optimistic for paren-less if statements even! I get why people don't like the formatting/structure of C-style languages. I just wish we would stop trying to make JavaScript into a non-C-style language. If you don't like C-style languages, don't code in them. There are plenty of languages that compile to JS at this point.
When you want to associate some data with the object but you don't want it to be enumerable - for example when stringifying JSON. const LAST_UPDATE = Symbol(); const LAST_SAVE = Symbol(); var entry = { id: 2, name: "Adam", surname: "Sandler", rating: 2 } entry[LAST_UPDATE] = entry[LAST_SAVE] = 0; /* Update the entry */ entry.rating = 1; entry[LAST_UPDATE]++; /* Check if it should be saved - probably in some loop */ if(entry[LAST_UPDATE] !== entry[LAST_SAVE]) { localStorage.set(entry.id, JSON.stringify(entry)); entry[LAST_SAVE] = entry[LAST_UPDATE]; }
Even better, don't give him publicity at all.
https://gist.github.com/azproduction/1625623 Someone's done it better and smaller. I'm both happy and sad :)
&gt; I consider dynamically adding members to objects outside of adding extension methods a very bad practice anyway. That's a fair point, but sadly it's irrelevant when discussing *language* design. You can reject a code review because someone's done something that's syntactically valid but architecturally a bit risque with their code, but if you change the language such that you *break their code* when they do it (or worse, leave open gaping security holes in your encapsulation because you don't think anyone should do the thing that you haven't accounted for), you introduce a breaking change and/or obscure security hole into the language, and those are each massive and disruptive problems that may unnecessarily cost millions of dollars or years before your new change is widely adopted. When someone does something dumb in a code review "stop doing that and don't be fucking stupid" is a valid response. When someone objects that your proposed change to the language would break existing code or leave open a gaping security hole, "yeah well, people just shouldn't have done that at any point, even years ago, and if they did then they deserve to have their code break or to have enormous security holes in their code" is not a reasonable, relevant response - it's just an emotional rejection of a messy problem you don't want to *but do have to* deal with. &gt; Secondly, the proposed syntax also introduces a lot of room for error. It's a relatively straight search-and-replace in any text editor. Given you're fundamentally changing how the code works, it's as close to a mechanical change as you could reasonably get in a dynamic language. I mean yes, you're right that if you miss a field then it's going to get a value of `undefined` instead of throwing a compile-time (or necessarily even run-time) error, but if that's really bothers you so much then... well... welcome to refactoring code in a dynamic language like JS. &lt;:-) &gt; That and the fact that you weren't able to find a dynamic language that has both private and public fields brings me to a question: does JS even need private fields? Yes. If you've ever written a class to be consumed by third-party developers of... *unknown* competence and professionalism then you need private fields to enforce encapsulation. If you disagree on this issue, I promise you I can show you code I've seen in code reviews from professional developers *this week* that would make your toes curl. ;-p Today we do that with shitty hacks like closured-in variables, but those are shitty workaround, imperative hacks for something that should be handled much more elegantly and supported as a first-class, declarative feature of the language itself. We're already doing it, there's already a pattern for it, so of course we need it - the question is whether the shitty and inelegant workaround is good enough, or whether it's worth building a more elegant, declarative solution directly into the language. &gt; And why would anyone who is writing something serious enough to warrant that level of encapsulation choose plain JS over something like TypeScript anyway? Because Typescript is a cross-compiled language that only exists to compensate for (hopefully temporary) limitations in JS in the first place. Coffeescript used to be the Big New Sexy Thing that all the cool kids were using, until ES6 came along and suddenly nobody gives the slightest shit about coffeescript any more because the entire reason for its existence has disappeared. Typescript addresses other lacks in JS (eg, lack of optional type-hinting), but I'm buggered if I'm going to bet the future of my code on a second-class-citizen language that requires the barrier-to-entry of a fully configured build system before it's even usable, and only exists for something that could be fixed in the JS language in the future. Rather, I'd turn your question around the other way - if we improve JS to the point it has things like (optional!) types and strong encapsulation, why would we need third-party tools and second-class-citizen languages like Typescript or Coffeescript? Surely the aim should be to make the language maximally useful on its own, right? Without the need for additional libraries or cross-compilers or build systems just to make it suitable for common reasonable use-cases? &gt; As I said, to me this practice seems absurd, and that is the reason why your arguments mislead me into thinking that you don't understand the motivation behind private fields. You're missing the point. The issue is not that such code is *good* - it's that people *are going to and have already written it*, and when you're designing extension to the language *you don't get to break working code or introduce security holes just because you think it's ugly*. That's more or less the epitome of a shitty language designer. "I don't personally like that code" might be a passable enough reason to fail a code review, but it's a completely insane basis to hand-wave away a breaking change or introducing security holes into a programming language used by millions of developers on millions of production systems all over the world.
It's difficult to read it in your new format. This would put me off from even considering using it as an editor.
[removed]
You're trying to argue that syntactic sugar like `class` is *necessary* to add to JS on the basis that is *has* been added to JS? That seems like circular reasoning... and I'm pretty sure [David Hume](https://en.wikipedia.org/wiki/Is%E2%80%93ought_problem) would have something to say about it, too. (Also, it's worth noting that due to its prototypical and dynamic nature JS can trivially emulate traditional class-based OOP syntax with ease. Traditional class-based OOP systems (especially static/closed-class ones) can't easily emulate prototypical systems without a huge amount of fiddle-fucking around behind the scenes, so there's no point in them even trying unless a huge percentage of their users were absolutely demanding it.)
Thanks for the heads up, but I'm not sure anyone's going to afford PHP much credibility as an example of good language design that should be copied. ;-)
It doesn't work on mobile...
If i bought the hardcopy previously is there anyway for me to get access to the updated sections?
It's a cool project, but the result is extremely difficult to read. The line `for (var i = 1; i &lt;= 20; i++) {` which is pretty idiomatic and fits just fine on a mobile display in one line takes up nearly 75% of the mobile screen in your format!
iPhone 7+ safari ui is a mess, and doesn't work. Don't you love mobile styling...
FWIW this can be done without symbols using `Object.defineProperty`
This would relate to the latter, yes.
 class ES6 { myNumber = 42 getMyNumber = () =&gt; this.myNumber } I think you meant this, but good points otherwise.
&gt; I'm talking here about what JS is actually like though - not making any claims that it's more or less desirable for the future. I understand that, and you're right. The point I was attempting to make is that the vision for JS must project forward. When I see stuff like `#`, it's obvious there is no 10-year plan.
Nifty. Thanks for sharing.
Sorry - yes. "Something like" because I couldn't remember the exact syntax, and couldn't be bothered to look it up. Thanks for the correction. Don't forget your semi-colons, though, unless you're one of those awful hipsters. ;-p
Honestly I see the hash syntax more as an indication that it's *really fucking hard* to retrofit private variables into a dynamic language with open objects. I mean you're right - there's no grand ten-year plan for JS, but is there for any language? Plans drawn up 10 years ago for *Java* would have been *woefully* obsolete by the time we got to 2017, and JS is developing orders of magnitude faster than most other production-ready languages.
https://en.wikipedia.org/wiki/Hand-waving
Mostly its about hiding and preventing collisions with keys in objects by using symbols as those keys. Symbols are inherently unique when created new. No new symbol will ever match another new symbol. When used as keys, if other users don't have access to the original symbol used as a the key, it becomes more difficult to replace that property with one of their own. You can see how this becomes important with new object functionality in ES6, an example being [Symbol.toStringTag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag). `Symbol.toStringTag` is a property you can define for any object to determine how the default `toString` method (`Object.prototype.toString`) will tag your object. The format used by the default `toString` is `"[object &lt;tag&gt;]"` where `&lt;tag&gt;` loosely represents the object's type. Setting your own `Symbol.toStringTag` lets you define `&lt;tag&gt;` yourself. var o = {} o.toString() // "[object Object]" o[Symbol.toStringTag] = "foo" o.toString() // "[object foo]" While there's nothing necessarily special about a behavior like that, what keeps this functionality safe from collisions is the fact that a symbol is being used for the property name. If, instead, a new `toString` or `valueOf`-like method was added to `Object.prototype` for this, there could be problems if people ever add custom properties with whatever this new name would be to their objects - a concerning problem especially as new functionality is added to the language while maintaining backwards compatibility. Using symbols, there's no way old code would have already had a key with that property, and new code would have to explicitly get the key through `Symbol.toStringTag`. Additionally, symbol keys are hidden keys that don't show up through standard property iteration approaches. You have to use a symbol-specific API to get to them. So while not true private properties, they are more hidden than your standard string properties. While you, yourself, may not have to worry about property collisions with backwards compatibility, you may want to have properties in objects which share the same hidden aspects of symbol properties. Class members as symbols largely behave like private members because they won't cause collisions with similarly "named" properties (though symbols don't necessarily have "names"), but unlike true private members, they are not fully hidden from the prying eye. You may also simply want to have hidden functionality similar to `Symbol.toStringTag` tucked away in an object somewhere that doesn't get in the way of normal object usage/iteration like another property would.
It's an interesting project, but I'm afraid that I don't think it's very practical or useful. 
Thanks. If you have any feedbacks please let me know through github issues or here. Will try to address in subsequent releases. Right now, this release just addresses enough for my personal use case.
id rather recommend you using a fetch polyfill Like unfetch which is 500b gzipped but implements all basic fetch functionality 
Oh come on - don't be a dick. I never said the existence of even a single dynamic language with public and private variables demonstrated the validity of any argument - we were just trying to come up with any to see if they usefully informed the conversation. The existence of PHP does not prove or negate any point made so far in the debate, and I stand by my argument that the fact PHP made that design decision shouldn't be *used* as evidence in favour of any assertion because PHP is know to be a shittily-designed language with all sorts of systemic flaws (even if it's slowly improving release on release), and hence has no inherent authority as a model of good language design. If you want to argue *why* PHP's decision was a good one and why JS should follow suit then I'm all ears, but just saying "PHP" doesn't actually add anything to the debate, and arguing that it must be a good idea *merely because* PHP did it (if that was your intent) is likewise a baseless claim.
It does if you "Request desktop site", just like half the other pages that don't work on mobile. "Mobile optimized" stuff is often really counterproductive.
&gt; Oh come on - don't be a dick. No, **you** don't be _jerk_. Consider this a warning.
&gt; there's no grand ten-year plan for JS, **but is there for any language?** Eh, why does that matter? It doesn't to me. &gt; JS is developing orders of magnitude faster than most other production-ready languages IMO, this is an argument to have a long view plan, not avoid one. Throwing random stuff into the language that seems like a good idea at the time is how we arrived at pre-ES6 crapulence.
It was an option, but it suited my use case and was as small as I could code it. But I do welcome more viewpoints and other options.
Actually Python and Ruby's class implementation has always been what we would call prototypal. https://www.reddit.com/r/learnjavascript/comments/6c6use/how_the_hell_did_you_guys_learn_js/dhuut92/ https://www.reddit.com/r/node/comments/6oqiyn/is_es6_completely_useless/dkjjh7t/
On-topic, you said: &gt; I'm struggling to come up with examples of a dynamic language which has both public/private members which conforms to your assertion So, I provided an example, but then you do a hand-waving dismissal because it doesn't stand up to your subjective, privately-held opinion of what _good_ is. That's poor form. Also, a bad reputation doesn't mean something is actually bad, and furthermore, said bad reputation doesn't mean that 100% of the subject should be included in the assessment. PHP has come a long ways in the past several years; but of course, the cool kids all bash it because _'lolphp'_.
Once yarn lets me properly manage client and server dependencies, I'll go back and look at it. It's not entirely clear what yarn gives us anymore, given npm5's determinism. 
Here's the same thing in one line: fetch('google.com').then(r =&gt; r.text()).then(console.log)
True, but they didn’t have much of a choice. I’ve added an FAQ explaining the rationale behind the hash: http://2ality.com/2017/07/class-fields.html#faq
But it is a site about representing code on handheld devices... It's literally about optimizing for mobile, and isn't optimized for mobile
Hm I need to create it by myself. The goal is to do cache busting. So that will work too. I will post back what I see. thanks. :)
I like the concept, but it takes up a lot of space relative to the raw code. IMHO the problem with coding on mobile isn't so much the reading as the typing. Flowchart and dataflow based programming seems ideal for mobile, as do spreadsheet-like abstractions. I think an excellent autocomplete, syntax highlighting, and a keyboard that let you type all the needed punctuation would partly fix the issue, but selecting code is not as easy without​ a mouse. For those into that kind thing, maybe something like a JS vim implementation would help?
I think browsers are generally more concerned with websites javascript messing with browser api (so a server -&gt; client attack). Servers are responsible for their security. If you're messing with the engine to attack a client, you have access to the client's machine. You've already won.
&gt; Don't forget your semi-colons, though, unless you're one of those awful hipsters. ;-p ... I don't want to start another argument here, so uh... http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding http://inimino.org/~inimino/blog/javascript_semicolons https://www.youtube.com/watch?v=gsfbh17Ax9I https://davidwalsh.name/javascript-semicolons https://mislav.net/2010/05/semicolons/
&gt;That's a fair point, but sadly it's irrelevant when discussing language design. &gt; You can reject a code review because someone's done something that's syntactically valid but architecturally a bit risque with their code, but if you change the language such that you break their code when they do it (or worse, leave open gaping security holes in your encapsulation because you don't think anyone should do the thing that you haven't accounted for), you introduce a breaking change and/or obscure security hole into the language, and those are each massive and disruptive problems that may unnecessarily cost millions of dollars or years before your new change is widely adopted. &gt; When someone does something dumb in a code review "stop doing that and don't be fucking stupid" is a valid response. &gt; When someone objects that your proposed change to the language would break existing code or leave open a gaping security hole, "yeah well, people just shouldn't have done that at any point, even years ago, and if they did then they deserve to have their code break or to have enormous security holes in their code" is not a reasonable, relevant response - it's just an emotional rejection of a messy problem you don't want to but do have to deal with. First of all, you are implying that the changes I am in favor of would affect backwards compatibility in any way. That's completely false. Classes written before this change will not have private fields anyway. Secondly, you are implying that language designers shouldn't steer developers in the right direction by implementing backwards-compatible language features that get in a way of writing code that is generally considered bad. I don't see how the changes I propose affect anyone negatively. Thirdly, you keep mentioning some security holes that would allegedly be introduced by the said changes. Once again, I don't see how these changes would introduce a security hole, especially since the changes would be backwards-compatible. &gt; It's a relatively straight search-and-replace in any text editor. Given you're fundamentally changing how the code works, it's as close to a mechanical change as you could reasonably get in a dynamic language. &gt;I mean yes, you're right that if you miss a field then it's going to get a value of undefined instead of throwing a compile-time (or necessarily even run-time) error, but if that's really bothers you so much then... well... welcome to refactoring code in a dynamic language like JS. &lt;:-) And yet this inconvenience could be avoided altogether. &gt;Because Typescript is a cross-compiled language that only exists to compensate for (hopefully temporary) limitations in JS in the first place. Don't hold your breath, the chances of JS becoming even half as good as TypeScript are exactly zero. &gt; Typescript addresses other lacks in JS (eg, lack of optional type-hinting), but I'm buggered if I'm going to bet the future of my code on a second-class-citizen language that requires the barrier-to-entry of a fully configured build system before it's even usable, and only exists for something that could be fixed in the JS language in the future. A fully configured build system is a requirement for modern JS development too. And lack of typing isn't something that's going to be fixed in JS any time soon, and I doubt that that will happen at all. I didn't bother quoting the rest of your points because I've already answered them above.
I'm really struggling to see how Babel and Flow compete with Typescript. There is nothing compelling about Babel and Flow in my experience, they are incredibly heavy and bug ridden, the overall workflow is simply excruciating compared to Typescript.
Its not bias. Babel+Flow is just stupid compared to Typescript. What is the (practical) hypothetical situation where one would eschew the later in favor of the former?
False. Typescript is a superset of Javascript. you can write plain old javascript to your hearts content (foolish, but then again you use Babel..)
Well, it's not fatal because it's inside a promise, which then goes to the catch handler, outputs the error, and redirects the response to '/404'. That's the easy part. The hard part is how it got there, and then how response is undefined. How are you verifying that slug.indexOf('bundle') is *actually* greater than -1? Could you try as a sanity test to output the value of that expression before entering the if test?
There's so many other characters they could've used though, for example ð.
Yeah, I forgot about the issues with prototypes. I still think that a sensible solution is possible, but there are other issues as was explained in my /r/programmingLanguages thread.
**Here's a sneak peek of /r/ProgrammingLanguages using the [top posts](https://np.reddit.com/r/ProgrammingLanguages/top/?sort=top&amp;t=year) of the year!** \#1: [I'm writing free a book on designing and implementing programming languages. The first few chapters are up now. I'd love to know what you think!](http://www.craftinginterpreters.com/) | [31 comments](https://np.reddit.com/r/ProgrammingLanguages/comments/5o7y4z/im_writing_free_a_book_on_designing_and/) \#2: [68 Resources on creating programming languages](https://tomassetti.me/resources-create-programming-languages/) | [4 comments](https://np.reddit.com/r/ProgrammingLanguages/comments/66g9fp/68_resources_on_creating_programming_languages/) \#3: [Idris 1.0 Released](https://www.idris-lang.org/idris-1-0-released/) | [1 comment](https://np.reddit.com/r/ProgrammingLanguages/comments/62slni/idris_10_released/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Another good example. It may very well be impossible to define structural equality for functions.
Some feedback, since you seem like a person who cares: Even with syntax highlighting, your commenting/documentation style is...odd. Correct me if i'm missing something, but it seems like you want to document your code, but as far as i can tell, you're not following any real convention. It gets in the way of reading your code. Inconsistent indentation style doesn't help either. Generally comments should explain weird stuff. If you have to put a comment on (almost) every line, you are probably falling short somewhere (even something simple like variable naming can improve this dramatically). Give your variables/params readable names. Unless you are literally playing code golf, there is no good reason to give your variables single character names, even if you document them. Let your bundler/compiler do that stuff for you. Are you familar with JSDoc? http://usejsdoc.org/ Maybe ESLint with StandardJS/AirBnB style? https://standardjs.com/
Yes, I was too busy making the "engine" work that I forgot about one of the most important point but I'll try my best and have it fixed by tomorrow.
There is even &lt;=140bytes (if i remember) by the @140bytes (check twitter, google, twitter and Jed Schmidt) folks.
&gt; Otherwise "userland" JavaScript could mangle with security-sensitive private parts of the browser APIs, which would be an obvious security risk. This isn't a strong argument. `const` already solved this problem for simple variables, so the same sort of implementation for private variables seems like common sense. A private field should not be redefinable outside of the class that instantiated it.
Yup. Engineer brain. :)
Thanks for the response, I'm thinking a lot about how it could be more concise but if a cannot come up with a viable solution I might just ditch the visual syntax and focus more on the editing part but I still have high hopes about the visual syntax :)
Really gonna disagree with you on using "this" instead of "window". You're saving 2 characters but losing a lot of clarity, as this can be literally anything depending on the context and you shouldn't be requiring people to do any more thinking than they have to. Looking over your code I see the entire point is to reduce the length of the code as much as possible. A fun and interesting exercise, I suppose? I assume then you are then using the term "Simple" here in terms of what the function can perform rather than the simplicity of the code itself. I'd really hate to have to maintain code that looked like this.
I wonder if something like LISP wouldn't be better suited to visual syntax. With textual syntax it's got so many parentheses and I've never really bothered to try and learn it, but with a visual editor it seems like it could be really cool.
+1 And to top it off, the author *also* doesn't know what the open/closed principle is. Elliott is changing the meaning of the OCP just like he's changing the meaning of object composition. And the *really* ironic thing is the OCP views polymorphism by inheritance as the solution. The problem the OCP is meant to solve (as given in [this paper by Robert Martin](https://web.archive.org/web/20060822033314/http://www.objectmentor.com/resources/articles/ocp.pdf)): class Square {} class Circle {} function drawAllShapes(shapes) { for (const shape of shapes) { if (shape instanceof Square) { // Logic to draw square } else if (shape instanceof Circle) { // Logic to draw circle } } } If we wanted to extend this implementation to add more shapes, then we'd have to modify the `drawAllShapes` function. That's bad. The alternative is to have each shape inherit from a base class, and have the `drawAllShapes` function use only the base class's interface. class Shape { draw() { // ... this._doDraw(); // ... } } class Square extends Shape { _doDraw() { // Logic to draw square } } class Circle extends Shape { _doDraw() { // Logic to draw circle } } function drawAllShapes(shapes) { for (const shape of shapes) { shape.draw(); } } Now if we wanted to extend this implementation to add more shapes, then all we'd have to do is add more classes that inherit from `Shape`, and the `drawAllShapes` function doesn't have to change at all. *That's* the open/closed principle. Of course, the OCP and object composition are just a couple of the big things Elliott gets wrong, but there's also a dozen more smaller things he gets just as wrong. Eric Elliott is a snakeoil salesman, and no one should be learning from him.
&gt; but then you do a hand-waving dismissal because it doesn't stand up to your subjective, privately-held opinion of what good is. That's poor form. Apologies - I gave the short, light-hearted version because I assumed my reasoning would be clear, but in the interests of not being misunderstood, let me unpack it: * You are correct that PHP is a dynamic language with both private and public variables. * On its own this does not add any weight for or against the idea that you should be able to divine the existence if private variables from outside a class. * *If you claim that PHP is a paragon of good design* then the mere fact of its inclusion in PHP would lend weight to the idea it's a good idea, but I reject that assumption because it's manifestly false, by the consensus of pretty much the entire programming community[1]. * *If you do not claim that PHP is a paragon of good design* then it's necessary to demonstrate *why* PHP's decision here is a good one. I'm open to that line of argument, but nobodys actually made it yet. My argument is not '*lolphp*', and it's unfair to characterise it as such, especially straight after I just carefully explained to you that: &gt;&gt; If you want to argue why PHP's decision was a good one and why JS should follow suit then I'm all ears, but just saying "PHP" doesn't actually add anything to the debate, and arguing that it must be a good idea merely because PHP did it (if that was your intent) is likewise a baseless claim. Finally, you're a mod, I'm grateful for your hard work curating the community and you can absolutely ban anyone you like for any reason you like, but having accused someone of disingenuity, when they complain you're being unfair it's thoroughly classless to put on your mod mantle and threaten to ban them from the sub just for defending themselves from your accusation. With respect you were the first one to impugn anyone's integrity, and you were also the first one to accusatively hurl personal insults around. You'll note I still haven't actually called you any names - just requested you *not* become a dick after your unfair and somewhat glib accusation I wasn't engaging with your arguments... though I can see how you'd read that as an accusation you were already being one, and if so then I apologise because that wasn't my intention. If you still want to ban me for *politely* defending myself, however, then that's absolutely your prerogative. ----- [1] This is *not* an argument that everything about PHP is bad, that there are no good design decisions in PHP, or that PHP selecting a design decision *proves* it's bad. It's merely a statement that the design's presence in PHP doesn't prove it's *good*, either. Please try hard to avoid straw-manning my argument here, as you apparently did earlier. FWIW I was a professional PHP developer for many years and led multiple teams using it on a wide variety of projects, so I'm also not without experience in the language and I'm certainly not just mindlessly regurgitating other people's opinions on it. **Edit:** Spelling/autocorrect mistakes.
[Here's](https://github.com/zenorocha/clipboard.js/commit/231d62db0e64e8eaeea3bf3b6627418f1ced23ab) the initial implementation. Not that it's as small still, but that's more due to providing class-like function capability. * You can see it growing due to support for non-input elements [here](https://github.com/zenorocha/clipboard.js/commit/d682f4a3d475a450c12212267c07ed47b3d3fadb). So it already does things that you'd have to handle differently (for example, if you have content-editable enabled). * I'm wondering how element.select(); document.execCommand('copy'); works along side bootstrap modals. * Further, execCommand copy support is not available below Safari 10 (which was released just a year ago), so you may be unlucky there. clipboardjs lets you validate (and have a fallback requirement otherwise). * Also, clipboardjs lets you copy attribute text (so you can store content in an attribute rather than a hidden element if you want. All that said, don't use a library if you don't need it. Obviously if all you need is `element.select(); document.execCommand('copy');` just do that. If you need validation, error handling, a "nicer" set of calls, and container support; use clipboard.js. Read the libraries you're including in your project. The thing is tiny; and there's a tiny amount of commits that actually modify the code (you can see that [here](https://github.com/zenorocha/clipboard.js/commits/master?before=3c0dfe5a38972ad4530136691d480b855a8f09ad+35&amp;path%5B%5D=src&amp;path%5B%5D=clipboard.js))
Migrated all my mocha+chai+Istanbul projects to jest
&gt; You'll note I still haven't actually called you any names - just requested you not become a dick No, that doesn't fly -- "don't be a dick" is precisely the same as calling someone a _dick_. That is where you crossed the line.
&gt; there's no grand ten-year plan for JS, but is there for any language? &gt; Eh, why does that matter? It doesn't to me. It just seems like a weird and unreasonable criticism, given it's not something any language really has. I mean you can criticise a specific dog for not having wings, but when *no* dogs have wings, is that criticism really relevant or constructive? I guess I just don't understand your motive for bringing it up, or on what basis you assume it's even possible (let alone desirable)...? &gt; IMO, this is an argument to have a long view plan, not avoid one. I conditionally agree here... but my condition is predicated on *anyone, anywhere* having *any* idea what the web's going to look like in another decade, and that's basically a nearly impossible requirement. It's hard enough to predict what useful or popular additions to a relatively static (in both senses of the word) language like C++ or Java might be. The fact JS and the web are so volatile and unpredictable would seem to make such a plan for JS all but impossible, however much we might like one! For example, a 10-year plan for JS created ten years ago would likely not have included fat-arrow syntax (because coffeescript wasn't around to inspire it), Promises, async/await or half the other great stuff in ES6 (let alone ES7)...
If you work really hard you will eventually build visual basic.
`private` 
finally!! ... I'll show myself out
Google chrome console LOL. I believe this may have happened earlier on in the project when any route was called this thing would fire. I could have a crappy memory though.
You have my sincere apologies then. FWIW that was intended to imply you were *straying close* to dickish territory, not that you were a dick. That's obviously legitimately a matter of interpretation though, and my apologies again if that was still over the line. Can I assume, though, that it's considered perfectly ok to impugn someone's integrity, accuse them of being disingenuous and refusing in bad faith to engage with someone's arguments as long as I don't use any specific nouns when I do it? ;-p
Double update it does fire whatever route I go to.... 
I think it's way too verbose for this, without providing any actual protection (as you say). I'd be in the camp of using a closure if you want actual privacy or just use a naming convention if you don't. Symbols just seem like obfuscation. 
 import { worry } from 'emotions/lib/util' import { consider } from 'cognition' import { reply } from 'written-async' void async function replyToShaper_pimp () { const resp = await reply(worry('What a scary thought.')) // disabled for now TODO fix this, listen to people! // await consider(resp) }()
It has some added benefits when compared to the _private stuff like not showing up in loops. It’s likely less verbose than implementing it with closure. 
It's probably more verbose than a closure, but a closure does force you into a lot of undesirable nesting in return for actual protection, and that nesting probably won't gel with how you want to write your code. I don't see any big advantage to them not showing up in for loops.
_private vs Symbol(“private”). I wouldn’t call it verbose. If you’re iterating over properties it could get in the way. 
&gt; The setInterval() method [..] repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. It returns an interval ID which uniquely identifies the interval, so you can remove it later by calling clearInterval(). This method is offered on the Window and Worker interfaces. https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval
As do standard methods, so unless you're using Symbol for all of your methods then you have to deal with that anyway 
You promise?
You asked for a different sigil. https://en.wikipedia.org/wiki/Sigil_(computer_programming) Only @ is available, but that one will be most likely used for decorators. Why they didn't use the private keyword: https://github.com/tc39/proposal-private-fields/blob/master/FAQ.md
first of all while(i&lt;10) instead of if(i&lt;10).. secondly settimeout(check,1000) cause if js finds a function call anywhere(maybe as an arugument) it executes it so in settimeout we pass only function name for reference... and finnaly i would like to add that in these complicated situation(using settimeout in loops) your closures concept should be clear else they might bite you 
He will fullfill that.
No need for libraries, CSS and standard javascript can do this just fine. CSS transitions for the fade effect and [intersection observers](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) to efficiently do a callback depending whether the element is in the viewport or not. Example: https://codepen.io/anon/pen/Yxygxa (Feel free to remove the fade out and call observer.unobserve after the fade in). You might have to polyfill intersection observer for older browsers, though. And NodeList.forEach.
aah it's resolved then ...
Myrtille provides a simple way to connect Windows based remote desktops from a web browser. As a web UI, it’s device and OS independant. Server side, it uses the .NET (C#) framework, IIS and the RDP protocol through an HTTP(S) gateway. Its particularity relies in the use of the .NET/C# framework to offer a better integration with Windows (equivalent solutions, Guacamole to name just one, are running on Linux/Apache/Java). It supports HTML4 (one of the few to do that), HTML5, file transfer and WebP compression (in addition to PNG and JPEG). It's primarily aimed at system or network admins and devs but everyone can use it. I hope you'll enjoy it! feedback is welcome :) Thanks!
It's so ugly that I probably won't use them.
and now we can await it
+ resolve + reject + _treason_
Your "Why" explanation really didn't explain why you're doing it. It said you want to make a vertical touch screen code editor.... but WHY do you want to make a vertical touch screen code editor?
I love how the author of this piece apparently didn't know how to disable spell-checking in whatever program he used to make the charts, so every single chart in the article has Node.js underlined in red.
I came for the puns and I was not disappointed.
I guess that's a downside of Node.js versus other languages like python or rust.
Then I'll get to catch up with you guys
Properties that are methods still show up right? Using a symbol as the property name for a function means it’s guaranteed to be a unique value and automatically makes it not enumerable. 
`with` can't be used in strict mode. Classes and modules are always in strict mode. ActiveXObject? Why would you bother with IE6 at this point? Like the others, I recommend to just use fetch and a fetch polyfill if you need it.
 var searchNode = (function () { function getAllIndexes(str, val) { var indexes = []; var i = -1; while ((i = str.indexOf(val, i + 1)) !== -1){ indexes.push({start: i, end: i + val.length}); } return indexes; } return function searchNode(node, searchText, matchesFound) { matchesFound = matchesFound || []; var nodes = Array.prototype.slice.call(node.childNodes, 0, node.childNodes.length); nodes.forEach(function (child) { var text = child.textContent || child.innerText || ''; var indexes = []; if (child.nodeType === 3) { indexes = getAllIndexes(text, searchText); if (indexes.length &gt; 0) { matchesFound.push({ node: child.parentNode, indexes: indexes }); } } else { searchNode(child, searchText, matchesFound); } }); return matchesFound; } })(); I wrote this up for you real quick. It gets you most of the way there. This will find all of the elements that have the given text in them and the indexes at which the text starts and ends. To use it do something like: var elementsFound = searchNode(document.body, 'fail'); elementsFound.forEach(function(element) { element.node.style['background-color'] = 'red'; console.log('text starts at indexes', element.indexes.map((index) =&gt; index.start), ' and end at ', element.indexes.map((index) =&gt; index.end)); }); Or whatever. Edit: Damn. Didn't realize you wanted to use just one input value. Well if you're crafty you could probably dissect my response and take bits and pieces.
And then what? 
Actually your work in this field is admirable, because in some time in the future it will be developed more. I'm talking about visual programming, without typing text, mostly (only maybe for variable names or comments but they can be guessed by ide too). 
TypeError maybe? I'm not an expert.
Maybe some of this representation would make sense if the code was editable. But if it's just for reading, I'm afraid the only result is that it's kind of unreadable :P For reading, you don't need to change how code looks on mobile. We can read it as-is. For editing, you might want to take a traditional representation and maybe add some kind of "popup" interface for editing a line. Touch a line, and see those blocks, or something. But you're wasting a TON of space with some elements. Consider making it more compact without reducing touch targets a lot. Say, a "&lt;=" on an entire line is just a waste.
Some of our customer base still use dialup... IE6 is just an annoyance but a catered for annoyance. True about strict mode, but again our use case didn't call for classes or modules. But it's a fair comment to others coming across this code
True, but IE6 support... I know. :'(
Don't try!
IE6? I hope you're making over $200k.
If there's a way to reply to that text from the email, sign me up.
Fair comment about commenting. I pulled this from a larger file that was code for minimum file size. The use of the two single letter variables was to cater for the fact none of the JS compressors could handle variable names inside the with block, so these were manually shortened to single letter variables. Code golf because some of our users are still on dial up. Thanks for the links, I'll take a look.
:-D 
Without going in to too much detail, our own sties support IE8+, but this forms part of a drop in script... and some of our customers that have their own sites still need to support IE6.
I'm developing Cascade, a new Component framework with built in Reactive programming concepts. It's similar in many ways to the React and MobX stack, where the Components automatically subscribe to the Application State. Before working with React and MobX, I spent a lot of time with Knockout. I designed Cascade to be a sort of "spiritual successor" to those libraries. However, I kept it as light as possible, removing any unnecessary bloat. Currently it is less than 5kB minified and gzipped. Let me know what you think of Cascade. I've been developing a lot of test projects with it myself, and I'd like to have other people try it out. I linked my documentation website from GitHub. It includes a set of tutorials, but these are written to assume limited knowledge of JavaScript and TypeScript. The Readme file in the repository has a somewhat abbreviated set of instructions. 
I'm sorry.
Me too
That *function* fires? Yes, any route that fits the pattern ('/:slug'), which is '/a', '/b', '/ABNDNDFGN' should cause that function to fire. I'm not sure if it's what you wanted, but it's a path-to-regexp that matches any route! Now, if you can control the server side script, could you put a console log up there before the if test? Sanity test that slug is what you think it is, and sanity test that indexOf('bundle') is actually greater than -1. console.log(slug, slug.indexOf('bundle')); 
Looks interesting...
I am not sure what you're exactly trying to accomplish here, since it seems a bit contrived to do `|goal - num1| &lt; |goal - num1 - changeBy|`, wouldn't you just want to do `num1 &gt; goal`? But for whatever reason you want extra precision, change `betaDifference`s to `(goal * 100) - (num1 * 100)` which will give you more significant figures to the left of the decimal and should solve the floating point representation issue.
😂😂😂 idk why but this is hilarious to me.
You don't need any of those to do the same thing on any Unix/Linux/BSD computer (at least).
I mean, someone was gonna say it. 
Here's a link to the GitHub repository https://github.com/sjohnsonaz/cascade
Cool. I was think for these about last 3 years :D I like that there is comparison table between `Github Element` and `Blog Element`. Finally someone to show to others how easy it is.
http://js.cytoscape.org/ ?
Rejected!
There are reasons why `private` won't work: https://github.com/tc39/proposal-private-fields/blob/master/FAQ.md
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [tc39/proposal-private-fields/.../**FAQ.md** (master → 0c35760)](https://github.com/tc39/proposal-private-fields/blob/0c35760650f3f5ae8fe8b0bd51bcd4f82c89834c/FAQ.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dkv324s.)^.
`with` isn't problematic only in minifiers. It's actually illegal in strict mode. I would highly recommend that you drop the `with` statement and use `"use strict"` as much as you can, as that opens the window for some JS optimizations that would otherwise not happen in loose mode. Also, keep in mind that strict mode is default in tools like rollup, and that going forward, native ES6 modules will always run in strict mode. Also, consider this: with(new X)send(open()) x=new X;x.open();x.send() The latter is not really significantly larger, but it's far more idiomatic, and it allows you to eventually support POST, etc.
I add stuff to dictionary for this exact reason. Can't stand seeing the red lines in emails and designers. Maybe this stems from having a "non-standard" name 
I really disike that they combined the two proposals. I want my damned static properties already!
The problem is it is impossible to accurately represent 0.1 in a floating point number. A binary representation of 0.1 is infinitely repeating, just like 1/3 is infinitely repeating in decimal. You should instead consider using integers. goal = 40; num1 = 30; changeBy = 1; oppositeChange = -2; Then when you need to display the values, divide by 10 so it still looks like a decimal to the user. E.g. console.log(num1 / 10); This is the same technique often used to represent currency in a program, where dollars and cents would be stored as an integer number of cents.
This is why .net is named after a hidden file
Any chance of basing it on regular Custom Elements, rather than it's own proprietary component model? I think this could help adoption for newer frameworks as they'd be interoperable with other frameworks, and plain markup.
Generators are super useful for lazy mapping. Here's a map function for iterators: function* map(iterable, mapper) { for (const elem of iterable) { yield mapper(elem); } } Here's a lazy filter: function* filter (iterable, filterFn) { for (const elem of iterable) { if (filterFn(elem)) { yield elem; } } } And here's a de-lazifying slice: function* slice(iterable, start, end) { if (!Number.isFinite(start)) { start = 0; } if (!Number.isFinite(end)) { end = Infinity; } let index = 0; const output = []; for (const elem of iterable) { if (index &gt;= end) { return output; } if (index &gt;= start) { output.push(elem); } } return output; } You can compose these as much as you want: const ints = (function* integers() { for (let i = 0; true; i++) { yield i; } })(); const squares = map(ints, x =&gt; x * x); const evenSquares = filter(squares, x =&gt; x % 2 === 0); const halfEvenSquares = map(evenSquares, x =&gt; x / 2); // first twenty halved even squares const firstTwenty = slice(halfEvenSquares, 0, 20); The great thing about laziness is that it usually only requires computing the bare minimum amount, even with a high amount of composition. I could write a function to output a certain number of halved even squares, but that is much more difficult to compose, unlike iterables. With the slice function and any iterable, I can grab as many results as I want, regardless of how many are filtered out etc. 
Unsurprisingly all of those are amazingly poor reasons. So people mistyping public fields isn't a problem, but they must absolutely stop errors from happening on private fields? What's the justification for this sudden onset of awareness about errors on *private fields* specifically? And what about this: &gt; Having a private field named x must not prevent there from being a public field named x ... Why? Like literally 99% of languages on the planet apply modifiers as a separate attribute than the name. What happens if they want to add *protected* access later? Maybe `%foo`? What about internal access down the line? `@foo`? What are we trying to here, to make JavaScript the new Perl or something?
You have two options. The simplest: var i = 0; var intervalID = setInterval(function () { if (++i &lt; 10) { check(); } else { clearInterval(intervalID); } }, 1000); In your use case the above code is absolutely ok - but sometimes [you might not want to use setInterval](https://zetafleet.com/blog/2010/04/why-i-consider-setinterval-to-be-harmful.html). So I'm going to show you how to do the same thing with a recursive `setTimeout` - I'm also going to abstract out the `repeat` logic to make it easier to reason about: function repeat (count, fn, interval) { fn() setTimeout(function () { if (count &gt; 0) { repeat(count - 1, fn, interval) } }, interval) } repeat(10, check, 1000)
&gt; anonymous wrappers I've heard of them being called IIFEs (Immediately Invoked Function Expressions) and self-executing functions, but not that. &gt; you should only use typeof to check if a variable is defined. Otherwise, you will have very inconsistent behavior. One thing you should never compare with typeof is a non-primitive datatype; in other words, Date and Array will never return "date" or "array". [There's only a handful of primitives](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) -- outside of these, your comparison will fail. If you need a more accurate comparison, use instanceof.
&gt; as long as it's not violating the essential nature of JS (prototypical inheritance) Every additional complication has a cost, even if it is only in the parser. And these changes in particular seem like they may be more than syntax, but actually imposing work and secret behaviors such as in your example the constructor ES5 would have a secret myNumber=42 function created and prepended to it in a way that may be non-obvious, and at worst cause surprising side effects. ( class xyx { myNumber: computeNumber(global),} and you can see this going down a deeeep rabit hole. I dont even want to get into the private or static thing and all the other nasty fallout this impose; its not free and its not just sugar. But lets say ti was just sugar; its still bad. Writing classes in JS was and is awkward, and I think thats great. I think people shouldnt write classes, and should bring OOP baggage over into their JS code. You can make amazing and flexible code bases in java without using the magical "this" pointer one single time. 
Thankyou very much! :)
&gt;Writing classes in JS was and is awkward, and I think thats great. I think people shouldnt write classes, and should bring OOP baggage over into their JS code. That's great for you, but you're basically letting your personal subjective biases lead you into direct conflict with the language itself, which is *clearly and emphatically* designed to support OOP (in addition to a number of other programming styles) regardless of whether you approve of that or not. Criticising a language feature on the basis of its usefulness or elegance is fine, but actually saying "this objectively makes the language worse at its stated goal X, but that's fine because personally I hate X and think everyone else should stop doing it" is... well... just *silly* as an addition to any language design discussion.
My interpretation is, _"you're being a dick, stop it"_. Even so, saying someone is 'almost' a dick is still unacceptable. I'll apologize for my initial tone in the warning -- "Don't be a jerk" is one of our report reasons, which I added a few months back in response to something I read. Which I thought was from an admin on reddit, but I'm having trouble locating that source now, so perhaps I dreamed it up. Point being, I let my frustration manifest itself in a smarmy response, which is completely counterproductive and not an example I'd like to set. &gt; Can I assume, though, that it's considered perfectly ok to impugn someone's integrity, accuse them of being disingenuous and refusing in bad faith to engage with someone's arguments as long as I don't use any specific nouns when I do it? I'm not sure what you're alluding to; I surely didn't mean to imply any of the above, if that's what your take-away was. I also don't care to get involved in a rationalwiki-esqe debate about it, so I'll apologize if that's how you took it, because that's not what I meant. Last thing I'll add on this subject; I often refer to this when it comes to online discourse: http://www.paulgraham.com/disagree.html Specifically, _"DH0. Name-calling."_ It doesn't matter how you say it, it's never OK to belittle others -- attack ideas, not people. I hope that answers your question.
Also, I'm going to remove your warning -- you're an established redditor, you've participated in /r/javascript for some time (and this is the first incident that I can recall), and this seems more of a misunderstanding than anything. No hard feelings, hopefully? 
&gt; clearly and emphatically designed to support OOP Hard to agree with that when you can see how little OOP support it had at first. You could use it to a limited degree, but it certainly steered people away from it into a more maintainable programming style. And Im criticising it primarily for the added complexity, not only the needless sugar. 
Cool idea, but most devs, sysadmins, and geeks in general will mostly be running some linux distro or mac. It seems like it only works for windows to windows, and that is going to severely limit adoption. Let me know if I'm wrong.
Riot.js ?
They aren't my reasons, they are their reasons. &gt; Having a private field named x must not prevent there from being a public field named x This is because, as I understand their reasoning, private variables should be undetectable. If you got an error for accessing public x, then you'd know there was a private x. &gt; What happens if they want to add protected access later? Maybe %foo? What about internal access down the line? @foo? Protected and internal don't make much sense with JS, as there are no namespaces or packages. The main point of #privateVar is to enable for full encapsulation. 
&gt; They aren't my reasons, they are their reasons. I didn't say they're your reasons. I just said they're poor reasons. &gt; Protected and internal don't make much sense with JS, as there are no namespaces or packages. Yet. There were no classes, either. What JavaScript is slowly reinventing is the abandoned "ECMAScript4" proposal. It had classes, it had private properties, it had *namespaces*. All of these things will inevitably be in JavaScript again, one form another. TypeScript is very similar to ECMAScript4 and people seem to be enjoying it. Standards should take existing popular proven improvements, de-facto standards basically, and put a stamp on them. That's the best way for standards to work. Because if you try to make a standard by putting a few people in a room, isolating them, and leaving them there to "find a solution" to something, they'll inevitably produce some kind of a monster. Do you remember XHTML 2.0? That's the kind of "monster" I'm talking about. Unfit to live, and completely isolated from the needs of those it purports to serve. It's all good intentions, of course. The road to hell is covered with them.
Okay. Thank you for the help :)
ya, naive loop through them and join the resulting objects. I don't see any requirement for thinking of clever solutions, unless elegance is what u r after. Worst case complexity is O(n) ... Also indices start at 0 .. :D
 Mind to give an example that achieves the result with correct indices :P?
But can I cancel it?
2 min solution ... take it up from here.. You have to join the objects, replace the loops with the correct values etc.. var aObj = [{a: 1}]; var bObj = [{b: 2}]; var result1 = {}, result2 = {}; aObj.forEach((a, index) =&gt; { result1[index] = a; }); bObj.forEach((b, index) =&gt; { result2[index] = b; }); console.log(result1); console.log(result2); 
Oh, maybe I mistyped my question but the actual **combining** part is my problem, not the looping over the arrays. I found Object.assign on MDN but it does not create the form I mentioned above. I cannot find the function I need to use to combine them into the required form.
Stop looking for functions ... you have control of the objects mate console.log({links: result1, headlines: result2}); Hope I am not misunderstanding you again... it's pretty simple 
Expected , but got ;
Oh gosh, sometimes the solution is that easy that one does not even consider it... Thanks mate! :D
years of dealing with gigantic JSON will show you the simplest ways .. that's basically it :D Glad to help ... 
We have standard modules, which are an alternative to namespaces and packages. Perhaps there could be a protected kind of thing with modules, but in that case you just have `protected #propertyName` instead, so that the lesser encapsulation is opt-in. 
Thanks a lot. That fixed it for me.
Worse than that I think, was that the author used screenshots. 
I think every language has its place, but the idea that JavaScript can and should be used everywhere is just ludicrous to me. Hundreds of megabytes for a chat app (slack) is just unacceptable. It just feels like trying to smash a square peg through a round hole sometimes. 
Defining your own symbols has pretty limited application, most usage will be of [well-known symbols](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols) in order to modify or implement default behaviours for iteration, string conversion, etc. If symbols were in JS from the beginning, existing methods like `toString`, `toJSON` and `valueOf` would most likely have used them instead. If you've used Python, you can think of well-known symbol properties as being kinda like its `__double_underscore__` properties/methods.
Choo.js ?
I've never had a task like that in an interview. Typically they give you 3 or 4 simple &lt;5 minute tasks to pseudo code on the whiteboard. They want to see you think through a problem. My current company asked me, for example: Write a function that accepts a collection of vehicles and returns the average gas mileage. Design a table structure for a small application ( around 4 tables maybe, don't remember the specifics they gave me) Another job had me actually code. They gave me a started project with a data table and asked me to implement sorting via clicking on headers. I think they allotted an hour. 
A gig of RAM for a chat app? Yes please
My god. Do you work in hell? 
While in fact that might be true, the initially delivered content weighs in at something like 5mb. Which is not a lot considering the fact, that I'm looking at a design channel that is full of screenshots. Please give a Tornado equivalent that addresses the same level of complexity in like 0.5mb worth of source code. 
We all have our own professional hells.
What's an acceptable size?
I added the Slack website to desktop so it runs as a standalone Chrome window. Am I missing out on something?
That was quick
Call me back when he fullfills it
I would say it depends on the problem it's solving. I'm not sure a chat app warrants hundreds of megabytes. I'm not sure it's practical or a good paradigm to have to package a full chrome engine with each desktop app. I have nothing against JavaScript as a language (I am a full stack developer that writes it every day), but I don't think node is the be-all end-all.
Probably not it, but Ractive is pretty cool https://ractive.js.org
I would much rather run something that takes up less disk space, uses less resources, and is faster because it's native or byte code rather than interpreted script
This is one of those "flying car" ideas that sounds *just* plausible enough, but in reality, will never materialize because it's fundamentally flawed.
I can't say you're wrong because I only have allegorical evidence, but the firm I work for Devs in the .net stack and any cool Remote Desktop tools are helpful.
No. try asking a HOT Asian chick
I have found myself making higher order reducers multiple times wondering why I wasn't doing it before. This seems like such a simple concepts but I think it is quite innovative and looks fun to use.
There were fully functional chat apps back when 64MB of RAM was considered luxurious. I had minimal chat on a PC with 128KB.
The smallest *view library* out there is probably hyperapp (1.4) KB. Only smaller is [picodom](https://github.com/picodom/picodom) (998 bytes), which is a virtual DOM rather than a full framework (`h.js` and `patch.js`). For example: – https://codepen.io/picodom/pen/BRbJpG?editors=0010 import { h, patch } from "picodom" let element, oldNode function render(newNode) { return (element = patch( document.body, element, oldNode, (oldNode = newNode) )) } function view(state) { return ( &lt;div&gt; &lt;h1&gt;{state}&lt;/h1&gt; &lt;input autofocus type="text" value={state} oninput={e =&gt; render(view(e.target.value))} // Render loop based on user input. /&gt; &lt;/div&gt; ) } render(view("Hello!")) // The first render. 
Typically, in traditional Node.js/[Express](https://expressjs.com/) applications, the backend code and frontend code are kept together. For example, the views a traditionally in a folder called `views/` and public assets such as js and css are in `public/`. So the folder structure as of now would look like the following: example ├── public └── views The views are usually written in some templating language. [Pug](https://pugjs.org/)/Jade is typically used, but there are many others as listed [here](https://github.com/expressjs/express/wiki#template-engines). You can try to use plain HTML as you have been, but you'll find the experience a lot better (in theory) by using a templating language. Now for the server side code, it can be structured in a number of ways. But traditionally, you will 90% of time encounter the [MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) pattern. So knowing that our project structure now looks like: example ├── controllers ├── models ├── public └── views You're main server source `index.js` is typically called `app.js` so now we have: example ├── app.js ├── controllers ├── models ├── public └── views The Express website and it's tutorials are more than enough to get started. --- You can certainly use NGINX as you environment, but nowadays people are using [Docker](https://www.docker.com/), [Heroku](https://www.heroku.com/), [Dokku](http://dokku.viewdocs.io/dokku/), or some more higher-end enterprise stack like [AWS](https://aws.amazon.com/). Generally 755 is fine, but again using Docker containers, it'll "contain" itself. You should be keeping the whole project, like the structure above under version control. With all that said [here](https://github.com/sahat/hackathon-starter/) is a fairly popular Express project. You would just put it in `/var/www` or event in your home dir `~/`, it doesn't matter really. Then either use Docker to deploy or start the app with [pm2](http://pm2.keymetrics.io/) and proxy it with NGINX.
I agree with you, but in the end the real-life choice comes down to no app getting developed vs an app that uses something like Electron. I think end users as a whole are better off with programs like Slack, Discord, Spotify etc existing at all.
\#18 is just wrong &gt; 18. FOR-OF KEYWORD &gt; The for-of keyword is similar to for-in. &gt; There’s a subtle difference between for-of and for-in, but for the most part you can use for-of as a drop-in replacement for the older syntax. It just adds the ability to use generators implicitly For-of returns the element in arrays only. For-in returns the key. Edit: Looking at your post history, you post links mainly to this site so this is probably just spam.
This looks pretty neat! Any plans to add lifecycle methods?
Well, this implementation yes, but future implementations may differ from that one, so I wouldn't be that sure about an idea generally.
Hahaha me too
Websites and -apps shouldn't be mobile optimized, they should simply be built for mobile first. Then you won't ever have problems like this. Cool idea - not sure about the efficiency though.
You know there's already a software project called fmod? It's a sound engine. Had me confused there for a second.
I came for buns, and got disappointed. Luckily we have Finally for that case.
https://hackernoon.com/how-i-converted-my-react-app-to-vanillajs-and-whether-or-not-it-was-a-terrible-idea-4b14b1b2faff I'm not sure if this is it because it's not a framework, just some functions for replacing jsx and some extra stuff.
If deep equality is default or an allowed language feature (say the ==== operator), both array and object comparisons would suddenly become not just slower (for obvious reasons), but also highly inconsistent. It always takes roughly the same amount of time to compare two strings (regardless of length). Number comparisons should always take the same amount of time. Same wih all other primatives and references (assuming there's nothing atypical in the low level implementation of js compared to other languages and their primatives). With deep equality, you face the potential of a comparison being not just slower, but orders of magnitude slower, so much so that it could create other non-intuitive things: "All I did was compare a single variable to another one every frame and the browser tab crashed. What's going on?" Then, while it is possible to create a deep object comparison that handles loops, I don't think it's possible to create a general case solution to deep comparisons on objects that modify themselves in their own getters. (That is, create an object with a property getter that, when accessed, adds another self-creating object to another child in the hierarchy of the children being compared.) You could make objects that grow infinitely as they are explored by the deep comparison operation. Obviously a bad idea, but ultimately impossible to program around no matter how clever your comparison function is. You'd have to guarantee that objects are frozen temporarily while an this function is accessed for comparison, unlike all other functions, be they built in or made locally.
You have to link the jsscript to the HTML document.
It's because you put the line button.onclick="check()"; you wanted button.onclick = check; https://codepen.io/anon/pen/RZrPLo 
Codepen automatically does that for you
ahh so I only use () with inline js. Thanks man great help! 
however now, when I click it it adds the new class every time I click the button. Is there a way to toggle this, like when I click the second time the class disappears.
You'll wanna use classList.toggle instead of className see https://codepen.io/anon/pen/NvxqzM
How does this have 22 upvotes, I have never even heard about it, and it has no comments?
&gt; The is a quick setup using webpack to watch your files and to compile your code from ES5 to ES6. You have it the wrong way around in the last bit of that sentence ;)
other simple tree editors: https://jaredforsyth.com/treed/ https://github.com/angular-ui-tree/angular-ui-tree https://framindmap.org/c/login https://medium.com/@RubenOostinga/avoiding-deeply-nested-component-trees-973edb632991 https://facebook.github.io/react-native/blog/2017/03/13/idx-the-existential-function.html https://news.ycombinator.com/item?id=13862650 
Sure mate - no problem. ;-)
&gt; Even so, saying someone is 'almost' a dick is still unacceptable. Fair enough - lesson learned, and I apologise again. &gt; I'm not sure what you're alluding to; I surely didn't mean to imply any of the above, if that's what your take-away was. I was alluding to your message where you accused me of disingenuously hand-waving away your comment. ;-) &gt; It doesn't matter how you say it, it's never OK to belittle others -- attack ideas, not people. That's a good line to draw, and I respect that. FWIW I took your accusation of hand-waving as a personal attack on my integrity (rather than on my position of "the mere existence of PHP doesn't make a difference to the issue being debated here"), but now we're quibbling about trivial details, and I apologise for taking it the wrong way if it wasn't intended as a personal criticism. Thanks for clarifying, and I'm glad it's settled. Apologies again, and I'll be more careful in future.
I wonder how much smaller it would be if it was coded in Qt/QML 
Can someone explain what .onreadystatechange is? I've always used .onload and it works fine. Is this one of those XHR Level 1 vs 2 things?
That's fair enough. But we don't all have to support IE6. It's 2017 after all.
I'd rather worry about how much longer it would take and how much larger a team would have to be to come even near the vivid experience of Slack, Discord and other js driven apps. Ram and size are just temporary shortcomings anyway due to Chromium claiming 95% of the distribution size. When js renders native that 95% goes away as well as ram usage.
.onload is great except not supported until IE9. https://stackoverflow.com/questions/5418403/xmlhttprequest-wont-work-in-ie-7-8-but-works-in-other-browsers So had to fall back to using onreadystatechange which I only care about being readystate 4 and a status of 200 in my case.
&gt; You know there's already a software project called fmod? A very popular one, that is. FMOD was used by a ton of games and is available for a zillion platforms. It's also used by Unity and the Unreal engine. I remember using it on Win 9x. It has been around for ages.
well spotted! :-)
I've just been playing around with it, and there seems to be some semantic differences between this `Promise.prototype.finally()` and `try {...} finally {...}` in an async function. Specifically, in an async function returning a new value within the `finally` block after initially returning or throwing within the `try` block replaces the resolved value of the promise. async function tryReturnFinallyReturn() { try { return "FAIL"; } finally { return "PASS"; } } function test(fn) { return fn().then( x =&gt; console.log(fn.name, "then", x), x =&gt; console.log(fn.name, "catch", x.message) ); } test(tryReturnFinallyReturn); Compare this with the equivalent using the new `Promise.prototype.finally()` method: function promiseReturnFinallyReturn() { return new Promise(() =&gt; "PASS") .finally(() =&gt; "FAIL"); } test(promiseReturnFinallyReturn); The return value from the *onFinally* callback was ignored (unless it throws or returns a rejected promise) and the original promise's resolved or rejected value gets propagated to the next handler. As far as I can tell, this does seem to be the correct behaviour as specified in the [draft spec](https://tc39.github.io/proposal-promise-finally/), and I suppose it makes sense since there's no clear way to distinguish between an explicit or implicit return in the onFinally handler. But it is a little bit weird. Although, WebKit seems to pass all of [my test cases](https://codepen.io/lachlanhunt/pen/MvKKjp?editors=0012), which is good.
It makes perfect sense when you wrap your head around it
I would be interested to know if anyone had any ideas as to how this could be improved and extended?
Are there any polyfills or Babel plugins for this?
i realized that after i uploaded the package to npm and to be honest with you i was shocked because the sound engine fmod seems too popular. But the name is still relevant to the project main function, file modifier: fmod and i already published it and still unique in npm. 
Sounds like the core of your question has nothing to do with Google maps api or even the concept of 'clicking on a map'. Your last statement really sums it up, you want to be able to have users create and share content with each other. Maybe start with some simple tutorials for making a restful todo list or chat that would help you understand that part of the problem. While you arent making a todo app, some of the core concepts of writing data then displaying it back out will be covered. Then you can reuse those views as marker pop ups in Google maps, binding event listeners to the map itself to trigger creating a new message then binding click listeners on the markers to trigger displaying other user messages. 
JS is a runtime, and static languages live mostly in the compiler. So in that context, TypeScript fills that space very nicely, without JS needing to expose static invariants at runtime.
https://github.com/es-shims/Promise.prototype.finally
**[Landscaper](https://github.com/bitovi/landscaper)** This week and a bit of last I worked on a command-line tool which applies code mods to local directories and Github repos (creating a new branch and submitting a PR). My company maintains a lot of open source projects and we really wanted a way to make sweeping changes to 300+ repos without wasting someone's week. I really liked working on it because I had never made a CLI so complex before. Focusing on a good user experience for a text based user interface was a nice change of pace from usual web app work, and a great challenge.
[A webapp to take notes using Markdown](https://izeau.github.io/notes). Also provides bullet journal-like lists. Everything is stored locally (IndexedDB). It’s powered by Vue.js which I had never used and have probably misused, but hey, it’s just a PoC anyway. Only tested on OSX / Chrome, I’ll gladly take pull requests :)
And yet, Slack is the best. Does it really matter when it's a one-time download for a desktop app? Should they have used another language so angry Internet nerds don't scold them about file size?
It's visually well-designed, yes, and functions well enough to get a wide user base. And slack has great support. Organizationally, the team building slack gets huge respect from me. But if I start running multiple electron-based apps simultaneously, I quickly run out of RAM. Even for the simplest things! It's not about the language, it's about pragmatism. It doesn't seem practical to me to devote that much disk space and memory to apps because the engineers chose to use JavaScript over any number of other languages. 
**The one parser to rule them all** https://github.com/Unibeautify/parse-framework/ I am working on a uniform generic parser for the upcoming Unibeautify (a universal beautifier to beautify all the languages in all IDEs and environments) application - https://github.com/Unibeautify/unibeautify/issues/8#issuecomment-310282589 The parser is still full of regression and bugs from frequent refactoring and enhancements to the architecture, but several tools exist to play around with it.
Was hoping for something that would work with the standard syntax. Thanks though. Edit: Ignore me.
We are using ducks in our codebase. The thing I hate about them is that it'crazy easy to start getting circular dependencies. There is duck A, and it one of its action creators wants to also call an action creator from duck B. And then there is duck B. And one of its action creators wants to dispatch an action with a constant defined in duck A. Boom, you start getting undefineds during imports. I hate that!
Thanks for the mention! You can check out the book online, for free (as mentioned in the article): http://exploringjs.com/es2016-es2017/
This is an advertising piece...
* You should probably use babel-preset-env: * Official docs: https://github.com/babel/babel-preset-env * A blog post by me: http://2ality.com/2017/02/babel-preset-env.html * I’ve created a similar setup, but for libraries: http://2ality.com/2017/07/npm-packages-via-babel.html
Yeah, that's one of the reasons I personally do not prefer them. As I said in my post [The Tao of Redux, Part 2 - Practice and Philosophy](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/): &gt; To me, there are a couple conceptual downsides to the "ducks" pattern. One is that it guides you away from the idea of multiple slice reducers independently responding to the same action. Nothing about "ducks" prevents you from having multiple reducers respond, but having everything in one file somewhat suggests that it's all self-contained and not as likely to interact with other parts of the system. There's also some aspects of dependency chains and imports involved - if any other part of the system wants to import action creators from a duck, it will kind of drag along the reducer logic in the process. The reducers may not actually get imported elsewhere, but there's a dependency on that one file. If that doesn't bother you, feel free to use "ducks".
Damn I had to do this and gave up a while back... my boss wanted to reply emails from the website with the history traceback from previous emails as outlook does. I couldn't find any decent php libraries that do this, I'm gonna try it when I finish some other shit, thanks!
Given: &gt; An XMLHttpRequest object has an associated state, which is one of unsent, opened, headers received, loading, and done. Unless stated otherwise it is unsent. [1] The `onreadystatechange` event will fire whenever the value of the ready state changes. [1]: https://xhr.spec.whatwg.org/#interface-xmlhttprequest
Yeah but now I have to go buy a bunch more RAM because running them all simultaneously slows the system to an absolute crawl. I think there's an acceptable level of overhead due to abstraction, and that level is certainly debatable, but I think electron-based apps and their overhead are beyond the pale. 
Yeah, but as of now, that's not the reality we live in. I suppose an argument could be made that the application development and electron buy-in pushes towards that future when js is more "native", and I could see myself being persuaded by that, but right now end users are paying a price in disk space and RAM utilization for the sake of developer convenience. 
Hi /u/amitshekhariitbhu, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `mindorks.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [blog.mindorks.com](/search?q=%28and+site%3A%27blog.mindorks.com%27+author%3A%27amitshekhariitbhu%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|42|65%
Whatever they tell you, don't take it at face value. For the coding task at my current job, they said I'd get an hour, then half an hour later the tech director walked into the room and told me to stop. They wanted to see my process, not necessarily what I was going to smash out in an hour.
This feels very close to what I'm thinking of, thanks! I'm pretty sure what I saw was packaged up and being distributed through GitHub (or similar) rather than being a write up like this.
thanks! i have updated to use babel-preset-env! I didn't know about that! anything else you can think of let me know.
Picodom is in there with the hyperapp family. Not what I was thinking of but I appreciate the suggestion.
Nope, thinking much smaller.
you could also have done `button.addEventListener("click", check);`
Electron isn't *so* bad, if you're in a smaller team or make very flexible applications that need to feel alive, 100mb + a bit of ram is a pretty decent deal for all the other stuff it saves you from. From what i've read react-native for desktop is ready, all it's missing now is a nice and easy toolbox for installers/updaters and maybe a node-runtime (?), something like Electron. Not sure if nativescript has desktop options as well. I don't think the current chromium situation will go on for much longer once everything's in place. 
Thanks for the getters example, this is another issue I haven't really thought of.
well you are assigning the variable `.onclick` the function `check`. you don't want to call the function itself because then `.onclick` gets set the return value of function `check()` to inline it via js you would do something like `button.setProperty("onclick", "check()");`
I have created an app that shows what movies have been created in London https://go2cinema.com/filming-location-map/
Maybe [cell](https://github.com/intercellular/cell)? It's also in the small library park ~5 KB. If it isn't that one either, then I guess I am out of ideas! But I'd love to see if you do to find one smaller than hyperapp! 😏
It was probably nice writing a book 1/3 the size of ES6.
Hi! Let me start by saying, what worked for us may not worked for you. Each project is different. This situation used to happen quite a lot with redux-thunk, but when we removed it, we removed dependencies between action creator. Do you use redux-thunk by any chance? If not, can you provide me a small use case so I can amend the article?
You are totally correct by saying that some cross-concerns are tough to address when you group data and functions on the data together. Redux Ducks is an object-oriented organization in a way. We don't apply Redux Ducks like a specs, and we have a couple of action type constants exposed to reduce in several modules. Even if we cheated in a couple of spots, the general intend of organizing in Ducks delivered value.
thanks
ok thank you!
thanks
Where is the 'information you type in' going to be stored? Are you going to have a database of some kind? 
Also, you should probably just try stack overflow
Always a fun intro project :)
Came here to mention this same issue with redux-ducks. Haven't read that blog post yet, thanks for sharing.
We've figured this out about 8 months into the project and it's difficult getting people to adhere to it. It only takes one import to ruin the effort
Yep, we are using thunks :-) Like you said in the article, refactoring this part later is a real pain, so once we went the thunk route we haven’t switched to sagas.
http://www.fmod.org/download/ &gt; FMOD is a registered trademark of Firelight Technologies Pty Ltd. I'd change the name.
Qt/QML is pretty easy to develop in. I would imagine the developer resources are the same, experience and skill set required though is different. C++ vs pure Javascript
What do you mean "standard syntax"? This polyfills the global Promise object.
Ah, you're right! I missed the second half of the example. Thank you both!
No, not cell either. That's a bit larger. This thing im thinking of was most undoubtedly under 1k. It was extremely minimalistic.
Are you saying you only want one button to have an ".active"-class at a time? If so, the best solution is probably to loop through all the buttons, and remove the .active-class first before adding it. ~~Its been some time since I worked with jQuery, but I believe the query selection .geoCompButton.active is not supported, right?~~ EDIT: Oh, looks like it is. :)
What do people here use hot-reloading for? I always thought that hot-reloading is for those extreme uptime services, like Amazon. It does not seem particularly easy to reason about the effects of hot-reloading to use it as a standard debugging tool.
Due to poor url strategy from higher ups that is what had to be done. Is there any way to indexOf a route itself? 
One of those 'no duh' moments for sure.... 
but you can't change it after uploaded to npm that will be problem 
Man, I bet that chapter on ES2016 was a real pain to write, given all the new features you had to cover :)
When you're running a server during development you don't want to have to restart the entire server manually every time you make a change. Popular tools to restart the server on file changes are nodemon, forever and a few others. If you're using Webpack and the HotModuleReplacement-plugin you don't even have to restart the server, you can just remove the listeners on changes and attach them to the updated instance, making it quite a bit faster than restarting.
So, I think I solved what you want. https://jsfiddle.net/4cs8acmf/1/ The real problem you had was that the .geoCompButton.active only takes the first one it hits. But, if you check that the "this" element has the active class first, you can then check if there is any need to remove the active class or not.
Thank you!!! you helped me figure it out. All of my slugs started with Z-Wave so I did `router.get('/z-wave*', function(req, res) {` to fix that. Will still sanity check the bundle.
Can you explain further?
Is this the solution you are looking for? https://jsfiddle.net/4cs8acmf/1/ $('.geoCompButton').click(function() { if ($('.geoCompButton').hasClass('active')) { var clickedButtonIsActive = $(this).hasClass('active'); $('.geoCompButton.active').removeClass('active'); if (!clickedButtonIsActive) { $(this).addClass('active'); } } else { $(this).addClass('active'); } }); 
Some pointers: * Take a look at parseInt docs and see what second argument does, do You really need it there? * There should be a way to store 'the biggest value so far' while the loop is doing the lifting. * You really want to use split() method on those strings, then parse what pops out, then sum, and then compare the number to the 'biggest so far one'. Edit: formatting.
Yes, it is. Thanks. Let me see if I understand this. So you first check if ANY of the buttons have the class active, if not, you add it to the button you clicked. If so, the class is removed from all of those buttons. THEN you check if the one you just clicked has the active class. If not, add it. I just forgot the part where I needed to make a conditional to add the class to the currently clicked button, and not add the class regardless. 
Yeah, correct. :) And, I save it to a variable, so I can do the condition checking after the removal of the active class from all buttons. That's also a good practice, because it looks cleaner.
How come !$(this).hasClass('active') does not work? or $(this).hasClass('active') == false
this is all very new to me.... where if the function defined and what are the variables a and b on the first two lines?
my formatting is bad? 
Thanks for the tip! 
Here's better one (in WebGL): http://xpl.github.io/expression/
Indeed! ES6 is too big.
Probably the only ECMAScript version where an exhaustive description of what’s new would fit on a business card. ;-)
Um, well - seems a bit weird but create an object where the keys are the numbers and the values are the conversion, then create a function that runs through each element of the string and runs math random to determine if the conversion happens. Just off the top of my head
Use String.prototype.replace with a regex and a callback. Inside the callback, check if Math.random() is smaller than 0.4. If so, return one of its replacements. Otherwise, return the character.
does it come with pylons?
Not sure gulp constitutes modern..
* store your mappings in a data structure (map of array of characters) where the index is the characters 0-9 and the value is an array of possible letters, e.g. `{ '0': ['O', 'o'] }` * iterate through characters in input string - use the character to lookup the possible letters from your data structure - use your probability constraint to generate an index between 0 and the length of the array of possible letters for this value - append the character to your return string 
This made me wonder about the idea of using BabelJS to target transpilation to a version of V8 (or another engine, even) to provide platform-specific performance optimizations.
Functional-ish version: function maxCC(ccNumbers) { function sum(ccNumber) { return ccNumber .split('') .filter(c =&gt; c!== '-') .map(c =&gt; parseInt(c, 10)) .reduce((a, b) =&gt; a + b, 0); } let map = new Map(ccNumbers.map(n =&gt; [sum(n), n])); let max = Math.max(...map.keys()); return map.get(max); } Imperative version: function maxCC(ccNumbers) { let maxSum = 0; let max; for (let cc of ccNumbers) { let sum = 0; for (let digit of cc) { if (digit !== '-') { sum += parseInt(digit, 10); } } if (sum &gt; maxSum) { maxSum = sum; max = cc; } } return max; } The functional version returns the second CC with a sum of 81 and the imperative version returns the first CC with a sum of 81.
&gt; based on making smaller references to native APIs I think this means you are looking for a display library like jquery rather than a framework? I found [displayjs](https://display.js.org/), but it is not less than 1 KB. What a mystery! 😁
Indeed...
So we have gone full circle?
Ok man 😐
that for-in drop is as bad as the object-creation speedup is good :/
Elements or the whole page can become blurry when you use transforms, [as they cause the browser to switch from CPU to GPU rendering.](http://keithclark.co.uk/articles/gpu-text-rendering-in-webkit/) (This is a feature of transform vs left/top/etc, that transform has better performance by using the GPU.) https://stackoverflow.com/questions/6411361/webkit-based-blurry-distorted-text-post-animation-via-translate3d
Two things: 1) Commenting is killing your code's clarity. 2) What little clarity remains is obscured by the use of with. It's not immediately obvious object properties become variables. You couldn't just shorthand it to something like xhr? with( new( this.XMLHttpRequest || ActiveXObject )( 'MSXML2.XMLHTTP.3.0' ) ) { // jshint ignore:line // The keyword "with" is perfectly valid JS, just discouraged from use /* httpRequest. */ onreadystatechange = function () { // Ignoring any error response, as you can gather this from the Network Inspector. // Intentionally using the co-ercable equals, as both sides of each test are simple and numeric if ( /* httpRequest. */ readyState * /* httpRequest. */ status == 800 ) { d( /* httpRequest. */ response ); } }; /* httpRequest. */ send( /* httpRequest. */ open( 'GET', u ) ); A revised version of that block (with vars and whatnot): // initialize XHR object var xhr = new( this.XMLHttpRequest || ActiveXObject )( 'MSXML2.XMLHTTP.3.0' ); // pass response to done() xhr.onreadystatechange = function() { // ignoring error responses if ( (xhr.readyState) * (xhr.status) == 800 ) { d( xhr.response ); }; // send request xhr.send( xhr.open( 'GET', u ) ); 
Ahhhhhhh thank you for this. I was wondering what was causing this.
Compiling an interpreted language to target a different version of the interpreted language in order to optimize for a different just in time compiler.. 
please indent the statements below each if()... it will save you a ton of headache trying to figure out if your if conditions are broken. can you provide a better description of how it doesn't work? and are there any errors on the console? 
no, his was, and he edited it to change it. 
This is bad question. Usually no one have a time to check whole your code (which is even not known for what it should do) to find an error for you. - What your code should do? - What is going wrong? - Which error do you see in the console? (usually after this step you understand what's going on by yourself ;) ) Add more details :) Also, it will help if you fix the formatting and add curly brakets for `if`s (it's not required for single-line statements, but it make code more visual-friendly and may help to find issues). p.s. right now, as I see, there is a TypeError because you don't have element with id `"mins"` while trying to get it and get a value from it: `document.getElementById("mins").value)`
Can someone TLDR this? Or at least break down the basic ideas? I do not understand this too well. :/
Hi /u/84935, if you have a specific question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your work/homework for you.
You inspired a lot of changes in my code and I thought about updating mine but realized it's almost identical to yours now! Thanks :)
TLDR Google writes new Interpreter which is used by newer versions of Node, generally makes things faster 
thanks, i corrected that and edited the original post
thanks, i've done that and edited the original post. The errors are : http://imgur.com/a/aCCCT
you have three bugs: 1. your function placeOrder needs to take an argument 'form'. you're passing in the form in the click handler in the html but it's not defined in your function, so it doesn't work. line 35. 2. you are invoking a method, 'isNan' when you should be invoking 'isNaN' line 12. 3. you are attempting to search the dom for the ID 'mins' instead of minutes on line 40. if you fix those it will work. 
Thanks so much, i corrected them all and it works now. Respect! Thanks all, guys
Played around with the spotify api and made a little web app which displays your favourite music https://gobeli.github.io/your-favourite-music/
cheers. for what it's worth, all of those errors were easily identified in the console, which logs errors JS throws when it encounters a bug. Start learning to debug now and you'll save yourself a ton of headaches.
- [karma-snapshot](https://github.com/localvoid/karma-snapshot) Snapshot testing in a browser with Karma. - [rtext](https://github.com/localvoid/rtext) Set of packages for generating and transforming rich texts into different formats. 
Try catch improvements are timely as people use async/await more.
Not easier than current gen technologies in the web and the resources on npm can't be matched. Look how Slack, Discord, VScode, Atom, Hyperterm and others came out of nowhere and after a couple of months they had more features and flexibility than longstanding native competition. I've been coding C++/C# most of my career, i think there's not the smallest chance they would be able to compete against a modern js-driven stack in pretty much anything that concerns frontend. If C++/Qt wanted to do a Slack clone, it would be 10 times bigger in codesize, would take 10 times as long, with a team 10 times as large, costing 10 times as much. And that's probably a very optimistic estimation.
User breakpoints https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints Basically open the dev with F12 and set your breakpoints
1. Put breakpoint and in a call stack (in dev tool) check previous function (it called your function) 2. Throw an error from you function, catch it with try-catch, there is a 'stack' property of error object with all needed to you information. 
Nice
PS don't overuse commenting. Using the right names for variables will make it clear enough :) Like a variable 'donutprice' doesn't need a comment ' this is the donutprice'. It only makes the code harder to read
Honestly.. I don't think there is any real calculation in your estimation. I have personally built a media client front-end using Qt/QML for BlackBerry 10. That was 5 years ago using their native Cascades UI. Also received the "Built For Blackberry" designation because it looks and feels like a native blackberry application. I did this as a one man team in about 6 months of development after not having touched C++ for about 6 years.. though I had a really good foundation of asynchronous logic and adapted it to multi-threading. I may have had a good head start with the Cascades UI framework already in place.. but I would bet without googling there is at least 1 UI framework out there already available publicly for Qt. 
Thank god, now I can allocate 500 million objects even faster!
There are deoptimization patterns (some of which are common practice/necessary) that could slow down your node application. New version of the V8 engine addresses some of that.
Hey /r/javascript. This library has been an idea of mine for a while now - main goal being having an easy to use api that allows for complex page transitions. The library currently has React bindings, but Vue and Angular bindings are coming soon. It's in some ways similar to react-overdrive, but the biggest differences are it's made for any view library, and it's made to be able to support an unlimited amount of animation customisations. Check it out, give it a star, and let me know your thoughts. A lot more problems to solve - but it's getting there ;-). 
It's described here: https://docs.npmjs.com/how-npm-works/npm3-nondet Basically, it comes down to if you install a new package _after_ having run `npm install` on all other dependencies, then the first install will have determined which dependencies will be installed top-level, which will affect the newly installed package's dependencies. If, afterwards, someone then does a fresh install with dependencies _with the newly installed dependency added_, then it will recalculate which packages should be installed in the top-level, and might thus end up at a different `node_modules` structure than the first person did.
X-Post referenced from [/r/reactjs](http://np.reddit.com/r/reactjs) by /u/madou9 [yubaba - Orchestrated page transitions made easy](http://np.reddit.com/r/reactjs/comments/6qgk0f/yubaba_orchestrated_page_transitions_made_easy/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
It's just a small part of a project I'm doing for fun. I really appreciate the help!
Thanks!
That's the output from a linter. A linter basically looks at the code and then makes some suggestions. Linters can catch syntax errors and make style/convention suggestions. But they won't show you runtime errors. For that, you actually have to run the code. When you write code for browsers, always check the console (F12 -&gt; Console) for errors.
They're not making these apps in Electron for no reason. I sincerely doubt Qt can touch the flexibility and vividness of a js driven stack. Another example: we've been building a complex CAD system in C#, took many years to develop, and [now we're doing the same for the web/electron.](https://twitter.com/0xca0a/status/884851183051001856) It's in the beginning stages but it's stunning to see the amount of code it saved us already and the ease and speed of development. While lots of the UI is missing, it already does more technically, and it implements these things in a manner that its native counterpart would struggle with so hard that it's not feasible to even attempt. Things like node, react, vue, angular, redux, etc. and npms eco system (ui libraries, components, ...) have made application development so powerful it's not hard to imagine why more and more teams are going for it.
I'll surely look into that.
Okay, i'll do that from now on
alright, i'll start making some amends. thanks too.
No argument the community around JS is a huge benefit and there is generally more code involved with C++. JS can also be used within Qt/QML which I did in some parts as well. However, when it comes to memory footprint and performance.. not so sure. In any case, it is a lot cheaper to build JS apps then it is C++, the worker pool is a fuck ton larger and comes a lot cheaper. Also the fact that the technologies used by the end user (browser) are pretty much JS focused.
thanks, i got the function body, but it's opening into another source file (like debugger//randomname) so can't able to access the location the function body , can i get the location and how? the funtion i encoded so can't use search method
thanks, i got the function body, but it's opening into another source file (like debugger//randomname) so can't able to access the location the function body , can i get the location and how? the funtion i encoded so can't use search method
just one more question, what you mean with ".onclick gets set the return value of function check()"
That had me scratching my head too. Great article but last time I checked the max 32bit signed int was 2,147,483,647 not 65,535. 
Not sure I've got what you mean by that.. can you send me a screenshot what are you trying to do, maybe I can point you then
hey i have got the function body, but not the location of that body, and until i wouldn't get the body, i can't change, any way to get the location in chore developer source ab??
I wonder if it applies to try...catch in async/await blocks. They use a different mechanism for throwing there. 
Much of the mystery is thanks to my poor memory and lack of accurate information ;-). I'm not entirely sure it's less than 1k but in my head, I want to say it was. I remember it being very simple yet also very compact when writing code with it. I'm not sure if it even used $ or not, but that's the kind of compactness I remember it coming off like. My impression was that the author made it being clever with keeping things tight and clean but also made some (innocent?) claims that didn't fly well with the Reddit community resulting in less praise than expected. And at that point they may have given up on promoting or doing anything with it further. Originally I wanted to use it as an example, though /u/ProfessorTag's link works pretty well for that too, hitting a lot of the points I wanted to make. At this point I'm just annoyed that I can't find this thing despite the effort I put into doing so.
jasmine, moving to jest With jasmine you don't have to agonise over which assertion library to use (who cares!), or worse, have an assertion library that extends the prototype Jest is even better, very similar but even easier to set up and works well with ES6
v8 uses tagging to differentiate between small integers and other numbers, using the last bit. So for small integers, they will 31 bits to store the value in place, and 1 bit to indicate it's a small integer. For bigger numbers, instead a pointer to the address of the actual number will be stored. There's a better representation in [here](https://github.com/thlorenz/v8-perf/blob/master/data-types.md#efficiently-representing-values-and-tagging) and you can read more about it in [here](https://wingolog.org/archives/2011/05/18/value-representation-in-javascript-implementations).
The performance drop is just ridiculous, I wonder what caused it.
I will consider all the suggested things.
&gt; So we have gone full circle? We've never even moved.
Why is the article written in an ancient dead language?
For a second I thought it used CoffeScript in examples...
this is an exceptionally clear explanation given some effort, i was able to repro from this thank you very much. would that you had been here a couple weeks ago.
Ah, I think I know! Could it be [RE:DOM](https://github.com/redom/redom)? :P
"Server side rendering" can either mean: 1) Taking a snapshot of a web page on a server using something like [Headless Chrome](https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md) 2) A stupid marketing ploy by some f***ing ad exec who doesn't know his/her ass (or the blink/webkit/gecko rendering engines) from his/her elbow (or whatever React does with its components on the server).
16 bit
This video was from the Frontend Face-Off that happened at the Node.js Meetup in Denver Colorado. The full playlist is here with Ember.js, Angular 4 and React/Redux https://www.youtube.com/playlist?list=PLhu3pDd0U_QXD-UuCrnZTyrgQFQZMJDsg
Also: [Introductory blog post](https://mykzilla.org/2017/03/15/introducing-qbrt/) from the author, Myk Melez. tl;dr: Positron (Electron alternative based on Gecko) was discontinued. Qbrt is the author's new approach to the same idea. Also: It's in an early stage.
The view aspect was similar to redom but redom has more functionality than what I'm thinking of. Excellent guess, though! I knew of redom but I didn't think (i.e. didn't remember it) to include it in my list despite being close to what I have in mind.
Thank you. It is indeed a simple but powerful concept. I use it myself in my projects. I realized I could extract the pattern and make it available to others.
Sorry, I was on holiday, hence the slow reply :)
Best to use on Google Chrome
I'm the creator of a web-based operating system (mainly for Chrome, but *may* also work in FF/IE) called "Linux on the Web" (https://linuxontheweb.org) in order to handle all of the client-side state issues that are the bane of webdevs everywhere. That CAD system is exactly the kind of application that could help me bring the web application concept to the next level! I've recently gotten a few THREE.js+[bulletphysics](http://bulletphysics.org/wordpress/) examples working, using the new WebAssembly API to compile the C++ physics engine code into blazing fast client side code. If you want to talk "business", let me know (my twitter is at linuxontheweb).
Really cool article, and I'm glad to see a French article posted to this sub. I'm sure there's a lot of great content being written in other languages that are often ignored. The code examples are clear here, so I really encourage others to check this article out even if you don't speak French.
It almost seems like they have accepted some performance losses in order to have more consistent performance for similar functions.
Come on, Spanish is not that ancient.
Hi /u/comeondear, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I feel like you haven't really explained the problem that well. When you say "includes html", do you mean the scraper uses html to run or it also retrieves the html? either way, why is that a problem? what info do you actually want to search? also, /r/learnjavascript is a great place for a question like this :)
Expand on point 2
One might actually want to render react components on the server in quite a few other circumstances (To provide a better user experience or for SEO reasons, to cite two possible scenarios). Obviously this is no silver bullet. Server Side rendering can still provide a worst user experience if done wrong (common case: too much latency between API and render servers). SEO is even more complicated, as search spiders are already smart enough to deal with javascript (although, in some specific scenarios, it pays of to do SSR - in eg. async initial data fetching)
Hi guys! Hope you find it enjoyable and may the Force be will you all! ♥️
Are there any reasons to use these instead of the built in versions e.g. array.length?
Google translate works very well on this article if you want to actually read it. I couldn't really tell that it wasn't written in english originally.
Here's my try at something like you want. I can't say if it works in Safari or not. However, it does work in both Firefox and Chrome. [CodePen - Highlight Search Terms](https://codepen.io/jones1618/pen/mMeZPx/?editors=0110) It uses native links to in-page anchor tags to "scroll to each instance." There's some commented-out code in the JS source that shows how you might use the window.scrollTo method instead.
I just want `\w` to be Unicode aware and I'd be happy. This seems like an awesome addition though for fine grain matching! 
So you want to get the data from the search back in json format or something? I don't think google have an API like that but it could be worth looking for. Otherwise the data you're getting from the search is always going to be nestled in HTML because that's what comes back from google's servers. If you wanna try hack it you can poke around in the network tab on console after making a search but I'm sure you'll run into some CORS security stuff pretty quickly. I'm sure you can find a library to parse the HTML though. 
Isn't Grails a framework from years ago?
I have used it for a number of projects. Also synched it with Google. Do you get any error messages from Google when it tries to get the events?
Is Grial not Grails 😛
None. And the google dashboard for managing my api key doesnt even register any traffic. It seems like fulcal isnt even attempting to access google calendar
When you inspect the app call to Google, does it return any data? Do you get a http 200 header?
Oooooh!! Gotcha! Well you can try searching some different things and look at the URL, and see how google puts the search terms get inserted into. Then write a script that manipulates strings that can build the urls arbitrarily. 
There doesnt seem to be an app call to google, at least there is no msg in the cloud 9 terminal about attempted connection with google. Unless... Is 'completed 200 OK in 813 ms (Views:764.0ms | ActivrRecord: 3.4ms)' what youre referring to? Sorry im really new to all this. Edit nah i just commented out my calendar code and that message still appears
First time posting here but got sick of messing up readmes on GitHub so I made this Chrome extension that allows me to live preview markdown. https://chrome.google.com/webstore/detail/markdown-live-preview/dkpldbigkfcgpamifjimiejipmodkigk Built using Vue.js and Babel
That might be it. I would inspect the network request with chrome and see of Google gets the correct request. If it does, are you sure there are events for it to return?
vue bidings :D pleasee :D
I am positive there are events. No clue how to inspect the request. Do you mean google it?
[Geolocatr](https://geolocatr.net) My first real side project. Learned a lot about Express, some of it the hard way! Also my first time using handlebars, which I now love.
No, use developer console in chrome (F12) - check out the network tab. FullCalendar does its google requests in the client I believe.
I was hoping this kind of thing could happen.
That’s not going to be fun when looking up what’s wrong with the framework or what’s new. 
That's what I meant by what I had said. If this has any chance it needs a unique name.
What's a "color ticker"? 
Is there any edge vs established frameworks like apollo? Not trying to flame just curious
What does your comment contribute to the discussion?
Exactly. My Google search for "Grial Guide" or "Grial Tutorial" showed results for "Girl Guide" and "Girl Tutorial". Which is ironic, being married with two daughters, perhaps I should read that guide...
Requires access to the dom? No thanks
Cascade maintains state a little differently than React, since it's entirely focused on "Observable" values. It's a little closer to Knockout in this way, and very similar to the React and MobX stack. Because of this, most of the lifecycle methods didn't make sense to include. I'm considering adding a few back in, but haven't really run into any cases where it would work very well with the observables. If you can think of a couple that would really improve the experience, I'm very open to any suggestions.
Cascade is very similar to the React and MobX stack, in that you can create an Application State, render it to the DOM, and then automatically update the DOM when the Application State is changed. However, Cascade's Virtual DOM is engineered to work very closely with the Observables, where React Components use their own internal state. In my time with React and MobX, I found that I rarely used internal state in my Components, and so when I developed Cascade, I decided to omit that altogether, and simplify the library significantly. In a related comment, I was asked if I intend to introduce additional lifecycle methods from React. At this point, very few made sense without the internal state. However, I would consider adding some if they would improve the experience.
&gt;"Girl Guide" &gt;being married with two daughters, perhaps I should read that guide Just going to point out, though I know it was a joke, Girl Guides are essentially the same thing as Girl Scouts. 
Really? Never knew that. I just closed the tab. Never heard of them, but now I know.
I've done two fairly large projects with it. I enjoyed working with it a lot.
Yep. The name really just depends on what country you're in - in the US they're girl scouts, in most of the world they're girl guides. 
I'm sure this tool has its reason to exist, but I really dislike how the API (GraphQL) is tightly bound to the implementation in more and more GraphQL tools I see. The entire goal of GraphQL is that it's independent of the backend. You can make a GraphQL API from everything. With Grial and tools like it, you can't make a GraphQL API from everything, you can only expose a "connector" for CRUD database operations directly as GraphQL, and this is only good for a base level operation, because in no real-world API is it a good idea to directly wire database to public API. This is like a similar wave of REST tools we've seen, which directly exposed SQL, Redis and what not as REST. For what purpose? I don't want to expose my underlying storage schema, I want to define all this myself, and extend it as necessary. Because then what? How do you extend this, customize it, evolve it, in a truly flexible way? That's where the hard part comes. You bought into a tool that promises to make the first few steps easy, but then puts a wall in front of you.
I think Web Assembly is really the future of online games. I'm pretty sure most major engines will be able to export to WA. If you are referring to making desktop/mobile/console games with JS, sure it's possible, but quite frankly it's always a pain to either bundle a browser in your app (such as Electron) or using the platform's browser (such as Cordova for mobile). [Atomic Engine](https://www.atomicgameengine.com/) is quite interesting since it allows you to script in JS, but instead of bundling V8 it uses [Duktape](http://duktape.org/) which is a lightweight JS engine. The idea is that C++ is really doing the heavylifting.
This is what I was looking for as well.
Doesn't make much sense. The Flash player is a security risk and even if it's open sourced the project will end up neglected since nobody is using Flash anymore. As for converting SWFs to HTML/WebGL/WA/etc what0's stopping you from doing it today? There have been SWF decompilers for years. Haxe has been compiling to SWF for years too.
The biggest problem with KeystoneJS is that it uses Mongo, instead of providing adapters to add other data stores. I'd never touch Mongo DB for anything serious.
You could look into [Graphcool](https://www.graph.cool). It doesn't handle email, but no DBaaS and PaaS do it anyway. You could use an API like Sendgrid to do that. Be very careful with what you choose. Ideally you want your clients as decoupled as possible in case one day you want to switch to a different platform. For example in the case of Firebase, you will need to use their SDK in your apps, which means the day you want to get rid of Firebase you will suffer.
I mean I guess the idea is that the client is locked down. From the client's perspective it will be the same even if you completely rewrite the backend to not use grial. And that's important since basically you spend 90% of your time building the client app experience when prototyping an app. This allows you to get up and running with a good enough grapql backend quickly. 
`for in` was always slow.
what faster way was/is there to walk hashes?
Are you implying people can buy votes on Reddit?!?! You should be ashamed!!!
Grial doesn't expose your database as a GraphQL schema automatically, you need to manually define it in a schema.graphql o schema.gql file and then code the resolver which use the connectors or models to get the data. The connectors are just async functions that resolves data sources connections, they can be a SQL connection, a MongoDB connection, a REST API client, whatever your want, you don't even need to use the Grial connectors and can use custom ones if you want to. And your models (manually created) can then access to this connectors to get the data (and implement any kind of business logic) or you can directly access to the connector inside your resolvers (if you want to). So, what Grial does is not generate the schema for you, it create the HTTP server, setup GraphiQL and a subscription server so you should only care about your API and business logic (schema, resolvers and models) and Grail can setup a server for you.
Apollo is for client side usage, Grail is for server side, with Apollo you can consume a GraphQL API made with Grial. BTW, Grial internally use some apollo-server tools, but it help you avoid boilerplate code like starting your server and setting up a subscription server.
Jabbascript took off because it's the only true multi-platform language. Then all these front end developers who never knew anything different decided "I CAN SERVER TOO!" and made node. And everything has been ruined ever since. Maybe now that WebAssembly is a thing this will change. God willing. 
FRZR? https://frzr.js.org :D
haha, thanks man :D
If you haven't checked back RE:DOM for a while, you should – it's now one of the fastest and most memory-efficient libraries out there ;) https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html
Interesting. Is there something not working that the console.log is helping to debug? This might be nothing, but you `res.redirect` before the db calls have a chance to come back. You should really `throw err` if you get one (so they go to the express error handler) and at the end of the happy path, you should put in the `res.redirect`..... also, `save` here is asynchronous, so attach a callback for each, nesting the calls, and only `res.redirect` once *everything* is done...... `async` library or promises can help avoid the pyramid of doom. You'll likely want to ensure your express error handler, if you have one, is doing proper things. If you've attached middleware with 4 parameters and do something strange, like redirect without logs, you won't ever see problems. There error handler's job is to log things, set status to 500 and send a response to the client. see: http://expressjs.com/en/guide/error-handling.html#the-default-error-handler app.use((err, req, res, next) =&gt; { if (res.headersSent) { return next(err) } console.error(err, err.stack) res.status(500).end('something blew up') }) My mongoose is a bit rusty, but does it not raise errors if there are schema validation problems? Doing what I've said above will ensure things die properly and give you some form of indication that something is wrong. ... All of that said, the only thing I can think that would cause an object to not get logged there is if there was a fatal error blocking it from getting to that point, or a `toString` method that was overwriting the default behavior.... I'm not entirely sure if `mongoose` does something special for this, their docs seem to indicate that you'll get an object logged with all the correct values. What happens if you loged `Object.keys(createdClass)` or maybe `createdClass.toString` or `createdClass.toJSON()` ? 
I feel like instead of "reducing boilerplate" Grail is actually just offloading the *configuration* of a GQL server, as well as providing some patterns for defining/loading resolvers. I personally would not want all this code buried in a module for a production application, but I can see some benefits for quickly getting some prototyping going. In a real world app, all of the Grail "stuff" I would want in my application code, so it can be modified and customized as needed. It's also likely that I'd need something like Koa or HAPI running, which means I probably don't even want Grail to be creating an HTTP server for me - I'll mount the endpoint as I need. Overall I feel like this is just providing a layer of misdirection on apollo-server. Again, just IMO. 
You can integrate Grial as an endpoint inside a bigger HTTP app like koa or express and a lot of things are customizable too if you need it. It's more like start with this and customizing it as you need it and when you need it.
That's why, at the end of the article, the writer says that you can also use the programmatical API to use Grail with Koa or Express and still get full control over your server and file structure. Except for file naming convention for Grails files, but still. You could put all these files inside a graphql folder and even load database / models files from elsewhere ( ex: /db folder at the root of the project) for you converters.
Sure, I read and understand that :) I guess my point is why do we need this? Why add another layer when 1) it's not complicated to set up a GQL server in the first place, and 2) it's just adding more code in a module, reducing flexibility, for very few practical gains. Again, this is just my perspective. I have experience adding GQL incrementally to production applications as well as prototypes, and I'm struggling to find a solid argument for adding another dependency (and presumably letting Grail manage all my GraphQL dependencies + apollo-server, which is potentially problematic with how fast this stuff is moving).
Hello all! I just hit 74 functions in the collection and figured it was time to tell others about it. I know some will look at this and wonder why it needs to exist in a world where ramda and lodash/fp already exist. I've tried to detail the "why" in the readme.
Considering the other replies I'm not sure if it fully applies to Grail. But besides that: I agree (and have experienced) situations where a framework pushes you to an 'ORM over http'. That's not API design and as a result developers tend to not design an API but use it merely as means to access the DB.
It ended up being something completely unexpected. I was sitting there for hours and it ended up being that it was supposed to be req.body.course and not req.body.name when creating the Course. My input was &lt;input type="text" name="course[name]"&gt; Needless to say I feel stupid...
It's "color clock". Wanted to make rhyme with picker and took the word "ticker".
Have just tried it and LOVE it! Works like a charm running on an Azure server. It seems to like IEx better than Firefox, though. Is there any way to optimise the rdp experience? Or even customise the login page? Thanks for this great piece of coding!
Looking nice but I dont have a use for that. Possible to make something like this for putty/kitty? 
Crazy gibberish!
I still prefer ReactiveX. And it's cross platform.
Go with the flow old man.
You can always continue under a new name, it's just the package that has already been published will probably remain. But even for that I think NPM has a procedure you can request to unpublish (though that may not be necessary yet).
Well you have to admit though that the `class`syntax is a lot more elegant than the `prototype` syntax. I'm also a big fan of the [decorator proposal](https://tc39.github.io/proposal-decorators/), despite it just pretty much being syntactical sugar. However to me it does improve readability to a point where I don't mind the clutter anymore. I can understand your sentiment to keep clutter low though, as I really do not understand the partial proposal which pretty much wants to replace this const half = x =&gt; div( x, 2 ) for the sake of this const half = div ( ?, 2 ) To me this doesn't really improve readability to a point where it is actually worth it. In fact I would even argue introducing the `?` right there might even be less readable for a newcomer. However compared to that I do think expanding the `class` syntax to features already existing or even non existing, but oop compliant, is just helping with readability enough to make me care about it. Also I'm sorry for my previous assumptions right there, that was uncalled for, but trust me when I say, that there's a lot of people out there that are against OOP just because they do not want to adapt.
Putty doesn't support background images, not sure about kitty, but I pretty much doubt it.
My favorite non-VDOM library 🙌
"We're going to see how reduce() can replace all (or almost all) functions which we use for manipulating the data in our JS application". 
 if (codeSnippet.isImage) console.error("wtf");