Yes I did. Triple nested forEach-function calls with scope will never be as fast as simple for-i loops.
\+ Every real-world team with mixed talents team needs at least one senior with clout in management and able to speak business lingo. So many times development is treated as a nuisance, even though they are usually and critical part of the business. If there is zero priority for infrastructure and code health you are a bad business. It all well and good if the developers follow guides like these, but there must be some notion in the business as a whole that their technological investment is worth something and has it's own overhead (codereviews, time for dev-meetings, some education etc).
A few hopefully constructive notes: This title is baffling, so I clicked the link to read more and am more confused. The first paragraph should be a dead simple "what it is". Also the site is borderline unusable on mobile. Collapsing the sidebar into a menu would fix this. So what is it? What problem does it solve? 
I think I'm missing the point...?
Just one thing: manipulating the DOM may be is slow. Some libraries can be faster than naive DOM access by caching access and combining operations. [This page](https://developers.google.com/speed/articles/javascript-dom) has some other tips.
I am developing a web app for android as well and I think I might try https://crosswalk-project.org to get a modern webview on older devices. If you are not familiar with crosswalk it bundles a modern version of chrome with your application. The only thing that concerns me a little is the size of the app. &gt; Once this application is packaged with its own Crosswalk (x86 Android) runtime, the apk file size is 21.2Mb. &gt; Unpacked, the files take up 49.8Mb of disk space, 45.9Mb of which is occupied by the Crosswalk runtime and its supporting files. Not sure what the impact is of app size so still need to research that a little.
Is the app finished and out of beta? After reading this (great) write up I installed it. No tutorial or instructions made me a bit wary, but I've played cards against humanity so I took a punt and clicked 'Play a game'&gt;random. The it briefly said 'joined game queue' and the random button has turned into a leave button with a spinner but it has stopped there with no more feed back. Was there anything else I needed to do? You really need to do some hand holding or you're going to lose a lot of potential players. Also, you've said why no straight up mobile web version but why no facebook app since you're letting me sign up with facebook?
So many divs... I mean, it's a list!
I think canvas is good fun, and teach coding starting from there. Here are my lessons from last time I did the class: http://softwarestudies.mlog.taik.fi/category/html5-js/
fair enough. name is basically an indicator that it's like mootools prime. semantically speaking, could have been called makeClass but meh site is just developer documentation generated out of a markdown file. solves: classical inheritance in javascript in the style of mootools without it. it's primarily of interest to people that used mootools : prototype class sugar and have moved away to jquery dev. 
Seeing that you are using Wordpress, you can also send the text from the server without requiring JavaScript, special markup or spaces... We've been in business for &lt;?php echo date("Y") - 1998; ?&gt; years.
Seeing as how a build step will usually be faster than the time a browser will take to actually download the built file (my builds routinely take 5ms while using watchify) I don't see that as a valid argument.
I have used the MooTools Classes and once your hierarchies are a few levels deep the bloatware starts affecting performance. I really started having terrible performance issues on Appcelerator where most of my time was essentially just spent in Mootools. I ditched Mootools classes and made my own very simple equivalent that didn't require a super-computer to run. 
Understanding event bubbling gets really important on complex apps.
Another way of writing it, which IMO is clearer and saves you from the list of exports at the end: ```module.exports.isIphone = function () { ... } ```
This is addressed directly in the post, in the 4th paragraph.
Oh ok, I got confused by Mootools Prime. Thanks for clearing. 
What about just exports? exports.someFunction = function() {} 
&gt; Chrome on iOS does not use v8, it uses the mentioned UIWebView Interesting, I didn't know that, cheers. So what is the point of Chrome on iOS then?
Of course I'm exaggerating. But here's the thing: creating objects, variable, functions, and using if/else statements are not exclusive to javascript. If you want to learn javascript, learn javsacript. If you want to learn programming basics, you can do that.
Sweet! Good job! 
MDN is a great resource. Also I can't stress enough that reading the spec is really worth the time. Very few devs actually have a working knowledge of how javascript works, but those that do are the type that write things like jQuery and Angular. Aside from those two, Of course Douglass Crockford's Javascript: The good parts is the old standby. 
Simple. ([view jsfiddle](http://jsfiddle.net/RY5hK/)) &lt;div id="heading" onclick="document.getElementById('content').style.display = document.getElementById('content').style.display == 'none' ? 'block' : 'none'" &gt;Header here&lt;/div&gt; &lt;div id="content"&gt;Content here&lt;/div&gt; If you're new to javascript and web development in general, I'd recommend learning and using [jquery](http://jquery.com). Jquery is a javascript library that automates some tedious things in Javascript and makes the web developer's life a lot easier overall. Equivalent code using jquery is here (much simpler): &lt;div id="heading" onclick="$('#content').toggle()"&gt;Header here&lt;/div&gt; &lt;div id="content"&gt;Content here&lt;/div&gt;
It's pretty cool, but this is just abstracting away the code. Technically you can run anything "in one line of code" by calling a function. The function might have thousands of lines and reference tons of libraries, but no one needs to know.
Kinda surprised it doesn't activate the volume icon on the tab of that page.
It can be done with PHP. Using a database, you can send email based on the last content published. You can use mailgun or other APIs since sending emails from your server is not ideal. Javascript is not the right tool here.
Probably not the answer, unfortunately! I'm already using transition end events (and you can use any timing you'd like); let me try to explain further. Let's look at fadeIn: var cssTransition = function($el) { setFadeTransition($el, speed); $el.css('opacity', '0').show(); setTimeout(function(){ $el.on('transitionend webkitTransitionEnd', function(){ $el.off('transitionend webkitTransitionEnd'); if (typeof(callback) != 'undefined') callback(); }).css('opacity', '1'); }, 20); }; So, breaking this down into steps: 1. $el is implied to be **display: none;** 1. Set transition on $el. 1. Set $el to **display: block;** and **opacity: 0;** 1. Set $el to **opacity: 1;** Without a setTimeout between step 3 and step 4, the transition will not work. Sigh.
That's a great suggestion for further refactoring. I'd be very surprised if It made as big an impact on the iPad as introducing canvas, but I'll definitely give it a whirl. 
Exactly. `module.exports` = `exports` = `{}` by default in a CJS module. If you want to export a single function directly, you have to use `module.exports = function () {...}` If you're exporting a series of functions you can just do `exports.foo = function () {...}`. `var ns = exports; // :)`
Another thing, if you want to avoid the default Object prototype methods on `var ns = {};`, you can do `var ns = Object.create(null);` instead.
You might also want to limit array access: instead of 2D nested arrays use a single continuous array (`map[y * width + x]` instead of `map[y][x]`: trade a lookup for a fast arithmetic. Memory lookups are sloooow. You can go further and use a suitable TypedArray instead of regular one for the life data and cut down memory use. Go even further if your integer math is good then you can store 8x 1-bit cells into each byte of a UInt8Array.
I feel like these methods are still pretty far away from that, but it would be amazing if jQuery relied on CSS transitions by default (if supported, of course). I'm looking forward to getting more input from the community here as to how this can be refined.
yes there is a standard transitionEnd except I was merely pointing it out. Sadly Chrome has a messed up transitionEnd event where both webkitTransitionEnd and transitionEnd are bound and fire. Browser support is something you have to contend with. 
Your 'better solution' is not better: it is wasting runtime performance for developer aesthetics: every function that calls a function in same module get a penalty. That is a stupid trade. Exposing module pattern is cleaner, don't be so lazy.
Oh god yes. I remember this and I checked in a project I had done. I too have a set timeout. Sorry bout that. No cigar 
any good tips for learning jquery? like videos or sites? and where do i download it? 
documentation is misleading too, there's no blackjack nor hookers.
http://try.jquery.com/
I wasn't against using transitionEnd at all. webkitTransitionEnd was a mere suggestion I made typing from my phone. I was merely pointing to its existence and no ways did I mean this was the final and only solution. Handling double firing Chrome is easy enough to handle by detaching both event listeners. I don't believe it was a jquery issue because I tried attachEventListener and yet the same thing happened. 
Is it firing for both, or is it firing for each property being transitioned? I feel like I've run into the latter being the case.
You may have found a bug there.
Nice. Now try this with the "Hysterical" voice ;)
Nice. That's a great demo! I added a link in the blog post. Thanks a lot!
It's not stupid because of performance matters; this is run only once at startup. It's stupid because `exports.func` is exactly what he wants.
I think the idea is that despite it being slow it can still be faster because setTimeout is delayed until the end of a scroll on Android/iOS. That scroll can easily take 300ms. So in practice you'd probably combine this with a setTimeout and just run one of them - whichever was fastest
for a guy who analyzed this post more than anyone else on this entire website, it's pretty disappointing you completely missed the whole point. "learn some principles, watch seminars on YouTube, don't forget you are using a real language and neglect the foundation knowledge." dude that's what I'm here for. that's what i wrote about in my post. that's why I specifically went to a website that caters to sub-cultures. found the one relevant to this interest and posted it here in the feeble hopes that i would connect with people interested in the same topic. No. you got me. I don't know how to google. I was walking through the forest at twilight hours and a moose-spirit appeared to me and told me to enter "codecademy.com" in my brower. **"You will soon learn the ways of the neckbearded-basement coders my child."** he said in a booming voice. There was a loud **CLAP** and the spirit bursting with light shot like a rocket and towards his home in the Slug Nebula. As I looked towards the heavens I noticed a piece of paper floating down. It landed amongst the twigs and brush on the forest floor. The text on it was written in comic sans and it said *"even thou shalt ask for specific knowledge a redditor named /u/specimin will tell you nothing. he will provide nothing. his contribution to your earth clan is nothing."* "Cool" I thought as I macheted my way through the thick forest vegetation on my journey towards modern-society. Months pass. Flowers bloom. A family prays alongside a loved one's hospital bed as she dies. Governments are overthrown and new kings rise. Soon I will be home. While on my journey barreling across the open ocean, I had spent my time working as a jelly-fish masseuse on an iron steam boat. We carried miscellaneous cargo from port to port. Mostly fine silks and spices. We always were moving. See, the steam turbines get clogged with salt from the ocean. When that happens the crew would release our mushing team, assembled of sixteen alpha-male jellyfish. Attached by thick ropes and harnesses they would be able to pull a 71,500 ton vessel 4,417 nautical miles by a fortnight. Needless to say, these were some tough jellyfish and by the end of the night they would have a lot of tension in their upper exumbrella. Their aboral surfaces were just in knots!! So it was my job to help the jellyfish release tension whenever the engines were up and we were using steam power. All this time thinking "I must learn java... and avoid /u/specimin at all coast," as to avoid the Moose-Spirit Prophecy. It was at this time that I developed my crippling opium addiction. We were in Guangdong province, southern China. The crew agreed to spend one evening in town for a night of merriment. So we docked our ship on the east bank of the Pearl River Delta. It was a bitter and cold night. One of the local traders Xiao Pei offered to take me to a club and meet his friends. I don't remember much of that night, but I do remember going into the market the next day and purchasing all of sepiolite pipes I could afford. It was months of tar-lung blissed and jellyfish shiatsu. That was my life. Many moons passed. Seven months (and climates-zones) later I arrived at port. Somewhat weary after all the traveling, but aware. The knowledge I have learned about in my journeys will enable me to create and build things that better humanity. It will be the foundation upon which we build and continue to build until we finally propel the human race to the stars!! I get home. Open my laptop. I spend weeks on my own learning javascript. *Go to reddit.* And I post my divine message in the hopes that some one will point me to the direction of true knowledge. **I wait...** *Refresh* I have a red message icon. I click on my inbox. /u/specimin has replied.... Unconcerned I turn my head towards the camera. "The prophecy is complete" I say. fade to black.... **tl;dr** the amount of time you spend being a pretentious cunt, you could spend changing the world by helping others. Stahp.
Mind blown. Can I use your code for my blog?
Not all JavaScript environments support let though.
so what about maturity and significance of modules
jQuery is a part of nearly every project I touch... adding CSS transition support to these functions is worth the 4kb footprint this script has when minified. Also, it seems GSAP doesn't alter anything other than jQuery's animate()... if I'm wrong, I have a reason to be excited. setFadeTransition() is applying the transition property to the element. Check out my comment [here.](http://www.reddit.com/r/javascript/comments/27e18y/made_a_jquery_plugin_that_replaces_fadeslide/ci01vp0) 
let IE9 support let
This still really doesn't apply to production code. I assume most clients will want you to support at least IE9
Good summary! I don't want to take that away from the author. However, I always like to share what I consider to be the most comprehensive and technical write-up: [comp.lang.javascript's FAQ: Closures](http://jibbering.com/faq/notes/closures/). It explains the concept using CS terms and concepts (garbage collection, execution context, identifier resolution, etc.) for anyone looking for a really deep dive into this topic.
Very simple, nice and clean explanation. Without the all "if you're returning a new function, then it's a closure..." garbage.
I mean, as far as I know jQuery functions like fadeOut all use animate() internally so this should be a full replacement. TweenMax is around 29kb to add to a project, but you should only need TweenLite, easePack, css plugin, and jquery plugin which total to around 20kb. [Here's the speed test](http://www.greensock.com/js/speed.html) if you want to check out comparisons between gsap, jquery, css, and other libraries.
Mobile users increasingly using voice based browsing will be great for the blind. 
Woah... just looked it up; you're totally right. I'm gonna have to check this out tomorrow.
I'm still not sure why so many people hate typing things out so much. Is it really so abhorrent to type `exports.someFunc = ...`? Do you really gain anything for using a short alias like `ns`? What's the point of not aliasing? Not assigning `module.exports = ns`, but at the top, `var ns = module.exports`? Of course, as /u/aeflash pointed out, all CJS modules essentially run as `var exports = module.exports = {};`. So you're just saving a few characters by aliasing `ns` to what would be `exports` and have now arbitrarily obfuscated your code because you wanted to save 5 characters a few times per file. A few characters for significantly more clarity (because everyone, everywhere, who uses CJS should recognize what `exports.something = ...` does) is better than saving a few bytes for aesthetics.
 var strictBounds = new google.maps.LatLngBounds( new google.maps.LatLng(85, -180), // top left corner of map new google.maps.LatLng(-85, 180) // bottom right corner ); Are those the correct bounds? You're giving it (85, -180) and (-85, 180) -- I suspect that's the issue.
And not very well organized CSS.
I would love to get your thoughts on this alternative approach: http://www.reddit.com/r/javascript/comments/279ion/sprinkles_the_activesupport_of_vanilla_js/ci0c958
What type of stuff have you built with it? I'm curious. 
Unless you are writing a language interpreter you really do not need deep depth to explain closures. This kills people new to the concept. Simple put: *Closure is evident when accessing references from across scope boundaries.*
Well, I did explain that my link is comprehensive, technical, and a really deep dive. Hopefully those new to the concept recognize that they should probably focus on OP's article, because I agree with you there, but for those who want to learn as much as they can on the subject, they can consider my link a _further reading_ suggestion :)
did you try `setImmediate` and it's many shims?
&gt; First bug report: IE8 issue. http://i.imgur.com/FSjAzgr.gif
Oh that is interesting, I would expect to them to behave in the same way. Is this because the compiler realizes let will go out of scope so it makes a copy, not a reference? 
Your article inspired me to give a WebGL implementation a shot. This does *everything* on the GPU, including running the simulation. The browser's job just to call draw() on schedule (or as fast as possible). * http://skeeto.github.io/webgl-game-of-life/ ([source](https://github.com/skeeto/webgl-game-of-life)) On my computer with a Radeon HD 5750, when not rendering it can do about 11,000 tps. When rendering it does half this, about 5,600 tps. So this is about three orders of magnitude faster than pure JS. By default you'll see it trudging along at 15 fps so that it looks nice. 
It's nothing to do with the compiler per-se. Let declarations are block scoped, which means this: if(test) { let x = 1 } x; // error, x is not declared It means also that every iteration of a loop will get a fresh binding. Which means that any functions created in a loop will reference a unique binding for that iteration rather than one that is shared among all iterations.
http://mathjs.org/ Has a lot of built in mathematical functions and even comes with an expression parser. Maintainer/dev is a really bright guy.
Uhhh. That's the one I'm using. It was in the OP. It's good though. Just wondering if I can find one that will be more performant (and hoping someone else has already figured out which one that is :))
Those are the furthest bounds that Google maps will allow. I've tried different bounds and nothing...
hey im up for it. Whats your timezone. Im from India GMT5:30+ Google Hangout id: ajinkyab1987@gmail.com
Thanks, I'll take a look at numbers.js, that looks intriguing. 
Count me in :) 
I'm in too!
could take a look at some service like this :http://mailchimp.com/features/rss-to-email/
the code quality on some of these "great" tutorials is horrible.
I have no clue at all what this does... When do I need to use this?
I know about setImmediate but I was looking for precise timing (how precise it can be with browser timeouts) About the speed, yes it's not as fast as native, but the slowest result is ~5000 op/sec so it's not that bad, so this thing can be used for some UI effects
Very nice. It also seems to support .stop(), which is nice. However, the .stop() call only works once, after which the animation has to complete for it to work again. With the jQuery animation, you can click it multiple times, and it will just reverse each time. $('.slide').on('click', function() { $('div').stop().slideToggle(5000); // Original $('div').slideToggle_(1000); });
Revealing module pattern seems like a poor man's CommonJS/AMD
im in
I like it :) Would you consider receiving contributions with the code sometime? I have been looking for a small project to start contributing too sometime. I have plenty of ideas for my own small projects, but I want to start Contibuting to other OSS projects. Even if I did something like fixed brackets having a space after functions etc, would you mind :) ?
Is this a criticism of npm? Quantity != quality, but it's not as if there aren't popular, well-designed and easily accessible packages on npm (or else it wouldn't see as much usage as it does).
Most of the behavior is controlled by the Readable instance. It has a _read function that it keeps calling while there is non-null data being "pushed" to it. This is kicked off by readable.pipe, which tells it to "pipe" the data pushed into it from _read function into the interface specified in the single parameter. In this case, that parameter is process.stdout, which seems to be an interface for writing to the console. You could specify a different interface (like a web connection/socket), and pass the data that way. [Class: stream.Readable](http://nodejs.org/api/stream.html#stream_class_stream_readable)
You're the man, if there is anything I can do to help let me know.
Sounds awesome.
I am in. 
I don't know how exactly this will look like, but I'm in. 
The presentation on SpeakerDeck: https://speakerdeck.com/raganwald/javascript-combinators
Interesting project, but there seems to be an issue regarding "new" operations. For example, try pressing this key sequence on a normal calc; * 1+1 * = * 1 When you press "=" you should first get "2" as an answer, and then when you press "1" the input will reset to "1" because you are beginning a new operation. In your example you end up with "21", because the "1" is being appended to the existing output.
I was ohnestly wondering .
DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING DING This needs to be sent over all sites like these. 
I guest lecture on Angular at one of the big code schools here in NYC. Happy to drop in and provide guidance or lead a discussion. bvdrucker at gmail. 
It looks like there is already a method called _read. Are they overwriting it?
im in
I guess I'm confused about what you're trying to accomplish. The point of providing your map with bounds is to restrict the user's scrolling. Can you link to your page?
Reformatted for clarity: var Readable = require('stream').Readable; var readable = new Readable; var count = 0; readable._read = function() { if (++count &gt; 10) { return readable.push(null); } setTimeout(function() { readable.push(count + "\n"); }, 500); }; readable.pipe(process.stdout); 
Although this looks a bit like blogspam there are a few things I'd like to comment on: * Using jQuery here really isn't necessary. * Your explanation as to why classes were used doesn't sound right (I might be misinterpreting it though), according to [tests](http://jsperf.com/getelementbyid-vs-queryselector/28) using ids is a helluva lot faster and easier. But classes are fine here I suppose, because you are getting the values from the text value of the div and are using jQuery. * You use an alert for one error message and the answer box for another, why not be consistent? * The inability to use decimal numbers makes this not very useful beyond trivial sums. * There are a few bugs with it. Another commenter mentioned one. * The CSS looks like it could be shortened, for instance all the elements under `.digits table tr td` have the class `tokens` attached to them. * Personally I'd of made this more self contained, and made it create all the button elements with JavaScript and assign the event listeners to them because it needs JavaScript to work. This would mean I could have a `&lt;noscript&gt;` element where it should be when viewing it without JavaScript that would explain what it was, but that's a personal opinion more than anything else. It looks nice though and works (barring one or two bugs).
Your for-let loop still won't work right. There's more going on here than block scope. The `i` is still the same binding throughout each iteration, so the closures all capture the same binding. You would need to establish a new `let` binding within the body of the loop so that each closure gets its own binding. var cs = []; for (let i = 0; i &lt; 2; i++) { cs.push(function() { return i; }); } cs[0](); // =&gt; 2 cs[1](); // =&gt; 2 The fix: var cs = []; for (let i = 0; i &lt; 2; i++) { let v = i; cs.push(function() { return v; }); } cs[0](); // =&gt; 0 cs[1](); // =&gt; 1 
Ok! Great enthusiasm guys! I'm working on setting up the website for this and later today I will send the url to sign-up. Allow yourself at least 4 hours/per day for the following 7 days to participate.
That sounds great, what do you suggest? Maybe you can help keep track of completed people's assignments and answer questions on hipchat?
im in too!
I'm in for this 
And it's binary safe !
Okey Dokey, when I have some time I will look at contributing :)
Me 
Thank you for pointing me in the right direction! Very much appreciated. 
Thank you so much!!
One angular please
I encourage everyone to watch this (or at least learn about combinators and functional programming in some capacity). Your code's density and clarity will skyrocket, likely along with its correctness, for real. Check it out.
Thank you kind stranger, I learned some stuff today, namely about not being a neckbeard. Edit: Probably more importantly, thanks for supporting a site we all love. You're a good guy/girl.
Of course! First time giving reddit gold. I saw the comment on bestof, and i saw your follow up and was deeply confused. When I saw that you made the original comment to spur the thread but also provided the most accurate writeup afterwards, I figured I should. Now onto removing my very real neck beard and starting off the day! EDIT: I guess OP decided to down vote me. FWIW, I don't think you were being a neckbeard or an asshole. Though the -5 is indicative of other people not feeling the same way, I think one of the most important items I learned as a developer is how to effectively google. 95% of the work I do has already been done by someone else, and being able to leverage this allows me to focus on actually shaping a better product. If I do something that i couldn't find, I do my best to document this somewhere so someone else can save time. We live in a world that's so connected, but people continuously reinvent the wheel for whatever reasons. Save the time, let someone elses prior experience better yours, and continue to push the envelope. 
I have just made a pull request :)
It does do the right thing, actually! If you look at [13.6.3.3](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-for-statement-runtime-semantics-labelledevaluation) you'll see there is a new environment per iteration. Note that if you're testing with IE that Chakra's implementation predates the current spec and does exhibit the behavior you describe.
Yeah, it is just a place holder: console.log((new (require('stream').Readable))._read.toString()); // function (n) { // this.emit('error', new Error('not implimented')); // }
I dealt with this problem about a month ago. All of the available solutions were lacking in some big area, so I ended up writing my own. Took me a few hours, but it's been working just fine since. [Here's](https://gist.github.com/gordonkristan/0d3264dd1ee42087fe99) a Gist with my Grunt task and a sample HTML file that I use. It's ugly, but it gets the job done. (It'll get a rewrite in the next few weeks.) A few key points from the Gist: - I list the libraries I want to include and the order I want to include them in. This was the easiest way to ensure that only the things I want are included, and in the right order. - I list the main files for my dependancies. When you start to use a range of libraries, you just can't auto-detect the right files. (Like in the case of Handlebars and the full vs runtime versions.) - The develop version templates the HTML file to point to the libraries locally. The debug and release versions concatenate the library files and templates the HTML file to use that. (The debug version just doesn't minify.) - If minifying the output, I try to use the files with a `.min.js` extension instead. If one isn't found, I use just the normal version. (I run it through a whitespace minifier later.)
+1
Could you make it go the other direction? For example, take an array of colors and convert them back to words?
Can't tell if you're being facetious or not, but just in case: no, that's impossible.
I like it. Something that you should mention is that it generates nice colors. Rather than getting a bunch of dull greys and browns, it generates pleasant, vibrant colors. I can see this being useful if you were coloring UI elements by name, likes tags, email addresses, etc.
I'm in!
String to Pretty Color! 
o.O
Interesting. AFAIK, this `for` environment behavior would be exclusive to JavaScript (edit: though Perl and and [C# 5.0](http://www.less-broken.com/blog/2012/01/c-50-to-have-implicit-fresh-bindings.html) have foreach that behaves like this). In contrast, Ruby and Python have the for-loop-closure trap despite having proper block scope, due to the shared iteration environment. I'm not sure which way I'd say is more "correct." The former is more functional, since the binding is never mutated, but the latter seems to be more standard, even though it comes with this trap. Node v0.10.28, Chrome 35, and Firefox 29 all still follow the old behavior. That's where I tested my code, requiring the extra `let`. I just gave it a shot in [Traceur](https://github.com/google/traceur-compiler), and apparently it uses the current spec's behavior despite predating it by 3 years (2011). It's the only implementation I can find that does the new thing. Edit: I dug around more and found that per-iteration bindings were introduced [in the April 5th, 2014 draft](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts), so these semantics are only 2 months old. It's no wonder no one's using it yet. 
Thanks for this. I have quite a few projects, so this seems a bit overkill, but I think you've given me a good direction to go with. If i just specify the files in the task config per developement or release in the order I need them, and then have the grunt task figure out if they are js vs. css files and appropriately generate a script vs. stylesheet tag that would be generic enough for me.
How I can watch it from my android? 
Interesting. Yeah, it's crazy how many package managers have convoluted the process... I'm actually disappointed in how many issues I've encountered with bower :(
video removed or maybe private :(
Seriously this reply was like the Reddit equivalent of The Blindside.
I don't think either is "more correct", but I do know that the new semantics are much more usable so I'm a fan! Traceur was recently updated with these semantics. You're right though that the spec draft is really recent but the consensus has existed since I believe the Jan '14 meeting, possibly as far back as Nov '13.
So far I've built a ToDo list, and a Gem calculator for Diablo 3 (punch in how many of any kind of gem you need, and it tells you how many of each previous gem is required)
many think jquery === javascript. if you visit /r/jquery its all "I need a plugin to ..." many times just a javascript library that uses jquery notation. I'm not sure why a calendar widget or an image carousel would be a jquery plugin. A library that requires jQuery would make more sense. EDIT oh oh oh I just came across the perfect example: http://www.reddit.com/r/jquery/comments/27iwtg/jquery_to_filter_a_json_array/
a more direct translation that doesn't have the same scope issue would be using .forEach instead of for. You should almost never need to use a for/while loop.
you mean without frameworks. Libraries are good and don't necessarily occlude learning: https://github.com/hughsk/game-modules/wiki/Modules
OOP and the this keyword are the things beginners should learn asap.
i love jetBrains. I am on a c# team now (im the "front end" guy) but I first came into contact with their stuff like 4 years ago working with some other .net guys who just raved about Resharper. I got so used to it that I wanted those features all the time. I was thrilled when I discovered all of their IDE's (though I wish I could get an all in one. PHPStorm is probably the most general purpose, webStorms lack of php support gets frustrating very quickly). Either way can't recommend enough. Once you have the amazing intelisense auto complete stuff there is no goign back. especially if you are making big JS apps (backbone/angular/etc).
"javascript" is too long to type when "js" works the same.
Not sure your experience level with JS / programming in general, but I have a dog and one of the first javascript projects I did was a slideshow of photos of her. Some of the features that I included were thumbnail images (and later pages of thumbnail images) and descriptions of the pictures. This will get you thinking about handling URLs in JS, the DOM api, etc. I still throw any pictures I take of her in the directory that slideshow.js looks for and I still use that little app to show off my CSS skills to people when needed. I'm not sure where your interest in JS comes from, but if you'd like to get into basic web dev spending an afternoon or two on a project like this is probably a good idea.
The version of Traceur at [repl.it](http://repl.it/) is [from 2011](https://github.com/replit/jsrepl/tree/master/extern/traceur), which is the one I tested. So they must have originally had the new behavior, fixed it, then reverted back with the new draft. 
Interesting! I guess Arv was ahead of the times.
You have to watch it on [vimeo](http://vimeo.com/channels/ndc2014/97408202).
When creating stream subclasses you specify the data source with a _read function: http://nodejs.org/api/stream.html#stream_readable_read_size_1
Yeah, I don't understand why I would avoid OOP. Sounds weird.
Nothing happens until the .pipe() because node uses "pull streams" by default; no data will flow until there is a place for it to go. Data is PULLED through the pipeline, rather than pushed (a push stream pushes data even if it has no destination). Basically, when you call the .pipe() on a readable, the stream keeps polling your ._read() until the stream gets a null pushed into it or .end() is called. This is mentioned below in frankie's comment. 
yeah, tried that. your link works though, thanks :)
Can anyone recommend the best plugin for us such as buddypress or a membership plugin for wordpress?
I'm right with you (front end c#). IDEA with plugins is the closest to all in one, but it has baggage. I would love a package license valid for all their IDEs. 
Yessss
Most online coding help communities like StackOverflow will just get annoyed and downvote you if you don't make an effort to solve the problem yourself before asking others for help. If you ask a question that can be solved with a [quick google search](https://encrypted.google.com/search?hl=en&amp;q=where%20do%20I%20download%20jquery), you're doing it wrong.
If anyone is interested in a promo code for the iPad app, feel free to shoot me a PM and I'll hook them up if any are left. (iPad app uses the same HTML/CSS/JS code as the web app). 
Kinda looks like a sequencer to me, which is included in most modular synthesizers and I believe originally utilized for music by Raymond Scott before that.
Before anyone starts the whole "IDEs are slow and take up too much memory, I use Sublime/VIM/Atom/Notepad" thread, let's pre-empt it.. An IDE like Webstorm and a text editor like Sublime Text are not comparable. You are comparing apples to oranges, and neither is better or worse than the other, they are simply different. For **certain things** one will be better than the other, but overall they both have their own purposes.. 
Sounds good to me 
So true. I use phpstorm (By the same folks-Jetbrains) and it's amazing. I still use a text editor but I think once you've seen what an IDE can do for you, it's hard to go back.
I use PHPstorm and it's changed my life man.
Truth. I use both IDEs and text editors (PyCharm, IntelliJ, and Sublime Text), probably daily. IDEs are best used for managing projects that span many files. The JetBrains IDEs are also extremely powerful when it comes to doing large scale or project wide refactoring, their tools are currently the best out there.
I like a function which returns a function. (function() { for (var i = 0; i &lt; 5; i++) { setTimeout(function(i) { return function () { console.log("i was " + i); }; }(i), 1000+1000*i); console.log("Run " + i); } }()); 
http://voxeljs.com/
Nice, would love a grunt tutorial on getting an auto refresh working
I met a jQuery "developer" who did not realize it was a javascript library...
+1. Don't do work you don't have to, or 'merica.
methinks you don't know how to read a graph as the javascript decline begins before jquery line even begins. back in the oldendays technologies like (then) pure javascript were flashy and made headlines. so the decline of "javascript" in headlines is completely independant of jquery's rise.
yea find screen width/height. figure out which is bigger. if an ellipsis width becomes bigger than that drop it. 
Sure. Weighing in via Hipchat sounds good. 
I have had the opportunity to cringe many times while interviewees dismiss javascript as an old thing that is succeeded by jQuery. I have saved some time by asking about javascript knowledge early on in the interview and I usually wrap the interview shortly after.
?
Awesome idea, I'm in.
I recently started working with Webstorm (despite being a Sublime Text fan) because of the integration with AngularJS but I noticed that I can't get syntax highlighting for php files nor find any plugin for that,. Does anyone knows if that's possible or should I be using PHPStorm?
Heh, looks a little bit like the one I did at http://kx.nu/Animation_Test/non-trippy but in 2d and with canvas instead of DOM/CSS.
Coming from a history of using Eclipse (Java/Android), VisualStudio (C++), Netbeans (Java GUIs, PHP) and practically everything out there for various levels of web development, I've found Webstorm to be incredibly awesome. They're constantly improving it and adding support for things that really make it convenient (markdown support, BASH scripting support, good Git/svn tools, Linux terminal directly in IDE, great project-wide search and regex search-and-replace with ease). For me the Node.js debugger is a must-have and goes miles beyond using Node-inspector in the browser directly to debug server-side javascript. That's not to say it is without issues, but even then their tech support team is on point and very helpful/rapid-to-respond. On a side note if anyone is buying a license to Webstorm I recommend you consider the few extra bucks to get the full PHPstorm as there doesn't seem to be any way to upgrade and just pay the cost of the difference. 
Take a look at the 'livereload' option for this Grunt task https://github.com/gruntjs/grunt-contrib-watch It runs a reload task on file changes...
Here!
Be sure to test that before you use it. I think it's wrong, or at least strange, as it assigns prototype methods inside the constructor, which means if you made two qDefers, the second one's methods would overwrite the first's.
&gt; the vanillaJS folks dont understand what the DOM is. Not true. I'm a 'vanilla folk' and I say the standard DOM interface is better, aside from a handful of inconsistencies between browsers, very few of which haven't been solved in recent years.
Oh, yeah definitely. I use Ultraedit every day in addition to phpstorm. You gotta have a text editor for those times when you just need to view/edit files without creating a project etc... I would no sooner give up UE than I would phpstorm.
https://instafile.io/ http://www.reddit.com/r/netsec/comments/27f49f/heres_endtoend_encrypted_peertopeer_file_sharing/ http://www.sharefest.me/
Does this include all searches containing the words "jQuery" or "Javascript," or is it strictly the words on their own? Who just searches for "Javascript?" Searching for "jQuery" by itself makes sense, when you're looking for a download or the docs. 
It would be more accurate to say javascript == jquery if you get what I'm saying.
I recently got a new employee whom I had no involvement in hiring. The first thing I asked him was about his javascript experience. He started telling me about using jquery plugins... The second thing I asked him is if he was ready to learn javascript.
That's a good tip if you know your audience. I'm old fashioned because I have to program for compatibility with legacy browsers. I'm not sure if there's an impact on efficiency by declaring a new function like so, but for such a task I'm sure it would be very minimal.
That's actually not true at all but ok.. w/e
After a few years of using Vim, I've made the leap to WebStorm with the IdeaVim plugin. It's not perfect (no support for splitting/navigating windows or tabs using vim keys) but it's a decent compromise for now.
`typeof jquery == 'javascript'`, smarty pants :) Edit: too abstract?
 var Readable = require('stream').Readable; var readable = new Readable; var count = 0; readable._read = function() { if(++count &gt; 10) { return readable.push(null); } setTimeout(function() { readable.push(count + "\n"); }, 500); }; readable.getcount=function() { return count }; readable.pipe(process.stdout); var count = 0; readable.pipe(process.stdout); 
&gt; Underscore is written with the idea that you're going to wrap a Plain Old JS Object (POJSO) in an Underscore wrapper, using the _ function. That's one option, and it's awesome for certain uses. But often all you need is to use the functions it provides to operate on regular data. 
What the fuck dude, you really expect someone on the internet to go through that shit and figure it out for you? Put in some fucking effort and at least format it (and remove the fucking URL encoding).
I can't tell--are you the presenter? Never seen you speak, but the content reminds me of your *JavaScript Allongé*.
Where was this image taken from?
 var img = new Image(); img.src = "/path/to/image"; // Add to just before the end of &lt;/body&gt;. document.body.appendChild(img);
The point of the second line is to make sure that you're using this function as a constructor. It says "if the 'this' object is not an instance of '_', i.e. if this is not being used as a constructor, then use it as a constructor and return that as a result." That way, if you use the constructor with *or* without the 'new' keyword, it will have the same effect.
Don't open it on a workday, it's addictive ;) http://www.google.com/trends
They also have their flagship IDE IntelliJ Idea (For Java but it has everything webstorm/phpstorm etc. have as a plugin) and of course my personal favorite ReSharper that turns Visual Studio into the best IDE in existence (imo:P).
This! http://web.archive.org/web/20080209105120/http://blog.morrisjohns.com/javascript_closures_for_dummies
You might want to compare with Lodash, which I've heard called a better underscore: http://lodash.com/ (I do prefer lodash's docs)
JQuery means other developers can worry about cross browser differences... It's under-rated!
Yeah I used to always be worried about the overhead on these methods. Then I started to realize that in perfs I was often comparing in the millions of ops/second. Even if it was like 50% slower, I am still in millions more ops/second than I would ever need. So unless I was planning on looping over an array with millions of items, I shouldn't have been worrying. I'm also starting to buy into doing more functional programming when I can, which is taking advantage of lists and chaining list methods. https://www.youtube.com/watch?v=XRYN2xt11Ek Is a beautiful talk that shows a lot of power from this way of thinking. His link in his Resources at the end: http://jhusain.github.io/learnrx/ helps teach this way of thinking too. I feel this is the style more and more people will move to as not only does it function/look cleaner as well as is easier to understand, but in the future can also be optimized more efficiently because a lot of the methods could be run concurrently.
Nice. I actually have a few functions I use for the same thing. I generate a random color from string and then I use HSL magic to increase the brightness of them all.
Fuck Qooxdoo. I hate it. Save your time and make something with Angular.
term: http://www.google.com.au/trends/explore#q=js%2C%20javascript&amp;cmpt=q also concept: http://www.google.com.au/trends/explore#q=%2Fm%2F02p97%2C%20%2Fm%2F07sbkfb%2C%20%2Fm%2F0jgqg&amp;cmpt=q
Can I ask why so we can recommend you don't do this?
more like `jQuery ⊂ javascript` or `jQuery instaceof javascript`
A panel with the rules and an explanation for the what the different patterns do. Something for the complete noobs like me.
I think javascript will rise again, even more powerful, thanks to node.js . jQuery covers only a niche in web development, while javascript itself can be used in many more ways than just jquery. jQuery is a specialised subset of javascript. 
Sometimes I just search for how to do x in jQuery because I know the top answer is gonna tell me how to do in in javascript.
&gt;Would anyone be able to explain why they prefer promises? Promises maintain a fairly linear, easy-to-follow view of the code - it's easy to reason about what happens and when, and more importantly *where in the code* it's defined. Events *by design* break any obvious visual/conceptual link between where an event is thrown and what happens in response - any piece of code anywhere in your codebase can catch the event and do things. Events are handy and I'd never want to do without them, but when you're working in a codebase with several tens of thousands of lines of code or more the loose coupling inherent to events can lead to an obscure and hard-to-follow control flow that leaps around unpredictably (and worse, in an unpredictable/non-obvious order) all over your codebase. Of course sometimes loose coupling is exactly what you want or need for things like modularisation and separation of concerns, , but it's a double-edged sword that you can easily cut yourself with, especially if you aren't very careful and disciplined with how you user them.
Very good point! I can certainly imagine it becoming unmaintainable if misused. One other thing that just occurred to me that events are missing: Begin three async actions simultaneously [A, B, C], and when all three are finished, do action D.
How about buttons, for those who access it from a mobile device with no physical keyboard? 
Handling errors (very important on server side, which is where promises are more useful) with event emitters: ee.on("start", function(data) { try { requestResource(data, function(error, result) { if (error) return ee.emit("error", error); try { ee.emit("use resource", result); } catch (e) { ee.emit("error", e); } }); } catch(e) { ee.emit("error", e); } }).on("use resource", function(data) { try { useResource(data); } catch (e) { ee.emit("error", e); } }).on("error", function(e) { }) Handling errors with promises: SomePromise.then(function() { return requestResource(data); }).then(function(result) { return useResource(result) }).catch(function(e) { }) If you take a look at bluebird README, it actually has a section "what are promises and why should I use them?" Also see this [Stack overflow question](http://stackoverflow.com/q/24076676/995876) 
Thanks! I'll give PHPStorm a try then.
it is the programming scene noob detector question: can you draw a glider from memory? xxx x.. .x. l33t points if you know which way it will go
preset selector has no labels (still works though)
+1 star I see that there's an 'options' parameter, but it's not used yet. I'd like to request the option set the the min/max values for the generated RGB-values. This way you could tell the function to only generate, for example, a mix of blue and green colors.
Do you have any idea why this doesn't work? Thanks.
And the headlines will be "node"
If you're building something dynamic you might want to look at templating instead.
Very nice, I can immediately think of uses for this! I was looking at the code and noticed that you assign the inner functions to `this`. Wouldn't that cause the functions to end up in the global scope if the user invokes the function as you intend? And it wouldn't work at all in strict mode.
This is great!
I just made a jQuery plugin based on string_to_color(). Demo: http://erming.github.io/jquery-string_to_color/ And source can be found here: https://github.com/erming/jquery-string_to_color
&gt; Satanic - &gt; Magic Circles is a library for making sweet animated magic (or "summoning") circles like in Diablo, Final Fantasy, etc. Magic Circles uses D3 and SVG graphics to provide a smooth experience. &amp;#3232;_&amp;#3232;
The source on GitHub: https://github.com/raganwald/vitaljs.com. The "big idea" here is that this implementation uses the [HashLife](https://en.wikipedia.org/wiki/Hashlife) algorithm. HashLife is capable of exploiting regularity in Life patterns by caching the future of various sub-patterns. To get a feel for this, hover the mouse in the center of the window and press `2`. It will insert a glider gun. Now lick on the time field in the upper left corner. It will advance from generation `0` to `16` in a single jump. If you keep clicking, it will continue to advance 16 generations at a time and the pattern will grow. Then, suddenly, it start advancing faster and faster with every click. It won't be long before you're advancing a million generations per click and if you have the patience, a billion generations per click.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Hashlife**](https://en.wikipedia.org/wiki/Hashlife): [](#sfw) --- &gt;__Hashlife__ is a [memoized](https://en.wikipedia.org/wiki/Memoization) [algorithm](https://en.wikipedia.org/wiki/Algorithm) for computing the long-term fate of a given starting configuration in [Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) and related [cellular automata](https://en.wikipedia.org/wiki/Cellular_automaton), much more quickly than would be possible using alternative algorithms that simulate each time step of each cell of the automaton. The algorithm was first described by [Bill Gosper](https://en.wikipedia.org/wiki/Bill_Gosper) in the early 1980s while he was engaged in research at the [Xerox Palo Alto Research Center](https://en.wikipedia.org/wiki/Xerox_Palo_Alto_Research_Center). Hashlife was originally implemented on [Symbolics](https://en.wikipedia.org/wiki/Symbolics) [Lisp machines](https://en.wikipedia.org/wiki/Lisp_machine) with the aid of the [Flavors](https://en.wikipedia.org/wiki/Flavors_(programming_language\)) extension. &gt;==== &gt;[**Image**](https://i.imgur.com/HXEaXre.png) [^(i)](https://commons.wikimedia.org/wiki/File:Turing_Machine_in_Golly.png) - *The 6,366,548,773,467,669,985,195,496,000 \(6 octillionth\) generation of a very complicated Game of Life pattern computed in less than 30 seconds on an Intel Core Duo 2GHz CPU using hashlife in Golly. Computed by detecting a repeating cycle in the pattern, and skipping ahead to any requested generation.* --- ^Interesting: [^Golly ^\(program)](https://en.wikipedia.org/wiki/Golly_\(program\)) ^| [^Conway's ^Game ^of ^Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) ^| [^Bill ^Gosper](https://en.wikipedia.org/wiki/Bill_Gosper) ^| [^Paterson's ^worms](https://en.wikipedia.org/wiki/Paterson%27s_worms) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci1ixls) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci1ixls)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
The handling of `this` is unique in JS, and kind of weird. By default, `this` refers to the global scope, which is the `window` object in a browser. There are only a couple ways to change that. The most common is by invoking an object method. An object method is a function like any other, except it's in a field of an object. When you invoke it as a method, by doing `obj.fn()` for example, inside the body of that function the `this` pointer is set to `obj`. So... var obj = {}; obj.foo = function() { console.log(this); } obj.foo(); // logs obj console.log(this); // logs window The next way of changing the target of the `this` pointer is within the body of a constructor method. Again, a constructor method is a function like any other, it all depends how it's invoked. If you invoke a function using the `new` keyword, like `new Fn()`, it's treated as a constructor. (By convention, constructors have an uppercase first letter, but that's not strictly required.) Like I described before, in the body of a constructor, the `this` pointer is set to a *brand new* object, who has had its `prototype` and `constructor` fields set. By default, the return value of a constructor function is that new object. So... function Foo(bar) { console.log(this.prototype); console.log(this.constructor); this.bar = bar; } var fooInst = new Foo(1); // logs Foo.prototype, Foo console.log(fooInst.bar); // 1 But if you just invoke `Foo` *without* the `new` keyword, the `this` pointer is unchanged and still points to `window`: var fooInst = Foo(1); // logs Window.prototype, Window console.log(fooInst); // undefined console.log(window.bar); // 1 I told you all that so I could tell you this: the second line of the `_` constructor is written so, if you try just invoking it normally without using the `new` keyword, it still behaves as a constructor and returns a new `_` instance. It determines whether it has been invoked as a constructor or not by detecting whether `this` is pointing to a `_` object using the `instanceof` operator. There are three other ways (that I can think of?) to change the target of the `this` pointer, but they're more advanced and can wait. They're all methods on `Function.prototype`: `call`, `apply`, and `bind`.
its beautiful
because the word diablo in the description. pretty cool lib btw..
Have some real internet money for your internet accomplishment! Please buy yourself 1 hamburger :) /u/changetip I'm working on the Team Treehouse Javascript videos myself, it's a bit less 'doing' than codecademy, but a bit more 'learning', it covers a lot of things in a very structured way very nicely. You can get a 14 day trial and complete it within a week if you're passionate! Go FORTH young one!
The Bitcoin tip for 1 hamburger (3.834 mBTC/$2.50) is waiting for drunkroger454 to **[collect it](https://www.changetip.com/collect/23547).** [What's this?](https://www.changetip.com/tip-online/reddit)
surely kicks the CPU into hellish temperatures..
demonic!
Ha! thanks for your patience... clearly at the time I wrote that, I hadn't gotten 47 minutes in and seen your byline. I really liked this. Thanks.
I have managed to shoehorn in that behavior with notify(). It may be better to use events for that, though.
Great explanation! I finally understand how constructor functions really work--I didn't *really* get the hidden 'this' object before. Thanks.
(or *will be*, this is intended for OS X 10.10)
The only way you will be able to really out perform the in-built maths functions is if you do it by hand. For example: // these two are the same on *positive* numbers var a = Math.floor( y ); var b = y|0; // these two are the same on *positive* numbers var a = Math.round( y ); var b = (y+0.5)|0; // these are the same for turning valid numerical strings into an int var a = parseInt( y, 10 ); var b = y|0; (Technically they aren't all the same as there is a long list of caveats, but they can be 'good enough' if you have the inputs already validated and checked). You could try something like [Sweet.js](http://sweetjs.org/) for implementing them, so they are macros and get fully inlined into your final source code. That way you don't have the cost of function calls. How to get faster than that? Heavily analyse your source code for anything that is preventing it from getting optimized (like storing multiple types in an array or a variable), or improve your algorithm so it just does less work to get the same results!
Events are fine for simple tasks, but for anything advanced or any kind of app (i.e. Not a simple feature) you'll want promises. There are many reasons why, buta few are: * Events are usually coupled to HTML elements, making their reuse somewhat limited. I know that's not always the case, but it usually is. * Asynchronous actions are way better with real promises -- not jQuery dererreds. Something like Q is a great promise implementation. * Promises have error handling. Events don't... And a try catch block as part of events just doesn't really compare to a promise. Promises are cleaner, easier to implement, and more powerful. Edit: Not sure why I got down votes. Upon reading other comments, I realized I'm essentially repeating what others wrote ...
If one wants an event to be executed only once then they would use `emitter.once(event, listener)`.
Just for comparison's sake - Windows had Javascript automation in Windows 98, with the Windows Script Host. :/
awwwwwwwwww yeeeeeeeeeeeeeeeeaaaa
Perhaps this makes sense if you come from Java or some other OOP language, but in JavaScript **you DON'T need it**. There is a lot of overhead in OOP that is entirely absent with a functional approach. What's worse is that JavaScript is not Java, but Java developers will still apply all their Java bad habits to this language when attempting OOP.
* graphic user interface * parser * media carousel * slideshow * media conversion tool * svg authoring tool * accessibility helper * path finding algorithm
Technically, it's been possible to use JavaScript with OSA since 2001, but it never got enough attention to get out of alpha. http://en.wikipedia.org/wiki/JavaScript_OSA Awesome that Apple's officially doing it themselves tho.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**JavaScript OSA**](https://en.wikipedia.org/wiki/JavaScript%20OSA): [](#sfw) --- &gt; &gt;__JavaScript OSA__, (originally *JavaScript for OSA*, abbreviated as *JSOSA*), is a [freeware](https://en.wikipedia.org/wiki/Freeware) [inter-process communication](https://en.wikipedia.org/wiki/Inter-process_communication) [scripting language](https://en.wikipedia.org/wiki/Scripting_language) for the [Macintosh computer](https://en.wikipedia.org/wiki/Macintosh_computer). &gt;JavaScript OSA uses the "core language" of the [Mozilla](https://en.wikipedia.org/wiki/Mozilla) implementation of the [JavaScript](https://en.wikipedia.org/wiki/JavaScript) [programming language](https://en.wikipedia.org/wiki/Programming_language), (see [SpiderMonkey](https://en.wikipedia.org/wiki/SpiderMonkey)). The language is used as an alternative to the [AppleScript](https://en.wikipedia.org/wiki/AppleScript) language. Its use is unrelated to [web browser](https://en.wikipedia.org/wiki/Web_browser)-based scripting. It can be seen as having a similar function to [Microsoft](https://en.wikipedia.org/wiki/Microsoft)'s [JScript .NET](https://en.wikipedia.org/wiki/JScript_.NET) language on Windows machines, although there is no interoperability between the two languages' system-level scripting. &gt; --- ^Interesting: [^AppleScript](https://en.wikipedia.org/wiki/AppleScript) ^| [^JavaScript](https://en.wikipedia.org/wiki/JavaScript) ^| [^Late ^Night ^Software](https://en.wikipedia.org/wiki/Late_Night_Software) ^| [^Script ^Debugger](https://en.wikipedia.org/wiki/Script_Debugger) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci1wk7d) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci1wk7d)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
This is very, very different. OS X (and Mac OS before it) has a strong tradition of application scriptability. A big problem with this, however, is that it used a language called AppleScript which is extremely limited and difficult to understand (despite being designed to be easy to learn). So all the work that's been done over the years for applications to be scriptable is immediately usable via JavaScript, whereas Windows Script Host never really caught on. Yosemite is adding the option to use JavaScript instead, which opens a lot of exciting possibilities. This is particularly interesting since Apple's new programming language, Swift, has a very similar syntax to JavaScript.
&gt;Windows Script Host never really caught on. Huh? What are you talking about? Windows is very automatable and "caught on" quite well.
Among application developers, I mean. There's plenty of support for the generic actions provided by the OS itself, but not custom scripting in 3rd party applications. That's the impression I have, at least.
Well sure there is. I think you are uninformed.
Name 5...
&gt; uninformed *Mis*informed.
&gt;My idea - that this would allow current and new applications to connect with other Apple applications and use functions from OS X. This has been the case for decades: https://developer.apple.com/library/mac/documentation/applescript/conceptual/applescriptx/concepts/osa.html Previously, Apple offered the use of AppleScript to let scripts control applications, which is a very ugly language. Now people will be able to accomplish the same thing in JavaScript.
Returning an undeclared variable is not valid so it will be picked up by any useful linter.
It is declared, that's the whole point of the TIL. It is a global variable which holds the parent window (or the current window if it is the parent). That is why I question if a linter would pick it up, since 'return parent' is a perfectly valid thing to do.
Does that likely mean 10.10 will ship with node?
Applescript already makes that possible. The significance of JS is that it's a more widely used language so the features of Applescript will be available to more people.
Math.random();
A non-paying offer to teach someone with no JS experience to simulate a stock market, all to play an "RP game"? Sign me up!
I gave WebStorm another try today. Is there really no Seach-n-Replace option? (ctrl-H in every other editor). Ctrl-O should be open-files. If I focus on an anchor tag to an HTML file in the same directory there's no way to open it (via alt-enter or other keystrokes). I've been paying for ReSharper for years. I'm just not feeling it yet for WebStorm.
Are you being serious right now?
Hi guys, I have a couple of old versions of YTO and I've succeeded in removing the nasty license checks. However, I can't get the download links or the reverse playlist to work (I'm yet to see that option!) If anyone wants to know how I did it, let me know. I'll pm you the various things I did. Thanks!
Also, if anyone would like the modified version of YTO, I'd be more than happy to send you the dropbox link to it :)
I see, so it will become more prevalent. Thanks.
...and we wait
Since chrome has TOTALLY banned the use of external extensions I fail to see how it is useful. They don't even work with developer mode enabled. The only way to get YouTube center (switched to this) to work was to download the source code and have chrome load an unpacked extension. :( or is there a way to make chrome load external extensions again? External = extensions Not from their store. 
And then Chrome improved the developer tools immensely while Safari managed to turn their implementation into a pile of shit.
Well, you can't really compare them. ReactJS stands for the V in MVC and KnockoutJS is a full MVC framework - just like AngularJS, Ember or Backbone. I'd personally stop wasting my time with Knockout and start learning AngularJS. It's the best effort out there. Later edit: Looks like I jumped to conclusions and I was really wrong. Thanks for all your corrections! This is indeed a great community and there is a lot to learn from it.
No
Use [browserify](http://browserify.org/)! First, install jQuery (`npm install jquery`), and write your code: var $ = require('jquery'); // your app If you're done, build your project with `browserify myapp.js &gt; bundle.js`. If your project is big, or you don't want to recompile every time manually, use [watchify](https://github.com/substack/watchify). Read the [browserify handbook](https://github.com/substack/browserify-handbook) :).
Browserify + NPM has become standard practice for a lot of small front-end modules. 
I never thought AppleScript was ugly :(
Oh such wow. I hate AppleScript!
This would be a bit harder than it sounds, because the loop invariant is embedded within a method invocation. It isn't a simple case of detecting a *constant variable* (yes, I get the oxymoron) and would probably require special-casing this particular optimization. Which is exactly why it is the programmer's responsibility to know the tools and employ them properly, such as compiling regex's when it makes sense. Compiling a regex essentially turns the expression into a block of code that can perform the state machine transitions of the equivalent expression, but in the general case even a compiled regex isn't going to be as fast as an efficient simple substring search algorithm such as Boyer-Moore. 
So how many times have you seen a tutorial about doing things in Windows (installing programs, changing permissions on folders, etc) and seen someone say "ok just run this Windows Script Host script". Personally, it's not even once. Compare that to how many times you see scripts for doing things in linux. I've been in software development for 10 years, most of it on the .NET stack and I've never heard of WSH before. 
javascript is a language, node is a development platform. 
Not surprised. Your test is just broken in many ways. Try [this one](http://jsperf.com/q1/8)
Fair enough. I may have a soft spot for it as it is a descendant of [HyperTalk](http://en.wikipedia.org/wiki/HyperTalk), which was the scripting language of [HyperCard](http://en.m.wikipedia.org/wiki/HyperCard), which inspired HTTP and which I spent quite a bit of time in as a kid.
Write your own module system. You will learn something. Then, if it is crap, throw it away and use X, Y, or Z. If it is good, release it.
Just for fun I decided to see how many of the 3rd party applications I have installed on my Mac are scriptable. Going alphabetically (and skipping all of the Adobe apps) I got to 5 before reaching the letter B: 1. Acorn 1. Adium 1. Airmail 1. Alfred 2 1. Awaken
I think this is the fastest. Want to test it? test_str = test_str.split('.').join(',')
It's more than that. AppleScript is a very weak language and difficult to use. It was designed to be easy to learn, but in that regard it was a complete failure.
&gt;Personally, it's not even once. Its not a consumer term, but wsh is used all the time. There's a wsh module form windows installed. Trust me when I tell you that you have installed programs that use wsh. You are simply unaware.
Because you are aware of it doesn't mean anyone else uses it. Again, 10 years in software, 8 of that in .NET (MS stack), never heard of this program before. It sure seems like someone would have mentioned it. Since the introduction of Powershell I doubt anyone even thinks about WSH anymore. 
Conversely, because you are unaware of it does not mean that no one else is aware of it. (Your argument can be turned right around on you.) the source for my information? I used to work for Microsoft. I have many more than 10 years in software. And my original point was that JavaScript was introduced into windows 16 years ago, well before you started. It makes sense that you are unaware but you cannot generalize your experience.
Start with a [bounding box](http://i.imgur.com/9SK6GvV.png). Then test every cell within said bounding box if they are inside the circle. As /u/pun_savant already pointed out, testing if it's inside the circle can be done with Pythagoras. However, you don't actually need to use sqrt. You can skip this by comparing the result to the *squared* distance. Actually, you don't need to test every cell inside the bounding box. You only have to check about 1/8. Everything else can be mirrored. E.g. the example above only needs 10 checks: http://i.imgur.com/OEgFnRy.png http://i.imgur.com/UWN5VxJ.png Anyhow, if you don't do this with hundreds or thousands of cells, don't bother with this optimization. Simply testing every cell inside the bounding box will be fast enough. **Edit:** You can of course skip even more tests by ignoring the area inside which is covered by a square which touches the circle from the inside. Everything inside this area is obviously also inside the circle. **Edit2:** If you get stuck, take a look at: http://jsfiddle.net/3nPan/1/
Came here to say this. If I may piggyback on your answer and try to provide a little more clarity: selected = []; for (var i = 0; i &lt; 12; i++) { for (var j = 0; j &lt; 10; j++) { var dx = i - cx; var dy = j - cy; var d = Math.sqrt(dx*dx + dy*dy); if (d &lt; 3) { // You might try &lt; 4 and/or &lt;= if this doesn't give you what you expect. selected.push([i, j]) } } } ... where cx and cy here are the center of your circle. If you move to much larger arrays and find this inefficient, you could also precalculate a set of *offsets* from 0,0 that make up the interior of your circle, and then add those offsets to cx, cy to determine the set of items in range.
You are the aforementioned consumer.
That's because it's embarrassingly simple to add it in Cocoa. On one Mac application I developed, I had the task to add scriptability. I kept putting it off, thinking that it'll be a huge undertaking. In the end, it took like 2 hours of work, including learning on how to do it in the first place. It's more or less just exposing the methods of the controller you already have in your app and naming things correctly.
Apple uses JavaScriptCore, which is the engine used in webkit.
Hypercard was indeed quite impressive in its day!
There's no built in way for a javascript file to reference another one. If you want that to happen, you need to make sure the other modules/libraries have been included in the current scope. The simplest solution is to just load the files you need in the main html file in the correct order. Say for example you have: * yourGlobalUtilities.js * yourPageSpecificCode.js * jQuery.js * jQuery.somePlugin.js In your head section: &lt;script type="text/javascript" src="jQuery.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="jQuery.somePlugin.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="yourGlobalUtilities.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="yourPageSpecificCode.js"&gt;&lt;/script&gt; When the file "yourPageSpecifcCode.js" is loaded, the other three files have already been loaded, and therefore you won't have any issues with references. Now, this can get a little hard to manage yourself if you have a lot of files, which is why others are recommending various plugins to take care of it. But this method will work.
Yeah, you should definitely use Angular. It's really great and does all the things.
&gt; My idea - that this would allow current and new applications to connect with other Apple applications and use functions from OS X. It used to be like that, but the sandboxing requirement of apps in the App Store removed that possibility. Now it's only for user-made scripts controlling applications. Applications are allowed to receive commands, but not send them. [I have an app in the App Store](https://itunes.apple.com/us/app/cockpit/id404844653?mt=12) that uses this feature. It's grandfathered in, that's why it's still there. I can't release any updates to it, though.
I found exactly [one mention of WSH](https://www.google.com/search?q=site%3Ahanselman.com+powershell&amp;oq=site%3Ahanselman.com+powershell&amp;aqs=chrome..69i57j69i58.8631j0j7&amp;sourceid=chrome&amp;es_sm=93&amp;ie=UTF-8#q=site:hanselman.com+%22windows+script+host%22) on Scott Hanselman's blog (two if you count the comments). Contrast that with Powershell, of which there are roughly four hundred. I dunno why you're so in love with this idea that WSH "caught on". Just let it go man. Edit: don't admit you were wrong, just downvote and move on eh? 
Well, that's quite subjective. I'd personally say Backbone and React for its V is just as good, only because Angular is quite unorthodox in terms of familiarity and common programming patterns. More over, one might explore the RxJs + React combination for the taste of the future!
jQuery never had the torch.
he said "Its not a consumer term", I think you misunderstand what he means by consumer
console.log
Well, I actually like both and I think of knockoutjs more of quick go to API for smaller projects and if you want something with a lot more features go for angularjs. One thing I learned the hard way at work is browser support, knockoutjs supports IE7+ and angularjs IE8+.
If you want a real world example to pick apart, I'd suggest installing Yeoman and generating a basic web app. Then, pick apart the Grunt tasks. /r/ItWasAValuedRug is right, grunt-contrib-watch is what you're going to use for livereload, but generating the Yeoman app will give you something to pick at.
I find it incredible how you never came across WSH during those eight years of programming on "MS stack". It would be understandable if you only worked on Mono though.
console.dir for objects is nicer
Scott Hanselman mentioned that tool on his blog exactly once. He's been writing about MS software programming for 10 years: &gt;Scott is a web developer who has been blogging at http://hanselman.com for over a decade. He works in Open Source on ASP.NET and the Azure Cloud for Microsoft out of his home office in Portland, Oregon. Scott has three podcasts, http://hanselminutes.com for tech talk, http://thisdeveloperslife.com on developers' lives and loves, and http://ratchetandthegeek.com for pop culture and tech media. He's written a number of books and spoken in person to almost a half million developers worldwide Scott Guthrie, the same: once. I dunno why you two have such hard-ons for WSH. It's clearly an ancient and forgotten tool. 
I had to do something similar, and I ended up building a circular linked list constructor.
TIL strings are immutable. Just always had the assumption that setting a char by index would work.
A useful (and easy to implement) property of this would be that color words were given the color they represent. For example the color for "red" would actually be red. 
You should dispense with the single-letter function names and just put the code into the field. It would make the test much easier to read.
That's fine and all but how would go about debugging code in such environment? Lint throws a bunch of errors because the jQuery consrtucts I'm using aren't defined in my .js file. So unless I keep copy/pasting my functions back and forth every time I want to debug something I just don't see how this would work. 
To be honest, and I know this might seem like a silly reason, I like a view layer that uses real HTML. HTML was invented for the view layer, that's it's only purposes, and it does it better than anything else. Therefore I'd stick with Knockout from your two choices. Plus, like /r/stopdave said, React is the view layer. Basically I work on a large team and serve as a lead front end dude. I'm not going to be able to pass off a view built in Backbone, React, or Ember as easily as I might with views built in Knockout or Angular. In fact, that's what turned me away from Ember (my first JS MVC love) and towards Angular. The only cases where I've seen React might excel in the view layer are usually poorly thought projects, like performance boosts for looping over a list of 10,000 items. Why is your API returning something like that? To sort of parrot what others have said, I'd really go with Angular if your project is a full blown application. There are many great reasons to use Angular over Knockout. * Bigger user base means more examples, plugins ... although the official documentation is lacking. * Transclusion. Enough said, really. You probably won't miss it if you don't know about it, but will love having it when you do. Instead, in the Knockout world you'll hacking something to do what transclusion gives you. * Routing, view orchestration, factories, animations, etc .... Angular is more of an all-encompassing framework, where Knockout is more of a library. In comparison, jQuery is like a utility. To be fair though, Knockout was really meant specifically to data bind, and has sort of grown from there, whereas Angular was always meant to be a full framework. * *However*, because Angular is a full-blown framework, it will be harder to understand at first. In time you'll find it really rewarding to learn. Actually Google and Code School just realized a free [intro to Angular](https://www.codeschool.com/courses/shaping-up-with-angular-js). If you're really set on Knockout, I'd suggest looking into [Durandal](http://durandaljs.com). Durandal uses Knockout for data binding (the main purpose of Knockout) so it really aims to build upon Knockout to turn it into something like a real framework such as Angular.
Is it just me, or does it seem like the scope of the recommendations are all over the map here? "Code" encompasses using a bunch of libraries and high level concepts that all could merit articles/books on their own, while the 7th step is super specific tips about actually how you write the code.
You can use the [revealing module pattern](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript) (no need for external tools), or a module loader such a Browserify or RequireJS.
You can't make a statement like 'You are wrong.' without providing adequate proof to your statement. 
Without a citation and/or explanation, your post does not add anything to the discussion. 
They are both mostly binding libraries. Knockout is lightweight and can easily be upgraded to a full-blown MVC framework. React is 4x the size of KO (if the size is an issue), and is built to work with small component rather than a huge application. But in the end they both are binding libraries. Pick the one you feel the most comfortable with.
&gt; If you're really set on Knockout, I'd suggest looking into Durandal. Durandal uses Knockout for data binding (the main purpose of Knockout) so it really aims to build upon Knockout to turn it into something like a real framework such as Angular. Just an FYI - Durandal and Angular are converging into one framework with Angular 2.0: http://eisenbergeffect.bluespire.com/angular-and-durandal-converge/ But there are alternatives like [Pager.js](http://pagerjs.com/), [Knockback.js](https://kmalakoff.github.io/knockback/), [Falcon.js](https://stoodder.github.io/falconjs/), [Riggr](https://github.com/Fluidbyte/Riggr) that are built on top of Knockout. 
mikrosystheme gave his evidence in a previous post, even put up an example (thanks mik!) One thing I would like to note is that this is basically a shortcoming of javascript to not have more robust string manipulation (resorting to regex is kinda ugly) If javascript had a replaceAll as a built-in, it would not have to rescan the string constantly, and have the call overhead of repeatedly calling indexof and replace (complete rescan). So use precompiled regex for now.
Fork it and do it, that's a great idea. 
The [Webstorm Blog](http://blog.jetbrains.com/webstorm/) has tons of great resources for tips and tricks with WebStorm. Also the guy who does their videos is the same guy who runs egghead.io.
More like OS X 10.10 === XXX
and others use it for jQuery object.
Basically, use other people's code, but if you have to code...make sure your code isn't the error your user sees!
I've seen it used for Strings... In BASIC, many many years ago.
Take a look at [angularjs](https://angularjs.org/). 
It's a common style convention (i.e. not a requirement) to start variable names with $ when the variable holds a jQuery object. 
I don't think the $name convention is used for DOM elements in JavaScript in general, just jQuery objects. 
My background is Enterprise Java development, so I understand where you are coming from. I'll base my suggestion on your familiarity with Java as well as the fact that you are new to Web-based UI development. You've already figured out that the role of the HTML page is analogous to your main class. HTML uses attribute tags to pull in resources that are external to the HTML file such as images, stylesheets, and external scripts. You are correct in that it is a good idea to store your JavaScript code in another file, outside of the HTML file. You've probably figured out that HTML uses the *&lt;img&gt;* tags for images and that stylesheets, if you've gotten to that point, are invoked via the *&lt;link&gt;* tag. HTML uses the &lt;script&gt; tag to attach JavaScript files. Similar to the import statement in Java, it loads the content of the file that it references. Since you are using jQuery, I'm sure your HTML file already includes a line similar to this: &lt;script src="jquery.js" type="text/javascript"&gt;&lt;/script&gt; If you move your JavaScript code to a new file and save it as *myJavaScriptFile.js*, you would then import it into your HTML file like this: &lt;script src="myJavaScriptFile.js" type="text/javascript"&gt;&lt;/script&gt; JavaScript can have multiple functions/methods/objects defined in a single file. It does not have Java's requirement that each class has to be in its own separate source file. (Yes, there are exceptions to Java's rule but let's keep the conversation simple for now). That's all there is to it. So far, so good. As a Java developer, your next question is probably something along the lines of "how do I create classes" or "how do I do something like a package?". There are a number of different approaches to accomplishing this and here is my suggestion for someone just getting started with HTML and JavaScript: Don't. Object definition and namespaces are not required to use JavaScript. All functions that you declare are, by default, global. Start with that. Once you are comfortable with the basic syntax of both JavaScript and HTML, then you can go on to learn about objects and namespaces. To start that journey, you'll want to explore the *prototype* statement but you'll be much better served if you take some time and read up on JavaScript OO. Some good resources for that are: * [Addy Osmani's "Learning JavaScript Design Patterns"](http://www.amazon.com/Learning-JavaScript-Design-Patterns-Osmani/dp/1449331815) * [Douglas Crockford's "JavaScript - The Good Parts"](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) * [Nicholas Zakas' "Principles of Object-Oriented JavaScript"](http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404) I would strongly suggest that you do not start piling on JavaScript libraries such as requires.js, bowman, browserfy, NPM, and the rest of the tools suggested here until you are very comfortable with the basics of the languages. You will only be adding unnecessary complexity that will serve no other purpose but to slow down the learning process and complicate things. Most of these suggestions, while well-intentioned, completely miss the mark that you are new to HTML and JavaScript. Too many carpentry salesmen recommending a power drill when all that you need is a basic hammer for that nail. 
I am pretty sure that somebody from here did the 9th revision of the test. You missed the point of why the original test was broken. Check [revision 10](http://jsperf.com/q1/10).
That slideshow is old, I believe the MS timers issue has been resolved. The real problem is JSPerf is unmanaged. It's one giant sandbox. Anybody can make an edit on any slug, and it doesn't even have to be the same test. I'd like to see github style edit trees and sectioning of content. Create a project slug or make a temporary sandbox. Put Core JS and functionality tests in their own section, so people can stop making the same damn test over and over again.
This part is a recipe for NIH: &gt; "Only use established and well-tested third-party libraries and &gt; frameworks..." The assumption here is that some code you find on the internet that is not "established" will be inherently flawed and will suck up your time with a buggy implementation. This outlook does not consider that any code that YOU write yourself will suck up your time with implementation and bugfixing and that packages which are already public have usually been vetted by multiple third parties with real-world usage and tests. This is especially the case for modules with a narrow scope that are solid and basically finished, even if they aren't very popular because they are so niche. It benefits yourself and everyone else much more to make the third party module work first and perhaps send a patch upstream before embarking out on your own.
You should almost never have to write $apply, if you're doing things in a a logical manner Angular will take care of that fore you.
WSH was popular during the IE5-IE6 years. 
Comment-op was honest about the fact that he was guessing. 
There's an even better, more succinct way of accomplishing the same thing: &lt;script&gt; angular.module('MyPage', ['MyActualModule']) .config(['$provide', function ($provide) { $provide.value('whatever', {my: {'object': 'here'}}); }); &lt;/script&gt; This has the benefit of being mockable in a unit test, and you don't even have to make globals out of things.
Instead of adding code in a new &lt;script&gt; tag at the end of the body you could use the iamge onload function to append it as soon as it's been loaded. You might also want to use the onerror handler to do something else if the image can't be found. var img = new Image(); img.onload = function () { document.body.appendChild(img); } img.onerror = function () { /* do something else */ ); img.src = "/path/to/image";
Cool! Thanks for the info. I'll look into those. Good luck with the app!
"I'm on iOS 7 iPhone5" that doesn't say what browser you are using. And they might not "precomile" regex
And soon… much easier to test.
That's awesome!
Oh nice. Hadn't thought of that. There are few disadvantages to this approach that I would argue though: 1. You have to write JavaScript in the HTML. Your templating engine would have to iterate of a collection of data points, writing JS for each one. I don't know if it's the business of your server to be writing dynamic javascript. 2. With my approach you can technically pass a string to the contents of the script tag and it would still parse, _i.e._ you don't have to worry about your templating engine escaping anything. 3. Does `$preloaded` really need to be mocked? I can set it to whatever I want before running my test. 4. My approach doesn't make globals either.
got :Uncaught Error. message: Uncaught Error fileName: lineNumber: 16 listed regex replace as completed but not the next one (string replace?)
&gt;React [...] is built to work with small component rather than a huge application. Wrong. Example: Instagram, one giant React component made of a bunch of little React components &gt;But in the end they both are binding libraries. Wrong, React is the 'V' in MVC, not a binding library.
Oh cool! Wasn't aware of that... Thanks!
maybe he comes from PHP, lol
1. Sure, but you can simply have it be boilerplate with a static JSON object that your template engine simply sticks into the correct place. 2. Anything JSON is valid to put into a script tag, and most templating engines should be just fine sticking JSON into a template. Lastly, most templating engines have the notion of "non-escaped" content. 3. If you really want your code to be truly testable, yes. 4. Anything on `window` is a global variable. Anything.
I wish I would have known about this earlier. We're doing CS summer camps this month for high school kids, and this would have been a great way to introduce them to Javascript. 
&gt;EDIT: I still don't understand how reddit works, and I don't give a shit about reputation, but can I ask the downvoters what is wrong with this answer of mine? Is the parent right? I added the suggested test, benchmarked it and reported that it is not faster, hence that /s?he/ is wrong. Am I just obnoxious? Nobody recognizes your name from other comments (most of us don't even look at names I suspect). So it looked to everyone as though "You are wrong." was your only contribution. For future reference, try to keep comments self-contained, and use the '&gt;' character to quote specific points of contention. If you notice, the comment where you provided valuable input is currently the top comment. Also, you're right that the points don't matter, but downvoted comments do get hidden. So avoiding obvious downvotes from poor grammar, being rude, etc. is a good way to make sure your voice is heard. 
Just get a cheap VPS : http://lowendbox.com/ You get root access and can install &amp; run pretty much whatever you want. As for uploading files, you can copy files/folders to &amp; from your server using rsync over ssh. http://www.tecmint.com/rsync-local-remote-file-synchronization-commands/
Nope. I used it to imply that it was a smooth process to integration.
 ☀ = 0; ☎ = 1; ☂ = []; for (❤=☀; ❤&lt;☯; ++❤) { ☂[❤] = ☎ + ❤; } console.log(☂);
&gt; Anything on window is a global variable. Anything. I agree... did you even read the post to the end?
Digital Ocean's cheapest VPS is $5/mo and you can put files on it just about any way you want. I know you said you hate git, but if your website is completely static and non-commercial, [github will host it for free](https://pages.github.com/). I have [my personal site](http://chipersoft.com) hosted through them. I've never had an outage, even when the github service was offline.
I'll admit: I did skip the last bit. You still have arbitrary script tags with unrecognized types, but I can live with that. I still prefer the wrapped approach that doesn't abuse the script tag, however.
Yeah! Why wouldn't they.... bastards!
Jquery can do this - among a million other things too. Just try to pay attention to the idea of separation of concerns. Modularize and generalize the js you make so you can refactor and reuse later if necessary. Don't put controller logic that does stuff in the same area as view logic that adds images or the data that represents the location of the image. 
You're not a fan of git, does that mean you prefer mercurial or something?
Thanks for taking the time to add the test. I remember this trick was faster some years ago, but I guess modern js engines have made their string functions much faster.
You can't hate git and know how to use it. www.gitimmersion.com
http://jsperf.com/object-keys-vs-for-in-for-values/2 var props = keys(obj), index = -1, length = keys.length, values = []; while (++index &lt; length) { values.push(obj[props[index]]); } Edit - Although in reverse... this is even more performant, because while breaks at 0. var props = keys(obj), length = keys.length, values = []; while (length--) { values.push(obj[props[length]]); }
Ying-yang isn't defined, all vars were created as globals
try www.heroku.com i have seen some nodejs examples hosted there since the sign up is free for developers package.
Drawing the tiles only within camera bounds gives the good performance
Made some edits based on feedback from a few people.
Don't use `alert()`, use your browser's console. You can type in each sub-expression and see what it evaluates to. For example, `+[]` is the unary plus operator being applied to the empty list, which coerces the empty list to a number, resulting in `0`. `!+[]` is the logical-not operator applied to that, or `!0` which evaluates to `true`. `![]` is `false` as the logical-not operator coerces its argument to boolean, and `Boolean([])` is `true` (i.e. the empty list is truthy), and so `!![]` is also `true`. `!+[]+!![]` is therefore `true+true`, which equals `2`, as addition coerces booleans into numbers, and `true` coerces to `1`. You can keep going on, but it's really just `true+true+true+true` or `1+1+1+1`. There are lots and lots of tricks like this, see [here](http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html). You can encode any arbitrary JavaScript using only the eight characters `()[]{}!+`. 
Thanks for the response. Now it makes sense. Kudos for your suggestion to use the Browser's console! I forgot that exists and never thought to use it in this fashion.
I think if you used symbols to represent in-built pictures, so you could do 'draw this face' and things like that, that could be a good use case for this for teaching.
There are some non-alphanumeric backdoors though http://blog.sucuri.net/2013/09/ask-sucuri-non-alphanumeric-backdoors.html
no but it will onlt be a matter of time before someone creates a compatibility layer.
To be sure, the whole point of this article was to show a "just because we can" tutorial, right? Who in their right mind would want to add more complexity to HTML and CSS just because it keeps everything in JS :S
&gt;(Angular also requires jQuery) Nope, Angular sure does not require jQuery. It has a lightweight jQuery implementation of its own called jqLite . You can, however, include jQuery on the page before Angular, and Angular will use it instead of jqLite. &gt;[If jQuery is available, angular.element is an alias for the jQuery function. If jQuery is not available, angular.element delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."](https://docs.angularjs.org/api/ng/function/angular.element) You also complain a lot in your post, kind of off-putting.
Great blog, thanks!
ITT: people talking about Angular when the OP asked about React and Knockout. Way to go /r/javascript. I especially like /u/sehrman's response. Way to command without providing any reasoning.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Hidden surface determination**](https://en.wikipedia.org/wiki/Hidden%20surface%20determination): [](#sfw) --- &gt;In [3D computer graphics](https://en.wikipedia.org/wiki/3D_computer_graphics), __hidden surface determination__ (also known as __hidden surface removal__ (__HSR__), __occlusion culling__ (__OC__) or __visible surface determination__ (__VSD__)) is the process used to determine which surfaces and parts of surfaces are not visible from a certain viewpoint. A hidden surface determination algorithm is a solution to the [visibility problem](https://en.wikipedia.org/wiki/Visibility_problem), which was one of the first major problems in the field of 3D computer graphics. The process of hidden surface determination is sometimes called __hiding__, and such an algorithm is sometimes called a __hider__. The analogue for line rendering is [hidden line removal](https://en.wikipedia.org/wiki/Hidden_line_removal). Hidden surface determination is necessary to render an image correctly, so that one cannot look through walls in virtual reality. &gt; --- ^Interesting: [^Frustum](https://en.wikipedia.org/wiki/Frustum) ^| [^Pixie ^\(renderer)](https://en.wikipedia.org/wiki/Pixie_\(renderer\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci2xxnq) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci2xxnq)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Volo/jam/ender sound pretty dated, does anyone actually use them? Component.io is another package manager... Kind of insane how many there are. 
Damn fine work!
If we talk about Node.js development: 1. I guess that you don't write pure HTML. You use template language like Jade or Hogan.js. So you still have to deal with kinda different language 2. I guess that you don't write pure CSS and use LESS or Sass. With Sass you even have to install Ruby. So, it is more like a personal choice I guess. 
When writing a description in Basecamp, it will automatically convert URLs to Youtube and Images to html - I wanted this functionality in an app I was building and URL2HTML is the result. 
Hi Abramz, Thank you for your feedback. It's true that Angular doest not require jQuery, and thats maybe something that I was not very correct in my post. The thing is that I had a few errors when using ng-grid, that I was only able to solve by adding the jQuery implementation. I admit that maybe it may be my mistake. About complaining, it was not my intention. It was just the feeling I had when working on the technologies and the post itself. I don't have a Javascript background, so a few things may seem weird or strange to me. I'm sorry if you felt offended in anyway. 
No, this is horrible and no one should ever use it outside of joking.
Why? Even with a room full of 20 kids who wanted to be there, trying to teach them programming concepts and markup can be incredibly tough. Truth is, staring at an IDE full of parentheses, curly braces and angle brackets isn't really what kids want to do. After two days of trudging through mud, you know what really got the kids on board? Teaching them how to "hack" cookie clicker. But that was a mistake, because they were convinced that everything is "hack-able" with two minutes and a bit of searching. During breaks, all of the inevitable questions were, "Mr. Hero, can you teach me how to hack [game title]?" No matter what we said, it was always asked. My point wasn't that we should institute a new standard where it's alright to name variables using Emoji. If anything, it would have helped keep their interest by relating a very basic programming concept to something that they know. I'm not saying use this in college class rooms or even in high school classrooms. It was a one week summer camp where they're *supposed* to have fun while learning.
Maybe I am just old and grumpy then. :)
your first point about events being usually coupled to html elements makes no sense in respect to this question since were talking about a design pattern. 
Interesting, I never thought of doing it that way. Would going from nested loops to a single loop give performance benefits, even though the same number of tiles are ultimately iterated over?
Always use console.log() and debugger; !
Not only that, but doing a lookup in a second array is likely going to ruin your performance by causing lots of cache misses.
I was being sarcastic, the very first reply was literally saying not to waste their time with KO and just use Angular. /r/javascript has the biggest hard on for ng
Looks to me like we're all unwittingly helping XKCD performance test several different CDNs! [This script](http://xkcd.com/static/cdn_time.js) causes each visitor to the site to be randomly assigned a CDN to test, and then will download several test images and report back timing information to the XKCD mainframe. The test image certainly looks like purely random data, but knowing XKCD.....
I analyzed the image it seems to be random. It haves all values from 0 to 255, and analyzing color distributions in 100000 pixels the difference between the most repeated value and the least is just 106 occurrences.
A kingdom for a distribution chart. I'd give one, but I have none. Edit: /r/dataisbeautiful would probably love it, too ;)
http://repl.it/TpH/1 The trick you were missing is simply replacing the ( to start with.
Bullshit. Any properly compressed PNG image is not compressible by gzip. It goesn't matter what the image is.
It most likely *is* random, so that it can't be compressed. Even when the image is served in an uncompressed format, some proxies will try to shrink it. AOL used to do this, as did/does T-Mobile in Europe. 
Ahh great, thanks so much!
Op said [HTTP compression](http://en.wikipedia.org/wiki/HTTP_compression), was not referring to image compression.
When I click the run button I get: [ { quote: '(Laugh #2)', path: 'sounds/Laugh_2.mp3' }, { quote: 'Don\'t Even Ask', path: 'sounds/DontEventAsk.mp3' }, { quote: 'Don\'t Plan Too Much', path: 'sounds/DontPlanTooMuch.mp3' }, { quote: 'Don\'t Touch Me', path: 'sounds/DontTouchMe.mp3' }, { quote: 'Anything For My Princess', path: 'sounds/AnythingForMyPrincess.mp3' }, { quote: '(A Very) Interesting Story', path: 'sounds/InterestingStory.mp3' }, { quote: 'My Best Friend', path: 'sounds/BestFriend_2.mp3' }, { quote: 'Good Thinking!', path: 'sounds/GoodThinking.mp3' }, { quote: 'Everybody Betrayed Me', path: 'sounds/EverybodyBetrayMe.mp3' }, { quote: 'God, Forgive Me', path: 'sounds/GodForgiveMe.mp3' }, { quote: 'Oh Hai Denny', path: 'sounds/OhHiDenny.mp3' }, { quote: 'How Dare You Talk To Me', path: 'sounds/HowDareYouTalkToMe.mp3' }, { quote: 'How\'s your Sex Life', path: 'sounds/AnywayHowsYourSexLife.mp3' }, { quote: 'Hi Doggie', path: 'sounds/HiDoggie.mp3' }, { quote: 'How Could You Do This', path: 'sounds/HowCouldYouDoThisToMe.mp3' }, { quote: 'How Could You Love Him', path: 'sounds/HowCouldYouLoveHim.mp3' }, { quote: 'Oh Hai Mark', path: 'sounds/OhHiMark.mp3' }, { quote: '(Incomprehensible)', path: 'sounds/Unintelligible.mp3' }, { quote: 'I\'m Tired, I\'m Wasted', path: 'sounds/TiredWasted.mp3' }, { quote: 'It Tastes Good', path: 'sounds/ItTastesGood.mp3' }, { quote: 'I Did NAT Hit Her', path: 'sounds/IDidNotHitHer.mp3' }, { quote: 'In A Few Minutes Bitch', path: 'sounds/InAFewMinutesBitch.mp3' }, { quote: 'I Fed Up With This World', path: 'sounds/FedUpWithThisWorld.mp3' }, { quote: 'Tearing Me Apart', path: 'sounds/TearingMeApartLisa.mp3' }, { quote: 'Love is Blind', path: 'sounds/LoveIsBlind.mp3' }, { quote: '(Laugh #3)', path: 'sounds/Laugh_3.mp3' }, { quote: '(Laugh)', path: 'sounds/Laugh_1.mp3' }, { quote: 'Just A Chicken', path: 'sounds/JustAChickenCheep.mp3' }, { quote: 'They Can Feel It', path: 'sounds/TheyCanFeelIt.mp3' }, { quote: 'Oh Hai Denny #3', path: 'sounds/OhHiDenny_3.mp3' }, { quote: 'Oh Hai Peter', path: 'sounds/OhHeyPeter.mp3' }, { quote: 'Oh Hai Denny #2', path: 'sounds/OhHiDenny_2.mp3' }, { quote: 'Nice Tux', path: 'sounds/NiceTux.mp3' }, { quote: '(Scream)', path: 'sounds/Eaaaaugh.mp3' }, { quote: 'That\'s The Idea', path: 'sounds/ThatsTheIdea.mp3' }, { quote: 'That\'s The Idea #2', path: 'sounds/ThatsTheIdea_2.mp3' }, { quote: 'Treat You Like A Princess', path: 'sounds/TreatYouLikeAPrincess.mp3' }, { quote: 'We\'re Expecting', path: 'sounds/WereExpecting.mp3' }, { quote: 'Why, Lisa Why?', path: 'sounds/WhyWhyLisa.mp3' }, { quote: 'You Look Baby Face', path: 'sounds/BabyFace.mp3' }, { quote: 'You Must Be Crazy', path: 'sounds/YouMustBeCrazy.mp3' }, { quote: 'You Must Be Kidding', path: 'sounds/YouMustBeKidding.mp3' } ] I am very confused now. This is the same order it shows in context in my project.
I think this works: johnny.sort(function(a, b){ a = a.quote.replace(/\(|\)/g, ''); b = b.quote.replace(/\(|\)/g, ''); if (a &gt; b) return 1; if (b &gt; a) return -1; return 0; }); **Edit:** Since there are three possible states, I think you need two comparisons to get it right. **Edit2:** You know what? I think I was mistaken about needing two comparisons. This seems to work, too: johnny.sort(function(a, b){ return (a.quote.replace(/\(|\)/g, '') &gt; b.quote.replace(/\(|\)/g, '')) ? 1 : -1; }); I believe leaving the *return 0* option out just makes it a little less efficient, as it swaps values around in that case. I got that from [MDN's docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort): &gt; If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.
Are you writing a shredding song?
Thanks, this works great! Would you mind explaining the "/\(|\)/g" part
Sure, it's just a [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) that replaces ( or ) with a blank string. The forward slashes denote a regex literal. The pipe | is an 'or', and the back slashes escape the parentheses, since parentheses are special characters in regex. The *g* is a flag that tells it to replace all matches, rather than just the first one. A good resource for playing with regular expressions is [regex101](http://regex101.com/).
Yes, but the PNG images are already compressed. You can't compress them further with GZip (which is used by HTTP compression). Hence why it doesn't matter what the image is.
Thanks! I tried different ways of running timing; setInterval seemed to work the best across browsers and running in iOS as a webview, so I stuck with that. Sound.JS basically just acted as a shim for some older browers; I probably could have made do without it for newer browsers, but I'm a little lazy and I already had it built in, so I left it as is. 
That's a great point. Even though you got down voted for the "bullshit" part, you're right.
Sorry I tried to find a simple online JSON to chart tool but failed. Here, have the raw-data instead: {"1835888127":344,"303174399":345,"1313754879":347,"2964369663":349,"2172748287":349,"2324335359":350,"1414812927":352,"3284386815":354,"1296911871":355,"1852731135":355,"2391707391":357,"892679679":357,"993737727":358,"1347440895":358,"437918463":360,"2240120319":360,"2711724543":361,"3924421119":362,"825307647":363,"3520188927":364,"3014898687":364,"185273343":364,"2812782591":365,"3132799743":365,"16843263":365,"3402287871":365,"4042322175":366,"2762253567":366,"2273806335":366,"2054847231":367,"67372287":367,"1953789183":368,"976894719":368,"2155905279":368,"724249599":368,"1600086015":369,"4210752255":369,"1667458047":369,"2189591295":369,"3604403967":369,"2863311615":370,"1010580735":370,"4109694207":370,"2509608447":371,"4294967295":371,"3115956735":373,"3958107135":373,"1515870975":374,"2105376255":374,"522133503":374,"4092851199":374,"3537031935":374,"1482184959":375,"3654932991":375,"3419130879":375,"2256963327":375,"3739148031":375,"757935615":376,"454761471":376,"1802202111":377,"4008636159":377,"168430335":377,"2593823487":377,"3048584703":377,"2694881535":377,"3469659903":377,"3823363071":378,"117901311":378,"252645375":378,"2930683647":378,"2610666495":379,"2038004223":379,"673720575":379,"3351758847":379,"3267543807":379,"1229539839":380,"3082270719":380,"1431655935":380,"1532713983":380,"2341178367":380,"1381126911":380,"3217014783":381,"1751673087":381,"4193909247":381,"218959359":381,"2644352511":381,"3301229823":381,"255":381,"3755991039":382,"2779096575":382,"909522687":383,"151587327":383,"1330597887":383,"3334915839":383,"1785359103":384,"3941264127":384,"2004318207":385,"2223277311":385,"84215295":385,"3806520063":386,"3789677055":386,"3486502911":386,"1734830079":386,"1566399999":386,"2307492351":386,"707406591":386,"1061109759":387,"3166485759":387,"1903260159":388,"1077952767":388,"2846468607":388,"555819519":388,"1145324799":388,"4025479167":388,"3149642751":389,"3688619007":389,"4059165183":389,"1549556991":389,"4076008191":390,"1583243007":390,"1987475199":390,"858993663":390,"471604479":390,"387389439":390,"1684301055":391,"3183328767":391,"3890735103":391,"3974950143":392,"1886417151":392,"3857049087":392,"1650615039":392,"589505535":392,"33686271":392,"2425393407":392,"3099113727":393,"3065427711":393,"791621631":393,"2880154623":393,"2475922431":393,"2374864383":394,"1869574143":394,"943208703":394,"101058303":394,"3907578111":394,"3570717951":394,"4227595263":394,"4177066239":394,"1128481791":395,"3368601855":395,"3385444863":395,"1717987071":395,"3840206079":395,"421075455":395,"2071690239":395,"640034559":396,"1027423743":396,"4160223231":396,"2560137471":396,"2896997631":396,"3318072831":396,"2913840639":397,"2358021375":397,"2795939583":397,"3452816895":398,"2290649343":398,"606348543":398,"3772834047":398,"1768516095":399,"3250700799":399,"1633772031":399,"2088533247":399,"1212696831":399,"1616929023":399,"3991793151":399,"741092607":400,"3621246975":400,"960051711":400,"3705462015":400,"1701144063":401,"2981212671":401,"1936946175":401,"3638089983":401,"572662527":401,"2122219263":402,"1970632191":402,"404232447":402,"2829625599":403,"2206434303":403,"3435973887":403,"286331391":403,"2459079423":404,"505290495":405,"2947526655":405,"3200171775":405,"269488383":406,"3722305023":406,"623191551":406,"808464639":406,"3873892095":407,"2442236415":407,"1246382847":407,"1819045119":407,"1397969919":407,"1094795775":408,"353703423":408,"1499027967":408,"370546431":409,"2745410559":409,"2576980479":409,"2492765439":409,"4244438271":409,"3031741695":409,"2998055679":410,"842150655":410,"336860415":410,"134744319":410,"235802367":410,"1448498943":411,"4126537215":411,"1044266751":411,"4278124287":412,"1179010815":412,"538976511":413,"1364283903":414,"1465341951":414,"202116351":414,"4261281279":414,"4143380223":414,"1280068863":415,"2543294463":415,"2661195519":416,"875836671":416,"320017407":417,"774778623":418,"2408550399":418,"3671775999":418,"3553874943":418,"1162167807":419,"2021161215":419,"3587560959":419,"2526451455":419,"926365695":420,"3503345919":420,"1111638783":420,"656877567":420,"690563583":422,"2627509503":423,"1920103167":426,"488447487":427,"2728567551":427,"2139062271":427,"1263225855":427,"50529279":429,"3233857791":431,"1195853823":440,"2678038527":450} Generated in Ruby with [chunky_png](https://github.com/wvanbergen/chunky_png) like this: Hash[img.pixels.reduce(Hash.new(0)){|s,e| s[e]+=1;s}.sort_by(&amp;:last)].to_json By the way: It has 256 different values. Coincidence? ;)
Awesome, Thanks again!
not flaming you, but a pet peeve of mine is when people use words that require implications like this. George Orwell said it best, "never use a long word where a short one will do."
It's ok, truth is not determined by voting.
I don't really like the term "undefined index". To use more spec-based terminology, you could say that the array doesn't have an own property at that index (ie. you will see that arr.hasOwnProperty(2) is false). Or, to be even more inline with spec terminology, you could say the array has an elision. Another common way of referring to this is to say the array has a hole at a particular index. A hole is a good description because if you do something like: var arr = [,]; Array.prototype[0] = "Hello!"; arr[0]; // Hello! You'll look up to the prototype. All of this said, hopefully you will never come across this in your day-to-day. The TC39 committee has decided that holes are almost never what you want and new array APIs like Array.from will not preserve holes in copies.
I use node and socket.io for a chat app. By default it just sends the new messages to the users screens, but to make it persistent I just stick all the messages in a variable, aswell as pushing them out. In this case all the messages are lost when I restart the node server, but that's ok for this. This works well for this application, as when people join the server pushes the contents of the variable, so everyone's up to date. This might not work for your situation but it demonstrates how flexible node can be - without the need for database inserts and updates. One way I could expand on my method is to write to a file, rather than just an ephemeral variable, but I've not needed that yet. Again, a chat app is fairly straight fwd, no need to update the historical content, but you could write the file in JSON format. Has the power of a database, but without all the back end bloat. Apologies if you've already rejected this as a solution, but if not, the following question on StackOverflow might help http://stackoverflow.com/questions/2496710/writing-files-in-nodejs
This is exactly what I wanted to do, thanks!
Ah. Thanks for the feedback. I'll consider this in the future.
I think I broke my sound card...
Quick - what are the things that, if your code broke, you would completely halt or roll back a deploy because of? Those are the things you integration test. You should be testing both with and without external services, to ensure that either the plumbing code (that hooks up the external service) or the external service itself is the problem. The more ways you can split your code by testing it, the easier it will be to find problems when they do occur.
The good stuff starts in at about 14:30
`ReferenceError: webkitAudioContext is not defined` Could you fallback to [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)?
not really... there's a couple hundred lines of code in there that aren't possible without "audio" are you running IE or Firefox? EDIT: Sorry, I misunderstood you, I guess I could add that to the list.
This talk is about identifying developers who are intermediate opposed to beginners or experts and striving to become experts. More often than not competence closely follows confidence. I mean actual confidence and not superficially faked confidence that is really just arrogance. Confidence follows comfort in the absence of help and more often than not is silent and humble. Most web developers I encounter are not confident. They need frameworks, patterns, tools, abstractions, and other helpers to compensate. By need I mean absolutely imperative to do their jobs or write basic applications without which all will hopelessly fail. There are many cases I have encountered Java developers writing JavaScript who wish JavaScript were Java and will do everything in their power to make this so. This is not confidence and typically follows invitations for all manners of frameworks. This hides the incompetence in the short term only to be exposed later when the application is larger and more expensive to maintain. Even still, the incompetence is often ignored in favor of other excuses (cognitive complexity, maybe?). My opinions about frameworks in response to confidence is primarily formed from watching other developers struggle and fail. The opinion is almost entirely solidified, however, by reading the opinions and motivations of people who have formed popular frameworks.
what code are you writing to output the function name? I usually just use: &gt;function func_name (params) {} to declare my functions. I don't understand why you would name the function twice? would it have multiple names / variables assigned to it? what happens when you mutate one?
You are absolutely right, javascript is so convoluted with frameworks and libraries that the language at the core of it all is often almost entirely neglected. This is only worsened by the accessibility of javascript to newcomers in software development, people are able to pick up pace without learning principles and good engineering practise. Couple this with the abundance of terrible information available on the web and you have a recipe for many misguided developers. It has taken me a few years in the industry to realise that sailing on the surface will only take me so far, without exploring the depths of my chosen language and understanding how to build software from a language agnostic perspective I can only ever 'get by'. This essentially puts me back to square one, but I would rather do that now than in five or even ten years. Edit: Having said all of that, there is nothing wrong with patterns and if you never use frameworks and libraries, you are probably just creating lots of unnecessary work for yourself, or worse, your team.
You and I are not communicating... drats. I can call this code in C#, no problem. This url shows that the function "HelloFeelz" does exist http://feelzmecom.webhost4life.com/FeelzMeSRV.asmx The examples I have seen show that the way to call is with the url, a slash, and then the function name The url does not 404, but when called with the function in the JavaScript code, then you are correct it does 404. This is why I am confused. All the examples I see show my stated pattern as correct... but obviously something is wrong. 
JavaScript functions have a special property called `name`. If you declare a function using `function aFunction () {...}` the `name` property will be set to `aFunction`. An anonymous function, ie, `function () {...}` has this `name` property too. However, it is undefined, since anonymous functions do not have a name. You're right about assigning the name twice, but consider the following: var Vector = function () { // stuff }; Vector.add = function () { }; Vector.multiply = function multipy () { }; When you try to access the name of `Vector.add`, it will be `""` (or `undefined`, not sure). When you try to access the name of `Vector.multiply` it will be `"multiply"` I don't even know what conclude about this, aside from that my pet project will be a lot harder because JavaScript is designed this way, even Sublime Text syntax highlighting doesn't agree with Vector.multiply = function multiply () {} Edit: There are two ways to acces the name of a function. The first is really simple. function getName (func) { return func.name; }; function getName2 (func) { // this method uses func.toString, and then looks for the name in the returned string var name = func.toString(); name = name.substr('function '.length); name = name.substr(0, name.indexOf('(')); return name || "anonymous function"; }; The second is a bit harder, but it is cross-browser, since not all browsers have `func.name`, but all of them have `func.toString()`
I read that naming functions can be useful for debugging purposes, but I'm a newbie, and I don't quite understand how that works.
http://feelzmecom.webhost4life.com/FeelzMeSRV.asmx?op=HelloFeelz
I've seen something similar to this used for storage as well, evercookie uses an image method like this that stores a random image with a set height/width and pixel generation to uniquely identify someone.
I remember discovering this when I attempted to zip a bunch of jpegs and wondered why the zip file was still about the same size as the images were together. I was 12 years old at the time and it wasn't until I began at the university (6 years later) that I learned why it was this way.
This is a pretty well known feature of JavaScript. 
You can find this, and a lot of other interesting stuff in [John Resig's Advanced JavaScript Course](http://ejohn.org/apps/learn/). var t = (function loop(n) { console.log(n++); if (n &lt;11) setTimeout(loop.bind(null, n), 1000); })(1); Also, the book [JavaScript Patterns](http://shop.oreilly.com/product/9780596806767.do) has a lot of detail on this and other aspects of the language's innards.
This was my thought also. 
Yeah, that's a better way of phrasing it. I looked up elision, and came across this article: http://www.nczonline.net/blog/2007/09/09/inconsistent-array-literals/
Yeah, the scroll is double firing occasionally and for some reason debounce isn't limiting the number of display calls. edit : fixed w/ some cheese
I had no idea there was a name property in js. weird, TIL. You're using a dangerous pattern in javascript I haven't seen before, I would advice against it. There are safer ways to do this. I'm not so good with prototypical inheritance, but I use backbone.js and underscore to manipulate objects, safely, across browsers. Frameworks are not the only way to do this.. but there are more libraries than I can count for object manipulation. Lots of trial and error, different opinions and coding styles. That's what I love about the js community/ecosystem. Vanilla JS is good to know, but you're shooting yourself in the foot. I make mistakes in js, and I learn from them, and then I use the libraries because I understand why they exists.. edit: [mori](http://swannodette.github.io/mori/) is my favorite library. 
Ok so maybe he's looking for an image that can't be png compressed easily. Like, maybe he's concerned that a cdn might try to reencode the image to improve compressibility or something.
Yes, but if you're posting in a forum I assume you want to be part of a community, and a cooperative tone might get more people to take notice of what you're saying.
THANK YOU! I have been reading articles like this: http://www.codeproject.com/Articles/14610/Calling-Web-Services-from-HTML-Pages-using-JavaScr and especially this one: http://sandblogaspnet.blogspot.com/2010/03/calling-web-service-using-javascript.html Which is the pattern I was attempting to make work... but didn't understand (obviously!) Thank you very much for your time and effort
Some of them do.
Seems like the answer was built into the question. The xkcd author (or just promoter?) comes to /r/javascript to ask this question. Where else would you begin looking but in the js.
I'm using these dangerous patterns properties for a reason. This little project I'm making calls the getName function on functions other people defined. For example, a library like jQuery or someone's Github garage code. I quite like messing around with dangerous things like this, just to get to know JavaScript better. Edit: It's worth noting that I found out about the `name` property in Secrets of the JavaScript ninja by John Resig. Edit2: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name According to mozilla's mdn, `name` is an ecmascript 6 proposition and it's already supported in all the main browsers^Except^InternetExplorer^of^course
I found out about this name function first when I was reading John Resig's Secrets of the JavaScript Ninja, thanks for the other links.
Anonymous functions just show up as "(anonymous function)" in stack traces but if you give it a name, it will have a more useful description in stack traces thus making debugging them easier. EDIT: For example, open your JavaScript console and look at the difference between the stack traces generated by the buttons in this JSFiddle: http://jsfiddle.net/F8fy3/ In a big JavaScript app or library, giving your anonymous functions and closures names can be a huge help in debugging random errors.
Yeahhhh, I was just about to say that using the .name property in browsers would get you in trouble. All good in Node, though, since you're always going through the V8 runtime
Depends if your $jsonObj is shared data or data only relevant for the keydownHandler. If it's shared data, it belongs to some container used for your shared state (which may hold the ajax call too) If this data belongs to your handler and your handler only, then you can leverage the fact that functions in javascript are objects, and store the data inside your function. function keydownHandler(e) { //check if the data has been set if(keydownHandler.contextData){ //do your stuff with it.. } } function makeAjaxCall() { //a function is an object, you can give it a property on the fly keydownHandler.contextData = {//do ajax call}; } addEventListener("keydown", keydownHandler, false);
If you look at the Network Panel in Chrome, you'll see that all the load information is sent to http://c.xkcd.com/cdndata. I uploaded the request headers and request data to GitHub Gist https://gist.github.com/davejlong/2ef9c0cbc7a80efbd73c
Might try [Google Charts](https://developers.google.com/chart/) and jsfiddle...
I jut want to make a projection for my web app running on mobile browser which has not remote devtools. So i can easy looking for every problem happen to my app.
Have you tried asking the author?
You could do it via an IIFE context thing, function keydownHandler() { var $jsonObj; $.get("blah.json", function(){ $jsonObj = JSON.parse(this.responseTextOrWhatever); }); return function(e){ // this function will have $jsonObj as soon as it's available } } addEventListener("keydown", keydownHandler(), false); But really the easiest answer is that if you surround all of that in a function scope then $jsonObj won't be a global, (function(){ "use strict"; var $jsonObj; function keydownHandler(e) { //This functions needs that json object ... } function makeAjaxCall() { $jsonObj; = {//do ajax call}; } addEventListener("keydown", keydownHandler, false); }()); From console you can verify that, &gt; window.$jsonObj undefined 
&gt; Is this useful in any way? Yeah it makes stacktraces more readable.
I've always disliked this talk, though mostly because it's not technical. Confidence comes from preparedness, plain and simple. If you have not spent time learning the thing you are supposed to be using, that's your damn issue right there. MDN and stack overflow are such incredible resources that it astounds me people still struggle to teach themselves.
Usually a project that has the following common patterns: - Login/Logout - Landing page - Dashboard - Fetch a list of objects from a remote DB - Render a list of objects from a remote DB is a pretty good start, as these are very common patterns. I have just launched an AngularJS course geared towards this: http://www.angularjstutor.com The courses teaches AngularJS fundamentals and goes on to use them to create a Project Mgmt. Dashboard.
As a consumer of your API client library, I would like a domain object over a plain old javascript object. If you're building an API client library, there's not much convenience that you're adding for users of it if all you're doing is performing the AJAX requests for them and putting them into an object.
This can be useful I believe angular uses it for their unminified Dependency Injection, at least I do in my own implementation. However you should note that after running your code through minification/obfuscation such as UglifyJS, these function names go right out the window (though there is an option to turn this off). In my own code, I define modules like so. define(function module_name (dep_1, dep_2) { //blah blah blah }); Use the function name as the module id. And then parse out the dependencies from the function's arguments. Aside from this it's incredibly useful for debugging. I very rarely use anonymous functions for this reason. By the by (and this is totally personal preference). What's the deal with everyone declaring functions as variables? I really prefer function declarations myself. 
You can use, https://www.npmjs.org/package/newman if you doing external API testing.
Civil discourse, shitrapist, is a cornerstone of society. 
So? It's serving the same demographic as Arduinos and extra computing power is all but irrelevant for most tasks that something like this will be doing.
http://i.imgur.com/tACCaA9.png
Please inform me of this tool that allows me to see my cache misses so I can run up a performance test. Edit: I also somehow doubt that a "huge map" where the player can be at any point referencing multidimensional arrays and not sequential bits in a single dimension array will be devoid of a lot of misses. If anything, it would be simpler to cache a small array of offsets for the current viewport. But go ahead and speculate on premature optimization and whatnot. I'll still be coding and waiting for your magic tool.
Didn't watch the video. I'm hoping it's 10 second long with a banner that says: Learn your shit.
That would be me. I'm sorry about it now, KHTML turned out so great! But it was extremely pissing to write cross-browser code in 2002…
Interesting, I like to push the limits too. I wasn't sure if you were converting code from another language or experimenting. I usually declare functions named, or within objects. I can't think of a reason to use the var name = function name() pattern (using function name() without the var kills 2 birds with one stone), but obj.name = name function() may have some utility... Playing with dangerous patterns led me to some interesting findings in the past - usually weird bugs, but i prefer the path less travelled.
Haha yeah I know but it was was the first time I got it working and didn't expect it to go so well in JS
&gt; Please inform me of this tool that allows me to see my cache misses so I can run up a performance test. Sure, it's called [Cachegrind](http://valgrind.org/docs/manual/cg-manual.html). :) I'd love to hear what you find. &gt; If anything, it would be simpler to cache a small array of offsets for the current viewport. Well, maybe I've misunderstood what you meant about storing offsets. Can you give an example of what you mean? &gt; But go ahead and speculate on premature optimization and whatnot. Given that cache misses are one of the biggest problems for performance on modern computers, it is essential to understand how to write algorithms that behave well with the caches.
Having a function depend on a previous async call to finish is a bad practice as it may lead to race conditions. I understand that a scenario where a user will press a key before the ajax call is finished is unlikely, but for good code habits I would have still used a Promise with caching. Maybe something like this: var jsonObjProvider = (function () { var jsonObj, get; get = function () { var promise; if (jsonObj) { promise = new $.Deferred(); promise.resolve(jsonObj) } else { promise = $.ajax(...); promise.then(function (res) { jsonObj = res; return res; }) } return promise; } return { get: get }; }()) function keydownHandler(e) { jsonObjProvider.get().then(function (jsonObj) { //do stuff }); } This way you don't have to store jsonObj in the global scope, and you get the extra benefit of making sure it actually exists before using it. 
What did you use to create that image?
capybara is a testing library written in Ruby, not a browser. 
&gt; Yes, but the PNG images are already compressed. Not only that, PNGs are compressed with the DEFLATE algorithm, which is the exact same as what gzip uses.
This may be a fairly well-known feature of JavaScript but I suspect there are a few other folks like you on here who haven't come across this before now, and it's a fairly awesome thing to realise. I'm glad you figured it out!
You shut your filthy mouth, we're discoursing here. Man, it feels weird to even type like that.
Everyone at some point in their lives has a wheeze that if zip makes files smaller then zipping the zip file should be twice as good. Nup, it's not.
She criticizes a small sample size study, yet cites Malcolm Gladwell as a good source. Hmm.
I think this is a great answer. We actually just started writing a lot of integration tests at work and I wrote a blog article about it [here](http://zoetrope.io/tech-blog/integration-testing-protractor-webdriverjs-and-sauce-labs). As for what to test, I can't give examples without your specific application but I can give you a few examples of what we do. [Our product](http://zoetrope.io) is heavily dependant on the image viewer so that's the most important part to test. We wanted to ensure that nothing broke cross browser so the best way to do that was to interact with the viewer and use Sauce Labs to test across a bunch of browsers. So we're looking for things like the image not rotating correctly when swiped on mobile, the wrong size of viewer appearing on mobile, general IE issues, the help bar being displayed with the correct language strings and the zoom button displaying the correct frame. Obviously our tests are going to be very different to yours but I hope this helps a little.
Not trying to sound like a dick, but I doubt I ever thought that. I'd have assumed if it could be easily made half the size again, it would have done that.
Fastly is a CDN.
Slides: https://speakerdeck.com/raganwald/the-art-of-the-javascript-metaobject-protocol Discussion of Part I, "JavaScript Combinators:" http://www.reddit.com/r/javascript/comments/27glvu/javascript_combinators_video/
Ipython notebook. 
I've seen Cucumber before, but I've never really looked at it in depth. Now that I have a new perspective, it seems like it would be great for us. I'm going to look into it a bit more. Capybara seems nice, but we're running Node.js, and I'm not sure if I want to add Ruby to the mix. It's a possibility though. I'll have to research a bit more. And thank you for the article, it was a good read. It really tries to expose the goal of integration testing.
I think your examples are exactly the kind of thing I'm trying to get at. Obviously, I test all of the forms, buttons, however/swipe effects, etc. But how deep do you go when it comes to layout testing? I can think of a few different levels for that: 1. Don't test anything. Leave that up to our manual tester. 2. Test for basic layout. The right things are visible, certain elements are the size they should be, etc. 3. Test position on page. Make sure that list items are floating horizontally, make sure the text isn't running out of its container, etc. 4. Test everything. Size, position, color, margin, etc. My gut tells me that I should be at level 2, possibly dipping into level 3 for certain situations. On the scale above, how much should I be testing the layout of my application?
At this stage I think it becomes a time vs. reward trade-off. You need to prioritise tests that are most likely to fail at some point soon, and tests that have the biggest impact if they fail. So if you often change the layout of a particular section then write some tests for that section first. How far you go down the rabbit hole is up to you. Personally, I'm probably testing at level 2 for certain sections of the site but less elsewhere. It comes down to how much time you have, and what the impact of each hypothetical test failing would be in production.
Firefox Nightly
Not sure I can run that on the JavaScript VM directly... Running it on the browser could be problematic since there's outside factors to the JavaScript itself that could impact the execution. Maybe Node? Or possibly V8 (though I haven't tried running that standalone...if it's even possible.)
No problem. Once you get it set up, it's pretty easy. The hardest part I think you already identified. "What's a good integration test.?"
wow, amazingly smooth animations! i'll eventually find an excuse to use this library.
Sorry to say so, but this code is ugly beyond correction. Please don't abuse inline events like that, use DOM level 3 events (addEventListener - maybe with a fallback to the old IE-Events attachEvent, if necessary).
Wow, thanks for the help. While I appreciate the Angular link, and I will be moving over to Angular soon, I think it's important that I have a better vanilla JS foundation. Then build from there.
Why do you need an animation library to create css3 animations using css3 animations?
Looking closer at your code, I guess you are trying to do something like the HTML5 feature details/summary.
I find there are 3 behaviors to programming: * computational * orthographic * visual Computational people think in terms of pure logic, such as arithmetic. This is handy if you need to bang out a lot of primitive stuff quickly and makes working assembly bearable, perhaps even enjoyable. These types of people will favor procedural and imperative code with a syntax that emphasizes computation over instruction. Orthographic people think in terms of symbolic representation. These are word people who demand declarative programming styles. This group also probably benefits from OOP where they can have the expressive freedom to extend things through manually binding pieces together as necessary. This serves the purpose of symbolic representation of stringing things together by named properties of the coders design. This group needs declarative OOP models of programming with a syntax that is wordy. The visual people are people who prefer to solve problems with abstract reasoning that may not directly appear logical or orthographic. This group is called visual because they preference processing through the visual cortex in much the same way that a GPU can rending complex tasks apart from the CPU. This group is going to favor programmatic models that can be instantly reasoned on sight within a few seconds. This group prefers a syntax that strongly calls out encapsulation but is otherwise very lightweight and sometimes even extremely primitive. For this group wordy names probably just get in the way and manually binding pieces together is a horrible nightmare. This group would prefer imperative functional models of programming. A functional approach favored by the visual people probably does not make sense to orthographic people. The visual approach does not spell things out and requires a language's structure to provide the blueprints for how things should be put together. Likewise an OOP approach would likely frustrate the visual people would likely find it unnecessarily verbose with too much overhead and many lost fragments. Computational people would likely be challenged by both approaches, but would ultimately side with the visual people who prefer less code.
Yeah, thats exactly what i'm trying to do. But exactly what makes code "ugly"?
Overabundance of context requiring double escaping of strings leading to confusion about the context in which the code is intended.
it would be much simpler, if you used fewer slashes trying to escape your quotes. Do this: &lt;div id='tile2' onclick='openTile("tile2", "&lt;button onclick="closeTile(\"tile2\", "&lt;h2&gt;Class&lt;/h2&gt;\")"&gt;Submit&lt;/button&gt;);'&gt;&lt;/div&gt; Better yet, you could just write some code doing this, instead of abusing inline JS events: function AddEvent(element, eventName, eFunction) { if(element.attachEvent) { element.attachEvent("on" + eventName, function() { eFunction.call(element); }); } else if(element.addEventListener) { element.addEventListener(eventName, function, false); } } This will allow you to attach an event listener programmatically instead by doing something like this: AddEvent(document.getElementById('some HTML Element ID'), 'click', someFunction()); You can also do an anonymous function like this: AddEvent(document.getElementById('some HTML Element ID'), 'click', function(){ //some code here }); Should do what you're looking for. Please though, refrain from abusing inline events ever again, and attempt using the above before resorting to jQuery. It can become a crutch if you don't understand what's going on behind the scenes first. Source: StackOverflow
I've been testing this for a couple of days now and I will not be able to use it. It is generating blacks and such which are not really colors. I'll be returning to my script since I can specify dark or light colors depending on the theme being chosen. Just figured I'd give you some feedback.
It'd be nice if there were examples using real content, or something besides a white square. I guess it kind of did when I first loaded the page, but I can't replay that initial intro by reloading the page.
Why would you suggest jQuery first rather than starting with jQuery's roots? I understand that it's easier for many to learn and get used to, but it's also part of the problem. Learning jQuery first isn't necessarily going to make any of this easier, it's just going to add more headache to a simple problem with a simple solution.
I guess the point is to give you the ability to test and fine tune your css3 animations before you implement them. Not something the average coder really cares about. Seems like something targeted at interactive designers and animators.
Love feedback - both good and bad. Thanks dude!
Thanks a bunch! Its really nice to have someone who would spend the time to type all of that out to help someone new to JS.
No problem, and you're welcome. I would much rather take the 5 minutes to teach someone how to do things correctly, than for them to struggle and possibly get so frustrated that they quit, or code incorrectly. Stack Overflow is a great source of information when you're trying to figure an issue out. If you google your problem, I'd say 90% of the time there is a thread on SO covering the issue, and providing a sound answer on how to resolve it.
Very smooth. I was hoping this more of a tween.js kinda thing but with css3. But I am sure other people can get good use out of it :)
Running on Node is probably the easiest way to profile Javascript. If you just want to see the effects of accessing one array to get offsets into another array, it might be a lot clearer if you try a simple C program.
Damn! I was expecting more from XKCD. Although .. even if it has such a distribution .. does that mean it is unlikely that it could still contain carefully selected content?
You are special
Oh, the function doesn't depend on the async call and the async call finishes to completion. The async call just happens separately, and the handler occurs only on certain events (keyboard press).
I'm pondering whether I really hate my users that much that I would use this type of animation… hmmmm.
How is profiling a C program supposed to help with JavaScript algorithms?
**tl;dr**: The tone of the article is entirely inappropriate. It comes across as an aggressive and uninformed attack. You won't get anything out of this rant, move along. **----------** I get the guy doesn't like monolithic opinionated frameworks, but: - Claiming the AngularJS team makes AngularJS the way they do for job security is just a dumb statement to make. - "...if you didn’t know any better, you’d think the AngularJS team invented dependency injection and testable JavaScript some time in 2012." Is not an impression I've gotten from the AngularJS team. - He seems to be scared of big scary "transclusion" even though it takes a whole 60 seconds to understand. - "The addition of this word to the vocabulary of the Web" Transclusion is a term from computer science, are computer science terms now too scary now? - "the AngularJS team has decided to overload and redefine terms with well-established meanings in software development such as factory and service." Citation needed. 
I think there's some room to do more interesting things, since the machine itself is running a node server and has wifi. Could be wrong though.
There are arduino wifi modules. I'm not saying I don't like the idea of node on something like this, I'm just saying that it's expensive by comparison :) $10 for an arduino mini means I can throw them at projects, like building a microcontroller+servo to poke my cat repeatedly while he sleeps. $99 + $25-$60 per module for the tessel is an entirely different story... And I'm not sure I see a point in the more expensive route... Arduinos have typically been mostly hobbyist things, but they can also be used to prototype and build actual products. $10 added to the cost of something is reasonable. $200 isn't (in most cases)
I think there gets to be a point with some of us where we're just way too lazy to even consider writing C and having to do pin lookups, and the extra cost is worth the plug/play cards and such. (I'm ashamed to admit that yes, I've become That Lazy.)
Oh, I totally agree... if I was only interested in buying one of these. I personally have about a dozen arduinos and 50+ microprocessors lying around / doing shit in my house. If someone else starts designing modules for this, I'll strongly consider it, but double the price for the same hardware (things like the audio module vs an arduino wave shield) just seems like another for-profit company trying to cash-in in an area that's typically been very open. Yes, I realize that their hardware and software is open-sourced, and I'm hoping the prices come down because of that, but for now... I just generally object to companies trying to rip people off on something that's traditionally been an open industry. For example, they're re-selling $5 servos for $10, and every module is an increment of $25. I don't think companies like this realize that they'll make more profit / have a better user base if they sell more stock at lower prices than if they try to make a 100% profit per unit.
That *is* clever. Took me a couple of readings to really get what is going on. The thinking that helped was looking at bind() as "taking" a function and "placing it on" an object. `Function.prototype.bind.bind(fn)` "takes" `Function.prototype.bind` and "places it on" `fn`, returning `fn.bind`. The resulting bind function can then be used normally. So, instead of calling fn.bind directly, this lets us pass in a function, to create a generic "bindable" version of the passed in function. Whatever is passed into the that "bindable" function can then be bound to as normal: `fn.bind(x)` yields `x.fn()`, which can then be used freely. So, `demethodize = Function.prototype.bind.bind(Function.prototype.call)` produces `var demethodize = Function.prototype.call.bind`, which can be passed in any function: var slice = demethodize([].slice); slice("string") // [ 's', 't', 'r', 'i', 'n', 'g' ] **Edit:** I cannot seem to figure out why simply assigning Function.prototype.call.bind to the demethodize function does not work... I think it has something to do with the "this" value being incorrect, I am not sure... What strikes me as strange is using Function.prototype.call.bind directly works! :/ **Edit2:** Ok. With a lot of careful prodding from the author, I managed to figure it out. I left some comments in the article, but here is the gist: Leland writes: &gt; Saying just `var demethodize = Function.prototype.call.bind` is actually no different than saying `var demethodize = Function.prototype.bind`. My discovery: &gt; Ok, I think I finally got it. I figured it out by trying this: &gt; `var log = console.log;` &gt; `log('hi'); // TypeError: Illegal invocation` &gt;I realized that is calling log() not as if it is on console, but as if it is on window. &gt; That make it clear what you meant when you said var demethodize = Function.prototype.call.bind is equivalent to var demethodize = Function.prototype.bind. That assignment does not assign a reference to the function in the stated context--it just refers to the function within the current context, wherever that is. &gt; Really, that behavior is why we need bind() in the first place. A reference to Function.prototype.call.bind is not the same as a reference to Function.prototype.bind.bind(Function.prototype.call). &gt; While the latter will always execute in the Function.prototype.call context, the former will execute in whatever context it is called.
Prototyping what, exactly? Python and javascript serve completely different needs. This is like saying a corvette is better than an semi-truck.
npm? https://www.npmjs.org/
Maybe it is because of linear algebra. What's wrong with matrices? By the way you are right. The output is not mainteinable, but I think it is outside the scope of the tool.
All things considered, if it were encrypted it would essentially look random, unless it was encrypted using shitty algorithms.
you mean javascript / node.js? when you are building a full-stack application, the comparison will be between node.js and flask/phyton. javascript (front-end) + phython (back-end) is also common combination.
I wish this had all of the other objects! Good read so far.
Here's a fiddle with your calculation working http://jsfiddle.net/TWmy6/1/ Be sure to check how variables are used and how you can access HTML elements in javascript in order to get their value. If you have any question don't hesitate !
very good in Google Chrome, stuck too much in Mozilla Firefox, too many silence notes in Windows Internet Explorer, lol
The "inverse" of `demethodize` can be handy. I suppose it ought to be called `methodize`, but I called it `pythonize` a while back because it emulates the way you write methods in Python: var demethodize = Function.prototype.bind.bind(Function.prototype.call), __slice = demethodize(Array.prototype.slice); function pythonize (fn) { return function () { return fn.apply(undefined, [this].concat(__slice(arguments, 0))); } } `pythonize`/`methodize` is a decorator that allows you to write methods with an explicit parameter instead of `this`: counter = { _num : 0, increment: pythonize(function (self) { ++self._num; return self; }), value: pythonize(function (self) { return self._num; }) } counter.value() //=&gt; 0 counter.increment() counter.value() //=&gt; 1 Besides the joy of working things out, it is useful when you have a method that includes a nested function and you don't want to monkey around with preventing `this` from shadowing itself: counter.addToAll = pythonize(function (self, arr) { return arr.map(function (eachValue) { return self.value() + eachValue; }) }) counter.addToAll([1, 2, 3]) //=&gt; 2, 3, 4 You can also do the `var that = this` or use `.map`'s ability to set a context to solve the same problem, but sometimes this is the elegant thing to do. There's surely a cool one-liner for `pythonize` as well. See if you can find it!
wow. thank you very much! what does += mean in JS?
Those tips really helped! thanks for the input
x += 1 means the exact same as x = x+1 it's just shorthand for a commonly used concept. Ed: Sorry, that was on a string concatenation, '+' is joining two strings, but otherwise same concept as above. newString += 'text' is the same as newString = newString + 'text';
Take the old value and add the new one to it. var i = 10; i += 10; // i now contains 20 var s = "hello"; s += "world"; // s now contains "helloworld"
 x += y is a shorthand way of writing x = x+y So this code: output.innerHTML += "&lt;p&gt;"+op1+"&lt;/p&gt;"; output.innerHTML += "&lt;p&gt;"+op2+"&lt;/p&gt;"; output.innerHTML += "&lt;p&gt;"+op3+"&lt;/p&gt;"; Adds those three lines of HTML onto the end of the output each time it's run. If you want to replace the old output with the new output instead, you could do it like this: output.innerHTML = "&lt;p&gt;"+ op1 +"&lt;/p&gt;" + "&lt;p&gt;" + op2 +"&lt;/p&gt;" + "&lt;p&gt;"+ op3 + "&lt;/p&gt;"; http://jsfiddle.net/TWmy6/3/
Indeed, the inverse is quite handy! It can save a lot of writing `.bind(this)` on nested functions, or proxying with `var self = this;`. This can also be really useful when in combination with currying... you can create prototype methods from partially applied forms of other utility methods you have lying around: Caution: Horribly contrived and ridiculous example ahead: function Counter() { this.num = 0; } Counter.prototype.increment = pythonize(compose(set("num"),add(1),prop("num"))); Counter.prototype.value = pythonize(prop("num")); ---- BTW, Just wanted to say that I'm a huge fan of allong.es, and a lot of your work was part of the inspiration in writing the (ongoing) functional javascript series I referenced above!
jsons inside jsons as slugs, interesting http://bouncejs.com/#{l:1,s:[{T:"c",e:"b",d:1000,D:0,f:{x:1,y:1},t:{x:0.2,y:1},s:3,b:4},{T:"c",e:"b",d:1000,D:500,f:{x:1,y:1},t:{x:1,y:0.2},s:3,b:4},{T:"c",e:"b",d:1000,D:1000,f:{x:1,y:1},t:{x:5,y:1},s:3,b:4},{T:"c",e:"b",d:500,D:1500,f:{x:1,y:1},t:{x:1,y:5},s:1,b:2}]}
* You can "connect" with the page in a few ways, depending on what you want to do. Generally, I'd recommend exposing a JS object/namespace and have some sort of initialization function to bootstrap everything. * Why not use jquery? if you use a lot of the library, then have it as a dependency. I'd check out how libraries like Backbone handle the jquery/underscore dependency (they don't include it in the build). * To avoid issues with other libraries just namespace all your functions so you wont overwrite/be overwritten by another library. * To build, if it is small enough you could be happy doing it all in one file but it comes down to personal preference. Either way, you probably want a minified, single file, built version anyway. * I'd recommend reading through [this chapter of Essential JS Design Patterns on namespacing](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailnamespacing) to see how you want to structure code. * To help you get started, if you use yeoman check out a generator like [this](https://github.com/matthewtoast/generator-lib)
Planning on doing the others weekly!
Because handcoding css transitions is not very productive way to spend time.
Paste it in a file and concatenate in your build. But it is annoying you'd have to recreate your animation if you need to adjust something, that is just stupid. 
As much as this looks like a neat little machine, Node runs pretty well on a [Raspberry Pi](http://www.raspberrypi.org/) for a bit less money with a lot more RAM. I'm looking at the specs for this thing and thinking 32mb, really? That said, the add on modules with pre-built node modules might make it worth a try for some projects.
ohhhh, wow, yeah that's useful. so by replacing the += with a = it overwrites. That's good! Thank you!!
I'm trying to figure out the reason to use demothodize. In your string slice example, you can do: [].slice.call('string') And get the same result as demethodize([].slice)('string'). I feel like the first example is much more clear and commonly known rather than wrapping it in a helper function. Thoughts?
@drowsap, this is a valid question. If you read the [article that this article references][1], you may get a better idea. It mainly applies to functional programming. You may want to pass around these native methods as functions of one or two arguments (rather than 0 or 1). For instance: var trim = demethodize(String.prototype.trim); var dirty = [" foo ", " bar"]; var cleaned = dirty.map(trim); //=&gt; ["foo","bar"] This is just a quick example, but if you are doing a lot of "functional" programming, it is useful to be able to turn these native methods into utility functions you can pass around and compose etc. [1]: http://tech.pro/tutorial/2010/functional-javascript-part-3-apply-call-and-the-arguments-object
Very interesting. I have been stuck on this one for the past hour or so. I cannot find a way to access `this` or `arguments` without passing them implicitly in the call to pythonize. (To boot, I cannot figure out a clean way to pass them in the method, either.) Do you have any ideas about how to form it?
@drowsap, I'm not sure if you get it... the example I showed would work perfectly with underscore...: var cleaned = _.map(dirty, trim); You're not really abusing anything at all. You're just avoiding making the line above this instead: var cleaned = _.map(dirty, function (s) { return s.trim(); }); use whichever one you want of course... this article was meant to explain a fairly clever one-liner of code. Nothing more, nothing less.
I think the main idea is to make your code cleaner. I think `slice("string")` looks a lot better than `[].slice.call("string")`. Also, if you use `Array.prototype.slice`, you don't have to create an array with each invocation. It is a pico-optimization, to be sure, but a saved byte nonetheless. The appeal of the `demethodize()` function is the ability to generate a host of those freestanding functions without having to type the whole thing out for each one. It is a little DRYer. Regarding your point about using a proven library like Underscore, I tend to agree. This would probably be best for a scenario in which you specifically *do not* want to introduce an additional dependency, for any of a number of reasons (less bloat, faster, more control over specific implementation, etc). However, it really is contextual, as it can prove to be a pain to integrate a tool like Underscore into a project that is built on neat tricks like this. Although, I am not sure that underscore offers a method to do this, so...
Notes: Works on Chrome/Safari Only at the moment Set audio to 44100 kHZ for best visualization Must have a dedicated graphics card
This is common practice on large scale projects and among front end developers who prefer it out of habit and convention.
Your browser has a built in debugger. Open up the dev tools.
@joshuahutt, what exactly are you trying to do? I'm not sure I follow.
You need to have a curry function to compose those, though, right? 
Nice one! Here is a small variation: http://jsfiddle.net/TWmy6/5/
I thought bower is the repository you're talking about. All libraries should be submitted there because it is (probably) most popular. Of course I'm talking about frontend JavaScript. For NodeJS use npm.
This becomes fairly powerful when you're debugging recursive calls. Otherwise, all of your calls will show up on the stack as anonymous function calls, and you'll have a hell of a time sifting through them for more complex logics.
Ah. That's a stumper. The one liner for demethodize is really taking advantage of how the `Function.prototype.call` method is sort of like "shifting" all of the arguments "to the right" by one. For methodize, we need to shift them "to the left" by one.... I'm not sure how we would do that without explicitly grabbing the `arguments` variable somewhere.
ended up using ember-cli. very nice. had to fix my node install to use it though, mostly because my npm would randomly leave root-owned files everywhere and it broke ember-cli.
Yes, originally in CoffeeScript I have them curried using this [curry helper](https://gist.github.com/elclanrs/656c5eb1a97dc7ad49bd): flip = curry (f, x, y) -&gt; f [y, x]... flip3 = curry (f, x, y, z) -&gt; f [z, y, x]... You could use `partial` as well if you don't want to curry everything I suppose, but it would look quite ugly.
You have created functions. Aggregating them together in a namespace is a necessity of modularity. Making them a class is not.
The link I posted includes a _.trim function. I do get it , I just would not like to see this in a code base I worked on.
&gt; the main reason being that you can introduce bugs and a terse code base if not properly documented and tested. What kind of code are you writing that *isn't* properly documented and tested? Why do you think that a utility function taking up one line, or two lines, or maybe five lines, is riskier than domain code that might involve functions with ten or fifteen lines? In my experience, when you have a function like this, it is replacing some kind of idiom or pattern that is repeated over and over in your code base. If it is replacing the use of `.call` and/or `.apply` in your code base, I would think that the code it is replacing is far riskier.
I'm an econ major too! I've never gone to a bootcamp, but in my humble opinion, they're not worth it. They're *really* expensive, and although they are intensive courses that usually walk you through the entire process of making an app/website, I think the money and time is better spent learning by yourself, or finding an internship or job in the area you want to go. I started similar to you, self teaching and learning online, and today I'm working as the (temporary*) 'lead developer' for a small company. Keep going with things like codeschool and reading LOTS, but more importantly, start actually applying things. If you read an article about a new library or something that sounds neat, sit down for an hour and play with it! It doesn't have to be a useful end result, or pretty, or anything, but just getting in the habit of writing code, and discovering nuances to each language is the best learning we can get (again, in my opinion). Just my $0.02 as someone who was in a similar position less than a year ago. *Temporary because we're trying to find someone who knows at least twice what I know - I'm still very much learning.
Thanks for the reply! The problem I've run into trying to get an internship to gain experience is that I'm in the heart of silicon valley, so even internships around here are seeking people who have multiple years experience developing, etc. How long did you self-study before you were able to apply your skills to a job or even get hired as a developer? 
Use splice, not slice. 
Sorry for the typos, I was on my phone.
I went to app academy. Tripled my salary in about 8 months (between first writing hello world and filling out the app to first day of work). Many of my co-workers did hackreactor. Other camps may be of dubious quality. AA does a deferred tuition program based on % of first year salary, so it's a semi-safe bet if you don't have the 12k plus upfront.
I think the idea (maybe) is that you'd also paste the URL hash to recreate that animation along with its definition for any kind of maintenance. However, 60k for a single animation is absolutely bonkers. You can load an entire high end animation framework like GSAP for that. I've seen this posted all over twitter and no one is talking about 60-70k file size per animation. I don't get it...
It's not a normal utility method, it's more of a hack to make prototype methods of primitives into standalone functions. Honestly it's fine if you do this in your own small project, but I'd rather not work in a code base where there are wrappers and utility functions over JavaScript core code. It's like writing your own version of jQuery or wrapping document.querySelector, it's not a good use of time if your main goal is to release and maintain a user facing product. I'd rather include 5kb of undescore.js and call it a day.
ill also say that the bootcamps aren't worth it...BUT yes, they will give you opportunities (we've hired several). if you can get a good internship or can take a low paying job for a year or so to get experience that might be better.
You can't reassign 'this'. Is your this.slice() self mutating? If so, you would only need to call' this.slice()', and not have to assign it to anything. I could probably help more if I saw your actual code though.
If you don't mind me asking, which bootcamp did you attend? What was your experience in programming before the bootcamp (how long you were learning on your own, what languages you learned), and what were the job prospects like after the bootcamp? Was there any assistance from the bootcamp in terms of connecting you to potential employers? Thanks a ton for replying, I really appreciate it, it's great to be able to ask questions to people who have attended bootcamps! I'm still doing a bit of research on my options and I'll let you know if I think of anything else! 
Another benefit would be high-performance optimizations, which is why many libraries and frameworks do something similar. For this: [].slice.call('string') The scope will have to be resolved all the up to the global scope, since that is where `[]` lives. Not a big deal _most of the time_, but over the course of thousands of invocations -- often from deep within a call stack -- it can produce a significant performance hit. Whereas: var slice = demethodize([].slice); Brings the reference into the current scope, so that scope resolution is much, much quicker ([reference](http://www.nczonline.net/blog/2009/02/10/javascript-variable-performance/)).
Thanks for replying! I've been looking into App Academy as well. Do you have any coworkers from Dev Bootcamp? How helpful was App Academy in connecting students with potential employers? I've heard stories of these bootcamps kicking people out if they don't cut it so their placement rates are artificially high when compared to the number of students who start the course. Did you see any evidence of that or heard of things like that from co-workers? Or maybe any bootcamps notorious for doing that? That's very interesting about AA and the deferred tuition. Is that something additional I would have to apply for?
I thought of another question (I asked someone else below as well, but...): did your bootcamp remove anyone from the class who couldn't keep up? I've heard of bootcamps doing this and I'd rather not be in a camp where they'd abandon struggling students rather than help them work through issues.
FYI, if you indent your code 4 spaces then reddit will format it as code (which makes it easier to read). Like this: &lt;SCRIPT LANGUAGE="JavaScript"&gt; var v1=5000; var v2=10000; var v3=20000; var m="move_cost"; var op1=.01('v1') + .15('m'); var op2=.01('v2') + .15('m'); var op2=.01('v3') + .15('m'); &lt;/SCRIPT&gt; &lt;script&gt; function showText() { document.Write ('op1'); document.Write ('op2'); document.Write ('op3'); } &lt;/script&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;FORM NAME="myform" ACTION="" METHOD="GET"&gt; Enter Estimated Relocation Cost: &lt;INPUT TYPE="text" ID="move_cost" VALUE=""&gt; &lt;input type="button" value="Show Cost" onclick="showText()"&gt; &lt;/FORM&gt;
That was nice of you, though I'm going to laugh when TheDailyWTF posts a story about a company using jsfiddle as an internal app...
Slides? Great, what am I going to complain about now... 
I've only been a "developer" for maybe a year, but have been studying up and reading since 2012. I consider myself extremely lucky that I have friends in the biz who were willing to take me in as an unpaid intern where I could learn the ropes and gain employment, but even if I didn't have those opportunities, I would have just gone out and asked around! If you can write HTML and CSS, a lot of places would likely be happy to write the boring parts for them, and it's good practice/experience while you practice Javascript, PHP etc. Freelance work is great too! Find a designer in the city who does lots of static sites for places like restaurants and other small businesses, and you'll be in the money while getting practice doing the basics too! EDIT: Sorry, I missed that you've been doing python and R which leads me to believe you may not be quite as interested in the web direction. In any case, I still think that teaching yourself is the better way to go. Save that 12k and buy the good books! They will teach you the proper ways to do things just as well (if not better) than a bootcamp (IMO).
Awesome, thanks for the advice! I actually am quite interested in web development. To be honest I'm at the stage where everything looks so interesting, so I've been trying to learn as much as I can, probably to a point where I'm over-saturating myself. Do you have any books you'd recommend that helped you along the way?
 I went to http://codingcamp.us. My experience was in C# and Javascript. I'd done some apps on Windows Phone, webOS, and the Blackberry Playbook. My last job I wrote SQL queries for about a third of the day. The school is still contacting me all the time about jobs. They have been very proactive. The only problem is that I live several hours from the school and my wife makes more money here than I would make as a developer there, so I'm trying to launch an app of my own.
Might need to see more code, but you should probably be using an object. var things = {260: 'Apple', 262: 'orange'} Then call it like: things[260] Which would return the string 'Apple'.
I'm sorry but this post is complete horseshit. 
Stop using design patterns? What, even when they fix the problem you are trying to solve? That is terrible advice. Honestly, this reads like it was written by someone with very little development experience.
I see your problem, the syntax seems to be Java. Message me if you would like some help with JS
Was already said but you can't reassign this, it's a keyword not a variable. I can't really comment on how to improve your implementation without seeing the code. Slice is a non-destructive method, pop is a destructive method. That is slice creates a copy of the array. Pop modifies the array. My general advice is that your code should reflect that. I guess you're looking for something like this? List.prototype.pop = function () { var item = this[this.length - 1]; this[this.length - 1] = undefined; this.length = this.length - 1; return item; } 
&gt; It's not a normal utility method, it's more of a hack to make prototype methods of primitives into standalone functions You're missing the point, really. It is not a hack nor only for primitive objects, `Function.prototype.bind` is well defined in its behavior. This will work on any ES5 implementation, as per spec. &gt; I'd rather include 5kb of undescore.js and call it a day. I'd rather be able to truly re-use code, rather than include a 5k library just for the sake of it. I don't need Underscore's `map` and `partial` to play nice with composition if a couple of helpers give me most of these functions for free, and also allow me to compose point-free.
But the animations is done with CSS, This tools is a helper to create them and havent got anything to do with the smoothness really. I would guess hand made animations would be even smoother as they wouldnt be 100s of Kbs of code.
Well, it sort of does... `slice()` returns a new array. `splice()` modifies an existing array. If you really want to call a method to make pop happen, you would need to write List.prototype.pop = function(){ return this.splice(this.length-1,1)[0] } However, I would just do this: List.prototype.pop = function(){ return this[this.length--] } length should have a setter trap that automatically fills/truncates elements anyway.
&gt; I've heard stories of these bootcamps kicking people out if they don't cut it so their placement rates are artificially high when compared to the number of students who start the course. Did you see any evidence of that or heard of things like that from co-workers? Or maybe any bootcamps notorious for doing that? App Academy's FAQ says that 5% of their students wash out. Some bootcamps, like Turing and Dev Bootcamp, let you fall back to the next cohort if you don't pass a section. 
Another thought: some of them are more beginner-friendly than others. E.g. Turing doesn't even take experienced programmers. 
while kinda cool, this has a whiff of flash to it.
Yea, that certainly is some "clever" stuff. I'd rather use fat arrows though. There is no voodoo function involved and everyone can directly see what's going on. let dirty = [" foo ", " bar"]; let cleaned = dirty.map(s =&gt; s.trim());
Or you could abstract this: var dotf = (f, ...as) =&gt; x =&gt; x[f](...as) ['foo ',' bar '].map(dotf('trim'))
I'd rather not. There is no benefit in doing that. Someone who reads that "map" line would have to find that "dotf" function ("go to definition" probably won't work) and understand it. Also, if you refer to a property with a string, this identifier can't be minimized. You also may have to tell your minifier explicitly that this particular property can't be renamed. Finally, it's simply not as straightforward. With "s =&gt; s.trim()" as argument there is absolutely no question what's going on.
Google is your friend - https://www.google.pl/webhp#q=regex+javascript+detect+opening+tag
Or http://bower.io/ for client side packages.
Thanks a lot ! It's perfect.
front-trends.com points to: file:///D:/workKrasimirTsonevgithubblog-postsblog-postsStayTuned/front-trends.com Edit: Also, thanks, this is a good list! 
You can have Angular approach: ECMAScript 6+ (design) All code in AngularJS 2 is already being written in ES6. As ES6 doesn’t run in browsers today, we’re using the Traceur compiler to generate the nice ES5 that runs everywhere. We’re working with the Traceur team to build support for a few extensions like annotations and assertions. http://blog.angularjs.org/2014/03/angular-20.html
Actually this is amazing! My god, I thought about something like this a while ago and somebody did it in such nice elegant way.
Nice read! A suggestion I have is maybe adding repositories and entities to the list. I have noticed this patterns really help re-factoring big projects.
Not a necessity but it is a nice abstraction. I would have gone with the class route as well 
http://kangax.github.io/compat-table/es6/ So, if you only want to try let/const and fat arrow functions, Firefox would be an option. If you want to try classes, Firefox is out. Anyhow, the ES6 spec won't be done before June (July?) 2015. Until then, things can and will change. The module stuff was recently changed, for example.
&gt; Anyhow, the ES6 spec won't be done before June (July?) 2015. Until then, things can and will change. The module stuff was recently changed, for example. How do you write in a language that is a moving target?
Aw... :/ I thought it was getting done in Dec 14. Thanks for the link and info.
Just to clarify, what is the difference between abusing inline JS events and using them. Is there ever a time when using them is ok? Should I make a listener for this?: onmouseover="highlightTile('tile1')"
Yea, it was pushed back by another 6 months a few days ago.
You just fix things as they break. ES6's rate of change has slowed down quite a bit. You can't really use modules right now, but all other major features should be pretty much done by now. Personally, I think that Dart is the better option for production. The workflow is a lot nicer compared to the Traceur route, because you can do the development with a browser which supports it natively. The tooling is also drastically better. That ES6 stuff is fine if you don't have to transpile it to ES5 though. E.g. if you just want to use `let`/`const`/fat-arrows in some Mozilla-platform-specific project (Firefox OS, Komodo/Firefox add-on, ...). Node (`--harmony`) also supports some of it. You can at least use things like `let` and `const` there.
I have yet to see a legitimate use case for classic inheritance in JavaScript. Prototypal inheritance yes, OOP yes, but no classical inheritance. In fact, using certain frameworks can quite easily clash with OOP inheritance based design. When you set off to design a non-trivial AngularJS application, you really don't want to think about class hierarchies or even prototypal hierarchies, you focus on the building blocks of AngularJS. What people coming from Java/C# tend to misunderstand about prototypes is that they are actually a lot more powerful than the inheritance they are used to. It is a lot easier to simulate classical inheritance in a prototypal language than the other way around. If you really want to make the most of your development environment it seems weird to me that you would want to cripple it with classes over prototypes. That said, if you really, really want to write Fortran, you can do so in any language.
Ofcourse code reuse and encapsulation is always needed! What I'm thinking about is more about if you need to use inheritance to create your model. If you have a buisiness model, with for example "Employee can be hourly or permanent, so these have different behavoir, but both are employees, and therefore I need to implement an inheritance between employee --&gt; hourly employee" and so on. 
You're heading down a road you don't want to go down. HTML isn't a regular language, and can't be reliably parsed with regexps. Turn back now.
JavaScript does not have classes. In ES6 (which is still not final) the *class* keyword will be active for the first time, but it is still not a true class. The class keyword will just be syntactic sugar that compiles down to existing non-classical features in the language for backwards compatibility. There is not and will not be classical inheritance. OOP is an aged concept that is trending out anyways. It carries a huge amount of overhead and remains popular primarily among university professors and Java advocates. I **strongly** recommend avoiding OOP if you want to learn to use this language to its potential and to the intention of its inventor. OOP is completely unnecessary in this language. In my personal experience apps tend to execute faster and scale smoother the more you avoid OOP as the apps grow in size.
I would disagree with 'need', and your teacher might be emphasizing that simply to put off students writing code ad-hoc code with no structure. Big applications do need structure. I would say that you need your code well laid out, in a predictable model. Personally I find classical Java-style OO and inheritance is a pretty dumb and straight forward paradigm, and I mean that there is rarely any mind boggling magic going. It ends up working ok for most stuff. This model also works fine in JavaScript. If a naive programmers decides not to bother with OO in JavaScript, what people can end up with is a large number of global variables which are changed within functions. When you have say 100 functions all reading and writing to different global variables within the functions themselves, it becomes very difficult to track how data flows in the application. Classical OO improves on this by being able to better localize data (by storing it in fields on objects rather than globally), along side the functions that will operate on them (the methods of that object). Personally I find OO is rarely the best way to approach a problem, but is also rarely the worst. It's a solid middle of the road paradigm. However there are a lot of other approaches to structuring projects in JS, because it is a very flexible language. I personally use a mix of OO, event driven, functional, logical programming, and old-school global variables + functions too. It ultimately depends on what you are building. I have projects which are heavily OO (such as a compiler I wrote), where it works brilliantly. I have some projects where OO is used for modularizing just a handful of major components. I have some projects where the OO bits sucked and have since been replaced with better alternatives. Classical OO approaches can especially be very verbose and lead to a lot of boilerplate. Alternatives can end up more straight forward, shorter, and be easier to understand. Classical object orientation is also very stateful in nature, which can lead to the same headaches as what I explained above with the naive programmer. Finally I would also say that bad programmers will still write bad code, regardless of paradigm. tl;dr; predictable structure is good, but using classical OO or not depends entirely on how well it fits the problem.
If you define classical OOP as inheritance, then the answer is a hard no. As javascript uses duck-typing its not needed. However a lot of OOP techniques are strongly needed. Declaring classes via a function prototype is pretty much the norm. As for common behavior between classes theres two big techniques used: composition and mixins. Composition is easy. Instances hold other instances in their object. Mixins are a bit more freeform depending on your needs. What you would call abstract base classes in classical inheritance would just be a plain object with methods that will access its context. Then you extend your class prototypes with that object. And when I say extend, I mean jquery or underscore's extend function. Alternatively you extend instances with a mixin, but that tends to be in concert with handlers and callbacks. This stuff however is falling out of practice as Promises are becoming the vogue. With a Promise you almost always close over behavior. 
I don't even... What are you trying to say? I don't get it.
Damn. It is fixed now. Thanks for the reporting.
[es6ify](https://github.com/thlorenz/es6ify) with [browserify](http://browserify.org). Compile on-the-fly with [watchify](https://github.com/substack/watchify). You can use all features from [traceur](https://github.com/google/traceur-compiler), and you can `import` node modules too. See [es6-dic](https://github.com/madbence/es6-dic) for examples.
&gt; Just to clarify, what is the difference between abusing inline JS events and using them. Is there ever a time when using them is ok? Abusing inline events is when you're doing something that's bad practice. An example is what you were showing above, where you were using an inline event to create another element with an inline event. It pollutes the HTML markup making it difficult to read. It's better to avoid using inline events at all, however, there are times when they're useful. A good example of using one would be to use the inline event to call a single function like this: &lt;a href="#" onclick="someFunction()"&gt;Text&lt;/a&gt; &gt; Should I make a listener for this?: onmouseover="highlightTile('tile1')" I would say you could go either way. You are correctly using the inline event, but, you could also create a listener that will give you more programmatic control over the event itself. On a side note, if the function above on the mouseover event is just doing a highlight or color change of some sort, you could easily accomplish it with using CSS and the :hover selector on the element as well. That would reduce the amount of JS that the browser has to run and cleans up the markup as well.
&gt; Does that mean using prototypal inheritance to maximize code-reuse Inheritance is now known to be a *terrible* way to implement code-reuse. If `A` and `B` both share some piece of behaviour, the *last* thing you should do is think, "A and B should both inherit that behaviour from a common prototype." Instead, you should think, "A and B should both delegate that behaviour to some common metaobject. It might be mixed into their separate prototypes. I might compose A and B out of pieces that include the metaobject. I might mix it into A and B directly. Let's see what makes sense." Programming around single inheritance is following dogma that is thirty years old, and if you follow the work of people in long-standing OO communities, you will see that they have all migrated *away* from it. The Java folks are now the Scala folks, and they use traits for handling code reuse. Inheritance is, quite frankly, skating to where the puck has been, not to where it is or where it's going. 
&gt; experienced developers use or are very familiar with OOP methodologies, and are inclined to to use what's in their toolbox. Yes, but the question here is about "classical inheritance." Experienced OOP communities have been de-emphasizing inheritance since the mid-nineties, when the GoF released "Design Patterns." In it is the oft-quoted mantra "Prefer composition to inheritance." Conflating inheritance with OOP is ignoring all of the work and experience that has been gathered in this area over the last forty years. If you're going to be an experienced OOP developer and use what's in your toolbox, you ought to be doing things like writing Scala-like traits.
The extra 6 months doesn't look like it is going to affect the appearance of ES6 in the browsers. In fact, the extra 6 months are so that browser makers have time to implement it and test it in the field somewhat before it is all frozen forever. Good news really. 
As soon as I read "metaobject" I knew exactly who posted this! Always glad to see your $0.02 in threads like these.
Return a function constructor or a factory: var App = module.exports = function(params) { // Instanciation thing }; App.prototype.foo = function() { return 'bar'; }; or: module.exports = function(params) { var app = { foo: 'bar' }; return app.extend(params); };
fully parsing it in a syntactically valid way isn't possible, but there are bits and pieces that can be matched with regular expressions. This is my pattern for matching empty elements: /&lt;([\w]+)[^&gt;]*&gt;\s*&lt;/\1&gt;/g
PotaToss is trying to save your soul. Turn back now before you read the frightening majesty that is [bobince's famous stackoverflow answer](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454).
Ok, thank you for all of this. The reason i don't use :hover is because once i click on the div it expands and holds information. At that point I don't want it to highlight when its being moused over, because I ask for input inside of it and it would be very annoying to the user. Thank you very much for the tips though!
But does that mean Angular 2.0 can't arrive before July 2015? ES6 might as well have stabilized for everything other than modules but even then you can't be sure nothing else will change...or can you? Or is maybe AngularJS 2.0 far enough away that this isn't an issue? I hope not :)
Unfortunately most solutions (like traceur) come with quite some overhead and were originally meant as playgrounds for validating ES6 language designs. And now that traceur added support for annotations and assertions, there's a big risk of lock-in - those feature might very well never end up in any browser since they nowhere near standard. My suggestion would be to use browserify together with jstransform. jstransform is pluggable and a lot of things are already supported (e.g. modules, arrow functions, classes, rest params, destructering, template strings). The awesome thing is: it's easy to selectively stop compiling parts of ES6 once they have wide enough support natively.
You can use it today with Traceur. There is also AngularDart.
It might be good to warn people that using those extensions locks their code into transpilers even after ES6 support is decent in the browsers they care about. Also traceur doesn't allow for opting out of features. So if someone targets modern browsers with native class support (assuming that will happen this year), then there's no way to do this once traceur touches your code.
A nice execution for a do it yourself testing approach. You still need to apply segmentation and then apply the tracking in response to that segmentation. The code injection based upon test segmentation and then again upon variant segmentation is only part of the challenge. The other half of the coin is reporting back a variety of data per traffic funnel which sounds easier, but isn't.
Thanks! Yeah, you're definitely right. We're using GA and Mixpanel for this — in our tracking we set an event in both tools. This lets us filter every other site event by variation, which gives us all the data we need. Pretty low-tech way of getting our data without setting up something like sixpack.
&gt;you do know that coffeescript compiles down to javascript... right? Not this tired argument, again. Ugh. Coffeescript source code IS NOT JAVASCRIPT. I could care less about the "transpiled" regurgitated result of the coffeecrap source. It's still quite unusable to anyone who wants to branch the code in javascript. If you write your source in coffeescript your project will forever be marginalized because there are far fewer people writing coffeescript and that will never, ever change. Coffeescript is a fad invented by syntax fetishists that would rather be programming in python or ruby. The sad thing is that I would actually want to fork Bounce.js because the UI is pretty bad, but I find the CSS it generates somewhat useful though it still could use a lot of help. I won't be bringing my 16+ years javascript experience to it though, because it's written in Coffeecrap and doing any work with it would frustrate the hell out of me with its "significant whitespace" nonsense, ambiguous for-next syntax, and the obscurity of it all. I know plenty about why coffeescript is not javascript. 
the deferred tuition is an option, or you can pay up front. I don't know anyone who has done dev bootcamp. No one from my class at AA was kicked out, but the next group lost a few people who didn't seem to be putting any effort in. There were weekly assessments, and if you did poorly you'd have to do a retake, but they weren't terribly hard. Just problem sets or small projects that used the concepts we learned the previous week. They're generally 80-100 hour work weeks so you have to be able to keep up with that, think about nothing but code for 9 weeks. App Academy does job-hunt training after you finish the program and provides office space to come in and apply for jobs. They cover resumes, interview prep, negotations, whiteboarding, and have internal tools to help you track your applications and find places to apply. It's intense but totally worth it. Let me know if you have any other questions 
I'm pretty sure this isn't true, considering this was the preferred demographic when the founder of Turing was running gSchool...
You've brought a good and welcome dose of perspective. Thank you.
http://cdnjs.com/ http://jster.net/ http://microjs.com/ http://www.jsdb.io/
*imho* your bottleneck is never the js execution speed, but DOM manipulations. Of course, there are ES6 features, that you can't implement efficiently (`let`, etc), so before you decide to use ES6, you have to know how it is translated to ES5.
I think the "danger" of this is the temptation to have encapsulated state. I fully acknowledge that this is only my opinion but I think state is a consideration of your application and when I am consuming your API I much prefer to treat it as a library of functions that produce i/o and avoid side effects. This gives me much more confidence that I can compose solutions out of your utilities. 
Would this still work for choosing a random number from var items = {260: 'Apple', 262: 'orange'}? items[Math.floor(Math.random()*items.length)]
My source is [Course Report](https://www.coursereport.com/blog/founder-spotlight-jeff-casimir-turing), where Jeff Casimir says "I don’t like taking people who are already programmers." Everyone interested in going to a bootcamp should be reading Course Report: Liz Eggleston does a terrific job covering the industry. 
If the dictionary is laid out like you have in the example (non linear keys (260-&gt;262)), then it wouldn't always work. If you are using a contiguous datatype, then it would work.
How would I get it to work then?
I'm not even clicking on your clickbait. You don't have an argument to make so you link to Youtube? That's a pathetic non-reply. And it proves you are a troll.
I loved HyperTalk, but AppleScript has always frustrated me.
Something isn't working with this code, if someone can point me in the right direction that would be great, thanks! &lt;!doctype html&gt; &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;Test Input&lt;/TITLE&gt; &lt;SCRIPT LANGUAGE="JavaScript"&gt; var v1 = 5000, v2 = 10000, v3 = 20000; var c = document.getElementById('total_cuft'), op1 = document.getElementById('op1'), op2 = document.getElementById('op2'), op3 = document.getElementById('op3'); c.onkeyup= c.onchange = function(){ op1.innerText = calcCost(v1, c.value).toFixed(2); op2.innerText = calcCost(v2, c.value).toFixed(2); op3.innerText = calcCost(v3, c.value).toFixed(2); }; var calcCost = function(v, c) { return ((0.01 * v) + (0.05 * c)) * 7; } &lt;/SCRIPT&gt; &lt;/HEAD&gt; &lt;BODY&gt; Estimated Relocation Cubic Feet: &lt;input type="text" id="total_cuft" value="" placeholder="Cu. Ft."/&gt; &lt;div id="output"&gt; &lt;p&gt;Valuation Level - $5,000: $&lt;span id="op1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Valuation Level - $10,000: $&lt;span id="op2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Valuation Level - $20,000: $&lt;span id="op3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;/BODY&gt; &lt;/HTML&gt; edit: when I run it on jsfiddle.com it works fine .. as soon as i put in into an html file and upload ... nothing
I'll have to checkify that outify. 
My impression is there are lots of people looking for junior UI devs in the area. FWIW I spent ~2 years working remotely for a Berkeley startup from Philadelphia, first doing part-time user support, then transitioning to web dev. I was eventually let go, then hit the ground running with building a portfolio and doing self-study. 8 weeks later I landed a full-time position as a UI developer here in Philly, ~6 months after I started teaching myself Javascript. IMO the most important thing is to build some projects with clean, well-organized code that show off some different techniques, put them on github, and be able to talk about them intelligently.
Might be because I use it daily at work, but it seems Knockout js requires a lot less configuration to get basic bindings done than the ones showcased here.
Ooh, interesting! How would you describe webpack when compared to require and browserify? What are the pros and cons?
Yes. Use the `--standalone ` option to generate a UMD bundle that works as commonJS, AMD and global. 
requireJS is a module loader. Browserify and webpack are module bundlers. That's not the same thing. Browserify and webpack do the same thing more-or-less. Browserify is kewl and modular with huge community but requires you understand a lot about streams if you want to do something fancy. But it is very easy to get a simple straightforward bundle. Webpack is more of a monolith but doesn't try to stuff everything into the stream paradigm, it is a lot easier to do fancy stuff with by just configuring things. I find it easier to solve difficult build setups because it already does a lot out-of-the-box and it has a active gitter channel where you can get help, while finding answers to browserify questions is dreadful (or I haven't yet found the right place to ask). I'm moving to webpack because it is more productive for me. I hate fighting build tools while I'm already fighting my project's problems.
I am unable to place blocks due to error "array is undefined" here: "if(this[i] != array[i]){" (functions.js, line 12). Due to this error, I am unable to [beat the game](http://imgur.com/czeSff7). Please fix.
Pros: * Not opinionated on module format. * Supports conditional requires (chunking). * Can bundle other assets as well, if need be. * Has good Grunt integration as well as Gulp. * You can facilitate dependency injection through configs. * Good docs. Cons: * You *will* have to start a build process. * Can be a bit challenging to get started, especially chunking. * Their live-reload server is somewhat wonky. * Not as much online information when compared to other RequireJS or Browserify (think StackOverflow questions).
Thanks, it must have been the heat around here. Easy solution. I think I was confused since node modules usually aren't instantiated using *new*.
&gt;marginalizes other programming languages just because you don't understand them or just don't like that they are different You could not be further from reality. You can say I don't understand coffeescript, but do you really know me or my experience in the world of programming? NO, you do not. You can say I don't like something just because it is different, but this is disingenuous and false. Again your reply is looking like you are trolling. Coffeescript is a poor attempt at abstracting javascript into the python/ruby mindset. It brings with it the necessity of having to use source maps to debug anything, a "transpiler" that has in the past caused errors in the code it generates, confusion within its own community about the many ambiguities with the poorly thought out syntax. You only have to read through the coffeescript forums and bug reports to know that this technology is half-baked, at best. Anyone who uses coffeescript either too junior to make good decisions, or they are blinded by significant whitespace and can't program with the C-style syntax of javascript. Javascript doesn't have enough problems to warrant the level of abstraction that coffeescript brings with it. It's like fixing a broken doorknob by replacing the entire house. It's in no way a good practice or a "best practice". I welcome any counter arguments you can come up with, but this is the last response I will make to your trolling. 
If you're already happy with Browserify, you probably don't need to look into RequireJS. Async module loading sounds good in theory, but it's rarely implemented in practice. And when it is implemented, it tends to be on a small collection of modules -- so you could just as easily pull them out of your main browserify bundle and async load them however you please. There are lots of tools that take RequireJS code and allow it to play nicely with browserify. One example is deamdify (often used with debowerify). Or, for going the other way, you can use `--standalone` if you need to load some browserify stuff from RequireJS.
I find your way very interesting! I was wondering how the observables were implemented. I've seen another approach I like, which is close to yours but maybe a bit faster (I've heard that Object.defineProperty is slow but not sure when: on declaration or on property call ?), there: [Vue.js docs](http://vuejs.org/api/instantiation-options.html). Basically they add a $get and $set method on the object as well as an event emitter that dispatch an event on each access. It's the same as your, minus the defineProp. Also it has some other drawbacks.
It's inefficient, because traceur uses a catch block to create separate scope: { let i = 1; } turns into { try { throw undefined; } catch (i) { i = 1; } }
Great plugin - I wonder how hard it would be to port the same idea to less 
Brain fart happens, ahah ! Like you said, I'm not sure why a lot of npm modules are being used as a factory on their own. I mean, module() or Module() returning an object, rather than Module.create() or new Module.
I echo the sentiment that it's a bad idea to use RegExp for trying to parse HTML. Depending on what you are trying to do, of course, I suggest looking into XPATH. I think of XPATH as RegExp for XML/HTML.
This list saves me from sooo much Googling! Thanks!
I definitely don't understand javascript's memory model. Could you recommend a resource for learning about this? Thanks!
&gt;But by the main teacher on this course I was told that when building large apps with js you can use AngularJS and similar for smaller apps, but as soon as your app grows you will always need classical inheritance[1] . That kind of doesn't really make sense on its own, when you're in a dynamical language like javascript the prototypical inheritance isn't that much different from the classical one. What's probably needed for large applications is static typing. And maybe like "higher level framework components". Maybe he said that cause in "large teams" you might need to define "private and public field access" though imo that is unnecessary, you can do it only on the "module" level. In addition single inhertiance is just not going to work, the behavior needed wont fall in some kind of hierarchy. Say in Angular you might make a few small directives, kind of independent, with little functionality, and you are then going to mix them like when you are adding css classes to an element. If this was supposed to be done with strict classicaal inheritance then what, you'd make a new class for all the combinations then subclass "div"? Inheritance methods seem to expect that more often than not you will only need something like "incremental reuse", but what is more often needed is "easy combination of different components".
hmm this made me think it might be cool to do the reverse ... have your javascript pickup the styles that had been applied to certain elements and use those values in your scripts. then you could manage everything from css
Features I added on top of that: - More comfortable layout - Monospace font for textual formatting and code - Tab title set to the first line of text - textarea-based for more responsive typing - Favicon allows for quick identification of note tabs - Auto-focuses the notepad - Asks for confirmation before deleting a note - `Tab` inserts a tab character - `Enter` maintains indentation The devil is in the details.
It's fairly easy with node bleeding-edge (0.11.x) $ node --harmony &gt; // now you're in the repl, do es6 stuff or... $ node --harmony foo.js # foo.js contains es6 stuff
That first example... Not if you are inclined to avoid xss attacks. Or I guess you could escape things in *every single* one off function like that you write rather than just... Idk calling .escape on your models before passing in the data because... your models should already be holding the data you want to inject anyway....You should probably re read some of the books you mentioned. I think you missed some things. 
Damn, that's ugly. I just tried it myself. It does indeed generate that kind of code. However, block scope isn't inherently hard to emulate. E.g. with Dart, this kind of function goes in: main() { for (int i = 0; i &lt; 3; i++) { for (int i = 0; i &lt; 3; i++) { print(i); } } } And this kind gets generated: main: function() { var i, i0, line; for (i = 0; i &lt; 3; ++i) for (i0 = 0; i0 &lt; 3; ++i0) { line = "" + i0; H.printString(line); } } As you can see, it only had to rename the inner "i" in order to avoid any conflicts. While "i" and "i0" continue to exist after the loops, trying to reference them there wouldn't compile (*Cannot resolve 'i'*).
You know that you can read the values of CSS properties from JavaScript already... Right?
abstraction and code reuse are tools to make reasoning about, writing, and maintaining code easier and more likely to be successful. in my opinion, trying to bend a language oriented around prototypical inheritance into expressing classical inheritance type hierarchies violates these aims by a) making you have to worry about your classical inheritance emulation while you're trying to write and reason about your software (aka your leaky abstraction) and b) violating the expectations of other developers who are familiar with the language you're using, but not how you're using it. a good approach to large applications is encapsulation (of both types and systems) and abstractions (at various levels). design patterns like facades, composition with dependency injection, decoupling and the like are the way to manage complexity as software grows. you could do this with composition, prototypical inheritance, (shallow) type hierarchies, or any combination of the three.
As long as the number you are returning is a key in the object, it will return its value. 
I'm not 100% on the sensitivity of most photosensitive epileptics, but wouldn't this cause something in the range of a headache? Edit: Also overflow:hidden would help tonnes.
Huh? I'd argue that the *default* way to use browserify (or any dependency management solution) would to always return classes/constructor functions/{things that create object instances} Then just "new up" an instance once you've required in the dependency.
Change op1.innerTEXT to op1.innerHTML Do the same for op2 and op3 as well. Right after the &lt;script&gt; tag, write window.onload=function (){ Then put a closing bracket } right before &lt;/script&gt;
use `requirejs()` not `require()`
have you tried `window.location.reload(true)`?
My (limited) experience with node tells me that the default way for node modules seems to be to return sort of a singleton object, not a constructor function.
That still can't parse HTML properly. Here are several examples that it will get wrong, all of which are valid HTML: &lt;a title='&lt;a&gt;&lt;/a&gt;'&gt;not empty&lt;/a&gt; &lt;a title='&gt;'&gt;&lt;/a&gt; &lt;a href='#'&gt;&lt;!-- hmmm --&gt;&lt;/a&gt; 
I'd say it is borderline (I am no expert on the subject though). Demo flickers around 1-2 time per second (as far as I can tell). According to http://en.wikipedia.org/wiki/Photosensitive_epilepsy#Web_design content of web page should not flicker more than 3 times per second (WCAG) so that is fine. However, section 508 of Rehabilitation act says, that flickering should not be in rage of frequency greater than 2 Hz and less than 55 Hz. 2 flashes per second give frequency of 2Hz (if I used this correctly http://www.convertworld.com/en/frequency/Beats+per+minute.html) so the demo may indeed fall into that range. Best way to determinate if the demo can trigger seizures for photosensitive epileptics or not would be to use http://trace.wisc.edu/peat/ but I was not able to make it work correctly.
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 6. [**Web design**](https://en.wikipedia.org/wiki/Photosensitive_epilepsy#Web_design) of article [**Photosensitive epilepsy**](https://en.wikipedia.org/wiki/Photosensitive%20epilepsy): [](#sfw) --- &gt; &gt;As with video games, rapidly changing images or highly regular patterns such as flashing banner ads or irregular fonts can trigger seizures in people with photosensitive epilepsy. Two sets of guidelines exist to help web designers produce content that is safe for people with photosensitive epilepsy: &gt; &gt;* The [World Wide Web Consortium](https://en.wikipedia.org/wiki/World_Wide_Web_Consortium) - [Web Content Accessibility Guidelines](https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines) (WCAG) Version 2.0, produced in 2008, specifies that content should not flash more than 3 times in any 1 second period. However it does allow flashing above this rate if the flashing is below the "general and red flashing thresholds". (Basically, it is OK to flash more than 3 times in a 1 second period if the flashing is small enough or low contrast enough.) &gt; &gt;* In the [United States](https://en.wikipedia.org/wiki/United_States), websites provided by federal agencies are governed by section 508 of the [Rehabilitation Act](https://en.wikipedia.org/wiki/Rehabilitation_Act). The Act says that pages shall be designed to avoid causing the screen to flicker with a frequency greater than 2 [Hz](https://en.wikipedia.org/wiki/Hertz) and less than 55 Hz. The 508 regulations are currently being updated and are expected to use the same criteria as WCAG 2.0 when finished. &gt; &gt;* A free tool for evaluating Web Content for flashing called the Photosensitive Epilepsy Analysis Tool (PEAT) is available from the Trace R&amp;D Center at the University of Wisconsin-Madison. &gt; &gt; --- ^Interesting: [^Strobe ^light](https://en.wikipedia.org/wiki/Strobe_light) ^| [^Dennō ^Senshi ^Porygon](https://en.wikipedia.org/wiki/Denn%C5%8D_Senshi_Porygon) ^| [^Epilepsy ^Action](https://en.wikipedia.org/wiki/Epilepsy_Action) ^| [^Photosensitivity ^in ^humans](https://en.wikipedia.org/wiki/Photosensitivity_in_humans) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci5jdkg) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci5jdkg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Maybe someone else will have had a similar experience to mine but here goes nothing: Most of these patterns in Addy's book are more like guidelines. Sure, a pattern like the modular one are pretty common but the other are rare to find in the wild. I can only remember one instance where someone used an Observer pattern (something to do with webRTC if I remember correctly). I think this is a result of Addy adopting patterns used in other languages. JS being a web based language doesn't scale well to these patterns. I see more and more functional programming patterns being used as a result of this. Addy's book pretty much focuses on OOP patterns. However, it won't hurt to know these patterns. Just don't think you'll run into them everyday.
Yes, but that's not it. Somehow, node-webkit seems to handle refreshes differently. While the toolbar is enabled there's a button called "RefreshDev" which does exactly what I want. (A complete reload of the "page", i.e. the app.) I just need a way to invoke this in my code.
There is no such thing as a "default way" in a module system that enforce anarchism. Export whatever you want/have to export.
I'm with you there. I was just a bit confused since most node modules I know don't export constructor functions. 
Tried "window.location.href = window.location.href" ?
Yeah I'd agree if your using browserify then why throw requirejs. While they take very different approaches, they are essentially doing the same job. I'm not sure what benefits you'd get from mixing the 2?
Top answer. Infact! Webpack solved my conflict issues immediately. Thanks for the response dude!
I've never used anything as formal as this in JS, but I use plain old duck typing on occasion. 
I tried using the decorator pattern in a mini game I did once, but quickly reverted doing so because the code became hard to read and confusing. I now mostly use the module pattern for games.
The easiest solution I can think of is to use jQuery's `offset` function. If you don't want to include the whole of jQuery, you can write your own version `offset`, borrowing from [jQuery's implementation](https://github.com/jquery/jquery/blob/master/src/offset.js#L75).
Yes I use them. ([def](https://github.com/blaise-io/xssnake/blob/master/shared/animation/interface.js#L9), [usage](https://github.com/blaise-io/xssnake/blob/master/shared/animation/rotating_line.js#L8)). My IDE checks and validates interfaces when used in jsdoc annotations, and so does Google Closure Compiler, so interfaces are enforced which catches some bugs for me automatically. Most of my classes extend some other (abstract) class or don't have a predefined structure, so I don't use them often. 
Writing python-esque decorators in coffeescript isn't too bad due to the light lambda syntax. An arbitrary example # requires n to be 0 or greater whenPositive = (fn) -&gt; (n) -&gt; if n &gt;= 0 fn(n) else throw new TypeError "n is less than zero" doFoo = whenPositive (n) -&gt; foo n Some better examples / explaination [here](http://esa-matti.suuronen.org/blog/2011/10/06/python-like-decorators-in-coffeescript/). __edit__: fixed error in example.
I think at this point the easier solution would be giving my &lt;section&gt; a fixed postion on the website rather than having it precentage based, and then just using that fixed value in the calculation... It's certainly easier than trying to copy something from the jQuery library as a complete JS newb. Sucks because it'll look a little off on some monitors, but oh well...
There is a new tutorial series about Backbone on lynda.com since this Tuesday (pretty fresh) -&gt; [Up and running with Backbone.js](http://www.lynda.com/Backbonejs-tutorials/Up-Running-Backbonejs/163089-2.html). I haven't checked it out yet, but I think lynda always had solid tutorials. Also for your el/$el question: http://stackoverflow.com/questions/5624929/backbone-view-el-confusion
I can't recommend any specific tutorials, but the backbone docs are pretty good. They discuss [view.el and view.$el here](http://backbonejs.org/#View-el), for instance. There's also a lot of stuff on Stackoverflow, [like this question](http://stackoverflow.com/questions/16646526/what-is-difference-between-el-and-el-in-backbone-js-view) which was one of the first results for "Backbone this.el." Edit: I take it back, I haven't read all the way through this but this Addy Osmani book seemed good: http://addyosmani.github.io/backbone-fundamentals/
Well, if you used jQuery, it would probably go something like: $('#canvas').on('click', function (e) { var offset = $(this).offset(); console.log(e.pageX - offset.left, e.pageY - offset.top); }); 
That's very interesting, Thanks.
Don't use Backbone. Full stop. It was your only choice for single page apps in 2011, but we've moved so incredibly far, that I'd have to recommend that you start with Angular/React/Ember/etc (checkout todomvc to see which style suits your application best) Edit: let the butthurt flow through you my children!!!
If you just wanted to map the item ID to a name, then a dictionary would work fine. var ids = [11, 12, 15, 26]; var names = {11:'name1',12:'name2',15:'name3',26:'name4'}; var id = 26; clientMessage(names[id]); 
Perhaps Window.reloadIgnoringCache() ? https://github.com/rogerwang/node-webkit/wiki/Window
Didn't want to imply that speed is the problem. Size and complexity is. jstransform will generate code that preserves line and column numbers and can be easily mapped back to the original. It also lets you continue to use a well supported module system (CJS) instead of a random snapshot of a POC implementation of a non-finalized standard. Also, as I said, traceur implements features that might never see implementation in a real browser. It's great that traceur does, don't get me wrong! It is a research project after all. But it's less great when you want to leave traceur and realize that you have to refactor your application to go from "traceur-ES6" to "actual ES6". There are very real reasons why using traceur is a terrible idea for actual projects. Interop with server-side JS code is only one of them.
This isn't really the current consensus from what I've read. I've had a look at popular MV* frameworks and Backbone still seems to be the most popular.
Cheers. Both are cool but there can be only One! Have fun digging in the docs, you can do lots of fancy stuff like caching parts of your build, transpiling sourcemaps and all that jazz. The reload/dev server is pretty dope too. I use it with `grunt-webpack` for that extra powerlevel (have a quick build for live-dev and a more involved one for dist).
Sorry I didn't get to this before. That's not exactly the same but I get your meaning. The thing with a promise, however, is that it can only be resolved once. That is its nature so the corresponding code path can be hit repeatedly but the resolution only occurs once. So it'd be more analogous to using underscores once method. That is of course only one benefit of promises. 
I'm a little confused. Your Reddit username is /u/vince_priagnano, but the owner of that gist is Dmitriy Navrotskyy (dypsilon). Also it appears dypsilon has a more recently updated version of this MD file at https://github.com/dypsilon/frontend-dev-bookmarks. ~~Are you taking credit for someone else's work?~~
What'd you do to get this error?
I had never heard of jstransform, so thanks for mentioning it. I use Traceur currently because it has the biggest feature set. But it's output is horribly ugly and inefficient. I think I'm going to use jstransform to convert my modules into a customer loader, then use [es6-transpiler](https://github.com/termi/es6-transpiler) to convert the rest of the syntax. I think that'll maximize the feature set I can use while still keeping good ES5 output.
The problem is that you can't really tell if there isn't another 'i'. window.i = 5; [...] function f () { for (let i = 0; i &lt; 3; i++) { x(i); } x(i); // 5, probably } That global 'i' could come from anywhere. It might be a leaked counter variable by a third party script for all I know. Either way, accessing it is totally fine. So, it should probably compile to something like: function f () { var i0; for (i0 = 0; i0 &lt; 3; i0++) { x(i0); } x(i); } With Dart, it's known if there is another "i". If you didn't `import` it, it's not there.
Just started the game D:&lt;
Pull request? I'd have no idea how to write it. Analyzing some AST and generating code isn't easy. Anyhow, they are aware of this issue: https://github.com/google/traceur-compiler/issues/6
Yup, it's /u/cccc11/ aka. /u/bhuperedditt aka. /u/nonisoni.
yeah exactly but i never thought to grab say a colour pallette that you need to manipulate in js from a set of predefined elements 
By /u/vicramon
I'm really curious on why I would want to use this application instead of a shell script, invoked on deploy. Please, give me an example of a use case.
What I have been finding to be extremely useful is to pull back and start reading up on a bunch of OO theory. Backbone gives you only the basest of building blocks. For better or for worse (I'd argue better) you have to build your own application on top of it. So, stop thinking about it as a framework and start thinking about it as a library. To give you a quick idea of what I'm talking about with shifting your perspective, consider this: You name concepts in OO design and build objects around those concepts. You then decompose that initial set of objects into more objects to represent the different moving parts. e.g. a TeaPot object may contain an instance of Filter, collaborate with an instance of WaterSource, etc. In this vein, Backbone's models and views can be those objects that collaborate with or compose your higher level objects. Just don't get in the habit of calling things "Page", "App", or "Controller". Try to model more specific concepts than that.
Nope, I didn't actually wrote the title, just used the "Suggest Title" button. 
OP didn't say anything about a single page app. Backbone is a spectacular system for organizing code on normal websites where angular and ember are massive overkill.
Then my apologies. That's quite an unfortunate side effect of the feature.
Oh yeah... That would be an interesting way to do it, but why not just assign a class to the element?
I thought about that, but is there any situation where you'd rather do that than save a .txt file? Also, it makes me nervous how comfortable people are deleting cookies; I feel like there's a decent chance they would accidentally delete their notes while they're at it.
One of the best ways is to begin reading other peoples backbone code and write some of your own! Check out this backbone boilerplate code, which is a good introduction on how to organize your code and use tools like require.js https://github.com/backbone-boilerplate/backbone-boilerplate. Here is a great tutorial on event aggregation to allow your views to communicate http://lostechies.com/derickbailey/2011/07/19/references-routing-and-the-event-aggregator-coordinating-views-in-backbone-js/. And a article dealing with destroying old views http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/. Hope this helps!
I would like to second this and add a little something. When I was first transitioning from a 'jQuery dev' to writing any real javascript I found the book JavaScript Patterns by Stoyan Stefanov really helpful. Aside from early parts of the book explaining things about JS I didn't know, the book goes on to map common OOP design patterns to JavaScript implementations of said patterns. I felt pretty enlightened and went on my way. Years removed from reading that book I use basically one pattern. As mentioned by my parent comment that pattern is the module pattern. The reality is that these days when developing applications functional programming patterns just seem to be much more relevant. Though I certainly don't regret time spent reading JavaScript Patterns or other OO JS resources, I simply don't defer to the knowledge from those resources much (if at all) on a day to day basis. On the other hand, comfort with lodash and reading JavaScript Allonge has made a huge impact on the code I write day to day. I don't really believe in being dogmatic, especially in this case, about whether one should do Functional OR OO work in JavaScript. I would however advocate heavily for any programmer who is not familiar with functional concepts to educate themselves. I think many would be surprised, like I was, that the cases for implementing these patterns become very self evident when writing JavaScript applications.
Agree with this 100%. I'll add that I've seen 1st hand how the interface pattern can be over-used in a system to provide stagnation, over-abstraction (losing the meaning of simple concepts through an abundance of interfaces), and bloat. That said, in circumstances where it's critical, and truly critical, that an object contain certain methods or properties, this pattern is a great solution. 
Sup nexus_87, I learned a lot from following the directions in this post: http://javascriptissexy.com/learn-backbone-js-completely/ good luck!
Oh I also think this is a great resource: http://addyosmani.github.io/backbone-fundamentals/ Learning Backbone like any other technology new to you will take some time, so just keep at the practice and read the documentation. Good luck!
This is a very cool way of approaching the problem. Out of curiosity, what syntax is this? Is this coffee? I'm not familiar with this line especially var {compose, seq} = require("async"); or am I a moron and this is pseudocode?
Read about leaky abstractions, joel on software has an an excellent article on it. Developing large scale applications should never rely on a framework to control routing, models, views, etc. No matter what language you use it takes a good architect and competent programmer to design "less leaky" abstractions. I think this is what he may have meant to say.
In my experience, any server side language is immensely helpful in the modularizing/single paging regard (php,jsp,.net,cgi). The basics are still the basics, you can ssi in any number of js/css/html resources into a single page app and make any dynamic changes as needed at render time (i.e. filetimestamp for cache control, or keyed authentication tokens, or?). And with php servers going for like $2/mo, your clients/wallet will be happy, and your client code much more straight forward. I only really started being productive in JS once I realized how trivial it is to modularize with a bit of server side help and organization and stopped mucking about in js-tooling hell. All the tools already exist in abundance.
yeah i dunno ...it would probably be useless :) just a different way to do it 
I love tutsplus ... its not free but worth the money IMHO (in general, don't know about these courses specifically) ... see their video courses http://courses.tutsplus.com/search?search%5Bkeywords%5D=backbone or their tutorials http://tutorials.tutsplus.com/search?utf8=%E2%9C%93&amp;search%5Bkeywords%5D=backbone&amp;button=
Thanks. Though, I'm wondering what do most companies use out there and would be a more marketable skill to have?
Javascript.
There's this roadmap posted online that many people like - http://javascriptissexy.com/how-to-learn-javascript-properly/ There's a subreddit for people following that course at /r/learnjavascript and there is also an IRC channel on FreeNode called #learnjavascript for help if you need it.
Thank you. This worked for me.
Coffeescript is probably the most used alternative language, but it's still absolutely dwarfed by regular JS.
/r/learnjavascript Read the sidebar.
Both are very straightforward. TS is JS with AS3-like type annotations and ES6-like classes. And Dart is kinda close to something like C# or ES6 without the stupid things. You already know most of the syntax in both cases. You can learn them both in a single weekend. (It's really not anything like learning a completely new language like, say, Erlang or Haskell.) So, I recommend to create something simple with both. Once you know the basics, you can build on top of that as needed. Both have their use cases and you can't always predict the future. E.g. if you start working in a .Net shop, you'll probably do TS. If you start doing more stuff for Android, you might feel more inclined to do more with Dart.
I'm trying to figure out where to start learning how to use this. I don't have any experience using the command line, or ruby. Any suggestions?
Oh well...did you press `c` without anything on the crafting table?
Just learn javascript. Compile-to languages are shite. Everything you can do with them you can do just as easily in JS if you're not a tool.
no, sorry, i was just reffering to the xzibit meme :)
"Compiled to" !== "Written in"
Hardly any companies use CoffeeScript, and the few that do (GitHub, for instance) aren't going to frown on you having experience with JS and zero with CoffeeScript. If you want to use CoffeeScript, or TypeScript, or whatever else on your own projects, go ahead (though I wouldn't personally recommend any of them...), but make sure you know JS as well.
REAL WORLD USE CASE: Great article. I used a lot of these concepts when making http://wouldisurviveanuke.com https://github.com/printscreen/wouldisurviveanuke I moved all my logic from server side (Postgres using Postgis) to being 100% in the browser. This let me cut out me EC2 instance all together and have the whole site statically hosted on S3. My bill now is like 6 cents a month. This means I never have to babysit the site or worry about scaling. Here is how my logic flows 1. Get lat/lon from user. Either from browser geolocation or user entering address 2. Calculate distance from user location to all cities loaded in my JSON file 3. Perform insert sort and organize now base on distance. Now i can show the closest cities Starting here https://github.com/printscreen/wouldisurviveanuke/blob/master/js/nuke.js#L227 I wrote about this a little time back on /r/javascript http://www.reddit.com/r/javascript/comments/1bw2e9/adventures_in_holy_crap_my_website_got_popular_my/
It seems like this problem is better solved with TypeScript. It supports interfaces naturally, and you can have IDE completion and compile-time checking without performance costs.
That isn't supposed to crash the game, but will certainly give you an error message D:
TypeScript is sufficiently similar to JavaScript that there's very little added ramp-up time. In fact, in some aspects the typing makes it easier to learn a large code base.
And some companies have recently switched from CoffeeScript to TypeScript, e.g. Palantir.
If you like learn from books, I recommend JavaScript: The Good Parts. It can clear you out of many "JavaScript mines". Also, be sure to enable jslint from day one. It teaches you basic rigour.
&gt; I can only remember one instance where someone used an Observer pattern (something to do with webRTC if I remember correctly). What? the jquery.on function, when you provide a custom event basicaly adds an obsever to the dom element, it probaby also adds a queue to it, the observer being the callback function. Unless you mean something very specific with observer it's everywhere in javascript. It is pretty much the same as "event based" programming.
What type is `collection`?
Man the only point in doing the "peudo classical" one, vs having those functions that just add functionality dynamically is to ensure correctness. Instead of having the type system doing the job you run an "ensureImplements" function. I don't know in general "validating that the object has those properties" which is what it boils down to is done a lot in like validation frameworks? But you can check the way "services" are defined in Angular, to avoid intitialization problems each one defines the other services it needs, so the Angular runtime can schedule creating them all correctly (or in parallel or whatever). The thing is other than the DI that's the same thing as saying "this service as an object should be initiallized by something that implements the interface of having A B C... D services as members". So in a general sense, "the object comes with a list of what is needed so someone will check it" it is used. I don't think that those lists are seperate "Interface" objects but it's probably not needed unless you are just tryng to immitate static checking. The other thing with the decorators extending each other, man that's probably kind of stupid, it will lead to crazy inheritance chains you won't be able bother to keep track of, you should do something that's more "divide and conquer" and then combine as needed, than making chains of extend this with that extended thing. The whole decorator pattern is probably stupid
It's just an array of strings. The thing is, the array itself is fetched in an earlier request, so I can't know the contents ahead of time. Edit: There is a bug in my submitted code, see above for the fix. Problem still remains.
Also checkout Louis Lazarus's RSS feed list: https://github.com/impressivewebs/frontend-feeds
Although fair disclaimer -- If you're talking to _HR_ and they seem to be frowning upon you not knowing TypeScript, CoffeeScript, etc, just lie. Once you talk to an actual dev you can clear things up ;) "Well our requirements say that we need someone that knows CoffeeScript" "Well they're actually mostly the same thing, you see CoffeeScript compiles to JavaScript, and I know JavaScript like the back of my hand" "But do you know CoffeeScript?" gah!!!
Or use [DuckDuckGo](http://ddg.gg) for searches. :) DDG favors MDN over w3schools and often will display the thing you searched for on the results page, so you don't even have to click through to the site.
you have to stop the event from bubbling up the DOM. function someFunction(){ stopBubbling(this.event); alert('some function'); } function anotherFunction(){ stopBubbling(this.event); alert('another function'); } function stopBubbling(evt){ evt.stopPropagation(); evt.cancelBubble = true; } Basically, when you click on the button, since the button is inside the div, you are also clicking on the div so both click events fire. The click event will "bubble" up the dom, starting at the lowest element and work its way up. By stopping propagation, it does not bubble up the dom but instead stops there. the cancelbubble = true is only required for IE.
 collection.forEach( function ( item ){ $.post( someURL, {data:item}, function ( data ){ // both data and item are in scope. }) })
Isn't stopPropagation() JQuery? Edit: typo
nope. vanilla JS.
Awesome, just what I needed, thanks. 
My tab crashed D:&lt;
&gt; but is there any situation where you'd rather do that than save a .txt file? No, but I would imagine the true use cases of this project, in general, are minimal. If someone is doing something important, they're likely not going to use this. To me, it seems like you're just working on a fun project, not trying to compete with other note taking solutions. So from that perspective, why not add in a saving feature? It could only make it more usable, right?
Thank you for contacting customer support, we'll connect you with a supporter as soon as possible, please be patient.
Turned on Linux/js. First command: RM -r -f *
Yeah, I think someone else pointed out how it's used in nodejs too. Pretty much most things using `Obj.on("event", callback)` is employing some form of observer pattern. Thanks for the reminder
I feel like my developer experience has been: - Trying reading a lot - Do some development work - Feel embarrassed by the quality of my code - Vow to read nearly everything considered good - Write a bit of code - Read some more until you forget to why you're learning the language in the first place - Write some code only to realize you will never use 90% of what you've learnt - Go online to feel smug about your useless knowledge Now I have to go write CSS for a html email
I've never used this. If i'm really concerned about an object matching an interface spec i'll write a test.
They align philosophically. Yehuda Katz is core on both. For a fully integrated tutorial like this, the author just has to pick something, but Ember is backend agnostic, and it's not a big deal to swap out the server implementation. Ember CLI comes with an Express server to mock out your server responses so you can develop the frontend independent of the backend, so long as you're sharing a spec. And when you're ready to integrate, you can just set a proxy on the command line.
Learn JS properly first - know prototypical inheritance, closures, as well as get a good knowledge of things like Backone and React
Same thing for emacs: https://github.com/ankurdave/color-identifiers-mode I'm using this mode for some months now for ruby code and found it really useful.
New relic have browser monitoring in beta, IIRC. I think you need a paid plan to use it though.
Well, at my company we use React, and since the jsx pre-compiler includes partial support for ECMAScript 6 (mainly the nice syntactic sugar for classes), we're just using that. Essentially, use a pre-compiler that gives you future JavaScript functionality today.
If you don't pass a callback parameter the method returns a promise, maybe?
Yeah that's sort of where I was going. Then I found that bluebird has promisifyall and nodeify functions which should enable me to do this quite easily. Pretty nice :)
Here you go: * https://www.npmjs.org/package/encoding * https://github.com/bnoordhuis/node-iconv * https://github.com/ashtuchkin/iconv-lite
As a matter of principle, I don't add features that are not used. Every feature has a price in speed and complexity, and features that aren't used give nothing in return. Further - and I'm more alone in this opinion - features that are rarely used may not justify their price. Speaking solely for myself, I don't see a use for a localStorage feature. If I want data saved, then I want it in a file that I can edit, move, delete, etc; I don't want it hidden inside a program. But, there's no reason to think I've anticipated everything, which is why I asked you if you could see a use for it. Regarding the project being a toy, yes, somewhat. It certainly isn't meant to compete with notetaking apps or native text editors. But I do prefer to use it in a few situations, namely when what I want to write is related to a tab, or when I have too many text editor windows open. Maybe a better solution would be OS-level tabs that can put different apps in the same window, but that isn't something I can implement.
Fuck off
I've used Bugsnag in the past, but unless you own all the JS on the page, you could be drowned in a sea of irrelevant exceptions.
Peepcode's backbone screencasts are what got me over the learning curve, was all downhill from there
Codecademy.com is a great place to do self paced learning JavaScript
Good list..!
You seem like you know what you're doing and are competent enough to take this project where you want it to go. My only feedback, just based on how our conversation has gone, is to be cautious of becoming an over-thinker. In the time you spent coming back with an argument against lS, you could have fully implemented it. What you may not consider useful, others will. How you use something isn't how it will be used by others. I've created things that others found completely unique uses for, that I could never have imagined. Instead of trying to reason about the details, just do it. Save your micro-perf principles for projects that warrant it (lots of users, slow environments). I still stand by, "it could only make it more usable, right?"
If you have to ask what alternate language to use, you probably don't know javascript well enough to abandon it. 
Well, i think the most deference is that a Mac wrapper app can be easier to use than the command line tool, such that Mac wrapper app can perform batch tasks. :)
Spectacular? Lol
These are all node based though aren't they? We aren't using node unfortunately. 
Having used both, the code over configuration philosophy of gulp seems to make it a little easier to reason about. In grunt you create a config and then do stuff. In gulp you just do stuff. It's not a huge difference and it may come down to what fits better with your personal style.
They all solve very different problems. Angular and Ember aren't even comparable, yet there are a shit ton of blog posts comparing the two. React doesn't have any opinions about the model layer. Also JSX...
This is a very misleading comparison for several reasons. First of all, multiplying `e` by 2 has no effect at all, which makes it dead code, which is liable to be removed by the optimizer entirely, such that you're measuring doing nothing but making a function call, which is exactly where the overhead will be the greatest for the case where you're calling into a native function from JS. Even if the multiply isn't optimized away for being dead code, multiplying by 2 is still going to be much less expensive than the overhead of a function call, meaning you are measuring statistical noise. Secondly, your "homemade" version does not do the same thing as the real ES5 `forEach`. Specifically, ES5 `forEach` skips over elided indices. Run the following in your browser's console and compare the output to your version: var arr = [1, 2, 3]; delete arr[1]; arr.forEach(function(elem) { console.log(elem); }) The callback is only called twice, even though the array has length 3. In order to emulate `forEach`, you need `if(i in arr) { ... }` in the inner loop somewhere.
very interesting, I wouldn't have expected that i was curious so I tested lodash's forEach against your home made and the native too http://jsperf.com/js-foreach lodash wins, but probably just because it's been optimized nice to know that using native functions isn't the way to go yet ----- edit: including lodash's version in case anyone's interested /** * Iterates over elements of a collection, executing the callback for each * element. The callback is bound to `thisArg` and invoked with three arguments; * (value, index|key, collection). Callbacks may exit iteration early by * explicitly returning `false`. * * Note: As with other "Collections" methods, objects with a `length` property * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn` * may be used for object iteration. * * @static * @memberOf _ * @alias each * @category Collections * @param {Array|Object|string} collection The collection to iterate over. * @param {Function} [callback=identity] The function called per iteration. * @param {*} [thisArg] The `this` binding of `callback`. * @returns {Array|Object|string} Returns `collection`. * @example * * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(','); * // =&gt; logs each number and returns '1,2,3' * * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); }); * // =&gt; logs each number and returns the object (property order is not guaranteed across environments) */ function forEach(collection, callback, thisArg) { var index = -1, length = collection ? collection.length : 0; callback = callback &amp;&amp; typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3); if (typeof length == 'number') { while (++index &lt; length) { if (callback(collection[index], index, collection) === false) { break; } } } else { forOwn(collection, callback); } return collection; }
Functional idioms seem much easier to read in coffee script due to its Haskell like syntax. And Haskell, as we all know, is a lovely functional language (no sarcasm, I absolutely love it). Arrows, arrows everywhere. 
Why would I need a good knowledge of backbone and react? I mean, yes they are wonderful frameworks, but how does that help me understand js better?
Very nice list, thanks for sharing.
Though poorly punctuated, I think Clapyourhandssayyeah is suggestiong that learning things such as Backbone and React would be more worthwhile to a career than learning a compile-to-Javascript language.
Right, if a callback is passed in, call it when it's time. Also, return a promise and resolve it when it's time too. [Why not both?](http://i.imgur.com/c7NJRa2.gif)
If you use [zepto](http://zeptojs.com/) you get a lot of jquery equivalent api functionality in only 9.2k. You are working with Canvas, so I guess no IE8 or lower without polyfills. 
Tried to use this to join a Quake server, ended up playing a solid round of Threewave CTF. 9/10 would Github again.
Fair enough. But imho what's usually in demand is a good knowledge of js, CSS, html if you want to be a frontend dev. Learning a framework usually happens on the job depending on what framework (if any) your organisation uses. Just my two cents from a career perspective. 
&gt;For a fully integrated tutorial like this, the author just has to pick something, but Ember is backend agnostic, and it's not a big deal to swap out the server implementation. True to some extent, but the hello world tutorial is mostly about setting up Rails. If I'm not using Rails, this tutorial doesn't help me get set up with Ember. Edit: Otherwise, this looks like a nice tutorial :)
These don't do the same things at all, you should read the spec again :) Hint: what happens if `i` is not an index into the array? e.g. `[,,3,,,,5,,,].forEach(...)`
I think a familiarity with the inner workings of Backbone - the most widespread JS MV* framework, and React - the most promising (seriously, shadow dom and very simplified rendering workflow) will give you a very good grounding in real JS jobs where you're not just scattering jQuery callbacks on a page somewhere. That, and learning JS properly will benefit you way more than whatever the current flavour of the month 'compile to js' language is
Thanks! :D
Thanks for pointing it out, just added it :)
You can promisify your library with bluebird (currently the fastest promises library). It'll generate promises with the suffix 'Async'. More infos here: https://github.com/petkaantonov/bluebird/blob/master/API.md#promisepromisifyallobject-target--object-options---object
Like other modules, it's a convenience, if so desired. I personally prefer: ``` var $ = require('modmod')('fs', 'chalk', 'wiredep', 'path', 'util', 'bower'); ``` over ``` var $ = { fs: require('fs'), chalk: require('chalk'), wiredep: require('wiredep'), path: require('path'), util: require('util'), bower: require('bower') }; ``` *if I used reddit more, I'd know how to format that code block.
The problem I have with native forEach (map, reduce, ...) is not performance but the order of parameters.
Take a look at this page - it is pretty comprehensive "How to learn Javascript Properly" [javascriptissexy.com/how-to-learn-javascript-properly/] (not my site)
For a while there, they just recommended reading the source code.
I did the trial of http://trackjs.com just to check it out. I thought it was interesting but at this time, we just wouldn't utilize it where I work (lack of resources and priorities). You should give it a go.
I don't think so. At least not outright.
As far as I know you'd definitely need to have some sort of exchange with a server side language because of the way client side JavaScript is sandboxed.
I totally agree with everything you just said...thank you
There [is/was](http://www.html5rocks.com/en/tutorials/file/filesystem/) a filesystem api. But thats about it. I dont get your specific problem so i am afraid i cant name you some alternatives.
That's really nice! You are the BEST game dev developer I have ever seen! (and I have seen 0)
The Filesystem API accesses the filesystem of the client user, not the server. 
that's still what I do... makes more sense
Only some of them are ports to JS using emscripten though.
$apply is the notification to the system that data has changed, and a inspection of all watches should be issues in the scope. It's really that simple, and the last tip is a really good one. They're actually working on making $apply no longer needed in v2, but I'm not entirely sure if they're really going to be able to completely phase it out.
This can be confusing to people who use the last one, which is a regex expression, and get back not a literal string match but some kind of regex match or an error.
Well, seems i did not understand the rest of the answer ether. Sorry OP, cant help you then.
Possibly. If the server is Apache and has the "Options Indexes" directive set for the directory that you're interested in, you could send an HTTP GET request via Javascript and the results would be the files in the directory. So, on the Apache side, &lt;Directory /path/to/dir&gt; Options Indexes &lt;/Directory&gt; You have to restart Apache for that change to take effect. function httpGet(theUrl) { var xmlHttp = null; xmlHttp = new XMLHttpRequest(); xmlHttp.open( "GET", theUrl, false ); xmlHttp.send( null ); return xmlHttp.responseText; } I haven't tested it, but I'm pretty sure that would work. So, if your Apache root directory for `someWebSite.com` is `/var/www/html` and the directory you're interested in is `/var/www/html/some/directory`, in the example above you'd httpGet("someWebSite.com/some/directory"); By design, Apache will NOT let you list (or access in pretty much any way) arbitrary directories on the server side. You can explicitly enable access on a directory-by-directory basis (IIRC, subdirectories inherit the permissions of their parents), but Apache's default behavior is "Nope." Bear in mind that doing this has some security risks, which is why it's disabled by default. Hope that helps. ~~EDIT: Sorry about the potato formatting. I don't post here much. Is there a "code" tag, or some such?~~
So do I.
&gt; vacuum cleaner repair instructions written by credit card lawyers Poetry.
I wrote in the description that it doesn't do type checking. So while forEach with throw a TypeError, _forEach will just process the value as `undefined`.
Actually the best practice for this seems to be to provide a "wrapper" function that gives you an object that provides all the methods you'd want the native object to have. Think of jQuery and its ilk for DOM manipulation, lo-dash for array/object manipulation (using the chaining syntax, not underscore style), or moment.js for date/time manipulation.
??? Using a regular expression as the first argument to String.prototype.replace returns a string. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
I haven't read much on Angular v2 but I think I heard it is ES6 only and they are going to use Object.observe which in theory means they don't need the digest loop or dirty checking anymore. However if that is true it also means browsers before IE10 won't work (even with a shim).
If they accidently put some characters that are regex characters in there expecting it to work. Just saying it should just mention that its a regex :) Also I think your question mark key is broken. And they usually go at the end of sentences!
I had a feeling something was fishy, but I did not know exactly what it was.
I've seen some of them, but not all of them. Thank you very, very much.
Hi, I teach at Dev Bootcamp. Dev Bootcamp graduates ~95% of the students that start here. Some students decide they don't want a career in software development. In some cases, students are required to leave if they can't pass performance checkpoints after a second pass through the program. That's happened to two of my students, out of several hundred. We work very hard to avoid that outcome. If you want to learn, you have a place here. 
The best way to evaluate a bootcamp is to randomly select graduates off LinkedIn and ask them their opinion of the school. Also, note where they are working now. This is nearly impossible to game by marketing people. I'm very confident in what you'll hear about Dev Bootcamp, where I teach, by randomly selecting people. 
I'm so proud!
Kind of cool. When I put a clump of particles near each other, though, it acts a bit wonky. First they clump together like I would expect, and then the whole clump starts spinning wildly for no reason (floating point errors?) and spins itself apart. Also, I wish I could create a bunch of particles all at once rather than one at a time carefully so that I don't "shoot" them.
Indent 4 spaces foo = bar;
That's not type checking, .forEach doesn't throw an error for undefined indices but skips over them. Your function will call the callbcak even for undefined indices. You can actually add type checking for free to your functions, that's not what is slow about the native array functions at all.
Lookin' good. Inspired by http://www.nowykurier.com/toys/gravity/gravity.html perhaps? :D
It's those danged Backbone hooligans! 
&gt;Why can't the AngularJS documentation be this clear. There is a button on each page that says "Improve this doc" so the answer to your question is because people would rather post on their blog about it than (also) contribute to the official documentation.
Wow, I missed that and I missed the part that says "scroll to increase the size of the particles" I read it twice and missed it :(
Pretty rad! I made a bunch of [similar stuff](http://procyonic.org/clocks/index.html).
Use: https://developer.mozilla.org/en-US/docs/Web/API/Element.getBoundingClientRect [Google I/O 2011: Super Browser 2 Turbo HD Remix: Introduction to HTML5 Game Development](https://www.youtube.com/watch?v=yEocRtn_j9s) (mouse handling stuff starts at 19:20)
is your first directory root?
You'd have to loop through the offset parents (applying the offset of each) until you hit the root node. It's much easier to just use getBoundingClientRect, which is supported by every relevant browser.
Thanks for your comments. I have added some additional text forewarning about the 3rd line being a regex and provided a link to W3 for reference just in case someone doesn't understand regex.
It's larger than that, they reported these 4 sometime between last night and this morning: * Building With Gulp | Smashing Magazine (xpost /r/Frontend) * modmod - namespace your external [npm] dependencies. * "This Atom package enables semantic highlighting for JavaScript code. Identifiers are highlighted in different colors (the same identifier always in the same color) while everything else (like language keywords) is displayed in various shades of gray" * The Ember Tutorial I can't really find a rhyme or reason to it.
I think it's all about the build systems, and as a community we should embrace the "node - modular" way of doing things. The JS ecosystem is incredible, and everything we would need in a framework already exists somewhere on github. What we need is a way to put everything together and scaffold projects like rails apps. Gulp + Browersify looks like the most promising tools to me. Browersify really strives to unify the client/server side javascript into one big JAVASCRIPT. It modularizes the client side code with a consistent syntax, in and of itself that takes care of some very important features we need in a framework. Gulp (and Slush) are just amazing, and I think it's even more important than browserify. These are the *tools to build the tools*. For example, I use React and I created a gulp file one day which just converts my react component into a string and injects it into the html page, as I'm building it and make changes (live reload refreshing my browser). So I have working HTML pages that would function independent of JS loading at all (for when it's live on Server). You seem to critique what React is doing to abstract HTML, yet it's the only templating library I use where I can write HTML. With gulp, it's possible to abstract frameworks on top of something like React, where it would scaffold the React components from any sort of template files you want to build. And this is where the power of 'gulp' comes to shine, in how customizable everything is. And it's just an abstraction over node streams. I've been trying to combine browersify/gulp, and it's not easy because both systems have parallel goals. Ultimately, browersify could be re-written inside of gulp (which is what I'm trying to do), and thankfully everything in these libraries are so modularized in the NPM / opensource ecosystem that it's possible to tear everything apart. I think it's important that we maintain NPM as a source of truth, like ruby gems (but better), and to mix it up with the front-end. We need to accept that there is no 'one framework to rule them all', so the best framework would be a framework of frameworks. Develop these build systems to be even more intuitive and encompassing of every language feature and npm module you could think of. At this point we just need to make it easier to mix, match, and scaffold apps, and we have everything we need.
If you by root mean /, then yes.
I'm absolutely agreed on Node being an ideal model for dependency management and getting things off the ground quickly. React looks reasonable, actually. I'm more bothered by stuff that reinvents obvious points of abstraction that can already be used to split DOM handling from app logic already present in the core technology. Heard of the others. Now I'm curious. Thanks.
you're still just saying "nothing in existence today is 100% to my liking so I'm going to make something new that is 100% to my liking". Why not explain why you feel you can not fix the shortcomings of the framework that is closest to being 100% to your liking? After all, they are almost all open source, and many of them are designed to be extensible. Why not contribute to one that already has critical mass rather than create more noise?
Tnx!
Thanks for the reply and that's reassuring to hear! I've heard a lot of great things about Dev Bootcamp and I've actually got an interview with someone from DBC in a couple weeks which I'm really excited about!
Because on a couple design cornerstones, the top dogs don't really do what I have in mind from what I can tell. I'm interested in whether changing those stones out would bring enough new value to at least add a new interesting argument to the mix that I'd enjoy the challenge of writing. If at the bare minimum, I enhance my craft writing something that only suits me for personal projects, I'm satisfied. If it never hits critical mass but influences other frameworks, I'm delighted. If it takes off, well hell, that would almost be annoying. I can't stand joiners. (/joke) But really I'm more interested in the conversation about what works best than who wins because nothing lasts. Whether it's a conversation worth having is what I'd like a little help getting some points of comparison on to consider.
Great advice! I'll look into it!
Allright awesome, I'll have a look at it.
I like this a lot! The interface is informative and responsive and it can handle a few hundred particles before getting unbearably slow. My only criticism is that it needs to consider the Law of Conservation of Momentum.
And the clumps reverse the direction of rotation. Yeah, not a good simulator. 
I love creating one big sun and making little dots orbit it. http://i.imgur.com/99RKhyR.gif Edit: You really have to wonder what possible reason anyone could have to downvote this. I love/hate you Reddit.
That's really cool. I'd love to have a way to zoom out rather than pan when the system gets big. Also, clumping mode feels like it grows too quickly. Radius should be the square root of mass/area of a circle (or cube root of the mass/volume of a sphere), not a linear relationship. In other words, it feels like clumping adds radiuses when it should be adding areas or volumes.
Yeah, but it's not like it's a wiki or anything. You have to edit the repository source code directly or (if you aren't a member of the project) fork and pull. 
It should have a cool logo.
[Managed to make a stable orbit.](https://www.youtube.com/watch?v=7ioToxeSmE8) Edit: Actually after playing around some more, I've found the trick is to launch them from about twice the "stars" diameter with the speed stretched out to slightly longer.
DID YOU SOLVE THE N-BODY PROBLEM WITH NODE
love it. been playing with it a while. I'd love even more a button that lets me auto-center the largest body of mass (or even better the center of mass of the system). I'm trying to make a binary star system and it's not going well with all the spacebar and scrolling.
tips already [removed], do not know what to comment, lol
hamagad, hamagad, hamagad Java !== JavaScript
very cool idea, physics need some work still though, i.e. reset, collision on, place two identical large stationary dots a couple inches apart: even though they are both moving at the same speed and mass, the new mass will be centered on the last dot (instead of at the contact point), and the resulting velocity will be of the last dot (instead of zero).
I'd argue that in 2014, people not using a module system are being plain ignorant
also two small dots, collision off, placed an inch apart, they seem to accelerate off to the side. http://imgur.com/4cXAiLC
There are a few problems that I consider more or less unsolved, though it might be more accurately said that they are simply unresolved--we do have solutions for them, but not any sort of consensus. * Modular code. Though AMD's been going out of style for a while now. Web components? Browserify? * The DOM/browser layer. It is untenable to "compartmentalize and hide the DOM." The best we've managed is React, which has a massive new layer on top of it--but at least it's clean. * Testing across browsers. These questions are tangential to the design of a framework. Ideally they'd be solved with independent bits of code. But until they're resolved, designing a framework seems difficult and muddled. Since a framework needs to depend on solutions to these problems, it's tempting to have a framework do all three of them; an all-encompassing all-or-nothing solution, which is something we're trying to avoid. 
Haven't done it myself yet, but wiki says you'll be looking for 4 bytes that represent zTXt... So you'll have to look up each character on the ASCII table ( utf-8 maybe? Depends on encoding ) to find the corresponding numbers that represent z, T, X, and t and looking for that sequence in the file. Preceding it will be another 4 bytes that represent the length of the data following the chunk type and after the chunk type is the data you are looking for. There are simpler ways to get this all friendly, but I think you may learn by doing/experimenting. ;) Edit: also, about 5 min of Google : https://github.com/devongovett/png.js/blob/master/png.js E2: https://github.com/darkskyapp/pngparse
&gt;Cut the learning curve Classic non-understanding of technology. Let me paint you a picture. Everything that makes something simple, makes it less customizable. Everything that gives you more control requires a higher learning curve. Making something with an easier learning curve isn't something that is feasible in the slightest when it comes to something like an all encompassing javascript "framework".
&gt; be cautious of becoming an over-thinker Haha, point taken. Though at this point, the effort would be to reverse it, not prevent it. It's actually worse than you know - the site used to save the note as a .txt file when you hit Ctrl+S (or Cmd-S on a Mac), then I took it out after I realized there's no way to make that feature full-fledged and predictable across the target browsers and browser settings. &gt; What you may not consider useful, others will. Certainly, but, I must stand by what I said and say that they must be found useful by a certain number and to a certain degree before they pay for themselves. I think a lot of programs suffer when they add features that they don't fully understand. I appreciate your comments, you seem sane and practical. But it's like I said, this is kind of a toy for me. What I find fun isn't to make something highly marketable and potentially useful, but to make something that solves a specific problem very very well. Seeing as hosting is free, I don't think it's such a bad thing to indulge myself here, is it?
Install elasticsearch, insert entities from xml there and .. done
Why would you even consider downloading 12MB to the client? ever? Keep it on a server in memory or put in it a db. Anything except sending it to the client.
I'm in a similar situation and I could say that point 2 works pretty good for me. Having REST API helped me to server only the needed data to specific places in the app. It's much cleaner and flexible comparing to the other options.
If this is the case, does ng-model just automatically create watches out of things? is that how 'ng-modeled' fields etc trigger digest loops?
Why not serve what is required initially from a server and cache your response in the browser using indexedDB? This is assuming that the data is fairly static. 
Ctrl + - (minus), or Ctrl + mousewheel down
I would love to be abel to interpret the angularjs source. I'm not sure where the "bootstrapping" process takes place (which if I did I suppose I could follow it along to see how angularjs does all its magic). Does anyone have any advice for where to get started in comprehending the angularjs source?
What is your end goal? If it's cropping, for one you can use an html5 canvas to do slicing and then output back to base64 with toDataUrl()
thanks you all
I'm attempting to access the zTXt chunk of some special PNG files which have a scripting language embedded within the zTXt chunk. From there I plan on parsing the instructions from that scripting language.
Sounds like something you should be using a database for.
Thanks for your suggestion, I know there is such a book. However, there is no legal problems about that. I am teaching real world of NodeJS, that is why I have given that name. That is generic name. 
If you need live data filtering in the browser: 1) convert xml-&gt;json 2) make sure your web server uses gzip compression 3) On the client-side, work with a library such as crossfilter.js. If you need to visualize your data, I would recommend dc.js which builds on crossfilter.js and d3js. 
Elastic search speaks json, it's really easy to get stuff into and out of it
Something like this might work. var data = new FormData(); data.append('user', 'person'); data.append('pwd', 'password'); data.append('organization', 'place'); data.append('requiredkey', 'key'); var xhr = new XMLHttpRequest(); xhr.open('POST', 'somewhere', true); xhr.onload = function () { // do something to response console.log(this.responseText); }; xhr.send(data); 
The Angular way is much easier to write tests for. Your jQuery code requires a DOM, while the angular code can be executed in isolation.
IE allocates 10MB, but I wouldn't guarantee any specific amount.
Formatted: var data = new FormData(); data.append('user', 'person'); data.append('pwd', 'password'); data.append('organization', 'place'); data.append('requiredkey', 'key'); var xhr = new XMLHttpRequest(); xhr.open('POST', 'somewhere', true); xhr.onload = function () { // do something to response console.log(this.responseText); }; xhr.send(data);
&gt; I've made a rich experience on my site and gone to great lengths to avoid unnecessarily using jQuery I'm going to be 'that guy', but I'm currently using jQuery, so why did you avoid it?
So [this](https://i.imgur.com/Rz9YahB.png) is exactly how the earth revolves around the sun, right? Also, I managed to make a stable orbit too!! woohoo!
The JavaScript required to make the rest of my site work currently takes up 3KB. To load a 100KB jQuery library just to submit a form elegantly is like using a sledgehammer to crack a nut IMO
Is FormData() OK for IE9? Looks like it's IE10+?
Most of all, you need a cross-platform XmlHttpRequest. You can find small Javascript libraries (a few k at most) for just that, if you look around. You don't have to *use* them, just extract what you need. Plus, you need to serialize your form data before submitting it. Depending on the complexity of your form that might be almost trivial (loop through form elements and add a key/value pair for each element) or more complex. And finally, in the form onsubmit attribute, call this function and return false, to stay on the same page. 
*Edit: If you're learning because you want to become a great javascript developer. Stop reading and go on with what you're doing. You're doing great. If you're avoiding jQuery because of performance. Read on:* jQuery is 38.5 kb when served from their CDN. It's very likely that jQuery is cached on a user's computer, because a lot of websites use the Google CDN or the MaxCDN, so 99% of your users don't have any increase in data usage and the other 1% only see that on the first pageload. Would it really be worth it to spend that much time just to to save 38.5 kb? Data traffic/hosting is way cheaper than developer-time. I understand that there is a hype of 'not using jQuery', but jQuery fixes a lot of stuff for you to make your code work cross-browser. Try to write a lot of vanilla-js and then open your site in IE8. It's very likely that your site will break, and it's unable. What would a user choose? 38.5 kb extra to download, or an unable website?
Yes! This! I've been looking for a framework that understands the importance of aesthetic presentation for the longest time - I would literally use it instead of breathing. Literally. 
Yes. It's absolutely offensive, because it's **lazy** to handwave about how everything sucks and is bloated or whatever and ask for anything nontrivial in return. 
You could also check out zepto. Light weight, jquery compatible and modular. 
It was interesting to see require.js in action too. Probably overkill here though, since the minified require.js was larger than all the unminified code it included.
You could rewrite the jQuery so it doesn't require a DOM tho.
Jesus - the guy said he doesn't want to use jQuery and gave a perfectly valid reason why not. He's *trying* to learn how to do these things himself without relying on a crutch, which will *make him a better developer* even if he goes right back to using jQuery again afterwards. It's bad enough when every javascript question on the net is reflexively and unthinkingly answered with "use jQuery", but even when someone explicitly explains that they don't want to use jQuery, and why, *still* there are asshats trying to force them to use it. Unbelievable. &gt; Try to write a lot of vanilla-js and then open your site in IE8. It's very likely that your site will break, and it's unable. This is exactly the problem - if you rely on jQuery you *never learn* how to write good, cross-browser JS code or deal with cross-browser differences. If you're happy always playing in the jQuery playground and never learning to be a good **javascript** developer then that's fine, but when someone else explicitly states that they're trying to learn how to tackle these issues themselves, trying to convince them *not* to learn and get better at their craft is a stupid, shitty thing to do.
Two things: * Complexity can arise from simplicity (The rules of chess are simple, but the game of chess is hard) * The learning curve can be flattened from outside with tutorials and documentation &gt; Everything that makes something simple, makes it less customizable. Everything that gives you more control requires a higher learning curve. I assume you write only in assembly then? Or do you find the trade-off between customization and productivity acceptable for some situations?
I understand your point of view. However, one benefit with AngularJS in this particular example is that you uphold the Soc (Separation of Concerns). In your jQuery example, you need to, in the JavaScript domain / layer, know that you have an HTML-element that has the ID "show_contact_form_button". So you are basically putting constraints on the HTML, and there by double maintenance. If someone refactors the ID in the HTML, you also need to go through your whole JavaScript code and update all the IDs as well. With the AngularJS version, in the HTML, you basically link that element directly to a click-function. In the JavaScript, you don't have any knowledge about the HTML and what elements exist or how they look like. You just know that when the function "show_contact_modal" you should do x. I know I am explaining it a bit blurry, but it actually kinda good that you keep those two areas (HTML and JavaScript) a part. Its like CSS and HTML. You could have inline CSS on all your elements, but then your design and look and feel is tightly coupled with the HTML, instead of applying the style on top of your HTML, which you can easily refactor without touching the HTML code at all. One of AngularJS' key points isn't code organization. The true power comes from convenience, for example double-data-binding and the small amount of HTML code you need to write in order to create business logic. That's why people use AngularJS, not because it better organizes your code than traditional jQuey code. Hope this answer helps.
One cannot compare two frameworks by just writing two lines of codes in two different language. Angular comes with amazing modularity and testability. For eg. Your directives contain your dom manipulation logic, it only deals with changes in model and how your dom should react to it. This gives you encapsulation. If you can write your containers and your views really small and use the power of ng-include and write smaller individual reusable views, you can keep your code really simple and neat. Most of the code should lie in services who provide the dataobject which the controller just exposes as a delegate. The controllers duty is to handle the view events and delegate them to service. 
You have decoupled your JS and your HTML that way. Let's say that you want to switch the `a` tag to a `button` tag. If you had used the tag in your jQuery selector then you would have to change it in two places. But in Angular you could have put it anywhere in the controller template and it will still be called. Another reason is code reusability. What if you want to reuse the same template for different resources because they are conceptually similar. In angular is it just referencing the file again. I am not sure how I would have solved it otherwise that easily in jQuery.
You should use the right tool and framework for the given job. I still sometimes skip Angular*, because of other drawbacks that framework has.
I'll add something that no one has properly addressed yet, which is that your example above isn't really the right way to solve this problem with Angular. A lot of people alluded to the very generic concept of modularity and reusability, but it's hard to understand without a real example. If show_contact_modal does something like the following, you just create a different form of hard-to-manage coupling: $scope.show_contact_modal = function() { $scope.modalVisible = true; }; &lt;div class="modal" ng-show="modalVisible"&gt; &lt;/div&gt; Definitely modestly better and more maintainable than just jQuery, but leaving behind a whole lot of Angular power. The most correct way to do things would be to simulate the behavior of [FormController](https://github.com/angular/angular.js/blob/master/src/ng/directive/form.js#L426-L431), which publishes itself onto the scope using the name attribute, i.e. the following makes available *$scope.myForm*: &lt;form name="myForm"&gt; &lt;/form&gt; So if we write a modal directive that replicates similar behavior, the final example becomes this: &lt;modal name="contactForm" title="Contact Us"&gt; Insert contents here &lt;/modal&gt; &lt;a ng-click="contactForm.show()"&gt;Contact Us&lt;/a&gt; Now a ModalController encapsulates all of the logic for modals and *myController* can be disposed of entirely. Note that *title* isn't just a dumb HTML property — you can use that in your modal directive to add the title to the header, automatically put it in the proper header tag, and really whatever else you'd like to do. Angular has an incredibly rich, but also complex API. It is a really amazing productivity enhancer once you're reasonably fluid with that API. As you've seen, the learning curve is deceiving — getting two way bindings to work is virtually automatic, but accessing the more powerful mechanisms (the injector, the directive APIs, etc.) take lots of time and patience. 
Ugh. Backspace keeps nuking my replies. The core idea is event-driven interface. Objects with methods that trigger events of that method name off the top of the parent object. There's a constructor creation process that makes it easy to bake the handlers and rig all the listening etc... So you call a standard looking method to do something and an event is emitted with a DOM-style event object containing the args passed, meta data, etc... You can listen globally by event name, by factory, by individual instance. Debug, concurrency, debug, testing and decoupling wins a-go-go. I'm not a frameworky framework kind of guy. I like Django for instance, because it's simple bordering on absurd. I prefer my monoliths at the more granular level where it's easy to plug all the things together with the least amount of hassle possible and without sacrificing flexibility.
What drawbacks have you found? (I don't think Angular is the silver bullet for all our problems, but I do wonder what others think is wrong with Angular)
Yes, Though I did not agree when you said "AngularJS' key points isn't code organization". look at factory, service, provider. its all about code/module organization, what to expose, how to call it.
Apparently only for N=1 (and not sure Node had much, if anything, to do with it).
Okay, seriously? I was just looking for opinions on what people find essential in frameworks that I hadn't already listed in my question. I listed out everything I could think of so people wouldn't have to bother with anything I hadn't already thought of although I'm certainly open to criticism that's actually based on things I've said. What's starting to get irritating is the criticism I seem to be getting based on assumptions about me or my plans that have no basis in what I've said or done so far. And really I didn't think it was all that uninteresting of a topic or asking overly much of a participant. Why are we using these things? Why are the ones that have the most success as popular as they are? I don't necessarily understand why certain tools that are now widely regarded as failures (e.g. thin client solutions like webforms) ever got as popular as they did in the first place but I do see some familiar aspects (perhaps wanting to own too much of the problem for instance) cropping up in a lot of the more popular client-side app frameworks. But I'd prefer to keep the focus on what people value over what I think is bad because that's even easier to derail than what essentially boils down to "Before I go and write something completely useless, here's what I think is essential in a modern client-side JS app framework. Agree/disagree and have I missed anything?"
My plan is to basically to make it easy to daisy-chain dom-events to higher-level app events. I don't want a monolithic layer on top of all of the DOM. Nor do I want to reinvent how DOM/UI stuff is implemented. Just a point of access/bundling for a given set of UI functionality that separates the DOM from the app logic and the data/service stuff that makes it easier for non-web UI experts to implement and understand stuff and makes it easier for everybody to see what's going on in a given view at the higher levels. And I'm not necessarily thinking framework. I'd be going more the route of jQuery vs EXTJS. Tool that cleans up a lot of cruft/eliminates boilerplate and helps you rapidly DIY however you want, vs. "All of the things solved for you." For the record I don't dislike any of the popular app frameworks 1/10th as much as I dislike EXTJS. I'm making the comparison more to elaborate design preferences. Edit: Also, thanks for actually answering the question. I probably should have kept it simpler. Not sure what non-browser tools could do to aid browser testing but it's an interesting point.
That is called Dependency Injection. You can even achieve that with plain old JavaScript code, so I don't consider that a key point for Angular. That is just a benefit (and a requirement when writing unit tests) that you get when doing OOP.
Thanks. I'll check it out. I do definitely have a preference for eliminating the tedious bits over covering old ground with shiny new ground.
Hm. There are plenty of articles on the net with AngularJS drawbacks. For example SEO drawbacks, Angular is pretty bad when you need to render large amounts of elements, etc. So my advice is always to know the strengths and weaknesses for each framework, so you can use the right tool for the job. But for the typical site, AngularJS works great.
If you read my other comments I think you'll find we're of similar mind. I'm primarily interested in creating stuff that lets you DIY rapidly by focusing on eliminating cruft and boiler-plate rather than standardizing a new, slightly reduced form of it. In my case that starts with a tool that hopefully makes it easy to split whatever concerns you deem worthy of splitting and being able to add new functionality that responds to old functionality without editing old code. Any framework I write with that is just the demo, really.
If you're really desperate, check out the source in jquery and replicate that.
If you ever want to look into what jQuery is doing internally I recommend using [jQuery Source Viewer](http://james.padolsey.com/jquery/#v=1.10.2&amp;fn=jQuery.attr). jQuery is often thought of as a black box, but It's Just JavaScript(tm). You can learn a ton just going through the source code.
Forking and making a merge request is hardly a huge barrier either.
We don't necessarily disagree. I just think the learning curve should be on the core technology and that a framework or app-building tool should always let you drill down to that without getting in your way or even just let you ignore it if you don't like a given aspect of it. IMO, if you assume the people supporting a tool are fluent in everything that makes it work, there's no need to snatch things out of their hands in case they might do something dumb with it. That's antithetical to the design philosophy of JS itself IMO.
That's not a particularly good example. Also jQuery and Angular are not even necessarily direct "competitors". Often people use jQuery alongside Angular. If you include jQuery before Angular, Angular itself will leverage jQuery too. Angular is best for building single-screen applications. By that I mean applications that would normally be built via many server-side generated forms and pages are instead built purely in client-side code and only talks to the back end to pull or push data. Angular can completely swap out forms or entire pages of markup based on changes in the URL without having to reload the entire page. Then it can dynamically bind data retrieved from your server into the appropriate locations without you having to loop through the data, know the IDs of the elements and manually manipulating the DOM, like you would with jQuery. It also works the other way around. When the user updates some data in a form field, that data is already updated in your service object and ready to be pushed back to the server without you being required to, again, loop through all the fields and collect the data. Finally, the last big feature of Angular is the ability to create your own HTML tags to encapsulate complex UI elements (these are called directives). For instance, in jQuery, if you wanted a date picker, you'd have to put in a text field, then initialize some date picker plugin on that text field. In Angular, you'd make a &lt;dateinput&gt; tag and encapsulate that logic away. With the jQuery version, you'd have to deal with the initializing and binding of that datepicker on every page you use it, for one or more date fields on the page. In Angular, that is all abstracted away, leaving your templates free of one-off $( document ).ready() blocks.
We are programmers. The essence of what we do is distilling the complex into the simple. There's no reason our tools should be one tenth as complicated as solving the problem from scratch. Compare Django to my favorite whipping boy webforms. Django's ORM, templating, auto-building ORM, are all very easy to grasp, simple to use, powerful and completely optional with tools in place to make it easy to sub in a from-scratch-style-solution. Compare to webforms which nuked any script tags you added by hand to head tags because you hadn't registered with the official webforms dependency management tool; that turned the HTTP request response process into an 18 layer juggernaut of a phenomenon (to be fair I think that was inherited from ASP.net). The only complexity we should need to be accountable to for a well-designed tool, IMO, is the core technology.
It's data about bus/train stops for public transit. The transit system has a public-facing API to query for list of routes and arrivals, and you can query stops for specific routes, but they do not have a way to retrieve all stops (probably because the data is so big). In my application, I would like to offer searching across all stops. What I've actually discovered is that they include a lot of information about routes, lat/long, and other data irrelevant to my needs. I've written a short Python script to parse it and output only the info (stop ID and description) that I currently need. This brought the file down to &lt;500kb. I think this is probably more manageable to serve to the client.
What I've actually discovered is that the file includes a lot of information irrelevant to my needs. I've written a short Python script to parse it and output only the info that I currently need. This brought the file down to &lt;500kb. I think this is probably more manageable to serve to the client.
No, you need to shim it. How low for IE do you want to go? This can make the difference between going full vanilla homebrew and "sod it, jQuery will have to do"...
The two big reasons I am hesitant to create a REST API: 1. I want to be able to quickly filter through all of the entries. 2. I would have to set up a server, database, and make sure it was secure and maintained. 3. It's a mobile app, and my goal is to get it wrapped in Cordova/PhoneGap to provide some additional functionality - including being semi-usable with high latency/no connection.