[immer](https://github.com/mweststrate/immer)
All price fields should have a class even the new ones. A js function to sum all values with this class and call it from the Ajax callback.
Why won't you write it yourself, instead of applying additional libraries. It is done in several lines of code. 
Hard to judge without code. But looks like when you are summing them up, you are taking first value, not 'certain' one. products.map((item, index) =&gt; (&lt;div onClick={() =&gt; console.log(index}&gt;{item}&lt;/div&gt;)) Now you have list of products and when user click on each thing u will get a certain index, after receiving this index you could simply emit event into further functions to work with other values.
Or simplier if your products is an array of objects you could simply add onClick={() =&gt; totalvalue += item.price}
really? well am not a dev. am just helping my partner (who is the dev) with some research. He needs a good infinite scroll plugin
Cool! Some people like the Y to point forward (makers of a duck), while I like it to point up. It is enough to swap each second and third coordinate in your model, like this :) [https://jsfiddle.net/y23jwr6k/1/](https://jsfiddle.net/y23jwr6k/1/)
@rybytud You made me do that :D [https://jsfiddle.net/y23jwr6k/2/](https://jsfiddle.net/y23jwr6k/2/)
It really depends on where you live. It's almost always English. But Russian is pretty high as well. At least, well, in Russia.
Oh totally, I'm not surprised to find it's a regional thing. (I'd imagine there are more Chinese-speaking devs in China for example üòâ)
In US i would assume its almost always only english. In worldwide tech scene, chinese and russian is big. I have no hard data but chinese could be as big as english. As you might notice it has a lot to do with size of the population interested in tech in a country. Indian languages are not as big despite the population probably because they speak alot of different languages and tend to favor english when working in tech related languages.
There is no other language besides English. After that it reverts back to the language of the places with the most jobs, and / or the most developers. So I would guess worldwide Mandarin, Spanish, etc. Where I live it's German, Polish, Russian. 
It would not be that hard to extend my code with a Z-buffer (and drawing triangles pixel-by-pixel in JS). Extending my code to that level would be useful, if we wanted to make a WebGL server in JS with the same interface (to run WebGL apps on devices without browser-side WebGL) . GLSL interpreter would probably be the hardest part.
Printing to PDF in chrome does stuff like cut titles and images off halfway through across two pages. It's not really suitable for usage like this.
By looking at the examples, I've found D3 to be not sufficiently high-level. I'm looking for the experience you'd get with Python or R tools. Some other suggestions in this thread are wrappers around D3 that mask away the lower-level stuff.
I'm a bit surprised nobody said Chinese... &amp;#x200B;
&gt; Even though you may know well about AngularJS, jQuery, React or VueJS, you may not be considered as a good front end developer if you don't have a good understanding of Vanilla JavaScript. Fuck off maybe? This isn't "vanilla javascript", it's how the spec says the compiler is supposed to work. And at that, only how the `+` operator works. Oh, and when exactly was the last time you ACTUALLY used ({} + {})?
A lot of Russians still frown upon English, they have some hate that is deeply rooted into their DNA, for historical reasons. One main reason are the Latin letters. The western Christians, most notably Catholics always tried to take over Orthodox Russia for the past thousand of years, and they still try. Another reason is that English is the language of the British Empire - the sea empire, that was and still is the archenemy of the Russian Empire - the land empire. However, for those Russians who are free from this influence and treat English exclusively as a container for information, the language is just a valuable asset. What I said above about Russia and Russians is hilariously identical for France.
In my experience with reading other people's code, everybody uses English except the Chinese and the French.
A big name worth mentioning would probably be Spanish: a country in Europe, most of Latin America and almost half of USA
I was amazed by this snippet when I wrote it the first time ```javascript async () =&gt; { while(await hasPendingResponse()) { // wait } } ```
Thanks to game programming being popular in Japan, I've seen libraries and forums for gamedev in Japanese.
I don‚Äôt think it‚Äôs possible to do what you want. However, the core problem as I see it is the user not being able to see that something is happening before the file is available to download. This is a common problem when dealing with asynchronous actions :) I think you can solve this by showing something before you start the request, like a spinning circle, and then hide that after the request returns. E.g. on the line before axios.get, add a class to the element that the user clicked (I‚Äôm assuming the user interacted with something to trigger this whole thing :) and style it as ‚Äúin progress‚Äù, then after the fileDownload line you can remove the class. Sorry I can‚Äôt give you a specific code example - I think I‚Äôd need to see more of your code to understand what‚Äôs possible. Any questions, hit me up :)
My friend is an airline pilot. I asked him once how talking to air traffic control works, with the language barrier. They all speak English. Any pilot flying into any airport speaks to air traffic control in English. A Russian pilot flying into Beijing would speak English on the radio. A Spanish pilot flying from Madrid to Mexico City would speak English on the radio, even they are both native Spanish speakers. English is the language of the skies. Except in France. French air traffic control refuse to speak any language but French, except in emergencies. Every pilot who flies into France needs to know they minimum French it takes to organise a landing. ‚ÄúMayday‚Äù is a homophone as the French ‚Äúm‚Äôaide,‚Äù meaning ‚Äúhelp me,‚Äù because of this. 
[https://word-maker.herokuapp.com/](https://word-maker.herokuapp.com/) with native JS only.
It's pretty wild, not sure if anyone would like to go that route the way we tried. It's using react-reconciler with our own primitives defined (group, button, label, dropdown, etc), and it naturally uses redux. So we can use React to write our plugins [without a dependency on react-dom](https://i.imgur.com/a7MFTFx.png). The customer takes this and [implements these primitives.](https://i.imgur.com/LHCsu5t.png) in their framework of choice. They basically forward all the primitive actions (click, onChange, etc) via redux, so the plugin can function on their own while the outward UI reacts to changes. It looks like this: https://twitter.com/0xca0a/status/884851183051001856 all the dialogs are independent of frameworks and could be implemented in vanilla. But writing a blog post is too much work right now, i think it's a crazy edge case. :-)
You have your alert running every 1 second. You should be running it every 60 seconds if you want it to be every minute. 
Okay thanks man. Sure i could show a loader or something, but I want the user to actually be able to cancel the file midway if we wants. So how do you think i go about that? Also, is there absolutely NO way to get the file prompt to show before downloading? Thanks!
do you have control over what comes back from php? if so, change the shape of the data on the php end to give you what you need. instead of returning a `div` return an key-value object that has the price and the product and insert those values in html. if you can't change the shape of the data, target the html tag that has the price. each request you make should have a similar structure, so if it comes back like &lt;div&gt; &lt;span&gt;Rollerblades&lt;/span&gt; &lt;span&gt;$79.99&lt;/span&gt; &lt;/div&gt; you'd pull the value out of the 2nd span and do something with it.
https://www.hackerrank.com/ https://www.codewars.com/ https://www.coderbyte.com/ https://www.topcoder.com/ all of the sites on there have problems that will let you practice what you're doing. pick one of those sites and start solving 
As oldschool I mean classical programming :) C and c++ are great but we don't like each others so I become FE ;)
That's not how it works..
Yes, I am fully well aware that I will require the api. But how do I do it without importing any assets such as jQuery.
I guess I worded the question wrong. I know of some of the sites, I was asking more how often do you go to those sites and do problems?
Im also check for that before i pass it.
[removed]
I like to be as descriptive and clear as I can with variables and even folder names. I hate when there's vague naming conventions since everyone seems to use the same words for different reasons.
Such checks are unnecessary IMO. You should just make sure that this function would not be called with the wrong arguments. If thats not feasible, then I guess one has to settle for this.
Is there a preferred/more popular method of where tests should go? ie in a test directory vs in the same location as the code they‚Äôre written for? 
Why do you even want to add that time to current time? Just have an interval run every second for 5\*60=300 seconds. When that timer is 60, you have passed 1 minute mark. Usually modulo is used here too. So you can either do if(secondsPassed == 60) alert("one minute mark"), if(secondsPassed == 120) alert ("two minute mark") OR if (secondsPassed % 60 == 0) { alert( 5 - marksPassed + " minutes left!"); marksPassed++; if(marksPassed == 5) killIntervalInYourPreferedWay } Code there is of course somewhat pseudo. 
... I don't think you can send packets though email man. Check out UPS or FedEx?
if you want to use type checking in javascript then just use typescript, no point in reinventing the wheel here.
Was that supposed to be a joke? 
Edge certainly fully supports it. After all, XMLHttpRequest is Microsoft's idea. You code executes fine too, but it simply sets up the request. It hasn't actually send it yet. You'll need to call `send()` to send it.
A humorous lesson I'd like to think.
You're right. I should become more familiar with the modern syntax. I just felt there was a lot going on, and reading the ES5 version definitely helped me understand what was going on.
May I ask for why this check is being done? Are there external calls for this code? In typescript you can specify the type of parameters, and the compiler should warn you if you‚Äôre trying to make a call with incompatible arguments.
Yes and no. It's a basic part of the language, so it's not wrong to use it. However, like many basic parts of Javascript, it can lead to some non-obvious results. I would recommend using a library like Lodash. It's a "swiss army knife" library that's extremely popular, and one reason is that it has a series of is* functions such as `isArray`, which are a much smarter way of doing what you're trying to do ... ... although in this specific case, -smiley- is correct: you really don't need this check.
As hinted in other comments, it's better to use some type-assistance tools, if you want to ensure things cannot go wrong
Not recently, but yes, I‚Äôve done this once or twice when learning.
in a filing cabinet 
I think most web developers, like myself, learned Javascript during the ES5 days. When we learned ES6, it was just "syntactic sugar" that let us do what we already knew in a shorter/more convenient way. But you're absolutely right, the older/longer way can be more ... demonstrative, and thus more educational. I'm not sure your post will get as many responses, because this is really only an issue for new language learners. For the new learners though I would imagine this is a great educational technique* for many ES6 features. *even though the Babel translation isn't the "true" representation of the browser does; it's close enough for learning purposes
To start with, once the button is pressed, prepare the main timer duration (e.g. 5 minutes), then sets up an interval timer. Make the timer function decrease the main timer duration, then display/update the countdown. Finally, if the main timer duration reaches zero, remove the interval timer. Once it's working properly, in the timer function, add a secondary timer duration (which is 1 minute) onto the preparation part. Then at the end of the timer function, decrease the secondary timer duration and check it. Alert the user if it reaches zero.
todomvc.com is the "standard" on this as far as I'm concerned. Other than that your options are specific blog posts comparing framework X to framework Y (which, in my experience, tend to have a strong bias for framework X), or you can just read the open source code for similar libraries. For instance, go look at a React datepicker widget, and an Angular one, and a Vue one, if you want to see real examples. But of course those different libraries will be implemented differently, which makes them harder to compare; for direct comparisons you can't beat todomvc.com
I use https://www.npmjs.com/package/better-assert to assert the type/shape of arguments in my more critical functions, like data going into my database functions. Nothing wrong with that. Your solution is just verbose. And you may want to consider static typing (like TypeScript) if this is something you want for every function.
Some reasons that I have a separate test folder at the project root level: * I don‚Äôt use low level unit testing. I focus on higher level tests. cause most of my errors occur when combining components, rather than in individual components. * I often test entire pages rather than only single components. For example, if I have an article, I would have an article-test which checks the headline, image, bodyText in the same test-scenario, rather than having separate test-files for each of component. * ..also, I prefer having one test-file per pageType that checks that the headline is correct, rather than having a test-file for the headline-component with one scenario per pageType that uses it * many of my test scenarios test more than one component at once. Thus I feel that it‚Äôs simpler to put the test-files in a separate folder rather than having them spread out in different component-folders
I put everything in one file and use grep.
It'd be better to check the value based on its class. e.g. if the `editItem()` function expect the `item` argument is an object instance of `InventoryItem` class, use: item instanceof InventoryItem So, it'll evaluate to `true` only if `item` is an object instance of `InventoryItem` class. It'll be false if it's an object of other class, a non object type, a `null`, or `undefined`.
English is the lingua franca of tech. If you want to pick a human language to learn, almost any other rationale is better than looking at the language you might find some comments/docs written in which I would imagine simply scales linearly with tech workers speaking that language.
Let me see if i understood this correctly, the default value of the function is an empty object, but if theres an object, the default value of type inside the object is '__toggle__'. Right?
neither of these are readable to me. Can you explain?
I don't understand what you want. Do you want to receive an email when a user makes a certain action? Do you want to send an email which runs JavaScript when it is opened?
Have you solve it yet? I have create a bouncing object on codepen [https://codepen.io/avatar/pen/EdaKNz](https://codepen.io/avatar/pen/EdaKNz), maybe you want to checkout it.
When react projects grow organizing by function gets messy. Organize by domain.
My Angular app:: /.storybook /docker_build /src /app - /actions /animations /components /effects /guards /models /pipes /reducers /resolvers /routes /services /assets /environments /stories 
Haha I see 
Hi /u/samarind, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
That's just the basic structure. Everything below that is domain.
Hi /u/ThePyro187, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/bishoplocke, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/Ssjkr7, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I typically organize files by type, then concern. Let's say I am making a app backend that connects to a db. I put all the configuration information for any db settings, API authorizations, or server settings in a single /config.js file at the root or /config/index.js if the config data needs to be broken down further. Config.js, by the way doesn't have an object as its export, it is a function that takes an optional parameter and returns an object. This way, I can alter the config for prod, staging, dev, and test and keep them seperate. To interact with the db, I create a /controllers folder with class files corresponding to tables/documents/nodes that have methods Create, Read, update, delete. These all return promises, so I can chain them together. I then work on the /api folder. /api/index.js initializes the server, /api/routes/ contains the various get/post routes,which take the request and chain it through those promises until you get the response you want to send. On the front end, create-React-app or Vue-cli typically have good folders set up. I typically put stateless, presentational (dumb) components in /components, and state full components (whether or not I use redux) in /containers. 
Hi /u/friedrice420, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/aidy35, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/harp2017, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/akujinhikari, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/maksav91, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
+1 for TypeScript, it sounds like you don't like the uncertainty that comes with dynamic types, so I'd strongly advise going down that path.
By feature. When you have to change something it happens more often that you work on a single feature, so if the files are close together it makes more sense to me. I haven't encountered a situation yet, when having all your reducers in a single folder is more comfortable. 
I strictly stick to [Dan Abramov's guide](https://twitter.com/dan_abramov/status/1027245759232651270)
Correct!
Check out [WakeBakeAndMeditate's comment](https://www.reddit.com/r/javascript/comments/9ntu2y/modern_javascript_syntax_is_very_magical_sometimes/e7p09l1/)
For most languages I prefer Controllers Controller.a.cs Controller.b.cs Models Model.a.cs Model.b.cs Views View.a.cshtml View.b.cshtml Services And so on. But for ts and js I prefer App Features Feature.A View.js View.htnl Model.js Controller.js Feature.B View.js View.htnl Model.js Controller.js Services Utilities I'm really not sure why. I think some of it is to do with the ide, in enterprise languages there's usually a pretty massive ide with a good solution explorer, and the first structure suits that. For js projects, I typically use something with a command line, and "open ./model.js" is faster than "open ../../../models/feature.a.model.js" to flip between files you're likely to be working on together. 
When a designer learns to code. Or, when a developer learns to love design. Either way, I approve. 
I hate a trillion folders that I have to sift through to see if someone made something I might need. 
Organize by feature. Move files around until it makes sense one day. Never fails.
This. While I don‚Äôt stick exactly to this naming, organizing things by feature (rather than file/object type) makes it so much easier to work on things. 
why have \`src\` and then \`app\`?
[https://github.com/neurosnap/blog/blob/master/scaling-js-codebase-multiple-platforms.md](https://github.com/neurosnap/blog/blob/master/scaling-js-codebase-multiple-platforms.md)
P5.js could do this, also a lot of other good stuff too!
It's magical just because you aren't used to it. Someone new to ES5 could say the same thing about `arguments`.
My tests are in a '__tests__' directory in the feature dir. I like the separation.
This is the structure I like to use: /modules /{companyName|productName} /featureA index.js /utilities index.js index.js index.js package.json README.md webpack.config.js I like to configure the resolve in webpack like this: "resolve": { "modules": [ path.resolve(__dirname, "modules"), "node_modules" ], "extensions": [".webpack.js", ".web.js", ".ts", ".tsx", ".js"] } So I'm able to import stuffs like this: import { utilities } from "{productName}";
Javascript has modules, that's what you should write, logical modules. Obviously working in team with CVS may bring different constraints but for me it's bullshit. If a file needs to host 150 classes, I'm not going to separate all them because I'm cargo-culting java. So most of my libs are made of a single file, because the client code is going to import a single module.
Thats interesting, do you litterally call the dirs atoms and molecules? And does this come from a pattern or something?
I thought it was a pretty clever idea to run it through Babel for additional understanding of what's going on. Since this sets defaults at two different levels, it can take a moment to process at first glance. What would be really cool would be an "explanatory babel" (for educational purposes only) that takes more terse expressions and spits out verbose, commented code so you can learn what's happening.
 No. Just no. Nothing should ever be more complex than it needs to be. 
See the top comment. Organizing by type is not scalable. I recommend you consider organizing by feature. 
Depends on what I'm making. Angular: app/ services/ service/ service.ts service.spec.ts components/ feature/ feature.ts feature.spec.ts feature.(html|css|json|whatever) shared/ shared_feature/ shared_feature.ts shared_feature.spec.ts shared_feature.(html|css|json|whatever) directives/ directive/ directive.ts directive.spec.ts Vue.js: app/ components/ feature/ feature.vue shared/ shared_feature/ shared_feature.vue (Note: I dislike the lack of services in Vue.js. I will often use axios or es6 fetch in a separate library of utility functions, and append that to the Vue object as something like `$httpService`, but it's an annoying hack.) Vanilla: app/ lib/ vendor/ 3rd_party_library.js my_methods_library.js config/ config.js components/ feature/ feature.js shared/ shared_feature/ shared_feature.js It can vary a lot depending on the project, though. 
Oh sure, that‚Äôs good too. My biggest point is just grouping things by feature rather than having all of your reducers under reducers/, all your actions under actions/, etc
Oh oh, that's the "Classes are bad and you should feel bad for using them" guy. 
Because /src is the parent directory? Maybe it would make more sense if we added a back end resulting in something like /client /src /app /actions /animations /components /effects /guards /models /pipes /reducers /resolvers /routes /services /assets /environments /stories /config /middlewares /models /routes /services 
I went in being astonished he actually wrote out a spec, I know he has been a huge supporter of what works is what‚Äôs best. Glad to see this hold true. Thanks for sharing this. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [axios/axios/.../**README.md#cancellation** (master ‚Üí 75c8b3f)](https://github.com/axios/axios/blob/75c8b3f146aaa8a71f7dca0263686fb1799f8f31/README.md#cancellation) ---- 
Hah, wow I feel dumb now, I was thinking I'd have to modify the math. Thanks for fixing it :)
I'm a back-end developer so take this with a grain of salt but I use Vue sometimes and when I do: app/ components/ Popup.js Card.js index.js helpers.js 
That's awesome! Did you make it?
I write a single line of code per file and have a cronjob run every 30 seconds that uses a combination of Grunt and Makefiles to concatenate my code 
most of them make sense, bug I'm curious about sagas. What do you use that for?
If things are organised properly then you should know immediately which single folder you need to look in. The only tricky part can be guessing the name if there are for example hundreds of components.
I do this too if I have more than one type of test. If not, then a single test file suffices.
Are you asking about actual applications that are open-source, or purpose-built examples that are just bigger than a todo list? The [RealWorld](https://github.com/gothinkster/realworld) project is intended to be a bigger, better version of TodoMVC. It's a Medium clone with a variety of different client and backend implementations. Beyond that, I've got a list of [many interesting React+Redux apps](https://github.com/markerikson/redux-ecosystem-links/blob/master/apps-and-examples.md), which includes both purpose-built examples and "real" apps.
Great, why would you choose react over vue?
A simple rule to follow is that things can only use libs in their parent directory or at the same level. So I might do /utils.js /Widget /Widget/Widget.js /Widget/WidgetStore.js ect. You'd add layers as things get more complex. This leads to low coupling.
I don't clearly understand how indirect evals are used in practice but I know one example. Indirect eval is used in `import/export` shim by Rich Harris called [shimport](https://github.com/Rich-Harris/shimport/). Let's try to understand how it works: 1) In [load.ts](https://github.com/Rich-Harris/shimport/blob/master/src/load.ts) it `fetch`es the source, transforms it (because we want to transpile `import` and `export`) and then calls strange `alert` on it. 2) Inside his [rollup bundler](https://rollupjs.org) config [rollup.config.js] he does `code.replace('alert', '(0,eval)')` which replaces all `alert`s found in the source codes with [indirect evals](https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript/9107367). 3) My further understanding is not robust but here it goes: indirect eval allows execution of transpiled code in the global scope instead of the local scope (we don't need that `text` and `url` variables defined in `load.ts`).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Rich-Harris/shimport/.../**load.ts** (master ‚Üí 2ec3b59)](https://github.com/Rich-Harris/shimport/blob/2ec3b59606a163670f6bc7c73465bea6a5268372/src/load.ts) ---- 
Async state management
What if numerous components, pages, what have you need access to the same data store?
For react projects, I would check this post out https://medium.com/@alexmngn/how-to-better-organize-your-react-applications-2fd3ea1920f1
No, I found it on the internet :) [ ](http://lib.ivank.net/demos/real3D.html)[http://lib.ivank.net/?p=demos&amp;d=real3D](http://lib.ivank.net/?p=demos&amp;d=real3D)
Be ruthless with your pub/sub: only send the keys you need, and be meticulous in managing each view‚Äôs subscriptions. Paginate, paginate, paginate. If you‚Äôre using React for the UI, consider using the Context API to hold the user‚Äôs relevant profile data and serving it via a consumer, rather than querying for it for each view. I scale with GraphQL/Apollo, but I‚Äôve used Firebase, FeathersJS, and Loopback. Meteor‚Äôs main strength, IMO, is speed to prototype... to make it production-ready takes some work, and you give back some of that time when you go that route. You can always scale it by throwing hardware at it (load balancer, kubernetes, etc), but long-term you‚Äôre going to want to migrate to something else... mostly because its not the most efficient framework out there, but also because it‚Äôs hard to find experienced developers that are willing to use it for a mature product- you inevitably spend most of your time as a manager listening to why you should switch to framework x. 
My formatting was a little off, the siblings of src are /app /assets /environments /stories
I wrote a blog post a few months ago about how I like to organise Redux apps, you might find it interesting :) https://www.bhnywl.com/blog/organising-large-react-and-redux-apps
Omg, this is just amazing. 
Don't think "JS Files", think general structure such as a simple HTML website you would use /img /css /js folders right? As long as you separate content in an understandable way nobody cares. If you're hosting a node.js app, make sure you load sensitive configuration files in a way that your App loads to memory but the same files are not accessible from any user input, perhaps a function with some query parameters given from a client to the server that reads files from the server and you missed sanitizing the data.
The way angular handles it is with a 'shared' folder at the appropriate level
Hi /u/ribeirao, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I mostly do Ember work, so until the module unification work lands properly I use a mixture of Ember's tradtional structure and pod structure. Routes, Controllers &amp; Components in pod structure (think feature folders) and traditional for models, serializers, adapters, helpers etc. So for example, if we had a person route with a profile component ``` app/ pods/ person/ controller.js route.js template.hbs components/ profile/ component.js template.hbs adapters/ person.js serializers/ person.js models/ person.js tests/ ...test stuff here... ``` If I do something vanilla I use a similar structure
Thanks very much!! I have no idea what to expect right now, but I do believe the team is open to switching to new frameworks, but for now the product pretty much *is* in its first mature prototype mode, and the company is in "stealth mode". It doesn't seem the long term is in consideration right now though, as the company is most definitely a startup. My plan is to study React, then move to GraphQL as a natural next step. What would you recommend I plan to study after those two?
Made me laugh. Love it
Recently started work on a little text editor: http://www.breck-mckye.com/dead-simple-text/ Source is here: https://github.com/jbreckmckye/dead-simple-text
I know a lot of scrabble junkies who'd absolutely love this
For one thing, jobs. Go search Stack Overflow's jobs site for: https://stackoverflow.com/jobs?q=vue (298) https://stackoverflow.com/jobs?q=react (1,427) (Both versions of Angular, https://stackoverflow.com/jobs?q=angular, get 820 BTW.) Of course there are *lots* of excellent reasons to choose a less popular framework over the most popular. I'm just saying, if you need a reason to pick React, the fact that there are over 4x more job listings for it is a pretty good/obvious one.
62 likes 62 comments Reddit is in balance.
If you want a thorough analysis of direct vs indirect `eval` [this article](http://perfectionkills.com/global-eval-what-are-the-options/) is quite detailed -but old-. The difference is more or less what you said. So called _direct_ eval executes the code in the scope `eval` is being called. _Indirect_ eval executes in the **global** scope, not on _its own scope_. One particular form of doing code evaluation, which is through creating a new Function with your code inside, gets executed on the scope of that function. There are a couple of other ways. Now, having set this, the difference is _usually_ small and irrelevant, as you don't really want to use either except in _very few and specific situations_. So, in general, the first rule is... well, it's not "Don't use `eval`" but more like "You don't need `eval`". The second rule is, "Are you really sure you need `eval`?". You still probably don't need it, but say, just for the sake of the argument that you're in a situation where you do need to use it. Now, _how_ to do it? Well, the reason to choose one or the other is generally _trust_, a particular kind of trust, and need. Generally speaking, if you're going to eval something _you_ are building, to some extent, hopefully, you know what it is, and you _may_ want to use the current scope, if it's something that _needs_ access to it in some way, or a different scope, if you want to keep any separation at all. I'd say that unless you _intentionally_ want the evaluated code to access the current scope for known reasons, it's always preferable to run it in a different scope. Sometimes, most of the times, this means in a _controlled_ scope. As controlled as possible. And so, generally, you would opt for creating a function with some added code around the target. Maybe [something like this](https://blog.risingstack.com/writing-a-javascript-framework-sandboxed-code-evaluation/) (Note the first comment in that article, though: You don't do this for _security_ concerns. You will _not_ make a secure sandbox. Still you do it to prevent _accidental_ conflicts). Some other times, a very small few of them, you actually want to `eval` in the global scope, as in the link given by /u/ilyaigpetrov, because you are actually assembling a shotgun and you have to let users shoot themselves in the foot if they so desire. (In some of these cases, it seems reasonable to give the user such a footgun because they don't expect any sort of safety and generally assume the responsibility as theirs.)
Recently finished wrapping up something to try and keep track of ongoing spells/buffs/feats/equipment for my dnd games just in time for our weekly session! (I mean...the session wound up cancelled due to scheduling but still~) You can find it here (it uses local storage to save any changes you make) https://prinnybaal.github.io/ and the source is here: https://github.com/PrinnyBaal/PrinnyBaal.github.io You can make and label buffs/penalties by clicking the button that says 'open gem maker'. Very rarely I've found that sometimes the first time you load it up created gems don't automatically appear but I haven't had a chance to test it very much yet. Other than that I tried to make things *feel* as intuitive as possible so I'd like to know where I succeeded or failed. Also if anyone has any tips on reducing the load-time when using background images I feel I kinda dropped the ball there.
Good to hear. Have fun with it!
Spoiler: Outages. I've always thought it was tacky to use a free service for your paid product, and this is a very good reason why you shouldn't do it. There's no way that Google is going to make the free service as reliable as a paid service.
I break things apart by screen, then by component, Ducks, types, selectors, etc. But really I just move things around until it feels right.
Well I do not seek for a job, in fact I'm looking for real reasons. It's like saying whatsapp is better than telegram because more people use it or like JS is better than C++ because more devs use it. 
Reading comprehension isn't your strong suit, huh? &gt; Of course there are lots of excellent reasons to choose a less popular framework over the most popular. 
This looks really nice, how do you differentiate a page from a container. Do you keep only styles at pages level?
I just create a service and import it directly in a sfc or in vuex, doesn't seem too terrible. Does angular make a service globally available?
redid a project from Polymer to React to get a bit more familiar with the popular library! &amp;#x200B; Would love some feedback on my code! Repo: [https://github.com/avatar-kaleb/react-mental-model-dictionary](https://github.com/avatar-kaleb/react-mental-model-dictionary) Site: [https://react-mental-model-dictionary.firebaseapp.com/](https://react-mental-model-dictionary.firebaseapp.com/)
You have to pay for certain packages. Maybe I missed the bit where the author stated that they‚Äôre using the free tier, but I assume they‚Äôre paying for it with a 3+ year in production product.
Super-helpful is understanding database architecture. The structure of data in the database vs what‚Äôs easiest/fastest for the client to consume... When you‚Äôre ‚Äústarting up‚Äù, you don‚Äôt know what you don‚Äôt know- so as the app evolves you‚Äôll usually end up wanting to (for example) join two collections, which is not Mongo‚Äôs strong suit. You don‚Äôt need to be an expert, but being able to participate in the conversation- especially when you‚Äôre new- will allow you to understand the array of possible solutions, and why one option might be chosen over the other. This becomes especially helpful if/when you migrate to something like Postgres, where you can take advantage of both SQL and NoSql structures- learning which is right for a situation is important for the the long-term health and flexibility of an application.
We sort of follow this with a huge monolithic react spa. We keep view state (redux) within the feature folder, if persisted view state is needed. We treat the store as a database and all fetched data resides within a store/ folder at the root. Generally divded by one reducer for each endpoint. Since we have no choice but to treat our backend as an API (reasons). This works well for us and scales reasonably well. The store also remains very normalized. 
Since you didn't specify a framework and it seems no one is talking about vannila, I'll add my two cents - When I'm writing vannila I distinguish between modules and components, so: /modules (standalone, actions oriented stuff. usually ends with 'er' or 'or', ie scrapper.js, messagehandler.js etc.. /components (anything OO, usually a noun. Both renderable and non-renderable. form, notification, person etc..) Depending on the scope and type of the project I'd consider adding /views and /controllers (business logic) I know thats a bit unorthodox, but that's what works for me when I work alone. 
Yup. I learned this the hard way. Seemed like a good idea at the time, but then any time you want to work on a feature, you have to go digging through at least three different directory trees to find the files you need (reducer, actions, components, etc). It's a huge pain in the ass.
I would look into Apollo. It is very easy to integrate into meteor and will make a transition out of Meteor way easier if ever need to. I run a Meteor/Apollo stack myself and it's excellent. I would also just study up on Node stuff. Most of Meteor is just Node. The React as a frontend pairs well too.
Sort of. I really like the Angular way of doing services. If you want to access a service you've created from anywhere else in the application, you inject it. Let's say I have a service called DataService. I would make it available anywhere I want it like this: import { DataService } from '../../services/data.service'; export class MyComponent { constructor( public data: DataService ) { } // Do anything I want with 'this.service' here, and it will // propagate to any other component injecting it. ... } One of the benefits of this approach is that I'm not creating a global variable or a pseudo-global variable. I'm injecting DataService only where I need it, and nowhere else.
lol
Following on from my d3-x3d project show off last Saturday, I have now written a 4 part series of tutorials on Observable to show off the combination of D3 and X3DOM to create simple interactive 3D charts: https://beta.observablehq.com/collection/@jamesleesaunders/d3-x3d I am now wondering which 3D chart component I should write next. 
AWS has high availability with generous free tiers...
you sadist 
&amp;#x200B; --- Front index.html /img /icons /articles /css onefile.css /js dependencies.js -&gt; Merged app_utils.js -&gt; Functions + Config + prototypes app_dom.js -&gt; Build page app.js -&gt; Logic app_events.js -&gt; Dom events ---- Server /protected /configs /databases /adminpage /www Front /api /auth /public /data &amp;#x200B;
What if I'm the one in charge of the dev team and can choose any of them?
I can‚Äôt imagine the author is using the free tier of firebase.
Some people come to Reddit to have interesting discussions with other Redditors about a particular topic. By necessity, this involves reading and understand the posts others make. Other people just come here looking for a fight, and will take any series of words in another person's post that they can find as an excuse to try and start one. Guess which type you are?
Idk, im just asking real reasons to pick one or another if you are in charge of a dev team and you come here fighting because i dissagree with the popular idea? Lul I can guess your type lmao
Do not, I repeat, DO NOT put any logic in the index.js file. I went this way, decided that if I had a component named, say, `Navbar`, it would be smart to create a folder named that and then put the actual component in an index.js file, so that I could `import Navbar from 'app/components/Navbar`. Trust me it is not a good idea, because you end up with bazillion index.js files that are hard to search and navigate. The nicer imports are not worth it - or rather it's worth the extra hassle to put an API in the index.js. Name your files appropriately, kids.
I've just had my eyes opened!
That space hurts ! await Promise.all¬∑([ ^ --- lordy
what‚Äôs this ‚Äúorganize‚Äù you are talking about? ^/s
I think you‚Äôll be looking for a custom browser add-on. This involves a page script that gets injected into every page in which you need to paste text, and a background script to listen for the key press then message that text to the page script to be filled in to the box. It requires a decent amount of know how because modern browsers have a lot of security measures to protect users from malicious page scripts.
Yep, very similar idea. I usually divide my services up into one for managing interactions with the server and one for managing application state. The server interaction service will only be injected in components that will need it, and the state management service will be injected everywhere except static components that don't need to monitor anything in the state object. Side note: I don't like to use any 3rd-party state management with Angular. I recognize the need for things like Redux with React, but Angular's services are going to be sufficient for all but the most extremely complicated applications, and save you a lot of trouble writing boilerplate.
[removed]
[removed]
[removed]
I do something similar by following this: https://dev.to/nullvoxpopuli/a-general-and-flexible-file-structure-that-works-for-all-projects-in-any-ecosystem-1lp9
[removed]
Colocation for the win! https://dev.to/nullvoxpopuli/a-general-and-flexible-file-structure-that-works-for-all-projects-in-any-ecosystem-1lp9
[removed]
[removed]
[removed]
How do you teach others for consistency? I've been doing this: https://dev.to/nullvoxpopuli/a-general-and-flexible-file-structure-that-works-for-all-projects-in-any-ecosystem-1lp9
&gt; Some people come to Reddit to have interesting discussions with other Redditors about a particular topic. By necessity, this **involves reading and understand the posts others make**.
[removed]
[removed]
I was totally messing with you man - thanks for showing this - I was only teasing you since everyone else kept commenting how 'limited' it was &amp;#x200B; cheers mate
Want a headache? Read the code for [this](https://www.dwitter.net/d/5600).
This has more upvotes than the post
&gt; move files around until it feels right this is not a joke
With typescript, no libraries/frameworks, I normally have one or two classes per .ts file, all in the same folder, which I compile to a single .js file per project.
And then just typing ctrl-v. Remove if (document.activeElement) return to have it always focus on the empty textarea
It says user script invalid, I am using tampermonkey BTW. 
If it does not work, try replacing 'teaxtarea' with 'input'.
I put all of them in the trash bin.
Lol
Lol, kidding. I love JavaScript
A lot of good ideas in here, but one thing that had a huge impact for my team was putting the unit test files in the same directory as the code, e.g. `components/foo.js` and `components/foo-test.js`. This had many benefits: - When editing a file, you usually want to open its tests too. They're both right there next to each other. Nifty! - It becomes obvious which files are not tested - When reviewing pull requests, which usually sorts files by path, the tests and the code are right next to each other This resulted in my team writing many more tests, more than twice as many as the next highest team. Our code coverage was regularly above 90%. 10/10 would recommend.
I made a personalised RSS feed of Songkick events coming to my area. It includes my tracked musicians, as well as 50 recommended musicians for each one I track. I'm already seeing interesting gigs I would have never known about otherwise! The feed queries the Songkick API and runs every night in Apify. [Source code on GitHub](https://github.com/mshafer/songkick-apify) [Blog post with more details](https://www.mozzafiller.com/posts/personalised-concert-recommendations-using-songkick-and-apify-actors)
Hi /u/judith111997, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This works once you have an intuition of what feels right
Sorry, failed to show assets, env, and stories are under src as well
thanks I hate it
I've done a lot of Node, and yeah, Meteor seems very very easy to work with given my background. I worked on two Node projects, one was a pop-up store game that used Sockets.io on two machines built into a booth, and the other was a campaign website but that was really just a lot of basic frontend.
Oh yeah, I am familiar with SQL based solutions, understand joins and ways to link different SQL tables, but I ended up working with MongoDB and JSON docs more. Covering SQL vs. NoSQL was one of the things we did in my bootcamp. Pretty sure that MongoDB makes more sense for the application, which requires a lot of unique data points (some which are applicable, and some which are not), and even some 3d modelling, for each user, and that's probably why the original developers chose Meteor.
Googler here. I'll pass this along.
This is really where building your own bundles with npm is actually a pretty good idea. Having your pipeline run "npm outdated" will make it very obvious when your own code needs to be updated. And you can always be sure then that, when you do, you've tested for breaking changes first. You can still push your bundle to a CDN if you want the performance.
&gt; Firebase was easy to integrate, the documentation was clear, and the pricing was reasonable. We had it up and running in a commit or two. From the first paragraph I believe he isn't using the free tier.
I choked on my cereal while reading this
Id vouch for Prisma. We use it in production with great success 
Great idea! 
Phenomenal 
I can‚Äôt play it on my phone. I think if you make it mobile-first, then it should be more successful!
Here's a userscript that scrolls to an empty text box and focuses it each time you press the F2 key: https://gist.github.com/valacar/aaff7d287fbd0542a28c0695c7be4aec Also, jsfiddle link I used for testing: https://jsfiddle.net/v9jLnbu8/ You'll have to press Ctrl-v yourself to paste...I don't think javascript lets you do that, although I could be wrong.
This seems like a low-effort question. What research have you done about React and Vue? Does the one you're more familiar with have any particular downsides you'd like to see contrasted with the other one? Getting a good answer is kind of a give and take in my opinion.
You... think they were using the free tier? lol
It deserves it
Hey man sorry to bother you, I PM'ed you, but It doesnt seem to work, Below I have copied and pasted the entire javascript code of the text entry box of the page I work on, Hope this can help you figure out why its not working. &lt;input type="text" class="form-control answer-input" name="answer-2-ac2e717fb10a8a9f66d96dcffb4ae113cadbf231" id="answer-2-ac2e717fb10a8a9f66d96dcffb4ae113cadbf231" required=""&gt; 
Okay, so you want input boxes too? Find the line that has `querySelectorAll("textarea")` in it and change it to `querySelectorAll("textarea,input")` BTW, I did get your private messages.
This is very similar to [Haml][1] and [Pug][2]; lots of template languages do this already. I kind of like the syntax, though. /r/ProgrammingLanguages might be a better sub for this. [1]: http://haml.info/ [2]: https://github.com/pugjs/pug
In a big pile in the corner 
Quick mine: [https://www.dwitter.net/d/10421](https://www.dwitter.net/d/10421)
No prob.
Also this lib transforms your code at runtime using XMLHttpRequest. So it's much more inefficient and slow compared to Pug. And it's likely to have some bugs due to [the way it's transformed](https://github.com/ntrupin/LineScript/blob/2119e56df92a93dcab6ae4005b101145199960c1/src/gate.js).
This man is a genius. 
Looks like it's doing a search algorithm. Cant remember the name though.
You're welcome!!
consider lazy loading modules. Takes too much time for initial load
Yes yes correct, I hope to learn some HTML too üòÑ
Thanks. what kind of apps have you written with C ;)
the human uglifier
While the syntax is neat; I think the example in the readme is disingenuous. In the example HTML there is embedded CSS, then in the example LineScript it looks **much** cleaner because the CSS was moved to a seperate file. There's no reason HTML could not have had that benefit too. In fact I'd just remove the CSS completely from the example. It adds nothing to those reading. Just leave in the link to a stylesheet to show people what the syntax differences are when including CSS files, which is a common workflow for any front-end developers.
I think it is because the code is not optimised, there is no minification as well. May be free hosting on Heroku is also a reason :) 
Thanks a lot. I did create a Unity version of this for Android. [https://play.google.com/store/apps/details?id=com.myCompany.tetris](https://play.google.com/store/apps/details?id=com.myCompany.tetris)
Thanks a lot :)
Yes, but I followed a lot of tutorial on making classic Tetris in native JS.
Perfection
Since you can travel through walls, you should have the snake get smaller for every direction click towards the dot, losing a section of snake for every click. You should make every click towards the dot increase the amount of section lost with the fibonacci sequence, giving you a loss if you reach original size.
The Bubble Sort Visualization is what you meant. Jus watched a video about it haha: https://youtu.be/67k3I2GxTH8
:( doesn‚Äôt work on mobile 
Just what I wanted, thanks!
So far I have been extremely happy with it! Just released my latest product over firebase: https://scarymaze.io, doing like 3k users a day. Maybe for more mature products it makes sense to switch, but so far the simplicity, scalability and feature richness makes this the to goto product for me.
Thanks!
Your probably right when it comes to actually clicking stuff but dynamically fecthing resources could be useful like the readme says.
&gt; i dislike jsx and even more the css in js JSX is popular because of its convenience. CSS in JS is popular to, although to a lesser extent. But it's worth pointing out that **neither are required to use React**. You can use plain JavaScript `createElement()` calls and traditional CSS (in a separate file) if you prefer. &gt; Vue have an easy api and pure css and html. I don't think Vue uses "pure HTML" really. Vue templates are _valid_ HTML, in that they can be parsed by a browser, but they still require some compilation/processing to work. (e.g. so that `&lt;div&gt;Hi {{ name }}&lt;/div&gt;` becomes `&lt;div&gt;Hi Brian&lt;/div&gt;`).
Yes!! That's true, but having valid browser makes it easy to learn right? I will need to dig more on react tho. Just some initial thoughts. Do you recommend nextjs?
It would be interesting to have some more advanced detection, like "if user began slowing down just before entering, reduce the time required" or even "If user is within N milliseconds at current speed and has been consistently slowing down and moving towards the item for M milliseconds, trigger the event even though they haven't even entered" Overshoots could also be a way to detect. If you make a 180 nearby, such that you approach the item from the other side, you might conclude it was an overshoot
There's a good chance there will be some, but it was built primarily for dynamically prefetching and prerendering assets, so definitely not 100%.
Maybe, although again‚Äî you can use React without any transform steps if you'd prefer. JSX is just syntactic sugar that's compiled to vanilla JavaScript `createElement` function calls. Next has a good reputation for making server side rendering easy. I use now.sh for a lot of my static hosting (where I don't need or care about SSR). Gatsby would also be a solid choice.
What editor do you use? I've had 0 problems
Isn't Gatsby for pure static stuff like documentation and stuff? I see Gatsby as a replacement for vuepress and next.js as a replacement to Nuxt.js
Impressive
My book ‚Äú[JavaScript for impatient programmers](http://exploringjs.com/impatient-js/)‚Äù comes with exercises; you can read/try half of it for free.
I really loved this one, thank you so much bro. I appreciate you. If there are some for C#, I would love to download üòÅüëç
Oh no 
Yeah, you could do the rotation with a linear transformation matrix, too. Sin / Cos of 90 degrees would be 1 / 0, so you would get Y = 0\*Y + 1\*Z, Z = 1\*Y + 0\*Z :)
This is exactly the usecase. I already trigger a under the hood navigation asset downloading when you mouseover links.
Why? What's wrong with not having any structure for your files as a beginner? Just slam them in the `src` folder and move to more important things. When you want to find a component, editor tools will help (fuzzy finders, Go To Definition, etc) And if gets too messy, it's fairly easy to move things around, particularly if you have an editor capable of updating import paths automagically.
How do you plan to teach?
I think it is better to use Skype and any online editor
Thanks!
Am ready to teach anyone whenever I am free. I think we can use Skype and any online editor to start with.
Ok, thank you for the recommendation.
That username tho
atoms, molecules, organisms... that sounds familiar. are you a designer?
Beginners usually struggle with either understanding with what‚Äôs messy. Or what to do about it. Intuition comes when you already understand the problem. And that takes experience. I would say that this tip doesn‚Äôt help beginners. But it can certainly help a tad more experienced developers from getting stuck early on.
We're using firebase for the project I'm currently working on, but we're not in production yet. Can anyone else confirm the outages issues? I've never experienced them while developing so far in the past year.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [LiskHQ/lisk/.../**db** (development ‚Üí 662965e)](https://github.com/LiskHQ/lisk/tree/662965e0a78ad9937abd9c14d73318527bcd9833/db) ---- 
The index.js does nothing more than import then immediately export the feature - it makes imports in other files easier so you don‚Äôt have to ‚Äòimport ‚Äú./feature/feature.js‚Äù‚Äô, you can instead just ‚Äòimport ‚Äú./feature‚Äù. Depending on the feature it‚Äôs a little more complex, sometimes exporting the model as well as the controller and routes, or some feature-specific constants.
'Sass Lint' extension for VS Code
Love the simplicity! Well done.
I'm using visual studio code too with the css sass plugins :)
IMHO you should lint sass / css as part of your CI builds and ‚Äútests‚Äù. I use stylelint for this 
Stylelint works well for me. 
Good idea. I didn't know there was a paste event.
Hey, Sorry. I'm on an app, I guess I missed the wiki. After taking a look at the rules the app brought me to I still wasn't clear if this was an appropriate place. Now I know. Thanks for doing the hard part of Reddit for the rest of us :-)
That's what I'm working on friend! And exactly why I'm asking :-)
Nobody is going to use it for that though :P
Nope. But designers sure do appreciate the approach :)
I was looking for a library to "emulate" a very basic terminal in browser for one of my projects. Something very simple and lightweight. Ended up writing it myself in a night, pure JS, 160 lines of code. [Source](https://github.com/mkrl/plainterm.js) | [Demo](http://mkrl.xyz/plainterm)
i know, i worked with several designers already and they always like to compose pages by breaking the elements down. it kinda grew on me too as a developer.
Thanks. \`send\` is getting called after \`onload\`.
&gt; I drank some boiling water... because I wanted to whistle. ‚Äì Mitch Hedberg [Source: Mitch All Together](http://pureeditor.tumblr.com)
That crab can't even copy-paste whole wesbros video (he had 15 or so 'tricks')
the list items need some way to show that they are clickable, be it cursor:pointer or text-color. 
I prefer dash for this. https://kapeli.com/dash Lets you keep code snippets too and it has plugins for almost every IDE. So you can put your cursor over some code, hit the shortcut and it'll open the docs for that method in Dash.
allowing random snippets of JS to run, what could go wrong
&gt; for your Mac Well, that's to bad.. looks cool though.
Stop using `this`
Also isn't it only free for a trial 
Some minor issues with the writing (strange wording, wrong spelling but right sound for words), but overall this is a good introductory article. Really like the fact that you bothered to include non-capturing groups and lookahead assertions as I've been playing with regex for years and just finally learned about these a few months ago, lol.
404 Not Found :(
When the trial expires it still works, they just add a random 5 second delay to loading the doc, which ain't so bad because it's only the first time each day IIRC.
Airbnb usually has sane defaults to build from 
Maybe with a logical explanation. Giving pros and cons why should or shouldn‚Äôt. This is just retarded yelling stop using ‚Äúthis‚Äù
People have been saying it for a while. It's a poorly named variable that sometimes refers to one thing while other times refers to another thing. There is no actual value in it. If you want to use a variable then pass it in as an argument in your function.
Java is not the same programming language as JavaScript. Please refer to /r/java.
[Velocity](https://velocity.silverlakesoftware.com/) is a Windows equivalent that doesn't have that *"Linux-first FOSS feel"* that Zeal does. Its setup and experience felt a bit more polished back when I compared the two on Windows.
It's pure. Passing references doesn't have anything to do with purity, any data type or object is OK to pass as an argument. As long as the function uses only information from the arguments it is passed, and does not modify them, it's pure.
Provided the same input, that function would be pure. If a data structure mutates you then don't have the same input anymore. 
Pretty cool op, u should add event.preventDefault() in your keydown function. Thatll stop the page from scrolling when u use arrow keys.
I don't understand how Dash can offer a paid version of the app. All of the content in the app is scraped off of other websites.
I deal with regex quite a bit, since I'm a freelancer who specializes in writing web scrapers and browser extensions *(which inevitably end up scraping pages their content scripts operate on)*. Anyway, I skimmed your article to check out what you decided to share. There are three key higher-level inquiries you should make: - *"When"* you should use regular expressions, - *"Why"* you should use regular expressions, and, - *"When"* you should **not** use regular expressions. Except under special circumstances *(i.e., taking advantage of a library method that requires a regular expression as an argument)*, anything that can be accomplished with a regex can be accomplished without a regex. There are times when using a regular expression can simplify things, and times when trying to forcibly use a regex can make things significantly more complicated than necessary. I'd make mention of this and provide examples relevant to the reader's assumed experience level at the beginning of the article, the end, or both.
I did some golf! `a="zero0one0two0three0four0five0six0seven0eight0nine0ten0eleven0twelve0thir0four0fif0six0seven0eigh0nine".split(0);b="twen0thir0for0fif0six0seven0eigh0nine".split(0);t=n=&gt;n&lt;20?a[n]+(n&lt;13?'':"teen"):(n&lt;99?b[~~(n/10)-2]+(n%10?"ty-"+a[n%10]:"ty"):(n&lt;999?a[~~(n/99)]+" hundred"+(n%100&lt;1?"":" and "+t(n%100)):'one thousand'));arguments.forEach(h=&gt;print(t(h)))`
His example at 6:05 doesn't work for me on Node but does in the browser: [https://jsfiddle.net/am6e1x0L/](https://jsfiddle.net/am6e1x0L/) &amp;#x200B; `var myObject = {` `myFunction: function() {` `console.log(\`this === myObject: ${this === myObject}\`);` `console.log(\`this === global: ${this === global}\`);` `setTimeout(function() {` `console.log(\`setTimeout this === myObject: ${this === myObject}\`);` `console.log(\`setTimeout this === global: ${this === global}\`);` `console.log(this);` `}, 0);` `}` `};` `myObject.myFunction();` Produces the following. When I print this it prints a Timeout object: node --version v8.11.4 $ node this.js `this === myObject: true` `this === global: false` `setTimeout this === myObject: false` `setTimeout this === global: false` `Timeout {` `_called: true,` `_idleTimeout: 1,` `_idlePrev: null,` `_idleNext: null,` `_idleStart: 57,` `_onTimeout: [Function],` `_timerArgs: undefined,` `_repeat: null,` `_destroyed: false,` `[Symbol(asyncId)]: 8,` `[Symbol(triggerAsyncId)]: 1 }` &amp;#x200B;
I am very glad that you enjoy it. Cheers ! üëè 
Write a program that consists of the following classes: Fleet, Ship, and Leader as well as a driver class. All classes should have getters and setters for all their attributes. **Fleet** name (e. g. First Fleet, Reserve Fleet, etc) Commander (an object of the Leader class) shiplist (an ArrayList that lists the ships in the fleet) contains objects of the Ship class. A constructor, which takes the name of the fleet and a Leader object as parameters and assigns them to the respective variables. An addShip method that adds a ship to the fleet (takes a Ship object as parameter) The toString() method, which returns the name of the fleet, the name and rank of its commander, and lists all ships. All that in a single string over multiple lines. Remember to use \\n for every time something goes into the next line. **Ship** name (make one up or use a historical or fictional one) type (e.g. cruiser, destroyer, frigate, corvette, dreadnought, etc) currentStrength a value less &lt;=100 A repair method: If this method is called, the currentStrength of this ship is set to 100. If currentStrength is already 100, a message is displayed: This ship is currently at full strength. **Leader** name rank (Commodore, Rear Admiral, Vice Admiral, Admial, Fleet Admiral, Grand Admiral) xp a value between 0-100 that reflects the leader's level of experience A promote method: When this method is called, if a leader has at least 100 XP, the leader is promoted to the next rank and xp is reset to 0, an error message is displayed if xp&lt;100, or if the leader has already reached the highest rank. A **driver class** that creates eight ships, two leaders and two fleets. The leaders are added to their respective fleets in the Fleet constructor, the ships are added using the add ship method. At least one leader should be promoted and at least one ship should be repaired by calling their respective methods. Calling the toString of a fleet object should produce output similar to the following example: *Defense Fleet* *led by Vice Admiral Kent Waite* *Ships:* *Unpredictable, Frigate, 78/100* *Popeye, Frigate,93/100* *Numskull, Destroyer, 80/100* *Underdog, Destroyer, 67/100* *Insufferable, Cruiser, 98/100* Calling the promote method of one of the leaders should produce output similar to the following example: *Commodore Helen Fry has been promoted to the rank of Rear Admiral* Calling the repair method of one of the ships should produce output similar to the following example: *Destroyer Underdog has been repaired to full strength.*
java is not javascript. if you want java advice ask on /r/java...
Sorry i ment Javascript.
I actually had a question. I have no idea if I'm doing this correctly. This is what I have so far. I have no idea where to go from here. &amp;#x200B; **public** **class** Fleet { **private** String name, commander, shiplist; **public** Fleet(String name, String commander, String shiplist) { **this**.name = name; **this**.commander = commander; **this**.shiplist = shiplist; } **public** **void** setName(String name) { **this**.name = name; } **public** **void** setCommander(String commander) { **this**.commander = commander; } **public** **void** setShiplist(String shiplist) { **this**.shiplist = shiplist; } **public** String name() { **return** name; } **public** String commander() { **return** commander; } **public** String shiplist() { **return** shiplist; } **public** String toString() { **return** name + ", " + commander + ", " + shiplist + "."; }
what are exploits
other utilities work by pinging every ip in the subnet.. no reason you couldn't implement the same thing in node... ``` const dLoop = require('delayed-loop'); const exec = require('child_process').exec; const ip_range = []; for(let i=0; i&lt;255; i++) ip_range.push('192.168.0.'+i); var found_ips = []; dLoop(ip_range, (ip, idx, done)=&gt;{ console.log(`Looking for ${ip}...`); exec("ping -c 1 "+ip, (error, stdout, stderr)=&gt;{ if(!~stdout.indexOf("Destination Host Unreachable")){ found_ips.push(ip); console.log("\tFound!"); }else{ console.log("\tNope...!"); } done(); }); }).then(()=&gt;{ console.log("Found "+found_ips.length+" devices."); console.log(found_ips); }); ``` Just wrote that as proof of concept.. little slow but it works.. used [this](https://www.npmjs.com/package/delayed-loop) as a helper.. 
in general you want to run the code and see what errors come up in the console as a first step. javascript doens't have public/private methods. everything in scope is public. the constructor is called `constructor()` rather than the name of the class. javascritp doesn't have type hinting either. 
Is it only my phone or the scrolling in that website is kinda weird?
Not quite. :) You don't want to be doing something like prefetching resources whenever a user just passes over a link. You potentially be downloading a whole lotta stuff you're just not gonna need. This is for hover interactions that carry a little more intention. 
Tip: learn Python instead
My intent of writing was to explain how one can create a regex and use it. But I really like your idea of High-Level inquires before jumping into regex. I think that can go as a separate post which talks about various scenarios where regex can simplify things or complicate them.
I bought Velocity, really wish i didn't. Its feels like an incomplete version of Dash. 
I suggest putting what you've tried on Code Sandbox and providing a link along with a description of what isn't working the way you would expect. This way people can see what you've done and it looks less like you're asking for someone to do your homework for you. üòä
I guess, but that comparison between Velocity and Dash doesn't really make much sense, given that Dash is not a viable option on Windows *(whereas Zeal is)*.
I've found that my understanding of regular expressions is much better than before after taking my finite automata class. Though the syntax is somewhat different from language to language, but deciphering whether this expression can be translated to an NFA to be quite useful. On a separate note, I think an understanding of anchors and subgroups is incredibly useful when making a powerful regular expression
http://eloquentjavascript.net is a great place to get started in
1. If non-exported means inside a module, then it's not global. Regardless, what you're describing sounds fine. 2. You can't reference DOM elements inside a script in &lt;head&gt;, since the DOM hasn't been rendered yet. You can either register and even listener for when it's done loading, or put the script tag at the end of &lt;body&gt;. 
I did not mean to make the small issues seem bigger than they are -- I'm sorry. You are doing excellent in your learning, and it was a good article. I hope to read/see more from you in the future :)
I honestly started with [codecademy](https://www.codecademy.com/). I always recommend starting with a project in mind because you will pick up skills as you go. Plus on codecademy you will learn other skills like HTML and CSS with projects that they will have you do on the way. After codecademy I reccomend [freecodecamp.org](https://www.freecodecamp.org/) (you can do them both).
Hi. `let pile1 = 3;` `let pile2 = 3;` `let pile3 = 3;` &amp;#x200B; `let piles = [pile1,pile2,pile3];` `piles = [pile1-1, ...piles.slice(1)];` &amp;#x200B; `console.log(piles);`
JavaScript is pass by value unless its an object. so it won't wont update. you could just reference the actual value at the index \`piles\[0\] -= 1\`
1. Correct. 
what tips did you get from your friend?
The snippets feature alone it‚Äôs worth for me.
is there a live instance?
Yes! [app.gnar.ca](https://app.gnar.ca)
1) He is on linux and I you won't need to install that for this to work. 2) you will need to install python [python.org](https://www.python.org/downloads/release/python-370/) has instructions. 3) you will need to install a framework called [flask](http://flask.pocoo.org/) 4) he launches the python app first (that first command line window) and then chromium (a open source version of chrome) with very import options turn on (He turns off some web security settings) 5) he has the extension that he loaded on to chrome (its done manually through developer settings) 6) then his app works. &amp;#x200B; This seems advance for you tbh, but hey you got to learn somehow. PM if you need help. 
This one is exactly what I was looking for. Thank you so much bro. If there are some for c# I would love to download it. 
Why is there a question mark in your title?
The iterator protocol includes another method next to next and throw: return. This can be used to clean up any state of the generator. An example would be to close a file handle when Noone is interested anymore. All built-ins call this return method on exit. If you really need to keep state, you need to get the iterator instance and iterate by yourself. 
money, online presence, and idk, attention?
Neovim
Thanks! Much appreciated. GitLab has far more features - for example, I use its CI in most of Project Gnar's repos.
Played with it a bit more and added flat (lambert?) shading as well as a random color palette, and some controls just for fun. The shading isn't very good and only looks half decent because the light vector is slowly spinning around with the model. Also, the code really needs bug fixing and refactoring too, but whatever, I had a lot of fun playing with it :) Thanks for posting your original code! https://jsfiddle.net/o42mptx3/
Missing "wtf" at the end
I like it.
Wow, maybe we should stop it, before we end up making Counter Strike :D
Really what I am trying to get at here is to see if I should be sharing scripts like this on Github? It doesn't follow the best practice (people should use the API) . What value would it provide to others?
I definitely think that he's programming Java, not javascript 
Java and javascript are two totally different programming languages. This sub is about java_script_ but your question seems to indicate that you're programming java. 
Who cares? Your code, your repo so you do you my dude. Do you get anxiety about publishing stuff?
Thank you very much for the advise! 
BTW. I think this looks more realistic: [https://jsfiddle.net/o42mptx3/1/](https://jsfiddle.net/o42mptx3/1/) I use just the "middle" color from your palette and mix it with black, according to "dotproduct".
Mistakes prove that you are trying. Potential employers might judge these, but to me they also show that you are eager to learn new stuff.
Have been in the same boat. The sooner you start putting yourself out there the easier it will get. You could always delete repos you dont like at time of putting it in your portfolio. Also having a long publishing history can be seen as a good thing. üôÇ
I've never noticed, but I'd prefer a background-color though.
useful indeed!
1) This is InfernoJS and not the professional Inferno of Plan9 fame. 2) Going by the linked page, you would never be able to figure out what the hell this is but that's typical of github pages.
Why would someone think this was related to an operating system when it's been posted in /r/javascript? The project has a website at [https://infernojs.org/](https://infernojs.org/) if others would like to know what the project is about.
Yes, same ref but different value so different input
Any employer that decides you're not a good hire because of stuff you *added* to your GitHub is an employer not worth working for. Just spam your GitHub my dude. Create pull requests, discuss features on other libraries, and upload your own code. An active GitHub is far more valuable than an empty one.
Old but gold.
Made some updates to my game / game engine https://imgur.com/gallery/neOwxen
Tip for the future: don‚Äôt assume that people know what ‚ÄúInferno‚Äù is ‚Äì briefly describe it in the post title.
I'm agreeing with the "this is how to do it". I'm pointing out that for this to work _effectively_, you need intuition and experience. Otherwise you end up with the hot mess of garbage that I saw all the time with student's work, applicant code, or you get the cookie-cutter splits of "sort by type not by relevance" which ends up being _very_ useless.
public class EarthquakeTester { public static void main(String[] args) { //test 1 - Most fall and are destroyed Earthquake e1 = new Earthquake(10.0); System.out.println(e1.getDescription()); //test 2 - Many destroyed completely Earthquake e2 = new Earthquake(7.0); System.out.println(e2.getDescription()); //test 3 - Damage to poor construction Earthquake e3 = new Earthquake(4.5); System.out.println(e3.getDescription()); //test 4 - Not felt by people Earthquake e4 = new Earthquake(0.0); System.out.println(e4.getDescription()); //test 5 - Not felt by people Earthquake e5 = new Earthquake(2.5); System.out.println(e5.getDescription()); //test 6 - Invalid Magnitude Earthquake e6 = new Earthquake(-5.5); System.out.println(e6.getDescription()); //test 7 - Invalid Magnitude Earthquake e7 = new Earthquake(15.2); System.out.println(e7.getDescription()); } } That‚Äôs the earthquake tester 
//import Scanner class import java.util.Scanner; public class ScannerTest { public static void main(String[] args) { //create a scanner named s1 (scanner is an object!) Scanner s1 = new Scanner(System.in); //Prompt the user for input (so they know what the scanner is asking for) System.out.println("How old are you?"); //reads the first integer typed into the console and stores it in variable age //the program pauses until something is entered (no more code will execute until an age is entered) int age = s1.nextInt(); //verification System.out.println("You are " + age + " years old!"); //create a second scanner to read a string //Reading more than 1 variable type from the same scanner can cause weird issues Scanner s2 = new Scanner(System.in); System.out.println("What is your name?"); String name = s2.nextLine(); //nextLine() method gets a string System.out.println("Hello " + name); //it is good practice to close a scanner object when you are done with it s1.close(); s2.close(); } } Here‚Äôs the scanner
And why would anyone post about the OS in /r/javascript ?
When you're asking for help, you should at least post what you have tried so far so that people can give you pointers. Asking people to do your homework for you won't help you.
I don't editorialize titles. It's good Reddit etiquette.
It looks a lot like you're trying to cheat. üôÑ Also Java isn't JavaScript.
Can you pls suggest a project that would be suitable for trying both out?
That's for when posting articles, or news. If you're just linking to some GitHub repository, it's not such a bad idea.
Given that you already have determined a certain sample, it might be interesting to compare it to requirements for a. linting, and b. testing.
If it's still doesn't work, it means that it fails to connect to the server (HTTP status code would be `0` in this case). Possible cause is that the URL is invalid (e.g. invalid URL protocol), or it's blocked by a browser addon. Use the `onerror` handler so that you know whether a request has failed.
Haha, right? :) Really though, I think it's getting really close to the maximum of what I'm capable of doing, so this is about as far as I care to take it. I might add polygon sorting and refactor a bit though.
Yeah, that looks much better. Looks like it adds more contrast so you can actually see the difference between the light and shadow color. 
`Array.prototype.isPrototypeOf(animals)` ....wtf? You can save like 100 characters and make your code like 100x more concise by using ` `Array.isArray(animals)`..
I was like you once. Now my github profile is a post-apocalyptic wasteland of half complete projects with no descriptions or Readme's :(
No, to show the bug that -7 is greater than -6 to -1.
Sorting of numbers exist. `var months = ['March', 'Jan', 'Feb', 'Dec'];` `months.sort();` `console.log(months);` `// expected output: Array ["Dec", "Feb", "Jan", "March"]` &amp;#x200B; `var array1 = [1, 30, 4, 21];` `array1.sort();` `console.log(array1);` `// expected output: Array [1, 21, 30, 4]`
the docs are very clear about any non string in the array being converted to a string. it is not a bug that -7 is greater than -6 because "-7" **is** greater than "-6". not to mention the optional sort function you can pass to it that effectively lets you sort an array of anything.
Well, it's messed up my code so it should be fixed.
Thank you! 
I know about the Unicode thing now but tell that to /u/sangupta637
cool beans. what about firefox? 
return v % 3 === 0 is the same as let x = v % 3 === 0 return x is the same as let x = v % 3 return x === 0
Let's change it up a bit: var returnValue = v%3 === 0; return returnValue; Does it make sense now? That's completely equivalent to the original, but takes less space (and may use a bit less memory, CPU usage and time, but I'm not sure on that). As for the second question, it's making use of the ternary operator: var example1 = a ? b : c; var example2 if(a){ example2=b; } else { example2=c; } Again, both are equivalent.
% is the modulo operator. v % 3 === 0 is a strict equality comparison to see if v is integer divisible by 3
To your first question, the return statement will return a boolean value (i.e. true or false) based on the result of v modulo 3. Basically, it‚Äôs checking if v is divisible by 3 (modulo (%) operator returns the remainder when the value on the left is divided by the value on the right). So if there is no remainder, it returns true, else false. As for reduce, it iterates through an array to come up with a single value - could be the maximum value, could be the sum of all elements, etc. In this case, it‚Äôs iterating through a list of pilots to find the most experienced one of the bunch. The function compares the current most experienced pilot (oldest) with the next pilot in the array. If the current oldest pilot has more experience (years) than the next pilot, it is passed to the next iteration. If the pilot has more years than the current oldest, it is saved as oldest and the operation continues until you‚Äôve looked through the whole array. The empty object passed as the second argument just defines a starting point to compare the first pilot to. Whoever wrote this could have passed the first pilot as that second argument and it would work out the same. You could also write something like this: var mostExpPilot = pilots[0]; pilots.forEach(function(pilot) { if (pilot.years &gt; mostExpPilot.years) { mostExpPilot = pilot; } } console.log(mostExpPilot); 
That's not a bug, because it's not saying -7 &lt; -6. It's saying '-7' &gt; '-6', which is true. They get converted to strings.
Hi /u/SpaceboyRoss, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/answiz_official, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Tell that to the guy who made the original post.
Hi /u/SilentIphone, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Thank you for your pointer. Yes, that is true. I probably should have constructed a better hypothetical. I'm thinking of a page that's fairly static but has a few different event handlers on a button, but I generally tend to use classes over ids for some reason.
very cool shit.. but why is the article dated 8/29, it's only 8/15...
there's a node app for droid which has a console emulator. 
Here is an app that may help you [https://play.google.com/store/search?q=js%20run&amp;c=apps&amp;hl=es](https://play.google.com/store/search?q=js%20run&amp;c=apps&amp;hl=es)
It is used to show that arrays inherit from *Array.prototype*
&gt; Like recursion, closures can be over explained in a way that makes them sound complex, but at their core they couldn‚Äôt be simpler. well said, until you go on to write a whole article about it. All functions in JS are closures because the variables created inside them cannot be accessed outside them. You wrote a closure in 6 lines, I'll do it in 1.. `()=&gt;{ var a=0; }` viola we have a closure..
shoot I'll update my post (I'm ios)
Three things I might care about one day.
I don't think it's necessarily helpful to mix computer science concepts into a list of things to know about a language. Yes, they're good to know, but unless they're significantly different in Javascript, split them out into a separate list. Also, it seems weird to give so much emphasis to things like hoisting or numeric notation and nothing to stuff like promises, Set/Map or debugging. This is a nice collection of links though.
I agree, I think that I'm gonna include Promises and SetMap soon. If you think about more concepts that are relevant nowadays, feel free to contribute.
I guess it must bring some significant performance improvements - otherwise it's just pain in the ass during debugging.
If it's packaged correctly you can import a single function which allows you to bundle only the necessary parts.
What's a SetMap?
Nice!
Out of curiosity, why do you use Flow vs. TypeScript, when TypeScript has a. More community support b. More typings c. Better editor integrations d. More features e. Better performance? 
If you love the idea of using TS, why do you go for Flow on new projects?
I would try one of those: https://www.jqueryscript.net/tags.php?/tree%20view/ And a heads-up, if you depend on someone else to generate that XML, expect trouble. I had to import massive xmls many times in the past and they always have something wrong, normally something that doesn't look wrong. It is an endless chore.
Really?
This is kind of what people should know for an early career interview. Cool stuff to publish and help out with.
Over the last few years, I've created a fair few of the helper functions I see before me today. One of the great things about Redux is the lack of magic that allows you to do things like this without feeling like you're "hacking" it. One other thing I've done, especially to aid with code splitting, is to add the ability to dynamically register middleware and reducers. My somewhat scrappy attempt is here: https://github.com/andyjessop/redux-dynamic-registry. I think such an addition would be fantastic for this starter kit. 
Inertia, mostly. I'm starting a library, it's probably to support one of my existing projects. Even if I write the code in Typescript, I would still need to write Flow types so my existing projects can consume the library safely.
A soon-to-release version of React16 will include a `&lt;Suspense&gt;` component for dealing with asychronosu loading. Until then, your flow will look something like this: state = { loading: true }; componentWillMount() { doAsyncThing().then(() =&gt; { this.setState({ loading: false }); }); } render() { if (this.state.loading) { return &lt;LoadingScreen /&gt;; } return &lt;AfterLoadScreen /&gt;; } 
Seems like you're perma-trapped, then :/ TypeScript has more community support, more projects, more typings, better performance, better integration...
&gt; componentWillMount `componentDidMount`
You did this: &gt;for (i=0, i&lt;selectors.length, i++) But may need this: for (i=0; i&lt;selectors.length; i++) 
Lol :D thanks. I would have be stuck with this for a long time. Bless you!
It's often theese simple things that cause the biggest frustration. Bet I wouldn't find it myself if it was my own code. :D
The question is kind of vague. What specifically are you asking about? How to make a request and handle the response? 
True that friend thanks again 
Do you remember the ‚Äûstrpad‚Äú Package which leads to break so many applications after an update/remove? :D
I'm not familiar with how Vue.js works in this regard but I'd recommend just doing it as two steps, while it's a semi-common pattern trying to wrap it in a data type will probably just make it more complicated. Example using `await`: const cachedProfile = await loadProfileSomeCacheSomehow() if (cachedProfile) { this.profile = cachedProfile } const freshProfile = await loadProfileSomehow() this.profile = freshProfile
How do you share styles between similar components? Like, let's say I have a button with 10 styles... would all 10 of those styles get inserted into the dom every time I use the button?
I stopped using semicolons years ago, obviously for loops you need them still and there are a few gotchas but they're easy to remember and better than just placing them everywhere. Really the readability is the best part, I love how much cleaner code feels without semicolons all over the place. I use standardjs as a style guide, easy to setup and if you want you can easily extend with eslint to add more rules. https://standardjs.com/rules.html#semicolons
In case you want it all: 1. Ditch the iOS for an Android 2. Install the Termux app 3. Under Termux, install node.js, vim, git, basically a complete dev environment. Now you can edit&amp;run node.js code, run arbitrary node-based tooling, push and pull from GitHub. All from a phone.
Heads up - Chrome is changing their store permissions with the next release. Before you forget all the code you may want to look into this if you haven't already 
Don't need 2 build tools anymore!
How do you manage and use utility classes?
I don‚Äôt think this is solved, even "integers" in JavaScript get rounding errors (eg divide by 3) and missing integers with (very) large numbers.
Rely more on props. You can access the props inside of the template string where you define styles.
That's exactly how I learned to do it as well.
Styled component does provide a case partial that you can use for some reusable style. https://www.styled-components.com/docs/api#css The content of partial will be added to the style of each component (this is different from emotions css, which generate a class to be shared by all usages). I don't know the performance implication here but they use stylesheet.insertRule API, which is very fast https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule
What you actually do, is import { ThemeProvider } from styled-components; const appTheme = { success: #4bb543, failure: #ff9494 } &lt;ThemeProvider theme={appTheme}&gt; &lt;App /&gt; &lt;/ThemeProvider&gt;
It is what the official guide recommend as well. It's almost as though people start trying to learn this stuff without ever reading the guide. The Vue and Vuex guides are amazingly concise and informative, really doesn't take long to read them cover-to-cover.
Node is not single threaded, its event loop is. Node is naturally async, if you are blocking the event loop, something is really wrong with your code. This third party api is a websocket? You can connect to it while having endpoints in the same api, this is not a problem.
It‚Äôs not recomended to use worker threads on node right now on production environments, it‚Äôs not a stable api atm.
A checkout chart for darts that uses an api to get the different possible combinations for an out input by the user.
**senpai-js/senpai-stage** [https://github.com/senpai-js/senpai-stage](https://github.com/senpai-js/senpai-stage) After four long years of learning canvas development, it was time to develop my own set of canvas controls. Senpai-js is an opinionated canvas sprite library built with making visual novels in mind. It currently features the following things: * 60 fps animation with keyframes (tested with up to 50 controls on screen with only 2.3ms frame times) * touch and mouse event normalization into point events * A fully functional set of basic controls including: * buttons * checkboxes * panels (with relative positions, clipping regions, resizable contents) * sliders * textinput (!) (complete with text selection, unicode support and insert mode) * visual novel textbox with text animation support * an extendable sprite class for custom sprites (we accept pull requests for new kinds!) * audio sprite support (need to learn how to actually test these in jest) * over 550+ passing control behavior tests with a customizable test suite Senpai was designed and written in TypeScript, for designing quality user interfaces. It is currently in a pre-alpha state, simply because there is a lot more work to do, but we are still looking for people who don't mind contributing to writing docs, tests, or code! We really need developers who can ask lots of hard questions who are good at communicating. This is my first battle tested canvas api and I have plenty to learn when it comes to shipping quality code. We also have an open RFC for creating the `senpai interpreter` which will provide a scripting API for visual novels using the sprite controls. &amp;#x200B; Currently In Progress: * senpai-script Interpreter RFC * context menu support * AudioContext support testing * &amp;#x200B; Future releases will support: * Custom syntax called senpai-script that transpiles to TypeScript in a module (using nearley and babel) * parcel plugin for senpai-script * a webpack loader for senpai-script * a starter template for electron + open source canvas theme (hexagon) In short, thank you for reading! If you would like to join the conversation and help get senpai to notice you, you can join the conversation here at discord: [https://discord.gg/QMSXU9H](https://discord.gg/QMSXU9H)
Oh, thanks, we will check it out. Hopefully it won't break our extension.
Why would you post the same everyday? 
I have a canvas library I would love someone to rip apart. &amp;#x200B; [**https://github.com/senpai-js/senpai-stage**](https://github.com/senpai-js/senpai-stage) &amp;#x200B; I currently have over 550 tests asserting canvas control behavior, and would love someone to look and help make it better.
My favorite snippet is: `let grid = Array(height).fill(0).map(_ =&gt; Array(width).fill(0));` If you ever need a grid of zeros *fast* for what ever reason, just use the above. I've found it very useful for LeetCode challenges and for toy problems in general. In production code you should probably use a library if you're going to work with 2D grids a lot, but it's a fun snippet.
Because it's rest of the world date, not US. *day/month/year*, not *month/day/year* and BTW: We have *October* which is *10*, not *8*.
Take a look at Observables.
That's just a regular template literal, not a tagged template literal which would be something like greeting`Hello ${user.name}`
oh nevermind. i never used tagged template literals.
How is getting the user input specified in the assignment?
Check out https://github.com/mozilla/webextension-polyfill/
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apollographql/graphql-tag/.../**README.md** (master ‚Üí 449834f)](https://github.com/apollographql/graphql-tag/blob/449834fefa7775e2c3a40357d0cf1aa26d91680d/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e7utlkq.)
can you share some code? its hard to understand whats not working. but ill guess you use a input to get the data? use an event like: element.addEventListener("input", function(event) { var text = event.target.value; document.writln(text); }
An asynchronous thing that emits multiple values? Look at observables
You can make css snippets as JS exports and include them around your code as well if that is what you are asking?
&gt; My go-to challenge when learning a language is to build a calculator. Seems depressive.
Done? https://pastebin.com/5nT8xueL
Thank you man
I am using it for constructing sql queries to replace values with $1 etc
The underlying techniques of hyperHTML and litHTML use tagged template literals. https://github.com/WebReflection/hyperhtml https://github.com/polymer/lit-html These libraries take advantage of the special properties of the tagged template literal functionality to automatically build efficient dom update functionality that will never even attempt to update those parts of the dom related to the static portions of the template literal, on top of other unnecessary change detection systems.
It depends on which version of browse you planning to support. For example: for ie9+ jQuery will be better against native functions, but for modern browsers, jQuery will be "one more framework", coz the main functions in jQuery has native implementation.
I wouldn't use it anymore. Felt always hacky.
An example of use could be creating your own logger function which when it sees one the parameters being an object it converts it to its Json representation and passes the formatted string to the console log. Same thing if one of the parameters is a date and you want it to be in some standard format. Basically anywhere you need to access to the template parameters and you don't know the format of the string a priori
Feels like the whole program is a workaround
This is what my [theme](https://imgur.com/a/OguNub0) currently looks like. Image source is [this](https://images.unsplash.com/photo-1539449999368-72ff0e639637?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=892b7e138f68f26a13094d2efe8470bd&amp;auto=format&amp;fit=crop&amp;w=634&amp;q=80). &amp;#x200B; Thanks for this tool! In love with it.
&gt;yes i can understand your point , but i have heard that pure functions can be cached due to same input same output thingy.. but that will not work here. Can some one help me get better intuition
No, it was never a workaround, it was an abstraction of the native APIs. We do this in all parts of software development. This is the reason I don't have to know which specific CPU the user has.
I‚Äôm curious, how long have you been developing for? It definitely filled a gap for a long time that needed to be filled for sake of cost of development, etc. not to say it‚Äôs 100% needed anymore, but the cost of just leaving it in place or maintaining a legacy codebase with it is always going to be cheaper than refactoring. 
I‚Äôm probably slightly uninformed on the latest developments, but isn‚Äôt it much more convenient using jQuery‚Äôs shorthand code?
jQuery was never the best at animation anyways. If all you are using jQuery for is animation check out [Greensock](https://greensock.com/)
The problem really is that you're pulling in a large library just for some cleaner syntax and shortcuts. If you use nearly every part of jquery, then great, go for it, otherwise you're putting a larger burden on the client, when you could instead be using a group of smaller libraries (an animation library for instance) that only do exactly what you want.
But nobody would do that. Normal person would do `el.classList. add('show');` and use CSS for the rest.
Yeah browsers used to suck. jQuery was a godsend. 
Long Term Support? I mean I get that companies like that, but flogging "18 month support" as something that excites companies like NASA is really pushing. Redhat distributions are supported for *a decade*. That's "enterprise".
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations
Older/Legacy, and proxy browsers, are use cases for jQuery, where standards support is limited. If you need to support &lt; IE8, or Opera Mini, then jQuery can provide a nice path if server-side rendering isn't an option. I don't necessarily agree with supporting legacy browsers (anything before 2013), but that's another discussion. Aside from that, I completely agree. The framework abstracts away the need for us to interact directly with the DOM. jQuery isn't bad, but it's method of providing functionality and interaction is better handled via a state-driven framework. Sure, you can use an object for state (and it's not even the worst idea in the world in an SPA that doesn't have a back-end integration, especially if you store it in a cookie for persistence), but it's better to build towards coding practices that aren't held up in a previous generation.
Also, if you have some old school fullstack devs, they are probably using that without an JS framework. With how front intensive things are now, the DOM management that jQuery provides is a relatively simple affaire in comparisson to the task of organizing a larger system. It quickly gets very complex for all but the most mundane tasks and is very unmanageable. "Where it was used", if it is used, it is sprinkled throughout their code. :)
Like /u/GrzegorzWidla said, no one (!) would do this. The problem with the JQ approach is that it is imperative. That line there looks easy doesn't it, but it becomes a mess if you go on, have to orchestrate it, combine it with other stuff popping up until you end up with an entangled soup of conditions. Today UI is a declarative reflection of state, and that includes animations. For instance: https://codesandbox.io/embed/l3nonw1r1l Even if that looks "larger", you have a real component that reacts to state changes deterministically.
jQuery has it's niche for projects where you don't already use a big powerful framework and you want to add a couple of common functionalities (popups, dropdowns, sliders, etc.) quickly. In some cases (for example AJAX requests) the jQuery syntax does appear easier, too. I can't really fault anybody who wants to build a single page website (not an entire "app", just a good old plain webpage for some event, etc.) to grab jQuery, gab the plugins he needs to spice up the page, and use a fitting jQuery UI template to make it look decent enough. That said, jQuery very often feels like a crutch - one that come with a price. I've seen many many many cases where people use jQuery for a single instance, say something like "using jQuery I only have to write 3 lines instead of 6 normal JS", and completely ignore that in order to make those 3 lines work the browser needs to load the *entire* jQuery file first... This might seem really obvious, but many (especially new) developers don't seem to realize that requiring jQuery from some CDN isn't just one line of code, it's an entire file full of code. While I don't think jQuery has become a taboo, it certainly has garnered a reputation of being a crutch, or "JavaScript: Easy Mode", as a colleague once described it. And there are certainly developers who consider people overly relying on jQuery to not be "real" coders (essentially the equivalent to "git gud" for some gamers). It's pretty stupid and elitist gate-keeping in my opinion, but this mentality certainly does exists in some places. But there are also a bunch of really great resources (sites like [youmightnotneedjquery.com](http://youmightnotneedjquery.com)) that aim to educate rather than ostracise, listing reasons why relying on jQuery might not necessarily a good thing (page load times, not really understanding what actually happens, etc.), and showing alternatives using plain JS. When you mention jQuery on your portfolio, I don't think many companies will see it as a instant red flag, but I'd recommend clearly stating why you decided to use it for the project you are showing off, thus demonstrating you are aware of the pros and cons of using this particular library.
[https://bavotasan.com/2011/a-simple-fade-with-css3/](https://bavotasan.com/2011/a-simple-fade-with-css3/)
But what if I'm using bulma?
'Xbyz[current] instanceof Array' Your code will throw is xbyz isn't an array but is still an object. 'xbyz[current] = [x]' Simplifies the else statement
How about: if (!Array.isArray(xByZ[current])) { xByZ[current] = [] } xByZ[current].push(x) (I'm on a mobile, so sorry for the non existing format) 
 ``` xByZ[current] = safePush (xByZ[current], val); ``` function safePush(arr, val){ if(Array.isArray(arr)) return [...arr, val]; return [val]; }
Let's all appreciate jQuery service and say a warm goodby rip legend 
&gt; Is there a better way to write this ? Sure - how about a few newlines?
Agreed. jQuery was brilliant. A clean, cross browser eventing system; DOM selectors that used CSS; An animation framework; and "Promise" based AJAX before there were Promises. It was great. It's legacy now though. 
I am a bit mystified by what the code is supposed to do. If it is not an array, we overwrite it completely? Why not initialize with null rather than objects and just check for null or falsy? Also x instance of Array and Array.isArray(x) do different stuff (the latter checks for an Array exotic object). You can have objects which are true/false for either. 
I know all that. My question was about SetMap. The reddit client I was using didn't write it as Set/Map.
Just keep in mind 1) a lot of programmers are stupid and 2) Javascript programmers have no idea how to program (just look at npm!!!) That being said use jQuery. The trend of not using jquery is only a trend because using it on a framework will actually make it harder. Most frameworks are crap (angular i'm looking at you, same with you meteor), Every site I build I skip frameworks because I actually have a clue on how to program and I use jQuery in everyone of them until I made one without for fun and ended up designing a really nice framework (source not up, not planning to put it up anytime soon).
You should be using a linter. It would catch silly errors like this easily.
Can you have that as a plugin to vs code? 
Only legends are natified into the standard. It's not we don't use jQuery anymore, it's just we don't have to load the JS file anymore.
What‚Äôs the use case for it?
The people doing js I've professionally met are scary good.
Examples? (Not sure if you caught my edit where I wrote a few examples of things my coworkers do. This happened every job I had)
[watch out](https://vignette.wikia.nocookie.net/epicrapbattlesofhistory/images/9/9b/Watch-out-we-got-a-badass-over-here-meme.png/revision/latest?cb=20140604010515)
Lightweight, distraction free, text only PDF articles that you want to read it and store it for later. Sure there are many apps that do just that but in this way you own your PDFs. Also if to like to print the article but the website is not optimized for print. 
I typically will respect a developer less if they use jQuery nowadays, because it comes across as lazy to me. There's the argument of supporting older browsers, but I also find that lazy as well. Companies should be forcing users to move forward as well as devs. 
You know the type of code you look at and realize it would've taken you a while to produce such elegant solution to the problem and you just saw the dude whip it up in 15 minutes. Then again, maybe you ARE one of the scary good coders and never get those moments =). I come from a c/c++ brackground, through java to the javascript world (about a year ago), so I obviously have some package from there which means I am not the best possible producer of javascript code yet.
You will always find some idiot which have no idea how to write "modern" (haha) code. There are many people who can code, but can't code. Just don't learn from them and don't be one of them.
Could be the particular field you're working in? In mine we (colleagues) all come from more or less the same background (asm, c++, c#) and moved "up" to javascript because that's where applications are consumed. The javascript developers i follow on Twitter and elsewhere most certainly know what they're doing. Basically, i don't think the assumption is true, though there is a certain fraction which some people have called "the old guard" that kind of fits the description you gave (tables everywhere). They get hissy fits when javascript evolves, they hate tooling, and they don't like libraries --- or whatever. But it's not that big of a deal.
The joy of learning JS from Udemy, Code School or similar. They don't know algorithms, how and why something works like that etc. I usually tend to call them "users of a programming language" or "users of X framework". "I need to do X" =&gt; "let me add this package to my dependencies list". This is not necessarily a bad thing. This helped cutting the costs for companies. Instead of hiring dozens of senior devs, architects etc., the teams are built under a technical coordinator (an old-school developer) and consist of 1 or more senior "new-school" devs and the others are mid/junior-level or "new-school" devs. I am one of the old-school devs (started with Basic on HC, did both Pascal and C etc.). Until \~2 years ago I was doing a big mistake during the interview: I was looking for old-school devs. Why it was a mistake: 1. The devs were supposed to work on a single project, a single framework etc. This would lead to monotony and frustration. 2. At some point I lost about 6 months looking for a senior developer while all I needed was a person who knew Angular and just about that. I could have hired someone in the first month, but I didn't. I lost plenty of hours during interviews (hours which I could have used to do something else), the company somehow lost money with the recruitment process etc. One of the main reasons for why this is happening is the trend adopted by JS communities starting with 2011-2012. I remember there was a "boom" with NodeJS, Angular, CoffeScript, Haxe, Dart, Go etc. There was a new framework everyday, everybody was developing "the next big thing" that "you should start learn now". While this was happening, people stopped paying attention to details: what is the difference between a function and an arrow function?, what is a symbol?, when should I use plain objects and when should I use WeakMaps? /rant
Nah, simply it's your coworkers who suck.
\*Troll detected\*
How do you explain most of the packages on npm?
JavaScript is the new BASIC. The entry point is close to zero, if you already have a computer, and anyone can knock something together by following a few tutorials, and copy/pasting random bits together without any understanding. So you will encounter lots of code written by non-programmers or newbie programmers who don't understand what the code is actually doing (and/or don't care as long as it appears to function) You shouldn't take that to mean all JS programmers are bad, you're just less likely to get an utter newbie writing C++/C#/SQL/Asm, since the entry points are higher (have to download an IDE which can be a large download, etc) Also, in the web dev world, client side JS is still a relatively new thing - generally speaking the whole site would be built up server side, and the client side JS would just be used for basic stuff like validating form input - it's only in the last five years or so that stuff is becoming mostly clientside, with the server just supplying data, and all the page construction happening in the client. So a lot of web devs will have started out in a world where you had hardcoded html with bits of data injected into it on the server, maybe not even CSS, and have learnt JS along the way, usually only enough to solve whatever their current problem is. 
I had a bit of a surprise when I realize `this` doesn't get passed onto an arrow function. If angular was built for "design who don't know how to code" then why the fuck is everyone coding with it?!
See my newest post
&gt;jQuery very often feels like a crutch It always was a crutch - just a very effective one. Though *not a crutch for the developer so much as one for the browsers* while they played catch-up with what we needed/expected of them. It abstracted away a lot of headaches caused by bad/inconsistent browser implementations. It also introduced many people to method chaining and later other constructs like deferred/promise (it didn't invent them, but did them well and made them work cross-browser) which since became standard practice. If you are making a small app/site that needs some DOM manipulation &amp; other interactivity and you need to support legacy browsers and/or you want something to just bolt-on rather than working within a more complete framework, jQuery might still be the answer. Otherwise for new projects going Vanilla or using a fuller framework is probably the choice you need to make. For existing projects that use it keep it unless you are refactoring the whole thing, as it works perfectly well and replacing it just for the sake of not using older tech is potentially harmful bike-shedding.
I've found there are there are mainly four types of developers: Old guy that's been doing it for years and refuses to update his knowledge ever. Typically writes bad code but doesn't care, because it works. Old guy that loves coding and goes out of his way to still learn everything. Typically writes great code, but has a bad habit of refactoring too much. Takes longer to complete tasks because of it. Young guy that knows just enough and tries hard but just can't "get it." He's serviceable, and his code works, but he'll never impress you. Savant. Can be any age, but typically younger. Understands code like he's a JS version of A Beautiful Mind. There are obviously others, but these are the most typical - at least where I've worked.
I think the issue is not on Javascript or any language. It is just the way people tend to learn new languages. When a started programming I learned C by coding part of the C library and doing so I learned a lot and step by step. Nowadays, developers go straight to a framework and learn how to code fast glue code but don't really go to the internal. To be honest, I realized it last weekend when I was working on a personal project with typescript and realized that I just understood the basics of it but I was lacking knowledge on the advanced stuff. More important By reading some code en GitHub I realized I was not able to really understand it all. All the frameworks out there makes it really easy to get started with a new language and you forget to really dive into them... I decided to take a break from my project to explore typescript in more details but everyone isn't like me.
Which kinds of sites do you make? Do you ever work with other people?
&gt; the new ECMAScript additions I think you mean WHATWG. WHATWG works on providing DOM based APIs (ala HTML 5) to the browser whereas ECMA works to provide language specific features (async, classes, etc). ECMA has done almost nothing to touch what jQuery did but WHATWG has almost entirely replaced its need.
why would you wrap synchronous code in an async function?
8 years of experience and not knowing what a closure is why your coworker sucks. On the other hand those guys who create packages on npm are just people who try to gain experience by doing open source work, since it has such an easy access and doing open source work is encouraged. Also I'm sure (well, not *sure* but I *hope*) they don't have years of experience.
Of course not. The question is absurd. Compared to what? Jquery continues to destroy every other framework in terms of raw usage numbers.
Because instead of learning 25 design patterns to have in mind when you build up a SPA from scratch, you need to learn @Component, @Injectable, @Input and a couple of other ng-specific. If you combine it with IntelliJ and ng-cli, most of the time you end up writing 3 functions in a class because the rest of the things are already there. Actually that's why people tend to migrate from ng to React: it has even less stuff to learn. No decorators, much easier to setup and understand, less "bloat". You can see this extremely easy: put someone to build a boilerplate from scratch without using any CLI nor "npm init"-like commands. Usually there is THAT ONE GUY that knows all of this in a team/project. The rest of the team end up doing stuff from the 1st paragraph. PS: I hope you didn't get wrong my message. I was actually sharing your point of view.
Isn't it harder to learn @Component, @Injectable, @Input? I used the first version of angular and I don't remember it but I specifically remember doing a simple thing required overkill and events when trying to do it in angular and slowed us down. I think we were trying to populate a table with data and have another widget create a popup calendar to book appointments.
How do *you* learn typescript? What I did was I wrote a bit of code then read every page in the handbook https://www.typescriptlang.org/docs/handbook/basic-types.html
Sites for corporations at work, solo at home. Sad thing is I can't use my code at work because it wont be maintained if I leave and they won't find anyone to maintain it. Stupid thing is we have to regularly modify code 8+ years old anyway
I would like some receipts for this claim if you don't mind.
Code golfing is not genius. He probably started with a lot more code, and then just minified it over several passes. Using this kind of code in production is terrible.
&gt; had no idea what closure was &gt; put everything at the top of the JS file In the world (environment) you are it probable seems true from this sample. Hasn't been my experience in general though.
sounds like you have a superiority complex to be honest. The reason a lot of JS programmers may give off that appearance as to not know what they are doing is because of the fact that you can get things done in JS without knowing the foundation or structure of the language. I guarantee if people spent more time, or studied more restrictive languages they'd understand how to use it better. It is a fantastic language if used in the right hands. For anyone reading this please read the "You don't know JS" series by Kyle Simpson.
I'm sure you've gone through more than 50% of the packages on npm and concluded that more than 50% of js devs are bad lmao
&gt; The reason a lot of JS programmers may give off that appearance as to not know what they are doing is because of the fact that you can get things done in JS without knowing the foundation or structure of the language Yes exactly and their shit breaks or is illogical or needs to be completely rewritten because literals are used everywhere instead of variables like a normal programmer would use
I have experienced full stack developer on work and our studio uses jQuery even now. It's just an old good instrument which simplifies coding front end when there is no need in complicated framework.
It's actually not legacy, a lot of developers still use it. Not every site is SPA on React, you know.
People in this subreddit don't realize that SPA is very minor amount of sites. Most of sites are build with backend WordPress and frontend jQuery. Also they don't realize that it's not only about jQuery - it's about huge amount of his plugins.
All I am saying is that your experiences are limited to what you've seen. As a counter, I've worked with some very brilliant people that completely dismantle the theory you are talking about. The barrier to entry is a lot smaller, but that doesn't mean that there are a number of great JS programmers who would leave your draw dropped. People who understand closure, async patterns, design patterns in general. It's more so a reflection of the environment you work in or who you've worked with, rather than the language itself. My two cents. Elitism is unbecoming of any programmer.
Speed for small tools is a great use case stoll. If you're making a tool that's just going to take a couple of inputs, do a calculation, and present the user with an output you can go from nothing to a qa ready app with 1 dpendancy that works in just about any browser in use in 1hr or so. 
&gt; Other people have talked about jQuery being "big" - that's not a huge concern as the jQuery script is commonly-used, and thus likely to be cached by intermediate proxy servers, or provided by CDNs. Frameworks / View libraries would have a similar file size. (jQuery is ~86.9kB, React + React DOM is 104.8kB) Correct. &gt; It's important to remember how great jQuery was back in its prime - it solved the problem at the time. I still remember how amazing it was to work with jQuery back in the day. It was a really, really powerful tool.
I‚Äôm pretty sure he meant ‚Äúthe new additions to the ECMAScript language‚Äù
Check the `innerHTML` property only after the document in the IFRAME has been loaded. i.e. listen to the `load` event of the IFRAME element before the IFRAME's document is loaded, and perform the checking within the event listener function.
&gt; Older/Legacy, and proxy browsers, are use cases for jQuery, where standards support is limited. Then what does jQuery use to accomplish things?
Its trendy to hate on jQuery right now but it is definitely not taboo and is used and continues to be used extensively. Companies don't like to talk about it because its older tech and older tech isn't exciting.
It's not bad, if I were you. I'd slow down the enemies a bit, add power ups and maybe a background. That will make it more immersive.
&gt; Sad thing is I can't use my code at work because it wont be maintained if I leave and they won't find anyone to maintain it. Stupid thing is we have to regularly modify code 8+ years old anyway You see, this is why there has been this huge move towards frameworks that will actually be maintained for years to come. Sure, your code might be better than e.g. Angular but who cares? It won't matter for anyone but you and you probably won't find anyone who'd want to use it unless they could see the same kind of future in it as with the more popular frameworks. I've been doing JS (along with a lot of other languages) on and off since before jQuery and the biggest problem has always been a lack of any kind of structure in JS. It's like play-dough where you can do anything in any way you want. But it's just impossible to maintain when people do things in a million different ways. Fragmentation is a huge problem. Frameworks provide not just functionality but also an agreement between developers on which patterns to use and how to structure things. This often isn't necessary in other languages to the same degree, since those are often built on programming paradigms that are well defined and thus automatically lead to a much smaller array of patterns. The reason you currently see a move away from jQuery is because most of us are shifting from imperative programming and working manually with the DOM towards functional programming that works declaratively with the DOM. Why? Because it is faster to write and easier to maintain. Look at React and Angular (more specifically RxJS). Both are moving in the direction of functional programming with a shadow DOM. More extreme examples are cycle.js and even Elm that moves towards Haskell. I see this as a smart move towards something a lot more robust and maintainable in a language that desperately needs it. Probably also why TypeScript is gaining so much traction. Thus, there is no reason to use your own little framework because: 1. If you leave, nobody would want to maintain it. 2. Nobody wants to learn it, since they will never use it again when they switch jobs. 3. Because of the two first points, no employer would rationally let you use it in the first place.
https://github.com/stuworx/node-ts-api-starter
A little bit off-topic but you can use `async`/`await` natively on newer Node.js versions.
I have just used codewithmosh.com to learn react and if you follow along you‚Äôll end up with an app you can reuse as a template. 
I started to go through the handbook writing small pieces of code about the page I studied and I try to write about it in a gitbook. Writing about stuff, even if not published, helps me realize whether or not I understood what I did or if I still need to work on it. The hard part about it is to get back on stuff that I understand already to check if that is the case or if I am mistaken on it. 
Serioulsy, no. 
Every site I work on for money uses jQuery. It's a pretty great library
yaa baby keep it up javascript is shining again 
Does it work better than print to pdf in chrome? The cool thing about that is you can use the webdev tools to delete the bits you don't want and then print to pdf... but it does not always work as expected. Somehow I wish I could insert new page breaks at will to make nicely formatted docs for offline use.
Never!
Ah yes! That's what I'm looking for. Thanks.
Having read the article (I'm Norwegian) I'm pretty sure people shut up about because it's not very attractive for potential employees, which is why it's a "taboo". If I was an employer that needed web development talent I would even be hesitant to disclose if we still used angularjs / angular 1 and just say "full-stack, dude!" What the article entirely glosses over is the "framework / library" classification of jQuery. Not every website needs to use a framework, and not every website needs to be a Single Page Application. jQuery is amazing for implementing small, neat user interaction features on static websites and also takes care of cross-browser support so developers don't have to think about transpiling/polyfills and EcmaScript standards, just minification. [The current version of jQuery supports IE9 and up](https://jquery.com/browser-support/). I guess the final argument as to why jQuery is so heavily used on static websites where every page could use a tiny framework like vue or react for user interaction is habit / history / legacy
Is Vue with vuex much simpler than React with redux? Because something I‚Äôve noticed about React/Redux is that there‚Äôs a frankly insane amount of boilerplate involved. The lack of sensible conventions is pretty sad, coming from a Rails background. Of course, I‚Äôve mostly resolved this issue by writing a React/Redux scaffold generator.
Yeah, for my immediate use case, I will just is this general structure. I had totally forgotten about Observables.
That‚Äôs certainly true, but there‚Äôs still a modest number using older versions of IE. CRM such as Siebel and SAP run in IE in many organisations so those same businesses will stick with IE as main browser. I don‚Äôt agree with it but their perspective is always one of financial impact. Many countries such as China still use IE, and mobile devices vary in age and support. I‚Äôm told that Symbian is still heavily used in some countries, despite being officially discontinued for around 6 years and being at less than 1% worldwide usage back in 2013 (I can‚Äôt find any stats that are more up to date). It‚Äôs not fun, and I don‚Äôt agree with supporting it but I also understand that keeping up to date in an area that‚Äôs undergone huge changes in the past 4 years would cost a significant amount for large businesses.
Go to /r/LearnJavascript. Ask about asynchronism.
What does React use to accomplish things? They use vanilla JS. The benefit is not re-inventing the wheel and harnessing the _free labor_ of the collective man-hours of hundreds of developers across years. Saving time saves money.
Reiterating what others have already said. Taboo? No. Best practice? Not really. Career growing? Definitely not. I remember a number of interviews where the person applying for the job knew "jQuery", but didn't actually know JavaScript. That is happening now with React as well. If all you know is how to use a framework or library (or how to extend them) it won't get you very far. Learn the web platform, and the languages it uses, and make that your starting point. If for some reason jQuery fits the context of your project, at least if you know your platform you'll be able to implement it in a sensible way that is functional and hopefully maintainable.
Well, I have seen some of your other posts so... And yes, your new post might not be one of those troll posts you do.
as stated above, can use ES6 and async/await I'd you use a newer version of node (which you would have no reason not to use imo since you're starting now and not years ago). of course that doesnt mean you can use eveything you might have used/seen before in modern JS projects that take advantage of other babel transforms (at least out of the box. but of course you could set that up)
I'd suggest posting it on GitHub. The website itself is blocked by my unreasonably-strict corporate firewall.
Thanks for your comment. I agree the enemies are speeding up a bit too quickly - I wanted to make the game tricky without having to program any real logic to progressively make the game more difficult. Power ups are definitely on the agenda and I'll give it a background once I figure out what genre/backdrop to use for the game. Maybe a marine fighting off aliens on a planet/spaceship backdrop?
For your three reasons. You do realize people write a 100line function and its left in the codebase for years. And many functions will be modified 20+ times after I or someone leaves because it's in the codebase. It's being done regardless of who wrote it and why it was written 
If all you need is a little interactive functionality, 30kb of jquery is totally overkill. Code to make a modal pop out is just as easy to write in JS now. The thing is, the only people I know who use jquery, are people who really don‚Äôt know JS. Yes, it gets the job done, but if I called myself a full stack dev, but the only backend I know how to write is using rails generators, or some other magic, that would raise eyebrows. If all you need to do is make an api call and display the response, or some other simple things, jquery is overkill. If you need more complex state driven behavior, jquery is liable to wind up a big plate of spaghetti code. You can use it all you want, but the issue comes in when you are working on a team. I wouldn‚Äôt want to work on a jquery project, especially since the direct dom manipulation jquery uses is pretty much an anti-pattern now. 
My point is, redditors seem incapable of doing anything without using someone else's code. Nowadays, they can't accomplish anything without React or Vue, even if all they want to do is one little thing, which was the reason they used jQuery in the first place. They don't know how to do it themselves and/or they don't want to learn as exemplified by the common reddit phrase "not re-inventing the wheel" which is interpreted as "I don't know and don't want to know".
Only for hipster "coders" who like to talk about the latest hipster technology and never actually produce anything.
This is a really good answer, but it doesn't address OP's specific question about \`this\`. \`this\` is about the context of the property we're trying to access. Within an object, we use \`this\` to target the object. Outside of an object, it targets the browser window. So if you have an object with two functions, foo and bar, you can use \`this\` to access one function from another, like so: class MyClass { foo() { console.log('Foo'); } bar() { this.foo(); // Calls foo() above console.log('Bar'); } } If instead of \`this.foo()\` above I used just \`foo()\`, JS would look for a function called foo within bar and fail, because it doesn't exist (although it's perfectly ok to place a function within another). Because you can embed one object within another, you could conceivably reference a property like this: this.cage.hamster.squeak(); As /u/sebamestre wrote in their example, by not using \`this\`, JS will look for a property in the current function. If you haven't started using them already, [the MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) are a really good reference.
Not sure why it would be blocked - is there some whitelist I need to get on? &amp;#x200B; Does the staging site work for you? [http://incremental-it-site-staging.herokuapp.com/game](http://incremental-it-site-staging.herokuapp.com/game)
&gt; is there some whitelist I need to get on? Why yes there is! https://www.trustedsource.org/
yes. As long you are not creating something quick and dirty with only a one time usage, you should avoid jquery in current times. JQuery gets the job in a quick and dirty fashion done. So please only use it when you are doing something quick and dirty. &amp;#x200B; Please use a framework / lib that supports data bindings when creating a long lasting application.
I can't help you with how you choose to interpret things, but not re-inventing the wheel is equally as valid as "I do know and see no reason to do what has already been done." I've always been a proponent of developers learning how frameworks work, instead of treating them as if they were their own language. That doesn't mean to not use frameworks.
Thanks! Should be on it in a few days.
Sounds like a job for setTimeout setTimeout(function() { .. fill in first part of the form ... }, 100); setTimeout(function() { .. fill in second part of the form ... }, 500); setTimeout(function() { .. fill in third part of the form ... }, 1000); ...etc...
If you were actually the good developer you claim to be, then you would have included the fact that you need to write documentation and unit tests for your code. So yes it will in fact be quicker to compare a couple libraries to see if they meet your needs.
[you didn't look well enough](https://github.com/npm/cli/pulse) this project has 12 branches
Yes. Get that trash out of here. There's no need for it anymore
I don't have any experience with React, but I've been working with Vue for the last 6 months. I can setup an app in 2 minutes with their interactive CLI, and all I have to do is write the HTML and the JS. It won't be any faster to write my app with jQuery, and I'll damn myself when I'll have to work back on it in two months, when the scope will almost inevitably grow, or when I'll have to hand the code to someone else.
Autocomplete? What IDE does that?
Volume of usage ‚â† volume of jobs. On this subreddit at least, I believe the subtext when asking about library/framework popularity is whether or not it's a skill worth investing in. If you are hunting for a web developer position in today's market, there's currently a lot more demand and job security in React or Angular roles than in jQuery.
If you‚Äôre already invested in the classname approach I your app I‚Äôm not sure why you‚Äôd now want to start using styled components. Better to stick to just one consistent system rather than mix and match all over the place IMO.
jquery is here to stay for many years IMO. Not every site needs to be a SAP, not every site needs react/vue/etc. But using jQuery tends to increase development time, and it doesn't really have many disadvantages (it isn't a HUGE library, if you use a popular CDN it might be cached in users browser already). There are also alternatives like Zepto.js which is i think &lt;10kb but has almost all the features of jquery (which i think is 30kb)
jQuery is fine as long as you're including it for a good reason. Just be aware that a majority of jQuery's functionality is now included in most browsers by default, so a lot of what used to qualify as a "good reason" isn't applicable anymore. Before including jQuery, make sure your use case isn't already handled by an existing web API. Additionally, keep in mind that if the API you want to use isn't supported by all the browsers you need to support, you might be better off with a polyfill for an existing web API that can be easily removed once you're finally ready to drop support rather than littering your codebase with calls to jQuery everywhere.
I like i said previously: IntelliJ with Angular plugin. Just type @Component({ }) Then put the cursor between {} and hit ctrl+space. Enjoy :).
They moved the project to npm/cli, and haven't merged into latest since August. What are you asking specifically about what happened?
nice
Pick and choose. There are still very powerful things to use it with.... with that said, I think it's better to replace as much as you can with "vanilla" javascript.
&gt;If you need to support &lt; IE8, or Opera Mini, then jQuery can provide a nice path if server-side rendering isn't an option. [jQuery does not support legacy browsers, with the only exception being IE9.](https://jquery.com/browser-support/). 
Am I in the twilight zone? Documentation for a function!? A single one off eight line function? I'm deleting reddit or I'm going to stop posting. Everyone is incredibly stupid and only one person with a clue has replied in this entire mess
Business people jump into the fancy hiring boat first. And then sink with it. 
In 2008 imo
This is so incredibly off-base that I wonder if you have ever worked in the field at all.
&gt; If the reason for using jQuery is because you "want to do one little thing," then you have the wrong reason for using jQuery. And, yet, people do so. How often did you see, "Just use jQuery" to every question on reddit? 
Bootstrap uses it under the hood, so I include it, but most likely won't interact directly except for very small edge cases here and there.
I know and that‚Äôs still wrong. jQuery had almost no utility in that direction. 
I used to include the jQuery library at the start of every project. Almost seemed to have forgotten it‚Äôs just an abstraction that caused me to ignore JavaScript‚Äôs core (and simplest) features. For the last year or so I‚Äôve moved to either vanilla JavaScript or another appropriate framework. 
 It not taboo, just unnecessary. If you are targeting a browser made in the past 4 years you have getElementByid, querySelector, the class api, and hundreds of other native apis that all match the standard. 
I would like to build a Django app, using the Django templating language, and add declarative bits if JavaScript to enhance the UX. Is there a standards-oriented, declarative frontend library for DOM manipulation that doesn't take over the whole frontend?
I am one of those that say: work smart, not hard. I had and still have tons of issues with VSCode mainly because of its "modular" pattern. Each extension may have it's own separate service which VSCode cannot control very well. This results in: \- memory leaks. I do remember two of them causing this: CSS classnames autocomplete which was indexing CSS files over and over and over again and something regarding imports (auto-imports or auto-complete paths) \- ghost processes. Even if you close VSCode, some of its processes remain opened. \- bad performance Also, I found VSCode very bad for plain-JS, but quite ok for TS. As I do both + Java + ..., I prefer IntelliJ Ultimate, but with a note: configure it manually. Get each option, check what it does and decide if you need it. If not, kill it with fire. In the end I got a full-featured IDE for multiple languages, with minimal resource consumption. PS: I tried Sublime, Brackets, Atom, Eclipse, VSCode and besides those, every web-based editor. For me, IntelliJ is the most reliable one.
I build wordpress sites and for ease of use when we get interns and for our designers we use bootstrap so we are all designing and developing around the same tool. Boostrap uses jquery as well as wordpress. So we use it. Is it taboo? I don't think so. It isn't the hotness that it once was, but I can still do certain things faster with jquery than I can with es6. Mostly centered around ajax. I do a shit ton of dom traversal and the like though. 
Programming is done to build things that other people use to make money. Utilizing ways to do that more efficiently makes you a better employee. The only people bragging about not using "crutches" are egotistical college students who haven't held a job outside of the campus coffee place. 
http://youmightnotneedjquery.com/
&gt; Am I in the twilight zone? Yeah for sure &gt; Documentation for a function!? Yeah, at least JS doc. And the module the function is part of should be documented anyway. &gt; A single one off eight line function? Oh I see, you're going to keep adding more details in an attempt to make me "wrong", but it's not going to work. A simple JSDoc comment with the param/return types and a maybe an example would be completely adequate. Also i'd like to point out that you've ignored the unit test point. &gt; I'm deleting reddit or I'm going to stop posting Honestly, the average level of discourse would go up a bit if you did. 
Hi /u/moarnao, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I don't know what subreddits you're browsing, but I constantly see people saying not to use jQuery on reddit. I see jQuery being recommended these days about as often as I see people recommending the &lt;blink&gt; tag, which is never.
There are a lot of standalone virtual DOM libraries. Virtual DOM existed before React did; React just made it very popular.
&gt; Oh I see, you're going to keep adding more details in an attempt to make me "wrong", but it's not going to work. Fuck off. Literally the first thing in that post said 8 line function. You're a moron
I like the Idea of marines/ship on water, also you could simply increase the speed/size as each level progressed, a shield would be cool for later as well. But, sounds like a fun project, so far.
what do you think is better? and why?
Had this where I work. Most of the projects included jQuery for doing ajax calls (not even for doing DOM selection/manipulation) and I have been slowly replacing it with the polyfill/code to use fetch. Asked someone why we keep including it just for ajax and all I got was "because that's how we have been doing it. I didn't even look into Fetch because this exists." Occasionally one of the devs leans on jQuery for tweenmax and I end up replacing all their use cases with CSS animations.
And then in the second post you added the qualifier that it's a "single one off" function. In the next post you're probably going to tell me that it's an anonymous callback to some other function. After that you'll probably tell me that it's a utility script that you are only going to use once and then just toss out. Honestly, just delete your account already, or did you make that comment in bad faith too?
Lynch mob "moderation". It sounds like such a great idea.
Really!?! Any idea what extension caused it? How long ago was this? I haven't notice a single problem
I don‚Äôt think it‚Äôs as simple as saying one is better or worse than the other. At the end of the day both get the job done. One thing I do like about styled components (that is also true for class based CSS modules) is that styles are scoped to the component so things like the cascade tend to be less problematic. I also feel like if you go all in on styles components, your render methods become very clear, like semantic HTML markup ‚Äî it‚Äôs very clear what everything does. That being said it‚Äôs not perfect, if you‚Äôre used to the utility / modifier class names approach it can be difficult to reframe your thinking into being more prop based. Sticking with regular class names also gives you better interoperability with other CSS libraries and frameworks. At the end of the day both are fine and I‚Äôve worked a lot with both. If I was doing a fresh project where I intended to build all styles in house I‚Äôd probably go with styles components. If I was maintaining an existing project that already used classnames or that would use an external css lib (bulma, bootstrap, etc) id probably go with CSS modules or even static class names. Whatever works best for the team, project and experience IMO!
It does seem like the only point you successfully got across is about your personality.
I agree. I have talked to people who like the "one way in one way out" approach where they won't use mapState or mapMutations directly. I can see how it reduces cognitive load but increases boilerplate code at the same time
The easiest way is to go to the git repo of each extension that you are using and look over the issues :). As for the issues: I had them both on Windows and macOS. I don't remember their names, but it happened multiple times (last time I tried VSCode was this year in ~ May). You should look after "node" processes and not vscode ones (typically because each extension spawns a node process).
React has a client tool called create-react-app that handles this now.
It's only if the code we are working with is a combination of async and sync, and there are conditions that make it sync. For example, sometimes when making requests, we want to know if we already made it in the past. That code can be sync. But if we haven't made it, then the code has to be async
If you're making a quick-mock up application for a product demo or w/e that has really really basic interactivity on it I find JQuery much easier and more readable than throwing some OOJS at it. I'm nowhere near front-end oriented at all (and still a noob) so I guess writing a choose your adventure front-end framework novel is the preferred method now if you're used to it, even for demo products that have to work once during a meeting.
Try Vue. It‚Äôs the easiest to pick up and you can easily add components where you need them. It doesn‚Äôt need to be used for the whole front end. That being said, I‚Äôd avoid mixing any declarative and imperative operations in the same piece of functionality. 
&gt;If you need to support older browsers like Internet Explorer 6-8, Opera 12.1x or Safari 5.1+, use jQuery 1.12. Its not like you need the latest version anyways
&gt; The thing is, the only people I know who use jquery, are people who really don‚Äôt know JS. Yes, it gets the job done, but if I called myself a full stack dev Going from "don't know JS" to "full stack dev" is a big gap imo. Sure if you are working day-to-day with JS I think one would know better, but if its something you do on the side (like maintaining existing sites or stuff that doesn't allow for much time spent on it) I'd say its still fine to use it. Sure it isn't pretty, but it still works fine in browsers, is reliable and quite fast to use. Not everybody works on single page applications these days and I have enough colleagues that use their front-end skill like an hour a month tops.
more on the best practices of how to handle asynchronous code in react - preferably an article I can study up on the topic
I guess if you need to support ie8 it could be nice, but I don't have any need for it
Cdn doesn't help your users with bad connections or shitty data plans
&gt; Like its shortcuts (for class and attribute selection) var el = document.querySelector(".myclass"); Whoo, that took a long time.
Well I don't know why you would use a Js animation there but animating height from auto to Zero is probably easier in jq
Same here. Rarely have I found a site that doesn't use jQuery. Sure there might be things that can be used in its place, but that doesn't make jQuery 'taboo'. I'm likely starting a new project soon - a big one. Business app, lots of CRUD, lots of front end reports. Am I going to exclude jQuery? I can't see a reason why I would. Am I going to rely on it 100%? Probably not.
Oh I see. I do some node but not too much. I wonder if that's why
Like any of that matters? I said 8 line function and you said unit test. I don't know why I'm replying to a clueless person who can't handle it when they said something wrong.
You're not wrong but I think ppl are often missing the forest for the trees on this. Jquery loaded from a major CDN is practically free in terms of load times, it may be faster than the 5kb of code you *might* have to right for backwards compatibility with old browsers. More importantly, most of the projects I see using JQuery in real life don't even have good cache optimizations on their static resources, so they should be spending their time looking at Nginx/Apache config files before they spend a second on killing JQuery. Now, a new webdev might be better focused, career-wise, ignoring JQuery and pursuing vanilla JS and a Angular/React/Vue. Once they master those if they inherit a legacy app to maintain with JQuery it'll be cinch for them to pickup on the fly.
Yeah, I view it as a depreciated technology. If it's already on the platform / project and you're not introducing additional overhead go ahead and use it, especially for ajax. In general though document.querySelector[All] has basically replaced jQuery part and parcel.
Vue.js 20KB min+gzip JQuery 82.34 KB &amp;#x200B; Just sayin
Yup, I‚Äôd agree with that 
Plus doesn't jq return an array or an array-like object when querying with \`$\`, so that you have to always 0-index in to get the element? I always found that non-intuitive for single elements. 
JQuery has its uses for specific functionality, such as using it for a plugin for Bootstrap, but otherwise it's a library that is rather large in size and will cause noticeably longer page load times. 
Check out [document.querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector): // First result var element = document.querySelector(".class"); // All results var elements = document.querySelectorAll(".class"); --- [You Might Not Need Jquery](http://youmightnotneedjquery.com/) is a good reference for alternatives, in fact lately I've been using the Ajax function they provide instead of $.ajax.
Are you trying to say you don't need to unit test a function because it's 8 lines?
absolutely not, and to be honest, people who say it does just sound pretentious. twitter's bootstrap uses facebook. many great plugins use jquery. google uses it, amazon uses it, facebook used it last time i actually had a facebook. true, it isn't needed the way it used to be because the native API have gotten much more intuitive, but minimizing code and keeping scripts to a minimum is also not nearly as much of a problem as it used to be. it's 2018, everyone has 4g or better. I use it relatively frequently just because i use bootstrap a lot, or because i need datatables or another high quality plugin that requires it.
Yes. Using it basically bans you from Value-halla, the Asgard hall where programmers go to do their final return in peace. If you mistakenly used it, or you were forced to in a company, you will have to perform an extremely taxing ritual to buy your place back in Value-halla. In the worst of cases, you may even be required to program and maintain PHP 4 sites for several years. So be ***VERY*** careful.
Look up Twilio and find examples of using their Node API that fit your use case.
I am well aware. That‚Äôs not even the boilerplate I‚Äôm talking about. I‚Äôm talking about how it takes a significant amount of code to make pretty simple things in React... the same simple things others are often doing.
Shadow DOM and virtual DOM are two entirely different things. Aurelia is an entire framework. I haven't used Virtual DOM outside of React, so I can't comment on which one is better. But from a quick search, [Maquette](https://maquettejs.org/), [snabbdom](https://github.com/snabbdom/snabbdom) seems to be the most popular libraries.
Yeah, I think the second one could be any age, now that I read it again. I'm more the second type as well. I suffer from always feeling like I'm not good enough for those around me, because I'm typically surrounded by people that are stupid good at code.
I don't know why you're being downvoted so frequently. I agree completely with your sentiment. While there are certainly developers who can do things with vanilla js, they probably find it simply takes less time to use a library where people have already done alot of the leg work for them. That said, if any of you haven't already, I highly recommend trying to write your own library, or even a basic API just to make your own development efforts easier. It's a really great way to learn.
[Here you go, give this book (and the others) a read](https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**this%20%26%20object%20prototypes** (master ‚Üí 0cc17c5)](https://github.com/getify/You-Dont-Know-JS/tree/0cc17c53ff772e20dfd6a7072c965df2486116e8/this%20%26%20object%20prototypes) ---- 
You'd probably like ember.
I like people that sacrifice social capital in arguments. It proves they aren't trying to get something from you or trick you. Somehow though, Reddit has decided that if an arguer isn't friendly or good natured, that must mean the argument is bad, which I think is dumb.
I dont think its taboo rather it is a point of tension between the older and newer generations of webdevs. It is a familiar tool for many senior devs who really dont want to lose their swiss army knife of a package, while many younger devs who are cutting their teeth with react, angular and vue view jQuery as an outdate, unnecessary 82 kb. I've noticed a couple older devs sneaking jQuery into big projects as a way around learning some intricacy of whatever frontend framework leading to a dust up with some of the young guys who are then overly critical of jQuery to try and get rid of it. Personally as a junior dev between the rise of frontend frameworks for big spa websites and the advances in html and vanilla js especially when coupled with webpack, I am hard pressed to find a place for jQuery in the modern webdev landscape.
&gt; many people are trying to remove jQuery because they're concerned with page load times. And then they cram a single bundle of 3MB of javascript down the pipe. smh
That is a great resource, thank you. Though you can totally see how much simpler some of those calls are in Jquery. Regardless, I can see it's a dying library. I will attempt to wean myself off of it for the next project XD
https://w3techs.com/technologies/history_overview/javascript_library/all
&gt; the only people I know who use jquery, are people who really don‚Äôt know JS Been coding Javascript every day for 20+ years, and I still use jQuery on some projects. Because, sometimes it's good enough to get the job done without overcomplicating things. 
Of course, but you can rarely guarantee that a project won't grow, and a "small" framework is IMO a good investment, regardless of the size of the project.
Search Google for WebRTC 
https://trends.builtwith.com/javascript/React
"everyone has 4g or better" is a slippery slope. we should NEVER use improving hardware as an excuse to disregard code optimization.
Same. Where I work, JQuery is the legacy codebase that's still in use. However, we are pushing toward Angular 6. Some parts of our site were built in React, but further development for it has sadly been abandoned in lieu of Angular. &amp;#x200B; Sometimes you just have to do what you have to do. JQuery isn't bad -- just old.
https://trends.builtwith.com/javascript
everything that jquery makes "simple" - even AJAX - is just as simple with plain JS, if a bit more verbose. I used to use it all the time but now can't think of a single use-case for it over plain JS
Easter egg: google `blink tag`
Yep, we‚Äôre starting to move what we can to Angular, just works nicely for our use cases. Interesting to hear your move away from React because it seems like ‚Äúall the rage‚Äù between that and Vue. Any opinion on this? I haven‚Äôt dabbled in either yet and angular hasn‚Äôt given me a strong reason to.
https://jsfiddle.net/3m5L098d/46/ Added some color and z-sorting, move around with arrow keys but just can‚Äôt seem to figure out how to change the rotation from just pivoting around the center, need to brush up on my maths 
If jQuery is all someone knows, then it is a crutch. If someone knows React, Angular, and all the rest and still uses jQuery on a one-page site, then it can be the right tool for the job.
i think the big aversion comes from wannabe developers that use a full jQuery import solely for class toggle and query selectors. in most cases these devs to that because they learned the language once (without fully understanding it), and are completely oblivious to how ecmascript has evolved in the last years. but its not limited to jQuery though. people do the same thing with react now. if you do a coverage check and find you only use 2% of a larger library or framework, you're simply wasting resources. 
\&gt; I'm new to JavaScript and I need a little help. Sounds like you might need more than a \*little\* help.
&gt; using jQuery tends to increase development time Setting up React, Redux, React Router, Webpack, Babel, Eslint, etc, etc, etc... can also increase development time. It really depends on the size of the project and the approach used. In a complex web app that uses all those newer techs, the payoff is in the long tail. If the goal is just a single page, then jQuery will speed development time. Jquery is not really going to help much with a complex web app, but nobody worth hiring is going to choose jQuery alone for a complex web application. 
It's okay... you can use jQuery. The javascript fashion police aren't really looking over your shoulder all the time - they just want you to think that they are.
Use some editor that supports IntelliSense (like VS Code) so that your don't need to type the whole names. You can use the built-in function \`fetch\` instead of ajax (though IE doesn't support it, sadly).
&gt; it has a smaller percentage share overall which is what the original link I shared shows The original that you shared measures a significantly smaller number of websites, so they aren't really comparable. But it is something worth considering -- jQuery is grandfathered into many websites, since it has a ten year history. That does not mean there is a job market for it, though. My last three clients have had me migrate their jQuery applications to React. It's a biased sample size, since I'm a React developer, but the real metric should be what is the _growth this year since last year_, not total number overall. A declining number can still be a greater number. A declining number is an "unhealthy" number. React is not declining. It is skyrocketing.
Sadly, these people do exist. 
So excited to try this
Ha, oh. 
It helps to know how much you already know about JavaScript. This is a complex project and not a good "beginner" project. You will need a REST API to pull the card data. If this is Magic, mtgjson has _great_ data for this, but they do not provide a RESTful API for it. If you don't care about loading speeds, they do offer JSONP to pull the entire card database. I think it's like 2 megabytes. You could use React for the state management and deck building/UI. Saving the list as a JPEG is another beast, but it's not even worth covering if the API and UI aren't able to be made.
It says that That page doesn't exist. :(
I‚Äôm demonstrating the shorthand, it doesn‚Äôt have to be for an animation.
oops, typo, i meant decrease. for basic small sites (not those big single page apps), when you need to add a little bit of interactivity to a page, jquery is much faster.
Works well for me on Ubuntu 18.04 with FireFox. There isn't much to the game. Maybe you need a storyline behind it so you can the playing pieces look like something. Even with the original Asteroids game there was a sort of story behind it. Just for example, make the player a worm and the things attacking it are birds. Worm has to spit at the birds to kill them. Or go for something even more absurd. Brainstorm with friends.
Ah, ye good ole developer gatekeeper/douche
Fixed!
I admire your ability to stay cordial.
It's more like there's a lot anti patterns that typically come with jQuery that are taboo. You can write good code with jQuery but most people don't. Most examples online aren't big enough scope to expose those bigger code problems and so they inherently encourage bad architecture. They're fine by themselves but it's the larger picture that's missing. It's hard to learn architectures and code patterns that scale when you're learning from a simple to-do app or similar size project or simple code examples. To be fair most JavaScript frameworks have this problem. When learning React I had this problem. I was doing everything like what I learned in multiple tutorials but it wasn't very good code; it was hard to understand, and hard to get things done in. I am very grateful for a coworker who helped me learn better more scalable architectures. jQuery itself is brilliant. It's a good piece of code. Use it for what it makes sense to use it for. Which is in general smaller projects. If you get to to-do app level you might want to switch to Vue which for a lot of use cases can completely replace jQuery but has a migration path to a large scalable app if needed. React and angular are overkill for a lot of things but Vue scales a lot smaller.
There is a ton of boilerplate involved with react/redux for sure. I like to use this framework (instead of create-react-app) for most react/redux projects: https://github.com/dvajs/dva It removes a ton of boilerplate and encourages an elegant, functional programming approach (beyond just state management, e.g. using only functional components)‚Äîvery similar to Elm actually 
You should try to add a bit of spread on your bullet firing. The game is WAY too hard :)
It's considerably faster and weights a lot less. Some projects need those features.
I do not format queries with variables directly i always use bind variables and prepeared statements. From my function i am getting object with text and array of values. For example: sql`select a from table where id = ${id}` will return object with query text 'select a from table where id = $1' and values [id value]. There is no sql injection in any way.
Exactly, you are a React developer so you are unable to look at it objectively. I honestly do not particularly care about either React or JQuery, I was only providing a source for what someone else said, which was that React is "used on a microscopic fraction of websites". Which both my source shows and the non React scoped version of your source also shows. I think the reasons you do not see jobs asking for Jquery is because it is almost assumed that a web developer knows how to use Jquery since it is so ubiquitous. You cannot assume that for a framework that has less than 1% of the overall market share. If React is great, it will survive on its merits and do well but I tire of hearing about every new framework that is going to disrupt the market and revolutionize the web to only be gone 5 years later. I just want people to be realistic in what they say. Sure React is growing but if its overall percentage is going down, that means other things are growing faster. Not saying React is going to die or even that it is dying, just that it should be looked at realistically. 
You know that the attitude you have is a huge red flag to employers, right? If you are re-writing already established code, you are writing bad code. Writing code is fucking easy. Writing hardened, tested code is the hard part. One of the first things you learn as a software engineer is the principle of DRY, and you‚Äôre apparently not even there yet. The attitude you hold just appears to us, who are actual software engineers, to be naive, like some boot camp scrub. Either choose to get better, or keep your shit to yourself.
I'm sorry nobody told you.. This sweeping generalization is definitely true and you don't know JS :s 
There's plenty non-jquery implementation of jQuery.
thank you!! I¬¥ll read it!
Hi, I'm a Redux maintainer. We're currently working on a package called `redux-starter-kit` that contains some utilities to help simplify common concerns about Redux, including store setup, generating action creators, and writing reducer logic and immutable updates: https://github.com/reduxjs/redux-starter-kit I'd appreciate it if you could take a look, try it out, and give us some feedback.
thank you both guys for taking the time to write all of this!! It really helps &lt;3
thank you!!
Nice! I fixed your keyboard controls a bit :) [https://jsfiddle.net/3m5L089d/52/](https://jsfiddle.net/3m5L089d/52/) That is how we do it in games :D
&gt; To that end, jQuery and its imperative style is becoming an anti-pattern. There are some code decisions they made that are anti-patterns as well. Example: jQuery‚Äôs forEach method handles the callback function with arguments the following way: .forEach((index, element, array) { ‚Ä¶ }) Whereas the JS forEach API handles the callback arguments like this: .forEach((element, index, array) { ‚Ä¶ })
Plain Jane JS has improved a fair bit
I use PyCharm or Atom most of the time. Doesn't mean it isn't more efficient and maintains cleaner looking code by using &lt;10% of the characters. 
Beautiful, so much smoother!
Why would any piece of software be a taboo? If you can't talk about it, how can you discuss even the merits of replacing it?
Yeah it does. If you're using the same CDN a previous site that the user has visited the jQuery file will be cached on their device
I am using it because I'm a JS noob and I don't know anything else (yet). It's much handier than just plain JS.
I believe your forEach example is more of a JS anti pattern. Look at any other language (i know it's a bold claim but I'm making it), it's always index, element
You'd be surprised how concise some stuff actually is in JS, [http://youmightnotneedjquery.com](http://youmightnotneedjquery.com) Sure, not everything, but I would certainly recommend putting in the effort to learn JS properly, it will help you improve as a developer by leaps and bounds.
I'm a React guy, but I'll do Angular if asked to. Because I work for an e-commerce platform that supposedly will benefit from a framework in an enterprise format, Angular should be the way to go. Also, I get people contacting me almost every day with job postings mostly asking for Angular Devs. Not sure how it caught on with all the craze, but companies want it now. Even if my job has me working in Angular, I'm still doing side-projects in new or different technologies, like reacr-native or maybe WASM/RUST/GoLang
Couldn't of said it better myself. In the time angular has risen and fallen again jQuery is still alive and kicking. The same will be true when vue and react are replaced and forgotten
An interesting approach! will dive into this deeper tomorrow.
&gt; Redhat distributions are supported for a decade. That's "enterprise". Same with windows, 18 months is laughable.
here here
Looks really useful now when I've finally decided to learn more about js. Thanks! (bookmarked) 
Polyfill all the things 
It is automatic you don't need to adjust anything .. readability module will filter the "distractions". However readability module not always "gets it" it has rather difficult job to determine what is the "real" content. For me the cool thing is to see sometimes heavy websites with few MB of stuff get transformed into 3-5 kb of pure formatted PDF text.
jQuery is massively useful for beginners and small projects. It simplifies a lot of things. It could work for larger projects, as it's smaller than a full framework, but it really shines for simple projects. Like a website for a bakery.
I like keen but it gets expensive quickly. Just ingesting 500k events for example is instantly $50. It also has some querying limitations which would have resulted in some data duplication making that original 500k a lot larger. I started looking into SlicingDice myself for a project because of both the pricing model and the ability to easily compose somewhat complicated aggregations in JSON to send over a REST interface. I was looking to create some sort of user facing query builder and it seemed like it would fit well. Unfortunately I emailed them a couple of times with a couple of questions and never heard back from them which doesn't bode well. If you come up with some alternative I'd be interested in knowing.
Legacy support is totally a thing in some enterprisey/large projects where you don't have the benefit of a full refactor. That said, something like [cash](https://github.com/kenwheeler/cash) can be shimmed in and help make it less painful. 
Wut, why would it be? It's like saying flip phones are "taboo" because smart phones exist. Smart phones can do a lot more, but if you just wanna make a call, then flip phones are heck of a lot cheaper and do the job
From my experience , the programmer who considers himself a "good programmer" are almost always bad. 
React is also great for small projects, too. 
jQuery has been in use for longer, though.
"Concerned with page load times" &amp;#x200B; This never made any sense to me as a rationale. The jQuery library size-wize is so small that it has an almost negligible impact on your page weight. Plus if you include it from a popular CDN (such as Google), then the user likely already has the library in their cache so the extra page weight is effectively 0.
Thanks for clarification. Are there any efforts to standardize a virtual DOM implementation?
True, but there's becoming less of a need to use it now that front-end libraries such as React can act quicker. Perhaps there's a few more lines of code to be written with React, but it's more Vanilla and is certainly lighter.
Does WebRTC have push to talk, I thought it was just for phone calls or webcam chats.
Oh cool! That does look like a big step in the right direction. createSlice in particular looks really interesting. Anything that helps us write less code and maintains readability and functionality is a good thing. Thanks!
there are so many other options out there, I never really liked bootstrap
I had half a mind to just create and manage a plain old global object or write my own state management, but that seemed excessive - we use a custom state management framework at my work and I do not want to relive that at home. For now, I go the Redux way, despite seeing simpler options for my current use cases.
It sounds cool, but it appears they don't have docs or a knowledge base in English or any other languages I can read. Chinese is on the to-do list... but after many others. I'm afraid that rules it out for me.
More vanilla? That's a very strange thing to say.
Funny thing is I just said a lot of JS programmers seem bad. I never called anyone good. So where does that leave me? ;) I'm assuming you're taking a shot at me. Most of the comments were and I don't know why some other ppls comments got downvoted.
Awesome work Tyler!
This is quite literally the most perfect "pro jQuery argument" I've read in a long time. Most people just reel and scream about it being awful, forgetting about context and situational needs.
As /u/[ChristopherBate](https://www.reddit.com/user/ChristopherBate) pointed out, you're looking for WebRTC, which I believe is what Discord actually use. WebRTC is a set of technologies &amp; protocols that ship with most devices (if not all these days), especially web browsers. Unfortunately it's not as simple as importing a package and calling a function - there is an offer/answer protocol that can get quite elaborate. There any many resources, even from Mozilla: [https://developer.mozilla.org/en-US/docs/Web/API/WebRTC\_API](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API). If your needs are small or if you don't mind paying, Twilio is excellent, as well as VoxImplant (in my experience).
That React is more vanilla? Or should be written with vanilla js? I guess I mean raw JavaScript. 
GOOD REPLY. Out of all the messages I received today I think you're the second or third person who is completely sane and practical.
Thank you!
&gt;Ahh thanks, I didn't know that, webrtc has a push to talk as well. Thanks i'll look into all three options some more.
You have my axe. 
Hey Tyler, I took your react course in the past, Thanks for constantly giving back to the community!
Why 3DES?
I might be taking a shot at you ;) But I don't mean to insult. I just find it good to question one's own superiority. I too think other programmers are really crappy sometimes. But it's always healthy to think what they think of me
Dude I hate to be that guy but just printing pure GET request data onto a page is asking for your site to get fucked by XSS exploits. &amp;#x200B; /r/lolphp
Not that I know of, but then I haven't kept up with front-end for a few months. And it's working out pretty well for me so far :p
Since it's a `forEach`, you are more likely to use the element itself rather than the index. So the `element, index, array` order seems the most appropriate - someone not using index can simply omit it.
Great explanation, thanks for it and js-visualizer.
There is a big difference between supporting IE11 and IE8. Targeting IE is also possible with Babel, which is the most common practice for non jQuery users. A different option is using typescript and targeting ES5, which is what I use nowadays for new projects.
Thanks!! Great work, this will help me a lot.
You must have been doing this for about a year, right?
Using jQuery? I've used jQuery since its inception, I've been a developer since the late 90s. I've used jQuery quite a bit in my career, but I've never used it for "one little thing."
Both are really good, Max goes over things in more details (maybe too much details depending who you asking) And Wes use a project base way of learning and tells you what you need to know! Warning the Wes course doesn't include Redux, the Max one does!
Besides those courses, I'll give you some general resources (most of which are also linked in the sidebar of /r/reactjs ). - Definitely check out the official docs at https://react.js.org . - My [suggested resources for learning React](https://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-react/), and [React/Redux links list](https://github.com/markerikson/react-redux-links) - Kent C Dodds has some great [React beginner videos on Egghead](http://kcd.im/beginner-react) - Tyler McGinnis has [a guide for learning React in 2018](https://medium.freecodecamp.org/a-comprehensive-guide-to-react-js-in-2018-ba8bb6975597), some great paid courses, and also just did a [free React online bootcamp](https://tylermcginnis.com/free-react-bootcamp/) Also, come visit the Reactiflux chat channels on Discord. We've got a ton of friendly people hanging out at all times, happy to answer questions. It's a great place to ask questions and learn. The invite link is at https://reactiflux.com . If you've got some further specific questions, please ask!
How is writing react code vanilla in any way? 
I think the issue is that it's an article to advertise the library they built at wix, and not as much about what problems they were solving. I think it needs either a clearer title to show that this is an _introducing carmi_ article, or real examples of what problems it solves.
It's a stupid choice I've made because I though that it was better than AES. Mistakes were made, I'll change 3DES by AES, it's a faster and more powerful algorithm.
Appreciate the links. I'll check these out and join the subreddit.
This is great insight. Wes actually has a free [Learn Redux](https://learnredux.com/) course which I probably should have included in my comparison table.
I also have [a bunch of suggested resources for learning Redux](https://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-redux/) as well, including my ["Intro to Redux" presentation at Reactathon](https://blog.isquaredsoftware.com/2018/03/presentation-reactathon-redux-fundamentals/) and the slides from my ["Redux Fundamentals" workshop](https://blog.isquaredsoftware.com/2018/06/redux-fundamentals-workshop-slides/).
You could put the output from jsbarcode into a hidden canvas, then render that as an image into another canvas and put your own stuff on that one.
Yes he does, and also a brand new Fullstack Advanced React and GraphQL course that shows you a way better way to do things even just on the React side without React.
I guess what I mean is that I'm not using framework code or selectors but mostly using raw JavaScript. 
Looks great! You might want to put the results inside a &lt;code&gt; or &lt;pre&gt; tag, as code in a non-monospace font generally looks kinda weird. Keep it up!
Looks great! You might want to put the results inside a &lt;code&gt; or &lt;pre&gt; tag, as code in a non-monospace font generally looks kinda weird. Keep it up!
I have a question regarding closures: If I create this global variable and an object: var narf = "hello, " var derp = { sucka: "sucka", foo: "foo", derpTwo: { nifty: "nifty", doEetMang: function (thing, otherThing) { console.log(thing, otherThing) } } } And then call: derp.derpTwo.doEetMang(narf, derp.sucka) Does the resulting closure retain access to the full context? i.e. does the closure contain derp.foo and also the whole window object? Or does it just contain the variables expressly used? If you'd like to understand why I ask, check out this thread on Stack Overflow, particularly the third answer by SasQ. Closures seem to be one of those topics that has a number of answers that seem to conflict, and I'd just like to get some... some... closure... Thanks!
Depends! Imagine if your web app takes off and your users demand new features/functionality. Do you want to be able to add functionality and make changes easily? If so, you should consider refactoring. It doesn't have to be all or nothing. After you release you can work in refactors as part of any potential bug fixes you make based on customer feedback.
Useful. Thanks. Just had an interview where I stumbled over discussing closures. Totally understand them in practice but finding the right words to explain them is always a challenge. 
You called current a const but then used it as an already-existent variable. Using current doesn't do anything except make it harder to read, imo. xByZ[current] = xByZ[current] || []; xByZ[current].push(x); 
People don't pay you based on how organized your code is, people pay you based on whether your product provides a solution to their problem. So I would say if there's a market for your product, just charge.
Literally have my JS worldview overturned every couple of weeks thanks to your e-mails. Adding this to the list of required reading... but mostly because it's titled 'ULTIMATE'.
Those are neat but it looks dangerously easy to forget to prepend the `sql`.
I have created actus HTML 3D and I would like to hear comments about it. Actus HTML 3D is a jQuery library that helps you create a 3D world on your web pages. Arrange and animate your content in 3D space with just a few lines of html. You can download it and see examples and documentation here: [http://actus.works/code/](http://actus.works/code/) &amp;#x200B;
you write vanilla js when writing react code
I've read a few of your articles. They're excellent. Thanks for the contribution.
‚ù§Ô∏è
I spoke with them via chat. It doesn‚Äôt look good. - they say they have 1.5 billion queries per month or something, but they also told me they are in customer acquisition phase. Sounds a bit off, they have a lot of logos in their website, but none are from customers. For me it seems they are trying to trick us into thinking they are bigger than actually are; - it‚Äôs a new startup using some tech providers I don‚Äôt know; - didn‚Äôt find any news about funding; - they kept - conveniently - forgetting to answer some questions; - they don‚Äôt know what gdpr is (common they work with data manipulation and don‚Äôt know what is it?) We are not going to use them, and would not recommend. I‚Äôm taking a look at Google BigQuery, we have to do more work on our side but it‚Äôs scalable, it‚Äôs google, has sql support (even though wouldn‚Äôt be my first choice, it‚Äôs widely known) and fairly cheap to start with. Open to suggestions though.
If the code works under all foreseeable real world scenarios, the beauty of the code is immaterial. Efficiency improvements can be made incrementally, and should be made as quickly as you‚Äôre able to. A big ball of duct tape and bubblegum can get the job done, but if you need to add features down the line, it becomes a hassle. 
Is \`\[...document.querySelectorAll()\]\` taboo in 2018?
Nice post history
Shared this with coworkers, thank you so much!
are there any ecma proposals to include different number types or is javascript stuck with floating points for the foreseeable future?
Totally, you could use the npm package `button that does what I want` instead.
Thanks. What kinds of projects in your experience?
Can you share the code? 
&gt;/\* &gt; &gt;\* Name : Alex Mattucci &gt; &gt;\* Date :October 16th, 2018 &gt; &gt;\* File Name:A004Matt - SimpleCalculator &gt; &gt;\* Description:Javascript for Assignment 4 - Simple Calculator &gt; &gt;\*/ &gt; &gt;var operator = prompt ("Enter an Operator (+,-,\*,/): "); &gt; &gt;console.log (operator) &gt; &gt;var operandOne = prompt ("Enter the First Operand (Numeric Value): "); &gt; &gt;console.log (operandOne) &gt; &gt;var operandTwo = prompt ("Enter the Second Operand (Numeric Value): "); &gt; &gt;console.log (operandTwo) &gt; &gt;var answer = function simpleCalculator (operator, operandOne, operandTwo); &gt; &gt;console.log ("The answer is" + answer) &amp;#x200B;
&gt;simpleCalculator I think you need to complete this function i.e. var answer = function simpleCalculator (operator, operandOne, operandTwo) { //Your logic goes here };
oh ok, what do you mean by logic? &amp;#x200B;
oh, and so I have to do that for all of the operators?
I did this for the first one (addition) but it still has some errors. This is what the code looks like now starting at line 15 &amp;#x200B; var answer = function simpleCalculator (operator, operandOne, operandTwo){ switch(operator){ case "+" : ans = parseInt(operandOne) + parseInt(operandTwo) break; } console.log ("The answer is" + answer);
I think closures are better understood if you've taken a compilers class or learned any functional languages. Variables narf and derp are defined in the scope "above" deEetMang, so are accessible to doEetMang if expressly used. The jit compiler will allow access to variables on declaration of the function. If you were to debug into doEetMang and log derp, you wont get anything. If doEetMang: function (thing, otherThing) { derp; console.log(thing, otherThing) }, derp will be accessible.
var operator = prompt ("Enter an Operator (+,-,\*,/): "); console.log (operator) var operandOne = prompt ("Enter the First Operand (Numeric Value): "); console.log (operandOne) var operandTwo = prompt ("Enter the Second Operand (Numeric Value): "); console.log (operandTwo) var ans; var answer = function simpleCalculator (operator, operandOne, operandTwo) { &amp;#x200B; switch(operator){ &amp;#x200B; case "+" : ans = parseInt(operandOne) + parseInt(operandTwo) break; &amp;#x200B; &amp;#x200B; } return ans; } &amp;#x200B; &amp;#x200B; console.log ("The answer is" + answer(operator, operandOne, operandTwo)) &amp;#x200B; this works fine &amp;#x200B;
Add four spaces at the beginning of each code line please. Take a look at the mess in your original post and comments. Four extra spaces at the beginning of each line will fix this. And the best thing is that Reddit allows you to go back and edit any time. 
I agree completely. Good write up.
Sorry to say this, but if you can‚Äôt figure this out with the help of a bit of googling, you are in the wrong industry 
Hi /u/estatarde, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `monterail.co[m]`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [monterail.com](/search?q=%28and+site%3Amonterail.com+author%3Aestatarde+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|65|65% [hi.monterail.co](/search?q=%28and+site%3Ahi.monterail.co+author%3Aestatarde+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|33|33%
Curious about point number 1: You said you go straight to TypeScript, except for frontend? Care to explain? What are you using TypeScript for when it *is* your go to?
30kb is a drop in the bucket compared to the payload for most websites. If it loads quickly and gets the job done, at a certain size it may be good enough, if not I anywhere near ideal.
What do you mean self-hosted? You'd have the server in your house?
The services you listed are more on the PaaS (platform as a service) side. You‚Äôll probably want to look for IaaS (infrastructure as a service) instead. For example, you could run your server on an AWS EC2 instance, or using their container service.
minimization is part of optimization mate
minimisation is part of optimisation mate
&gt; You'd have the server in your house? That's what I thought. I believe you could do that with a raspberry pi, no?
Possibly, or use a VPS, but I'd basically just like to have access to the server itself.
I'm looking more for something in the middle; a sort of way to host my own PaaS if you will.
I see, in that case take a look at https://www.openstack.org, perhaps that‚Äôs something that could help.
I mean so does document.findElementEtc and querySelector has not been implemented in all modern browsers iirc (also not sure if it returns an array for a single element result)
&gt; webrtc has a push to talk as well. Not really, it's a set of technologies/protocols that have APIs you need to use to build the push-to-talk. Twilio/VoxImplant/etc wrap WebRTC to make it easier.
I echo all the other praise. Thanks for a grant article and the awesome new advanced js course. 
Super late reply. I stand corrected. Thanks for pointing that out. 
Thanks for the suggestions everyone; someone on /r/nodejs mentioned Dokku and that sounds like exactly what I was looking for.
because it's parsing binary into decimal. Binary is base 2 (0 and 1)
You're converting text to a number, let's say input is 1010,if you don't tell it its base 2, it will see it as 1 thousand ten, if you tell it its base 2, it'll recognize it as ten
I like to use Linode for my development platform. As an Iaas provider, you can customize your server exactly how you want. The also have scripts you can use to add things like docker and a node server at initialization. 
You could try https://codereview.stackexchange.com/
How big is the impact? Are there bugs that will make your clients' life more difficult? Are they going to base decisions on something that is potentially wrong? Are they going to discover a bug that will corrupt their data, or that will take very long to fix due to code messiness, which will lose your clients' money? Let me ask you this. Would you trust a bridge that was built like your program? The engineer just put something together where the bridge was needed. He wasn't that experienced, so all of his gears and connections are messed up and misaligned, his bearings are put together like he was just experimenting and having fun, rather than calculating and understanding the force distributions. Now, it's done, he tried it and it works. It swings a little, but it's barely noticeable. He even rode his car on it once to prove a point. Sooner or later, the bridge will collapse. Under bigger load, under different conditions, different temperature, something will happen and it will break. It will bring down whoever used it and cause them damage. Depending on your particular program, something like that can happen to you. Sudden service shutdown, because you had a memory leak in your code. A bug that you missed because you didn't use a correct type. Sometimes a hacker exploiting your user's data because of a security hole where you forgot to filter user's input. Those things are always a result of not following proper programming principles, of not using automated testing, etc. I don't recommend shipping it and selling it. You are lying to your customers (by omission, sure) who think they can rely on your software. Instead, I strongly suggest learning programming more formally (it could just be taking online courses), becoming a better programmer by using better coding principles (like SOLID) and by having better coding procedures (like unit testing, type checking). Do not listen to people who tell you to ship it and sell it: they just project their own laziness on this situation.
You're great Tyler, also serving as the basis of the training material I'm giving junior staff, so you make me look great too! :D
I really recommend a book [Clean Code by Robert C. Martin](https://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). It can really help you understand how to write clean code, which you can use and improve right away.
If you can explain me why MD5 is a bad choice as KDF and what is better to use
I beg to differ. First of all, a bridge has a completely different function. Plus, you're making a lot of assumptions. You don't know what standards OP is using to measure. For all you know, his "bad" code is your best code on your best day. You started your reply with questions, didn't wait for an answer, then assumed the worst. If the code does the work, then the customers should have it. Have you thought of what the customers stand to lose without this code? Also, if the way the code is written has **no impact** on the customers, then that's great. Most likely, it will just be hard to maintain. So, what's the solution here? If people are paying, then OP needs to rewrite the code better. That's it.
There's a few reasons for that. Firstly, its output is 128 bit, so you can never generate better than a 128 bit key. AES 256 won't be feasible, for example. Secondly, even "good" pass phrases tend to have less than 128 bits of entropy. This makes your "key" a lot less. The workaround to that is to make your KDF slower. Without looking at third party modules, Node crypto includes .pbkdf2, which is probably your best option.
https://developers.google.com/web/updates/2018/05/bigint
jQuery is a library for manipulating the DOM. I am sure that a good developer could do a good seperation of business logic, templates etc. But the lib does not really push the user to do so. If you look at something like react, which is not even a framework, you have an emphasis on a good seperation of logic and presentation. As your code grows you are in a much better place for moving forward. Gone are the days of minimal javascript involvement and hopefully spaghetti code on the front-end. 
You don't specificy a keyword (eg var, let) when you declare your count variable. This makes it a global variable. Then you call a rect function that isn't shown, which possibly modifies the global count variable and interferes with your loop.
&gt; First of all, a bridge has a completely different function. It was an analogy and, quite clearly, I drew some comparisons and gave examples how, depending on his program, it may fail similarly to how bridges fail. &gt; Plus, you're making a lot of assumptions. I made no assumptions. I think my advice applies to most projects, especially SaaS, which OP is thinking of using. I assumed the worst because that's what you should always do as a developer, an engineer, and literally anyone responsible. &gt; If the code does the work, then the customers should have it Programmers have no obligation to provide any service or sell any software. If they don't want to sell it, they are free to do other stuff. If their software is "garbage" and they think it needs improvement, all the more reasons to not release it until the code is cleaner and more reliable. Why does it have to be done asap all the time? Customers cannot lose what they do not have: there is no expectation, there is no reliance on a technology; they may be doing things inefficiently or manually, but at least what they're doing is reliable and what they are used to. Also, happy cake day! 
Ok, I passed WarShield to AES-256-CBC with static IV because of files parsing issues. The key is now generated with crypto.pbkdf2() using SHA512 to get a 32 length key (AES-256-CBC limitations).
You can find some interesting discussions about this article on Hacker News: https://news.ycombinator.com/item?id=18220020.
If you charge monthly for it, you are absolutely on the hook for bug fixes. Constantly. And if the code is as bad as you say, you'll have plenty of them. If you don't want to spend more time on it, don't plan to charge for it.
I've resolved it :) Thanks for your help! The loop() function causes draw() to execute continuously. If noLoop is called in setup() the draw() is only executed once. In this example click the mouse to execute loop(), which will cause the draw() the execute continuously.
findElementById (aka a single element does not) but yeah, element**s**ByClassName does. querySelector has been around since Chrome 1 and even has support in IE8. It's supported in all major mobile browsers as well. selector returns a single element, querySelectorAll (as the name would apply) returns a collection of multiple elements.
Tell that to every other programming language... Ever...
```js "use strict"; class Vanilla extends React.Component { render() { return React.createElement("h1", null, "vanilla"); } } var main = document.querySelector("main"); ReactDOM.render(React.createElement(Vanilla), main); ```
Since that's using JQuery, you'd want to set a min of 0 and a max of 1 and a step of 0.01 on the slider, hook into the `onChange` event of the slider, and do something like this; $('#mySlider').on('change', (e)=&gt;{ document.getElementById("myVideo").volume = $(this).val() }) (This assumes you have a HTML `&lt;video&gt;` element on the page with an id of `myVideo`)
I've used Inferno in SVG drawing projects for example.
minimizing javascript is not code optimization, it's network optimization. in general, less code != better performance.
There's _WTF Wednesday_ each week. The post should go up any moment now. It gets pinned so you should see it. [This](https://www.reddit.com/r/javascript/comments/9n0s1j/wtf_wednesday_october_10_2018/) is last week's post, just so you get an idea. The explanation says: &gt; Post a link to a GitHub repo that you would like to have reviewed, and brace yourself for the comments! Whether you're a junior wanting your code sharpened or a senior interested in giving some feedback and have some time to spare, this is the place. Unfortunately, while I think the idea is nice I'm afraid participation is sadly very low. Both from people showing their code but even more from people giving reviews. Personally, I have to say that in the past I enjoyed reviewing code for other people (even before WTF Wednesday started), but I admit I slowly stopped doing it. I can't say there was ever much activity, and _to me_ it mostly felt like wasted effort _most_ of the time. Only a very small percentage of people asking actually wanted a honest answer. Many just wanted to show their thing and be praised, many get defensive when getting feedback they wouldn't agree with, and even more than that simply ignore any feedback received. I'm _not_ saying this is the case for everyone and I'm certainly not saying this is the case for you, since you're clearly and directly asking for honest feedback. But, _in general_, it is what happens in _most_ cases. With all this in mind, well... I don't know what to tell you. Try WTF Wednesday if you want. Some kind soul might even give you an interesting review. Just don't expect too much. And maybe try and go some place that is specifically dedicated to this. [SE's Code Review](https://codereview.stackexchange.com/) has already been mentioned. There's also /r/codereview here on reddit, which I guess is _a bit_ better than WTF Wed, but is also very hit-and-miss. You might get interesting feedback if you're lucky, but you'll have to be lucky. There are some other sites... But lately most people that still do code reviews tend to do it _as a service_... I mean, paid. You can find a lot of learning, mentorship, and even people at freelancing sites (Upwork and similar stuff), that do it for a price. I've never used any of them, but who knows, they may even be good, perhaps. You may find better success at some small, possibly local, group or meet-up. Maybe just look for someone, one person, willing to act as mentor in general and find a suitable arrangement for both. I know people that get paid for it and I know other that are willing to mentor for free. In any case, most only take a very small number of _apprentices_, maybe just one or two, so it's not easy to find a good, and available, mentor. I'm sorry I can't paint a brighter picture, but this is what I have observed. Maybe others have had more positive experiences or can give you different advice. From my POV, generic, anonymous code reviews just don't work that well for almost anyone.
&gt; You just made a copy of a react object you don't know what you're talking about
Neither do you.
Why are they skipping 3? Iirc angular too did that. 
Yeah, it's (99% of the time?) better to be verbose and not assume the underlying structure is going to do what you _think_ it'll do.
my guess is he tried creating a class and used implements in some way, because otherwise it should work i think `export class Something { ... } ` vs `export class Something implements FunStuff, BoringStuff { ... }`
Doesn't appear to be responsive?
There's a note in their docs about responsiveness, and they say that it's up to the developer on how to do it. That being said, not everyone cares about responsiveness. I'm currently building some react apps that explicitly are desktop only. They're internal business reports apps, that we want to be very usable and maintainable, but no one is using these on their phone. I only have one size breakpoint in the app. I like that there are UI frameworks that are optimized for desktop webapp development too. Blueprintjs does a good job of this, in my opinion.
DM me I‚Äôll take a look 
C# LINQ is element first, index is optionally 2nd and often omitted. In the vast majority of the code I write the index is not used. There just aren't any common usages for it in my problem space, and about the only uncommon usage of it is in pagination.
Everything I do on nodejs for backend I use Typescript. Right now I'm working with microservices and I'm writing everything with Typescript. There are some REST APIs, some automated scripts, npm libs and other services without web endpoints. Aside from those, I also create microservices for the frontend and I'm using VueJS for that. Even though VueJS work well with Typescript, I prefer to use es6 syntax since it's what they use in their documentation. &amp;#x200B; On the backend though, I'm strongly using NestJS to quickly build REST APIs which is heavy on Typescript. I have a npm lib published on github which is written using Typescript: [https://github.com/aluisiora/node-routeros](https://github.com/aluisiora/node-routeros)
I done the Academind a good few months ago and I learned a lot! There are a few bugs in the project though, especially to do with the router. For the price I'd recommend the course! React for Beginners is great fun to do and I learned a lot as well. I haven't done the other ones but advancedreact is on my list. Check out Ben Awad on YouTube as well, he has loads! &amp;#x200B;
Step 1: buy "JavaScript: The Definitive Guide" Step 2: read the book you bought at step 1 and do exercises with things you learnt there Step 3: build a project with the knowledge you got from step 2 Step 4: Enjoy
Try making programs yourself. That does help quite a bit, especially with Node or a browser JS console as the REPL to have a sandbox
Looks good. I personally judge a UI Library by its availability of date picker. If it doesn't have it, then they didn't pay full attention according to me.
take my upvote!
This. Programming is like riding a bicycle. It doesn't matter how much theory you read, you'll only learn when you start practicing.
Thanks for the suggestion will check if the book is available or not .. And can you please tell me where can i get ides for projects that i can make with my current knowledge I know variables,loops,functions,objects,arrays,DOM,conditional statements. 
Yes that's what i want to do. Can you tell me where can i find projects with js code so i can create it THANK YOU :) 
My best advice is a quote from Courage the Cowardly Dog: "Sucking at something is the first step at being kind of good at something." I honestly think one of the best resources for learning javascript is [freecodecamp.org](https://freecodecamp.org), btw. Also, search Meetup for local programming groups where you can go and meet people and ask questions in person. &amp;#x200B;
"push to talk" is just "mute my mic when I'm not pressing the button". You can do "push to talk" over a regular cellphone call by muting yourself when you're not talking :P
&gt; My best advice is a quote from Courage the Cowardly Dog: &gt; "Sucking at something is the first step at being kind of good at something." Did you deliberately mis-attribute it, or did I just forget that Courage said that?
You need to understand primitives, inheritance, some design patterns, scoping and others :). Trust me, that book is the bible of JS.
My last company had projects that had legacy jQuery code and we gradually moved them all to ReactJS and never looked back. Requirements should dictate technology in my opinion. I haven't required jQuery for any project or a problem related to it hence I haven't used it since I moved to ReactJS. 
Stopped reading at "Developers can use generators as functions to stop and resume the code execution". Koa 2.x, out well over a year, eschews the need for generators in favor of async/await. Guessing this article was lifted from another out of date article.
Depending on your browser support, using Intl.Collator for sorting and Intl.Collator with usage: search and sensitivity: base would likely give you better and more performance results.
Ok thank you will get the book .. :)
thank you for the advice :) &amp;#x200B;
i know about [freecodecamp.org](https://freecodecamp.org) and am learning JS from there also ... Anyways thanks for the advice :) &amp;#x200B;
That's awesome thanks a million!! Lol thought they were different concepts.
I wouldn't worry. If you know your way around jquery and have wired together some sort user interface with it, then that is pretty much the hardest possible way to create a frontend. Everything that comes afterwards will be easier no matter what you pick. As for "plain JS", no one creates UI using plain JS, nor should anyone doing it with JQ, that makes it one problem less. 
Thanks! I'll def do that for my next project to learn, I saw styled components 4 just came out ! Appreciate you taking a look and if you saw anything that stood out any feedback would be helpful for me!
Hi /u/TheCurryMonsterr, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/neutral24, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Agreed. It's a valid point, whoever is downvoting it is stifling discussion. 
Hi /u/Milesman34, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Nextrex12z, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Because when dealing with money, interest rates, etc.. cents aren't enough. You need higher precision, and you need it to have as little error as possible(ideally, zero).
I'm afraid I have run out of fucks to give about new JS frameworks.
I have no idea why I'm getting down voted either. My tech stack specifies that I support the latest versions of Chrome, FF, edge and IE. So it could be worse, but I do not have to support any mobile interfaces or browsers. Usability and functionality are important, but literally none of my users are using a touchscreen. Making it mobile friendly is way outside of my requirements, and with the amount of info we have to show on a screen at once, this would be very difficult to pull off anyway. 
* Native browser scrolling behaviour - component don't emulate scrolling, only showing custom scrollbars * Ultimate performance - 60 fps with help of RAF loop * Desktop or mobile - scrollbars looks the same on any device * No extra stylesheets required - minimum inline styles out of the box * Fully customizable - want a hippo as a scrollbar thumb? Well.. I don't judge you * No matter what changes the content - scrollbars always stay actual * Total tests coverage * Scrollbars nesting
If I'm interviewing you for a Javascript job (or PHP, or Python, or whatever) and you can't handle a `for` loop and 3-4 `if` statements, you're not qualified for the job, plain and simple. Asking someone to complete such a basic task is not a crazy thing, and it certainly shouldn't take eighteen minutes.
Agreed. Sometimes data heavy applications (big data grids, table input, etc) isn‚Äôt even suited for a mobile experience. It‚Äôs nice to have frameworks which focus on desktop instead of focusing on being responsive in some cases.
In both cases it shouldn't work. You cannot use any kind of declaration. For `var` you already used the variable with name i so you can't declare an variable (which would overwrite `let i`'s scope) with that name. For `let` you already declared an variable with that name in that scope, so you can't redeclare it, only assign. `for(;;){...}` does infinite loop
You can't reference a variable declared with let or const before it has been declared. I.e. the 2nd one breaks because you try to log it before you've declared it. [More info](https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth)
But I have a `let i=0` in the for-loop initialization part so that the first example will work. So I expect the second example should log `0` and throw an error about redeclaration of `i`.
The curly braces create a new block, and in that block, the second `i` declaration is in the temporal dead zone when `console.log` tries to use it. You know you're in a different block scope because you wouldn't be able to redeclare `i` in the same block scope as the for loop. for (let i = 0; i &lt; 1; i++) { let i = 'fish'; // this would error if I was in the same block scope as the for loop's `i` console.log(i); } // fish
[Dojo 3 was released this July](https://dojo.io/blog/2018/07/27/2018-07-27-Dojo-version-3-release/).
Thank you for the feedback. It's fixed. I mixed up the idea of "id" vs "episode-id". Very different concepts. Don't know how I missed that, lol. :) 
I judge a lib by the power of its datatable component. Looks like theirs is pretty robust.
Just started your advanced js course, that tool you've built to show execution context is awesome, I would have struggled a lot without being able to test it myself in such a visual way. I think I'm about halfway through your library, any new courses on the horizon?
Or just use the simpler ``` for (let p of promises) { await p } ```
Looks like dropdown doesn't have a length attribute. 
I believe AWS has APIs and Node libraries, so most of what you want to do can be done using Node scripts. You can also use Docker or Dokku to automate setting up the environment. 
Save yr last precious fucks.
Seems like normalizing the search query would solve it
http://youmightnotneedjquery.com/
Going to update React Fundamentals with Suspense and other new React stuff. Then will probably start working on a GraphQL course.
I didn't down vote, but I would be EXTREMELY reluctant to commit my codebase to a UI system that didn't consider responsiveness. First because project specs often change and you'll need mobile support later. Second because it's not easy to add responsiveness to components after-the-fact if they weren't built with responsiveness in mind. With so many other component libraries to choose from, why would I choose one without support for something as basic as responsiveness? Companies release these libraries to build their brand within the open source community - get their name out there for hiring and contracts. When you leave our features like date pickers and mobile support, it makes me think those are their priorities - not building a great, flexible system for developers to use.
Yeah! Reduce returning a previous promise instead of an accumulator is sort of a break from the established way of using reduce. Reduce by itself can bring some cognitive load and using it in this clever way adds even more. I think your solution is much more expressive. While css-trick thing works, it has more a slightly higher wtf factor to it. 
That won't work, all the promises will fire at once, you need to create the promise inside the loop: ``` for (let id of ids) { await getItem(id); } ```
AWS CloudFormation + Docker can pretty much handle this for you
Have you measured what is slow first?
You can check AWS Elastic BeanStalk for NodeJS that orchestrates many of the creation workflows like Compute power, load balancing, Database, Storage etc,.
Why not just use: await Promise.all(promises); And if you need to do some stuff with each items and you have an Async Iterable: for await (const p of promises) { // do something with p }
I understand the problem you are tackling, but the article doesn't give any concrete answers other than _our magic black box, CARMI, does the right thing_. In and of itself, that's fine, but I think the title of the article and content don't line up very well. Based on the title, I expected to see the "curses" of derived state, real use cases that are painful, and what the manual solution would be. I think it's fine to advertise CARMI as the solution, as long as you're selling it as a better than a custom solution. This is how the article reads to me: - CARMI combines the best things of mobx, redux, and lodash. - CARMI moves all(?) expensive computations to build time. - Derived state is hard because caching. - CARMI was written in a Wix incubator Most of it is fine, but here are the issues I have: - What are the best things of mobx, redux, and lodash that are present in CARMI - What does it look like to use CARMI. It'd be cool to see a before and after on an example, specifically one that is expensive or realistic. - Cache issues aren't necessarily an issue of derived state. I think maybe the title or wording could be updated to be more pointed at caching/memoization rather than derived state. Even when I went to the github repo, it's not very clear what a CARMI solution looks like in comparison to some other (native js?) implementation.
The way JS works is, the interpreter (lexer) scans the block scope for variables before executing the code (parser). The difference between \`var\` and \`let\` is that JS initializes \`var\` variables with the value \`undefined\` whereas \`let\` variables are not initialized at all. The whole process is called "hoisting". You can probably find more info if you google that.
Demo doesn't work. There's a cors error in the console which your application doesn't seem to handle - the loading indicator keeps spinning forever.
[Terraform](https://www.terraform.io/docs/providers/aws/index.html) should automate most of your infrastructure provisioning, you would still have to purchase the clients domain manually, but once you have that domain use is as a var for your scripts. I have a mailer application for clients, all I have to do is buy their domain, insert it into the appropriate .tf file, then deploy to AWS. 
Awesome thanks!
Interesting. Why isn't this solution found more frequently when Googling? Aside from any browser support issues, is there any downside to using this over `reduce()`? The fact that you need to wrap that statement in an async function could be a hassle to some people: async function processStuff() { let ids = [1,2,3]; for (let id of ids) { await methodThatReturnsAPromise(id); } return; } processStuff();
Thank you for the direction! Yeah, I figured it would take some effort, but I can handle doing it manually for now (I only have a handful of costumers), I just wanna prepare myself for the future. Once I finish college, I want to try and scale this into a true business. The AWS console management console makes me a bit lost, truth be told I still don't get exactly what are the differences between ECS, Elastic Beanstalk and CloudFormation, despite having read the docs, so knowing CloudFormation does what I want is a great help. Will be studying docker. Thank you
This sounds awesome, thanks! Will look into it, never heard of this service before üëçüëçüëç
Hi /u/ispeakbinary01, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/tinaclark90, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
But compiling ES6 down to ES5 for backwards compatibility will ruin any logic you have dependent on this.
Hi /u/maple3142, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This sounds ideal. That way I could eventually have a site that creates instances of stores. Thank you!
These look great, how much overhead is implementing a few of these components going to cost me though. 
# [SNEK](https://github.com/Pamblam/snek/tree/multiplayer) This is actually (mostly) not my code, I started it off then basically handed it over to the community for hacktoberfest and I'm more of less just moderating PRs and creating new issues on it now. Any feedback that can be used to create issues would be helpful. These guys have done a great job but there's definitely room for improvement.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Pamblam/snek/.../**4dbfd76a51cb67a49e0867c9f1b3da60640b1a36** (multiplayer ‚Üí 4dbfd76)](https://github.com/Pamblam/snek/tree/4dbfd76a51cb67a49e0867c9f1b3da60640b1a36) ---- 
&gt;Why isn't this solution found more frequently when Googling? The old way to do things has gotten more clicks than the modern way to do things due to age, and therefore is ranked higher in the search results. Something like that, I guess.
My go-to reference: http://2ality.com/2016/10/asynchronous-iteration.html Curtesy of /u/rauschma 
thats really good actually! 
That's not what he's asking for. To _editorialize_ is to interject an opinion; what he was asking for is an objective summary. You could say Inferno is "React-like UI library", or more safely, "UI library", and be 100% opinion free.
Interesting, but even without ES5 compatibility issues I wouldn't rely on this for anything serious. 
Crazy question. Why would I want to use this vs the native platform scrollbars.? 
Again, I‚Äôm speaking specifically about internal business applications which have no future of going mobile, period. Otherwise, I‚Äôm in complete agreement with you, responsiveness is an important aspect.
I've actually got 2 packages I wrote recently, that could use some honest criticism: [https://github.com/tolicodes/node-api-toolkit](https://github.com/tolicodes/node-api-toolkit) \- specifically the queue component which has some weird ways of dealing with promises ([https://github.com/tolicodes/node-api-toolkit/blob/master/components/queue.js](https://github.com/tolicodes/node-api-toolkit/blob/master/components/queue.js)) &amp;#x200B; And [https://github.com/tolicodes/picklejs](https://github.com/tolicodes/picklejs) (r/http://picklejs.com for docs) a testing library I wrote
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tolicodes/node-api-toolkit/.../**queue.js** (master ‚Üí d4ec934)](https://github.com/tolicodes/node-api-toolkit/blob/d4ec934bb7d831f1c24924b750c22f51f83867ae/components/queue.js) ---- 
&gt; Is there a way of transpiling jQuery into Vanilla JS? Not automatically, but you can do it manually. &gt; Would this be a good way of improving a web page performance? It really depends on the context. If you're talking strictly load times, then yes this will improve it somewhat. If you're talking about the functionality of the page after load - if it is slow in jQuery, it will be slow in vanilla javascript too.
I updated my comment above, I do admit I could have clarified it better, by saying "promises will fire at once" I was attempting to get the point across that the requests will not happen during each iteration, but will have already happened before the loop starts. I was on mobile at the time, though that's not a good excuse I should have just waited to get to my machine and written something with more explanation.
Yes, fire your regex test on the update event and only set the state if it passes 
Yep, you can do it üòä take a look at regex101.com it is super easy üòâ
Yep, you can do it üòä take a look at regex101.com it is super easy üòâ
Neither of those execute sequentially.
It seems like he actually understands promises perfectly fine, frankly. The article's snippet: userIDs.reduce( async (previousPromise, nextID) =&gt; { await previousPromise; return methodThatReturnsAPromise(nextID); }, Promise.resolve()); Does the same thing he's suggesting, which you're deriding - it waits for each promise to finish before starting the next one. Depending on the use case, this can very well be preferable to starting all promises at once.
Yes for uploading a large file you are going to most likely want to createWriteStream via your post request from the client. And on your node server / api you want to listen to this stream with createReadStream. &amp;#x200B; This article should help with understanding streams. From there you can use the aws-sdk npm package to send the streamed data to your S3 bucket &amp;#x200B; [https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93](https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93)
Thank You for answer and link page! I try to prepare some regex but still problem with correct blocking of input element.
Cool. Thanks for the thorough answer!
I don't know, but I think it's been hard to polyfill async/await in the browser, and Node.js added support just half a year ago. So it's still pretty new stuff. But really, it is sooo nice! Async/await is the biggest change that's happened to javascript in the last years. 
Yeah man the "push to talk" part of WebRTC is lit af!!!11
On the other hand, const sleep = ms =&gt; new Promise(r =&gt; setTimeout(r, ms)); const sleep1 = () =&gt; sleep(1000); const sleep2 = () =&gt; sleep(2000); (async () =&gt; { for (const entry of [sleep1, sleep2]) { console.time(entry.name); await entry(); console.log(`Done with ${entry.name}.`); console.timeEnd(entry.name); } })(); // Promise {&lt;pending&gt;} // VM330:9 Done with sleep1. / /VM330:10 sleep1: 1001.38916015625ms // VM330:9 Done with sleep2. // VM330:10 sleep2: 2000.8876953125ms Does.
Hi /u/motweb, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/rafael_motaa, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
VueJS ftw üòÅ
Hey guys. Would love your thoughts here. For the last two months I've been working on an app called Polar which is basically an offline browser with for PDFs and web contents which supports annotations. It blew up on Hacker News and yesterday was a flurry of new activity. https://news.ycombinator.com/item?id=18219960 There's about 500 active users at this point and about 150 in the Discord channel actively contributing and making suggestions. REALLY exciting to see the positive feedback.
Fun story: In V8, if an object's keys are all numbers, it treats the thing as an array in some scenarios. So: const foo = {b: '1', a: true, r: null} Object.keys(foo) // ['b', 'a', 'r'] buuuttt...... const foo2 = {1: '1', 2: true, 0: null} Object.keys(foo2) // ['0', '1', '2'] 
In its class, I don't think it provides anything over [blueprintjs](https://blueprintjs.com/docs/) which is awesome and a mature project with a lot more thought out variations in widgets, and more has components, dark mode etc.
I can vouch for Terraform with AWS. We use it exclusively at work. Even if it's a bit to learn before you get even remotely efficient at it, it's totally worth it in the end. Just having your environment written out in code and checked into version control is a huge time-saver. For me it also helps reduce stress over systems suddenly irrecoverably breaking.
I agree. If you need order, don't use an object. If you absolutely need O(1) lookup by key and order for some reason, just use a Map. Iteration over maps is by insertion order, and it's part of the spec.
I do a lot of front-endy stuff for work and jQuery makes a lot of things quicker to do if you're kind of used to it. But I've replaced it with cash-dom which is 4.5kb gzipped and exposes the most popular methods present in jQuery.
Did yo try making them a string to compare them??
This is true, and sometimes has dangerous outcomes. I was once creating a hashmap with numeric keys (ids from a db) and these ids were large integers, eg 12000050000. Even though the js objects were created like: { "12000050000": { "name": "foo",...}, ... } the javascript engine converted it into an extremely large array, which would crash the browser. I experienced and was able to repro the bug only on mobile Safari.
I'm experimenting with both of those, but the promises all resolve in parallel -- not sequentially. Am I missing something? &amp;#x200B; [https://jsbin.com/comeriguko/edit?js,console](https://jsbin.com/comeriguko/edit?js,console)
This is exactly what the linked article says.
Unfortunately the example displayed no momentum scrolling on iPhone so no, this is not like native scrolling. Also I got multiple overlapping scroll bars and other weirdness. 
My dumbass didn't read the article. I just started blabbering about something I half know. 
I don't understand this? The "es5" you're talking about is still gonna be ran by engines that are written with ES2015 support (browsers, node) so they will still preserve order. It's not like because you compile down to an older syntax the engines parse it using older standards. 
Oops, I screwed it up. Should have been: prev.then(**() =&gt;** methodThatReturnsAPromise
You don‚Äôt allow for PayPal payments? I‚Äôm in the Netherlands and I don‚Äôt currently have access to a credit card, other payment added later or should I just get a cc? üò¨
SSR is pretty interesting for React with [Next.js](https://nextjs.org/) and [Nuxt.js](https://nuxtjs.org/) for Vue. If you're in either of those camps, they're definitely worth checking out.
If he transpiles to ES5 it is probably because the users of his application are *not* running ES6-compliant browsers. You can't transpile or polyfill the property order.
If you users are all using ES6-supported browsers, then why are you transpiling it down to ES5?
I'm too busy making promises right now, but I'll give you a callback later to address this.
Solid article!
I've used this for sorting on a project targeting ES3. Every browser has implemented this behavior forever.
If you know the basics you can pretty much do everything. Coming from a developer that‚Äôs started on a job with just the basics and had to do stuff that I didn‚Äôt know I was capable of. You just need the motivation or in this case someone to tell you what to do... 
damn you, take my upvote.
IMO that's overcomplicating it you can achieve the same without creating single use functions `sleep1` and `sleep2`: for (const sleepTime of [1000, 2000]) { const timeName = `sleep(${sleepTime})`; console.time(timeName); await sleep(sleepTime); console.log(`Done with ${timeName}`); console.timeEnd(timeName); } 
This is the answer and how we do things at my shop.
You trend towards answering questions instead of asking them.
You are absolutely incorrect. That's why OP's post warranted its own article. [Here's](https://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order) a thorough StackOverflow post about it, citing the actual ECMA specification, which explicitly states that Object properties do not have a guaranteed order.
As someone who is a total noob and starting coding a few months back I‚Äôm glad i can give my first piece of solid advice lol
That‚Äôs not how the reduce version works. It wraps the accumulator in a new promise for each array element, creating a chain. 
In a sequential list of promises the last promise is an accumulation of all the previous promises. You're literally adding promises to the previous ones. You reduce a chain of promises to a single promise... It makes perfect sense in terms of what a reduce is for. In the example code they aren't returning the previous promise, they return the ".then(callback)" which returns a new promise each time, not the previous one. I agree that reduce can add more cognitive load to those that aren't used to it but, this is perfectly logical way to use it.
Hey! I was looking for something like this. All the web clipper systems seem to just take photos of the page (OneNote, Evernote) and the readers seem to be designed to heavily modify the page to get content only (Instapaper). I wanted something that could let me store content from the web in as close to the original as possible. That means HTML and CSS at minimum. I tried it out. It could use some organizational changes and such that I am sure you know of, like groupings, hierarchical organization, etc. I would suggest having a way to pick and choose which parts of the page to remove, rather than relying on the tablet view of the page. Many websites are missing content or outright broken on tablet screens. Additionally, that sort of cleanup process could be automated away into customized plugins that are domain specific. For example, if I wanted to save a YouTube page, obviously I wouldn‚Äôt be able to store the video (probably beyond the scope of this project), but the thumbnail, description, comments, and suggested video links could be better organized, or maybe comments and suggested videos would be completely ignored depending on the needs of the reason why the page was stored.
Right. That helps with deciding on whether or not to click the link. For example, I may be a backend person who doesn‚Äôt care about frontend stuff. Another option is to add your explanation after the original title, in square brackets.
What are you trying to do? Using the hyphen like in var stamina = -1 is the correct way to type an integer literal. If you are trying to check if Stamina is one of those values listed, that is the definitely the wrong way to do that. First of all read [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator) about the comma operator. Note that the value of your if statement will always be the last operand, `-5`. Because zero is the only falsy number, the javascript engine coerces the if statement to true, and the code inside the if block will always run. A better way to check Stamina would be const ALLOWED_STAMINA = [1,2,3,4,5,-1,-2,-3,-4,-5]; if(ALLOWED_STAMINA.includes(Stamina)) { ... } 
I would probably have done that for an obscure library such as Bobril or Dio, but Inferno is a pretty well known library. What's the big deal?
Awesome, this is kind of the consensus I was hoping I would get. Thanks! Wish me luck...
In my experience, the issue isn't so much transpilation woes, but maintainability over time. Eventually someone in the team is going to `Object.assign` or `_.omit`an order-sensitive object and then proceed to waste hours debugging some red herring error somewhere completely irrelevant.
LINQ doesn't mutate the underlying data structure, which works well for most situations, as I find immutability is usually a benefit. If I need to modify the underlying array I would write a for loop and iterate each member by index directly.
The impact would be small. Worst case scenario you get a blank output and have to refresh or see some wonky looking visual output on the &lt;canvas&gt;, nothing a quick F5 wouldn't fix. I have tested the code to the point that I can't find any more bugs in any aspect during intended use. It's a hard coded .js file, so there is no issue with user data or anything like that. It's going to basically just be behind a paywall, and that side of things I can take care of no sweat. The actual "application" that I will be putting behind the paywall is the code that I (for lack of a better term) made up. The web-management part I fine with.
Hey, thanks so much for taking the time! It's actually not that side of things I'm wondering about, I can manage the user / hosting / payment gateway. The actual "product" software is basically way out of my wheelhouse and I just made it up as I went. I'm a decent technical web developer, the actual application is kind of a physics simulation that meets really tight tolerances for teaching people to recognize it later on diagnostic tools... Which isn't a kind of programming I know anything about, but just hacked away at it till it worked. So in just that smaller scope it works and I know I can deliver it to people, but it's a compilation of "worst practices."
Hi /u/labofalllabs, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dead4586, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board). Thanks for your understanding.
Hi /u/HelpMeDoHomework, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/prvulod, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Iamrachel12, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Momentum will be fixed in one of the closest updates; And about multiple srollbars - what browser do you use and version of iOS?
It returns a new array with the result of the existing data passing through the iteration method
I believe it's called an _example_. Your example becomes more cluttered if each promise is different and not just a simple sleep. Whereas the original example is for arbitrary promises. I don't know if you could really say yours is simpler for what we're trying to solve. All you've done is just made a simpler example which wouldn't be used because of the limitations it poses.
I already started reading about it, I'm hoping to try it this weekend. Thanks!
The other frameworks don't exactly force you to be responsive. I think there is _some_ merit to having content that can at least resize rather than a hard-coded 600px by 600px box in the top left of my screen.
You won't be able to access IFRAME contents if its from a different domain, because it violates the cross scripting policy. However, it can be done using GreaseMonkey script with tricks. But it's for client side only.
Learn how Scoping and Hoisting effect the way code we write will deal with our declarations (such as var, let, const and function) with a few examples.
1) Webstorm. 2) I've only used Webpack. 3) I don't think WebAssembly will replace JS, but I'm interested in what it will bring to the table. 4) I definitely use many ESNext features, since I use Typescript. 
I'd probably go with the HSL color space (hue, saturation, lightness), and tweak the lightness by smaller and smaller amounts to increase difficulty. You could have a grid of divs (or buttons if you wanna be semantic), color them in HSL (e.g. `background-color: hsl(240, 80%, 50%);`) and change the third value a bit for the one that should be clicked (e.g. `background-color: hsl(240, 80%, 45%);`).
Okay, thank you very much.
It can easily be adjusted to account for different async functions. I wrote it the way I did because the above example was just repeating the same function with different arguments. I know some people may disagree, but I think it's a bad practice to create those kind of single use functions, which is why I gave the example I did. Here's what you can do if you want to run _"arbitrary promises"_: for (const [asyncFunc, ...args] of [[sleep, 1000], [requestBeer, 'IPA', 6.5]]) { await asyncFunc(...args); } though I can't think of a reason you would have an array of arbitrary promises.
That's good. But I hope you see my point. Hopefully, if you do a more complex project, you'll consider my argument.
So first you are arguing that I should have posted a more descriptive title because: &gt; "Obscure" and "well known" is really subjective But then, you throw subjectivity down the trash when you claim that: &gt; As I pointed out, you were wrong, and I wanted to set the record straight There is no straight record and I can't be wrong because I have a different **subjective** opinion on that. I think changing the titles of the links posted is bad etiquette. Period. It doesn't matter if I add my opinion or not or if a subreddit is political or not. I just posted the link so that people that use it know there is a new version because I would have liked to know too. If I had wanted to promote Inferno I could have made some propaganda like: "Inferno, the super fast React alternative, has released a new version!" But I didn't. I remained neutral and posted the simple facts. Clearly that offended some people. Personally if I don't know something I simply google it. I don't expect others to change their behavior for me.
He's right though. It wasn't "standard" but it has been de facto standard behaviour in browsers since IE6.
I mean, technically it would have to be `for (let promiseFn of promiseFns) { await promiseFn() }` if you wanted them to be sequential. 
If you don't care about responsiveness then why would looking at the phone screen matter? You're not trying to be responsive. My point is why use evergreen when you can get the same from bootstrap or some other framework.
&gt; it has been de facto standard behaviour in browsers since IE6 This is _also_ absolutely incorrect, and I really don't understand where all this misinformation is coming from, or how you can be so confident in your claim. &gt;Currently all major browsers loop over the properties of an object in the order in which they were defined. - [Source](https://johnresig.com/blog/javascript-in-chrome/), 2008, showing that this was not the behavior for any browser even during IE7's lifespan. &gt;Current Browsers: order is preserved with the major exception of keys like "7" that parse as integers and are handled differently by Chrome/V8. - [Source](https://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order), 2014, showing that not only did browsers not implement the behavior in the OP, but didn't even agree on their implementation, because they deliberately took "implementation-specific" measures _intended_ by &lt;ES6's spec to allow each to harness their own optimization techniques.
1. Vim 2. No preference 3. If performance were everything, JS would never have made it to the backend. 4. As much as possible, but mostly because the features I use make it much simpler and more enjoyable to code.
https://fusionjs.com/ Much much better than Next.js. Makes SSR as simple as prerendering.
I think GP is forgetting about, ignoring, or overlooking the integer thing. The de facto standard since IE6 was what you quoted from 2008, until V8 came along and started doing something different later. Although, notably, the Rhino JS engine, which was an attractive choice for server-side JS in 2008, used Java HashMaps and so the order really was arbitrary! The ‚Äúinteger thing‚Äù (now standard) was a big departure from the de facto standard, and some people were quite worried about the incompatibilities it would generate.
Misleading post title. Not limited to JS. To quote the post. &gt; Are you‚Ä¶ &gt; &gt; - Into JavaScript? You might be interested in Phaser. &gt; - Comfortable with C++ or C#? Godot might be a good match for you. &gt; - Proficient with Python? Check out Pygame. &gt; - Dangerous with Java? Take a look at libGDX. &gt; - In love with Lua? Check out L√ñVE or Defold. Like retro games too? Drop everything and check out LIKO-12! &gt; &gt; Do you really like retro games? Maybe you can‚Ä¶ &gt; &gt; - Hack on a Roguelike dungeon crawler in JavaScript or Haskell. &gt; - Crank out a text adventure or some interactive fiction with Clojure or Ink (similar to Markdown). &gt; - Craft that 8-bit console game you always fantasized about with PICO-8, Pixel Vision 8, TIC-80 (Lua), BASIC8 (Basic), or Pyxel (Python). 
Thank you!
Working on it but it'll be a bit. Best bet is to grab a CC.
there are so many clear explanations of let and var on the internet already and even here on reddit that people are getting tired of explaining it to people who couldn't be bothered to do a google search first. when you eventually evolve to the point of asking on stack overflow instead of reddit that behavior won't be tolerated. make an effort first and then ask a specific question, not just "explain this code..."
To clarify, I'm familiar with the differences between let and var as it relates to scope and hoisting. It is this particular case that I'm finding a bit confusing because I'm not sure why choosing one over the other results in such different outputs. If you don't want to share an answer, that's fine. Have a good day ü§∑
&gt; I think changing the titles of the links posted is bad etiquette. Period. That's fine, and I concur 100% that your interpretation of reddiquette is fully subjective. &gt; I don't editorialize titles. It's good Reddit etiquette. Thing is, _editorialize_ is a well-defined term. The request (to add objective information) is absolutely not editorializing. Perhaps that's the disconnect? Since some subs on reddit that claim that changing a site's title equates to editorializing... Either, this has gotten out of hand. Sorry if I upset you, I just agree with parent commenter that, in general, it'd be nice to have more descriptive titles, and that you can do so without interjecting opinions.
&gt; I'm familiar with the differences between let and var as it relates to scope no you're not. if you were you wouldn't be asking this. this code is the proverbial example of the differences between the two.
Relax. If you didn't want to answer the question, then why even respond? People don't know what they don't know. And if he, proved by this example, that didn't know the diff between let and var, then put your money where your mouth is and link to something. Further, of all the explanations of let vs var, I've don't remember seeing any that have used a for loop in a global context in their explanations. Here I am believing myself that I understood the difference, yet this example made me realize I didn't. Deriding people over not understanding their own lack of understanding serves exactly zero purpose.
telling me to relax and then writing several paragraphs yourself is somewhat hypocritical. tbh if I wasn't on mobile I more than likely would have just answered the question. but you know what they say, teach a man to fish..
This guy is actually 100% wrong if he thinks just understanding let vs var explains them within a loop. Within for loops there is actually quite a strange dance that happens with many scopes being created between the variable declaration, binary expression, update expression and block. Don‚Äôt listen to people like this who just assume they know the answer because they guessed (incorrectly) that it was simple. Here is a video that should help explain things a bit better: https://youtu.be/Nzokr6Boeaw