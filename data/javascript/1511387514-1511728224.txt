It's closed source, but I can add more info to the question if needed. Basically, there are many more methods similar (in the sense that they access multiple collections) to those I mentioned.
Thanks for your response. I am a bit concerned with the growth of this class (or module, if I choose to move methods there). I mean, more will be added, and it's getting tiresome to even scroll through that file. But since the objects are really tightly coupled in the app (there is a huge amount of special cases in rendering, the look of things depends on locations of other things, etc), this logic still has to exist, and I don't think it can be simplified significantly.
&gt; You don’t extend markup syntax with special constructs to get conditionals You do. If you're gonna argue that JSX isn't "extended markup syntax with special constructs" then you're just downright ignorant. That is exactly what it is. &gt; You don’t register components so they can be found back in a string template, you refer to them as you refer to anything So this is how you refer to "anything" in regular Javascript? &lt;TodoList items={this.state.items} /&gt; &gt;React is pure JavaScript however you want to interpret it. This is just ignoring reality. React uses JSX, not JS. You argue that Vue and Angular use markup extensions rather than JS, unlike React. So you're saying that JSX isn't a markup extension?
&gt; Templates compile down to JS. This is what i said. It ships a parser, compiling foreign syntax. &gt; You can use all ES6+ features with Vue perfectly fine? Most functions in the config object come pre-bound (can't use fat arrows). Isn't string evaluation just a regular eval? How could it do es-next? `&lt;span v-if="a?.b?.c ?? d" ...` ? would be new to me. &gt; probably pointless arguing any of this with someone like you. I don't care about downvotes. Never have. Usually i'm open to discussion or try to be, i don't think it's pointless. 
no gui needed. I use a .html
Yes I have googled. Most of these are not what the professor is asking for though. These tutorials are more complex and what he wants is simple with .png's to show explosions and water. 
Even you explaining this sounds super simple, I just literally don't know how to put this together. Again, this was a pre-recorded class and I swear to you these concepts on how to build something simple like this really wasn't explain as well as I needed (a complete beginner who has no programming experience whatsoever) not to blame the professor at all, but maybe I just need someone actually here to help me and talk me through it. I hate to ask but could you dumb this down for me? 
Well, [here's a starting point](https://jsfiddle.net/88czLqaq/1/)
Without knowing more, I would break them up into: + Connection: things that get connection(s) or assert something about connection(s), even if that get/assertion involves another collection. + Port: things that get port(s) or assert something about port(s), even if that get/assertion involves another collection. + etc. Conventions: + it goes in the X namespace if it returns an X + it goes in the X namespace if it returns information attached to an X + it goes in the X namespace if it returns a Boolean asserting something about an X
I sent you a pm and I have a few minutes to explain if you respond. Not sure how long I have.
Shift + Tab doesn't work...
Every technology has its tradeoffs, and you keep acting like React is objectively better than everything. Even in cases like this, when React isn't even a part of the discussion. You just take the opportunity to knock down Vue at every avenue just because you personally don't like it. But, if you don't care about the downvotes, I guess that's fine. You do you.
Wtf is with the thumbnail?
Since we're talking about privates, another negative of factory functions is that their privates can actually be *too* private, to the point that it prohibits the implementation of certain methods, such as `isEqual`. function Thing() { let somePrivate = 42; return { isEqual(otherThing) { return somePrivate === otherThing.???; } } }
thx ! also: https://github.com/mgechev/injection-js :)
Sounds like you need typescript that would catch these things
Just don't. It's terrible for accessibility
think of it like a paint application, where the left click takes on many roles. I need that functionality. 
So, is this a replacement for Webpack / Gulp or is this used in conjunction? From what I had time to read it looked pretty great.
It’s hard to tell without more code (I suggest using a JSFiddle or similar) but my guess is it’s because you’re using a mouseup event. So when you click the button and your mouse goes up again, it’s drawing. But again, I don’t know if that’s really the issue you’re describing without more code.
Are you sure the function is being run?
If that's the case, you should bind click handlers to the canvas that can be clicked on, rather than capturing all left clicks. Work with the event rather than overwrite it.
Well, I call it right underneath where I define it, by writing "warrior_level();" so I think it is being run?
bankai handles a similar problem domain as webpack+gulp, handling the whole pipeline for js and css. But unlike webpack and gulp, bankai is pre-configured to support a broad suite of tools for authoring and optimizing a whole web stack. You shouldn't need to configure much of anything if you use tools that work with the bankai approach (such as the choo framework, but you can use others). For an even more impressive set of features in this toolchain you can look at [create-choo-app](https://github.com/choojs/create-choo-app) which uses bankai along with some other tools to provide the basic scaffolding for a project including server-side rendering, testing, offline support using service workers, and a bunch of lifecycle tools and project conventions. Like bankai, create-choo-app isn't meant to be configured much. Instead, you could synthesize the same modular components that bankai and create-choo-app use to build your own custom stack, although the default suite of tools should be sufficient for many web projects.
Looks good, are there any examples of using it with other frameworks and libraries? Is it easy to set up with react and redux?
Is it in a section where it will be called more than **once**?
Is there anywhere I could read more about Bankai? I am not seeing a website on a Google search for this only linked to NPM and Github, etc. A documentation site would be great if nothing exists.
Does warrior.level start at 0? If so, you'll need to test if its greater than or equal to (&gt;=) for the condition to be true and increase the level.
&gt;= rather than &gt; might fix it?
ah, you nailed it. I now put warrior_level(); in a place where it is only called when an opponent dies. And now it works indeed. It was at a pretty random spot at first. I still have trouble wrapping my head around why, if it is called more than once, nothing happens at all though. 
If it runs again and the conditional is truthy then the level should be incremented. You may need to debug if it is not doing that. 
Oops, my bad. Didn't realize. 
Python shines currently in data science and visualization. Node is a way more popular option for a backend (i think it's reaching the top if it's not yet).
Yeah that's why I won't drive a car. I don't need a transport helper that needs a multitude of not-crashing helpers, seeing-where-youre-going helpers and all the rest. All languages/frameworks/operating systems are "helpers" all the way down.
Not really, they are an indication that people don't think your comments have any value.
[removed]
Lodash is definitely not the way you should structure your code though. Not having the source code written in ES modules prevent tools like webpack from treeshaking.
Heya, Bankai maintainer here. We've mostly been focused on making it work with Choo out of the box, because that's what we use — but adding support for React should be straight forward. Probably all that's needed is a Babel plugin to compile `.jsx` files in `lib/graph-scripts.js`, and a way to server-render React apps inside `lib/server-render.js`. Pull requests would be very welcome!
Heya, Bankai maintainer here. At the moment the GitHub docs are all we have, but docs are next on the list. Stay tuned! Bankai is built around 3 main projects, so if you want to dig in deeper, reading up on how they work might be great! - https://github.com/browserify/browserify - https://github.com/stackcss/sheetify - https://github.com/stackhtml/documentify/
Is this a Bleach reference? 
That’s one awesome reference. 
I can help you out. What's your timeline? If it can wait until Friday or next week, I can setup a WebEx so you can show me what you are doing (screen sharing) and if I can't get you going in the right direction then I will grant you access to my O365 SharePoint Online lab and assist you with the code and process. A couple of things about the reference code: make sure you are referencing a 'local' copy of jQuery due to security and information privacy (using a CDN is not best practice for Enterprise environments as every page load also transmits the user's IP address and requesting page name which can leak sensitive or confidential information to the CDN). Also note the code is old and written for SP 2010, which is generally fine but could be causing issues. There are also better ways to do the same thing, as for most things. Source: SharePoint Solutions Architect/Developer/Admin that helped Microsoft draft the 2013 Core and Advanced Certification Exams. 20+ years of IT and Dev work. Microsoft Partner since 2000.
It looks pretty neat 😀, can this be use for normal html,css,scss ? I have my own custom build which combine gulp + webpack for the js stuff. But always seeking an alternative to speed things up. Do the live-reload have similiar function like browser-sync? Does it support proxy?
what you're looking for is recursion. I have a rule for recursion. when you implement it successfully, pour yourself a beer.
Here's the thing though. People write full JavaScript applications, you have multiple developers and thousands of lines of code. New code can potentially interact with old code, introducing new runtime errors. It's not productive in modern day JavaScript applications to rely on runtime errors... It's too inefficient and requires E2E (either manual or automated) to catch those, whereas the linter helps keep that in check. Please remember one thing. The use of tools to help your job isn't an admission of laziness or ineptness. The only relevant question is, does it help you do your job more efficiently. Working with a pretty large codebase... This is my experience. Also again remember if you work with other people with varying degrees of experience (if you work for a living) this also makes sure their code is solid without you manually looking at their code and / or testing their stuff.
That's not really true though. Their are plenty of smart leaders in the JavaScript community that use and advocate for linters. Kent C Dodds, one of the lead FE developers for Paypal uses and advocates for linters. Besides his position, he speaks at conferences, has created some popular libraries, and even has a course on front end Masters, amongst some of the smart minds like Kyle Simpson, Brian Lornsdorf, and some others. You may have some argument in here but for sure there are more than beginners that are just using linters.
Can you bypass the service worker for your OAuth calls? Why would you want your OAuth calls to be routed through a service worker? What is the benefit? 
Fair point, it would be better to say structure your code based on something popular closely related to what you are building? What I wrote isn't dogma or anything obviously.
The leaf component is recursive...the problem is I have to detect the collection of rows a couple layers up
[this](https://github.com/facebookincubator/create-react-app/issues/2412) GitHub issue is close to my problem. They’re solution was to just yoink the SW altogether which is what I’m currently doing. I’m just using the default service worker with CRA and don’t know much at all about fiddling with it. 
nice job :-) What does this do that [`react-data-grid`](https://github.com/adazzle/react-data-grid) doesn't do?
Please include your data structure and a general design so we can interpret the requirements. I'm imagining something like a file system, but I need a little more visualization to help.
I would use this just because of the name alone
The leaf component is recursive makes no sense. The leaf component is the ending condition of the recursion. Judging by the name of your methods you may have to go over some fundamentals. You should not have to write functions such as objectHas2ndObject etc. Sorry if I can't help more but maybe you need to give more detail
 This is a fairly standard report system. Which part of my description wasn’t clear?
&gt; Please include your data structure and &gt; general design example (eg. a picture)
The way I wrote it, is foreach item make a tree. The tree component says, “if the data passed to me is an object, make another tree, else print the value” 
I can post the code that makes the tree tomorrow but the idea I had around mine was easy since any children would always have its parents name in front of it so I pretty much ran over all items then added them to a list if I couldn't find it's parent in said list. It would be a lot easier to give a solution if you posted an example of how you are trying to build your tree. 
Its a json object... ?
Perhaps you could provide an example of your data structure and a picture of the design you're going for.
If you were to walk through an insane asylum, and the patients were screaming epithets at you, would you feel devalued? Reddit is no different to me.
It sounds like you are doing this backwards, from the leaves up to the root.
The JS code examples should probably return the promise like the python ones do.
That's where redditors always get it wrong. A car is not a fundamental component. My point is like putting gas in your car but you need to put an additive in to make it actually work correctly. React and Angular are not fundamentals but they need additives to make them work properly it seems.
They idea about meaningful commit messages for a change log works well for projected in maintenance mode, but terribly conversion for projects in active development.
I am trying to look down 2-3 branches from the root to determine if I need to print a table or a [+]
r/iamverysmart
Looks good! Does this support Typescript?
[Hit compile like](http://78.media.tumblr.com/f9aa96fc78b2c467438c1cfc281c9e58/tumblr_mvlmyaZXjH1skucrio1_500.gif)
It can't come fast enough
wow, thank you SO much you have no idea. I am so grateful!!
This is extremely helpful, thank you so much.
I've got an open source project that implements a comment system using a tree. Recursion is the way to go as the other comment(s) suggest. https://github.com/NiXXeD/chatty
can i control the other person's screen?
is it possible to change uglify for google-closure-compiler? and how is it about source maps?
Yeah, very poorly documented for what they don’t support yet. I would rather see more direct integration with Babel instead of browserfiy 
Well, you can remove the CSS. It was only basic styling anyway
Hi thanks for the offer to help. You suggested that there are "better ways to do the same thing." I am interested in what you can suggest, or anywhere you can point me to as far as resources as concerned. I have very limited tools at my disposal in our sharepoint deployment. We dont even have sharepoint designer access and my IT department doesnt support deploying it, so I am very much stuck trying to rubber band something together. Ideally I'm trying to deliver a wiki style of policy and procedure document. We currently use an excel based tool for displaying the same information but there are extra features I'm trying to add which are not conducive to the existing excel tool. If I can build a wiki style knowledge base with a treed table of contents linking the components of the site, I think that would meet our needs very well. I wont be able to screen share from my office, so that wont help. For additional background info, we are running SP 2013. Any suggestions would be much appreciated. 
http://reddit.com/r/javascript/comments/7ejiqc/become_a_better_programmer_by_making_it_hard_to/
Your mouseup event immediately fires after your mouseclick event. The mouseup event should be another mouseclick event that checks for the enable draw toggle, then draws. When the draw function completes, it should disable the draw. And then you’re back to square 1, where the first click enables the draw.
With TypeScript alone one is making the choice of "I want company X to manage my JS stack" while with Babel it is "I want the community to manage my JS stack". Not that there is anything wrong with one choice or the other, a good dictator can solve many problems. However some people who were coding in the 90s remember what is like when almost every stack was managed by a single entity
JSX is an optional compile time effort to help writing javascript functions visually more appealing, like types in Typescript or ES-next in Babel. React does not ship a syntax parser. This is why React behaves like real javascript, can access variables, imports, es-next, etc. It isn't a string template, it never was. &gt; So this is how you refer to "anything" in regular Javascript? Yes. createElement(TodoList, { items: this.state.items }, null) `TodoList` and `this` are real references. They're not parsed, interpolated or injected. 
This looks similar to [Poi](https://github.com/egoist/poi) which has out of the box support for Vue and React, but poi uses webpack behind and is pretty well documented. It also allows estending, overriding the webpack config. 
If you're going to argue that JSX doesn't count because it's *technically* optional, then the same thing goes for Vue. The string templates are also - just like JSX - an optional compile time effort. Vue turns into createElement functions, too. They're not shipped as string templates. You can write it that way if you wish. Alternatively, you can also use JSX in Vue. I believe the Angular compiler does something similar. Arguing that React is pure JS and that Vue/Angular isn't suggests you don't really know what you're talking about. You're just assuming how they work.
Have you heard the good news of squash-merging? Commit whatever garbage you want, then squash it into one commit and merge it with a good atomic message like "fix $bug" or "add $feature"
Abstractions are the whole point of Nest. It provides tooling and patterns for OOP. As for complexity, well that’s up to the architect. 
Not entirely correct. That is only the case when you use Webpack. Otherwise it ships a parser. In both instances you deal with templates, as in, they behave like strings and execute in a separate VM. This is why you can't create a component and use it, you register it, so that templates can refer to it. Or if you have an import, you inject it as a wrapped function, etc. That is simply not the case in React because it never was separate. A react view is always but a function. Even Polymer parses, web components only create a shadow root, which you could do in both Vue and React.
thanks! needed this
if anything, vanillaJS. Then Vue or React. Ember is too verbose, though convection over configuration is a breeze. Vue is easy to understand compared to Ember. Ember just came up with Glimmer.js which is like Vue, but documentation atm is horse piss. 
Very good insight. I’m not a user of Nest but I do appreciate that it contributes to a style of structures and patterns for Node&amp;ES6+. 
Not always possible unfortunately. My team all work on a single branch and commit constantly. Force pushing a rebase would cause a lot of problems, and holding onto all our commits until a ticket is done just to push a single commit would cause way more problems than it solves. 
Yes, many SharePoint environments are constrained. The challenge with your request is you don't fully state what issues you are experiencing. You asked where do you put the content....well there's the CEWP! If not in the CEWP then have the CEWP or SEWP reference the content wherever it may reside. Regarding better ways, there are always better ways. In the environment your code is to be deployed in it sounds like SharePoint Apps and WSPs are a no-go. You only have html/js/css and CSOM/JSOM solutions to provide in a CEWP or SEWP. I also use the Custom User Actions route for Site Collection-wide and Site-wide solutions in a locked down environment if such an option is available...it usually is if you have at least Site Admin role. I'm not available tomorrow, but I will check in soon. What you want to do is feasible and possible, you just need a new approach. Have a great evening/day!
If I may, it looks really interesting but what really bothered me (and a lot of others) about webpack was their lack of good documentation, they really made an effort on this and it made things a lot simpler, a good documentation can really help a project like yours, i'll take a better look when I have some time, have a good day !
No they don't need additives. People made additional library to help people. That doesn't mean React doesn't work, that mean React is used.
&gt;Not entirely correct. That is only the case when you use Webpack. This is simply not true. Vue ships both a build without the parser, and a build with the parser - the string syntax is opt-in just like JSX, and it can be compiled away at build-time or at run-time, just like JSX. You can write a Vue app without string templates and Webpack, just like you can write a React app without JSX and Webpack. It seems to me that you keep ignoring the facts, so I don't see any point in continuing this conversation. I find it sad that you cannot admit that your knowledge of Vue was more limited than you realized, and that your assumptions were indeed incorrect.
Which part of his description wasn’t clear? ;)
Is this the new hello world? A react spreadsheet implementation is posted here pretty much every week.
&gt;My team all work on a single branch I found your problem. Your team doesn't know how to use source control.
I've worked at a lot of places that follow a lot of different methods of managing change via source control. The current one is the best I've worked with. It has negatives but so does every approach. The fact you dismiss it so out of hand does nothing but expose your own ignorance. 
Also, which line 25 are you referencing? The blog's SP 2010 code or the blog comment's code line 25 2013 code towards the bottom of the comments?
Branches are supposed to be atomic and should really be up to the individual developers digression on whether to make a new one or not. Maybe the place you work for is awesome otherwise but they fundamentally do not understand how branches are supposed to work for version control.
Perhaps I should clarify. We do use branches to park bits of code and we use them to share bits of code that aren't ready to go into the trunk. But we don't create feature or ticket branches. We also use a system that creates ephemeral branches on every push, validates that all of the automated tests still pass, then merges and deleted the branch if they do. If there was someone on the team sat with a branch they'd been working on for a while and not merging into the trunk it's definitely the business of the rest of the team.
I want to add that this stat is analyzing commercial projects. 
[removed]
[removed]
You mean that during active development, its ok to write garbage code? Part of using any convention is to know, when to not use that convention. I can imagine project, where most important thing is to ship fast now. But thats strategical decisition where "now" is more important than "later", not programmer's decision. I dont know about changelog, but pushing people to think about things they commit is very good thing for me, especially in projects in active development.
Thanks for comitizen, didnt know it, will try!
You are basically using svn. Dont bother with comitizen, its for git, its not for you.
&gt; Ever have your code formatter on save not agree with your linter? Just set your formatter to be same as lint rules (IDEs are even able to export theese settings for other) or disable lint rules which are not good for you. &gt; not having trailing commas, git diffs and code review would disagree with you What about lintinf rules of type like "no-console" or "no-unused-variable"? They lead to better code alot (by our experience). In your case, why not go with airbnb default config with disabling all the style section of rules? (https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb-base/rules/style.js)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [airbnb/javascript/.../**style.js** (master → 8cf2c70)](https://github.com/airbnb/javascript/blob/8cf2c70a4164ba2dad9a79e7ac9021d32a406487/packages/eslint-config-airbnb-base/rules/style.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
[removed]
Sure, this should be done. Thanks!
Tanks for sharing. I was looking for a JavaScript tutorial.
I mean... that sounds completely different from using a single branch for your entire team. I don't have anything to say about someone using a different structure to their branches. But when you said a single branch for an entire team that just sounded insane.
I'll just leave this here because I don't have the energy have correct more misconceptions. https://www.thoughtworks.com/insights/blog/enabling-trunk-based-development-deployment-pipelines
Thanks! As I could see, `react-data-grid` could do almost the same and even more, but this "more" makes it bloated if you want to use only the basic stuff. Also, the documentation is a bit fuzzy and leaves questions behind. I tried to do a simple solution that helps to create a spreadsheet with basic features and have clear API. If these features are not enough for you - it might be better to use `react-data-grid` in that case :)
Trunk based development is often refered to as single branch. It doesn't imply you never ever create a branch, just that all active work takes place on one. Perhapse next time ask for clarification before dropping in throwaway comments accusing people of incompetence. 
UC browser supported pwa now, it use app shell do this! as I knew UC provided install, activity, fetch event, not all pwa event.
&gt; My team all work on a single branch and commit constantly. You can still use git and branch locally, then squash your branch into a single commit. That's one of the great things about distributed versioning systems; it doesn't matter what everyone else is enforcing remotely, you can still do your own thing locally.
Hi /u/nerf_herd, just writing to let you know that all of your comments go through moderation as of speaking, as we've flagged you as being offensive and bordering on personal attacks before, and this comment has some of the same elements. We recognize that you feel strongly about some subjects, and that's fine, but wording it a little less aggressively may suit your arguments a little better, as people have a tendency of just getting more defensive when feeling personally attacked. And for us in the mod team, we sincerely dislike moderating peoples comments as it borders on censorship, so it's just a friendly reminder that while debate may get heated, try to still be neutral in the argumentative approach. 
Only if you purposely try to twist my words. Vue compiles runtime if webpack is present, it ships a parser if you don't, unless if you use JSX, at which point you are using React, without being able to partake in its eco system of course. *Either way, the templates still behave like strings in practice*, which is what i am trying to express all along. I am using Vue professionally. Downvote this to hell, but what i state is not untrue. 
Which we do do to an extent. But we expect people to but actively pushing up their changes to the trunk multiple times a day. 
&gt;Its fast enough for Linked in, Its fast enough for Netflix, Its fast enough for Twitch. Are those apps really at the top end of performance requirements when it comes to the UI. 
&gt; How about you think about what you are coding and not trying to enforce things fascist style It depends on people and its about their preference of managing freedom vs borders. In bigger teams, from our experiences, its good to have at least some borders. If you can fullfill your goals without borders, its fine. Other may not.
[removed]
Its different thing. I agree with one branch being result of whole process. But you are talking about not using branches as a development tool. We tend to have one brach as a result too, but to get there, we use branches (http://prntscr.com/he5z5f). If you do same thing, sorry for misunderstanding :)
[removed]
The interface is beautiful! I also like the focus on running, building and inspecting. 
Yeah fuck sublime 3, it doesn't even lint or automatically format, aka allow morons type `for(let i=0;i&lt;whatever;i++){whatever}` instead of learning how to use spaces and tabs!
I somewhat agree with your sentiment that the post in itself may be biased along with a lot of the comments, and I also did not moderate the comment, as it's not directly attacking anybody and I don't find anything worthwhile removing it over. My point was just that you've previously started out with comments like those and then escalated if people would reply with the same rhetoric (fascist, stupid shit, stupid thinking, cram it will wallnuts) back at you. In those cases we've had to moderate multiple comments, and those are the cases that initially got you on the list of people we need to moderate. Again, as a mod, I'd prefer not having to moderate at all, but that's not the reality. But the comment was harshly worded without real need, and had it been another user, they may have escalated differently. I would like to take you off the moderation list, but it's hard if I have a feeling that we're going to get justified reports in the future again. Hope you understand my sentiment, this is not trying to hunt you, quite the opposite. I'd like to get less reports of people in the subreddit in the future, and thus, I'm trying to reach out to the people we've previously been moderating to explain a little behind where things could improve.
So you are telling me, that if you can google a response to a Japanese person without knowing Japanese, as you know how to speak to humans anyway (sentence structures are almost the same across languages, just like in programming), you can form proper sentences and are good at all languages and thus you don't need to learn Japanese and everyone who tells you that you should is a newbie? I'd hire someone who knows their shit rather than someone who is just good at googling, because first one knows how to google anyway, they just won't take 5 minutes to write a for loop since they forgot how to do it in x language.
You say JSX for React is optional, you can use React.createElement. He says the same thing about Vues template Strings. Here is your answer: https://alligator.io/vuejs/introduction-render-functions/ You can use Vue the same way you can use React. It's that simple.
JSX in Vue is a side-effect since it switched to a React-like engine a while ago. It isn't how Vue is used or advertised. JSX in Vue still has severe restrictions. And they actually go both ways now. From Reacts perspective it is cut off completely from the eco-system, and it's still far more complex as it's still just an opaque config. From Vue's side you get hit by other things, for instance you now can't bind 2 ways. If you use it like this you have an incompatible React, what is the point? React then would obviously be the better choice.
If all people are constantly working on a single branch instead of at least creating local branches, your team obviously misunderstands git.
Looks good. It is friendly!
Great work. I think the speed can be better..
Please read the link in the post you're responding to. React uses createElement behind the scenes. You have 2 options: - Use createElement directly - Use JSX In the first case, you can ship you app as-is. In the second case, you can either transpile it to createElement functions (with Webpack or equivalent) or ship a JSX parser along with the app. Vue uses createElement behind the scenes. You have 3 options: - Use createElement directly - Use JSX - Use template strings In the first case, you can ship your app as-is. In the second *and third* case, you can transpile it to createElement functions, or ship a parser along with your app. 
That's great feedback, thank you! 🙏
You can run closure compiler as a browserify transform! Also we have source maps enabled out of the box; if a transform supports source maps, it should all just work.
Heya, Bankai maintainer here. Bankai assumes a JavaScript-first workflow. It allows extending generated html,css,js with transforms in the package.json. For example we support SCSS through: - https://github.com/stackcss/sheetify-sass Perhaps this might be too big of a change from your current workflow. We also do support local network proxying ✨ Hope this is helpful!
wow i can't believe we can read this for free. in-depth, lots of examples, lots of figures, covers everything you should know. i especially like it is mentioned at the beginning what in-browser javascript can do and can't do, because once i was confused about that. i want all js beginners to read through the book.
I don't know where to start explaining how your process is wrong.
True. The team has done a good job of trying to pull non-basic stuff into a separate `addons` package. I tend to require extra features from that package, like custom filters, sorts and such. I agree with you on the documentation and found the examples were the best resource for looking at how to do something. That, and looking at the actual code for some of the bits and pieces because there was no API docs.
...sigh If you want to explain what process you use and why you believe it's a better solution than ours I'm happy to have that discussion. I've worked on plenty of projects that use Git Flow before and it has it's own pros and cons. However if you just want to trade in hyperbole I'm going to have to leave you to it. Honestly the number of comments on this thread that roughly equate to "you don't use git the way I use git therefore you are an idiot" is depressing.
Looks like you guys are using some version of Git Flow? It's definitely 'a' way to work with Git, and one I've used plenty of times before, but it's not the only way. We don't create branches for bugs or filters or refactors except in extreme cases (which we should never reach if we're doing things right). Every commit goes into the master branch and is usually pushed at least the same day it was made. It takes a lot of discipline to ensure you're not pushing garbage that will break master, and it needs a well tested code base, but overall we find the trade offs in ensuring that all of our code is integrated early and often is worth it.
Redux form is perfect for this kind of thing. It stores the form’s state in a store so the values are available across multiple screens and the values are only destroyed when the form is submitted
&gt; Looks like you guys are using some version of Git Flow? Sort of &gt; We don't create branches for bugs or filters or refactors except in extreme cases It depends (on situation and/or person. There are people, who are more confident with clasic branch-per-feature). I usually work in my branch (most of the time, i need only 1, but there are times, i work on some tasks in parallel) where i can rebase, commit, amend as i like. And once i am happy with result, i hit Code Review and push to master (=some shared branch). If i worked only with staging area and stash, it would be limiting. By the way, we have disabled history changing in shared branches (dev, master). 
Oh, thanks for that link. That site is new to me. Btw, here's the official list of all active ECMAScript proposal: https://github.com/tc39/proposals
isnt free :(
I've only just glanced through it, but this looks really good. I find that a lot of guides/books/videos etc tend to mostly lean towards **one or the other**: * just explain things - in paragraphs of text * show examples ...which can sometimes make it a bit harder to learn things when you're just starting out, or in my case, switching from another language entirely. This looks like it balances both well.
Just what this world needed...another JS 101 kit.
It depends. What is your level of knowledge with JavaScript? Who will maintain the service once it’s built? Do they know JS? Are there alternatives that you can buy—or download if open source—that save the time/cost of a custom build?
my knowledge with javascript is lacking, but if this is possible then this is going to be my goal. I have seen that there is already a cms called reaction, so after a refresher on my javascript im thinking that would be step one to play with. I would maintain it. I'm fairly surficient with php and have worked with Magento and wordpress, so doing would be that easiest and cheapest, but I want to move on to something a bit different and I think that if javascript can handle everything php can + more then its time to move on.
# Lightweight editors - Visual Studio Code (cross-platform, free). - Atom (cross-platform, free). Yeah, okay, no.
Add ?react_perf to the url
If they didn't need additives, why do people keep making additives?
The intelligentsia of reddit makes its appearance again.
Haha, VSCode is not lightweight, for sure, but damn, I just can't resist all of it's amazingly useful features. 
As seen on TV!
Do you know better? I'm intermediate frontend dev (backend here) but it always good to read something like this. 
The part where in programming details reallllyyy matter. If you want people to spend their time for free for you then put a little effort into it. It's not clear why you won't put the effort into providing details that are requested by the people that are trying to help you and instead you're being a bit of a stubborn smart ass. Best of luck in the future trying to communicate with engineers. Hopefully you learn something from this interaction.
Dude I'm not the op. I was making a joke. See the ;)?
ahhhhh my bad &lt;3
Hey listen, I don't mean to say the information isn't solid. It's just that every single day another 20 of these "I made a tut, look at my stuff!" sites pops up. It's a saturated area and none of these new sites ever has anything substantial to offer over any of the existing ones. It feels like more of these exist to promote the site's author than to really help folks.
I mean.. if you prefer coding in notepad thats just fine with me but vscode or atom are solid recommendations for beginners while also beeing pretty lightweight compared to full blown ides.
What a sad world. Someone posts a great ressource to learn from for free and people get butthurt about it lol.
Since it supports Babel, and Babel 7 supports Typescript, I would say "yes"
Bankai uses browserify for the main build, and there are TypeScript plugins for browserify—currently, though, only browserify _transforms_ can be configured, and specifying browserify plugins beyond the default set is not supported. We're still thinking about the best way to approach that in freenode#choo and in issues: https://github.com/choojs/bankai/issues/285, https://github.com/choojs/bankai/issues/262
haha, I had good laugh at: https://javascript.info/ninja-code Pretty nice tutorial by the way! 
You have jQuery, do not add another library that all your users will have to download every time they load your page. Not to mention the learning curve of getting used to another library. Seriously, just use what you already have, you only need maybe another 5 or 10 lines of js.. 1. Attach a `keyup` or `change` event listener to your inputs. 2. In your event listener, save the current value of the input to `localstorage` 3. When the page is loaded, check `localstorage` for existing values and prepopulate the form. Here, I wrote some code for you. Just add a `save` classname and an id to the inputs you want to save and you can basically use this code verbatim. https://jsfiddle.net/njdkv42g/2/
Oh I see, I agree in 100% with you. There are too many stuff like that and 90% of it focus on promiting fancy author who probably don't know anything beyond that tutorial. This makes learning JS for me even more difficult. But this tutorial is pretty solid :) 
That's not true. Mithril does! ;)
I'm pretty sure Babel and Browserify solve two different problems -- transpilation and bundling. 
I mean, Atom and VS Code are lightweight compared to IDEs for sure - you don't need to set up a project to start creating files, they launch faster and are snappier overall, etc. 
This is a really cool resource, thanks for sharing! JavaScript is an increasingly important technology these days whether people like it or not and good resources like this are valuable.
Useful link - thanks!
No, but like I said, I don’t know the OP’s app requirements. If he/she is building a game Ember might not be the right fit. If he/she is building a grocery list app Ember is going to be plenty performant. A lot of people talk about JS render performance, while the real bottleneck is the speed (or lack there) of API calls. 
It's a much more nuanced discussion than the article leads on. A flat ban on default exports means you cannot 'import React from 'react'; and instead, you have to dig into the index to find out the specific function names. If you have a single file that only exports a class or react component, naming it doesn't get you any lift. Also, most modern ide's have no trouble searching for a default import when refactoring. Lastly, if the package maintainer decides to change the name of an exported function, you have to change your app everywhere that it is used. I do however agree that importing specific files and functions does help with tree shaking and keeping bundle sizes down. Basically, there is no reason you can't and shouldn't use both types of exports depending on the context.
Nope, I love SublimeText. It's super-fast. I've tried both VSCode and Atom and they're much slower, to the point where I've found it unbearable and had to switch back. I *WANT* to like VSCode, but it's just not lightweight, compared to ST.
This one is the first I've seen that's actually good.
The line 25 reference was from the 2010 code but I've tried both. I think I created some confusion in my question. Do I write the table of contents myself or is it meant to generate from the pages in the wiki? Assuming I write the toc myself, where in the source code do I put my code for the table of contents and their respective links. What is the correct code format for this process. If the source code auto builds the table of contents for me based on the various wiki pages on the site, how do I set the order and hierarchy of the TOC. I assume this is not how it functions and the manual setup is required. I understand that my actual wiki content is written in the wiki pages of the library. Thats seems to be the only thing I do know. 😢 
I agree that they're lightweight **compared** to some (if not most) IDEs, but they're not lightweight per se. They're built on Electron which is a really heavy. I'd argue that SublimeText is lightweight, but Electron-editors are not.
I think it makes sense to ban them in your codebase. I am not saying that you shouldn't use them to import external deps since you dont have any control over them as you said ;) 
I mean, yes, Electron is slow. I know it. I wish Atom was faster like Sublime but it probably never will be which is disappointing. The point is they are still faster than IDEs, that is the point the author made. 
Never said anything about garbage code, I agree being conscious of commit messages is important, but a change log doesn't make sense for initial development. My point is we can't make sweeping generalizations that all tools are useful for all types of projects. You mention projects that focus on shipping now versus later. Commitzen sounds pretty cool for a project that is largely established, but not one that isn't complete.
Well aware of merge commits bud. Rather I'm saying that a sweeping generalization about using a commit based changelog doesn't make sense for all projects and doesn't make developers wrote better. As you said, I can &gt; commit whatever garbage you want
This is my first NPM package. I am posting this here hoping to get some feedback on the project. Feel free to open issues and suggest improvements !
 if (weapon in equipment) { /*can I use the weapon class like this ?*/ No, you can't really use it in that way. But there are also some other problems you need to solve before you can reach the point of doing _something similar to that check_. First, this is your current "equipment system": /*equipment system*/ class weapon { constructor (attack, gold) { this.attack = attack; this.gold = gold; } } let dagger = new weapon (10, 10); let equipment = ["dagger"]; Now, this doesn't really work for any particular purpose. The problem is that you have a disconnect between the weapons and the identifiers of said weapons. That is, in your `equipment` array you have a **string** of value `"dagger"` but this isn't recognized as related in any way to the _variable_ called `dagger`. Not only that, the _variable_ `dagger` contains as value a certain weapon, but that weapon, the value itself, has no reference at all that it is called `dagger` in any way that you can use. So, what you need is, at least: 1. Make weapons have some sort of identifier or name. class weapon { constructor (name, attack, gold) { this.name = name; this.attack = attack; this.gold = gold; } } let dagger = new weapon ("dagger", 10, 10); 2. Store in the array, references to the actual weapons themselves, not just strings with their names. let equipment = [dagger]; Now, you can search through the equipment to see if you have a certain weapon in this manner: function hasWeapon(name, inventory) { return inventory.find(item =&gt; item.name === name); } You can use this function as: let weaponInInventory = hasWeapon("dagger", equipment); if ( weaponInInventory ) { warrior.power += weaponInInventory.attack; } Now this will allow you for one particular weapon e.g. the dagger. But this is probably not a good idea. You will probably want a more sophisticated inventory system. You may want to have more than one weapon. You may want to have items that are not weapons (rings, shields, clothes, spells, food, whatever). You may want to be able to carry various weapons an _equip_ one in particular. And finally, you don't really want to see if the player has a particular weapon (like that search I wrote that looks for one particular weapon). What you want is to see if the player has _any weapon_ equipped. This is the crux of the matter, because then, you are looking to define a _type_ of item and be able to find _any item of that type_. That means that you _will_ have different types of items and so you have to be able to identify them in some way. There are various ways in which you can do this. You could, e.g.... class item { constructor (name) { this.name = name; } } class weapon extends item { constructor (name, attack, gold) { super(name); this.attack = attack; this.gold = gold; } } class food extends item { constructor (name, energy) { super(name); this.energy = energy; } } Now you can... let dagger = new weapon('dagger', 10, 10); let chicken = new food('chicken', 30); let equipment = [dagger, chicken]; Now, to see if you have a weapon... function hasWeapon(inventory) { return inventory.find(item =&gt; item instanceof weapon); } let weaponInInventory = hasWeapon(equipment); if ( weaponInInventory ) { warrior.power += weaponInInventory.attack; } You may, over this, add the idea of being able to _equip_ one weapon at a time and using that _equipped weapon_ as the one that actually intervenes in attacks: class weapon extends item { constructor (name, attack, gold) { super(name); this.equipped = false; this.attack = attack; this.gold = gold; } } function equipWeapon(name, inventory) { inventory.forEach((item) =&gt; { if (item instanceof weapon) { if (item.name === name) item.equipped = true; else item.equipped = false; } }); } function getEquippedWeapon(inventory) { return inventory.find(item =&gt; item instanceof weapon &amp;&amp; item.equipped); } And then you'd use it as... let equipment = [ new weapon('dagger', 10, 10), new weapon('sword', 20, 20), new weapon('lance', 30, 50), new food('chicken', 30) ]; equipWeapon('sword', equipment); // later... let equippedWeapon = getEquippedWeapon(equipment); if ( equippedWeapon ) { warrior.power += equippedWeapon.attack; } [Everything put together](https://codepen.io/anon/pen/POaoNa?editors=1010). To sum things up: 1. There's no good way of relating the fact that you have `"dagger"` in a **string** with the fact that a variable named `dagger` exists 2. Put the actual weapon/item instances in the inventory array, not just their names. 3. To check if a certain item is _a_ weapon (or "of type weapon") use `item instanceof weapon` (if you follow the structure shown above; may not be valid if you do it in other ways) 
That should not happen if the logic is implemented properly. And it could be simpler than manually serializing/deserializing the state of the forms. Each step (next/back) of your form should "navigate" to a different URL (using #hash), and show/hide each form accordingly via a line of JavaScript and one more of CSS. window.addEventListener('hashchange, function() { const hash = window.location.hash.substring(1); if (hash.startsWith('my-forms-class-prefix')) { const forms = document.querySelector('.common-class-for-my-forms'); for (let i = 0; i &lt; forms.length; i++) { const form = forms[i]; if (form.classList.contains(hash)) { form.classList.remove('hide'); } else { form.classList.add('hide'); } } } }
I'm very grateful to you for taking the time to write this all out for me(in a clear/structired way!). I'm going to dive into it and see if I can put it all together.
Yes, javascript is great for that. You can even use javascript for the back end, and use node.js.
Well it _is_ when you first download it. But the temptation of all those wonderful extensions is hard to resist.
My personal opinion would be that if you're going to build a ecommerce CMS I would stick to PHP. 
Yes but use Strapi and be done in a jiffy!
Is this because of upgrading to newer versions or is it being phased out?
thanks you can explore the full articles on http://blog.iampuneet.in/
Great :) Feel free to ask any doubts you find or things that are not too clear.
"nope" God your a dick.
Then your pc sucks probably. Vscode is super fast for me and i dont have a highend machine. And yes i also use sublime so i know what im talking about
Why?
https://github.com/airbnb/javascript/issues/1365
it's for devs with ocd 🙄 it's the ones that actually delete items that blow my fucking mind. who is this for??
The jQuery code 'builds' the TOC by selecting heading (H1, H2, etc.) elements that exist if/when the Wiki is populated as expected. To find out the "format" used on the site you are developing on, view the page source or in Chrome &gt; right click on an element and select Inspect to view the element in Dev Tools to make sure you are selecting the right element in the jQuery code. You can use the browser console in Dev Tools to test your jQuery selector code. The order and hierarchy are set by heading levels (H1, H2, H3, etc.) and are run through a jQuery .each loop from top (first) to last (bottom). The only manual process is someone setting the heading level in the CEWP, source editor, or other means. The reference blog was based on a MS MVP's blog which has since been updated with a more informative article and a jQuery plugin: http://www.n8d.at/blog/revised-table-of-contents-for-wiki-pages/ I will PM you some constructive feedback. You might want to look into getting your own O365 SharePoint development environment (make sure you are using the SP 2013 templates). https://msdn.microsoft.com/en-us/office/office365/howto/setup-development-environment Create a wiki in your dev env and try working on your code there and then push to prod.
This is far different from the typical how to use `create-react-app` in 4 steps I took from the docs.
Yeah I should have said: on 16
I think the main argument against Angular is that people like using React more, so since you like Angular more, that's a great reason to keep using it!
1. Grunt isn't a package manager, it's an automation API (just as gulp or webpack is). 2. You do realize yeoman already exists right? http://yeoman.io/
&gt; Functors Definition Following the [mathematical definition](https://en.wikipedia.org/wiki/Functor), ... In other words, [a functor] is any object we can map... [1, 2, 3].map(val =&gt; val * 2); //generates [2, 4, 6] That last half is what the functional crowd often says, but that description doesn't follow from the mathematical definition you were supposedly working from. From your link of the mathematical definition, they say this: &gt; Let C and D be categories. A functor F from C to D is a mapping that associates to each object X in C an object F(X) in D, Working from that mathematical definition you linked to, category C would be `[1, 2, 3]`, category D would be `[2, 4, 6]`, and the functor F would be the callback `val =&gt; val * 2`. A functor F (`val =&gt; val * 2`) from C (`[1, 2, 3]`) to D (`[2, 4, 6]`) is a mapping that associates to each object X in C (such as `3`) an object F(X) in D (such as `6`), &gt; ...using a description given by Eric Elliott (I’m a fan of this guy!): Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/3x91ac/why_not_to_hire_people_who_like_es6_classes/cy2o6zj/)^3 from Eric Elliott. He's a better salesman than programmer.
this is most certainly not simpler than serializing the input values. this has twice the cyclomatic complexity of the example i gave and is several lines longer. also it requires the op to re-structure his existing form.
Very nice for a first package. This is similar to my library [Trent](https://github.com/andrejewski/trent). Some features you may want to consider: - Using checks within other checks (didn't see an example in your README) - Allowing for values to be of multiple types. Like accepting either a string or number. - Allow nullable or voidable types. - Recursive types where you can nest a check within itself which is useful for tree structures. Runtime checks are great, I was inspired by the Node library Joi and Clojure's Spec; you might find some inspiration there as well.
I am aware of Yeoman, and I am a fan of it. I am thinking about making a tool that solves the same problem with a similar-but-slightly-different solution. I want to make something less opinionated with more of a focus on a GUI. A little similar to [this](https://reactnativeseed.com), of course with way more options.
I think this is a good idea for the right kind of person, but most devs prefer CLIs. I’ll admit when I started programming I thought it was stupid to bash everything but now I’m a big fan. 
It is in fact interesting to go one step further in the Wikipedia link and read the _disambiguation page_: https://en.wikipedia.org/wiki/Functor_(disambiguation) There one can appreciate that the distinction is clear. In the mathematical definition, the functor is `F`, the mapping. What most of the FP people usually mean is the abstraction embodied in the Haskell Functor type class.
I actually really like the CLI too! I just think Yeoman doesn't lend it self well to newcomers. I think it's an idea worth kicking around at least, to see if it holds up after some scrutiny. So just curious, if you could use a simple GUI, to start the project as you see fit, would you still use Yeoman?
&gt; I want to make something less opinionated How so? Sure you can use prebuilt generators, but you can literally define your own generators, that's about as unopinionated as you can get. &gt; with more of a focus on a GUI. So build a GUI on top of yeoman?
So would you say Yeoman is unopinionated as it is? I mean I don't think making my own generator to start my project is making things faster. Maybe I am just biased because I want this to be a good idea, but Yeoman even state that it is opinionated on their site. Also Yeoman isn't very nice to newcomers, that it self is a huge market that don't even bother with it for a long time. Also, is a GUI on top of Yeoman such a bad idea?:)
It is possible to nest check functions. It's demonstrated in the last section of the readme. I agree that checking for several types, as well as nullable ones would be usefull. I'll work on adding that ! You library looks awesome, i'll have a deeper look. 
I can’t really say. I’m more than willing to beta a tool like that, and I’ll give anything a chance. It’s just how well it works into my workflow. For example, I found the Atom Git implementation is much easier and intuitive for my workflow than the Git CLI. Don’t let my comment deter you from your work, just don’t expect it to be a tool for everyone, and it sounds like you’re not. Best of luck!
Thank you, I also thought about localStorage. :) 
It's upgrading to newer versions. 0.10 is 7 versions old now
I think one of the main features of React is the learn once write anything mantra. React native and ReactVR have huge potential and are relatively trivial to pick up once you’ve mastered React for web. I’m not sure what angular’s path to mobile is but the React Native community is great. 
Why should I _know_ 9 libraries that do roughly the same thing?
Yes, it is possible to build out a CMS or the entire business infrastructure using JavaScript. Depends on the business risk tolerance and your specific backend needs, and the ultimate goal of WHY doing it. It is always great to build one from scratch from an engineering standpoint. You get to design and make all the rules. However, this often led to technical debt bombs when your organization grows... and when more developers join your team looking at the codebase, the less efficient these developers would become. If you are piling JS libraries together, without the deep knowledge of how things actually work behind the scene, down the road you and your organization will likely be at the mercy of those framework maintainers. ... some risk to consider, but either way sounds like a great learning curve for you ahead :)
Well, there's ionic that uses angular.
Local storage. Save form stuff into local storage when it's changed, and have a variable to tells whether it should be reloaded or not. Default is true, unless the variable doesn't exist. Set it to false once user submits the form. Now the page with that form is loaded, if there's any data and it should be loaded, load it, otherwise just do nothing and let user to fill it up as normal. Depending on browser, you can have 1-5MB of storage or so, but I assume it's just text information so it shouldn't be a problem to you. Also user can disable this, in that case, figure out how to check whether they did, and give a simple warning. Shouldn't be fucking annoying just like every notification "hurr durr we r using cookies in 2017, you should care!!!!!, I won't disappear until you click "got it" because it's so bad and you must submit to it otherwise we can't use it!", which is as fucking stupid as the "cookie law" itself, thank you.
I'm not 100% certain that else statement will behave as you expect due to the semicolon at the end of the first if statement. I suggest using a switch statement instead
Perfect dependency is one which doesn't exist in my project. It's not hard to save some values and load them back up, especially not hard enough to get yet another dependency, thank you very much.
Use `window.onload` instead of `document.onload`.
[It works as expected; try it here.](https://jsfiddle.net/zxkojbre/) The only "peculiar" thing is that to check the value of the button, you'll need to use the inspector, because the value of a button is not visible in the button itself. Maybe you were thinking about [changing the text in the button?](https://jsfiddle.net/zxkojbre/1/).
Thanks to everyone for your feedback! I've got lots of new things to think about now.
Per my reply - for the moment, the MVC pattern seems like the best place to start learning about architecture. 
Per my reply - for the moment, the MVC pattern seems like the best place to start learning about architecture. 
Pretty solid analysis all around. If we follow the theory of the [Hype Cycle](https://en.wikipedia.org/wiki/Hype_cycle), we're currently at the beginning of the "Plateau of Productivity". People have started to realize that while this is not the best tool in every case, it still has decent amount of support and it's a totally valid choice over Ruby's Rails, Python's Django or any Go or Scala library out there. There is just one point that I cannot agree on, which is the article he links to when to talks about being "javascript full stack" [(this article)](https://www.toptal.com/javascript/guide-to-full-stack-javascript-initjs). If it was only the client (browser) and the server sharing the same code, that would be a perfectly valid point, but in that article it's taken to a whole new level by making the same mistakes everyone did for years: choosing MongoDB because it's javascript. After years of MongoDB being released, people must realize that MongoDB and its other NoSQL variants are valid in less than 5% of use cases. If your database schema have relations, **you must use a relational database**. Don't start to make hand-made relations between your MongoDB collections because you wanted to be "javascript full stack" in your project. It's just not made for that, don't use it that way.
Some people like frameworks with all the batteries and features included where you insert your logic into the framework. Some people like to assemble the different parts they need around their logic. There’s trade offs either way and people’s experiences tend to push them one way or another. If you are highly productive and your releases are stable and timely then keep doing what your doing, because that’s the point.
*&gt; If your database schema have relations, you must use a relational database. Don't start to make hand-made relations between your MongoDB collections because you wanted to be "javascript full stack" in your project. It's just not made for that, don't use it that way. This sounds really important for people like me who are just getting into MEANjs over the last few months. Can you elaborate on this point with more of a concrete examole. When you would not want to use MongoDB? When is a good situation to use MongoDB? 
Good for you, champ
Not sure about FF, but chrome has a 'developer mode' where you can use unauthorized extensions. I've only used it to test during development, but a workaround would be to have the users download a zip file and load it themselves, then have your extension call to your api to see if there are updates available. Not sure how the updates would work, might have to be manual.
Mongo can be great for small pet projects as it doesn't have a schema so you can quickly iterate your models, but when trying to do stuff like "get me all the users and their posts" then SQL just has that baked in whereas doing that in Mongo requires work (usually done by another library like Mongoose).
Firefox has the same, but you need the "developer edition". To quote: &gt; Release versions of Firefox will refuse to install extensions that are not signed by AMO. The problem is, I can't force a dozen people to start using that just so they can load un-signed addons and that's not really covering the fact that I wanted auto-update or on-demand functionallity. Either way, I found a lame workaround using dropboxusercontent which is HTTPS and lets direct URL sharing. I've set up everything accordingly but the addon still refuses to recognize a newer version, even if I manually check for an update. addons.update-checker WARN Update manifest for {123456} did not contain an updates property
yeah, thanks, i wanted to change the text in the botton, innerHTML = value worked as expected, regrets
Cool, thanks for posting
Actually, I'd like you to give me an example of a website/business logic which has absolutely no relations. As far as I know, I've never seen a use case where MongoDB was the only right choice, if a right choice at all. Just as an example, let's assume twitter didn't exist and you would like to recreate twitter with the technology of your choice. You choose a nice browser framework like react/redux or vue/vuex with webpack + bootstrap/browserify, and for the backend you just decide to go ahead with javascript + typescript/flow and MongoDB. So the core of twitter are tweets, right? The whole website is made around tweets, and you can basically say that tweets are not related to each other, so no relations and a single collection of "tweets". A tweet has some content, maybe a optional URL, a date of creation, maybe a tag to know if it was deleted or not, and obviously an author. How is the author represented in your collection? With a username, I guess. But actually the username can be different from the name, so we have to put the name into a separate field. That's great! Now you can have a user's tweet and sort them by date, exactly what happens when you go on a user's page on twitter right now. You can also display one single tweet in particular by selecting just that tweet's id. We have everything to display just that one tweet: the date, the name, the content, ... Say your user wants to change its displayed name. It's part of the tweet, right? You have to change that user's tweets to change the name inside. Notice that's it's extremely redundant? What if that user had 10000 tweets? So you start to optimize and create a collection named "user". Now you only need to store the author's username and we can select the user dynamically given its username. ...Wait, did we just make a relation here? Since we cannot do relations within the engine in MongoDB, we hand-craft it within our code, making it 2 requests instead of one only. If you had a SQL database, your "Tweet" would be a table with a "username" foreign key pointing to a "User" table, and with the right indexes you could JOIN those two tables in one operation. You could change your user's name with one operation as well, without changing every single tweet. This example is very simple and for twitter, but it actually applies to almost every other case out there. Worst arguments for MongoDB (aside from "it's javascript and I use it in the backend with node.js"): * Scalability: PostgreSQL and MySQL have great scalability capabilities. Sure, it's not as easy to pull it off as it would be with Cassandra or MongoDB, but it's still possible. With a single server, you can still manage a few billion rows very easily as long as you handle your indexes correctly. * "My schema will vary a lot". So aside from the fact that adding a column is ONE command in SQL, this is actually a pretty passable argument. Say you mistype one your rows in development, "name" instead of "username" let's say, MongoDB will actually be totally fine with that. This feature is allowing more freedom to remove protections instead. If you still REALLY want to have a flexible schema without adding rows, PostgreSQL has json support (with indexes), so you can actually have fixed rows and a flexible row "other_data" where you will have all your data that is too sparse to have its own row. You can still join with minimal performance loss with other tables and other json rows from other tables...
Yeah that sucks - in chrome it's just a check box. At least it was the last time I needed it.
&gt; I mean I don't think making my own generator to start my project is making things faster. That depends how many projects do you have? &gt; Maybe I am just biased because I want this to be a good idea, but Yeoman even state that it is opinionated on their site. Uhuh... So even if it is opinionated, that doesnt equate to a bad thing. Firstly the validity of opinions are directly relevant to how reflective they are of fact, so who's opinions went into the making of yeoman? Take a look at `the yeoman team`. Given the fact there are core chrome developers in there do you think their credentials / experience / knowledge lending to their opinions which resulted in yeoman are valid or not? Secondly the opinionated part has nothing to do with how your actual projects get structured (as mentioned you can create your own generators) they're saying the workflow derived from yeoman is opinionated i.e. given you want to be a dev you should have - a scaffolding tool - build system / automations - dependency manager As a bare minimum in your workflow, which is a very reasonable assertion. &gt; Also Yeoman isn't very nice to newcomers, that it self is a huge market that don't even bother with it for a long time. So what? The definition of a professional / expert is the fact you possess knowledge / literacy that others dont for a given field. With this in mind im against making tools that that "wordpressify" the web dev experience and make it so that anyone can slap together a website while doing a piss poor job at it, which you have to then try to explain and deal with when they hire you. Also i think extra abstraction in anyone's workflow is just a waste of time and space, take for example when gulp moved from v3 to v4 i just quit using build tool API's all together (mostly), now i just use CLI + npm scripts and as a result: 1. i get all the latest updates for my CLI tools immediately (no need to wait for plugin maintainers) 2. i don't have to worry about some other 3rd party making a change to a build tool API and breaking everything 3. i don't have to worry about learning a new API every X months because of some new JS feature that got released that tool devs created a new API for. Overall it means i can be confident if you are running X version of node, my build / automation scripts will work. Furthermore it's not like making a GUI for scaffolding is going to make the rest of the dev experience any easier for newcomers either (git, unit testing, etc), they're still gonna have to deal with the shell. &gt; Also, is a GUI on top of Yeoman such a bad idea?:) No it's not, but that's what im saying, dont try and create another yeoman, just fork the existing one and change bits. For example: 1. bower was made redundant long ago yet yeoman still has it listed, there's also no mention of webpack. 2. No mention of unit testing as part of the workflow. 3. No standard reporting features, for example imagine if you made it mandatory that every generator had to have npm-consider / snyk reporting features in it by default (which you could create a GUI for).
I would argue that even in the tiniest pet project you can come up with, designing the data beforehand will make designing the program so much easier - at which point, you're still using MongoDB with a schema, it's just that the schema lives in the calling code, which makes it much easier to put the database into an invalid state accidentally. In a small pet project, that probably doesn't matter, and it's definitely interesting technology to try out and learn, but I don't think it's much easier to use than SQL even on the smallest scale.
Theoretically a relational schema is not only the shape of objects inside the database, but also restrictions on the database. For example, if you have a table of bank accounts, you can link it to a customers table and enforce that each bank account must be linked to a customer. With NoSQL, the database doesn't do the enforcement step. This gives you better speed since you throw away the check step before each transition of the databases state. What ends up happening is engineers force their service layer to make the enforcement check, but because it's not guaranteed at the database layer, the computer ghouls end up somehow circumventing your enforcements anyways, and you end up with accounts that have no customers anyways... So far after working a two startups that chose their main database as NoSQL, I promise you that choosing it will end up costing you. Everyone is always hyped about the read and write speed like 5 9's actually matters for your glorified Twitter clone. It doesn't, and the cost you pay for not designing your database well up front is that your assumptions about your data always ends up being wrong, and you have to write a lot of code to try and maintain these restrictions or guard against them. 
Thanks for the thorough reply, I appreciate your time friend. I cannot think of a good example of a reason to use MongoDB over any other database. I am quite noob in the web dev sphere, especially with databases. Again, I appreciate your response as I will be referencing this while building future projects that I plan on scaling. Any thoughts on PHP and CodeIgniter+MySQL?
It's alright, everyone has to start at some point, and the last years have been pretty hard to start in web development, you have so many concepts, libraries and keywords that it's very easy to be lost. MySQL is a pretty solid database, just be careful to use MariaDB over MySQL. They are based on the same project, but MySQL is now owned by Oracle while MariaDB stays open source and has more advanced features. Personally, I use PostgreSQL because it has features that are very nice to have compared to MariaDB, but the setup is harder for very small projects and it's harder ton install on Windows. I would use MariaDB if you don't really now SQL and would like to try, keep it for a few projects and when you think you have one serious project that will last more than a year, switch to PostgreSQL and enjoy the extra features and SQL standard compliance :) After that, it's my personal opinion. For PHP, I just cannot recommend it over Python or Ruby; PHP's typesystem and standard functions are very poor and messy, while Python's Django and Ruby's Rails are clean and well thought. I've never used CodeIgniter so I cannot tell about that, but since it's on top of PHP, I wouldn't use it. If you really want the best way to do well-scaled backend, go for a statically typed language. I would advise you to check those in that order: Node+Typescript/Flow (exactly what was written in that article, very good advice), Go, Scala. These are very good options to have solid typechecked logic for your backend, and it will save you tremendous time once you have a website that is over ~5K lines of code.
I've already learned a few new things from reading this tutorial despite having read a bunch of other starting tutorials, like break labels. Pretty good!
&gt; **NoSQL variants are valid in less than 5% of use cases.** &gt; If your database schema have relations, you must use a relational database. Don't start to make hand-made relations between your MongoDB collections because you wanted to be "javascript full stack" in your project. **It's just not made for that**, don't use it that way. source? reason?
I wish you guys were any of the companies I'm interviewing with at the moment.
The 5% is completely made up, but in my experience it tends to go towards 0%. Reasons: as I explained in my other answer, give me one website/application/whatever (I'm talking concrete use case here) that should use MongoDB over a standard SQL Database. I've yet to find a valid use-case personally.
Relational databases allow data to be normalized which in simple terms means: allows data to be organized and more efficiently stored, reducing redundancy and improving integrity. The relationships between keys allow for more robust object oriented programming and enforcement of business logic. More about data normalization: Read: https://en.m.wikipedia.org/wiki/Database_normalization Go through the examples in the Wikipedia, then read E.F. Code for a more thorough understanding. I wholeheartedly agree valid NoSQL use cases are rare in the real world. That's why it's important not to conflate to separate technologies JavaScript and whatever you use for databases. There are very useful SQL libraries for Nodejs for RDMS like MySQL and PostgreSQL.
Non-Mobile link: https://en.wikipedia.org/wiki/Database_normalization *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^115165
You can also take a look at Laravel. Concentrate on a JS framework on the front end (like vue) with a back end in PHP. 
I've had an OK time using it to aggregate logs. High-volume, temporary, discardable data with no set schema that can be easily searched. Used a capped collection that was able to store the last few days/weeks of log messages from various applications and made it easy to search through them. That was mainly a write-only use of Mongo from the application side, and using Mongochef to read them. Also everything else in our applications was written using Mongo which was a nightmare resulting in thousands of lines of complex application code to achieve the same relational functionality as a SQL database comes with built-in. But the log storage part was OK.
There are lots of solid reasons to stay away from PHP, some of which /u/cobrand enumerated so I️ won’t belabor that point further. That said, PHP and MySQL make it pretty easy to find a certain kind of work that’s very suited to getting lots of webdev experience in a very short time. If you’re going down that route I’d recommend looking at laravel as an alternative to codeigniter. It’s pretty solid for what it is. If you’re doing lots of one-off quick sites on a budget you’ll probably find your database chosen by whatever shared hosting solution you settle on, and it will often be MySQL. That’s a tough path and one I’m happy to have had the opportunity to leave behind, but it is a way to get established. 
 And it is only surprising that the real Twitter is not build on relational database (only). 
I wrote a jquery plugin a couple of years ago for this. It is called jQuery Elephant. (Because they never forget)
[removed]
If I'm not mistaken, they use various frameworks for their stack, but they mainly use a modified version MySQL for the core of their data.
I recently wrote a small back-end service with Node.js because JavaScript libraries for this specific case were way better than Ruby and Java ones and had a surprisingly good time. The biggest reason being TypeScript, the typed parts had this "if it compiles, it works" feeling to them. The callbacks are PITA but manageable with promises and async/await. 
THANK. YOU. YES. 
If you want a job, just go with NG2. 
I did a quick look through and this is great. It seems easy to read and worth recommending to beginners. This is a better recommend than something like *Eloquent Javascript* which is obtuse and dry. 
Protip: if you are going to lock out video/3D/animation content from mobile devices, at least have a fallback to a textual description of what it is or a youtube video showing what it might look like.
As I understand new tweets data published to in-memory NoSQL (modified version of RedisDB), after a while it is stored in MySQL. It looks like from 2010 they removed MySQL from be a front-end storage. https://blog.twitter.com/engineering/en_us/topics/infrastructure/2017/the-infrastructure-behind-twitter-scale.html
It will be a lot simpler since this approach does not require additional code per field/form (like yours). Suppose your form is composed of 5-subforms (steps), and each one has 10 fields. What approach would be easier to maintain and shorter? About re-structuring his form, changes should be really simple (adding a couple of css classes).
As I understand it, in JS: * objects are copied by reference * arrays are copied by reference * numbers are copied by value, but since the reference would be the same size as the number value, it doesn't use memory unnecessarily * booleans are copied by value, but they are smaller than or equal size to a reference * strings are copied by value, but there is a special mechanism at the low level that ensures that the exact same string is never stored twice, so a pure copy of a string would use no additional memory except perhaps some internal form of reference * Date objects are copied by value, I think, but they are basically a wrapped number, so they do not take much space * not sure about the others: regex, dom nodes, buffers, null, and undefined
Yeah I know... But I was just curious because I thought maybe I'm missing something, and I'd like to understand it :(
React Virtualized, at least, does something fairly different than the others
This was 10 minutes well spent.
Maybe you can help me out here: we chose couchbase/pouchdb as a database because of the easy synchronization and offline/online support. Is there anything like this in the SQL world, because sometimes we have to rebuild relations in our schema and it feels weird...
Yes this is pretty weak. All we get is a message "please view this on a non mobile device!"
Coming from a fairly new dev whose only JS framework experience is AngularJS, these notes were a delight to read! You clearly laid out your thoughts and have inspired me to look into React some more. Cheers!
Sorry if this is a dumb question I’m trying to learn this stuff... But curious what about using something like graphQL with mongo db, wouldn’t it make this scalability and querying thing flow just the same or better than relational databases? 
If you want to use proper SQL, I'd advise you to look at the different solutions that MariaDB and PostgreSQL have. I recommend you to start [here](https://www.postgresql.org/docs/current/static/high-availability.html). Be wary: the setup is tougher than any other NoSQL database, and not all solutions are perfect. You will probably need to understand what you want exactly before deciding on what to do, but one thing's for sure: if you're trying to have relations between your tables in NoSQL, you're definitely using the wrong tool, and investing in SQL scalability will be worth the while. As an example, we use the Master-Slave replication on our database: we have few writes, but thousands of reads per second, so that solution was perfect. One server handles the writes, while the slaves copy logically the changes that have been made on Master and handle most of the reads. I think you can figure something on your own by reading thoroughly the chapter I sent you, they explain rather well the pros and cons of every solution out there (at least for PostgreSQL, but almost everything has an equivalent for MariaDB as well).
Depends on your use case. Can you elaborate?
I’ve never used noSQL DBs before some weeks ago. Then I had the need to store a large amount of small files (screenshots) for a customer, and MongoDB was the perfect solution. All the application still uses a SQL DB for everything, I just use Mongo as a document repository, and it’s great in that. Every file i store has a limit of 16MB (not really, you can get around that), which is more than enough for screenshots anyway. 
did you even look at my code? what additional code per form do you think he will need with my approach? how do you know the forms aren't on different pages? if they are it would be a hell of a lot more work than just adding a classname. you're really not thinking this through.
Jep, the fact that mongo happens to use Javascript has nothing to do with the client using Javascript 
I want to learn how to do that!!!! How can I do that?!? I know basic web dev; like basic html, css and jQuery, enough to create a simple webpage, for a bakery or an event. I also know a bit of Node.js (I made a REST API with express). What all do I need to learn about to be able to make something like that?
Check out three.js. I'd bet money that's what was used to make this.
I looked into to it, and most likely they used [WebAssembly](http://webassembly.org/)
NodeJS is powerful but must be wielded with caution. If you aren't disciplined it quickly can become disaster.
Hi Shibekin69, I've written a few ExtendScript plugins before, but never to pass data between Adobe packages. A quick Google came up with [this](https://forums.adobe.com/thread/987641). I hope that helps! If you get stuck on anything, feel free to send me a message. I'd love to contribute.
GraphQL is just an interface of sorts to get your data to look like it's in a certain form. But really, if you're using GraphQL to wrap a Mongo server, you're still going to have the same issues with relations, data duplication, and what not. GraphQL really shines for giving frontends the ability to declaratively fetch whatever data it needs to render various UI elements, but it's just a mapping system. Each resource resolver ultimately makes a database call, an API request, or in most cases, a combination of both! Data integrity problems still can exist a layer below. 
Have you given any consideration to graph databases like Neo4j? I am finding modeling and retrieving nodes and relations much more intuitive semantically than relational databases. I'd be interested to hear your thought
Damnit, so many resources! Now I have absolutely no excuse not to learn web dev on some spare time
You might want to revise your question, as that function doesn't seem to make much sense, but in any case, consider taking this to r/LearnJavascript as it will be a more appropriate place to ask.
you can say that about pretty much anything though. rails is particularly easy to butcher because ruby is so flexible
&gt; but the setup is harder for very small projects I don't think it's really harder, unless you're comparing "already knowing mysql" to "using postgres for the first time". Or unless you're thinking about shared webhosts or something? I held off on switching from mysql to postgres for way too long because I thought it would be harder. But in the end it wasn't really, it just took a little more time to figure out how to do the equivalent thing, seeing I had to learn new stuff instead of already knowing it. 
A couple of things, functions are 'first class citizens' (ie you can treat the as any of data type), and when you call a function you pass in the parameters. So for you code you have in this post it doesn't make sense as is. BUT let's break it down. If you named it something function createDate(a, b) { return new Date(a) } Now if we call the function `createDate("November 23, 2017")` it will return a date (note we passed in a string). So that string "November 23, 2017" is the `a` in the function. But what about `b`? Well javascript doesn't care if you pass it too many arguments or not enough it'll run with what it has. So even if you did pass in another parameter `createDate("November 23, 2017", "somedate")` it will ignore the second one. But also consider that inside our function `new Date(a)` looks pretty similar to createDate. Because we're actually using `new` to say that we want to make a new data object and this is the parameter Date() is a function itself. Ok, so if that all make sense let's remember the first part, functions are first class, and can be passed into functions. So I can say giveMeAFunction(a) { return a } then invoke that function and pass in a function. function addItself(x){ return x + x } giveMeAFunction(addItself)(2) &gt;&gt; '4' don't worry about the two at the end (that's called currying if you really want to investigate more.) So if go into your fiddle we see $('#todoLi').sort(function(a,b) { return new Date($(a).getDate($liDate)) &gt; new Date($(b).getDate($liDate));}) .each(function() { $list.append(this);}) Let's break this down, `$('#todoLi')` is just a jQuery selector so we know which item we want. Then on that item (or list) we call the function `.sort`. Sort can sort by itself OR can take in a function to tell it HOW to sort. So you pass in an unnamed (or anonymous) function which itself takes two parameters `(a, b)`. Those are element n and n+1 of your list. Now sort wants that inner function (called a callback function and are very important) to be either true or false, that's how it decides how to sort between the two. So that callback function looks at the first element, and gets a date for it and sees if that date is greater than the next one, if it is cool, if false put b first. Then after we've sorted our list we then call another function on it `.each` which just goes through the list and for each element does something with it. `.each` takes another callback function, this one just appends `this` (a fairly confusing context word) which in this case just means your `addItemForm` or "what you just added". 
Don't think I could say that about Java.
That's why Node.js and everyone who uses it is a fucking joke. I need to save few variables, better get a library that can do that even though I don't need anything else from it!
[removed]
I don't get it :/ I meant "No, I don't prefer coding in Notepad"
I am interested in learning about them but how much are they actually being used in the industry?
you're welcome
is ajax a part of the given problem or is it something you saw from a google search result. if you're not familiar with vanilla js id suggest minimal framework usage. 
[removed]
Your analysis of the analysis is sound. There are surprisingly few good use cases for Mongo. The hype circle (I'm glad to see, not being a circle is in its list of criticisms) needs a complementary circle which describes the same crap every new technology goes through. There's the constant reinventing of the wheel and rediscovery of all the stuff everyone else took for granted. Mongo (is really taking a beating today) is a great example of this. Historically we've known that the relational DB is a bottleneck. Any architecture which puts any direct connection to the DB in the middle is going to scale badly. The MEAN stack made exactly the same mistake. There are differences but it's this fundamental inability to learn from the past that makes every new technology dicey during its formative years. 
Will check it out now :)
[removed]
http://www.adultswim.com/etcetera/ So this is part of the path to the site
I can’t tell if you’re genuinely mad or this is a troll, but if you’re totally disregarding Angular, React, etc. then you’re only limiting yourself. Any vanilla/jQuery app is going to have huge issues with scalability.
...... not sure if trolling
And it will have that issue only because jQuery is garbage. You think that scalability means adding more shit into your project through npm? If you aren't fucking garbage, you can write easily scallable project without any of npm dependencies, that is, if you are competent enough.
thank you, posted there
wasm is indeed used for this: https://i.imgur.com/AU3B1gV.png
Don't use CodeIgniter. It's old, it has bad coding practices, and it is not really being developed. Use Laravel or Symfony instead.
wow, that is very helpful , I greatly appreciate it! If you wouldn't mind me asking, &gt;callback function looks at the first element, and gets a date for it and sees if that date is greater than the next one, if it is cool, if false put b first that is the reason why my entire list isn't "properly" ordered, correct? if in the list I put 1 in the date input, click button, type 2, click button, etc. it's not in order since the function is comparing input box value to the last one that was appended? This is a lot of information, thanks once again!
I think Java can become just as much of a disaster, just in a different way than a loosely typed language might.
As someone who has used NoSQL databases a fair bit, I totally agree. Another point that you didn't touch upon is that it is _much harder_ to perform analysis on your data in a Mongo/CouchDB style NoSQL database - especially ad-hoc analysis - as you generally need to create these views and so on up front. It just isn't as flexible as SQL. My best success with NoSQL was using it as a secondary DB used for searching etc... - application data was stored in a typical relational DB, and this is where reads/writes are performed by the user on the front-end apps. But any changes that related to the particular subset of data we wanted to be able to search and scale were pre-formatted and stored on the NoSQL DB. We found it much easier to scale CouchDB than MySQL and if the data we wanted to expose via search needed to change format, we could do this very easily too. We also still had a relational DB there for analysis and so on..
They missed the chance to make that a plumbus.
I've also used Git Flow before, and am well aware of pros and cons. I'm also not trying to get you to use git the way I am using it. So, with that out of the way... Why on earth are you expecting that people actively push up incomplete changes to trunk, multiple times a day? That sounds like an active recipe for disaster, making it impossible to work on multiple features at the same time. I can't collaborate on feature A out of fear that there might be incomplete changes in the trunk on feature B or C that would break my build.
500Kb just for text strings (json) looks unreal. I guess something is wrong. In 500Kb you can have on average 256 000 words. I don't think this is reasonable.
That’s the first thing I read aster looking through the index. Was it supposed to be a joke? Please tell me it was sarcastic...
Can you tell me how JavaScript is better than .NET, Ruby, Python, Elixir, Erlang, Go and etc for backend development and is overall valid choice over those? 
You might want to consider enabling gzip compression for your server, JSON usually compresses rather well. The only way you benefit from storing it as a file is when the data changes so infrequently that you can get real performance improvements with caching. Otherwise the same amount of data is loaded with double the requests, so it's at best as fast as before, if not slower. In general you might squeeze a bit out of it by not parsing the data as JSON script. you can do something like &lt;script id="initialData" type="x-application/my-fantasy-media-type"&gt; { "json" : "data"} &lt;/script&gt; And then get the data with var data = JSON.parse(document.getElementById("initialData").innerHTML); Apart from that you're stuck with either de-speccing your app or making that data smaller or split it up into several blocks if you can to psychologically hide request time in user-interaction.
That's exactly what i think about the kind of people that go: &gt; Just install those billion dependencies, they have like 500 stars on Github so like nothing can go wrong, right?
NoSQL uses: PoC/inception/experimentation phase of an app (you better be prepared for somewhat painful migration to Postgres or something tho), Log/bulk document storage, temporary steps in ETL process... well guess I ran out of ideas. MongoDB is quite shite even by NoSQL standards OTOH.
I'm sure it was serious - article contains several quotes from famous programmer ninjas :-)
&gt; Node.js was the first legitimate attempt to bring JavaScript to the server-side. No it's not. Netscape server was, ~20 years ago. And it actually was quite a big deal back then. Other than that, it's the kind of articles I'm going to pass around my non-Node-believing coworkers. Thanks !
Not every application and especially not every object in the application needs to be normalized. Another thing is that insistance on normalization on the SQL end and rigidity of OO design on the code/business logic end was a big source of issues/bugs, project failure, slow development or slow performance of "enterprise" apps from that era. Sometimes a document is just a document.
Well it's because it's actually a hype **cycle**, where the periodic form is repeated each time with a different platform, technology, paradigm, methodology, design pattern, whatever...
&gt; If you aren't disciplined your code base can quickly become disaster My previous job was being brought to manage a codebase in EJB3 that I would describe with these exact words.. Spring not being much better I really, really try hard to see your point here. Java projects can, and have, very easily become cumbersome, bloated mushes of (mostly prejudice induced) enterprisey anti-patterns.
I'm assuming you mean work on multiple features at the same time as a team, not per person? We've got a pretty tight w.i.p. limit precisely so we don't have too much in flight at once. "Stop starting and start finishing" as one of the managers here is keen on saying. You put features that aren't ready to go public behind feature flags. It's an approach that needs a lot more discipline and a codebase with enough high quality test coverage to give you a lot of confidence in catches breakages. We have older code bases here where we are not confident in the test coverage and we wouldn't think of using trunk based development on them. You'll quickly find out if feature B or C break your build because guess what, you get their code multiple times a day. Much better than finding out a week or two down the line as the code bases have diverged more. If you keep getting build breakages then you need to communicate with your team more. Collaborating is easy, your code is already in master. If you've got code not ready to goto master but you still need to share with someone just commit it to a temporary branch. This is how continuous delivery is meant to work! As far as I know both Google and Facebook use trunk based development. Our current project is not live, but I've worked on projects in the past which had over a million concurrent users and we did trunk development. Here's a good starting blog post by someone who can articulate things better than me. https://www.thoughtworks.com/insights/blog/enabling-trunk-based-development-deployment-pipelines 
Thanks for the warning about M Elliott's content. After reading this article, I went onto reading one from him about Monads in JavaScript, and his explanations seemed all over the place. I almost started to question what I had read elsewhere about the topic. From what I see, he has a lot of upvotes/claps, but I don't think he is a reference about these topics unfortunately. 
You know something goes wrong when your state is 500kb of json :) Yeah, seems like we overfetch. Not something easy to fix though.
Thanks for the reply! We use gzip, I just wanted to optimize it even more. I thought of some other format, like maybe protobuf, for example. Though file on the server seemed to me more efficient, as most part of the state is just a bunch of long strings.
Cycle is much better :) 
Holy shit, it looks like I went on an acid trip in the World Wide Web of the 90s. Again.
thats also a good idea :)
So which one is faster for you?
[Magic](https://i.imgur.com/cnjoqci.png)
I think it will be hard for bankai till get popular without react or vue support
We'd love to support Vue, React &amp; Preact; the only reason we aren't supporting them yet is because we had to start somewhere for an initial release. PRs to support more frameworks would be much appreciated!
I'm taking a React course right now and this was extremely helpful!
internet explorer 6?
Rif -&gt; run in desktop mode its in the drop down. Chrome -&gt; run in desktop mode its in the drop down Firefox -&gt; run in desktop mode its in the drop down Your welcome, cause it works for me SSGs7
Well I've done things like these (pretty much all of them although I'd at least indent the nested ternary), and in pretty much every language I've worked with because: tired, out-of-focus, pressed by deadlines, frustrated and want it just to finally work etc. If/when I come across them later I fix/refactor them. I wouldn't take it to heart being called out on these in a code review, tho :)
I don't really have much of a choice. Just picked up the reins of a friends project that is built with Codeigniter. :/ I'm going to roll with CI for a bit and eventually convince him to rebuild the website. www.frostboost.com for reference. 
That sound was disgusting.
I don’t think perf tools work on 16 yet
"For PHP, I just cannot recommend it over Python or Ruby; PHP's typesystem and standard functions are very poor and messy" Omfg this! I hate that PHP doesn't have a type system. Especially after recently being spoiled learning Typescript (which I absolutely love). Currently working on projects with Node, Express and Angular. I've found this to be a really good stack to learn and understand RESTful APIs. Any thoughts on a good DB solution to plug into Node, Express and Angular (or whatever front end)? 
As i said. If your pc isnt from 1999 you wont notice a real difference.
Can you please clarify this?
Firefox 58.0b5, but the laptop I was using is about a billion years old. Although, I've never seen anything on the web that it simply refused to run like this.
[removed]
Your idea about creating VR Apps for people with disabilities.. that motivated and inspired me. I really wanted to code for that direction. Is there a possibilty that you can get a Dev Kit, VR or similiar without having to pay 500+ {currency} ? 
Hi captain_obvious! I do mention the Netscape example in the article! I guess I should have written the 'first successful attempt", but you get the point. ;) I hope it'll be valuable to your coworker!
[Most beautiful](https://i.imgur.com/XNETeyA.png)
I feel like java projects are guaranteed to be a disaster no matter how carefully you code them. The dev time, startup time, and resource overhead on a basic spring app is just... bad.
WebGL, and a soft body physics library like Bullet (compiled with emscripten for the web).
WebAssembly is just a tool to get non-JS code onto a webpage. The more interesting question is what that code was. One possible thing they used is the Bullet physics library.
Oh okay. Sorry. I didn't mean to make you feel bad. The way you worded it seems like you were saying "no, those are not solid recommendations for a beginner". I am sorry for being mean to you.
like with screenhero
I somehow didn't pay enough attention to that sentence. Sorry about that :) My team is not really interested in real-time or SPA. In fact we pretty much don't do any front-end work. But exploring new back-end options makes sense, and since scalability is a big part of our daily work, Node could fit in many places. Some of which we're thinking about rewriting (from C or C++)...So I already got a couple "gonna try that this week-end" :)
Oh, you mean screen sharing. You certainly can with WebRTC, if your browser supports it. But this tutorial is just for 1-on-1 video chatting with Firebase.
no. not just sharing your screen. having hte other person CONTROL your screen.
There's a quite ridiculous JSPerf test in the comments there that just defines de various functions but doesn't actually _run_ them. You might be interested in a [real JSPerf test](https://jsperf.com/remove-duplicates-from-array-correctly).
Post: Check out this cool thing! Site: You can't check out this cool thing, get a better browser, no we won't help you.
Is there a JavaScript (not typescript) compile to webasm example/lib/etc?
Because "click here to find out why!"
The short version is if your application can function well in an event-driven non-blocking I/O environment and you already have JS expertise it will probably work well for you. If you're a .NET guru and you already have a framework that works well Node isn't going to magically make your life simpler.
People tend to gravitate towards NoSQL because it's easier to get up and running up front, but that leads to pitfalls like not being able to efficiently work with your data once your application grows. Postgres et. al relational databases however generally don't suffer from this problem because you must reason out your hierarchy based on the types of queries you will execute up front and generally speaking normalized databases are quite performant at executing a variety of queries. So if you don't know which to use, you should use SQL and only use NoSQL when you can justify why it will work better for your use case and why SQL will not work. 
you can't even help yourself though, it is a crippled device with crippled everything. this is the life-alert signal going off.
Yes. Not sure what your markup looks like, but it’s probably just a matter of setting the background-color on a table cell or a div inside it with 100% height and width. If the color can change dynamically, you will need something that watches for that change, but it sounds like you’re already doing that for the cell contents. 
10/10 works flawlessly on mobile. good work.
Thank you very much :)
Looks great and functions fine unless I spam on the arrow keys. When you spam arrow keys very fast the whole thing falls apart.
[For those who want to see it in action](https://codepen.io/anon/pen/Kyerdb)
Seems to work well on mobile. On my phone, huawei p9, it does not load fitted to the viewport so you have to scroll to view the entire game which uses a couple of swipes in game. Might be nice to rig it so there's no scrolling necessary. 
I was just fixing this bug, and it has been fixed. Thanks for reviewing my work!!
No problem!
Stop stealing my code this is worth zillion 💲💲💲 and copyright by me™©
Tapping on the screen should trigger a Full Screen API, maybe you would like to try that! Let me know how that goes.
Not sure how you’re going to access this outside of the function. I️ think you’re better off making Keyboarder some kind of class that watches for these key events, stores which ones are “down” and provides some kind of event that other components can listen to and gives them the needed data. 
[Now it is mine.](https://codepen.io/anon/pen/GOGwNy)
https://github.com/ccampbell/mousetrap
Freecodecamp.com
I am fairly certain all the major players (Google, Facebook, Twitter, Microsoft, etc.) are rolling graph databases in certain contexts. Google's Knowledge Graph for instance. As far as I am aware, they are suited for data that has relationships that are many layers deep like social networks.
Man, I love eggplant. What a great vegetable. Can I put, let's say, $11M into your Series A? 
Yes, if bathrobes are allowed in a personal meeting
&gt; Not every application and especially not every object in the application needs to be normalized. True, but if other objects in the app do, then why add complexity using both SQL and NoSQL when you can use just a SQL dab and just put the non-normalized objects in a SQL table with only hash indexing? The best of both worlds. &gt; Another thing is that insistance on normalization on the SQL end and rigidity of OO design on the code/business logic end was a big source of issues/bugs, project failure, slow development or slow performance of "enterprise" apps from that era. That is HIGHLY debatable.
OK guys, since all of you are thiefs, the most recent version is now obfuscated. (function a(){setTimeout(a,0xa*Math['random']());var b=document['createElement']('div');b['innerHTML']='🌽';b['style']['position']='absolute';b['style']['zIndex']=0xf423f;b['style']['fontSize']=(0x30*Math['random']()|0x0)+0x10+'px';b['style']['left']=(Math['random']()*innerWidth|0x0)+'px';b['style']['top']=(Math['random']()*(innerHeight+pageYOffset)|0x0)+'px';document['body']['appendChild'](b);}()); Note: You cannot read or crack this if you don't know Assembly
I eddited my post which should maybe clear up things a bit more, also a download link to my html file. (can't just post the XML there) Was in a bit of a hurry when I posted this. Also I'm a noob in this stuff as in: I barely if at all know the basics of scripting
Not much of a need to set the z-index though :)
Required Unicode 6.0 support, which I currently don't have as an edgy Linux haxxor. 2/10 m8.
Use the package-lock.json
We are not responsible for people who are too dumb to understand windows. *Won't Fix*
Huh, even /r/javascript can have quality off-season shitposts.
Hi is this using a machine learning engine?
yes it's powered by SAP Leonardo.
Concur... http://www.adultswim.com/etcetera/elastic-man/face.js That's where the magic is happening, but it's definitely transpiled code calling a couple physics and audio libs. You can see all the C/C++-ish names and calling conventions that a human JS dev wouldn't write (assuming some level of sanity).
Why can't you use a class? 
If you use linear feedback shift registers and hold the eggplant size constant, then you can randomly fill the document entirely without any eggplants overlapping. Much like the way blood would populate all pixels randomly when you died in the original Wolfenstein. http://datagenetics.com/blog/november12017/index.html
This is awesome. I still suck at it but it’s awesome. 
Thank you very much :)
I think I've seen this 5 times in the past day posted here... 
It is if you want it to display over anything on a normal page.
Oh, right. I just tried the Codepen and didn't see the point. Thanks!
This is bleeding edge black magic, not machine learning
[This new version has mega-SHArk encryption to prevent theft. You cannot further steal what I have stolen.](https://codepen.io/anon/pen/jaKXwq?editors=0010#)
how do i install via npm?
ok but I needed this for angular
Happy holidays NEWB!!!
Purple rain, purple raiiiin!
Too much mate
`npm install 🍆` but brace yourself for about a million libraries overhead
It seems very unlikely that the initial page load requires the complete 500kb of data. Perhaps there is a "critical" subset of data much smaller you could load just to be able to render the initial page, and then load more data as required based on user interaction or just via lazy loading?
I sent this to everyone in my office, but in stealth mode. Thanks. (function r() { setTimeout(r, Math.random() * 10); let el = document.createElement(`div`); el.innerHTML = '&amp;#x1F346'; el.style.position = `absolute`; el.style.zIndex = 999999; el.style.fontSize = (((Math.random() * 48) | 0) + 16) + `px`; el.style.left = ((Math.random() * innerWidth) | 0) + `px`; el.style.top = ((Math.random() * (innerHeight + pageYOffset)) | 0) + `px`; document.body.appendChild(el); })(); 
It’s a fruit! A sneaky fruit. 
Use yarn. 
I've been doing some backend node development for a few months now, mostly as an experiment to see if I can wean myself off rails. I'm finding npm to be quite a junkyard. I first had to find a templating system, what a mess. Everybody thinks they have they best idea, or a slightly different idea and forked something. There's TWO templating systems named ejs! The amount of duplicated effort is enormous in the javascript world. You get a feeling when doing backend node development that its just you and a few other developers and everybody has moved on. Almost ever how to blog article is between 2012 and 2015. So I needed a database cleaner to run between tests, sounds like a no-brainer? The most popular one has only 143 stars and breaks in mysql if you have foreign key constraints... what? Everything requires investigation. How many github stars does it have, is it still being maintained, does it even work. You are afraid to use anything. Last year I was screwing around with knex and they actually broke it on me, a show stopper, I had to submit an issue and they fixed it and apologized. I really want to make javascript backend work for me, but its a scary place. Yes there's hapi. But its got a weird in-house feel to it. The middleware is loaded async so you actually start a project in callback hell and they have recommend using a configuration utility to generate this callback hell for you so you don't have to... what? So you want to say that because this isn't rails, its not opinionated so you have to pick and choose your parts, it isn't as curated and just get used to it. I've also done backends in golang and perl, its nothing like this.
Yay! Dependency hell! "Oh I need to have this one little thing, this dependency has it, I'll include that" and then it include a couple dependency and those include others and so on. Now you have 500 MB of dependencies just one feature you could have written in 20 lines of code...
This might seem debatable but it is commonplace. People are seldom good at both data modeling and programming ie business logic development, and not uncommonly they suck at both. Furthermore, business requirements change constantly. Symptoms pop up in every such project :Often an ORM is abused, lots of antipatterns like multiple database/resource requests per view become commonplace, and that becomes ultra fun as the level of extraneous master/detail and other forms of document decomposition grows. Finally, the decoupling of the data, business logic and the actual model creates additional comprehension friction and mental overhead when changes, which are inevitable, need to be implemented, and people cut corners constantly. And thus the very promise of future-proofiness that the normalized data and "serious" OO are supposed to fulfill gets broken by the complexity they introduce and in my experience the kind of technical debt that is created this way is much harder to deal with and refactor. The place where IMO loose coupling isn't needed but is actually a bad thing that should always be taken carefully as a tradeoff for some other necessity in the system is in the relation of the business case model and its data persistence representation. And this is totally ignored in such designs as normalisation by its very definition enforces such loose coupling rather dogmatically while, unlike other decoupling abstractions we use, it does not provide more but actually less flexibility. Other thing is that the very existence of the BI and data warehousing as an entire industry proves that the other big promise, that of reportability, seldom gets fulfilled by the persistence DB anyway. All this proves to me that data is a hard problem with no one size fits all solutions. And I have internalized this as a designer (I loathe the-"a" word) very early on. 
We are planning to add this as an free option, which can either be purchased or retrieved by viewing our free online ads for ~40 hours. 
[Works on PC as well :)](https://i.imgur.com/hhgJXHR.png) 
:)
Good call avoiding microtransactions. They've been getting some bad publicity lately.
Is there anyway to save your game using localstorage? Would be a cool feature.
Reminds me of the cornify plugin 
If u press Ctrl+S, the page can be saved with 1 HTML file and 1 folder containing JS and CSS. You can then play the game offline. But it would still be HTML file though! 
Great work. Nice or mobile. Had an empty alert when I lost tho. 
He meant saving your place in the game, not downloading the game
Needs more jQuery
Geeze I thought this was r/programmerhumor until I read your comment
Oh! I'm sorry. That would be a really cool feature!!
A [certain fictional character](https://i.pinimg.com/originals/9f/d1/62/9fd1621286bcac6781999c78592775cb.jpg) would hate this.
Hi, im interested in buying this software for our enterprise. Are you considering selling?
Worked great on my phone. I beat it on my first try??. I don't remember ever winning before. Somehow easier than other versions? Great stuff!
I haven't added anything to make the game difficult, the tiles are randomly generated, and I think that's what happens in the real game (doesn't it??) Please correct me if I m wrong. Thank you for reviewing my work!!
Nicely but did you really need that much JavaScript?
``` npm ERR! code EINVALIDTAGNAME npm ERR! Invalid tag name "🍆": Tags may not have any characters that encodeURIComponent encodes. ```
There might be more efficient way to make it and I would really love to know it. But this is what I could think of. PS:- Most of the code is repetitive, because i had to include touch as well as key events. You might wanna consider that too! Thank you for reviewing my work!
Yep. Hand-tuned svg allows for graphical code-golfing.
sounds like a bug in the spec
Will it provide me with Sense of Pride and Accomplishment?
I think if you made use of for loops could you reduce a lot of repetitive code. Maybe was it a better idea to create a array containing the current game board: [[0,0,0,0],[0,0,0,2],...] This gives you the plausibility to loop over the array to calculate and check the result after a move.
I had thought of using arrays, but it would have been really difficult to keep track of the animations (like which cell combined with which one), and with the method I finally employed, I couldn't find more places where I could have looped over. 
https://i.stack.imgur.com/ssRUr.gif
document.body.addEventListener('click', (event) =&gt; { event.target.innerText = event.target.innerText.split('').reverse().join(''); });
Awesome :) I remember being very happy when I discovered the same thing. Works great in react too!
Well done, it plays better than the original 2048! And thanks a lot, now I have to play a bunch of 2048.
I think you can first calculate the end result for the next move and keep track meanwhile of which tile needs to move where. For example I have a array of the game where each array represents a row: [[0],[2],[2],[0]]. Now if I press up will this be the end result: [[4],[0],[0],[0]] while calculating this can i mark that [1][0] and [2][0] need to go to [0][0] and in another function can i then animate this change.
Thank you :D 
This is what I am doing exactly, just without using the array. Actually I am using arrays in an indirect way. I have used the "document.getElementsByClassName()" arrays. But this would lead to the same length of code. The main benefit of using arrays was that it would have been easy to find the state of the game after the user-move, but by doing that I couldn't add animations. For animations I had to incorporate the same method as you are suggesting.
ANIME IS REAL TO ME
I just tested in chrome on my mac and the bug still exist
Holy fucking shit, that is the best code I have ever seen. YES!
Oh yes! It is still there! 😕 I am really sorry. :( I will try to find out what is going wrong as soon as possible.
hello sir how to convert to typescript? kindly thanks
Nice writeup. One correction: the actual requirement for a sort function's return is not the specific values -1, 0, or 1. The requirement is _any_ negative number for "less", 0 for "equal", or any positive number for "greater". -1, 0, or 1 satisfy that requirement, of course. You just don't have to use those specific values for "less" or "greater". This can be handy. For example, it simplifies how you can sort an array of numbers: var array = [ 3, 1, 4, 1, 5, 9, 2, 7 ]; array.sort( function( a, b ) { return a - b; }); console.log( array ); If you had to return the specific values -1, 0, 1, then you would have to change this line: return a - b; to: return a &lt; b ? -1 : a &gt; b ? 1 : 0; or: if( a &lt; b ) return -1; if( a &gt; b ) return 1; return 0; Of course you may still have to write code like that for non-numeric values. One important point is that a `sort()` callback can't just do a simple boolean comparison like this: return a &gt; b; `.sort()` treats the returned boolean as a numeric 0 or 1, so that would be as if we wrote: return a &lt; b ? 0 /*oops*/ : a &gt; b ? 1 : 0; or: if( a &lt; b ) return 0; /*oops*/ if( a &gt; b ) return 1; return 0; Always handle all three cases, negative for less, zero for equal, positive for greater.
Does this count as over-engineering? /* global document, innerWidth, innerHeight, setTimeout, pageYOffset */ const config= { content: '🍆', element: 'div', fontSize: { max: 48, min: 16 }, position: 'absolute', timeout: 10, unit: 'px', zIndex: 999999 }; const randomDistance = (max, min = 0) =&gt; ((Math.random() * max | 0) + min) + config.unit; const draw = () =&gt; { const el = document.createElement(config.element); el.innerHTML = config.content; Object.assign(el.style, { position: config.position, zIndex: config.zIndex, fontSize: randomDistance(config.fontSize.max, config.fontSize.min), left: randomDistance(innerWidth), top: randomDistance(innerHeight + pageYOffset) }); document.body.appendChild(el); }; setInterval(draw, Math.random() * config.timeout)
Entered this in the console. Am not dissapointed
Awesome dude!
Thank you :)
I think it needs more
Afraid not, it doesn't appear to have a payment option..
&gt; just be careful to use MariaDB over MySQL I think you mistyped. PostgreSQL. Mysql is shit, no matter if it's running on Oracle or OSS codebase.
Ok so you're saying I should put this in a major project and have it set to only go off on april the first?
REEEE
Eggplant enterprise edition
Thanks. It's comments like theses that make me appreciate my job as Fullstack JS dev so much more. 
Oh thanks for the tip! I'll look into this and see if I can move forward with it :)
"Scratch Off".
TIL I can read code and see it like a musician reads sheet music and hears it.
Good job buddy! :-)
This is awesome, good job!
I was on your side at first but after that jackassery you just posted.... Remember, javascript itself is a dependency. JS is software written in yet another programming language so if you're such a fucking programming God why are you even using it? Unless you're sitting there typing 1s and 0s all day then shut the heck up about dependencies. Node dependencies are entirely different than browser dependencies because browser dependencies have to be downloaded over the network every time. Node stuff does not.
Oh wow, I didn't know you could assign event listeners to elements inside the SVG, simply by using a CSS selector. Neat!
Use [npm-shrinkwrap](https://docs.npmjs.com/cli/shrinkwrap).
Totally right, my bad. Thanks for clarifying.
Wow this is amazing, what is that? How do you generate such code and how does that work?
Feature request: random sounds to be played when the div element is written to the DOM. Can be web audio sin waves or a fart sound.
In jQuery please. 
RESOLVED
Ok, first step, $.evalFile('C:/Path/To/test.jsx') works. Now I need to see whether it can copy and paste between the two apps.
http://💩.🍆/🍑.html
I hope by sent you mean committed to master
You're a corporation. Steal it then sue the author.
Free for open source projects, 10-100 user installation with enterprise support for $2,500/mo + $10/mo/install
Can it do hotdog 
you can fuck my wife
It is called JSF**k. This article about how eBay is/was vulnerable to code injection might help explain things: https://arstechnica.com/information-technology/2016/02/ebay-has-no-plans-to-fix-severe-bug-that-allows-malware-distribution/
Ooh noice!!
WHY????? Windows is the worst.
It's-a me
[Now with 99% more emoji!](https://codepen.io/anon/pen/eeKoWW) 
Thinking in this way (display as a function of some *state*, and user interactions modifying state ) is a really important stepping stone toward understanding a grams worm like React :) 
HackerRank, there are others like it too. But honestly - doing a side project that is something you haven't done before will help you out more for your resume / profile page. 
I didn't say how much money. ;) I'd also say that something like threejs is more beginner friendly. It's also JavaScript. If one wants to learn to do something like this, then threejs is still a fair suggestion.
My *god*. It's mesmerizing.
Don't want to fork up that branch.
Isn't React-Redux uses same pattern?
Why are you using Math.random()*10 on the setTimeout? The value will always be less than 10 milliseconds, too fast for any randomness to be noticeable. Just use a constant number if you're going to have it so fast and save some overhead.
Can you provide HTML5 version please client wants to do mobile
Thank you for your reply. Yeah the deciding factor for me is really how JS can really do everything now with different tools like express, node, etc. Whereas while the technology MIGHT be there for Python, the community and tutorials, etc. aren't really there yet. So I'd struggle more than I would currently with JS.
 el.style.zIndex = 2147483647
Same issue on my iPhone 8. The page is just a bit too tall for safari so every time I swipe it fucks with the page scrolling.
Try to jump from project to project. For example, write a simple game with Phaser.js. Then, write a simple site with Vue.js. Then, ..., etc. Practice, practice, practice. I think that will be better than just solving unknown exercises.
You can also just copy and paste it into your browser's dev tools console.
Nah dude, this should be purple rain. https://codepen.io/anon/pen/BmVeBK
Ok, took a little google-fu but this works cross application: https://forums.adobe.com/thread/290501 function executeInPhotoshop(script) { var bt = new BridgeTalk(); bt.target = "photoshop"; bt.body = script; bt.send(); } var script = "alert('testing')"; executeInPhotoshop(script); // Works 
No. In fact, Jean-Jacque Dubray has repeatedly insulted Dan Abramov and the Redux community, because he feels that Redux does not live up to the lofty perfection that is the SAM pattern. /s
Hahaha I loved this so much that I decided to turn it into a Chrome extension: https://github.com/Booligoosh/fruit-spawn Now when you click it spawns random fruit all over any website haha Don't worry, I gave credit (even though I improved upon and changed it a lot)
It's because asynchronous functions are just that - asynchronous, the entire event handler won't block like with synchronous functions; in order to have sequential execution flow (i.e in order) you need to force javascript to return information at a certain point in time but without blocking the entire event handler and that's where async functions come in and that's likely why you're being forced to declare that temporary variable in QML.
Its still blue, you should use a filter: https://codepen.io/Booligoosh/pen/wPXbqd That's better
We actually had a post about this about a year or so ago. https://www.reddit.com/r/javascript/comments/44090i/why_i_no_longer_use_mvc_frameworks
Possibly? Perhaps you could use Canvas or Flash as a fallback as well.
Serious question from a goober. How do you get that to work? Is that unicode? How do you insert that?
There has been an issue with safari always. It neither lets me disable scrolling, nor lets me to implement Fullscreen API. Does anyone have any suggestions to solve this problem??
Thank you! :)
Oh wow, I'd love to do this so much if I didn't need my job.
Thank you!! :)
Sorry, I didn't quite get you 😓
&gt; I'm looking for something like CodeAcademy or FreeCodeCamp Do you know how to write code? Good, don't waste your time with newb stuff. Instead start an open source application and solve hard problems. Here is where I see newbs fail: * scope * dom I have seen soooo many junior developers not know those concepts at all and do all kinds of stupid crap to bullshit around this. Bottom line: if you cannot code to the foundations of the technologies you are working in you are not on your way to becoming a senior. This must be a weird millennial thing. I have noticed on several occasions that when I point out that junior developers aren't masters of the universe they become emotionally offended. Sometimes even verbally aggressive and hostile. This is one way of identifying somebody who shouldn't be in this line of work at all. They are dead to me.
NSFW warning please!
[Indeed it still is..](https://i.imgur.com/fKca14K.png) Rather funny still, I won't lie. Good luck fixing it! :)
😅😓
Hi I do this kind of stuff a lot writing complex JS for Adobe Pro. Can you send me the document so I can look at it ? There are a few things that can cause that kind of problem but I'm sure I can fix it 
Needs to be in Prototype.js before it can go into production.
I added random rotation: (function r() { setTimeout(r, Math.random() * 10); let el = document.createElement(`div`); el.innerHTML = `🍆`; el.style.position = `absolute`; el.style.zIndex = 999999; el.style.fontSize = (((Math.random() * 48) | 0) + 16) + `px`; el.style.left = ((Math.random() * innerWidth) | 0) + `px`; el.style.top = ((Math.random() * (innerHeight + pageYOffset)) | 0) + `px`; el.style.transform = `rotateZ(${Math.random() * 360}deg)` document.body.appendChild(el); })();
I'm stuck at getting the paste transform to apply. Here you can give this a try: #target illustrator var curAIDoc = app.activeDocument; app.copy(); function executeInPhotoshop(script) { var bt = new BridgeTalk(); bt.target = "photoshop"; bt.body = script; bt.send(); } executeInPhotoshop("app.activeDocument.paste()"); When it pastes an object from Illustrator, there's a transform confirmation that you have to press enter to. Otherwise, the script waits. I don't know how to get past this :(
Thanks! Let me know if you have any issues. I haven't updated the code in a while, but it should work for what you need.
You have to send that to a PNG or something non-vector. Each letter is separate from the "noise" with vectors, so it would make it easier to decipher. You'd use some machine learning to fine likely symbols and then predict the symbols. Wouldn't be easy but it'd be far easier then just a flat map of pixels.
Best is subjective. Best because you can make a nice solution in a short period of time, or because you make the best solution in a reasonable about of time. 
Why not setInterval?
/u/tippr gild
u/346pm, your post was gilded in exchange for `0.00154572 BCH ($2.50 USD)`! Congratulations! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://learnbitcoin.cash/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^Powered ^^by ^^[Rocketr](https://rocketr.net) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
It's what the young ones calls an "Emojii", watch this, it explains it well: https://www.youtube.com/watch?v=tITwM5GDIAI, the eggplant specifically: https://emojipedia.org/aubergine/
More like machine gun engine. Machine gun for random divs.
I don't know what this is, it doesn't work on an iPad, but still melting is CPU,. it's bloody hot on the right side even after a short time.
java
Wrong sub reddit. 
but what if the 🍆 were rotated and semi transparent?? https://codepen.io/felixmc/pen/LOrwLr
LMFAO. Both Linux and MacOS is dead thing. Barely anyone uses it, WinXP &gt; everything else.
And if you do it that fast, just use raf
my eyes are bleeding
JavaScript itself isn't dependency, the browser it's running on is, I can say so, because different browsers support different things, though it's becoming almost standardised and almost every modern browser JS engine can do pretty much same thing in exactly the same way for the most part. JavaScript isn't software either, it's just programming language, the only software there is JS interpreter which interprets your JS. The browser itself doesn't matter, JS interpreter in said browser is what matters. And I don't need idiots like you on my side, I have my own side and it's mine, find your own.
That is absolutely glorious. Thank you for this beautiful imagery.
☝️ The intent ☝️ is to provide 👉👨 players with a sense of 💪 pride 💪 and 🏆accomplishment 🏆 for 🔓 unlocking 🔓 different 😎 heroes 😎 As for 💰 cost 💰 , we selected initial values based upon 📊 data 📊 from the Open Beta and other 🔧 adjustments 🔧 made to milestone 💰 rewards 💰 before 🚀 launch 🚀. Among other things, we're 👀 looking 👀 at ⚖️ average ⚖️ per-player 👨 👩 credit 💸 earn rates 📈 on a daily basis 📅, and we'll be making constant adjustments 🔧 to ensure that players 👨👨 have challenges 😤 that are compelling 😍, rewarding 💰, and of course attainable 🏆 via gameplay 🎮 We appreciate the candid 👀 feedback, and the passion 😡 the community 👨 👨 👨 has put forth around the current topics here on Reddit💻, our forums 🌐 and across 🌐 numerous 🌐 social media outlets 🌐 Our team 👨👨👨👨👨 will continue to make 🔧 changes 🔧 and monitor 👀 community feedback and update everyone as soon 📅 and as 📅 often 📅 as we can. 👍
As far as I know there *aren't* any JS to wasm compilers. Remember wasm is just a compile target like x86 or ARM.
lolololol ohhh man.. I am so embarrassed for you right now, i don't even wanna point out how stupid you're making yourself look. The more you talk the more it becomes obvious that you have noo idea what you're talking about. If I were you I would delete everything you posted before a future employer sees it and you ruin your chances of ever getting a job. It's one thing to be a cocky asshole, it's another thing to be a cocky asshole and wrong.
Future employer? My future employer won't even know that I ever used reddit and have to deal with fucktards like yourself. But wait, there's more, why fucktards? Well you see, all you can do is talk trying to scare me or something, without telling me why I am wrong. And you can't tell me why I am wrong because I'm right, and it's exactly as I said, you're just a fucking moron.
&gt; “Never argue with an idiot. They will only bring you down to their level and beat you with experience.” - G. Carlin. i'm not trying to scare you, i'm trying to help you. running your mouth and picking fights is not gonna get you anywhere in life. there's no reason for you to be so mad right now, take a few deep breaths and then take your own advice and look up what "software" and "dependencies" mean. then look up "humility" just for the hell of it. it's really sad how hard you're trying to save face by cussing and swearing instead of explaining yourself like a grown up. i can swear and act like a belligerent dipshit too. take my advice before i accidentally hurt your feelings.
Yes. Also blockchain.
So again, either prove me wrong, or fuck off retard, all you're doing now is just projecting it on me, how about apply this quote to yourself? Notice how I am the only one who actually said something substantial in here while you just run about how I run my mouth and pick fights. You're the one who needs to look up what software and dependency is. Languages are neither. So again, how am I wrong? Oh wait, you can't really tell me without telling me to "look up", because you know, you couldn't really explain? Oh wow, you're so smart and right! By the way, I'm going to look it up just for you, because you seem to not know how to google: &gt;Software is the programs and other operating information used by a computer. Programming language isn't a program, the only program related to any programming language is indeed interpreter/compiler, just like I fucking said few posts ago. I am already 50% right. Let's move on. &gt;Dependency is a broad software engineering term used to refer when a piece of software relies on another one. Coupling (computer programming) In software engineering, coupling or dependency is the degree to which each program module relies on each one of the other modules. JavaScript is NOT software, so it can't rely on software. On the other hand, something *I wrote* in JS can be considered software, and it now it *might* rely on something. Here, I'll explain to you more simply since you seem not to understand: to open a webpage that has JavaScript, you only need a browser to do so. Browser, to run said JavaScript only needs to use it's JS engine. The only dependency here is indeed not JavaScript itself, but the fucking JS engine being used to interpret what someone wrote, you fucking monkey. What can I say, isn't it fun when your suggestion backfires?
That's pretty IIFE. 
http://www.jsfuck.com To Convert your own code.
You improved nothing. OPs program was perfect, and addition, as much as subtraction, took away from the perfection.
As far as I know, no one is attempting this currently. There is little reason to do so: performance will be unchanged.
Is that bitwise OR operator areal pattern people use to round the sizes and position to a whole number? Or is it ninja stuff to be avoided.
&gt; Would I be able to import the data of that colomn and process it in CSS to give the right colomn (in the html table) the right background color? Yes. Walk the DOM to access the appropriate element, grab the text contents and set the correct CSS property. Do this using setInterval with an interval of 60000 ms. https://quirksmode.org/css/css2/columns.html
alright you little faggot ass dipshit let me spell this out for you since your pre-teen brain is having a hard time understaing. software is anything that's not hardware, capische? a programming language is mother fucking software, just like your little half inch dick, got it? "programming languages" are compilers/interpreters/parsers, not just just the syntax of the language itself, ok, penis-wrinkle? it doesn't even matter cus you're just going to deny it and say some more stupid bullshit that you don't understand anyway. i might as well just talk shit and ignore the technical side of the conversation because it's above your fucking head. you feel like you need to get defensive and be rude to strangers cus your mother doesn't love you and you have no fucking friends. you will never be a programmer because you're not humble enough to learn anything. i hope you like flipping burgers you little faggot. talking about jerking off every night so i assume your fugly and cant get a girl. is that why you're such an asshole? or is it because your mother doesn't fucking love you? you're a worthless fucking human being. how does that feel?
&gt; From all this, I’ve come to a single conclusion: package maintainers are not beyond human error, and I’ve personally run into the woes of a package update introducing a cascading failure across the dependency tree during development. I truly fear what will happen if this occurs in a production environment. That is the nature of dependencies. If you are not willing to minimize risk by owning the maintenance of important functionality yourself you defer that maintenance upon somebody else at increased risk of failure in production.
&gt;You will never be a programmer &gt;&gt;Web developer to actual programmer.
Hey, tacos and pineapples are way better than eggplants &gt;:(
how old are you, shit for brains? dont lie.
yes, a web developer is a programmer. yes source code is software. yes, the language and its syntax is also software. this si waht i've been trying to tell your fucking dumb ass this whole time.
Can we get an npm module please.
&gt;software. noun. Computers. the programs used to direct the operation of a computer, as well as documentation giving instructions on how to use them. &gt;\&lt;...&gt;the programs&lt;...\&gt; I don't think I need to tell how wrong you are. You can't possibly be this fucking retarded.
yes it is. why ddon't you go get your own degree and then tell me what you think ok. better yet, bitch about it to your professor, afteryou finish the 4th grade.
Why don't you go back to school and learn english properly? It just physically hurts to read every single sentence of yours.
psh changing the subject to my grammar. you know what's fucking pathetic, i'm not trying to use perfect grammar, it's the fucking internet not a job interview. you on the other hand obviously tried real hard to use perfect english and you still failed to capitalize your pronouns. not to mention the repeated poor grammar you used in your other comments. youre not kidding anyone. i didn't catch your answer btw, how old are you? 12?
Contrary to the popular opinion I find that having database schema and types is very useful at prototype phase. I've rewritten a personal project from Ruby to Scala because I was tired of constant ArgumentErrors.
Fantastic news! As always Google on the forefront of innovation!
It's a good start. How much time do you need to get this doing accounts?
Indeed! I think this will truly help web developers improve performance on mobile
Doesn’t work well on mobile for me (iPhone, Safari). Trying to swipe keeps scrolling the page. 
There is an issue for iPhone as it does not allow me to disable scrolling and also does not allow the implementation of Fullscreen API. Does anyone have a solution for this?
Yep, I didn't see it. Thanks.
That means node too. Cool.
If you have a html document with multiple svg elements, does the use of id within the svg interfere with the rest of the document? Is there a way to reference the marker or other elements besides using url(#id), not knowing the other possible ids in the html? Or if the same svg is added multiple times with slight differences (i.e. as a Vue or React component)
Take a look at how [the original](https://gabrielecirulli.github.io/2048/) does it, as it works fine there. 
Jean-Jacque Dubray relates his experience with React, Redux or Angular in the article *Why I No Longer Use MVC Frameworks* (link in first post). As an API dev, he encountered obstacles using those libraries that he claims to have overcome with SAM pattern. The article is detailed enough with no insults at all. But he may have had some words elsewhere (that I don't know) that could have expressed some frustrations about all the hype about frameworks/libraries and new features they add as a patch that it shouldn't be there in the first place if the tool were well designed from start, all the stuff that contribute to JS fatigue. I guess from what I read from dev related to JS fatigue.
I recall this making the rounds, and was very much in love with it at one point. If you accept that your state is mutable and adopt some patterns around it, then you can avoid the overhead and indirection of immutable structures and reason more easily about state changes to traditional (imperative) programmers. What changed my mind, though, was discovering CycleJS and TLA+. In particular, in Lamport's book Specifying Systems, there is a succinct formula that describes current state as initial state plus a series of all elapsed actions. This should sound very familiar to Redux users, as you should always be able to replay your state by having a good initial state and replaying actions. The truth is that state is immutable in real world classical physics, unless somebody knows how to rewrite history. You can always identify the state of an atom, object, etc. by providing spatial coordinates and time. I don't remember SAM well enough to talk authoritatively, but I think it sacrifices the history aspect by removing the time dimension. If all you care about is here-and-now and have a good system for managing state updates, then that might be the right tool for some. However, it becomes difficult to debug and explain how you arrived at that point, whereas Redux or other FRP models provide breadcrumbs and a model for explaining why a state at a particular time exists.
TL:DR: Focus on readability and leave optimitzations to them.
How could I have been so blind?! And here I have been using a tablet to browse reddit for over five years and I never realized that I was doing so with something that did not have the capabilities of a supercomputer. My decade of web development experience has taught me nothing, but you sir have saved my life.
From what I understand it should recursively call itself infinitely without ever reaching the third line. What am i missing?
After playing it for a good hour here, I have some thoughts: Would be great to not get that "confirm" box when you loose. It hovers over my score, so I have to press cancel to see my end score. (win 10) Would be neat with a localStorage feature that persists your scores. But, it works really good. Great job! :)
Took your suggestion! Works well now. Thank you for reviewing my work!! :)
When an idiot couldn't bring me down to his level and beat me with experience so he deletes his messages after realizing that he's stupid and his stupidity won't affect me. If you try to troll someone smarter than you, then at least be good at trolling.
For those who want to see multicolored 🍆 (function r() { setTimeout(r, Math.random() * 10); let el = document.createElement("div"); el.innerHTML = `🍆`; el.style.position = `absolute`; el.style.zIndex = 999999; el.style.color='#'+(Math.random()*0xFFFFFF&lt;&lt;0).toString(16); el.style.fontSize = (((Math.random() * 48) | 0) + 16) + `px`; el.style.left = ((Math.random() * innerWidth) | 0) + `px`; el.style.top = ((Math.random() * (innerHeight + pageYOffset)) | 0) + `px`; document.body.appendChild(el); })();
What is the usecase for modifying the ID of an element? This is probably where you'll want to make an adjustment. IDs are supposed to be static, unique identifiers. Classes are better for juggling and style transitions will work correctly. 
I like CodeWars
Thanks for the response, I should clarify I'm fairly new to web dev so my process is probably a bit cringy, mostly just frankensteining together examples I can find online. I have a list of links on my page, and I as each item is hovered over I need the background of the parent div to change to a corresponding colour. The backgrounds are all gradients, which makes for quite messy CSS styling. My thinking was that if I made each 'background' a different ID, and had the div change to the relevant ID as the corresponding list item was hovered over, it would make the js code less complex. Is there another way you'd suggest tackling this?
Howdy! Here's a high level state container I made, along with a lensing library (which may actually be the cooler part): - __[Silhouette](https://www.npmjs.com/package/silhouette-core)__: an experimental high level state container with plugins and support for `redux` tools, reactive programming, and more. - __[Vitrarius](https://www.npmjs.com/package/vitrarius)__: a functional lensing library designed for modern JS. I'm looking for critique and feedback; any thoughts you guys have would be much appreciated!
What is this const and arrow stuff? This feature is critical and it needs to support legacy browsers as well. We can only afford using battle-tested solutions.
&gt; Uses flash
Alright, thanks!
You don't actually need JS for this at all. The CSS hover property is what you're looking for. Here's a simple example of styling a hover state with a transition. .element { background-color: blue; transition: background-color 300ms; } .element:hover { background-color: red; }
Our Babel ES6 rollup parmesan webpack gulpify stage-0 broccoli step should transpile the code to work on legacy browsers... I think
setTimeout places the callback to the side (event queue) and execution will continue as normal. The recursive call you mention will only happen after the code which is currently executing finishes, in addition to the duration passed to setTimeout.
Minify it for just a little extra stealth 
This is fantastic Although I can't see a lot of changes, the code is almost identical 
Hey! Sure, I'll bite. This was my first real React app. There are a few Readmes sprinkled through. Lemme know what you think!thanks in advance. https://github.com/a8t/timetablr
this made me laugh. thank you
Transpilation? No, that's out of the question. We settled for straightforward deployment strategy of putting it in a &lt;script&gt; tag, we have already trained our team and we don't want it all go to waste.
Heck yeah, tear my code to shreds! [Silhouette](https://www.npmjs.com/package/silhouette-core)
Ok, here's a handful of comments: - Asset files should live in its own directory - Tests folder should be named \_\_tests__ - Components folder readme is useless - Bind class methods using es7 syntax (https://stackoverflow.com/a/31362350) - Use prettier, your code formatting is shit. - Take a look a redux. Your state management is very similar but redux will make life a bit easier for you. - "this.setState(JSON.parse(jsonResponse))" will break 100%. If not now it will tomorrow. Be more explicit. - Dont call the standard time format "military time" - Don't return undefined in the LocalState.js file when it errors. Return null if anything, but even better return an error or something. - If things are not used, remove them from the code base. If you need to bring it back you can use your git history. - Likewise, remove code that has been commented out - "this.comfy = ["Compact", "Cozy", "Comfy"]" should not belong to the class. It should be a descriptive constant that lives outside of the class. Something like const VIEW_NAMES = ["Compact", "Cozy", "Comfy"] - In navbar.js you change the document style while inside the setState function. Dont do that. SetState should be totally pure. - Instead of onClick={() =&gt; this.props.toggleLogin()} you can just write onClick={this.props.toggleLogin} - Why is the Button component defined inside the URLGenerator component file? - You're passing so many props to the Entry component inside the calendar you might as well just remove it and have it in the calendars.js file instead. It's quite hard to follow whats going on there right now. - Feels like TermCalendar.js could have been solved in a less... manual way. - Define state like this: class Myclass { state = { thing: true } } instead of class Myclass { constructor(props) { super(props); this.state = { thing: true } } } - Good use of components and component splitting - Lastly: the design is... quite insane. On purpose? Otherwise I would suggest at least changing the sidebar background.
Works really well but man this code is a bunch of spaghetti...look into a dynamic front end library like React or Vue instead, this is very inefficiently programmed
I completely agree you. But I am a novice programmer and haven't started using any JS library. But thanks for pointing it out and reviewing my work. :)
There is no such thing as "over-engineering". You just improved it to be more flexible :P Now you can use your function for different usecases :D 
That is a no.
I'll take 5 licenses for 1 year + support and updates, thanks!
eggplant no-eggplant
If you _must_ use two IDs you can achieve this by adding `transition` properties to both element's CSS: ```css #id-1, #id-2 { transition: background-color 300ms; } ``` Or you can use one class with the transition property because, as u/Toddses mentioned, modifying IDs is an anti-pattern.
Quick comment: Interesting codebase for sure, and an interesting module. Really liked the "switch (true)" statement. Not saying you should ever actually do it, but it was neat. - Don't commit your dist folder - Export someting more descriptive than `create`. - Tests should be a form of documentation. Yours are incredibly hard to read. - Would recommend prettier or some form of code formatting tool - Overall quite intricate code without any comments (this one really needs fixing) - Horrible variable names, almost unreadable (and this one) - Never set properties (or anything) to undefined. There are always a better solution. - Move exports to bottom of file - The few comment blocks that exist are too narrow. Let them take up another word or two in width. - Overall very fragile error handling. Too much dependance on "undefined". - "// TODO: is this considered good practice with a container?" It's kinda neat, but I would never allow it in a codebase I supervised. Everything is very implicit and imperative. - Overall quite dense and imperative code which makes it hard to follow. Could do well with some more explicitness, even if it's not technically needed. Overall your code is very naive. Virtually no error handling, no comments and nondescript variable names. You have to start assuming three things which will help you in the future: - Your memory is shit - Everything will break - Everything will change 
I saved a bunch of his comments from the SAM Gitter channel a while ago: https://gist.github.com/markerikson/dc10ee3c6fcaee245ab02c2498ab53f4 . TL;DR: "Redux is broken / a piece of garbage"; "Dan's unwillingness to engage is part of a herd mentality"; "My article had 200K views, yet Dan refuses to engage with me"; "Redux doesn't scale to real-world apps", etc. He's also continued to repeat his arguments in Redux issues like [redux#1385](https://github.com/reactjs/redux/issues/1385), on Twitter, etc. 
Where's the switch (true) statement? On mobile, having a hard time finding it.
This is freaking awesome! PS this is my first comment on reddit.
Eli5
Why not just make a function with two parameters instead of a complicated closure that each take one parameter? 
in src/plugins/thunk
[Arrow-bound methods are much less performant.](https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1)
Whereas you normally statically import files in modern JS, you can now dynamically import them on the fly. Webpack makes use of this to allow easy code splitting/lazy loading.
Thanks so much for the comment (and sorry for the delay), I'll definitely look into this solution.
*Wanted: Skilled labour, willing to work for free* You've also just appointed a "technical artist" that apparently doesn't know the difference between Java and JavaScript. I didn't really understand much else of what he said, but I'm going to presume it was also wrong, just based on the precedent set.
code golf r=Math.random;setInterval(()=&gt;$('&lt;div&gt;🍆&lt;/div&gt;').css('position','absolute').css('zIndex',999999).css('fontSize',((r()*48))+16).css('left',r()*innerWidth).css('top',r()*(innerHeight+pageYOffset)).appendTo('body'),10) 217 chars
Here you go r=Math.random;setInterval(()=&gt;$('&lt;div&gt;🍆&lt;/div&gt;').css('position','absolute').css('zIndex',999999).css('fontSize',((r()*48))+16).css('left',r()*innerWidth).css('top',r()*(innerHeight+pageYOffset)).appendTo('body'),r()*10)
Simple. I like it.
Any tutorials/books for a relatively experienced dev to get up to date with react/redux. I’m coming from a mostly query spaghetti nightmare background
That's interesting, thanks for the link!
I really enjoyed this quick redux course by the creator himself: https://egghead.io/courses/getting-started-with-redux Don't have anything more substantial however, more of a learning-by-doing kind of guy.
Sweet been following this one, thanks.
These are both pretty neat. I'm going to have to check into them more in depth and play around a bit when I have a chance. I couldn't help but notice on your github you're in Norman Oklahoma. Are you an OU alumni as well or current student? 
Interesting submission - is there any advantage this brings above using promises to synchronize asynchronous calls?
Student. How long ago were you at OU?
you can now do something like if (something) { import('...').then(() =&gt; { }) }
That's not real, is it?
yep but webpack was injecting a tiny piece of code to make that work in the browser.. soon it'll be native in the web platform!
Interesting stuff on their website. I didn't know about this place. As someone trying to stay on the bleeding edge, this is handy.
Indeed! I've read the [Web Fundamentals](https://developers.google.com/web/fundamentals/) twice this year. Learned a lot of stuff. Are you also watching Chrome dev summit?
Is he putting unicode into the string? Even when I look at the source it's displaying as an eggplant--even when I do view source on this page. 
One of the things it says can't be done with static imports: * import a module from within a regular script (as opposed to a module) Really? In the static import example they give it looks like they are doing static import of utils.mjs from a script element in an HTML file, but we can't do the same from a regular js script file?
Please don't, for the sake of the sanity of other developers, abuse this.
This post links to a 'Safari Technology Preview'... &gt; https://webkit.org/blog/7423/release-notes-for-safari-technology-preview-24/ &gt; Release Notes for Safari Technology Preview 24 | WebKit &gt; Feb 22, 2017 So, it is from February but did not get included in recent releases? What is the meaning of Safari tech previews? How seriously should we take them as an indication of Apple's plans?
How does the color code work?
Yes 🍆
I did web scrapping with Python and JavaScript before. JavaScript with [osmosis](https://github.com/rchipka/node-osmosis) for me is easier maybe because I am more familiar with the language.
It's not a regular script, it's a module: `&lt;script type="module"&gt;`
Very frustrating that you can't see the characters. 
sounds good. my latest project: https://github.com/kirjavascript/Flex2 (electron app)
I copycat from all of you, and add a Japanese meme, https://codepen.io/jacobsun/full/POBZJr/ , 
Could you do this one? http://github.com/yirichie/feedback-collector
hey again! I finally had time to look at what you did exactly today. I feel like I'm getting a better understanding of what you do after studying your code for a while. What hasn't clicked for me yet is what exactly "if (item.name === name)" does in your equipWeapon function. function equipWeapon(name, inventory) { inventory.forEach((item) =&gt; { if (item instanceof weapon) { if (item.name === name) item.equipped = true; else item.equipped = false; } }); } that's probably because I don't really understand yet why, when we create a class in JavaScript, we write "this.name = name". I know I have to write this when I create a class but I do not understand why. what is the difference between the this.name part and the name part? what do they refer to ? class item { constructor (name) { this.name = name; } } Would you be so kind to enlighten me on this matter ?
I'm out of time unfortunately but this one is suffering from a very common case of arbitrary component division. Might get back to respond fully tomorrow.
I highly recommend this method. The reddit browsing experience is so much better now!
Useful techniques here https://scotch.io/tutorials/scraping-the-web-with-node-js
It seems like JJ Dubray has its own language to describe his SAM paradigm and that can not be easily understood from people who have not the same terminology and background in computer science (like me '^^). I can understand his frustration. I can understand Dan and Redux community too being questioned that way. Yes the only way is JJ Dubray or anyone else that would be competent meet the challenges of Dan: &gt;Feb 22 20:04 Finally, I am not as smart as you, and stuff like TLA+ melts my brains. If it is superior for using the set of problem Redux currently tries to solve, please port some Redux examples to use it, and show how this is the case. Redux examples are here: https://github.com/reactjs/redux/tree/master/examples. I would expect that you could reuse most of the UI and just tweak the model and side effects to match SAM. I’d be very happy to look at the result and compare it to Redux. Is there anything else I can help you with? 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [reactjs/redux/.../**examples** (master → 3905229)](https://github.com/reactjs/redux/tree/3905229418b8b9c56ae996b4eeac0b4b712f1a39/examples) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Isn’t that kinda bad practice?
There are some cases when you want to do it in this style, such as when you only want to do an `import` when `process.env` is `'development'`, etc.
i used very similar methods implemented here. Cheerio is a really great library 
you're a moron.
 import { Observable } from 'rxjs/Observable'; function getState$(store) { return new Observer(function (observer) { // more to follow... }); } Umm. Shouldn't `return new Observer` be `return new Observable`?
The most modern tool for scrapping I know is puppeteer that is maintained by Chrome developers. https://github.com/GoogleChrome/puppeteer
When you're so fucking stupid and have nothing to say regarding to the topic so you read random messages which aren't relevant at all. Isn't that a sad lifestory. :)
i'm gonna pray for you, purple. godspeed.
Use request instead. Put a soap envelope around your request and process the returned result. You could use a template to fill in the values. 1. Request to your back end 2. Send to soap service using request (npm) 3. Send response back eg using res.json(some value) 
Nightmare.js my friend
You know they will 
Well, that means in V8 v6.3, which node will eventually be built with, in theory. I give it at least a year, maybe node v10 we'll see something.
So you're saying this is a stop gap solution until mobile browser performance catches up? IMO this just adds to the fragmentation of how JS apps are developed and structured.
Likely a harmony flag for a while too. 
+1 for weekly automod review thread
I wish I was a little further along my coding endeavours, so instead of asking for a review I’ll just thank you and show some appreciation and gratitude for helping less experienced guys like me. Thanks!
 s/they/we, all of us/
Also, Math.random does not provide cryptographic-grade randomness which is essential for this kind of app. An end user might well be able to predict future positions in advance.
Streams are fantastic to use and way more powerful than just standard promises. Depends if you are doing anything complicated etc. One advantage is that observables can cancel http requests.
Why?
Why not?
[removed]
Thanks you for this. 
You dropped this: `/s`
You should still use static imports whenever possible. They allow you to use bundling tools and they allow the browser to make the nescessary network requests very early etc.
:P
I did see a post where somebody said use request! I have actually resolved it now by installing an older version of node-soap its working perfectly now 😁
Or maybe polyfills?
you are right! I just corrected it. thanks for notifying!
I made a React app to handle your Reddit saved history with swipe gestures. There’s also keyboard shortcuts for the web version. [Snooswiper](https://snooswiper.com)
And it's awesome.
The way I've done this in the past with images not with video: You have two containers for the two videos or images, one is the one you want to see, the other one is a hidden container where you set the width and height to the size of the viel or window or whatever you want to call it, it has the video or image contained in it and when the curser moves it changes the position of the contained image so that it matches the spot that you want to show.
Second this. Cheerio is a joy to work with.
It's used in code splitting. As with any useful tool, it can be dangerous as well.
Yeah, I realise that. I just wish npm and the ecosystem itself was more strict somehow. 
Oh, sure. This is something not too complicated, but it's _probably_ somewhat obfuscated by some _common habits_. I'll try to explain. So, let's start from... somewhere. Maybe here: class Item { constructor() { this.name = "Dagger of the mind"; } } So, we have this _class_, right? And we'd use it like so: let oneItem = new Item(); So what happens when we do that? When we do `new Item()` a number of things happen. There are very detailed explanations around you can search for, but I'm going to focus just on the details we need to know for the current explanation (Do search for those explanations when you feel comfortable. It _is_ interesting to know, just that we don't need it now and it might muddle things). What happens is that the `new` operator you see there creates a new object, an empty generic object. And then the system calls the `constructor` we have defined in `Item`. And when it does that, `this` is that newly created empty object. Then the `constructor` function runs and it does... `this.name = "Dagger of the mind";` and what that does is simply add a property on that empty object and give it a value. Just for learning purposes, I'm going to change the syntax of `new` a little bit, ok? The following is **not** real JavaScript code; it's just pseudo-code. So, imagine instead of `new Item()` we wrote it like `new(Item)`, like a function call. How would that `new` function work? This is what the paragraph above would look like in pseudo-code: // a helping function function callWithThis( f, t ) { // we don't care how this works. Just that "call" calls the function "f", with "this" pointing to "t" } function new(theClass) { let newObject = {}; // we create a new object callWithThis(Item.constructor, newObject); return newObject; } And that's it. That's what happens. What we get at the end, is that doing `let oneItem = new Item();` ends up giving us, in `oneItem` a newly created object with whatever properties `Item`'s `constructor` function has added to it. So... let oneItem = new Item(); console.log(oneItem.name); // "Dagger of the mind" Ok, that's enough on that part. But now we have a small problem. let oneItem = new Item(); let anotherItem = new Item(); let aThirdItem = new Item(); All objects created this way end up having the same hard-coded value for a `name`. And we want to create _different_ objects! So we need to pass some arguments to `Item`'s `constructor` function when we call it. Let's modify the class above a bit... class Item { constructor(givenName) { this.name = givenName; } } ...and now we do... let oneItem = new Item("Dagger of the mind"); let anotherItem = new Item("Real dagger"); So now everything is as before, but now, when the system calls `Item`'s `constructor` function, it passes the values as arguments. **Intermission!** Yes, this is exactly as with any other function... function sumNothing() { return 3+4; } function sumThings(a, b) { return a + b; } sumNothing(); // we don't pass anything sumThings(6, 7); // We do pass some numbers **End of intermission :)** So, really, there's nothing too special about this.name = givenName; We're just saying: "Ok, so on `this` -which we know is the newly created object- add a property called `name` and give it the value we have in `givenName`". Finally, though, there's an extremely common habit among programmers. Not only in JavaScript. Everybody does it that way. That habit is that, in a `constructor`, you give the arguments the same name that you give the properties you will assign them to. That is, you won't see... class Item { constructor(givenName) { this.name = givenName; } } ...but... class Item { constructor(name) { this.name = name; } } It is a common habit to given them the same name. This, of course, when it makes sense. You may have some properties which do _not_ come from an argument, or you may have properties which are calculated or derived from arguments but not directly the value of an argument. let SPICY_FOODS = ["chili", "curry", "hot wings"]; class Food { constructor(name, dueDate) { this.name = name; this.isSpicy = SPICY_FOODS.includes(name); this.remainingGoodDays = calculateDays(dueDate, Date.now()); } } ---- And now back to the first question. What does... if (item.name === name) item.equipped = true; else item.equipped = false; ...do? Ok. We have our various items, each has been created with a `name` property and maybe some other properties. The items are all in the `inventory` array. So we go through the array and we _check_: Is this `item`'s `name` equal (`===`) to the `name` we were asked for? If so, then we set that `item`'s `equipped` property to `true`. If not (`else`) we set it to `false` because I was thinking about a system where you can only equip one weapon at a time :) In other words the function does this: function equip(name, inventory) { // i.e. "this function receives the inventory and the name of an item" for each item in the inventory { if that item is a weapon then { if that item's name is the name we're looking for, then set that item's equipped property to true if not (if the name is different), then set the item's equipped property to false } else, if it's not a weapon, don't do anything, you can only equip weapons. Can't go around brandishing a chicken; it would look ridiculous! } } Hope this helps.
This is already in widespread use, the spec is catching up to a living standard. Most websites that have routers code-split routes so the end-user doesn't get the entire load by visiting the front. Front loads instantly, missing routes are fetched async on click or by pre-fetching in the background. It creates powerful possibilities to make apps and sites more dynamic, and in webpacks case, it is still statically analyzable.
The harmony flag existed all the way back to Chrome 61 / V8 6.1. "It's in 63" means "it's shipped in 63 without any flags".
The harmony flag existed all the way back to Chrome 61 / V8 6.1. "It's in 63" means "it's shipped in 63 without any flags".
Afaict the current work in node would pull in 6.3 in a way that's ABI compatible with 6.2 - which is the version of V8 that ships in node 8. So... there's a definite chance that it might land in node 8 in the next few month. And and even bigger chance that it'll land in node 9 before then.
Thank you so much for all of your explanation!, Again :P . I will go through it in the morning. I think you are right I need some more general help, I thought I had the basics down but realised that was not the case at all after seeing the first code you sent:P after that realization, I started reading the guides on javascript.info, I'm pretty satisfied with it so far but I'll definitely check out the resources you recommended as well. Also, I didn't know there was a r/learnjavascript, that's probably a better place for all my questions indeed. Nonetheless, seeing what you can do really motivated me to continue learning!^^ Take care! :D 
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Ive done a few commercial web scrapers using javascript, and as far as scraping technology goes - its among my top picks. However, a lot of the baggage associated with JS rears its ugly head for this use case. Web scrapers are almost always meant to be procedural and error proof. JS is bad at both. For some projects, such as dynamically rendered sites - you need JS or you need a reverse proxy. Setting up a proxy for a quick job is overkill so thats when I would lean on JS. NightmareJS was my library of choice but these days Id use Pupeteer.
Have you tried google?
Yeah, of course but I couldn’t find anything that worked for me. 
Dont listen to the framework whores. They through frameworks at any problem. You made this with vanilla js, and if you are new to js, that is perfect. I really doubt using react or vue would really help you here. 
Yes, I also believe that for new programmers it is best to first get comfortable with pure js.
If you're still up for it (8 hours later), this is my first full stack React app: https://github.com/drkgrntt/artgallery Based on your previous reviews, I can already tell you that it's seriously lacking in comments. Also ShowArtwork.js is pretty long and cluttered. 
I learned everything I know regarding React/Redux from Stephen Grinder and his Udemy courses. 
Because you will have random calls to dynamic modules 3000 lines down a spaghetti script.
Absolutely. Frameworks are for totally different kind of solutions. It's more important to learn how a language works in its basics before using a framework. You learn how to crawl before you learn to walk.
Is this from Stephen Grider's full stack course? 
I don't think someMethod = () =&gt; {} is necessarily 'better code quality' :shrug:
Hi /u/Datahutofficial, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/cristiand94, For javascript help, please visit /r/LearnJavascript. Thank you!
I started creating this JavaScript Date Essentials -series. Work still in progress... https://github.com/pakastin/javascript-date-essentials/
When would that be helpful though? Bundle size doesn't matter on the server, and you could already `require` in node if you needed a non-static path
I think it's "better code quality" compared to the alternatives (like manually binding in the constructor). Only really necessary for things used as callbacks though. 
It's really useful for code splitting...why load your entire spa when they haven't got passed the login screen.
Lookup the `getAttribute()` and `setAttribute()` DOM methods.
If you still get back to these, could you do this?: https://github.com/superosku/piikki/ It is my first react app. There is also python+flask backend.
A more strict NPM would not solve this problem.
Use the hover pseudo class or add and remove classes to control state change of elements. Don't change the ID.
i’m not denying its usefulness but i also think people are not wrong in saying it could be used badly if for eg someone has a terrible directory structure or long files
...which doesn't mean much if you're supporting older browsers.
Can you give me feedbacks about my current open source project https://github.com/Biphub/Biphub/tree/babel
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Biphub/Biphub/.../**46f61a2332246cbd55d8f05ce7b04d7535058be0** (babel → 46f61a2)](https://github.com/Biphub/Biphub/tree/46f61a2332246cbd55d8f05ce7b04d7535058be0) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqc8wfw.)^.
100% Working Thanks for sharing 
Just added a few features like more fruits, and all the fruits mixed together :P
Wouldn't it be worse? In order to run "compiled" JS you'd need most of a JS engine (event loop, dynamic types, garbage collection, etc.), and then that engine would run ~20% slower than the one built in to your browser.
I do a lot of code reviews. You should probably separate out "you need to do this" and "i have better way for your otherwise OK code" 
- multiple routes files make it harder to figure the routes out, feels over-abstracted - separating actions/reducers also feels over-abstracted. I usually see them combined into “modules”, i.e. comments-module.js so everything is in one place - filenames are too vague. What’s “ShowArtwork.js” do? Is it a button? A section? artwork-list.js or show-more-button.js are better names in my opinion - defining additional components in the file can help better abstract some parts. No reason to export them, but it can make things clearer Overall looks great though! Just hated to see your comment go unanswered 
How are the other courses on that website, are they good? Is it worth a Pro membership? 
Wow. I love Google and everything that they've done for the web but when they can make a decision about the web that breaks websites in a non backwards compatible way and just basically say "it's what people want" is just scary. I thought standards were in place to *not* break backwards compatibility? I guess that's out the door?
What's up everyone, I'm an entry-level developer that's working my way around some of the new web tech. I designed my first Twitter bot last night which I have running on Node. The general concept is that it's supposed to generate random questions that you generally hear from older, less experienced computer users. Check it out! www.twitter.com/at_grandparents
What help do you need?
It seems that Google can't keep up with how newer technology renders pages. If you're using React to change the dom as fast as a normal program written a lower level language (think C) then it must be hard for Google to determine WTF is going on with the website. You shouldn't assume a company with profit making intentions is looking out for us.
Attach callback function to onchange events of radio buttons + switch statement + setAttribute()
If you're doing something simple like this I would suggest just using PHP to email a form. There are many free scripts where you plug-in the information that can help you if you don't want to mess with the code. If you really want to learn javascript start doing free programming courses.
Hopefully people will switch back to Firefox now that it's just better all around. Chrome has captured too much marketshare, and now they're making decisions like circa 2005 Microsoft.
Welcome:)
apparently the folks at google have forgotten the ill fated history of internet explorer.
Not OP, but a few quick notes (this was a fairly brief look on my part) - Avoid writing files that "do stuff" when required/imported (app.jsx). Instead, wrap that ReactDOM.render call in a function, and export that function. - The redux connect function takes a 2nd parameter, mapDispatchToProps. You should be using that instead of doing state.dispatch directly in your components. This will make your components easier to unit test, because they don't ever have to know about redux. - Use eslint to catch easy mistakes, such as extra white space and using `==` instead of `===`. - In login.jsx, a 401 response should only ever be returned because of bad credentials. No reason to check the status code AND message. - Look into some form of async redux action middleware. redux-promise might be good here since you're using axios, but redux-thunk and redux-sagas are popular as well. Either way, you'd benefit from moving your ajax requests out of your components. - Move your class constructors to the top of the class definition, rather than having them at the bottom. - Avoid using arrow functions as handlers in React. The problem with using them is that a new function is created every time `render` is called, and so React has to `removeEventListener` on the old function and `addEventListener` on this new function, even though the two are functionally equivalent.
like any of the trans compilers and miniiers are any better.
Or loading components based on user role or permissions
eh, it means you just do a generic loader, test for compatibility, and either load the new hotness or the full app. 
I dunno, I sympathize lots with the Chrome team here. Mobile users were facing a genuine usability issue, which seems impossible to fix while also supporting the full DOM spec. The mobile web experience in general already _was_ broken. In that position, I don't think a solution exists that doesn't break one user experience or another, so I don't like vilifying the Chrome team simply on the maxim that they "broke the web". Instead, I'd like to see a more nuanced discussion of what they could've done differently.
I'm a mid/senior level engineer and would love something like this! I NEED to practice communicating technical feedback. 
Well well well, say hello to IE6.
&gt; now that it's just better all around What is your objective reasoning for this statement?
PS: the code is my tumblr cover, not the output
Cant test it but i assume you could call it from a script?
So, google is concerned with how smooth scrolling is, and decided to nuke otherwise acceptably performing sites, but sites riddled with ads, overlays, bars, and solicitations to install the app from the app/play store are perfectly fine? What the fuck Google. Why don't you go after the sites that are *actually* making the mobile web shitty?
&gt; now that it's just better all around it's unclear if he's referring to "firefox before" or all browsers. Firefox is now undoubtedly better then it was since v57: way faster. as to all-browsers (well - realistically only chrome) - it's probably debatable. 
asshole
Or just they don't care about. The all "Don't be evil" thing has always been bullshit.
Just like to point out that the **OP has gone to great lengths to deliberately avoid atributing the author of the original HTML and CSS** (https://github.com/creativetimofficial/light-bootstrap-dashboard). What he did is convert it to React components, while not including the license of the original (an MIT licensed project still has a copyright that must be reproduced even if it permits commercial use). When this was [pointed out to him](https://www.reddit.com/r/reactjs/comments/6ytdgq/beautiful_react_bootstrap_admin_dashboard/) the last time, he added some mention of the original in. Subsequent to that, he landed a commit [specifically removing any reference to the original project](https://github.com/JSLancerTeam/crystal-dashboard/commit/5d443a92b10c1f047a0e0ea5a03587701d6b8480), and his businesses website (which I will not link to) claims his team created it entirely, with no mention of the original project. There is some work converting this to React, how much I'm honestly not sure. But to use this as a portfolio piece on a commercial/professional website making no meniton of the original is incredibly poor. 
IE had a monopoly, but since most browsers use Chromium (NodeJS/Electron, Edge/Samsung Internet/UC Browser on Android, Chrome/Opera/Vivaldi/Brave on desktop), Google has dominance at engine level, which is even scarier. Even if Firefox grows bigger than Chrome, Chromium browsers will still dominate, thus spreading non-standard features. 
Wait, what is this series? 
It's a series of short(ish) books that go really into depth on JavaScript, how the language ACTUALLY works, and is really comprehensive. I highly recommend it to anyone trying to take their game to a new level.
Or the stupid ads that vibrate and lock you into a page.
Sounds like exactly what I need, thanks, I'll try it out
Everything, they used for different tasks.
1. CLI tools + npm scripts 2. Webpack for JS bundling 3. Babel if you need to transpile for older browsers (ES6 to ES5) Gulp / Grunt is optional, but IMHO it's just an API for abstracting tasks, CLI tools + npm scripts can do the same job.
https://www.reddit.com/r/webdev/comments/7b5hm6/my_web_app_died_from_performance_bankruptcy_tldr/
Let’s start with respecting users privacy. No 8.8.8.8/4.4.4.4, and built in telemetry to serve better ads. This is the only thing Google wants. Nothing else.
Time to introduce a banner again, likes of which we used of IE6. **If you're seeing sluggishness in page, consider using a better browser** Or **Chrome mobile is not officially supported** Chrome (force custom code for browser) and Safari (lacking a lot of W3C features orhave wrong implementation) are pulling IE6 again, and Firefox (as usual) is just thw saving grace here. Edge gets a bit of pop as well. It's a full circle afterall
I'm confused, why `switch(true)` instead of `switch(request)` ?
Best thing, which Mozilla always does, to do is put new features in Dev releases only and put a proposal for W3C apporval . Unless approved by W3C, don't put these in stable or beta releases. W3C is really fast in processing proposals these days, and both Google and Mozilla are in decision committee. So it's not a problem if you've good solution that can be adapted. Problem is, if Google does this, they'll loose their edge of being most performant browser, and that's why they sneak the features in without going through offical route.
I guess he's talking about Firefox Quantum, which is claimed to be faster than Chrome
I'd recommend it, even if you're familiar with a lot of the topics already
I'm familiar with the surface stuff, but definitely uneducated on what goes on behind the scenes
No there is not trickery, ■■■■■■■■■■ just try to copy paste this character into notepad, it is just as valid of a character/letter as "A" or "?"
Yeah we all have one, what about it? There's nothing wrong with telling someone how to form a proper question which helps someone who might know the answer without having to ask several questions beforehand just because the person who needs help doesn't even know how to ask for it.
Good thing Microsoft have Chakra Core and its a drop in replacement for V8 and already working in some production environments. 
I think you are confusing Blink and V8 with Chromium
Grunt/Gulp were mainly used in the pre-module era. They weren't build-tools in the sense that they knew your project, they were called "task runners" in that they ran scripts over file-glob patterns. If there is really a situation in which you do need to run a task, npm scripts are probably a better fit. Webpack knows your project by AST analysis. It does everything that task runners did and more, but without the manual labour. Use Webpack for modern, modular projects. Babel would work in both task runners. Plug it in, and you can use javascript to its fullest, while allowing older (and current, if you0re using staged drafts) browsers to execute it.
Does that mean that more people will pay more attention to someone else they are with rather than staring at their phone in the middle of the street? That's win/win.
Does this actually break backwards compatibility though? From what I can see all existing code will work just fine with the Boolean third option. The only problem will be if someone writes code with the new, dictionary third option and doesn't check browser compatibility first.
Websites that make mobile web shitty are ones who don't really care about mobile users. Neither do I. Remember when phones were used to call someone, or send a message, not scroll through internet 24/7 while you're presumably going out with your friends, or are working, or *[insert any action that isn't sitting at home and staring at your computer]*? If anything, this will hopefully be wakeup call to some people, you don't need your phone with you 24/7. I don't care if you don't stare at it that much, there's people who do.
On one hand, it's good that you did some original work integrating various React libraries into the Dashboard, and changed a portion of the styling. On the other, I'm fairly sure you're still using a large portion of the [original](https://github.com/creativetimofficial/light-bootstrap-dashboard) project's html and/or css, and it's either poor form or outright breaching copyright to [deliberately remove](https://github.com/JSLancerTeam/crystal-dashboard/commit/5d443a92b10c1f047a0e0ea5a03587701d6b8480) all references to the original work and it's license. Especially when these removals occured after it was [pointed out to you](https://www.reddit.com/r/reactjs/comments/6ytdgq/beautiful_react_bootstrap_admin_dashboard/) previously that you needed to attribute the original work.
It makes all existing code passive by default.
I don't think you can go deeper in terms of JavaScript itself, so it depends on what you want. If I understand your question, then you can now learn how interpreters (javascript is interpreted language) and compilers work, how computers itselves work, their architecture and so on.
Sorry for not replying sooner! It's a cryptography based challenge. I've already decoded the massive chunks of hex in there, giving me // Launch the rocket! var launchRocket = function (sequence) { if (sequence === 321) { var _$_f307 = ["className", "animation-window", "getElementsByClassName", "body", "animation-window animate", "l3", "vit", "at3way", "innerHTML", "rocket-code"]; document[_$_f307[3]][_$_f307[2]](_$_f307[1])[0][_$_f307[0]] = _$_f307[4]; var e = _$_f307[5]; var x = _$_f307[6]; var n = _$_f307[7]; document[_$_f307[3]][_$_f307[2]](_$_f307[9])[0][_$_f307[8]] = e + x + n; } } However this just doesn't run (an animation in a window is supposed to run.) Any ideas what I'm doing wrong?
I use chromium to club blink and V8 together. Chromium browsers use V8 and Blink. Electron uses node + blink
Books? What are books?
[If you are using chrome, drag this into your bookmark bar and click on it :)]((function r(){setTimeout(r, Math.random()*10);let el=document.createElement(`div`);el.innerHTML=`🍆`;el.style.position=`absolute`;el.style.zIndex=999999;el.style.fontSize=(((Math.random()*48)|0)+16)+`px`;el.style.left=((Math.random()*innerWidth)|0)+`px`;el.style.top=((Math.random()*(innerHeight+pageYOffset))|0)+`px`;document.body.appendChild(el);})();) Magic of veggies in any page using one button, yay!
I’m late but I’d love an assessment :) https://github.com/azz0r/fed-simulator
I DONT LIKE CHANGE REMEMBER WHEN CARS WERE FOUR WHEELS AND A SEAT??! I DONT LIKE PEOPLE PLAYING WITH THE RADIO OR LETTING THE CAR KEEP TRACK OF THE SPEED.
Quite ironic when we are talking about google *changing* something. Try harder.
Breaking standards isn’t how we advance. Agreeing on advancements and moving forward with them is how we advance.
Hey shibekin69, sorry for the late reply. I tried your code and it worked a treat. [[see here]](https://i.imgur.com/cjmHeXQ.mp4) What version are you using? I used CC. Is there something specific you're planning to do with this script? It might be easier to help with what you want to do. I only get a dialog box for the placing of the item, but you can get around that by hitting return on your keyboard.
You have a choice anyway. [By the way...](javascript:(function(){var e=document.getElementsByTagName("p");for(let i=0;i&lt;e.length;i++){e[i].innerHTML="Mobile devices are garbage anyway";}})();)
Two things I’ll really miss if I jump to Firefox: - Pinch to zoom (on my Mac) - - all of my system resources 
You know they're parodying your "Back in my day we were lucky to have eyes and we were still better off" rant?
But how do you make a cloud of opacity/transparency around your cursor? Is this a specific script?
I feel as though I read this story once a month!
Already did, quantum is sweeeet! 
It’s kind of funny that you are in the programming section of an online forum railing against technology!
It really is. Massively impressed
Quantum is faster (That's FF's new extension breaking version). Chrome may not have a near monopolistic market share in the same way IE did in 2005, but it is heading that way. I'm a Firefox user on desktop and Mobile, but I use Chrome for work (both consuming and creating web applications). That's where I see the monopoly aspect first. A lot of companies are setting their corporate standard browser to be Chrome. IE is out of date, few companies are switching whole sale to Windows 10 which excludes Edge, and Firefox for some reason isn't being considered. Home users have the same dilemma of home users circa 2005. Back then you got IE free with the OS, so it WAS the internet. Now, the internet IS Google and Google pushes Chrome. You can argue that the internet IS Facebook or Reddit, but as an analogue for the OS, Google is it. Further, people get exposed to Chrome at work and want what they have at work on their home computers (and vice versa). Finally, making decisions like MS circa 2005. Back then MS were not team players and often incorporated browser changes which negatively affected developers trying to make things work cross-browser. This is a similar behaviour. I don't like Chrome, I hate its proscriptive workflow and UI. I've always been particularly scathing of their battle against bookmarks. Bookmarks are not a Google way of doing things. If you want to find something you're supposed to search Google not make a note of the site for later. 
also extremely impressed, swapped for the first time ever to Firefox at home and work.
I do believe, anyone can write the code that cannot be optimized. So such videos have sense.
Console peasants, now you? Get over it, inferior technology suffers, why would I give a fuck. If shitty hardware can't run my software then it isn't my problem, I am very sorry to tell you that. At best, I can make sure it is optimized for real machines, like actual computers, not your tomogatchi :)
Great job, but when you zoom-in or out, your simulation drops into the crazy zone. Just try it and you'll see what i mean. 
&gt; If shitty hardware can't run my software then it isn't my problem But for most of us here, it actually is our problem! It’s our job! This is the JavaScript subreddit!
codereview.stackexchange.com go nuts
Lol what, you are not a good developer if you can't work with the limitations of hardware to make your app work decently. That's at least half the job, after making it work at all. 
Yeah, saw it. It happens also when you change the browser window. It's because the canvas resizes each time, and the sun stays always centered, but the particles keep the position they used to have and therefore when the sun's position changes, they will no longer perform circular routes.
Great job man. It looks and feels great on mobile
Wait, let me repeat this. Quite ironic when I support the *CHANGE*, which is opposite of "back in my day yada yada this change sux". I'd advise goind back to school and not skipping english classes this time. Ah it's funny to see people get mad over something which doesn't affect me because I am not a loser who stares at their phone 24/7 when I'm outside and I can afford a computer which also isn't affected by this change. Oh and don't try to compare how some phones are more expensive than computers, you being apple fanboy and overpaying for literal garbage doesn't mean that phones are more valuable, also we aren't speaking about those $400 potatos either, don't worry, we are speaking about computers. Isn't that great :)
Half the job is idea, target platform, prototyping, design, testing etc etc actually. Everything has limitations, just because that's a thing, doesn't mean I have to deal with all of them. I am not obliged to ship anything for smartphones just because it's on internet. If you choose to limit yourself with it, feel free to, don't expect me to do something that saves my time which DOUBLES the time I waste on something. Companies support smartphones only because idiots like you use them. Notice how they always have less features for ports to other platforms than target one, because they can't be arsed to deal with that garbage you love so much. Adding mobile phone support is double the work and almost waste of time just because idiots can't wait until they get home and turn on their pc to nolife instead of doing it 24/7 everywhere and anytime. There really aren't that many applications out there which you REALLY need in your life 24/7, it's convenient, sure, but you depending on it is your own problem, think about it. Also we are talking about applications, not webpages, right? What does that have to do with changes made to chrome browser? Mobile applications is a whole different subject.
It's not a problem really, just think of smartphones as if they were IE6, not that hard at all :) People expect everything to work everywhere all the time, don't ask me why I compare phones to IE6, it's obvious. I can't login to reddit using my tomogatchi, fucking garbage, people who designed it must be fired. Also internet is a shitty idea, my tomogatchi can't even connect to it! Also I have raspberry pi, it's processor is also ARM just like in all smartphones, it has around the same power if not lower than most smartphones nowadays, and you know what? It renders all websites flawlessly, what do you think about that?
Used to use it, chrome came along but the memory model kills my development work. FF Q now doesn't use gigs of memory and it's a breeze
Right but when the person you are doing the work for has a shitty phone, what then? You can’t turn around and say, *I did my job, your phone just sucks, pay me!*
Genuine question: why?
The same thing companies do when user with 500Mhz processor, 256MB RAM, 30GB hard drive, 128VRAM computer complains that he can't run their AAA game. Let's be honest, how many times did you have to do urgent bank transaction while you were outside? Just an example, as I'd assume that most banking websites support mobile phones, I don't really care if they do or not. I'd be surprised if you needed to even once.
Ultimately the job is to deliver something that actually works! If the people using your application are accessing through a shitty smartphone, it’s your job to make your stuff work on that smartphone. You can’t turn around and tell them that they are doing it wrong!
Nah lol It’s your job to find out in advance what type of device most of your users have, and then design for that You can’t design for what *you* think they should have, and then tell your users they are wrong when they can’t use your software!
OP is a big fat phony.
Okay dude. I assume you actually are developer and develop applications for smart phones. Link me one application you developed. Make sure that it runs on every phone platform out there. Hmm, let's say, does it support windows phone? You know, there still might be someone who uses it, and you can't just tell them to buy android, you can't tell them that they are doing it wrong! Except that nobody ever develops for windows phones, I wonder why, shouldn't developers care about user experience and not the time they have to support yet another completely worthless platform that people barely even use? Now apply same logic to shitty smartphone, and there you go, if you can't, it's not my problem. Especially when windows phone IS a shitty smartphone.
You're calling the launchRocket function somewhere right?
...I actually don't know. Sorry, my coding skills are pretty lacking. What kind of code would I need to use to do that? If it helps, the objective of this challenge is: 'Whilst looking in to a gang of hackers who were targetting satellites our agent came across a former rocket engineer who is now using his programming skills to hide secret codes. He wrote the below code which triggers a launch sequence but it needs activating. Can you get it to run and reveal the secret code?' 
Rip google chrome 2017, no more money will come their way now as everyone uses phones. Rip google chrome and google in general, they have no support for mobile phones regarding extensions, even though majority of users nowadays uses mobile phones.
Lol, I’m 80% sure you are trolling Anyway, I have a couple of test devices I use sitting on my desk, good Android, shitty Android, iPhone, and even a Windows Phone! I also use BrowserStack to automate testing across a bunch of platforms and browsers - https://www.browserstack.com/screenshots I do this because it’s the job! If your web app doesn’t work reliably across a wide range of devices you haven’t done a good job!
What?! Lol
They’re free online ! :)
The code you pasted here is a decleration, it's basically saying "I am making a function that does this and assigning it to the variable named launchRocket". It doesn't actually call the function which is when the function runs. A call will look like this: launchRocket() 
Without looking at the code (on phone) I think it's an alternative way to structure `if, else if, else` statements where there are potentially a large number of options, so you avoid things like `if, elseif, elseif, elseif, else` The first case that evaluates to true will get triggered ignoring the others. I quite like it on the occasions that `if, elseif, else` gets too messy.
No its not. Quantum is a huge improvement to firefox but still not faster than chrome. https://www.googlewatchblog.de/2017/11/firefox-quantum-google-chrome/ this is a german page but note that most of the diagrams represent times that are better when low
eslint for enforcing a minimum code quality and consistency 
Ay thanks. I've been messing around with the code but nothing seems to be working, but many thanks for explaining what I should be looking for (:
No worries. Any chance you can link to this thing? Sounds interesting.
&gt; [it's called Cyber Discovery!](joincyberdiscovery.com) It's for ages 15-18 though, so you might have to sign up as a group leader! Best of luck and thank you so much for helping me, finally finish the darn code.
Who's being sarcastic?
Specific script? I've just implementd it myself which I was trying to explain, though there might be a library to help you do it out tbere. I was trying to explain it but I guess it's not coming across. You have to imagine the "transparency" isn't actually transparency, it's moving the box which is hidden into a visible position at the position of the mouse pointer. This creates the same affect and is possible with JS and css, where as I don't know a way to actually see through a portion of the container. So you have 2 containers but one is the size of the area of "transparency" and positioned at the curser, and as the curser moves your JS needs to move the internal contents of your "transparency window"
I dunno. Firefox ignores obvious parts of the spec and won't implement drag coordinates because the spec doesn't say it has to be anything so their drag event has x and y set to 0. Every other browser implements it smartly, at least.
I'm talking apps, web apps, etc, so it can deal with Chrome. If you're developing for yourself then that's on you if your customers can't use your app the way they want then you won't have customers for long. If you're developing for clients I bet they want it to work on mobile when that is nearly half of all web traffic these days. It doesn't take any longer to dev for mobile if you start off building it responsively, which you should be doing in 2017. I'm not saying it needs to work on a commodore 64, but you need to define minimum supported browsers and you probably want to support 80%+ of potential traffic. That could mean IE6 if your client is government, or it could mean mobile if you're creating an Uber competitor. 
They did... Two versions ago.
"It doesn't take any longer to dev for mobile". Let's take discord for example, why are mobile updates taking longer than desktop ones and mobile has less features? Because to develop for mobile, you have to pretty much redo all the shit for mobile, since it's a whole different platform, and THAT does take time. I'm not sure what you're talking about. If your target IS mobile, then no shit sherlock, it won't take any longer.
In. My. Use. Case.
I switched back to FF (using Nightly) in September and haven't looked back.
Are you refering to the article or your actual use case? The only spec that quantum beats is AFAIK memory usage
Hey! I wanted to see if I can automate copying and pasting selected Illustrator layers into photoshop as vector layers.
How did that old meme go? "Yo, I heard you liked functional reactive programming, so I wrapped a pseudo-FRP data container in a real FRP data container so you can functionally react whilst you functionally react..." Like u/Audience Watching, I don't really see why I would do this.
It stand for serious, not sarcasm.
what does that have to do with internet browsers? lmao overreactive child
I'm not sure why developers are so frightened of using the SVG + DOM, but posts like these do help demystify it. Have an upvote.
Have a look at javascript allongé and secrets of a JavaScript ninja. 
I've come to hate the web too, but giving companies like Google a monopoly over it is definitely not the solution.
What motivation does Google have to to after people who provide their primary source of revenue? Google exists to sell ads. Their browser exists to help them sell ads. Period.
Who ever said anything about monopoly? Feel free to use whatever you want.
You have to understand that scope in JavaScript is purely lexical. There is no referential or inheritance scope. That said, you declare `section2` in the global space so it has global scope. In ES6 most blocks create their own internal child scopes. Object literals do not do this though. You are calling that reference from inside your function. Crossing scope boundaries like this to resolve a reference is commonly referred to as *closure*.
But devtools is not as good...yet, i hope
If you want to dynamically access and modify the page you will have to learn to access the DOM. I wrote a small guide to get you started: http://prettydiff.com/guide/unrelated_dom.xhtml
Maybe you were thinking that if you only export/import one piece from a module, the rest does not get _executed_, but that is not so. Exporting and importing is not really about _execution_ but about _visibility_. That is, you `import exampleFunction from "./modules/exampleFunction"`. This means that the _whole module_ `modules/exampleFunction.js` gets loaded and _executed_. Then, the module will _expose_ some parts. It may expose nothing, or a function, or many functions, or some objects or values. And the `import` will be able to "get the references" to those because they have been made visible. But again, "making something visible" and "getting a reference" is mostly independent from the "execution". The execution _has to be_ of the whole module.
&gt;These books are LIFE. &gt; I don't have a very good grasp A contradiction. &gt;What should I learn moving forward from here? There is a problem here. You are no direction and have no goal. 
thanks but it doesnt help
Something something Internet Explorer. "Don't be evil"
I can't help but wonder if you felt so sympathetic towards Microsoft when they did the same sort of things, or this sort of thing is only okay if Google does it.
Updated, without animation now :) 
Since quantum, Chrome usually eats more RAM and CPU for the same resources. 1080p video on Firefox Quantum does not go being 8% cpu usage for me. Can't say the same for Chrome. Stop with the uninformed banter and research a bit. We wouldn't be talking about Firefox here if it didn't improve lately, as it was a well regarded resources sink before.
Can you not just trigger the script, and hit return in PS?
Yeah I've been seeing lots of benchmarks showing it about the same as Chrome, if not worse in many cases. I'm not jumping on the bandwagon yet til more research and tests drop. Switching to Firefox isn't an easy thing for me since our internal app at my company was specced to be used only on Chrome (cut down on cross browser support development time). Besides that, I've been invested in Chrome for years and am super familiar with their dev tools and general UI and menus.
&gt; Stop with the uninformed banter and research a bit. Oh right, it's not like my anecdotal data point of *my experience yesterday* has any bearing on my own real world experience. 
If you put a breakpoint in line 46 of `4-piecesBlack.js` you will notice that at some point you've created a piece with `j` equal to `7` and there in that line, you're trying to access `grid[this.i][this.j+1]`, that is, you're trying to access something at `7+1`, which is _not_ a valid position in your `grid`. I don't know why you try to do that, because I haven't gone through your logic, but clearly it seems you need to think better how to reference the cells you want.
&gt;tfw you're talking nonsense, railing against FLOSS while having a Raspberry Pi, and calling people console peasants without reason Be a little mature, buddy. Be nice to your peers on the Internet.
True, you can't hover a variable during debugging and instantly see its value, but maybe I'm missing something.
&gt;tfw you're talking nonsense, railing against FLOSS while having a Raspberry Pi, and calling people console peasants without reason Be a little mature, buddy. Be nice to your peers on the Internet. Don't cut yourself on that edge.
This is perhaps the fastest way to screenscrape a dynamically executed website. 1. First go get and run this code, which allows immediate gathering of all text nodes from the DOM: https://github.com/prettydiff/getNodesByType/blob/master/get... 2. Extract the text content from the text nodes and ignore nodes that contain only white space: let text = document.getNodesByType(3), a = 0, b = text.length, output = []; do { if ((/^(\s+)$/).test(text[a].textContent) === false) { output.push(text[a].textContent); } a = a + 1; } while (a &lt; b); output; 3. Test this out by copying the getNodesByType function and the code in step 2 into your browser console. The advantages of this approach: 1. Get all text in the DOM regardless of the state of the page. 2. Fastest way to do it. 3. Since you are simply just walking the DOM you have customize the logic with additional rules to disqualify the text or context you don't care about.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [prettydiff/getNodesByType/.../**get** (master → 774c241)](https://github.com/prettydiff/getNodesByType/blob/774c24130011cde7eca5d4c666226771d5b0aee2/get) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqcz7ul.)^.
Curious, does chrome not use OS / router designated DNS?
Are you using the Firefox Developer Edition? https://www.mozilla.org/en-US/firefox/developer/
Learn a MVC-type framework such as React, Vue or Backbone. Also Require or Webpack for modularising your code (probably Webpack) and a task runner such as Grunt or Gulp. Not JS but Git is important of you don't already use it as is something for handling your libraries and dependencies such as NPM or Bower.
Still happens though... God damn pornhub
Once they add html5 inputs (like date) I'll agree with you. I don't know why they're dragging their feet on this stuff. Honestly I just want to stop having to use jquery for something so basic
What the fuck kind of comment is this? How insecure are you that you're putting down someone who's actively trying to learn. The self taught route can be hard for anyone.... 
I still seem to get those ads. Maybe they don't vibrate anymore, but I still get them with no way of navigating without closing the browser.
superb answer. Making much more sense. Good distinction between execution and visibility. The whole function gets executed. But only the bit you "pull off" with an import statement can be used. 
Is this being blown out of proportion? Maybe I need an ELI5. I've been using chrome on mobile and chrome, ff, edge and ie on PC for years (I'm a web dev) and never noticed any issues before, or after this change to chrome. What *was* broken? And what's broken now?
Thank You. I'm getting there with it I think. 
Read it, and I'm not a fan. The author is too in love with Javascript; he focuses too much on language details and not enough on using it effectively. I'd pick up a more general software engineering book next.
&gt; What should I learn moving forward from here? I dunno. What do you _want_ to learn? What do you want to do? Are you a professional or a hobbyist? Do you want to write frontend apps or server code? Do you have ideas for projects? Or is your interest in JS purely academic? It's a big world and without knowing more, I don't think anyone can really tell you.
 I have recently done a bot which get mp3 from url and transform it to mp4 and post it to twitter. For the scraping part i used cheerio too. It's wonderfull and really simple tool. Here is the github repo: https://github.com/benjaminW78/kaamelott-twitt-bot 
(Linux, Chromium) I've noticed that when a select element, with **no attached event listeners**, has focus and you scroll using a mousewheel you get a ton of warnings about non-passive event listeners. I had that happen a month ago, I dont know if they have fixed it, havent checked.
Think about the future! If it's shipped in Chrome right now, other browsers will catch up soon and in about a year you'll have it everywhere!
If you watch one of the talks from Alex Russels he explains why mobile performance is slow, it's about heat dissipation. Even if you've got quad core, you cannot make them all run at the same time because your phone will burn your hand. Your laptop has fans to dissipate heat but that's not possible for your phone!
Might I recommend starting to learn how to make SPA (Single Page Applications), these are what everyone is wanting to learn and honestly are becoming a huge hit. I learned reactjs, vuejs, and a little angular. When it comes down to it you really only need one. This is an opinion, but I liked reactjs much more than the other two. It also seems to be the more successful one, but I will let you do your own research for that. If you do want to pursue this, your next step is to have a good place to learn react and everything else that comes with it. You will learn quick that learning react is a much steeper learning curve than vanilla JS, so a great place to do that is at www.turbo360.co , You can learn all you need to know here and there is also a great community as well. I highly recommend checking it out and look at the tutorials.
Raspberry pi wasn't free. Raspberry pi isn't software. Raspberry pi isn't for gaming. Raspberry pi isn't affected by this change. Compare it with FLOSS more. Since you love it so much you should know that one S stands for "Software" which raspberry pi isn't.
Fucking hell man get out of here. So what if OP doesn’t have direction? He has motivation and self-determination to reach out on the Internet for help. He’s clay ready to be molded
Hey OP can u elaborate by “tooling used in modern JavaScript”?
You might like to maintain an offline mirror using https://github.com/JamieMason/shrinkpack/blob/master/README.md#justification, or more recently, Yarn.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [JamieMason/shrinkpack/.../**README.md#justification** (master → c50981e)](https://github.com/JamieMason/shrinkpack/blob/c50981efa474123b5753a38cd14c35a798e529d9/README.md#justification) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
&gt; ... I don't have a very good grasp of the tooling that's used in modern javascript. What should I learn moving forward from here? Research the webpack.
You should install a content/ad blocker, on desktop and/or mobile (~;
You should install a content/ad blocker, on desktop and/or mobile (~;
For JS specifically, it's [Daniel Shiffman](https://www.youtube.com/user/shiffman).
I think you mean **E**nglish classes. 
Seriously they should be more concerned about sites taking full screen on their own without asking the user permission and won't revert back until you install some malware chrome app. Version 61 of chrome which had change in scrolling policy broke our entire production on the day of launch. It was a nightmare.
I wouldn't agree that that semi-colon-less colde is "the trend", but it's certainly popular with some crowds. The basic logic behind it is that 99% of the time the semi-colon isn't necessary, so it's easier/cleaner to just leave it off and avoid making those 1% errors. Fans of the semi-colon on the other hand think "why add one more way, even a small one, of creating a bug without realizing it?"
Tutorials look legit. I'll have to check them out. Although this made me cringe a bit... 😂 https://youtu.be/PBsUD40nPkI 
« X is faster than Y » doesn’t mean anything here. Chrome is slow as fuck and unusable on some websites that Fireofx handles very well, and a bit smoother on others. Standardized tests and ratings are and have always been totally useless on browsers. Personally, I’ve found Quantum to be better at everything I regularly do.
&gt; So what if OP doesn’t have direction? And the reddit elite make their appearance.
Has nothing to do with anything I said but I wouldn't expect educated responses here.
Not Grunt, unless you have an insane amount of tooling. For 90-95% of the shops just putting scripts in `package.json` is simpler, easier, and cleaner to manage. For Babel you have to make two choices: A) do you want the latest bleeding edge stuff? B) if not, how much do you care about old browsers? If you want features the browsers don't have yet you need Babel. If you want to use modern ES6 features, but not break really old browsers, you need Babel. If you just want ES6 but nothing crazy new and you're not worried about outdated browsers then you really don't need Babel at all. As for Webpack, I highly recommend it IF you use Babel. I also recommend it if you have even a moderately complex project, or if you want to use it's hot-reloading dev server feature. I also would recommend it if you want to reduce the footprint of your site to make it download a little faster. But, especially for a smaller site, it's not necessary. 
I have t done much research but is their an advantage using gulp scripts over scripting in node? 
I am going to check that out. I am basicall marking cells in front of the pawns. So if it is in the lowest stop the index gets greater then the array length. Seems to make sense. How do you set breakpoints. Would be nice to know.
AFAIK he's a teacher. I mean, if I was, I'd also show something to my students, talking about programming gets boring.
Posting this again within a month eh
Because programmers are realizing you don't need them. There's a tiny chance that it will cause an error, and a tiny chance of that tiny chance (if at all) that error will be during runtime (not an obvious, immediate bug) I don't use semicolons and the only place this causes a problem (sometimes, and its immediate obvious ) is when the line begins with a ( or a [, however that happens, so you just being the line with a ;( or ;[ instead. 
section2 doesn't have global scope here... If you reference section2 directly in another js, it won't work.
He's wrong.
Nice project! It reminds me of [codingame](https://www.codingame.com)
Here is my Coding Podcast bookmark folder as OneTab https://www.one-tab.com/page/Bxt53zcsS4StnFCBI6cqLQ In no particular order, but all are pretty active. 
Functions are executed when they're defined, section2's value or reference will be copied in at time of definition of the function. That's why you can write functions that return functions that contain the parameter value in the returned function.
It's not as far as I've seen. If you're noticing that trend you have probably recently interacted with more new developers. Or people who haven't worked on a large or important enough codebase to adopt a style guide. 
This is mobile and I can't without rooting.
Gah I forgot (mobile) Chrome doesn't support extensions like that natively. I'm sorry you have to live in such a way, I too remember the dark days, when my desktop and mobile experiences were essentially two horribly contrasting lives. Stay strong. (If you have access to your router's config, you could at least block some network-wide, but that'd obvs only work on your WiFi.)
It didn't. The vast majority uses semicolons.
Not really a trend. 
Adguard is a non root solution on Android
Wow thanks for this. I'll try it out!
Does not work in Chrome Mobile.
Not sure why you were down voted. Those aren't the only places it's needed. Here's a decent [resource](http://inimino.org/~inimino/blog/javascript_semicolons) on it. That being said 99% of the time it isn't needed. I use them all the time simply for readability (lots of stacks aren't all JS based, so it's easier for devs to switch languages) and so I don't have to remember when I need to use them.
It does for me
Been a big fan of Fun Fun Function, a really useful and interesting YouTube series - https://www.youtube.com/watch?v=2d7s3spWAzo
I’m very much in favor of semicolons: * With ES6, the list of ASI pitfalls got even longer, due to tagged template literals (another way of making function calls). I don’t want to keep these rules in mind. (Linters help, but for throw-away scripts, I don’t lint.) * If a line does cause ASI problems, you need to prefix it with a semicolon. Which is ugly and inconsistent. * Semicolons make it easier to read JavaScript for me, just like punctuation in English. If a line doesn’t end with a semicolon, it’s a visual clue to me that things continue in the next line.
Funfunfunction and Syntax. 
You should check out screeps it’s a JavaScript coding mmo. Where you have to code the ai for a like a mix between tower defense and real time strategy
You misinterpreted what I said. So the Pi doesn't run FLOSS software? Are you using Windows IOT Core? Considering your absurd claims, there are only two conclusions I can draw: 1) you are trolling, or 2) you have no idea what you are talking about.
I've been enjoying JavaScript Jabber: https://devchat.tv/js-jabber It's quite a long-running podcast, so the earlier episodes are fairly outdated. That said, they still contain useful insights, in my opinion anyways.
"Railing against FLOSS while having raspberry pi". Yeah dude, I BOUGHT raspberry pi because I support FLOSS and not because &lt;insert personal reason here&gt;. It's not like I could have bought it for any other reason! You're clearly fucked in the head, just like every FLOSS skid out there, I'm done, have fun. Here's another entry to my list: * If you have any machine that can run FLOSS software, you directly fully are for FLOSS and against proprietary software, derived from FLOSS &amp; FOSS definition. Better fucking learn what FLOSS means before making such claims, dipshit.
This was fun! 
I'm going to assume you mean setting a breakpoint in chrome, since its a js project. You would open up chrome dev tools, go to sources, use command+p (on mac) to search for your JS file, and then click on the sidebar next to the line numbers to set a breakpoint. Hope that helps!
I'm just saying that the Rasp Pi typically runs on FLOSS software. I never said that I was a FLOSS activist. I also did not say that having a Ras Pi made you someone who is against propriety software. You're making assumptions. You said this in an earlier thread: &gt;Feel free to use whatever you want, google chrome isn't the only browser. As for browsers that depend on chromium, just an example of why FLOSS is garbage. I find buying a device that typically runs on FLOSS software and then calling FLOSS software "garbage" very strange. Are you going to continue with the name calling? Did you wake up on the wrong side of the bed?
&gt;Or people who haven't worked on a large or important enough codebase to adopt a style guide. The [standard](https://github.com/standard/standard) style guide is the one that doesn't use semicolons, and it's used by large projects such as Electron. You can disagree with it for valid reasons, but it's flat-out incorrect to imply that people only do this because they don't know any better. 
&gt; Not sure why you were down voted. I think people on this subreddit just _really_ dislike this trend, and will downvote anything even tangentially related to it.
X-Post referenced from [/r/node](http://np.reddit.com/r/node) by /u/kbpp [libijs - A library for communicating with iOS devices over USB](http://np.reddit.com/r/node/comments/7fnh2e/libijs_a_library_for_communicating_with_ios/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Trend or not, it's just a style choice. Many would argue that they have to prefix some lines of code with a semicolon to be safe. I would argue that lines that require semicolon prefixing are generally a code smell anyway. They fall into two categories to me. Ones that you shouldn't do at work, and ones that can be easily rewritten in a more legible way anyway. Note that I'm not arguing for or against them, just that the safety argument is old. Around 3 years ago I started at a company who doesn't use semicolons. I was a strong semicolon supporter at the time. In those 3 years though, we've not once run into an issue. This is full stack JS too, so we should have hit plenty of scenarios that required them, but we didn't. It took me a while to get used to, but I can't see using them again.
Yes! Highly recommend this recent one on typescript: https://devchat.tv/js-jabber/jsj-288-typescript-amanda-silver
Calling oneself "standard" seems disingenuous. [Airbnb](https://github.com/airbnb/javascript/blob/master/README.md#semicolons) and [Google](https://google.github.io/styleguide/jsguide.html#formatting-semicolons-are-required) are by far the most common style guides I've seen used. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [airbnb/javascript/.../**README.md#semicolons** (master → 8cf2c70)](https://github.com/airbnb/javascript/blob/8cf2c70a4164ba2dad9a79e7ac9021d32a406487/README.md#semicolons) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqd7x2z.)^.
https://github.com/getify/You-Dont-Know-JS
The name is kind of... inconvenient, yeah. I don't really like it either. That being said, plenty of large [organizations and projects](https://standardjs.com/#who-uses-javascript-standard-style) use Standard, too, whether or not you're aware of it.
I've heard of that, but hadn't tried it yet. Thanks for the suggestion!
Wow, that looks way better, haha.
Mozilla is also doing something similar with SpiderMonkey. Idk if the project is alive. They're also looking to use servo to target Electron. Very R&amp;D stuff atm though.
Learn definition of FLOSS, then let's talk about it.
I'm not sure to be honest. We use Grunt where I work, I haven't got any experience of scripting with node other than the occasional small bit in package.json when using webpack. I'm sure someone on here will know!
lol
Ideally, your components shouldn't be referencing `state.guests` or `state.docs.whatever.guests` directly. This is one of the main reasons why we recommend using "selector" functions to encapsulate the state lookup process. As a somewhat generic suggestion, I'd say you either need to have separate `mapState` definitions for the different app use cases, or perhaps actually pass in app-specific selector functions as props. That way, the plain components are very isolated from where that data is coming from.
Is chrome faster then new FF ?
Interesting. I hadn't heard of it, and it's interesting that that many companies use it. I'll have to take a look through to see what differences there are. Is there a linter for automatic checking?
You're correct that the module is a closure (i.e. the exported function exposes a scoped variable) but section2 is *not* in the global scope. There's no way of accessing it except via the exported function.
Sure, it has a [standalone linter](https://www.npmjs.com/package/standard) (which also does automatic fixing if you call it with `standard --fix`), and also an [ESLint config](https://github.com/standard/eslint-config-standard).
wes bos and Syntax ftw!! 
I think [prettier](https://github.com/prettier/prettier) does a good job with this as well. I use them together, with prettier keeping the code consistent and enlint warning me about things like unused variable and options with no defaults.
JavaScript lacks all the other Python conventions, like enforced indentation, that makes the lack of semicolons not an issue. It isn't a comparable scenario. If I could enable a Pythonesque style enforcement so that I didn't need to do things like this I would in a heartbeat. Even telling my rookie devs to stop adding in multiple whitespace lines, saving me having to fail their code reviews would be great.
Then it goes to the next level with braces. And then you have an Apple like bug.
&gt; Even telling my rookie devs to stop adding in multiple whitespace lines, saving me having to fail their code reviews would be great. You could do this with a linter...?
Here is a userscript you can drop into [tamper monkey](https://tampermonkey.net/): // ==UserScript== // @name Search with google // @namespace http://tampermonkey.net/ // @version 0.1 // @description ctrl shift l to search selection with google // @author Me // @match *://*/* // @grant none // ==/UserScript== (function() { 'use strict'; document.addEventListener('keyup', (e) =&gt; { if (e.ctrlKey &amp;&amp; e.shiftKey &amp;&amp; e.keyCode == 76) { const text = window.getSelection().toString(); window.open(`http://google.com/search?q=${text}`, '_blank'); } }, false); })(); The actual meat of the function adds a listener for key up: document.addEventListener('keyup', (e) =&gt; { Checks if the key matches ctrl + shift + L if (e.ctrlKey &amp;&amp; e.shiftKey &amp;&amp; e.keyCode == 76) { (You can google `javascript keycodes` to change the key number. I chose L because it isn't attached to anything in chrome, as something like ctrl + shift + G will open the find in page, meaning this isn't triggered.) Gets your current selection as a string const text = window.getSelection().toString(); Opens a new window (tab) at google with the selection text as search query: window.open(`http://google.com/search?q=${text}`, '_blank'); If you decide to add this to your own extension, you'll have to look into opening tabs here: https://developer.chrome.com/extensions/tabs#method-create There is an `active` option, that would allow you to open as a background tab. Enjoy
Of course, nightmare, puppeter, casperjs, phantom.js, etc
If you like javascript fight club you will love https://screeps.com/
Use brave, it blocks ads, trackers and other dodginess by default
It's not that there's a trend, but formatting has become fully automatic and AI driven. [Prettier](https://prettier.io/) formats my code, semicolons or none is just a flag. I don't want it to print semicolons because it looks cleaner, but it makes about no difference, and it's clever enough to detect edge-cases. Before prettier i added the semicolon just to make sure, but with a robot in check of formatting it's pointless to argue about the right or wrong of some minor styling detail, it's whatever you want it to be.
Yeah the memory consumption and loading is what really made me consider Quantum. It's been such a pleasure developing with it. I still find I use Chrome for debugging a fair bit.
Thank you! Really appreciated.
Syntax, Shoptalk Show, Frontend Happy Hour
This is a bit of shameless self-promotion, but if you like JavaScript Jabber, two JavaScript Jabber co-hosts - Dave Smith and I (Jamison Dance) started another podcast called [Soft Skills Engineering](https://softskills.audio). It's a weekly advice show about all the non-technical things that go in to software development.
It's an unfortunate that it's better to just disagree with someone and use a down vote, than it is to encourage conversation. 
Hey man no shame in getting your name out there. I'll check it out! 
This is a great way for people to learn the language! Well done.
I really enjoy [basecs](https://www.codenewbie.org/basecs) and [Elm Town](http://elmtown.audio/).
Actually it does, OP is in the process of learning and probably doesn’t have much experience. Instead of guiding him with constructive criticism you just gave him shit. If you are someone that knows this stuff well, help him out instead of just talking down to him. I’m not saying your wrong about the situation, but you kinda came off like a dick. There’s no reason to discourage someone who is learning something new. 
Javascript is compiled, not interpreted.
The name was a joke
Learn the reasons why various state management ideas were invented and how well or poorly they do at solving certain problems.
I can't remember ever being bitten by ASI. I always have a linter on though. Also can't remember ever caring either way. Some projects use them, some don't. Use a linter. Standard is easy to set up. There's also one called xo. 
That isn't applicable to the language, it's an engine concern and it can do either.
shoptalkShow++
Remember that jQuery is a library that has to be loaded and adds some weight to your project. If you’re going streamlined and fast, nix the jQuery. You can do the same things, it’s just slightly more to write, but only sometimes. TL;DR - if you’re doing tons of DOM manipulation and not using another framework, jQuery can be helpful. 
Not JS-specific but the Software Engineering Daily podcast has some cool topics. 
True but all modern engines compile. https://softwareengineering.stackexchange.com/questions/138521/is-javascript-interpreted-by-design
jQuery is great for handling cross-browser animations and event listeners without apparent loops (such as binding event listeners to multiple elements returned from a querySelectorAll). Today, if you are using jQuery just to query an element, cache it, and then call some properties and/or do small manipulations to it - than you really don't need it anymore unless you want to easily support older browsers. If you are targeting IE11, Safari 6+, modern Mozilla/Chrome, modern iOS/Andriod, than in general you really don't need jQuery other than for some easability it solves in terms of some event handlers oddities in browsers and ease of animations you can add. It also will condense your code base in terms of readability (since the plain JS version is typically longer), but that doesn't mean that code isn't of course still bundled somewhere in the library when invoked. That being said, I personally don't use jQuery since I have a good understanding of cross-browser &amp; operating system oddities/quirks. If your goal is to learn (not build something easily/quickly), than I would recommend just avoiding jQuery; otherwise, use jQuery sparingly to get your pages up and running and than try to figure out how you could replace jQuery with plain JS later =&gt; so you can learn exactly what it is actually doing. edit =&gt; this is a nice site to see plain JS code vs jQuery solutions: http://youmightnotneedjquery.com/
Four things I dislike about Firefox Quantum. &amp;nbsp; The following are ordered by how annoying it is from most-annoying to less-annoying. (1) Tabs don’t shrink like Chrome, and you have to scroll. It really really bothers me that I cannot change that behavior. (2) Firefox DevTools isn’t as good as Chrome. (3) Drag-n-drop tabs in and out of existing Firefox Windows is annoying, and doesn’t feel smooth or work well. (4) When not maximized, there is no space above the tabs to drag the window frame around. With Chrome, when it is not maximized, there is a small little bit of space so you can drag it around.
You do realize that if you use jQuery or Cloudflare's CDN to serve jQuery, then the user likely already has it cached, right? Same with serving popular fonts from google fonts.
Yes, but I mean processing the code itself. If I’m not mistaken, that layer of abstraction in using jQuery decreases performance overall.
This doesn't apply here. We're talking about class methods, not inline arrow functions in the render method.
Performance optimizations don't make it any less interpreted. You still send bare JS and not just precompiled opcodes. Just like for example, every modern desktop application. What I learned from this subreddit: * JavaScript is compiled language; * JavaScript is software; * JavaScript is dependency (library, framework, etc); Truly amazing... /s
Why not link it in this comment or in the op, especially **since it's free?**
Roast me. https://github.com/Trung0246/Funch (P.S: My first library)
Because Reactive Extensions are very well thought out. In addition, many developers can apply the expertise they have gathered in Rx in various programming languages. I'm very happy with the RxJS implementation and I do use RxJs Redux (ngrx store, Angular). Especially operators like .combineLatest are really verbose to implement in JavaScript, so why not? And of course there is this: https://github.com/tc39/proposal-observable 
meth meth method when you want more advanced stuff https://www.youtube.com/channel/UC8A0M0eDttdB11MHxX58vXQ
React? MVC?
I’m gonna follow you up with a shameless plug with one of my own, if you’re into Elm and working in JS daily, I do a podcast called [JS to Elm ](http://jstoelm.com). We try and cover those learning hurdles coming from JS and learning a purely functional language. I’d love to know what you think. Also, very much enjoy your show and perspective on soft skills. 
Thanks! Like I said, I'm still pretty new. I'm hoping to land a job in development, so the more I can practice good and conventional coding, the better. Regarding ShowArtwork.js, it's a reusable show page to display each piece. Did it seem cluttered? My concern is if comments should be imported from their own component. As I said, it works perfectly, it just seems like it could be refactored to look cleaner. What's your professional opinion? Comment updating (editing) is all I have left to add, but the way things are, that's gonna be part of the ShowArtwork.js file too. So you can see where my concern is. 
There's is an option for #4 in the customize toolbar screen (at least for macs)
And there seems also to be a problem with you tbh.
More reddit logic. I'm right but I'm wrong. God, I love this place.
Great comment. Did you think that up on your own? Nah. I'm sure you had help.
Wow imagine that, you can be right and a dick at the same time. Leave if you can’t handle people calling you on your bullshit.
Here is the link to Github Repo: https://github.com/vanila-io/wireflow
We finally did it! :)) Can't wait that we make it fully functional and usable. :D I have high hopes for Wireflow 
The only people who can't seem to handle things are redditors. You people jump on my true facts so fast I have a hard time keeping up responding. Reddit BS doesn't bother me. Why would anyone think that?
Ok, now I get it:) Do you have any other examples of this I could look at? I still don't quite get how I'd be able to do that. In the Hennessy example, the "box" that makes things visible is a particle-"cloud" or something similar. It would be nice to be able to achieve this effect.