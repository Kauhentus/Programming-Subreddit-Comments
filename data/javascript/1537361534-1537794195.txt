Both of the things you said are wrong, or at least not the way you should be mental modeling these things. It'll be easily be a "gotcha" otherwise...
Where do I find some resources about testing?
just *let* them be.
Wouldn’t want them to get in a bind.
Go on and explain what is wrong with what I said?
Sure. `&gt;&gt;` is a “binary right shift”. What JS does is turn the Number (a floating point) into an integer (essentially the same as Math.floor) then it shifts all the binary digits one bit to the right (essentially dividing by 2) and throwing away the least-significant-bit, so it doesn’t matter whether n is odd or even. 
Would you mind explaining why observables should be on this list? Last I checked, they aren't in the original javascript spec (hence them no them not being basic) and I can only think of 1 framework and single library that uses observables.
Promises are absolutely not glorified callbacks. 
Some interesting ones: [JS: Async Iteration/Generators](https://www.chromestatus.com/feature/5727385018171392) (v63) [CSS: overscroll-behaviour](https://www.chromestatus.com/feature/5734614437986304) (v63) [JS: Device Memory API](https://www.chromestatus.com/feature/5119701235531776) (v63) [JS: Dynamic Module Import](https://www.chromestatus.com/feature/5684934484164608) (v63) [JS: Promise.prototype.finally](https://www.chromestatus.com/feature/5704570235781120) (v63) [JS: Resize Observer](https://www.chromestatus.com/feature/5705346022637568) (v64) [JS: String.prototype.trimStart/trimEnd](https://www.chromestatus.com/feature/4790066333351936) (v66) There's a whole host of other stuff, of course, but these were the ones that stood out as interesting/useful to me. Seems like v63 was a real show stealer.
what a motivation for me at my studying , thanks man
“Under the hood” of observables via proxies are a good advanced topic imo
why cant the docs explain it as easy as that mate??? thanks I need to get started on bitwise operators 
https://leanpub.com/javascriptallongesix/read
1. Design pattern in JS - [https://addyosmani.com/resources/essentialjsdesignpatterns/book/](https://addyosmani.com/resources/essentialjsdesignpatterns/book/) (important ones are revealing module, module, mediator, pub/sub, factory) 2. Large scale JS architecture - [https://addyosmani.com/largescalejavascript/](https://addyosmani.com/largescalejavascript/) and [https://www.youtube.com/watch?v=b5pFv9NB9fs](https://www.youtube.com/watch?v=b5pFv9NB9fs) 3. MVC in native JS - [https://alexatnet.com/model-view-controller-mvc-in-javascript/](https://alexatnet.com/model-view-controller-mvc-in-javascript/) 4. Open ended questions like improve web page performance (caching, CDN, sprites, minification etc) 5. Security in web pages (HTTP headers, CORS, XSS etc) 6. ES6 features 7. Closures in JS - [https://stackoverflow.com/questions/111102/how-do-javascript-closures-work](https://stackoverflow.com/questions/111102/how-do-javascript-closures-work) 8. Coding guidelines - [http://jstherightway.org/](http://jstherightway.org/) 9. this in JS - [https://stackoverflow.com/questions/3127429/how-does-the-this-keyword-work](https://stackoverflow.com/questions/3127429/how-does-the-this-keyword-work) 10. Inheritance in JS - [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance) 11. Debounce and Throttle in JS - [https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf](https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf) 12. prototype vs \_\_proto\_\_ - [https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript](https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript) 13. Open ended question - AngularJS vs Angular vs React vs Vue. (when, which, why etc) 14. Generic curry in JS - [https://gist.github.com/shidhincr/7315316](https://gist.github.com/shidhincr/7315316) 15. Polyfill for forEach, map, reduce etc - [https://gist.github.com/githiro/5819142](https://gist.github.com/githiro/5819142)
Oh yea, sorry I should mention that. I need to find a work around for that but everything does work in a real app. I have an example app you can pull down and try out. I’ll also have a preact version of it soon.
[removed]
Indeed. Promises are not a replacement for callbacks. They're just a wrapper around callbacks for a specific usecase. Apart from that async/await relies on the Promise spec as a building block which further enhances that specific usecase.
Interesting. What about reactive programming makes it "the next big thing"? I'm honeslty genuinely curious as I've never used them. 
Resize Observer has been available in Electron for some time now, but you had to turn on a flag to get it. 
&gt;just *let* them be. If we let them be, wouldn't they be *const*ants &amp;#x200B;
Yeah that's why I asked :( Can you please PM me straight away with a link when you are done :)?
How can I know before that the game will bang my ears and so turn the volume down?
[http://javascript.info/](http://javascript.info/) is fantastic
there's a reddit bot to remind you of stuff, yeah?
!remindme 2 months
The web is extremely event driven. A few years ago, submitting a form to the backend and displaying a result message was the height of interaction in web pages. Nowadays submitting a form can trigger a save to the backend, interactions can be relayed in real time to other connected users, etc. One of the things reactive programming aims to do is create an abstraction around the interdependence of events that define your business logic. Promises were a step up from callback hell. You can think of reactive programming as a step up from promises.
 The web is extremely event driven. A few years ago, submitting a form to the backend and displaying a result message was the height of interaction in web pages. Nowadays submitting a form can trigger a save to the backend, interactions can be relayed in real time to other connected users, etc. One of the things reactive programming aims to do is create an abstraction around the interdependence of events that define your business logic. Promises were a step up from callback hell. You can think of reactive programming as a step up from promises. 
Thanks! Looks like I've got a rabbit hole to go down when I'm off work.
I often look a this one : [https://github.com/withspectrum/spectrum](https://github.com/withspectrum/spectrum)
That can be true in some point. But I've always use mac and I can tell you they are more durable than any windows that I've ever had in the past. My mom's still using a macbook pro that I bought in 2009, and for what she does it works perfectly. That's what makes me get a mac over any windows every time I go to buy another computer.
If it's just for developing js find a 200 laptop on ebay. I've got a 7 year old laptop running a light weight Linux build that I use for programming/hackathons and it was only 300 when I bought it. 
*technically* true, but it only "suspends" execution in the same sense that putting the rest of your function body inside `.then` "suspends" execution. e.g. ```javascript // this is just syntactical sugar await somethingAsync() console.log('done') // for this somethingAsync().then(() =&gt; { console.log('done') }) ```
Learn everything possible about how the this keyword works, how it can be manipulated with call(), apply(), and bind(), and variable scoping in closures. Everything else is generally intuitive, even prototypical inheritance. Once you have that as a good base, I would recommend learning some design patterns. Good programming is more about general concepts and their organized application, than it is about how to manipulated arrays efficiently. You can look that up when you need it. 
You'll need to provide us a jsfiddle link so we can inspect your scripts
this might be a little advanced for a js beginner but i found addy osmani's https://addyosmani.com/resources/essentialjsdesignpatterns/book/ to be a great learning tool. If you are feel you are ready to start learning one of the frameworks i would read this first
The inner function (the fat arrow callback to `makeSqlCall`) is not asynchronous, but the `makeSqlCall` method *is* - enabled by said callback. It seems you want `result` to be returned by `callDatabaseWrapped`, right? The easiest way to do that, as others have state, is to turn `makeSqlCall` into a promise. ```Javascript const sqlCall = new Promise((resolve, reject) =&gt; databasedriver.makeSqlCall((error, result) =&gt; error ? reject(error) : resolve(result))); // If you intend on doing more stuff in this function async function callDatabaseWrapped() { const result = await sqlCall(); // ... more computation or awaiting // return something } // If you simply want to return a wrapped `makeSqlCall`, you don't need an async function // Just use the promise directly - it's essentially the same thing. const callDataBaseWrapped = sqlCall; ``` Like others have said, you can also use a "promisifying` utility, which will turn an asynchronous function that takes a callback into a promise automatically (async/await uses promises).
If you go for anything other than a Mac you can definitely get a more powerful computer for less money. However, I've personally found the OSX software to be better. Less errors when setting up software/packages and I personally prefer the UI to Windows/Linux. Also I think you can only develop iOS apps on OSX with Xcode if that's important to you.
https://www.ng-book.com/2/
How do you do it? Is see where one can call setState with immer, but that appears to be local component state. How do you modify, or at least start to modify, data in the global app state arbitrarily deep in the component stack?
Upvoted for two reasons: 1. Good answer! 2. Not an "everything in JS" answer like so many others in this thread. "Some things" does not mean "over a dozen definitions and concepts, most of which are common to most programming languages". It's possible to make sense of a framework without absolute mastery of the underlying language. I'd even wager that at some point, mastery of a language obviates many of the advantages of frameworks, given that they're frequently overkill for the limited subset of features any given application requires.
When it comes to development, the priority is read/write speed. Get a laptop with ssd, atlease 8gb of ram, and a okay cpu. Then install ubuntu. Your laptop needs to atlease be able to run an ide, chrome browser, and a terminal running server of some sort smoothly. A 7 years old laptop would certainly not do. Imagine when you need to run docker, or just joining multiple slack workspaces, both are pretty performance/memory heavy. I’ll go to bestbuy and test the one with the most comfortable keyword. Buy it from where ever, replace it with an atlease 250gb ssd (trust me, you’re saving yourself alot of time by having a ssd.). Upgrade the ram to 16gb (which should cost about 140). And i would recommend any cpu that is i5 or above. 
Check if the channel if live, if not don’t pass channel in options (?) just a wild guess, no idea about twitch api 
[Truthiness](https://developer.mozilla.org/en-US/docs/Glossary/Truthy).
ES6
We nestjs now
It would be great to hear some feedback from you guys :-)
Hi /u/tprakash45, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Hamu3l, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/intothewild87, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/OutOfTheForLoop, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/WolfPusssy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/treyhuffine, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/betancour, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/VoidPillz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/valtro05, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Well that us the easy part... you just set those before you initialize the player. ``` var options = { width: &lt;width&gt;, height: &lt;height&gt;, collection: "&lt;collection ID&gt;", }; if (checkIfChannelIsLiveSomehow === true) { options.channel = "&lt;channel ID&gt;"; } else { options.video = "&lt;video ID&gt;"; } var player = new Twitch.Player("&lt;player div ID&gt;", options); player.setVolume(0.5); ``` The part you are not accounting for is how do you intend to know if the channel is live or not?
Good point. I would manually check and change the code accordingly but I don't know if there's a way to write this so that it knows when 'channel' is being used or not. 
This is a great list of resources r/https://gitconnected.com/learn/javascript
Basically, read You Don't know JS 
Real programmers use a magnetized needle and a steady hand. 
I guess it won’t be able to catchup with other languages ever cuz single thread so you will never have Vectorized methods for your computations. But for running over fairly simple Data we do have some libraries.
Obviously not a generic lib, but animations are an area where having a presentation layer (templates) really allows Ember to shine in some neat ways [https://ember-animation.github.io/ember-animated/](https://ember-animation.github.io/ember-animated/). &amp;#x200B; Outside of the Ember ecosystem I think tweenlite (foundational lib for GSAP) or react-spring would be my recs.
Hi Maciej, please check your messages, I have a quick question. 
that shouldn't be the only thing you do. or your testing in production will be bug-laiden :-\
We've gone full circle. Might as well be writing our backends in Java now.
No, TypeScript is still way more terse than Java. Working with JavaScript primitives and object literals is still way more easy and straightforward than all the multitude of primitives and objects that exist in Java. Plus keep in mind mind with full-stack TypeScript JSONs go in and JSONs go out. No object conversion. 
That's right. And just to reiterate: Promises are not a replacement for callbacks. You still need ordinary callbacks when working outside the specific Promise/async/await usecase (like handling events that can trigger multiple times instead of just once).
...spread them! &amp;#x200B;
Forget js for machine learning. JS is a toy in this regard, quite good when you learn. But later switch to serious language which will use all the power of cpu/gpu.
You can execute the code using the command \`node {filename}.js\` or actually read the file from a Node program use \`fs.readFile\`.
Cool library, I'm excited to try it out. I've been loving TypeScript.
This. Great game though OP!
Very interesting read
Thanks, please star on GitHub if you like it and let me know what you think. 
http://github.com/coralproject/talk
Thank you I will try that when I get home
Can you describe some of the benefits you've personally experienced since switching? Looks the like the project still doesn't have many downloads on npmjs.
Serious languages like python? 
A book? Dude it will be out of date in a few months. Just watch tutorials videos and read their unfinished documentation like everyone else, or you could hire an Angular consultant for 450 dollars and hour like most enterprises do
https://gitlab.com/DrRoach/FormValidation
Done
I would add functional design (if react or vue) and OOP (if angular). Learn array mapping as well. 
Again, safari is the new IE imo
What are the real world implications of this bug? I see that two commenters described it as serious, but I'm not sure if that means from a security standpoint or from a practical use standpoint. &amp;#x200B; Safari on iOS 12 still seems able to run some of the more complicated stuff on my one web app without noticeable problems, so that's good. Where would the bug be likely to manifest? And is it mainly an ES6 issue, where transcoding to ES5 wouldn't expose it? &amp;#x200B; I'm also curious if this is somehow a backdoor that would allow a malicious website to crash the phone, use it as a jailbreak mechanism, etc? &amp;#x200B; I know from prior experience with a WebAudio recording bug that when the innards of iOS Safari goes wonky (specifically, WebAudio recording stop working) that the broken behavior can be fixed by opening a new tab (which will typically be fine) or by force-quitting the browser. I assume either of those 2 things also clears out the memory modification here -- not that that's a real world fix.
Nope. Not really, in frontend, I rarely do any algorithm stuff and I really mean it, unless you mean flashy sparky cool stuff with Javascript(like modals, picture gallery or something like that) I don't think there's any algorithms needed. But hey! I'm a bad frontend developer, take this talk with a grain of salt, I didn't go through an interview before to know.
Right, never said it was a replacement. Certainly and evolution of it though and furthers the concept.
Google is a software company that sometimes makes (or brands) hardware. Apple is a hardware company doing a pretty decent job at sometime making software.
I use npm for few years. I don't see any reasons to switch. Also npm 5 and higher has lockfiles
I was drunk and it made my head explode.
Been using Yarn since early versions of node v5 had major issues. There are some conveniences that Yarn has that keeps me with it (such as `upgrade-interactive` and `yarn SCRIPT`). 
I believe `npm` has a similar feature to `upgrade-interactive` called `npm-check`.
NPM works fine for most basic stuff, and it ships by default with node.js. My company is building a pretty massive React Native app (r/https://edge.app), and NPM is no longer able to install our dependencies. We ran into issue after issue with NPM, and eventually just gave up trying to keep it working. Yarn has been much more reliable for us.
Open the source file(s) in a text editor.
You can write any amount of code without a single "this", "bind", "class", "prototype" etc. if you use "just functions". I'm not even saying "functional", because most people would say that includes a lot more, certain patterns, than just using functions. I'd say using (lexical) scope to create the equivalent of "classes" even is much more flexible.
Hi /u/Aursan, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Doesn't the new yarn also implement some for of caching or something so node modules are not needed and the app doesn't have to crawl through the directory? Can't remember the specifics. 
That's because safari just VERY STRICT about standards and doesn't implement all stage-XXX plugins from babel
Hi /u/BoyOfTheEnders, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/guakkaa, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
``` let example = (variable1, variable2) =&gt; { } ``` Or to pass the arguments of example2 to console.log you can say `let example2 = () =&gt; console.log` 
That's essentially the gist!! 
True. Keyboards are just syntactic sugar. 
In fairness, the env stuff is now a spec, they just had to jump the gun
Try it without jQuery 👌
I switched back to npm shortly after npm@5 was released. the project I was testing it on built faster and more consistently with npm than yarn (a Gatsby site fwiw), and haven't looked back since. both projects are still extremely good though, a lot of people put in a lot of good work to make yarn have an excellent dev experience.
Serverless ftw 👌
They are working on a mode like that, but it's only relevant to node.js apps. We probably wouldn't be able to use that mode for React Native or Web stuff, unless the rest of the ecosystem (build tools, bundlers, &amp; such) learns how to work with the new mode. It will be a long road.
`yarn` has had multiple breaking bugs including some that caused `install` to install incorrect versions of packages, not installing some packages at all etc. I switched back to `npm` after that. The speed difference is not noticeable and reliability seems to at least be on the same level.
VSCode.
Wrong thread &amp;#x200B;
Less web apps more ios apps.
Lol
npm is working on a similar system, announced within 24 hours nonetheless.
check out this example: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Examples when using fill, the objects are by reference :)
And it works just fine and is an easy solution for things like safe areas. But nobody likes to write browser-specific lines 😄.
Hi /u/SavvyPrivateer, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/smiles_low, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Yes, you’re right. But even if we don’t count features, there’s still little render bugs that are annoying to deal with. Things like z-index, overflow, transforms are things that can create weird behaviour in safari. 
I was unaware that developing the second most popular consumer desktop/laptop OS, second most popular mobile OS, most popular tablet OS, the most popular wearable OS, as well as all of the first party software for those devices, including a productivity suite, video and music editing software, software toolchains for devs to work with their products, and so on somehow didn't qualify you as a software company.
Lockfiles that don’t get respected on install. 
Terms and Condition, Privacy policy
&gt; Look at the releases notes of Safari 12, "announcing favicons in tabs" That has nothing to do with WebKit though. It’s a minor design decision in the window chrome. 
Source?
Npm documentation itself. AFAIK the only way to ensure package lock to be trusted blindly is if you use `npm ci` instead of install. 
Direct link?
I believe this is used in styled-components
One example; https://github.com/npm/npm/issues/18103. Even if the author says it’s been fixed, npm install still behaves the way it’s described, by design. 
emotion and apollo use that syntax, is a bit weird at the beginning 
Add massive homophobe to that list too. https://www.huffingtonpost.com/michelangelo-signorile/donald-sterling-brendan-eich-and-how-homophobia-gets-a-pass_b_5239389.html 
If you’re dealing with monorepos then yarn is a better choice (check workspaces feature)
Yeah, then we'd have to call someone
Gonna have to disagree with some of this. First of all: &gt; However it is a commonly accepted best practice to have one function or class per file and to default export that one function or class. This is a good way to get typos in your imports and not even realize it. Not only that but it makes renaming a function/class much harder. &gt; What if we just exported all of them as named in an index.js file in our components folder like this example below? Barrel files are a great way to get circular dependencies which can be pretty hard to debug. export { default as Header } from './header'; export { default as Content } from './content'; export { default as Footer } from './footer'; You know what's easier than that? Don't use default exports and then you can just do: export * from './header'; export * from './content'; export * from './footer'; 
I guess it's a kind of weird, and maybe serious bug, but why did this just blow up a little? It's literally bug number 188794
Common sense blog spam
You're either in the wrong subreddit or you are using the wrong IDE
I wouldn't say it's about popularity. jQuery is redundant now that browsers are starting to implement consistent useful API's.
Just some minor details. I do think they're primarily hardware oriented though.
It's a fundamental function that should have been. The fact it got through is kind of amazing.
Never heard of such thing
*(checks comments for links to own GitHub account)* 
I think I was thinking of next.js and react-loadable.
I forgot we are in /r/javascript but you need to know that Edge is the low man on the totem pole with CSS standards support. No, Edge is not IE but Edge is still bad.
&gt; He was literally removed from Mozilla over this. He was not. [He stepped down.](https://en.wikipedia.org/wiki/Brendan_Eich#Mozilla) &gt; Others at the Mozilla Corporation spoke out on their blogs in his favor.[22][23] Board members wanted him to stay in the company in a different role.[24] On April 3, 2014, Eich stepped down as CEO and resigned from working at Mozilla; in his personal blog, Eich posted that "under the present circumstances, I cannot be an effective leader." He was not a "homophobe", he is a religiously convicted person who donated all of $1000 to a campaign which ultimately failed. It's one thing to disagree with someone. I disagree with Eich there. It's *quite another* to condemn ever working with a person again because you disagreed with them on a subject. Also worth noting: He was CEO of Mozilla Corporation. It was members from Mozilla *Foundation* that made the hubbub. Fact is he had every right to make that contribution. He doesn't deserve hate for it. 
He stepped down- that's cute. Papa John's John Schnatter "Stepped Down" after dropping the N-Bomb during a corporate meeting with an outside firm. Execs don't just get fired after a bad fuck up- they get a pretty stern asking to leave. https://www.cbsnews.com/news/papa-johns-pizza-founder-john-schnatter-racial-slur-n-word/ As for your other argument, you can't promise to make an impressive, secure browser, but also vote and give money that actively tries to take away rights of fellow Americans and pretend to be a hero. That doesn't exactly make for good ethics.
I get it. You don't like him. What I *don't* get is why you bother commenting then. Why not just go focus your energy on shit you *do* like? 
Because simply giving $1000 isn't just a "oh, that's his personal politics, focus on something else." It's a mark of their character and its time we didn't celebrate tech jerks and tech moguls who think its okay to treat others like second class citizens.
&gt; its time we No buddy, you're no crusader and this isn't a crusade. There is no "we" here, just you. Grow up, and go focus your energy on shit that matters. This shit is long and far in the past now. You are simply wasting your time.
I'm not your buddy, guy. r/libertarian is that way and it's annoying you claim I am crusading when all I did was post a reminder that maybe this is a guy you *don't* want to meet or interact with but no- that's not okay and not constructive to the subreddit- an industry that is severely lacking diversity. Super awesome. Cool.
&gt; r/libertarian is that way Exactly what does this mean? You think I'm a libertarian? Or are you just saying "Here's an unpopular group, I'll call him one of them!" You are truly a child. A nazi child. Because I don't like nazis, so clearly, you must be one of them. I'm positive of it, nazi.
No you're not.
 Create a program that uses a loop and a function to complete the following: Ask the user to enter the price and quantity for 3 items. Calculate the cost of each item and display the cost on the screen. Add a shipping charge based on the following conditions: * If total is greater than $500, the shipping charge is $30. * If total is between $200 and 499, the shipping charge is $15. * Otherwise, the shipping charge is $10. Display the shipping charge on the screen. All the numbers should display with 2 decimal places.
SafarIE
This ^
VsCode bro
Lol, that’s a terrible example. It’s not like Apple was just unable to implement favicons. They intentionally decided not to have them.
Apple is experience oriented. If they have to improve the hardware to make your experience better, so be it. If they have to improve the software, so be it.
We stopped using npm when 15 developers on identical machines with identical versions of node and npm constantly created changes and conflicts in the package-lock.json even when working in the same branch. Haven't looked back since and have had no problems with yarn.lock.
That's an up to date project for GraphQL in Express: [https://github.com/rwieruch/fullstack-apollo-react-express-boilerplate-project](https://github.com/rwieruch/fullstack-apollo-react-express-boilerplate-project) If you need help to implement it or to follow the thought process, you can read up this tutorial: [https://www.robinwieruch.de/graphql-apollo-server-tutorial](https://www.robinwieruch.de/graphql-apollo-server-tutorial/) The starter project also comes with a sample React client application. A couple of features the project hast: * React (create-react-app) with Apollo Client 2 * Queries, Mutations, Subscriptions * Node.js with Express and Apollo Server 2 * cursor-based Pagination * PostgreSQL Database with Sequelize * entities: users, messages * Authentication * powered by JWT and local storage * Sign Up, Sign In, Sign Out * Authorization * protected endpoint (e.g. verify valid session) * protected resolvers (e.g. e.g. session-based, role-based) * protected routes (e.g. session-based, role-based) * performance optimizations * example of using Facebook's dataloader * E2E testing &amp;#x200B;
Maybe this article answers a couple of your questions: [https://www.robinwieruch.de/machine-learning-javascript-web-developers](https://www.robinwieruch.de/machine-learning-javascript-web-developers/) I would say JavaScript isn't quite there yet, but I would keep an eye on it for the coming years. The recent Tensorflow.js release was a huge step forward already.
Haven’t done React but I picked up the basics of VueJS pretty quick and I’ve heard in general it is lower barrier than React. It’s supposed to be picking up a lot of momentum as a framework as well.
Take a React book/course/screencast for 1 week and do all the exercises along the way. I have seen a couple of people going through [The Road to learn React](https://roadtoreact.com/) in a week and applying for their first React job afterward. So if you like reading, it may be a great resource for you. Otherwise try to find a fitting course/screencast series for you. 
React is a whole lot of fun, and I found it pretty quick to learn. I learned it in school, but some folks I know have gone through Steven Grider's Modern React with Redux course on Udemy and found it really helpful!
&gt;Is there a way to learn the basics of React or any other framework for some basic logic for web apps ? No. There is no way.
&gt;Is there a way to learn the basics of React or any other framework for some basic logic for web apps yes. prior to the hackathon, if you read and do this: [https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html) you should have enough knowledge to handle the frontend of the django backend.
https://github.com/ajbogh/norman
I like to use it for logging: const log = (strings, ...parameters) =&gt; console.info(`[LoggedClassName] ${String.raw(strings, ... parameters)}`)
I will second this - I found Vue to be much easier to get started with. 
I do.... I do some JSP coding
I've been working in a functional environment for awhile...I still don't like it. How long does it take?
CSS is your best bet.
[https://codepen.io/third774/pen/PdVYGG](https://codepen.io/third774/pen/PdVYGG)
Thanks. Will do that. 
Some suggestions: - If you want books, I can definitely recommend /u/rwieruch 's [The Road to Learn React](https://roadtoreact.com/) book, as well as /u/dceddia 's [Pure React](https://daveceddia.com/pure-react/) - Kent C Dodds has some great [intro to React videos on Egghead](https://egghead.io/browse/frameworks/react) - Tyler McGinnis has [a guide for learning React in 2018](https://medium.freecodecamp.org/a-comprehensive-guide-to-react-js-in-2018-ba8bb6975597), some great paid courses, and also just did a [free React online bootcamp](https://tylermcginnis.com/free-react-bootcamp/) - I have a list of [suggested resources for learning React](https://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-react/), and a [React/Redux links list](https://github.com/markerikson/react-redux-links)
Hi /u/Kyder99, this is /r/javascript. Please stay on topic. Thanks.
Honestly? Don’t. Your frontend and backend are different applications, and can and should be treated as such. They have different testing processes, different deployment strategies, different hosting requirements. The backend isn’t a dependency of the frontend and vice versa. That way lies madness, chaos, and minor inconvenience. You shouldn’t need something like Babel or Webpack for Express. The files aren’t built, they’re required on the fly. 
Hi /u/MarzyG, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
yep. r/http://connect.tech in Atlanta next month
We did this at my last company. It's fine for smaller projects that you want to keep clean but you start running into issues at scale. 
Seems to do the same thing as ‘npm ls’
Yes, It is. I build it just for fun and learing. 🤣 
Pro-top: Your code does not magically become better if you complicate it with imports. Clean up the mess first, then check if modularization is useful in your case.
I didn't say they cannot do it
And probably the most abuseable one for silly bad syntax tricks.
Real programmers use butterflies. 
But you probably want it. The second sentence of this page kinda makes me wonder why the author bothered writing the rest. &amp;#x200B; The 'you might not need jquery' article was useful when `document.querySelectorAll` was new, but this just reads like an advertisement FOR lodash. Yes, we all realize we could define our own `drop` function and just use that, but THAT'S THE WHOLE POINT OF LODASH. Arrow functions and the spread operator do not obviate the usefulness of a library of useful utility functions. &amp;#x200B; I feel like this article would have been even more obviously silly looking if it had compared its homespun solutions to `lodash/fp`, but c'mon, if we're being fair it's very silly to rewrite the `drop` function, then exclaim that you don't need `lodash/drop`.
I'm curious, what are the non-standard values being exposed by Safari, or is the \`safe-area-inset-\*\` itself the non-standard value?
agreed.
you can't have \\ in classes or in js vars give us jsfiddle with reproducible problem
Lodash, most of the time, makes your code a lot easier to read. Which is a lot more important than speed (except for rare cases). A lot of people know this and the article doesn’t diss lodash, just important to note that.
How quickly did you pick it up?
You haven't given enough information about what your problem is....
Vue is a lot harder to pick up, its api surface is more or less Reacts multiplied by hundred. You can learn React by glancing over 3-4 examples, it's just functions, classes and minor jsx semantics. With Vue you lean a new language on top of JS and HTML. As for momentum, it's at the size of the [old Angular 1](https://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core), for a couple of years now.
What are your thoughts on the benefit of GraphQL? We are a small team, and the api we are designing needs to support both the app and the website. Is it something we should explore at this stage or REST is enough?
 var btn_One = document.getElementById('yes'); var val_One = btn_One.value; There are **two** problems. First, the error you get happens in the second line but the origin of the error is in the first. You're trying to run that code _before_ the page is loaded and ready. So, when the first line runs, there is no element with id `yes` **yet**. So `btn_One` is `null` and then you get the error in the second line. To avoid this, read about the [DOMContentLoaded event](https://javascript.info/onload-ondomcontentloaded) and general page life-cycle. Second, post this type of question on /r/LearnJavascript, not here.
Here's a sample application for a book I've been working on. It's in Typescript. https://github.com/seanpmaxwell/JobApp
Python has two things going for it: a good set of math libraries and popularity in academical circles. Hence, if you are doing ML research, Python might be a better choice for now. When it comes to actually using ML models, I'd say JS is on par with Python (or will soon be) due to Tensoflow.js that you can run in Node.js using the same C bindings (libtensorflow) that Python's Tensorflow rely on. I have Tensorflow models in production, and I hope to replace them with Tensorflow.js soon simply because Tensorflow is the only non-JS part in our ecosystem and it's not worth all the hustle of managing a separate toolchain.
OvernightJS is better
Lodash is also a very well optimized library and using it is probably quicker than the options presented in the article.
Syntactic sugar is what makes the difference between cumbersome,ilegible and hard to maintain, to easy to build and easy to maintain. E.g. async/await, classes, binary literals, numeric separators, for-of, and lots more.
What hackathon?
&gt; "It's business" is a cop out. It doesn't make you any less self serving at the expense of others. It's absolutely your fault you can get more pay if you're advocating for that system staying in place just so you can benefit from it while others suffer. If a prisoner is having a hunger strike and refuses to eat, even though he could simply ask for food and get it, are the prisoners who do eat to blame for the former not getting any food? Come on man, that's like saying you want people who don't even run to win the Olympic 100 meter dash. Because the people who work for it are responsible for an unfair world where people have to actually make an effort. Get real. My negotiating skills are also a skill, and that separates me from the other employees on many more levels than just my pay. &gt; Do you really think it's fair that you're being paid more not because you're working harder or because your work has more value, but because you're better at negotiating? Because I don't. You're simply wrong. That's how the world works. That's how trade works. When you have something to offer, and there is demand, you negotiate. My boss would love it if his suppliers wouldn't negotiate on terms and prices and all offered the same thing at the same price. But some undercut others, some know they are in high demand and thus negotiate a higher price. &gt; I'm well aware that businesses are interested in optimizing profits, at the expense of others no less, and it's no less amoral for either party to do so. I think you ought to be paid well for your work. I think your coworkers in the same position ought to be a well, and that you shouldn't get a benefit arbitrarily any now than you should be cheated out of a fair wage arbitrarily. That's your opinion. I disagree. &gt; Saying "it's their own fault for not fighting for it" is essentially blaming the victims for getting cheated out of what they deserve. It's not an issue for you because you're not suffering as a result, and those others are an abstract anyway, they're not people right in front of you, but for those people it's a different story. That's like people who sit at home all day and do nothing complaining about how it's unfair that all those social and outgoing people get into relationships and they don't. And when one of those social people claims "it's fair" they are blaming the victims. You're not a victim if you simply refuse to fix your problem. Stand up for yourself and start demanding what you're worth. &gt; In any case, you're not going to convince me to turn a blind eye to an injustice or be less compassionate, and I doubt what I say will resonate with you enough to make you question the way you've been perfectly fine living, so I'll wish you well and be on my way. Sorry for wasting both of our time. I've labeled you: The Politically Correct Social Justice Warrior. Seriously, tip of the day: get real. You're the reason why companies make billions and employees are indebted to companies. What I'm doing is the solution: negotiate a better pay. What you're doing is the problem: settling for less than your worth.
Thanks, came here to say this. The amount of time lodash has saved me is immeasurable. I'm using it in the frontend (where appropriate) as well as in the backend (Node.JS) extensively. Yes, there are a few cases where you could evaluate whether you need lodash: If you're writing a lightweight frontend app with lots of users and you're only using map/filter then by all means get rid of lodash. But if your app is bigger anyway or the people using it don't mind a few extra milliseconds load/parse then why hamper yourself?
At a random college in my city. The guy who does backend studies there.
New XSS exploit article when?
Why do we still talk about ES6? Is it not just JavaScript by now?
 Id also suggest you pick any starter pack like next.js so you temporarily skip the webpack boring stuff and jump directly into the fun.
Imho REST is quite bullshit. It doesnt add enough standardisation to make one avoid writing basic things “by hand”, I lately just prefer to roll RPC or rpc-ish, which gets you rid of unnecessary stuff like multiple verbs and multiple input ways (query? body? header?). Graphql on the other hand DOES add enough standards, so there are quite good clients around which actually may save you some time of writing trivialities... So imho its either RPC or GQL, rest has the worst of both worlds.
Are there workspaces in npm? I much prefer the simple workspace support in yarn over full blown packages like lerna.
https://news.nationalgeographic.com/2018/05/life-without-brains-smart-slime-molds-plants-jellyfish-osr-science/
&gt; it is probably quicke I present the evidence: /u/PizzaRollExpert's gut.
Does the author realize you can install only the functions you need?
The evidence is actually a talk that I half-remember watching 2 years ago :D
This apparently isn’t in Apple’s tech inteeviews.
I'd just do something like: const doesHaveValidJsonAsync = async url =&gt; { try { const res = await fetch(url); if (400 &gt;= res.status &amp;&amp; res.status &lt; 500) { throw new Error(`${res.status}: ${res.text()}`); } return isJsonValidDangerous(res.json()); } catch(err) { console.log('Reporting error:', err); return false; } }; You have only one async process so there is no need to create more promises.
I think `res.text(...)` and `res.json(...)` both return promises, so they can't be used this way you suggest.
Lodash isn't treeshakeable, you need to explicitly import only the function you need. And go look at those standalone functions in the source code, they are very large. Even the simple stuff. Lodash handles a lot of edge cases and is very fast but if you don't need those edge cases handled or are working on small datasets then there are lighter weight alternatives available.
You're right, I checked and would have expected a simple JSON.parse() call but that's not the case. They seem to only drain the response stream if res.json() (or the other body methods) is called. So you could modify it to: return isJsonValidDangerous(await res.json());
I would still recommend using it or Ramda, because on the way, while prototyping, you could try 10 different functions, but end up using only 2. And when you end up, you can replace lodash, but not before.
Actually throttle is one of those dirty functions I would definitely avoid writing myself.
Reddit does that automatically when you paste code and then format it. For some reason
I would like to see an article on best ways to organize files in a react redux app. Do you attempt to reuse mapStateToProps functions? Do you put them all in one file and export? Do you copy n paste the same lines over n over in diff dispatch methods ? To think it’s JS it’ll be an easier way to compose these. Anyways I got off topic. For now simple ways to organize the diff reducers, map functions into files prob
Are there any other vue pieces?
What is it exagerrating exactly? It's an article with a bit of history and some quotes from people. 
In your html you have “WMSXmin” and in your JavaScript you have “WMSXMin” I think that’s your issue... 
The Id in the html is WMSXmin, however in your JS you are looking for WMSXMin (with an uppercase M). That is likely the issue. Hope this helps!
Sure thing, check out React Native.
I think Vue is a pretty cool guy. Eh interact the ui and doesnt afraid of anything.
This is a straight up advertisement for gullible tech-illiterate executives and PMs. 
The piece is okay, the title is misleading and clickbaity.
Oh god I am the dumb, ty.
Oh god I am the dumb, ty.
Checkout Cordova/PhoneGap
So far it has the best support for ML. Libs for python are so easy to use and operate on data.
the sad thing is that this will definitely work. give it enough time and we got Vue as the new Angular.
There is a hive mentality when it comes to which framework web developers choose to use. Most of that is driven by their popularity which is in turn driven by ease of use rather than the nuances that are part of the teams these developers work with. At the end of the day it all comes down to productivity.
Javascript is a pathway to many abilities some consider unnatural.
Came here to say this. Start a node.js project and import the Cordova package.
Its still in a broken phase npm 4.6 is conpatible if you update it to 5 it will break react native. Also the code gets updated every 3 weeks or so. Which means code that i wrote erlier doesnt work now anymore. Its too broken to use.
Thanks for your suggestion!
I think there's a significant lag between people on edge of technology and rest of the world in tech. Guess this book was written a few years ago, and one with ES9 and in between would be a lot more up to date on javascript.
I've used Angular and the biggest and best thing about it is Typescript. Don't get me wrong, Angular is fantastic and I love it. I learned TS because of Angular and fell in love with it. Every project I do now, I use TS and not necessarily Angular but I need TS.
Wired please... It's not a competition!!! There's different frameworks for different styles of coding, different teams - big and small - and each one offers different solutions for roughly the same challenges. Pick the one that suits your project/business and the team that's working on it.
ohhh, got it
Another one? We need another one? 
JavaScript is fine for it. I was at a JS machine learning workshop for work recently and it's coming along very nicely, no complaints about speed and as far as syntax goes it's nice and straight forward so suitable for ML. As far as the languages themselves go, it's neck and neck between JS and Python. It's the library support where JS falls off and that is simply because Python has been more popular in AI/ML circles for longer now. Although JS is far more popular overall and is incredibly easy to run anywhere, so it's catching up. With ES2015 and beyond, the language itself may be better suited but I don't have much experience with Python so can't say that for sure.
This got generated with an underscore. 
There's things like Cordova, Ionic or PhoneGapp that help you create hybrid apps - your app will be made in html/css/javascript and it runs in a native webview. However, this will give you a lot of overhead. You could also build your own webview in Java, kotlin, whatever and then run your javascript app in that. You could also go for React Native. You can code in javascript/jsx and react native will run it as a native app.
TypeScript with React and Redux works beautifully. I was so against it when I started a new project using it, now I couldn't live without it. Just protects me from myself a lot more. Not to say I don't pull my hair out for a few hours every time I try to upgrade a major package though...
No. First of all, nobody is forcing you to update to the next version of RN. Second, we use RN in production at my company and have two apps with ~10k active daily users. It’s far from “too broken to use”. 
Really? I've had reservations using Typescript with other frameworks because it seems more like an afterthought and the first party support is usually patchy. I relate with the library struggle though, especially when there's no @types for it 
&gt; Lodash isn't treeshakeable Latest webpack handles it just fine
I updated the docs to include a message for this until I get the modal displaying nicely in the docs. Thanks again for your message.
There's also [https://www.nativescript.org/](https://www.nativescript.org/)
Vue.js - make JavaScript great again. Not crooked react or lying angular. Lol, these articles are getting more and more silly
I have a project with Vue and TS; works fine.
Yeah I just read it. I didn’t see any bullshit. 
Yeah but, Are all of your variables type 'any'? JK. Typescript is great but I find myself leaning on that any class too much.
There are ways to get lodash to treeshake but it doesn't work by default because the standard lodash build does not use es modules. You basically have to ask your bundler very nicely, there are quite a few config options you have to set to get things working. Even the lodash builds that say they support treeshaking, don't actually support treeshaking out of the box. To be certain just tested a clean webpack setup (with support for esm etc) and the \`import { throttle } from 'lodash-es'\` gave me a bigger bundle than \`import \_ from 'lodash'\` (lodash bundle was 162kb, with the single import it as 191kb). You can of course install and import lodash functions individually. Regardless, the lodash functions are generally overkill for many situations running many hundreds of lines long to account for a variety of edge cases, unless you need to account for these edge cases you are importing a huge amount of unneeded cod chih needs to be downloaded and run by the user.
This article has more details on vue's backstory in china than others. But that headline is as atrocious as it gets
Lol really? Try creating Interfaces or Union types. Generics also reduce boilerplate... I almost never use type 'any'
Despite that fact Vue got round of investment from AliBaba group...
Why? Why would you do this? What purpose could this possibly serve? This sounds like someone who doesn't understand basic security telling you to do something to make something "secure" in their head. You'd want to use a library. But, you probably don't need to be doing this.
Even if this is just for a school exercise it's still a bad idea because it's teaching you to do the wrong things. Do not even start this. SSL exists for a reason.
Seems a few people are pretty butt hurt over my question.
While reading this I'm only thinking didn't React solve this by the introduction of \`React.createContext\`? &amp;#x200B;
Yes. With Vue class component and vuex class (so experimental annotations in TS) I find the code much more readable than in JS. Vue cli does a good job at setting up a TS project. https://github.com/vuejs/vue-class-component/blob/master/README.md I think it's this one for vuex: https://github.com/ktsn/vuex-class/blob/master/README.md 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ktsn/vuex-class/.../**README.md** (master → ddefbb3)](https://github.com/ktsn/vuex-class/blob/ddefbb3f125f174beb3678067423bf4a2966f412/README.md) * [vuejs/vue-class-component/.../**README.md** (master → 6bbafec)](https://github.com/vuejs/vue-class-component/blob/6bbafecdd1f9898d1cf3c7d8846945aef6eee0fd/README.md) ---- 
Thanks. I'll look into that 🙂
I'm going to echo the existing comments: This is not security. This doesn't help *anything*. In fact, it's probably actually making your security weaker. Use SSL and do this the right way. That said, I understand that sometimes you just have to do what your boss demands. So here you go: https://github.com/blueimp/JavaScript-MD5
Once reddit has one comment down, everyone agrees to it and will cut your throat if you're even curious about the reasoning behind their opinion.
Dan Abramov's [suggested file structure applies here](http://react-file-structure.surge.sh/). Beyond that, see [my own thoughts on how "containers" and connected components relate](https://gist.github.com/markerikson/ea312b5ee398627ffceb09f89904831f).
Cant believe I feel or this.
I think the argument (and I think it's valid) is that ES6 is not even close to the edge of technology anymore. It *should* be where the Javascript community should be. Anyone who isn't is just flat out behind. 
https://youtu.be/gbg27oT8Z9M?t=51
Had to read this a couple times before I realized the difference... Doh.
It happens, it’s hard to see in your own code and easy to see in someone else’s!
I agree. 
You've been tasked with doing something stupid. Do not do it. Explain why it's stupid and explain the correct solution, which is likely just "SSL"
I can't upvote TypeScript enough. It pretty much makes everything better. :)
&gt; The two companies are responsible for some of the most complex browser-based applications, such as Gmail, Google Docs, and Facebook itself. And they can afford to pay programmers to maintain those frameworks, I'm guessing that gmail and google docs aren't written in angular 
And ionic of course
Anybody has experience using this ? People are whining against may things React Native, does this remove some of the friction ?. 
Well yeah but... OvernightJS is still better
Is it possible that you've misunderstood the assignment? It's best practice to send the password unhashed but encrypted (via SSL) and then hash it on the server.
[Here](https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling#Polyfill_for_Internet_Explorer_9_and_Safari)'s the polyfill.
You can. But the leap from JS syntax to native Java is not difficult, and I would suggest you look into full native Java if you run on Android. While JS and Java are two different languages and two different programming paradigms, Java is relatively easy to program in.
Yeah, closer tech-stack. VIM and proper tools. . .I like it! Being able to test people on debugging skills is good as well. . . I'm very leery however, I bet companies will still ask puzzle (algorithm) questions on it, and nothing related to their actual environment. Or it will be a tech-stack similar to their environment but the question will still be "write a depth first search and a breadth first search for this random object in O(n) CPU time". But it looks like a start to cultural change. . .and hopefully it will be. . .
“... React has a steep learning curve even for experienced developers.” Does it now?
Hi /u/JMorosr2, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/darielito, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/macinfinty, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/la712, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/guitnut, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/BinaryGandalf, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/NA__Scrubbed, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/GitW_85, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/strawberrycandies, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/epicboyxp, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
And every next generation programmer looks back at the previous generation's best achievements in awe given the hardware they were confined to.
Sounds like their site was, though JS was used to abuse the vulnerability.
Right, that's a good thing to mention. I would say the benefit over others is that it's very commonly used so dev's understand the implementation a bit quicker than another (and any potential drawbacks).
 All of these concerns are not actually concerns. They're a symptom you haven't yet become a JS dev. You have to throw yourself mentally into the ecosystem, wholeheartedly, as if you were diving into a pool. At that point every one of your concerns vanish: - There is exactly one way to define a module. Write a file. Done. Webpack takes care of it. - You were using Webpack, right? - The fact that Webpack either wasn't on your radar or already solving your problems says a lot. Look, I know this sounds like bullshit, and in fact it's very difficult to distinguish this from actual bullshit. But there are a huge number of people here -- old fogies, stuck in the past, yearning for the old days that are never coming back -- who hate JS, and that hatred manifests itself in ten thousand subtle ways. Inventing the idea out of thin air that "there are 7 different ways to define a module" is simply false. It does not resemble reality. Yes, it's true you can point at all the dead module systems that came and went, but nobody bothers even thinking about those systems because they're dead. They're zombies. Yeah maybe some people use them, but realistically if you're getting shit done in JS that means you have webpack and all of these concerns are not actually concerns. JS stdlib seems like nonsense? Lodash. Feels like you're importing too much bloat? Webpack tree shaking takes care of that. Closure compiler eliminates all the code you're not using. There's no reason not to use a first-class stdlib, whether it's Lodash or whatever else you prefer. - The JavaScript community seems to have the opposite of NIH syndrome, so that even basic functionality is offloaded to a third-party modules (see leftpad). The project I'm working on has over 1000 modules in it's dependency tree. This is the power of JS. It's the thing to force yourself to embrace. You need to join the cult of bullshit and just mentally force yourself to love this rather than hate it. It's why JS won. You can hate it all you want and revel in the insanity, but there is zero reason to do that other than as a way of making yourself feel good. Which is just another way of saying we're all acting very selfish when we lash out at JS like this. Yes, you're correct. Every one of your points is absolutely true. Yet it's all so very wrong. I wish I could put it into words better than this. Look dude. I've been around the block. I vividly remember what this shit was like in 2008. You want pain? Holy shit, I remember trying to make a little arrow rotate on my webapp. I wanted finder-style arrow rotations. You know how on a tree view, each folder has a little arrow, and it points to the right when it's collapsed? Click on it, it rotates 90 degrees and points down, and the tree expands. YEah, I tried to do that in 2007 right when Rails 1 was first coming out. Talk about horror. The solution -- the only solution -- was to make an entire animation frame by frame, of the arrow rotating 90 degrees. Like 16 different images, just for this stupid arrow to rotate 90 degrees on command. Because CSS literally wasn't a thing back then. Yeah we had "CSS", but for all intents and purposes we are living in the future right now. We have tools that 2007-me could only dream of. JS works now. That is not the expected behavior. It's difficult to convey how fucking strange this is. Anyone who lived through that 2006-era transition knows what I mean. Right now you can drop Semantic UI into your project, hook up React to it, and have first class testing (Enzyme) and state management (Redux). Don't like all that bullshit? No problem. Use Vue. It sidesteps all the Redux insanity. And the tooling is catching up. But the way you know these things is by being a JS dev. Living and breathing it every day. There's no way around that. You either throw yourself wholeheartedly into the pool or keep one toe in while complaining about how big the ocean is.
I think your code is clever. The problem with it, is that it isn't very readable at all. For an interview question, I would think this is more to see how you code, not whether you can solve it (well it is solving it is too, but yeah). Readable code is always preferable.
Thinking the same thing. Very misleading.
chalk also uses it in some examples, and common-tags
That's a really nice article! I keep wanting to code done simple games and this article helped me feel it's not an Herculean task I will never have the time to do. Also, maybe you should fork that sound library to make one targeted for using in games
It’s never a bad exercise to work on a project like this to learn. Having done similar projects myself, it’s not hard to make a wrapper that works for your project(s), but as soon as you try to make something anyone can use, you’re right, you can’t make all these assumptions.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I don't think that's really the main reason it's used. I think the readability is the main benefit like I said in my OP. At least, that's why I use it.
Ramda is a great library for sure.
Yeah, I think that's just a benefit of a well designed util function in general. I was talking about the benefit of lodash specifically. Speed and edge cases are the advantages it has over the lightweight util libs. Most JS util libs follow the same pattern as lodash and underscore so switching between different libs shouldn't be too much of an issue when it comes to readability or usage. 
&gt; Use Vue. It sidesteps all the Redux insanity. Why are you comparing Vue and Redux? A more apt comparison would be React and Vue, or Redux and Vuex. Redux also isn't the only global state management lib out there you can use with React.
That's one of the next things I'm planning on doing! Thanks for the tip :)
it's really a joke, since most of basics was taken from others plus I am sure that as in React, it's not about only react but all community and packages around ti, so it's same for Vue... but newspapers got to do what they do best, hype
JQuery is a nice on-ramp to JavaScript, but you might be surprised how little of it you actually need. Check out youmightnotneedjquery.com 
First off, thank you for taking the time to give me so many pointers. 1. I never thought of dynamically loaded fields when creating this, a massive oversight on my part as I'm always the first to moan when something won't work with dynamic content. 2. I'm definitely going to add something in relation to the first point that allows the user to specify exactly what element they wish to validate. 3. I'll move the prefix over, I'm not sure why I decided `data-` wasn't good enough for me? Maybe I thought my attribute was the best? /s 4. Yeah I was never too keen on having to write the method as a string, again I'm not too sure why I went down that path. I think it's because I wanted the whole file to work by just using html attributes but I realise now that it's just making the whole project less user friendly. I'll add the option to pass a callback and as for `success` not being "customisable", that was an oversight on my part, thanks for the spot. 5. Yeah I thought it was cool when I created this to go for two aliases again unnecessary clutter. I'll change this but I am concerned about backwards comparability. 6. I seem to remember a very strange bug where the `if` would only work as expected with the bitwise. I'll take another look at this though as it doesn't really make sense. As for your second part to this point, I guess it's slightly related to point 1 in that I will be moving the code to work via initialization. I'm going to convert it to vanilla js as that was always the aim, I'll try and follow some best practices a bit more closely. Thank you again for the advice, I appreciate it!
Appreciate all the feedback, now i know that this is not the route I want to go. Looking into SHA-2 and passing along to my higher ups..
Regarding point #5... If you were to update the code to use modules, aliasing should never be a problem. The developers will import or require your module with the name they prefer. On the other hand if you were to still keep this jQuery related, then it would probably be a good idea to restructure it as a plug-in and, again, you shouldn't need to alias it. As it is now, I do understand the idea of having both aliases, but then again... you're going to end up using always the short one, so... ;)
&gt;Monzo have since defined that they detected the frauds on 6 April 2019 Interesting, and impressive. 
One thing you didn't deal with is currying. The reason lodash provides function versions (i.e. foo(x, y) instead of x.foo(y)) is to make it easier to curry them.
Your understanding is correct. Try applying margin or padding to another element to offset the difference, something like this [https://jsfiddle.net/yk7rn4e3/13/](https://jsfiddle.net/yk7rn4e3/13/)
This is eye opening
I'm less worried about the license and more worried about the mental health of the owner of the project. See: https://github.com/jamiebuilds/react-loadable/pull/154#issuecomment-419531989 If I see this Jamie Kyle guy's name on something, I know it's time to walk the other direction. He's not a safe person to interact with, and it's obvious he isn't interested in getting help.
Hi /u/Nevesj98G, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I’m still lost as to how they hijacked the js file unless they were able to modify and store it on BA’s server. Even if it was being pulled via CDN they wouldn’t be able to make that kind of change..
Hi /u/Jashwaj, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/SillyPickle, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Every time i donwload it im not sure if its compatible with the current npm. Then i always have to check the version and progressively download older versions to figure out how not to break it. Because i need the npm 5 for other stuff its annoying. Just stating my opinion about this framework and its frustrating to use it. But when it works its great dont get me wrong.
Use NVM. Boom problemsolved :)
&gt; because axios and such libraries is too huge for me. [https://github.com/sindresorhus/ky](https://github.com/sindresorhus/ky) [https://github.com/sindresorhus/got](https://github.com/sindresorhus/got)
Yeah that's a good point, I'll probably go down that path (my module/es6 knowledge isn't up to scratch and I want some practice). I've never seen a jQuery plugin as such, is this just following a pre-defined structure? It's funny you should say that, I don't think I've ever used the long alias... I can't think of any reason anybody would.... :')
TypeScript works pretty well with React. It's not perfectly documented, but the types are all there. Sometimes it's a bit of effort to work out exactly which type you should be using for something, if there's maybe a couple that fit. The biggest issue is that React encourages you to depend more on smaller packages for the specific utilities you need (unlike Angular, which tends to go more down the 'here, have everything' route). That inevitably leads to more missing @types issues, which is irritating, *but* I always figure that if a package doesn't have typedefs written for it, it's probably not going to be well-enough maintained that I should be relying on it. I've had a couple of issues with ImmutableJS, which is often seen in React-world. Basically, the types don't brilliantly support the idea of ES6 classes extending the ImmutableJS records, which is a shame because it's often a useful pattern for explicitly defining the model of your structure. The latest bleeding-edge RC version does fix almost all of these problems... but then it's bleeding-edge stuff again and last I checked the maintainer seems to have disappeared a bit. That said, there are plenty of other options if you are going to go down the immutable state route, so it's not like there's nothing out there.
Yeah, my number one tip for getting familiar with TypeScript is to learn how the whole `number | string` thing works, and just really get comfortable with it. Once you get that, I feel like the language as a whole just really opens up for you, and becomes so much more powerful.
So refreshing! 
Sounds great but not sure I trust something that isn't properly optimised for mobile.... (Will upload screenshot if someone can explain how to do it easily on the mobile Reddit app)
I must be living in a dream dimension, because almost every decent employer asked me to show a fragment of my code and\or gave me a homework miniproject so they can assess code quality instead of test how many riddles I know a solution for.
Nice landing page. Did you make it yourself?
This is possibly one of the worst blog posts I've seen in a while. Not only is all of the advice outdated now that JS supports classes (and if you're using TypeScript you also get abstract classes and interfaces), but even 5 years ago all of these patterns would've been bad.
Yeah this article has nothing new. How did they add the malicious code? Anyone can write the 20 odd lines of code to submit form data, that's really not the impressive bit. 
On a side note, I thought your pitch for this was pretty awesome. Describe the problem, how it effects you, describe the solution and place your product in at the very end. If I was a VC I'd certainly want to sit down with you.
Article said they had access to the server hosting the site, and even went out of their way to get a domain with a valid certificate. Seems like a targeted/ social engineering hack more than anything. JavaScript is hardly to blame.
If only. I wish those were the type of interviews I was getting. Those are the best sort of interviews. That or simply talking through development practices. Think I'm going to start refusing whiteboard and codepen interviews altogether. It's just not worth the anxiety and hit to my confidence, not to mention what it says about the potential employer and their lack of understanding how developers actually think and work.
"ridicule puzzles" lol
Good summary of the issue, but how is this not like Codepen? It looks like your project still involves coding while being observed. As you point out, looking things up is typical of a daily work flow, but when you need to do that in an observed coding interview that silence stretches and stretches and becomes very awkward. Even a minute in silence to think a problem through feels like a self consciously long, long time.
if you want to have a taste, it's actually not that hard, just ... signup. Then - in your main dashboard - click "create new interview", select the default container "Linux + Python3 + Django", then start the interview. &amp;#x200B; It actually created your interview environment and redirects you to the IDE.
Do you have any plans to offer lower price levels, like perhaps a per-interview rate? My company currently employs 4 people, including myself. We are growing and expect to interview maybe 3 people at the "code-challenge" level over the course of the next year. It would not be worth $29/mo to us to have this available to us... but we might consider it if there was a pay-as-you-go option.
hit me via email leonardo \[at\] type12 dot com
Coding questions like HackerRank are a filter not a final answer.
Some of the companies that started to use it, don't use it for coding challenges. They do pair-programming. The whole environment is much different from CodePen (blank page), it's designed to allow the interviewer add a boilerplate that mirror the company environment stack. This might be a MySQL, with React or a Ruby on Rails project with PostgreSQL. It depends. &amp;#x200B; With that you, can either clone some of your internals git repos (the terminal console is real and works as you would expect) and build an actual feature of your product (some sort of pseudo-stage environment) or or pair with your candidate in building a little project from scratch. &amp;#x200B; Other companies, give take home assignments to the candidate. The candidate takes its time to work and when he/she's done, push the code on a git repo. The interviewer meets with the candidate, git clone the repo on a type12 environment and both of them together review/refactor the code.
I really enjoy reading about those optimizations made for the game to run under 13Kb and see small videos of the games running. It's amazing what can be done with so little.
i think it took about a month for react to click for me. you must be a really good programmer.
good point, thanks for pointing it out. I'm thinking about it.
The mixed justified text was a bit of a turn off
thanks, I went to a coding test where I was given the interviewers IDE/Mac and had to code on a small resolution. The IDE could increase font size of the coding window, but not the size of the file library, terminal, or error messages. It was a big pain.
love the idea. you gotta update those version numbers on this page though https://type12.drift.help/article/frameworks/
thanks, on the checklist.
This is fantastic! It's been on my to-do list to make something like this (collabedit is terrible), but this is way better!
What I mean when I JSONs go in and JSONs go out inside both on the front-end and back-end of the website you're interacting with the same object literals and you don't have to call JSON.stringify or anything even though they both under the hood may have to be converted into strings. To me TypeScript is nice because it's type safe and has a similar object oriented format to Java and having less rigid primitives is actually a lot nicer. I've had to type String.valueOf() so many time I want to our Java down the sink. 
That gave me a good laugh. The dude is pretty good at being a train wreck of a person. Even his mom is like that.
Happy cake day and thanks for taking the time to comment. After careful consideration we noticed you used the less preferred spelling of “affects” and due to this important indicator of your qualification, we will not be moving forward with your candidacy at this time. 
Bad bot
Are you sure about that? Because I am 100.0% sure that Cheezmeister is not a bot. --- ^(I am a neural network being trained to detect spammers | Summon me with !isbot &lt;username&gt; |) ^(/r/spambotdetector |) [^(Optout)](https://www.reddit.com/message/compose?to=whynotcollegeboard&amp;subject=!optout&amp;message=!optout) ^(|) [^(Original Github)](https://github.com/SM-Wistful/BotDetection-Algorithm)
This style of interviewing is quite typical at Silicon valley/SF tech companies. That's why you [have books like these](https://books.google.com/books/about/Cracking_the_Coding_Interview.html?id=anhAXwAACAAJ). I have heard that Google has moved away from this style of interviewing, but I don't know that for sure. When I was interviewing around SF five years ago, 90% of interviews included whiteboard coding. We don't interview that way thankfully. 
Also, you mention Laravel [on your main page](https://type12.com/#product), but fail to mention it on the [frameworks page](https://type12.drift.help/article/frameworks/).
Right??? I can hardly believe this guy co-founded a software development consultancy and calls himself "an experienced system architect and software engineer" on its website!! I weakly disagree about ES6 class syntax obsoleting this article, on the grounds that it is just syntax and still does the same old prototypical stuff JS has always done, so I think that's more of a stylistic preference (I do personally much prefer it). But I agree with you 200% on this article being trash. No, j/k, I think this article is great. Why would I *ever* want to have to manually call a constructor with the extremely verbose "new" keyword (spaghetti much!??) just to construct a MagicObject, when I could instead simply put the constructor on an object along with a second function that first reassigns that constructor's prototype to the result of a call to a third function on that object which returns the object returned from a fourth other constructor function, and *then* calls the MagicObject constructor??
Maybe this answer on Quora from me helps: [https://www.quora.com/What-are-the-benefits-of-GraphQL-comparing-with-REST-API](https://www.quora.com/What-are-the-benefits-of-GraphQL-comparing-with-REST-API) Just wrote it yesterday :)
Prob typo, but not wrong
XHR's `error` event should be handled too, and in turns, the promise should be rejected.
FYI on mobile web, the text in the middle of the page jumps up and down because of the typing animation at the top of the page. It would be good to set a min height on the container to prevent the height from changing.
I agree with most of what you said, except for the part about how coders shouldn't need to be good at running the code in their head. If you can't read the code and know what it would be doing without running the debugger, then you won't be useful in doing code reviews, you're going to be slow at getting things done, and you're going to miss possibilities &amp; introduce bugs.
I'm in a similar scenario, would be helpful to me as well if you had some sort of lower tier than is already available.
This post didn't explain the freaking interview process, just how much you don't like other processes. The website doesn't explain much either. Also the home button doesn't work on this page in chrome: [http://docs.type12.com/](http://docs.type12.com/)
I would like to make a matrix/vector class. I took a look at several math libraries which are open source. They use typed array like Float64Array usually and it makes sense. I guess it means that the entry of the (typed) array is a double data which means it takes 8 bytes. But there aren't many examples or articles about it and looks like we are expected to understand it so easily. I would like to take a look at several articles about it from different sources or different authors and familiarize myself with it to use it comfortably. 
When the ending screen came up I pressed CTRL+C because I thought I was in an actual terminal
This clock was made with Vanilla JavaScript and it's available on GitHub. Its a simple idea it uses color hexcodes to changes the backgroud color as the time passes by Here's the repo link : https://github.com/mraza007/Hexclock
Right, it just means that the data is all 64-bit floating point numbers. Other than that it’s basically just an array and so if you understand arrays you understand it.
I use revealing module also. I don't even know any others. lol.
Should post this on CsCareer ...something.
I asked the question here because the interview was for a JavaScript position. Maybe some patterns are better to apply them depending on language. 
They like answering questions like these
&gt; Why the fuck does an open source software need any license? Well, This repo is GPL licensed for no better reason. * Scratches head * Also, from their package.json file: &gt; "license": "ISC" * Scratches head harder * 
This will hardly solve the problem which is cultural. Riddle/puzzle quiz is designed to conserve energy and time for interviewers and make screening less tasking. I'm now for the second time in my career in the interviewer role. I take the approach that involves extremely simple tasks (compared to which hacker-rank style tests could be considered mind-bending puzzles) and expands them with wider and deeper insight questions. I believe it works great as it helps evaluate candidates against our baseline and against eachother thus eliminating false positives without introducing way too many false negatives (that I'm confident that the Big4-style quizzes introduce). 
This so hard.
I really liked when the interviews i went to - were more about walking toward a solution together with the interviewers than an isolated task. It really shows off your communication skills and gives a hint of your personality to the interviewer. Especially if the task is not a cakewalk.
good bot?
hit me via email leonardo @ type12 dot com
good catch. thank you. 
it returns b if a is falsy
yep, u/redonkulus mentioned this -- will fix it. 
Put it on GitHub and when you think it's ready make another thread here, link it, and ask.
I've had a mixture of both. But what I can say is that when you do get riddles, or something like [codingame.com](https://codingame.com), it's a nightmare. You get thoughts like "I thought I wasn't too bad at programming, but turns out I'm an absolute moron and this person is never going to hire me!"
The point is though if both variables are true it returns the first one. 
StackExchange has a code review site.
`console.log` always returns undefined, hence the second item will be returned while `console.log` still does its job.
Yes, and technically if it's an || operator, if a is already truthy it won't bother anymore to check if b is truthy or not.
I don't mind doing puzzles, actually. The most fun one was this task: &gt; Create a grid. In that grid, draw the edges to create a box. In that box, draw a cross. There are so many ways of doing so. One could figure out how to draw an SVG. Or use CSS to do it. Or use javascript and create a multi-dimensional array. Or just start up Photoshop and draw it. All of the above would be correct, but you'll learn so much from: Do they ask questions? Like: "What is the use case for this?" and "Who would use it?" and "Program it or design it?" And when they start programming, do they use a `for` loop or a more functional approach? Is their solution flexible enough to scale up? For every choice: ask "why?" a few times. See how they explain themselves. I don't even need a working solution at the end of a 1-hour interview. Just a good talk that makes me see what you're made of. One possible solution to the problem above: https://jsfiddle.net/5u27my6L/ --- That said, this Type12 thing looks interesting, too. I wonder what challenges are presented in there!
https://sourcemaking.com/design_patterns
Yes. It's basically just a syntactical shortcut (quite common) for writing something more verbose and arguably more readable.
If you are willing to use a data-driven framework (i.e vue, react, angular...) , all the things will be much more clear and easier to you. Modifications to the data will be auto synced to the view by these frameworks. Now the only thing you should care about is how to manipulate data in a way to satisfy your needs (filter, update...).
I see so its rather rethoric because it will always return console.log() . I have seen it so many times but never actually knew why they did it. Each to their own i guess. Javascript is awesome and weird. 
Hey happy cake day, cake day buddy 
Or just use a comma expression.
[removed]
Nope, I'm pretty sure they still do that. Don't ask me why.
Why not just use `.forEach(console.log)`?
Isn't there more than enough out there already? Especially about *this* particular subject,
So... how do you chain that? Rhetorical question.
I owe half of my learning from tech channels like sentdex and the new boston when I started programming, years back so I feel I could be useful too. But what you say is valid. But I really want to do this.. and there are contents about everything somewhere right... is simply being able to explain concepts very well enough to start this experiment? Btw still looking for niche suggestions!
Wasn't saying they were going anywhere, there's just a bit of a shift away from it was all - especially for things like optimising bundle sizes etc - treeshaking plays really well with functional styles. Immutability is another ball game entirely. I like to have a balance of OO and Functional, you can go too far in either direction for sure. But understanding the benefits / pitfalls of both patterns can help massively overall. There's no reason you can't have functional methods in your classes for example. Joe Armstrong's quote has always stuck with me though: &gt; I think the lack of reusability comes in object oriented languages, not in functional languages. Because the problem with object oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle
for(var i in items) { .log(items[i]); } Wheres the problem?
As a customer of competitors of yours, I have a couple of comments: 1. the addition of databases is cool :) 2. There's a flaw in the Pro plan (which is what we would theoretically use): 5 users. Are 5 people going to do 120 interviews per month? The way we operate, we have more like 40-50 people who do interviews and they rotate. Some months we do more interviews than others, so some defined way to handle overage rather than just running out at 120 would be good. (Lately, we haven't been anywhere near 120 interviews). Cool service, nicely presented. Good luck!
You say Vue is great
Try to change `item` in `switch` to `true`. Should do the trick.
nope still hits the default
100% agree this time. And +1 for the quote. I had read it some time ago but it’s sometime freekingly true! The beat to is the one that fits the job. Sometimes OO is good, some other times it’s functional. And the bigger the project the more you have chances that a balance of both is the right answer. 
I'm not sure you understand how switch statements work. switch(someVariable) { case 'foo': doSomething() break case 'bar': doSomethingElse() break default: break } &amp;#x200B; The `switch(someVariable)` gets evaluated once. So if the value of `someVariable` was `'foo'` then the first case would be run, if it was `'bar'` then the second case. If it was something else, then it would fall back to the default case. &amp;#x200B; In your example, your switch statement is evaluating `item`. It does a comparison to the first case, which is a method invocation that returns a value (true/false), the method is invoked and the value that the switch is comparing to is either true or false. Since the value of `item` is probably not a boolean, then the case is false and it does not run the code block for it. &amp;#x200B; From the looks of it, you're better off using a simple if/else. const jQuerySplit = data.data.split('.') jQuerySplit.forEach((item, i) =&gt; { if (item.match(/^\$\("[a-zA-z0-9]"\)$/g)) { console.log('it works') } else { console.log('failed') } })
That's how I got hired. I liked it. Mini project, I can sit down on my own time with some coffee and code like I actually code, clean it up, send it to them, talk to them about it.... hired.
 const { join } = require('path') const { readdirSync } = require('fs') const ROOT = process.cwd() const modulesDir = join(ROOT, 'modules') readdirSync(modulesDir) .map((filename) =&gt; join(modulesDir, filename)) .forEach((module) =&gt; require(module)) This assumes that the script is in the root directory and you're executing from that dir: `node main.js` Also, that you have a folder called `modules` that *only* contains modules. Otherwise, it'll try to load up whatever other random files you have there. Another way would be to just add an `index.js` file in the `modules` folder and then import/require all the modules there. Then `main.js` can just be this: require('./modules') And `modules/index.js` would be something like: require('./module1') require('./module2')
You need some sort of authentication and authorization. Without more information about your setup, it's hard to give more details. 
Don't worry about throwing a framework into the mix yet if that's not what you want to do. You could maintain a JSON file externally, fetch it via ajax and parse the resulting data into an array. Or you could even maintain it as a pure JS array of objects and just load that file via script tag. Once you have the data into an array, you can manipulate it however you want. The [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) method will likely be your best bet. Then maybe pass that filtered data to a "render" function that actually builds out your divs.
so you mean if i pass username and password as parameter and check if login info is correct before the sql query execution, right?
You doing this one mate [https://www.udemy.com/modern-javascript/](https://www.udemy.com/modern-javascript/) (The modern javascript bootcamp 2018)? Is it worth a shot then because i'm looking for different projects to have a go at.
Weak. Why is this post allowed at all then? The event this is advertising isn't about JS, it's about Eich's new company. If the post is allowed here because Eich created JS and thus, the other things he does are relevant to post, then his politics should be allowed based on the same damned principle. Kill this whole post, or you're being inconsistent. 
&gt; If the post is allowed here because Eich created JS That's not why. &gt; [...] it's about Eich's new company A company that's developing a new web browser, which is definitely related to JS.
It's a browser that has privacy features built in. How does that have anything to do with JS? Are you saying that we can post articles about browsers like IE, Chrome, Safari when they say NOTHING about JS? We know JS runs in browsers, so freaking what? That's not JS news and doesn't evoke JS conversations. 
Check out [this course](https://stude.co/405151/javascript-course), it is an interactive JavaScript course so you'll get both theory and practical tasks to do. I didn't take this course yet but I recently completed their interactive SQL tutorial, so those practical tasks really helped me to understand everything better.
Use an array for the list, since it has built in filtering methods. If you want the HTML elements to be bound to its data, include the element reference in the data. i.e. when creating the element (or base element; e.g. the table row) for containing a data item, store its reference into the data item too, so that when you delete a data, the element reference is already right there to be used to remove the element from the page. That's about retrieving element from a data item, BTW. For retrieving data item from an element, add an attribute into the element and set its attribute value to an index or ID of the data item. So that, when the element is e.g. clicked, the ID/index of the data item can be retrieved from the element. Or if the data item is an object, bind the click event handler to the data item, so that when the click handler is called, the `this` keyword would be the reference to the data item object. Spreadsheet is best suited for data items that can be presented in a grid and as a single value (where each cell represents one data item). If the data items have multiple fields, a table would be needed. And if the data items have relational fields, a form would be needed. JSON is a string representation of an object or an array. It should only be used for transfering object/array in/out of JavaScript. e.g. put it into HTML as display, transfer it out to server, or save it into local computer. As for storing data into storage, you can either use a database (either remote or local), a file (remote/local), or local storage (local only, in browser's application).
Look, I remove posts unrelated to JS all the time, and it's a lot of work. On the spectrum of "this has absolutely nothing to do with JS" to "this is somewhat related to JS", this post falls into the latter category; it's a notable JS persona talking about a new addition to the JS landscape. Particularly, I think there's some interesting overlap: &gt; Web browsing and digital advertising are broken, and everyone is paying the price. Users suffer invasive ads, tracking, malware. Publishers face huge losses in revenue. Advertisers experience massive fraud and poor targeting. JS is part &amp; parcel to ads, tracking, and malware. How a new browser deals with these things could have far-reaching implications on the JS ecosystem. I'm sorry you may disagree, but it was a brief judgement call, one which we have to make hundreds of times a week. We won't always get it right, and you're welcome to voice your displease, but do know that any post made in bad faith may result in the loss of your posting privileges.
Typo, but appropriate 
There are so so so many more benefits from taking 1-2hrs of a senior to get a candidate that will provide WAY more productivity and be a better fit for the team. It also helps us hone in how we interview people, what to look for, what works and what doesn't.
Great job! Highest score was 2180
What was the song on loop while you play? &amp;#x200B;
Looks pretty cool. As someone who's never used Vue, how does this tool compare to create-react-app and @angular/cli?
Last paragraph
Anyone want to tell me what’s wrong with it before I read it?
It is more like next.js react framework, but for Vue. create-nuxt-app allow to create basic project with some configured options like create-react-app. 
Thank you for you help, although this solution only seems to work in jsfiddle but not in my real life web page. http://www.lunabit.tech/services/test/test/test Do you think another css element could be interfering with the new padding element?
You can check on codecombat. Then there are many articles depending on what is the main language you want to use because you could go with c# now or Java- actually anything- to build your own game with small classes like hero etc. Do you want straight links for that?
https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos
Anything is useful, I’m going to checkout codecombat. Thanks! 
So much I disagree with: &gt; Always follow the rule from simple to complex. This is a bad plan. Complex components are inherently more important to test because they are complicated. Simple components are less likely to be broken and testing them is less likely to catch regressions. All of this is assuming you are post-development testing, which is bad in any case. But if you are, you're probably time limited. Testing simple stuff can wait. Start with the places you are most likely to find bad behaviour - in the complex components. &gt; Snapshot Testing Snapshot testing is great, except that it produces extremely fragile tests. If absolutely anything changes in the output, the test will break, regardless of whether it functionally changed the behaviour. An extra prop that's passed further done? It'll break. You should be testing functionality, not exact byte-for-byte output. "Does clicking on the button dispatch an action" is a good test statement not "Does it render exactly the same as last time".
well for one thing the title should be "how to test react..."
I can strongly recommend getting sololearn app on mobile phone and then there is Khan academy/ codility(?)/ Udemy- of course (pun intended) -because free courses on almost any topic. When I get home I'll try to fetch() you some data :)
Hi /u/caligolae, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Thanks for the tips
- https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia - https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos
Of course, it's important to learn frameworks. The challenge is, many people don't even understand the purpose of the frameworks in the first place. Plus, when you don't understand the underlying technology, it's much harder to learn the frameworks in the first place. My rule doesn't say "Don't learn frameworks." It says "Learn Vanilla JS first." Make understanding JavaScript your priority.
This works very well. Thank you.
One day I hope you learn to care for others as much as you care for yourself.
One question on this if you don't mind. If I implement your first block of code, how can main.js pass a variable into each module? So let's say there is a variable in main called secret, and I wanted module1 to be able to access it... Thanks for your help.
oop isnt well taught. people start talking about real world objects instead of explaining the concepts. Javascript is also a difficult language to learn oop in as there are many ways of doing it
I love OCaml but the learning curve for the MLs tends to be high. Same reason why there's not more people using F#,Ocaml or Haskell
See the comments of previous post https://www.reddit.com/r/reactjs/comments/9cva5q/tutorial_how_to_test_with_jest_and_enzyme_full/
And JS doesn't do all the OOP stuff you'd like. No interfaces and stuff like that.
you should learn constructor functions in javascript first there are game programming tutorials on youtube, like meth meth methods codeincomplete website has some good oop games
Everything but don't make videos about explaining h1 and p tags in HTML
If you can't understand ecmascript without frameworks, I have bad news for you :(
Checkout: https://github.com/airbnb/babel-plugin-dynamic-import-node
can try here: [https://www.reddit.com/r/codereview/](https://www.reddit.com/r/codereview/)
Buckle script gets about ~3000 downloads a week (https://www.npmjs.com/package/bs-platform). A significant chunk of those downloads are from facebook and oCaml users. I wouldn't say Reason is catching on just yet. 
&gt;Should you really write tests for layouts? Yeah. Sometimes. When exact layout matter. 
Great tutorial in w3 schools. Google slideshow vanilla javascript.
&gt;Ordering &gt;Always follow the rule from simple to complex. &gt;This is a bad plan. Well, it's better than starting with complex and stopping in middle because it gets tough and hair pulling level complex. 
You could export a function from the modules, something like this: // module1.js module.exports = (mySecret) =&gt; { // do something with mySecret } // module2.js module.exports = (mySecret) =&gt; { // do something else with mySecret } Then, in `main.js` you would just invoke those functions: const { join } = require('path') const { readdirSync } = require('fs') const ROOT = process.cwd() const modulesDir = join(ROOT, 'modules') const mySecret = 'SUPER_AWERSOME_SECRET_KEY' readdirSync(modulesDir) .map((filename) =&gt; join(modulesDir, filename)) .map((modulePath) =&gt; require(modulePath)) .forEach((moduleFn) =&gt; moduleFn(mySecret)) 
Nope
Untestable code *is a test failure*.
I know it's not the same, sorry. I mean't Javascript.
Did you try anything else at all? The answer's right there in front of you ;) You need to offset the height of the nav which is now 65px on your test site and swap out that padding for a margin. Should work fine :)
Great stuff. Showing this to managment.
I finally figured it out... No thanks to you! Just kidding, you're awesome! :D
Haha no worries bud, good luck with the rest! 
you need to include the i2d.js file in your html code &lt;script src="path/to/i2d.js"&gt;&lt;/script&gt;
I have a function that gets called thousands of times every frame in my game, and it's running at less than 60FPS on Android, even if nothing is being drawn to the screen. Apparently there no overhead in creating a bunch of locals every time the function is called? I get that its faster to access the local scope, but what about that overhead? I'm only accessing each variable once and the difference is still greater than also creating a new variable?
It’s not. It’s faster to type as a programmer and cleaner to read, not to access.
It runs twice as fast for me on this jsperf
Engine? Scope lookups are mostly optimized these days.
1. Yes TypeScript is great. 2. There's no consensus on what's "vanilla". Also, huh? 3. No. It's wishful thinking.
It's not React only, `Rx` does not stand for React but reactive. https://github.com/pubkey/rxdb#platform-support
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjavascript] [My 5 Rules for Learning JavaScript](https://www.reddit.com/r/learnjavascript/comments/9htai0/my_5_rules_for_learning_javascript/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I really don’t like TypeScript but I’m in the minority. I prefer to write code that can be run without a build step and often times with the code I wrote TypeScript actually gets in the way (or at least the ecosystem around TypeScript does). It has its benefits and drawbacks, but ultimately for me an my team, it isn’t worth it. Vanilla JS is what’s in the spec and what’s generally implemented by browser vendors and V8. Learn the basics first, you’ll be better off for it. I don’t really care about WASM. It’ll help build some cool things, but won’t ever take over wholesale. 
1) I just love Typescript, refactoring and debugging becomes way easier. VSCode integrates with it so well, every new js project I start I go straight with Typescript... except for frontend. Those who goes with Angular are probably using Typescript as default, but I tend to stick with what the framework has better documentation with. 2) I consider vanilla JavaScript the one which has more support across the browsers, currently ES5 soon to be ES6. It is definitely essential to learn pure JavaScript before jumping on the framework wagon, you catch up stuff much easier and understands what's happening with all that hoisting, closures and etc. 3) I don't see them as a threat since every language has it's place, besides, webassembly is a whole other paradigm that js developers are not used to, which holds it back quite a bit. From time to time people will always talk about x language will kill y language, etc, etc. IMO, a language only dies when there is something better, easier to learn, does the job well and is perfomant.
If I would build a product without dependencies I would choose typescript without hesitating... But sadly you will often fight libs that have no typings or even worse, incorrect typings. Vanilla js to me is js with all stage 4 proposals. I really don't think that other languages can overcome js. Js itself is really not that bad. With typescript it gets even better. 
What's the error exactly? I don't think that « document.write("In month "+ "you will pay "+ intPortion.toFixed(2) &amp;&amp; **principalPortion break**) » is valid.
Your parameter checking will happen inside the inner function. Here's a hint: function maybe(fn) { return (...args) =&gt; { /* Hm... */ return fn(...args); } }
This. I tend to write a lot of custom elements and the TypeScript compiler and even Babel tend to throw up and die when they encounter custom elements which is a real shame because I think it's a great technology. I also tend to agree that it's safer to use the platform where possible.
What are some use cases for this?
Would it be: if (args.includes(null) || args.includes(undefined)) { return undefined;} Couple questions: 1. Is "return (...args)" an anonymous function? If so, why are you returning it? 2. Where are the args in that being read from? "maybe" doesn't take in any parameters besides the original function fn, so how does that work?
Gotta be scope chain lookups. Didn't expect that much of a performance difference, though. Crazy.
That would work, yup. 1. Yes, we're returning an anonymous function. That's what a higher-order function (or metafunction) is; a function that returns a function. In this case, `maybe` returns a function that behaves exactly like the wrapped function, except if any of the arguments are null or undefined. It doesn't return the value, it returns *another callable function*. That's why you see two sets of parentheses in the example: ```maybe(createFullName)('Frederick', 'Functionstein')``` and not ```maybe(createFullName, 'Frederick', 'Functionstein')``` 2. The args are passed in when you call *the returned function*. See my answer to question 1.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [I2Djs/I2Djs/.../**examples** (master → 417864a)](https://github.com/I2Djs/I2Djs/tree/417864a30a9d08a44b54715e73518a9b352b62ec/examples) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e6edqa5.)
&gt;Is this react only, is this better than gun.db for realtime, and is there an auth plugin? You can use any couchdb, or pouchdb auth-plugin together with rxdb. [like this one](https://github.com/pouchdb-community/pouchdb-authentication)
Oooh, good point. Yes, listen to /u/leeoniya 
It’s nice, But you are kind of writing yourself into a corner with it imho... Just like people did with coffeescript. No one uses coffeescript anymore because the js spec is what the industry will tend toward and what any new fads branch off from.
I enjoy Typescript, but considering that when you decide to go the framework + superset route, you have to be fully committed to it. Then some of the most basic things become a massive hassle. Because the framework believes that doing anything with native js isn't safe. Microsoft pulled the same stunt with C/C++ by deprecating a lot of standard stuff with the visual studio compiler. So every js developer should take ts with a grain of salt, it's not the end all be all answer to making better applications. 
pretty nice explanation 👍
Avoiding bluebird and underscore is definitely a really good idea. A lot of the features they provide can be done in-line and more specialized in 1 or 2 lines.
I've grown accustomed to TypeScript and it really has improved in terms of flexibility. Given the growing adoption, integrating into projects has also been simplified with most of libs providing types and some frameworks like Angular and Nest.js providing out of the box scaffolding support.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/4RsxC9q.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Nope, it's not quite that simple. Remember, `filterWith` needs to be a *metafunction* and so it should return a new function. Is your solution returning a function?
So (I'm not sure how to format code on here): function filterWith(fn) { return (...args) =&gt; { return fn(...args); } } ?
What ? Do you understand what amp I'd?
Don't derail. Where are the alternatives?
Closer, but you're not meeting requirements: The returned function should take an array and return a new array comprising only the elements where `fn(element) == true`.
Your &amp;&amp; is the problem, you need to brace it off Document.write("text" + " text" + (intPortion.toFixed(2) &amp;&amp; principlePortion) break) I'm no expert in Java script but with &amp;&amp; and/or || you always have to brace it of when including it in a string, although the better method would be creating a variable or a method to do those sort of things.
Emscripten can be used in place of GCC *for code with no native dependencies*. I don't know what Openarena are using for window/graphics/ui, but it definitely isn't a web browser with DOM and a canvas.
How is this possible without a for or while loop? (Requirement for this assignment lol)
Okay I've updated the jsperf to use the return value, but the speed is the same. Maybe it's converting flocal() to just "return p+9" and not actually creating the locals?
No.
Hard to compete when Google controls what's displayed in their search results though. Google is pushing AMP content and open source libraries aren't going to change that.
Yes they are. If mozilla or another heavy-weight backs an alternative, even a whisper of a anti-competitive class action would have google suddenly updating their service. They can do what they want right now because there's literally nothing else to choose from. Almost seems like something amazon or cloudflare would want to get in on, but nope.
I mean I'd have to call fn on each individual element of the array, correct?
How would a competitor back an alternative? They would have to have some sort of market share in a search engine.
&gt; where is the community-driven open source alternative to AMP You mean fast webpages that adhere to the HTML spec? 
Correct. You will need a for loop, or a functional loop.
And in the end it all compiles down to bloody JavaScript If you want to deliver your software over the world wide web, it's all JavaScript learn JavaScript well enough it will pay even better in the long run. Fault is not in our stars, it lies in ourselves. Typescript just like any other thing is a tool it has flaws for the human is flawed. So is JavaScript . But that hasn't deterred as from developing some great products in JavaScript even before typescript. But both can mastered and leveraged efficiently over the time with discipline and practice. However, what I think type systems can't simply alone make all your problems go away and make your apps reliable and resilient and easier to reactor or meet the main purpose of software ware which is supposed to be easier to change compared to hardware or machine code. It helps, but certainly not the end game. I believe a strong TDD suite is more essential for large teams and to support rather encourage new developers to change or refactor code. If you don't have this as part of your development culture, typescript can't really do magic. Personally I have found running bunch of angular1.x in es5 apps along with new react apps in es6 and one in react and typescript inside a peaceful PWA shell written in vanilla js. Everything minus typescript application runs behind a webpack build process which uses google closure compliler and each application has their own test suite. Each single page application runs as micro frontend inside app shell loaded demand. And things have been way better for us since January, when migrated our legacy angular 1,X apps to app shell architecture. We are experimenting with typescript, our first application will go to production soon. 
Would I use Array's map method if I wanted to do it without a for or while loop?
I would go further to say that it is an impediment to writing functional JS. 
I've also tested this on my old android and my old ios9 iphone in safari and the speed results are similar in all browsers old and new. So I guess they all optimize the same way.
Lmk if this is right https://hastebin.com/egolesepan.js
It really is the matter of your own preference. Some people prefer backend, some frontend, and others full stack. You can try to learn both and see which one you find more interesting.
In the end they're all JavaScript so do whatever you want! You'll only get better at js either way
Ideally I want to be full stack in the end! Thanks for your input :)
When libraries use bluebird under the hood, they publish typings with bluebird in them instead of promise like, which makes the typings useless if you don't use bluebird or if you have two libraries which publish typings where one uses a native promise instead of promiseLike which makes them all type incompatible, even if they are fundamentally the same. 
Thanks. I know the frameworks just abstract the dom, but I just didn't want to move on to backend if I was missing key bits of front end. I might do backend next so I can start making dynamic sites. Animations and the art design of are really enjoyable, but it's the logic behind that makes a site tick. I want to start making useful web applications. If it doesn't matter then I'll go node.js!
JS is superior to TS while being used for small projects, because of how fast you can write working project. It's also perfect for prototyping. But when you have app with hundreds of thousands lines of code, and dozen of developers, then they might slowly start burying into technical debt. You don't know what functions accept as arguments, so there are situations when you have no idea what they really accept.
How? It seems to me you can do all the functional stuff just as well...
I've come from a Windows infrastructure background. Learning multiple software products and OS in depth is an impossible task to keep up with. There is always something better or a new version around the corner! I'm really enjoying javascript. It's so fun to actually make your own stuff. Fingers crossed I can make the transition to dev.
You know a hallmark of functional languages is a complex and strong type system, right? TypeScript is excellent for functional programming. 
This is actually an interesting argument and I thought about it when before I switched to TS related contracts. My conclusions are as follows: \- CoffeScript is a different language, while TypeScript is a JavaScript superset, in other words, TypeScript is the JavaScript with additional features. So while switching to CoffeScript is risky, because you might forget JS, learning TS is just about extending your JS expertise with additional syntax and concepts. \- TypeScript introduces ES features that are at stage 3 (features that will soon be implemented into JS). \- ECMA actually considers adding types into JS, and they take TS and Flow developers into account. They want to make next standard as similar to existing codebases, as possible.
Writing JavaScript without a build phase seems really difficult now-a-days... What kind of code are you writing?
Except that unlike CoffeeScript, TypeScript is a superset of the ES spec. It would be much easier to migrate a codebase back to JS.
Not game development, but my javascript library, CrxOop, which can run straight in the browser can help you understand the difference between OOP and prototype based inheritance as found in javascript, if this is something you are looking to learn. Build CrxOop classes for OOP, and CrxOop structures for prototype based inheritance. And if you have questions, I am willing to help.
Ever heard of jsdoc? You can easily document what a function does and what arguments it takes and such.
How does this compare to RethinkDB? That was/is a great project that eventually shut down due to performance issues.
&gt; I prefer to write code that can be run without a build step But if you want to write ES6 code, you need to do a build step anyway. After writing ES6 code for quite some time now, you couldn't pay me to go back to writing ES5 compatible code. So since I'm going to be doing a build step anyway, the introduction of TypeScript only introduces a new language, not a new development step. And after having written in TS quite a bit, I quite like it. The type safety and static analysis support it lends your IDE really does help catch incorrect code before you actually run it. And you can use it as much or as little as you'd like. You don't *have* to do things like declare return types or argument parameters. You can sort of slide in and out of vanilla JS and TS syntax as you desire.
JSDoc is not a part of the JS language, so I might as well just use TypeScript, which is way more intelligent in terms of types resolution, and types-related linting.
Vanilla is a raw EcmaScript. Am I wrong?
It is, so #2 is a silly question. Literally all the ECMA versions are vanilla JS.
If you're working with any of the frontend frameworks mentioned eventually the data you'll need to deal with will come from the backend. They all fit together like a big puzzle. Knowing either of them will help with knowing the other. XD
Well yeah but that’ll generate some ugly JS. Better to just strip out types
1. [Google is moving control to an open group, outside of Google](https://www.theverge.com/2018/9/18/17871666/google-amp-open-source-committee-governance-instant-article). (I think made sense for Google to own the thing until it had momentum, then set it free) 2. [Microsoft is hosting AMP pages as of this month](https://blogs.bing.com/Webmaster-Blog/September-2018/Introducing-Bing-AMP-viewer-and-Bing-AMP-cache) (still choosing one garden for another, but evidence I think that Google isn't looking to _control the internet_). 3. AFAIK there is no search rank advantage strictly for using AMP. If you want your own hosting, go for it, you'll get ranked equivalently, no penalty. AMP targets a specific market of people who want to monetize simple content like text, images, &amp; ads. Content providers serve their content cheaply, consumers get fast page loads. I see it as comparable to any other hosting service, just one that's making a deliberate trade-off for performance over features. The definition of what it does and more importantly doesn't do, precludes it from destroying the internet. For that reason, I don't buy the poisonous idea argument.
Would love some examples by you.
I love TypeScript and won't really use vanilla JS or even ES6 JS outside of very small &lt;100 LOC scripts. Most of the trouble with/resistance to TypeScript comes from a few scenarios: 1) Never having thought about types, and suddenly TypeScript is forced upon you by the team or circumstances. In this case, it ends up appearing to be another arbitrary build step. This is super common among web devs - someone who has used Java/C#/Go extensively will almost immediately understand the advantages of TypeScript. 2) Never having dealt with Node/NPM ecosystem build systems in general. If you're used to just writing JS files and loading it up via a script tag, then using TypeScript, or anything build related (webpack, babel, etc) is going to feel like some sort of grotesque nightmare, and in some ways, you wouldn't even be wrong. 3) Using some library that doesn't have good TypeScript type declarations. This is becoming less and less common, but it can be a pain. I rarely run into this now and if I do run into it, I just end up writing the type declaration myself. --- My experience is that, if you really embrace TypeScript and what it has to offer, it's going to be a huge productivity improvement over the vanilla JS alternative. It's honestly not even close. To get that improvement, it really requires going all in, though: strict mode (noImplicitAny, strictNullChecks, etc). TypeScript, combined with React/TSX if doing UI, means that runtime errors are almost entirely a thing of the past. The compiler safety, when combined with the tooling enhancements that are made possible with static typing (intellisense, safe renaming, sane data models), really make TypeScript (or something like Flow) non-negotiable for me on large projects.
I am a relative novice in regards to FP so take it FWIW. Doing things like function composition or currying are difficult with types. You basically just end up using any (opting out of types) or having to jump through hoops to make them work. That is just my experience though and would love to hear someone explain why I'm wrong. So, in hopes to invoke Cunningham's law: TLDR: Javascript, FP, Types. Choose 2. 
For things like this I always reach for a [queue](http://caolan.github.io/async/docs.html#queue) provided by the amazing [async](http://caolan.github.io/async/) module. You can set a maximum number of parallel (concurrent) requests, and then just call `push()` to push a task onto the queue, then return your API response immediately after.
Not familiar with it. Is it easy to install/run/maintain?
What the $&amp;@/ are you trying to write?
I use jasmine for unit tests, and have used selenium for UI tests. Have also used protractor for UI tests as well.
If you compile it to ES6 with ES6 type modules it looks very nice. 
I've written Javascript, Python, Rust, Haskell, C, and more. Typescript is a joy to me. The type system is incredibly powerful, yet streamlined. If you get it right, it can express, and restrict, what you want to do beautifully. However, it can get in the way a bit sometimes. The build times are slow, and there are weird corners that aren't captured perfectly. Debugging is more difficult. It is improving rapidly, and I hope within a year or two the build times will be much smaller. 
There are a lot of great code help chat rooms on Discord and Slack. Check out reactiflux and webdev-collective.
Ideally you could use a RegExp with a negative lookbehind str.split(/(?&lt;!['"])\./) But this is unfortunately very new to JS's flavor of RegEx. I'm not sure how widely supported it is at this point, but if you need good support they're pretty much a no-go. You can probably get away with using a lookahead, and reversing the string(s) before and after the split. reverse(str).split(/\.(?!['"])/).map(reverse)
What are the advantages of using this? 
My favorite tutorial is [javascript.info](https://javascript.info). I'd start there :)
What are the benefits of using this over something like an actual queue in that scenario?
I don't use Typescript and I'm not a huge fan of having to declare types in general. It slows me down. It's one of the main reasons I got sick of using Java. But I could see how a large team might benefit from it. I generally consider type declarations to be a poor man's tests. My ideal dev cycle usually goes like this: 1. Very quickly write prototype code and learn a ton about the problem that I didn't know before. 2. Throw out the prototype code. 3. Write tests now that I understand the problem. 4. Write code that passes the tests. I don't always have time for that, but that's the ideal. I'll also mention that although my code isn't free of defects, I almost never find bugs in my own code related to mismatched types. So that might be another reason I don't feel like types are giving me a lot of value. &amp;#x200B;
Only if you over-rely on frameworks etc. If you have to use `npm install anything` you've already failed.
My guess is that it's less logic to write. You'd write your app as if it were always online. That said, I know nothing about it. 
What about JSX and Babel? They both require buildphase, especially if you’re writing futuristic JS features like class properties. Do you just avoid frameworks and npm?
\&gt; I want to avoid all the common mistakes so I don't end up with bad habits in the future. That's not a great approach. You're trying too hard to be perfect and too early. I used to think the same thing about learning guitar and it was slowing me down a lot. I was insisting on learning the exact original version of a song until it sounded perfect instead of learning a beginner's version. I would have learned far quicker by just learned loads of easy songs. It's actually pretty easy to change habits. Usually takes a few days at most. And with guitar that's muscle memory. It's even easier to change coding habits. Just build stuff. The fastest way you can learn to program is to build stuff. You will make loads of mistakes. We all do. Look at the best coders in the world. Their git repos have plenty of issues and bugs reported. When you get stuck and need help, you can reach out to Slack / Discord like another comment suggested, or try [Stackoverflow](https://stackoverflow.com/). In fact it's a good idea to build up some reputation at Stackoverflow so when you really do need an answer people will be interested in answering your question. A lot of folks on SO don't bother answering questions to people with low reputation because many of those people never come back to the site so it's a waste of time. When you feel like you understand JavaScript and Web Development, a great way to get some free mentoring is to contribute to an open source project that does code reviews when a PR is submitted. Ok, so there is one site you could go to to get some mentoring. Also a part of the Stackoverflow family it's called [Code Review](https://codereview.stackexchange.com/). But don't spend too much time there. Just build stuff. You can also ask for advice on small snippets of code in this subreddit. And you'll never stop learning if you choose coding as a career. There are always new and better ways of doing things. It's amazing how quickly things change in the programming world.
Your code must be a nightmare to maintain. 
I like u/grinde's solution for it's simplicity, but it's not the most efficient solution, requiring 3 iterations (one for reverse, another for split, and another for map). If you're looking for something more efficient, you can always do a manual loop over the string and do a lookbehind check inside the loop - a bit of manual parsing can go a long way. &amp;#x200B; var foo = 'one.two'; var bar = 'one.(".two")'; function split(str) { var results = []; var chunk = ''; for (var i = 0, len = str.length; i &lt; len; i++) { var curr = str[i]; var prev = str[i - 1]; var isPeriod = curr === '.'; var isQuotePeriod = curr === '.' &amp;&amp; prev === '"'; if (isQuotePeriod) { chunk += curr; } else if (isPeriod) { results.push(chunk); chunk = ''; } else { chunk += curr; } } results.push(chunk); return results; } console.log(split(foo)); console.log(split(bar)); &amp;#x200B; The example above has some room for improvement, and is a bit verbose, but you could probably do the same thing with a more simple syntax if you were to use [parser combinators](https://medium.com/@chetcorcos/introduction-to-parsers-644d1b5d7f3d).
Who says you need those if you just support modern browsers?
I've been using Knex which returns Bluebird promises. I've been using async/await rather than raw promises so it hasn't been a problem.
I've been using it for a few months now, with VS-CODE IDE, and it's working out a lot better than I expected. There's a mild learning curve for anyone that hasn't had experience with typed languages before, but vscode's intellisense totally makes up for difficulties that you initially run into.
FreeCodeCamp is great. [https://www.freecodecamp.org/](https://www.freecodecamp.org/) Also [https://nodeschool.io/](https://nodeschool.io/) provides a bunch of interactive modules that you clone from github. Powerfully good stuff. &amp;#x200B;
On line 18 of your fiddle put this code: `console.log(x.value, y.value);` If you open your console in your browser, you can see the values being printed out. If you need to know how to open the console, look at this link: [https://kb.mailster.co/how-can-i-open-the-browsers-console/](https://kb.mailster.co/how-can-i-open-the-browsers-console/) Essentially, you need to get the value of the argument you are passing to your function. In this case, it is `x` and `y` Now that you have your values, you can display them as needed.
I appreciate you help but that didn’t work :/. I know exactly what you mean about passing the values to each function but idk how. I figured the &lt;button onclick=“add(x, y)”&gt; would call the function if u know what I mean. 
Enjoy the ride
The function is being called, but the input values are not being passed into the function. You'll need to replace x and y in your onclick call to something along the lines of document.getElementById('x').value and document.getElementById('y').value to pass the values through to the function.
That makes sense I guess. That didn’t work either but you definitely helped some.
First move your &lt;script&gt; section to the bottom of the &lt;body&gt;. Second, your functions have return values, but where are they supposed to go? Try something like this: \`\`\`(javascript) function onAdd() { let x = parseInt(document.querySelector('#x').value); let y = parseInt(document.querySelector('#y').value); document.querySelector('#result').textContent = x + y; } &amp;#x200B; document.querySelector('#addBtn').addEventListener('click', onAdd); \`\`\` &amp;#x200B; this way when you're script initially runs, it binds the \`onAdd\` handler the &lt;addBtn&gt;'s click event
Listener’s receive default parameters (the triggering event, I think?), I find it easier and much more practical to have listener functions act on variables and objects that are globally accessible. For instance, if x and y come from DOM inputs, then the listener function should read in those values directly from the DOM objects instead of receiving them as parameters, this insures that you get the current values at the time of the click rather than the values that existed when the DOM child was loaded. 
I went through this https://vimeo.com/105955605
```(javascript) let x = "this.('.that')" let result = x.split(/?&lt;!\'|\")\./) //(2) ["this", "('.that')"] ```
The problems you’re describing are [the reason we have libraries like React and Vue](https://medium.com/@mattburgess/javascript-frameworks-why-to-use-them-at-all-8cce2804c092). They let you remove and/or simplify the maintaining of your DOM, eliminating explicit DOM manipulation in favour of a simple central object that represents “state”. State would include things like the character properties. It’s a little hard to visualise the issues you’re having. But my assumption is that a few React components would straighten it out pretty easily. 
Look through the `Array.prototype.filter` function on mdn: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter 
Go build a thing, and learn whatever you need to ship it. Frontend vs backend is an arbitrary way to separate and doesn't really capture the priorities between critical knowledge and nice-to-knows. Once you've built and thing and gone through the pains, you'll have a much better appreciation for why frameworks are built the way they are, and they'll be easier to pick up.
I think it’s great you found something that will help get you jazzed about coding. I din’t think there is any reason to focus on OOP in particular though. 
If you are going to do front end work you really should learn an MVC. Doesn’t really matter which, but Vie and React are big with tech companies right now (Angular still has a lot of corporate users). I prefer React myself. I love Node. Not a ton to learn there though honestly. It’s basically just JS with a little boiler plate. Build a quick project or two with it. 
Not performance of the software, mind you. Performance of the business was the issue. It's since been bought/transferred/relicensed and is community managed now. Development isn't breakneck paced, but it's not dead. I still hold much love for the project.
You were right about getting downvoted at least!
That whole AMP Cache and "be able to preload your site in SERPs" thing, the latter of which is only possible in the Google AMP ecosystem for a landing/index page, and the former of which only has at last count 3 different options between Microsoft, Google, and Cloudflare. 
You better turn that frown upside down because TypeScript is going to take over.
In React, such a thing might look like this. `let items = this.props.items let itemElements = items.map((item,itemIdx) =&gt; &lt;li key={'item:' + itemIdx}&gt;{ item }&lt;/li&gt;);` &amp;#x200B; `let outputHTML = (` `&lt;div&gt;` `&lt;ul&gt;` `{itemElements}` `&lt;/ul&gt;` `&lt;/div&gt;` `);` &amp;#x200B; &amp;#x200B; Pay special attention to that map function. So here, when you iterate your items in the array, you'll for the moment get just an &lt;li&gt;. If you want to spruce that up a bit and wrap text in spans, add more displays, etc. etc...that's where you would you do that. &amp;#x200B; You can go beyond that to make your code more maintainable by building things like a "equipment list" to use everywhere you have a list like you do above, so you could then do something like this: &amp;#x200B; `render() {` `return( &lt;EquipmentList items={ this.props.items }/&gt;` `}` 
1) I love Typescript. It's really just a superset of Javascript. 2) I code in ES6 style then have it transpiled down to ES5. 3) Newer technology is just another tool in your toolbox. Never see it as a "threat". That sounds too fanboyish. Use it if you need it. Don't use it if not needed, just like Typescript. For example, I don't use Typescript on Node automation scripts. *********** The thing about Typescript is to see it is intended to LIMIT you. Javascript, on its own, is very powerful. But it's so powerful that errors and mistakes are equally as powerful. Typing is a way to limit you. Prevents you to openly do some things you're accustomed to. If you insist to still do it, you can do so by casting, but now you are informed and take the responsibility. Typing has a positive "side effect". Because you are declaring your "limits", your (supported) editor now knows those limits, and will only list those limits as you type in your code. 
I’m not even confident that they necessarily “evolve” the concept of a callback. They are a means of encoding the state of sole asynchronous operation. It is something like a monad, but doesn’t fulfil all the laws. Basically, they’re quite different from callbacks - so much that you might say they’re not fairly extensions of callbacks. 
In React, such a thing might look like this: ```let outputHTML = ( &lt;div&gt; &lt;ul&gt; {itemElements} &lt;/ul&gt; &lt;/div&gt; );``` Pay special attention to that map function. So here, when you iterate your items in the array, you'll for the moment get just an &lt;li&gt;. If you want to spruce that up a bit and wrap text in spans, add more displays, etc. etc...that's where you would you do that. You can go beyond that to make your code more maintainable by building things like a "equipment list" to use everywhere you have a list like you do above, so you could then do something like this: ```render() { return( &lt;EquipmentList items={ this.props.items }/&gt; }``` And then with the code from before wrapped in a React class, you can then use it everywhere you need to format an equipment list. Point of this is to demonstrate React's clarity as opposed to the DOM mangling you can get involved with in JQuery. Also, one other thing. Switch/case statements are kind what most modern coders think of as "OMG! SATAN!". A better approach (and probably WAY more maintainable) is to instead of a switch/case statement, organize your code around separate functions that are then looked up in a javascript map/hash of some kind. There are lots of ways of doing this, but the most elementary is the following. ```let equipmentCharacteristics = { "characteristic\_1" : someLogicalFunctionName, "characteristic\_2" : someOtherFunctionName};``` Then in your further code, you'd do something like: ```items.map((item) =&gt; equipmentCharacteristics item.characteristic );```
So the thing about AMP is that it’s essentially a way to integrate your site better with Google. The only way to compete against AMP is if people stop using Google search.
The AMP cache is a) not a feature and b) not related to the open-source parts of AMP at all. Google could have said "we'll cache/prefetch any page that loads in less than 100ms", but that wouldn't lock users and content creators into the Google ecosystem
Right, and you can roll your own fast solution if you want. The argument against AMP isn't reasonably be that it's fast.
[https://github.com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton](https://github.com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton/blob/master/README.md)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [davellanedam/node-express-mongodb-jwt-rest-api-skeleton/.../**README.md** (master → a14dbf0)](https://github.com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton/blob/a14dbf0ebcfee6476bc972fa9facf3a0485d10b8/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e6f6hw5.)
Sorry if it is a stupid question, but does this work like a websocket?
Perfect, thanks 
That would be great. I'll be taking you up on the offer for sure. 
What are you talking about? I use typescript all the time and have not found any part of "native js" which is not available in it.
Install this module: https://www.npmjs.com/package/string-saw For the first example, you can do, saw(source) .split(‘.’) .remove(‘“‘) .toArray() 
I faced this exact problem in my previous startup. Switching to React was the best solution. It seemed do easy and natural. 
Chrome 69.0.3497 / Windows 10 is about 50% faster with the local version. Firefox 62 is about 400% faster.
What do you mean broken? Are there any errors in the console?
The issue is that TS still struggles to infer some cases of “heavy fp”. Its like you can not even trust the compiler/typedefs anymore. Besides, error messages start to become reeeealy cryptic. Ex: composing multiple react HOC with a compose() usually will yield mostly erased types (ex: ()=&gt;{}). On the other hand, “light FP” is mostly fine. In most cases I will end up preferring a strongly typed imperative code (light FP) than going all in FP but no types (any)
Did you know Pushshift is powered by RxDB? It's a new realtime DB for JS...
Jsdoc is horrible. And since it is “just doc”, it suffers from the problems of manual documentation: i.e. it WILL get outdated, differently from types, which truly integrate into the whole workflow
Why was this not obvious to everyone involved from the start. This is obviously what was the start and end goal of AMP. Even a cursory look at what they wanted to achieve made it obvious that this is where it was going...
What's wrong with this? : var arr = [1,2,2,3,4,4,1]; var set = new Set(arr); arr = [...set];
What's wrong with this? : var arr = [1,2,2,3,4,4,1]; var set = new Set(arr); arr = [...set];
this is just a queue wrapped into a yet another js library
You're right, the typings in `recompose` aren't very good, typing inference rarely works there. But the typings in `rxjs` are great, the `pipe` method infers types really well. So it can be done...
Are there any examples or studies of the server push, being implemented in large scale systems? 
NodeJs first. Not because I'm some hardcore node fan (I am) but because the server generates the page so it's like building a house, you start with the foundation before you put on the outer cladding. Server side supports the client side so it goes in logical order of creation first.
Did you post your comment twice to make fun of the "duplicate elements" title?
No, because I live in a third world shithole where internet sucks. And Reddit is coded terribly. 
If the course included jQuery it’s very likely that it didn’t get into ES6. Node or any of the front end frameworks make heavy use of ES6, so you should definitely put some time into learning that before moving on to something else. 
The Internet Explorer **[AI Mind](http://ai.neocities.org/FirstWorkingAGI.html)** **[thinks](http://ai.neocities.org/EnThink.html)** by its lonely self for an arbitrary number of cycles as set by the **[AI Mind Maintainer](http://ai.neocities.org/maintainer.html)** -- your future job -- and then for lack of human contact it calls out **[TEACH ME SOMETHING}(http://medium.com/p/6fb6d07ca6e6)**.
That's what I have realised. It won't take me long! Thanks
haha
It's mainly an issue when trying to work with libraries that work directly with window, and document elements. 
You just misunderstood. Typescript can always be cheesed to compile, it's runtime where things can behave unexpectedly. 
I'm not saying it "doesn't work". I'm saying what typescript offers, isn't worth what it costs for my use case.
I don't have to "cheese" typescript to compile, it has good typing support for all native things. Maybe an example would help. Also if you "cheese" (use any type) typescript to compile it is as "bad" as vanilla JavaScript, right?
Also doing a lot of web components/custom elements. We sometimes use Babel/TypeScript but people trip up on including the right plugins and minifying the wrong scripts all the time. Honestly, it’s less of a headache to just use syntax the browsers support natively (and polyfill what they don’t).
That’s good, I’m glad it works for you. Like I said I’m in the minority here and for me it isn’t the right tool because it makes some assumptions that are out of sync with the work I do. Go try to write some custom elements (no framework) on StackBlitz with TypeScript and you’ll see what I mean. 
I might be too late but: * `True` \-&gt; `true` * `map` will just transform each element of an array and generate a new array. With your code, `filterWith(fn)(array)` will return something like `[true, true, false, ...]`. What you want to do is create an new array, and for each element in the input array, put it in the new array only if `fn` returns `true` for that element.
I have not seen any and I was really keen on server push when it was first released. It's got huge potential but seems to be struggling to gain adoption.
I'm building a crowdsourced/ranked list of JavaScript resources, and I would love your feedback, if you find it valuable, and what could be improved! [**JavaScript Tutorial List &gt;**](https://gitconnected.com/learn/javascript)
What's an AMP? Don't wanna Google it for obvious reasons.
Map and Set "abuse" isn't really abuse. Assuming their native implementation is reasonably efficient they can be used for all kinds of stuff. For example, if you need an LRU cache you can use a Map object - the alternative is a linked list in Javascript, especially wasteful if you use the cache a lot and the contents are simple values (like strings or numbers).
exactly 
let accumulator = []; arr.reduce((acc, nxt) =&gt; { if (acc.indexOf(nxt) &lt; 0) acc.push(nxt); return acc; }, accumulator);
Is AMP targeted to every possible website/web-app? Or only to article pages?
My self too.
where do you want that to show up? ``` let amt = 20, month = 'may', premium='deesnuts'; let div = document.createElement('div'); div.textContent = `In month ${month} you will pay ${amt} plus premium ${premium}`; document.body.append(div); ```
Hi /u/Ho-le-fekk, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CruzOperator, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/stackoverflooooooow, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
IOT.js is designed for far more constrained devices. Binary is around 300K and 64K ram is enough for many applications. E.g. cloud nodes with secure https communication. JerryScript is quite extreme support for low-end, e.g. js can be precompiled (called snapshots) and this can be executed with minimal memory. Basically you have machine code just much smaller, so a quite large core module system is part of that 300K binary.
I wholly agree, I mostly used the term because it's easy for people to see it that way.
What do you need help with?
I'm not allowed to use for or while loops though. Any ideas on how I can do that?
This sounds like a pretty good solution for everybody. From business point of view you start paying at the point when you are certain that you will be using the product (ie. when you freeze this dependency version)
Thanks! We currently just have a Google form, but we'll be adding more functionality to website to allow the community to get involved. If you have any other feedback, I would be very interested hear it. We're working very hard to try to build the best source to learn to code. &amp;#x200B; Submission form: [https://docs.google.com/forms/d/e/1FAIpQLSfQbwE2EVfy9\_UCw0ZGnesS5bkvFMID5PSKYfsrMC98tYu4oQ/viewform](https://docs.google.com/forms/d/e/1FAIpQLSfQbwE2EVfy9_UCw0ZGnesS5bkvFMID5PSKYfsrMC98tYu4oQ/viewform)
[removed]
Can anyone give their own review of Front End Masters? Worth taking the course? What all does it cover?
I loved the content on the website, but I find the monthly price to be way to high. If it was much lower I would have kept my subscription in a heartbeat. But for the amount of time I spent watching videos, the 40$ a month price was way to high. Overall thought, i loved the content and found it to be very high quality. 
I'm gonna leave this comment here so I can hop on my PC in a little bit and try this 
It's the best out there, the only site that comes close is egghead. They have the biggest names in the community giving lectures like Kyle Simpson, Sean Larkin, Douglas Crockford, Kent Dodds, etc. 100% worth, my company is funding my membership, but I would still buy it without
Modern browsers don’t support JSX or class properties 
Thanks, have an upvote! Time to learn stuff
Same!
[removed]
Great content taught by the leaders in the industry which are all down to earth and generally just love sharing their passion. Jem Young, Brian Holt, and Kyle Simpson alone make the subscription worth it, and there are many more on the project. Some of these people also run a podcast called Front End Happy Hour which I recommend a lot. 
This is a quite shitty thing to do when they offer a free week trail. I'm a paying subscriber and I can tell they have a lot great courses and if you think so to after trying it for a week you should subscribe instead.
Reddit has a save button
Lol I've had Reddit for 4 years and I've never payed enough attention to see it 
Would you recommend someone starting off in Front End to do this course? I just finished Eloquent JavaScript, and besides building websites with ECMAScript, I'm trying to think of my next moves. How is the podcast btw? What topics do they usually cover?
How do you make a free account? I'm not seeing that option on their website.
neat
Brian Holt does a highly regarded intro to react course that has started many people’s career that I know, which is on front end masters. If you have read eloquent, you can easily start these courses and have a leg up! I’d recommend taking Brian’s course and then start pounding out React sites like no tomorrow. Btw. It isn’t just frontend, there is plenty of node backend stuff and it all ranges from beginner to extreme expert. The podcast is very diverse. Many times they are talking about industry stuff like: work/life balance, how to speak with recruiters, what is good/bad culture, should you work for a startup, and they also have code centered topics like when to use a library, when to introduce tooling, what skills are the big companies looking for, etc. 
Anyone else not seeing an option for a free account? The only options for making an account that I find are the four available payment plans..
I have been using TS for the last ~8 months. It's helping me to maintain large code better, and also code faster. VSCode also has great support for TS. Not a JS expert, but knowledge of ES 5 &amp; 6 does help to write clean code. However, I get confused more easily if you ask me if my code is ES 5/6+. I use arrow function, spread, async await, destructure, etc. but really not sure if these are ESx features. TS takes care of most of these things. WASM isn't a replacement for JS. JS ain't gonna die in next 5 years. No indication. But TS will be very popular.
I downloaded ChromeDriver but I'm not really sure what to do after that? I opened the Unix executable and in the terminal it says Starting ChromeDriver etc etc, and then the next line is Only local connections are allowed. Someone halp
Took me 3 years to realize you could filter by best comment..
Why this comment is downwoted but this one - [https://www.reddit.com/r/javascript/comments/9h52nw/ios\_12\_array\_reverse\_bug/e69xoqj](https://www.reddit.com/r/javascript/comments/9h52nw/ios_12_array_reverse_bug/e69xoqj) upwoted. They are about the same but different words. &amp;#x200B;
Thank you sir
This is the correct answer.
&gt; https://frontendmasters.com/sale/trial/ 
Inertia. Also ECMAScript's pronunciation is too far from any naturally occurring English-language word to be used by English speaking programmers. &gt; ECMAScript was always an unwanted trade name that sounds like a skin disease. — Brendan Eich
just google frontend masters free trial
&gt; just google frontend masters free trial 
anyone else having issues downloading certain courses with long names? i just tried Complete Intro to React v4 as Complete-Intro-to-React-v4 and it errored out but it worked fine for intermediate-react 
anyone else having issues downloading certain courses with long names? i just tried Complete Intro to React v4 as Complete-Intro-to-React-v4 and it errored out but it worked fine for intermediate-react 
Yeah I was gonna ask if that legal. Just because you CAN do something doesn't mean you SHOULD.
just keep that window open, open a new terminal, and follow the instructions after Try It
https://frontendmasters.com/sale/trial/
Agreed. This feels to me like a "this is why we can't have nice things" situation. FEM is well worth $40 a month. Use the free trial for the weekend, and if you like it, subscribe for a month or two until you view everything you want, and then cancel until there are more courses you want. It's not like you have to pay $40 a month for the rest of your life. Using an automated tool to take advantage of their generosity like this is pretty scummy. A lot of really talented people put a lot of time into making seriously great content for this site.
Cool stuff! Going to check this out on my PC later. 
They offer a trail where you can see what they offer and if it's any good. Downloading all their content for later viewing when they offer this trail is shitty and it's a shitty opinion to justify this behaviour just because of personal economics.
I don't feel the issue here is whether or not it's the "superior" solution. It's just a little open source package I decided to write because I thought it might be cool and potentially useful to somebody. Appreciate your feedback though!
I want to detect a click only if you actually clicked with a mouse. If you add event.preventDefault() to touchstart then you can't even scroll with your finger.
I heard 50% of laptops sold today are touchscreen while so many javascript code solutions don't work for touchscreen laptops, as well as some websites you can't even click lots of things with your mouse because "ontouchstart" is in document so it must be a phone.
yea it may be a bit shitty but its really not that shitty especially because i'd like to believe the people who get true value out of it will eventually subscribe and support. 
1 - Create a trial account (https://frontendmasters.com/sale/trial/) 2 - Follow the instructions and commands in https://www.npmjs.com/package/frontend-master-downloader. Your username is your email registered on the site. In the instruction to download put at the end "-d ~/Downloads", so the videos are gonna be saved in your Downloads folder, if you are in Mac.
Okay, Stop down voting. Use the trial, provided to one and all, to analyse whether you'd want to do the course, and maybe take advantage of the sale they're offering to everyone. I just put up the link, cause some people couldn't find it. 
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
If you just want to block videos and using chrome: Here is a good extension for it: [Video Blocker](https://chrome.google.com/webstore/detail/video-blocker/jknkjnpcbbgcbdbaampbjlhkcghmgfhk)
i think you meant to post this in /r/piracy. thanks for leading me to the trial inadvertently!
i get an error (node:20234) UnhandledPromiseRejectionWarning: Error: waiting failed: timeout 30000ms exceeded .... etc &amp;#x200B;
Ahh that 38% confused me. Nice one!
... if you must.
In November of last year I started taking courses on Frontend Masters. The first was Intro to web development with Nina Zakharento. Half this course is also taught Brian Holt. For me this was a the basics I needed to have a good enough understanding of HTML and CSS. It was a brief cover of Javascript too. (A note here: I have been programing in one way or another for the better part of a decade. I programed in TI-basic on my calculator. I learned ruby and rails 5 years ago, swift 3 years ago. but I never got passed the basics. Before this course I never worked in the industry nor did I create any notable piece of software. Instead I was the perpetual beginner. Doing a tutorial then nothing.) After this I took Kyle Simpson's Intro to JavaScript programing, followed by Real-time web with node.js. At this point I had the skills to create the project at [my website.](http://imizaac.com) This was two months after starting frontend masters. I also created a server that continuously traded cryptocurrencies on a cryptocurrency exchange. These both heavily relied on websockets. Next I took Brian Holt's Complete into to react, 4 semesters of CS in 5 hours (part one and most of part two) and then rebuilt my site into the form you see currently which runs on React. Now its May. At this point I went to a local tech conference where college students were talking to companies. I live in a smaller town so it had maybe 30 companies there. There were maybe 150 students there. Most were looking for internships. I got two interviews and then a job. After this I still continued my courses here. Taking Jem Young's Full stack for front-ends part one and two. I take courses here all the time and am planning on using it until I have done all of the courses I just got my associate's degree in the mail a week or so ago. I'm 26 so I'm really not a good student. I did work really hard at this. I got a job before I got my degree, without recommendations, and with no friends in the field. I understand this is probably an extraordinary story, so I'm not going to say, "AND YOU CAN DO IT TOO!!!" because completely honest, unless you work really hard AND get lucky you might not be able to. I can say that I think Front End Masters is one of the largest contributing factors to my success. They have real people in the industry teaching you how to program in the industry. Not people who live in an ivory tower and program for coding problems. (which have no parallels whatsoever to real world programming) I also benefited from a bet I made. I bet that most college students have nothing to show for their education besides a piece of paper. Most have no portfolio, no experience with industry standard tools, and most have never used Javascript which is the most popular language in the world. I bet that me having these things is worth more than their piece of paper. I guess this time I was right. **TL;DR: I got a job without a degree, friends in the industry, or recomendations. I think frontend masters was one of the largest contributors to this**
Forget mouse and touch events. With touch enabled devices with mouse, you will get into a lot of pain. Have a look at pointerevents and the polyfill for them (PEP). It will save you a lot of trouble.
Yeap, same here :/
Nobody needs JSX, as for classes they've been supported a while in modern browsers https://caniuse.com/#feat=es6-class.
Try adding chrome webdriver to PATH, it did it for me.
Open chrome developer tools and paste in this to get an array of all the free course ids. I maybe able to write a script to take that array and download all the of them using that npm package
Added typed-string support; result from implementing/fixing toJSOX/fromJSOX (as in type-arrays, typed-objects). // this are all variations which may be used to revive a color object color"0x12345678" // typed-string color[0x12,0x34,0x56,0x78] // typed-array // at a root level, the first 'color' definition encountered // is used to create a field-name map. Then later usages // sould only specify the values. color{r,g,b,a} // typed-object definition color{0x12,34,0x56,0x78} // typed-object subsequent usage // if no typed-object definition is rquired, then // the typed-object must never be used at a root level. { a : color{r:0x12,g:0x34,b:0x56,a:0x78} } // object containing typed-object fromJSOX only, no pre-field-definition [ color{r:0x12,g:0x34,b:0x56,a:0x78} ] // array containing typed-object fromJSOX only, no pre-field-definition 
&gt; Use the free trial for the week, and if you like it, subscribe for a month or two until you view everything you want, and then cancel until there are more courses you want. It's not like you have to pay $40 a month for the rest of your life. I am so dumb. It never occurred to me to do this for a service, because all the subscription services I have, I've used extensively since I've got them (Spotify, Amazon Prime, Netflix...OK, I honestly could probably get away with canceling Netflix.) I'm going to take your advice and check them out. I actually saw one of Brian Holt's courses just recently, Learn 4 Semesters of CS in 5 hours, through my LinkedIn premium trial on their Learning platform. I was a biiig fan, because it was all content, and no fluff, which is much more than I can say for some of these 40 hour Udemy courses. If that video was any indication of the quality of the content on FrontEndMasters, then I have no problem with being a member for a few months and soaking up the info that I find interesting.
Lol this is sketch.
You're talking about web scraping. Check out x-ray. 
Is there a reason you're using a 3rd party library to enable CORS rather than the standard way?
It's the method outlined in the Express docs: https://expressjs.com/en/resources/middleware/cors.html
Would you happen to know of a similarly good resource for back-end development?
Puppeteer
Livescript was a good name.
I tried puppeteer but had issues with submitting a post request (intercept the request, set it so post data gets attached and then use goto) and couldnt get it to create a new user. I also couldn't figure out how to instantiate the browser globally (w/ async) so it could be passed to other functions. Using axios seemed much easier, but using it for what I'm doing had its own problems.
This one looks promising, thanks.
IIRC in my Deutsche class back in the 90s, the was a push to replace ß with ss in general. What happen with toLower?
'ß' stays the same, and 'ẞ' becomes 'ß.' So nothing strange there.
So basically someone fubar'd the business requirements on toUpper. I wonder if this haopens in other languages (PHP, C, etc...)
Quick test (no change): [http://sandbox.onlinephpfunctions.com/code/b635192c1057df67c47731eaaffdddf028d5fc37](http://sandbox.onlinephpfunctions.com/code/b635192c1057df67c47731eaaffdddf028d5fc37)
Of course did I copy utf8 instead of ascii, which i dont think there is only one esstet in ascii.
There is a function called [toLocaleUpperCase](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase) but it returns the same result and it looks like defining a locale was recently added. The original spec only mentions Turkish and that might be the only language/locale that it works for. Some experimentation might be needed.
I gave it a go with Python, and `'ß'.capitalize()` outputted `'ß'` (lowercase), not `'ẞ'` (uppercase). Bizzare.
I love it! :D
So does the discount not apply to the monthly access? I just have about three courses I want to check out.
That's a weird restriction. Anyway, you can still iterare through an array using Array.prototype.forEach(). Google it for how to use it. The easiest solution would be to use Array.prototype.filter() instead, which literally does what you want to do, but I guess you are not allowed to use it.
I just need to fix the circle &amp;#x200B;
Because javascript == nonsensical
&gt; javascript === nonsensical FTFY
It’s pretty painless. I’m using it right now for a project to generate a static site.
Try doing arc instead of ellipse
Did you try d.arc(this.x,this.y,25,0,2*Math.PI,false)? (You probably did but just want to make sure)
I use requestAnimationFrame for the animation and rendering assets , I use setInterval for spawning enemies and power ups
https://madhur-acharya.github.io/ASTEROIDS-on-github-pages/
No, I learnt JavaScript through Edx, bit just the basics. This was like a hobby project
It's for pc okly
There is. It's even included in the OP. 
It took me 1 month to learn basic JavaScript, and another month to make the game. The main problem is figuring out how to implement basic physics in code.
You posted an hour and a half after [the current top post](https://www.reddit.com/r/javascript/comments/9i455b/why_is_%C3%9Ftouppercase_equal_to_ss/e6gpz2u/) explains why it is what it is. It's dumb to say "JavaScript sucks" in any context when people are looking for real answers, but it's especially dumb to say it when it isn't even one of the things JavaScript does badly. You can't call it "triggered" when you're _actually wrong_.
Interesting, where did I say it sucks?
That could work. But the main problem is synchronising all the different intervals.
&gt; You can't call it "triggered" when you're actually wrong. well, this is reddit, and not stack overflow /s
Or you can just go in the console and change the canvas size to fit your screen. The code is the canvas.js file. Easy fix.
Set canvas width to 400x400, instead of default. 
I definitely agree with this. ES6+ is very important, you’ll start to see the syntax in libraries and documentation, and you’ll be confused if you don’t have at least a passing understanding of it. Also, backend can be done in PHP, C#, etc. Consider something like Laravel or .NET Core if you’re more comfortable with those languages. And consider that front end JS is more portable than backend - every web site uses JS on front end, but back end is all over the place.
The moment when you name es2018 features "es6" 
&gt; How could I get access to a specific anchor that doesn't have a unique id or class. You'll have to use its unique location within the DOM tree, and use CSS selector with `querySelectorAll()` and/or `querySelector()`. e.g. an `a` element which is the second child element of a `div` element, and that `div` is the first child element of the container element. The CSS selector would be: .theContainer &gt; div:first-child &gt; a:nth-child(2)
Both `uppercase`/`lowercase` operation without locale are explicitly defined by Unicode standard in two files: * ftp://ftp.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt * ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt Uppercase `ẞ` has a standard lower case mapping to `ß` in `UnicodeData.txt`. 1E9E;LATIN CAPITAL LETTER SHARP S;Lu;0;L;;;;;N;;;;00DF; On the other hand, lower case `ß` does not have standard upper case mapping, it has a definition in `SpecialCasing.txt`. 00DF; 00DF; 0053 0073; 0053 0053; # LATIN SMALL LETTER SHARP S This says that `ß` becomes `Ss` in title case or `SS` full upper case. If you want this behavior to change, you probably need to German standard's body to lobby for change. 
There is no capital ß, dafuq?
‘waffen-ß’.toUppercase();
There is, look at the letters in the OP closely
Of course; I was just showing how I'd hack it from the developer console to beat the game. You left everything completely open to the console. I'd suggest at least wrapping your code in a closure, so variables can't be accessed from `window` quite so easily. 
There actually is, as of recently. It's ẞ. Look closely and you'll see that the ẞ is slightly pointed on top, as opposed to ß which is rounded.
Even if there is, it‘s not used in the german language.
Not sure, frontend masters has a number of courses for node too, but I haven't tried those yet
[It's a special case mapping by unicode](ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt): 00DF; 00DF; 0053 0073; 0053 0053; # LATIN SMALL LETTER SHARP S Last 2 (0053 0053) are for TitleCase and UpperCase. I think any language that uses unicode for their strings follow these casings.
`toLocaleUpperCase` adds locale context to the case mapping. There's no special casing for that code point for german locale as of UC 11.0. There's no special casings for german locale for that matter. Only `lt`, `az` and `tr` appear on `SpecialCasing.txt` with a conditional locale mapping.
I always found it weird that 'ß' is equivalent to 'ss' and not 'sz' since the actual name of the character is the Eszett.
Which versions of Python? In 3.6 it outputs SS. 
It works only for some videos. Major pop songs don't work at all :/
[https://github.com/tc39/proposal-class-public-fields](https://github.com/tc39/proposal-class-public-fields)
Done, added!
Hold the volume slider for 5 seconds, there's a surprise for you ;)
Hi /u/sketch_punk, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Some publishers disable the playback on embedded player/outside of YouTube on their videos. 
Damn.. I use Rey daily but I came across unplayable videos very few times, I mostly listen to Indian songs and few hit English songs :/ 
Great work man! The UI is beautiful and thanks for the details. I shall use those for my next react project. Thanks a lot man 👍😃
Thank you very much, hope they'll be of some help to you :)
There are two ligatures historically: S + Z and Long S + Short S. 
Your capturing of click and touch events is WAY too broadly scoped if you’re interfering with scrolling. 
That kanakakunnu in the back? 😁
I'm sorry, I didn't get you..
Yes, it does. 'GRASS'.toLower() does not equal 'graß.' It is a one-way conversion.
That picture of yours in GitHub? That's you in Kanakakunnu yeah?
&gt;Kanakakunnu Haha just googled it. No, That was in Concepcion (Chile).
Oh I'm so sorry, it's just that the background looks so similar! Anyway super cool project!
No problemo! Thank you very much :)
Thanks, that's exactly what I want to make. I would use that but a lot of the recent review say that the extension is broken. Also I still what to make my own extension to learn more about JavaScript.
Solid research there
I think I corrected everything, but if there's something wrong anywhere let me know 👮
Prefer not to sound like we're programming with a skin disease.
Yeah, makes sense. If you add a u in front of the string ( like this: `u'ß'.capitalize()`) to turn it into a Unicode string it would work the same as 3.6. 
Use node request module with cheerio. There isn’t a universal solution for all websites. You’ll need to investigate the network tab and see which calls the site is making. I’m working on a similar project. DM me if you need help. 
A bit out of topic, it never occured to me that \`toUpperCase\` is not guaranteed to preserve \`length\`. Great thing to know.
Ethanius answered the question you asked; but I think you're just going down the wrong path here. You don't need to treat touch and mouse input separately for basic interactivity. If you change the your viewport meta tag from &lt;meta name="viewport" ... user-scalable=0 ...&gt; to &lt;meta name="viewport" ... user-scalable=no ...&gt; The example page works it says it should. 
Ethanius answered the question you asked; but I think you're going down the wrong path here. You don't need to treat touch and mouse input separately for basic interactivity. If you change the your viewport meta tag from &lt;meta name="viewport" ... user-scalable=0 ...&gt; to &lt;meta name="viewport" ... user-scalable=no ...&gt; Zoom gestures are disabled, and the example page works it says it should.
Yet another example of why proper UTF support is hard
I’m on mobile and can barely see it, but I can see enough to know what is is. Obfuscated code + eval = malicious. Something is compromised. 
Thanks
Well, no. It is ES1, ES2, ES3, ES5, ES5.1, ES6 (ES2015), ES2016 (ES7), ES2017 (ES8), ES2018 (ES9).
Lol, why did you write this? 
&gt; when you name es2018 features "es6" Why did you write this? ES2018 ≠ ES6.
Actually ecmascript it is ecmascript, just try to use some google. 
And still, ES2018 ≠ ES6.
Wow, now we are name-calling? If you want to be respected in a discussion, get your facts straight. * ECMAScript Version 6 (also called ES6) was released in 2015, it is thus also called ES2015. * ECMAScript Version 9 (also called ES9) was released in 2018, it is thus also called ES2018. By pure logic, you are (or would be) able to infer that ES6 is different from ES2018. And even if "ecmascript 2099" was a real thing, nobody would be calling it "es6".
When posting a "suspicious file", do **not** put it on JSFiddle, or CodePen, or JSBin or any other place where code is expected to be **run**. Post it on a simpler, _non-active_ pastebin, gist, or similar place.
Yeah shitty websites don’t work. What “JavaScript solutions” don’t work ? I think you run into a wrong conclusions here
It was in a different file nur the result is the same
Most common one is "To check if the user is a mobile user, use if('ontouchstart' in document)" That get's lots of up votes.
My real web app uses more than basic interactivity. There's various swiping gestures and dragging items, as well as double tap and double click. When you tap without dragging, it also thinks you clicked there immediately after, which is bad for my web app in some cases. I'm wondering if it's a common solution to check the time of the click and ignore it if it was very soon after a tap, or if anyone else has this problem. I personally use a combination of clicks and taps on my touchscreen laptop, because I usually click but I like to scroll with my finger then tap sometimes.
You need to make the arc more arc-y, and solve the ik with a cos resolutor merged with a recursive palg 
LOL love the git comment on one of the last pushes &gt; please work
You don't have to install anything to use the newest versions of ES. There is ES7 already that brings some new features. You can just try to Google them.
That’s not true at all. It has for some time. 
ECMAScript (the specification that JavaScript implements) is releasing updates every year. There is even ES2018 (aka ES9) already.
which is?
I was gonna say the same thing. Late 90s, we were shown the ß but told it was falling out of favour. &amp;#x200B; Kinda funny how JS enforces that; I wonder what other little grammatical corrections it has up its sleeve? It's like a weird Easter Egg. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ttezel/twit/.../**twitter.js#L126-L134** (master → 8eec3c6)](https://github.com/ttezel/twit/blob/8eec3c672bba825c736ba93b74a445accd40f982/lib/twitter.js#L126-L134) * [ttezel/twit/.../**twitter.js#L85-L91** (master → 8eec3c6)](https://github.com/ttezel/twit/blob/8eec3c672bba825c736ba93b74a445accd40f982/lib/twitter.js#L85-L91) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e6hdf6v.)
 10 PRINT "ENTER YOUR LINE OF CODE" 20 READ $LINE 30 eval($LINE) 40 GOTO 10
For the record: https://github.com/matthewmueller/x-ray
I must try in with my next project
When you talk about JavaScript in the context of MEAN you could be talking about one or both of two completely different contexts, the A and the N, Angular and Node. ES6 features are actually surprisingly well supported in modern Node. I used it some time ago and it was pretty spotty, but these days it's reliable, especially for basic things like classes, arrow functions, keywords, etc. When you're talking on the frontend it's more complex than this. For a start, it depends what version of Angular you're talking about, it's a little ambiguous. Assuming you mean a current version of Angular like 6 (not Angular 1 aka AngularJS) things are a but muddy there too. Angular is most commonly programmed in TypeScript, rather than normal JavaScript. While I'm not interested in getting into a debate on the merits of typing JS, the point here is that TypeScript will **not** run natively in a browser, and will require a *transpilation* step to convert it. In principle ES6 code should run in most people's browser's without any form of conversion. But in practise, anything that uses modules that are imported/required are going to need to be "bundled" anyway, putting you into Webpack, Rollup, Parcel territory. I'll clarify that I'm not talking about "best practise" here, I'm saying that they just won't work. All modern frameworks trivialise this process of conversion with some sort of build tool. I couldn't more highly recommend Parcel, by the way. If you want to write ES6, it just converts it without any setup. TypeScript file? Converted. Sass? Compiled. A .vue file? Compiled. It's a really good tool for getting projects up and running quickly. I digress. The other question is about versions. Wording of these things is complex. A lot of the time when people are talking about "ES6" they mean anything ES6-style. This may or may not include features from ES7, etc. After ES6 the ECMAScript (where the ES comes from) association decided to go with year conventions, so ES6 was ES2015, for example. The goal was to prevent the massive sweeping change of ES5 -&gt; ES6, instead releasing a few new features a year. So when you start talking about "ES7" you're actually probably talking about ES6 plus a few features that may or may not be supported in whatever environment you're working on, or whatever babel setup you happen to have. (Babel is the most common tool for translating new Javascript back to a lowest common denominator for browsers.) ES2016 (ES7) added very few new features. One was `array.includes` which lets you more easily check the presence of an entry in an array. ES2017 added `Object.entries`, which returns an objects key/value pairs as an array - surprisingly useful. Another big feature is `async/await`, a pair of keywords that help to clean up and flatten out complex asynchronous code, and write it with the sort of syntax you'd expect to work. ES2018 adds Rest/Spread syntax which is some voodoo using the `...` syntax to assign or pass in multiple arguments. It's a bit hard to explain without a huge amount of scary depth. There are a bunch of future features too. These are in "proposals" in various stages. The stuff above has all gone through stage four. Others now that will almost certainly happen are things like pipeline operators that let you chain functions together (currently at stage 1), and the use of decorators at stage 2. 
Note that ẞ is a fairly recent addition (added to Unicode in 2008 / 5.1.0, but not officially adopted in German orthography until 2017). Not surprised if JS hasn't switched to it yet for compatibility reasons, especially as "SS" is still an accepted upper-case spelling of "ß" even under the new rule.
Not bad actually. You should probably write a Lille note about the controls. It took me a while before I figured it out.
SVG can definitely use CSS. SVG is the superior method to anything else.
I had a lot of fun writing interpreters and compilers when I first got into programming. You'll learn a lot. Good work.
There are some good tips in there. You've got a typo on the last line of your Conditional Assignment pic. It uses variable \`furitColor\` and I'm pretty sure that should be \`fruitName\` to make the example make sense. Also, I would highly encourage you to replace those images with code. For starters, no one with a sight disability can read your article. And I also couldn't copy / paste to discuss your example. &amp;#x200B; The very first \`array.includes\` example is clean looking and readable and I haven't thought of that one before. Good article.
There is a user agent that you can check for that.
disabled attribute should do the job on any standard input field
What? It totally depends on how ´that´ is structured, both instructions are valid.
Indeed! OP should read up on named exports vs. default exports.
I understand this. This is why this typo wastes so much of my time - the error message is not a syntax error.
I use a couple of snippets for this. The `imf` snippet is particularly handy, as by declaring the file first (`$1`), you get much better code completion what you're importing (`$2`). "Import from": { "prefix": "imf", "body": [ "import { $2 } from '$1'", ], "description": "Import from" }, "Import default": { "prefix": "imd", "body": [ "import $2 from '$1'", ], "description": "Import default from" }
No it's not. I have been doing web dev since late 90's and I'm telling you, HTML+CSS is much more powerful for things like bar charts than SVG, which is the best for line charts and such charts which are not a bunch of horizontal and vertical lines line bar charts. and I had done many web components because, including my own charts library int he past (many years ago) but that code it not good anymore since it was heavily built for jQuery and I don't want to spend time re-making it. SVG can use some primitive CSS but it has insane limitations, for example, simply making multiline text labels is a plain in the.. Also animation done with very simple CSS are extremely difficult in SVG, if even possible. not to mention you cannot use Flexbox and many other properties. I have been working with SVG for years and i saw all the pitfalls it can lead to, and there are plently. 
An esset capitalized is SS there is nothing you can do it’s german language
This is really smart! I knew someone would have a clever solution for this - which is why I made the post. How do I implement this? What is a snippet exactly?
I have a very similar level of experience you're claiming to have and can tell you you're definitely incorrect about everything you said. I'm not interested in arguing though so I'll just tell you you're wrong and if you want to know why I'd suggest you relearn SVG and CSS.
Snippets are small pieces of code, that your text editor will have shortcuts for inserting. The above is how you define [snippets for vscode](https://code.visualstudio.com/docs/editor/userdefinedsnippets). Other editors have different ways of defining them. The prefix is the shortcut, so if i type `imf` and press `tab`, it will auto-complete to the code in the body. The dollar variables say where to put the cursor. So after inserting the snippet, the cursor will be at `$1`, letting me type the file path- then another `tab` will move the cursor to `$2` letting me type the import name. 
Are these vs code snippets?
Thanks a lot! vscode is my editor so I'll definitely implement this one
Oh nice, didn’t know that
How does one learn about writing interpreters and compilers? I mostly struggle with thinking up a proper method for parsing code, lexical analysis basically. 
FreeCodeCamp is great. https://www.freecodecamp.org/ Also https://nodeschool.io/ provides a bunch of interactive modules that you clone from github. Powerfully good stuff.
Huh?
Yep
Proxy class But whatever piece of code that adds the score can do that too
On the backend all you have to support is Node, and Node supports pretty much everything except `import` / `export` statements. On the front-end you have to worry about browser support, which will vary from feature to feature. For `class` you are probably fine, unless you need to support IE. Though a library like webpack can transpile your code into something older if need be. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Browser_compatibility
I created this plugin, which currently supports [JavaScript](https://marketplace.visualstudio.com/items?itemName=edb.vandelay-js) and [Python](https://marketplace.visualstudio.com/items?itemName=edb.vandelay-py). I know VS Code apparently has some auto importing functionality if you are using Typescript, and they seem to be trying to bring this to non-Typescript, but I haven't been able to get it to work at all. Additionally, these plugins let you fully customize how the imports get written to the file, modifying import paths, names, sorting relative to other imports, etc. The Python plugin even lets you "group" imports together with extra line breaks. The JavaScript version supports Flow types. I built this plugin so that each language is itself a plugin to the core package. I'm not currently planning on building additional language plugins, but would be happy to flesh out some documentation on how to do so if anyone is interested. Let me know what you think!
Hello, I think the solution is really easy for that task. I fastly wrote concept with logic to use in order to achieve your goals. I hope it could help you. [https://codepen.io/donfear/pen/gdyjLL](https://codepen.io/donfear/pen/gdyjLL)
There's a tutorial screen you have to click "start game" on before you can play it, I'm guessing you didn't read the text there, heh. 
I found this out the hard way some years ago (in Java). I don't remember the context, but I had some code that assumed the uppercase of a string was the same length as the original string, and this character broke that assumption.
Congrats for your effort !
If you have been doing it for that long you would know what to use have your own preference and also you would know how to do it yourself 
Go for Node! You'll reinforce JS fundamentals (since Node is just JS), you'll learn about the back end, and about how the front end/back end interact. Start with Express, spin up a basic server and serve a basic website on localhost. Then add features to it. Figure out how to reach it on your phone. Hit an external API (Twitter, YouTube, DarkSky, etc) to get some data and make it interactive on the front end. [nodeschool.com](https://nodeschool.com) is a great resource, and will get you comfortable with the command line and npm. React/Vue/Angular are great, but they're all much easier to learn after you have a really solid JS foundation. Also, they're good for building a medium-to-large website, but if you're just building projects for yourself you can do a lot with vanilla JS.
Things may have advanced since I was doing, but back then you would learn lex and yacc and then look at examples of existing code to figure out how to do things. I've never read "[Structure and Interpretation of Computer Programs](https://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262011530/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1537715703&amp;sr=1-3&amp;keywords=compilers)" (also known as "The Wizard Book"), but I have seen it get rave reviews decades after decade and it is still a popular book after more than 30 years so I would guess that would be a good one to start with if you want some more in-depth reading.
Actually, the server sends a push promise with the assets it intends to send, and the client can go "no, I already have that one, don't push it" 
I did read the text. It didn't say how to control the objects. You use the mouse or touch screen on phones to click and the drag the objects away. This was not mentioned.
I don't think i am using Babel, i also never used it. I heard that it compiles JavaScript versions for you etc. At the moment i only installed Node/Mongo/Express.
Ty, i will have to do that i think. Webpack is the same as Babel? The only thing it does is, looking for what JavaScript version it should compile to?
I never used TypeScript yet. What is it mainly used for? Anyways, i am still learning basic MEAN (Node and Angular). I will first start learning the basic things. The book, MEAN in action will talk about what i need to use when i start with Angular i think. Thanks for advising me already.
I haven't looked but I think I know what it's about. When you click an html element then it activates the `click` event for it and then for all elements underneath, you can prevent that chain using a function called `preventDefault()` You can use it like that: `myBtn.addEventListener("click", event =&gt; { event.preventDefault() })` Assuming that myBtn is the button on top
Yeah i heard about it that IE doesn't support the class yet. Does the browser break when i open IE while using something like class?
I'm on mobile, so can't easily double check my own sanity, but [this](https://i.imgur.com/pYt1Nqb.png) doesn't look right to me. Instead of `[1]`, I'd expect `{ a: 1 }`.
They implemented a BASIC interpreter in 4 lines of code. 
 Compilers and Interpreters are usually written using a layers pattern: - Lexical analyzer layer (lexer) - Syntax analyzer layer (parser) - Semantic analyzer layer - Optimization layer - Code generation layer in a compiler or an execution layer in an interpreter. The lexer takes the code as input and returns a list of tokens as output. A token can be thought as the smallest pieces in which you can divide source code. For example, you could represent `let x = y + 1` with the tokens `&lt;KEYWORD(let)&gt;`, `&lt;IDENTIFIER(x)&gt;`, `&lt;EQUAL&gt;`, `&lt;IDENTIFIER(y)&gt;`, `&lt;OPERATOR(+)&gt;` and `&lt;CONSTANT(1)&gt;`. This division is not the same in every compiler/interpreter. For example, a C compiler would think let is a identifier too. You should divide the code in tokens in the way that better suits your language. This is usually done with automatons or a big if/else structure using regular expressions. There are tools (Lex for C and Alex for Haskell, for example) that, given a list of regular expressions and tokens, generate the code for you. You can also write the code by hand ( like [this one](https://github.com/marcobambini/gravity/blob/master/src/compiler/gravity_lexer.c) or [this one](https://github.com/frangaren/lambda-calculus/blob/master/src/lexer.c) ). Search automata theory for more on this topic. The parser takes the list of tokens and generates an AST (abstract syntax tree) representation of your code. This can be done with tools writing the grammars of your code or by hand. Among these tools are Yacc for C and Happy for Haskell. A example of parser written by hand using the recursive descent algorithm is [this](https://github.com/frangaren/lambda-calculus/blob/master/src/parser.c). There are tons of parsing algorithms out there, you don't have to come up with one on your own. Nowadays the most used is recursive descent. Search recursive descent or formal language grammars for more on this topic. I don't know too much about the last 3 layers and I'm running out of time so I can only give you a short description of them. The semantic analyzer does type checking, type inference, variable name resolution and that kind of things. The optimization layer usually is mixed with the code generation because it can be plataform dependent. Using 32bits or 64bits ints is an example of optimization. For the code generation or execution layer look at LLVM or translate your AST to other language (JavaScript, C...). You don't want to generate machine code on your own. If you want to know more or you want me to explain this more thoroughly contact me.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [frangaren/lambda-calculus/.../**parser.c** (master → a25727d)](https://github.com/frangaren/lambda-calculus/blob/a25727d4d2cbd0e2bff0ae8d9ecce2dfd392563d/src/parser.c) * [frangaren/lambda-calculus/.../**lexer.c** (master → a25727d)](https://github.com/frangaren/lambda-calculus/blob/a25727d4d2cbd0e2bff0ae8d9ecce2dfd392563d/src/lexer.c) * [marcobambini/gravity/.../**gravity_lexer.c** (master → 1b7e67d)](https://github.com/marcobambini/gravity/blob/1b7e67d27d9ba7fd8bb38e797825ddb3559fb799/src/compiler/gravity_lexer.c) ---- 
I created a tool to transform TypeScript API into Swagger API documentation and Express endpoints with a little help from JSDoc https://www.npmjs.com/package/ts2swagger
No, actually webpack is a module bundler, which essentially means you take many javascript files and webpack turns them into one. This allows you to organize your project neatly into many files and treat them as modules in a way basic JavaScript wouldn't allow you to. Babel in this case is one step of the webpack build process. It turns the new JavaScript expressions into ones that your old browsers will also understand
Hi /u/mikeredson, please refrain from personal attacks. Thanks.
Hi /u/AspiringGuru, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
This is awesome! Great job porting the whole thing to C++. Are you planning to port [the bytecode VM](http://craftinginterpreters.com/a-bytecode-virtual-machine.html) too?
For me the [YDKJS](https://github.com/getify/You-Dont-Know-JS) book series has been the most helpful. [This program curricula](https://github.com/P1xt/p1xt-guides/blob/master/job-ready-javascript-edition-2.0.md) has also been incredibly helpful in answering the question on what I should study and in what order.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [P1xt/p1xt-guides/.../**job-ready-javascript-edition-2.0.md** (master → c2ab022)](https://github.com/P1xt/p1xt-guides/blob/c2ab022dd700dd5b81bc627416c4bb8a29b6b7e0/job-ready-javascript-edition-2.0.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e6huoun.)
Yeah I ran into this and basically had to wrap my use of the callback method in my own Promise. I dont see what this has to do with CORS issue though. Do I have to return a Promise to the client? Why can I set res to a data object before I call Twit but not after?
Could you add a little bit about the performance impact of array instantiation and `includes` vs chaining a bunch of `||` ors?
Well, it's hard to guess what exactly is happening without seeing what is being returned and how, but my guess is that if... - you pass a callback, which does _not_ write the response, and - try to write that response on the resolution of the promise, then, as the promise does _not_ get resolved, you won't be doing whatever you may think you may be doing, and the response may fail. Again, it is mostly a _guess_, but given the information above I don't think I can give you anything more than a guess.
Thank you :)
I love javascript.info and recommend it for any friends that are learning. I do wish it got a bit more into destructuring though.
Unless you're developing something like D3.js, I really think developers should stop trying to optimize for performance but instead focus on code readability. JS is blazing fast today without needing to do backward things to optimize for performance, unless you are doing something wrong.
Did you learn coding from Codeacademy? 
Huh?
It’s supported by all the servers and browsers. Go forth and implement! 
Hitting twitters endpoint has nothing to do with whatever you’re doing with your cors settings. What you’re doing is hitting twitter from your front end, which obviously gives you cors issues. Get the tweets from your backend and relay the result to your front end. 
No, my front end his my Express app. The express app (the backend) is calling Twitter
Cached web app hosted by google. 
Ah, now I understand what you meant. That’s one advantage of TypeScript and Flow: you get errors during editing if you do this wrong.
Comparing JS to Java is an instant fail. 
Nope, no way you’re getting cors issues from your backend. Check your code
Ah that's pretty cool. I'm still a caveman using old technology.
What theme??
Yup, I am. I'm also planning to do the extra challenges at the end of each chapter. For now I've made an [issue](https://github.com/Jeff-Mott-OR/cpplox/issues) for each challenge.
I don't think you're understanding me. Im getting the cors error on the front end, but the front end is communicating with my backend, not Twitter. When you say "Get the tweets from your backend and relay the result to your front end", thats already what I'm trying to do here.
Npm is a package manager, the equivalent of pip in Python.
read to read the line, eval to run the line. Closer to a REPL (Read, Eval, Print, Loop), but meh.
The (also non-JavaScript) [c4 &amp; c4x86](https://github.com/EarlGray/c4) projects may be of interest to you. `c4 - C in four functions` and `c4x86 - JIT compiler for x86 in 86 lines` Stuff like this makes me wish I understood C/C++ &amp; ASM better.
If you're ever doing 1 or 2 to avoid a simple 2 or 3 item conditional, I'm going to question your sanity. Under "don't nest deep", that is a straight up violation of the general school of thought that you should only return once from a function. Which is still a very valid way of doing things, and regardless of what new people think, is a great way to avoid a lot of problems if your functions only ever return at the bottom. If you have a function that has 2, 3, 4, or more, return points, and the output of that function needs to change for some reason, you have more points that have to be updated. On top of that, your second function isn't really understandable as to what is expected of it. 
If constructing an array and checking that something is in it is clearer to you, in addition to not caring in the slightest about memory and time usage, than a simple 2 or 3 piece conditional, I hope to never have to work with you. 
&gt;I never used TypeScript yet. What is it mainly used for? Typescript lets you add type annotations to your code and strips then in a compilation step. I wouldn't advise it to beginners until they're comfortable with "regular" JS. &gt;does JavaScript know how to read ES5/ES6/ES7 etc. by default? It's important to note that JavaScript is a language, and what language features are supported depends on the runtime. Node is a JavaScript runtime that supports various syntactical features (newer features won't work in older Node versions) and APIs depending on the version (Node has APIs that let you access the filesystem and run http servers), browsers are another runtime that generally support fewer syntactical features and a different set of APIs (like querying/updating the DOM). Because the browser is run and controlled by the user you have no control over their runtime or access to know what features it supports, so it's generally recommended to compile your code to very old versions of the language to support the most amount of users. Babel is generally the recommended tool for this, but TypeScript can also do it.
Holy shit thank you!!!!!!! I’ve literally spent a solid 5 hours fiddling with plugins instead of working trying to get something like this to work. Are there instructions anywhere on how to use it?? In the GIF on the README you spend like 99% of the time creating the files on 2x speed and then wiz past the part that actually shows the usage of the plugin so fast that you can’t actually see what’s going on. 
How bout this? `var listener = function(tracked,fun){ Var items = [tracked]; Return function(id,val){ if(!items.infexOf(id){ items.push(document.getElementById(id));} items[id].value +=val; fun(id); } //call With var updater = listener(document.getElementById(id),checkscore); var elem =document.getElementById(btnid); elem.addeventlistener('onclick',updater(btnid,1)) ` Replace value with innertext if needed.
Check out the readme for the JS plugin: [https://github.com/ericbiewener/vscode-vandelay-js](https://github.com/ericbiewener/vscode-vandelay-js)
Check out the readme for the JS plugin: [https://github.com/ericbiewener/vscode-vandelay-js](https://github.com/ericbiewener/vscode-vandelay-js)
[Ayu-mirage](https://github.com/teabyii/vscode-ayu) it was updated some time back, so the actual theme looks a bit different now.
There’s nothing particular non-sensical about it, though it can be improved. Change it from an array to a set, define it at the top level of the module, give it a descriptive name, and now you have a pattern that’s easily reusable, extendable, and more readable. And if you ever need to add conditions you just add members to the set and it’s updated everywhere you use it. A few cases in an if statement is fine, but IMO going over a few starts to get hard to read.
Set is even worse -- since there's no way to syntactically declare a Set (or a Map), you're forced to create some other iterable first, then create a Set from that, which then allows the original iterable to free, and now you've got a bunch of garbage that the interpreter has to clean up later. Otherwise, you're pretty much spot on, and agreeing with what i said -- a two or 3 case if or ternary assignment is almost always going to convey your meaning and intent more concisely than constructing a list at the top, and checking that something is in that list. 
No idea! Going to try it soon, I'll write my findings.
Good luck! :D
That’s why I suggested defining it at the top level of the module as a constant so that things are only created once and then reused every single time. Testing set membership is super fast.
I think you’re missing that if you have a module-level constant it won’t be garbage collected because there is always a reference to it. You pay the startup penalty only once and get everything else for free.
Yes I know how to construct a set. If you have something like - ` const ACCEPTABLE_FRUITS = new Set([ ... ]); module.exports = { isAcceptable: (fruit) =&gt; ACCEPTABLE_FRUITS.contains(fruit); }; ` ACCEPTABLE_FRUITS will not be garbage collected and you only construct the set one time. So the penalty for constructing that set only gets paid once.
The array that you created the Set from is garbage collected, though. The Set is not. And it's the initial garbage collection that kills. :-) 
This is a constant static set. It shouldn’t be constructed on the fly because there’s no need to do that.
I'd be very interested in what you find out
Right, that’s why I said you “pay the penalty” only once and not for the rest of the lifecycle of your application.
There is no syntax for creating a constant, static set. There is only a way to construct a set from an iterable. 
But fair point, I almost never have to worry about initial GC pauses 
Bless you
I totally agree with the general principle that readability should not be sacrificed for efficiency, but I also think that specifically altering certain things to become poison for the browser, leads us to things like the nightmare that is newsweek.com right now. 
Hi guys I just wanted to share my side project I've been working on these days, it's open source and any ideas or contributions are welcome!
Also, you're totally right on the creation -- if I were going to make a long lookup list, and I weren't doing it on a system that has very low ram/cpu, I'd almost definitely do it with a Map. I've rarely if ever had to do an operation like this with a set, though. 
Nice read. Any good examples of when one would want to use \`reduceRight\`?
What font are you using in the example GIF [here](https://raw.githubusercontent.com/ericbiewener/vscode-vandelay-js/master/artwork/animation.gif)?
If you were iterating over a `nodeList` it could be useful, since the size could change during iteration.
This looks neat.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [benmosher/eslint-plugin-import/.../**no-unresolved.md** (master → e8954db)](https://github.com/benmosher/eslint-plugin-import/blob/e8954dbaacd9590a8c46e3fc8ba31056576302cd/docs/rules/no-unresolved.md) ---- 
It was actually a putsch.
Stacks - last in first out. 
It's not true at all, the 'ß' is widely used in everyday language.
Any idea if for the typescript import you can provide some kind of sort order or grouping?
If you have set the `height` value to `100%` for `body` and `html` that is known to cause problems in Safari. Try setting the `min-height` instead.
Your array contains the strings, you'd want those to be your values. Which you can define beforehand. Such as below function makeChoice() { var choice1 = document.getElementById("choice1").value; var choice2 = document.getElementById("choice2").value; var choice3 = document.getElementById("choice3").value; var choice4 = document.getElementById("choice4").value; var myArray = new Array(choice1, choice2, choice3, choice4); var random = myArray[Math.floor(Math.random() * myArray.length)]; document.getElementById("decision").innerHTML = random; } Live example here: http://jsbin.com/zulirecabi/edit?html,js,output
Reminds me of AWS docs
&gt; one of the things I've been missing from Webstorm But Webstorm has this already https://i.imgur.com/UZiZHXl.png
Dear God, the AWS docs are cryptic until you figure out what the hell you're doing.. and then you don't really need the docs. 
Ugh just use RxJS
Semicolons feel like a period in a sentence to me. Natural.
Ayu Mirage
reduceRight is reduceLeft
ESLint can also do this.
Which is exactly his point. It’s one of the features he’s missing since switching to vscode.
Typescript?
That's super cool. Where did you source the images?
&gt; Also by the 90s you mean 3 years ago when you posted about a suduko thing you taught yourself to code by making. That's disingenuous as all hell, dude. They said it was specifically to improve their JS skills, not to learn how to code from scratch, and even at that they said they made it in 2011. So that would be seven years ago, not three.
Thank you! I took the vast majority from here: https://www.spriters-resource.com it's a good place to find videogame's graphic resources 😃
Magic? I don't like magic in my code.
Doesn't help that the UI is horrible too..
PlayCanvas was one I heard of a while back, not sure how it's doing nowadays.
&gt;I have updated the README for the core extension to more clearly point to the language-specific documentation. Was this what you found confusing, or do you find the documentation for the language-specific plugins ([example](https://github.com/ericbiewener/vscode-vandelay-js)) confusing? The documentation certainly isn't short and I'd love to find ways to make it more approachable. I've added [an example](https://github.com/ericbiewener/vscode-vandelay-js#configuration-vandelay-jsjs) to the README of how simple the configuration file can be. Hopefully that helps make the length of the documentation a bit less scary :)
There's an important caveat about using object literals for doing lookups: const mapping = { ... }; const value = mapping[input] || default; Has input been sanitized or is it straight from the user? If the latter, what if the user gives the color `"__proto__"`, `"toString"` etc. Depending on what the code does with the return value, this could lead to bad behavior. If you insist on doing this, you should at least change that to: const value = mapping.hasOwnProperty(input) &amp;&amp; mapping[input] || default;
\-1 is not falsey. You need to do \`if (pill.indexOf('blue') &gt; -1 )\`
&gt; -1 is not a falsy value &amp;#x200B; Yep, I figured that out after about 30 minutes of isolating the bug in about 1000 lines of JS. Good times!
I've slowed it down, thanks for the feedback! In regards to difficulty, it really depends on what you want your extension to do. VS Code's API is excellent -- more powerful than Atom's and far clearer than Sublime's. The extension development environment is also very helpful. ?You can set breakpoints and save different test workspace configurations for easily running your code against different projects. It also provides solid integration testing support. The parts that were hard about my extension were parts that would have been hard regardless of the editor. There are, of course, parts of the API that I did not have to interact with. Perhaps you'd find areas that are overly confusing or underdeveloped.
While RxJS is definitely not something you should add lightly to big projects, I agree with the sentiment. If you need to do asynchronous work that is so complex that the async/await pattern isn't enough for you, you should probably use something like RxJS which will also help you to debug the messes you can create with it.
I've slowed it down, and clarified that the documentation for the JavaScript-specific plugin [lives in a separate repo](https://github.com/ericbiewener/vscode-vandelay-js), as noisyislazy kindly pointed out.
That wouldn't be too hard since the syntax is so similar . I don't currently use Typescript, so I didn't build support for that. I figured I'd see if this extension gains traction before adding in typescript support. 
Destructured imports are combined into one line, but not sure about sort order.
I'm good on that one... 🤨 Trying to figure out how to use document.write in firefox was bad enough. Tip: don't.
Thanks!!
Oh cool we’re arguing about this again. 
Please share all the code. It’s hard to give advice without seeing all the code. 
Okay, I didn’t want to just post a block of code, some subreddits hate that.. one sec
&gt; Any idea if for the typescript import you can provide some kind of sort order or grouping? tslint `ordered-imports` + vscode `tslint.autoFixOnSave`
Hello, everything works fine. for(var i = 0; i &lt; 100; i++) { console.log(collatz(i)); } take a look at this part, your for loop has a mistake.
Idk about calling npm serve, because that also spins up a dev server. But if you just wanna do transpiling then you can just add another npm script that runs both server and front end build scripts. 
I should’ve updated that too... I have the forloop correct in my code, I just didn’t want to type out a bunch of code at first if it was going to get deleted... could it be if I do For(var i = 0; i &lt; 999; i++){ list.push(collatz(i)); } This is how I’m calling the function in my code... as you can see from the output though it like skips certain numbers 
I never though about that... so that would be `npm run serve &amp;&amp; babel or parcel whatever`? That would work? Huh...
I'm surprised to be the first who says this, but the name is brilliant. "He's an importer/exporter, OK?!" :D I'll be giving this a serious shot. Thank you for a job well done, will most definitely contribute myself. :)
If you're going to use \`indexOf\` in a conditional, you need to check if its result is \`-1\`: \`pill.indexOf("blue") !== -1\`.
Yep. I do this often enough. Or just write it as two lines, to make the most readable code possible
You run scripts in a sequence by ending the previous with semicolon. But in this case "npm run serve" wont end so you'd need to run the other first. But since serve wont serve the server code you'll need another terminal window to run that code anyway
Using your `collatz` function as posted and a basic for loop, the reported behavior does not occur: https://jsbin.com/canulofeca/edit?js,console I added the `console.assert` for easy skimming – if it returned just a plain number or string at some point then you could easily spot the red text in the output. Moving forward, post your entire code (at more than ~20 or so lines it's nice to use something like a gist or other paste-type site), and make sure you’re copy/pasting the exact code, not editorializing it.
You can make an object off of elements in an array using object destructuring. It'll go in order, which is why line 4 evaluates to `1`, as that value was given to `a`, and `b` has a default value of `10` and no second array value to overwrite the default.
Hey, I just tried to break your code, but it seems to be working fine. you could try to map it too see where problem start, because I am getting all results; var arr = []; for(var i = 0; i &lt; 100; i++) { arr.push(collatz(i)); } console.log(arr); var mapping = arr.map((item) =&gt; { console.log(`input: ${item.input}, length: ${item.length}, largest: ${item.largest}`); }); &amp;#x200B;
It seems I’m the only one having this issue haha go figure right? I think I’m going to delete the post since there doesn’t seem to be a problem with the code for anyone else 
Babylon.js
Thank you for asking the same question I had :)
&gt;Please, tell me, am I stuck in a situation where my "bad html structure" is fighting against me? Or is .onscroll just ridiculously hard to get working on all browsers or is it ridiculously broken? I'm definitely not the world's best JS coder (far from it) but I just gone done dealing something I think is similar. You have to this off the viewport. My final version did not use jquery. None of the scroll events are worth a crap other than triggering your code that's based off the viewport. I hope that helps.
[removed]
Were you doing that inside the `&lt;head&gt;` section maybe? &gt; [Note that writing balanced tags may cause other tags to be inferred in a way that makes the write unbalanced. E.g. `&lt;script&gt;document.write("&lt;div&gt;&lt;/div&gt;");&lt;/script&gt;` inside the headelement will be interpreted as `&lt;script&gt;document.write("&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;/div&gt;");&lt;/script&gt;` which is unbalanced.](http://Optimizing_your_pages_for_speculative_parsing)
I didnt say he did it 3 years ago I said he posted it 3 years ago. 
Working with webpack aliases?
WOW. just wow... All I've asked if somebody knows a bar chart made from HTML&amp;CSS because I couldn't find any Googling for some time, and I get attacked here after honestly asking politely. You could have said "no, I don't know any". What me and the other guy in the comments were arguing about is between us, and I still think he is wrong, and he thinks he knows better. Why did you feel the need to attack me so hard? why are you acting in such a way? What's me posting some years ago a game I've made has to do with ANYTHING. I didn't even know Reddit exist until the last recent years. 
Hi /u/MrMe1991, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Look, SVG is really bad for the simple reason that you cannot tame it, it's a black box. I get the package installed and I use the package in REACT, I cannot change the source code (so I will be in sync with the repo) and so I cannot customize with with CSS. Just like I said, you cannot make any rounded corners to whatever your want, space things around, even multiline text support might be difficult if it hasn't been done properly already in the SVG elements, so I am asking you, how FLEXIBLE can it be if I cannot change the source code and I cannot control that black-box via CSS? BUT, if that chart component NPM package was a based on HTML then I would have a huge degree of control from outside without touching the source code, and that is why I've said that HTML is superior. While with SVG you can do wonders, you MUST do it inside and not outside. and NPM packages must not be touched inside, so you are left only with what flexibility the author's had put in.
I think he meant that TypeScript already does this, which it is true and it is done automatically as you write code, or using CTRL + . so you can choose the right import in case the name of the object is the same as other packages ñ/libraries/classes.
softlogic systems offers you the best angularjs training in chennai
I'm working on finishing my fake sample data extender thingy: [https://github.com/FrediBach/Blowson](https://github.com/FrediBach/Blowson) If you have any wishes for additional features, let me know. After R1 I mainly want to improve code quality, speed and small details.
It is similar (but a lot smaller) to the improvement of document.querySelector =&gt; $. Yes, you could use RxJS, but there are many small projects that might benefit quite a lot from cleaner syntax. And if you are a library creator it doesn't even hurt, it's Promise-compatible.
Because writing the extension is fun, wheras writing docs is not.
This looks real nice! There is a bunch of data grid libraries by now, but the great ones are commercial. I've run into issues with every last one of the free ones that I've tried. I took a good look at the documentation and your library seems to check pretty much all the boxes. One major feature that is missing is tree grid support (for recursive data). Another feature that I would like to see is unrestricted table height, especially with virtualization (so the table doesn't have its own scroll bar, but instead relies on the parent window's scroll bar. This works much better on mobile devices that having nested scrollable areas on the page). It would be also nice if there was a React binding. All of the free React data grid components I could find are rather basic, so there is a gap in the market. I could maybe help with that, but I've never wrapped a component this complex before, so it might be a bit over my head. Speaking of React, I am not a fan of your use of "Virtual DOM". That term means a specific thing and I am quite sure your use is not it. I found it quite confusing initially, looking for connections to React and not finding any. "Row virtualization" or "virtual rows" or something like that would be less confusing. BTW, a few of the links on the "[Lifecycle](http://tabulator.info/docs/4.0/lifecycle)" page are broken.
Google that exact phrase 
Oops I'm a dummy, thanks for clearing that up
[removed]
I really like this, love the simple transitions on all the images and works great on mobile going to look into the code later!
Not understanding how something works != lying RTFM
lol no. Just use the std lib.
Thnks...i cnt get a one line description like this on google...👍🏼
Hey Klaxxon, &amp;#x200B; Thanks for the feedback, &amp;#x200B; The table dosn't have to have a specific height to use virtualisation, it just has to have a height, so you can put that in a container that is resized using flex or a css calc and just set the table height to 100%. &amp;#x200B; As it happens reactive data bindings are on the road map for later this year so watch this space :) &amp;#x200B; Thanks for the head-sup about the broken links on the life-cycle page, i will get those fixed this eve.
I'm still on mobile, so typing JavaScript is a pain, but I couldn't get what you're describing to work. Even so, why not use array destructuring to demonstrate defaults: `const [ a = 5, b = 10 ] = [1];` If you really wanted to, I think you could do it using object destructing: `const { 0:a = 5,1:b = 10 } = [1];` But why would you when array destructing is basically syntactic sugar for that.
By tree grid, I mean something like [this](http://khan4019.github.io/tree-grid-directive/test/treeGrid.html). In this scenario, the child rows are still part of the same table and share the same columns (they are generally the same data), but the first column is generally offset a bit for each nesting levely (and there is usually a collapsing feature too).
+1 for: &gt; It is recommended to always explicitly specify semicolon as a good coding practice. "Look ma, I can do JS without semicolons" is the most ridiculous way of trying to be more productive. Like going out without your pants on cause "the time" and "I cannot into ironing".
Creating a new row results in all tds with empty cells having a title="undefined"
MIT License
If you are having issues please make a post on stack overflow or the GitHub issues page and someone will be able to hep you out If you post a copy of your constructor object they will be able to tell you whats up.
Dude, SVG is a language like HTML or CSS. It isn't a package and you can definitely modify the source code. Just admit you have no idea what you're doing, then go back and learn SVG.
Its on your landing page, hence :) [https://i.imgur.com/9Sz4OJr.png](https://i.imgur.com/9Sz4OJr.png)
Ahhhh, THanks for pointing that out, i will get that fixed this eve :D
Does it support commonjs? Or just es modules?
I agree. Learning vanilla JS is crucially important in understanding the use cases of JS. Too many people throw in a framework, start making websites and when something breaks or misbehaves, they don't understand why. This puts them at a disadvantage when putting things together. Also, framework adds bloat. Without understanding JS, you won't understand WHY you need X or Y framework to do the job. 
First of all a very nice article indeed. There's another little typo in the comment over at the 'Default values for properties inside objects' section. The console.log(b); comment says 'bi' instead of 'b'.
[removed]
It doesn't seem to support non-imported React components
This can normally be delivered via sort and a parentId / indent level with a custom renderer for the first column (for most table implementations) - gets more complex when you want to collapse parent rows etc, which makes it hard to deliver out of the box, UX often is very different I terms of expected behaviour 
This article actually got one of the rules wrong. &gt; A semicolon is inserted when an offending token is encountered and the token is }. // Actual source if (myCondition) { result = myVar1 + myVar 2 } // After ASI if (myCondition) { result = myVar1 + myVar 2; } This falls down to the #1 rule because there's a line terminator in between. That specific rule the article is trying to explain is when there's NO line terminator and a brace right after that. In other words: //Before ASI { someStatement } //After ASI { someStatement; } So basically ASI puts down semicolons for one liners.
Maybe this https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload?
It should work in all major frameworks. if you are looking for reactive data binding this is on the roadmap for release in the next 6 months
great question! i just started javascript learning in a bootcamp and it seems like its going to be the most difficult part for me. I'll start reading those resources later today. Hope to find more on this thread. 
What framework in **Java** did you use to create your "Java web start application"? &amp;#x200B; That framework may have a way to listen on the "close" button for the window. However, that method still won't be able to figure out if the process is terminated, so its a little spotty. There's no real reliable way to listen on the termination of a process in Windows or Linux as far as I know without spawning another process to do so (not in Java anymore, you'd need C/C++ for that probably). &amp;#x200B; Honestly, I wouldn't listen for the closing of an app to trigger a method, if you want to "autosave", I'd do a periodic save every X seconds/minutes combined with a manual save for the user.
\* scoffing noise &amp;#x200B; real programmer use paper and ink and invent algorithms without any others to base it on for theoretical mechanical computers that aren't made until a century later &amp;#x200B; my point is Ada Lovelace is the only real programmer