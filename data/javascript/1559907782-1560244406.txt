No exceptions?
Damn, was thinking of writing my first article with them. What's a good alternative?
Write a regex for that search&amp;replace and you can selectively replace only the valid instances, though it's a lot easier to do it for \`\`\`\[key\]: val\`\`\` than to \`\`\`key = val\`\`\`
We are already planning to use typescript for at least so of the front end. Do you have any examples of translating the API endpoint response schemas? Thanks for the suggestion!
That's an idea. Our original thought was to generate it from the javascript project since it's what'll be using it. I found it pretty simple to setup a webapp plugin to monitor our backend "models" folder and create a js counterpart when a new file is added or changed. However, I got kind of stuck with the need to traverse the model superclasses to be sure I am getting every property.
It's a footgun, but there's no good alternatives that aren't error-prone either. top level await is also a very important feature for \`\`\`await import();\`\`\`
I just need tech people as my target audience for this survey. I am sorry if you find this inappropriate!
Hi, here is the complete encrypted code [https://pastebin.com/SnjGkW3D](https://pastebin.com/SnjGkW3D) I use beautifier to decode it, but some of them still encrypted.
Here is the encrypted code, [https://pastebin.com/SnjGkW3D](https://pastebin.com/SnjGkW3D)
I appreciate the comment But I beleive that the article is not about "The ways you must use map" rather it's about the different use cases you can have for it. Believe me lots of people have gotten one or two things to know more about map reading the article. &amp;#x200B; Looking at it map itself has not defined use case, as with so many other ES6 array methods, as you continue programming, you continue to get more enlightened and discover more use cases.
Optional chaining isn't that much like `try`. It's only checking that the object reference is valid. The reference in memory to that `bar` object is exactly what the parenthetical expression coughs up. This is correct behavior.
As the originator of the 'top level await is a footgun' meme, I feel obliged to share my updated thoughts on the matter [https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221#edit--february-2019](https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221#edit--february-2019)
Nothing there is encrypted. I can see where you managed to get that code piece though. This is what it comes back to: https://pastebin.com/V4FpMQQG I changed the "eval" to "console.log" and just ran it. Then I ran the output through jsnice.
Try r/learnjavascript.
ok . did still waiting for an answer [How can I get a value from inside a function using Java script? : learnjavascript](https://www.reddit.com/r/learnjavascript/comments/bxtza7/how_can_i_get_a_value_from_inside_a_function/)
Try some more
Exactly. Not being able to \`await\` without wrapping it in an immediately-executed function is a shitty experience for the programmer.
Once a form is submitted, everything on the page will be reset to the static one. Any changes made before the form submission will be lost, including the custom attribute you've previously set before the form submission. On the result of the form submission page, you'll have nothing to compare the token against. i.e. Element attribute changes will not be reflected/saved on the server. It's only on the web browser. If you want to display a chart on the same page as the form, and still keep all of the changes you've made on the current page, you can not and must not perform a form submission. i.e. the form's `sumbit` event handler must process the input and optionally update the chart, then return `false` in order to reject the form submission. With this, everything will stays as is.
I eventually used a table generator to get what I wanted. [https://www.tablesgenerator.com/html\_tables#](https://www.tablesgenerator.com/html_tables#) &amp;#x200B; Maybe this helped too [https://freepages.rootsweb.com/\~gearyfamily/genealogy/expression-web/sort-table.html](https://freepages.rootsweb.com/~gearyfamily/genealogy/expression-web/sort-table.html) &amp;#x200B; Now to clean up my code
If you want quality contributors, don't look any or invite any. Let them find and ask you.
I have a very silly reason why I like this. Many of the open source projects I work on use async/await, and it means that all my documentation snippets don't need to be wrapped in a function.
I personally think you're bang-on. I'm actually a little surprised there's so much demand for this feature. It's one of those things that obscures just enough of what's actually going on to cause major problems for the uninitiated.
Over 700 pojos that do what? You ought to consider what the frontend needs and does it really need over 700 different datastructures?
Thank you, you definitely helped aim me in the right direction.
I feel that it’s more insulting that they include the “pardon”. It would be better if they just got along and said it, “we don’t give a fuck about you, give us money”
As someone who also made the move, it’s worth it. If you need advice, input let me know.
I just did this yesterday, and no top-level await really made my script look ugly
This will solve this however. This is more about about requiring a module that may return some async stuff. So you can now do something like ''''const asyncLib = await require('asyncLib': ... Some other modules The engine will now wait for await before continueing with the module. There were many ways to get around this previously so they introduced this to simplifiying and unify the approach.
https://pastebin.com/0QExmvX4
you don't need the {1} since that part of the expression will automatically only match once
It already has. - `:hover` - CSS transitions - CSS animations These were all done in JS previously. It isn't going to replace JavaScript for logic, but for some other visual/display related tasks? Probably.
https://dev.to
Oh hey. I'm the champion of this proposal AMA
Psa: if you are using the 'fancy' (aka wysiwyg) comment editor markdown won't work
I can try.
What you wrote should match what you want only problem i see from your desc is that in [A|P] your forgot the | operator
&gt; Will CSS partially replace JavaScript one day? Only partialy. There are some cool css tricks to create some css-only cheats like the label+checkbox trick or simple CSS Keylogger etc., but there are some logics that CSS simply can't do.
That was a very long winded way of getting to the final conclusion of ... &gt;At first glance, we might be tempted to do premature optimization but for business we should prefer the readability, and also in this case for the code sample above, we have seen the results, still there is a very high probability that final benchmark will differ from project to project in real world because V8 performs lots of optimization with different mechanism eg. escape analysis on destructuring, and we might never have to worry about this in most of the cases. ... which I *think* is just saying "yes there's a penalty, but use destructuring anyway".
To build off of this, most of my transitions and animations are now handled by CSS, I mainly use JS to toggle the classes to kick it off.
Hi /u/minanageh, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Wow, that works great, can u teach me how u decode that?
Hi /u/mikob, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It won't partially replace it *someday*: it partially replaces it in some places *now*. I've seen examples like the ones you give various times, and CSS animations are a Thing™. I would be wary of this technique for toggling content in situations where accessibility is going to be a concern though - some screen readers may understand what is going on but I very much doubt all (or, indeed, most) do. Using fancy tricks is fine for superficial (or at least, safely ignored) elements such as animations, but here you are playing with actual content. That said, JS methods are as likely to similarly suffer from accessibility problems...
Hi /u/pdbdev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sideshow_Dev, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Pstrnil, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/th4019, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/PretendScar8, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tbone912, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ntroncoso, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yes, I found out now, thanks :)
Hi /u/Student_life98, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tchaffee, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/neutral24, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
How does it feel to be awesome? Also, any interesting quirks you/ya'll discovered in the process of speccing this out?
Did you check what finally says?
[https://www.reddit.com/r/learnjavascript/comments/bxvi36/can\_anyone\_help\_me\_with\_a\_regex\_pattern/](https://www.reddit.com/r/learnjavascript/comments/bxvi36/can_anyone_help_me_with_a_regex_pattern/)
[https://www.reddit.com/r/learnjavascript/comments/bxvi36/can\_anyone\_help\_me\_with\_a\_regex\_pattern/](https://www.reddit.com/r/learnjavascript/comments/bxvi36/can_anyone_help_me_with_a_regex_pattern/)
lol
Ramda (and lodash) have a pipe() function which creates a pipeline in which you can pass values from function to function like you would commonly do in a functional language. ``` R.pipe( activities.map(a =&gt; ({ type: a.type, label: a.label })), x =&gt; R.union(x, x), x = x.map(a =&gt; ( &lt;div className="schedule-key-item"&gt; &lt;div className={`schedule-key-colour ${a.type}`} /&gt; &lt;span className="schedule-key-label"&gt; {a.label} &lt;/span&gt; &lt;/div&gt; )) )
Yeah, already looked into that, as well as yarn workspaces, yarn PNP (both v1 and berry) , tink, rush, buck, bazel, vfs for git, docker... Pnpm is alright perf wise, but it unfortunately runs into rando compat issues (same with PNP)
Thank you 🙏🏻
actually [AP] matches either A or P (brackets are used like an array of options)
Hi, thx for the answer! I already have preventDefault() in my code. The post was more oriented to know if it is good practice to store some kind of id/token, that tells me the state/content of an element, in a custom data attribute, or if i should use webStorage. The thing is, i don't need that data to persist when browser refreshed or indefinitely, so webStorage seems useless in this case. But i also been told that is not good practice to store state of elements in elements itself. &amp;#x200B; What do you think is the best practice in this case?
Yes my bad mixed it with group selector
Would you rather fight one horse sized duck, or 100 duck sized horses
How is this easily google'd?
Thanks, but that won't work if I have a mix of functions with other primitive types
Let’s not async to their level
Ok, what about this removal reason instead: * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Twitter sucks
Not an 'easily Googled' question - as what constitutes 'good' and 'friendly' is subjective. A human trait Google sorely lacks
Surely you must have done at least one of these this week: - `foo.map(bar)` (higher order functions, point-free style) - function that returns function (currying/partial application) - unit-testable code (purity) - React HOC / Redux compositions (functional composition)
TL;DR: It monekypatches `require` so it looks into a global cache instead of running through the Node resolution algorithm
Ask yourself these few questions: - Is your project non-trivial? (e.g. algorithmically complex or battle tested for some large 3rd party API) - Does it _need_ to have contributors? (i.e. do you have an obvious roadmap of things that need to be done?) - Have you documented everything? Do your docs include guides/tutorials? How to contribute/navigate the codebase? - Have you written about your project? (in a blog, etc) - Have you publicized? (e.g. on r/javascript, HN, etc)? - Do you have a project chatroom? - What is the level of quality of the project (e.g. tests, linting/prettier, type checking)? Can someone easily contribute a fly-by fix?
Hi /u/Abdul__codes, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
you're the champ period.
`greaterThan(10)` passes 10 to `greaterThan`, which then returns a new function which has trapped the 10, and basically behaves like `m =&gt; m &gt; 10`. This is taking advantage of what is called [lexical closure](https://en.wikipedia.org/wiki/Closure_(computer_programming)) to keep a copy of the original argument (10) inside the new function.
Its a closure thing, have u read up on those yet?
It's a function that returns a function. So when you call greaterThan(10), you're returning a function. It would be the same as skipping all that function stuff and doing : let greaterThan10 = function (m) { return m &gt; 10; };
there was a passage in eloquent javascript that touched on it but i found it confusing. Do you know any videos or sites that could help me understand it?
Convenience. (async () =&gt; { await stuff(); })(); vs await stuff();
Can't tell untill it's resolved.
It is partial application. Consider \`greaterThan\` function as a factory-function. It constructs and returns another function with predefined value trapped in it. Just as it was mentioned before.
That double const ... const looks really awkward
Values should be stored in variables or object properties for optimum use (i.e. without wasting any resources, or waste the least amount of resources). While they can be stored in element attributes, because element attributes can only store string values, the values would be converted to string type. So, storing and retrieving values from element attributes has overhead (especially if the original value is not a string type), because of the need to convert between non-string type to a string type. And because in order to access an element attribute requires a reference to the element object, it would be more direct and simple to just use object properties to store the value. Moreover, any changes to an element attribute will trigger a DOM event which in turns, triggers DOM internal housekeepings. There's nothing wrong with using element attributes as data storage. It's just that it's not the best way in most cases. They are useful and required in some cases for the HTML's perspective, but not for JavaScript's.
I try this site because its not too complicated, see if this helps [https://www.w3schools.com/js/js\_function\_closures.asp](https://www.w3schools.com/js/js_function_closures.asp)
No. CSS can never replace JS, by design. CSS’s purpose is for styling the presentation of a document or web app. It is not intended to specify behavior or to perform computation. To the extent that it can, it is either: 1. Because the behavior is about the style itself (invisible vs visible, animations, etc). 2. Involves hacky, brittle, nearly unreadable code with massive caveats. You CAN make an HD video by programming Microsoft Excel 1 pixel sized cells so each cell generates the correct “pixel” color in sequence, several times per second, but you shouldn’t do that. You should use a video editor if you want to make a video. Beyond that, there are things that cannot be done with css ever, due to technical limitations or security reasons. Here is just a tiny fraction of what it cannot do: * You cannot perform actions, styling or otherwise, based on the textual content of a tag in CSS. * You cannot generate reactive and/or physically based animations in CSS. * You cannot change anything on a parent, style or otherwise, based on child selectors (the parent selector) with CSS. * You cannot alter arbitrary text on the page with CSS. * You cannot draw an arbitrary image on the screen with CSS. (Houdini will allow this, but Houdini uses JS.)
in Javascript, everything is an object, you can add properties to any object, therefore you can add properties to an array. This will replicate your result var payment=[40, false. false]; payment.percentage=payment[0]; payment.isApproved=payment[1]; payment.isPaid=payment[2]; console.log(payment) console.table(payment) These properties are probably added by to aid in use (easier to add .percentage than to remember where in the array the percentage is stored)
TL;DR: creating an object is more expensive than not creating it. duh.
An array IS an object at base, so just like an object has keys, an array can also have keys, though it really breaks the optimization that arrays provide as 'ordered collections'. You can still get the overall length but by treating this as an object Object.keys( payment).length
I like working with immutable structures, and there is a definite benefit to implementing these in JS. However... 1. Introducing features into the language specifically to support libraries (React/Redux) or other programming languages which compile to JS (typescript/flow) seems very short-sighted to me. 2. We already have immutability with `Object.freeze` 3. If implemented as-is, it would complicate equality comparisons in javascript for non-primitive values. Equality comparisons are already a difficult concept for many developers to understand in JS, I don't think adding another set of checks to strict equality as defined in the specification is advisable.
In JS, most values (including arrays), are actually objects. What you are seeing is JS’s flexibly. You can always attach arbitrary properties to objects (including arrays), with some exceptions. By declaring a value an array, you are opting in to having the length property, among other things, which calculates the “size” of the array by finding the highest numbered index. See examples: https://jsfiddle.net/zo0erwpt/ If you actually use JS arrays as simple arrays, most JS engines will optimize them so they are actually low level native arrays in the JIT code. Functions can have arbitrary properties attached to them too.
Yeah, you’re spot on. I was looking for a complex solution, but you’re right, it’s that simple: arrays in JS are objects and can have properties set on them. Now that I know it’s not really doing anything that weird I’m happy to use them as-is.
Damn. Sorry for the basic suggestions, just had my developer "what about" brain going. Best of luck my friend
[removed]
Yea, we may need to return at a better time.
Yes.
Yeah, what this guy said lol
Sure, you can ask - but I ain’t telling. /s
I am starting a series of *very short* articles about JavaScript basics. The idea is to use code, and *code that you can edit* to explain the most important and fundamental behaviors in JavaScript. The articles are very short so you never hesitate to read them. One or two minutes of your time to nail each specific behavior and commit it to memory. The first article covers the bare essentials of scope in JavaScript. Any feedback from learners is appreciated, because these articles are for you so I'm happy to improve things to help you learn. If you're an expert in JavaScript and I got something wrong, please let me know that too.
 let o = const {a: 1} Still, I think it's an interesting proposal.
Full disclosure, I don't know what the output will be. So there's swagger-typescript-codegen Here's an example of the generated code with fetch API ( they have a few options for library deps ) https://github.com/swagger-api/swagger-codegen/blob/master/samples/client/petstore/typescript-fetch/builds/es6-target/api.ts And there's autorest https://github.com/Azure/autorest Which uses ms-api as its library of choice. They have some examples in their repo too Both get generated off an open API spec ( swagger )
Object.freeze doesn't give you immutable optimizations. You have to use custom 3rd party object types (eg. Immutable.js) to get that. Seems to me the confusing part might be comparing regular objects and const objects. Because otherwise const objects can be thought of like primitives: `"foo" === "foo"`
`greaterThan` is a function that returns another function so that you can "partially apply" it. There are several ways to write this: // lambdas or "arrow functions" all the way, assigned to the variable. const greaterThan = n =&gt; m =&gt; m &gt; n; // function expressions (sometimes called "anonymous functions") also assigned to the variable const greaterThan = function (n) { return function (m) { return m &gt; n; } } // a function statement containing a function expression function greaterThan(n) { return function (m) { return m &gt; n; } } // Calling any of these looks like: const result1 = greaterThan(10)(11); // 11 &gt; 10 == true const result2 = greaterThan(10)(5); // 5 &gt; 10 == false // And if you want to make a new function with the 10 already applied: const greaterThanTen = greaterThan(10); const result3 = greaterThanTen(11); // 11 &gt; 10 == true As for closures, just think about it like when you use global variables inside top-level functions, like: const myValue = 5; function myFunction() { return myValue + 3; } Not that you'd want to do this, ha. Note that you have access to `myValue` inside the function. When you have a function that is "closed over" by another function, you gain access to the local variables (or arguments) from the parent function in a similar way - like having access to `n` from the inner function in `greaterThan`.
Yeah, I feel like this really needs a different keyword. Overloading const like this will lead to a lot of confusion.
I rather like the TypeScript implementation for immutable objects: ``` const immutableObj = {} as const; ```
Why not Godot?
Hey, I am interested, can you please specify a little on those "side projects"? Or just write me a Message
I see a lot of developers doing the same action over and over to different parts of the app, and that add a lot of code in your code base. One trick is to see those patterns and try to generalize, what most happen with me when using redux is something like: At login page I create an action Load and Receveid data to fetch user session. At somewhere else I create another action Load and Received data to fetch another sample of data. ... I keep adding Load and received (sometimes with other name but with the same behavior) action over and over again. A workaround could be something like // action/load.js const globalScope = 'load' const createScope = localScope =&gt; { const LOAD = `${globalScope}.${localScope}.LOAD` const load = () =&gt; ({ type: LOAD }) ...other actions return { LOAD, load, ...other actions } } export const login = createScope("login") export const registerUser = createScope("registerUser") &amp;#x200B; // reducer/load.js import { login as loginAction, registerUser as registerUserAction } from 'action/load' const createLoadReducer = (init, { LOAD, ...others }) =&gt; (state=init, action) =&gt; { switch (action.type) { case (LOAD): return true case (CANCEL): case (RECEIVED): case (...): return false default: return state } } const login = createLoadReducer(false, loginAction) const registerUser = createLoadReducer(false, registerUserAction) export default combineReducers({ login, registerUser })
Redux is explicit by nature, that's the whole point of having types, action creators and actions basically. More code in exchange for that often is a good compromise over less code and things mutate stuff from anywhere. You can still use flux-like store without the boilerplate while retaining most of what you probably want (central actions, selectors, devtools, etc). We use zustand [https://github.com/react-spring/zustand](https://github.com/react-spring/zustand) (we made it for this purpose, Redux was too much). But if you're using Sagas already, i don't if you're even looking for a light flux pattern.
What JS realy needs is copy-by-value arrays and structs. Immutability is a workaround when we don't have that, but for deep trees it's a nightmare to work with.
What does this mean and when can I start to use these? &amp;#x200B; Do any have babel support yet?
My usual tips for slimming things down: - use [the "object shorthand" form of `mapDispatch`](https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object) instead of writing it as a function - use [our new Redux Starter Kit package](https://redux-starter-kit.js.org/), which includes utilities to simplify several common Redux use cases, including store setup, defining reducers, immutable update logic, and even creating entire "slices" of state at once. - Don't use sagas - they're a great power tool, but [most apps generally don't need them](https://redux.js.org/faq/actions#what-async-middleware-should-i-use-how-do-you-decide-between-thunks-sagas-observables-or-something-else). You might also want to [try out our new React-Redux hooks API](https://react-redux.js.org/next/api/hooks), currently available in v7.1.0-rc.1 (`react-redux@next`).
It’s so you can write crappy code. Just like regular await, but without having to wrap in a function.
There’s even less wrong with this: const doSomethingWith([foo, bar, baz]) =&gt; { /* do something */ } Promise.all([getFoo(), getBar(), getBaz()]).then(doSomethingWith)
Luckily I only have two sagas at the moment and maybe 12 actions. It's not too late lol
If your company has experience with Java, try LibGDX.
Great tips! Sagas are really only being used here cause I needed to learn how to use them. In the long run, they don't add a ton of overhead for the small amount I have. But the actions needed to make them work properly is a lot of overhead. I am pretty happy with how the application is working now. Will likely post the codebase here if you wanna take a look and point out any obvious mistakes.
Your two examples aren't equivalent. If you import the first example, `stuff` will finish after the import, but if you import the second example, `stuff` will finish before the `import` is done. Top-level await actually changes the way imports and exports work. Here's an example with top-level await: a.js ``` export default await Promise.resolve(5); ``` b.js ``` import a from './a'; console.log(a); // logs 5 ``` And without top-level await: a.js ``` export default Promise.resolve(5); ``` b.js ``` import a from './a'; main(); async function main() { console.log(await a); // logs 5 } ```
How does `await` make code worse?
How about immutable?
It's not *better*, it's *different*. There's nothing wrong with just using a safe traversal getter if that's all you need. But lenses are more like a design pattern than a utility. Lenses are like first class pointers/instructions you can pass around and combine, and they're not just for getting. For example, using the example in the original comment, let's say you stored the lens as: `const myLens = R.lensPath(['foo', 'bar', 'baz', 1]` You could use \`view\` to get data out, but you can also use \`set\` to put data in: `R.set(myLens, 4, obj) // Would set foo.bar.baz[1] to 4` And you still get safe traversal, so you can call it on an empty object and get out something with foo.bar.baz\[1\] set with no runtime errors. Or you could use \`over\` to call a function at that particular point in the object: `R.over(myLens, addOne, obj) // Would set foo.bar.baz[1] to 3 by calling addOne()`
The proposal readme does a decent job of explaining the reasoning. The gist is you shouldn't have to jump through hoops to asynchronously initialize a module. It's not uncommon in Node to do some IO during initialization, but in order to do that you either need to run synchronous functions or export a function/promise and then `await` it in the importing modules.
Yeah, the notion of "signal actions" to kick off saga behavior is one of the reasons why there's more overhead, whereas with a thunk or something it just executes the code directly. The one difference there is that sagas can respond to actions, while thunks can't.
I think lodash.filter() might help here.
I saw you give an awesome talk about this proposal and TC39 process at a conference in NYC. Awesome work on the spec and thanks for the talk!
To be honest, it’s not super common. Most of the engineers I know are like uhhhhhhh nah I’m cool at the idea of writing software outside of work. It’s burdensome and requires coordination that is expected at work so it’s not easy going. Just build it yourself.
or `immut` like rust's `mut`
Buries dependencies, inverts control, and obscures the intent. Very poor tradeoffs for code that is more verbose and less clear in its intent. Literally the only reason it exists is for bad programmers who don’t want to learn JavaScript but have to use it because JavaScript has eaten the world.
&gt; Most of the engineers I know are like uhhhhhhh nah I’m cool at the idea of writing software outside of work. It’s burdensome and requires coordination that is expected at work so it’s not easy going. Agreed. I have plenty of coding pals, and we always share what we're working on, get excited and chat about our pet projects, share ideas and suggestions, etc. We generally do not make PR's into each other's projects, though. Sometimes here and there, but generally each of us does our own thing. I have to agree with Macaframa... because we are all engineers and spend our work days working on other people's projects, I don't think we have much motivation to compromise on our own vision and carry out someone else's.
Javascript is great.
You could pass your getFilteredTickets function a second parameter holding a key-value pair for every filter you want to apply to your list : &amp;#x200B; function getFilteredTickets(ticketList, filtersToApply) { return ticketList.filter(ticket =&gt; { let shouldKeep = true; for(let \[key, value\] in Object.entries(filtersToApply) { }) }) }
Thanks for the kind words!!!
Hi /u/phantomFalcon14, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Whoops... Sorry, I didn't see the rule and I really wanted to do it.
 You could pass your getFilteredTickets function a second parameter holding a key-value pair for every filter you want to apply to your list : function getFilteredTickets(ticketList, filtersToApply) { return ticketList.filter(ticket =&gt; { let shouldKeep = true; for(let [key, value] in Object.entries(filtersToApply)) { if (value) { shouldKeep = shouldKeep &amp;&amp; ticket[key] === value; } }) return shouldKeep; }) } Where filtersToApply would be : { year: 1999, month: 'january', severity: 'xxx' } Let me know if that helps, I did not test the code though.
&gt; Just build it yourself. That is exactly what I have been doing for the past few years and the reason for me to post this, to explore new possibilities. &gt; I don't think we have much motivation to compromise on our own vision or carry out someone else's vision It doesn't necessarily have to be someone else's vision. I could see work being like that, but side projects ideally ought to be about something you feel connected to. One may have a personal project about X subject, someone else does as well and both can unite forces. It's fun, fruitful experience wise and speed development. The ultimate goal is enjoyment and not exhaustion.
Check out Unity's project Tiny. It's made for small games which don't take a lot of space, but I think it's still in preview so it might not be production-ready
I'm down for some backend code! I have the same feeling like starting a side project with a "code buddy".
1. I don't think it's fair to characterize the proposal as supporting specific libraries and languages. Immutable data structures are a widespread pattern, not a niche or fad that's going to be irrelevant in a few years. The overview section mentions Redux and React, but I think the intention is to demonstrate that it's commonly used and understood by JS developers. The discussion of transpilers and messaging across workers makes me think this is forward-thinking, not short-sighted. 2. `Object.freeze` isn't deep, can't take advantage of certain optimizations (like /u/spacehack2114 said and like the overview describes), it's a runtime construct (and therefore has additional costs, is more opaque to tooling, more resistant to helpful error messages), and probably has more unhappy tradeoffs. 3. Sure it's an addition to the spec, which is more for beginners to learn and more work for JS engine developers, but like the proposal says, it will _"Add guarantees in strict equality when comparing data."_ Tools like linters and TypeScript/Flow can take advantage of the proposed immutable annotation to provide good error messages. For example, comparing `regularObj === immutableObj` is never truthy, but without value types you don't get that guarantee from JS, and are limited to things outside of the language like TypeScript's `readonly` and `as const` modifiers. Comparing `regularObj === regularObj2` is already fraught with pitfalls and this proposal can be a safer substitute for a lot of that usage. It's more for beginners to learn, but the semantics make a lot of things safer and faster. I do think the overloaded use of `const` is problematic but I disagree that it's a poor addition to the language. Just like `class`, if you don't like it you don't have to use it.
"Am I out of touch? No, it's the bootcamps that are wrong." I don't see anything that OP says here that isn't more than fist-shaking at a group of developers different from himself. Fresh graduates of CS programs tend not to come out with a deep-seated understanding of SOLID design principles either, nor do they come out with expertise with writing scalable code. No one outside the workplace teaches these concepts to junior engineers. Colleges don't. Neither do bootcamps. It takes mentorship and company investment to turn juniors into great engineers, and placing the blame on how those junior engineers entered the field in the first place is just gatekeeping at best.
&gt; No one outside the workplace teaches these concepts to junior engineers. Colleges don't. Neither do bootcamps. I learned SOLID principles through self-teaching and independent research. Not through being mentored by another programmer
I’m down too. Already have a coding project if you want to get into it. Also up for starting a new one.
&gt; Seems to me the confusing part might be comparing regular objects and const objects. Because otherwise const objects can be thought of like primitives: `"foo" === "foo"` Agreed, but I think it would be detrimental because of the lack of clarity it would create for developers not familiar with the spec. This isn't actually what it says in the spec, but most developers I've worked with think the following. 1. Two primitives are strictly equal when they are structurally identical. i.e. "they look the same" 2. Two non-primitives are strictly equal when they refer to the same object. i.e. "they are the same" This change would introduce a third consideration case where two non-primitives (const objects/arrays) are strictly equal when they are structurally identical. In reality, the [abstract equality algorithm](http://ecma-international.org/ecma-262/5.1/#sec-11.9.3) and the [strict equality algorithm](http://ecma-international.org/ecma-262/5.1/#sec-11.9.6) are both more way more complex than the above. TL;DR Adding more complexity to the equality checks in JS makes an already complex thing more complex, which is bad for the language, and for new developers trying to learn the language.
 tax Foo = bar; It’s the one true constant other than death.
I mean, this is where open source gets its maintainers
Yeah, that too. Being a self-taught developer myself, though, I've found that it can be harder to prove those chops to other engineers or other companies.
I tested this and it works. function getFilteredTicketList(ticketList, filterTicket) { return ticketList.filter(ticket =&gt; Object.keys(filterTicket).every(key =&gt; filterTicket[key] === ticket[key] ) ); } //Example //getFilteredTicketList([{test: 1, test2: 2}, {test: 1, test2: 3}], {test: 1, test2: 3}); //&gt; 1 result //getFilteredTicketList([{test: 1, test2: 2}, {test: 1, test2: 3}], {test: 1}); //&gt; 2 results `Object.keys` gets a list of all of the keys in an object so \['test1', 'test2'\] in this example. `Array.prototype.every` returns true if every element in the array returns true when passes as a parameter to the given function
I don't understand any of these points. What does "buries dependencies" mean? Since when is inverting control bad, and how does async/await invert control? More verbose and less clear? Than what? Async/await is significantly clearer and less verbose than callbacks and promise chains. &gt; Literally the only reason it exists is for bad programmers who don’t want to learn JavaScript but have to use it because JavaScript has eaten the world. This is not why async/await exists. The only reason it exists is to unify sync and async flow control. Promises are great, but the closure scopes make a lot of problems more complicated than they need to be. I've written UIs, servers, and scripts with callbacks, promise chains, and async/await, and IMO async/await makes reading, writing, refactoring, and debugging more straightforward. I'm curious how you solve async flow control problems.
Our apps are not pure games. It's a complex platform that also includes some games, but it's not focused only on this. We basically need to do it in React Native for this main reason, because we also have other features. We have stores, and different stuff. The stores for example are not related to the games, stuff like this. Therefore we can't use anything like Godot or Unity, as we dont want to develop User Interfaces in a game engine.
&gt; I don't think it's fair to characterize the proposal as supporting specific libraries and languages. This is literally one of the stated objectives. &gt; `Object.freeze` isn't deep Do we actually need immutable nested structures as a part of the language? If you're going to use immutable structures, why not also use flat structures? &gt; can't take advantage of certain optimizations This is a bit like saying "using `forEach` can't take advantage of for statements". &gt; it's a runtime construct What in native javascript is not a runtime construct in your estimation? I'm not sure I understand this statement. It sounds to me like you're comparing javascript to typescript. &gt; "Add guarantees in strict equality when comparing data." Translation: "Adds a way to check if two immutable objects are structurally identical, btw also adds immutable objects". &gt; Comparing regularObj === regularObj2 is already fraught with pitfalls Can you name the pitfalls? Two objects are strictly equal now if they refer to the same object. The only pitfall I see is not being aware of how equality works, which isn't solved by adding more complexity to how equality works. I appreciate your concerns and points, but I just don't think the benefit is worth the cost. Sure "no one is forced to use it", but this argument seems blissfully ignorant of the fact that bloat is a thing that exists.
Not a fan of the syntax. I'd rather see `const foo = immutable { … }` or something matching what TypeScript already supports, `const foo = { … } as const`.
He prefers callback hell.
I couldn't agree more. Though occasionally not ideal, await flattens out async code and allows it to be used in a way that is vastly more intuitive and simpler, especially with chained and dependent data.
Modern ui is a sole reflection of state. This would go backwards again, where you start splitting concerns that belong together, only to build complex DI bridges again. I think it is far more likely that js will eventually either replace css or cut into its space. I see people move away even from little things like hover and focus, doing it in js - because it's often easier, you're leaving a cross browser and backwards-compat minefield, and it's almost in every case far more powerful when it comes to complex, stateful animation.
A lot of people who suck at JS hate it and think it sucks, and that it will obviously get replaced as soon as other things are available in the browser. That is complete nonsense, JS has grown into a great language of its own and millions of people use it with nodejs, when they could use anything else. I've actually never heard of someone good at javascript hate it, it's all people who suck at it and are butthurt they have to learn something else for the browser.
&gt; This is literally one of the stated objectives. I should have said _only_. Yeah it's to support them, but that's not the full story - this isn't at all like _"adding jQuery to browsers"_, like saying _specific_ libraries and languages implies to me. &gt; Do we actually need immutable nested structures as a part of the language? How much of ES6+ was _needed_? You can use that argument against any addition to the language that improves development and the end user experience. The arguments against adding stuff to the language, to prevent bloat and cruft and confusion, are critically important, and I agree they should be voiced and argued to the limit. This proposal - not this specific implementation, but the concept of immutable values in general - is an important part of JS's future, particularly with WASM incoming and parallelization becoming more common, for it to compete with native performance and ergonomics. &gt; This is a bit like saying "using forEach can't take advantage of for statements". Not at all. Stack-allocated value types give you performance heap-allocated objects can never approach. The implications for workers, WASM, and transpiled languages are huge. This addition to JS has long been touted as a game changer for a lot of heavy duty use cases. For your average content-heavy website, it's overkill, but JS isn't the _toy language_ a lot of people want it to be, and with stuff like WASM, workers, SIMD, and immutable values, JS can do things people never thought possible. &gt; What in native javascript is not a runtime construct in your estimation? It's statically analyzable in a way `Object.freeze` is not. For examples of what static analysis can get you, take a look at what Svelte can do in terms of bundle size and runtime performance. &gt; Can you name the pitfalls? Two objects are strictly equal now if they refer to the same object. The only pitfall I see is not being aware of how equality works, which isn't solved by adding more complexity to how equality works. If you're comparing objects by reference, you need to trust the reference never changes under your feet. As an advanced example, `React.memo`provides no reference equality guarantees, because it could flush the cache whenever it wants, so people are advised against using reference equality with it, though I'm sure a lot of people don't know this nuance. The same goes for any object you hand over to a library. (or code you yourself didn't write) Value equality is a different type of equality to learn, yes, but it allows you to completely avoid the issue - if things are structurally equal, they're `===` - there's nothing mysterious to watch out for.
/r/ProgrammingBuddies might be what you're looking for
I am sorry but I don't find any of your rebuttals valid 1 - this is not a pattern used to support a specific library, rather they are examples of current usage. 2 - Object.freeze doesn't grant immutability 3 - equality comparison is not _that_ difficult, and "many developers find it hard to understand it" is not a good enough reason, assuming it is even true - otherwise we wouldn't have look behinds in RegExp, destructuring, proxies...
It's hard learning a new code base and I feel like an annoyance asking the maintainers for help
I'd rather add a new value type, say `fixed`, rather than recycle `const`. Also, I wouldn't change the behaviour of ===, otherwise it would be a nightmare. I would rather introduce a new operator, like the seldom used Object.is(a, b) - say, `Object.equals(a, b)`
I’m down!
Destructuring is the only part of ES6 I feel iffy about - it reminds me a lot of Perl, a language famous for its "Obfuscated Perl Contests". Cool to write, but a pain in the backside to read and make sense of. 7 times out of 10 when I get too clever with it one of my colleagues will fail the code review because they misunderstood what it was trying to achieve. It never happens with any other language feature.
This looks amazing.
Nativescript has different elements and Dom than web. You'll probably need something like Cordova.
"shitty" may be taking it too far... you want to try Visual Basic, that is "shitty" ...
You're free to use your own transpiler plugins to support something that might break a portion of the web somewhere else. Hell, people have been using `long long` for a while too.
It's not difficult to learn theory behind it. However to learn how they apply requires production code. And that is simply not something what is accessiblle with books and exercises.
Take a look at [Cordova](https://cordova.apache.org/)
When actually react developer use react hook?? Thanks in advance
Right, instead of awaiting (or calling a function that does so) in every consuming module (of which there may be many), you can have it happen at initialization by just doing it once in the dependency.
if you've dealt with C++ before, it doesn't feel completely crazy, but I'm not sure how much one should rely on the sanity of C++ programmers.
I don’t see how adding more features/sugar could hurt🤷‍♂️ Interesting proposal👌
There is a book called 'you don't know js'. If you haven't read it already, please do. It available on GitHub as well
Being on opposite sides of the equals sign is a great deal more clear than C++ or Rust that have mutability as part of their type syntax.
&gt; like saying specific libraries and languages implies to me. I didn't say that. I said "Introducing features into the language specifically to support libraries" there's an important distinction there. &gt; You can use that argument against any addition to the language It wasn't an argument, it was a question I was hoping you might answer. &gt; but the concept of immutable values in general - is an important part of JS's future I'm wasn't talking about immutable values in general. I was asking about nested immutable values. You didn't answer the question and changed the subject instead. &gt; ...static analysis... Static analysis is great. I'm not sure it's a good reason to introduce new features into a language though. There are a lot of things we could add that would make it easier to perform analysis that would hurt developer quality of life, where do you draw the line? &gt; you need to trust the reference never changes under your feet The React example is telling. A library doing things with objects that you don't expect is not an issue with the language, it's a problem with the library or its documentation. All else aside, I get that immutability is great and comes with a lot of benefits. However, I'm not convinced the approach outlined in this proposal is the best way to go about it.
I like this!
 \&gt; Introducing efficient data structures that makes copying and changing them cheap and will allow programs avoiding mutation of data to run faster (pattern heavily used in Redux for instance). &amp;#x200B; What the .. does that mean. Immutability is about making stuff reasonable for humans, it has nothing to do with speed.
What this guy said is all wrong. I would literally forbid new developers from upvoting on programming subreddits, if I could.
why not `CONSTANT` i think that is used in C++? seems easy to distinguish between the two.
Hi /u/gro_dev, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
At the bottom of my article I cover this.
I'd suggest you read up a bit on *persistent data structures* and *structural sharing.* Be prepared to learn a thing or two. :-)
Why isn't there a novelty Benjamin Franklin programming language?!
Sounds like you answered your own question there
&gt; I didn't say that. I said "Introducing features into the language specifically to support libraries" there's an important distinction there. I'm sorry I twisted that a little, but my point is that this isn't _only_ supporting libraries - it supports a common pattern in userland and WASM-targeting languages - and the libraries it supports aren't outliers. &gt; it was a question I was hoping you might answer. &gt; I'm wasn't talking about immutable values in general. I was asking about nested immutable values. You didn't answer the question and changed the subject instead. I didn't give a good answer there but I did try when I said "compete with native performance and ergonomics." (by ergonomics I also mean interop with WASM) An important part of the proposal says _"Value types can only contain other value types."_ The _why_ seems to be mainly performance. [An earlier proposal](https://github.com/sebmarkbage/ecmascript-immutable-data-structures/blob/master/Issues.md) goes into more detail: &gt; It's possible to implement these features in user land on top of Typed Objects. However, to get the proper === semantics you're locked to a certain structure layout which puts significants constraints on the performance optimizations that could be made. This is why this needs to be implemented in engines. So the answer is primarily performance. It might not sound compelling to the average web developer, but ask people making games or dataviz or other limit-pushing applications and you'll see enthusiasm. Developers can completely ignore immutable features and the libraries that expose them, and still use libraries that gain significant benefit from them under the hood. &gt; The React example is telling. A library doing things with objects that you don't expect is not an issue with the language, it's a problem with the library or its documentation. Caching objects is an extremely common pattern in JS and it's one of the "two hard problems in computer science." I won't claim React has chosen the clearly better set of tradeoffs, but it seems to me that they are working around the shortcomings of the language. The question was about reference equality pitfalls - caches are a big one. I think this proposal is lacking much of the larger context that I've picked up bits of over the years, mostly from Twitter and random stuff from TC39 members. It's one part of the story that's going to lead to, for example, AAA games running in your browser. It's been slow to develop, because like you're saying, the costs are huge, but I think we're unlikely to see TC39 abandon this topic, though the details of what it looks like and how it might benefit e.g. React may change a lot. I have no opinion if this is the right approach to the problem. I responded in the first place because I think there's a whole lot of context that points to the problem being a significant one that's worth solving in some form. In the past TC39 has been conservative to the point of stagnation, but luckily since ES5/6 we're seeing the language evolve at a steady pace, and the committee has no shortage of naysayers who'll veto stuff if they think the costs outweigh the benefits for the web as a whole.
I'd rather see something like `const a = val {};` or even just `val a = {};`. I really like the `with` syntax. Reminds me of other functional languages.
I think you owe an explanation with that much emotional discharge.
I would say the same about underscore. Both are terrible for code readability. Often times I would come across code that could have been written in less lines and more consise with plain js. All underscore did was make it harder to figure out what was actually going on, and usually there were bugs in the logic.
I think they mean making Immutable data structure faster, not that they are faster, but that optimization is possible
If someone is failing you on destructuring then they don't understand JS well enough to be doing code reviews. I love destructuring as function arguments if for no other reason than it provides documentation on the properties an argument object is supposed to have (JS needs interfaces lol)
How do you make proposals?
you can publish and version them separately is probably the main one
Please just don't state that something is wrong without explaining how it really is. As a new developer your post is not helpful at all. If someone has already explained why it is wrong, then please refer to that comment.
I have found yarn workspaces do most of the stuff I used to use lerna for. I have a couple projects where I still use lerna as a script runner and/or publishing manager, but that's about it.
&gt; this isn't only supporting libraries I didn't say it was *only* supporting libraries. I just indicated I don't think supporting libs/other languages is a good reason to change a language's spec. &gt; So the answer is primarily performance. Any nested structure can be converted to an equivalent flat structure, so I have trouble seeing why nested structures are a solve for a performance problem that can be solved without them. I've worked on plenty of limit-pushing applications including data viz, games, XR, etc. I've also been on the framework development side of things. I haven't come across a use case yet where this proposal would have solved a real-world performance problem, not to say they don't exist, but I think you may be making this out to be a more common problem than it actually is. Regarding cache invalidation and object comparison. I think we have to agree to disagree. There are dozens of good solves for this problem that don't involve changing the spec. We're pretty much on the same page. As I said in the OP. I'd like to see immutable structures introduced but I don't think this is the way to do it.
Bro. Did you steal my meme? 😂https://www.instagram.com/p/Bx5aSqQgr7p/
Because bootcamp grads are immediately engineering managers and architects that oversee what goes into production? Fuck off OP.
Hey, what's the short version on what this feature does and why it's awesome, thx :)
This is awesome if not for exposure to the process of an ECMA script proposal.
Syntax is eh, but yes, we need immutable data structures, but more-so we need \*\[persistent\]\[p\]\* (structure sharing) immutable data structures, as ClojureScript and ImmutableJS implement. &amp;#x200B; \[p\]: [https://en.wikipedia.org/wiki/Persistent\_data\_structure](https://en.wikipedia.org/wiki/Persistent_data_structure)
Godot can do so much more than just games, I know some people who use it to quickly make UX mock-ups. Also, I developed a financial app in it, currently used in a few small financial entities where I live.
You won't get a good answer without showing more of the powershell code you're trying to convert. The block you posted is filtering something based on a property called Model that includes a particular string, but without knowing the context and what the thing is, it's difficult to say what the JS equivalent would be.
What I'm really attempting to do is convert this Powershell Code to a compatible JavaScript code. What the script does is basically disables delayed ack in a software iscsi based storage. ********************************************* #This section will get host information needed $HostView = Get-VMHost nameofesxhost | Get-View $HostStorageSystemID = $HostView.configmanager.StorageSystem $HostiSCSISoftwareAdapterHBAID = ($HostView.config.storagedevice.HostBusAdapter | where {$_.Model -match "iSCSI Software"}).device #This section sets the option you want. $options = New-Object VMWare.Vim.HostInternetScsiHbaParamValue[] (1) $options[0] = New-Object VMware.Vim.HostInternetScsiHbaParamValue $options[0].key = "DelayedAck" $options[0].value = $false #This section applies the options above to the host you got the information from. $HostStorageSystem = Get-View -ID $HostStorageSystemID $HostStorageSystem.UpdateInternetScsiAdvancedOptions($HostiSCSISoftwareAdapterHBAID, $null, $options)
Did Marjin try to be purposely obtuse when he wrote this?
Bang on. I think this pretty much sums it up for ember, although I disagree about Angular not being big. At least in my neck of the woods, angular is king.
yeah but it's completely different thing because it's just static typing, there's nothing stopping you from *actually* mutating those objects in code
Of course, but a syntactically similar approach would be nice IMO
Why can't imutablility be a compile time construct? Your code isn't going to change once you start running it is it?
Tooling. For example, you can configure how things are published (individually vs in lockstep) Downside is that it's not a shining beacon of code quality, and does things like temporarily erasing package.json files when installing things and breaking your workspace if you accidentally yarn add from one project, forcing you to regen your entire node_modules. It's also kinda slow. Personally I recommend a monopackage if you can help it. I don't really like lerna (slow, weird workflow) or yarn workspaces (little tooling outside basics). If you want a lerna alternative, there's also @microsoft/rush but you need to buy into pnpm to get good DX. I'm working on an alternative geared towards very large monorepos, called jazelle, but it's still in very early alpha.
I’m not sure what your plan would be for publishing said projects if they all share one package.json... that sounds like you’re asking for bundle, dependency, maintenance, and build issues down the road. I wouldn’t recommend it. Did you mean to ask what the benefits between multi-repo vs mono-repo are? This article does a good job at describing the benefits and possibilities of a mono-repo set up: https://doppelmutzi.github.io/monorepo-lerna-yarn-workspaces/
CSS is about defining how HTML elements should be styled, and in form of stacked set of style rules. JavaScript is about evaluating values, assigning variables and object properties, calling functions, etc. Neither can replace the other. However, because JavaScript can also control element styles, it requires CSS. So, in terms of element styling, CSS do not need JavaScript. CSS can never replace JavaScript, because it never require JavaScript in the first place.
Used to use Ember ages ago. It was very good. Ember data was nice. Loading and saving data to a rails backend was unbelievably slick. Use Vue nowadays but definitely miss that data layer.
agreed. ember-data is beast, also ember-cli and the out of the box integration testing, very nice. but....i just love react.
Yeah people like to shit on Angular just because React is so popular, but we're still seeing clients requesting Angular devs at about an equal rate. We finally got our first client that asked for some Vue help! This is in Dallas, Tx
Haha no worries, thanks :)
That's an example of a bad function naming. That `greaterThan` function should have been named something like `CreateGreaterThanXFunction`. If that code is part of a study, they've designed it to confuse you. It's to make you realize that function name doesn't mean anything to the code. It will force you to find out how the code actually works.
I don't know, I really like Ember but the barrier to entry was too high. I loved routes, I loved ember-data, and I loved it once I understood it. I work with React every day and I have begun to hate it. It's too clunky, there's no separation of concerns, and code is just thrown into everything because "component!".
I agree. Angular is far from dead.
It’s up to the developer separate concerns. React is a just a library more than a framework, since it doesn’t enforce any kind of structure.
Come back to templates, they didn't deserve all the hate. Give Vue a try.
He probably just doesn't like JSX. Not sure how that makes it "clunky", however.
Ive worked 2 years on react and recent 3 months on angular, and I feel like angular actually feels it os on a growth route, after its initial downfall. They are taking separate routes (i.e templating vs. vdom) and each of this routes will start to display their own benefits (ex: Ivy). Both also have downsides (ex: react's component nesting hell)
Get off tha reddits.
Just want to point out that a lot of opinions seem to be based on basic syntax operations like list comprehension vs map/filter but when you start digging deeper and have occasion to use the dunder methods of Python and it's multiple inheritance you may appreciate Python more
React has evolved so quickly it’s unlikely you work with a React codebase that couldn’t use a good refactor. But also it’s okay to not like JSX. It’s a novel concept with unique benefits and in one way it makes perfect sense to have JS completely control the HTML and CSS, but in another way it’s jank that I rely on JS to build each page from several (or more) components.
It has an idiom, and I don't love that idiom. I do love components and JSX/TSX, but I don't like components being responsible for all the stuff they are typically responsible for.
[removed]
Hi /u/c2l3YWxpa20, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What about react requires more nesting than angular?
I like Templates. I worked with Angular for years and had a great separation of concerns. Directives did JS stuff, routes were defined in the directive layer, templates controlled the HTML, Less was used for styling, services were used for API calls and later data access, and js-data handled the data layer.
&gt; everything is an object Except for primitives (number, string, boolean, null, undefined, symbol). 'foo'.toUpperCase() is basically: new String('foo').toUpperCase() Primitive values are auto-boxed when you call a method or access one of their properties. There are a few languages where everything is an object (e.g. Ruby and Dart), but JS isn't one of them.
Hey guys, I’m curious on how was the transition from Ember to Vue/React. Do you know any posts that could help me? Just wanted to know some more of this.
Immutable objects as described in the proposal would make deep trees easy, no?
Why about it is jank?
I hope not. I don't really like front-end but I have to keep up even though I concentrate on back-end. My current project is old legacy angular front-end, though I'm seeing more projects from our customer in React. But for some reason I just can't find the free time to bother learning React because I'm hoping that the *next great thing* will be out in 2 years, and then React will fall away, as does everything in the javascript world every few years.
If you look at it optimistically, if the feature is a big success and everyone starts using immutable objects, then mutable objects could be treated like we treat for loops. They're *there* for those cases where you really need them, but in general avoid and use const objects. Then you can treat everything like primitives, and beginner use becomes simpler.
Honestly, I like Angular lot more than AngularJS or React. I come from a largely a backend experience and Angular somehow feels more natural to work with.
I was probably a year into web development career. I didn't have a whole lot of experience to fall back on. the app that we had was a big monolithic style app using vanilla JS and JQuery. Everything was pretty much hand rolled. It worked, it took a bit of time to develop something but I learned a lot and genuinly enjoyed working on that app. My company got a pretty decent contract and the other devs wanted to try and rewrite the the app using a framework. So we all looked into different JS frameworks. At the time there was really only Angular 2, Ember 1.09, and React. I can't remember if Vue was a thing yet. I looked into React and thought it was good. I liked the sound of it but I was still felt green and didn't speak up mostly due to a lack of confidence. Another dev liked Ember he was quite vocal about it and sounded like he knew the ins and outs of it. We decided to use Ember. I would say it took me probably 4-6 months before I was fully up to speed with Ember. I hated it. I would come home many nights thinking I just don't understand it. Do I use a Controller, a Route, something else? Half the time I felt like I was reading the docs more than writing code, trying to figure out the least painful way to accomplish a task. At some point we decided to upgrade the project to Ember 2. What a mess... In the end we faught and abused the framework and transformed the app into some kind of Frankenstein's Monster. And I definitely was Frankenstein duck punching this framework into being something it was never meant to be. It was and still is an abomination. The whole app was reimagined after that. This time I found my voice and spoke up about React. I am super happy with it and using Redux with it is just amazingly fun to work with. For whatever reason my brain just understood it immediately (which is a rare occurrence for me). We need the flexibility that React allows. Unfortunately, I am probably one of the last 2 people that can actually still fiddle in the Ember app when there are change requests. It is always painful and brings me a sense of shame when I am in it.
I love me some TypeScript. Wish my job was in TS, mane one day!
This isn’t jquery.
Is there an actual element on the page with id "plantTree"?
What happened to the original ember advocate?
There is. `&lt;button id="plantTree"&gt;Plant a tree&lt;br&gt;&lt;span id="click-plant-multiplier"&gt;x2&lt;/span&gt;&lt;/button&gt;`
Hmm. I'm on mobile, so I can't inspect the full code, but your snippet looks correct to me. You can try logging the result of getElementById to the console to make sure you're selecting the correct element. I would also or a lot statement inside your button's click handler to make sure it's getting called as you expect. Either the element isn't being selected or your handler isn't bound correctly.
😂
So the error that comes up in the console is: `Uncaught TypeError: Cannot read property 'click' of null at &lt;anonymous&gt;:2:45` I'm not actually sure how to resolve it.
Lol He took a position as a contractor at a different company.
The call to getElementById is returning null, because it can't find "plantTree" in the DOM. If you're using iframes, that might be why. (the document you're invoking getElementById on isn't the same one you're rendering on) If you're not using iframes, I'm not sure what's going on.
“Kill its past” means break backwards compatibility? Ok, a question: would there be a migration tech that takes old codebases and moves them to new with 99.9% completion? No? Well then expect companies and the devs to flee to something else. I was director of engineering for a fintec firm that had deployed some dashboard-ish apps using ember by the time I arrived in 2014. We took a year to attempt upgrades of Ember but barely progressed because of broken backwards compatibility. The biz was pissed off. While the shit was happening we spun up newer apps in Angular and React just to not put all eggs in one basket any more. Python’s 2 -&gt; 3 migration is 10 years long now. In my opinion that’s because the 2to3 migration tech only does 90% of the work. It’s flawed in that it only looks st source code and doesn’t instrument running code for additional intelligence. Similarly look at how Angular2 broke backwards compatibility with 1 and what happened to the community then. September this year is the 10th anniversary of Angular1.
Yeah, I'm not using iframes. Not sure what's going on. This kind of code works on other sites, so it must be something I'm not able to catch in terms of how the code works on this particular site. I appreciate you looking at it with me.
Did he make a mess there too I wonder? I’m only saying that because he’s a loud voice with over confidence.
You didn't use semicolons here, but you insist they are not optional elsewhere. Have some consistency if you're going to tell people that semicolons aren't optional, otherwise you look like a hypocrite.
As far as I know react native has a js runtime so you could probably use any js engine like THREE.js for example.
Oh man, I didn't even know there was a difference between the two. One more framework I have to look into :(
It's a total rewrite.
Thats what I meant to say. React encourages some hideous nesting of components. Say, render props (anything that uses a "provider" ) or even styled components, all of them are terribad.
I certainly will if I ever need to use it myself but this sound unlikely. I am happy to look over it for inspiration though, to pick the best parts and implement them myself without overheads. :)
Come on. It's fine for a one liner. Now if he posted a codesandbox example or something, it would be a different story.
https://www.ecma-international.org/ecma-262/8.0/#sec-ecmascript-language-expressions
The Hooks API solves that, though.
Never seen the click method before honestly. On W3schools it implies it’s only used for checkboxes to simulate a mouse click, so that’s probably your issue. If you want a click event, use the addEventListener method on your dom element: domElement.addEventListener(“click”, () =&gt; doStuffWithClickFuncfion() ); Inside your doStuff function, you can check if it’s clicking on your domElement by console logging something in the function and seeing it in the chrome dev tools console.
They can be responsible for as much or as little as you want.
Well, the thing with ember is that you absolutely have to stick to its rules, otherwise you will have a very bad experience. You can work around most of its quirks, but that will come around and bite you eventually. My experience is that many devs think they know better than the framework and try to write things differently, just because. Those people will never be effective ember developers.
[with](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) already exists, too. Don't get me wrong, I'm 100% on board conceptually. But the current suggestion feels odd.
Maybe [this one](https://www.robinwieruch.de/learn-react-js/) is a good starter.
Fuck frameworks, use lit-html for rendering and simply use custom elements.
I think I may have been your colleague
It's only more readable if you aren't used to it. As a c# guy, I find the second option much nicer to read.
Compared to vue the nesting is pretty similar. The only issue being needing a single top level element. I don't see how nesting could be reduced otherwise.
Good luck convincing others to work with and track your code making something even vaguely ambitious and no context for the code. Thinking like this is how legacy apps that tear down companies are created. Pure hubris.
Exactly my experience in terms of getting to use it. Also really green. To make matters worse I was the only dev so probably spent closer to a year failing to use it properly or efficiently
React has been out for 5 years. Stop parroting this kind of opinion.
In JavaScript, you can only await inside functions declared async. Top level code isn't declared async, so you can't await there, you have to call functions normally and deal with the returned promises. This leads to workarounds because you wind up coding your top level code in a different manner than the code inside functions. This spec, when complete and implemented widely, means we don't have to do that any more.
You missed the bit when i said "when i get too clever" They know JS very well, destructuring is simply hard to read and can lead to misunderstanding. You really have to stop and think
I'd say React has been the *cool framework* that everyone learns for about 2 years now, no longer. Before that AngularJS was it for about 3 years, along with the whole explosion of Node and NPM. I would know because I switched to sys admin and completely missed all of it and had to learn all of it really quickly. I'm still flabbergasted people decided to use those MEAN stacks, lol. What a stupid idea for real apps. Before that it was clunky frameworks like ExtJS and GWT. Before that it was stuff like Yahoo YUI, preceded by Jquery. And of course, the server side frameworks like Asp and JavaServer Pages were all the rage 15 years ago. I'll bet you $100 right now that React won't be on top in 3 years, and instead it will be the crappy legacy code that nobody wants to work on.
Thanks. I looked it up. Apparently it's just version ~~2~~, ~~3~~, 4 or whatever. Seems like it moves fast and has nothing on common with Angular JS (i.e. version 1).
How far have you got? What's stumping you?
I don't have enough experience with React to do a comparison, but I do in fact like working with Angular *for the most part*. There are some annoyances with it though. It's unnecessarily obtuse about how it handles CSS encapsulation IMO, and ::ng-deep is being deprecated so I have no idea how to do simple parent-child overrides without turning off encapsulation for that component entirely. I also don't like how it doesn't easily let you reload the current route to run the guards and resolvers again. The overuse of RxJS is also not great either. Sometimes simple promises and async/await is all you need, but observables and subscriptions are kind of how Angular recommends doing things. But those are inherently stateful, and carrying state in your application will bite you at the most inconvenient times. Other than some of those quirks, I generally do like building SPAs in Angular. The CLI is excellent, the component/template/styles split I think is very natural. Modules can be a bit weird, but once you understand them, it's good. Dependency injection and testing is nice, and the best part of the whole thing is the first class Typescript support. Damn do I love Typescript.
They follow semantic versioning now. And there's a new major release every 6 months. It's got nothing in common with angularjs but it's come a long way and is very intuitive these days.
agree to disagree I guess. I hate PHP with a fiery passion, and MEAN/MERN/MEVN stacks are gifts of God to me.
Not a PHP fan either. And I realize that MEAN stacks aren't too bad for a quick prototype. I'm guessing there a tons of nice modules for anything you need. But have you ever had to deal with Mongo when you're database starts getting big? What about transactions? JSON is nice for front-end, but after a while, you really want a schema that is enforced. And I have no idea how Node / Express handles once you get a lot of concurrent requests. Even $50k Oracle and RedHat *Middleware* starts clogging up, and you need all sorts of tricks like NGinx load proxies and caches.
Do you like the new angular better than Vue and React? I already see a lot of people complaining about React once the projects start getting old and cluttered. This was exactly was happened with many AngularJS projects. Most people seem to like Vue a lot better and say it's easier which might be good since I don't do much front-end much anyway.
Pitch me. Show me something I could do that would fascinate me with that thing or two that I'd learn.
I've not actually tried React from scratch. But I've dabbled with Vue. What I find is that when you are building something small (like say, a single view SPA), Vue would be ideal. But anything larger and long term (like enterprise apps tend to be), Vue becomes a little difficult to manage. I think React would be similar too (someone wrote about the component nesting hell). Angular makes you keep modules strictly within their own space and I personally find it's structure much more manageable when you have a large project. Maybe I'm doing it wrong in React or Vue and there's a better way to do things. But so far, this has been my experience.
We generally don't like to help people with homework questions.
 let input = require('readline-sync'); let height = input.question('Please enter the size of the peak of the isoceles triangle you want to print out: '); if(height &lt;= 10 ) { for (let line = "#"; line.length &lt;= height; line += "#"){ output=line; console.log(output); } The decrement part. I am not rlly sure how to continue
oh okay. Sorry I will keep tht in note.
I have almost the exact same experience even down the the ember dev leaving and me being the only one left that understands it.
Have a look at lit-html and LitElement webcomponents base class. I started using recently to rewrite some legacy jQuery widgets and I kind of love simplicity of using it. PS. Using light dom, shadow DOM still has its flaws in terms of styling possibilities.
Yeah, and then we get template-heavy C++ code that takes weeks to compile (:
Retrospection makes everybody smart
Yeah, we have a large Ember 1.12 app. Lots of views, partials, object controller, array controller etc. Upgrading to a modern ember version is basically a rewrite. If we got the ok to spend time rewriting the app, we wouldn't choose ember for it
Poorly written code and not using tools correctly is the primary reason for switching technologies. I wasn't around in the ember 1.x days, but I know both ember and react now, and I would never rewrite an app in one into the other.... But, doing things correctly also saves a ton of time in the future, too :)
Who's that?
Ember, at least now-a-days isn't the problem. Garbage code is the problem
Fwiw, I've seen the exact same thing happening on React projects. If people don't know the tech they're using, the project is going to be a mess
This is 100% true of ANY framework
It's much better today. There are waaaaaay more learning resources now. And there have been a ton of efforts to improve ergonomics
Have a look at the reduce method for arrays. I can't write an example, since I'm on mobile, but it's not that hard. It would be like . const leagues = data.reduce((accumulator, result) =&gt; { accumulator[result.league] = [ ...accumulator[result.league], result ] return accumulator }, {}] . Something like that. Sorry for the formatting.
ember is an opinionated framework that does everything for you, which makes this much more important. With react, the API is so thin you simply can't clash as much.
Kinda. They make breaking changes all the time and HAVE to release major versions. :( Ember today does everything backwards compatible and has polyfills for new features to go back ever farther. This is how ember is only on version 3.x
I hate acronym stacks. Just the acronym
Today, ember not only tried it's hardest to not break backwards compatibility... And new features are even polyfilled to old ember versions so people have more time to upgrade, work through deprecations, etc. It's a very pleasant experience
Ember 3.x and especially octane are really good. To upgrade from 1.x, you'd have to do it incrementally. But using native classes, modern JS, and AngleBracket components (like every frontend thing) is well worth it
That's a terrible assumption.
Without frameworks, you need a really solid set of design principals to have anything last and be worth keeping
Have you tried ember recently?
People hate being told they're wrong. Tangentially, I think this is why so many js devs hate typescript
So is ember. Ember is growing. :)
In react, you don't have a choice.
because eval() and &lt;script&gt;
Glad I'm prefer bash &amp; Linux stack, 'cause this code looks like shit, really.
Exactly!
I called the python2/3 and Angular 1/2 at the time.
Typescript takes about twice as long to write something
You also have to include the debugging in that calculation. I have a large application written in JS, and I've spent hours tracking down where a number suddenly turns into a string or a null value.
Yeah. I've written a large application (30k lines all by myself) in ember. In the beginning, I really disliked the way ember forces you to split up stuff into controllers, services, models and components, and the data down actions up philosophy instead of doing the mutations where they occur. However, now I have a huge hunk of code that’s still maintainable by a single person, and everything happens at a clearly defined location, meaning that I can get to a bug's location very quickly.
Sup Q. Funny seeing you in the wild.
Not OP, but powershell is more readable than bash will ever be. Feels like it was made for humans
I'm not sure why you can't select it, maybe because of the iframe? If you open the frame in a new tab it works without a problem. The click function doesn't seem to work on it though, if you look through the dom, you will see that it's listening for an 'mouseup' event. You can trigger it the following way: let button = document.getElementById('plantTree'); let event = new Event('mouseup'); setInterval(function () { button.dispatchEvent(event); }, 20);
It depends on implementation, but basically if you update some node of your immutable tree, you have to regenerate all the parent nodes and link them to the existing branches of the tree. So maybe it would be easy for understanding an app flow, but not in terms of performance. https://en.m.wikipedia.org/wiki/Persistent_data_structure
Im the OP, and thanks for the comments. I like Powershell for it's human readable format as well.
Ya I have literally never had that exact bug in 8 years I switched our app to typescript to appease the higher ups and it's a large app and has caught our juniors bugs down significantly but it's still a lot more code and compiling time
We rewrote our entire app in it and I will choose it over react for any new projects
Nice blog 👍
As much as I love finding myself in situation outside of what the docs say and having to do the whole WWTDD (What Would Tom Dale Do) and attempt to channel the ember devs to figure out how to translate some JavaScript concept into Ember Way™ of doing it. I don't actually like doing that and when people tell me about how it's changed all they really do is describe ways it's more like react, except with it's own template system with a helper system which I'm pretty sure I could write a LISP in, but I digress because all the newer cool things in Ember, I already have them in React, which despite not actually being technically being written in JavaScript, still feels more like JavaScript then Ember does.
I bet this is C
Check isHeight equals to i if true Get output, remove lastIndexOf output. Do this in loop until theres only 1 length in the output
Oof.. concatenating more # into the string works for the first half, but gets very tricky for the other.. I would recommend building each line based on the loop index, rather than the current line's length, after all, the length will begin to get shorter as the second half begins. Also, you'll likely want to use something like loopIndex &lt; height*2, in order to process both halves of the triangle. You can then determine which half is currently being drawn, by checking whether loopIndex &lt;= height.
[removed]
My nodejs library/cli brainfuck compiler and interpeter: [https://github.com/the-hive-mind/brainfuckjs](https://github.com/the-hive-mind/brainfuckjs) &amp;#x200B; I was interested in the esoteric programming language brainfuck. And even though I have no experience in writing compilers, I thought it might be a nice challenge to write some interpreter or compiler for brainfuck. So, I implemented one. The interpreter just goes character by character over the brainfuck program and executes every command. The compiler tries to be a little smarter and tries to group statements. Although I didn't deep dive in topics like lexers, AST etc... but just read about them afterwards. There are still many things to optimize and one could for example search for multiplication patterns, so that one could get rid of some loops in order to increase the performance further. Anyway, it was a nice try-out project of mine and I'm quite satisfied with the result :)
not if you use type-inference correctly. But also, that's not the point.
&gt; and the data down actions up philosophy this is frontend in general. React is all about this. :) &amp;#x200B; &gt; However, now I have a huge hunk of code that’s still maintainable by a single person &amp;#x200B; that's wonderful! :) yay!
I definitely agree. My intention isn't to bash on Ember. It makes fantastic CRUD apps quickly. I don't regret working on that project it. It was a fantastic learning experience. Sometimes the most valuable lessons are the ones we learn through failing. I haven't kept up with a whole lot on the goings on with what's new and hot with Ember besides when routable components ended up not being a thing. It is just unfortunate really they sounded cool and would have been helpful in the project.
When working on that project I always felt like the character Mr. Arnold in Jurrasic Park. When everything is going to crap and the computer was saying, "Ah ah ah you didn't say the magic word", I would also yell, PLEASE, at the computer.
Now that I'm on a laptop and not my phone, I looked link above. It is using an iframe around your game's render viewport. I'm not sure where the code you posted above is in relation to the game code, but I would guess it's not in the iframe along with the 'plantTree' element. I also cut and pasted your code into a pen to make sure there wasn't a typo I wasn't seeing, and it seemed to work fine. So I would double-check where your script is loaded in relation to the game code and 'plantTree' element.
For the most part I like ember. But, for the parts that matter, like global state share, it is terrible. Actions are fucking stupid. Fight me.
Did you help start a Ft. Wayne Ember Meet Up Group that only one person outside the company showed up to?
I don't think lol. I would consider him a friend. He is a good guy extremely smart and I still talk to him. He definitely has stated Ember was not the right tool for the job. Just mistakes were made. I learned a ton from him and that project.
I think you're right about the first part, but not the second.
You shouldn't use eval, and you shouldn't use script tags all over the place either. And you can't protect against what other people do because imutability isn't security.
Right, so just make every one who executes your code pay the penalty instead off you paying it once when you compile it? The time is going to be spent somewhere if it can be done at compile time it should be.
While I want to have immutable structures, this proposal seems, well, questionable. 2 main things that stick out: - Order matters. That is completely unnecessary, and will be a source of obscure bags. It also doesn't match with how we think about normal JS objects, or objects in any other language for that matter. - The `with .b = 5` stuff is another unnecessary and overly complex addition. The same can already be achieved with the spread syntax. If you they limit the proposal to just the fundamentals, i.e. the `const {}` stuff, then it will be great.
Some genuine question here: &amp;#x200B; &gt;As much as I love finding myself in situation outside of what the docs say * how often did this happen? * did you try the community chat (used to be slack, now is discord) &gt;having to do the whole WWTDD (What Would Tom Dale Do) I'm sad that you feel this is a thing. Tom isn't even that active in the online community. Also, the broader community maybe has more opinions than he does. &gt;attempt to channel the ember devs to figure out how to translate some JavaScript concept into Ember Way™ of doing it. this is def a huge pain point, and it's been worked on. the next ember version 3.12, ditches all that old cruft that was invented in a time before babel, back in the ES3 days. You can write native JS right now though, and it's super ergonomic. Here is an example of code that I have in my apps. import Component from '@glimmer/component'; import { tracked } from '@glimmer/tracking'; import { isBlank } from '@ember/utils'; import { inject as service } from '@ember/service'; import { action } from '@ember/object'; import { task } from 'ember-concurrency'; export default class NameEntry extends Component { @service currentUser; @service router; @tracked name; get nameIsBlank(){ return isBlank(this.name); } @action createIdentity() { this.create.perform(); } @(task(function*() { if (this.nameIsBlank) return; const exists = yield this.currentUser.exists(); if (!exists) { yield this.currentUser.create(this.name); } this.router.transitionTo('setup.completed'); }).drop()) create; } https://github.com/NullVoxPopuli/emberclear/tree/master/packages/frontend/src/ui/routes/setup/new/-components/name-entry &gt; I don't actually like doing that I don't blame you &gt; and when people tell me about how it's changed all they really do is describe ways it's more like react, how do you mean? &gt; except with it's own template system with a helper system which I'm pretty sure I could write a LISP in, That's a plus imo. But also, it's a superset of HTML, which is super handy for designers to help out with app building. a lot of designers already know HTML and CSS, so them being able to contribute is super handy. :) &gt; but I digress because all the newer cool things in Ember, I already have them in React, what things? Also, react and ember aren't really good to compare with each other. Have you seen this talk? https://www.youtube.com/watch?v=OZaPaRh83sA &gt; which despite not actually being technically being written in JavaScript, still feels more like JavaScript then Ember does. React's whole shpeil is that "it's just javascript".
idk if you've seen this series of blogposts by /u/pzuraq, but they're pretty good: [https://www.pzuraq.com/coming-soon-in-ember-octane-part-1-native-classes/](https://www.pzuraq.com/coming-soon-in-ember-octane-part-1-native-classes/) they'll catch you up to speed on all the current stuff with ember. \&gt; It is just unfortunate really they sounded cool and would have been helpful in the project. while the routing layer does need some love, the routable components ended up just not being the right solution. I think some intermediary solution exists. maybe something like I've laid out here: [https://nullvoxpopuli.com/2019-05-14-ember-2019-roadmap](https://nullvoxpopuli.com/2019-05-14-ember-2019-roadmap)
It was interesting working through people's mental model of expectations for execution order of the module graph. Since it executes in Post-Traversal order (starts from bottom left corner of graph and works up) execution order may not align with developer expectations. &amp;#x200B; For example if I have a module that imports a, b, c... you would expect them to execute in that order. But if a, something I downloaded from npm, also imports c... c will import first. &amp;#x200B; 🤯
This [document](https://tc39.es/process-document/) outlines the process. Anyone can make a proposal but for it to advance to a stage, even stage 1, it requires a delegate of a member company to present the proposal at a meeting and request stage advancement.
This feature allows you to use await outside of an async function, but only at the top level within a module. The biggest benefit imho is the ability to do asynchronous work and then export a symbol to other modules.
Vue and Angular all day
good suggestion @sdraje, thank you! &amp;#x200B; With 2 steps, I am able to get what I wanted: &amp;#x200B; &amp;#x200B; let sorted; if (data.length) { sorted = groupBy(data, "league"); // simple sort } const deepSort = {}; // now we have 2 objects, which need to be sorted again: Object.keys(sorted).map(league =&gt; { deepSort[league] = groupBy(sorted[league], "division"); }); setDataState(deepSort); // now my app state is able to use data. // taken straight from reduce() docs on MDN: const groupBy = function(array, sortProp) { return array.reduce(function(acc, obj) { var key = obj[sortProp]; if (!acc[key]) { acc[key] = []; } acc[key].push(obj); return acc; }, {}); };
Most of the time, your components should be simple functions that take props. Connect them to state with containers, and call actions on your state. They should be responsible for nothing but mapping state views and calling actions from user events that are passed through the component's props.
I agree with you, essentially, on the nature of components. The rest of what you say is all React idioms that aren't, generally, how I would choose to do things if working alone.
With immutable data structures, it's trivial to have 2 identical objects occupy the same space in memory, without needing to worry they might diverge. This in turn also makes comparing objects much cheaper.
https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2
Perhaps "jank" isn't the best word to use. I just mean it is... weird.. different... against the grain. Usually you put the JS in the HTML, but with JSX you put the HTML in the JS.
Well done. Love the analogies used too! Please post the updates in the series.
For me the confusing part here is the combination of the keyword `function` and arrow functions (`m =&gt; m &gt; n`) which I consider to be a major no-no; one should always stick to one if possible. I know that the scopes work differently on these but if code keeps jumping back and forth between the two it simply makes the code more difficult to read. I think a much more easy to comprehend form for this function would be: ``` const setGreaterThan = (n) =&gt; { const evaluationFunction = (m) =&gt; m &gt; n return evaluationFunction } const greaterThan10 = setGreaterThan(10) console.log(greaterThan10(10)) ``` Deciding whether to write (easily) understandable code or the most compact code should be done by evaluating which is really more important in each case.
&gt; global state share, it is terrible. what do you mean? &gt; Actions are fucking stupid how so?
Hi /u/Antt1234, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kaeroku, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mattaugamer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sweeterman3, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/daleadil, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lucksp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tchaffee, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wagonn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jetthoughts, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ImTalking2U2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/anxiousDeveloper1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Kevvvvinnnn420, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/i488, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sick project! I'm still fairly new to GraphQL, but I've built RESTful APIs with mongoose/mongoDB. I think your project can help bridge between REST Model vs GraphQL Model. Btw, the source code is clean!
Hi /u/alanhoff, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/maestro_man, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You can start with HTML CSS and JavaScript at first. After understanding the basics about the same, try to go through how the browser handles the rendering and optimisations of the web pages and different aspects of UX. Then you will be ready for adopting the different technologies related to the current scenarios.
[removed]
Thank you! I would appreciate your contribution via stars and forks to make this better :)
Learn Js first by making the generic trello project etc, should know how Js works (hoisting and closures), a bit of html and css, after you are comfortable with those try to learn a framework or library (Angular / React) Guides just Google them :P
&gt; this is frontend in general. React is all about this. :) Yes, but this is one point the author of the article linked here complains about.
right, but I'd argue that patterns are abused everywhere if you don't know the ecosystem your in. Like, prop-drilling runs rampant everwhere
I have a lot of prop drilling in my code (didn’t even know that this had a name), but so far it only caused a few minor issues that were identified and fixed quickly. However, I do acknowledge that it’s less than beautiful in the code.
Should I start with basic HTML or bootstrap?
Hey Thank You for the advice :)
Bootstrap is basically css library just to ease the development process. If you want to learn then avoid using bootstrap for now.
It's not just about beauty in the code, it's about maintainability and how easy it is to totally refactor things. when you subscribe to prop-drilling, when you want to add or change something, you need to do it in like, 5+ places.
True, but at the time th amount of resources on Ember was limited to the docs and maybe 1 course.. on top of that it’s a lot easier to do bad react and get what you want than it is in ember.. at least that’s my experience
Yes, but what's the alternative? The one I found online was to stuff your whole state for that component into a single object and drill that one down, but that just kicks the can up the road.
I made a sparkline generator, both in JavaScript and as a React Component. [sparkline-svg](https://github.com/CharlesStover/sparkline-svg) can be used to generate a sparkline's `&lt;path /&gt;`, `outerHTML`, and (the reason I made it) as a data URI to use [as a background image](https://i.imgur.com/LnNTJpJ.png). [react-sparkline-svg](https://github.com/CharlesStover/react-sparkline-svg) uses the above to generate the sparkline as a React Component using SVG. &lt;Sparkline values={[ 0, 2, 3, 1, 4 ]} /&gt; &lt;Sparkline fill="rgba(0, 0, 255, 0.25)" height="48px" stroke="red" values={[ 0, 2, 3, 1, 4 ]} width="100%" /&gt;
so having an easier time writing bad react is a good thing? :) (fwiw, I think the easy of "just picking it up" to play with, is a very good thing, and I'd like parts of ember to get there (via glimmer (the component library used))) imo, frameworks, regardless of language/intent/etc, aim to reduce the number of footguns just using libraries enables
In React, you use either Redux or Context, whether global or local Contexts. This way, you only access your data where you need it, via hooks like, `const { myData } = useMyContext()` In Ember, you can also use redux, but the more canonical way to manage state is via services and dependency injection. But in every where, you manage data in a semantically appropriate location, and only pull it out of that location where it is to be used directly. No need to pass things through layers that ultimately don't care about that data.
That means that there's no clear flow of data any more, since anything could access anything. You can do that in ember via services, but when you suddenly have an invalid state in one, it's a lot of work to track down all write access to that property.
You do not want to get/send frames, if you do you'll need to severely reduce the resolution to get a smooth flow. What you want to send is a raw stream instead. The server will act as a bottleneck, webRTC technology is supposed to solve this problem but generally you'll want to use websockets to handle streams going client to server to client.
Both are quite good, I've used both commercially for a number of years now, which one would I choose? Well that depends... If I want something as small file size as possible then I would use three, however if I have a larger more complex project and a 1mb js include is no issue then I would choose bablyon every time. I also find working with Bablyon camera's a lot smoother and nicer than three (I made a point of this to MrDoob many years ago is comparison to Away3D but nothing really came of it). Some quick points: &amp;#x200B; **Three** \- Small includes \- Good documentation and examples \- Many people use it and can find most answers googling \- Can have many includes for features you need, soon piles up and sequence of adding some includes matter which you wont find much info on \- Camera's motion on some of the controllers are overly sensitive and stuttery and the setting to try to adjust them are in the 0.00001 values and don't seem to help that much. Babylon make easy work of this, most sticking with defaults is butter smooth with inertia. \- Syntax / commands keep changing \- Loaders are a mess, google usage on some loader and you will find many examples and many wont work. \- Seems to change all the time, what worked a year ago, doesn't work today. \- Bugs can be left in for years &amp;#x200B; Babylon Positives \- Smooth \- Great playground \- Good docs \- Many people use it and can find most answer googling or in the forum \- API doesn't change that much between version \- Bugs are often ironed out quite quickly \- Can be quite a large include for some projects \- Camera controls are nice to work with out of the box \- Good loaders, Blender scripts \- Custom compile of include features online &amp;#x200B; &amp;#x200B; And on... For me it, it always comes down to asking myself the following questions: &amp;#x200B; Q1. Is it a small project / task? If yes, probably go for three. Q2. Googline for examples, which engine finds the most and best examples which meet my requirements? Q3. Does it require messing with the controller/camera a lot? If yes use Babylon. Q4. Does it have to be as small file size as possible? If yes, choose three. Q5. Will you be making changes to this for years to come? If yes choose Babylon. &amp;#x200B; D
&gt; That means that there's no clear flow of data any more, since anything could access anything. not really, it's all ctrl+clickable. &gt; but when you suddenly have an invalid state in one, it's a lot of work to track down all write access to that property. what do you mean? can you expand on this?
thanks for the suggestion. which one would you recommend i start with.
i see. rewriting it myself as an anonymous function also helps. thanks
They are both great! I personally prefer using Vue, mostly because I'm not totally sold on JSX
same for me, also Vue.js has an Extensive Documentation and is very intuitive and easy to understand compared to React
Go to the main GitHub page, you will find the order. Or you can directly read Scopes and closures. I will recommend read them all.
Vue also uses Virtual DOM. It also compiles to same render like functions to what JSX is being transpiled by babel. Both libararies are a lot more similar than they are different than many developers like them to make. There are a few miniscules differences how changes are tracked and Vue tends to favor template like abstraction over jsx when it compiles to render function. There is, however one thing I like about Vue. React went full crazy with functional javascript and immutability. And as smart as some people like to pose this supposedly is, is actually a stupid workaround to deal with constant state changes. Instead of really addressing the problem how to manage state changes in preformant way, we just slapped on bunch of patterns which javascript doesn't handle all that well (stupidly copying objects) and janking garbage collectors with immutable data structures which hold reference to previous data structures. Also due to this stupid copying and inability to track actual mutation change, entire components are being rerendered instead only the values we care to rerender. Making library like React impose relatively high maintenance cost once application grows in size. Instead of trying to solve actual business domain issues, a lot of hours are being spent to "optimize" or actually make code work in React, by littering all over the places with memo, shouldComponentUpdate, tracking reference changes from redux etc, due to the fact that there is very little reactivity in React. Bottom line, React is state driven, not event driven. And as much as React did a lot of javascript community at large I also think it was too good for all of our sake and we stopped innovating or looking for actual answers. As far as I'm aware Even had a bit different idea how things should work, but due to the fact that it's based on virtual DOM as well, made him quite limited in his design choices. It's still a push for a right cause in my eyes, but our minds have been shackled by this virtual dom stuff for just too long I think.
&gt; not really, it's all ctrl+clickable. Yeah, that's one aspect of ember that's often overlooked: it's really bad with IDE integration, because of its custom getters/setters. Fortunately, the core team is working on removing them, so this will improve (also, it will allow TypeScript support). &gt; can you expand on this? For example, a property on a service is suddenly `null` after a long string of events, when it should contain some value. How do I know which component set it to `null`? What I do in such cases is to search the whole project for `.set('propertyname',`, but it has failed in some circumstances for me, for example when propertyname is a very common name I used all over the place in different objects, so the search returns hundreds of false positives. It also fails if I accidentally used `.set("propertyname",` or `.set( 'propertyname',`. I tried observing changes to the property and set a breakpoint there to catch these, but sometimes this triggers a dozen times for the single action, making this tedious. Also, the stacktrace usually contains about a hundred lines of internal ember function calls, so I can't find my own code where it happens. This is especially problematic for promises, where the original caller might simply not show up in the stacktrace.
I apologize. I think I may have miscommunicated. I am not the one offering the video. The video is being offered to me and I am trying to scrape data from it. So, I do not have access to the server. I only have the video using html and js from the client side browser to work with.
&gt; it's really bad with IDE integration, because of its custom getters/setters yeah, that's changing in 3.12 (~7 weeks away?) Also, with anything, you need the language server installed. https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-ember-unstable for VSCode) that'll even get you ctrl+clicking from templates into other templates or into related JS/TS I'm working on a package for neovim for coc. &gt; also, it will allow TypeScript support there already is TS support :) &gt; How do I know which component set it to null? use a conditional breakpoint? &gt; but it has failed in some circumstances for me, for example when propertyname is a very common name with native JS, and tracked properties, the js or ember language server can show you all references. :) &gt; It also fails if I accidentally used .set("propertyname", or .set( 'propertyname',. yeah, using strings for anything is kinda terrible. It's why I started using tracked properties as soon as they were available (in canary) &gt; I tried observing changes to the property and set a breakpoint there to catch these, how would you do this? observers are an entirely different construct. I'm confused. &gt; but sometimes this triggers a dozen times for the single action, making this tedious. it shouldn't -- this means there is a deeper problem. computed properly only trigger once per dependent change &gt; Also, the stacktrace usually contains about a hundred lines of internal ember function calls, so I can't find my own code where it happens. Depending on where this is, it could be a red herring. &gt; This is especially problematic for promises, where the original caller might simply not show up in the stacktrace. yeah, debugging async code is hard in most ecosystems. it's tricky in JS because the language isn't naturally async (depending on your browser), so debugging through the runloop / regenerator runtime kinda sucks
&gt; yeah, that's changing in 3.12 Even for proxy objects? I have a lot of those in my code, and they can't even handle getting regular properties. &gt; there already is TS support :) In some way, not for properties. &gt; use a conditional breakpoint? On what line of code? &gt;&gt; I tried observing changes to the property and set a breakpoint there to catch these, &gt; &gt; how would you do this? observers are an entirely different construct. I'm confused. `myBreakpoint: observer('problematicProperty', function() { console.log('Hello!'); }),` and then add a breakpoint on that observer. Whenever the `problematicProperty` changes, I get thrown into the debugger. &gt; yeah, debugging async code is hard in most ecosystems. Yes, but especially so in ember. For example, it catches all exceptions, puts them onto a queue and then rethrows them asynchronously. If you catch those in the web inspector, the stacktrace only contains the runloop tick over and over again, and all of the state that caused the exception is gone.
The best thing you can do is to get your hands dirty. Whatever it is, if you have a project in mind, maybe your mom needs a website or something. Then you ask google. Google has all the answers (actually stackoverflow has the most, but google will take you there) :D I promise you. Reading thousands of articles on the subject still won't give you as much as building a few websites / web-apps, just get your hands dirty kid, whatever it is, you'll keep growing! Also, your interest will shift. But embrace it!! :D Some day you wanna build an app, the other you might wanna build a library/tool
Start with basic HTML, and build your own stylesheets. That's how you learn for real. Then when your boss tells you you can't roll your own css framework but insist you using bootstrap/bulma. Only then you use it :D You should always aim to build it yourself! Whatever it is
Hi /u/Div_221996, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I agree with you to a certain extent. React can be performant if you know what your doing and how it really works. You don’t get a free pass shut off your brain just because you have a virtual DOM to help manage view updates. You still have to engineer a working app, just like with Angular, Vue, Svelte, etc. I don’t think functional programming is all that bad for the GC, but again, you have to know what you’re doing. Part of what makes immutability performant is simply not tracking references to objects as the primary means of binding data to behavior. Functional programming ideally optimized your data (and your code) for *deletability*. Ideally most of this work should happen at compile time, so neither the client nor the server have to handle all that computation at runtime. I’ve recently picked up ReasonML, which is a functional language, and I’ve been very impressed with its performance. In particular, the compiled JS output is usually highly optimized imperative code, but the language you’re writing is completely functional and strongly typed. I love it. Personally, I think compile-to-JS languages like ReasonML are the future of web development. The upside is too good, IMO.
Crazy one you got there buddy. Sorry, I've got nothing :D GL&amp;HF tho
Actually I think React’s documentation (particularly their example code) is pretty solid.
&gt; Even for proxy objects? I have a lot of those in my code, and they can't even handle getting regular properties. I don't actually know. That'd be a good question for the ember-data team (I think proxy objects are mostly in ember-data?) &gt; In some way, not for properties. I think the language server handles that, not sure I remember though. been a while since I've used .get/.set &gt; On what line of code? Either in a custom setter for your property that wraps a private property, but based on other things you've said, I think there is a bigger problem than finding "what is making the property null" &gt; and then add a breakpoint on that observer. Whenever the problematicProperty changes, I get thrown into the debugger. yeah, that's not really gonna give you any stack traces that would lead to what triggered the change. Observers are a side effect of change that run in the runloop, and not a _direct_ result of setting a property. sometimes observers fire after _batches_ of changes. &gt; Yes, but especially so in ember. For example, it catches all exceptions, puts them onto a queue and then rethrows them asynchronously. If you catch those in the web inspector, the stacktrace only contains the runloop tick over and over again, and all of the state that caused the exception is gone. that's only true of queued async calls. If you invoke an async function yourself, or via an action, or inside the beforeModel/model/afterModel hook, you get the trace you expect. basically, if you doing runloop stuff, then you're gonna have a hard time tracing stuff. like, this is a route file I have: https://github.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/routes/application/route.ts https://github.com/NullVoxPopuli/emberclear/blob/4aae546a0508efb46855b635a84f9db93ecb6354/packages/frontend/src/services/settings.ts#L86 when stuff goes wrong there, I get told where the errors are :)
Hi /u/brillsmind, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Dumbest thing I ever heard. All features can be used too cleverly and make things unreadable. Destructuring is the best thing that happened to JS and is always almost the correct choice. Without it there's no way to know what's inside an object.
sorry but i fail to understand how i can store data related to a html element in a js object without a reference to that object, which in this case i need. &amp;#x200B; Step by step, this is an example of what im doing: User select 3 countries, an indicator: Total population, and a year span: 1972-1974. Then he submits the form. I preventDefault and process the form with JS. i format the input values and make a request to an api that gives me the data. I Dinamically create HTML divs and i populate them with the data i received. &amp;#x200B; This is where my doubt is: If the user submits another form with the same input values(totally or partially) i dont want to create all those divs and populate them with the same data again. So my idea was to use a data-set attribute when i create the divs like: &lt;div data-country=Germany data-year=1973 data-indicator=population&gt;&lt;/div&gt; &amp;#x200B; and, in case of new input, iterate over the divs and check if they have the same input values as the new input values, and if they do not match, replace them with the new values. &amp;#x200B; &amp;#x200B; So how can i recreate this functionality only using js objects as you say and without interacting to the dom? &amp;#x200B; Thanks for your patience.
React has definitely become frameworky. For the most part, it calls your code rather than you controlling flow, context is analogous to Angular $scope, error boundaries/ shouldComponent catch are custom control flow, hooks are a form of DI system, useState/useReducer are uh not view management, etc... And it definitely enforces structure (declarative paradigm, components as the encapsulation mechanism, rule of hooks, etc).
I built a personal, all-in-one travel assistant that takes the guesswork out of travel: https://www.wanderium.com I spent the last year teaching myself React (and full stack dev focusing on serverless technologies like Lambda) so I could build the app I'd been dreaming about. React-wise, I still have a long ways to go and there's definitely areas I can optimize but it mostly does what I want it to do! Coming up I mainly want to write tests (lol), improve how I use Apollo/GraphQL (could be much faster), and convert it over to Typescript.
Hey! Awesome project. Quick things on it: I wish there were more strongly typed things (for instance, serviceProviders just takes string values). Related to that, I'm not sure why I get no results for this query: ``` { shows(where: { serviceProviders: ["Netflix"] }) { _id name } } ```
Thank you. I wouldn't have figured that out.
&gt;Usually you put the JS in the HTML, but with JSX you put the HTML in the JS Um, and putting a fake js lingo into html that is separated from the environment, has no access to scope, doesn't get transpiled along with the rest of your code and bound to a single platform, that isn't weird to you? It is the strangest thing to me that of all things people cling to the html artefact. JSX isn't HTML, it's a just bunch of chained functions which, when executed, represent a logical tree structure: &lt;div class="test"&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt; el('div', { class: 'test', children: el('span', 'hello') }) It's not tied to a platform, it establishes a natural component-pattern and you get an eco system for free that's [working on all platforms](https://github.com/gaearon/react-blessed-hot-motion).
Looks awesome will definitly use it
Do not click that link, it's spam
When you say angular do you mean angular 1 or 2 or some other version ?
While I like the sentiment about reducing foot guns. I do feel like the framework shouldn't stop me from turning off foot canon mode. Guidance is better than force. Just my opinion, but crap code can be a good thing to learn from. Guide me to the correct answer but still let me do it my own way and let me learn from my own mistakes. That was what was frustrating when I used Ember. Just let me do my work I have a job to do. Seeing a result with good or bad code is still a result and is great for encouragement. A framework is a tool like anyother I should be able to use the tool anyway I need to get my job done. Within reason of course. A screw driver is meant for screws, but I have used them as a prying devices, wedges, scrapers, turned the handles into a hammers, hole punches. Sure there are other tools meant for those task and do the task better but the screw driver was in my hand or within reach and it still worked. Or it didn't and would end up setting up the better tool but the screwdriver didn't try to stop me and I learned from it. Like I said before it has been a while since I have used Ember last so it could have got less opinionated. People learn quite a bit by writing crap code at least they could if they looked back at it. I am probably an odd ball because I enjoy looking at my old terrible code because there are always lessons learned in them. I honestly think more people would have adopted Ember if it cared less and acted more like a small modular scaffold that you could fit together in any way you needed, rather than the massive scaffold that felt inflexible. Sometimes the simplest tool is all is needed, like the screwdriver.
&gt;You still have to engineer a working app, just like with Angular, Vue, Svelte, etc. Yes. However there are different gradients of this depending on the tool. And to try to brush them wide with the same stroke only serves in attempt to bury the underlying issues, important issues, under the rug. &gt;I don’t think functional programming is all that bad for the GC, but again, you have to know what you’re doing. Well, there are two ways to deal with this. One is to stupidly create new objects each time state changes which is very resource expensive task. Or to shape new object which simply holds reference to previous objects, which janks RC GC's. And javascript GC is based on reference counting. &amp;#x200B; So no, functional programming is done always at the expense of performance, I mean there is a reason why Rust encourages mutability, although with very strict control, because it goes directly against languages like C++. What I'm a bit concerned that js community at large grew comfortable with this idea, that is that they have to sacrifice performance to have easy to reason about code. My point being, that we should continue to question this idea. And I think what Rich Harris did was very important to shake the waters a bit and show people what can be potentially possible. When you think it's done by one person vs React which already has such active development and thousands upon thousands of hours of engineering put in it... and have one person, frankly, wipe the floor with it's own demos React takes pride on, you have to start wondering, perhaps there is something rotten at the state of Denmark. And we learned to accept some pain points, mainly caused by very tools we use as necessary, when chances are they actually can be solved if we dare explore.
Yeah haha
Agreed. As I mentioned in the article, I only started paying close attention to code quality and studying software design when I found myself neck deep in 200K+ lines of bad startup code.
Start ups do MVP's. MVP's are intended to be scrapped once investors are happy with the concept. Obviously that's not always the case, however, the fault lies more with the managers than with programmers here. Part of working with products and not baking projects, is being able to identify when technical dept can be acceptable and when following principles strictly is foolish. Although I would argue that SOLID on it's own has a lot of esoteric nonsense packed in it, like what on earth even is single responsibility. Yeah and don't give me that "one reason to change" thing. It's meaningless unless you understand the domain (business wise) you're working in. And you can't understand the domain unless you actually have experience within the domain. That's the crux of the matter, why people may say that you need mentorship. Can you do it without it? yeah sure, it will just take a lot of pain and stumbling to get there.
Man, this looks so interesting to try out. I just barely have the time, lol.
Man, this guy is a machine. And yet he finds time to drop daily in discord server and do some neat webGL stuff for NYT.
This was a project with code, not asking for help. Why was it removed?
I wonder how many views my posts on graphics programming would get given the niche audience. The only thing I would regret not going to Medium is it seems to do legwork on promoting posts, but I have no clue on how their authors are treated. I have only ran blogs on WordPress.com and that's it.
I pretty much agree with everything you're saying. Definitely, agree that Single Responsibility is only possible if you ask enough questions to understand the domain. That takes a lot of upfront effort. That's design. And design is hard. I'd also say that you have to *care about code quality* enough to ask domain experts and senior developers questions about the domain you're working in before committing to writing something potentially hard to change. So yeah, mentorship/talking to experts goes a long way. For example, you're not expected to know everything about marine magnetology right away, but to produce something of ok quality, we have to learn the domain and ask questions.
This is awesome! Question for you, where do I get the data to populate my mongodb instance when I have the API up and running?
Oops. /u/alanhoff I'm reinstating it, sorry about that.
I was really confused. Thx for reinstating it.
I'm sorry if it came across as "gatekeeping" to you. I'm no Uncle Bob, and I only recently became passionate about software design after realizing it was what I had been missing from my professional career thus far. I think that the schools and boot camps should place more importance on craftsmanship and I think we should try harder to find time to mentor junior developers and bootcamp grads on its importance as well. I never had that type of mentorship entering the field.
[removed]
Thanks kenman!
I need a boilerplate that doesn't turn my React app into a maintenance nightmare with functions or methods returning a highly-nested JSX soup of anonymous functions with destructured object arguments with CSS and GraphQL template strings.
Amazing idea! Must be a lot of work to realize this. You can contact me if you need any help. Definitely a star from me!
Mostly 2+, and for that it’s been for me at least, 5, 6, 7. I am being considered for a big angularjs to angular 8 project.
The angular team is trying to make it better for sure, although it would be nice if modules didn’t exist.
How have you queried all of these services?
Yes!
How about a React app that lets you make a few selections about what kind of React app you want to build, and then suggests a React app for you to build? Then you can use it and get more suggestions for app ideas to build! (This definitely started as a sarcastic suggestion, but it could actually be really fun! Don’t get too caught up about making sure it gives reasonable suggestions - the app can make ridiculous ideas and leave it up to the human to pick the ones that sound interesting or fun.)
Sand. Sandwich. Yum. -- Honestly though you're gonna learn a lot about JavaScript development by learning (and doing a project with) any of them. If you're a beginner, then play with all of them. Make a simple app with each of them, and compare their strengths and weaknesses. People like to play this game where X is always bad and Y is always good, but in truth, *most of the time*, different libraries/frameworks are better for different use cases.
All of them. I recommend you start with Vue.js, it's the easiest to learn while introducing you to the core concepts of modern frontend web framework. React &amp; Angular are much easier to pick up once you have this base knowledge. As for the last two, I'm not really familiar with Ember but I don't hear a lot of positive things about it. Regardless give it a try and see if you like it, I would just recommend you save it until last if you are trying to develop your marketable skills. Meteor seems like overkill tome, but other people swear by it and it integrates with the other frameworks. I would just suggest you check out socket.io because I think that mixed with one of the first three frameworks can accomplish a lot of the things meteor does with less complexity. In short. Check them all out.
Do you know Javascript? The correct answer to your question is Javascript. If you do now Javascript, you need to make sure you learn it even better. You should know it very well. Then learn React, Angular and Vue. Not one of them. All of them.
https://svelte.dev
All service providers are lowercase and I'm working on calling to get data for multiple service providers :)
TL;DR You can copy the image from a video element to a canvas using [Canvas.drawImage](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage). Once it's on a canvas, you can do a lot of things with it, like downloading it as a file. To auto-download a file, create an 'a' tag and click it programmatically. &amp;#x200B; More detailed steps: * Create a canvas (new HtmlCanvasElement) * Set the canvas' width and height to the video element's videoWidth and videoHeight (best resolution). * For each frame: * canvas.getContext('2d').drawImage(video, 0, 0) * var url = canvas.toDataUrl('image/jpeg') * var name = 'VideoName\_' + video.currentTime * var a = document.createElement('a') * a.href = url * a.download = name * document.body.appendChild(a) * a.click() * document.body.removeChild(a) The only step here I'm not sure about is toDataUrl, but it looks like it should work. All the rest I have in production code (including the weird dance to download a file). If the video is in mid-repaint, you might get all black. &amp;#x200B; Let me know if you need more help.
I'll be adding the seeds so that people can have few samples and help me to make the queries more better :)
Yes I'll need a lot of help in making the query set easier for people with lot of good documentation. I'll be adding more information on the repo soon :) Thanks you so much for your interest!
That's great. My question was more about the TV show data itself. How do we populate our own database. Where do we get the data from?
All the service providers are lowercase and I'm working on making it easier to query by multiple service providers at once
the right way to spell "which"
I have to formulate a strategy and easy to add process in few days as I was unsure about the response I'll get.. I just made it as a hobby project without knowing if I'll get any help or not. But seeing the response I'll open something for adding or updating my datasets with a frontend :)
Is the console throwing any errors?
If i read correctly, ember allowed it and didn't force your team. You still shooted yourself in the foot. &amp;#x200B; I am in the opposite camp, ember js makes sense to me, actually, react and vue also make sense to me in a way, but when I use them, I am almost using them like I do ember. &amp;#x200B; I guess I was extremely lucky to have a spare time at work to really understand ember at that time, and it was hard back then, everyone was "angular 1 this" and angular that. &amp;#x200B; If i may suggest, your "frankenstein" ember app should not be used to evaluate ember, maybe sometime in a small personal project give ember a try, if possible after octane and just following octane guides. There is a lot of golden info on the RFC's that unfortunately doesn't get out, and its not made easy in pretty blogs, especially the "why's" of certain details of emberjs.
As you go through your day take note of what you're doing and think if an app could help. Or -- think about any hobbies you have and how they could be helped by an app.
He keeps avoiding questions like this so he must be scraping
Hi /u/Toolalo, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Maybe sanitize the query with a `toLowercase()` on the call values?
Take a look at job postings for your area and see which is most in-demand. If you're in the Midwest, it's probably React, followed by Angular. Many companies need devs to build their new projects in React or maintain their older Angular projects around here.
Svelte or lit-html
This is what it looks like in the console: http://i64.tinypic.com/2hr03yr.png There are no errors- the valid url arrays are being displayed by the console, but not returned by the function. It has something to do with being Asynchronous... I just can't figure it out.
Use React to render something in the 2d canvas: click to place a square, click within the squares coordinates and drag to move the square. You could make all kinds of tools and neat things this way. You’ll use just nearly everything React has to offer.
&gt; Without it there's no way to know what's inside an object You were saying something about "dumbest thing I ever heard" ...?
Is programming ever really a sane endeavor?
Just build a retro game like breakout or something
Well, $._findService doesn’t return anything here. I think you want to return urlCheck.
Without looking too hard, why is 'await' in a non async function? const checkServices = async(json_data) =&gt; { return await Promise.all(Object.keys(json_data).map(url_to_check =&gt; isServiceAvailable(url_to_check))); };
Unmaintainable codebases have been known to lead to insanity.
Minesweeper
I probably should have explained better- the problem isn't in this function... I was just including it for reference. Everything works fine up to the "return value" line of $._findService().
I shoukd have explained better... url_check returns a boolean value, if that value is "true", it creates the service_to_use array, which is what $._findService() is supposed to return. The console.log outputs show that everything works fine up until the "return value;" line, which appears as undefined in the console because of the asynchronous nature of the function.
``` if (early(toBed) &amp;&amp; early(toRise)) { return Man.make(["healthy", "wealthy", "wise"]); } ```
Try Wes Bos's JavaScript 30. We definitely used advanced array methods in a few exercises. https://javascript30.com/
Perhaps we should have a "structural equality" operator? Perhaps something that checked the `enumerable` portion of an object tree to compare equality of all primitive leaves of the tree, and disregard referential equality?
Is this an actual copypaste of the code? If not, I assume url_check.then() should correctly be something like url_check(url).then(), which means url_check is returning a Promise, not a bool. Did you try adding a return on that line?
That could end up working really well. To be honest, I don't think language authors should base their design decisions on what it would feel like to learn it as a beginner. Everyone is a beginner until they invest some time and learn the language. Being a "beginner" is hopefully a temporary state. The language should be designed with much more important things in mind.
Is this along the lines of what you are trying to achieve? const settle = async promise =&gt; { try { return { value: await promise, state: 'resolved' }; } catch (error) { return { reason: error, state: 'rejected' }; } } const settleAll = promises =&gt; Promise.all(promises.map(settle)); const ensureProtocol = url =&gt; /^https?:\/\//.test(url) ? url : `http://${url}`; const isServiceAvailable = url =&gt; urlExists(ensureProtocol(url)); const checkServices = urls =&gt; settleAll(urls.map(isServiceAvailable)); const findServices = async json =&gt; { const urls = Object.keys(json); const checkedUrls = await checkServices(urls); const existingUrls = checkedUrls.filter(({ state }) =&gt; state === 'resolved'); return existingUrls.map(({ value }) =&gt; ({ url: value, data: json[value] })); };
This would actually be really helpful haha
Remove the commas before the `case` keywords
thanks for the help HipHopHuman- i appreciate it. unfortunately, your suggestion only returns a promise with 4 arrays within it that only contain boolean values. i am trying to get $._findService() to go through the list of URL keys in the stated JSON, check if the URL is working (let's say it is the "ipinfo.io/json" key), and if so (true) return an array that looks like: [0: "ipinfo.io/json", 1: {City: "city", Country: "country", IP: "ip"}]. I can see from the console.log output on my end, that my original code works up until the "return value;" line, I just cannot get $._findService() to return the array (it is just undefined). I wish I could explain it better, because it feels like this could be solved with just an added line to my original code. I appreciate your effort very much though!
Also, this isn't the source of your problem, but \`return await\` is redundant in your async functions. [See this eslint rule](https://eslint.org/docs/rules/no-return-await).
Pokedex, Reddit, Hacker News are all fairly beginner-friendly, real-life-ish projects that require fetching data from existing APIs. Implementing a game similar to [A Dark Room](http://adarkroom.doublespeakgames.com/) is also pretty fun. I did one as a test-bed when I implemented mithril.js, a react-like framework, a few years ago.
Thanks!
I'm one of folk being curious of how to populate db.. Is it scrapping? or any other cool way?
Thanks for the quick response! Docs had them as uppercase when they were mentioned.
Because you don't have return statement in findService. This just means there's implicit return undefined and the end of function. And that magic with new Promise doesn't work there way you think it works..
You can simply track the inputs and use them to compare with subsequent inputs. If all of them are the same, then do nothing. Otherwise, perform the API request with the different inputs. e.g. if the inputs are retrieved and stored into 3 variables: `field1`, `field2`, and `field3`; have another set for storing the previous inputs. e.g. var prevField1 = null, prevField2 = null, prevField3 = null; When deciding whether to do an API request or not, check the current inputs against the previous ones. e.g. if ((field1 != prevField1) || (field2 != prevField2) || (field3 != prevField3)) { //one or more of current inputs are different than previous inputs. //perform API request, then update the display. //... //save current inputs for checking next inputs prevField1 = field1; prevField2 = field2; prevField3 = field3; } else { //all of current inputs are same as previous inputs. //do nothing. }
Always return your promises!
Thanks!
Thanks! &amp;#x200B; I worked it out with the help of [filipe at stackoverflow](https://stackoverflow.com/a/56511486/11616368).
For my latest private project I straight up used Google sheets for database and UI. It's beautiful how fast did I get something finished.
I created something quite similar. I have a shop site that processes payments with stripe. Stripe then sends a POST request to my api and sends the customer an email.
you really shouldn't have anything before the opening html tag besides the doctype
This was actually the first thing I made on my own in React 🤔
That's precisely what I felt. In many cases, Sheets could power the entire backend. Just create the front-end and access your database using the Stein API. A new type of JAMStack setup!
It's because these functions are not the end of the tunnel. Once you get into FP, you really need to learn about function composition, currying, purity and point-free style. There's no more accessible resource than Brian Lonsdorf work. Check [https://github.com/MostlyAdequate/mostly-adequate-guide](https://github.com/MostlyAdequate/mostly-adequate-guide)
https://developer.marvel.com/ Marvel has a public API that has a huge database of all the characters, comics, stories and events in the Marvel universe. IDK what specific APP you can make but its a good learning experience on using remote data and a data set that is deeply recursive. (Comics, link to stories that link to characters that link to other stories and so on..)
&lt;!-- Some random text --&gt;
Quick and dirty: I would just use a string parse (index location) to find the location of '&lt;html&gt;' and just remove everything before that location if it's found. Haven't tested this code as I'm just typing it out on my phone but here goes: ********** //htmlstr equal to the messed up html const htmlstr = 'blah blah &lt;html&gt;&lt;p&gt;good html&lt;/p&gt;&lt;/html&gt;'; //Get an uppercase version so we don't have to deal with various versions of '&lt;HTML&gt;' or '&lt;htMl&gt;' etc.. let tempstr = htmlstr.toUpperCase(); //Find the first occurence of '&lt;HTML&gt;'.. NOTE: the lines here and toUpperCase above can all be combined but I'm doing this for clarity... let htmlloc = tempstr.indexOf('&lt;HTML&gt;'); //Now we know the location of the tag just remove everything before that position in the original (unmodified) string (I'm putting it into a var but you do whatever).. let result = htmlstr.substring(htmlloc - 1); ********************** That should give you the idea...
It's for a security testing purpose, so I need to have the random text on the start of the Doc and the html code later.
You could look into the functions provided by [lodash](https://lodash.com/docs/4.17.11)/[ramda](https://ramdajs.com/docs/). There aren't really examples, but I feel like grokking some of the trickier ones might give some good perspective on how to do concise data transformations.
This and with Google apps Scripts, your requests can run requests!
First of all I want to say that I might be biased by the usage I see of a spreadsheet beyond its intended "usage scenario" (for example as a bug tracking system by project managers). That said I'd like to know what's your experience when dealing with rich text (for example tables and images embedded into an article body) or anyway a long text like a full article. At the surface this approach reminds me of something we used to do 10/15 years ago with Excel or CSV and cron scripts (of course now everything is easier to implement). Given I'm a strong fan of jamstack, where applicable, from my point of view using spreadsheets as database has its niche but in most cases you'd end up with some sort of backend system anyway.
I wouldn’t want to migrate it either, but that doesn’t mean I wouldn’t rewrite it with the newest Ember. Anything that lags that far behind isn’t going to migrate well. It’s an inherent cost of business. Backwards comparability is great, but it’s not going to save the day 4 years later. I would look at it as a fresh phase and choose based on goals and tools - regardless of past choices. Ember is the best tool in many cases.
A few guys in NI (I have contributed but don't want to claim having the idea),
“Not a whole lot of experience’”- “didn’t speak up mostly due to lack of confidence” - “I don’t understand it” - “trying to find the least painful way to accomplish a task” - “fought and abused the framework” - “it’s always painful and brings me a sense of shame.” This sounds pretty honest. Sometimes shame is just worthless / and sometimes it’s with good reason, and can be an important teacher.
I think I remember this being announced on Reddit. Great involvement in the community with a Medium article. Is it powered by Redux under the hood? What are the pros and cons compared to ReactN?
I do agree mostly too and I got your point, although if we need to build a big project in a Javascript framework with a tight budget, I think Vue.js will win because web dev with beginner javascript level can pick up vue js quite quickly, whereas with react you have to find web dev with expert/solid javascript level
I was wondering for so long thank you ! Next question : is it gray or grey ?
That's a difference between British or American English 🙂
Hi /u/Paddyhallek, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Nah I did not
what's the point of this? The google sheet API is already pretty high level, there's no need for a wrapper around it
Google Sheets is great as a data source and editor for all kinds of projects. I've used it to tweak values of games or allow the content people to prepare and edit catalogue data. You can also easily read this to your regular database or some processed/cached format on the backend.
i mean did you take a look at the project you can quite literally see exactly how it wraps around the API and what other services it offers
Doesn't CSS recognise both? I seem to remember that that's the case (unlike color vs colour).
Hey, I was also bothered about what you said and made a lib to scratch my own itch. Perhaps you could find it interesting too? Here is the repo: [https://github.com/cruijs/crui](https://github.com/cruijs/crui) &amp;#x200B; Would be cool to know what you think about ;)
Can you put them into a function? function can(bg, url) {can code}
I use this higher order function pretty often in my programs \`\`\` const withRetry = (maxRetryCount, {wait, throwOnFail} = {}) =&gt; { if (!maxRetryCount) { throw Error('withRetry must have a max retry count, e.g. const fetchWith3Retries = withRetry(3)(fetch)') } let retryCount = 0 &amp;#x200B; const curriedFunctionWithRetry = curriedFunction =&gt; async (...args) =&gt; { if ([curriedFunction.constructor.name](https://curriedFunction.constructor.name) !== 'AsyncFunction') { debug('warning: withRetry functions are async and need to be awaited') } &amp;#x200B; try { const res = await curriedFunction(...args) return res } catch (e) { debug(e.message) &amp;#x200B; if (retryCount++ &gt;= maxRetryCount) { retryCount = 0 if (throwOnFail) { debug('throwing...') throw e } return null } debug(\`retry ${retryCount}...\`) if (wait) { await sleep(wait) } const res = await curriedFunctionWithRetry(curriedFunction)(...args) retryCount = 0 return res } } &amp;#x200B; return curriedFunctionWithRetry /\* example usage const fetchWith3Retries = withRetry(3)(fetch) \*/ } \`\`\`
pure functions and unit tests are not a functional programming concept, it's good practice no matter what. And I'd never use map over for of/for in, way more readable.
Hi /u/furry_bear22, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Ember is very similar to Angular in that regard
I was talking about ember. Should have specified. Glad angular has those efforts also!
gray() is a function in css, while grey is a color.
yeah but for some reason, 'gray' is far darker than 'grey', and 'gray' is also a function 'gray()'
Really? I've never noticed! Learned something new today.
So basically: because W3C sucks at its job.
Looks like the server crashed :-/
nice choice
seems like a typo to me
yes I know javascript but it doesn't seem right to learn all of them
interesting
&gt;interesting interesting
interesting
you have a good point but what do you see as a more promising future
all of them seems like a lot and you don't specialize in one
According to npm and their stats React is used by 67% of all javascript developers, it's bigger than all of the other combined, getting close to 6.5 million downloads/week. Half of the internet is React, most of the bigger sites (like this one), practically all startups. There is a reason React has this kind of attraction. It is very different from the rest because it's based on a simple paradigm, it's not strictly a framework even. To learn React means getting better at javascript, functional programming and immutability. It's not a language, it doesn't change or alter standards, it has the smallest api surface of them all. Angular is based on outdated OOP/MVC principles, it's a language, it is very complex. Vue is React with an Angular syntax, it inherits OOP/MVC malpractices. Ember and Metero aren't relevant any longer. Svelte is still template based, although the build step is interesting.
maybe try dark-grey ;)
I use it often in `React` codebases to make branching on props easier: ``` const MainComponent = R.cond([ [conditionAIsTrue, ComponentA], [conditionBIsTrue, ComponentB], [R.T, FallbackComponent] ]) ``` or in `redux`/some state management system I usually use `lenses` for handling the reads/writes: ``` const reducer = (state, action) =&gt; R.compose( R.over(oldValue =&gt; action.payload + oldValue, LensB), R.set(action.payload, LensA) )(state) ```
There are better tools. It's just the fact that they are not trendy enough for pwoplw to consider them.
Hi /u/Iwannis86, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This is a field were being a jack of all trades master of none really pays off. The libraries and frameworks change so fast that trying to specialize in just one doesn't really work. Also, you will find that as you get better learning a new library is not that big of a deal.
Another one that always triggers * red: #FF0000 * blue: #0000FF * green: #008000 ... * lime: #00FF00
can't replicate. in chrome they look the same to me.
no, you just suck at reading and reading comprehension
Couldn't you just use JSON files and skip Google Sheets altogether?
Yes, but how would you propose collaboratively editing them, especially for people who are not technically inclined?
Glad you're interested! Yeah this wraps over react Redux. From what I can see, they are quite similar. I think the biggest difference is how the state is modeled. Easy-peasy allows for the store to be modeled in one place, with actions, thunks, selectors, and listeners being fields of the model instead of middleware or external functions. This really reduces complexity by a huge margin. Since in the end, it is just a big object, you can easily make each sub model its own module and import them all in one place to make the store. Whether that's a pro or a con I think depends on the individual if they're looking at both libraries. I'd say a hard con would be that currently the API is solely hook based, so class components are out of luck, whereas ReactN is compatible.
Hi /u/caspervonb, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mauricecost, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/capecamorin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FriendlyMinimum, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/_username7777, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Paddyhallek, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DrinkJavaSeeSharp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/to_fl, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/amr-ayoub, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/peoplefoundotheracct, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/pe_brxwn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheHunterDog57, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Is this actually running the code, or just checking for the exact same solutions it expects? I wrote a working solution (which was difficult without any ide features) and it didn't work.
A recent full stack I made has gray as the background. Gonna change it rn
I thought mobile friendly means some kind of autocompletion, it's still not really usable on touchscreen, if you have to manually type all the letters for yourself
This seems very similar to my library drive-db, but adding a hosted version: [https://github.com/franciscop/drive-db](https://github.com/franciscop/drive-db)
So you think merging two conflicting specs and leaving the resulting nonsense as is perfectly fine. Great. Are you interested in a job at W3C?
Cool project! But there are differences in the core approach, as Stein allows using private sheets. As a result, OAuth and other stuff comes in.
Why not firebase? Surely it’s nearly as easy and is a little more futureproof?
Honestly I can't understand why we have all those arbitrarily assigned color at all. Put "white" and "black" in there and that's it.
&gt; Divisors of 42 are : 1, 2, 3, 6, 7, 14, 21, 42. These divisors squared are: 1, 4, 9, 36, 49, 196, 441, 1764. The sum of the squared divisors is 2500 which is 50 * 50, a square! I'm getting nightmare flashbacks from school. But then I remember I don't have to find all this on paper, the computer will do it for me.
If you don't need it to be exactly like this, you could go with ``` // attribute setter const signal = require('@scope/signal') signal.setBaseUrl('http://example2.com/') // required configuration // almost like you pictured - but you have to call init even for the default url const signalOnDefaultUrl = require('@scope/signal')() const signalOnDifferentUrl = require('@scope/signal')('http://example2.com/') // technically functions are objects in JS and you could do what you want - but it's hardly the "JS way" let baseUrl = 'http://example.com' module.exports = (alternateUrl) =&gt; { baseUrl = alternateUrl } module.exports.signal = ... ```
Exactly 👍🏻
From design perspective it's really better IMHO to directly instantiate an object and configure the instance there, rather than configure the "module". It's just less WTF, and requires no special considerations. Also you'll be able to set two endpoints in the same file which might turn out necessary sooner than you expect.
&gt;directly instantiate an object and configure the instance there Would you mind giving me an example?
I've done this and know it's possible, but everything about it feels wrong
I imagine implementing autocompletion for mobile would be pretty difficult. Your phone probably already tries to autocomplete based on its internal dictionary. Would you want some kind of tool-tip offering suggestions?
where should I post about the overall opinion of people on Reddit about all the js frameworks and not a specific one.
 const Signal = require('@scope/signal'); let s = new Signal(); let s = new Signal('domain here'); Or if you have multiple classes: const signal = require('@scope/signal'); let s = new signal.Request(); let s = new signal.Request('domain here');
I agree, but... &gt;I think that the schools and boot camps should place more importance on craftsmanship... The incentives are not aligned here. Bootcamps earn more money by pushing more students through the course, not by investing more time/energy into each student. Now, I’m sure they genuinely want to teach good coding practices, but like I said, the incentives are too out-of-whack for that to happen on a large scale.
That’s pretty subjective, IMO. It probably depends a lot on how much experience the reader has with ES6 features, and whether they bothered to learn them and use them in their own code. If they haven’t spent any time with destructuring, then it might seem hard to read, just like any unfamiliar thing. But a senior dev should have no problem with it.
Generic phone autocompletion is meant to supplement conversation in natural languages. I am talking stuff like intellisense, which respects language semantics and can deduce the declared variable names. I imagine this may be too resource-intensive for certain devices, but at least some basic syntax highlighting and keyword autocompletion would be a nice touch. Or some kind of emmet abbreviations, where you can build complex statements with a couple of keystrokes.
Thank you for this! I am new to web front-end dev and I wanted to learn react and bring some of my rust projects to the web, this boilerplate is saving me a lot of time getting everything up and running thank you ^~^
Yeah, that would be nice. Modern autocompletion solutions usually involve a local “language server” to monitor open files with certain extensions, and modify the client’s view in real-time. I’m not sure that’s possible with a mobile phone. Maybe it is. Doing it on the web would probably require some hacky JS code (using `setInterval`) on the client machine to make it work, since you can’t rely on a server to quickly handle that over a network. And that would get expensive really quick, as you would be doing static code analysis constantly, in the same runtime as the user experience. The runtime cost would grow as the code size grows. That seems less than ideal.
Why not use a `Class`? If this is modern Biden’s it should be no problem. ```js class Signal { constructor(options) { super(options) this.url = options.url } method() { ... do something with this.url ... } } module.exports = Signal ```
Zucc
I believe Monaco, the editor that forms the basis for vs code, can do intellisense entirely online. The editor itself is web-based
Well, to an extent, unfortunately &gt; The Monaco editor is not supported in mobile browsers or mobile web frameworks https://microsoft.github.io/monaco-editor/
Hi /u/StEthan, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Ah, yes that might be an issue here. It would be interesting to see where the limitation comes from.
Well for one thing Firebase costs money and Sheets is free ...
https://github.com/microsoft/monaco-editor/issues/246 Mostly text selection and autocomplete.
Well, that's indeed a non-trivial problem to solve. A more manageable approach would be a prettier editor, like the one from Eloquent JavaScript book. It's somewhat capable of syntax highlighting and auto indentation, which already makes things a bit easier to type. https://eloquentjavascript.net/code/
I disagree with the "if you don't find it easy you are not good enough". It's intrinsically hard to read if you write complex constructs, and to me the proof is the number of senior colleagues who get caught out by it.
great piece of resource for js beginners on the move! cheers
Hi /u/ChhotaTechnician, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I guess it depends on what you’re doing, but I’ve used Firebase in a lot of personal projects and never had to pay. If you’re doing something “production level” enough to have to pay for Firebase... maybe also don’t use Google Sheets? I’m not trying to be a downer, it’s cool that you can do this at all.
Cool library. But I prefer react-bootstrap-sweetalert https://www.npmjs.com/package/react-bootstrap-sweetalert
You're adding the 8 to the beginning, then the 7 to its left, and so on until you have the same numbers in the same order.
Pop pops off the end of the array. You’re removing items from the end and putting them at the beginning, one at a time. So after 1 iteration you have [8,1,2,3,4,5,6,7], after two you have [7,8,1,2,3,4,5,6], after 7 you have [2,3,4,5,6,7,8,1]... and then after the eight you’re back to the beginning.
Thanks guys. Got it 😅
You could just use \[reverse\]([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/reverse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse))
Search for math eval, there should be some library online written for it
Hi /u/garboooge, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It depends on what you are really worried about. Because any user can already inject/modify any code running in their browser. So eval-ing input from the user locally isn't a security issue because they could have just done it manually in dev tools. The real risk is when the content which is eval-ed could possibly include something from another user. Then one user could force another unsuspecting user to run malicious code to steal login info/cookies, redirect them to a malicious site, etc. There are a lot of valid use cases for eval. It's just that you should only use it if there's not a better answer. I'd say eval-ing a client side math formula is a great use case because parsing that is more effort than its worth. Just be sure that a user can never run another user's math equation.
React implementation: [https://github.com/Meemaw/react-micro-modal](https://github.com/Meemaw/react-micro-modal)
Eval is great in situations where you have a dynamic input but you are certain the input doesn't contain malicious data. One use case I had for eval was a dynamic conditional statement evaluation. I had all of my conditions evaluate to a Boolean and then built an eval string Boolean expression. So it looked a little something like this: Eval('(true &amp;&amp; false) || (true)') And this would give me an evaluation result of that string I put in it
I personally don’t recommend anything old than last 6 months as web technologies changes fast, but if the course material is still relevant then go for it mate
Could you potentially turn off autocomplete and autocorrect for a better mobile experience on the code entry fields? It would also be helpful to have at least some basic indentation and syntax colouring. https://davidwalsh.name/disable-autocorrect
Nothing like waking upto another spa framework/library 🤣
If you’re using react, should definitely take a look at reach https://ui.reach.tech/
Started a brand new open source javascript jquery knock off [https://github.com/tomkiernan120/Faze](https://github.com/tomkiernan120/Faze) Fully recognise this has been done and but I wanted a place for first time contributors and to brush up on build steps and github open source, friendly support and advice really welcome. Keep up the great work everyone! :)
Unless you're writing an advanced tool, it's way safer to avoid it. You really don't want someone to run arbitrary code.
There's hardly ever a time to use eval. Its unlikely your calculator and javascript's native code share a lot of overlap in terms of functionality so you'll likely be already parsing the input to some extent. Instead of calling 'eval' you should parse your input into an AST, convert that to appropriate js instructions and execute that.
This works great if you don't care about all those nice ACID properties databases give you. You'll wish you had put even a little time into a real database the first time data goes missing and you can't figure out why.
Interesting project. By the way, im using iphone SE, and the quotes for my string are not being interpreted correctly. Im getting an error SyntaxError: Invalid character '\u201c'
I made a basic REPL by presenting a user with a text view by which they could pass on a script to be evaluated using the `eval()` of a modified JavascriptCore VM: https://github.com/shirakaba/nside
Well I wasn't trying to say "never use Firebase", I was just answering ryanoh's question.
Try use date without Timezone. Probably you have different timezone than Greenwich (00)
My guess is that the datepicker is converting from UTC or "Zulu" time to local time (your browser's timezone). Try using Date.UTC() instead https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC
Never
It's bizarre that everyone down-chain of this comment does not understand that the keyboard's built-in predictions have a UI/UX conflict with the very notion of Intellisense. I would have thought /r/javascript would be more cognizant of the real constraints of user interfaces.
`Reflect.ownKeys` on a `new Test` should only give you `propertyMethod` The difference between `functionMethod` and `propertyMethod` is that `functionMethod` is defined in the prototype, or more specifically, `Test.prototype`. This allows it to be shared among all instances of `Test` as `Test.prototype` is used as the prototype of the instances it creates. `propertyMethod` is a field - an instance variable that, in this case, is given the value of a function. These fields are defined in each instance when they're created and are not shared as would values (like `functionMethod`) on the prototype are. Class fields are defined just as they would be as if they were set on `this` inside the constructor, only field expressions don't have access to constructor arguments. If you're trying to "[Get] class methods, excluding those from prototype", isn't `Reflect.ownKeys` on a `new Test` doing that for you? Or are you trying to do something else?
Why would you need to use eval for that use case?
I needed a way to evaluate a dynamic string. The underlying logic to build that string of booleans was dynamic. So it could look like: Eval('(true)') Or more complex like my original example. Hence a really good use case for eval
&gt; If you're trying to "[Get] class methods, excluding those from prototype" I want both. I just realized that calling `Reflect.ownKeys` on `Reflect.getPrototypeOf` works. I was using a stackoverflow function with a for..in that was returning all prototype methods `hasOwnProperty, toString, isPrototypeOf, etc`, and I wanted to exclude those.
yeah sounds like you just want the two levels - the instance and the first level of inheritance (instance's constructor prototype). For that you can own keys both the instance and its immediate prototype. Also, `for..in` shouldn't be giving you `hasOwnProperty, toString` etc. It _does_ go through inherited properties, but it should only go through enumerable ones, and those are not. By default, prototyped methods (built-in and those created as `class` methods) are non-enumerable... though I guess coming from stack overflow they were doing something extra to pull out everything?
You mean just with booleans though?
A much safer alternative would be to use Boolean instead....
Yeah. All of those booleans were some "condition" that evaluated down to a boolean. The structure of the expression was different all the time based on a ruleset defined by the application.
That's how you get your Google accounts banned. All of them.
Can you elaborate?
I have been using it for a while it's very good.
Eval is fine if the input comes from the user and is executed by that user (so it stays 100% on the client). The calculator is actually a good application of that rule.
So why didn't you just do something like.. const shouldRun = (true || true &amp;&amp; false)
The string was dynamic. It was based on user input during runtime.
I think I've used eval once in the last 15 years. For the most part operations can bel evaluated without it.
Really like the simplicity, not sure I'm sold on mutations-but-actually-it's-diffing-and-using-immer-under-the-hood thing. Going to try it out. Seems worth a shot.
I totally missed that sentence the first time I read your comment 😄
Whats the difference between react-bootstrap-sweetalert and sweetalert2 itself?
My favorite kind of programming
My time isn't free. If the folks paying me to build stuff don't want to bother with proper persistence their app probably isn't worth building.
One is a react component. One is a plug-in on the global namespace.
Could you illustrate some particular points of conflict? I guess it may be some kind of a platform-dependent issue I have oversighted. From my perspective the prediction results are displayed on a keyboard itself and there is no interference with the textbox I'm typing in
Why?
Oh yeah I get you. Luckily you can still reassign things the immutable way with immer. Try it out! I don't think you'll regret it 😬
Don't use eval, use `new Function(codeString)`. The typical way JS code editors and playgrounds like CodePen do it is run the JS as a separate process in an iframe and talk to it via messages.
Is this use of Google sheets actually against their terms?
Google banned accounts merely associated with other accounts doing something they disagreed with. Their ToS are vast and are spread among many documents. I'm not confident enough to answer your question. I wouldn't risk my accounts just to save a few pennies on hosting a database.
Purity isn't really a core tenet of either OOP, imperative or declarative programming, but it is a cornerstone of FP. The fact that pure functions are easy to test is simply a common application of purity. Whether map/filter are more readable is somewhat subjective. If you have a chain of map/filter, the equivalent for loop(s) ain't gonna be super pretty. Likewise, many algorithms don't lend themselves to be expressed well via map/filter.
I feel like you are getting too defensive about this. Not being familiar with ES6 !== being a bad programmer.
I never release a website without incorporating fizzbuzz in there somewhere.
Whenever I start working in a new environment, I first make sure they have an optimized method that will produce the Fibonacci numbers.
This doesn't appear to have any A11y considerations, which is a big focus for Micromodal, and why we use it at my work
I've been developing in Javascript for 20 years and I don't think I've ever used eval().
I'm still waiting for a reason to ever use a linked list over a hash.
Nope.
I was asked to do stuff with a binary tree on a whiteboard and hated it.. I’ve opted to present problems that the person will actually encounter instead of being a dick. I interviewed for an entry level dev recently and gave 3 challenges. They were asked to write tests for the functions they wrote too. 1. Here is an array. Separate items into an odd and even array [1,3,2,4,3,5,6,9,11,10,8] 2. Replace &lt;VERSION&gt; in this string with “1.2.34” “https://asdf.fake/archive/&lt;VERSION&gt;/web/web_build_&lt;VERSION&gt;.zip” 3. Return the date from this string “...&lt;div&gt;&lt;p&gt;last updated&lt;span id=“updated-date”&gt;11/12/2018&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;...”
If you don't put fizzbuzz somewhere in every project, are you even a real developer?
Ive just finished my calculator javascript and it doesnt use eval. Pemdas also work without using eval
The first thing I do in a new project is rewrite native array sort method to bubble sort.
Hi /u/Col-Abdallah, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Or an array.
lol callbacks are an objectively inferior pattern. you're a bad dev
why does yarn always have obscure errors while npm rarely does?
this is a js sub, why would you make a binary for your nodejs program in go, that would be retarded. Make the binary in the language of your program.
Not sure what you're talking about. Nobody said anything about making "a binary for your nodejs program in go". I'd write it in Go and compile it with the go compiler. Use the right tools for the right job.
How is this better than a non-curried version? Your function is quite verbose to me. await doWithRetry(3, func);
Only the searching-on-stack-overflow algorithm.
Really?? What did you use instead??
Those interview algorithm are meant to test how smart you are.
You can just check what is going on by using a debugger or just console.logging inside the for loop next time to avoid such questions.
by binary I actually meant cli, but again, this is a JS sub, why even mention go. You can and should make CLIs in node.
I believe in using the right tools for the job, regardless of which sub the OP is asking questions on. A single static binary is a huge win for CLIs, and using JS in this case doesn't buy you much.
&gt; I don't understand any of these points. OK, let me explain. &gt; What does "buries dependencies" mean? The dependencies of a function are the inputs from which it derives its output. "Burying" the dependencies means that the dependencies are not obvious without reading the function. There are many reasons to prefer pure functions; this is one of them. As an example, let's say you're hosting an API on [sweetap.io](https://sweetap.io) that catalogs all of the bananas you have ever eaten. You want to make fetch requests against this API to get the data about different bananas and then do some processing on it or whatever for your app. For the sake of simplicity, let's assume that this API requires no authentication, just hit the URL and get the data back. With async/await you might do something like this: const getBananaAndDoStuff = async (bananaId) =&gt; { const banana = await fetch(`http://sweetapi.io/bananas/${bananaId}`) /* do all the stuff to your banana */ return result } const myBanana = getBananaAndDoStuff('123') // Promise(banana123) From reading the function signature, all you can tell is that the function takes a bananaId and returns a Promise. You've "buried" the dependency on fetch(). This seems simple enough to understand from this example, but becomes increasingly problematic as the function grows larger, which is typically how the beginners and Java programmers who love async/await tend to write their functions. There are lots of other reasons why this isn't a best practice, some of which I'm about to get to. &gt; Since when is inverting control bad, and how does async/await invert control? Typically when you see someone talk about "inverting control," they actually mean the opposite of how I've used it. But, since the "inverted" is the more ideal form, I've decided to correct that record. Async/await doesn't necessarily cause control in a function to be bottom up, that's just the general usecase for people using async/await. You could definitely "invert" control of a function while using async/await, but that isn't what happens because async/await encourages people to continue programming without actually learning anything. It also would still leave you with the async/await. Modifying getBananaAndDoStuff() to "invert" control: const getBananaAndDoStuffFactory = (fetch) =&gt; async (bananaId) =&gt; { const banana = await fetch(`http://sweetapi.io/bananas/${bananaId}`) /* do all the stuff to your banana */ return result } const getBananaAndDoStuff = getBananaFatory(nodeFetch) const myBanana = getBananaAndDoStuff('123') // Promise(banana123) So great, you've "inverted" control of your function and made it easy to test and all that good shit. But you've still got the problem of a function that gets the banana and does some stuff. Another problem with async/await: it encourages (and kind of *requires*) mixing your call to the API and the action you're taking on the response. What you really want is to get the banana and do the stuff: const apiFactory = (fetch) =&gt; (url) =&gt; (id) =&gt; fetch(`${url}/${banana}`) const getBanana = apiFactory(nodeFetch)('http://sweetap.io/bananas') const doStuffToBanana = (banana) =&gt; { /* do all the stuff to your banana */ return result } const myBananaId = '123' getBanana('123').then(doStuffToBanana) // Promise(banana123) &gt;... but the closure scopes make a lot of problems more complicated than they need to be. For example? &gt; ... IMO async/await makes reading, writing, refactoring, and debugging more straightforward. If you have a limited understanding of functional program, this is likely true. This is not a refutation of my point, it is a supporting argument.
Keep practicing. You'll get the hang of it eventually.
Yep, I did go ahead with a class after seeing the answers here! Thanks
Hard disagree. It encourages entangling concerns and making code more complex. I'll recycle my getBanana() example: const getBananaAndDoStuff = async (bananaId) =&gt; { const banana = await fetch(`http://sweetapi.io/bananas/${bananaId}`) /* do all the stuff to your banana */ return result } const myBanana = getBananaAndDoStuff('123') // Promise(banana123) The only purpose of async/await here is to mix the act of acquiring the data (banana) with the work being done on the data. It's simpler and easier to reason about by separating the concerns of getting the data and doing the work. There's no reason that the function doing work on data needs to know anything about getting data. It just needs to know "here's some data, do the work."
You're a stellar example of the Dunning-Kruger effect. You're also a terrible programmer.
Are there any decent node libs out there for this?
[removed]
It seems like the other two comments are from people that are shadowbanned
You just don't want to eval something that comes from a db that can be modified by the users, or from an URL param - it makes you vulnerable to XSS. Everything else is fine, but you just hardly have any need to use it. But well, some scenarios: 1 - You are fetching some JS code from your server (which the user has absolutely no control from it) - something like you have a block of text that will show up dynamically on some part of the screen, but it can also do some other stuff, thus you fetch the text and script related to it. The marketing people from your site may modify it from time to time using some interface so it's not on the client side. 2 - You want to run some math formula and you don't want to parse it manually. 3 - You are making a coding site that lets the user try to make a solution in JS to the proposed problem. You can just eval the user's function and run it.
You still need to use eval, but that 'eval boolean expression' is unneeded. He is talking about this: var data = await fetch('bla bla bla'); // for some reason one of the fields comes up as a string on json like "'true'", might be API's fault var myBoolean = Boolean(eval(data.test)); Boolean will turn everything into either true or false. It is false if it's 0/false/undefined/null/NaN, everything else it will return true. Basically, it does what your &amp;&amp; and || operators were doing.
If the input come as a string "false" or "true" eval is still needed. But yeah that expression he is using could be simplified with Boolean.
npm Inc. (the company) got a new CEO. A bunch of stereotypical scummy business moves followed, like laying people off to bring in his own people, firing people who raised concerns, and firing someone by text message effective the next day. More recently it's alleged that some of the fired people may have been trying to unionize, which is Big No-No. Having a business that goes from generally innocuous to suddenly repugnant be in charge of the billion-package index that runs a huge amount of the web ecosystem right now is spooky.
That's just some bad advice. `new Function` and `eval` do the same thing, eval is just easier, but you can wrap any call inside a function. They both are vulnerable to XSS if it comes from user input.
Oh, on that bicycle. So it still kind of depends on how you plan to use the alert to choose which one of them you should use. Thanks for the clarification!
&gt;Having a business that goes from generally innocuous to suddenly repugnant be in charge of the million-package index that runs a huge amount of the web ecosystem right now is spooky. Man, that IS spooky. I can't help but wonder if the problems I've been having with `npm install/npx` are related to all this drama.
I doubt it, I don't think they've lost enough technical expertise overnight to cause issues like that. It's just not a good sign for the medium to long term.
sorry what ?
what is jamstack?
this is barely readable and full of errors.
In which planet ?
The course teaches the fundamentals of functional programming with observables. These foundations haven't changed since 2015. You'll learn to practice map, filter and flatMap over data that arrives over time with Observables which gives you the foundations for using Rx.js anywhere.
Anywhere where ordering is significant and you need fast prev/next references and fast inserts (assuming you already have a reference to one of the items the new one should be next to). Inserting mid-array means reallocating and copying the latter end of the array (or possibly all of it), with a hash the ordering property is not maintained unless you have a separate index structure. It is actually fairly rare in my experience that linked lists are preferable, but of you've never even considered it after years of experience, then your experience may have been fairly narrow. Linked lists are taught early and drummed in because they are basis for (or at least share important concepts with) more complex structures that are a lot more commonly useful, they are a stepping stone towards basic trees which are vital to understand. A lot of structure and algorithm stuff is less important on the surface these days because we have standard libraries or common extensions that abstract those details away. Array.sort() is perfectly fine for a great many use cases, you don't need to care what algorithm it uses or need to implement it yourself. But if you have massive or unusual requirements, or otherwise need to dig below the surface because the obvious abstraction is not efficient enough, or you need to understand how libraries are working so that you can choose the most efficient option for what you need or are going to need, then you need to have an understanding of the core concepts. There is a lot you can do by slapping together pre-made parts without needing to care about implementation details and basic complexity theory, but there are also many things you can't do that way.
Last week we shipped the release candidate: [https://blog.frontity.org/announcing-frontity-v1-release-candidate-new-documentation/](https://blog.frontity.org/announcing-frontity-v1-release-candidate-new-documentation/)
GitHub packages certainly seems to have good timing. Hopefully that kind of competition will spur positive changes in NPM.
I came across [this presentation](https://youtu.be/Y9ZhswdOm14?t=447) a while back from this super innovative project, but part of their project has been developing an [unenclosable](https://en.wikipedia.org/wiki/Enclosure) information carrier, which could definitely support a distributed node package repository. The project is called Holochain now
Are people going back to yarn?l
This is more about no longer trusting NPM as a repository. Yarn is just a package manager but installs from NPM just the same.
Add an event listener to the input element.
0 responsivity on mobile rip
Your website doesn't load.
The holochain founder sounds like a pure scammer, I knew 5min in it was nonsense vaporware to fool investors.
Obligatory "Long Live the Holohchain" exclamation.
There's no 'holochain'. It's not blockchain
Maybe *too* good of a timing 🤔
Oh thanks for the heads up random stranger on the internet. Guess I'll just back up now from this *completely free and open source piece of software*
There seems to be no issue, in website load. I checked with different system. [Website](https://imgur.com/77l7750)
looks like a scam
I'm aware of Holochain and the entire idea behind Ceptr as a whole.
So what's your point?
You have to make everything a component
“I made a judgement of something based on very little information, and I believe that judgment to be accurate based on no evidence whatsoever. I thought everyone should know that.”
Explain how it works to me.
I like good things? Yeah. I like good things. My point was an exclamation of my likes in this category of the forum.
It sounded like you were being sarcastic or something
Use setInterval
Thanks for the reply! Correct me if I'm wrong but setInterval will keep the function running every x amount of time, right? I need the time delay to be random and run the changeEye function only once given a specific parameter.
Ah, then you should use a setTimeout that returns a callback setTimeout n times
Also posted on Medium: [https://medium.com/@david.dalbusco/how-to-implement-the-web-share-api-with-a-fallback-3557d3730ea7a](https://medium.com/@david.dalbusco/how-to-implement-the-web-share-api-with-a-fallback-3557d3730ea7a)
Nope. The idea is brilliant. I hope to see it materialize.
Oh awesome. Sorry about that. How'd you come across it?
[It straight up doesn't load. ](https://i.imgur.com/aaAa99c.jpg)
I mean that's capitalism for you. Pretty hilarious that anyone ever expects it to end up differently.
I think we all need more info such as: \- Where is the cache stored? \- What is the size limit of that cache? &amp;#x200B; The [readme.md](https://readme.md) file describes just how to use it but doesn't answer any of this.
I've used variations of trees before. It's pretty easy to need relational data. (My use case was storing survey data in memory) truth be told, I could have just used hash maps, but this was 9 years ago when I was fresh out of school. I also wrote a proof that my system was optimal... What a waste lol. On that note, I'd NEVER give one of these stupid questions. My old test was to just do a bunch of operations on and with an array (filter, map, etc.). It was usually a few lines of code to be written on the spot. It usually tripped ppl up, even though it was super basic day to day stuff. The test is usually to make something similar to what we already make, but super simplified. Like make a product search app with some button filters from scratch and we'll provide the data.
No worries. Word of mouth. I forget exactly where but it may have something to do with my interest in things like Strange Loops :)
The second param to setTimeout should evaluate to a numerical value, make a call to `randTime()` instead of passing the function.
Do not trying to make your function synchronized but just use promise
another day another front end framework
Eh, that company proved they were repugnant several years ago. They may be a necessity on the technical front, but they are a clusterfuck as far as humans.
Why TypeScript ? Is it very necessary to try to always reinvent the whell ??!
Nah, you feel wrong, no defensiveness there, and I don't rely on strangers on the internet to decide whether me or anyone else is a bad programmer. I simply think that destructuring leads to hard to read code, as do &amp;&amp; used instead of ifs and a few other constructs here and there.
&gt;Why does the clear function don't do something much simpler such as Thanks for point out the problems , I'v fix up the typo on readme. :) &amp;#x200B; The clear function that assign the new Map for clean up seems nice , but the expire timer will not delete with this case. &amp;#x200B; If there is large numbers records saved on cache , assign the new map and wait for automatic GC is a good way to go.
Is there even a decent alternative to npm?
Try r/learnjavascript. You'll get way more responses, as that's what their community is for.
No, people just like the idea that they can specify what type of wheel they need and also feel confident knowing they won't accidentally send someone a bike tire when he's asking for a truck tire instead.
but how is it that you don't have a choice ? you can make your whole app in a single component, not a great idea .. but you can
I have zero such problems.
One thing to note, is that it was just 5 people who were laid off - when I first start hearing about it I thought we were talking close to 100 or so. It seems pretty lame, standard stuff when a new CEO joins.
[removed]
GitHub is launching their own package registry. https://github.com/features/package-registry
[removed]
Thank you! Will x-post this there now.
I had a brilliant interview where the interviewer started from an actual application (basically a SO clone), how would you weigh reputation and all that, and basically we worked backwards to the relevant array algorithms and a discussion thereof.
... and this will probably get deleted by the mods for that very reason soon.
Ah right yeah, the Receptors are completely virtual so they can be fractalised. Super awesome to base it all off how nature works
Thanks for the reply! I changed my code to that but it is still asynchronous. I was hoping the 5th setTimeout would run only after the 4th finished and the 4th would run only after the 3rd and so on.
Loaded for me ¯\_(ツ)_/¯
I noticed you frequent r/sorceryofthespectacle I love that post about Ceptr there, one commenter summed it up perfectly
Soon: [https://www.youtube.com/watch?v=MO8hZlgK5zc](https://www.youtube.com/watch?v=MO8hZlgK5zc) [https://github.com/entropic-dev/entropic/](https://github.com/entropic-dev/entropic/)
Hold up.
I can't answer if you don't give any example.
Worth noting that Entropic is being headed up by the CTO that was fired by npm
How can I use promise for multiple setTimeouts?
Why crawl a linked list when indexing a hash map is trivial?
The Microsoft package registry.
Wall of text written by someone who believes in Santa Claus and socialism.
You don't want to do this synchronously. While technically possible, because of single threaded nature of JavaScript, you're going to be locking everything else up to achieve that effect since nothing else is going to be allowed to work while you sit and wait for the time to count by. So you'll want to do it asynchronously, as that is what setTimeout allows for - asynchronous time counting, responding with a callback when the specified time has elapsed. Your problem is that you're starting all of your timeouts at the same time. This will make them run concurrently when you want them to run sequentially, or one after the other. There are a number of ways to do this. I'll show you two: one which goes directly through setTimeout without anything fancy, and the other which will use `async` allowing for code that _looks_ like synchronous code even though it still runs asynchronously. So how do you make them run one after the other? Simply by starting the next one only after the previous has finished. When you make a call to `setTimeout()`, it queues up a timer to call a callback once the timer has elapsed. But it doesn't want to prevent other code from running until that time, so it lets code below it run, which in your example, includes more `setTimeout()` calls. This makes setTimeout _non-blocking_. It doesn't block other work from being done before its done with its own. The time when it is done is when the callback is called, so its in the callback any next setTimeout call should be made. function changeEye(num){ var fName = "eyes/" + num + ".png"; document.getElementById("eye").src=fName; setTimeout(changeEye, randTime(), num + 1); } Then in `seq` you only call the starting setTimeout function seq1(){ setTimeout(changeEye, randTime(), 1); } The only problem here is that you need a stopping condition. Because right now these will continue forever (or until you navigate away from the page). We can do that with another argument passed in to setTimeout function changeEye(num, lastNum){ var fName = "eyes/" + num + ".png"; document.getElementById("eye").src=fName; if (num &lt; lastNum) { setTimeout(changeEye, randTime(), num + 1, lastNum); } } // ... function seq1(){ setTimeout(changeEye, randTime(), 1, 5); // stops after num (1) is 5 } So this is great, and it works, but you lose the ease of seeing the sequencing listed out in one place. You start in `seq1` and then have to jump to `changeEye` to see where the next operation in the sequence is triggered. It also couples that sequence trigger to `changeEye` which isn't ideal (though you could get around it with function composition, not without adding a bit more complexity). As an alternative we can use `async` functions with `await`. This would allow you to write code that looks like your original code, but still runs asynchronously. This means we can create delays in between `change` eye calls all within the same function. First thing we need is an async version of `setTimeout` that we can wait for between calls. That is simply: const delay = time =&gt; new Promise(resolve =&gt; setTimeout(resolve, time)); This new `delay` function works like `setTimeout` only it returns a promise instead of using a callback. We want promises because thats what `await` waits for. With this, we can make `seq1` asynchronous with the `async` keyword (which basically just allows the function to use `await`) and make calls to the original `changeEye` with some delays thrown in between. async function seq1(){ await delay(randTime()) changeEye(1); await delay(randTime()) changeEye(2); await delay(randTime()) changeEye(3); await delay(randTime()) changeEye(4); await delay(randTime()) changeEye(5); } And, really, since you're just doing a sequence of 1 - 5, you could tighten this up with a loop, but I'll let you worry about that ;)
Didn't you hear him? He tested on two local devices. There's obviously no problem /s
I appreciate your enthusiasm for sarcasm, but to become a master you mustn't use /s. *I'm a human being, and this action was performed manually.*
You really are the worst bot. As user Pelt0n once said: &gt; God shut up *I'm a human being too, And this action was performed manually. /s*
Forget about Github, Microsoft is just trying to get the developer market back support open registry and we won’t have our future in the hands of a company https://open-registry.dev
I'd love to see a project of decent size written with Svelte. Most resources I've seen don't go beyond basic things like components, data fetching and basic reactivity, but I wonder what a Svelte codebase looks like for a nontrivial app.
Support open-registry, let’s not put the future of the language on another company https://open-registry.dev
You're writing garbage code. That's the problem.
Wow! Very well explained! Where have you been all my js-learning life? I get it now and I can't thank you enough!! :)
You must be trolling.
This could be done using \`new Proxy\` instead, it'll also keep your arrays reactive without extra caveats [https://www.vuemastery.com/courses/advanced-components/evan-you-on-proxies/](https://www.vuemastery.com/courses/advanced-components/evan-you-on-proxies/)
Why have a hash map plus an index structure when the times you are inserting you already have a reference to the right position so no crawling is needed? What structure is being used for that index on the hash map? An array with the potential "need to copy and perhaps entirely reallocated on insert" problem? No, most likely a tree of some sort, and understanding trees which means understanding linked lists (a list is essentially the simplest form of tree: an unbalanced binary tree with branches in only one direction). Or by "indexing a hash map" do you simply mean accessing its contents by ordinal value (with or without an index structure)? If there is no index structure then when accessing elements by ordinal value the whole hash needs to be scanned, and likely sorted or part-sorted, which is far from efficient. Because you haven't had to implement the tree/list/other for the index so the structure can be accessed by ordinal, that doesn't mean it isn't useful to understand how it might be done and thereby understand the performance characteristics which in some circumstances could be significant. I'm perfectly happy use abstractions to simplify day-to-day work, but I like to know how an abstraction is doing its job rather than it being a black box that I can't diagnose if there is a performance problem.
Hi /u/r3dditph, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
just FYI you are serving font awesome from a CDN that timesout, isn't avaiable to load over here in UK. [https://cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css](https://cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css) Quick search on this, I see its some asian CDN provider? Japanese perhaps? none of their font-awesome links work here in UK. The previous guy who said it doesn't load probably was accessing from home on slower connection where the page wouldnt load for some time. I'm in the office with fast connection and it took 15-20 seconds to laod your page, after it timed out with the CDN in question :) &amp;#x200B; I would recommend using their official provider which you can get it from here: [https://fontawesome.com/start](https://fontawesome.com/start) instead of using third party. Or download font awesome to your server as it is the thing that breaks your page here in UK ( perhaps other western nations)
Hi /u/kaptan8181, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/frankspit910, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fmaldonado6, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ksu12, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
My &amp;&amp; and || operators and the the structure of the string is dynamic. It's not the response of an API call. Using Boolean in my case is unneeded as my string already evaluates down to a Boolean with eval. Again, my eval Boolean expression is some dynamic evaluation based on user input of one to many conditions set during runtime. It's the result of some dynamic application logic.
Hi /u/dumbcodingquestions, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jay-random, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MTCyberSec, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/UL_Paper, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/docker_newb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I find that’s true for all the frameworks. There aren’t a lot of companies opening up their production code to the world. And non-trivial apps often require teams to build, so you typically won’t see too many personal projects that meet that criteria. But I agree, I’d love to see some larger codebases.
You could do it like they do it in Deno: [https://github.com/egoist/import-http](https://github.com/egoist/import-http)
And Proxies handle added and removed object properties. I've implemented a barebones reactivity system like described in the article using Proxy and it was easy peezy.
Same here!!, Total mind opener :D [https://github.com/imlinus/lily/blob/master/packages/lily/observe.js](https://github.com/imlinus/lily/blob/master/packages/lily/observe.js) **Proxy&lt;3**
It's a double edged sword. Further monopolizing the industry sucks, but I trust the team at Github more than I trust npm inc. They also have the infrastructure to keep it going, while any other new package repository is gonna struggle to survive monetarily since there's no obvious revenue stream to have (and they'll avoid making it into a revenue stream anyway since that's partially why people are getting wary of npm).
We didn't use the \`Proxy\` because of the browser compatibility issue. But anyway, thanks for the sharing! I didn't know there is comprehensive video tutorial about building reactivity system already. This seems very helpful :)
That's a fair point! However, I know both Vue and React are planning to go towards using Proxy (vue should have it in the 3.0 release) But I think they'll have to polyfill using `Object.defineProperty` You could check this library out for inspiration of proxy with polyfill: [https://github.com/shivani137/observer](https://github.com/shivani137/observer) &amp;#x200B; Cheers!
The most recent round was five people at once, but another five were axed last year (not all at once). https://www.theregister.co.uk/2019/04/01/npm_layoff_staff/
I'm liking Microsoft as of late, but they can just pull the rug out from under us at any time. I prefer granularization.
Maybe the most reliable polyfill would be [https://github.com/GoogleChrome/proxy-polyfill](https://github.com/GoogleChrome/proxy-polyfill). But I was little bit worrying about unnecessary code for implementing entire API of Proxy which I don't use. But I got your point. Using built-in Proxy will be more performant and versatile than using a getter/setter proxy. It'll be better if we support both for modern browser and older browsers. Thanks!
I like that you are making subobjects reactive on get, your lazy implementation might be better than my way of making it reactive on set. I'll have to think through the potential repurcussions of changing my code to that method. Any reason you don't do anything when a property is deleted?
`new Function` will not inavertently interact with variables in the calling scope when using non-malicious input. Look, it depends on your audience. All JS sandboxes use `new Function` to run user code. Other comments have already pointed out the dangers of doing so. But if you're going to implement it anyway, you may as well be aware of better options than eval.
Thank You so much:), The theme I used was using this as a default, Changed it to Cloudflare CDN. Hopefully, it works for everyone now.
Could you please re-consider the removal of this post? It is not beginner content, although it could appear to be because of all the time I have taken to write in a very simple and clear way. "/r/javascript is for the discussion of javascript news, projects, and especially, code" My articles are mostly code. And code you can even edit. It's definitely different from the usual "5 ways you can use arrays" that I see in this subbreddit all the time and that offer nothing new, are quite beginner, get a lot of upvotes and don't get removed. I'm sincerely trying to offer something new here. Articles that I would myself enjoy even though I'm an expert JS programmer. I'll use these articles for reference myself. That's partially why I wrote them. Thank you for re-considering.
&gt; It's definitely different from the usual "5 ways you can use arrays" that I see in this subbreddit all the time and that offer nothing new, are quite beginner, get a lot of upvotes and don't get removed. Please report these and they will be removed. &gt; Thank you for re-considering. Sorry, but upon further review, I stand by the removal.
Am I reading correctly that you put the database username and password in the client-side code?
Ah yes, that's I know the submitter. We have a lose collaboration.
Is this a problem in sample code?
this
Thanks! I haven't implemented it yet :-D That's just my playground framework (like every other dev in here :D) So take that code with a grain of salt, it's mostly pseudo-code hacked together in to something that kind of works :P
👍🏿 I’ll be checking it out!
No you do not put the password in the client-code. This is just an example. In your app you would ask the user for the password or get the password from the server and then create the database instance with it.
this is really the best answer.
All that stuff is truly awful, but you know what really drives me crazy? It's 2019 and we still don't have comments in `package.json` files!!! Every Node developer I've ever met has thought that adding comments would be a good idea. Everyone who's ever read Node's list of excuses why they "can't" do it agrees that they're nothing more than that: excuses (they could allow that one exception to JSON standards, they could allow a new format, they could allow executable config, ie. `package.js` like other major libraries, etc.). This organization that's supposed to support all JS development rejects what virtually all JS developers want. It's just mind-boggling to me.
Declarative is higher level. You declare what you want it to do in as high of a level as you can get.
Static config is great. It makes getting package metadata so much easier and more predictable. Python is edging away from executable (setup.py) towards static (pyproject.toml). You may be interested in [HJSON](https://hjson.org/).
You could have replied to someone that said "doorknob" and still have been correct.
You're right! - Polyfilling should never really be something anyone ever wanna do :P So I'd say stick with Object.defineProperty until Proxy has matured enough
Yes, exactly, HJSON is just one of many possible solutions. But instead of trying and embracing one of those solutions (or multiple) they just dig their heads in to the sand and shout about "impossible" it is to have something so basic virtually every programming language since the dawn of time has managed to implement (and most DSLs: heck even HTML and CSS have comments!)
+1
**Vanilla JS**. I was stuck in jQuery land for way to long :P
I don't understand your point. The only reason it's combining these concerns is that **you combined them**. You literally called it `getBananaAndDoStuff`. You could have just as easily called it `getBanana` and made it async and everything would work great. In fact, because you used fetch that gives a perfect example of await. Without async/await const getBanana = bananaId =&gt; { return fetch(`http://sweetapi.io/bananas/${bananaId}`) .then(response =&gt; response.json()) .then(json =&gt; json); } With async/await const getBanana = async bananaId =&gt; { const response = await fetch(`http://sweetapi.io/bananas/${bananaId}`); return await response.json(); } In my opinion the second one is **vastly** easier to read and understand, but they fundamentally do the exact same thing. The difference is that async version isn't ambiguous about what is being returned. I've seen cases in the past where putting returns in the wrong place, etc, led to returning unresolved promises rather than data. The first async system I worked on was a maze of different functions, some of which returned a promise, and some of which didn't, and no clear idea why or where. And yes. It was wrong. It was done wrong. But it was wrong because **promises are not intuitive**. And that's what async/await helps with. It also helps deal with scoping issues, where trying to set a value in a callback, etc. If you want to work on the acquiring data vs work on the data separately, that's totally fine. You could just do this: processBanana(await getBanana(id)) vs getBanana(id).then(processBanana) Not really particularly different.
Congrats....top 👏👏👏👏
Which would have been returned via a request and then visible client side...?
The author left off downside #3: in a couple years when Typescript has taken over and all the "cool kids" refuse to use any other typing system, you'll have to convert all your Flow code to TS just to be able to hire good people. (And for the record I'm not even a static typing fan, but if you don't see TS on this vector to triumph over Flow, you haven't been paying attention to the 100:1 Typescript to Flow article ratio here.)
The reason is that JSON isn't a configuration format; it was designed for sending data over a wire in a format as close as possible to raw POJsOs. Comments don't make sense in that context. As the package.json is pretty flat, it would be a good candidate for a toml file too. The main thing I like about JSON is that it nests in a completely modular way, which few other formats do.
you're not wrong haha - in that case, just start off using TypeScript!
That behavior is actually the behavior I had hoped for when the `const` keyword was originally proposed. I was tweeting with the creator of javascript about it a bit over the weekend: https://twitter.com/snapwich/status/1136769425883877376
callbacks
It loads instantly now for me! &amp;#x200B; Cheers for silver!
Spent most of my weekend creating a Neural Network for snake 🐍. Made with 👉 Typescript 👉 Tensorflow 👉HTML5s canvas element 👉 React You can check it out over here: https://snaike.dries.io/ A video: https://www.youtube.com/watch?v=kBjSyOzhUYk A gif: https://gfycat.com/separateapprehensiveafricanparadiseflycatcher If you have any questions, let me know!
Not necessarily. Authorization is kinda fucky to get at first. But there's plenty of blogs etc about how it works and how it does it.
I also recommend [tingle.js](https://robinparisi.github.io/tingle/)
Thank you 👍🏼
Nuget Package Manager
This is seems to be for client-side data storage. If you need to protect the data then it probably shouldn't be stored in a browser to begin with.
I was wondering why I would give a shit until I got to here: &gt; Replication &gt; Because RxDB relies on glorious PouchDB, it is easy to replicate the data between devices and servers. And yes, the changeEvents are also synced. Now I'm all hot and bothered
They’d have to hire another 50 people in order to be able to fire 100.
Oh good. Yet another yet another markup language.
RTFM
Great Travisg25! Please let me know what do you think :)
Linked lists as a pattern are really nice when building a state machine
I've written my own implementations/extensions before and I'll do it again no doubt.
You're welcome, I hope you love it!
There was some issue with font-awesome cdn used in some region as pointed by, [patrykmaron](https://www.reddit.com/user/patrykmaron/). Hopefully, it works for you now. :)
I mean, the client needs the password for the database on the client. It wouldn't be your server database password.
The GitHub registry is much more than nuget packages.
Exactly. Big distinction in this case between npm the package registry, and npm the tool used to install packages from the registry. Yarn is just another tool.
Jeez, both sides there are just acting _so_ dense.
Awesome, thank you. I found [this HN link](https://news.ycombinator.com/item?id=16353118) about using GraphQL with RxDB -- is the comment there still accurate (not completely solvable because of graphQL lacking streaming capabilities)?
Can you explain what that means and where can this be useful?
Yeah, this is really difficult to read. I would suggest getting a proofreader.
yes this is still valid as far as I know
There's some cool analysis here and I like the depth you went into, but it's really just parroting the age old "don't copy your data structure every iteration" adage. I don't think there's really a reason to pin down each example of the pattern, just remind your developers to use a persistent data structure (and only persistent operations on them), or if that's not possible, then do their copying before the modification steps instead of in between them
TL;DR: 0(n\^2) is bad. Seriously though this is a great explanation of something that people might not otherwise notice if they don’t check under the hood.
\#1 - this \#2 - Pure Vanilla \#3 - 508 Event triggering and delegation ( difficult when it comes to complex controls like sliders, calendars and improper usage of div/span elements that need to behave like form elements for screen readers ) \#4 JOSN &amp;#x200B; 15+ years now and still amazes me to see how many ways browsers interpret JS
Does this mean I don't need an EC2 instance running Redis anymore?
I agree, unfortunately age old wisdom is rarer in frontend these days with all the new coders and bootcamps and such. Not a bad thing, but definitely a reason to dust off some old “common knowledge”.
I'm not the original commenter but what I think this means is that you can maintain a state with a schema like your database, but if connectivity fails, you can still keep doing local CRUD operations. Once connectivity is restored, a sync happens.
Kid, how long you been programming? A few weeks? Maybe a couple of months?
Great post. I've been mindlessly using this reduce/spread technique because it seemed "elegant", but I see now it's not worth the performance hit.
I kind of got that but I don't see where this could be useful. What kind of apps could use that? Most database operations need to be verified on server side. Maybe this could be useful for simple things like todo app with server sync but that's all I can think about.
Honestly I don't think complexity matters when writing frontend. I don't like ...spread variant in terms of readability, and it is unusable with typescript, but the last thing i would consider here is the complexity of an operation. You don't operate that huge chunks of data to feel he difference (of course, if it is some very specific app, then maybe).
Project Page (?): https://github.com/redixhumayun/visualization *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
"it's actually performing a few other operations, specifically the creation of a new object literal and then again iterating (nested iteration in this case, since it's inside our previous iteration) over the existing property keys and then performing our base operation for each nested iteration. " I am having a hard time figuring out where the complexity lies. what is the nested iteration the article is talking about? why doesnt spread just reference the old acc? is it not just using something like shallow copy and increasing the space complexity? thanks for your help, this is interesting and id like to understand more.
Try posting and editing a reply on a phone in a tunnel. Would you want to have to hit the server for each step?
i've always wondered what people will do if a privatised repository fails for any reason, and boy am i getting an answer.
Hi /u/toddmotto, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JamieCorkhill, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi there, I’ve enjoyed the article, it’s very well explained. I’m currently working on CRUI, a Composable Reactive UI and I think I nailed the Array problem, however the system I’m using is based on explicit streams rather than implicitly setting them up. This also have the benefits of increased performance given that you are guaranteed to do the minimum amount of work for the setup. I’ve also worked a lot with MobX and found the magic behind it quite convenient, however in my opinion it is sometimes too easy to overlook a detail and cause performance issues as you already mentioned. Let me know if you would be interested in knowing more about it, I would love to have a chat :)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/typescript] [Some opinions on CRUI?](https://www.reddit.com/r/typescript/comments/bz2a8s/some_opinions_on_crui/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
In this case I believe that's a good thing.
In JS I program functional style, but in Java I regularly use dependency injection. I see no reason why you couldn't do the same in JS, but Typescript is better because you can enforce an interface through the language. Why you would use an IoC library in any language is beyond me, that to me just looks like a lot of unnecessary boilerplate and another layer of abstraction without any advantages.
Import lodash functions separately: const get = require('lodash/get') instead of const _ = require('lodash') and using _.get everywhere.
You can do: Object.assign(...item.map((it) =&gt; { return {key: value}; })) I often just use `lodash.keyBy` or implement my own utility that does exactly this using imperative code (which as the article shown is faster).
I love these back and forths. Popcorn time!
1. map, reduce and filter 2. this
npm is a very small team, &lt;70 people total and probably a small amount of engineers. 5 people being fired can make a big impact.
Hi /u/kyleschaeffer, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
*facepalm* https://github.com/cgiffard/YAYAML
The idea of adding behavior via attributes is not new. Intercooler.js is an example that's been around for several years. As for your implementation: you have actual code being eval'ed and that is a big security no-no. Read up on [Content Security Policy](https://en.wikipedia.org/wiki/Content_Security_Policy). You might also want to look into modern HTML/CSS. They _can_ do quite a bit of what you set out to do, without any JS: https://codepen.io/anon/pen/ydLyqO
I routinely disable JS on sites I find interesting just to see how their server accommodates. But this is me working up to turning the switch off as a default and probing for who makes accommodations. It's not a bad practice to always assume the user has minimal features. Not only will it maximize retention but most of the practices that provide operability in the absence of JS are also useful for users who require accessibility help. Adherence to standards and utilization of built in mechanics can go a long way to enabling power users to make magic out of your content. The more custom JS you bake AND require the less others can reliably implement their tools. Not everyone cares about the disabled or otherwise process conscious but if you make accommodations for them they'll probably care about you.
I don't want people on my site who disable javascript. Same reason why I don't print the site on paper and sell it on the corner.
I also hope that CSS will get closer to that one day, but now, even in your example, everything will be broken if I wrap any element with `&lt;div&gt;&lt;/div&gt;`. And there definitely will be no way to set/unset attribute to change UI behaviour like if it was conditions in attributes like `disabled="!sub.checkValidity()"`. Readability of such scenarios in CSS is also a very discussed question And whats wrong with eval when it comes to JavaScript? It performs on browser, client can run any JavaScript via console for example anyway. Eval is bad on server side executing statements with variables that can be provided by some user input - thats really a hole, but JavaScript.. Do Angular, Vue etc. execute such statements using another method? Thx for pointing on intercooler, have to check it
&gt; whats wrong with eval Again, I strongly recommend reading about CSP and security threat models. This is a good place to start: https://developers.google.com/web/fundamentals/security/csp/ Re: maintainability/readability, yes, unfortunately CSS isn't quite as powerful as JS, but there's something to be said about maintaining a dozen lines of HTML/CSS vs some 250 lines of JS ;) I think the sweet spot in these cases is to use just the bare minimum JS needed for the task.
This is pretty cool. Have you looked at Firebase as a comparable?
I was mostly replying to this: \&gt; there's no separation of concerns, and code is just thrown into everything because "component!". &amp;#x200B; there are no primitives to help you out with architecture. everything is "just components"
It’s a bit strange to split hairs over an internal JIT interpretation. What is the interpreter going to do in the future? Who’s to say it isn’t more optimized in Firefox, Safari, or Edge? Google could optimize these operations a few months down the road and we could find that using the spread operator *is* the fastest solution. While I generally prefer using immer or lodash/fp’s set for reducer functionality, I’m hard pressed to find a situation where reducer actions are firing with a frequency even remotely close enough to be impactful, let alone working with a data set even remotely close enough to matter. Sure there is a difference when you are running trying to run 10k ops/sec, but if you are handling data like that, you should be profiling and optimizing anyway. I certainly wouldn’t point to this as an argument against using spread, especially not when solution like immer or lodash/fp are so much more elegant.
Nice work! Neat to see how you've designed your library; I made a similar one: https://github.com/FThompson/Gamepads.js
Better the devil you know
1. Whats wrong with eval when it comes specifically to Browser's JavaScript? Is there any real-life cases? If hacker can post some JS and it will be saved in database, then executed for each site visitor through mindless eval usage - then ok. But whats wrong with eval usage not related to users data from database? One more time: everyone can evaluate any JS via console anyway. 2. Is there in the world a tool that can solve described task with less JS/CSS/HTML than mine simple script?
I see #4 is still a problem, and I agree with your list. Or I will, as soon as I can't use jquery at work
Lol nice fat fingered that one 🤣
&gt; but the last thing i would consider here is the complexity of an operation. Gonna have to hard disagree here and this is the exact mindset I'm hoping to fight. Choosing different complexity classes for a similar solution is a trade off, often a big one (like in this case). Trade offs are fine, but you should understand what they are and why you're making the decisions you are. I went into such detail in this post because I've had this discussion multiples of times and I really want people to understand that they're making this decision to use reduce...spread _for no reason_, either out of ignorance or for reasons they won't admit, such as [code golfing](https://en.wikipedia.org/wiki/Code_golf) or new shiny syndrome (gotta use the new shiny spread operator). There is no trade offs here, it's just objectively bad code. &gt; You don't operate that huge chunks of data to feel he difference The two problems here is that "huge chunks of data" is completely different for O(n) vs O(n^2), specifically for the later the bar for what constitutes a "huge chunk of data" is actually pretty low, as demonstrated in the benchmarks. That's especially problematic if you use this code in places that is run frequently, like React render functions (you'll literally feel the difference) or worse, in libraries that have no guarantees on the size of data they'll be operating on. Library users expect the code to be optimal.
It's the same in Swift, which I use quite a bit. I find it fairly readable personally. Do you know if any alternatives were proposed? I also use Kotlin where the equivalent operator is the aptly-named Elvis operator ?: I find ?? much easier to read.
I don't see how `async/await` has anything to do with the "buried dependencies" in your examples. `getBananaAndDoStuff` could be written without `async/await` and the dependency on `fetch` wouldn't change. &gt; Another problem with async/await: it encourages (and kind of requires) mixing your call to the API and the action you're taking on the response. This isn't true at all. You could isolate `doStuffToBanana` as a synchronous function regardless of whether or not you're using `async/await`. Nobody ever said you can't write declarative single purpose functions just because you're using `async/await`. &gt; For example? The fact that you're asking for examples here makes me wonder how much experience you actually have with JS and promises. A simple and very common example: ``` const a = await getA(); const b = await getB(a); const c = await getC(a, b); ``` With promise chains, you would need to either pass `a` down the chain with `b`: ``` getA() .then(a =&gt; getB(a).then(b =&gt; ({a, b})) ) .then(({a, b}) =&gt; getC(a, b)) ``` Or store `a` in the outer scope ``` let outerA; getA() .then(a =&gt; { outerA = a; return getB(a); }) .then(b =&gt; getC(outerA, b)) ``` &gt; If you have a limited understanding of functional program, this is likely true. This is not a refutation of my point, it is a supporting argument. I disagree. Async/await doesn't make code less "functional". There's nothing stopping you from writing functional code with async/await. More functions doesn't make code more "functional". I don't think you actually understand async/await. It's a fairly simple syntax sugar over promises and coroutines. Neither of these things are "not functional". It doesn't even need to change how you organize your functions. Bonus example: Running an async function on an array in sequence using `async/await` vs promise chains: ``` const results = []; for(const value of values) { result.push(await asyncFn(value)); } ``` vs ``` const results = values.reduce((promise, value) =&gt; promise.then(results =&gt; asyncFn(value).then(result =&gt; { results.push(result); return results; }) ) , Promise.resolve([])); ``` I think it's clear which one most people would have an easier time understanding (regardless of how much functional programming experience they have).
Also posted the source online: https://github.com/driescroons/snaike
I am using NoScript in firefox, so by default, I keep js off, turning on only if the website completely breaks without it. But this may be a reason to not use the website at all.
Basically you are unable to please everyone, javascript is necessary for complex logic so the loss of those who refuse to use it is acceptable as it represents a small fraction of a percent of overall users to any given site. The loss would be much higher if you tried to strip logic out of the site and therefore strip out functionality until it was just a poster.
Sure. The spread operator _is_ doing a shallow copy, but that's not the problem as much as it's doing a shallow copy for _every_ item you're reducing over. If you were to write the `reduce...spread` code in javascript _without_ the spread operator your code would go from something like let result = items.reduce((acc, item) =&gt; ({ ...acc, [item.name]: item.value }), {}) to something like let result = items.reduce((acc, item) =&gt; ( let newObj = {}; Object.keys(acc).forEach(key =&gt; { newObj[key] = acc[key]; }); newObj[item.name] = item.value; return newObj; ), {}) and that's similar to the code that's being generated for you by the javascript engine, although it's in machine code not javascript. It still has to do a similar amount of work because you're literally telling it "hey, make a new object, then copy all the properties to that object, then doing it over and over for every item". The only way the javascript engine can optimize this is if it **ignores** what you told it to do and says "well I think you meant _this_, so I'm changing your code", which is unlikely to happen. Then you compare it to the optimal function let result = items.reduce((acc, item) =&gt; { acc[item.name] = item.value; return acc; }, {}) and you can see how much less work is happening.
&gt; It’s a bit strange to split hairs over an internal JIT interpretation. What is the interpreter going to do in the future? I'm not splitting hairs over JIT implementation and I specifically reference your later point towards the end of the article (saying what you said). I'm splitting hairs over computational complexity, because that matters and is js engine agnostic. &gt; I certainly wouldn’t point to this as an argument against using spread, especially not when solution like immer or lodash/fp are so much more elegant. This wasn't an argument against using spread... Did you actually read the article? It sounds like you didn't.
I did actually read the article... for some reason my brain read “reduce” as in a redux reducer, so everywhere I saw ‘reduce...spread’ I read it as using spread in a reducer. You are right, I think I lost your point somewhere in the middle. I’ve also not seen someone try to use spread in a reduce function, let alone try to argue that it’s good. Not saying you are wrong for pointing it out or that people haven’t argued it with you, just that it’s probably why I failed so hard at reading comprehension.
It really depends on your situation though. The readability is the biggest win with reduce...spread, and much of the time you can be sure the input size is sufficiently small (10s, hundreds of items) that it makes no difference what complexity class the implementation is. Computation complexity talks about inputs that are sufficiently large. In real world, day to day programming we have many, many inputs that are guaranteed to be sufficiently small and you should choose the most simple and readable solution.
I think only power users would have it turned off, and they know what to do to fix it, so I don't personally worry about it.
&gt;as do &amp;&amp; used instead of ifs Man, you would hate my code then, lol. Cheers.
You should ignore the microscopic amount of users/browsers that dont support JS, and instead just write in a &lt;noscript&gt; tag that some/most functionality won't work as they have javascript disabled.
&gt; Is there any real-life cases Yes, there was a semi-recent vulnerability in Vue due to this very thing. The gist was that in some specific circumstances, it was possible to get Vue to run malicious code passed through a backend that assumed HTML was inert. This does fall in the category of attacks involving a backend, but the important thing to think about is that each part in isolation is harmless. It's only when they are all together in a complex environment that the vulnerability manifests itself. So, from a security perspective, it's better to safeguard a known possible attack vector while it's isolated so that it won't be a problem later when nobody has a full grasp on the entire system. &gt; everyone can evaluate any JS via console anyway Yes and there's a class of attacks called social engineering, which involve fooling users into shooting themselves in the foot by pasting unknown code into their consoles. The big obnoxious message in Facebook's console is there precisely to try to prevent those kinds of attacks. On a similar vein, it's conceivable that one could craft an attack that leverages an HTML injection but that only works if the user does some specific action, and they might be persuaded to do so via social engineering. &gt; Is there in the world a tool that can solve described task with less JS/CSS/HTML than mine simple script Here's an attempt using only one JS statement that I think has the same functionality https://codepen.io/anon/pen/QXWbBg It uses a combination of `disabled`, and `form:valid` to dynamically change the validation condition of the form depending on the state of the checkbox. I'm not disabling the button, in order to keep the browser's built-in contextual help tooltip when validation fails. I think it's better UX this way, but it could be adapted to be more like yours at the expense of losing contextual help.
Study [socket.io](https://socket.io) (google it)
ah, that is much more clear. so, after each iteration, we need to iterate through acc again to copy it to the newly created acc ref. Also, at each additional iteration, depending on the complexity of the operation, minimally, we can assume that at least one more item is being added onto acc, and that is why it is: 1. not linear 2. it looks like something close to and at the very least O(n^2) when we assume that we are adding an item on every iteration. It is close to O(n^2) because we have the reduce function is n. With our assumptions, then the inner function is at least (n^2 +n)/2 (gauss). So should the complexity be O(n^3)?
there is not enough code here to even kind of understand what the problem might be for one....Two, I second ResponsibleOstrich4, [socket.io](https://socket.io)
It is, most definitely
First I have to say sorry for bothering you When I asked about real-life cases, I also mentioned that security issues possible only with combination of user-input + server + DB + mindless JS eval. So, there is still nothing wrong with mine eval usage About less JS/CSS/HTML example - its nearly the same, but: 1) email input must have "Please, enter your email" 2) input should be focused when it appears 3) button should be disabled if checkbox checked and email is empty since we decided to subscribe 4) what if checkbox comes with "checked" attribute from server by default and we can not know it in advance? Suppose, we can not modify task I suggest you surrender)
Or have everything handled on the backend.
That is not an option if you want any kind of interactivity that isn't 100% CSS, you shouldn't sacrifice the fanciness and enjoyability of your website for the few people who disable scripts.
no.js is the most maintainable js framework
https://pastebin.com/gACMxV0J
Because of this I was thinking it would be much more usable in a Node app.
I don't understand what I am doing. I doubt trying to learn another thing on top of what I am currently doing is going to decrease the number of problems I have. I should first understand what I am doing before switching to different systems.
Watch some videos about socket.io ... ? Idk what to say..
I think there's a higher portion of people doing this than we realise, but to put it another way: The portion of people outside the tech community with JS disabled is just about nonexistent. People doing this are fully used to sites breaking, and they know how to make a decision around dealing with it.
You got everything right (I think) except the last part. If you treated the inner loop separately, it would be `n` because `n` would be the key count on `acc`, but it doesn't make sense to treat the inner loop separately because we want to know the complexity of the whole (reduce + inner loop), in other words our n is not the key count on acc, but the number of items we're reducing over. I don't know if you saw this stack overflow post I linked to in the article but it describes the same growth we have here: https://cs.stackexchange.com/questions/4590/big-o-nested-for-loop-with-dependence/4608#4608 The best way to describe it (for me) is that the inner loop does little work at start, but more work towards end (because more keys), eventually the later work it's doing starts to dwarf the earlier work (because for n = 100 for example: 1 + 2 + 3 ... + 49 is much smaller than 50+ 51 +52 +56... + 99), which means as n -&gt; infinity then our algorithm actually starts trending towards n^2 (it's getting closer to that the larger n gets), so we can say O(n^2) since that's what big O cares about.
I'm five minutes into the tutorial and already completely lost. Clearly it is going way over my head.
I should have added a /s. I’m a FE programmer. We get this question a lot and the answer is to have BE do it if you’d like a crappy clunky site.
By that same logic do we have capitalism to thank for producing NPM in the first place which has allowed the JS ecosystem to flourish the past 7+ years? (I'm not a fan of NPM at the moment due to the reasons listed above and I excited about the alternatives coming to market soon, but this just feels like a lazy comment.)
ah, you are right. i multiplied the reducer(n), by the gauss formula, i should have realized that the formula includes the reducer. thanks for being patient with me and helping me to think about this correctly. i will stop using ```...acc``` inside of reduce. but it looks so kool to do ```() =&gt;({...anything, otherThings})```, especially when looping. lol
&gt; Object.assign(...item.map((it) =&gt; { return {[it.key]: it.value}; })) If that's what you meant, then yes. Took me a bit to even grok what you were doing. Your solution _is_ O(n) which is good, but if we were looking at space complexity it'd still be pretty bad. But worse, it's just plain hard to read, IMO!
Fun. If it matters, Sinatra doesn't really show up. Looks blank.
I wonder if there's such thing as a triple edged sword, but physically how would that work?
"Yay!"
I'm not completely sure what this is. Is this a headless wordpress setup? Does it work with existing Wordpress plugins? Or does it just have a few vue functions to load wordpress data?
It's a development pattern. It stands for "Javascript Api Markup stack". There are various degree and versions of it but in the end the concept is: pages' markup is rendered at deploy time with data fetched from an API. Gatsby.js is an example of jamstack. There are some good resources here: https://jamstack.org/
What the heck. You were downvoted for politely asking a clarifying question?? Reddit confuses me sometimes
I've looked at firebase for this use case and in many situations it is very nice and provides enough free operations to meet most hobby projects, although while it was in beta I heard complaints related to availability. A local DB which syncs in the background automatically is amazing for developer productivity.
Cloud databases seem to be moving towards having an account for each application user, with access for that user limited within the database to only public data or data they own, so yes the client would have the password, but no two clients would have the same credentials unless it was the same user.
There are performance implications when you use console a lot. End users should basically never have to use this so removing it from code may be ideal. An alternative to maintaining this would be to ship the code with a custom logging implementation that doesn't do anything by default but if the user (probably a developer) switches a flag somewhere they could activate the console reporting.
I'd just like to take a moment to say thank you for your work. Reactive / real-time databases feel like the future of front end development, significantly streamlining the CRUD process, and I'm really glad there are more options becoming available.
Am I reading this correctly that there are only 2 open issues for this implementation? Is there a graveyard of ignored tickets somewhere, or is the project just that solid?
Thanks for pointing that out, I wouldn't have noticed it otherwise. I can't imagine I've attracted a stalker - I only post (and really care) about programming :)
thank you for the clear explanation.
Why would you do this? Remove them. Console has a lot of overhead/time cost and... why would you do it?
Hi, there. I thought I was within the guidelines on this one. I didn’t say “buy my class,” I simply said “looking for feedback.” And I honestly am. Also, your second bullet point seems to apply here too (this is not “all I do”). I’m not trying to argue, just trying to figure out exactly how to adhere to the rules. Thank you.
Generally speaking, I'm more or less with /u/vmajsuk and tend not to think too hard about time complexity. 99% of the time I'm working on simple line-of-business apps, and _n_ is never big enough to matter. Readability/maintainability matters way more to me. But this particular case is different. It's functional for the sake of being functional. I would even go so far as to say I don't consider the "reduce with mutation" solution to really even be mutation as written, because the accumulator is created FOR the reduce call. Furthermore, it's not a particularly attractive use of the ...spread operator and I find the `[key]: value` syntax to be less than readable as well. Then ice that terrible cake with the potential performance issues you discuss? That's some bad code. Finally, you'll noticed I never used the phrase "anti-pattern". I don't like that phrase. The phrase itself doesn't describe the meaning people are using it for, and it's taken on a very elitist connotation recently. Sort of a "I'm gonna make fun of how stupid you are in a way you're too stupid to understand so you look even more stupid". But that's a story for a different soap box. It *is* important to know the potential performance impact of things, in case I do need to optimize at some point, so thanks for the article and underlying research. I guess the tl;dr here is: I don't like it either, but for different reasons. I generally value readability over performance because performance tends not to be an issue (for me) anyway. But this is both difficult to read and has performance impacts.
how is let result = items.reduce((acc, item) =&gt; ({ ...acc, [item.name]: item.value }), {}) more readable than let result = items.reduce((acc, item) =&gt; { acc[item.name] = item.value; return acc; }, {}) I mean, really; I don't understand how people say that. But fine, there's some subjectivity there so whatever... I guess the crazier part is that you rank an arguably slight _subjective_ improvement over a major _objective_ improvement. That kind of decision making really makes me question the rest of your coding patterns, I'm guessing the issues don't just end here.
reddit is full of idots i can tell you that
This seems like a php question, not a javascript question.
Calm down friend, we're not here to measure coding dicks. We can argue about which is easier to read, sure. But you can't call something that has no measurable benefit a "major objective improvement". If you're reducing 30 items it objectively does not matter. It's not worth arguing about because the benefit of mutation is so small it becomes meaningless. Do it, sure. Or reduce and spread, no big deal. There are more interesting problems than this. I realize the irony of arguing about how it's dumb to argue about it. But here I am. I ask you though, what is the "major object improvement" of mutation when the array is 20 or 30 elements?
&gt; So, there is still nothing wrong with mine eval usage Your code would throw under common CSPs such as the ones used by Facebook, Google, etc. &gt; I suggest you surrender Oh, fine I'll bite. Here, 24 LOC of JS https://codepen.io/anon/pen/OeJMNB &gt; and we can not know it in advance So let me extend that condition back to you: suppose you don't control the CSP header your server sends and your code throws? How can you fix it? (To save you some trouble, know that `new Function` also throws) Also, your code has a bunch of other subtle problems. For example, if the user has js disabled, it will make the button entirely unclickable even if they don't want to subscribe. How would you fix that? Another example: if the form id is something like `export` your library will break. Another example: if the CSS used any other `display` value (e.g. `inline-block`, `flex`) instead of `display:block` in `label,button`, you'd get a layout breakage that cannot be fixed without modifying the library in the other codepen. Etc. I'd say some of the issues are manageable, but some of them are quite difficult to fix without big-ish design changes. So, yeah.
I solved it and I did it in javascript.
I'm not trying to prove I'm better than anyone, I'm trying to teach. I'm not sure you realize how frustrating it is to put a bunch of work into describing _and_ measuring a problem like this and then have someone reply &gt; But you can't call something that has **no measurable** benefit a "major objective improvement". The urge to face-palm myself reading your comments is unbearable. If I face-palmed myself n^2 times for each silly thing you've said I'd be dead. Joking aside, I'm not here to force you to make smart decisions and everything I want to say about the subject is already in my blog post.
All linear solutions are `O(n)` space. The space of key/value doesn't disappear when you add them to the same object. `O(2*n)` is considered `O(n)`. You can get rid of this overhead by using a lazy evaluated `.map` implementation, but that's not available as JS builtin. Also it might be interesting to look into versions that use recursion instead `.reduce`. Though it should be only worthwhile for Safari, which supports tail recursion.
I appreciate the work you put in to the blog post, and I'm not disagreeing that the spread is indeed much slower and that does matter in some (many) situations. I'm just taken back by your attitude and how you're presenting it. I stand by what I said, you have not been able to refute it, and again you resort to attacking me personally rather than answer my question. I'll re-iterate: It objectively does not matter does not matter with sufficiently small *n*, and many times we can be sure that *n* will be sufficiently small. Just because someone's code is using reduce...spread doesn't make the code "shit" or anything of the sort. Let's stick to that if you want to reply. I wish you the best and am serious about appreciating the post. I knew spread wouldn't be nearly as efficient as mutation, but I never realized how big an impact it can have. So thank you. I just think we can talk about this subject like adults.
Vanilla is pretty good, it’s got the best browser support.
Yeah, I definitely hear you there, especially if you ever were trying to do something that wasn't a standard CRUD app Ember could absolutely fight you every step of the way. I'm sorry you had such a negative experience with the framework 😞 React absolutely landed on the right primitive at the right time, there's no doubt about it. Components are the best possible pattern for working in the browser (and honestly, I feel like most UI based environments). I wish we'd been able to pivot more quickly, but it's hard to do that on a dime, and it took us a while to see just how valuable the pattern was going to be. I think this next iteration is going to begin feeling much more like React apps. Components are absolutely front and center, and like /u/nullvoxpopuli said below, I'm also hopeful we'll be able to get rid of Controllers finally soon, it's a big focus of the community this year. Anyways, I'm glad you found a tool that makes your job feel fun, that's really the most important thing 😄 maybe one day you'll be able to give Ember another shot, and see how much it's changed, but if not I won't blame you. I wouldn't go back to Backbone or Knockout or anything I used before Ember myself these days 😛
Nice answer, thank you. This is essentially how Google’s ad debugger works, except they load a full interface instead of using the console. I will also make a note to follow up on advertisers who overload this stuff.
Good points, but within a given codebase, I'd rather have a consistent coding style for performing the same action (e.g., flattening). It aids pattern recognition, which is a better benefit to me than sometimes going with a style that's slightly more readable.
Glad you solved it.....onclick you were calling holeMessages() but the function wasn't in that paste in code......
Hey— Thanks for the thanks! You're welcome.
[removed]
&gt;By that same logic do we have capitalism to thank for producing NPM in the first place which has allowed the JS ecosystem to flourish the past 7+ years? &amp;#x200B; Well, npm started out as a FOSS project before monetizing, right? Seems hard to attribute that to capitalism.
I just want to chime in with a small point. I’m usually against premature optimization, especially when the trade-offs are measurably trivial. However, I think it’s a mistake to assume that performance only matters when the user immediately “feels” it (e.g. laggy UI, browser crash, etc.). Performance has an impact on a user’s device even under “good” conditions. Excess computation can impact their battery life or RAM usage. Maybe your (not you specifically) app wont be that bad, but the cumulative effect of a grossly inefficient web ecosystem can have a noticeable effect on system resources. Not that this should be our primary concern, but considering how we’ve shifted more and more computation to the client side, and conserving server resources on our end, I think it’s only fair to be more considerate of the end user’s resources. Especially when it’s easy and painless to do so. When the trade-off is negligible, cries of “premature optimization” are just a lousy excuse for a lack of knowledge or conscientiousness. When the trade-off is meaningful, though, I’m with you—I give much more weight to the readability argument.
That is a good point, and I do take more care on the public facing sites. We monitor a variety of performance metrics in both the front and back end. But when I say the majority of my work is in line-of-business apps, I mean they're being used by employees on known, decent desktop hardware and under known, mostly reasonable conditions. And typically in these apps the front end load is minimal anyway. The capabilities of chrome windows on a solid business desktop far exceeds that of chrome mobile on a three year old bargain brand android phone. Javascript performance is so far down the list of my concerns it usually isn't worth considering.
The accessibility take here is interesting. I've done a small amount of screen reader testing for 508 compliance. There are ways to make your site work reasonably well, even in a SPA. With the web moving the way it is, I think at least some of the pressure is on the screen reader companies to find ways to accommodate js-heavy sites, and they seem to have done so.
I'm glad to hear that and need to read up on 508 compliance myself but do think about these things from the outside. I'll admit, I'm being more conservative than is necessary because again I'm naive. Custom JS in this context can be interactive things with no fallback resources or metadata though. Which I'm realizing you are very likely aware of.
damn thats clean.
My money is on graveyard
Thanks!
That’s totally fair. It’s really just a minor point, but I see a lot of people with a mentality of, “just hack that shit together and ship it quickly.” And then readability or premature optimization are just codewords for “I don’t want to think about it,” which is honestly a valid consideration given how mentally draining our work can be. But very often, taking just a *tiny bit* more pride in our work, and having a willingness to learn (or *unlearn*), we can make a real difference in the long run. ...or maybe I’m just a hopeless romantic.
Hi. I really tried to fix every bug that anyone found. So do not think there is a graveyard. See [https://github.com/pubkey/rxdb/issues?utf8=%E2%9C%93&amp;q=is%3Aissue](https://github.com/pubkey/rxdb/issues?utf8=%E2%9C%93&amp;q=is%3Aissue) and [https://github.com/pubkey/rxdb/blob/master/CHANGELOG.md](https://github.com/pubkey/rxdb/blob/master/CHANGELOG.md)
You're an idiot.
⚓️🎣↪️React-Redux v7.1 with HOOKS is now FINAL!!!↩️🎣⚓️ It's been a long and wild journey to get here. I plan on updating my post [ Idiomatic Redux: The History and Implementation of React-Redux](https://blog.isquaredsoftware.com/2018/11/react-redux-history-implementation/) in the near future to cover the release of v6, the issues that led to the development of v7, and the huge discussions and iterations on the hooks APIs that have finally been released as v7.1. Hopefully folks find these useful . If you've got feedback, please ping me or file issues!
Good job!
how is node not a true backend??
The answer is different depending on the unique set of circumstances surrounding each project you're building.
Thanks for the help man! Great answer, clear as water. And thanks for your patience!
That's... kinda disgusting.
Surely I'll be doing all the validations on the backend as well, it's just so much easier to not even bother the BE with that if FE can easily do it... and that much faster, too.
It's more important to be able to write functional code than it is to learn ES6 methods, arrows, or feel the need to use syntax you find confusing -- they'll become much easier to understand when you have more experience. I ran into a ton of "beginner" tutorials using pretty advance syntax that always overwhelmed me, and ended up only confusing and discouraging me because it made me feel I was too dumb to code. In reality, expecting people to play Beethoven before Mary Had a Little Lamb is just bad teaching which, though a few very bright people might get right off the bat, may come at the expense of a large portion of others.
thats what she said
U can't credit capitalism only because it happend under capitalism. Most of genius ideas came out of passion. Business men monetized the ideas. Today, it's even more visible as business men fund R&amp;D departments directly. They are in charge of what's gonna get released to the public, as they decide what's being focused and worked on. &amp;#x200B; Fuck that. World is changing faster than people can understand. We're going full open-source. Open-source energy is the next step. Then, when that's released, the entire shape of our industry and economy will change.
Yay! Now my knowledge is out of date by just slightly more!
you're actually right it probably has to do with the SVG file created by the author of the repo. Unfortunately nothing that I can do :( but I can open an issue on his repo! thanks
There's no slowing down in this brave new world of js Someone help a newbie out here. I'm a web dev but just started learning react 5 months ago in my off-hours. Redux / thunk / lifecycles all make perfect sense to me. I also spent maybe 8 or 10 hours getting a real basic introductory sense of how hooks (and the context system) work. My initial thoughts were "Huh, I guess this is something that sort of replaces redux". I know its not a 1 to 1 replacement, they're different for sure, but to my uninitiated mind I don't understand the benefit of using hooks *and* redux, when I can just stick with components and redux. In simple terms, whats the allure of adding hooks into the mix?
Yeah that's true, they all have their pros and cons
ship them by packing your site in electron. so they can't disable javascript.
Hi /u/nimesh_nc, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The API is nicer - that's it. The react hooks `useDispatch` does mean that redux is sort of built into react now, but it's more like `redux v0.1` so the full redux does still have a place.
What's the difference between the two? Glancing at the syntax they look like the same thing
The only thing I feel uncomfortable with is useDispatch, mainly because I’m a jsx-no-lambda rile user. Though it should be easy enough to create a hook that extends useDispatch’s functionality to emulate something closer. I do feel like there is a lot more typing in general with hooks, especially if you’re hooking up to more than one piece of state/multiple selectors etc. I’ll need to re-read the proposal and double check the comments on best practices here.
So lets say you were rebuilding a little 60 hour personal project from early 2018. Would throwing hooks-redux into the mix change any of your design choices, or is it really a case of having more pleasent tools to work with and nothing else? Also, I think this is the case but it would be nice to hear, hooks essentially means class-based components are completely out the window, right? Does this effect HOC?
None of your existing Redux knowledge is out of date. This new set of APIs is just an alternative to wrapping your components in `connect()`. Instead, you can opt in to calling `useSelector()` and `useDispatch()` in a function component to access the Redux store, _if you want_.
None of these are free
Just learned about the no lambda rule from you. Thats fascinating, and strange that its not hinted at from react / create-react-app. I imagine that adds a lot of extra code in certain situations. Just wondering, at what point do you notice a real performance impact? I have to imagine its on pretty heavy operations.
Its extremely useful in a lot of powerful web apps. And I've seen major applications (I'm looking at you Instacart Shopper App) that perform very poorly because they assume constant &amp; reliable connectivity. At work the product I'm working on is entirely offline-first. We operate under the assumption that after the user visits the application once, they may never have connection again. This allows us to serve a fully functioning application that competes with the availability of an installed application but also enable features like multiple device syncing, cloud backup, etc.
Hooks are a component paradigm, they have little to do with redux. Where previously a component would expose lifecycles (componentDidMount/Unmount/Update) and special fields (this.state, this.refs, this.context, etc), with hooks it doesn't do this any longer. A component calls into the host directly now to get this data, which allows it to group and re-use responsibilities, but also orchestrate them, where one thing can feed into the other. For a good example, try this: [https://twitter.com/dan\_abramov/status/1093681122897260545](https://twitter.com/dan_abramov/status/1093681122897260545) It has 5 hooks that all rely on one another. First serves media queries, second measures screen-width, third holds local state, fourth shuffles state, fifth turns state into motion. With lifecylces, hocs and renderprops this code would be at least 3 times as big, it would have lots of implicit contracts and wraps.
Company codebase and it’s part of the Airbnb rules so it’s not something I actually want to enforce. I haven’t found that it adds too much code, as most things are already functions (e.g. pre-bound dispatch actions from mapDiapatchToProps), only case where a handler is needed is if we are handling synthetic events, or binding a prop early, and that’s in very few places for the most part. It looks like it may end up adding more code where hooks are considered though and may be worth disabling. On the other hand, it can make things more explicit/readable as the functions that you’re passing are named for purpose. Regarding performance, it’s not something that I’ve noticed (though, why would it really, lambdas are cheap), but we have a bunch of generic curried handlers for example that we share across the codebase so there’s that.
&gt; hooks essentially means class-based components are completely out the window, right? I wouldn't say "out the window" you can still use them if you prefer but in my opinion, JS works better with functions and composition rather than the half-baked OOP model it has. I would advocate strongly for avoiding them in the future as a stylistic choice. That doesn't mean you need to go an rewrite all your classes if they're happy and working, just that this is the style most people will be using in the future.
Update: now I've done about half of Meads React course and about 20% of Griders. I'm really impressed with Grider's structure and explanations. From now on, Grider will be my go-to instructor. Will definitely get his advanced React and Node.js fullstack courses as well. Any experience of these? Many thanks for pointing me in Grider's direction. Now I definitely consider Grider the best.
I'm also not sure, but isn't this the internal time for the browser to parse &amp; interpret (JIT) the code as JS?