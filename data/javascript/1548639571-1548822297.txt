Because he starts looping at index 1. But the correct answer of question 1 starts at index 0.
That's literally an opinion piece with really bad data behind it... &gt;all TypeScript-detectable bugs can potentially be caught with other measures like TDD. Of course, and of course you're still going to still use other methods. TypeScript still helps mitigate that, even if other QA/testing procedures also help. The whole comment section of that article is a little nauseating too, it's literally him applauding everyone that agrees with him (including comments like 'I didn't wanna use TS but that was just a gut feeling) and being passive aggressive with anyone who disagrees even if they share legitimate experience as to why they might. 
it would if you didn't need to teach people it. Like, trying to get people who barely have a grasp on programming to learn types is the problem, not the types themselves.
Why do I have the feeling that you write terrible markup and styles...
The \`eval('q'+i)' expression evaluates to the value of \`q1\`, \`q2\`, or \`q3\`. The \`answers\` array is a precalculated set of answers corresponding to \`q1\`, \`q2\`, and \`q3\`. The relationship between the q's and the answers is based on position - 1, 2, or 3. &amp;#x200B; For this to work the value of \`document.forms\['quizForm'\]\['q1'\].value\` must correspond to the value of \`answer\[0\]\`. &amp;#x200B; I hope this helps
webgl that supports tessellation and compute shaders 
/r/remotejs May be a better fit for your query
I'd take a large grain of salt with that article. 
OH! &amp;#x200B; That makes so much sense now. Thank you so much!
the official docs are quite comprehensive, and using Unpoly is so easy. 
pattern matching
1. It's now smaller in size after removing the jQuery dependency. 2. Performance is now better than before as it now uses modern (performant) JavaScript. 3. If by weight you mean the library's size in KBs, it's already very small, and with modern browsers you're not downloading it again and again with every request. If you think those "popups and other random stuff" will slow down your page, so they won't until you use them. 4. It's for projects where your layout isn't composed of tens of thousands of elements. In that case you should of course see some other alternative. It's for simple projects, where you can get 90% of the functionality of other modern frameworks/libraries with 10% of effort. 
CoffeeScript called it the existential operator, and I really miss it
Care to elaborate?
Are you learning JavaScript for web development? Then yes, you should at least learn HTML and understand CSS (no need to be a designer, though). After all, you can make a page without JavaScript, but not without HTML. 
Looks awesome, I'll have to give it a try soon. Any idea what the runtime performance looks like compared to Node?
I gotchu fam: try { return super.nested.value.i.want; } catch (_) { return null; }
So... to start with this is the javascript subreddit, not the java subreddit, and java and javascript are about as similar as car and carpet. So... I'm not sure what you're trying to accomplish, but almost certainly you have the loop incorrectly setup. It should probably look like this: for (int i = 1; i &lt;= 15000; i++) { int result = "equation involving i"; System.out.println(result + i); }
Weak typing is core js, you would break the vast majority of code with strong typing. And if you meant static types then you can always use typescript instead if you insist upon that time waste. Js is one of the best dynamically typed languages out there, and it is a big draw.
Once you go node.....
I’ll take TypeScript.....
I would say it should be the other way around.
I thought /u/Hawxe summed it up pretty well. It's just an opinion piece and he annoyingly presents opinions as if they are facts. Things like "TypeScript-detectable bugs can potentially be caught with other measures like TDD" gloss over the fact this requires immense test coverage to pull off, among other things. The article was also just incredibly arbitrary. Developer tooling has a benefit of "2". What does that even mean? &gt; In most cases, if you can gain a significant benefit from TypeScript in your refactoring, that’s often a code smell indicating that your code is too tightly coupled Sorry Eric, but welcome to the real world. There's lots of bad code out there. Lots of code with good initial intentions, code that has had new features bolted onto, etc etc. And refactoring and cleaning up this code when it's strongly typed is *significantly* easier. I find many JS code bases just don't even try, there's an ancient wad of code that's been festering for 5 years and now no one dares touch it. Strong typing allows you to avoid that problem from happening because you can clean things up confidently. Dynamic versus static typing has been a debate for literally decades now. One Medium article isn't going to end it. I have found TS to be immensely helpful to the point I don't see myself ever starting a JS project ever again. I will admit Eric Elliot rubs me the wrong way, he has a holier than thou attitude that really bugs me.
It’s true. But learning a new code base can be harder than picking up a new language depending on the architecture and paradigm. Instead of it being defined by a certain language, it should b defined by paradigm. For example, OOP vs functional, Web API vs MVC, Content management systems versus frameworks, etc. 
I’d say it’s unlikely to be abandoned considering Facebook themselves have a number of things that use it. However, it is a recognition that TypeScript is much more prevalent in the community and so it’s unlikely to be a good idea to build an open source library with Flow.
HTML is gonna be really useful. You may want CSS to make something's easier but it's not necessary if you don't want it.
I love css html and design and haven’t gotten a grasp on JavaScript so..... 
It's missing a vision, I'd say. One of the things I like about Lua is that the authors know what they want it to be. Roberto is very responsive on the mailing lists, but if a feature isn't compatible with what he wants Lua to be then it likely just won't be added. There's something to be said about a language staying in it's own lane. Then you have JS (or PHP) that just adds any popular feature and can't even purge any of it for fear of "breaking the web". Seriously wtf,the community is hot for static types so now people are calling for it to evolve from a dynamically typed language to a static typed language? How would that even work? Type hints? A typed mode like strict mode? If you're language isn't exactly what you need it to be, just use a lib or use a different language. JS has a lot of user, if they all threw their dream feature in there it's going to be the tallest pile of shit anyone's ever seen. /rant
I think this is incorrect.
Yes you should definitely learn them as well. 
HTML is a quick learn. CSS is a different story. I understand CSS and can use it, but it’s not my strong suit. It makes sense to learn them, but neither is absolutely essential to using and understanding JS. 
Yeah seriously how hard is declaring what type a variable is.
Yes
Absolutely! 
Hello, can you give us a bit more back story? Like what is Destiny 2 API library, I know a few libraries like three.js and jquery etc but I've never heard of destiny 2. Is it like a framework, or more like a library?
Flow engineers will say no, yarn's a community project and that's just the choice that community made. But yes, it's not looking awesome for Flow. A shame, since it seems like its type inference is actually better.
I agree 100%. I hope to see more speak of paradigms over stacks in the coming years when it comes to job descriptions and interviews. 
learn HTML and CSS first
I work with a whole team of people like you. I'm the only really good CSS developer and I came back from a year of mat leave to a giant spaghetti broken mess that is going to take me months to fix. I'm unironically thrilled. 
Very interesting. Good job!
&gt; It is not a SPA framework Durandal.
... you won't return to your abode?
Dependency graphs explode
This is the answer. 
Yes, some. Read the nice long answer below about being T shaped. 
Because node existed before the spec for module imports existed. 
I'm a little late but, what I'm currently struggling with is memory management. I can take snapshots of the heap, but all that tells me how much memory a tab is using. I can compare 2 heaps to see if I have a memory leak. And all it will show me is vague things like 1,346,164 more arrays were created. I'd love to be able to get to the individual memory cost of a variable. Some sort of data on what objects/function is creating what variables. Etc... 
If you consider static types a time waste you don't know what the heck you are talking about 
Optionally strong typing is a thing. PHP recently added this. Lets people who want strong types use them, and people who don't, don't have to.
I'm not sure if you know or just worded it in such a way, but Node's "out-of-spec" require existed long before ES Modules were even being discussed.
It works the way you want in C#
Not the op but I've been doing development for 20 years and done typescript and normal js. I think static typing is nice to have but I honestly rarely if ever run into issues caused by dynamic typing, and it does let you write code and functions that can handle a lot of cases and reduce the amount of code you write.
One argument against it is that it is unreadable. That is, there is nothing to suggest `a * b` is not mathematical. This argument is time sensitive, since meaning will change. Another argument is that without great pattern matching systems, you end up with ambiguity or confusion. JS types are hard to describe in code. E.g. Is `5` typed `Number´ or ´"number"´? Under the hood, neither. Typescript doesn't even help, only adds another possibility, `number`. With type coercion, this gets even more difficult to describe. Yet another argument is that it kills a lot of the optimization that JS has relied on to be feasible for fast ops. If the compiler has to check types, it can't inline operations until it is sure that the types are basic types. Otherwise, it has to do costly method lookup as in a normal call.
Why do you consider import more flexible? The advantage is mostly static analysis for tree shaking. They are a little less flexible in certain circumstances as you can't import synchronously unlike a require call.
&gt;not having a standard library is a joke at this point lodash?
Do you happen to know why they return false in the validation section?
Your right, of course. It's just not the ES spec, is all. Just one of those things.
Destiny 2 is a video game. Bungie is the developer of the game and they have exposed an API for people to use. OP seems to have created a library based off of this.
If you've experience in handling complex process, especially developing library-style functions / code, you'll find that the more definitive / restrictive the input params, the better. Static typing is really helping in this case. The reason for it is because if the type mistake can be caught in compile time, it save many testing time. This including how many test cases that need to be developed to cover all type mistakes, reducing code complexity and it's "noise" caused by type checking since almost everything is handled by compiler / static typing. Not to mention how it helps to define input types inside deep function call (function a call b that call c that call d, all accepting parameter x from function a).
Something I recently did to avoid using an NPM package all together was to use a tiny bash script! 1) Create a bash script with the following: #!/bin/bash export $(grep -v '^#' .env) "$@" 2) Call the script before your code in your `package.json`: "start": "./scripts/env.sh electron ." The script retrieves all environment variables (excluding comments) in a `.env` file. Then, it exports them right before it executes any commands that were passed to the script. The `export` ensures all subprocesses have access to the declared variables, but it doesn't persist them beyond the life of the script. This way, there's no code replacement (like with webpack), and no extra dependencies (like when using `dotenv` or something similar). If you have multiple environments, make `.dev.env` or `.prod.env` files, and pass the desired name to the grep command! --- *If you're using Windows... sorry* :(
UwU Are you happy to see me or is that a node.js in your pants
Exactly. It's not really anything to "learn" - it's a simple feature of many languages. I've developed in Java, C#, python, and JavaScript. I've found that I like both dynamic types and weakly typed development better.
I'm not suggesting an opinion article will end the debate. I just thought it was a nice summary that I agreed with. I've developed with strong types, dynamic types, and weak types. I prefer both dynamic and weak compared to strong.
Okay that's great! I continue to Dev in TS often at work. I just prefer weak types.
This isn’t a hack at all. Fixing the language would mean adding a new operator like `typename` instead of typeof or instanceof because too much stuff already relies on the current behavior. We already have this in the form of Object.prototype.toString.
This isn’t a hack at all. Fixing the language would mean adding a new operator like `typename` instead of typeof or instanceof because too much stuff already relies on the current behavior. We already have this in the form of Object.prototype.toString.
A lot of cons are specific to typescript. Yes that's true, I picked this article bc OP suggested adding strong types to JS. But I disagree that his data is bad. I find a lot of what he said agreeable. I've coded in strong, dynamic and weak. (C#, Java, Pyhon, JS/TS) and prefer weak types. I was just stating my opinion and providing an article to elaborate. I don't expect to end the debate on strong vs weak.
Something like [Kotlin's Safe Calls](https://kotlinlang.org/docs/reference/null-safety.html#safe-calls)?
Joined [Ryans talk last year at JSconf](https://www.youtube.com/watch?v=M3BM9TB-8yA) when he first introduced deno. It's crazy how much hot garbage nodejs actually is, but in the end it still became one of the most important new technologies. Great to see some actual innovation on top of the idea. I just don't understand why they're enforcing file endings when ECMA and TypeScript both disencourage it.
Sadly no JSON support. Why can't they have it as a string with the postfix "n" attached?
Just a nitpick. The check is not against `undefined`, it's against `&lt;empty slots&gt;`. ```js const arr = new Array(1); // creates a holey array with 1 empty slot for (const v of arr) console.log(v); // This is run arr.forEach((v) =&gt; console.log(v)); // This is not ``` ```js const arr = new Array(1).fill(); // creates an array with an undefined entry for (const v of arr) console.log(v); // This is run arr.forEach((v) =&gt; console.log(v)); // This is run too ```
You can't get a JS job without knowing html. Html and CSS are how you build the user interface of your software. If you want to work in the industry, there is no job you will apply to that won't require html.
You literally can’t build a website without html and css. Learn it. 
🙄 
This is wonderful! You think I could use this codebase to adapt it to the NBA?
HTML is the best programming language in the world 
I wish I saw this before I worked at an agency for someone who didn't support growth. Well now I know it's apparently common, so thank you for mentioning that. It's nice to know I'm not the only one who wound up in such a position. Now I have to figure out how to move on to something else. 
In my case, I write in both, Controller as well as Service
You’ll have to create your own salting algorithm. Node has its own hashing algorithm. The token itself is just a string embedded in the header then the client stores it, so it should all be doable. 
And Javascript is the best markup language in the universe. 
The Vue.js creator himself!
What makes you decide when to use which situation?
I hope none of these get added to complicate the language. I’d like them to add things like the ability to seed the math.random() Also the DOM API is missing a ton of things why isn’t there as much discussion about that? For example get how tall the virtual keyboard is on mobile, or if it’s open, or get how tall 100vh is since some phones consider it to be the visible area and some the full screen height including browser bars. Or get the width of the scroll bar without hacks. Etc.
The "Get Started" includes a bunch of examples that use it, and the site itself seems to use it at least somewhat.
That is correct, thank you.
Thanks 
Just came in to parrot what everyone is saying Learn HTML and CSS first. You don't have to spend more than a few days on it or even a day of hard work may be enough. 
I clearly don't understand JWT then... Might I beg an explanation of you then, please?
I read the first couple of sentences and realized it was the same guy as the "mocks are a code smell" article. The stats in this piece are just laughable. Like, I have respect for the man as a software engineer -- he certainly seems like he knows a lot about some of the things he talks about. But his whole series just reads too big for his britches. Way back in the day I used to be a writing tutor for undergrads and would get this shit all the time. It just reeks of research condicted with premeditated conclusions mixed with a "i am very smart" attitude. But the charts. The charts are the best part. "Look! The data fits my hypothesis exactly because I fit the data to my hypothesis."
Personal opinion, I like material more. It's more Flexible.
Ohh wow. You’re right! Strangely, your first example for loop logs undefined for the empty slot. So to get an item in the array back to an empty slot, you’d actually have to delete it instead of assigning it undefined?
One year and a half, and I like programming very much.
Thank you very much. I'm just a newbie, and I just use Reddits two days ago. 
Can you code an API that convinces Bungie to stop making slot machine games?
Exactly like that. That's such a wonderful language feature.
[removed]
Try using a Proxy?
god, this language is the bain of programming. It is perpetuating crappy code. 
What's worse - Intuit (Mint) having your financial information or Google? 😂 Jokes aside, this seems really well done. Nice work!
&gt; native Well, it's a bit of sugar on top only. deno still transpiles your code to js under the hood.
Thank's so much this may be a dumb question but when people create a website they have .html pages and .js pages on their framework ide or whatsoever my question is how do they end up with a website ? do they mix them up? or does it count as a website when both pages are on the same file? Sorry again my english isn't perfect
You're doing a lot of cyclical non-DRY work. You grab an element by its color ID and then grab the uppercase text in the element, only to convert it back to lowercase in order to determine the color, which you already had. A more manageable way to do a lookup table is an object holding keys and the value you want to use. Then you can just do a key lookup a la `colorChart[e.keyCode]` const colorChart = { 65: 'red', 68: 'yellow', 70: 'green', 72: 'cyan', 74: 'blue', 75: 'purple', 76: 'pink', 83: 'orange' } function checkColor(e) { colorChart[e.keyCode] ? changeColor(colorChart[e.keyCode]) : null; } function changeColor(color) { document.body.style.background = color; }
dm me
Aww, it does? Boo. 
It logs `undefined` because `v` cannot be "nothing", undefined is kind of the fallback. Why I don't see _why_ you would create an empty array _on purpose_, yes, you have to delete to get an empty slot.
If you are asking these types of questions I’d say you should find basic html css JavaScript courses to show you how these can all fit together. 
thank's for being kind
My controllers have a catch for each non OK response. Not found, bad input, unexpected. The service layer throws these, or converts other exceptions to one of these. (Eg: foreign constraint db violation on save can be converted to a bad input exception and rethrown)
Jest is a Facebook project that is in the process of migrating from Flow to TypeScript. [https://github.com/facebook/jest/pull/7554#issuecomment-454358729](https://github.com/facebook/jest/pull/7554#issuecomment-454358729)
Could you please tell me how to do this with v3 then?
&gt; Sadly no JSON support. JSON's number support has always been a subset of what a number means anyway, and doesn't support common representations like bases 2,8,16, nor does it support exponents. It doesn't even specify that the numbers are IEE754 double-precision floating point values. The rationale is explained pretty well in ECMA-404: &gt; JSON is agnostic about the semantics of numbers. In any programming language, there can be a variety of number types of various capacities and complements, fixed or floating, binary or decimal. That can make interchange between different programming languages difficult. JSON instead offers only the representation of numbers that humans use: a sequence of digits. All programming languages know how to make sense of digit sequences even if they disagree on internal representations. That is enough to allow interchange. &gt; Why can't they have it as a string with the postfix "n" attached? JSON can't mandate what the content and context of any given string is supposed to be. { "someValue": "3n" } That particular expression can be * Multiplication: 3\*n * A BigInt * A subset of CSS (See `nth-child`) (which in itself implies the multiplicative). As JSON is a data interchange format, you are completely free to use strings to represent numbers, and it is even the right thing to do in the case that you need to be succinct about the internal representation of the number. 
Why is it better then webpack-dev-server? I assume you don't say this because it's your package. What advantages does it have compared with webpack-dev-server?
Technically it is possible to make a website writing only JS. It's just that it would be a very ineffective way to do it.
But honestly, if you want to shoot for the stars and build rockets that only go in one direction very fast and don't need to look good doin it cuz ROCKET!!! Just learn enough html to know, html - head - title - body - div - span - h1 - p, and maybe enough css to know like.. font-color, background-color, border, and maybe whatever else comes up on your radar. What feels right to what you want to build? People still program command line apps, ugly as sitting on a bee's nest to some, but others of us find great beauty in it's speed and simplicity. Build what gets you more hours building at the keyboard, even when utterly frustrated at said keyboard and fingers for lacking the output necessary, just open that editor/ide and Google away. 
Prettier, colored braces, gitlens...
who cares? vue is where it's at.
Thanks for the public google sheet I've been looking at putting something like this together for the last few weeks and excel just isn't in my skillset. So this is great to refer to.
Bootstrap forces you to use it... And my company forces me to use Bootstrap. That's the only reason why jquery is still in my codebase but no one use it
Then again, why *not* enforce it? This kind of ambiguity just results in headaches. import xx from "app/subappp`. What's subapp? It it a directory? Can I readdir its contents? Is it a package? Can I check its version number? Is it a module file? Can I import stuff directly/sanely? Is it a plain js file? Will it immediately execute on run? Is it even a file? I think no fileendings should be reserved for clearly defined packages (or whatever else the deno equivalent) which export a table of contents ES6-style (no default export), and nothing else.
should be crossposted to r/selfhosted
This is beyond apples and oranges. It's like comparing apples and zebras
This is beyond apples and oranges. It's like comparing apples to zebras
[done!](https://www.reddit.com/r/selfhosted/comments/aklej7/mintable_a_rollyourown_mint_clone_for_managing/?st=JRG1UJO0&amp;sh=57c93931) 
Yes
oh reddit downvoters... you're adorable I'm sorry, I didn't mean to offend those that struggle. It's really not difficult to learn, it's just time to be acclimated. If you think HTML and CSS are as complex to learn as Javascript, I'm not sure what to tell ya.
Plaid is not exactly "self hosted" for the privacy conscious - they still have a copy of your finances. But it's way better than mint.
They enforce it because browsers don't have a concept of "discovery". A browser can't infer the extension without doing an excessive number (&gt;1) of requests and hoping for the best. Deno has the same limitation in that respect as it loads third-party dependencies by URL, so it would take multiple attempts to figure out what the extension is.
npm install half-of-github
The irony.
- The benchmarks only show benefits, are there really no tradeoffs. How for example does the cost of generating the index compare? - Can an indexe be serialized/deserialized?
This post was removed. Please see our guidelines on job postings and the likes.
Java is not the same programming language as JavaScript. Please refer to /r/java.
I mean in the video he talks about how he chose not to require the file extensions in Node disparagingly if I remember correctly.
1. You write HTML (in an .html file) to put, for example, things like `&lt;h1&gt;A header&lt;/h1&gt;` inside 2. Then you write CSS (either inside `&lt;style&gt;&lt;/style&gt;` tags and/or in .css files) to make that header have a style, for example: `h1 { color: red; }` makes the H1 element red 3. Then you can write JS (in `&lt;script&gt;&lt;/script&gt;` tags or in a .js file) to make the first header a different color, for example: `document.getElementsByTagName('h1')[0].style.color = 'blue';` So yes, you mix them up. To display anything you'll need HTML. Javascript can generate HTML for you, or you can write it yourself. And you can even use Javascript to write CSS. Just follow a few basic online trainings. You'll quickly see how it all works together :)
&gt; it does let you write code and functions that can handle a lot of cases Static typing prohibits this? I'll echo the above comment, I don't think you know what you're talking about.
HTML is kind of easy to learn while css can be tough depends on your design. You can always start to learn those basics while focusing on javascript. If you planning to learn some js framework like react or vue in the future, css is not easy. 
Wiiiieeee... This is so cool! Thank you and have some star dust!
It's not about the size of the node\_modules folder, but the motion of the.... I give up.
You should try a website like freelancer or upwork... If all recruiters started posting job ads here on reddit there wouldn't be much JavaScript to read about and that would make me a sad, sad koala :(
I'm not sure it's 100% working ``` index.search('test', (results) =&gt; console.log(results)) ``` works fine ``` const results = await index.search('test'); console.log(results); ``` returns an empty array
Yes?
I've got a similar relationship to HTML and CSS to the one you describe, but lately I've been trying to to change this by actually getting to grips with semantic HTML markup and well written CSS. I'll always be more of a JavaScript developer than a developer of layouts/designs (especially considering the fact that I'm color blind), but the more I dabble with CSS, I realize that just like JS got a boost with ES6, CSS has grown by leaps and bounds since I last paid any attention to it, with the grid and flex layouts, animations, variables and so forth, and is way more fun to write than when I had to screw around with floats and then figure out why the background color of the footer had disappeared... Arhhh... I'm clenching my fists just thinking about it as I'm writing this... 
They might be referring to React using JavaScript making you believe you're writing HTML in your code, still, you need to know HTML and CSS, while in modern web application development you could spend 80% of your time writing logic in JavaScript you'll need to surface your hard work visually in those fancy divs, unless another team takes care of that. CSS got a lot easier lately so don't be afraid! Oh and also don't start learning JavaScript by using frameworks/libraries if you really want to understand what's going on
Another bug I found, lots of newlines appear to crash it: const dict = fs.readFileSync('/usr/share/dict/words', 'utf-8'); index.add('one', dict.replace(/\n/g, ' ')); // fine, takes about 2.617s to index index.add('one', dict); // FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
This is amazing, mint has gotten so bad 17 of my accounts can't be read. I'll give it a shot
JavaScript, CSS and HTML are related technologies when talking about the browser as an environment. So yes you will need to learn all the related technologies. However, the career you are aiming for will influence how much you know about these select technologies. **JavaScript developer:** Has an in depth understanding of JavaScript and some knowledge of HTML and CSS. They are more concerned with the logic in the application, integration, data structures, state and so on. **UI Designers:** Will know HTML and CSS inside out as they will use the technologies to create the interface / layout of your application. This includes animations with CSS3, Usability, colour palettes and so on. Someone like this will probably have a basic understanding of JavaScript but for the purpose of animation and not necessarily programming in JavaScript.
["Strong/weak" typing doesn't mean anything.](https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/)
Might be worth having a chat with /u/EdgarVerona, if he has time. He built and maintains the API for Bungie. 
The thing that is being lost in this discussion, apart from the general sloppy use of terminology, is that TypeScript isn't a staticly typed language in the mold of Java and C#. It occupies a wonderful sweet-spot between Java/C# on the one side and JS/Python on the other. TypeScript's optional and structural type system combines the flexibility and ease of use of JS with advantages of static analysis (read: tooling) and compile time checking. It has a very different feel compared to Java/C#. 
I don't know, relying on the `toString` method to get the type feels like a hack to me. I don't know any other language that does this. Yet another operator wouldn't be great either I get that. Maybe it would be cool to have it as part of the Reflection API, e.g. `Reflect.type(VALUE)` ?
I put it on my todo list. Thanks.
use this: [https://codepen.io/csspoints/pen/LqNdoZ](https://codepen.io/csspoints/pen/LqNdoZ)
Really nice features. I already planned to make cluster available based on node.js and also providing a simple web server.
You're getting downvoted, but, leaving aside the Lua comparison -not because there's anything wrong with it, but because I don't think we need the it-, I do think you have a very valid point. To me, _most_ of what is happening to the language is the effect of it being guided by a committee and of the proposal system. And the result is a transformation from a language that was _clearly limited_ but fundamentally simple, to one which is probably more powerful but also clearly unnecessarily complex and dirty. I'm all for _fixing flaws_, but I don't think that's what the TC39 is doing. _Direction_ is missing.
Fuse takes so much time that 1 query loop is not finished during 1 second. I added one decimal place to the "op/s".
Wow, if that's the case I hope your project gains traction! You should add "fuzzy search" to the tags to make it easier to find
Of course the benchmark shows the strength, and this is raw search speed. In the documentation there is also explained that adding/removing content from the index has a significant cost.
Thanks for posting the bug. I will investigate immediately.
More to your point. JSON already supports BigInts because it doesn't demand a limit on the size of number values, and a big int is just a number with a lot of digits in it. It is the responsibility of the JSON parser to choose an appropriate internal number representation. 
seems cool un usable while dependencies are required to be commited to source control. If that changes I would definetly give it a look.
1) It's still 500kb large, that's 40% more than Vue.js and I don't even know how many times larger than React. 2) I have no time to audit 16k lines of code to see weather you are right or not 3) Half a mb is not a tiny footprint, sure it's a matter of definition, but when your library is bigger than the two bloatiest libs out there combined (jQuery + bloatstrap), yeah, then you have a problem (in my mind, personal opinon) 4) If my app is small, I would normally choose to not use a framework because it's unnessecary bloat, especially when it's half a freaking megabyte, But. when I'm building a tiny-app and if I really need some reactivity I'd go with Svelte.js I'm sorry for the harsh words, I don't wanna be mean or anything, I wanna critique you, hopefully you understand what I' trying to say. Keep up the good work, and keep us updated :)
It should be fixed in v.0.3.21, could you try again please?
Yep, does the trick. Top work :thumbsup:
Python has operator overloading but not very used... Because apparently there is not very much good use-case for it.
Thanks for the report, i will investigate to this issue immediately.
&gt; Static typing prohibits this? Write me a nice `addition(a, b): a + b` function that works for the Signature (float, int, BigInt) or any valid combination thereof as well as the string and String type. In the statically typed language of your choice. I am curious. &gt; I don't think you know what you're talking about. I think you are not being charitable to his experience. Static typing avoid some class of bugs, but those type of bugs are easy to catch and fix. Especially if you have any sort of basic Q&amp;A in place. Also linter on dynamic language have progressed to cover quite a large piece of what `static` compiler used to cover like e.g. a typo on a variable name. The advantage of static are more about documentation and auto-completion in my experience.
a web page
It'll only return false if one of the questions are left unanswered. Otherwise the rest of the code after the validation can go ahead and run
`(async function(){` `expect(await flexsearch_async.search("foo")).to.have.members([0, 1]);` `})();` That works for me. Did I miss something there?
Not for me. I'm on node v10.10.0 const FlexSearch = require('flexsearch'); const index = new FlexSearch({ async: true }); async function run() { const results = await index.search('test'); console.log(results); // [] } run(); Same if I do your: (async function(){ console.log(await index.search("test")); })();
Thanks for the hint :)
Is the app written in javascript? Is the code open source? 
You could overload like so: function add(a: number, b: number): number; function add(a: string, b: string): string; function add(a: any, b: any) { return a + b; } If you want to see an even nicer means of doing this in a statically typed language, check out Rust traits. Then you wouldn't even need to define a new method, you'd be able to use the language's own addition operator. I spent years as a dev with PHP and JavaScript before moving onto TypeScript, so believe me, I'm very familiar with what dynamic type language development is like. I disagree that any of the things you've mentioned can nearly cover the range of benefits that static typing provides.
I’ve already taken the leap and trusted them to do my taxes for me, might as well have all my financial data in one place. I trust them more than I trust my bank.
Blame your banks for that. Enjoy having to maintain the integrations yourself.
A good standard library is long overdue.
This is shit
Yes it is written in js but currently not open sourced
I found the issue. The problem is when using async the adding is not finished immediately because adding also executes as async. ``` const FlexSearch = require('flexsearch'); const index = new FlexSearch({ async: true }); index.add(1, 'test sentence'); async function run() { const results = await index.search('test'); console.log(results); // [] } setTimeout(run); ``` That will do the trick.
Ah makes sense Could you make `.add()` also return a promise? So: await index.add(1, 'test sentence'); const results = await index.search('test'); ? I think wrapping in a setTimeout/nextTick is a bit of an antipattern within a promise/async/await ecosystem
In most cases, add new content and query (which also covers this new content) are not executed directly behind each other, but returning a promise makes sense to me to make it more consistently. I will also add it to `index.remove()`.
From my experience I would recommend to go through JS basics combined with HTML, CSS basics 1) Closure, hoisting, ES6, prototypes, promises, async JS etc 2) Block element, event propagation etc .position, display, in CSS etc 
To make it interactive I used React.
Thanks, I fixed it, also added some new updates.
The next challenge would be to make it in Vanilla JavaScript
it sounds great in theory but other than vector addition / multiplications and similar fields it's often not very useful and can lead to unreadable code.
Good idea!
where did you learn webpack and react, if im allowed to ask. (im always looking for ways to learn faster)
TY I'll check it out.
... What else would it do? V8 doesn't support typescript.
Maybe something like AssemblyScript where is compiling to WASM.
I guess I consider it more flexible because of the ability to import individual functions. 
there is lodash _,get and _.set and various lens based alternatives, eg https://github.com/phadej/optika
Yeah perhaps, but you never know, it's better to be safe than sorry :)
Spot on. Spent 10 minutes yesterday to put down \`document.location.reload()\` without compiler errors in a strict typescript project. Not a single entity on this planet benefits from that kind of work. &amp;#x200B;
I don't think it's a language realm issue, it's a tooling problem.
`headers['Content-Length'] === s` `s` is undefined here. In the first example, the `s` is destructured from resource.headers['Content-Length']. with() -statement can result in pretty confusing code and possibly even security breaches.
Good luck
Possibly. If that was the case though the project description would be very different, eg "TypeScript to WASM compiler" or "WASM runtime" etc
*Hey just noticed..* it's your **11th Cakeday** cjbprime! ^(hug)
ES4 (half joking, half not)
If it is just the initial phone conversation with the recruiter the questions probably won't be super detailed. They may talk about some general CS and JavaScript basics with you. Generally it is the second and third interview with engineers that is more technical and challenging. Just remember throughout the process that you are interviewing them as well. Nothing was more disappointing to me than spending an hour talking to someone and then they don't have any questions for me.
Don’t worry, you’ll nail it. And if not - remember there are a lot of incompetent interviewers. Trust me, I’ve been one)
 vue? LolZ! Where did you come from, old man? Is there a time-portal back to last week open somewhere? Everyone is using beeB1ediBo0P.js now. &amp;#x200B;
That's 85-90% rest your projects
Search for server side rendering (SSR). You can use React to render yours pages on server as well.
&gt; it sounds great in theory but other than vector addition / multiplications and similar fields The point is that is what I need them for. If people are writing unreadable code with it , it is their problem. People can write unreadable code with JS (or any other language for that matter) as is.
Research the company - know who it is you might be working for and show interest in who they are/what they do rather than it being just you wanting a job. Be yourself. Don't feel intimidated. Try to be conversational. It's not just about what you know, but who you are. Don't be afraid to ask questions. Don't be afraid to try to search for answers. If you don't know something, that's ok, but maybe say how you might go about finding out. You want to talk through things as much as possible, sharing your thought process and problem solving abilities. Technically, have the language basics down, good idea how popular frameworks work (your react experience helps), and be familiar with other general programming and design concepts. glhf :)
Wow that's a lot of badly structured text right there makes it kinda hard to read you know plus its on medium.
 callback(val === 1);
&gt;without great pattern matching systems, you end up with ambiguity or confusion &gt;Yet another argument is that it kills a lot of the optimization that JS has relied on to be feasible for fast ops. While I think these should be surmountable to some extent, this is a good point. Overloading in a untyped language like JS can significantly complicate matters on the compiler / interpreter side. If that is the case, I'd probably be happy with infix calls alone, as they are explicit and does not share syntax with regular operators. Something like: let result = node1 @+ node2; ...with @+ resolving to a custom function I provide would serve me almost equally well.
I havent done any code in months and months so thought this had things I hadnt done. Doing circles sounded like a pain, so I cheated ;P If you didnt want cirlces for a specific reason it still gives the same visual clues I guess. [https://jsfiddle.net/7L6szewy/](https://jsfiddle.net/7L6szewy/)
In my experience I found that Google picks up content from client side rendered React apps pretty well... assuming your app loads reasonably fast. That said, I would recommend [server rendering](https://www.gatsbyjs.org/docs/seo/) if [SEO performance](https://prismic.io/blog/seo-with-react-and-nextjs) is a concern. &amp;#x200B; &amp;#x200B;
[removed]
Could this by chance be done with nextcloud and their Google docs alternative?
What will cause you problems with SPA is not having server-side rendering. It is possible to have that with react, but will require some backend coding. Node js is a good option for this. React router will work by you assigning a root component to each route. Say you have a route declared as /about-us that is mapped to a component called AboutUsPage.js In that component you will call other components, that in their turns can call other components. All this will form a tree-like structure of components. Just like the DOM, but more powerful. The result of the rendering of all those components will form your page. Check react router for a server-side rendering example. But basically what you have to do is use node (and probably express) plus react router to render the HTML string, which you will send as the body of your request. Similar to any other template engine. Then you load react on the client side and call the hydrate function, it will make react analize your DOM and keep the work you started server-side by applying all the event binds and running any logic it should from the components. First request will be rendered on the server and the next ones will only request the data from the server but render on the user browser. 
They are not that dificult if you can learn JS then you can these. 
I disagree that this is better than the weakly typed (JS) version.
What are you talking about? It's 34.8 KB minified and gzipped.
It USED TO feel interesting to me. But, nowadays i feel like there is no brainwork here. Like anyone or maybe even a sophisticated program can write css for a psd. And i feel worthless in spending times to do stuff that a robot can do :( I guess my main problem is i can't reuse other people's css or even my own css that i wrote for a different project. I like writing css from scratch as it gives more raw control over everything but it gets repetitive. And when i try to copy paste other's css it takes me so much time to actually understand that css and edit to fit my need that i could've just written my own css in less time.
It's my pleasure. I'm a new self-taught programmer, I learn everything online (mainly Official Website, YouTube and Medium), and there are some resources I think very helpful. \### vedios \[[freeCodeCamp.org](https://freeCodeCamp.org)\]([https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ](https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ)) \[React Conf\]([https://www.youtube.com/channel/UCz5vTaEhvh7dOHEyd1efcaQ](https://www.youtube.com/channel/UCz5vTaEhvh7dOHEyd1efcaQ)) \[Traversy Media\]([https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA](https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA)) \[Programming with Mosh\]([https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA](https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA)) \[Codevolution\]([https://www.youtube.com/channel/UC80PWRj\_ZU8Zu0HSMNVwKWw](https://www.youtube.com/channel/UC80PWRj_ZU8Zu0HSMNVwKWw)) \[Coding Tech\]([https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ](https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ)) \[Academind\]([https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w](https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w)) &amp;#x200B; By the way, I cannot help to recommend some channels I like very much. \[3Blue1Brown\]([https://www.youtube.com/channel/UCYO\_jab\_esuFRV4b17AJtAw](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw)) \[LEMMiNO\]([https://www.youtube.com/channel/UCRcgy6GzDeccI7dkbbBna3Q](https://www.youtube.com/channel/UCRcgy6GzDeccI7dkbbBna3Q)) \[Google Chrome Developers\]([https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw](https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw)) \[Brandon Rohrer\]([https://www.youtube.com/channel/UCsBKTrp45lTfHa\_p49I2AEQ](https://www.youtube.com/channel/UCsBKTrp45lTfHa_p49I2AEQ)) \[sentdex\]([https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ](https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ)) &amp;#x200B; \### articles \[Making Sense of React Hooks\]([https://medium.com/@dan\_abramov/making-sense-of-react-hooks-fdbde8803889](https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889)) \[Webpack 4 Tutorial: from 0 Conf to Production Mode\]([https://www.valentinog.com/blog/webpack-tutorial/](https://www.valentinog.com/blog/webpack-tutorial/)) \[How to Create a React app from scratch using Webpack 4\]([https://medium.freecodecamp.org/part-1-react-app-from-scratch-using-webpack-4-562b1d231e75](https://medium.freecodecamp.org/part-1-react-app-from-scratch-using-webpack-4-562b1d231e75)) \[Build a CRUD App in React with Hooks\]([https://www.taniarascia.com/crud-app-in-react-with-hooks/](https://www.taniarascia.com/crud-app-in-react-with-hooks/)) &amp;#x200B; And there's much more good resources online. \[Dan Abramov\]([https://medium.com/@dan\_abramov](https://medium.com/@dan_abramov)) &amp;#x200B; I hope these links can help you and I hope there's nothing wrong with these links format, because I just start to use Reddits.
i've always liked raw css as it was pretty straightforward. ig it's time i start looking at SASS
Also keep in mind that react might be overkill for many projects. It is a great tool, but for small projects the complexity might outweigh the benefits. 
That's way, WAY harder than you seem to think (given that you propose it). As a heavy user of both Flow and TS for years, both have soooo many issues and bugs - don't believe *me*, go to their Github issues section and read for an hour (ignore the usage based user mistakes, plenty of actual issues left). When your (or someone's) inevitable reply to me is "but I never had an issue", pls. a) follow my advice about those issues sections and b) remember that ECMAScript is for a lot more people than just you. To evaluate the proposal you will have to leave your own shoes and see the JS world from the perspective of a lot of people who write code you yourself never used. There would, at the very least, be plenty of "any (Flow) / unknown (TS)" types, and/or you would have to severely limit the language. Keep in mind that the type checkers are pieces of software that tries to understand what a given piece of code does. That is a *very* hard problem. Two professional teams, Flow and TS, have been working on this for many years and still have a huge list of open issue and unsupported use cases left.
That doesn’t mean they’re good at it. Source: i work with quickbooks API’s 
Depends on the level of the interview. But know the basics, object orientation, hoisting, scope. Concepts such as SOLID, adapters, etc are good to know. Research the company a bit. What they do, inspect the site/tool they develop if possible to see some of their technology choices. Some companies will not put you up with a technical person at first. But someone to check if you might fit at the company and will be able to work in a team. Just be natural on this one, it's more of a chit-chat. It's there to avoid wasting the time of developers, but it's usually a really low bar. 
Experience in interviews is important as well, if you don't get this job it made you better prepared for the next one. 
Same here. Just deleted my Mint account yesterday. I watched a DEFCON talk on Youtube recently which explains how those bank APIs work. It's super interesting, and a little scary: https://www.youtube.com/watch?v=fhUHVGTa8mQ
https://stackoverflow.com/questions/12609527/why-isnt-try-catch-used-more-often-in-javascript/12609630#12609630
Why is vue where it's at ?
It appears to be using [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) in the async version: https://github.com/nextapps-de/flexsearch/blob/cdfe44c6fac863e496e671c9428d0bb37df02cec/flexsearch.js#L2830 
Do you use a preprocessor like SASS? It takes a lot of the repetition out of it. I get what you're saying totally, about not being able to share and reuse code. Honestly, a lot of times I'll end up googling for CSS button generator or css grid generator, and use a visual to like that rather than right all the CSS styles by hand. also, the designers I work with are sometimes able to export useful CSS snippets from the wireframing program that use. It also has an inspect feature which lets me see pixel values for things like padding font-size etc
No
Good point... I wonder how much software they still have around from the 1980s.
Nice idea! Are you able to get extract the "tree-shakable" property also? That would be a valuable addition to this.
At least bungie still jas the brass balls to write REAL software in 2019. Destiny isn't some script written by artists for a third partt engine. These giys actuslly know how to code. Hell Destiny 2 runs st over 100FPS on my 2024 laptop. Its well optimised and written for effeciency. If you dontt enjoy the random-drops indicative of a 21st century RPG then don't play it. I, for one, love it. The inner loop is the best I've ever seen. Gun play alone feels better than any other gmae Ive ever played. 
Think you could build one for CBS Leagues? :D This is awesome thought! Great work.
&gt;i work with quickbooks API’s The QBWC? That thing is ROUGH.
I find it funny that people say this but also use JS for desktop and phone apps instead of proper tools.
&gt;0.1 + 0.2 0.30000000000000004 what the fuck
Be confident and humble.
O thats interesting. i have geard about sass but never tried it. ig i should give it a try. what wireframing tool do you use btw
You can do that with require 
simple easy and productive api.
This is really cool, but sadly my canadian bank is so obscure it is not supported by plaid :/
"Work" is being generous. API is also generous but technically correct. I'll have to watch this talk though
Absolutely. Learn html and CSS before javascript, which really is used as bloated website tracking/advertising B.S.
The files are "mixed up" in the Apache Web server htdocs folder by default. You are using Apache rigjt? ;)
A great way of finding out I need to learn *a lot more* of the theory behind what I've been doing. 
React and jQuery are both JavaScript tools, but one is a library for building reactive user interfaces via automated DOM manipulation and the other is a library for manual DOM manipulation. They're both proper tools for their respective roles, but their roles aren't the same (and actually have very little direct overlap). And do you really want a debate regarding the absurd fragmentation surrounding cross-platform GUI toolkits like GTK+? Electron and NW.js are some of the best things to ever happen in the world of desktop computing, unless you're the type that somehow thinks its better for most companies to try maintaining and synchronizing completely separate builds for each platform their software is supposed to run on...
This is a great overview, especially like the bonus ES6 overview. I recommend [this article](https://flaviocopes.com/node-setimmediate/) for grasping the nuances between setImmediate() nextTick() and setTimeout()
Im using their php sdk, extremely scarce documentation. This was mostly when i was first getting into programming so it was a bit difficult for me. I’m also not an accountant or anything so maybe there are reasons I’m not aware of for some of their design decisions.
Why was this link hidden from the /r/javascript? @mods? Any specific reason? I think many people upvoted and are finding it useful. 
Hi /u/TheDude0815, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/redross1997, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/Tyler_Potts_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/is2pidguy, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/Bakera33, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/fiery00, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board). Thanks for your understanding.
be honest about what you don't know.
Hi /u/javamycode, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/harrydry, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/noahcal11, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/A-HYPE-FISH, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
No worries, it's not help for me, I'm trying to help others get into programming. If I can't post tutorials what sort of things can I post? 
Hi /u/dancewiththesedevils, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This is why we need decentralised communities. 🤦‍♀️ I upvoted this link and it isn't spam! Dunno why they removed from the homepage. I am curious now. 
Hi /u/nanny900, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
anyway, @moderators removed this link from the Javascript homepage. 😄 This sub reddit looks biased towards Hashnode and other dev forums. 
Using an xml site map will alleviate a lot of your concerns.
Regarding `const`: Interviewers will often bring up this little bonus item: ``` const user = {name: 'Bob'}; user.name = "Sam"; ``` And ask if that's valid code/what happens. Then you have to dive into deep vs. shallow clones, object references, etc.
It should be similar to node since it also uses the V8 engine, but im not 100 percent sure since node is much more mature than deno. Some benchmarks would be really sweet!
Hmm.. it's weird that they removed it from home page. Don't know what mods are thinking. 
404 
IMO require is not ugly. With import we lose the ability to do one-liner DI: const foo = require('foo')(dependency) 
It isn't a great fit for SPA, but for a "normal" site I have had good luck working with designers, they can crank out a bunch of html and css, and if you occasionally compare notes you can ensure that you have the right hooks in place in the right spots to enable the dynamic bits. But it doesn't work in a vacuum. You have to know enough css/html to know the best place to add some script tags and/or server tags, and you have to make some hopefully minor adjustments to your workflow thinking, as well as give them feedback on the critical parts of your tags so they don't clobber them. But otherwise they can work very well together. It isn't new and shiny though, but so what?
Deno has to compile it, it comes with a Typescript compiler built-in. I've used `ts-node` to accomplish the same and one downside is that it can add a lot to startup time.
I may be reading it wrong, but I can host on Netlify for free ? basic and unlimited projects? whats the catch vs using something like Digital Ocean ?
It doesn't always work that way. Node 10+ supports BigInt but Typescript doesn't yet.
Technically both things could be true
Don’t worry about saying that you don’t know the answer to something. However, don’t stop at “I don’t know”. Take a few moments to explain how you would problem solve it. What’s your initial thought, how will you go about finding to correct solution.
Praise be to Chase for actually implementing OAuth. If only every bank would we might not have to deal with Mint needing to reauthenticate every X days
Oh, they know how to code? Is that some of their guns were broken for months before they fixed them? Why the latest puzzle in the game is broken? Why they either lied or didn't realize how slow the XP gain was if you grinded a lot?
We have an SPA/app and we absolutely still have a dedicated designer. He doesn't even do HTML and CSS. He does Photoshop and other mock-up programs. Sure, you can rely on the default styles and just slap things into a column and hope for the best. But the best SPAs and apps have a designer that really make them look awesome and flow nicely. Also, just because the output of Vue is tied to the code doesn't mean that someone can't mock up the same exact thing in plain HTML and CSS.
If SEO is a major concern AND you still want to use React then it might be better to go with SSR and a framework like Next.js &amp;#x200B; [https://nextjs.org/](https://nextjs.org/)
Should be about the same, no? You write TS but everything is running with JS in the end. V8 doesn't speak TS.
I have a credit card that forced 2-factor auth (GOOD!), but now mint requires me to do 2-factor auth every time it wants to update (BAD!). /me sighs Why is everything so hard.
Fine if pages are rendered server side. Not so good if rendered on the front end.
I mean, just look at PHP... It's a lot better now, but during its golden age circa 2003 PHP 4 was hot garbage.
☝️this
The divide is in the end product. Think web apps vs content-driven websites (Wordpress etc.). Depending on which one of these you specialize in, your expertise changes drastically. If you're working with web apps, modern JS and the grand eco-system is your bread &amp; butter. You work more like a software developer who deploys to web. If you are working with content websites, your priorities are much different, JS for such projects is usually icing on the cake, that's why jQuery is still very popular within this ecosystem. This is much more inline with how web development used to be 5 years ago. This is basically the divide mentioned in the article: both developers are addressed as front-end developers, but when they chat, they have almost nothing in common. 
Because it would break existing code.
This is very stupid! @Reddit @Moderators: Can some biased moderator remove a link just like that?
When you create a new variable, it is added to the stack. If you create a lot of redudant vars it can somehow affect your performance. Returning the value if possible will be a better choice. Also using consts over lets. 
As always, when it comes to listening to SEO advice take everything with a grain of salt. Before acting on any advice, make sure you can find a reliable source that actually backs it up.
If you’re using Gatsby it actually won’t be overkill and will speed up your development tenfold vs using old school HMTL CSS jQuery
Why this over eventemitter2 and eventemitter3?
&gt; What will cause you problems with SPA is not having server-side rendering Google's crawler executes JS now (and has for sometime), so this is not really true anymore. I still recommend SSR, of course.
Of course, but I still want to hear a pitch from the OP.
Well not only for web applications. Lots of web platforms are SPAs and also need indexing. YouTube is an SPA. However I do agree that the first request should be sever rendered with subsequent requests functioning like an SPA. 
Yep. I do competitive auditing of Landing Page systems all the time for potential clients, and I can't tell you how many times it's just too easy to land work because someone's agency/dev team decided to use an SPA for their landing pages--or just didn't bother to optimize everything. It's really simple: _Landing Pages:_ Should be largely static. Don't use a framework. Make it as fast and optimized as humanly possible, especially if Media's driving traffic to it (else you're overpaying on the ad auction market if competitors are faster). _Everything behind landing pages:_ Whatever you want, but don't be stupid about it.
Also be aware that "reliable source" in the SEO world means either: 1. Google 2. Hard data and a large sample set So many SEO blog posts have no data or are entirely anecdotal ("I changed my meta keywords and organic traffic increased 15%!")
What does it compile to? I thought I read that tsnode compiles in memory. 
They should add a fourth optional parameter that has a feature list so you can enable extended features like this.
It's not, because this is an edge case which is massively counter-weighted by the benefits of a typed codebase.
Technically, yes. However Javascript is not really interpreted. In most runtimes it is being compiled just in time (jit). Please, please never decide against using an extra variable because of performance reasons. I promise, that you won't be running into any edge case that will depend on this optimization. The dot operator is being used to resolve a property of an object. let a = [] A is now an instance of Array. That means it has several properties that you can access. a.length Will return the length of the array, as an example. 
They're too busy trying to turn js into java for browsers.
js is not the only language with decimal math problems, but yes it is stupid.
YouTube is owned by Google, who owns the search engine. YouTube does not need SEO as Google injects video search results right into the top of your search results page. As such, your analogy does not really work . in this example - but I understand your point. Google is rarely a good example of what they want others to commit to. 
In the node version too though?
You didn't mention what sort of site your friend wanted, but if it can be static try looking at a static site generator like [Gatsby.js](https://www.gatsbyjs.org/) That way you can build it as a React based SPA and the web-server will just serve prebuilt static html files. That would solve the SEO problem.
In theory, yes. In practice, I don’t expect values larger than what is representable as IEE754 double precision floats to work. 
 const { func1, func2 } = require('something');
Furthermore, if Google wanted to prefetch YouTube assets like they do AMP assets, it's not exactly a problem for Google to do (assuming they aren't already doing it). Reverse proxying a shared CDN is a thing.
Big subreddits with common names seem to always have a hidden agenda of some kind.
This is inaccurate. Google delays crawling client-rendered frontend HTML by up to 1 week (and I've heard 2 weeks in some cases) Source from Googler: [https://twitter.com/Paul\_Kinlan/status/1039852756113080320](https://twitter.com/Paul_Kinlan/status/1039852756113080320) &amp;#x200B; You should also check out their session at their latest conference on how their crawler works.
YouTube was a bad example. I’m sure there are other social platforms that are SPAs which can still be indexed well by google. 
Yeah YouTube was a bad example but I think there are other social platforms that are SPAs with good seo 
SEO optimization is always the dumbest thing. Build a good product, advertise, and retain. It's literally how all business has worked since the beginning of time.
Maybe. Yes.
100% true, they can be indexed, but also need to be competitive against others that may be using the Landing Page model or they _will_ be docked in the SERPs.
I'm personally not a fan of overloads in ts/js but you could at least do this function add&lt;T&gt;(a: T, b: T): T { return a + b; } so now you avoid all convert everything to a string and concat them together problem. Here you add like 10ish characters and now your being notified of simple bugs.
React is native to multi page rendering. Only when you add things like React router it becomes SPA.
If to err is humna, then programmers are the most human of us. The important question is: Did they fix all of the above? Yes, yes they did. And I respect them for that. Was it a great game at launch? Hell no. But now that you can get all expansions for $40 it feels like the game is worth the money. And now that they're out from under Activisions thumb maybe they won't rush stuff out the door.
SEO is free advertising. More than just advertising actually. SEO brings organic traffic. 
So… you destroy the entire package Managment thing because of… what? This way every imported package uses his own dependency (which may means that you have a dependency multiple times in your memory), and you cannot use this with docker or other stuff and every instance may runs other code. Have fun debugging this. 
I second that. If don't know something it's ok to say so.
Before I tell you the technically correct answer, allow me to tell you the correct answer: it doesn't matter. To quote one of the godfathers of programming, the great Donald Knuth "premature optimization is the root of all evil". When you worry about all the stupid low-level (or even most medium-level) performance concerns you make bad decisions with regards to other concerns. That's a terrible trade-off, because no one will ever be impacted by those performance concerns: many won't even make 1ms a difference, and even the ones that actually matter will have an order of magnitude of 10ms or 100ms at the absolute most. In other words, you're sacrificing important principles like "write readable, maintainable and easy to understand code" for performance, and the performance improvements aren't actually making anything better, so you're actively choosing to make your code worse. Thus, the correct answer is that you ALWAYS want to not worry about performance concerns except in two cases: 1) when you actually detect a performance problem (and you may well want some automated tests for this because developer machines tend to be more powerful, making it harder to notice such issues) 2) when you can clearly recognize an obvious avoidable performance mistake, eg. when you can choose between doing some costly operation inside a loop or outside of it But otherwise you really shouldn't even think about performance, and you should devote all those neurons in your brain to focusing on writing good code. But to answer your original question, yes technically every variable you introduce does have *some* impact on performance ... but again your example probably won't even have a 1ms impact.
They use Invision at work. As to SASS, get ready to have your life changed. If you already know CSS it should take about 5 minutes to have your life improved
Ok.. Twitch, Twitter, Airbnb. They all need SEO in some form and they're all SPA's
TIL
There are reports that Google's search engine runs JavaScript to allow for indexing SPAs, but I've never relied on that. The best thing you can do is implement server side rendering in your react application, using a container like Express, Koa, etc. Next.js supports server side rendering out of the box, and would be my recommendation for anyone getting started with React and who is worried about indexing. 
As you know react supports single page application feature by default but when we take seo in react by default this is not enabled. You need to tweak a bit. You can use react server side rendering feature that helps to load basic meta tag, links that require for seo. Also some other libraries are available now like next.js, before.js, gaspy.js etc.
Dang, I get that this is the way it works... but it seems like a counterintuitive workaround for what is essentially a measurement issue. Maybe Start Render stats really are that important for user engagement, but maybe a high-quality SPA experience doesn’t involve a static landing page. Maybe I’m wrong, idk...
It's working, but you aren't specifying how far left or right you want the buttons. So they're just on top of each other. Add `left:80px;` to your "reload page" button and you will see it positioned to the right of your "Click me" button. &amp;#x200B; A fixed element is positioned relative to the *viewport.* It doesn't care about where other elements are located. This is why they stacked on top of each other.
It's a Shame. They don't even reply or participate in threads like these. 
1. there is no javascript "way". 2. why not write a wrapper for it or fork it and make it to your own tastes?
1. so when a language offers you new features to make things simpler you think complicating things with its old features is somewhat the right way of using it? 2. because I have no time or money to spend writing such a big thing like that, that's because I'm asking what others think and what they know, just to learn and know if I'm the wrong guy here.
Thank god for prerender.io
&gt; Exceptions should really be exceptional This line _sounds_ catchy -- probably why we keep repeating it -- but it isn't true, and it was never true. Here's a quote, for example, from the guy who invented C++: &gt; Given that there is nothing particularly exceptional about a part of a program being unable to perform its given task, the word “exception” may be considered a bit misleading. Can an event that happens most times a program is run be considered exceptional? Can an event that is planned for and handled be considered an error? The answer to both questions is “yes.” “Exceptional” does not mean “almost never happens” or “disastrous.” Think of an exception as meaning “some part of the system couldn’t do what it was asked to do”.
:o 
what about prerendering services like netlify offers and prerender.io offers? I've made spa that are indexed and do fine with SEO, it just involves a bit more work with helmet and prerendering
The ability to capture both `object.propety_does_not_exist` and `object.method_does_not_exist(args)` at the same time.
Don't act like the front end is only comprised of JavaScript. Semantic HTML and CSS are not secondary or tertiary concerns.
Luckily google offers lots of tools to help you check for yourself!
Akamai's retail e-com report for 2017 highlighted the direct correlation between bounce rates and perceived speed on mobile. It's basically a rehash/validation of the same thing Amazon's been saying literally for over a decade: https://blog.gigaspaces.com/amazon-found-every-100ms-of-latency-cost-them-1-in-sales/
I just want to say I really appreciate this transparent sharing of knowledge. Thank you!
1. There are numerous ways to do things in javascript. They just added the class attribute too. It appeals to a wide variety of programming styles. And there is enough devil in the details of each new feature that it isn't entirely simple or even worthwhile to target them. 2. Why is it such a big thing? Weird that you bring up money, yet demand oddly specific versions of free stuff. I mean if anything is "the javascript way" it is doing something and publishing it and seeing if people find it useful. I mean you say you want to code js, here is an opportunity then. I mean it sounds like you are in a rather specific situation, where "the javascript way" is sort of implied, handed down from on high, but that isn't how it works in the bigger picture. JS is committed to backwards compatibility, first and foremost, so we don't all have to play the new shiny game. 
I mean, for most businesses, it isn't the end of the world if their ranking in Google takes 2 weeks longer to show up, unless you're managing a huge brand where a big part of their strategy is writing new content and showing up in Google to get traffic, like for news or something. It just depends on how important search is to your business.
It never feels good to get paid to tell stakeholders and potential clients that their front-end teams aren't cutting it, as someone who's been doing it for over two decades now (I'm a Director of Front-End these days). I'm glad to help impart information that helps the discipline raise the bar.
I meant using *decorators* for much more than providing meta. It is a bad practice to create a mess with the behaviour of the objects as they can change on their own also. It is similar how inheritance is a bad practice versus composition. It is a poor design of software if objects need to be hijacked like that. Similarly, the best practice is to use *proxy* as little as possible, if ever at all. BTW, regarding *decorators* implementation there is a helper utility to upgrade the syntax: https://github.com/nicolo-ribaudo/legacy-decorators-migration-utility Also: I tried to make object literal with a *function* in two variants. This is how it compares to *reduce* method: https://jsfiddle.net/fv94x5wd/2/ -- I do not like how the latter variant it uses object merge (via *spread*) in cycle which recreates them every time.
This was one of the original design goals of React If you render serverside, Google can't tell the difference. So, start rendering serverside. Problem solved.
Stuff like Gatsby or Nextjs are only for static sites right? If I want to fetch some things from database its not gonna work? Sorry, but the documentation is quite confusing in that matter
oh well, thank you very much 
Badly, in 2010.
YES PLEASEEEEE DO. Or else you run the risk of becoming the next framework addict that need to use Bootstrap 4 to do CSS grid-template-areas or worst...
I'm pretty new to Gatsby and only a little Next.js experience but both of them handle data-fetching just fine via client-side API calls to a data source. &amp;#x200B;
Next js isn’t a static site generator, it’s a framework for building react apps that happens to include server rendering as a feature. The pages are still dynamically generated.
Data &gt; Anecdata indeed!
Hey, the first one worked a treat ! I couldn't get the syntax right on the second example. When I'm trying to return a div and also map over the result of the first map it gets a little confusing. &amp;#x200B; Thank you ! 
No one who read your comment downvoted you because they found HTML and CSS difficult and you hurt their feelings. I promise. I'd wager you got downvoted for trivializing a learning curve by comparing it to a completely different type of learning curve. They're not comparable at all, and a lot of people excel at one but not the other. 
You can still fetch apis. And depending on the application, it can render that data as content, or only load it in the app. And yes, you still have a regular react app after the pages load, it is not a fully static HTML, it's still a SPA.
Thanks... I appreciate your help.
Would definitely use generics instead of overloads if those were my only two options.
Yes, it just seems dumb not to. Obviously if you don’t, then you need to introduce logic to deduce what you could have explicitly declared. All this complexity to save three characters?
Babel is indeed just es5 conversion and won't be enough. Webpack would take everything and convert it from whatever it is into an ES5-level javascript bundle that you could just use. Yes, it has a ton of features, but you don't have to use all of them. I haven't used VueJS, but their docs recomment a tool like Webpack. [https://vuejs.org/v2/guide/single-file-components.html](https://vuejs.org/v2/guide/single-file-components.html) \&gt;All of these are solved by **single-file components** with a .vue extension, made possible with build tools such as Webpack or Browserify.
You need to learn HTML &amp; CSS at the first time,because it is basic for web-developer, after that you must to learn JS, if you want to create normal, work site. And if you don't really want to learn hard CSS, use Bootstrap (frame for site), just add code on the official site and all. But in my opinion, you need learn HTML with CSS very good. P. S. SORRY, for my English. I am from Kazakhstan. 
&gt;but after using it with ES6 I felt it is not the JavaScript-way anymore. the way you like to use javascript is not "the javascript way." you have a preference, and it might be popular on the corner of the internet you go to, but it's not the "way" if you change your attitude on "the javascript way", your "issues" with d3 will go away.
Yes. It's only for static sites. 
"JavaScript way" -&gt; good practices - Example of bad practice -&gt; binding another context to a function that is not yours Open source projects are free, but not for the author who spends its time and money developing the software. 
it's not about the way I like it, D3 feels like 2012, not 2019, but that is not the problem. The problem is that you can't use ES6 features with D3, it's like it's APIs stopped in time
I downloaded vs code, but am struggling to find out how to use html, css and JavaScript in the code editor
I just deleted it because I don't wanna waste my time, be free to trash talk about miss interpretations and not about the topic, 😘
E-commerce websites?
It doesn't prevent this but it lengthens the code is what I meant. You are right, all unstatically typed code is shit, and everyone using normal JS is running into all these problems that they just don't know about. If you arent using typescript you are just doing it wrong. Im telling you I have done both many times and when moving back and forth I never really miss anything from TS.
Many ways of doing it, one would be to use Array.prototype.map to create separate arrays of the names and ages and concat them together. const names = obj.map( ({ name }) =&gt; ({ name }) ); const ages = obj.map( ({ age }) =&gt; ({ age }) ); const both = names.concat(ages);
There are tons of ways nowadays to make your SPA SEO-friendly, whatever your frontend stack. Server-side rendering is now integrated into most modern frameworks. There are also great prerendering plugins such as prerender-spa-plugin or [Prerender.io](https://Prerender.io). There's a great series about SPA SEO on Snipcart's blog (disclaimer: I work at Snipcart) that should answer your questions. It covers the main JS frameworks: [Vue.js](https://snipcart.com/blog/vue-js-seo-prerender-example), [Angular](https://snipcart.com/blog/angular-seo-universal-server-side-rendering) &amp; [React](https://snipcart.com/blog/react-seo-nextjs-tutorial). For the React one, we used Next.js to generate static files because it doesn't require a server. However, depending on your needs, know that SSR &amp; prerendering can also do the trick here.
sucks unless you use a solution like [https://prerender.io/](https://prerender.io/)
Hi, I'm a Redux maintainer. Any particular concerns with Redux I can help with? In particular, I'd encourage you to take a look at our new [Redux Starter Kit package](https://redux-starter-kit.js.org). It includes utilities to simplify a lot of common Redux use cases, including store setup, defining reducers, immutable update logic, and even creating entire "slices" of state without writing any action creators or action types by hand. 
Thanks for this! if you're up for it, how do you feel about things like gatsby/nextjs for landing pages? We are working on an app at the moment and I was thinking about using one of them for the landing/storefront side.
Someone on Twitter says that Elliott keeps changing the supposed citations for some of his stats claims: https://twitter.com/Hillelogram/status/1084991487702691840
You can do anything you can do in a regular React app in Gatsby, including fetch data from an API on the client side. 
Server-side rendering though.
Eh, I can definitely see how it happens. I’d consider myself a front-end developer. A pretty decent one too! This is all news to me. Why? My entire career has been creating web applications hosted on corporate intranet. E.g. SEO hasn’t even entered into my mind in the slightest when it comes to architecting a solution. That being said, my entire point is moot I suppose if your team is creating public websites. Thanks for the knowledge share! I think I shall employ this technique anyway to keep the landing page more performant!!
What the hell that's some shady shit. I could see him using the original citation without much added research, since it's so commonly done. But the thing that got me was that when he learned more about the original citation, he fucking changed it to another book that doesn't even support the fucking claim. What the hell.
No problem, and glad to help! I can see how you'd have been a bit shielded away and I can definitely empathize; I did years of internal enterprise application architecture as well, primarily with Angular/Ember. I've switched between pretty much all corners and type of FE (and BE for some years) roles aside other than game development. Being in the Landing Page/CRO side is night and day away from where I was, but kind of a return to form/fundamentals since I started back in '98 professionally working on...primarily static pages. Funny how all of that works out.
If you just want to get the elements data, then you can use $$eval to select the elements and iterate over them. https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pageevalselector-pagefunction-args Would need to see the full code about the errors. 
You are awesome, thank you!
Typescript "bitching" at you doesn't mean that the code is invalid. Any valid JS will compile and run just fine.
Try this. let newUrl = oldUrl.replace(/campaign=(\d+)&amp;cid=(\d+)/, "$1/$2");
I think that's what the entire `Thoughts on language design` was referring to.
&gt; Know modern CSS, don't worry about floats and such While I completely agree with what you're saying: Knowing what floats are, and why they actually exist (to float content, such as images, across block elements) helps. Learning their intended use is not complicated. Learning all of the historical/obsolete ways to hack CSS into doing what you want, such as implementing Javascript-less tabbed interfaces using positioning and :target is hardly useful today. 
I appreciate the response, but where exactly do I paste this within my JS? and what code would I remove? Thanks so much for your response.
Even ecom should have a landing page not built on a framework. Your landing page should in all cases be used for your SEO.
Methods are properties in JS. It is not possible to distinguish between the 2 cases. 
okay but ... in the end, what's the size of this thing?
They should (and do) all have landing pages which provide access to the SPA. Simply put, your spa should not be its own point of access from the web.
Aside from your choice of using jQuery, when you don’t use it in its capabilities at all, you might wanna checkout the following: https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams Be aware of current browser support.
Man, that was so interesting, was reading that like ‘surely this dude is gonna have a bounty placed on his head by the SEO Alliance’. Thanks for teaching me something new today!
Ah! You are right. I forgot. Durandal, the framework no one has heard of, was way more influential than AngularJS. How dare Google even call AngularJS a working framework. They had everything so wrong. If only everyone didnt eat McDonalds we would have more properly written software
https://www.reddit.com/r/PHP/comments/akru9j/bunch_of_programming_books_including_php_are_now/?st=JRGT8741&amp;sh=7f851dfd
&gt; influential Who cares? This isn't a popularity contest. &gt; They had everything so wrong. Only took a little looking to see this. They eventually had to scrap the whole framework it was such an issue.
I use an .NEET Core MVC back end for a couple of React apps. &amp;#x200B; We have a UI project containing all the front end code, and then use webpack to build it - outputting to the webroot of an MVC project. The MVC controller(s) then use the output files in its webroot as if they were any other views (look up enabling the returning of static files as "views"). &amp;#x200B; Not saying it's the best approach, but works well for us. Regarding your concern over webpack and npm, yes you will need them but it will be very light usage. A simple Webpack config file, and then running webpack to build. And npm just for installing the packages, if that's all you want. I can't remember the exact plugin but I had a visual studio extension that allowed to add build hooks to kick off webpack builds, which could help get your team more on board
I have been looking for an answer like this since I started teaching myself React months ago. Would you be able to provide some sort of example from github or something? Or is it really that straight-forward?
\&gt; some friends told me i should Even though its possible to create a website with javascriot only but didn't explain why You have to use the \`js\` to build the html and css... so if you don't know what to build then js is not going to do any good. Just try to learn the parts you need as you need them. 
Yea my friend who works at intuit says a lot of software engineers on his team are bad at CSS but they don’t need to be good at it because they already have people who are good at it.
Yes. And I generally agree with that. But it is only an idea thrown in the air. I'm afraid the TC39 would need some restructuring to allow for that, and I'm not sure they'd be willing to. Sadly, I'm not even sure it is not already too late by now, with the speed they've set up.
This is an approachable tutorial: [https://www.taniarascia.com/how-to-connect-to-an-api-with-javascript/](https://www.taniarascia.com/how-to-connect-to-an-api-with-javascript/) goto the section "Displaying the Data"
[removed]
You could basically do this today with ts-node. Deno is gonna hit the TS compiler, too before feeding it to v8.
It depends on your needs. Additionally to the performance there are some other aspects that may be interest for you: - the flexsearch.light.js version is just 2.7 kb (gzip) vs. 5.7 kb elasticlunr - the encoder of flexsearch may provides better phonetic transformation, see [here](https://github.com/nextapps-de/flexsearch#comparison-matching) - flexsearch uses "contextual scoring" to determine relevance, see [here](https://rawgit.com/nextapps-de/flexsearch/master/test/matching.html) - flexsearch supports webworker to increase available RAM for really big indexes - the same codebase of flexsearch is compatible with Node.js and Web But you are also in good hands with elasticlunr, generally I would not recommend to change a already running library, but maybe give flexsearch a try in your next project :)
Thank you, I certainly will.
no list of books included
That's the nicest thing that anyone has ever said about PHP.
[removed]
[removed]
The line where you assign the `newsrc` variable. Change the line into this. newsrc = iframe.src.replace(/campaign=(\d+)&amp;cid=(\d+)/, "$1/$2");
Look at [next.js](https://nextjs.org/) for server side rendered react apps. [This next.js crash course on youtube might be worth 40 minutes of your time](https://www.youtube.com/watch?v=IkOVe40Sy0U)
&gt; Don't use a framework What do you mean by that? Doesn't make any difference if your pages are cached properly. You definitely don't want any user specific content on a landing page that busts the cache but using a framework or not makes negligible difference. Regarding those metrics there's a nice Chrome Dev tab for Performance that gives good lighthouse audits.
So how do you feel about next/nuxt/Gatsby to get the advantages of ssr? As long as the initial page load is fast that should be OK I assume? Thank you for sharing the insight 
`this` in your `forEach` is `window` so you're adding the 'click' handler(s) to the window. `forEach` passes the objects its iterating through as the first argument. Use that as the object to assign the listener to. readMoreBtns.forEach(function(btn){ btn.addEventListener( ‘click’ , changeClass); })
Thanks you so much, let me try it now. 
The buttons no longer seem to work :/ 
Nice beginning. Think about publishing at npm. Also prettier and eslint will help you to code better. 
Don’t panic. 
Thank you very much! I will once I polish it a bit
Sorry bo be blunt, bit jQuery popup plugins were already done to death in 2009. 
I highly recommend Kyle Simpson’s You Don’t Know JS series for all things JavaScript. [YDKJ](https://github.com/getify/You-Dont-Know-JS)
I just discovered this in my research last week and have begun sorting through it!
I put it in a fiddle. Seems to work there. http://jsfiddle.net/e12ywnbq/
No problem, thanks for telling me. I'm new to this so I didn't know. Would you mind telling me some alternatives? Also would it be doable in vanillaJS?
Thanks so much. I’ll test when I’m back on the desktop. Thanks for your help and quick reply! :D
Yes of course it can be done in vanilla. Today's most used library is by a large margin React. Vue is a good alternative.
Most stupid thing I saw in this year by far.
Thank you very much!
// More understandable but long. // Below your code : let newObj =[]; for (let i = 0; i &lt; obj.length; i++) { newObj.push(obj[i].name); } for (let i = 0; i &lt; obj.length; i++) { newObj.push(obj[i].age); } obj = newObj;
&gt;iframe.src.replace(/campaign=(\\d+)&amp;cid=(\\d+)/, "$1/$2"); hmm, Hasn't fixed anything, URL displaying the same. Perhaps it's because the URL looks like ?campaign= rather than /campaign=
``` const quoteContainer = document.getElementById('&lt;put ID of the p tag here'); fetch('...') .then(res =&gt; res.json()) .then(...) // get and return the quote here .then(quote =&gt; quoteContainer.textContent = quote) ```
They created a new framework because they learned from what they didn’t like in AngularJS. Not too many perfect 1.0s out there. The argument is not that AngularJS is best/good. It’s that we would not be were we are as an industry without it. 
 obj.reduce((acc, { name, age }) =&gt; \[name\].concat(acc).concat(age), \[\])
&gt; They created a new framework because they learned from what they didn’t like in AngularJS Those mistakes could have easily been avoided the first time around with some careful consideration instead of rushing ahead with an obviously flawed premise. &gt; Not too many perfect 1.0s out there. Plenty of solid foundations out there. &gt; It’s that we would not be were we are as an industry without it. lol
**Disclaimer: As always, the following is about your code, not about you. Also, that there may be things to improve doesn't detract from the fact that you did a thing. And it works! Yay!** That said, there are some things that could and some that probably should be improved. ### No demo. It is very easy to set up a small demo. If you don't have some place to host it or don't want to host it yourself, Github itself can offer you a solution through Github Pages. If you don't like that either, setting up a small demo on JSFiddle or CodePen is very easy and shouldn't take much given that you already have examples and fairly good documentation. The point of this is that a live demo immediately shows the potential user how it works and feels without having to download the whole thing and set up their own example. Doing it in JSFiddle or CodePen or some similar site has the additional advantage that people can see the working example and the code side by side. For visual stuff, small UI components, and similar widgets, a live demo is a Very Good Idea. ### togglePopup This one is, well, I don't want to say that it's pretty bad, but yeah, it is. The problem is two-fold. First, you're throwing this `togglePopup` function there on the global scope. It has a fairly generic name. It may easily clash with other functions the user may have. And also, it goes against what the [jQuery plugin guidelines](https://learn.jquery.com/plugins/) propose and promote. To do this "correctly" (i.e. according to the guidelines) you should at least move this auxiliary function to `$.fn.popup.togglePopup`. This will avoid polluting the global scope and also minimize plugin scope usage to the single name `popup`. But even this is not the best solution. Instead, following common jQuery plugin patterns, would indicate that you should offer a way of working that would go like this: let somePopup = $('#myPopContent').popup(); // later... somePopup.togglePopup(); That is, the plugin returns an object (representing the popup) and it is _that_ object the one that has the function/method `togglePopup`. That way, as you may have noticed, you don't even need to pass the selector on the call to `togglePopup`. Not only it is a good idea to do it this way because the guidelines propose it and most plugins follow that pattern. It also avoids potential conflicts / weird behaviour. Having to pass the selector to `togglePopup` means that I could accidentally pass a wrong selector, or that I could call it with something that is not a popup at all. The second problem with this function is what it does and its name. It's called `togglePopup` which _means_ that I should be able to call it once and make the popup open, and a second time and make it close. This is what toggle means. But it's not what your function does. Your `togglePopup` _only opens_ the popup. What's more, the popup does not offer anyway to programmatically close it. It's only up to the user to close it. IMHO you should make the function actually toggle. If not, you should at least change its name to `openPopup` and offer a `closePopup` along with it. Oh, btw, on your closing button handler... [You shouldn't need to do this](https://github.com/filipdutescu/popup-js/blob/a33a1008de2dee55c71315ef8f04a7804ce371f9/popup.js#L37). ### Generic names Unfortunately, `popup` is an extremely generic name nowadays. This means that if you use it in some places, it will be somewhat likely that you may have conflicts with a user's existing names. This is something that may happen fairly easily on the CSS class `.popup` for example. To minimize the possibility of such things happening, it is a good idea to give those classes an additional _uncommon_ prefix. I know, your plugin is just called `popup`, but... it really helps to put some prefix on that. You can think of something you like, but if you don't get any ideas you like, at least name [those CSS classes](https://github.com/filipdutescu/popup-js/blob/a33a1008de2dee55c71315ef8f04a7804ce371f9/popup.css#L1-L55) something like `.pu_popup`, `.pu_popup-hidden`, `.pu_popup-header`, etc. ### The content and initialization One aspect that feels confusingly weird about how your plugin works is this: Initialization is split in two different places. What I mean by this is that on the one hand you _have_ to pass the popup contents as an argument to the `$(...).popup()` call, but on the other, you need to have an element already defined in the DOM. This is not very efficient and somewhat error-prone. How would I expect this to work? Well, it can work in one of two ways -or in both ways-. One way is you put the content into the DOM element itself. You may still pass content on the `.popup()` call if you want, but if you don't, it should keep whatever content the element had and put that into the popup. Right now, your code [doesn't do that](https://github.com/filipdutescu/popup-js/blob/a33a1008de2dee55c71315ef8f04a7804ce371f9/popup.js#L34). The other way you could do it is you don't require the developer to create a DOM element. Instead, your plugin creates a new one and injects it into the DOM. Note that this second option would change how the plugin is set up and how you use it to something like... let somePopup = $.popup({ ..., content: "...", ...); // later... somePopup.togglePopup(); ...where you don't need to pass any selector at all, because there's no point. and _you_ will be creating it. ### Final notes Note that most of the things mentioned are fairly related to the same thing: The management of the creation and set-up of the component. For this kind of plugin, the jQuery documentation -as well as many other places around the web- has extensive explanations on how to correctly build such a widget. From the things I've mentioned to others such as _state management_ (e.g. to manage the sate open/closed of the popup) or other more subtle concerns like offering an option to _destroy_ the popup (i.e. not only _close_ it, but completely remove it from the DOM) or whatever. As I said at the beginning, don't let any of this discourage you. You did a thing and the thing works. Instead, take this as an acknowledgement and encouragement to go one step -or more- further. Also, many of the things I mentioned are related _specifically_ to jQuery plugins and how they are built. Both from the perspective of following established good practices and from following the _guidelines_ and _culture_ that jQuery users and developers expect. Some people will probably tell you to "ditch jQuery and re-write your popup without it". I don't really care much one way or the other, but I will only tell you this: _if_ you do it with jQuery, then it _is_ important that you follow jQuery's guidelines.
Cool, thanks a lot ☺️
Most of what he said was that the benefits provided by TypeScript can be provided with JavaScript tooling. The argument seems compelling from the examples that he gave. What benefits does TypeScript offer in your opinion?
Firstly, I am blown away by your answer. Thank you so much for taking the time to write what I believe is more of a product and code review than adive. It is so much more than I could have ever expected. I am truly grateful I will keep in mind all o those things you told me especially regarding the "clunky" way i initialise it now. Tbh, I wanted to change it quite a bit, but couldnt figure how. Thanks for tipping me off. I also did not think of the way you proposed I handled togglePopup, thanks for that as well. Again, just thank you so much for this detailed and pleasant response. If you don't mind, what would you think: ditch jQuery or not? Could you maybe explain why? Thank you
&gt; If people are writing unreadable code with it , it is their problem. People can write unreadable code with JS (or any other language for that matter) as is. Yeah, but you always have to consider the impact of hasty syntax additions/modifications. You have to be realistic. It's a hard sell to integrate something new that would result in a lot of code being written poorly (not talkig about this specific example).
I'm so glad I only build internal tools so I only have to care about the last line.
I mean it's either a static site or not.
I don’t know what apps you build, but AngularJS is even now good enough to get something really productive into production. I have done it for a few Fortune 500 companies at scale. I do it now with both Angular and React. They have clearer, more performant, well defined component APIs. Angular was useful for its time. So I am sorry. I can’t get on your theoretical level. I can’t understand your pains with the framework. I get paid to get shit that works into production. That is what I do. 
&gt; ditch jQuery or not? Could you maybe explain why? Well... I don't have such a strong opinion on that, to be honest. I do think that you could fairly easily do a popup such as this _without_ using jQuery. And I mean this in two ways: I think it can be done, and I think _you_ could do it. As for if you _should_... it really depends a lot on what your intention is. On the one hand, no matter what people tell you, jQuery is still used _a lot_. If you are looking to use this in an environment where jQuery is already being used, then it's probably a good idea to do it in the form of a jQuery plugin (following those guidelines I linked). On the other hand, if you can do it _without jQuery_... why do it _with jQuery_? I mean this in the sense of, well, why force the requirement of loading jQuery for something that does not really need it so much? It does feel inefficient. It's always a good idea to reduce dependencies if they are not really needed. But there's a third option: If you're doing this as a learning exercise, then I would recommend **both** ways. Do clean up your current version following proper jQuery guidelines. Learn from that. _Then_ re-write it without jQuery and learn from that too.
I don’t know what apps you build, but AngularJS is even now good enough to get something really productive into production. I have done it for a few Fortune 500 companies at scale. I do it now with both Angular and React. They have clearer, more performant, well defined component APIs. Angular was useful for its time. So I am sorry. I can’t get on your theoretical level. I can’t understand your pains with the framework. I get paid to get shit that works into production. That is what I do. 
It depends on how often you think the data in the database is going to change. A lot of people will create webhooks between their CMS and their Gatsby build process (netlify is great for this) so that when content is changed in the CMS, the site just gets rebuilt. Great for sites that see a lot of traffic but don't get updated non-stop. 
&gt; AngularJS A different piece of software to Angular. Re-write. Because it was entirely and obviously broken and poorly designed. &gt; now good enough to get ... something ... into production We're talking about a point in history where one specific case demonstrates how going with *"enterprise"* isn't always a silver bullet. 
Thank you very much for all of your help. This has been very helpful and eye-opening for me! I honestly wish going forward more people like you will pop up and leave their opinions. I would like to include you in my Awknowledgements if you wouldnt mind. Would your reddit username be ok to use or do you prefer something else? And I hate to keep on asking questions endlessly, but I'm still a newby and people like you are rare, so, do you happen to know of any vanilla JS beginner friendly docs for writing plugins? Thank you so much for everything you have done to help me improve!
Yes, you are strengthening his point.
DOM API isn't an issue with JS itself, it's up to the browser devs (Mozilla and Google) to implement those functionalities.
I'm just throwing an idea out, but what if every test was a separate branch, running in a dedicated Docker container, and you used some sort of load balancing to direct traffic to the various containers?
It will never go away, because you are using decimal notation, whereas computers work in binary base. We have the same in decimal. What is 1/3? Well it's 0.33333333... We wouldn't have that issue in, say, base 9.
&gt; I would like to include you in my Awknowledgements if you wouldnt mind. I don't mind, but it's not really necessary either. I generally use many names/usernames so my name is not very relevant. If you really want to, use _Kali Chip_. As for documentation, tutorials, etc... Uhmm... really, there's _too much_ of it. I don't really keep many such links in mind, but it shouldn't be difficult to find. Maybe ask in /r/LearnJavascript, they probably have some lists of resources already. But any web search should give you plenty. Ah, also, on Github people compile "lists of links" under the moniker "awesome-something" so you may find some such lists if you search Github for "awesome javascript" ([e.g.](https://github.com/sorrycc/awesome-javascript#modals-and-popups)). The only problem is that you will find a lot of links and will probably have to go through a handful large lists of links to see if you can find what you're looking for. And many of them won't really be _tutorials_ or explanations, but actual projects. It may still be interesting, as you can see how they did it and the features they offer, etc.
Losing to Typescript? ;) P.S. I don't care about Flow vs. Typescript at all, and personally I think strong type systems make JS worse not better. But whatever your opinion on them, it's hard to deny that it used to be "there are two solid/viable typing systems, Flow or Typescript", but now pretty much the entire JS community (or at least the segment that likes strong typing) has pretty much gotten on board with Typescript. Whatever the Flow people were up to, they seem to me to have lost the battle for mindshare while they were doing it.
Keep in mind that all the suggestions for static typing are about it being optional. Should JS become statically typed language? No. Should JS stay a dynamic language? No. (Atleast as professed by the growth of TS). It should become a [gradually typed](https://en.wikipedia.org/wiki/Gradual_typing) language -- a fairly new and futuristic concept.
Thanks for all again!
Not sure I follow, but I avoid mixing test code with production code at all costs. No special case if's or anything. It means you sometimes have to use reflection like approaches and other scaffolding, possibly tests are in another project entirely based on release or in git or whatever, but I would be certain to screw up sooner or later otherwise. Also you probably want to put a few things into a config file if you do need to facilitate dummy services or something for testing. 
This answer is AWFUL but sure is fun. For a noob, could be good for learning: let result = yourarray.reduce((accum, currentVal, currentIndex, origArray) =&gt; { accum[currentIndex] = { name: currentVal.name }; accum[currentIndex + origArray.length] = { age: currentVal.age }; return accum; }, []);
No I'm not saying e-commerce websites shouldn't have a landing page. I'm saying they greatly benefit from being SPAs while also not really being a web application where the contents don't need to be SEOed. In product category pages, product pages, etc should all be indexed.
Who is managing the A/B tests? Part of the resolution for the test is to go back and clean up the code and it’s the responsibility of the person who is managing these tests to make sure that happens.
Check prisma.io very good for this kind of stuff
Excellent comment. Thanks for that bit.
Yes, you can host on Netlify for free with certain soft and hard limits . You can read more from here [https://www.netlify.com/tos/](https://www.netlify.com/tos/). Hope it helps ### For paid accounts: * Network bandwidth: 1TB/month — Soft * Storage: 1TB — Soft * API requests: 500 requests/minute, 3 deploys/minute\* — Hard ### For free accounts: * Network Bandwidth: 100GB/month — Soft * Storage: 100GB — Soft * API requests: 500 requests/minute, 3 deploys/minute\* — Hard
 yarn add lodash I really don't see what the big deal is. Add it if you need it 
May be this article will help you, [An Almost Static Stack](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).
The problem there is that there are pre-existing frameworks such as Google Optimize and Optimize.ly that already solve a lot of the tricky issues, such as visitor stitching/user cookies, that come with tracking A/B tests. We don’t really have the resources to make our own whole framework like that 
Except there always ends up being something more important to do than clean up after yourself. We have enough other tech debt, more important, that we would rather address in the little bit of time that we do have to address tech debt.
The Apple site is not a SPA though.
Can stop playing, I like your design.
Code and documentation on how it works found here: [https://github.com/marty135/FineJS](https://github.com/marty135/FineJS)
NoSuchMethod used to exist in [Firefox](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod), but you can mimic it with a Proxy object. You just can't capture both `object.propety_does_not_exist` and `object.method_does_not_exist(args)` situations at once while using Proxy
That's an absolutely ridiculous statement. It absolutely matters and it also matters for your user which first loads your website on an unprimed cache, which will see the result of streaming HTML and CSS much faster than loading JS can ever hope to be.
The user experience could be improved if it were. That was just one example. 
For simple usage, any event dispatcher library can work. But for complicated usage, such as if you want "Supports nested event. During the process of handling an event, a listener can safely dispatch event and append/prepend/insert/remove other listeners.", you are safe with `eventjs`. 
I'm not an SEO expert, but I've used [prerender.io](https://prerender.io). It's super easy and seems like a cheap fix compared to having to develop and maintain a separate server-side rendering system just for indexing in addition to your app.
I think this may help you, [react-interview](https://github.com/Pau1fitz/react-interview).
This is pretty prescriptive. OP, you can do what you want, but just do it right. If SEO is a concern, then incorporate SSR. Don't let people tell you how what things are supposed to do when there's clearly a way to do it otherwise.
This is is completely unoriginal and, I think, unbecoming. [see: I’m creating a stick with graphite in the center make visual lines on paper](http://lmgtfy.com/?q=Js+beautify) 
This is NOT a roadmap. More like a sales pitch for React... Also, I find it very misleading to say React is “SEO Friendly”, then to go another step and say other JS apps are not. They are equally friendly because they both require SSR or similar to BECOME friendly, which is most certainly not React exclusive. Another point is the fact that because something is popular, it must be good. Windows Vista was popular. This gets an F as a roadmap (which it was not), but as a sales pitch, it gets an F, also.
Wherever your interests lie, or perhaps, wherever writing code will allow you to enhance/attain your interests. I can’t say how important it is that you ENJOY the thing you’re learning, otherwise it will be no different than the gym for thousands or people each January. I’d say figure out what it is that makes you want to write code (everybody has a reason), then do that thing. I started at 11 because I wanted to make a website for my fathers business, never stopped since and have learned 10s of languages (lol).
I agree. What’s wrong with good ol’ JS? Been around long before them, it’ll be around long after.
This idea is worse than its logo.
lol, eval(12 * 5 - (5 * (32 + 4)) + 3) -117 I mean there are situations where you absolutely don't want eval, but if you are just dicking around in the client, no problem (or you have a sanitized api). 
Learn data structures and simple algorithms. It's real easy to kinda jump in and learn the syntax, but that's a mistake IMHO. To draw an analogy, you could conceivably learn how to speak a different language in a short amount of time. But just because you learn some words doesn't mean you can automatically go to another country and understand customs / mannerisms to the extent you can use those words effectively.
I have recently started a project structure based in ASP .NET Core and Vue.js, fully integrated with HMR, starting the Vue \`serve\` command automatically behind the scenes with proxying enabled when you start the project from VSCode. Since there is no "official" Vue.js ASP .NET Core template, what I did was to use the official React template and modify it as follows: 1. Create a new ASP .NET Core app using the react template (\`dotnet new react\`) 2. Delete the contents of the ClientApp folder 3. Create a new Vue CLI 3 project somewhere else with your own preferences. 4. Place the contents of the new Vue.js project into the ClientApp folder. 5. Install the VueCliMiddleware Nuget package (\`dotnet add package VueCliMiddleware\`) 6. Replace the React specific config in the Startup.cs file: 1. Set \`configuration.RootPath = "ClientApp/dist";\` ("dist" instead of "build"). 2. Use the method \`spa.UseVueCli(npmScript: "serve", port: 8080);\` instead the react proxy call for development. I highly advise you to base your VueJS project in the Vue CLI 3. The CLI is great, zero-config, future-proof, updatable, has a super rich plugin system. If you need more info, don't hesitate to PM. 
Wow, quality article. Bravo. I wish more of medium was like this.
What are some good learning programs to start with. 
Object property lookups are probably more performance-heavy in Javascript than variable assignment. Even perf-wise it makes more sense to do const x = obj.prop.that.some.thing Than repeat that lookup / . Notation chain 10x. Reference: https://stackoverflow.com/questions/7700987/performance-of-key-lookup-in-javascript-object
Hi, thanks for your feedback. Can you suggest what you might want to see in an online code formatter? Best regards,
I’ve seen it all.. what more is there to see? You’re reinventing the wheel. If you’re going to create a code formatter, do something that hasn’t been done a million times, like perhaps a code transpiler. If you’re just learning, then that’s great and I’m happy to provide feedback if that’s what you ask for, but you’ve posted like this is some hip new trendy tool that I should use. It’s not.
Please provide an actual URL example. Change any personal information to e.g. `***`, but don't remove them.
As your company grows static analysis in codebases becomes more important. When you have billions of hits on your javascript errors trigger more often. So there's a will to add a layer of safety that can be checked before going to prod. And there are metrics associated with it, like the number of these errors are triggered and go down down down when more safety is added. As engineers we know that numbers don't lie, and there were perf numbers like the mentioned on the article that we needed to pump up to account for Flow's internal success. It's a laaaaaarge laaaaaaaaaaaarge codebase whose growth never plateaus. Now, how writing JS "feels" under Flow or TS is a completely different metric that's shared with other teams, such as React, hence the side-by-side improvements with their release of Hooks. Now that the perf numbers are back without compromising in safety, we'll look onto more of these QOL needs for the roadmap. 
Flow would either need to find a way to auto-convert types from DefinitelyTyped or they will need to put a lot more resources into building a library of type defs. I think any alternative languages need to look at how to achieve what DefinitelyTyped has without trying to rebuild it from scratch for every language.
[1](https://i.imgur.com/DT9IfSo.png)
I do appreciate your response. Consider wanting to add transpiler functionality to this project. simply ‘npm install’ the package, https://www.npmjs.com/package/js-transpiler and convert the JS to your preferred language. It becomes as customisable as how much you want it to be. Fork the repo, add the functionality and deploy. Done. As long as the functionality is available in npm - it can be added. Hope this helps,
Definitely! I plan to eventually add a CSV handler for those wanting to use a local spreadsheet application like Excel, but we could also support pluggable third party services. Please feel free to discuss &amp; contribute here: [https://github.com/kevinschaich/mintable/issues/3](https://github.com/kevinschaich/mintable/issues/3)
Please let me know if you find a widely supported one that works with your bank and we can discuss it here! [https://github.com/kevinschaich/mintable/issues/2](https://github.com/kevinschaich/mintable/issues/2)
&gt;12 \* 5 - (5 \* (32 + 4)) + 3 I can't understand what you are trying to say?
Ah, javascript has a built in expression evaluator, called eval. So if you want to find out the answer to the expression in the article, 12 * 5 - (5 * (32 + 4)) + 3 you can just: eval(12 * 5 - (5 * (32 + 4)) + 3) try cutting and pasting that in your browser console, and you will get the answer, -117. There has been so much fear about eval that apparently the author forgot it even exists?!? But there are plenty of uses for it, as with any dynamically evaluated code in general. You have to be smart about it. 
That’s why it has to be part of closing out the test and why it has to be someone’s job to make sure it gets done. Incurring tech debt as a means of maximizing short term gain is a tool that every engineer has to have in their toolbox but this is incurring tech debt because the project isn’t followed through to completion.
Well then, I stand corrected. I’ve never been a “big company” guy. I worked at apple for a while and absolutely hated it. I see your point though, it can get hairy with tons of people. I do love React, but I don’t like adding things like redux. I’m more of a keep it as simple as possible guy when it comes to new layers, only when absolutely necessary. I suppose when you’re that big, it IS absolutely necessary.
You completely missed the point 🙄
You are asking in the JavaScript sub. Does that mean you really just want to learn JavaScript, or do you want to learn to program? If the latter, you'll need to understand that programming has at least two layers. There is the problem-solving and there are the languages in which you express the solutions to those problems. You'll need to be skilled in both. There are lots of solid resources for self-instruction, but if you are looking for a self-paced, structured curriculum, I can recommend LaunchSchool.com. 
So what you’re saying seems to be fairly standard in the industry, but in my experience A/B testing is driven much more by product, and when the test finishes (2-3 weeks after it starts, which may be a week after you build it), it’s very easy for the engineer to never actually know it finished.
Yeah I work at a national retailer with a significant web presence. Some teams use typescript, some (including mine) use plain old js. Errors happen in all teams, and TS doesn't seem to be a factor they're. Frankly our dependence on third party tools like Adobe target is a much bigger cause of problems than any of our code. I honestly had never heard of flow before this thread, but if it's filling the same niche as TA, I'm not interested. IMO, it's javascript for people who can't learn javascript. 
`-5+0` looks like it won’t work if I read your implementation correctly. There’s typically two different steps when building programs like this: the first is tokenization which divides the string into its constituent parts (such as operators and numbers) and the second is parsing. A system like yours will often implement the Shunting-Yard algorithm to parse the input tokens. Splitting strings in the way you’re doing falls apart as the test cases become less trivial.
That sounds like your company needs better communication between your product and engineering teams.
Looks kind you either need to handle requests to those two uris in your server.js, or add some logic for serving static files. I'm not really up to date on express, but I would expect it to have the ability to do that. Google "express static files"? 
I still feel like there’s some way this could be at least partially automated.
This is awesome stuff. Can't wait for the next article!
pretty sweet, everyone handing their financial creds and records to a third party was so frigging stupid. Oh, wait, you said google sheets...
Agreed. Other than the painful color scheme, this doesn't appear to do anything that the other 1000 js formatter don't already do. 
&gt;0.3 === 0.3+1-1 false
Thank you. The second and last series will be up in 3days
Thank you. The second and last series will be up in 3days
Thank you. The second and last series will be up in 3days
I've just taken a look at LaunchSchool -- looks great. But sadly, though I'm working full time, my family situation (kids and elderly parents to care for) does not allow me to spend $190/mo for the subscription. I'm muddling through SoloLearn and FreeCodeCamp, but those only really give you syntax. Might someone add in a few more suggestions? Anything from textbooks to other sites that address ds and algos? thanks
Oh yeah now it makes sense, thanks.
well, former google employee too. This isn't an architecture I would recommend if you value your own privacy (multiple 3rd parties having access to all your financials). Though it might be a good start for a local application, not sure how much is google sheets vs vue in the pic though.
The expression parser is really simple in that we cannot have unary operators. Only binary ones. I can add some logic to handle those cases too.
This is a cross post with my SO question: [https://stackoverflow.com/questions/54414054/zip-file-downloaded-from-reactjs-axios-is-corrupted](https://stackoverflow.com/questions/54414054/zip-file-downloaded-from-reactjs-axios-is-corrupted) &amp;#x200B;
Op, you really should credit the original creator of this game. Karim Maaloul is a beast when it come to low poly scene in the browser, just look his post on codepen from years ago https://codepen.io/Yakudoo/pen/YGxYZj
Ah thanks, gave you an upvote, I knew that name 'bungie' sounded familiar, I just don't hear it associated with javascript often. :)
But when will the second and last series be up?
Cool but when will the second and last series be up
He's a beast. I love his work. I've been learning from his website. I'll be mentioning some of his work when we create the game in the second series. I didn't want to mess with the demo for tutorial purposes. Thanks
Thanks for reading. It will be up in three days. 
Hey man can I know how you learn to do all this thing? When you get stuck what would you do? I know you can google but sometime the problem you faced can’t be found on google. One problem i faced was after going through a tutorial online I’m still not be able to build something by myself what should I do? Thank you
Thank you for reaching out. Sorry for the challenges you are facing as a developer. But you will be surprised when i tell even senior developers face this problem. This week i was developing two Node.js apps and both refused to start the server. It couldn't figure out where the problem was. So i made the apps again from scratch. Some errors have took me two days to fix. It just happens and don't feel frustrated. I sometimes used to think it's nature that doesn't want me to be a developer. If you are making web apps I would recommend you leave the developers console open. It will help you truck errors on your code. One last thing that has been helpful to me is not pasting entirely the codes you find online. Paste sections and sections and you'll be able to track errors easily. All things take time. As time goes by you will a pro at these minor things. Writing code doesn't really mean you are a coder. The time you have been coding makes you a coder. And when searching for solutions online make sure you filter the time of the results by clicking the tools dropdown on Google. Hope you found this helpful. And stay put and don't loose hope. 
http://\*\*\*.net/?campaign=111&amp;cid=222 is an example, campaign and cid will always provide random numbers. For the same of the example, I set it to 111 and 222. &amp;#x200B; The iframe final url needs to look like this based on the example http://www.\*\*\*.com/go/arV/autoiframe1--111/222 , right now I setup the iframe code to show http://www.\*\*\*.com/go/arV/autoiframe1-- because the javascript is adding onto it based off the main url params.
LaunchSchool has a free prep course, and a complete set of introductory books on JS, Ruby, CSS, Rails, SQL and APIs. (Look for their 'open bookshelf')
Just do it with css. 
ok can you send me demo?
Two problems: (1) DefinitelyTyped types are full of `any` and `function`, which as mentioned in the article significantly decrease type coverage; and (2) AltJS languages with significantly different type systems from TypeScript won't have a very smooth conversion process from DT to whatever version of it they have.
https://www.w3schools.com/cssref/pr_text_text-transform.asp
thank you so much.
So you basically copied someone else's work and wrote an article about it. The least you could do is give proper credits. 
Doesn't seem to be his design though it seems.
Looks like those are maintained by Plaid.
I was referring to their ability to pick up content in the first place, irrespective of timing. Agreed though. Factoring in delays it's even less desirable as an option.
There's actually very little reinventing done here. The project just uses the [beautify](https://www.npmjs.com/package/beautify) package so the original code consists solely of a webserver with one page.
Honestly, I didn't read too deeply, but I assumed it was targeting V8's webassembly stuff, not just being a fancy (trans|com)piler. 
You can use jquery and go as below. $('.myClass &gt; p').each(function( ) { alert($(this).height()); }); Hope this might help you.
In my first article I didn't talk about developing the game. It's a basic starter guide and I mentions all the parties/libraries we'll use. In the second series is when we'll talk about the game itself. The pen itself has the credits
A for loop is good for iterating through a list and performing action(s) based on the given data, whether it's changing it in place or changing something outside of it to track statistics, etc. map is good for iterating through a list and performing action(s) on each item and storing the modified versions in a new list which is then returned. If the data is easily accessible after the initial scraping the for loop should be fine. If it's not and needs more processing map could be used, but depending on how much needs to be analyzed and how often this is done it may not be ideal as map is already slightly slower than a for loop.
You could have at least said something along the lines of: "Using Karim Maaloul's low-poly as a learning example..." would have covered your bases early on even before needing to release extra parts. At this point you're only saying the pen and the credits will be in the next sections because you're getting backlash for basically ripping off someone else's work. Stop trying to cover your ass. Own up to the mistake and give credit where credit is due. 
Actually it was among the things I looked at, before writing this. As far as I understood, “graphql-binding” package that Prisma uses internally only resolves top-level query/mutation fields and still uses string fragments for field selection. Cool project, but it wasn’t what I needed. 
Thanks for replay. The main problem is the huge boilerplate and the need of middleware. We will check that starter kit and will see.
By default, when your application gets a request for any resource, it's going to check if there's an Express route handler that matches it. If there isn't, it sends back a 404 error. Since you don't have a handler for `'/src/chat/client.js'`, requests for it get that error. What you need to do is create a folder (by tradition called `public`) and then write some code that says "if we get a request where the resource/URI matches a filename in here, send back that file." That's written `app.use(express.static("public"))`. `express.static("x")` returns a middleware function that checks folder "x" for matching filenames. `app.use` takes a middleware function and tells Express that whenever a request comes in, it should be run through that function first.
Sure. Please try it out, and let me know what you think! It's not intended to solve every case, but hopefully it makes a lot of typical usage much simpler. I'd definitely appreciate feedback on what other use cases it should cover and what it should include out of the box.
Thanks I'll look into this a little more and see what i can find
Cheers that sounds pretty simple and what like what I am after. I'll have a dig about and play with webpack and see what happens
[removed]
Awesome creation !
My bad I forgot sudo
It's really hard to configure, I saw some guides using nodemon or babel-register, however I am not allowed to add libraries on the project. However I could practice this on my own, I hope that Microsoft add this kind of recipe they only have for now TypeScript. Thanks for your help!
Here you go, working for the sample with just few checks, [https://codepen.io/kingofdelphi/pen/LqRGay](https://codepen.io/kingofdelphi/pen/LqRGay)
No worries. Good on you for trying to push the team on to some new technologies, it’s never easy! PM me if you want any more info on what we’re doing. As I said it may not be the best solution, but at least it’s *a* solution
Nice; thank you for this :) Read as much as I could and only found one issue (though TBF I'm not real well educated about cross-platform Node, or at all), but it's not really worth a PR: Wine is to POSIX-compliant operating systems as Cygwin is to Windows, i.e. it runs Windows programs on Linux &amp; Mac most notably, but also BSD, and IIRC can work on some others or at least used to. While Android is supported by Wine, at least experimentally, it's not very notable last I tried -- the ARM processors which are in use by most Android devices cannot run x86-processor software and so most useful Windows programs are inaccessible. It would be possible to run Android on an x86 and Wine on top of that...but, at that point even I am questioning the logic and reasonability beyond "will it work", and I'm insane. Something like "Wine: Can run Windows programs on POSIX-compliant systems such as Linux and macOS." seems to cover it, and is about equal to the Cygwin description.
I'm not sure that this is actually useful. Searching for `shorcuts-js` reports that the name is available, which is _strictly_ true as the name isn't taken by anyone else. That doesn't mean, however, that you can publish a module with the name `shortcuts-js`, as npm will reject it as a similarly named package already exists, `shortcuts.js` (something I found out the hard way!). I'd imagine that you'd only want to use this tool to see whether or not you can create a package with a given name, in which case it isn't any more useful than searching npm for the package name. If it could use the same rules that npm uses to tell whether or not a package can be created with a given name, then it would be a lot more useful.
Interesting article. "Today one in two front-end positions requires proficiency in TypeScript.". Are you sure about that?
This is, sadly, all over the place. It starts as a fairly elaborate **anecdote** of two stereotyped programmers and from there pretends to draw general conclusions. This, in itself, is a pretty bad way to reason. Not only that, but the anecdote draws _intentional_ conclusions. That is, it doesn't simply draw general _technical_ conclusions, but instead it draws general _behavioural_ conclusions, ideas about how people think or approach programming drawn from a single anecdotal evidence -which is still not clear how real it actually is. It then shows how limited the author's own view is by collating _static typing_ with the particular way Java/C# do types, and by somehow ignoring anything that is not Java/C# and OOP. It partially fails on the understanding of Design Patterns by saying they apply universally. And then it goes on a fairly long, unrelated and mostly pointless story about how he trolled Brendan Eich -with NaN of all things- to somehow pretend it means something. But probably the most telling thing is this: &gt; Take me for example: because of the type restrictions, my code is impossible to use improperly. So, yeah, you're the greatest developer ever, man. Cool story. From there on, the rest of the "article" seems to be just bashing against anyone and everyone. Do they still use JS? They clearly don't understand the importance of static typing. Do they use TS? Booh, they do it because for the wrong reasons and they don't understand its "true power". In the end it all concludes in one of the most absurd ways it could: "I know the problem is not seeing the other's POV and not understanding the other option's advantages. I don't see the other's POV and I don't understand the other option's advantages. And I don't want to! My option for the win!!" Is this thing even real?
I don't know how you implement your tests, but the main benefit of a/b testing platforms is that they encapsulate necessary test code into modules that you can easily take down when a test fails or promote a winner to 100% and then take it down once your dev team implement the feature properly, outside of the platform. There should be no "dead code" ever. There can be other issues - like marketing team implementing something without even telling the dev team - but these are communication issues. If you have dead code, the way you implement tests is at fault.
I know you're joking and talking more about the number of packages than the actual size, but you might be interested in [Plug'n'Play](https://yarnpkg.com/en/docs/pnp)
Online content seems to get shittier and shittier, desperation for clicks and views pushes people to shit out low quality content, shitting up the internet in consequences. Sad state of things
I've landed 10k $ projects using Node.JS. It's more about experience and language.
Looks like he did add the credits at the beginning of the article now
My portfolio is in Gatsby, was Next.js but Gatsby integrates a CMS and static build step much easier to me. It's fast as heck on the Lighthouse audit.
Fair :) it isn't just compiling ts to js and feeding it into V8 though, it's also handling all of the things that node does, filesystem access, network access, etc. V8 doesn't do any of those things.
You need to read about call stack and event loop, setTimeout does not pause code execution.
setInterval(function(){ //socket code here//}, 3000);
freelancing project? curious, how complex was it and how long did it take?
Are you tripping?
Yes, for example DNA has obsolete, unused sequences.
It was basically a website to build a freelance platform based on Bitcoin Cash. Took about 3 weeks to finish (though I have past experience with Node and this specific task so that's why it took me so little)
Absolutely - our DNA contains all sorts of legacy deactivated junk that's not used any more, or is being used for something other than its original purpose.
This is garbage.
Isn't Cobol still used in the financial area?
&gt; old codes/programs are like ex-wife, you are done with it but you have to keep on supporting it. Good one, /r/ProgrammerHumor . Also, yeah, write code while trippin' is kinda cool. Just take care with stuff you publish online.
I wonder whether the programmers of this simulation are wondering if they could just remove those junks but are worried that they might accidentally "break" the Human Object Class because it was written by Jake and Jake is no longer working in Incarnation Experiment Prison Private Limited.
I remember hearing they are paying a LOT of cash trying to get pull people out of retirement to maintain those systems.
Thank you, what do you mean by "take care" ? Should I post that joke there ? 
proceed with caution. also zero strong master password enforcement, not really sure these guys do security on the regular. 
Yes it does not but delays the next emit, right?
Despite that i use Vue and the article is biased towards Vue, the comparison points are total bullshit when it comes to technical differences.
Say you start the program at 00:00:00. 00:00:01: your code will set aside an emit to be executed after 15 seconds. 00:00:02: your code sets aside another emit to be executed after 15 seconds 00:00:03: another emit is set aside ... 00:00:16: the first emit is executed 00:00:17: the second emit is executed 00:00:18: the third emit is executed and so on It will become more clear once you read about call stack and event loop. Plenty of articles online.
Yup... it comes in very handy. It's been there since Chrome v39.
Thanks now it is more clear, I will have to revisit call stack and event loop.
Why don't you just go to npm and search for that name and see if it's available or not 
Use this then. ifrm.src = ifrm.src.replace(/.*[?&amp;]campaign=(\d+)&amp;cid=(\d+).*/, "http://www.***.com/go/arV/autoiframe1--$1/$2");
not surprised 
I feel your pain. I've dealt with their phone sdk, and I'll have to again pretty soon. Not looking forward to it.
Is any different to using map? For me map is more readable in this scenario 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Pfff, javascript for people who can't learn javascript. I get the hate towards fads in JS land, but that sounds like some purists attitude. 
true, doesn't save any lines of code though, and I don't think it is entirely the purpose of reduce. in fact you still have to assign the reduce to something outside the reduce scope. Plus it can be a lot easier to debug when the array is in the outer scope. I think what you might be looking for here is map.
Yeah generally if I am assigned to implement a test, I put things in their own clearly labeled modules. However, everybody else does not do the same. So I’ve been thinking about ways to enforce this.
I'm more surprised about java being second.
I didn't dive deep in your project. Maybe it is not a original idea or it's not better than others with same propose yet. But I really appreciate your initiative. I think you should go ahead. What if Linus Torvalds gave up Linux, just cause there are others OS... That a great idea and probably will save time in projects.
Now we sit back and wait for JavaScriptScript to take over
I was expecting Python to be second. 
Where is HTML?
Who consider HTML as a language?
It’s not a programming language. It’s a markup language 
Markup is not programming. CSS, on the other hand, is Turing complete.
Well, it's definitely language just not programming one. HTML - Hypertext Markup Language
Be kind. Everyone you meet is battling javascript (script). 
I saw somebody claiming on their resume that they know "JavaScript ECMAScript 2016"
Survey says no. https://twitter.com/frontendben/status/1089868554705559554
Or Microsoft's JavaJavaScript#
released new version of [https://github.com/SoftwareBrothers/better-docs](https://github.com/SoftwareBrothers/better-docs) which adds @category tag to jsdoc
Nice. I've found myself implementing some LINQ methods in JS as well, coming from a c# background. It's nice to see all of this in one library. I'll definitely be using this.
[removed]
Haha guilty as charged. In reality, I consider those transpilers to be something of a black box, and I've had terrible experiences in the past. I prefer to know exactly how my code is going to work. Couple that with the fact that I don't really see much benefit out of them, it's a hard pass for me. Again, it's a personal preference thing. I don't hold a grudge against people who like it, I just won't work on their projects :) 
I personally use TypseScriptScript
yeah its the only language you can really use for the front end 
I've met a guy who tries to make full web apps (tic-tac-toe, self-validating forms, mock operating system UIs) using only CSS. I wonder what he could produce if he would only spend that time on JS instead. As a web developer targeting multiple platforms of various vintages, I should note that it aggravates me that his apps only work on bleeding-edge Chrome.
Also only language for both front-end and back-end
...you mean like adding classes, interfaces, compile type safety and standard module importing into JavaScript? Who would want that? /s
Today. Other (WASM) options are looming, though they haven't really proven useful yet.
Creativity should never trump usability and function, unless you don’t care about your users and your clients. 
Map would work fine here. Reduce is useful if you want to transform the array into something that’s not an array 
I'm pretty sure with XHTML and the right namespaces that you could get XSLT to be Turing complete, but it would deserve a "thanks, but I hate it" moment and I'm not sure you can really call it HTML at that point.
Promises are used to perform an action _when_ something else has finished. In your example you are logging the object before the promise has completed. By nature you should only use the response of a promise within the callback you provided in the `then` method.
What's wrong with that? It might not hurt if employers are looking for specific keywords. Not all of them understand programming.
The power of Android!
I mean a lot of languages can compile/transpile to JavaScript, due to how much hatred people have towards JavaScript. From TypeScript to Elm to Haskell. 
Not if you are willing to compile/transpile to JavaScript. 
Serious question: if JS was your first programming language, what other language would you consider to expand your career prospects to more backend? I'm thinking Java, Python or Go?
I specifically look for ES6+ in resumes and many JS roles do too. You would be extremely surprised to learn just how many people apply for JS roles confidently without knowing ES6+ even exists.
java
I'm in the same situation, I learnt Node for backend and when I need more power I'll learn Go
&gt; It might not hurt if employers are looking for specific keywords. Fair point, but i personally write my resumes to be intended to be read by human, while making sure they can be read by machines. Sure, writing that i'm a Full-stack Frontend Backend JavaScript Web Software Developer Programmer might make the screening software's panties drop. But when it ends up in a person's hands they'd think that's weird. My point is that it's ok to use keywords in a resume, but maybe don't put them next to each other.
Don't miss the sequel, _The Clone Zombie Wars_
Node.js allows you to skip that step. Anyway, for the current moment, I think the best options would be Java, Ruby (+rails), Python and Go. Don't forget about PHP, though. It's still very popular, especially among older mid and small-sized companies.
Good point, it's overkill. ES 6 was still a big change, and arrow functions so much more elegant than what other programming languages do. Your resume writer is just saying that he is a man of taste 
Or Attack of the Clones. Ooops, that ones already taken. :)
You joke, but TypseScript is maybe exactly that and it's kind of awesome
There's a good reason to be cautious about any password manager application. Mine is no exception. However, I hope that the fact that it is completely Open Source and could be built and deployed independently, should make it a bit more trustworthy than the closed-source ones. As for the Master Password, you're right. I think the app should enforce strong password. Adding this to the future feature list! Thank you.
next: do you have any portfolio?
If you need help getting a resume i'd recommend going to r/resume
I think you should read up more about Promises, you are missing some important understanding here. Promise functions don't "return" the result like in a classic JavaScript function, that's why your data variable doesn't hold the answer. Furthermore, that console.log on line 29 will never be able to print your data, because it's outside the promise and will run before the data is actually fetched.
Not sure what you mean
I didn't know what you meant by "do you have any portfolio?". I assumed you were looking for advice about making a portfolio
You named your Java development company "Java application development company"? haha 
I don't really think you're reduce example is any better than the original, infact I'd favour the original. Although u/morgan598 is right in saying a map would be better: const teams = APIResponse.map(team =&gt; ({ name: team.name, stadium: team.stadium, image: team.images.large });
I thought that Array.reduce is mainly used to reduce an array to a single value (e.g. summing values in an array of objects) or to a set of values (e.g. flattening an array of arrays). I think map would be more appropriate here, because you're not trying to reduce the api response, you're converting it to another array. Of course, both functions can be used in this case, but it's easier to understand your intent when you use the one that fits better in the context.
no I mean the employers will ask for portfolios
That’s what my comment said haha just not nearly as verbose
It would help to be able to see the full code running on something like a JSFiddle or CodePen, particularly because there's a `source` variable in line that is not specified anywhere. Anyway, it _looks like_ you're loading some CSV file to merge with the `finland.geojson` file. This is an asynchronous call. If you have those two pieces of code just one after the other, then quite probably the problem is that you're getting the response from `finland_provinces.geojson` **before** you get the response from the CSV file. So it ends up drawing the blue borders _before_ it draws the data, and so it ends up _under_ it. If you're going to have to load various data files, you probably want to load everything first and delay painting until you have _everything_ loaded so that you can decide the drawing order.
I am not sure about the entirety of functional programming but there are a few FP aspects that ought to be used in coding in general. My favorite one that can be easily implemented starting today is [pure functions](https://en.wikipedia.org/wiki/Pure_function). 
It’s largely subjective. I always advocate to only use a few things like filter and map, since they are more expressive and not confusing. Some people go off the deep end and make everything completely functional and immutable. Personally, I want my code to be maintainable by even a junior dev and it makes it difficult.
Oooh
Hmmm. Alright thanks. I'll keep it in mind.
And for those who use Firefox, there's the [frame rate graph.](https://developer.mozilla.org/en-US/docs/Tools/Performance/Frame_rate#Frame_rate_graph)
Interesting. I'll have to look up that compiled just-in-time thing... And by the . operation, I meant like single lines or "array mapping, index of, some of, lambda expressions", etc.", not so much object properties lol. 
I'm not sure why you think a quote changes anything? This isn't about one random person's opinion. And yes, it IS just a random person. Even if he had invented all of programming and very programming language ever. He isn't the one who has to work with 99.999999999% if all code out there. For HIS purposes HIS opinion might have been fine, so who cares. Also, YOU can do whatever the hell you want, it's your life. But a lot of people make that statement because they found that this is *their* experience.
Do you think that a big company would be okay with using extra variables? Because I know performance and code reviews are a big thing. I'm honestly surprised there isn't some sort of javascript compiler/minimizer that removes those extra variables to make things more efficient. 
Agreed with /u/ugwe43to874nf4; I'd use `Promises.all` to do the drawing after all files are loaded. Since you're already in callback hell though, you could just put the 2nd json inside the csv (or whichever, order wouldn't matter): ``` d3.json(file, jsonData =&gt; { d3.json(file2, jsonData2 =&gt; { d3.csv(file3, csvData =&gt; { // do what you need to do }); }); }); ``` (For the record, please don't do this; learn about promises instead) Alternatively, you could set up two different SVGs with the correct order and then draw to those whenever: ``` svg.append("svg").classed("layer1",true); svg.append("svg").classed("layer2",true); ... d3.select(".layer1").selectAll("path").data(...)..... ... d3.select(".layer2").selectAll("path").data(...)..... ``` SVG elements are drawn in the order they appear, so layer elements are on top. And yes, please use CodePen et al or at least a gist in the future for long blocks of code.
You're probably right in that. I guess I'll have to run some promises to make it work.. Thanks! I can't share the whole code unfortunately.
When I said . notation, I was more talking about things like using .indexOf for arrays, and lambda expressions, and other useful stuff like that that ends up being done on one line instead of using many variables/containers to write all the code out like you might in another language. I might make a thread with a more concrete example of that. 
Dammit i hate JavaScript
if for personal use and that is your thing, sure. Know the tradeoffs. It is meant to make writing data transformations easier, at the cost of execution speed and resource usage. Plus it is about making things immutable, when really the JS environment is entirely about mutations. I personally think it is better for programmers to not be scared of change, and to learn how to deal with it, instead of insisting on fine grained authoritarian rules with overhead because someone somewhere didn't really know what they were doing and needs to save us from ourselves. The argument for FP is somewhat strengthened when you get into parallelising, but it isn't much harder on the whole without it and typically more performant without it. And a lot more people will understand what you wrote without it. And there are better languages for performance, with their own tradeoffs. 
Thank you!
Forgot to mention but the bottom svg has drag functionality in it. Nesting the svg's wouldn't work because the top svg wouldn't get dragged, right? I guess I could somehow hook the events to also work on the top svg, but that seems overly complicated.
https://npmjs.com/&lt;package-name&gt; will tell you if a package name is taken. I use it all the time.
&gt; personally I think strong type systems make JS worse not better preach
LOL people downvoting me
JavaScript? *JavaScript?!* ***JavaScript!!!!*** &amp;#x200B; *Grrrrrr....* **Woof!** **Woof!** **Woof!** **Woof!** **Woof!** **Woof!** **Woof!** **Woof!** **Woof!**
What a great addition to the conversation.
Check this out by Kyle Simpson (YDKJS) [Function Light JS](https://github.com/getify/functional-light-js)
Articles about the most popular programming language now the most popular article.
if you use javascript for the backend you need to be euthanised.
Those aren't even remotely comparable… one is nearly server-side only, and the other is nearly client-side only.
JavaScript will eat the world.
How come? Java has a solid base in Enterprise sector, apart of course from the Android people. Lots of corporate stuff is done with JEE which is a solid and mature technology and can run in anything remotely serverlike (or heck, even a Raspberry Pi). I am actually surprised that Java was overtaken (although to be fair JS has been finally pushing the envelop properly for the last 7-8 years what with the language kinda becoming more solid plus the existence of Node and all that jazz).
Ok, why?
Nice into! Love this low-poly design. Hope you finish the series in the same style! Keep it up!
Thank you. It will be up soon
Top 10 ${thing} you should be using in 2019
When they are using the term 'popular' I think they're talking about ubiquity, how common it is.
&gt; all they really are is an argument from authority That's true. But then relying on a SO answer is also an argument from authority. The difference is the guy who invented C++ is a more reliably accurate authority than a random person on the Internet. &gt; Interestingly - but not unexpectedly - you ignore the argument here. Exceptions in JS are expensive, see link. You mean the link from 2012, which itself cites a blog from 2006? Turns out their information is outdated. Today, Chrome/Node handles try/catch as fast as if/else-style error handling. And further, even back in 2006, the cited blog didn't say use exceptions rarely. They said don't use them in performance critical functions, which means normal performance rules apply. That is, don't prematurely optimize. Code first and foremost for correctness, simplicity, and robustness. _If_ the final application has an observable performance problem, then first _profile_ to identify the 3% of your code that is truly performance critical, and optimize only that 3%.
Where it runs shouldn't affect a languages popularity. If JS was just front end, and Java was just backend, then it just means that there is more call for frontend work. But that's not the case. Javascript on the backend has gotten very popular. Node.js is huge, and only growing. And Java is what's used to build the front end apps on the most widely used mobile OS in the world. They are easily comparable. 
NaN == NaN
Yes, but then it solely depends on who you ask. It's the same as if you'd ask whether English or Chinese is more popular. It depend on whether you survey the Asian area of the American area.
But it all boils down to object properties. For example this one liner: persons.sort((a, b) =&gt; a.age - b.age).reverse().flatMap(p =&gt; [p, ...p.friends]).map(p =&gt; p.name) Sorts persons by age, reverses the list, produces a list of all persons with their friends and transforms this list into a list of names. It's just a bunch of method calls on the array object. Each method returns a new array object, which means, that you can call functions on the return value inline.
True, that's even more expensive. I think it's a front-end obsession with conciseness (as in line with or sometimes opposed to! clarity), that has a lot to do with the recent popularity of JSX syntax which simply does not allow statements unless you use an IIFE.
True, that's even more expensive. I think it's a front-end obsession with conciseness (as in line with or sometimes opposed to! clarity), that has a lot to do with the recent popularity of JSX syntax which simply does not allow statements unless you use an IIFE.
It's an article about HackerRank's 2019 developer survey where they found JavaScript to be the most common language as reported by their users, it's all in the article. I don't even think the headline is misleading but I guess it's kind of ambiguous, is your problem with the headline?
No, my problem is with the newsworthiness of such a piece of information.
That's not a JS thing. That's just following language-agnostic standards.
Yes, if that paradigm fits your given problem better. There are problems that can be expressed much more efficiently using FP techniques and typically, developing UI works better this way (there is a reason why React is popular, since it takes plenty of inspiration from it)
You might be on the wrong subreddit.
JavaScript also overtakes Java as most popular programming language misunderstood by recruiters. 
Awesome. However, now he's going around deleting his comments with substantial negative karma to hide his tracks. That's more than enough for me to never want to read anything they write.
`NaN` is an error state. Should `parseInt('foo') === 0/0`?
If you're applying a transform to each element of an array to produce a new array, you should be using `map`, not `reduce`. APIResponse.map(({ name, stadium, images }) =&gt; { return { name, stadium, image: images.large }; });
I don’t know if you’ve noticed but most shit posted on the Internet is anything but newsworthy
Hey, I hate Java! :) 
You don't sacrifice any of those with SSR. I don't get the uppitness.
Android is not just the most widely used mobile OS, it is the most widely used OS. By a long shot. 2.7 billion users. Almost triple that of Windows.
I was jk , sorry :)
Use the drag events on the container SVG. Nothing complicated at all, it should be the exact same thing.
\#{num} will surprise you!
I guess it’s only fitting now that installing node should print out “3 billion devices run javascript” in the console
It's good to know some basic functional programming concepts and higher order functions help keep your code clean. I think that because JS is often very I/O (user interaction, working with the DOM) that trying to be 100% functional complicates thing and you have to have a pretty good understanding of Monads, etc. &amp;#x200B; I think a functional tendency can make a project more readable and maintainable. Make functions pure, avoid needing state when you can, and make variables immutable. 
&gt; Those aren't even remotely comparable… one is nearly server-side only, and the other is nearly client-side only. So you mean that java is mostly client side, because its clinging to popularity for android app development. While Javascript is mostly server side, because either node or npm have become used in nearly 100% of server side projects these days. 
There are loads of PM tools all offering different services. Rather than go at it blindly (I did that when I was starting out), find a credible resource that really weighs the pros/cons. I used this tool [guide](https://www.appsee.com/ebooks/essential-toolbox/?cpnid=7010N000000hdsE). 
Clearly this was a contrived example for a performance question, not an example of an extra variable anyone in the real world would actually use.
Beautifully written! 
Here, you dropped these: \` `
I did add a ;) ...
I don't know anybody who writes out ECMAScript, except the two of us, right now. 
I guess the phrasing was odd
Haha, I feel you bro. Been there, done that.
thank you. 
Great point! I was really demonstrating that Java is used on the front-end quite a lot, which makes my case that Java and Javascript are not hard to compare. Although seriously; it's just as easy to compare apples to oranges. 
Yeah! Like that. That's surely more efficient than doing things one line at a time, I guess. Is there a good guide for useful javascript functions?
Lol was that actually a thing when you used to install Java?
Removing this post [just as I did the last one](https://www.reddit.com/r/javascript/comments/akzjop/javascript_overtakes_java_as_most_popular/) because the comments are predictably uninspired and provide nothing of value.
Eh, RES has macros built in, which you could use. Outside of reddit, and just all-around more nerdy, is [Chrome's snippets feature](https://developers.google.com/web/tools/chrome-devtools/snippets). Bookmarklets work too though!
Hi /u/donTheChimera, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
It only happens once because you're only calling it once. Includes takes a single value, not a callback, and compares that value against each element until found. You're passing in an expression that is resolved into a string before includes runs as all arguments into function calls are. If you were to use something like a `some()`, where a callback is used - a callback being a function containing code that is run for every iteration - then you might want to store the trim/lower calculation into a variable beforehand so that you're not doing it for each loop iteration.
thank you for that explanation, and pointing out the distinction between the callback/function-value and the value passed in
It is **definitely not** being called multiple times.
Am I using ifrm.src = here or newsrc = ? 
They've moved how you access it around over the years but those instructions are the current way. Here's a screenshot just for visual comprehension [https://i.stack.imgur.com/k5Yg7.png](https://i.stack.imgur.com/k5Yg7.png)
Lol, I find myself pondering similar crap quite often while I'm coding... Happy to hear I'm not alone! 
Cancer is a software bug that was introduced because of a premature rollout, and so on
Yes. Your 27 Twitter followers that voted on your survey are a representative sample of the entire field of web development knowledge. /s It's clear I'm arguing with someone whose hubris blinds them to information contradicting their existing beliefs, and yet I'll leave you with one more parting thought from the perspective of someone who would be hiring for a development team. CSS &amp; HTML can be learned to a junior level in a few weeks and with the proper resources have an intermediate level mastery in about 6 months (the degree of cognitive debt required for each is limited and most of the nuance has to do with browser idiosyncrasies). For JS/TS development, it takes about 6 months to become competent on a junior level and about 2 years to have an intermediate mastery, with a much larger cognitive debt relating to the larger paradigm of organizing complexity within a system and writing efficient, clean, and maintainable code. So what has more value from a salary perspective? As I see it, an employee who has a mediocre mastery of JS/TS and CSS knowledge is fairly commoditized (there's a ton of bad JS developers out there who also know CSS), and as such is going to command salaries in the sub-80k range. A CS graduate who is competent in multiple languages beyond JS/TS who both understands how to program well in any language, and applies that knowledge to JS/TS - that seems to be a lot rarer in this industry and certainly of more value - and is going to command a higher salary. Which is why, as I've said, in larger teams it's going to be a waste of that more sophisticated (and expensive) developer's time sitting around writing CSS (lower cognitive debt). Instead, one of the many, many people out there who have mastered CSS/HTML, but have not mastered JS/TS, is going to be writing that. And the person who has mastered JS/TS is going to be writing it 100% of the time. If we're talking about some web design shop doing basic websites with contact forms and stuff (the things so commoditized Squarespace is able to be stealing the market share), then yes, HTML/CSS/JS are all going to be required for job positions. But if we're talking about sophisticated web application development on a large team, there's no way the JS/TS devs are writing the CSS/HTML too. It's analagous to backed developers needing to know SQL. On smaller teams, it's an important thing to know and if no one on the team knows it, you end up with horrible queries. But on larger teams, the people writing/maintaining the queries are not the same people writing the rest of the code.
{} + [] === 0
The BigInt proposal explicitly states that `Math.pow` would continue to _not_ operate on BigInts. Instead the `**` operator would work when applied to BigInts. Unfortunately for you, the current implementation of the Babel transformation [seems to be still in progress](https://github.com/babel/babel/pull/6015). Polyfilling BigInt, which is the only way to go without native support, results in quite a big performance hit. So I guess you're mostly out of luck. The only way you could use it is to run it on Chrome, which has already support for BigInt, and use Babel 7 (not 6, as in your link) and use the plugin `babel-plugin-syntax-bigint`. This way `BigInt(2) ** BigInt(54)` would be left as is and [Chrome would run it natively](https://i.imgur.com/P0SbZjm.png).
Fuck out of here
[removed]
I think you’re living in a bit of a bubble. Last week I was at a recruiting event, and *all* of the companies there used Java on the server side.
Oh, I thought there’s a new browser-based First Person Shooter game.
Counter Strike? 
Thanks, I'll look into those! There is something hacky and wacky about bookmarklets that I really enjoy though :-)
I think the new MS Win 10 update has this 
This is what I have now. It achieves partially what I am trying to accomplish. It gives me an array of all the "items". But I am having trouble targeting specific aspects of the item: const itemList = await page.evaluate(() =&gt; { var items = document.querySelectorAll('div.feed-item'); return Array.from(items).map((item) =&gt; {return item.innerText }); }); I am grabbing all the items (div.feed-item) and then returning the innerText of each one with the (.map) ... But the issue is, I would like to break down that inner text into variables I can then use to analyze the data. For ex: I would like to separate the Item name/price/info into different variables. But they are all placed within children divs of the (div.feed-item) and I can not seem to understand how to target these children, as I keep getting null results for everything I try. 
&gt; This is what I have now. It achieves partially what I am trying to accomplish. It gives me an array of all the "items". But I am having trouble targeting specific aspects of the item: &gt; &gt; const itemList = await page.evaluate(() =&gt; { var items = document.querySelectorAll('div.feed-item'); return Array.from(items).map((item) =&gt; {return item.innerText }); }); &gt; &gt; I am grabbing all the items (div.feed-item) and then returning the innerText of each one with the (.map) ... But the issue is, I would like to break down that inner text into variables I can then use to analyze the data. For ex: I would like to separate the Item name/price/info into different variables. But they are all placed within children divs of the (div.feed-item) and I can not seem to understand how to target these children, as I keep getting null results for everything I try. 
/r/javascript
I’m not surprised. It was easy for me to pick up and there’s always more advanced things to do/learn with it. I think the barrier to entry on other languages is why script is doing well. 
If you have a Hi-DPI display then it is almost too tiny to be useful.
So cool! (☞ﾟヮﾟ)☞ I'm going to try it later on my pc
Well that IS what the language is called. Also if [Oracle doesn't stop suing people](https://www.reddit.com/r/javascript/comments/8d0bg2/oracle_owns_javascript_so_apple_is_taking_down_my/) who use the word JavaScript, maybe ES will lose it's nickname
Interesting idea. Does it rely on you remembering (or figuring out with trial &amp; error) the revision you’re currently on?
execCommand doesn't work on all the web browsers and they don't support the function the same way. There is a new standard, but again, not supported on all the browsers.
Just a suggestion, make a clear way to see an example on mobile. I’m curious but not home, so not really sure what this can do.
I just use a text replacement in MacOS to turn &amp;shrug into ¯\_(ツ)_/¯ and it syncs to my iPhone too.
You won't get any breaking news, but if you want to know a little more about the ecosystem check out https://devchat.tv - Specifically 'JavaScript Jabber', and they also have other shows that are more specialized, (one for React, Angular, Vue, etc.)
[removed]
Hi /u/Alinon, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
May you explain what happens here please? I see two of such comments from OP, both heavy downvoted, and then your comment upvoted equally. English is not my mother tongue and it probably the issue, but still feels weird.
I should be friends, wanna be friends ?
Twitter, mostly. And r/javascript I follow a lot of the people on the React team and only the NPM team, and for the most part, they also retweet a lot of the news they find. Here's a few: *[Dan Abramov](https://twitter.com/dan_abramov) *[Adam Rackis](https://twitter.com/AdamRackis) *[Ken Wheeler](https://twitter.com/ken_wheeler) *[Kent C. Dodds](https://twitter.com/kentcdodds) *[Sophie Alpert](https://twitter.com/sophiebits) *[Lauri Voss](https://twitter.com/seldo) *[Shawn Wang](https://twitter.com/swyx) *[Sarah Drasner](https://twitter.com/sarah_edo) And there are a bunch more. Those are the main ones I follow though
Chrome says Invalid URL.
This is what I do. Super useful. This JS code looks neat though 
This came out of my own annoyance of planning trips, I book a flight, hotel, and then find things to do, but where do I put it all together? A google doc? notes? calendar? I looked to the app store and I felt that a lot of the popular trip planning apps had horrible UI/UX. Tripit, Sygic Travel, Google Trips, etc the lot. So I came up with this drag-drop interface with the goal of eliminating the annoying manual entry of activities that plagued Tripit. After having learned JavaScript in the latter half of 2017, and had tinkered around with React/React Native a couple times before, and thought this would be a great project to give it a test run. Anyways, do give the beta a try, and any feedback is greatly appreciated! This is my first React Native app and I’m eager to improve. It’s a startup that I’m doing with /r/2001kraft. Most if not all the components are hand-coded from scratch because I wanted to retain full control on crafting the UX. At the moment I’m currently hard at work adding Booking.com integration and hotels/accommodation to your trip. **iOS Beta:** [**tourapp.co/beta**](https://tourapp.co/beta) The beta is only available on iOS for now. I’m looking to work on and find people to help with creating an Android version along with a webapp soon after. &amp;#x200B; A couple days ago I posted this on both /r/reactjs and /r/reactnative and it became top post of all time on both of them. I loved the feedback and critiques and will look to open source some of the code very soon once release is done. If anyone's curious about the stack: Backend: Firebase. Db: Firebase Firestore. Store: Redux. Maps: Mapbox. Navigation: React-Navigation. Updates: Codepush. Styling: Styled-Components.
Yes, let's be friends! So what do we do now, drink lemonade and talk about how the Big Bang is a closure? 
https://textfac.es/
Couldn’t get the page to load on mobile. 
I’ve just set it up as a keyboard text replacement on my Mac. Thanks to iCloud it also works on my iPhone. Whenever I type meh I get ¯\_(ツ)_/¯ You’re welcome.
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Very impressive work - the small responses of the app interacting with touch events are satisfying and reactive! As an interested developer getting more involved into React, do you have any recommendations on resources or tutorials?
https://github.com/dysfunc/ascii-emoji
Hey ... I think reddit did that. ¯\\_(ツ)_/¯
I have retrieved these for you _ _ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Very nice!!!
Oh wow I’m talking to a bot. Hello. 
Yes! Glad you love that. I spent way too much time fine tuning those, and still not fully satisfied with them yet. I believe that the best UX is crafted from gamification: a user needs to be 'rewarded' for their actions if that's how you'd put it. &amp;#x200B; I started out React on Treehouse after finishing the NodeJS course, their beginner's tutorial is pretty solid.
Thanks for sharing this. Personally, I use MacOS, but for my apps I prefer a platform-independent solution. However, I like what you've proposed.
Very fun looking, the drag bouncing effect is well done. Great job!
you've just learned js a year ago! that is amazing!
Very impressive!
I use a mac as well. As far as I'm aware, almost everything you can do on linux (in terms of the command line) is possible on mac. They both follow the POSIX standard, so the above will work on pretty much everything but Windows. If you *really* want Windows support, I'm sure there's a near equally short batchfile that would do the same thing.
Could you share the HTML you're trying to parse, that would help. 
Oh damn! I done goofed it up. Actually should have linked this service: [https://mrcoles.com/bookmarklet/](https://mrcoles.com/bookmarklet/) This encodes the right parts, you can just paste this piece into there: const copyToClipboard = str =&gt; { const el = document.createElement("textarea"); el.value = str; document.body.appendChild(el); el.select(); document.execCommand("copy"); document.body.removeChild(el); }; copyToClipboard("¯\\_(ツ)_/¯"); // replace me with your favorite text face &amp;#x200B;
That looks amazing! Do you plan to publish it to Android too? :) 
Very pretty. I really like the date picker and the overall aesthetic. You clearly have a design background of some capacity. Here are the first few things I noticed. (1) If this app is going to be used by people other than you, you really need some guiding elements instead of dumping users on a blank “add a trip” screen. (2) I can’t add a method of transportation?
That's a great way to do it! The sync is especially awesome, sadly this isn't too easy to do with windows 10 and android I suppose.
Thanks, and yes I do have a design background. I used to do car design back when I was younger and self-taught alot of UI/UX stuff before I got into JS. 1. I agree with that, I currently hate how empty it looks, changing it in 2 updates. 2. For method of transportation, I'm currently waiting on flight booking integration with Amadeus, it's currently disabled at the moment.
Thank you very much! Love myself some extra emoji's to the repertoire!
Yes, right after iOS release I will begin working on Android.
Thanks, nice collection :-)
Nice! Let me know if it works ʕᵔᴥᵔʔ
This is your _first_ project, after having used JavaScript for only one year? That’s nothing short of amazing, OP! 
That's too bad ಠ\_ಠ This is one of the reasons why I like to program in the backend, I don't have to worry too much about browser compatibility, total respect for y'all frontend developers!
Yes it is, tbqh I have done a couple other misc things like my own website and a half-finished React Native app, but none was as big of an undertaking like this one.
Awesome job, I was actually searching for an app like this. Really love the UI/UX. Got any useful resources for a developer who is looking to learn more about UI/UX? As a dev, I tend ti struggle when it comes to design.
I see you OP double dipping on that karma For real though this has inspired me to learn react and given me renewed inspiration to do some more web design! Great work
You do all this only by yourself ? How long did it take ?
 What do you think about react-native-web?
Great! Thanks for that list! &amp;#x200B;
The Javascriptweekly newsletter, subscribe and you get the weekly email. I like it a lot. [https://javascriptweekly.com](https://javascriptweekly.com)
Woah! This is only a years worth of training and practise. It gives me great hope for me in the next 12 months. The end result looks amazing. What knowledge of software development languages did you have before this year of Javascript?
I'm assuming that you're hitting multiple APIs for all of this information? 
Great to see that inspiration flowing through, nevertheless, I hope whatever you create is even better than mine. If you need any advice or help feel free, it's the least I could do.
How much time did it take you from the idea to the beta release. As a junior developper myself I always wonder how is it possible to go through the whole process by my own :p
Got any tips? I really want to learn. Reading and debugging is cake but just spitting out syntax/statements without a guide is irking me (guess it's similar to learning spoken languages. Reading is easier). Just gotta buck it up and get typing?
Single handedly developed it from UI/UX design to frontend and backend coding. So far, 6 months. But even though I did do blood and sweat of designing and coding it myself, I can't say it was entirely created by me, /u/2001kraft had a ton of input and gave a hand on how the it turned out.
Heard a couple React dev friends talk about it once, looks very promising but I wouldn't use it if I had to build a production app. Might play with it sometime though. &amp;#x200B;
None actually, HTMl/CSS/JS was my first contact with software dev, not including prior experience with C in Arduinos, Java for algorithms, and Python when I was like 13 though.
Sygic Travel for Destinations, Foursquare for activities, Mapbox for maps, and soon [Booking.com](https://Booking.com) for integrated hotel booking and Amadeus for flights.
So far, 6 months. It's a gigantic undertaking and yeah.. you need a crapload of free time.
Alright Well done then
It depends on the person, I've met devs who learn by doing tutorials and still follow guides to this day, and then there's folks like me who hate tutorials and just like playing around and breaking stuff. I guess yeah, just don't be afraid to get out of your comfort zone and break stuff. The more you break the more you learn.
Ahh, each of those seem to have an open API. Thanks for the info
For inspiration I go on [dribbble.com](https://dribbble.com). But I understand that it's extremely overwhelming for someone with no design experience. Read through Medium UX blog posts, thats where I got most of my UX skills from when I first started off. [https://uxplanet.org](https://uxplanet.org) they also have a UX for beginners: [https://uxplanet.org/ux-for-beginners/home?gi=a4e06753646d](https://uxplanet.org/ux-for-beginners/home?gi=a4e06753646d)
If I can give one small feedback, I feel like the "white screen" in between transitions is making me lose the focus and for a brief second, I don't understand what the app is happening or where it is bringing me. It feels like I'm being interrupted everytime I do an action. I know you are using that to load the next view, I think I would find a way to simply animate out the old elements and animate in the new elements. &amp;#x200B; Otherwise, good job! There's an app Tripit that organizes your travel but it doesn't look as good as yours.
I know the answer, but I'm not telling your dumbass :) 
Amazing bro!)
Looks great! What APIs are you using for data?
Ok then, I'll just keep Googling. 
I agree that white loading screens really detract from the experience! I'm starting to phase in some transitions soon, earlier I really made it bare bones for the MVP. Funny thing, Tripit is exactly the reason that I came up with this app, I read through their reviews 6 months ago and found that people really wanted something like this and Tripit wasn't it.
This is honestly incredible. Please do let me know if you ever make an Android version. :)
That’s amazing, do you have a tutorial? If not you should consider doing one. There’s a lack of good react native projects to learn from
Sygic Travel for Destinations, Foursquare for activities, Mapbox for maps, and soon [Booking.com](https://booking.com/) for integrated hotel booking and Amadeus for flights.
I think the telling sentence is: &gt; In 2018 we created an internal roadmap to address the biggest challenges for our internal users. imo, I doubt they care too much about external popularity rather than how Flow is doing at Facebook. Sounds like they have massive codebases written in it that aren't going to switch to Typescript any time soon. I agree that they've "lost", and I've had this discussion with co-workers, but I don't think Facebook cares, and that is why they did what they did because their primary audience was still in the loop, they just forgot other people have used it too.
BTW /u/Helios_m do you have a twitter account?
Ended up using a similar solution which worked out great after a bit of tweaking. Thanks!
U have trouble with your website in landing) 
Not at the moment, I'm currently packed up to my neck to get this app out on the market haha. I will consider doing one after I finish it off though. Btw happy cake day.
It looks like your first problem is that `genres` itself is out of scope or simply never initialized. What does entering `genres` return? (Either a reference error or `undefined` depending g on whether you declared the variable, I'd guess) If there's no typo in your code above, I'd say you aren't assigning any value to `genres` . You are missing the assignment operator `=`. 
Was that the only project you worked on for 6 months ?
genres[0].name is correct. How do you declare your array of objects? const genres = [ { id: 1, name: "foo" }, { id: 2, name: "bar" } ];
How do those come about? Are they public access or do you have to contact the developers? (Apologies I’m probably being lazy not just googling for this but I’m genuinely curious).
Yes, other than studying, test prep, and college essays though.
somehow, this works guess what, this works let genreName = ''; for (const genre in genres) { genreName = genres[genre].name; break; }
Public access, sometimes with a trial, sometimes you need to provide payment upfront. [Sygic's](https://www.sygic.com/developers/sygic-travel/sygic-travel-api/places) needs payment upfront, [Foursquare](https://developer.foursquare.com) has a free tier, [Booking.com](https://developers.booking.com/api/index.html) needs a contract signed.
Thanks, interesting!
What were the differences in coding react code and react native code? Have only learnt VueJS and want to get into apps - is learning React worth it? 
I just installed Java on a windows vm for selenium - it’s still a thing
i love your tips OP. please keep them coming. i need to get on your level.
Amazing! Seems very user friendly and fun to use. I am also thinking of doing a vacation trip planner app as a side project.
I had this same idea a while ago! Where can I find this to use/contribute?
I don't mean that to be rude, but that's not a reasonable way to solve this. Can you please link to your code from a jsfiddle or jsbin or some such site, so we can see it exactly as you are using it?
&gt;p5.js [https://www.youtube.com/watch?v=8j0UDiN7my4](https://www.youtube.com/watch?v=8j0UDiN7my4) 473k views. p5.js tutorial
Will you be working on making this available on Android devices? 
This is awesome! i just started diving into Javascript. This has just motivated me even more to keep going! Keep up the good work. Will be Beta testing today. This is something I had idea about. Glad to see it done so well.
&gt;approach your boss and ask for more challenging work [https://www.youtube.com/results?search\_query=asking+your+boss+for+more+challenging+work](https://www.youtube.com/results?search_query=asking+your+boss+for+more+challenging+work)
&gt;learn enough to pass the interview [https://www.youtube.com/watch?v=1mHjMNZZvFo](https://www.youtube.com/watch?v=1mHjMNZZvFo) 8 million views
&gt;job is networking in local meet ups [https://www.youtube.com/watch?v=qfjnJlL6WaU](https://www.youtube.com/watch?v=qfjnJlL6WaU) 6k views. How to Find Creative Networking Events and Meetups in your City
 // Maybe something like... // your imports here: import ... const componentDirectory = { Component1, Component2, Component3 }; document.querySelectorAll('[data-component]').forEach(function(el) { let name = el.data('component'); new componentDirectory[name](&lt;HTMLElement&gt;el); }); 
Yeah. Which makes me wonder if it would be possible to have a general-purpose type system which could be shared by a variety of languages. And if not existing languages, then languages designed for this type system.
Would be nice if I were able to call an uber to the places I wanna visit. But yeah this is neat-o
&gt;start a side project [https://www.youtube.com/watch?v=xBOqwRRj82A](https://www.youtube.com/watch?v=xBOqwRRj82A) 30k views. 29 Side Project Ideas. Start a Side Project Today and Help Your Career
Such an amazing job dude! How have you done the calendar, just with react and styled-components? Looks so clean.
Great work. How are you paying your bills while working on this?
Thanks! No, I'm afraid bundlephobia doesn't provide this
There already is, e.g. https://en.wikipedia.org/wiki/System_F (a formal type system which support generics) which is the basis for some strongly, statically-typed languages that are already used today. The problem is that in its quest to model all of JavaScript using types, TypeScript had to leave behind formalisms like System F and 'make stuff up' as it went along. If we can create two-way converters between the languages we're interested in and something like System F, then we can have that generalized type conversion system.
Congrats man! This is amazing!
Could you please elaborate on that? We would like to fix any issue :)
Damn dude this is awesome. I've been doing HTML/CSS/JS for about a year because I really wanted to get the fundamentals down. Definitely want to learn React next. How'd you learn it?
Wow! This really makes me feel like I've wasted my development life. What a great execution of a great idea. Do you monetization plans? 
My partner plans to begin work on the Android version immediately after we release on the App Store. Glad you’re interested!
Endpoint that runs process.exit()
This is really cool, love what React Native enables.
Awesome, please keep me updated! :D
Thanks for the feedback, that's definitely worthy of a PR! If you can't do it, I will improve the description of Wine tomorrow morning. I have only used Wine on Windows and did not know it worked on any POSIX-compliant OS.
This is awesome! Amazing that you created it after only short experience with js. And the idea is super cool too, I needed something like that :)
OP, this is beautiful. 
Dude this is dope and it's a first project I am super impressed. Is this project available publicly like on GitHub ? 
Looks even more awesome now!
You can use a process manager like pm2 to manage the process without having an open shell, while still having the flexibility to enter into the process shell if you like. There are other benefits but that seems like your main concern. This still involves SSH to the machine, but if you are really against that pm2 also has a UI that you can hook up.
*cries in noob*
It only mentions Linux (Ubuntu, Debian, Mint, etc), Mac, and BSD (Unix) on their [About page](https://www.winehq.org/about) -- Android has likely just not been added to that yet. I'm not sure if it's *any* POSIX-compliant OS, but I doubt it [as there's quite a list on Wikipedia](https://en.m.wikipedia.org/wiki/POSIX) and all implies that would include running via Cygwin (which would be funny, but extremely redundant).
thought it looks rather toopretty for OP not be great at design of UI? still impressive.
Very nice, how was the app review? Did they ask you to use Apple Maps instead?
Learn you some linix. ps -ef|grep node kill &lt;pid&gt; ps -ef|grep node (to make sure it died) Ideally it would be in a script, that restarts it, and notifies you when it does something weird, like restarting, in which case you have to kill the parent pid first. 
I have been learning JS for the same amount of time but you're way ahead of me. What am i doing wrong!?
This is beautiful and an amazing idea/implementation. Well done! 
Yes yes yes
Very impressive
It's not typical to keep an open connection to your production server, but it is common (and simple, with guides!) to set up a secure user you can use to connect to the production server when you need to - which you'll want during setup and future maintenance too. https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04 Once your server is setup, secure and you can connect to it - check out this guide for running Node in a production environment. It helped me understand differences between running locally (npm run start etc) and having a process running on the production server. https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04
Do you have any plans for monetization? If so, what's your strategy? If not directly, will you leverage this project in your career strategy?
It is amazing, it really is. Kudos to your reason for making it. I have read it just now.
What api are you using for search results?
I really liked the animations. Never imagined you could do that level of interactions with RN. What did you used to implement them? Just native anims?
Any advice you have regarding developing the UI? I am learning React but my design skills are shit. For instance, did you use a UI library? Or convert an html5 template to reusable react components? 
Apple does not enforce your maps provider. But if you use theirs you don’t have to pay for the API.
As far as robustness, it is ready for production. Actually Twitter made its new site with it, very impressive though 
You don’t need to be religious about it, but FP has some good ideas that you should use in your code. Pure functions Small and compose-able units Declarative code Avoiding mutations Currying The end result of embracing these ideas is easier to reason about, simpler and more predictable code. That’s never a bad thing.
Please write me your learning path. I am on this also! Why did you use React? Did you interested in Angular? Did you find first job as JS dev?
Hey, I'll check that out thanks. I'm comfortable with the CLI and have built servers before and I know from experience that DO articles are great!
SSH is fine with me. That's how I planned on doing this anyways so pm2 sounds good, thanks!
Man, fuck angular lol
Yeah application hooks just seems like a really bad way of managing this problem. Also using 'kill' seems really inelegant but that's why I'm asking :D
I've just skimmed that article and it seems perfect for me. Thanks again. I've been trying to think about this for a while now and couldn't figure out the best way forward but I think I've now found it.
I've just skimmed that article and it seems perfect for me. Thanks again. I've been trying to think about this for a while now and couldn't figure out the best way forward but I think I've now found it.
Someone else's experience with Unpoly ([posted at ElixirForum](https://elixirforum.com/t/unpoly-a-framework-like-turbolinks/3614/60?u=pillaiindu)): &gt;Some people in the thread commented that Unpoly was slow when they tested the official website on mobile phones. &gt; &gt;I have a very old Huawei Y530-U00, which is not just an old model but also very heavily used and only to open the browser you have to wait from few to several seconds, and it often freezes in the process. &gt; &gt;Whenever I want to test a website for performance, I serve it from my localhost to my wifi network and I check it on this phone and other phones. If it manages to run (slower) on this phone, it can run faster on other phones. Websites based on Vue and React often struggle to respond on this phone. &gt; &gt;I downloaded the complete website of Unpoly ([unpoly.com 8](http://unpoly.com/)) with wget and then served it to this phone through wifi network (to remove the network latency). The performance was amazing! Everything was instant. &gt; &gt;Thank you [@triskweline](https://elixirforum.com/u/triskweline) ! &amp;#x200B;
Thanks for the info!
You'd be surprised by what reasons your app can be refused.
Rules are clear, if you follow them you’ll have no problem
well kill is ok, but usually you have some scripts or a pid file or something, unless it is the only node process on the box. Also you can skip the tmp file if you need shutdown hooks as node appears to understand posix https://stackoverflow.com/questions/13395623/nodejs-shutdown-hook-on-killall 
Amazing. I love the map. 
One observation: you don't need to wrap `fetch` in a promise, it already returns a promise. You can even `await` on it directly if you add `async` to the custom `http` function: const response: IHttpResponse&lt;T&gt; = await fetch(request) const parsedBody = await response.json() return { ...response, parsedBody, } It's a good idea to type your api calls, though.
What about a Meetup code group? I haven't tried one yet but have one tomorrow evening. They are doing a quick JavaScript program but I thought it would help me to find people to work with while I learn.
Name is being typecast as an Int (assumed to be an Integer). String(name) converts it to a string.
Are you planning an android version? If so, where can I sign up for updates? 
Thanks, but how does the line "name = String(name)" not get confused?
No problem :)
One of my concerns with kill is that I'll likely be running more than one process, so yeah, that would be a bit drastic.
Feel free to follow us on ProductHunt (https://https://www.producthunt.com/posts/tour-by-monos-digital (our other social media is here)) or subreddit /r/OfficialTourApp :)
Nothing to add to the type casting explanation above except point something that may help with the 'weirdness' you mention. Yeah, assignments can look weird if you approach them with the idea that they are some kind of equation. On that view, `x = x + 1` just feels off. It's better to think in terms of left side and right side. The left half is receiving a value, and the right side is providing a value, either directly or through an expression that evaluates. 
well typically the bare bones version would be like: nohup my_command &gt; my.log 2&gt;&amp;1 &amp; echo $! &gt; save_pid.txt then you can kill `cat save_pid.txt` and embellish from there. Use a different file for each command, wrap it in a sh file if you get tired of typing it.
We plan on taking commission from flight &amp; hotel booking, as well as some other alternative revenue sources in the future. To the end user the commission doesn’t matter, since it’s an agreement on our end, and doesn’t increase the booking price. Pretty good deal I think :)
`name` is a variable. It's used to refer to values. The assignment operator (`=`) is used to assign the variable (not its value) a new value. Other uses of the variable result in the variable's value being pulled from the variable and used in place of the variable. let name = 10; This creates a variable `name` and has it refer to the value `10`. String(name); This takes the variable, pulls out it's value, `10`, and passes it into the `String()` function which will convert that value into a new value that's a string version of the original, or more specifically, `"10"`. name = String(name); This takes the value of `String(name)` - which we just saw was the string `"10"` - and assigns it to the variable, replacing it's old value (`10`) with this new one. The use of the assignment here (`=`) means its the variable that's being targeted, not its value. So you're not saying `10 = "10"`, it's specifically saying, _change the value this variable refers to, to a new value_, ignoring whatever may have been the value may have been beforehand. The 
This is really great for your first project! May I ask what resources you used to learn JS?
We did not submit to the App Store as of yet. The Beta review goes spotlessly and we are usually approved in 2-3 business days.
This is called type coercion and can lead to odd results and bugs. JS is making its best call about types on the fly. &amp;#x200B; [https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839](https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839)
/u/VanaticalDesign plans on open sourcing some components, but not all since this is a startup. Follow /r/officialtourapp to see them when that happens (probably soon after App Store release).
Yeah, we plan on taking commission from flights and hotel bookings and maybe some other things later. The cool thing about that is it won’t translate to the customer since it’s a business-side agreement. It’s really great :) I’m sure everything is still ahead for your development life by the way. Wish you best of luck and let us know if you need help with anything!
Transit and stuff is coming in an update soon, and we’re considering Uber integration sometime in the near future. Glad you like it!
Yep, shortly after App Store release. 
Interesting. If you don't mind me asking how does one approach these companies and strike these kind of deals? For example, you gave me an idea just now.. I'm building an app that has to do with studying via gamification and SRS and maybe I could contact education providers like authors and get commission on users purchasing a book that goes along with a course on my site.
Amazing, cannot wait to try it out, looks super slick and kudos on doing it with your knowledge and time!
Our website https://tourapp.co/beta has the instructions to do download for iOS devices. There’s a Beta Feedback option on TestFlight and we would be delighted to hear your opinion :)
Both Booking and Amadeus provide that as part of their API contact. I just used their contact for to reach out, basically explaining what our app does and how we plan to use their services. In general, I usually do the same. Simply reaching out to business relations contacts or even to people directly and explaining the project as well as value proposition seems to work well. Best of luck with your project, sounds really interesting!
Thank you! We’ll try our best 
What navigation library did you use? When I tried React Native once, the navigation libraries were too complicated. Especially if I wanted to use it in combination with Redux. Navigation is something you get out of the box when writing native apps...
i don‘t know where your data comes frome and what your backend looks but basically: start a function that checks the state if nothing changed { restart function } else { //(if something changed) do changes and restart function } if you have data that is accessible via http you could use a simple XMLHttpRequest
Right back at you. Thanks for the info and good luck, looks great!
Thanks! This is what I needed, I knew I was not thinking about it correctly.
Thanks!!
Holy shit
I’m not sure exactly what you mean? Do you mean because there are two instances of “name” in the line?
No uppityness intended. Was just stating my opinion. Sorry if it came across that way.
I love the UI! Super clean
That's why you print your resume on special paper where one version is seen by the naked eye and the other is seen through polarized lenses. That way, the geeks with glasses will be able to read the real thing. 
We'll talk about this more seriously in five years. 
Looks great! Have you used any library in particular for the animations or are they custom made with the react native animation API?
Kotlin, which transpiles optionally both to JavaScript *and* Java. 
Hi /u/ChaBULLS, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Jakee798, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/funwithoutdrinking, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/letuswatchtvinpeace, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Yes, that is where I was getting confused.
Hi /u/simplygardner, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/90210Fan, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/-_orion_-, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ZombieHero3, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CosmicBananaPotato, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Chawki_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
They're both strings, so they'll be compared as strings. "9" &lt; "15" is false because, starting with the first characters in each string you compare "9" &lt; "1" and that fails, so false is returned.
Hi /u/flibbitythrowaways, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Of course it will. Open up your console, and try evaluating both `"9"&lt;"15"` and `9&lt;15`. One will result in `true`, and the other in `false`. Can you see why?
Hi /u/Wesabi627, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/areknawo, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/QuietTown, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Beurni, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Zecuel, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/anmolv, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
I was just checking the main file in your repo :-D But yeah ofc it'll be smaller once minifyed/gzipped, I think vue is around \~20 ish The point I wanted to bring out is that you really don't need that much code on initial load/paint I would have splitted your framework to different packages, one for the UI parts, and then keep all the bindings, observers, etcetera as the "core framework" &amp;#x200B; In a perfect world, the UI lib should also be in different modules so I can treeshake the parts I don't need, because trust me, most of us won't use it even if it's there :P Kind of like how vue-bootstrap does it import { Card } from 'bootstrap-vue/es/components' Vue.use(Card) Please see the video about frameworks from the author of Django on YouTube, it's really a great talk [https://www.youtube.com/watch?v=k7n2xnOiWI8](https://www.youtube.com/watch?v=k7n2xnOiWI8) [https://v3.svelte.technology/blog/frameworks-without-the-framework](https://v3.svelte.technology/blog/frameworks-without-the-framework) [https://bootstrap-vue.js.org/docs/components/card](https://bootstrap-vue.js.org/docs/components/card)
HI /U/CAPAJ, PLEASE DO NOT USE ALL CAPS FOR YOUR POST TITLE. THANKS.
Hi /u/ZombieHero3, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/renishb, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Java has more job options, but often are enterprise, and can be stuffy roles. The real career benefit learning Java after JS as a second language is learning a strongly typed language and a strongly enforced paradigm. Python is growing rapidly and is the favored child of startups these days. A very comfortable language. The real career benefit early on learning Python as a second language would be a more rapid personal growth toward more advanced architectures, algorithms, and so forth — because the language gets in your way less. So you get more experience. Java will diversify your experience in terms of types of languages and dev ecosystems. Python will accelerate your experience in terms of the overall app development process. You're probably going to want to learn a strongly-typed language at some point for your own personal growth as a dev. So get that at some point. Perhaps early. You might get to "senior level" faster under Python. Really depends on you. 
Ah I see, that makes sense. I'll keep that in mind in the future. Thank you. 
So cool! I can’t wait to be able to make cool stuff.
Dude this is great, what's your tech stack?
Thank you! DerivePass supports offline (QR code) and online (iCloud) synchronization. Thus remembering revisions is not really necessary. If all data is lost, however, one could indeed use trial &amp; error to recover the password.
We're also on ProductHunt (all our other social media is there)! [https://www.producthunt.com/posts/tour-by-monos-digital](https://www.producthunt.com/posts/tour-by-monos-digital) &amp;#x200B;
Feel free to follow our subreddit r/officialtourapp or our any of our social media accounts which you can find here: [https://www.producthunt.com/posts/tour-by-monos-digital](https://www.producthunt.com/posts/tour-by-monos-digital)
I rarely comment on the types of posts but I have to tell you OP this is great work especially considering the short amount of time you’ve been doing JS! Do you have a background in design?
Only for emojis (I believe).
Beautiful 
I'm learning Chinese, turns out the Chinese IME in Windows is [quite comprehensive](https://i.imgur.com/xBoAnxw.png) with regards to emoji/emoticons/smileys (each of those headings along the top is a category). ㄟ( ▔, ▔ )ㄏ
Congrats, OP, you’re now more employable than 98% of the people I interview on a daily basis. Good luck with your career. 
You can see it here: https://react-native.toys I'm planning to release a next project soon. Please have fun!
Very impressive and nice work.
Some changes [0] were made to homebrew core such that they no longer accept `--options`. This basically broke yarn's `--without-node` install options. The homebrew team has no intentions of reverting change. 0: https://github.com/Homebrew/homebrew-core/issues/31510
Transpiling to Java is a pretty tiny benefit IMO, it’s a particularly negligible benefit if you can already run on the JVM without needing that transpiling.
That is a smooth as butter and simple as syrup. Love it.
I agree. Rarely ever use tutorials. The best way to learn is just star making stuff and accept the fact that the first couple things you build aren't gonna be perfect
Wow amazing work man!
This is the hero we needed, someone who is actually taking both courses! Thank you for your sacrifice!
It's a particularly good benefit if you're gradually trying to move your codebase over to Kotlin. 
I've concluded that Andrew Mead's course is the best out of the three other names being mentioned because of how thorough he is, especially if you don't mind repetition. The thing is though, even if you take another course that is not as thorough, you can always supplement your knowledge gaps by looking up online articles, tutorials, or even downloading eBooks on React. Anyway, here's a comment that analyzes the different instructors. I found some points interesting, but most of his points seem pretty trivial to me: &gt;Picking a course on React can be a tricky decision, especially when there are a lot of courses on just Udemy, let alone elsewhere on the Internet. &gt; &gt;I personally bought Andrew Mead’s “The Complete React Web Developer Course” over Maximilian Schwarzmüller’s “React 16 - The Complete Guide” course for several reasons, which I’ll share below. &gt; &gt;First off, I too was attracted by Wes Bos’ courses, but I felt the prices were too high compared to the courses available on Udemy, which can often be had for just $10. &gt; &gt;It might be a bit too judgmental, but I generally prefer courses that are made by developers who have CS degrees and aren’t “self-taught” or have degrees in a different field. I find that the self-taught developers, or those who have degrees in other fields, either have holes in their knowledge at worst, or at best come at the material from an angle that doesn’t quite work for me. Of the three (Bos, Schwarzmüller, and Mead), only Mead has a CS degree, so that gave me some inclination to get his course instead. &gt; &gt;I’m sort of a stickler on video production quality, and while Schwarzmüller’s is by far the best, Mead’s is also right up there, while Bos’ is the most inferior due to stuttering video frames, and Bos doesn’t pay a whole lot of attention to his live video composition either. &gt; &gt;I also pay attention to how many courses each Udemy instructor has and what other topics they cover in those courses. Mead has just 4 courses that cover a different part of the MEAN stack or JavaScript ecosystem. Schwarzmüller has 18 courses on different subjects, which makes me wonder which subject he knows the best—for example, he has one course each on React, Angular, and Vue, along with courses on React Native, Ionic, TypeScript, and Laravel (?). While some people would probably be impressed and think “wow this guy knows a lot!”, my reaction was “does he really know React that well if he also has courses on Angular and Vue? Why would he need to know all 3 as a developer? And when there’s a course on Laravel, why not a course on PHP?” It’s because of that doubt that I questioned the comprehensiveness of his React course. &gt; &gt;I also pay attention to the instructor responses to *negative* customer reviews, and Schwarzmüller’s responses to the negative reviews of his React course really turned me off to him. Then there’s Wes Bos, who has nothing *but* positive reviews on his website. Of course that’s great for press, but come on, really? Not a single review that’s at least a little bit critical, if not negative? &gt; &gt;I tossed out all consideration for Wes Bos’ course when I realized that his website is just full of marketing tactics, some of them smarmy (like crossing out the price and replacing with a lower one, to imply that you’re getting a discount), and he doesn’t even use React on his own website. Seriously, what’s up with that when he easily could? &gt; &gt;And between Mead and Schwarzmüller, I simply ended up gaining more confidence in Mead’s abilities and presentation on video, since I could see that he wasn’t stretching himself with a ton of courses on other subjects that he probably didn’t know as well as React (like Angular and Vue). &gt; &gt;Nothing against Schwarzmüller of course, I’m sure his React course is very good, but for me it simply ended up making the most sense to buy Mead’s course, because Schwarzmüller and Bos both ended up turning me off. &gt; &gt;And yes I did try Stephen Grider’s course, but I learned absolutely nothing from his approach and concluded that he can’t actually teach. Just because someone is a developer doesn’t mean they can teach, and unfortunately Grider was one of those cases for me. Anyway, please let me know which React course you end up taking! 
That sounds great that he goes through both SQL and non-SQL databases in his course. I've always wondered what the advantages and disadvantages were and which one I should work with.
wtf...? that’s pretty.
Well done. Definitely crossing off the itinerary app idea I had off of my project list.
Nothing convinces me to not read an article more than a title in the following format: Keep calm and ______ Make ______ great again How I learned to stop worrying and love _____
It's good that you mentioned how long you are a developer as it explains why you seem to be a bad one. You don't want functions that do lots of stuff dinamically. 
He's taking credit for work he didn't do and is posting copy/pasted responses to everyone. It was a joke to the copy/pasting, but he's being downvoted because he stole someone's work and is claiming credit.
globalThis??
The bottom line is that the demand for programmers is higher than the supply. You get good at it, you'll find a job at some point. Simple as that. If you want to compete for high level jobs at big tech firms as a software developer and such you will likely need lots of experience, projects, certs, and good technical interview skills if you don't have a CS or IT degree. There are lots of jobs that don't require all of this, and if you program fluently in any language, it makes you instantly more valuable as an applicant for any job that might require a software developer or web designer. I'm not a programming god or anything I just have a bit of insight since I've looked into this, and have met people who've become successful in the industry without 4 year degrees. The path there can be difficult but very attainable if you are passionate about it. Best of luck to you on your journey! Source: studying CS at uni 
Thank you very much, and it makes me happy that the job is in demand and surprising at the same time. I really find programming fun, it’s like a puzzle in a way so I am surprised more people don’t enjoy it with especially how well it pays. 
Your app is so impressive. I'm working on a React Native also.
Honestly that's so cool. I didn't even know React could make mobile apps on the app store. This makes me feel like I'm wasting time in school learning theory when I could be building something useful like this haha
Yeah I definitely learn things way easier by trying to build something real, and overcoming the various obstacles as they present themselves. It really puts all those theoretical concepts into context, and gives me a frame of reference.
Seems like a fairly niche situations, but sure why not.
Wow, well done, this is amazing, I'm a frequent traveler and this app will reach top charts quick. To some Js just clicks, to others not so much. I feel like we are kindred spirits. I hate watching tutorials, I fall asleep if I watch more than an hr, to learn and get comfortable, I open visual studio code and start coding, break stuff, look into logs, why did this break, why is this function taking long to execute, etc. I just got the basic fundamentals down, now I'm coding add-ons in vanilla Js for our industrial automation system. To anyone looking for quick crash courses on react, vueJs, follow traversymedia on YouTube. Brad lives and breathes coding. This is where I learned 90% of Js. Releases videos on the regular with great topics. Great app, I'm an Android guy, I will be following closely. 
Thanks for this, I’m looking for more react native apps to see if it’s worth learning it (I’m a native iOS dev).