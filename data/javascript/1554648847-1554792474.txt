Unemployable? No. That's what code review is for. But those variable names ARE awful and your code will be clearer and easier to reason about if you get in the habit of using clear variable names.
Those fixing bugs should be the ones wanting to understand what the code does. But type prefixes add very little to the understandability of code and instead make it harder to scan the code and distract from the overall purpose. 
This practice would only make sense if the entire development team enforced it. To be clear, it would make some sense to do this if you were working on a large project: one of my pet peeves with js is the loose typing, as it mandates type checking on parameters passed to "public" functions. However I will say it is an certainly an unusual practice, and you should drop it if the rest of the team are not using it. &amp;#x200B;
Because it can only have one of two states: visible or hidden. Even if it had alpha 1% applied in css, it would still be visible. 
But with modern IDEs and editors, as mentioned above, it's not necessary to get the information you need.
Well said. I have written alot of Ruby and become a fan of the convention valid?(). Returns Boolean save!(). Is a command and returns nothing
You should use descriptive variable names, writing lastName instead of strLastName should be enough to know that it's a string. But I don't see why it'd be so bad, it's not like it's such a ingrained habit to change. At least, that's what I think.
isVisible/visible would be a better name, IMO.
You‚Äôre JavaScript IDE tells you the type of the var?
it's called hungarian notation. the [wikipedia article](https://en.wikipedia.org/wiki/Hungarian_notation) has some good explanations on it. you're using systems hungarian notation, which is generally bad, whereas app level hungarian notation is generally fine. basically, you're not providing much extra value to a reader of your code by saying what primitive type the variable is. it's mostly just noise, because a well named variable will clue the reader in to its intended usage, which provides more information and intent than just its type. its usage also likely includes its type.
I see these as class methods (or properties), not as vars. Naked vars I don't name that way, it doesn't really seem to make sense.
I understand the usage as class methods and such, but we were just talking about bare vars, where (to me anyway) it doesn't seem to make sense.
It depends what you role you were interviewing for. If it was a junior role, then it‚Äôs not an ‚Äúunemployable‚Äù issue, but for mid and senior level you would need to be able to discuss why this style is or isn‚Äôt suitable. I personally stay away from this type of naming convention because it becomes brittle very quickly. I‚Äôd recommend reading Clean Code by Robert C. Martin to get some more context about why naming things is so important (as well as a bunch of other very useful advice and guidance).
or just bVisible
I thought I was reading a setup for a joke - it's that absurd in my opinion.
Not in Android ü§∑ https://developer.android.com/reference/android/view/View.html#attr_android:visibility
Switch to Typescript, then no one will complain :) Nothing wrong with your approach - at least it has some kind of convention to it. You've probably heard one man's opinion on it - if you can't ignore it (your boss), there are plenty of other teams hiring. In the end it all gets minified anyway.
I don't think the developers likes to move around with the mouse to see what it is fixing bugs. I think this is a problem to understand because so few develpers have worked with in software with huge code bases.
If you use something like TypeScript, yes.
I can't tell is this is a shit post, but I'll answer. It's best to describe exactly what your methods are doing and what your variables are with context. For example, in a back end, you may have these methods for a user interface with mongodb. - createUser - findUserById - findUserByIdIncludePassword Then for variables, let's say in the create user method you get username, email, and password back off the body. With bcrypt, you can do: ``` const { password, email, username} = request.body; bcrypt.encrypt(password) .then((err, hashedPassword) =&gt; { const cleanUser = { username, email, password: hashedPassword } return new User(cleanUser).save(); }); ```
&gt;the convention worldwide for that is bThing, sThing, iThing, etc. Is this a real thing? This honestly scares me, the only prefix/suffix I can make an effort living with are thing like `Component`, `Interface`,... And even these can be easily avoided with clear naming. 
Yes but if it is using number for the state, like 0 or 1 or why not compare with "display", a similar word that can have a lot of states
yeah visible would be more suitable as all -able adjectives (enabled, serialisable, convertable)
If you were on my team this is definitely something I‚Äôd be asking you to change immediately. I wouldn‚Äôt say it‚Äôs something that should stop you from being employed though. 
Nonsense. Of course you‚Äôre employable. When you join a team, they‚Äôll most likely have their own standards. The most successful devs listen and learn before attempting to change things (unless things are in such utter shambles that immediate change is required). I‚Äôm not a fan of this type of notation, but that has nothing to do with your skills. Best of luck!
Or interface (although we're straying away from JS at this point)
Hi /u/Abhishhh, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah I agree. Generally boolean variables should be named as if they are yes or no questions imo, and in my experience. 
While I largely agree with this post, I personally have found one exception (which is increasingly irrelevant): jQuery. When you name your jQuery variables $div and $table it's extremely helpful, especially since you're also often dealing with data structures that have similar or the same name as HTML IDs (eg. you often have foo data to add to a $foo table, and the dollar sign helps you keep clear which is which). Again, not so important now that jQuery is fading, but I feel like it's worth mentioning as this one exception (slightly) altered my whole opinion on Hungarian-style variable naming.
Code should be an abstraction of the business domain it applies to. Check out Domain Driven Design.
In JavaScript, a type-specific prefix is likely to hinder you from finding the bug.
This! Have whatever preferences you want on your own projects, but if you can't work with a team (not just on variable naming, but in general) you *are* (largely) unemployable.
Why?
[Hungarian Notation](https://en.wikipedia.org/wiki/Hungarian_notation) is certainly a thing and has been around for ages. `i` for integers, `n` for numbers (usually unsigned), `b` for booleans, `f` for floats, `s` for strings (`sz` for null-terminated strings) etc. You can see it all over the place even today. It's called systems hungarian and is frowned upon today for good reason, but for many years it was the standard way to name variables in many languages. It comes from a time when editors were pretty basic (and text mode -- no GUIs really) and languages were fairly strongly typed. Putting a type identifier in the variable name meant you didn't have to scroll up a bunch of lines (with your keyboard!) or load another file to see what type it was if you wanted to use it. When you think of it in combination with commonly used C functions like `printf` you can understand how, for a while, it was useful.
In statically typed languages there is already a clear mechanism in place to document and track the types. It's dynamically typed languages that force programmers to invent their own conventions to keep track of types. You still have to know the types somehow. You can't put a boolean variable into a function expecting an object and end up with a working program. 
Not unemployable, but being willing to change coding conventions to match whatever shop you're working in is simply professional. Coming from a C background I used to use Hungarian a great deal in most languages. I've drifted away from it in JavaScript in recent years because of the reasons given here, however there is a specific circumstance in which I do still favour it. Because relational databases are strongly typed I still use simplified Hungarian for column names - intThisColumn, bitAnotherColumn, txtThirdColumn etc I find this to produce more readable and maintainable SQL (my SQL Objects are similarly named, tblTable, idxIndex etc - which helps significantly with meta-analysis of databases). This is an approach that's quite common and I've used for a long time, and I think, from experience, gives rise to more robust code. As a consequence of that I will bleed through Hungarian into JavaScript variable names (or whatever other language I'm using) which directly map onto column names. For instance, if I'm assembling an object for Ajax update I will use the same Hungarian notation for the field names. Whilst I wouldn't have a religious war over this, I find this is less error-prone because the required database type is upfront when reading the code. As I say, not something I would go to task over, and I can see why many people would object because allowing some Hungarian isn't clean, but in practice I find it a useful adjunct to code comprehension - which to my mind is the most important thing.
Can confirm, would not hire. Kidding. I would, but you would have to ditch that naming convention and go with what the team uses. If you really want strict typing, use TypeScript.
Yes Visual studio code uses typescript under the hood and infers types automatically
This is not a common JS convention and it's not even a popular one outside of JS. That convention is (Or was, I'm not up to date on their conventions) used primarily in C/C++ because there is a LOT of nuance to types in C++. For example, strings. You don't just have "a string" in C++. There are four or five popular conventions for what a string might be. You may or may not be using a pointer to deal with those. So you need to know if it's `psz` or `pbstr` or `sz` or `bstr` because that affects which methods you can pass the string to. That doesn't exist with so much nuance in JS or most modern languages. Usually the name should be enough to imply the type. If I see `firstName` I assume it's a string. I expect `isVisible` to be a boolean. I expect `apples` to be an array, possibly with elements of type `Apple`. I expect `appleCount` to be an integer. I expect `salesTaxRate` to be a double. See how this works? If you name things properly, then in their domain context they shouldn't need additional information about them. Imagine if I went whole hog and named them to be explicitly clear. Instead of `isVisible`, I should probably name it `aVariableThatRepresentsVisibilityViaABooleanThatIsStoredAsAnIntegerWhereZeroRepresentsFalseAndOtherValuesRepresentOne`. Is that helpful? Which part of that variable name is important? It turns out you care more about the "is visible" part than the "it's a boolean, and that means..." part. You learned your language. You know what a boolean is. It doesn't need to be regurgitated every time you type the variable. This matters because programming is very, very hard. Every little thing that adds to your cognitive load makes it harder. Hungarian Notation adds a tiny bit of cognitive load to your JS, which means it's harder to read your JS, which means it's harder to understand your JS. Other people who have to maintain your JS also have to decide if they reformat your JS first (more effort), copy your convention (which breaks their flow and concentration), or mix conventions (more cognitive load). All of those things add up to "this person's JS code is harder to read and less maintainable than the other candidates'." So yes, you are at a disadvantage. Find popular JS codebases on GitHub. Make your JS look like theirs. The rule in C# has always been, "Follow the Microsoft conventions". I don't know if JS has any such conventions, but if you follow some big project's conventions you probably will look better.
Would you continue to do this if the place you worked asked you to stop and to use some other convention? Are you a good programmer and get along with other people? Are you able to focus and complete projects on time? &amp;#x200B;
That is just a simple convention, it's not pretty, but everyone can understand. Whichever company told you that you're _unemployable_ because of that, you're definitely better not working in that place. Although I would rather make it clear with the function name, e.g: - `getMovieList`: should return a list of movies, so it's an array with the movie object definition - `storeLabel`: it probably takes an argument which is an object `label`, I would expect nothing back - `isAuthenticated`: function won't take any argument and return boolean - `canReserveSeat`: this would expect a `seat` object, probably also a session/date time, and expect a boolean back (with this mindset, sometimes names get bigger/verbose, don't be afraid of that, make them clearer, minify'ers will take care of making them smaller) IMO if we can make the names clear like these, we don't need a _convention_ that has to be learned and always applied. Other ways you can check this is by diving into open source projects (e.g. [react](https://github.com/facebook/react/tree/master/packages/react/src))
&gt; Whether or not that makes you unemployable? That's a joke. This. OP dodged a bullet with whatever asshole was interviewing them (or more likely got criticized by some rando and perhaps took it too personally). If you feel strongly enough about variable naming conventions that you'd turn down a qualified candidate, you'd sure as hell better have a company coding style guide that you enforce via code review. And, in that case it's "You're hired but please read and follow our coding style guide, b/c your naming conventions don't otherwise adhere to it", easy-peasy.
Wouldn't that be IThing? 
I'd disagree, In *strongly typed* languages some form of simplified Hungarian can be extremely useful for readability/comprehension when maintaining a codebase - particularly one you didn't write yourself. Sure a modern IDE will tell you, but it's still less neurons needed if it's upfront in the name. Where I would agree is the extreme form of pure Hungarian where the prefix can become so complex you have to spend time working it out. To my mind a simple int or str will suffice in most cases.
Disagree. Gradations exist.
There are at least two better solutions to the issue you trying to solve with such naming convention, jsdoc and flow. Type information just not belongs to variable name, I'd threat this convention as a bad style, but the final decision would largely depend on the whole picture and your ability to comply to company code style. This one detail itself does not make you unemployable, I think that person was just toxic.
That is bullshit. I wouldn‚Äôt want to work for anybody that would hinge employment on that. 
Depends on the context, if it's toggling some element between `display:none` and `display:whatever` then it's binary and would make more sense being named `isVisible`, if it's setting opacity then that'd be a gradient and would make more sense as `visibility` or even just `opacity`
I personally don't care so much about avoiding type errors per se but I have 3 reasons I like it 1. Vs code intelligence is super awesome. This is the big one 2. Strict null checks...also great 3. You've got to use Babel and compile anyway if you don't use typescript. Might as well use it and just turn off some rules if it's too strict.
This right here!!
Yep, agree with all that.
This right here... Anyone dismissing another person solely on naming convention is an idiot... If you refused to adopt a company's standard that's another thing
And there‚Äôs a big difference between Hungarian and ‚ÄúApps-Hungarian‚Äù ... I‚Äôm a fanatic of apps-Hungarian when related to time variables. let delay_s = 12; let duration_ms = getAfter() - getBefore(); If you‚Äôre using intDelay and intDuration as variable names it shows you can‚Äôt remember what variables are numbers and what are strings. Using a ‚Äúunits‚Äù or ‚Äútype‚Äù suffix that is relevant to the specific domain (apps-Hungarian) shows resilience to logic errors, not type errors, eg: // clearly a logic error due to mismatching units delay_s += duration_ms; ‚ÄîRobert
I think its not very good, but why would it make you unemployable? Its not like its a desease that you cant do anything about. You can just stop doing it, right? About the naming itself, it obscures readability. It is a lot of noise that you should not need
So don‚Äôt?
I think it's pretty clear and succinct. The only part of it that isn't clear is the implicit truthiness evaluation, but that's pretty quick to pick up on. You could make it slightly clearer with `arrayName.every(elem=&gt; !!elem)`
Truthy??
Yeah I think that's one of the most important roles of the dev lead/architect- to developer and maintain standards for code. Like if I saw code like this in a PR at work I'd first of all ask myself what went wrong with initial training, which should have covered our standards. Then I'd add a comment asking the author to refactor based on our standards. Also our linter may have already caught the issue and asked them to change it anyway.
Not employable seems harsh. But does raise a red flag. This pattern is not very common so it makes me wonder how experienced you are working with JS codebases where you are unlikely to see this pattern.
&gt; as a arrThing could be reduced inplace and is then no longer an array but a string or number or an object. This is the most egregious issue with Hungarian notation in JS in my opinion, and not just for arrays. Because js variables are untyped, "name rot" could end up proliferating the code, where names are used for particular variables and then unknowingly reassigned with a different type later. This could lead to subtle type bugs which are difficult to track down. Thus it's better not to assign any additional meaning to code where it's not necessary. Name for intention, not type.
I use this regularly. But it also sets off my spidey-sense for leaving a comment so I'll do something like this above. // Check to see if all elements in the array exist
It can lead to false assumptions about a variablea type when the type in question isn't actually enforced
Because JavaScript is dynamically typed. If you prefix a variable with arrSomething but for some reason it actually had a string assigned to it then the reader assumes it should be an array and you‚Äôll end up with a bug. In a typed language, you would declare the type and the compiler would throw an error if the wrong type was assigned to it. 
visibility can be confusing because in CSS it can have one of the following values: "visible", "hidden", "collapse".
Yeah, a value that will evaluate to true. js has a lot of implicit coercion so all but these values) will evaluate to true: false null undefined 0 0n NaN '' "" `` document.all However these values are not strictly false so therefore the phrasing of 'truthy' and 'falsy'
for (3) Eslint does a wonderful job without imposing static type overhead. And node has a very up to date js engine, so you certainly dont need babel. 
Using the implicit return of arrow functions is perfectly acceptable, and generally seen as being more readable- as it's standard use of the language's features and results in less to read. 
You mean, ‚Äútruth-like‚Äù?
The return value isn't implicit. You're literally returning the value the arrow is pointing.
https://developer.mozilla.org/en-US/docs/Glossary/Truthy
generally it's considered poor practice to encode a variable type into its name, especially in a dynamic language like JavaScript where variables can easily have their type reassigned. It doesn't provide any actual type safety, and can cause hidden bugs and ambiguity. A piece of your code could mutate a variable's type (accidentally) and it may be really difficult to track down because you've grown to "trust" the encoded typing in the variable name. I actually think this is one of the stronger arguments for using something like TypeScript, you have type safety without having to worry about how to properly represent your types in javascript via hacks like hungarian notation.
From my limited testing with the dompurify npm package it seems like you should be able to use it for client side stuff without issues. Maybe try using Webpack instead of Parcel and see if you have a similar result?
This boils down to a question of cultural fit, like if you had a super wierd accent which made it hard for co-workers to understand what you are saying, relative to other candidates who speak eloquently in the same dialect. If a developer can't learn &amp; conform stylistically to work with team and industry/domain practices, their code is going to be more of a distraction to read/maintain, code reviews will have much more friction, and there can be doubts of technical competence(e.g. can this person learn frameworks and patterns, or do they have a "not invented here" bias. A developer is entitled to demonstrate why and how they feel their approach is better with projects where they are setting standards, but in team and interview settings with prexisting norms, having wierd proprietary style can be disruptive and a source of bugs/headaches(e.g. as styles meet in middle ground subsystems). What makes discussions about conventions so heated is that they often have insufficient objective data to permanently argue for one solution vs another. We can all get absurdly passionate about the style we are most familiat with, but at the end of the day, it doesn't matter so much which convention is used, as that a team works with shared standards. 
Seriously, it‚Äôs crazy how people can be strongly opinionated for little things like that... Start doing real interview instead of checking things that do not matter at all. The coding style is enforced by the project you are working on, there is absolutely no logic in refusing someone for its personal coding style during a test. It would be great to start to have interviews made by people that really know about software engineering. Questions regarding optimizations, JavaScript engines, or other things that really matter.
Ngrx sucks, none of our developers enjoy it 
I cited Datatables as an example of a JavaScript project that originally used Hungarian Notation, but refactored in favor of "standard" JavaScript naming conventions. I think that change was done in version 1.10.
You wouldn‚Äôt want to work for someone that won‚Äôt hire you based on your naming conventions. That‚Äôs an excuse. Most employers are willing to show new devs what naming convention they like. Personally, each job I‚Äôve had used a different naming convention. I would assume the person that told you this is extremely inexperienced as to how it works in the real world.
The term truthy is commonly used in this context.
And if at all possible, phrased as a positive thing. Nobody likes unwinding isFalse=false.
*TL;DR:* No, what you put there looks fine, variable names are not a set in stone _THIS IS THE RIGHT WAY_ thing, there are just best practices and bad practices. If you were turned down for this reason, i would attempt to look deeper into the code that i wrote to try and see something they didn't want to tell me because that truly doesn't make sense. Personally, i don't see any problem with those variable names (assuming you're not literally naming them 'X*Thing*'... I use things like 'dataUser' to remind myself what i should be expecting when importing / exporting functions that are expecting a specific type of argument. But i do not see the sematic difference between 'dataObj' and 'objUser', for example. Whoever told you that has obviously had someone there who makes spelling mistakes on variable definitions and as a result now has a stick up their arse about variable names. It sounds more like there was an underlying issue with something you were writing / the interviewer really didn't have an effing clue about programming. I'm not just saying this, when i review code, i make sure that naming conventions are consistent, and that they make sense. Consider the following code: // Good, using consistent camel casing and the parameter names are obvious enough that i know what to expect from the code. // Variable names are obvious enough that i can work out what the code does (or should do...) Without reading into the functions. function Order(topping, crust) { ... } function makeOrder(orderObj) { ... } const order = new Order('cheese', 'thin') makeOrder(order) // Bad, using different casings, parameters are too generic... i could go on... function order(a, b) { ... } function make_order(obj) { ... } const thinPizzaWithCheese = order('cheese', 'thin') make_order(thinPizzaWithCheese) Usually, i would expect JS to have camel casing, and C# to have snake casing, HOWEVER, consistency is more important, if a programmer has used a mix of both, all hell shall break loose when another programmer comes to pick up his/her code to extend upon etc. So as long as they are descriptive enough, i would usually only leave a side note if the variable names themselves are consistent, but do not conform to the standard the rest of the team uses. BUT I WOULD NEVER TELL A PROGRAMMER THEY ARE UN-EMPLOYABLE BECAUSE THEY DO NOT CONFORM TO MY / A TEAM'S CODING STANDARD, ESPECIALLY FOR SOMETHING SO SEMANTIC. (P.s I would however expect the programmer to BE ABLE to conform to a particular standard without a fuss.)
You'd annoy the shit out of me and most of my team, but I wouldn't not hire you. I'd just ask that you adhere to the naming conventions that the team had agreed to; similar to adhering to tabs vs spaces or lint rules.
Visibility implies a more than a boolean though. Hidden, Restricted, Everyone is what I would expect in a variable called visibility. The boolean version your talking about should be called isVisible
Yup for times I use timeInMilliSec timeInSec or timeMS timeS. Geez I stay away from underscores almost every where. 
I would argue it is as this function would not return a value despite the arrow syntax: `function example() =&gt;{` `var x = 10;` `x++;` `}`
Managers like to have teams that work together. Engineers like code that is consistent and follows patterns. Bugs like weird, out-of-the-ordinary code (and yes, style contributes to this because humans write code). So the hiring team made a really strong statement there. Probably too far. *unless* you made it clear that you are uninterested in conforming to industry/team practices. You can't have your own special way of laying down code in a team setting.
i find it funny that it's not used in their own services , they say it's used in adwords and cloud platform but ng extensions do not detect , idk ... enlighten me on the whole consulting side , what did u see that lead u to this conclusion , i'm open minded about this , more info is welcome ...
Or, possibly even more clear, `arrayName.every(elem=&gt; Boolean(elem))`. 
Any variable named isNegativeWord or isNotSomething on it is absolutely confusing.
It‚Äôs easy to have proper names.. just spend those extra 15 minutes to do it!! 
Turn on the lint rule for "no magic numbers" and force all of your engineers to assign a named variable (that you can code review) to a number first. setTimeout(animateFoo, 500) vs setTimeout(animateFoo, ANIMATION_DURATION_MS) Helps an incalculable amount reading code after-the-fact. The occasional annoyances when you have to disable the lint rule to do something like iterate a for loop by 2 instead of 1 are well worth it. 
I remember my professor at the uni sent out the notation as a email to us with the instruction print it then burn it. That‚Äôs how much you should care about it. I know I have gotten the feedback that I didn‚Äôt use Hungarian notations once In my 17y of working. I never saw the point in using it. On the other hand I have seen bad naming of variables to. A class named Angel a method name angel and a variable named angels (It had nothing to do with angles). 
Yup constants too but that where I allow underscores.
&gt;Geez I stay away from underscores almost every where. Once you go snake\_case, you never go back.
If only JS was strongly typed. 
Idk what you mean exactly, (I didn't downvote btw)
ESLint also allows you to define custom naming conventions, to a degree. it probably won‚Äôt be able to know that the second parameter to `setTimeout` should be a variable ending in `_MS` without a completely custom rule, though. 
Luckily lint rules are trivial as shit to write. If you wanted every call to setTimeout to have a second parameter that ended in `_MS` it would probably only take like 45 minutes to get that done.
I can't remember exactly where I learned that technique from, maybe VB6 or year 1 Java. In no way do I use that anymore, but it could be that OP learned it from a class or a person who did that in a class and carried it into their career.
That wouldn't bother me at all so long as you agree to faithfully follow our conventions when we hire you.
It's not that big a deal. Stop taking advice from whoever said this. What you're doing is called "hungarian notation." It has fallen out of favor because software maintenance tends to change types, and because languages offer better support for doing this for you these days But also, it is actually useful to have this information, and whereas a lot of Javascript people will tell you that this isn't useful information in Javascript, the rise of Typescript seems to show them to be incorrect This is an aesthetic issue You're in the minority but not a super small one Anyone who thought things like this defined employability, rather than quality of code, testing, and on time delivery has (in my opinion) poor judgment
Not employ someone for their naming convention is stupid. I would definitely ask about it during the face to face interview though since it may means that you don't read a lot of Js code (as most follow an explicit names convention). 
To make this clearer to the reader, I would edit to `arrayName.every(elem =&gt; !!elem);` !! converts to a boolean
I know that this is a very very sensitive topic for programmers and how and what programmers develop differs much. You will allways be downvoted if you do say that prefix based code is good. The problem is that those that downvote will never be able to do advanced software. Not that many do thay type of software. Most are using framworks and and they puzzle more than coding their own logic. Doing software you should try to create as simple rules as possible that works everywhere.
I think what you have is plenty clear. If someone doesn't understand arrow function behavior (which is what would confuse them here), it only takes a couple minutes to learn. And they should probably learn it anyway. :) Learning opportunity.
Ameeeennn
Or simply `arrayName.every(Boolean)`
I believe that's the point. If the item returned is falsy in any iteration, `.every()` returns false. It is an easy way to check if an array has any falsy values. Returning the value immediately is correct in this case, it just looks odd sometimes.
I took over a project at work where a lot of the variables we're like this and deciphering convoluted conditionals was so painful. It made me understand why nobody was on the same page as that developer... ever. Apparently his brain worked opposite from everyone else.
This function can't be evaluated. You can't have a named arrow function. And arrow functions with body don't have a return value unless you put a `return result`.
Have a look [https://github.com/GrosSacASac/JavaScript-Set-Up/blob/master/js/network/socketiyo/scaling.md](https://github.com/GrosSacASac/JavaScript-Set-Up/blob/master/js/network/socketiyo/scaling.md)
Though should be other variables or props, though. isVisible is a single boolean value controlling whether a thing is visible or not. opacity (number) can control opacity. isRestricted (another bool) can indicate if there are restrictions applied to this thing. Then you would go check something in the restrictions (an object, probably) to see how it applies to this thing. Hopefully via some reusable helper utility that processes the user profile with the restrictions on the thing.
I agree with this comment. It's about the guidelines of your team. I'm a JavaScript developer but my senior developer who makes the guidelines is a c# .net developer and wants to continue to do things his way whether they make sense in JavaScript or not. I explained to him best practices and standards in JavaScript and he said he doesn't really care he wants to do things the way that it makes sense to him. In the end, most teams I work on what to do things the way it makes most sense to them. When hiring, I judge a candidate on how well they can code and if they are willing to be a productive and respectful team member. Some developers have learned poor practices in their careers but they are very good at their job overall. So each team will have to make a call on what bothers them or not about a potential candidate. 
You can also redirect based upon screen size.
Disagree strongly. In a lot of more complex programs, knowing exact types of every single variable at all times is largely unimportant. Having types strewn about your variable names only pollutes the actual useful information with data you can retrieve from almost any IDE with a single mouse movement or keyboard shortcut. Also, in codebases that use Hungarian notation, I often find myself checking the actual types _anyway_ because the compiler will _never_ be wrong about a type, while a developer may have mistyped a type name, or an object‚Äôs type may have changed without a variable name refactor, etc. There is 0 point in documenting types ‚Äúmanually‚Äù (outside of compiler support) in this age of modern IDEs. Maybe it was useful in the days of pure plain text editors. But not anymore.
only place i can think of in any language where i'd use hungarian is when i have two variables that intentionally hold the same thing in different types. Languages where people traditionally use Hungarian are typically strongly typed, and therefore, why the heck do you need to put the type in the name? 
I made a Mortal Kombat style selection screen for the game Total War Warhammer 2. [https://imrz.github.io/tww-lords/](https://imrz.github.io/tww-lords/) 
When I am doing bug fixing, I don't even read code as in reading what it does. There is no time for that and if you are fixing bugs in a parser, like xml parser or a parser for some language or code that is threaded and has race conditions. You don't need to understand what the code does, you need to understand the error. &amp;#x200B; Doing javascript, there most problems are in that things are eventbased and sometimes you don't know in what order data has been set. Many javascript programmers are using framworks for events and how things are updated so they do not have to think about that. Then it isn't as important to code for fixing bugs, for them it is better to code for readability on what the code does.
It looks like you've reinvented AWS auto scaling groups. I wasn't referring to that problem. The real issue stems from the fsct that a specific connection comes from a specific server, therefore, if that server goes down connection is disrupted. 
But what about the angels? 
The return is implicit because you don't explicitly state `return` https://www.quora.com/What-is-the-difference-between-implicit-and-explicit-return-in-computer-science &gt; Functionally they do the same thing, however an implicit return will return the value of the last expression in a block or statement and an explicit return will return the value in front of a return, e.g.: ‚Äúreturn ‚ÄúBacon‚Äù‚Äù will return ‚ÄúBacon‚Äù explicitly.
Who ever told you that you're unemployable is kind of a prick. Don't let that kind of negativity get you down. On the other hand your naming convention is pretty awful. Don't prefix the type on to variable names in a weakly typed language. What if someone came along and assigned a different type to the variable later on? Then your convention is broken and there's a problem in the code. Naming things is genuinely difficult, so don't let it get you down. You do need to think deeply about what something actually is. Here are some general guidelines. Booleans usually represent mutually exclusive values, it must one or the other but not both. Not in-between. It is zero-sum. I.e. isThing, hasProperty, containsValue String variables are really just metadata for another string. I.e. urlToSomewhere, address, name, title, etc. Numbers usually represent some value. I.e. count, height, width, amount, etc. Collections should be the plural form of the word. I.e. people, places, Avoid stuff like thingList or thingCollection 
If your variables live long enough to merit labeling them as such, you're methods are probably too long or complex. A goal you should try to achieve when writing a method is keeping your first declaration and your return on the same screen. If I see a variable being used in a method and I can't tell what type it is, maybe the method is doing too much or could be simplified.
Like really bad. Where did you get that from?
This is my next step. I live in an area where there are plenty of meet ups so it's just about rearranging my schedule to be able to get there.
Thanks for the info! I'm currently a beginner so looking for entry level, which seems to be very competitive!
I've been considering Akita, but it's concerning that there's next to no information around about it besides their own blog posts.
Oh my spell correction fixed that for me ;) Angels in all places ;)
If your variables has a life of 100,000 lines, I fear for your sanity as a developer. Variables should not be living the lifetime of your code. You should easily see the declaration of your variable in the scope it's being used within one or at most two screens (and I even try to avoid that.)
Having a huge codebase is one thing. Having a huge codebase where you need to track the variable type longer than a single method is another...
Thank you for your response! I did a boot camp and have received no help whatsoever when it comes to actually finding a job so I have considered writing a bad review. At the same time, I feel confident that I have a solid understanding of JavaScript and related libraries thanks to them so I'm hesitant. I'm hopeful that once I do get my foot in the door, I'll be able to learn more and be productive. It just gets discouraging applying to job after job with no response!
I love the commitment to making types clear. That would be a plus. Willingness to change to meet our standards would be a litmus test. I‚Äôd also bring up that there are now precompilers that allow relative type safety and introspection and recommend using them instead. 
&gt; We need to rediscover the lost art of progressive enhancement. Why? &gt; should only be used when they add more value than the costs they impose What value justifies the extra cost of progressive enhancement?
As long as you don't refuse to follow any other convention you are not unemployable. If asked about it you should probably mention that this is something you are used to and are ready to follow convention set by your team. You should probably still stop to use it on interviews, as the interviewer will likely see you as someone who doesn't have too much experience with JS ecosystem - because it is a rare convention in JS.
This is similar to how I would do it too. `const isAllTrue = array.reduce((acc, curr) =&gt; acc &amp;&amp; curr)`
Think of Phil Karlton‚Äôs famous quote: ‚ÄúThere are only two hard things in Computer Science: cache invalidation and naming things.‚Äù Naming things is like the basic for all good quality SWEs.
Programming is part science and part art. Being told to follow naming convention conventions is normal. Being you are ‚Äúunemployable‚Äù for using camel case is obnoxious nerd bullying. Ignore that company and move on to the next.
Here! Try to understand that code. It is very well written but very hard do follow [ChaiScript](https://github.com/ChaiScript/ChaiScript) 
Hah in the snow I was dreaming of warm beaches. Now in the desert I‚Äôm dreaming of snow. My buddy is going for Argentina, I‚Äôm just going about halfway down Mexico. He‚Äôs thinking another 10 months making the trek around a year total. To stay connected it‚Äôs just hoping the occasional town has WiFi - the tough part is uploading the photos since the internet is snail speed. Thanks for checking out the site!! :)
...it's a loosely typed language... some form of notation is (a valuable) part of the documentation!? Keeping all that "in your head" is a recipe for disaster.
I dig it - are you building it for a client or just a side project? How‚Äôd you start thinking about water simulations and how the app might be used?
&gt; as a arrThing could be reduced inplace In that case, the naming convention would be the lesser evil.
Side note: you should checkout TypeScript.
If these are really prominent figures in the Web Components space I would expect this to be easily found, but okay. If you do happen to come across something I would be interested to read it, thanks! 
it's not about the camel case, it's about the prefixing. but still... 
Also, block, inline, inline-block... But `isVisible` should be passed to something that understands the meaning of that in context. This is one case where I like lightweight objects. The method hiding or showing elements should take the visible state flag and deal with it like it knows it should. If you have a drawer for instance, wrap it's methods up so you can set it's visibility and let it determine if that's a block, inline or grid placement. This makes code that deals with multiple elements easier to write. If I can loop over all the children and say `child.hide()` then I don't care how it does that and that method can handle more things. On the contrary, if I'm `for` looping over a collection and setting display styles that code becomes less re-useable because now it's tied to a specific use case.
Thank you, you are kind. üôÇ
I personally use a heavily bastardized Hungarian in my JS, so \`arrUsers\` would be \`a\_oUsers\`, \`bConfirmed\` and \`sUsername\`, but I also do not reuse variables outside of their named types (e.g. I never have do anything like this \`a\_sUsernames = a\_sUsernames.join(', ')\`). &amp;#x200B; I find it keeps me honest to what I'm trying to achieve with the variable as well as documents what the hell I'm trying to do.
Given two job candidates of equal talent, I would hire the one who \*doesn't\* name variables that way. The same for people who write if statements without curly braces (I tend to pass on them).
lol, this must be a joke. what's the purpose of these prefixes ? Shouldn't it be common sense that the name of a variable is suppose to described the variable ? "Thing" is not describing anything. IMO
I tend to use them in SQL land.
While this is true, having to float over every god damned variable to see what underlying type it is is sub-optimal. Of course, I'm my own hypocrite as classnames shouldn't be noted this way, but in the name itself. But as discussed above... what type is \`visibility\`? It could be a boolean or an integer or even a float (or a string to be placed directly into CSS if you're a monster).
I am forced to use those SQL land. Well I am forced in SQL land.
i just recently attended a company paid "clean code" seminar where this was one of the bad examples. unemployable is bullshit, but you 100% have to change that horrible habit or you'll be job hopping. the variable name should describe what the variable does, not what type it is. there's a trillion of good articles on good naming conventions so i wont elaborate on that. just google it and change what you're doing asap
\`\`\` IsNotGreen !== true ? isNotYellow = true : isNotYellow = !IsNotGreen \`\`\`
Did you refuse to adapt to the conventions at the firm? If not, its probably that person that is unable to employ people, and that's the problem not you. Go work for someone who doesn't project their shit so much. &amp;#x200B;
I know this article but by now it‚Äôs quite frankly outdated. 
I very much agree with this. You should be able to tell a type of variable even without a prefix if it is named right. To expand: \- "isEnabled" - this is clearly a boolean variable. "enabled" works too, but is less clear. Many teams have "is" and "can" prefixes mandatory for booleans. \- "car" - This is some object representing a car, what it is should be clear to anyone familiar with the system. For example, if there is a database layer where objects representing DB rows are being passed around, I would call such a variable "carRow". \- "carCount" - Clearly an integer. \- "carPrice" - This is obviously a number. Systems usually have a standard on how financial values are handled, so this is that type (eg. our .Net based system always use a decimal with specific precision). \- "completeTransaction" - verbs should be functions of some kind. Alternative is "onCompleteTransaction". \- "users" - Plurals are collections. Type prefixes are not needed at all. I am also in favor of allowing one letter names for parameters of very simple lambdas. This would usually be "p", "x" or a first letter of the "proper" name. For example: let adminNames = users.filter(u =&gt; u.isAdmin).map(u =&gt; u.name) Spelling the full variable name actually reduces readability in this case.
VS Code does, but you might need to use TypeScript or Flow to get the information in non-obvious cases.
&gt; a arrThing could be reduced inplace and is then no longer an array but a string or number or an object. Actually doing this in a code sample would be a more valid reason to reject a candidate than calling their variable `arrThing`.
Whoever said that is an idiot.
Or when computing the string representation of a complex object, let value= {.... &lt;bunch of properties&gt; } let value_str = "initial string" ... add data to string Although these days I'm more likely to use a function for that specifically, which would be more like this function fooObjectToString(value) { let result = ""; // assemble your result string return result; } 
I wouldn't hire you if you are not willing to adopt my business's conventions. &amp;#x200B; Your personal style does not matter, but your ability to adapt does.
You completely misunderstood the OP
You completely missed the point of his post, it was about using hungarian notation which your example doesn't do at all.
 I name all my things as literally and in as plain English as possible then I dont need as many comments explaining what variables are what but also I'm Still in school. 
Deciding that people can only use domain specific reminders of what type of variable you have seems fairly arbitrary and completely unhelpful to me. Why not punish people for trying to remember a variable is in ms as well?
Ah my bad, would you mind explaining to me where you got that from what the author wrote? I don't see anything to do with Hungarian notation? Is what I put completely useless then? In which case I shall delete it. 
&gt;booleans.... "bolThing"strings.... "strThing" &gt; &gt;arrays.... "arrThing" &gt; &gt;numbers.. "numThing" &gt; &gt;objects... "objThing" Just saying, this is the entire content of his post. I feel like to match what the OP was suggesting would be in your example naming it \`function funcMakeOrder\`
Well you're a cunt
No, I never said that any form of Hungarian notation is acceptable.
&gt; What would make you not employable is refusal / resistance to following the naming convention set by the company. This. This is the only thing that matters.
codepen
\&gt; particular type and then unknowingly reassigned with a different type later &amp;#x200B; This is why you should always default to \`const\`, if possible.
Whoever said that is not employable. What a rude thing to say 
Woah, this is really awesome. I wish they had a downloadable client. 
Hey everyone, I'm the guy who dismissed him as unemployable because of naming conventions. I want to apologize. It was an an asshole way of wording what should have been a more constructive comment. I do think it's interesting to read all of your comments about this issue though.
What are your exact inputs and desired outputs? That explanation was a little vague to me. Console.log and Document.write and alert are the JavaScript 101 common feedback mechanisms. If you want web browser output in the browser then Document.Write, web browser output under the hood (in developer mode) then Console.log and output in popups then alert.
+1 to you sir. It's pretty much muscle memory at this point when you see `$div` it's almost certaintly a jQuery object. I'm kinda bummed to lose that clarity in a jQuery-less world. 
I use Visual Code, and install an extension for a console, that's what you want i guess
Maybe your js code from sololearn do nothing on it own so you get nothing when opening html in your browser?
I was the one who said this to him. It was a mean and unneccesary comment.
it should. its as follows, I would try more complex code lol but this super basic one doesnt even post. &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;title&gt; &lt;script&gt; document.write("Hello World"); &lt;/script&gt; &lt;/title&gt; &lt;head&gt; &lt;body&gt; &lt;/body&gt;
Agreed. The only place I have seen or used Hungarian notation was long ago as a Win32 programmer. 'lpstrFirstName' - long pointer to a string holding the first name. In the context of writing C it could be useful. &amp;#x200B; With that said, whenever I start with a new language I find a style guide and use it to guide me.
No qualified developer is rendered unemployable by a naming convention. That's the *very simplest thing* you can possibly change, and given the paucity of really good developers it's a ridiculous reason to disqualify anyone. Either: * They had concerns about your familiarity with JS and your use of non-idiomatic JS and were communicating it exceptionally badly. * They had concerns about your familiarity with JS and your use of non-idiomatic JS and were communicating it exceptionally badly. * You got into a religious argument with the interviewer over it and they decided you were too inflexible and not the kind of guy they wanted working for them. * You were undesirable for other reasons and the interviewer disingenuously picked this as ridiculous fake reason to not give you the job. Not being there we can't guess which one it was.
My favorite is codeSandbox [https://codesandbox.io](https://codesandbox.io) 
Any frontend framework is fine (react, Vue, plain js, etc) For the actual mind map D3.js is a good choice. You'll want to look into their graphs to implement a mind map. https://d3js.org
I thought it was interface
Sounds like a dick. In pretty much all teams I‚Äôve been in the conventions have been team decisions
Err, your script is in title, that's kinda weird xd Try to make an alert, and do it in the end of body tag, get used to it, thats will be better for more complex projects. 
In my Java days I used to use capitalized "I" for interfaces
How would you solve that ?
"it shows you can't remember what variables are numbers and what are strings." Being a developer isn't about remembering variable types. Offloading that kind of mental overhead is valuable. One of the great things about typescript is it offloads this kind of mental accounting.
I've read you only had bootcamps experience, it is harder because you only had a few weeks to learn and you most likely will need to mature with you code. Spend time on side project/demos. That may be what you need to show you are worth it, since you did not spend as much time coding than many other new dev looking for a job.
Being able to adapt to different type of notation is important for your professional development as a dev. &amp;#x200B; If you insist on writing this way nobody will hire you because it indicates that you won't be able to adapt to the team and also to the different frameworks. &amp;#x200B; Just speculating here but maybe the problem that you are trying to solve with hungarian notation is that you lose track of what is what. You could try to encapsulate code into smaller functions with less variables in the namespace.
I know what this employer means. It's not about the convention, it's because it indicates (in general) that you aren't a big reader or follower of the JavaScript community standards. Typically people that do things in weird ways just find a way that works but generally those people are weaker developers, whereas better developers write pretty clean and standardized code. Obviously there may be multiple "standard" ways to do things, but strange variable naming is a red flag.
Okay, I will make an edit to bring it into context. However the point I was making is that it doesn't matter what you name your variables as long as the intention is clear and the convention is consistent... I need to edit to make it more related to the question. Thanks for your suggestion
1) You are missing the HTML tag 2) Your script are inside your title tag 3) You are not closing your head tag Maybe get the HTML under your skin before moving on to JS? Just some friendly advice. 
Don't understand, what do you mean with "track the variable" ?
i don't disagree with you, there have been efforts to upgrade and our deployments are currently using node v8. Its just that we support node v6 and its open source, so anyone using it can choose to use node v6 I wish we put a bigger effort into upgrading..
Stupid thing to even consider when hiring someone. It's incredibly easy to conform to a different style. 
When you are making too much progress but the newbs are uncomfortable that their ide doesn't have enough autocompletion and their code doesn't look enough like a hot mess of java factories.
As a software development manager, it's not that the poster's naming convention is wrong. It just may not agree with what the rest of the team has agreed to. We have well over 50 large packages written in JavaScript and PHP. As a team we have agreed to use the Clean Coding naming conventions. ([https://cleancoders.com/episode/clean-code-episode-2/show](https://cleancoders.com/episode/clean-code-episode-2/show)) &amp;#x200B; It is part of my job to make sure the code is quickly readable by anyone on the team, the source code is for the humans to communicate, so style matters. Any coder who cannot adapt the teams strategies get let go during the probation period. We don't do superstar developers, we do team players.
Yeah, saying they're "unemployable" is pretty strong for this. But I do think it can show a lack of familiarity with JS and it's ecosystem overall since it's not widely (or even narrowly) used.
Oops my bad with the naming(now fixed), but arrow functions do indeed have an implicit return if they are one one line.
This was the answer. It's the most declarative and pretty darn terse.
I definitely prefer the every function over reduce for this. Reduce here takes more time for the reader to figure out, where as using something like an identity function in an every is pretty immediately clear. P.S. you forgot to specify the accumulator's initial value and you'll need it to be true (or truthy) or this is always false.
Variables in JS can change type during runtime.
Thankfully my IDE does this for me when I use JSDoc.
Use Node with npm industry standard. Nodemon for continuous running without needing to refresh. Don‚Äôt use the online editors or anything, I‚Äôm kind of shocked that people are suggesting that.
One of my favorite sites for quickly checking some code or testing how something will work is reply.it, unfortunately you have to sign up for these days.
&gt; trivial &gt; 45 minutes to get that done Well something here doesn't add up.
You can use notepad++. All code is, HTML and JavaScript, is just text. There's no special file format or special program needed to make those files. Any text editor will do. But there are text editors out there that have special features that make it easier to write code like [Sublime (free evaluation, $80 to license)](https://www.sublimetext.com/) or [Visual Studio Code (free)](https://code.visualstudio.com/) among many others. 
 &gt;Never use generic Names for your variables like a, b, c, thing, stuff, foo, bar as nobody will know on a glance what those variables are when they are in use. The one exception to this is when it's a short lived variable imo, this is fine: ``` users.map(x =&gt; x.id) ``` Usually I'd prefer to use `user` but sometimes you might have that variable already declared in the closure and so I think it's an acceptable practice when it's clear what the variable is supposed to be. Or for generic functions such as: ``` const equals = (a, b) =&gt; a.equals(b) ```
45 minutes to get eslint to recognize your rule, write your rule, debug your rule, write tests for your rule, write documentation for your rule, and open a PR doesn't add up to a trivial task? If something takes less than an hour, it's trivial, because there's 20-30 minutes of documentation, test writing, and PR writing to be done for every task. Or maybe you're cutting some of these corners?
That's nothing a code review can't correct. It's a notation that isn't really used in js and tslint could block you from merging.
I think the answer you‚Äôre looking for can be answered by searching Uncle Bob Clean Code. It describes writing code as akin to writing a book. Keep it clean &amp; comprehensive will only aid in your employability and overall improvement üëç
Anyone who wouldn‚Äôt hire you because they‚Äôve seen you use a notation in some code is not someone you want to hire you. If on the other hand it‚Äôs you who insist on it, then yeah - I‚Äôd take that as a massive red flag. Only you know which it is :)
Some would argue that hungarian is specifically intended to indicate what a variable "is" especially for loose typing. Any naming convention gets bogged down in the edges of usage. However, indicating the type directly in the name can be very helpful in a language with no intellisense and loose typing.
You can just call the sort method on the "Team_list" array itself as well. `Team_list.sort(([, a], [, b]) =&gt; a - b);` Gets you there also.
&gt; If I interviewed someone that was using Hungarian Notation with JavaScript, I'd question how much knowledge they have about JavaScript and have concerns about their coding style in general, but it wouldn't necessarily be a deal breaker. I think this is all about the role I'm trying to fill. If this is a junior or other position that doesn't require a ton of experience then I'm going to dig a little bit to try and find why they've latched on to this convention. If it's something dumb that they had forced on them at their current job I'm going to point it out, see if they display any awareness that this is weird, and all that going well, probably not going to care too much. But if it's a senior position then it's a hard no. 
As long as you're consistent about it I wouldn't care. I wouldn't let you do it at work if I hired you as it doesn't conform to our coding standards, but IDGAF what conventions you use in your own time as long as you're consistent in any given project.
Pardon my French, but this hiring manager is a dumbfuck, end of story. Some people are habituated to default to certain coding styles when no coding style is imposed upon them because of what they learned first. &amp;#x200B; I would, however, shitcan ANY loser who uses spaces instead of tabs. :D
Node.js would be way less popular. Typing is correlated with how long it takes to get a proof of concept up and running.
Yeah, that hiring dude's boss needs to be told that the employee's ego gets in the way of hiring.
Nothing. You're responding to a big dumb poopoo head.
for code where other people are reading it, i'm not a fan, but not because of the implicit return - that's part of the language. i'm not a fan of the implicit truth check, because someone else reading this might not be able to discover your intent. making the truthy check explicit in the predicate would make this code much clearer to people looking at it at a glance.
As horrifying as Hungarian Notation is, it's not something that will get you blacklisted. You should 100% get out of the habit of using it though, and you should also take this as a hint that you might have some additional habits that make you harder to hire
Whoever told you that sounds like a fucking idiot, especially considering that's the easiest thing to change in a developer (namely, enforcing a rule that no code gets merged into master unless it follows linting rules).
thanks so much bro, this worked! 
got it!
[rolls eyes]
[removed]
Pretty clear, if you want to make it more so you can name the predicate &amp;#x200B; `const isTruthy = elem =&gt; elem;` `arrayName.every(isTruthy);`
While not a huge difference, `every` will short circuit and return as soon as a falsy value is encountered while `reduce` will keep going.
There is no big difference in JS... they are both weird and unusual to us. Underscores are generally a no-no (except capitalised constants)
As in the scope of the variable. The only time I've seen Hungarian notation pitched was in the era of BASIC and global variables. There you had a variable live the life of the application instead of being contained in a method.
use rollup to create a bundle or use http2 push
079000268883 jordy short knows this imagine not being able to do this you fucking faggot session management is bread and butter lol
Right, stack overflow is a goldmine for this stuff but yeah you can easily minify the js to achieve what you're after. But it is really dependant on what you are doing.
It's a \`render prop\` pattern or rather \`child prop\` pattern. See: [https://reactjs.org/docs/render-props.html#using-props-other-than-render](https://reactjs.org/docs/render-props.html#using-props-other-than-render) What's happening here is that \`barStacks\` is something \`BarStack\` component should provide based on your \`data\` prop and other input props.
Do you also name every function funcDoThingnor fnDoOtherThing? Do you name React components reactStatelessFuncCompomentButton? 
There are so many people here dogmatically against Hungarian notation without any idea why it became disliked in the first place. It became disliked because its use in Microsoft became mandatory, even in obvious cases. This was when the devs were using statically types languages, and they could just hover over the variable in their IDE and see they type they were using. Even then, there are uses for Hungarian notation (i.e. sanitised vs. unsanitsed strings cannot be differentiated by type alone). I think that in a dynamically typed language like Javascript it is perfectly fine to add in typed information to your variables to make sure they are being passed and used correctly. I don‚Äôt do it personally, and if you are working in teams you will want to make sure it‚Äôs ok to use that style or conform to whatever style the team already uses, but to me it seems perfectly ok. People who are saying that you should not do this because ‚ÄúHungarian notation bad‚Äù are speaking from dogma. Be careful about dogmatic beliefs and always make sure you understand why something is good or bad. 
I'm gladd to tell you that modules are fully implemented now. 
Help is jordy is fine 
I don't know about `bolThing`, but hinting value types in variable names is not unheard of. I don't think variable naming is an exact science that a single set of rules works for all situations. I suppose I strive to make variable names descriptive and intuitive without type hints, especially in a dynamic language like javascript: ``` function getEnabledAccounts (accounts) { // ^ I feel like a pluralized parameter name can be safely assumed to be a collection // of some sort, so I prefer accounts vs accountArr. It would bother me if, for example, // a refactor changed the accounts collection from an array to an array-like, but it still // had an 'Arr' suffix. return accounts.filter(account =&gt; { // ^ I would intuit that account is an object, so I wouldn't suffix it with accountObj here. }) } ``` 
I completely agree, I think this is a really good practice. It's also something that can't be solved by for example using Typescript, as opposed to the intDuration example. While we're talking about conventions, it's not very conventional (sometimes even frowned upon) to sign your reddit posts. It already says your username atop each post anyway. Just FYI :)
I'm making a Kanban board in React. I don't like the existing ones. https://github.com/lourenci/react-kanban
Here's the same things but just showing the underlying data available for you to render the visualisation: [https://codesandbox.io/embed/3vx503v641](https://codesandbox.io/embed/3vx503v641)
I don't know about \`bolThing\`, but hinting value types in variable names is not unheard of. I don't think variable naming is an exact science that a single set of rules works for all situations. I suppose I strive to make variable names descriptive and intuitive without type hints, especially in a dynamic language like javascript: &amp;#x200B; \`\`\` function getEligableAccounts (accounts) { // \^ I feel like a pluralized parameter name can be safely assumed to be a collection // of some sort, so I prefer accounts vs accountArr. It would bother me if, for example, // a refactor changed the accounts collection from an array to an array-like, but it still // had an 'Arr' suffix. &amp;#x200B; return accounts.filter(account =&gt; { // \^ I would intuit that account is an object, so I wouldn't suffix it with accountObj here. const isEnabled = !account.frozen &amp;&amp; // \^ isEnabled and frozen both sound like booleans, to me, no need for a type hint here. // In fact, I'd argue that the 'is' prefix IS a type hint for a boolean. account.money &gt; 0 // I think it's safe to assume money would be a number, no need for a type hint. // 'numMoney' wouldn't make sense, anyway. amountFunds, perhaps. &amp;#x200B; const isElligable = isEnabled &amp;&amp; account.numJointUsers === 1 // isElligable and isEnabled are no surprise here, but AHA! A perfect opportunity for a type hint: numJointUsers. // without the hint, I'd assume jointUsers to be a collection. An array of user objects or more likely ids. The num suffix here // makes it obvious I'm dealing with what's likely a memoized value that tells me how many users are associated with this account. &amp;#x200B; return isElligable // \^ an aside, but most people probably would probably just return the expression rather than declare isElligable. // I sometimes name conditions and returns for readability. }) } &amp;#x200B; \`\`\` I realize the above example uses property names as opposed to just variable names, but it's still relevant, especially if you're the one designing the models.
gotta be better than fuckingStupidVariable = 4; right?
Hello there! Javascript noobie here with little to no formal training. Your answer was particularly interesting to read, as I wouldn't have imagined people were so picky with their variable names. I don't mean that offensively either, it makes sense. Having spent the last little while working with a very neat team, I am learning very much how important it is to be strict in your styles, things can get messy quite quickly. I'm sure this may be a little out of your league, but if you have any references to links/tuts containing information about valid naming conventions that you feel are worth learning, I'd really appreciate you dropping them in a comment below. This is a new world for me, but its exciting, I am enjoying myself, and I am quite eager to learn more so thank you in advance. I know very little about Naming Convention, and even this Hungarian style is unheard of to me.
Hungarian notation was used by microsoft a long time, think they used it just after 2000. But Hungarian notation is not good, they are using abbrevations for how a variable is used and that is a big no no. Prefix based on type is what makes the code readable when ju fix bugs. It doesn't make the code more readable if ju just try to understand what it does but if developers need to do that they need to write better code.
No, because the *view* of a form is inherently different from the schema, or *model* of a form. A model will manage the state each and every field of a form, and the view will manage the look and feel and validations of the form. I would reference https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Full_example for a detailed read on how to build full featured forms. 
You can run your js anywhere if you have a browser installed and know how to link it in head. Other 2 solutions are: online editors (codepen, codesandbox, etc) Node.js With node you just start a runtime on a cli and output whatever the file is outputting on your terminal.
This ambiguity can be removed by using the proper boolean name of `isVisible`.
&gt; i do occasionally do a "b" prefix on bools, because sometimes a descriptive name doesn't necessarily clue in that it holds a true/false. IMO it is better to prefix them with `is` or `has` as in `isVisible`, `hasChildren`, etc. This essentially does the same as a `b` prefix but is more natural and reads nicer.
I'm curious, why do you chose to do that?
lowerCameCase is very bad because it doesn't tell the developer anything, And it destroys many techniques where small and large letters are used to make the code more manageable. Think it was java that hyped coding with lowerCamelCase. The reason could have been that the big software companies didn't want competition. They don't want good developers coding C++ for example because they can't make money on them. 
Prefer using \`!!\` to coerce to boolean \`arrayName.every(elem =&gt; !!elem)\`. Your implementation also doesn't handle the edge-case of empty text ie \`' '\`. A better solution would be something along the lines of \`arrayName.every(name =&gt; typeof name === 'string' &amp;&amp; string.trim() !== ''\` 
eh...I think Brackets is good for Web developing and previewing, and Atom also has a package that lets you run stuff. I think sublime text might be able to too. 
Read the book clean code it gives a good overview of how to name variables. Personally and also written in the book it says you need to make your code look like it's telling a story and if you are putting the type before the name it won't help. One of the things you can do if its an array make it plural. Or if it is a boolean just put "is" before it like isActive.
But in a jQuery-less world, references to DOM objects are few and far between when using a declarative library like React or Vue.
Came here to basically say the same. If you‚Äôre not using a typed language then using Hungarian naming seems like a solid strategy to help improve code quality and visual debugging that‚Äôs also light weight, easy to implement, and simple for someone who is unfamiliar to instantly grok. Seems to me that the OP was simply recognizing a potential problem and came up with a perfectly valid method to deal with it. Absolutely would not be someone I would label as ‚Äòunhireable.‚Äô In fact, I‚Äôd be curious about what other good ideas the OP had that might not be so obvious. 
What is good with lowerCameCase ?
My brain is not responding
*especially* when a delivered product or library or repo is gonna be ugly-or-minified anyway. 
If you dont understand what their functions do from the name, and can‚Äôt figure out what the value of variables are from their names, then you have a huge problem on a multiple engineer development team.
Did you start life as a VB.net programmer? Those practices are encouraged in those languages because their types won't change. I have similar practices from time to time because of my time as a VB.net programmer but instead of using prefixes to define types sometimes I use them to express longevity. E.g. tmpID might not last past the current loop but currID might last the entire render. Then when currID and tmpID match, I know I've hit the item in my loop my page is seeking ;-) 
Actually what‚Äôs happening amp and all. Lmao
This site has seperate pages with different urls for each user agent.
I wouldn't say you're not employable based on that alone. If you refused to adhere to the standard naming conventions of the company then probably. Everywhere I've been employed I've had to switch to whatever they're doing.
Okay if you code VB6. 
&gt;If your variables live long enough to merit labeling them as such, you're methods are probably too long or complex. This is sort of a bit true today, but hardly a hard and fast rule. However, it certainly was not true back when we were all coding in text mode editors exactly 80 (or sometimes 132) characters wide and 25 lines long.
Yeah, if anything, Hungarian makes *more* sense in Javascript than it does in C++ where the variables are all strongly typed anyway. 
Who told you this isn't employable. I don't see this as being bad. I see this as being a personal preference. A company will tll you what their conventions are, if any. 
&gt; it shows you can‚Äôt remember what variables are numbers and what are strings The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility... -Edsger Dijkstra
I have been using TypeScript for a few months now. I love having next to Zero runtime errors. Sometimes it is annoying having to wait for the compiler, but most of the time its fine.
Snake case is better, but when all the node.js libraries are camelcase, you're destined to end up with both, which can be much worse
Here's the thing. If you do this, any dispatch that modifies the store will invoke a re-render of the entire application. You need some sort of subscription-based HOC sitting in front of each of the components that modifies just that component's props when the part of the store they are interested in is modified - and make sure the reference to "store", i.e. whatever context value you pass down doesn't actually get modified unless you want a full re-render. When hooks came out, I created a similar store -- quite similar to the one referenced in the article here -- and tried my darnedest to not get the entire thing to re-render but was unable to. Here's the code: [https://github.com/tswaters/react-hook-example/tree/master/src](https://github.com/tswaters/react-hook-example/tree/master/src) This has two apps, \`hooks\` and \`components\` -- both use a common store file which has a reducer, creates selectors with reselect and has various dispatch actions, etc. No matter what I do any change would re-render the entire component tree on the hooks one. That's fine for a todo app, not good for large SPAs with a large and complicated component tree. This sort of thing will work if you don't have a massive store with everything in it -- I'd only do this if limit it's usage to things that are unlikely to change, and, if they are do, warrant a re-render of the application... the only things I can think of are light vs. dark theme, logged in user, and current locale.
Agreed. Whenever studying try to also learn the general conventions of your environment. I have been working with C# lately and the camelcase/title case distinction is very important for maintainability even if it is not technically necessary in all cases.
I had an employer complain about me not using any typechecker... And another complained because I started using flow because it's not typescript and a third one because I used typescript and it is too complex for the mostly junior devs there. Tldr sometimes bullshit happens. However you should always have a strong argument to why you do things the way you do, and show that you can comply with any coding style that is required. Since then I always go for popular styles such as Airbnb react in such tests and simply argue that I picked an arbitrary one and followed it's rules and I can do that with any style.
You're not enough of an advanced coder for my team then. I'm the capitain of the "wesolveeverythinginthemostconfusingway code club"
This is exactly how I do it.
My general rule is that exports/imports use camelCase (or capital for classes), while internal variables and data structures (i.e., postgres column names) use snake. It's not as bad as you might imagine. Either that, or I just got used to it. 
It sends the wrong message to someone hiring you for your programming skills. Calling these types as "things" might indicate that you don't totally understand their behaviour anymore than you need to in order to write a simple application. If I was the hiring manager, I would have tried to delve deeper to see if there's something else I can hire you for since your programming knowledge seems to be elementary.
One of the things I look at when reviewing code is readability without comments. I'd ask you to rewrite any code like that in a way that you can basically read me your code without comments and I could understand it. 
Use ScrollOut JS.. it is a minimable scroll library. 
I think the way you did it if on your own is fine and you should be able to speak to it. When working with a group you should be able to code as a group and if you are the only person that does this, well that'd be odd. In the end, they said you are not employable to them and seems like they made that decision. I'd move on and maybe use a most standard naming approach in future interviews.
yeah, i was thinking i had done it once in my current project somewhere where the var had a name that i thought was quite descriptive of what it meant, but it wasn't clear necessarily that it was a true/false . . and is/has didn't make sense. but now i'm searching for it, and it's not there. I am finding that other people have been injecting things like (C#) (all bool) focus, fixPosition, fresh, res, persist, active, dirty, zoom, present, valid, doesCollide, selected, cycle, additive, previousState (really?!), didSelect, exists . . . i don't like my coworkers code anymore. lol 
To be honest, the decision to not employ you was probably a premature one. It doesn't reflect the fact that you *can* learn to adapt your style to what the rest of the team uses. I do Java, and never used the `m` prefix before, which irritated some members on the team but to me, it was an easy switch. Plus, it makes the code easier to read and track the scope of things.
This style comes from a time when IDEs were less powerful. You couldn't easily see a type and scope by hovering an identifier. Modern IDEs make Hungarian notation obsolete. If fact, it just adds noise. But there was a time when this was a sane and valuable approach to naming. 
It's pretty bad but unless you are inflexible that is not an employment issue. It's not like VIM vs Emacs :D I think everybody is flexible enough to adapt to the company conventions. Never saw it in use in JS world. 
Should be good enough if you have a strong secret configured in your app. I‚Äôm in the same boat and I‚Äôve tried multiple things to break into it but its close to impossible break in. For added security I would add SSL, and possibly renew secrets periodically, automatically. 
if ( objInterviewee.boolUsesHungarian == true ) { objInterviewee.boolHasJobEver = false; } /* oh wait */
&gt; But i'm doing a verification if the localStorage is not the same as the session token What do you mean here?
On every axios post, i'm sending the localStorage back to the express js post, where i'm checking if req.body.localStorageKey != req.session.token
That's the dumbest thing I've heard today, I think you dodged a bullet OP
1) Worry is a misuse. It helps nothing. 2) Imposter syndrome is a misuse. Ditch it. 3) Play to your strengths and remember you can always improve. 4) If none of this is possible, become management.
My fiance and I agree that was the best advice lol üëç
So for context, I also live in SF and have about 6 years of experience in the industry and am purely self-taught. &amp;#x200B; &gt;I had a bug that annoyed my boss that fell down my priority list. Last night, another dev on my team found the bug fixed it and merged it in, and of course he called me out on it. So your coworker fixed an issue that was assigned to you and then either your coworker or your boss called you out for not having done it first? Or am I misunderstanding? Like, did you say you were going to ship it by X time and then fail to do it? Because if not that sounds weird and shitty and of them and I'd be really annoyed. Your coworker shouldn't have stepped on your toes by working on something that was assigned to you, and then once it got fixed, everyone should be glad it's fixed rather than pointing fingers. Sounds like a dysfunctional team to me. &amp;#x200B; Anyway, big picture -- everybody feels self-doubt, and very few people are really "brilliant developers," and even those people aren't worth all that much if they aren't also good at being team members. I know this is easier said than done but IMO you should just focus on not beating yourself up, striving to do a good job, and if your workplace dynamic is causing you an undue amount of stress, then find a less stressful one. If you're asking whether you should essentially demote yourself or look for a lower-paying job or something, absolutely not. There are tons of absolute dipshits in this city just raking it in. If you feel like you're overpaid, donate to a homelessness organization.
"I had a bug that annoyed my boss that fell down my priority list. Last night, another dev on my team found the bug fixed it and merged it in, and of course he called me out on it." I think you should respectfully talk to him about it. It's not appropriate to call anyone out for something like that directly. There are better ways of handling it. 
developers are 'burn and churn' resources...maybe you should look at a different career path. 
i‚Äôm new to js as i am new cs student. i thought hungarian was proper? what‚Äôs the fuss about?
&gt;ant Gold mine! I'm definetely going to use it. Thx.
Dang, some of those are pretty bad lol. 
Take a look at [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read) 
Coworker took it out of my cue on one of my vacation days and just @'ed me in GitHub. It's not bad that he took it, but bad that he called me out in front of the entire team I think. I probably shouldn't feel so bad about it anyway. And even if I do get canned again, I should use it as a learning experience. I went 8 years without being fired. 2 years of bad juju isn't the end of the world. Though, donating to homeless shelters is still a good idea.
Coworker took it out of my cue on one of my vacation days and just @'ed me in GitHub. It's not bad that he took it, but bad that he called me out in front of the entire team I think. I probably shouldn't feel so bad about it anyway. And even if I do get canned again, I should use it as a learning experience. I went 8 years without being fired. 2 years of bad juju isn't the end of the world. Though, donating to homeless shelters is still a good idea.
I use vsCode and gitbash in vsc's terminal. As long as you have node.js installed you can just run your node application and console log anything you want to the terminal to check if it's right. You can also grab user input using process.argv to grab input from the console if your testing something that needs user input from the client 
I would recommend using different tokens in the cookies and in localStorage. If they are the same, then you only need to steal one to have both. localStorage is vulnerable to cross site scripting, so if there is an XSS vulnerability and someone grabs the token from localStorage, they could potentially craft a request that also passes it as a cookie. If they are different, then someone would have to find a way to steal both.
"developers are friends, not food!"
&gt;Coworker took it out of my cue on one of my vacation days and just @'ed me in GitHub. It's not bad that he took it, but bad that he called me out in front of the entire team I think. &amp;#x200B; Yes, agreed. Depending on exactly what was said, I would probably not be cool with this. FWIW, I'm currently interviewing after quitting my last gig after only 4 months -- I was very well-compensated, but I quit because my team was super dysfunctional. IMO it's not worth it to put up with shitty team dynamics at work when there are so many jobs to be had.
Probably. The specific dev just mows through stuff. I shouldn't be comparing myself to him at all. 
That seems like... a lot of work for no benefit. As it stands, you're currently telling the client to verify that one thing the client sent is the same as a different thing the client set, as far as I can tell. Which is essentially no security (more than the cookie itself). I.e. if your presumed attack assumes the attacker has the cookie value (the token that you're checking that it's in both body.localStorageKey &amp;&amp; session.token), it gives you nothing. Because a good attacker will be able to weasel out that those two things need to be the same, and can either 1) craft a curl request that has that token in the two right places; or 2) just set localStorage manually. Never assume an attacker is using your javascript. Client is always untrustworthy, and is not necessarily using the code you provided.
I expect lower developers to code more than higher developers on my team to a point. Typically higher developers have to deal with a lot more things and don't get the amount of time. Many bugs are more about time than skill. On a side note, you definitely seem to have personal self esteem issues based on your thread. Do you experience similar issues in life outside of work? 
Also a hiring manager, and I agree with this. Except I will offer a slight deviation. If it were you with Hungarian Notation vs. another candidate and you were on relatively level terms otherwise this would potentially be a deal breaker. It's not that it demonstrates a lack of knowledge, but it does demonstrate a lack of staying in touch with standards as they have evolved.
Not really. Not yet lol this is all new after being fired... 
I use snake for postgres and filenames, but I'm not brave enough to buck the convention in actual JS code (though I wish I was).
I‚Äôve written two books that may help. Both are free to read online: * ‚Äú[JavaScript for impatient programmers](http://exploringjs.com/impatient-js/)‚Äù: covers all of JavaScript until and including ECMAScript 2019. You‚Äôll already know some of the content, but those parts should be easy to skip. * ‚Äú[Exploring ES6](http://exploringjs.com/es6.html)‚Äù: with in-depth coverage of what‚Äôs new in ECMAScript 6. More details than ‚ÄúJS for impatient programmers‚Äù and therefore a slower read. Features after ES6 are covered in [other free books](http://exploringjs.com).
https://github.com/getify/You-Dont-Know-JS
&gt;Where do you store data related to authentication? Local storage or cookies. Each one has its pros and cons. &gt;How do you ensure that this data can't be abused? Signed JWT. &gt;How do you stop an authenticated user from repeatedly spamming requests to one of your endpoints? Rate limiting. &gt;How do you decide which data that is exposed to the client ought to be encrypted? Do you typically encrypt Post data? No. &gt;How do you choose to store passwords on the server and for what reasons? Hashed with bcrypt or argon. &gt;Do you choose to verify that the user is authenticated for each and every request made to the server? Yes. &gt;In general, what precautions do you take to take to secure your web app? Take a look at the OWASP Top 10.
Even saying ‚Äúreduce inplace‚Äù would be a red flag üö© I assume they just mean reassigning the variable to a new value.
Bugs happen.
Looks like you have answered everything. Guess I asked a bad question. Thanks for pointing me to the OWASP Top 10. 
So I think really you probably have some anxiety issues and being fired definitely can cause that. Anxiety is definitely an issue in the field. There are a few things you can do. Really focus on improving your skills. Have you taken any coursework on react to really learn it? I‚Äôd take a high level course on it. But focusing on improving your skills may ease your mind. If that isn‚Äôt the answer then you should actually look at professional help. Getting someone professionally to talk to about your worries can help you a lot. But anxiety can hurt performance and it sounds like you may be suffering from it some. Good luck, no one will ever be as hard on you as yourself. Focus on getting better every day. If you think you are going to lose your job jump ship before you do. Maybe find a job in an enterprise that values continual development.
Pretty sure the parent comment is saying this might happen on a project using Hungarian notation if the programmer doesn't realize they're messing up the implication of the name.
I think you're a troll, so I downvoted it. It's unlikely anyone could be so ignorant and hyperbolic at the same time.
Thanks, exactly what I was looking for
I bought a book or two and built a few fun projects with react redux sagas with varying levels of success and enjoyment. I have also been thinking about going back to school to finish my CS degree with a minor in business. Not cause I think it would make me a better developer, but because it's a piece of paper noone could take away from me. An anchor for my newfound insanity. 
I would certainly reconsider these naming conventions in a modern Js environment. The answer should be ‚Äúwe no longer need to use Hungarian notation because we have type safe options like Typescript.‚Äù
how did he call you out? What did he say and what was the context?
It was relatively innocuous. Just reversed a line if code I wrote forever ago. And just did "@githubName..." 
Ah ok, well in that case it seems like it could be read as passive-aggressive -- IMO it's more professional and helpful to just say exactly what you mean instead of implying it, especially in something like a Github comment! -- but I'd do my best to give it the most charitable interpretation, which is that they just wanted to make sure you were aware of the change, and weren't actually trying to call you out or be rude. And then I'd try not to worry about it any more.
Thanks guys! I'll keep studying and I'll start playing Halo on legendary like the days if ill and old with mountain dew and little ceasars pizza. Keep on coding! 
Just curious, what is "in the bay" refer to?
i'm really hoping most of those are local scopes in very small pieces. i know they're all outside any pieces i've worked on. Then again, I probably named bools terribly too until I first read someone saying "name bools -ble adjectives, or is or has". at least there's no double-negatives in there. :-D 
 let foo = [1, 2, 3]; foo = foo.reduce((acc, item) =&gt; acc + item)); Okay, I just threw up in my mouth a little bit.
I don't like doing commonjs imports. I just stick to es6 imports. So at that point even if I were just using it for es6 imports and strict null checks it'd be worth it. 
San Francisco
What are you talking about, programming is one of the most sought after resources
That's a dick move. I diagnose Aspbergers. Either that, or he's just a fucking asshole. Keep your chin up, you're doing fine. Assholes are meant to be there as an example so you know how not to treat others.
I use typescript when I feel like having hours of migraines using 3rd party libraries and making sure I don‚Äôt have a single space or comma out of place! Works like a charm! Get a headache 10/10 times.
I find `require` is much cleaner personally. The spec for it was so complex and limiting, while require is extremely clean and simple in comparison. I also like not having a compilation phase and having to litter my code with pointless ":any"s all over the place. I can see why tree shaking is nice if you trying to compile code into a minified binaryesque thing to save space. But it doesnt really do much for the server side. Converting my code to "module javascript" files in order to support "import" doesnt seem to add any value at all.
&gt;I had a bug that annoyed my boss that fell down my priority list. Last night, another dev on my team found the bug fixed it and merged it in, and of course he called me out on it. Another point worth making here that won't fix anything for you, but I think is an important perspective. I only know two things about your current workplace - one about your boss and one about your co-worker. And both strike me as red flags of a toxic work culture, or at the very least, an unsupportive environment. At my current job (of four years), I've never called anyone out, been called out, or really witnessed it. Reasonable people understand that bugs happen, and when they do, they should be recognized as failures of the team, not the individual. Furthermore, an "annoyed boss" is almost always someone looking to shift blame and not take responsibility for their own oversights or lack of diligence. As far as leadership styles and motivation techniques go, "being annoyed" has to be somewhere very near the bottom of the list. Long story short, it's normal to feel impostor syndrome and some anxiety at work, but it's not okay to be *made* to feel that way.
This. I saw this question elsewhere tonight and forgot to comment. It's funny, because I was talking to two of my friends at lunch today about this very idea. We're all senior developers with years of experience. My take was (and has been for some time) that the biggest challenge in web development is forms. Forms are hard. Every few month someone introduces a new library that promises to save the world, but it just moves the complexity around. Forms seem easier, but the library itself is hard to use. Another problems with these libraries is when they try to start doing too much. The Unix principle is that a program (or in this case, a library) should do ONE THING, and it should do that thing well. A good form library that handles state and validation SHOULD NOT try to solve the view problem. Let the developer do that, or let the developer choose and additional form view library and marry the two in their own way. The problem with trying to make a system that anyone can use, or with a library that tries to do too much, is that it becomes too prescriptive. You HAVE to do it their way and their way keeps getting worse with each new version. The truth is that forms are usually only hard because we try to have one library do the view AND the state management/validation. We need to stop doing that. And people need to stop creating new form libraries that promise to solve the form problem once and for all.
When I want my code to work the first time I run it
I still can't handle capitalized constants and tslint agrees. let guid = this.EmptyGuid &gt;&gt; this.EMPTY_GUID
If you add `declare const libraryName: any;` anywhere in your codebase then the compiler won't complain about `libraryName` types. At that point, you're in the same boat you are in when using plain JS.
What tooling do you currently use? No comments on behavioral concerns such as internals- side effect/purity management, but for static data typing concerns on the signatures, you may consider typescript and VS code to help you manage, enforce and navigate your function contracts, without devolving to grotty naming conventions. Namespace support may also be relevant on your theme of module organization. Quarantining/separation of pure vs impure implementations is a convention I follow.
yea exactly...theyre everywhere lol.
I downvoted because it's a stupid title. Also I was once told I wasn't accepted to the job because I knew CSS instead of bootstrap Another time someone complained I had 10+years of programming and admitted that I only had 5 years in C# and hinted I was lying. This was in 2011. C# only existed for 5 1/2 years at the time...
When I want my coworkers to clearly understand not only my types but also my intent, I use it. When I want to make so that calling Quack() on anything other than a duck gives an immediate compile error, I use it. But mostly I use it because it let's me write Javascript using the LATEST features regardless of what legacy version it has to be transpiled and the transpiler handles all the polyfills for me. 
So... you can solve Typescript, by only using Typescript for a certain part of your code OR creating an interface for a module by yourself seriously increasing your workload. Sorry about being crass. I've been assigned various Typescript projects and as a solo developer it increases development time by A LOT every single time... maybe it helps debugging and preventing errors that... but I'd take well documented code over Typescript.
Vue or React. 
Using this trick is perfectly valid for one-off libraries without proper types that you aren't using much. In all other cases, yes, type your code. Making the code work right is only part of the job. Making your intent clear, making the code easy to read, modify, and refactor are what you are really paid for. That's the hard part.
TIL what Hungarian Notation actually is. I thought it means that the variable name is descriptive about it's purpose (Like `const hiringManagerSurname = hm...` instead of a bunch of - basically - preobfuscated names. `const xr, a, b, xkcd...`), not literally have the type as the first word. 
I'm curious, with todays IDE's, is it still useful? 
visibility should be isVisible
Assuming that `Thing` is just a placeholder for the variable name: I wouldn't say that your naming conventions have made you unemployable, as long as you're able to match the style of the team's codebase. A hiring manager should never turn away a candidate solely based on their naming convention because it is definitely something that is 1. not permanent and 2. not indicative of their overall programming ability. Any hiring manager currently doing this is likely losing out on great talent. It is more acceptable to include code readability in the decision making process, though not as the sole factor. The only thing you should worry about when deciding your naming convention is readability. If your convention is making your code less readable or more complicated, you should adopt a better one. More specifically, your chosen naming convention should address what things are or what they're used for. The naming convention you're currently using tries to convey the type of a variable, and while this might help in some circumstances, it definitely isn't a replacement for a type system. Therefore, conveying structure of a variable via your language skills and separating the types would likely increase readability. In example: const arrayCarListing = ... /* could be better displayed as: */ const carListings = ... // or if you're using TypeScript: // carListings: CarListing[] // however types can often be inferred The reason I say that `carListings` is more readable than `arrayCarListing` is that it adheres more closely to written or spoken language. In this case, using plural words to indicate plurality of an item conforms more closely to the rules of English language than prefacing your variable with a type or making the name itself indicative of the type. Some might not find this too important, however, conveying meaning via readable variable names is one of the most important facets of both API design and application development. That being said, the naming convention used in your example doesn't appear to convey poor readability on its own but it also doesn't appear to convey the best readability either.
Given this function signature: function createElement(data, visibility) quickly tell me which one is the proper usage: 1. `el = createElement(data, true)` 2. `el = createElement(data, 'visible')` 3. `el = createElement(data, 1)` 4. `el = createElement(data, { visible: true })` 5. `el = createElement(data, new Visibility(true))`
Even if you have a variable defined above that is called `user` you can still use `user` as the parameter name to your arrow function as overshadowing variable names is allowed and won't break the code. However, it could possibly introduce confusion or prevent you from using the outside variable. &amp;#x200B; The acceptable and **more** **readable** way to map over `users`: users.map(currentUser =&gt; currentUser.id); This way clearly shows that you're iterating over each individual user as `currentUser` which doesn't sacrifice readability and should avoid overshadowing `user`.
I've worked in San Francisco for most of my career. My best friend is over in South Bay as a badass. Maybe I should love down. 
Amen to that. 
There are only two hard things in Computer Science: cache invalidation and naming things. - Phil Karlton It's pretty simple: the more descriptive the variable names are, the easier the code is to read, debug, and refactor. The most common JavaScript style guides (which include naming conventions) are Google and Airbnb: [https://google.github.io/styleguide/jsguide.html](https://google.github.io/styleguide/jsguide.html) [https://github.com/airbnb/javascript](https://github.com/airbnb/javascript) The nice thing about adopting one of these styles is they fairly ubiquitous, and you'll find many IDE plugins that can auto-format code according to these guidelines.
isVisible
Yeah, I feel that. I just wish I felt like a badass like I did when I knew 1000% less lol 
500% less*
I too work with a total asshole who is also a talented developer. It sucks, but this is a good job, so here I am. You can always bail, there are tons of jobs. 
I agree with the "staying in touch" point - I suspect that's what this prospective employer was trying to say in a horribly Dilbertian way.
This is precisely why I don't become a senior dev, and that I'm a slacker. 
You say you aren‚Äôt confident on your unit testing or react skills. Have you done anything (possibly at work, possibly outside) to explicitly grow these skills? Sometimes, I find learning a concept in isolation is much easier to understand than looking at how X company shoehorned it into their stack.
The loader docs are quite confusing ‚Äî you'll probably want to hit a WP REST API route consisting of your data (in JSON format), then insert it into whatever Chart.js function loads the data. Basically need to ensure you have a dataset with labels. Here's some of the code I used on my site (christopherlis.com) if that helps at all: var myChart = new Chart(this.c, { type: 'line', data: { labels: this.labels, datasets: [ { label: 'Total Hours', backgroundColor: '#00ffff', borderColor: '#00ffff', data: this.dataset, fill: false } ] }, }
I've been out of the bay _area_ ;) for a few years now (currently in the Chesapeake Bay area which is a different bay), but it wasn't that long ago when SF was becoming the new "silicon valley". I think career-wise, it's the place to be. And yeah, you're going to run into people that won't make you feel good about yourself, and yeah, you might get laid off or fired, but that'll happen and you can't let it get to you. Its just another opportunity to find a different place that's better suited for you. 
Feel free to send me your resume if you want me to look over it. Although we're not hiring right now. The purpose of these bootcamps is to get you employed as a programmer. You feel like you have the skills but as you're finding that's really only half the battle. You should reach back out to them and try to get some contact with other alumni who are in the industry now. Networking your way to a job is your friend. If they aren't going to at least give you that then you really should write them a bad review, it's easy for these programs to pray on people, leaving you out of pocket on the costs and with no job to show for it. I'd also recommend looking at going with a recruiting agency. It shouldn't cost you anything, and they'll handle the demoralizing submission of resume's for you.
are you THAT bored ?
This is for JavaScript. JavaScript is not java. Go to r/java
unpopular reply, but if a coworker is blocked by a bug you're dragging your feet on and they can fix it in a matter of minutes - it's really pretty appropriate to grab it and fix it. Anything else is brutally inefficient. what no one is asking is: how _exactly_ did he call you out on it? The devil is in the details here; we can't tell if you're reacting because of insecurity when he just said "oh I took care of that" or if he was actually a dick about it.
Use the modulus operator to get the remainder. 2722 % 5 === 2
Lol that‚Äôs what I was thinking too. 
I see a lot of people giving you advice that your boss and/or coworker are toxic or passive aggressive or bad etc and I think it's doing you a disservice. If you feel like you're not being as effective as you could be, then you're probably right. It's times like this when you really need to examine your motivations, your work environment, your personal process, your satisfaction with your role and your company, your life outside of work, etc. It all matters. What kept you from fixing the trivial bug? Were you fretting about a million things instead of actually just writing code and doing work? When I find myself in this situation, it's usually because expectations of me are unclear or poorly defined AND, more importantly, none of the things on my plate actually seem as important as everyone around me is making them out to be. Then I just get paralysis trying to figure out who to please and end up doing nothing. The senior move in situations like this is to ignore what other people want and just do the most valuable work you can. Once you start doing this, your boss will notice (because it will make them look good!) and everything will start going right.
Thanks man let c = 2722 / 5 ; let b = 2722 % 5 ; console.log(Math.floor(c)+"r"+b) Answer = 544r2 Thanks a lot man 
&gt;And I go through my day to day life with a new crippling fear of being fired again. this is imposter syndrome straight up. bugs happen. interpersonal mishaps happen. other people fix bugs. you have fixed other people's bugs before. relax my dude. stop getting so caught up on titles. try to remember this feeling the next time you fix a bug, and when you mention the bug, try to describe the bug like you wrote the code so that you don't make someone else feel called out. if you feel deficient in an area, work on fixing it - that's one thing senior engineers do - they get proactive. asking your boss for advice on what to work on is probably a good way to improve as well, if you're not worried about him being toxic.
 const whatever = (a, b) =&gt; `${~~(a/b)}r${a%b}`; console.log(whatever(2722, 5));
Another possible conclusion is that it's better not to reuse "variables". 
Maybe a word of advice: Don't let yourself become a "senior frontend developer" and still work for a company. If you're really good at JS, you should work for yourself or work in a small team and get decent pay. Or if you're experienced enough you become full stack, learn something about databases, networking or Go or Python in the meantime, or become a UX expert that not only write codes but also design.
But it's probably less likely than in another project. I'd say that's an argument for, not against. 
I agree with the last point because the focus on the code isn't actually on the user 'u', it's the focus on what's being done to it.
To clarify, I never EVER EVERRR would use something like a, b, c, d, thing, stuff. I simply put that in my example as a word that fits all context of the different types. I guess I should have just listed proper examples of each type.
you are exactly right. I NEVER EVER would use "thing stuff, a, b, c"
This [ES6 Cheatsheet](https://devhints.io/es6) is a really good source to get an overview of modern JS syntax.
to clarify, I would never actually use "strThing", but would use "strFirstName". I was simply saying "Thing" as my variety word to apply across types. 
Lol just the imposter syndrome, chill. Fuck bugs and snitch teammates. 
looks like many people disagree with you: [https://www.reddit.com/r/javascript/comments/bagb8n/i\_was\_told\_im\_not\_employable\_because\_of\_my\_naming/](https://www.reddit.com/r/javascript/comments/bagb8n/i_was_told_im_not_employable_because_of_my_naming/)
To clarify, I would never actually use "strThing", but would use "strFirstName". I was simply saying "Thing" as my variety word to apply across types. 
You misunderstand. I'm saying someone might do it intentionally and not realize they've broken the naming convention, which will cause future problems when it returns an unexpected type. If you want strict typing, use Typescript, since that's literally it's purpose, and it does it 1000x better than Hungarian notation.
I saw $ and first instinct was "wtf you need jquery for?!" But yeah . . . template literal.
Thanks!
Hi /u/glaucia_lemos86, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
FYI it‚Äôs the ¬´remainder¬ª operator. JS doesn‚Äôt have a proper native modulus op.
Oh ok. What benefit do you get out of that type of naming convention? Just curious. 
Also, when someone fixes your bugs, you say THANKS! and not start getting defensive. Would OP rather this other dude not fix the bug? Or send a private message to the OP so they could fix it. What the fuck man? You can't own bugs! :) Just imagine a sports team doing this =) A hockey player playing defence trips and the opponent gets through, another defender stops the opponent. "Goddammit Mike! I was supposed to stop him, but I fell and now you stopped him? You have any idea how bad it makes me look!? Don't want to be a dick about this, but in my humble opinion if I tell you I got a guy then I got the guy. Wanna have a go at my wife next?"
I‚Äôm just getting started on this stuff. Your question (and the answers) was a nice little goldmine. Sometimes I wish there were starter faqs for everything like this.
Could you elaborate on this? What's wrong with becoming a senior front end developer for a company?
Don't aim lower. You are obviously insecure, but if you are hired as a senior developer that's because they believe you can do it. Believe in their judgement by believing you are the right person for the job, and strive to become better.
Watch this: https://youtu.be/2aPjsb-kIks He talks about your team
Maybe he‚Äôs not calling you out, maybe he‚Äôs just giving you visibility to the fact that he found a quick fix to a bug you were going to work on. That way when you get back from PTO you don‚Äôt waste time trying to fix it too.
Probably worth pointing out that op was not told this by a prospective employer, but by somebody he was arguing with on Reddit. 
Is there reason to believe he's being a dick or even annoyed? I might just do that as an FYI cause you were changing something someone wrote.
What? I've been a dev 15 years and never seen companies eager to get rid of good developers. I've been in big layoffs where only the devs make it out and everyone around them is laid off...
Damn, I like that
You are exactly right. I think OP is in the wrong here. Being so insecure that you react negatively to the good work of others does not help anyone.
Thank you for your input. Let me preface this with the fact that all of this applies to my personal projects, not necessarily my work setup, although there is some overlap. I‚Äôm using VS Code and Node for the most part, but not TypeScript. I‚Äôm using Webpack for bundling most of the time. I‚Äôve heard that the TS compiler will sometimes have issues with curried functions. Have you ever seen that before? Aside from that I think I could get a lot out of TypeScript. I have considered using Flow or even ClojureScript as well. Any thoughts on transpiled languages? I honestly don‚Äôt mind using a kind of Hungarian notation for my function names, for things like data inputs, but lately I‚Äôve been just putting comments for each function, which just means I have to refer to the proper file to view details on more obscure functions. I‚Äôm curious about the details of how you separate functions across files. What kind of folder system do you recommend? Any thoughts on naming conventions for files?
Hi /u/ed-r-2087, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/PalestineFacts, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Hego123, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AnunnakiGFX, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yass988, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/leota90, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NiwiGomila, please refrain from personal attacks. Thanks.
Not entirely agreeing with OP, but practices like giving raises lower than devs would get by hopping companies, bad management, and crunch culture can definitely drive good developers away. So maybe the companies aren't _directly_ eager to get rid of good developers, but they can still get rid of them inadvertently. I suspect that's what OP meant. Don't agree with looking at a different career path, though. Not every company is like that.
When to use TypeScript? All the time it‚Äôs simple, amazing and can be implemented incrementally as needed
Hey man. I think this is actually a thing; imposter syndrome. https://medium.com/@rajeefmk/why-does-software-developers-suffer-from-imposter-syndrome-ccf961d0c29a ‚Äî I experienced it a bit when I started my first lead role. It‚Äôs supernormal. I‚Äôd say just keep grindingg at it. Maybe finding a more senior mentor?
Imposter Syndrome my friend
Yeah, expressing high order functions in typescript/javascript has some idiomatic/impedance mismatches. Some highly abstract contracts can be challenging, especially for newcomers to describe accurately. Of course, if one hits a wall with a particular contract in a critical method, there's always the cop-out of the "any" type. The most comprehensive discussion on dealing with expressing high order functions in Typescript was this one, which exercises typescript generics to facilitate a contract. No doubt one can find ways his solution doesn't address every scenario. https://morioh.com/p/0d8b3523d82f/how-to-master-advanced-typescript-patterns On inline code documentation - vs code sniffs out tsdoc annotations, so you don't have to refer back to original source, or use over-complicated names to capture the semantics of something. https://github.com/Microsoft/tsdoc As to folder/naming conventions- logical separation of concerns which evolves based on complexity of the implementation drives the decisions, and I refactor when contradictions become apparent and things aren't where I would expect them. Sorry, I don't hold strong prescriptive opinions about naming policies other than to be as succinct but accurate as possible, with minimal/limited hungarian notation, other than for describing relationships of like families of things. With strong/reliable tooling, the value of explicitly including typing in names has faded away as a superfluous embellishment which doesn't add value to my work. If the bulk of your code is inherently functional with limited outside integration/interop, a more specialized solution such as you mention may be a good choice, with fewer compromises. you may find typescript has a larger/more mature ecosystem, e.g. When doing work with UI, I tend to need to deal with React and other non-functional dependencies, like discussed here. e.g. https://levelup.gitconnected.com/flow-vs-typescript-in-react-my-two-cents-d4d0c657d236
I think you should go template engines like handlerbar.js or mustache.js. Template engine will give you the power of styling and complete control over UI. I would recommend you handlerbar.js, as in handlebar you can write your own helper functions which can manipulate data or if you want to do some data formatting like showing dollar sign while showing currency. Also working with handlebar required less learning curve. The only issue that I see with handlebar is, that it doesn't support two-way binding. Also if you want the library and not framework then there is Ractive.js which supports handlebar style and two-way bindings. &amp;#x200B; Handler Take a look - [https://handlebarsjs.com/](https://handlebarsjs.com/) Ractive - [https://ractive.js.org/](https://ractive.js.org/) &amp;#x200B; I hope this is helpful to you :)
It was your vacation day, maybe he just fixed it and didnt want to bother of you. If it wasnt a big bug for you then it definitely wasnt a big bug for him the way youre talking about him. &amp;#x200B; From my point of view this was a quick fix and a @ so you could be aware that he changed something. &amp;#x200B;
Maybe framework churn makes your skills irrelevant every two years and you need to keep learning new fads to keep up. First jQuery was cool, then Angular, then React, then React with Redux, now React with hooks, then Vue.js was cool. Nobody can keep up with all that shit and be senior at all of it.
JSViz [https://www.mind-mapping.org/index.php?title=JSViz](https://www.mind-mapping.org/index.php?title=JSViz) JsPlumb [https://www.mind-mapping.org/index.php?title=JsPlumb](https://www.mind-mapping.org/index.php?title=JsPlumb) mxGraph [https://www.mind-mapping.org/index.php?title=MxGraph](https://www.mind-mapping.org/index.php?title=MxGraph) If none of those suit your needs, you could also look at MindMup, which is open source, so could be adapted: [https://www.mind-mapping.org/index.php?title=MindMup](https://www.mind-mapping.org/index.php?title=MindMup) source here: [https://github.com/mindmup](https://github.com/mindmup) 
Try to find a company that works with code reviews. Reading and checking each other code is a really good way to improve. 
Good leadership is about acknowledging and using skills that others have that you may lack or may not have time to use. As a senior dev there is no shame in learning a lesson or two from mid or junior devs in fact in this changing environment a good junior developer may be more up to date with some best practice changes or latest library / feature simply because they have more time on their hands. At the end of the day your managers will want to see productivity from your team - and as long as you enable that more than hinder it - your own level of ‚Äújs excellence‚Äù is not the issue. The other part of leadership is assertiveness and confidence - even if you don‚Äôt feel it, project it. Rely on their strengths - if they fix an issue be the one to point it out and congratulate them for sorting it. They‚Äôll be more likely to have your back if they feel you respect and acknowledge them.
It sounds like you may also be suffering more from what's known as Imposter Syndrome. It's common in the tech industry. We all get it to varying degrees throughout our career. https://en.wikipedia.org/wiki/Impostor_syndrome You don't necessarily need to go down to mid-level. But perhaps there are areas you could focus on improving. Do you have regular 1:1 meetings with your manager, where you can discuss issues related to your performance and professional growth? Does the company you work for have any documentation that outlines what they expect from developers at different levels in their career, or do they have any formal growth plans? I would speak with your manager, identify 2 or 3 specific areas of improvement that you can agree to work on, with measurable outcomes. You should have short term goals each quarter, and longer term goals that span a year or two. You could also ask to be paired with a mentor. This is someone who is either at the same level or level above you who has strengths that you and your manager feel you may be able to learn from. I'm a senior frontend dev. There are a lot of expectations for a senior where I work. But basically, it comes down to being able to be trusted to get the work done that's assigned to you, and to be able to contribute valuably to your team's success. To give you an idea, these are just *some* of the expectations for a senior role where I work. * Knowledge and understanding of the tech stacks used * You are seen as a highly trusted developer in at least one technical domain, and have working knowledge of other technical domains * Makes valuable architectural contributions, both for solving new problems and improving the existing stack * You're able to drive large, complex projects and guide more junior members of the team on those projects. * We have a concept called feature leading in my department. This is where we are assigned to take responsibility of a feature from development planning through to delivery. We're expected to be able to drive the sprint planning/backlog grooming/etc. meetings, co-ordinate the work with the rest of the developers on the project, with stake holders, and with external dependencies. * Provides good quality and helpful code reviews for others in your team, particularly for complex changes * Seen as a role-model by others in the team, particularly by juniors/mid-levels. Valued as a peer among others of the same level * Able to make tough decisions or lead the decision making process in relevant areas. You need to know your strengths and weaknesses. You're not necessarily expected to know how to do everything up front. And you're in no way expected to write bug free code, nor be able to find and fix every bug. But you are expected to be able to reach out to the right people to find out how to do the work, and to co-ordinate the work with stakeholders and dependencies, and where necessary, learn how to solve a problem.
A point may be that if you stick to the same company all the time you may also be stuck with some technologies that won't be as relevant out there or with a similar skillset anyway, and by the time you leave you will also not have the variety of skills needed to represent the same role in many other companies.
Most big sites have a bounty program and will pay white hats for reports
I work with a dude who uses Hungarian notation. it is hard to follow his code. That being said he his naming would be bThn for Boolean or iThn for integer. If I was bringing in a contractor and their code was written that way, we would have to talk about his changing his naming conventions for the viability of keeping him on. Readability is important. But you are using vowels and three chars for they type name. Not terrible. 
Sorry I shouldn't need to layer another set of preprocessing tools, prone to error and confusion, because you don't want to follow established conventions.
There is a platform for google where if you can spot a bug they will pay you money, but i don't remember what to look for to find it. Do some research and you'll be paid for that, allegedly atleast. I saw it work for some people.
Thanks, very helpful. 
Sorry for not reading everything else, but the chances are your not a senior developer, 90% of ‚Äúsenior‚Äù staff tend to be that coz they‚Äôve done the job a while or are older. Not that your technical abilities are not good enough, but to be considered as senior you should really have mastered your whole stack and have outside knowledge of other areas to bring new angles, able to teach topics. Basically be at the top of your game. Loads of places give the title senior just because they don‚Äôt really know what it should be. Eg I‚Äôm NOT senior even tho I‚Äôve been doing development for over 15 years, I know react/vue/Laravel/kohana/node/jest/phpunit/aws/linux/webpack/gulp/blah blah blah and so much more crap over the years. I‚Äôve been at same company for about 6 years now. And I know I‚Äôm not senior. Read this for example https://www.theguardian.com/info/developer-blog/2014/aug/28/what-does-it-mean-to-be-a-senior-developer
They disagree about the employability aspect.
hahaha just to put things in perspective. I got fired like 3-4 times in my life and by the end of it, I no longer have much fear at 27. Just do your best, if your co-worker sucks don't engage and keep doing a good job. Chances are everyone else will be annoyed at your co-worker for being a jerk anyways. Some good ways to become better is to challenge yourself on the things you specifically mentioned like unit testing. Anyways wish you much love and happiness :)
When? The answer is whenever you're using a project that requires Javascript.
Why do you think you'll get fired at your new job?
PureScript next. :) But for real, it's a shame that Elm remains so overshadowed by traditional JavaScript. Coming from a Haskell background but having to use JavaScript for work, it's just a dream to use. It's incredible how nerve-racking, verbose, and clunky committee-designed JavaScript is compared to one dude's side project.
I like your naming, yes-yes! Down with that recruiter-thing! You go back to job postings many-many times, you don't fail-fail, but adept and overcome... takes time. Help yourself, stay true to the [Great Clean One](https://www.oreilly.com/library/view/clean-code/9780136083238/).
When did OP ever say his coworker shouldn't have fixed the bug?
Any real world/complex examples made with PureScript ???
Remember that you are not the code you write. For me the thing is that I want to solve problems with code, and this mindset takes a lot of ego in code away. Everyone creates bugs, and I think it's amazing if you can hold each other's backs. In case this is not the case there then the culture is just bad. Deal with it or go look for a new place.
I don't see how you comment has ANY merit. 
Exactly! I see a lot of these "replace redux with hooks"-posts, but none seem to account for this massive con.
OP clearly states that he was okay with him fixing it....
I think you should have a talk with someone about your anxiety. It is holding you back. A senior is not a flawless programmer, he/she is a programmer that sees his/her own limitations, overcomes them, welcomes help and helps others grow as well. If you genuinely feel like you need to improve at something (testing, react, ...) try to take some time to understand what needs to improve. Ask your employer you want to improve on that and see if they can accommodate. See if you can pair with other developers to learn from each other.
I am seeing to many people who are thinking that b/c javascript it dynamically typed Hungarian notation is some negative. As a computer engineer my interpretation of this is that these people are morons. Just about every dynamically cast language has a way to "force" the variable type. I am looking at this as an embedded programmer that has used c, c++, and python. Most languages allow you to specify a way to give the type of the variable if you wish. 
I wouldn't work on this code because it makes my head hurt. It violates the concept thet the code should be intention revealing and the principle of primitive obsession. Normally I would prefer that the code makes sense by itself, for example, FirstName or firstName is obviously a string, Count is obviously a number, and I REALLY don't care that an object is a child of a class (a language construct) - what I want to know is WHAT is this object for, and I count on its name to give me major clues. 
Indeed he does. It's also rather apparent that he is not okay with it.
I just started out in developer career and this post kinda bugs me now (1.5 years of react). Is creating a bug really such an important resposibility of a person who wrote the particular code that one should always fear firing? Its brutally inhuman. I dont think i will write less buggy code even 10 years in career as there will always be things one can overlook no matter your experience. Writing bugless code takes a ton of time. However business will always pressure you to lay out features asap, at the same demanding flawless code. There is healthy time-to-bugs ratio and if business requests are inhuman maybe it is a bad place to work on to begin with?
Could you explain? Is the dev who calls put the imposter,?
Hi /u/Austinp1983, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I wish halo had another level difficulty after legendary. Charging plasma pistol and then switching to human pistol makes it easy so I've switched to non conventional weapons 
This all great advice for this situation :)
It would make people think you haven't done a lot of Javascript as basically camel case is the standard approach for Javascript. Normally you would use two words to describe a variable like userAccount depending on what you are doing.
You never actually mentioned why you were fired at previous jobs. Was it related to your performance, or something out of your control?
The modern economy is dependent on software do virtually anything; almost everything in business is done with the assistance of software. Programmers build that software but the demand for software is much higher than what can be produced by the number of programmers. Day to day is heavily dependent on where you work and what kind of work you're doing, but in most cases it boils down to supporting the business by building/maintaining software
i think the most important thing to remember is that you are not alone. Maybe 60% ( some study i read in an article i cant find now ) of senior devs feel exactly the same as you and most suffer in silence. Its called imposter syndrome look into it. Understanding the problem is 90% of the work. 
First of all, your coworker's call out can easily be interpreted as passive aggressive. Maybe he was frustrated because this bug was blocking or affecting him in some way? If so, there was a failure of communication that you need to work on. And of course, you really need to prioritize issues like that, even if it may not be the most important issue by itself. Team spirit and cooperation is key. Another reason may be that he called you out simply because the fix was so easy. It's possible that he did this because he thinks you are bad at your job and want you gone. More likely I think, is that it's just some lighthearted teasing. Every single dev knows how hard it can be to estimate how long it will take to fix a bug. Let's say the situation was reversed. Wouldn't it be a little tempting to call him out with a little "wasn't so hard after all it seems ;)"? I think so. Especially if it's a bug he's been stressed out about. Still, both you and him knows that he couldn't possibly know that the fix would be that easy, and therefore you'd both know that the event doesn't say a thing about his skills as a developer. So to me it seems like a classic case of the impostor syndrome, and that the main thing you need to work on is your self esteem. I find that the easiest way to do that is to improve your communication with your team. Ask for more honest feedback on parts of your work. Build a picture of what your coworkers think of your skills - what areas you need to improve, and what you're doing well. Of course, it's possible it turns out that you really are bad at your job, and that your low self esteem was warranted. But this way, you'd at least know that for sure, and know what areas you need to improve. Still beats the uncertainty and self doubting by a mile.
Yup tis here yee should be looking [Google Reward Program](https://www.google.com/about/appsecurity/reward-program/) 
&gt; Andrew's approach gives you more incentive to practice what you're learning. Nearly every video has a challenge where you're asked to follow instructions and implement what you've learned in that video. This part easily takes at least 20% of the course. &gt; &gt; Max's course, on the other hand, is more of a code-along and he doesn't include any challenges. Here it's up to you to put in some work and decide when, how and what you practice. Wow, what a detailed review! I'm soooo grateful for it. You saved me a lot of time, since as I myself am a beginner I'll go 100% to Andrew's course and just use Maximilian as a reference. Have you done both Andrew and Max React courses? What do you think of them? (not considering Stephen Grider's because he doesn't answer to Q&amp;A)
I can highly recommend any of Dr. Rauschmayer‚Äôs texts. Purchased ‚ÄúJfIP‚Äù and it was exactly what I needed, even in its beta form. Looking forward to more!
I agree with all of these. Using single character variables in lambdas should be considered fine in many cases, but I still prefer names like `val`, `acc`, `obj`, etc., especially for slightly more involved lambdas. For data types, tooling helps, and so do comments in your source code. I find the most troubling issue with types is not with identifiers or parameters, but with the return values of functions, if there are any (and there should always be a return value IMO, even if it‚Äôs just a Boolean).
How is this coding anxiety when it is js?
`return hasNotNotReturnedFalseTechnically;`
It‚Äôs common in polymorphic functions, where there is some standard `let result;` declaration, followed by a conditional, which then sets the `result` variable to one of several different types depending on the operation. ...Which is why I really don‚Äôt like polymorphic functions.
This is obviously a bad thing to do. But simply changing out the variable assignment to a different variable would fix it.
That‚Äôs fair. I find variable names to be pretty easy to keep track of without any naming conventions, if the names are descriptive enough. The edge cases are rare enough that I don‚Äôt mind looking up the expected data types in those cases. But what really irks me is functions whose return values don‚Äôt match their input values, when it‚Äôs not clear in the name. Even if it‚Äôs not mutating the original data, it‚Äôs still annoying. So for those situations I usually add a `toArray` or `toString` suffix.
No problem! As for React, I haven't done Max's or Andrew's course and actually am going through Stephen Grider's. I can really recommend it, it's probably my favorite programming course I've taken. Stephen does a great job explaining things both theoretically (and with diagrams) and with code, the projects are great and in general, he knows what he's talking about. His approach is similar to Max's though and you'll have to force yourself to find opportunities to practice and implement what you're learning, he doesn't give you challenges or anything like Andrew. Furthermore, I wouldn't enter this course without knowing vanilla JS quite well. Andrew probably eases you in the most out of the 3 judging by his other courses, Stephen has the most advanced stuff though. Anyway, both Andrew's and Stephen's React courses got a 2019 update, Stephen's was a huge one. I actually would prioritize anything of Stephen's moving forward after what I've learned from his React course.
three.js
Just came across another possible option, ElGrapho: [https://github.com/ericdrowell/ElGrapho](https://github.com/ericdrowell/ElGrapho) 
this is wrong... your code will be a lot harder to follow with this kind of mutations every where.
How the hell are you not senior after 15 years of experience? You're either being held back because a mid-level is cheaper than a senior of you haven't been given the opportunity or encouragement to grow.
In my opinion one cannot call himself a senior dev without having a mastery in unit testing/TDD. In my opinion, and a lot of people agree, tests are more important than the code itself, and code without tests is mostly useless.
So I've been a dev for 21 years and a senior for the last 6-7 years. 6-7 years ago, I was top of my game, then the game changed and javascript frameworks started to take over. I then spent the next year or in your position. Feeling like I was a fraud, calling myself a senior and not having a clue what I was doing. The a few years ago something hit me. A senior developer ISN'T a developer who is the best at writing code. A senior is a solid developer with management and problem solving skills. Again, problem solving doesn't mean you need the answer to everthing. It just means you know how to find the answer. Sometimes that answer is you saying "Heads up, there is a bug here I can't work out, so I think someone who can cover the gap in my knowledge will need to do this one". Own the areas you are weak at - but at the same time, try to fix those weaknesses over time - and make sure you're someone the rest of your team can rely on. Fast forward to now and I'm pretty comfortable as a senior, I've managed to learn React and Vue and I'm getting there with writing tests (still kinda shit at that though) but I'm respected in my team as I'm a problem solver and I help to unblock other team-mates whenever I can. That said... If you HONESTLY (I capitalize it as it sounds like you may be thinking emotionally and not critically) believe that you can't learn this new stuff eventually and/or you are constantly feeling anxiety about this then yes, I'd downgrade to mid-level just for your own sake. 
If you‚Äôre ‚Äúnot great at unit testing‚Äù then yes, you‚Äôve probably bitten off more than you can chew taking on a senior role. Frankly I don‚Äôt think anybody who‚Äôs spent their whole career doing one thing (JS) should be aiming at senior roles either. You need a broader experience to be able to steer architectural decisions and lead / mentor other developers who might not be working solely in the same stack you know well. 
Hi /u/BootlickingRisk, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Most software is custom software for businesses. Businesses that have a lot of legacy code For example right now I'm working on a call centre telephony system for a bank. It has to talk to Cisco Finesse, which is pretty complicated, and to the bank's customer data system, which is also pretty complicated. The first 2 months, I hardly wrote any code - just learned the techs and sought improvements to the project design. When I do write code, it's slow going, lines-wise. Writing the code is easy for me, after all I've been doing this for years. Understanding other people's code, that's hard. Mapping out specifications, supporting the test team, trying to persuade ops that I really need that server urgently - that's what fills my day.
&gt; Play to your strengths and remember you can always improve. So much this. Nobody is actually perfect at everything. Being a senior dev means a lot of things, but it doesn't mean "perfect" or "all-knowledgeable". That said, I'd work on the things you know you're bad at that are being asked for at your job, like unit testing. UT in particularly is very, very useful in some situations and you'll be hard-pressed to find a job that can't benefit from it at all.
It's really a good advice , i will work on that . Thanks a lot 
Just google "imposter syndome". It's the OP that is suffering from it.
The good ones aren't.
The good ones aren't.
Most external stuff is camelCase, so when I use snake_case I can see what is internal, and what's not.
In addition to what the others here wrote, in my experience many people also underestimate how many programmers work on a single program. Most even moderately sized programs are written by hundreds of people over multiple years. That‚Äôs a lot of jobs. My typical workflow starts with a list of tickets to work on (which I usually define/refine every two weeks). A ticket defines a single feature or explains a single undesired behavior (aka bug). From this list, I pick the one with the highest priority. I think about how to solve this, open up the text editor and implement it, with repeating test/programming cycles until it‚Äôs done. Then that change gets pushed into the central code repository and the process begins again from the start. You need to keep the interactions between different parts of the code in your head, which is the hardest aspect of programming. It‚Äôs easy when you have maybe 100 lines of code, but a typical real-world program has 100,000 or more. Making one change might affect hundreds of other places in the program, and you have to be aware of these at all times.
I managed to get it to work. All I did was npm i --save socket.io dompurify &lt;enter&gt; Then, on the client side: import io from 'socket.io-client' import DOMPurify from 'dompurify' And it's working great. Parcel is compiling everything into 1 file and everything works just fine. Error was somewhere else in my code, but I got everything fixed now.
Because the job title senior is BS most of the time, senior shouldn‚Äôt mean ‚Äútime spent‚Äù you must be top of your game. I know more than most of the people I know. But it‚Äôs a whole lot more than just time and experience. You could be senior in 1 year if you were rain man. Senior should be the equivalent to a grand master in chess. Should have maxed out knowledge, abilities and experience. If I asked for the title of senior managament would give it to me, but I know how much further there is to go. So gives me something to wrk toward 
As a senior developer, I'd have to say it's not all about the capabilities of development for a given person that brings value to the role. I feel that being able to develop and adapt are traits learned as a developer, and the difference between developer and senior to me is more the correct disassembly of tasks, prioritisation/organisation of work and ownership of delivery. The developer you mention who gets through work might be a great dev - but is this because he spends all his time picking up tasks he knows he can deliver quickly? Does he challenge himself with breaking down incoming work for the team to pick up? Does he handle business expectations and build relationships with business members? Does he spend enough time reviewing other people's work and providing valuable insights for technology that can be brought into the codebase to improve? Your post feels rather focused on pure development, but not necessarily the larger picture of being a senior developer. The Dunning‚ÄìKruger effect is where someone feels more confident the less they know in an area. The converse stands true also! If you're able to see your shortcomings it means you're aware of the subject matter intimately enough to know where you are strong and where you are weak. If you can identify what you find difficult, perhaps unfamiliarity with react, then you can address it yourself by forcing yourself to spend time working with the technology. Best of luck going forward!
http://es6-features.org/ Really like this page, it shows old (if it exists) and new syntax equivalents.
I was about to reply with LMGTFY but maybe this might help: [http://simjs.com/queuing/](http://simjs.com/queuing/)
Don't be anxious 4Head
Ooh that! I think the imposter syndrom is the result of the Dunnibg-Kruner effect Yeah there isn also a graph somewhere that shows the "confidence" level. As seen on that graph people who just started have really high confidence But as soon as you start to know some you also start to know you have so much more to learn, what takes down your confidence (Graph here)[https://i.imgur.com/jbo2gy5.jpg]
Lol. I should've mentioned the research I had done. I did look into simjs. However, I do not think that it has the UI aspects of simulating the queues. Please let me know if I am mistaken... Thanks for sharing the link!
Hmmm... not sure what its like in the bay but there are ways to notify people of a bug. Calling someone out seems like a toxic culture, especially if a manager rewards that kind of behavior. But... that bug which dropped down your priority list, were you asked to specifically fix it? Was it breaking or blocking other work. Were you stuck on other important work or building a feature? Did you cause it? Being a strong developer can as much be about the right level of self criticism.
Just stop having imposter syndrome, so easy!
This subreddit is so fucking weird. Isn‚Äôt it LITERALLY part of the job of a web developer to fix bugs? The dev op is talking about did his job, saw a bug, fixed it, and @d op on github. Apparently that makes someone a ‚Äúsnitch teammate.‚Äù 
To everyone who commented, it's actually "impostor", with an o, not an "imposter" syndrome. Learn english plz XD
Agreed! When debugging some legacy code at work I was very surprised that a variable named IsInactive confused me so much. That extra level of inversion really messed with my thoughts. Why not just call it IsActive?
Idk, I think it‚Äôs a team responsibility to stop bugs from going into prod. It‚Äôs code reviewed, QA‚Äôd ‚Äî so why you blaming me? 
Re: the bug that annoyed your boss. As someone that has managed and now helps direct development, I'd say own it. Thank the developer for helping address something important to the org. "Hey thanks for taking that bug on. I've been stuck with XYZ and was worried I wouldn't have time to get to it.". Own failure. Ask for and thank others for help. 
Not sure if you need anything this elaborate but couldn't you put the localStorage token in an *encrypted* cookie and compare them at the server? I don't think you need to go this crazy, just ignore the cookies and use JWT and localstorage and be careful of XSS
G35u
Pretty sure it's not a vulnerability... Most websites that offer content behind paywall, have a "soft paywall" which allow certain types of visitors to access the content.. Maybe it's for first time visit, or for google bot... Unless this is a security issue, where user sensitive data is exposed, I highly doubt you'll be able to get any money from it.
&gt; Still, I am not great at unit testing Then do something about it. Practice. Ask for help from someone who is. Also, seconding everyone's comments about imposter syndrome. It happens, it's ok. Having some humility and pausing to self reflect about your own skills is healthy, but don't let your doubts consume you. Address and fix the things you can (practice you skills!), and work around the ones to can't (delegate/ask for help).
Not answering your question but as someone who started with JS to try and learn to code, if you are teaching yourself, do CS50 in EDX which spends about half the course on C then higher level stuff like Python and JS. Pay for the cert to keep yourself accountable, it‚Äôs the best money you‚Äôll ever spend. It completely changed my perspective on coding compared to other learning options.
Switch to Java... JavaScript will be soon overthrown by a more secure scripting language within the next 5 years I‚Äôm willing to bet.. it may not but I would be truly surprised if someone isn‚Äôt already developing something to replace it with
This is the correct answer. Bugs happen to everyone; patterns, practices, and process only help to mitigate and prevent them. Hold yourself accountable, own your mistakes just as you should own your triumphs, and keep learning. Being honest and willing to take criticism while at the same time removing yourself from the "blame game" is a better attitude than throwing others under the bus; even if it is to defend yourself. By the way, in case you were wondering: it sounds like you're doing fine! Keep studying and fight back that imposter syndrome. For me, I find the best way to fight back against imposter syndrome is to get more involved in some way.
HTML: https://validator.w3.org/ CSS: https://jigsaw.w3.org/css-validator/ Not sure for JS sorry.
You set prettier as a pre commit hook and never think about it again. How is that any different than the layer of pre processing tools being your IDE? I'm sorry man but you sound incredibly selfish in this thread. 
A normal day is probably 2-3 hours of coding, 2-3 hours of meetings and collaboration, an hour of lunch, coffee, and snack getting, an hour of research. Come in read your email, put out fires, unblock coworkers, get aligned, write code off and on, lunch, keep people abreast of what you are doing, write a little more code, caffeine break, write some code then look up some stuff on the internet or do continual education. This is what I would expect from a pretty typical mid level dev. Lower devs spend more time coding and education, higher devs spend more time keeping people abreast of the project and other devs unblocked. 
[Echarts](https://ecomfe.github.io/echarts-doc/public/en/index.html) [https://gallery.echartsjs.com/editor.html?c=xHkAPIRLTz](https://gallery.echartsjs.com/editor.html?c=xHkAPIRLTz) ?
* The typeless nature of JS variables makes this naming undesirable. Specifically, this doesn't work well with duck-typing, even though it sounds like it should. It is trying to give you more info about a variable/attribute, but as many others have pointed out, value types change over time. For example, maybe rating was originally a string ("Very Bad", "Bad", etc.), but you later realized that a decimal score allowed easier aggregation and scoring. You may have situations where you don't care about the type but just need to access it. (For example, let's say you have a product list with ratings, and because of a redesign ratings can be numeric or strings, and you have a display list for them. Only the display component - which is reading the actual value - needs to care about what type of rating it is. However, if it's named differently, you now need logic to pass it in. Yes, the IDEAL would be to make numeric scores for all the string based entries - but this isn't always feasible.) * I think there's a strong correlation - it's even been brought up in a couple comments - of Hungarian Notation with Visual Basic, and VB has a bad reputation with career programmers: it has a low barrier of entry, but teaches a lot of bad techniques. Hungarian Notation tends to be considered a 'code smell'. * As /u/darth_meh mentioned, it's more important to be able to work with a team's coding standards than it is to have the best individual standard. Even if hungarian notation was a great option, the team probably already has a decision. Without a VERY good reason, the standard exists and is already a public best-of-breed code standard.
reading this as a junior developer gives me anxiety
Good question, and not one I know the answer to. I haven't had to code win32 in a very long time. I'm sure the VC++ IDE has come a long ways since I last used it, so it may be better at typing hints.
Seriously, people ask me all the time ‚Äúdo you think I would benefit from therapy? Do I need that?‚Äù I think it‚Äôs a silly question, everyone can benefit from talking to a therapist, you just have to find a good fit. You‚Äôre probably not going to logic your way out of this crippling anxiety by yourself. Brushing up on your technical chops is good, but you have some deeper stuff that is coming up.
"called me out on it" Name calling is a very very bad behaviour that I highly dislike! To be totally honest I think your teammate is a douche doing it. Don't worry about this too much. Mistakes happen. Even he is doing some. &amp;#x200B; "I had a bug that annoyed my boss that fell down my priority list" Does your dev team got a backlog? This sounds to me that there is a lack of communication and priorization of tickets in your team. From my experience such things almost always happen if there is a lack of communication.
The W3C does not do javascript validation.
Hey just wanted to say hang in there, bud. It might be a good idea to take a few days off from work and reset. Don‚Äôt make any rash decisions and try to remain calm and collected. This is not the end of the world even though it might feel like it. Take a look at your significant other and remember how lucky you are to be with them. Life is good, this is just a job, and no matter what happens it won‚Äôt change your identity.
JS validation should be done with ESLint and a good config like airbnb-base or standardjs 
Why were you fired? Did someone explicitly tell you that it was a performance problem? What were the signs leading up to this? People get laid off all the time for purely financial reasons or personality conflicts that have nothing to do with performance. You should definitely self reflect (are you being an asshole?), but also realize you may have done everything right and still got laid off. &amp;#x200B; Senior levels typically mentor and set technology direction, more so than code up new features. A good senior multiplies the effectiveness of the team by helping everyone be better. &amp;#x200B; You may be reading too much in the this bug fix call out. Elsewhere in the thread it just said you were @ed. IMO, that's just being polite to say I fixed this issue. If a bug is found in code I've written I want to know so I can make sure it isn't duplicated anywhere else. I also want to know to make sure the fix is actually correct since the person fixing may miss some of the context.
&gt; things like .bg-blue Don't post that in /r/css, they'll eat you alive
Here: https://hexometer.com/w3c-validator
The title is BS but it is associated with responsibilities and compensation. I don‚Äôt care about the title, I care about the impact I make on the company and my compensation. The second you receive the title at a company that‚Äôs it, you‚Äôre a senior. It doesn‚Äôt matter what some blog post says about what it REALLY means to be X.
[removed]
I always find it interesting that, in the professional circles I run in, we talk among ourselves as programmers doing programming but on reddit, and other hobbyist forums, they talk about "coders" and "coding".
Engineering manager here. Bay Area big company with 18+ years of experience. I started as a developer, and the more I became ‚Äúimportant‚Äù the less I‚Äôm a developer. Sometimes for helping team out I fix bugs (UI) and many times happens that I am the one that create them. But developing ‚Äúsomething‚Äù is a team effort, so no fingers are ever pointed in my team. This is how things develop because your responsibilities put you in a situation that coding skills is less and less important. Successfully manage a team, consciously take infrastructural and architectural choices, carefully manage all stakeholders and related politics/diplomacy is something that is required and play, for obvious reasons, a much more important role globally. I expect my juniors to be more skilled than me in coding, and when I code, I will send them coding reviews on my code. Playing clearly, with transparency, respect and knowing each other strengths and weaknesses is what make a difference on a team. So I strongly suggest you to find a team that acts this way.
Sounds like you're not cut out for it 
Java isn't a scripting language
You can fix things without outing a teammate 
Didn‚Äôt say Java was... I said javascript sucks and will be replace with something much better
Exactly this OP. I have severe anxiety issues too, and this industry tends to exacerbate the issue. Therapy (and exercise, sleep, medication) has helped me a lot. If your having trouble in your kind, you can‚Äôt use your mind alone to solve it. Some external help will be needed. 
I would start by learning [PixiJS](http://www.pixijs.com/) (2D WebGL renderer)
&gt;Switch to Java... And then &gt;JavaScript will be soon overthrown by a more secure scripting language &amp;#x200B; So you're either not sure whether Java's a scripting language, or you're not able to string together a coherent sentence. Javascript is not going away within 5 years. If there are browsers, there's going to be JS.
I didn‚Äôt even place Java and JavaScript into the same sentence Einstein.... I said switch to java and then went into how JavaScript will be replace with a more secure scripting language... do you want me to color it out for you in crayon?
Yeah- the funny thing here is that he may have been doing what he would want... simply tagging you as an FYI and not at all trying to call you out. It‚Äôs hard to say. But, when anxiety is flaring everything can feel like an attack. I know how it goes. 
Isn't it overkill? Shouldn't something like pixijs do the trick? Or even d3js?
Developers work on teams. Teams should review code before it is deployed. If a bug gets passed the developer and the team during the review process, then it‚Äôs the teams fault as a whole; blame can‚Äôt be put solely on the developer. 
I think it depends entirely on how the coworker handled messaging him about it. See: "Hey jeremyStover, I was already in this part of the code and decided to fix this while I was here; I know it's on your plate so just wanted let you know." Vs. "jeremyStover why is this bug still unfixed? I was just looking through the code and it's still outstanding, and fixing it was super easy." The latter may seem a bit extreme, but I've known people who'll do a call-out in that tone, and that's just shitty communication skills. If the message was more the former, then it most likely is OP's anxiety eating him ‚Äì getting fired from a job, let alone two, can be PTSD-level trauma depending on a lot of factors, so him feeling anxiety about this is completely understandable regardless of how it was handled.
I feel so too, thank you. I sometimes catch myself playing the blame game - "this is due to this guy, this is due to that guy...". Its bad, unproductive and toxic thinking. Its as much my fault as is theirs. And if I spot something bad before deployment, I should be thinking instead - "huh, teamwork works! "
You should probably avoid doing psych evals on the internet, and look up what autism is.
Hey, you seem like a hard worker who is passionate enough to care about these things ‚Äî that‚Äôs fantastic. Reading your summary and skill set, my impression (as an architect) is that I wouldn‚Äôt consider you senior. It‚Äôs possible that at your old position, you were doing a great job but weren‚Äôt meeting the expectations that the company expected from a senior contributor ‚Äî and they may have felt it necessary to let you go because of that, if their other senior people were performing higher. As others have mentioned, there‚Äôs a lot more to senior engineers than just coding (although you‚Äôre usually expected to be good at that too), like: - Process improvement - Mentoring junior/mid-level devs - Software or architecture design - Leading projects - Time management These are all things anyone can improve at, just takes experience and time. 
guess you have a hard time reading... ok 
[phaser](https://phaser.io/) is one of the best JS game engines available.
[Phaser.js](https://phaser.io) 
I use liveserver, didn't know about this addon.
So call the array arrFoo and assign it to numFoo?............
Somebody called you out after fixing your bug? That's toxic af. If I were you, I'd be looking for another senior position on a team where that shit isn't tolerated.
Absolutely there is a big need. The contracting company I work for has about 80 software positions that need filled. And that's just one vendor. A lot of the work is developing business specific apps. Take any industry for example and imagine what software and apps would be useful to them. There's a good chance they have someone working on the code for it. 
For a quick reference, there's also: https://kangax.github.io/compat-table/es6/ It has compatibility info as well as links to MDN (blue mozilla flag icons) for more information on each feature. The link above is for ES6 specifically, and the 2016+ tab at the top will show you features released after. The standards committee also maintains: https://github.com/tc39/ecma262 This shows specs for (potentially) upcoming features as well as everything new after ES6 in [Finished Proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md). Some of the [Active Proposals](https://github.com/tc39/proposals) like [BigInt](https://github.com/tc39/proposal-bigint), [globalThis](https://github.com/tc39/proposal-global) and [(public) class fields](https://github.com/tc39/proposal-class-fields) are already shipping in chrome.
You could reduce arrFoo to numFoo, with initializing the accumulator as either the first element of the array or some arbitrary number. That would make the code clear and avoid mutating the array variable (changing the value AND coercing the datatype) to a number. In that case it‚Äôs acceptable, as long as that‚Äôs the intention.
Dont'worry its pretty much normal. Try to maximize your gain from the learning process. You are not suppose to know the WORLD of REACT/ANGULAR. I am 100% sure there are some things that you know much better then the other developers. Plus you need to contribute a lot on the architecture/design side and not in the nitty gritty details of every bug, that's why your are senior. Befriend yourself with the other developers, so that you can learn more when you got time, rest of the time, you need to manage the pressure, throttle the work load and acts as a bridge between mgmt and other developers. If someone things being a SENIOR gives you a guy who is superman leave that \*\*\*\* and move forward. There are more companies where you can respected more. 
Right. I'd blackball a candidate who did it in a course sample unless the position was *extremely* junior and I thought they could be trained out of it.
&gt; The whole code is just really messy. &gt; &gt; can any of you tell me what framework I should use I don't want to be rude, but if you write messy JS code... there's a huge probability you'll write messy framework code, in any framework. You need to improve on code organization, architecture and the like. Writing well-organized code is a very pleasurable thing, specially when you look at it 3 months later. Based on that, my suggestion is not to pick a framework right now, but instead work into refactoring your current app in JS, trying to organize it better. This will qualify you as a better programmer overall, and it's worth the effort.
I recommend you trying out meditation, stick to it for at least a week. It might not help you code better, but it might help you approach and experience things in a different way and help you to be able to improve. It's important to take care of yourself.
Even without an IDE feature to remind you of a variable's type, you still shouldn't need it. If you can't remember what type your variables are, the variables' scopes are too big. I think this convention came from when 100+ line functions were the norm. Now that everyone has adopted the practice of splitting code into smaller more manageable logical chunks, it's no longer necessary or helpful.
With vscode and eslint, you can get immediate warnings if your code produces an error. I dont use semicolons because I genuinely believe it makes the code look cleaner. Its a preference. With eslint and vscode i can get notified of a semicolon error immediately and add one in if its necessary. This has happened to me twice in the last year of coding. There just arent that many places where semicolons are required in your average code bade. 
One thing that I always tell any level developer is: "do not compare yourself to other devs, instead compare yourself to the code you shipped yesterday" `&lt;br&gt;` The bets way to grow is to BE better. best of luck mate.
There's a clear connection between an object and a dictionary. The problem is that the use cases are distinct, yet JavaScript conflates them.
Hey. Senior full-stack developer, here. Getting fired is not *necessarily* an indicator of your skills. It *could* be, but there are a few flags in your story that make me think it probably has less to do with you personally, and more to do with the company you worked for. Consider all these possibilities: * You had been there less than a year, probably making you easy to fire if they had to cut costs. * You had just added a bunch of features to your company's application. They may not have had any more work for you. * There could easily have been a personality conflict you weren't aware of. * Your skills might not have been the right fit for the job, even if they were exemplary. That last one is important. Let me give you some background on why... I know my way around Java, C#, PHP, C++, MySQL/MariaDB, MongoDB, JavaScript, CSS, and more. I'm confident and comfortable in all of them. I'm flexible enough that when I'm asked, "Can you build X with Y," my default answer is "yes," regardless of the values of X and Y - even if Y is a language I've never used before. But all of that means I'm a jack-of-all-trades, and not necessarily very *fast* in many of them. In the right job, that's perfectly fine. But you know what? A while back, I wasn't in the right job, and got let go. That job involved rapid development in Node and React, and I wasn't fast enough with React. It was a high-pressure environment with constant deadlines - the kind of environment where someone who has dedicated his professional career to React and can churn out components at lightning speed will shine, but my particular skill set wasn't as useful as it looked like it would be on paper. So if any part of your story feels like it matches mine, consider the possibility that you are perfectly fine for a different senior position, but not well-suited to the one you were in.
I can't pretend to know your situation, but from hearing you talk it reminds me a lot of a really good friend of mine. In his case, he's a developer with many years under his belt, and constantly has anxiety that he's not capable and doubts himself. I know his skill set and know this isn't true. While I can't say for sure that's also you, it's possible. anyway, what i'm describing is called [Imposter Syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome). On that note, another important thing to consider: as a developer we get laid off or fired constantly. I've been at this for about 15 years and only quit one job intentionally, every job i've had(about 12 or so) I've been fired or laid off(or fired when it's really a layoff so management doesn't have to admit to the other co-workers they'll get laid off soon too). The unfortunate nature of our line of work is that we're in demand to accomplish a goal, then often times they kick us to the curb if they don't have a reason to continue justifying our position.
Hi /u/Krizerion, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/U4-EA, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/iskake, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/codeforce11, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Pudgima, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AsteroidSnowsuit, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Cock-tail, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/neerajdana, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ResponsibleOstrich4, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Pudgima, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MilkForBones, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/PlatformKing, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dan_zg, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yass988, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mmPvEhunter, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nowayll, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Joeyhowellart, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bom_tombadill, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thelynched, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vGeorgel73, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/torrign, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/knightofren_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks! I generally have a pretty busy "after work" schedule. Going to carve out some time to just code more. Hopefully that also includes reading some of this guys really nice code. 
If you get canned, it would then be time to look at mid-level positions. Until then, however, what you owe to your current employer is your best work. Leaving your current position for a (likely lower paying) mid-level position would be sacrificing earning for comfort. Unless it would be better for your family to do so, I would suggest writing down the features you are lacking as a senior and then steps to making up ground in each segment. You'll be kicking ass in no time.
You will be fine. I've seen a former coworker who was \*terrible\* at his job get fired and just lie his way into several other jobs. Like he lied about all of the work he did here (made up a bunch of stacks and claimed he wrote on all of them). Now he works for CISCO. &amp;#x200B; Also, you have to be brave when you fail. Getting fired is part of the game. Make sure you have a big fat stack of fuck you money and don't stress when it happens.
Sounds like he was doing you a favor and was just letting you know he fixed it. &lt;--- this should be pretty routine courtesy among a team of devs. 
He said he @'d him on the bug. That's not a "callout" or shaming, it's communication. It might be worth complaining about if he didn't cc him. This is paranoia driven by insecurity.
This is how i've been feeling. I know javascript &amp; jquery very well but all people are looking for these days seems to be these frameworks. Not that i'm against them, its just so hard to keep up with all these trends and the crazy amount of dependencies they have.
I guess I just don‚Äôt consider tagging someone on GitHub, a platform made for developers to communicate with one another in the work place, to be ‚Äúouting a teammate.‚Äù
I'm a dev with 9 years of experience. A lot of devs are a special bread of people who love to be right and love to prove others wrong. The truth is, many of us devs just have poor people skills. I empathize with making mistakes as a senior dev and with being called out on it. I've found the best way to handle it is to just own up whatever thing is wrong and to thank whomever pointed it out. You can't expect to never make mistakes or to know everything just because your job title has "senior" in it. It's also not fair to yourself to let other devs get you down like this because of an @ on GitHub. Take it an move on, cuz next time that other dev is on vacation, you are going to have to fix one of his/her bugs. 
We're working on a hybrid mobile app and we had to go back to MobX 4 so that we could support iOS 9.
I've used Pixi for years. It's a damn fine library. The API is very similar to Flash.
Thank you, I think you just made me a better dev/person.
What? I said that they disagree with me about you being unemployable. No need to be nasty about it.
My thoughts exactly. Did they specifically tell you that you were being fired for poor performance? I've been around long enough to see loads of really great people let go because of some decision that was made three levels above them in the chain, and also plenty of utter incompetents somehow cling on forever by keeping under the radar. I reckon (anecdotally) about 70-90% of layoffs are either unconnected or minorly connected with the employee's performance. &amp;#x200B; As an aside to all that, if job stability is super important to you, maybe consider moving to Europe where it's super difficult to fire people...
Developing commercially is inherently anxiety inducing, cos ur constantly having to anticipate what's gonna go wrong next... esp maintaining legacy / big codebases. You're essentially being paid to worry about how shit the codebase is and how much money people will lose if smthing goes tits up. You kinda have to be pessimistic and anxious about it. Just re-focus the anxiety on doing your work better...
This is *actually* what I wanted to say in the article ;)
yeah, absolutely! I don't want to be insensitive to the trauma and insecurity, I know that shit's nearly impossible to control. But identifying insecurity as the underlying emotion is a good start.
As someone with crippling anxiety and trust issues and a possible personality disorder, I strongly suggest you find an effective therapist and possibly a psychiatrist (the vast majority of them are dangerously incompetent...prepare to do a lot of research and pay out of pocket 100% for one who knows what they're doing). No matter how much you learn, it's never going to be enough with anxiety. I just became a principal consultant at age 27 and that still doesn't feel satisfactory, I don't see it as "wow this company really trusts me to help guide them in the future", it's more like "wtf were they thinking? I should just self-sabotage this shit so I cause them less suffering in the future." It can lead to some truly destructive thought processes and by refusing to acknowledge it for the past few years or do anything to improve myself, I have suffered terrible mental, emotional and social consequences. My anxiety can get so extreme that it feels like I cease to become a person a times, that I'm just watching a movie in my life with no control over my body, and I really struggle to connect to people and not feel alienated/isolated/outcast. I say that not to scare you; my mental health issues are on the more extreme end of the spectrum, but I definitely identify these feelings. You have to learn to love yourself, be patient with yourself, and realize that your job is not your identity. You don't have to get home from work and contribute to OSS for 6 more hours before you write a blog post and do hackerrank exercises in your sleep. If you're passionate about dev and you are truly happy doing all of it, awesome! But if you're doing it compulsively to distract yourself from feelings of self-loathing and disconnection and failing to take care of your health in order to further pursue your insecurities, I can assure you that it's not fun. Feel free to DM me if you need someone to talk to. I ended up venting a bit too much...I've only recently slowly become aware of this pattern and it sucks to face the facts. You're not sentenced to your future by these things though. Good luck bruh
If the lambda is long (has a body, maybe 5ish lines) I might be confused and think that `currentUser` represents some externally declared variable that is whatever user is signed in
Whatever I can do to help my dev-bros!
Sounds like you work in a toxic environment; the last place you worked too - sounds like you know how to pick them. In practice things do go wrong, when they do, its important that the leadership of your team employs engineering principles to get to the bottom of why they went wrong. At my company, we use 5-whys to unpack why things went wrong. Its supposedly a safe place to reflect and make suggestions on how to improve. Usually when production burns down, its not one person's fault. Is always interesting to hear peoples suggestions on what they thing could've been done better. Other people have also mentioned "titles are titles". If you work at a company a build a lot of software or take ownership of a lot of software at any pay grade level, you might become the hero that people depend on when things go wrong. It becomes a burden and wears you out in the end. That's when developers get fed up and move jobs and the cycle continues.
&gt; *My thoughts exactly. Did they specifically tell you that you were being fired for poor performance?* Most companies won't even tell you why they're doing it. Mine didn't. I ended up running into a few people I'd known inside the company and finding out from them it had been a "no-fault" firing. &gt; *I've been around long enough to see loads of really great people let go because of some decision that was made three levels above them in the chain, and also plenty of utter incompetents somehow cling on forever by keeping under the radar. I reckon (anecdotally) about 70-90% of layoffs are either unconnected or minorly connected with the employee's performance.* I worked at a Fortune 500 company for a long time that this perfectly describes. Rounds of layoffs interlinked with rounds of hiring were a way of life there. Didn't like the job you were doing? Wanted a raise? Just wait until your department is laid off in six months and then apply for the job you want three months later! It was insane. &gt; *As an aside to all that, if job stability is super important to you, maybe consider moving to Europe where it's super difficult to fire people...* I've heard that's something of a misunderstanding. It's easy to fire people if they're genuinely incompetent. It's just that as an employer, you have to be competent yourself about documenting their incompetence. And a lot of employers are themselves too lazy to do it properly.
I've unfortunately had to let people go over the years and there are a number of recurring reasons. I don't know why you've been made redundant and how it works in the US but were you given any specific reasons as to why? &amp;#x200B;
Do you have an actual question? You posted this without any details.
Yeah that's a dick head move and very unprofessional. Shouldn't have taken the task unless it was high priority. And shouldn't have dropped your name in the comments. Anyone can look at the blame if they're that inclined. I've told this to other devs under me before (I'm a lead engineer btw). At the end of the day, the user doesn't care who did what, how we got along or what was said. They care that the product works. So let's try not to be dicks to one another and get things done right the first time.
I'm less mad about it now. It's definitely not cool, but I don't think he deserves to be crucified for it. I will def talk to him when we have a chance. Maybe it will make our relationship a bit better. Worst case, it doesn't. Lol 
I agree in the light of a new day. The call out is still not cool, but not worth some of comments in this thread lol 
&gt; A professional software engineer follows the specifications of the language being used Automatic semicolon insertion is a well defined procedure in the ECMA-262 standard.
I totally feel you. I've been working as a developer about 9 years and a couple of years ago I took a decision that improved my life. I've been senior (frontend and backend) developer these last 4 years working in different sized companies. 2 years ago I passed out in one of my jobs because of the amount of pressure I had (since then I cannot drink caffeine). So I took a decision: taking my job as what I do for living. Something broke? We will fix it. Bad work environment? I leave. We are lucky enough to say that we can find jobs in a week, so let's use that to enjoy our lives :) &amp;#x200B;
Pro tip: he'll be back to JS/TS :)
It's somewhere between the two. It's not just that you have to document their incompetence, you have to also document what steps you've taken to help them remedy that. Also, they have to be properly negligent, not just below average. My understanding of most US states (don't know about CA specifically) is that you can just keep firing people for being below the median and go through another hiring round with little worry. Getting away with that is much harder in Europe - for example if you make someone redundant (as opposed to firing for gross negligence) you not only have to be able to show that you couldn't find another position for them within the same company, but you're also not allowed to hire anyone else into that position for at least a year.
That analogy is completely wrong and makes no sense. OP said numerous times about his self-confidence after being fired, and how being called out infront of everyone has him really worried about his ability and level. Not once did he complain about him picking up bugs that were assigned to him. He's just commented on how he feels after being called out infront of his team on it.
- boilerplate You mean the framework itself? Sure, Angular is big, but it is a whole complete framework with a lot going on. We live in an era of typical download speed in tens of megabytes per second. All frameworks are tiddlywinks in the face of that, might as well go for the gusto. Most latency is parsing, not download. Also, Angular has modules so you can break an app into lazy loaded sections. I don't know what you mean about component re-usability, 
You're the reason I hate webdev on reddit. Quickly tell me why you are continuously passive-aggressive? Quickly now!
Typescript is a great start and will help immensely with many of these issues. &amp;#x200B; As far as side effects go, in pure fp, the consensus is to represent side effects as return values (preferably with a type system) which are returned by pure functions, compose those pure functions to create a sequence of side effects, and then send the composition to an "executor" to run the side effects, thus pushing the side effects to the "boundary" of your application. &amp;#x200B; A very general effect system can be represented via \`IO\` from fp-ts: [https://github.com/gcanti/fp-ts/blob/master/src/IO.ts](https://github.com/gcanti/fp-ts/blob/master/src/IO.ts)
It‚Äôs great when people help you with your code to make sure bugs don‚Äôt go into production. Being thrown under the bus at a competitive job is not great. IMO, find a way to channel that into studying like crazy to catch up to where you feel you should be as a dev. Find a mentor, take an online class, and &lt;em&gt;practice&lt;/em&gt;. Don‚Äôt go backwards in title unless it‚Äôs a vastly more competitive company where you‚Äôre likely to take what they‚Äôve got open to get in the door. Just shown earnest interest in improving, come up with a plan on how to do it, and deliver.
If you are senior, you can't go back to mid. You have to learn to be a better senior developer
I do wish I was part of more meetups where I could explain and overcome my coding issues without the fear of it effecting my job. Maybe that should be my next step. 
Yeah definitely a consideration. I started looking at Proxies to do fine-grained change detection back in 2016. It was really the starting point for Solid. My hope was that by the time I was able to put forth something worthwhile the landscape would have changed more. I underestimated the power of Babel back then and figured that OS/Browser Vendors would have to do something more drastic by about 2020 as the gap would be too far. Instead I built on one of the un-polyfillable features. As I said Solid is useable without, it's just in my opinion the thing that makes it more accessible to people coming from other UI libraries.
I used to run a meetup for the purpose of giving back /and/ getting a bunch of people to teach me stuff for free. It ended up being a lot of work but the experience and community is unbeatable. If only to see what the smartest people in town are excited about and point yourself in that direction. You probably won‚Äôt be able to catch up on what‚Äôs popular today but if you study fundamentals and what those people are into, you‚Äôll have lost no time. It mostly comes out in the wash.
&gt; *...but you're also not allowed to hire anyone else into that position for at least a year.* I actually like the sound of that. Forces companies to really mean it, not just be using it as an underhanded way to cut salary costs.
move on bro, people change jobs at a 2 year rate either fired or burned out/unmotivated to continue, if shit doesnt work out try again until it does and then you will have enough experience in your belt to be a comfident senior.
Well that was a lot quicker than I expected.
More power to Google, just what we needed.
Is this a welcome end of an era?
Really disappointed Microsoft jumped on Chromium instead of Firefox in some way.
&gt; of course he called me out on it. Well this is kind of a big problem right here. When you do code review and your team members approve a pull request then everyone that approved the request shares in the blame. If there are any team members on the pull request that were on the pull request and didnt give any objections and just sat idly without responding then they approve by association and share the blame too. Coding in big projects is about team work. If a single team member can be blamed for a bug that his team members approved then it defeats the entire purpose of code review and everyone may as well just force push to master everyday.
in other words handing the title 'IE of our age' to Chrome
That would be safari
Chromium is open source under the BSD license. Its use and development is beneficial to the entire world. It's free to reproduce and modify at any point in time. Google's only benefit is to their browser from third party contributors, which may now include Microsoft. However, now Microsoft receives that same benefit, including Google's first party contributions. If anything, this is more power to Microsoft. There is no downside to anyone in contributions to open source software. It does not disproportionately empower any entity.
Chromium is faster than Fox. I'm using Fox for web only. Do you use it in other cases?
Doesn't it affect standards somehow? Chrome has a lot of control over standards right?
I would downloaded....
Microsoft releases **a build of** the new Microsoft Edge based on Chromium
Well, they're supporting IE11 until 2025. :(
I've never found the speed difference noticeable, and I've never felt "faster" was granular enough to really cover all use cases.
This would be awesome
Look at your memory...
Thanks! I‚Äôm glad to hear that.
Thanks for all the memories, IE. You won't be missed.
This is a pre-release, it's buggy (not production-ready yet). Please do report bugs.
Roll forward don‚Äôt roll back
Isn't it so that Microsoft wants it's fingers in chromium and all chromium related products
I'm not sure what you're saying, or if that means what you think it means.
Since chromium is open source Microsoft can implement their own standards without any interference from google. Although we could all benefit if all browsers implemented the same compatibility standards.
Wow! Just tried out this thing. Blazing fast!!! When do you suppose production could be ready?
You could expect it soon, maybe in a month. Thanks!
I have to imagine it was one half the fact that they already had experience with Chromium on Android, and also improvements to Chromium improve the large slew of Electron apps that are proliferating on Windows.
That seems likely.
Not sure how much influence Microsoft is sure to have there, but maybe.
And if history is any guide, some companies will continue to use it well beyond when MS ends support.
Clarification: they're keeping it patched with security updates. They are not implementing anything new into IE11. So yes, we're stuck with their horrendous implementation of Grid for a while.
We'll still have to test our websites on IE8, so, yeah....
not another js superset
Lol I hope I don't need to lie again like I did at the beginning of my career. And luckily, my ability to save money is much better than my ability to code confidently lol
"We" I don't.
No. It means the end of the browser wars ‚Äî which was, on the whole, a very positive thing for the Internet ‚Äî with Chrome + Google having been awarded far, far too much power. The AMP Project, for example, will likely now continue unabated, barring government intervention.
Downloaded it. It's much snappier than normal Edge. I have to explore it more to see if I like it more than chrome's UI though. I'd also be hesitant to use it if it doesn't have the extensions availalble in chrome.
Go to [caniuse.com](https://caniuse.com) and you'll see some APIs that only Firefox supports, and some that only Chromium supports. The support of significant features is pretty level, and actually I think the two can spur each other to implement more features. If one releases one feature, the other should probably implement it as well. Mozilla is still more driven by standards, though; sometimes even too far.
It's an okay article describing the event loop, some of the lifecycle and how process.nextTick, setImmediate and setTimeout work in practice. I think that it's a little more nuanced, and describing how the libuv works with it and the thread pool for I/O might be beneficial as well. In the context of getting work done, this is mostly a small detour.
Well if you are happy with that that‚Äôs fine. I would warn you that if you go to another company and don‚Äôt apply for senior jobs you might not get compensated as much as someone who does.
I'm guessing the problem they want to solve with the transition is developers not testing their websites in Edge, and I'm afraid the same is happening to Firefox more and more often as well...
I definitely write much less buggy code than I did 5 years ago.. and I have better tools setup to ensure that too. I‚Äôd be quite worried if someone can‚Äôt improve their code quality over a 10 year period.
Are you unwilling to follow company guidelines if they asked you to change your naming conventions to match theirs? Because of course that would make you unemployable.
At least in my situation we support Chrome and Firefox.... that are recent. We're lucky enough to be able to draw that line. Supporting Chrome and Firefox really is effectively the same thing... at least for me.
Sorry, but for all interfaces in JavaScript convention is to use PascalCase for function constructors (and classes) and camelCase for all properties, arguments, variables and exports, with the exception being CAPITAL\_SNAKE\_CASE for constant values. Similarly, while I personally prefer tabs over spaces, two spaces won. I feel it's often better to conform for the most part than fight upstream. Beyond this, I tend to just use prettier and eslint with some specific settings for consistency as a pre-commit hook.
I understood he was mentioned on github. I'm not quite sure what this called out on thing means here. Someone fixed a bug and wrote a note on gh about it. If it was bug assigned to the person who fixed it would this have happened?
Chromium is open source, so, I don't see why not.
i hope javascript will add some kind of optional typing similar to typescript. Kinda hate it when the community gets split.
It's a metallic red and says DDR4. It also looks pretty wicked, nothing at all like the green PCBs my first PC had in it. Neat! (Although I'm not sure how exactly that influences my browser choice)
There are two hard things in Computer Science: * Cache Invalidation * Naming Things * Off by one errors
Die IE! die! you miserable piece of crap!
You need to differentiate between Chromium and Chrome. One is open source, the other is Google's browser.
The only time it irks me, is that for a long while, the default JSON would use the same casing instead of the casing for the language JSON was created from (JS's camelCase). Also, it's a good idea to have an API client in at least one weakly typed scripted language and one strongly typed language, you will catch a lot of inconsistencies/difficulties that way.
I work for a company that arranges special contracts between Microsoft and gov agencies to support their installations of Windows XP because upgrading is difficult and expensive. You guys are fucked.
It's prefixing your variable names with an abbreviation of the type of data it holds. Descriptive names are usually encouraged these days as JS minifiers are available for production releases keeping your comments and naming descriptive.
There's always a root cause to every bug that's far more worthy of being criticised than the bug itself. Did you rush the code through without testing properly? Did you skim the spec rather than going through it line by line? Did you guess at the correct use of a function instead of reading its documentation? etc...
sumFoo
Honestly, even if they ended the support today, most people would have to support it for years since some companies are retarded.
Which is mostly unrelated to Chromium's dominance. To be crystal clear, Google's dominance and the entire reason why people should be worried is because of their overwhelming majority control of web traffic thanks to Google Search. This is how AMP is even a thing, all outlets jumped on board because effectively google said add it or die into page 2 irrelevancy. Chrome's popularity, again, is because of Google Search every single person guaranteed first heard about it on the google search home page or some popup on a google page. Microsoft using Chromium now, or heck, even if Firefox started using Chromium, ultimately means nothing due to the license. They can still implement their own standards (likely won't, most browser devs by now are tired of that mess), and change things to their liking.
&gt; Supporting Chrome and Firefox really is effectively the same thing Can you automate firefox tests? I know puppeteer + selenium (and others) to do that on chrome but I'm not aware of an automation test framework for FF.
I actually sometimes do similar to normalize function inputs that have expected mutations... usually more about ensuring an array for the next step. Don't think I've ever done a reassign with a reducer. Reducers are usually used in a return chain.
In terms of what, exactly? There are a fair number of Github repositories of things like PureScript [frameworks](https://github.com/passy/awesome-purescript), games, and things like that. Unfortunately it's even more niche than Elm, being as it is even further from JavaScript. A handful of companies use it, like [SlamData](https://github.com/slamdata/purescript-halogen) and IIRC believe a few banks that work with Haskell backend. It's a really fantastic language, though. It's like Haskell if someone redesigned Haskell without all the warts from years of experimentation.
Is it written in C
Isn't FF based on Chromium?
Don't forget that **the acquisition of Github** gave them access to the Electron Framework which uses Chromium. From a business perspective it has more sense to ditch EdgeHTLM in favor of Chromium than Gecko or Quantum.
I agree with anything you are saying, but something like "giving raises lower than you get hopping companies", I mean thats just the world sometimes, I have gotten 50% increases for companies, justifying giving a current employee a 50% raise is a very hard thing to do for the same position. I agree with bad management, and crunch culture(I have switched companies for both reasons), but I don't think either of those things are intentional. Saying "burn and churn resources" sounds intentional. Also in those situations it seems like many other resources are in the same spot. Being a PM or manager seems even hard to get treated well.
When I was first starting out (around 1996), the senior devs required hungarian notation. It's definitely a position that's changed over time. I always hated it even then preferring descriptive names. Once minifiers became an option, there was much less reason to reject more verbose and descriptive names where it makes sense.
Ask him how he can tell the difference between a NameSpace, a Static Class and Property without intellisense.
Yeah, I've been cheating on .NET with node a bit lately. I actually like working full stack JavaScript so far but that might change when I inevitably get stuck in dependency hell.
Both puppeteer and Selenium can use Firefox drivers, so it's the same process as Chrome. The api may differ a little bit though.
Yeah, Selenium works with Firefox (it started life using that IIRC). Others do too.
It seems that a lot of developers here are having or have had similar issues in the bay. I wonder if it would be worth the time to try to set up a meet up to help devs get over their anxiety and learn shit they have been tripping up on. Thoughts?
WE? üòÇ
It might be prudent. If you aren't strong and current on more functional development with javascript as well as current module systems, redux and possibly a loose understanding of GraphQL, and react with higher order components, it's time to buckle down. React's hooks are up and coming so worth at least knowing about as more movement in that direction is coming. If you want to park a while, then "enterprise" corporate development with Angular 2+ and TypeScript may work out better. Note, you can definitely use TS with React too. A lot of what's current in JS has been relatively stable for the past 3-5 years and is still evolving. I literally spend the first hour or two a day reading current blog articles via hacker news, echo js etc. I plan all my actual development in the afternoons, and push back on meetings that aren't in the morning before lunch. This allows me to still get everything done most of the time. I'm not trying to increase your anxiety, but a mid level position may be the best thing you can do for yourself. Give yourself the chance to learn and catch up again. I'm working in an environment that is historically C#, and getting things more modern has been interesting even in that space. The modern JS has been harder for some than others. There's no shame in shifting. I went from mgt back to development (less than a year) a few years ago because I just didn't like it.
No, Firefox has its own rendering engine(s). Historically it's been "Gecko" which is in the process of being phased-out in favour of the new "Quantum" rendering engine - which is much faster, more modern features, etc. It may even have fully switched now, not sure. Firefox is now my browser of choice once again - Quantum really has made a big difference, and Chrome was just taking far too many liberties (auto-logging-in to sites that have Google OAuth or something... that and the ridiculously specific targeted ads... it's too much)
Yeah?
Upgrading is expensive? Makes me curious about the bill that Microsoft is sending to you guys for the support. I'm sure that ain't cheap either.
I have yet to really see dependency hell on the server-side node. I try to write everything as simple and isolated as possible so it's easier to replace. Client side, sometimes is harder. There I use `webpack-bundle-analyzer` to get a grasp on what the larger impacts are. I also tend to favor Koa over Express, because wrapping modules/extensions is much easier than Express imho.
You can go to the normal Chrome Extensions store (just Google/Bing it), and download chrome extensions like normal.
It's the standard though for JavaScript. And if you use Babel or typescript, you still just use js files. Since it's the standard, and at some point node will be using it too, I might as well use it vs using 2 different ways. That makes even less sense.
Firefox is much older than Chrome or Chromium.
If the Business decision was to reduce interop gap between browsers, and increase market share, and the Developer empathy focused decision was to give developers a best-in-class set of developer tools, then using a browser with low market share, and using a browser engine w/o Chrome Dev tools would not be a smart choice. That's just my 2 cents :-)
I was joking. I am not a doctor.
Doesn't Mozilla make most of its money from Google though? It certainly was like that long ago - through search engine referals. I would be interested to see how much Google pays to Mozilla each year, and what that is as a percentage of Mozilla's income. That's what worries me really.. now Microsoft have teamed-up with Google, there is no "big hitter" on the opposing side from a financial perspective. That Microsoft, who dominate the desktop, have managed to lose the browser war is remarkable. I imagine a big part of that is down to losing the mobile war so badly, so early-on. So if you've got Google, Apple, Samsung, and Microsoft all on one side - who's there to counter them? Who's there to keep them in-check?
I've used both as well as the legacy Angular 1.x ... I will \*NEVER\* work with Angular of any variety again if I can avoid it. I've been a proponent of React for years, and it's finally starting to pass Angular in my area. I have no desire to work with it. YMMV. I feel that Angular is not worth the pain at all, in any way, shape or form. The biggest pushers of ng are mostly behind TypeScript that is even nicer, imho under React, though I prefer to work without it, but it's a reasonable compromise imho. Aside: Redux, there's a bit of getting used to it and slightly larger ramp up, but I feel it's worth it when even scaling to a mid-sized application.
Maybe I'm missing something but I jump back and forth between Chrome's Dev tools and Firefox's pretty much without issue.
How is anything in Angular easier than... ``` import React from 'react'; export default ({name}) =&gt; &lt;div&gt;Hello {name}!&lt;/div&gt;; ``` There you have it, a completely separated component in React.
Pedantic asshole here, the very simplest thing you can possibly change is probably dealing with semi-colons or tabs v spaces, since your IDE would likely deal with that automatically. Naming conventions not so much. Definitely agree with you though.
Funny, last angular project I worked on, I hadn't heard of ngxs and deferred to one of the angular-redux wrappers that was closer to Redux itself. With the store generally available having action creators on a service was super easy with async functions as needed.
Javascript is just another language. People have preferences, use cases, objectives/motives, fulfillment, etc some of which may or may not be compatible with what JS offers.
well, I'm still not using edge tho
I've been more than open minded... I've used *many* frameworks and libraries in the past 2+ decades for web development. I will chose React every time, and in fact find Angular so frustrating after 5 years of working with it off and on, I'll never touch it again (unless paid insanely well to deal with it).
Throw out almost all of the Microsoft code, use a common standard and you end up with a pretty decent product! Who would've guessed...
Cool. I will keep those in mind. I'm glad to hear the back end is less trouble. I already do a bit of angular so I've experienced that side of it.
I'd definitely take Vue over Angular any day of the week. Prefer React+Redux, but Vue is still preferable to ng imho. I just find app scaling with a team works better with react+redux.
We need more people in the word who can recognize a mistake and apologize. Cheers to you. I learned quite a lot from this discussion as well
Its because its insanely hard to learn!
&gt; I love the flexibility with no set variable data types. This is why some people do not like javascript. The problem with it is that it is too easy to do something the wrong way and not get punished for it until much, much later. There is a reason TypeScript has gained on popularity. Flexibility is not a bad idea overall, but when so many people are starting with their programming journeys with web development and jumping straight into javascript, they don't get punished for it and pick up bad habits, creating a negative view of javascript developers and javascript in general.
I have a passionate, vitriolic distain for Angular... React+Redux is far better imho for teams and scaling an application, specifically with feature based directory structures..
I would use to download and install Chrome.
Agree. It seems kind of desperate for Microsoft.
Where I work, there are some computers that still run Windows 2000. These computers aren't connected to the internet and they'real used to operate special equipment. To upgrade the OS we would have to buy new versions of the software/drivers that runs this equipment for tens of thousands of $$$. As long as we can keep these old ass computers running, that ain't happening.
They might want but have little chance succeeding.
They are using Chrommium. Why should it take much time?
When you move on from doing todo apps in React and you find yourself needing to write components which consist of more than a div and a single prop, you'll understand why everything is easier in Angular, which is as everyone has mentioned already, a framework for enterprise apps.
Woah, boy. This is beauty. I also recently made a chip8 emulator in JS. But that's much slower than yours. Why is yours very responsive?
okay, let's go...
Edge doesn't support ActiveX or Java so it's useless in a business environment that relies on applications that were made 5-10 years ago. We run Windows 10 on most of our desktops but Edge isn't even allowed to run because it would create confusion because everything we need to do our jobs requires IE11. For general web browsing needs we have Chrome which has a colorful icon and doesn't try as hard to usurp the default browser position.
I don't think it's a call out at all, it's simply using GitHub to communicate. I do it all the time with my team, and everyone knows that it's just meant as a way to ping a user, not for others to know who I took a bug report from. Whenever you @ someone on GitHub, it sends an email, meaning I don't need to send one myself. Meanwhile, that email contains a link to the issue, and any details about the issue/fix for future needs. It's a great way of keeping a paper trail of bugs, so we can solve issues quicker the next time they arise. He's not calling you out, he's just trying to communicate, like a good team member should. That being said, if you don't like it, how about you communicate with him? Don't wall yourself off from other developers, you should be chatting with them constantly.
I have over 15 years experience in C# and .NET and I have to say... I love Javascript :)
Selenium supports most browsers (and it actually originated at Mozilla). Puppeteer is by Chrome, but [they're working on Firefox support](https://aslushnikov.github.io/ispuppeteerfirefoxready/).
Not really -- Chromium contains the rendering engine and JS engine, and Google controls Chromium. Sure you're free to fork it, but MS did this so they wouldn't have to maintain that stuff.
Yeah same here, the primary reason being that those are the only two major browsers that run on Linux and can be automated using Selenium, so they can be automatically tested in CI. But there are more and more places that only actively test in Chrome, unfortunately.
It was invented as a stripped down script language to specifically do dynamic HTML in a browser. It was born dumb. Pulling it out of the browser and running it like a full language is sort of crazy, because there were already languages doing that that were designed from the ground up for just such a thing. So, I think it is a reaction to its proliferation, and the undue love people give it, usually because they learned it first, and don't see the point of learning any other language, for anything.
Bummer.
Adapting an existng browser shell and debug tools to a completely different engine, when their existing engine was specifically built to enable those functions... probably will take some time.
So.. you're saying exactly what I said? Chrome and Chromium is two different things. Chrome is based on chromium the same way the new edge is now based on chromium.
Majority of the browser comes from Google. Also we have no idea when they started. Do think this is a hail marry. Highly doubtful will do better than existing Edge.
I didn't like javascript because my initial exposure to it was bug ridden poorly written code. You can really hack up some crazy things in javascript. I fell in love with javacript recently because it's become a very powerful langauge for functional programming that has widespread adoption. I've actually switched to using javascript and node js for personal projects now.
There are already tutorials for all of those things out there already. What isn't out there right now is good tutorials for Firestore.
Preview build shared on insider, announced on twitter, reshared through reddit. Woo!
I often read about people preferring the Chrome dev tools. And honestly, I've now been using FF full time for about half a year and I still feel more at home with the chrome tools (plus they feel a few tens to hundreds ms faster).
They are not using their existing browser shell or debug tools.
The wiki has some info about [the different quantum parts](https://wiki.mozilla.org/Quantum), IIRC stylo (Quantum CSS) is enabled everywhere, the Web Renderer (Quantum Render) is behind a flag and the other parts aren't done enough yet.
I find css issues where it behaves different on chrome and Firefox, I found one just the other day where I needed a word-break on Firefox I didn't need on chrome. I think safari is closer to chrome. But yea, it not too hard these days.
I used to like Chrome dev tools more .... until I just happened to just store a bunch of development bookmarks in firefox to make alt tabbing faster and there I was working in Firefox ;) I find them a bit more logical in Firefox in some areas. Chrome feels a bit disjointed .... kinda like google as a whole.
Could you explain why you think that? If Microsoft can add to chromium and therefore if able to improve performance of chromium apps on windows. Or is able to influence chromium development in a way that is favourable for them by improving the code. I rather give it a high change of succes that they will get something positive out of it.
If they're air-gapped it's really not that much of an issue. Still vulnerable to stuxnet style attacks but for most that shouldn't be so much of a problem and can be avoided by good process.
Microsoft is not going to gain any traction with Edge. Most people will not even no they are using Chromium. People are already programmed to use Chrome. Someone else explained why MS did this. They have bailed from browser and this is an easy way to bail and not look like they bailed.
It's such a rare thing to find that ... is actually kinda a neat find! Less frustrating when it is so rare ;) Unlike early Edge and god help us all the other MS browser.
Still 7,24 % IE11 in the last 30 days. I don't think this will change for a while sadly :(
How? You can almost write ANYTHING and suddenly have a working script. JS gives a great baseline to learn more strict languages later. You need like 30 seconds for a hello world: Edit a html file, insert alert script, let's go. In comparison the amount of work to get a Java programm running is awful: Download an IDE, figure out how you set an entry point to your program and what you have to pick in the new project menu, understand what are imports, class, data types and parameters mean. JavaScript will be horrible if a programmer never learns anything else to improve. Many of my JS only colleagues didn't understand the concept of a class and instances because they always wrote cluttered code with regular functions here and there. They're not bad programmers for what they're doing in their job, but a lot of regular issues wouldn't happen with a strict language (and people who care to improve).
Humility is great and all but in my opinion as long as you aren't outwardly misrepresenting yourself by lying then you should be trying to get the highest level job you can get, don't undersell yourself. Find positions that you are just slightly unqualified for. It's their job to interview you and see if you meet their standards enough. By putting yourself in challenging positions you learn much faster, and become more qualified over time.
It's the lack of choice. I can pick from several viable languages on the backend, on the frontend there's pretty much JS and TS. As to flexibility - it's fine if you can control it, have a few people on the project. But I do work on projects where over the lifetime there's going to be dozens of people working on it - it means that more often than not, a person changing something is not the person who wrote that originally. You need a ton more tests checking trivial things a compiler could do for you, which is why typescript has been adopted for pretty much everything related to larger code bases in my company.
IE? IE still exists, this is an update to Edge.
thanks I understand what you mean, there is so much information, so much to know
Unless you have money
IE was more functional than edge
Oh. Well, then it's hardly Edge anymore.
&gt;Competitors using the same underlying open source framework explicitly means that they do not outpower each other. &amp;#x200B; You're acting like Microsoft and Google have equal power over the Chromium project. Google has absolute control over what goes in to Chromium, and all derived browsers either fork or follow. And as fewer people use anything else, the standards effectively become whatever Chromium does, just like it was with IE back in the day. &amp;#x200B; Best case scenario Google's services are always a step ahead because the engineers know exactly what future browsers will support and have the power to create new technologies like AMP or QUIC that competitors have to catch up to. Worst case Chromium engineers only worry about supporting Google services and Google services only worry about working in Chromium, and it's hard to use anything else. I'm already noticing more and more problems with Youtube and gmail as a Firefox user, while Firefox itself has become much snappier on other pages.
Good riddance. I recently had a change to my company's react app and was doing multi browser testing. It worked perfectly in every single browser, including IE, but it broke in freaking edge. Took another day and a half of work to get past this. I know some people feel that diversity and competition is good in the browset engine space, but personally I feel it's just a pain in the ass.
Edge was just the next version of IE so you can say it was never Edge.
That's kinda irrelevant for the purpose of this discussion though. Microsoft isn't forking Chromium, just using it. Google controls the upstream Chromium project, therefore they also control what web standard features Edge supports.
Agree that Firestore has the least amount of tutorials out of all the firebase products. Anything specific you'd want to see there? I've used Firestore pretty much exclusively for the past year, so I actually think I could put some good stuff together for it.
Unless it has to be in JS, why not use something like a GO language version that is just one executable on the command line... no cruft there and much faster :) Maybe another language... a few to choose from: [https://github.com/markdown/markdown.github.com/wiki/Implementations](https://github.com/markdown/markdown.github.com/wiki/Implementations)
That's objectively incorrect. https://kangax.github.io/compat-table/es6/#edge18
JavaScript is too flexible IMO. Give me a good compiler error any day over a JS TypeError or other random weird behavior I run into. If code is bad, it should fail fast and fail loudly. it's better to have to put in a little bit more effort writing the code in exchange for it's stability
The language itself is beautiful (except for a few warts), it's the tooling around it thats sucks.
At its peak I mean. If you compare peak web browsing back at its rise it was better than edge was at its rise compared to todays standards.
That would only be true if Microsoft just wrapped chromium in an edge package and called it a day. MS is free to add on whatever standards they want in Edge. This is a discussion I don't really see the point of, though. I was originally just pointing out that chrome and chromium are not the same thing. And they aren't.
what happened to v6?
Edge was actually pretty good. Except the fact that extensions were wonky in my experience, edge was kinda nice to use and also to develop for.
Hi /u/JohnTBorkowski, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Qik00, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheNFMan, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Moreover Mozilla license sucks. I work in a private company where we consider our privacy very seriously, so we avoid chromium based things as much as possible. We were developing an application related to SVG rendering and considered Gecko or their new WebRenderer but sadly we have to open source our code according to Mozilla license and our legal team warned the same. Then without much of a choice we looked into Blink and it was choosen. As we are using Blink, slowly everyone switched to ungoogled-chromium builds to use chromium debug tools. Slowly Firefox was ditched and just remains dormant in our laptops. So no company will never consider Firefox for their commercial closed source software. Their license might also be a reason that why Microsoft didn't use /r/firefox
Hi /u/rajdeepbharati, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Here's a sneak peek of /r/firefox using the [top posts](https://np.reddit.com/r/firefox/top/?sort=top&amp;t=year) of the year! \#1: [Mozilla will not update its privacy policy : it doesn't need to](https://blog.mozilla.org/internetcitizen/2018/05/23/gdpr-mozilla/?utm_source=newsletter&amp;utm_medium=email&amp;utm_campaign=mih-05-24-18&amp;utm_content=button) | [49 comments](https://np.reddit.com/r/firefox/comments/8m0f03/mozilla_will_not_update_its_privacy_policy_it/) \#2: [When my friends complain about Chrome](https://i.redd.it/b9voq7d53jr01.jpg) | [44 comments](https://np.reddit.com/r/firefox/comments/8bvpjz/when_my_friends_complain_about_chrome/) \#3: [Mozilla developer fixes Chromium bug because Google decided to break Chromium instead of fixing a Google site](https://twitter.com/zcorpan/status/1090719253379104779) | [62 comments](https://np.reddit.com/r/firefox/comments/aljhv7/mozilla_developer_fixes_chromium_bug_because/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
Unfortunately, "wrap[ing] chromium in an edge package" is pretty much exactly what they're doing. Since they're not forking, they have rather limited influence over what web standards features Edge supports. They can contribute new features back to Chromium (just like anyone else can), but it's entirely up to Google whether or not those changes actually make it into the codebase. Yes, Chrome and Chromium are _technically_ different, I'm just saying that in terms of how this move "affect[s] standards" it's kinda an irrelevant distinction.
They _could_ implement their own standards. The problem is, they're not going to. The whole point of this move was so that they wouln't have to maintain a separate browser engine, so unless they decide to go back on that move and fork Chromium, the standards that Edge implements will be almost entirely decided by Google.
Ha! ha! ha! you had me laughing so had. I wonder why you got so many downvotes though?
Browser display of annual calendar of year input by user, with current day of current year highlighted. Created with plain vanilla javascript, internet connection not required.
&gt; But mostly I use it because it let's me write Javascript using the LATEST features regardless of what legacy version it has to be transpiled and the transpiler handles all the polyfills for me. You can have it without typescript with no problem at all.
Yeah, you're probably right. I'm just going to say again that this isn't a discussion I want to have, as per previous post.
Agree, never come across any distinct issues across these two
Chrome still doesn't hyphenate text yet I think
How is this better or different than running `cal` in your terminal?
Highly paid programmers basically just copy-pasting code they got from GitHub. Say, is Microsoft hiring?
Most likely true, I read it in some articles before and I myself test web development on chrome, I dont like dev tool on firefox or edge
https://safari-is-the-new-ie.com/
Yes! It is very useful
IMO, it's not that hard *now*. when i started using it with v1 and v2 i found it to be pretty confusing, but admittedly i'll say that was largely due to the lack of good examples to follow. their documentation was pretty awful, so much so that they even had a whole separate page dedicated to v2
The basic result is the same, although I think nicer looking, and just as fast. It may also provide for a greater range of years.
This "is" thing is from Apple, they used it everyware a long time ago. All developers that used an apple computer 25 years ago, a lot of "is" variables there
What exactly went down? If I get tasked to work on a ticket that was assigned to someone else, I would tag the person to both - A) let them know they don't need to work on this and duplicate work (duplicating work feels terrible, over-communicate), and - B) have them review it since they might have had more time to think about it than I did e.g. &gt; This PR fixes XX bug so we could close it out in this sprint, @jeremyStover I know you were previously on the ticket, please take a look and let me know if there was anything I missed
I actually agree, **depending on your background**. I think there's so many "weird" things about it, especially in es5 that you still have to learn to truly understand es6+ that it makes it a pretty hard language to learn. I've been teaching JS to young devs for the last 2 years, and here's what people struggle with: 1. `this` in JS is completely bonkers compared to other langs. It's very hard to teach. 2. It's async, hard for some to grasp that concept 3. Hoisting. 4. So. many. tools. 5. Event queue 6. Call stack 7. Prototypes I'd say if you came from something like C++/Java it might be hard, but if you have a young malleable brain--it's easier to understand. I think it's important to learn older es5 JS to truly understand JS. Like how modern "classes" are just functions, etc.
&gt; sadly we have to open source our code "We used the code we got for free to make money for our company, but didn't feel like contributing anything back". And, well, MPL is not even a strong copyleft like the GPL.
Yea the issue is I get complacent and assume things will work between the browsers, when they don't. I still have to support ie11 though, edge is a dream compared to that nightmare.
Not good that browser code now only use two code bases from two sources. We need competition
&gt; but sadly we have to open source our code according to Mozilla license I guess it depends on what you're doing but I'm not sure Microsoft's situation and your situation really are the same thing.
I think that's one of the problems, though. If another company values a good dev at 50 percent higher salary, but the current company wants to give them a 3 percent raise this year, why would the good dev stick around? Or more specifically, why does the current company not value the devs increasing skills as much as the other company? I certainly couldnt fault anyone for leaving in that situation.
so chromioum is standard now lulz xd?
There is a lot of factors in that, a big one is how much each company actually is able to spend.
To think that Microsoft would just sit there and accept code from Google is really ignorant indeed lmfao. I mean people really need to not underestimate Microsoft, you don't become the number #1 of alot of good things by being stupid.
I've heard rumors that MS looked at Servo but found it a total pain to integrate with.
Looks great really. Something picked my interest. How did you use rust in this project? Did you use rust bindings for node? But I see you have a `.node` file somewhere. Are you relying on node C++ native add-ons too?
I dont understand why Microsoft would have less power than google, you really need to understand what open source means lmfao
More standard than not honestly. It's open-source and has many flavors of browser built on it. I'm gonna feel safe considering the chromium-based edge to be following at least "a" standard if not "the" standard compared to how it was built originally. Complaints about the fragmented browser ecosystem aside, you have to at least admit chromium is pretty decent about trying to follow agreed upon standards for new technologies. Microsoft developed browsers have never been accused of that in any shape or form.
i have two questions about this: 1. this mini example references pulling the \`React\` module from unpkg. does putting that import line in every JS file you have result in browser caching the library call? or is there an assumption that you wouldn't need to import the \`React\` name in each file. 2. the workaround to use a JSX-like string that gets passed to a function seems like it would get pretty nasty as larger and larger components get built. has anyone used this at scale, aside from a trivial example such as this one? it seems like this would get very difficult to read and work with.
&gt; It's much snappier than normal Edge Give it time.
The second dark ages is coming :(
because this is about Edge and not IE.
I agree that Chromium has been good with standards and its very performant but to say its standard is just too much :) Standard = Specs Browser = Implementation
It's not but they wanted to keep the Edge branding for some reason
&gt; To think that Microsoft would just sit there and accept code from Google is really ignorant indeed Perhaps you should read the OP before calling others ignorant, because that's _exactly_ what they're doing: &gt; Our plan is to continue working in Chromium rather than creating a parallel project. They'll be submitting pull requests upstream obviously, but as Google controls the Chromium source repos it's entirely up to them whether or not those PRs get merged.
The guy who told you that is unemployable as a HR person.
Progressive enhancement doesn't have extra costs. Abandoning it does.
Maybe if all browsers use the same core, it'll make it easier for them to collaborate to rip out JavaScript and throw it away and start over with something that didn't evolve from a nasty hack.
It's worse than that. Even if Google exhibits the most restrained, moderate behaviour in its stewardship if Chromium, it still doesn't change the fact that it's getting harder and harder for a new renderer project to break into the market. This is bad for users in a number of ways. It means that the development of the web is constrained by the architecture and tech debt of the Chromium project; it means that poor leadership by vendors can derail the development of web standards; it means a web that serves the status quo of the large vendors able to influence the Chromium project. I've decided to switch to Firefox now and I encourage other developers to do the same. FF's dev tooling these days is superb and Quantum's performance is genuinely meaningful in a tab-heavy dev workflow. I urge everyone to at least give it a try.
[removed]
I feel all companies should at-least strive for supporting Chrome, Firefox, Safari and then at the very least IE11 with polyfills. That should give you a pretty broad spectrum, where you aren't giving anyone a super fragmented experience.
thats really ignorant because ultimately you think that if Google commits a code that is bad you think Microsoft just accepts that and move on, thats just stupidly ignorant lmfao.
A reign of terror ending for web devs everywhere.
Using it right now. Decent
I get home around 8 sometimes and eat and while eating talk with my girlfriend. After we eat I‚Äôll go and work on something or watch some tutorials. On the weekends we will make plans to do stuff and spend more time together either in the morning or evening and then I‚Äôll work on other stuff also. You could one night watch a movie with her and the next night work on something. You just need to communicate that you have stuff you want to work on after work as well.
That's not true. Edge was built from the ground up to be a modern browser, integrated into the OS. It doesn't have any IE legacy features (e.g. ActiveX).
Could be swappable for `Math.truncate()`
Thanks for the compliment. We're using ffi bindings with precompiled rust shipped as native node add-ons. Does this satisfy your question?
It has to be JS, it can be in PHP if JS is utterly out of the question
&gt; I still feel more at home with the chrome tools (plus they feel a few tens to hundreds ms faster). I feel the same way. Firefox is my daily driver (has been for many years) but it still feels clunky/slow compared to Chrome's dev tools
I seem to remember a story about google's plans to integrate features that effectively render ad blocking useless into Chromium. That seems like a bad time.
One down, two to go! IE11 SafarIE
It doesn't have Edge's smooth scrolling yet, which is basically the only thing keeping using Edge rather than Chrome right now
I don't see this as giving up, it's combining efforts. There's a benefit to having competing implementations but with Microsoft and Google contributing towards chromium it might increase innovation
&gt; Edge was built from the ground up to be a modern browser, integrated into the OS You are free to believe the marketing bullshit. &gt; It doesn't have any IE legacy features (e.g. ActiveX). This is true but I don't see how it proves your point. As a matter of fact the tablet and mobile versions of IE didn't have these either.
JavaScript: Understanding the Weird Parts Created by Anthony Alicea
Build Chromium then. Don‚Äôt use chrome. Chromium doesn‚Äôt have any assets trademarked by google and you can easily disable usage reporting functions.
/s? I dont mean to be mean.
Been waiting for this moment for quiet a while, thank you for a reminder !
Thank you, yes it does. I didn't know we could use Rust that way. If you don't mind me asking, what are the steps concretely to pre-compile rust as native node add-ons? The best I could find about it is this https://blog.risingstack.com/node-js-native-modules-with-rust/ but it doesn't quite looks like exactly what you did.
What does your schedule look like if you're coming home at 7 and going to bed at 10? It sounds like you're either working 10+ hour days or you have several free hours in the morning. If you're working 10+ hour days, I hope your employer is giving you more than 2 days off per week. Keep in mind you don't need 4-8 hours to get something done. You can get home from work, eat dinner, and then spend just 30 minutes or an hour working on a side project. Being able to switch my mindset towards making small incremental changes on personal projects has made a huge difference for me personally.
Actually smart. Gets them out of doing a browser without looking like it. Not going to help them slow the bleeding. For browser and Bing.
She's not really the kind of person who likes spending time alone as she has nothing to do once she's home. But I'll talk to her!
You have a lot more control over how to structure React applications than probably done in your coursework. I'd suggest taking a look at the Next.js templates, which may be closer to your style. Also, look at the @material-ui/core library, second to none imho.
Yeah, I'd say that analogy's way too harsh on The Register. They're unabashedly snarky muck-rakers, but they don't take themselves particularly seriously. Even in terms of reporting quality, they're no Ars Technica but I'd still put them a couple categories above the Daily Mail.
I don't work that much (8 hour days) but I need more than an hour to commute to the office by bus As for the side project, I find it almost impossible to only work for an hour: once I dive back into it, my brain is at full steam and that's when I'm productive.
The problem is that Safari can have some really weird functionality, the agent style can often feel intrusive when you're trying to create a consistent experience cross-browser, which can lead to some really strange bugs in my experience. Plus, Safari can have some random WebAPIs missing
I'm writing composite controls based on material-ui just fine... including SVG directly in React. Everything from simple crud forms, to more complex interactions... it's been absolutely fantastic so far. class PageImage extends Component { svg = React.createRef(); cover = React.createRef(); over = false; componentDidUpdate = () =&gt; { return this.mouseOut(); }; componentDidMount = () =&gt; { this.cover.current.addEventListener('mousewheel', this.wheelMove); }; componentWillUnmount = () =&gt; { this.cover.current.removeEventListener('mousewheel', this.wheelMove); }; wheelMove = e =&gt; { if (!this.props.pageReview.zoomEnabled) return; e.preventDefault(); if (e.deltaY &lt; 0) { this.props.actions.increaseZoomLevel(); delay(0).then(() =&gt; requestAnimationFrame(() =&gt; { this.mouseOver(); this.mouseMove(e); }) ); } if (e.deltaY &gt; 0) { this.props.actions.decreaseZoomLevel(); delay(0).then(() =&gt; requestAnimationFrame(() =&gt; { this.mouseOver(); this.mouseMove(e); }) ); } }; mouseOver = _ =&gt; { window.clearTimeout(this.mouseEvent); this.mouseEvent = setTimeout(_ =&gt; { if (!(this.cover.current &amp;&amp; this.svg.current)) return; if (!this.props.pageReview.zoomEnabled) return this.mouseOut(); this.over = true; this.cover.current.style.display = 'block'; this.svg.current.style.transform = `scale(${this.props.pageReview.zoomLevel})`; }, 10); }; mouseOut = _ =&gt; { window.clearTimeout(this.mouseEvent); this.mouseEvent = setTimeout(_ =&gt; { if (!(this.cover.current &amp;&amp; this.svg.current)) return; this.over = false; this.cover.current.style.display = 'none'; this.svg.current.style.transform = `scale(1)`; this.svg.current.style.transformOrigin = `0 0`; }, 100); }; mouseMove = e =&gt; { if (!this.props.pageReview.zoomEnabled) return; if (!(this.cover.current &amp;&amp; this.svg.current)) return; const rect = e.target.getBoundingClientRect(); const x = e.clientX - rect.left; // x position within the element. const y = e.clientY - rect.top; // y position within the element. this.svg.current.style.transformOrigin = `${x}px ${y}px`; }; getHighlightTop = (line, image) =&gt; { if (!line) return null; return ( &lt;rect className="overlay overlay-highlight overlay-highlight-top" x={0} y={0} width={image.width} height={line.positionTop - line.height / 4} style={{ opacity: 0.5 }} fill="#000000" /&gt; ); }; getHighlightBottom = (line, image) =&gt; { if (!line) return null; var top = line.positionTop + line.height + line.height / 4; return ( &lt;rect className="overlay overlay-highlight overlay-highlight-top" x={0} y={top} width={image.width} height={image.height - top} style={{ opacity: 0.5 }} fill="#000000" /&gt; ); }; render() { const { classes, pageReview: { zoomEnabled, currentPage, highlightLine }, } = this.props; const validLines = currentPage.lines?.filter(l =&gt; l.statusCode === 'OK').length || 0; const image = { data: currentPage.image, width: currentPage.imageWidthPixels || 3304, height: currentPage.imageHeightPixels || 5104, }; return ( &lt;div className={classes.root}&gt; &lt;div onMouseOver={this.mouseOver} onMouseOut={this.mouseOut} onMouseMove={this.mouseMove} className={classNames(classes.container, { [classes.zoomed]: zoomEnabled, })} style={{ paddingTop: `${(image.height / image.width) * 100}%`, }}&gt; &lt;svg ref={this.svg} className={classes.svg} viewBox={`0 0 ${image.width} ${image.height}`} version="1.1" xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink"&gt; &lt;image id="ScannedImage" xlinkHref={`data:image/png;base64,${image.data}`} height={image.height} width={image.width} /&gt; {currentPage.lines?.map(line =&gt; &lt;OverLayLine key={line.lineNumber} line={line} /&gt;)} {this.getHighlightTop(currentPage?.lines[highlightLine], image)} {this.getHighlightBottom(currentPage?.lines[highlightLine], image)} &lt;/svg&gt; &lt;div ref={this.cover} className={classes.cover} style={{ display: 'none' }} /&gt; &lt;div className={classes.validLines}&gt; {validLines} Valid Line{validLines === 1 ? null : 's'} &lt;/div&gt; &lt;div className={classes.bates}&gt;Page {currentPage.batesNumber}&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ); } } export default connect( mapStateToProps, mapDispatchToProps )(withStyles(styles)(PageImage));
He was brought on to "10x" the company, but it's unclear as to whether he's actually done that or moved towards it. That level of turnover at a previously-successful company is a little ominous. Some turnover of unhappy and incompetent employees can be necessary to turn a struggling company around, but it sounds like NPM wasn't struggling and the people laid off weren't necessarily incompetent or unhappy.
Beyond anything I'm doing, I'm sure Facebook, Instagram and [Walmart.com](https://Walmart.com) are far more complex than anything you're working on.
The current way Firefox handles proxies might be part of the problem... Can work, but takes a while to set up..
try running decode in your main loop 9/10 times instead of 1
As I heard it, the original inventor of Hungarian Notation intended to format to include semantic information, not type information. For example, it might use v3Thing to mean variable that was a conceptual vector 3D type, while the variable p3Thing2 would represent a conceptual point 3D type. Both things have an identical structure (three floats: x, y, and z), and many systems are not designed to distinguish between them as static types (because they are so similar and so often used in the same ways). Thus, having a semantic differentiation in the name might be useful. If one were to make a type-based Hungarian Notation for these, they would be f3Thing and f3Thing2, removing a potential important differentiation, and adding what is redundant data about the type structure. In a staticly typed system, the compiler, editor, and type declarations will inform the structure of the values, and in a non-static system, the structures can be looked up and possibly statically determined via editor tools.
It looks like they've done a fair share of work so far changing out images, the layout is tweaked and imho slightly better looking so far. Import worked without issue, UBlock Origin and LastPass are already available (Authy from the chrome store failed though). The account signon stuff is likely completely new to chromium, using microsoft accounts, of course. I think a lot of it probably comes down to MS experience with Electron applications at this point being what it is. Also regarding MS wanting to push out more into other platforms. I'll believe it's there when I see a Linux version though. I'm still pissed there isn't an official Linux version of Teams. Considering MS already worked out most of their kinks with the work on VS Code. Not ready to swap out my daily driver, but it's definitely worth a look now.
Given how many of their cross platform apps are now based on Electron, and how much infrastructure is now using Node, not that surprising.
&gt; I find it almost impossible to only work for an hour: once I dive back into it, my brain is at full steam and that's when I'm productive. For me this is mostly a matter of breaking the project into small digestible chunks rather than just allowing myself to wander aimlessly fixing bugs and adding features. If I sit down with the mindset of "I'm going to work on project X", I can't just spend an hour, and I get stressed because I know there's a lot more than an hour of work to be done. But if I sit down with the mindset "I'm going to add feature Y to project X", I have a significantly more realistic goal. I also often remind myself of that single goal while I'm working to avoid wandering off on other tangents.
Posting this from Edge+Chromium. Feels and works really familiar.
There's a few bits that aren't open-source (the portions for Netflix etc). Beyond that, it's mostly true, and MS could very well fork, like Google did with Blink already. I'm not sure we're all at that point yet though. Running it for about an hour, it's decent enough, and I like the look slightly more, when they have a Mac and Linux release, and get account sync working on Android and iOS versions, I'll then be impressed.
Funny considering the Edge store has a plugin to enhance Youtube, that I think is blocked from google's store. ublock origin is available and lastpass as well... there's a few others, haven't tried the dev extensions from chrome store, authy didn't work.
No need to remove JS.. you can always bootstrap a \*LOT\* with go + webasm, there's some decent DOM wrapper libraries and progress is definitely ongoing if you want to go that way. There's also rust, and if you like C# (blazer).
That's a really good point. Thank you! I realised I also have the stress of not having enough time to do everything I want to do. This will be a good opportunity to learn project management.
Broke down and published some tweaks on a simple logger I use in most of my node apps. [https://www.npmjs.com/package/@tracker1/logger](https://www.npmjs.com/package/@tracker1/logger)
I seriously don't understand how this is difficult for you. I love React, I work with it too, but it is a fact that it's EASIER to do things with Angular compared to React. Implementing complex forms is extremely easy with Angular's reactive forms. Have fun managing the same with React without a library.
Standard is a gradient spectrum.
Dude its literally an extension that you configure one time and never think about again. Stop yelling at clouds grandpa
I would suggest waking up earlier, if you wake up at like 5:30, you can get a decent 2 hours of alone-time, fit in a 30 minute work out and be ready for the day before most people even wake up. Sounds like nights are family time and the rest is work, so it's the only real logical solution I can think of.
Maybe but Safari needs to try a bit harder on their end. Sometimes it seems like they are sitting on their hands.
Possibly, now that I think about the amount they've sunk into Bing, and Edge compared to the success they've had with Azure - it would make sense to cut some projects.
It gave them ownership of it, but everyone has access to it.
Sorry, but therapy is not always the answer to everything, despite everybody what everyone on reddit says.
Microsoft owns Github, and Github has several products built with Electron (which uses Chromium as a renderer). It makes sense to congregate around the same browser tech. &amp;#x200B; Mozilla dropped the ball here by not making and pushing a web renderer based on their browser. Everyone now uses Electron, which pushes the Chrom-only agenda.
It depends on a lot of variables. Where you're living, what the junior dev market looks like where you are, what kind of network you have to leverage (friends in the industry, local dev communities), what the general perception of the bootcamp is (my boss straight up won't interview people from certain ones), but really the number one factor is yourself. &amp;#x200B; How passionate are you really about coding and building things? If you don't really like it and are looking at the course as a get rich quick scheme, it one hundred percent will not work for you. If you just show up every day and don't give it your absolute all, it probably won't work out. You get out of it what you put in. &amp;#x200B; I went to Galvanize, for the record, and put in my fair share of late late nights and endless networking events. It still took me about eight months after graduation to find a full time gig, and I had a lot of people around me to support and help out. The bootcamp is just the start of the uphill climb to break in the industry. At the end of the day, this is a decision that has the potential completely change your life - do your homework before you jump into it. Find alumnis, ask them what their perception of the program is. Work hard to find ones that scrubbed out or couldn't find a job after and see if you can't find out why. Lots of these people have axes to grind, so take their word with a grain of salt. But don't go in rosy eyed - do the cost / benefits, accept the fact you're going to have to go hard in on this. &amp;#x200B; You also have to know you cannot go it alone. Whether it's your classmates, instructors, industry contacts, or professional services at the school, you're going to need help. Don't be afraid to ask for it, but also recognize when you need it, versus when you can find the answer yourself. &amp;#x200B; And learning HTML / CSS and even the fundamentals of JavaScript will give you an absolute leg up. Just getting comfortable with the syntax helps tremendously. [https://eloquentjavascript.net/](https://eloquentjavascript.net/) is where I started. Work on those problems honestly, don't just jump to the solution when you get stuck. &amp;#x200B; Having that design background is also helpful - if you can get a solid technical foundation and have a body of design work to show, you can become something of a unicorn in the development world. &amp;#x200B; For me, it was worth it. That year and a half taught me a new skill and expanded my view of the world. I have a career I love and health insurance for the first time in my adult life. I'm not scrambling to make rent every month. But getting here on that path was fucking hard and don't let anyone tell you differently. &amp;#x200B; Hope this helps and good luck!
What?
Oh forget about it. I can't fucking get my point across.
IE has been gone for years. Edge replaced it with Windows 10, although IE11 is still bundled with it.
I hope it helps! I've been working as a web dev for the last 5 years or so, but before a year or two ago, almost all of my side projects wound up abandoned because of poor time/focus management and unrealistic expectations/goals. A couple other thoughts/tips/whatever that I've found helpful: - Before you start a side project, make sure you're willing to spend the time to get it into working state. This doesn't mean build an MVP, but I'd try to avoid leaving a project half-scaffolded. - While you work, occasionally ask yourself if what you're working on is advancing you towards your current goal. I find this works especially well if I work a single well-defined task at once. - Work on stuff you care about. I find it incredibly difficult to conjure the energy to spend my free time on projects I don't actually have a use for (looking at you todo list apps). - Make note of problems you run into that don't have existing solutions. These are the best side projects. - Side projects don't need to be apps. I've come to find that I enjoy working on libraries, CLI tools, and frameworks more than UI heavy web/mobile apps. This is related to the last point because I find I run into problems that I can solve with a library/CLI tool much much more frequently than problems that I can solve with an app. UIs can also be huge time sinks, and if you don't have design skills, they can be frustrating to work on alone. - If you only have an hour, close all those distracting windows and tabs. Do whatever you can to hide all the distracting stuff, so you can stay focused on that single bug/feature.
It's still all IE at the end of the day, until now.
You can learn Javascript without knowing html and css, but you really need to know all three for front end dev. I went to a bootcamp in 2014 and have been a developer ever since. It was really tough and expect to put in a ton of hours, like 80+ per week, if it was anything like the one I went to. You will greatly benefit from doing a lot of coding prior to the bootcamp. If you go in with little to no knowledge, you will get left behind real fast. I would highly recommend freecodecamp.org over codecademy. You won't learn anything going through mindless codeacademy tutorials. Freecodecamp will actually challenge you
Agreed. I don‚Äôt mean to say it‚Äôs the cure all. It helped me quite a bit.
Wait how do you not support Safari. Safari is the nightmare browser that always has issues from my experience. There are minor things here and there that edge hasn't done for us but Safari is far and away the browser that wastes our time.
&gt;Mozilla dropped the ball here by not making and pushing a web renderer based on their browser. They did but it was possibly before the market was ready. It was released in 2006, deprecated in 2014, then discontinued in 2015. https://en.m.wikipedia.org/wiki/XULRunner I work with it almost every day. We've had plans to migrate to electron for 4 years now.... The current version is Firefox v40 feature level.
Yes and it's chromium that controls the implementation of standards, and Google controls chromium.
oof. I had no idea. Definitely before the market was ready, but that's a sad excuse for something that was around for 8+ years. &amp;#x200B; Too bad their Firefox OS project sucked up so many resources during that time. That effort could have been better spent making a web renderer with a nice API.
No its all done in red stone and command blocks
And given that they have the one platform that prevents users from using competing browser (engines), I feel like they have an obligation to stop sitting on their hands.
Holy fuck, this is big
This would be amazing.
I've started using Firefox recently just to put my tiny statistically-insignificant weight on their side of the scales. I'm surprised I've actually stuck with it, even though there are features I miss (omnibar search stuff for one), FF finally is at a point where it really puts up a damn strong fight against Chrome.
Chrome implements most web standards before any other browser, and have been following the specs much better than IE / Edge.
It's a really bad thing to joke about.
&gt;I dont understand why Microsoft would have less power than google The project is controlled by Google. The code is open and you are free to read and use their code however you want. But if you want to change Chromium (and by extension, Chrome) you have to submit a pull request and hope Google accepts it. Chrome is the IE of our time. If Chrome doesn't support it, it doesn't matter if it's a W3C standard at this point. Web standards now belong to Google.
I‚Äôm so down for this. Firefox‚Äôs dev tools have definitely come a long way already, to the point that I regularly use Firefox for development. This would be a game changer.
Firefox has omni bar search, just type in your search into the url bar works just the same as Chrome. What else are you missing?
Firefox was big, until chrome came along, but I stuck with Firefox most of the way.
Firefox only gets points for not being Chrome. It's not that great of a browser.
Definitely. They are killing it with Azure and a ton of business to win where edge and Bing they loss and little chance to change. Even harder now search is more of ML application.
Honestly, I'm even less interested in it now.
(not the op) the only real thing I miss on ffox is a decent gui for the dev console, chrome babied me too much.
I really don‚Äôt understand this. After pooring a boatload of time and money i. Internet explorer / edge people still would not use it. It would make so much sense for microsoft to just kill it off and package windows with firefox. But nope. A few months ago they told the world they were working on another chromium based web browser. Meaning they are no depending on a competitor‚Äôs product which they still have to maintain.
So, I‚Äôm considering switching my focus to PureScript for personal projects/learning. I‚Äôm curious, what is your opinion on using PureScript alongside other developers who use plain JavaScript or TypeScript? Is the compiled JS output readable for people who aren‚Äôt familiar with PureScript, or does it seem obfuscated (e.g. for performance optimizations)? What does the source-mapping look like? Could another JS/TS developer debug the JS output without much knowledge of the PureScript source, if necessary? More importantly, how difficult is it to create vanilla JS bindings to PureScript APIs for a shared library? I‚Äôm asking because I have a few projects involving multiple team members who understand functional structures to some extent (we regularly use some functional principles for parts of our code), but they might not want to switch. If it seems like too much overhead, I just won‚Äôt even bother with it, at least for those projects.
I name my booleans using is, has or should... for isRequestInProgress, hasWhatever or shouldWhatever. Here's some guidelines you can adopt [https://google.github.io/styleguide/jsguide.html](https://google.github.io/styleguide/jsguide.html) [https://github.com/ryanmcdermott/clean-code-javascript#variables](https://github.com/ryanmcdermott/clean-code-javascript#variables)
I've already had this discussion to its completion with the other guy. Not interested in doing it again. :)
I went through several online courses and books when I was learning. Looking back, it doesn't really matter which one(s) you go with so long as it fits your skill level.
IMO you've answered your own questions. 1. Learn to write unit tests and test your components. While it may seem as a waste of time you'll find out that it'll make you better at what you do. Once your tests catch few potential issues you'll develop awareness of what not to do and how to write better, more solid and easier to test code. 2. Drop the worry about getting fired. There are so many openings it's not even funny.
Considering that most people use chrome to browse it safe to say that it is the standard atm.
lol
I'll board the hype train when I see them adopt modern standard across the board. I want modern css and javascript and I don't want to wait 5 years before they catch up. Every browser they've released has been a shit show in this way for years. So they're using chromium. Great. How much if it? How many adjustments? We all know they're not just gonna throw a new sign on the chrome browser so what will this be in the end? I hope they get their shit together because edge was supposed to be their comeback and it flopped hard.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/gamedev] [Babylon.js 4.0 features some exciting updates to it's PBR shader support.](https://www.reddit.com/r/gamedev/comments/bb0r8n/babylonjs_40_features_some_exciting_updates_to/) - [/r/webgl] [Babylon.js 4.0 features some exciting updates to it's PBR shader support.](https://www.reddit.com/r/webgl/comments/bb09f3/babylonjs_40_features_some_exciting_updates_to/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Thanks for the detailed reply! I am doing it mostly for financial reasons and I've realized you will only get as far as u work for, itll be a great challenge but that applies to pretty much everything in life. I'm always the type to ask questions even if I look stupid so believe me I'll be trying to get all the help I can. Being that unicorn in the development world gave me some hope I can stand out and hopefully be top of my class to get placed soon after graduating haha. Gonna try to find some alumnis and hopefully they have some good outcomes. Thanks again!
I actually prefer testing in Firefox, prefer their console.
Remove a 50+ services while you're at it from chromium, most of which belong to Google
A poor artist blames his tools. Learn how to write scalable maintainable dynamic code. No programming language can do your job for you.
here is the [node release schedule](https://github.com/nodejs/Release): node 6 is officially "end-of-life" at the end of this month i think you should make a strong case to your team that it's important to upgrade to node 10 before the end of this month - **it's a very serious security concern.** you need to be able to rapidly deploy critical security updates. if you're stuck on node 6, and a critical fix is only released for node 8 and 10, you're vulnerable for the entire time you're panicking and finally upgrading - working with obsolete technology damages the team's morale. there's a reason we move on from old to new tech: it's way better. the team's skills stagnate as they less and less familiar with the modern tools and practices i think those are both good reasons, but in particular, security is not a good place to make compromises if you don't mind me asking, in your team's case, what are the biggest challenges in staying up-to-date?
Is the tuition I'd be paying a reasonable amount? How did it go after you finished your bootcamp? And thanks I'll try freecodecamp. I agree with u on codecademy from the little I've done with so far. Thanks for the tips!
That‚Äôs what she said.
I do as well. I'm actually surprised to see that most don't agree. I use FFDE as my main development browser. Just the fact that it renders interactive output (as opposed to Chrome just dumping a plain text string) from an API request without opening the console puts it ahead for me.
FF used to be THE browser outside of IE before Chrome came around. It was Chrome that came and wiped away FF's browser share which is what makes their current positioning kinda ironic. I still remember when Chrome first came out and how reluctant I was to give up FF but how quick and lightweight Chrome was.
I agree with everything about this. I was breaking my back doing body repair 60+ hours a week, I‚Äôve always been into tech and I‚Äôd bought a raspberry pi and started teaching myself python. I became obsessed with programming to the point I quit my job to go to a full time boot camp and now I have a career I truly enjoy and couldn‚Äôt be happier. The key takeaway from the above is it‚Äôs not a get rich quick scheme you‚Äôve gotta truly want it and you‚Äôve gotta put in the work. My advice would be to pay the $10 on Udemy for some intro courses to get your feet wet and see if this is the path for you. Utilize stack overflow and YouTube as much as possible, they‚Äôre free resources that will generally answer any question you have. Do as much as you can on your own before attending, you‚Äôre paying good money to be there so don‚Äôt waste time with what you could have done on your own. Also don‚Äôt drink the ‚Äòjob placement‚Äô kool-aid, it is on you to build a portfolio and sell yourself to employers.
This does not work if the value you are destructuring out of the container is `null`. ``` const {id = 5} = {id:null} id // null ```
Let‚Äôs not forget to thank Apple, who took KHTML and made WebKit, which Google used for Chrominium (and then forked to Blink).
Ah, I should have specified. In chrome, I am able to, for example, type in `github.com` and hit tab, and I can do a search using githubs open search integration. Same with any other website that supports opensearch. I don't know the finer details behind how it works, but that's what I mean. I had no idea how much I used this feature until I lost it.
I know :) I was there, and was using Firefox when Chrome first came out. I was very skeptical (As everyone was) of Google ever making any sort of impact in the browser wars of the time, but eventually down the line I did infact move to Chrome. Chrome (in my opinion) overtook Firefox and everyone else in terms of functionality very quickly, and for the last few years I had tried a few times to go back to FF, but each time I found myself going back to Chrome, until about 6 months ago when it's finally stuck (I was using FF on my android phone already, FF is easily the best mobile browser I know of). So it's starting to make a comeback, and it's amazing to see it rise yet again like a phoenix that just won't die.
Gone? It's on my computer.
I would disagree on one point: even though Edge lacked support for newer HTML5 features, I don't recall any incidence where they decide to go against the standards.
You can control this in settings. Add it as a search engine and put a keyword. For example, I have runescape.wiki set to the keyword rs.
 I have updated the documentation.
Well... it still "works" as it's still assigns default value, but the value is already set to `null` (an object value) here, so it shouldn't use the default value. On the other hand, they did say you don't have to do a separate '`null`' check, so you were definitely right to clarify. What you really don't need to do is check for `undefined`. (Because `undefined` is not a value, it's a value type)
Oh cool, so you are the corporation whisperer for browser standards? Could you dm me some tips for my stock portfolio? lmao
Looks nice. But maybe it‚Äôs just a tribute üòâ
That's a long list of removal. Not sure what they are going to add in to bloat it again.
It is great
Tru dat
We're a small company with only a few devs, can only do so much. Our customers are willing to install a other browser.....or more accurately are to cheap to buy an Apple product.
I use that drag and drop arrow feature in vs with C# all the time. It's super useful, even when it crashes like crazy
I would so some outcomes research. I think the quality varies a lot. For myself, I did Hack Reactor Remote three years ago, found a job a month later. Been well employed since, and I tend to actually be pretty senior in the teams I work in. It was an excellent education. Happy to answer any questions you have.
No love for Linux?
Ah, so I can add them in myself? That's handy. I do hope that FF gets the same kind of automatic hooks for opensearch in the omnibar when you visit a site that Chrome has, but it's good to know that I can create a search keyword myself for now. I'll give that a try, thank you!
Using Chromium, the same code base.
Edge devtools would crash so quickly, it was worthless for front end dev work.
Ya I agree as well, similar things happened at Travis recently and they have had some serious down time Windows in the weeks afterwards
chromium is not a standard now?
I have errors running chrome with selenium installed in nodejs. May I know if you use nodejs to run it? Or you use python/java based selenium?
Favicon service....
how you installed selenium? I tried with nodejs based selenium to run chrome/chromium but have errors that I couldn't resolve. I tried with webdriverio, it has errors as well
Sounds like you've around 10 hours per week on the bus! I was in a similar situation and I bought a smaller laptop for the commute. It's amazing how much you get done in a week and how fast the time flies.
create your own engine godly shits
People who do this shit need to be burned at the stake.
It's intermediate-level, not beginner, but once you feel comfortable I can't recommend the [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS) series strongly enough.
I‚Äôm most proud of the Konami code example: import { Channel } from "@channel/channel"; const keys = new Channel(async (push, close, stop) =&gt; { const listener = (ev) =&gt; { if (ev.key === "Escape") { close(); } else { push(ev.key); } }; window.addEventListener("keyup", listener); await stop; window.removeEventListener("keyup", listener); }); const konami = ["ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "b", "a"]; (async function() { let i = 0; for await (const key of keys) { console.log(key); if (key === konami[i]) { i++; } else { i = 0; } if (i &gt;= konami.length) { console.log("KONAMI!!!"); break; // closes the channel and removes the keyup listener } } })(); I feel like once async iterators take off, you‚Äôll be able to write much simpler code for complicated async flows.
Did they fix webRTC leak and does it work with puppeteer?
IE 11? Is that the browser that pretends to be firefox? ;) https://blogs.msdn.microsoft.com/ieinternals/2013/09/21/internet-explorer-11s-many-user-agent-strings/
For sure, I used the same convention in my examples.
However the other side of the coin is edge can and likely will be included with the OS as it is today so enterprise customers will likely standardize on it and less inclined home users who give 2 shits about a chrome, Firefox, blink, gecko, WebKit etc... will use what is in front of them and the largest part of the windows user base probably fits that demographic. Going on that it is very much in googles interest to also appease Microsoft because chrome, despite its privacy flaws, is a damn good browser so Microsoft is out the door basing this on a pretty damn good foundation. Never mind Microsoft offers a counterpart to nearly all of googles services they can flash in front of those same less inclined demographic. Googling is synonymous to searching the Internet for a lot of these same users so it makes sense if google‚Äôs search is the first thing that comes to mind for them when they need to search and google push‚Äôs chrome hard on their own sites so sure Chrome can still maintain a foothold I guess but nothing is stopping Microsoft from doing the same shit people think google will do regarding standards and their own agendas. I mean no one is gonna say ‚Äúdunno man have you tried binging that shit‚Äù anytime soon if ever but there are plenty of other areas Microsoft can compete and they have the advantage of bundling a good browser with the OS which is not insignificant in itself.
How close do you think the teams were to completion when the initial announcement was made?
You don't need to configure that much to get off the ground though, sure if you want to optimize you'd need to read into the docs more. Not everything has an example to follow. I do agree it's easier with each iteration, but still it wasn't so difficult that it was impractical.
Interesting. Edge was never available for Windows 7. MS says the new Edge will be and that version is coming soon. I guess that's a function of using Chromium. Can't hurt.
I agree, but I used firefox recently and I'm overall unimpressed with the progress and speed they've barely accomplished. Yeah chrome is a hog for resources and it terminated batteries but at least it's consistent and works. I've had enough bugs and issues trying it out for 2 months that I'll probably try it again in 2-3 years.
I've really had no issues using Firefox and Chrome interchangeably. What did you encounter?
Interesting I must have switched to FF before that became a thing in Chrome. I use duckduckgo as my search engine anyway so searching github is simple as typing "!gh hello world"
Ah, cynicism, but probably true.
It‚Äôs only gotta be cheaper, not cheap. Don‚Äôt condone it myself but have witnessed enough of it to make me sick and a lot of times it ain‚Äôt the organization or whatever government agency just not wanting to deal with it but rather some 3rd party vendor who developed a system they depend on, won‚Äôt support windows next and has them by the balls.
I've had plenty of visual artifacts across a couple machines. Extremely poor dev experience from the standpoint of building the app and using firefox. Essentially if you accidentally left a loop that didn't terminate it'd hang the whole browser. Another issue I had is any full screen video wouldn't actually be full screen. I have a touch screen which if you'd touch the white background on most websites would blow out any video and you can't perfectly scroll it back so you'd have to go out of full screen and toggle it again. There was no way to change this. Sync _worked_ for the most part but the address bar is annoying to use. The sort order, which I changed later, didn't make sense. It never gave me the url I wanted or the most recent/active url. Tab-searching wasn't ever available which I grew to love with chrome. Another part was just missing features like searching google images from an image and native chromecast support. What pissed me off the most was the dev experience because sometimes it would just hang on a socket retry connection which hung the browser which was playing my music. Never had the issue in chrome so I just switched back.
Best. Ever. Paragraph. In a button! &amp;#x200B; There's also a shit-load of superfluous javascript. We can do these effects in pure css these days.
So Google doesn't control the default browser installed on all of the machines? Doesn't that sound like a _bad_ idea?
oh boy 8 remember whem peolple wouldnt use firefox 1.0 cause it was the.new thing , it was ie6-7 days hahah
Gotta have those efficient runescape searches :D
You guys all miss the point of him (no offense, just hinting at it): He doesn‚Äòt want the function where you can add a search shortcut and then you can type ‚Äûshortcut search term‚Äú in the adresss bar. In Chrome, this behaviour works automatically on every website as long as that website has supports the Opensearch format/meta-information (http://www.opensearch.org/Home).
Fair point. I personally consider supporting those features as part of conforming to the standard simply because the end result of not doing so is similar. It ends in painful headaches for web developers and slow adoption of extremely useful tools. Having to worry about which new feature is supported where should not be a thing in 2019. The browser vendors needs to at least stay mostly in step with each other to keep consistancy
This is a pretty cool idea. I knew that async iterators had the potential to replace RxJS observables but hadn‚Äôt thought of using them like this. Nice work
Thank you for the info! I think biggest concerns/challenges are upgrading all dependencies/sub-dependencies while maintaining functionality. We are using some out-dated modules and need to update them as well. I'm not very familiar with node v10, but are there any backwards compat issues to worry about? (i.e. if we just upgrade to node v10 with no code changes, will there be certain things in the node core library that will need to be updated?)
&gt; Microsoft is also working on ... PDF enhancements, Believe it or not, this was the standout feature of Edge. . . solid PDF display with base features but without a bunch of bullshit.
From the people who brought you Zune and IE.
I'm really not sure if async iterables should be used to model push-based sequences. Iterables are inherently pull based and you have to take extra measures when implementing something push based (as you did [here](https://github.com/channeljs/channel#channels-respond-to-backpressure)). Your konami code example almost looks identically when implemented using rxjs: import { Observable } from "rxjs"; import { takeWhile } from "rxjs/operators"; const keys = new Observable(subscriber =&gt; { const listener = ev =&gt; { if (ev.key === "Escape") { subscriber.complete(); } else { subscriber.next(ev.key); } }; window.addEventListener("keyup", listener); return () =&gt; window.removeEventListener("keyup", listener); }); const konami = ["ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "b", "a"]; let i = 0; let subscription = keys .pipe( takeWhile(key =&gt; { console.log(key); if (key === konami[i]) { i++; } else { i = 0; } if (i &gt;= konami.length) { console.log("KONAMI!!!"); return false; } return true; }) ) .subscribe();
Good point, though funnily enough they currently sit higher than Firefox in terms of standards compliance: https://html5test.com/results/desktop.html Pretty impressive feat considering they made it from scratch 4 years ago. Though the fact that they decided to throw away all that work shows how much time and money goes into maintaining a browser. Unless that company's entire business model is tied to the browser there's not much incentive for them to invest.
Who cares! Firefox all the way!!!
 function foo(bar = 5) { console.log(bar); } foo(); // 5 foo(null); // null foo(undefined); // 5 Default values for parameters behave the same.
Purely so Corporate IT don't have to explain to management why IE or Edge is no longer on their computers
I use a Java-based Selenium, which I control from Node using WebdriverIO. The latter has a `selenium-standalone` plugin which ships Selenium, so if you have Java installed, that should be enough. In CI, I run my tests against Selenium's [Firefox](https://hub.docker.com/r/selenium/standalone-firefox/) and [Chrome](https://hub.docker.com/r/selenium/standalone-chrome/) images, which has both the browsers and Selenium set up, so I can just point WDIO to those.
Hi /u/bookfaceimpact, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
To be fair FF was crap after chrome came
My interpretation is that bitwiseOr does not exist that operator for strings but for numbers. And 0.bitwiseOr(33.5) cannot process the value as it isn't a whole integer but a float thus the conversion fails silently.
2 hours a day in commute is a complete waste of time. I bring a cheap linux laptop with me everywhere I expect downtime and can hotspot the internet from my phone. All busy people work while in transit, and if your transit doesn't allow it, like a busy subway for example or driving yourself, find a different method of transportation where it does allow it. Do whatever it takes, you're wasting 10 hours a week ($2000+ a month worth of worktime). You're basically wasting the average american salary commuting.
\&gt; I'm really not sure if async iterables should be used to model push-based sequences. &amp;#x200B; Eh. I‚Äôm not sure what you mean by push-based sources. If you mean any object in javascript which takes a callback and fires the callback multiple times you‚Äôre pretty much describing all sources of async data in javascript. At the end of the day, observables are just fancy ways to combine callbacks on top of callbacks, and they can only be consumed with more callbacks. The whole point of using \`async/await\` is to make asynchronous code look synchronous, and whereas I immediately know what calling \`break\` in an \`if\` branch does in my example, I have to look up the docs to figure out what the \`takeWhile\` operator does, and how it differs from \`filter\`, etc. Using js control flow is obvious and predictable and requires looking at no extra documentation or pulling in extra dependencies. &amp;#x200B; And the ‚Äúextra measures‚Äù taken to deal with backpressure are a good idea anyways. The observable story for dealing with backpressure is weak because at the end of the day you can never tell subjects to wait for values to be consumed, and adding buffers or throttlers to the pipeline doesn‚Äôt solve the problem because there‚Äôs always the possibility that consumers further downstream are even slower. Who knows though, I know people really love observables, I just want to use async iterators because it has actual syntax support and it means I can use \`async/await\` in more places. Now that I‚Äôve started using \`for await‚Ä¶of\`, I‚Äôll never go back.
Thanks! ‚ò∫Ô∏è Honestly though, I don‚Äôt want people to think this library replaces or competes with observables because I know a lot of people who get really religious about them. I‚Äôm just focusing on async iterators and keeping my head down.
I am also looking for that kinda buddy to train with So it will be a pleasure if you want to work together
Don't forget guys, chromium and chrome are two different things... Chrome is a flavour of chromium using features and utilities developed by Google. You can still download a version of chromium...
Did you make a decision yet? I'm curious.
I see. I just started to write automated user simulation test for websites a few days ago. I tried WebdriverIO as well, but it contains errors that I couldn't debug for chrome. ``` (node:9569) UnhandledPromiseRejectionWarning: Error: Required option "capabilities" is missing ``` Following the guide https://developers.google.com/web/updates/2017/04/headless-chrome#using_webdriverio It works for firefox though, following this guide https://webdriver.io/docs/gettingstarted.html I am using puppeteer headless chrome now, it's not that easy to write, for example, not understanding why it failed to click on a product link no matter how I tried to catch it using different syntax, like `page.$$` or `page.evaluate()` with Javascript and DOM api I wonder if I should learn Java now to use selenium. I have taken a lot of time to debug all these stuff lol nonetheless, I am considered to be inexperienced in programming field
Started reading Algorithms design manual by skiena and written a reference article about javascript strings on my blog. [https://learnersbucket.com/tutorials/data-structures/javascript-string/](https://learnersbucket.com/tutorials/data-structures/javascript-string/)
Removing the currently selected item from the list is frustrating because it move the positions of the items around in unpredictable ways. Better to leave the selected item in the dropdown and highlight it to indicate it‚Äôs selected.
I reach home around 9.30 have dinner at 10 and after 1 hour of break start studying or doing personal projects at 11am till 2.00 am then sleep. Those 3 hours in the night is what i utilize daily
Aren‚Äôt generators more suited to this purpose ?
/aside