üëç
Oh yeah, good catch!
My general opinion is do whichever you prefer. The only caveat would be when performance suffers. I would be surprised if it did in this case.
Yeah, intimidating at first, however it's not rocket science! 
I felt like the transition animations were just slightly too long but I have ADHD so that might just be me. 
If I were interviewing juniors, I'd let it slide, so long as they showed interest in figuring that stuff out. To some extent I wouldn't mind from experienced devs so long as JS wasn't a main language for them. If your applying for a senior frontend role though, you better know that stuff. Otherwise it shows you lack any interest in programming, and your just here for a paycheck. Even though classes are now the popular mode for defining constructors, I think understanding prototypes is still very important. IMO classes are a half assed syntax sugar, that doesn't have near the functionality of raw prototypes.
I watched your video. I discovered the advanced editor section. Thanks. My dog ran away and my ears are bleeding.
Correct. Biggest immediate differences I see: - RSK doesn't do anything with sagas at all - Sitka wants a "module" defined as a class, whereas RSK's `createSlice()` accepts an object and returns an object - Sitka has "registering modules", RSK gives you a reducer and lets you pass it to the store (or combine it) yourself - Sitka appears to hide the Redux store pretty much completely, based on examples like `sitka.handleColor("red")`. RSK just simplifies the process for creating a store, and dispatching actions is the same as usual.
 &gt;Not really sure _why_ would you do serious work with VanillaJS __or__ jQuery in 2019 I agree but OP said he'd take jquery without bootstrap over bootstrap without jquery. If you're doing _anything_ in vanilla _or_ bootstrap its bound to be exceedingly simple. Such as throwing a little JS into a blog post for auto scroll or something. In my experience I dont _need_ jquery to do any of that. And you're right, jquery will be mildly more generic/fault tolerant, but I'm not writing "naked" javascript for something that needs to be generic or fault tolerant. In 2019 if a project is complex enough that you feel the need to use jquery over vanilla, you should probably be using a framework. This is why I think jquery is obsolete. Bootstrap, on the other hand, is absolutely _not_ obsolete.
Guess I'd do it like so [https://i.gyazo.com/a72c9fd339c42160ebf66f9b1956a947.png](https://i.gyazo.com/a72c9fd339c42160ebf66f9b1956a947.png)
Hey thanks so much for the thorough critique! I'll have to look into "escaping" variables. I've never heard of that, so thanks again. Also yes I agree that my variable naming needs work. It's something I'm pushing myself to get better at. I've only been learning Javascript for about 3 months. Anyways, if you have anymore challenges you and your company use to test applicants send them my way! 
I have 70% of the code complete and working perfectly. If you want my code pm me. 
I thought it wasn‚Äôt possible to remove specific items from a stack? Since it‚Äôs usually LIFO. My thoughts were there would be different stacks for each symbol but I don‚Äôt think that‚Äôs optimal. I‚Äôll appreciate any help in clarifying this. 
Hi /u/BGH1, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'll have you know that 'visualised' is perfectly correct English. Incorrect Yankee, but perfectly correct English.
Hi, Please see below. This example is more complicated than it needs to be for the point I made above but it helps illustrate how you can break down your styling into small, reusable chunks. I've used Typescript but it's just the same in plain JS. The key thing is that the template literal from my component is just one line which calls getMyCompStyle(). While getMyCompStyle also returns a literal it will be much cleaner than doing it inline as you don't need to do ${props =&gt; ...} each time or use ugly ternary blocks. Notice that getMyCompStyle actually delegates common operations (well, just color in my example) to other functions? If you continue down this route you will end up with a mini style library that's nice and easy to read and test and free of duplication. While some of the lookup functions can be just ugly looking blocks of conditional logic themselves they still trump literals. export interface ThemedComponent { theme?:Theme; } //StyleUtls.ts export interface ColoredCompomentProps extends ThemedComponent { primary?:boolean; } export const getColorFromProps = (props:ColoredCompomentProps, defaultColorName:string) =&gt; { //lookup and return color or use default } //MyComp.tsx export interface MyCompProps extends ColoredCompomentProps { //Component specific props } export const getMyCompStyle = (props:MyCompProps) =&gt; { const color = getColorFromProps(props, "primary"); //Lots of other looks ups here return ( ` color: ${color} ... ` ) } export const MyComp = styled.div&lt;MyCompProps&gt;` ${props =&gt; getMyCompStyle(props)} `;
Wow!
Great work and good experience. I think it would be better if you can do these: 1. Give a reasonable initial value for birthday. 2. Visualize the result that how long visitor can live. For example, a progress bar etc. 3. Compare the visit‚Äôs result with other people‚Äôs with same age, or compare to the baseline/average value. For example, it could tell the truth that ‚Äúyour date is longer than 10% people in the same age‚Äù.
I've managed to make them work for async exceptions also, by throwing them inside a setState, so that it becomes part of the React scheduling process. I've made this a common pattern where I know there is an error boundary above: fetch(...).then(...).catch(err =&gt; {this.setState(() =&gt; throw err)})
Oh wow, really appreciate you writing that out! That's an interesting approach, I can see that making sense for apps with really well defined style bibles üëç
Is this only time to load the library or time to load + requests? Also: &gt;Give developers the information they need to &gt;make informed decisions about which third &gt;parties to include on their sites. Not the developer's job, performance is only part of what you need to consider, especially with analytics tools. But for sure developers and the teams pushing for the tools need to have an informed discussion about security and performance. 
You may be asking the wrong questions. While many of these concepts are important, the question isn't if the developers memorized the answer. You should hire developers who can find the answer on the job. If a problem occurs, do they know how to solve it? You aren't hiring encyclopedias. You're hiring people. A developer's greatest skill is the ability to learn, not the ability to memorize or study for problems they've never encountered. I used to commonly show code and ask them to walk through what they think happens. Do they know the effects of arrow functions, closures, etc.? If they answer partially or incompletely, try following it up with, "Here's what actually happens. Can you tell me why?" What is their critical thinking? If what they described will happen is their end code, and this code is what they wrong, how will they fix what is actually happening instead?
Well, you can remove all characters that aren't in the "(\[&lt;&gt;\])" set, then simply replace every "()", "&lt;&gt;" and "\[\]" sub-string to "", keep doing that in a loop, until the length of the string stops changing, then return (str.length == 0). That is hardly a good solution, though.
Is the Git repo open source or private?
First of thank you for taking the time to go over the website and your feedback is really good it gave me los of new ideas the progress bar idea i love it I think it would be a good edition and a cool experience for the user I will take under consideration all of your advice and thanks again 
Its private. I'd like to think if it were public, people would pick up on it and it would go viral as the next big must-read interview question! Then everyone would already have the answers coming in... But who are we kidding. It's pretty lame ;)
Don‚Äôt feel bad, I have one, have seen this problem multiple times and still didn‚Äôt think of it. 
I see the reply you had below has been removed, but your input was appreciated. Keep fighting the good fight, neighbour. As for that idea you are working on, the way society currently works is you need to form a start up company and bootstrap the crap out of it.... then after seven nervous breakdowns, you sell out to the highest bidder and put the money towards living off the fat of the land. Godspeed.
If you ever want to make a new question, you should definitely release the old one. I think it would be great to see people's forked repos as attempted solutions.
[removed]
Thank you this a great summary of the differences!
Lol, yeah, I know that struggle too well, got my portfolio at https://thedeveloper.ddns.net and my first startup going at https://sellnbuy.ca but so far the only person who goes there is me myself and I lol. I do want to make enough money though to be a real person, I just don't feel like me being a person should have to be something I buy.
I'll probably do that, and maybe even soon. It's geared toward people who'd need to work in our legacy (es5) codebase and I'm not sure its as relevant anymore.
As someone with a more positive outlook, how about a mylifeclock, telling you different things you could accomplish in the tremendous amount of time you have in this life? Apparently I will live to be 91.
How were the numbers 41 and 377 picked? 
Setup all kinds of 3d animations, and use canvas to do a ton of animations, and use divs to do a ton of animations. It isn't pretty until the client machine dribbles molten silicon out the air vents.
You spend way more time thinking than typing code.
This is a classic problem with a classic solution. Don't feel bad if you don't know the answer as it's not certain you would after just one year. If you are interviewing and don't have a degree then you should first familiarise yourself with common questions. Try to at least read all of questions from the top ten lists below to get familiar with the type of problems that many questions are based on: [https://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/](https://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/) Note down what you don't know and try to work through solutions, researching as necessary. Also consider signing-up to this mailing list to get a daily question that was asked by a big tech company such as Google, Apple etc. [https://www.dailycodingproblem.com/](https://www.dailycodingproblem.com/) &amp;#x200B; &amp;#x200B;
This kind of question is to test your general programming skills, it honestly doesn't matter which language you work in. But that's also just stuff that comes with experience and the willingness to learn! :)
I like this! For bonus points you could generate the opening/closing arrays using `Object.keys` and `Object.values`.
I just for fun rewrote this in functional style: const brackets = { ')': '(', ']': '[', '&gt;': '&lt;' } const opening = Object.values(brackets) const closing = Object.keys(brackets) const verify = string =&gt; string.split('').reduce((acc, val) =&gt; { if (opening.includes(val)) { return [...acc, val] } if (closing.includes(val)) { if (acc[acc.length - 1] === brackets[val]) { return acc.slice(0, acc.length - 1) } } return acc }, []).length === 0 ? 1 : 0
The ad was super tacky and ruined the vibe. https://i.imgur.com/g7lMOS1.jpg Especially since I‚Äôm entering supposedly personal info. The typeface was cool. 
Any coincidence that Traversy recently uploaded the same project idea... ?
Amen All classes do is make Javascript seem familiar but not actually be familiar to OOP devs, so they get lured in and then complain about it being different
If you are willing to send CORS request, please check the following headers: ``` Access-Control-Allow-Origin: YOUR_ORIGIN Access-Control-Allow-Methods: POST, GET, OPTIONS Access-Control-Allow-Headers: YOUR_HEADERS ``` They should be handle properly in server implement. Check out [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) for more details.
that's just horrible code, you need the curlies to make it readable. the examples above are much more readable.
I'm a big fan, they are clear and concise, and part of the language. the prohibition comes from the same stupid mindset that is against single line conditionals. `if (condition) return;` \+1 for idiomatic javascript
&gt; Batching Batching in the context of modern declarative libs means that you can batch state mutations and then update DOM structure just once (per frame/microtask/event handler/etc, depending on edge cases). &gt; A word on virtual DOM Unfortunately, "Virtual DOM" term has been heavily misused, and to many people it means different things. With your interpretation of this term, almost all **efficient** libraries with declarative rendering capabilities are using "Virtual DOM". Virtual DOM is about composition. UI as a first-class citizen in javascript, it means that you can work with it like with any javascript values. 
I have friends who work like this. They've been using javascript for years, rely on finding libraries or tutorials for exactly the thing they need, moan when I tell them the answer is on MDN, seem to be afraid of breaking things up into functions or files, and the code they *do* write is always unreadable and inflexible. Oh, and while it will usually *mostly* work, watching them code will reveal that their process is eerily similar to random mutation and natural selection. 
nice project. what activation function does it use? It may be a good idea to parametrize that aswell.
It's default to sigmoid. I just uploaded it, I'm still working on it so I can implement an experiment with it later. I'll make sure to parametrize it and add new activations
also, documentFragments have been slower for a long time. https://esbench.com/bench/5756062bdb965b9a00965ae2
&gt;Are the results region specific? For example, are they based on load times when the US? If I was in mainland China would I see different results for baidu libraries? Or same for Japan and Hatena blog. If you are in China, or serves Chinese customers, don't use Google or Facebook APIs/ads/fonts/etc. That's a surefire way to kill you site/app response time. However, back to your question, the study used the load up time of the script to determine the impact, so it should be geography-independent.
Wow. Amazing that you thought about this!
Yes it is. 
&gt;In case you're interested in additional reading, the latest version of Sedgewick's Algorithms book covers this exact question using a stack. It's in Java, not JavaScript, but the lessons you learn will be fairly easy to apply in any imperative language. How do you keep yourself motivated to continue reading a technical book? 
It's not removing specific items from the stack. It's actually doing LIFO. Maybe you're confused by `unshift`/`shift`? They are not very fortunate names. `unshift` is like `push`, but from the front. `shift` is like `pop`, but from the front. So, all in all, it always pushes from the front and it always pops from the front. It also _peeks_ from the front (reading `stack[0]`). If it's clear now, don't read the following. If you're still unsure, go on. --- It might help to follow through it with an example. Let's say we `verify("[]([&lt;&gt;)]")`. What happens is this: Stack status: `[]` Iteration 1: `[` It matches the second condition so `stack.unshift(']')`, a `]` is pushed into the stack Stack status: `[ ']' ]` Iteration 2: `]` It matches the fourth condition (`']' === stack[0]`), so `stack.shift()`, the top-most element from the stack is popped and discarded. Stack status: `[]` Iteration 3: `(` ... `)` is pushed into the stack stack status: `[ ')' ]` Iteration 4: `[` ... `]` is pushed into the stack stack status: `[ ']', ')' ]` Iteration 5: `&lt;` ... `&gt;` is pushed into the stack stack status: `[ '&gt;', ']', ')' ]` Iteration 6: `&gt;` It matches `stack[0]` so this is popped and discarded from the stack stack status: `[ ']', ')' ]` Iteration 7: `)` It matches the fifth condition. It is a closing element but it's not the closing element we need (`stack[0]`, i.e. `]`). This means it's not well nested. So we return 0. As you can see, it's always pushing from the front and popping from the front. It is indeed LIFO.
Its not Wednesday, but i just finished this and wouldn't mind any constructive comments. &amp;#x200B; [https://tonydmorris.github.io/IMGBookmarker/](https://tonydmorris.github.io/IMGBookmarker/) &amp;#x200B; &amp;#x200B;
Not easy to pull it in an actual interview, but you might have tried going for /u/homoiconic's [Sharleen approach](http://raganwald.com/2018/11/14/dyck-joke.html).
Most devs in the job market have experience with agencies. Try to hire engineers, not devs. Big difference from my hiring experience. Devs are typically great at hacking things together to get them to work - the business lives them. Engineers work to understand the problem before analysing and coming up with a well thought out solution. It‚Äôs typically the Engineer who will deliberate whether to use a for loop or Array.forEach. A dev will take the first answer from stack overflow without much further thought. 
Do an integration test and test everything or do unit test by using socketio to call some method and test that method. If you are doing unit test there is no reason to test the framework again.
&gt;iframes should never be used for anything different than ads Ugh, not true at all. Couple examples: payment, third party widgets (something like disqus or tripadvisor)
Thank you so much :) 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Try a template literal Let x = ‚Äò2019-02-02‚Äô Should be right above the tab button on your keyboard. 
It was silly. I did a counter that added some numbers according to the type of bracket, and subtracted the same amount if I found the same closing bracket. So I checked in the end if the result was a 0. But I choose very different numbers to avoid overlapping like "(" + "(" + "(" == "&gt;". I don't know if it's clear.
If you know anything about parsers and/or functional programming, this question is not so difficult. It definitely does not test if you have a degree, as it is easily solvable without one. Ragan Wald wrote \[an article\]([http://raganwald.com/2018/10/17/recursive-pattern-matching.html](http://raganwald.com/2018/10/17/recursive-pattern-matching.html)) about using pattern matching and recursion to solve a similar problem (balancing nested parentheses). His solution reminded me of parser combinators, so I made an attempt to solve the same problem using parser combinators, which can be seen in \[this reddit thread\]([https://www.reddit.com/user/HipHopHuman](https://www.reddit.com/user/HipHopHuman)).
If you wanna generate dates like that, then: `new Date().toISOString().slice(0, 10);` If you are sure about your input and its gonna be in that form then create a utility function: `const transformDate = (input) =&gt; \`${input.slice(0,4)}-${input.slice(4,6)}-${input.slice(6-8)}\`;`
dt.replace(/(.{4})(.{2})(.{2})/, '$1-$2-$3');
This seems right 
\\d would be more accurate
Hyphens are fine with double or single quotes, that's not what the question is about... 
Yeah, right. i was a bit hasty in giving this adivce. The funny part is that I use disqus (and other widgets) on my website, and I also have worked for a payments processing company in the past. So yes, iframes are used for all of this. I think I should update the post to reflect this. 
Merely replacing a for loop with a reduce loop does not make "functional style".
Should be 6,8 in your last slice call params üòä
Nice! I can't wait to untangle my models^^
Yea I agree the ads do kill the experience a bit bout that‚Äôs what keeps the website up and running I just created the website to practice my skills bout then people where going in that website like crazy so I decided to keep it up and for that I need money lol
For a sec I thought you where serious I like animations bout they are really costly performance wise I was going for a quick load and clean experience 
you can prepend/append to the list of child elements. Are you trying to only write to the text node for the sake of preventing unwanted HTML insertion?
Why don't I just type the URL I want to go to directly in the address bar? 
You want a shared stack, because bracket balancing also works according to LIFO. 
Ah you run this? I really like the implementation and examples of the JS by the way, it's really nicely laid out! 
Hahahaha, I actually was like that for awhile. A few years back though I saw this TED talk about what makes a good symbol and what doesn't. It was about flag design but the idea stuck. Some flags like china or canada they just look frigging GOOD. Its the simplicity that gives it its power. By the same token you can take a look at the flag of south dakota and see what an eye watering design failure it is. The use of simplicity and tight color schemes can truly make a memorable mark when used correctly. If your interested in the design talk, I'll include a link: https://www.youtube.com/watch?v=pnv5iKB2hl4 It totally changed my perspective on design, colors, layout etc.
Several options here https://stackoverflow.com/questions/5619202/converting-a-string-to-a-date-in-javascript 
*should do, we've got no idea about OP's current thought/LOC ratio.
I am actually trying to implement a "manual" node cloning function for cases when DOM tree has non-standard, custom elements (like e.g. YouTube that uses Polymer library), which results in *Node.cloneNode* method failing to actually copy some of the property values when it creates a duplicate node. As a result of such partial cloning, in my function, I have to iterate through all of the properties of the duplicate node to see if they are empty versus the same properties in the original node. The issue with properties like *text* (not *textContent*) is that when I try to fill it up with data from the original node it destroys the duplicates node's descendants (which is normal behaviour that I do not want in this case). I want to have the function as universal as possible, so I do not want to directly code-in exceptions for such destructive properties (like *if* href *then copy, if* text *then do not*), I want the algorithm to understand on its own whether it should try to copy a property's value from the original to the duplicate, whether it would be safe or not.
Oh, this helped. I get it now. My confusion was because I didn‚Äôt understand that it was the closing tags that were being pushed unto the stack. I assumed it was the opening tags. Thanks for your help!
Thanks for the feedback! I'm more than willing to learn, but for that I'd need more concrete feedback. Could you tell me exactly what you'd do differently?
Partially agree, however if you're hiring a french translator, it's best if they are proficient in french. Similarly, if you're hiring a javascript developer, it's best if they are proficient in javascript. Some things you can google your way out of, and that's fine. Browser APIs, specific type coercion quirks, etc. However, knowing the fundamentals of the language you're trying to get a job writing is a starting point for me when I'm hiring.
in case OP isn't familiar with regular expressions, this poster means replacing every `.` with `\d` in the above solution. 
It's fine. The configuration options exist for a reason! 
I agree! If this was run on every keystroke (e.g. in an editor), I would even ditch \`includes\` and use \`||\` operators for comparison. I think the overhead of includes would be expensive
Shouldn‚Äôt electron be a dependency instead of a dev dependency?
It's more than key strokes. using if/else key words without attendant braces/formatting is jarring to read. Ternary is correct way to do this.
Good bot
&gt; Do you have some tips for beginners? Write a descriptive topic title. "New!" doesn't mean anything.
The official starter project of electron lists electron as devdependency. Not sure why tho. 
Probably because it‚Äôs meant to be packaged up and distributed as an app
Cool
I don't think there's really any way to tell, not programmatically at least. As a developer, we would use the documentation to understand the behavior of these properties to know whether or not they're destructive to the children of the element. It sounds like from what you're trying to do, it would mean having to manually track these properties independently and apply the appropriate logic depending on their current behavior. But as the API changes and evolves over time, it would mean you'd need to keep up with those changes in your logic as well, and that sounds like a lot of tedious upkeep (not to mention it being tedious just to do this with the current API).
Is there a reason why you use Bootstrap and Jquery from the "vendor" folder instead of the npm modules? Because both libraries were added as Dependencies in package.json
First lesson. C++ not CC+ And... JavaScript (one word) JavaScript is not a scripting flavor of Java. Which ‚Äòjava script‚Äô implies. But don‚Äôt worry, when I started I named my js files java-insertnamehere... Oh and after a few months, those emojis will turn to angry rage faces and tears. Don‚Äôt let it get to you. Programming is hard. It takes many years to even be ready to be rejected from your first interview. 
Thanks!
I need help [https://www.reddit.com/r/javascript/comments/aqwky0/stuck\_on\_javascript/](https://www.reddit.com/r/javascript/comments/aqwky0/stuck_on_javascript/) &amp;#x200B;
SCSS modules is even better.
Yea I think so as well. It's more like a dev tool like eslint/babel. 
Java or javascript? Those are different languages that don't really work the same other than the most basic stuff like every programming language. And it's c++. One tip would be to start with one language first.
Hmm I see. A number of times it mentioned that file size was a major determining factor, so I thought this was more about network transmission speed than speed of a browser to interpret.
Ah makes sense. Thanks!
It would be nice to have some descriptor/contract meta information for result/output/return about the properties in terms of what other properties exactly they end up affecting, if any, but, apparently, it is almost never needed for any practical use except for highly peculiar cases like mine.
Can you guys stop praying electron? It's slow, bolated (huge in mg) and there are a LOT of alternatives to make a desktop gui.
Closest thing I can think of is [Ink](https://github.com/vadimdemedes/ink). 
You have: &lt;button type="submit" class="button-submit" onclick="addImg()"&gt;Save&lt;/button&gt; And: function addImg() { //prevents default action on form event.preventDefault(); //... } Which in Firefox produces: ReferenceError: event is not defined While Webkit/Blink supports `window.event` to access the currently fired event, not all browsers do, and it is a _bad_ practice to rely on it being available. Attach event handlers from JavaScript using `addEventListener` and declare the handler functions as receiving the event as their argument.
Hi /u/ZeddySaucin, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/high-frog, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kamkam_, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/asposeapis, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DanJM2019, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That's a good idea to handle asynchronous errors. I saw there is a topic related to this on React: [https://github.com/facebook/react/issues/13523](https://github.com/facebook/react/issues/13523)
Agree with electron's bloatness. But i am curious about alternatives you mentioned, can you please share some?
I try to commit to 5 pages a day. It's a fairly manageable pace, especially in a book where you'll sometimes want to re-read sections and then do exercises to make sure you've understood what you read. Usually, I can do more than 5, which is great. But there are some days where you're just absolutely not in the mood to read a complex technical book. But even on those days, you can usually push yourself through 5 pages. 
This is a list of three. 1. ES6: String.prototype.includes 2. ES5: String.prototype.indexOf 3. Case insensitive: RegExp Lodash and underscore will use native methods. The three regex methods can be under the same list number.
There's a few node compilers out there. https://www.npmjs.com/package/pkg https://www.npmjs.com/package/nexe http://enclose.io/ 
Ssshhh, let people have their fun. It makes people feel good to release something to the public. It‚Äôs an accomplishment, regardless of what it is. 
Yes. Qt, wx, among others. Of course, non js releated. Making a desktop application with an interpreted language is often a poor choice. Like, i understand the web have a JS virtual machine. But the desktop have a real processor to take advantage of. Also, don't stick to a single language. Right tool for the right job. When i code with C99 (20 years ago standard) i feel my app is much safer than when i code in js. Yet c is not memory safe.
Yeah, then you finish with tons of NPM packages that sum two numbers. Yeah, search for it :). Like if npm package dependency graph was well organized or stable...
I‚Äôm just saying, it looks like the user has only four repos and is learning. Let people learn. 
I ran some tests using a sample string and 10k iterations without an early return. Yours took about 60ms on avg, for loop took about 40ms on avg. Using includes vs. || had no difference. v8 is extremely optimized!
Thats another issue. Learn something usefull. Like hey. Would you lean flash today? No? Electron is flash for desktop. 
If only there were better tools to build desktop applications
Yea, but main power of Electron was code reuse from web apps. Which is VERY appealing. Or at least reuse of visuals (styling, components). I though you have some alternatives of making desktop applications through (at least partially) javascript.
https://ultralig.ht
That's great thanks I need to look into event handlers. And multi browser support in general.
Indeed you're right. DocumentFragments aren't faster or are even slower in some use-cases. These only shine when you need to add a lot of elements, which given the benchmark does not. Just add more elements and see how the difference becomes smaller and smaller. With that said, you should use DocumentFragments only in these scenarios as they allow you to limit the reflows count.
Now we are talking! Thanks, looks promising
So basically I should setup apache or nginx server locally, host grafana on it and enable above headers?
Seems like you should be able to iterate through your \`CountryData\` object to create the input you need for columns, its all right there?
ok, it's important to understand where you are accessing this property from because attributes have a "text" property if you are using the interface for the node based off on event. https://developer.mozilla.org/en-US/docs/Web/API/Text textContent is specific to the Node interface. You probably shouldn't be accessing the lower level "text" property directly as the Attr interface has Attr.value, which is probably what you want since you are generalising and want to access attributes in a non-specific way. You'll probably be iterating through all attributes on a given element, so this is the approach you'll need to take: https://developer.mozilla.org/en-US/docs/Web/API/Attr My recommendation is to have a look at the official DOM API documentation. This is going to be your best approach to solving this in a way that follows the supported DOM recommendation and there is a lot of information specific to the problems your are trying to solve, which is DOM access and manipulation. These standards have been in place for years if you follow the compatibility guides, you'll be fine. 
WPF
Linux on the Web... has a [desktop gui](https://linuxontheweb.org/desk.os). But actually *inside* a browser window.
There are other languages other than JS, you know? :D
If people still make crap from the desktop is pretty much because they want tbh. Alternatives are there to be used. And it's not hard to beat JS on other platforms other than web. Even in web is now having some competition with web assembly.
Accept that you are junior and willing to learn. If they asked you for the interview they probably know that already, but people tend to like humble people. Be happy in sharing what you know, but don't pretend to know what you don't. If you are stuck with a question, maybe explain what would be your real life process to go about and find the answer. It won't, or at least shouldn't, be so much about your technical skills but rather how you can reason about problems and learn.
no, this is not true. The standard DOM API provides this information. Read the documentation, there are methods and properties available for changing attribute values without affecting child nodes. 
Again, not necessarily true. The standard DOM API provides this level of control. Read the documentation, there are methods and properties available for changing attribute values without affecting child nodes.
thanks :-)
This is really small but there's a typo on question 13 (option 1) - it's "than" not "then" I'm stupid picky about spelling like that so it lowered the credibility of the site for me. But other than that, I enjoyed playing! 
Study all the way up to the night before, then relax as much as you are psychologically capable of.
 try { const result = await $.post(url, data); } catch (ex) { /* error */ } /**************************************************/ try { const response = fetch(url, { method: 'POST", body: JSON.stringify(data) }); if (response.status &lt;= 200 || response.status &gt; 400) { /* an error */ } const result = await response.json(); } catch (ex) { /* different kind of error */ } I'm pretty sure I still missed something with `fetch` (like cookiez) but it's already clear to me that it's just as unusable as `XMLHttpRequest`.
&gt; Read the documentation That's my point.
Thanks. We identified the source of the slowness. It is because of the svg images which we use. Thanks for the valuable feedback. 
awesome tip :- )
My post was sarcastic
Yes, this is something to consider as well :)
Show that you are interested in the tech the company uses. That you want to learn, grow and have a passion. Accept you are new, dont try to hide that. Thats not a issue. Good Lucky and keep calm üòä
thanks friend :-)
That wont help üòë
Awesome! Would you reccomend one of the three?
Since you are using Vue, i'll suggest Strapi.js, the dashboard is made with React.js, you can easily achieve that only using a GUI no need to create codes! 
isitfresh has some good advice, I‚Äôd like to add a coupe of things: Review the work in your portfolio so that it is fresh in your mind so that you are comfortable talking about it. There‚Äôs likely to be questions about it to the effect of ‚Äúwhy did you choose this framework‚Äù, ‚Äúwhat was a challenge you faced‚Äù, etc. You‚Äôre being evaluated for your soft skills as well, like how well you communicate, how you get along with others, etc. I‚Äôm a pretty shy person but I make a point to be outgoing in interviews by shaking hands, smiling a lot, and being friendly and talkative. You‚Äôre interviewing them as much as they‚Äôre interviewing you. Ask questions and get a feel for if it‚Äôs a place you want to work. Definitely ask questions about their business, clients, processes, etc. This is a great way to show interest in the position, which is something they typically look for. Good luck! 
Ctrl + F5 to do a hard refresh and clear out cache 
Thanks i'll take a look. Does this work similar to Fire base?
thanks for the advice :-)
You can handle the headers yourself or use CORS middlewares. For express(nodejs), try [https://github.com/expressjs/cors](https://github.com/expressjs/cors) 
What I want to know if it does cache the data. I want to know if I refresh the page, is it using the cached data to repopulate the map? I'm asking because I want to determine if I'm using too much bandwidth.
Not really but, in your case i think it's the easiest way! Anyway you gotta change a little in your code. \- Once you install strapi.js it comes with an authentication system ( Local ) \- you have a dashboard to CRUD users graphically no needs to code this manually! \-if you want to load informations about a user you just need to get request the user Id /user:id \-Creating a new Content type ( Model : post , article ... ) in your case Post ( Graphically too ) \-For messages you need to create a new Content type just like post \-Removing users is already included in your dashboard &amp;#x200B;
Maybe not helpful, but when I originally got hired at my job as a Jr Dev I didn't have any coding challenges that I can remember. They basically just wanted to get to know me, see my portfolio pieces, and talk Javascript related tech. 
Well, a larger file size does imply more code that needs to be parsed and loaded.
That is helpful. I just kind of assumed there would be a coding challenge.
No challenge, they checked my github profile, I went over, we talked tech for an hour, had fun, got the job. &amp;#x200B; However, at a previous place, I got 1 hour to build a "carousel" image slider.
Can you access for example file system?
Thank all fix that 
No challenge. Phone interviews and references. References go a long way, especially when someone in the company refers you and can vouch for you. Networking, people! Get to it! Make those connections!
It's quite simple to build your own CLi with node.js, `process.argv` is your friend! Check this video to get you started: [https://www.youtube.com/watch?v=C9xGEJ80jjs](https://www.youtube.com/watch?v=C9xGEJ80jjs) &amp;#x200B; No need for bloaty libs if you just need something simple, however, i don't know the scope of your project, so I might have just shot myself in the foot :D &lt;3
Sounds like OP was looking for projects, not how to learn JavaScript.
Don‚Äôt bullshit and don‚Äôt pad your resume with stuff you don‚Äôt know reasonably well. For example, just because you deployed something to AWS once or twice, don‚Äôt claim AWS. 
It's still considered a support question.
I know this is a bit pedantic but your case for \`18\` is wrong It would output \`eightteen\` not \`eighteen\`. But for the purpouse of an interview question i'd be more impressed that you thought to optimise
I guess network tab should tell you the data is cached or fetched new on refresh
The closest thing to "your own firebase" that I can think of is CouchDB together with PouchDB &amp;#x200B; However, most people would probably recommend mongodb in a MEVN-stack [https://medium.com/@anaida07/mevn-stack-application-part-1-3a27b61dcae0](https://medium.com/@anaida07/mevn-stack-application-part-1-3a27b61dcae0) &amp;#x200B;
Few of them 1) Build a calendar like Microsoft outlook. Did not try :P 2) Build a debugger like console app. I made this [https://jsconsoleprototype.herokuapp.com/](https://jsconsoleprototype.herokuapp.com/) 3) Make a site like youtube &amp;#x200B; They generally see the approach and the architecture. These may be a good indicator on the depth of the JS you know. For instance [https://addyosmani.com/largescalejavascript/](https://addyosmani.com/largescalejavascript/)
Nice template! Is there anyway to secure the application from being tampered with after it is distributed?
At this point I think the easiest way to build it is to build a single (runnable) bundle from all your js code. Then compile nodejs to include the bundle in the executable. Note: it‚Äôs _much_ simpler to run your bundle with a shebang than building a custom nodejs executable. What do you try to accomplish?
Works for me. I know it sounds counter-intuitive, but the most corrosive element to being able to do something like whiteboard out a feature is nerves. You study to get knowledge, you relax to get concentration. I have been a webdev for a long time, and been to dozens of interviews. I noticed a distinct truism, I do better at interviews the less I want the job. I started using that as a mind trick, and whang, I started getting the big ones. Crazy as it sounds, it works for me.
didnt really get any challenges, but would get tricky questions intended to make you point out an error or talk about your solution. i've been asked to write some demo code, given an hour and an html page with some elements on it to play around with. most have just been talking shop - previous experience, framework jibber jabber and talk about the position and whats involved.
You shouldn't check for the response status on a successful response as anything else than 200 should be caught in the catch block. If you remove that you've already simplified your code (almost) to the jQuery level! Though fetch only provides the capabilities for an easy AJAXing. It makes sense to wrap it in your own API functions for an easier handling.
I haven't used, actually; I researched this for a project I was working on a while back, but went a different route entirely. NPM install numbers are usually a good heuristic for where to start, though: pkg has 17,000 downloads in the last week, nexe has 1,700, and enclose has 70. 
Different strokes for different folks. None of my production work is public, and I'd rather not advertise myself using the dumpster fire of half baked, abandoned side/training repos that is my github. Gimme a coding challenge any day.
Wow it took way to long for me to grasp this, but now I do, I feel good. It's hard to run this code without a console, just in the head to see how it functions, even though it's so simple.
They likely cache the data on their side, so while it may get cached in the browser side, a hard refresh will likely return the exact same data without the bandwidth cost associated with actually getting the data
Years ago, my future boss, just told me mid-interview that I was going to get hired anyway, _because_. He also told me he was going to change the figure I had asked because it was too low. He increased it by 50%, and then hired me. On another interview I was asked to sketch the general design for a whole project. It was some sort of multiplayer game. On paper. And they asked for implementations (yes, coding on paper) for some of the parts. They pointed out some small syntax errors on my piece of paper. On a different occasion I was with some other 80 or so candidates in a large room, we has to take a number of exams, anything from 40 to 100 questions each. Each one on a different subject (C++, VisualBasic, Java, general programming knowledge...). One time I just went in there and proceeded to spend the next hour and a half to two hours just talking to these two guys that were completely exhausted and just wanted to relax for a while and talk about cool JavaScript things... or books, or robots, or whatever. They just needed to talk. The next day they called me and told me I was hired. A different time yet again, I was asked to sort an array of words by length and calculate the average length or some similar thing and then a second problem involving the DOM and some event or something. When I solved both easily, they looked surprised and told me that I "would get bored there" and proceeded to reject me right there and then. And there was the time when I was handed a multiple choice test on JavaScript and given "about an hour" to fill it. This one was fun because I was going through a headhunting company and I didn't yet know the final company offering the job, but it turned out there was someone in that company that I had worked with some time before at a different place and the test... well, _I_ had written that test, as an internal thing for some other purpose. I don't really know why but I did tell them the test was mine. Of course, the fact that it had taken me just a few minutes to complete it would've been weird in itself, so I guess telling them was the natural thing to do. Oh, one time I was asked to build a full search component in a couple of hours. Complete with tests, client and server, with a "nice design and UX". They even had some mock-ups of a couple of designs I could go for. Ah, well... ---- This are all real, of course, but what's the _moral_ then? Well, I guess the moral is that different people will approach interviews very differently. Or that sometimes it doesn't matter. Or that I've been through too many interviews already? Or something else? Oh, whatever.
I'm pretty sure short circuiting has been part of the js spec from the very beginning
&gt; pretend you do not care This advice works in a lot of aspects in life, actually
This, you don't need to compile anything to binary, just use a shebang 
Sure, not getting stressad at the interview is important. Bring nervous never helps. But its normal. Whatever works do it üòõ
You are right on that one! :D
I use typescript a lot but I had never thought about checking that all cases were covered in a switch by checking that the type being reduced by the statement was assignable to never.
&gt; However, at a previous place, I got 1 hour to build a "carousel" image slider. seems like a legit real-world test for general js/web dev, rather than some implement this merge sort or radix-tree.
"Make a site like YouTube" sounds intimidating af.
It was a really nice test.. Except for that it needed to work in IE6 (this was a few years back) :-D
I have not had a quiet moment to be able to really sit down with this. I will. I am excited to get to this. I really want to learn this. I hope to have time today. I will let you know if I have any other questions. You are awesome.
&gt; Except for that it needed to work in IE6 ah yes, the dark ages.
the challenge i give applicants is a take-home, real-world problem. it's a bin-packing problem for putting products of different dimensions and weights into boxes of appropriate sizes (for the purpose of UPS estimating correct shipping rates.) it's a good mix of problem solving and coding (could be done either iterativley, recursively) and gives enough insight into the thought process, general coding style, etc. 
My question is rather why it's included in the first place. I get that not everyone is a designer, but this boilerplate would've been better without being opinionated about which CSS framework to use. 
Yes, this is doable as follow: \- convert image to canvas with .getContext("2d") \- Apply your text \- Export canvas to dataUrl \- Save image to disk, or send to save on server
Mostly algorithms. And, they were not relevant to the job at all. I‚Äôve been asked several times, either directly or indirectly, to find only duplicates in a list. There are a few ways to do this but the way they want you to do it is building a hash table. For the record, if you‚Äôre processing so much data on the front end that a hash table vs for loops make a difference, you‚Äôve already lost. More recently, I got asked to build a basic parser for a lisp-like language. So, I‚Äôd get a string in the format ( add 2 3 5) or ( subtract 6 2 ) or maybe ( add 2 ( add 4 7 ) ) Mostly leetcode problems, basically. I‚Äôm in SV for reference, where I believe this is more emphasized.
If you think about it, it would not be a boilerplate then. 
There wouldn't have been much boilerplate at all if it wasn't using Bootstrap. That would just be the electron-quick-start app.
I can see WinJS in a corner alone everyone else is looking away "Guys?"
Hi everyone, you might wonder at first what *Vulkan* is: [Vulkan](https://en.wikipedia.org/wiki/Vulkan_(API) is a new 2d/3d low-level rendering API released in 2015. In JavaScript the only 2 options to do complex rendering is Canvas and WebGL. Canvas is often too slow and WebGL, compared to OpenGL is very outdated. Many game engines and games switched to Vulkan because of it's promising performance. Vulkan itself is a C-language API, but now it's available for JavaScript too :-) 
Man, can you teach me? I can't get below 100 :(
Is uses the local storage mechanisms built into the browser to build up its own file system. There is a [CLI interface](https://linuxontheweb.org/shell.os) that shows off the file system better. If you want to get files from your computer's native file system into it, dragging and dropping them onto the desktop is the easiest way to do that.
I feel like this is every developer ever. or maybe just me.
When I interview people, I usually get them to rewrite a lodash method, usually `debounce` starting with the most basic functionality then going up to full stopping where their skill set limits them.
This is really exciting!!!
One of the examples of applications using Electron is GitKraken, which obviously needs access to your os filesystem. No point of dragging and dropping. Apps like Slack can live without it though.
Interesting. Any idea how to figure that one out? It would seem that everything is getting refreshed when I am on it. I guess i'll just have to study it further. 
Looks good but what the is **s**?
In general I agree with that, but in the case of a map operation with a lambda, there's only one argument, and that argument is "whatever you're mapping over", and it only exists for the scope of the declared lambda, which in this case is only a single line of code.
It sounds like OP knows that and is looking for a binary wrapper
For me, "boilerplate" implies the following: 1. That you can start it in dev mode (using something like "npm start" 2. That you can build it cleanly 3. That the app starts and exits cleanly. This does only two of the three, but includes something I explicitly don't want in an electron project (bootstrap/jquery)
Unfortunately there is only so much you can learn, and you have to make choices. So I believe that if you have the ability to use node as an additional language to write Desktop apps, that's great. It does not reduce the value of the other languages. It only increases the available options. My 2 cents
&gt; electron-quick-start Well, that's sort of my point. This _is_ electron-quick-start, with useful comments stripped, a legacy JS library, and a CSS framework largely geared towards website design rather than apps. 
The [numeric separators](https://github.com/tc39/proposal-numeric-separator) feature is actually working its way through the Javascript standardization process. It's currently at stage 2, which means it has two more stages to go before it becomes part of the standard.
Thanks, but I know the documentation, including about *Text* and *Attr*, but I do not see how the latter would help. *text* in the example I gave in the root post is not an attribute (*getAttributeNode* that returns *Attr* object is useless as it would return *null*), it an own property of *HTMLAnchorElement* object. It is no different from *href* property in this aspect (though different in terms of *href* also being an attribute) and there is no way to universally discern between them to see whether they are safely writable or destructive. There is no direct access to raw DOM object properties that would avoid invoking *set* function as the raw properties by design are made private (internal) for security reasons. And even if the *set* function does not really do anything other than just putting its argument to the raw private property value, there is still no way to avoid it being called. It is theoretically possible to use *Proxy* to intercept the invocation of the *set* function of the property, but it would not help as DOM object would not give me direct access to the internal raw property anyway. It is possible to use `Object.defineProperty` to e.g. set *text*'s value to whatever I need, but then the property will turn into a *data* type instead of *accessor* type, which means that my duplicate (clone) node instance will become corrupt, not a proper instance of an *HTMLAnchorElement* object. Another way would be to use the same `Object.defineProperty` while hijacking e.g. *get* function to set a "default" value for the property on a `aTag.text` call that would trigger in case if *text* is empty, but then again the issue is that *text* in this case is an *accessor* function, not an actual property, while I do not know the real private raw property name and if it is accessible to be written, so I can not assign the value I need as a faux "default" this way, too.
Then let people who know how to use the proper tools use them to build applications. You wouldn't dig a hole with a hammer, just because you only know how to use a hammer.
Hahahaha. Fortunately, I am not in a position to enable or stop anyone from doing anything
Was playing around, here you go for a ***barebone*** *meme generator*: [https://codepen.io/Nico\_KraZhtest/pen/ErOxGY](https://codepen.io/Nico_KraZhtest/pen/ErOxGY)
Then don't use it?
If your objects don't need to contain the id information, and order isn't important, then the object approach should be fine. If they do need to know about the id, you're going to have some redundancy with the ids - one in the individual objects, and then the id again in the container. Generally this isn't a big deal, though it might depend on how these values are getting created (if manually, it allows for a greater chance for error with mismatched ids). If order is important, you'll most likely want to stick to the array. But once you have the array, if you need quick access to your objects by id, you can run a single loop to create a temporary lookup matching the alternative object format and pull objects from that.
You could check out AWS amplify which can be used with a a collection of AWS services. You can set up a database using dynamodb + graphQL and you don't have to configure the backend too much.
Thanks! Order isn't important, so I think object (or associative array) is the way to go. I found this test via SO: http://jsben.ch/Y9jDP Pretty much confirms your response. Thanks!
are you using Google Maps in an embedded iframe or in some other way? on any case their maps are SVG so I don't think even fully reloading them would be too heavy. And scripts, styles, images and any other resources apart from the source code of the iframe should be subject to the browser caching, so they shouldn't redownload too often.
Windows-only.
Thanks for responding to my comment. I understand what the single argument to a map is. What I'm trying to communicate is that IMO more explicit param name would be easier to grasp/read. 
If I want to dig a hole with a hammer, then so be it. I don't create applications for you. I create them for me. If you have better tools to share, then share. 
When people are building stuff for themselves that's fine. When companies are choosing objectively worse tools to create widely used applications there's a problem in the industry.
The people that hire are business oriented. They don't know the difference in tools until they make the product or service. Also, many ideas for a program starts in people's hands like mine. We don't know better until my hypothetical boss hires someone like you to help. 
That's a fair point. Keep in mind that with Qt and QML, you can also write lots of apps using nothing but JavaScript. Last time I tried it, I was able to do everything I wanted without having to drop down into C++. So if you're curious, and want to write a desktop app using JavaScript but with better performance than Electron, QML might be worth a try. Not that I hate Electron. I get mildly annoyed when I see Electron apps eating lots of my RAM, but I generally enjoy the Electron apps I use, so I can live with it. It's like you said: it's nice to have more options. That's why I mention Qt and QML in threads like this. Defining your UI with QML instead of HTML takes a bit of time to get used to, but I find it to be a generally pleasant way to get things done, which is why I recommend that JS developers give it a try. 
Currently working on linux support!
Look up the functions on MDN and see what the documentation says they do, and what each parameter is for. https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout
Let's try a simpler example just to cover basic knowledge of function parameters. Let's say I create a function: `function divide(dividend, divisor) {` `return dividend/parseFloat(divisor);` `}` You can see that we have two parameters, `dividend` and `divisor` In order to call this function, we would do: `var quotient = divide(1, 2); // returns .5` `var quotient = divide(2, 1); // returns 2` &amp;#x200B; As you can see, the **order** we pass these parameters in is extremely important! When functions are defined (like we did with the first piece of code), the expected parameters are defined along with it. The only way a function can know which parameter is which is by the position/order you pass your arguments into the function. &amp;#x200B; Hopefully that helps clarify a bit for you. The exact function you're having trouble understanding is here: [https://www.w3schools.com/jsref/met\_win\_settimeout.asp](https://www.w3schools.com/jsref/met_win_settimeout.asp) &amp;#x200B; Check out the "Parameter Values" section, hopefully that will clarify some things for you.
hey, VS Code is based on electron. 
It also eats resources. 
it would eat resources anyway. 
https://blog.xinhong.me/post/sublime-text-vs-vscode-vs-atom-performance-dec-2016/
dude, come on.. vs code is way more than a text editor. and the difference is not even that noticeable. 
If you don't need ordering, use object, and you can `Object.values()` to get an array version (polyfill for old browsers). If you need them ordered, for performance, you can keep a separate array for order, and use that when you need it. If you don't care about performance, just use an array. 
The unknown example is a little bit confusing to me. When getting data from an api how can typescript infer the type when you do (typeof y === 'string')?
Wow this is really awesome, I will definitely be tinkering with this in my spare time. Thanks for sharing this great news!
GTK, WxWidgets, Java and JavaFX, WxPython...
Yes, but when I hired you to dig a hole and you give me a 1-foot-deep area of compacted earth, it's not really the same.
The error is being caused by a linter (a background process which can check your code for possible errors before it runs). Put this comment at the top of your file to tell the linter that its ok that you're using these variables because they're global and put there by some other file: /* global varFromOtherFile, anotherVarFromOtherFile */
Today I decided to improve my old boilerplate by doing this things: - Optimize Webpack &amp; Babel configuration - Load fonts &amp; modern-normalize locally - Non-blocking CSS - Fix xo linting - Update dependencies - Add new example component (Counter), that uses React Hooks - Add new example component (Button) with animations - Improve usage instructions Hope you will like it :) 
I really need to see some code to help you out any further. My gut tells me there's a better approach to this and you shouldn't be working with specific element types interfaces and again, not messing with the "text" property directly. Is there anything you can link to that shows code you're working with, the desired result and the actual result?
 I dev a cryptocurrency, and js would allow ( within my skillset ) a much more intuitive set of cli tools ( node and daemon) than I currenty ship with. I'll probably use pkg, just from a fast skim it seems easy enough to implement.
Why do you consider it a worse tool? From my perspective it looks like it has its use cases. Do you use slack, atom, vscode? Anything that runs on the web and has a reason to not be a tab in your browser might make use of electron. Why should they rewrite their client? Seems like your hating on it without thinking.
Maybe if you're running on a low spec machine, but JS is an interpreted language. Correct me if I'm wrong, but Gecko/V8 don't ever compile JS, right? Performance metrics would be more like operations per second, or time (after network transmission is complete) until a library is initialized, or time from script load to DOM updates etc. I'm re-suspicious now that the "performance" here is more about network transmission and file size than about performance
Wow thanks for this! Is this production ready?
It's experimental, though multiple projects were successfully created using this - one guy even managed to create a realtime ray tracer using NVIDIA's RTX pipeline, which is a pretty awesome feedback for this project's stability and feature coverage
Thanks! Worked perfectly.
demo website needs a little help in IE11. but they look pretty good.
‚ÄúNo‚Äù -&gt; ‚ÄúKnow‚Äù at the end. Good short article. I like it!
To keep the analogy, if the specification of the hole is 1 foot deep, compacting the earth meets said specification. You're smart, as you know the best methods of digging, but freelance contracting breeds this type of problem. 
Go with object, If you dont know object keys, then use Object.keys and do a foreach on Object.keys
Wow where can I find that?
It's not public yet, but he will add it [here](https://github.com/maierfelix/nvk-examples)
*Vue-nicorns - what a waste...
Try removing the JSON.stringify inside the JSON.parse
readAsArrayBuffer?
Not too aware of HTML, still learning it. But you can simply give IDs to your div containers and pass that ID as an argument in your button click function. Then simply using DOM APIs remove complete div using the container I'd.
Google such a thing? Why? I have never, ever seen you having to do ANY of those things. It's right at the bottom right of almost every editor I've used. Hell even back in vim/emacs days people did this. Lol, people who use "tabs" probably even use spaces and don't know because it's their editor's default. Have you ever used VS Code for instance? Default is 4 spaces bud.
Because you can make the product more efficient/better with more native tools. Offering a worse product because you don't want to dev a better one is a bad excuse in most cases, imo.
I was being sarcastic
These are the usual spammers who steal other site's content. morioh.net is their main domain and should be banned on sight
If you have the time and resources. Sure! But think of it from a business perspective rather than from a technical perspective. I think it serves it purpose.
Dang, I just realized that I DO need them ordered. It's an array of people, so I'll need to be able to order them by a couple of values (names and birthdays). &amp;#x200B; I feel like both use cases have equal performance values. I *think* it may be more efficient to update the document in the array using the mongo $ and sort the objects in the array than it would be to explode the object in order to sort it, which I think would have to be done at runtime. Am I missing something?
I thought of that but the creation of my divs are dynamic. 
Would like to contribute, is there a guide for contributions?
No that doesn‚Äôt work because JSON.parse expects a string
Better name would be vuenicorns
In my humble opinion, you should avoid promises until you have some of the basics more nailed down. Promises are a solution to things getting out of hand using call backs, call backs are a solution to a problem which is only apparent when you're trying to get multiple libraries of code to talk together. 
There are performance differences * Object/Hashtable - unorder, but `O(1)` lookup by key * Array - ordered, `O(n)` lookup, can use binary search to get `O(log(n))` lookup if sorting order is related If you use Mongo, you can probably just let Mongo handle this. You need to configure your Index and do your Query correctly.
VS code is worth it. If resource consumption is the primary objective the best thing to use vim or emacs with a bunch of plugins.
Can you put it in a for loop and pass the instance of that img to the function?
Right now, your selector is grabbing all elements that contain the class \`remove-image-btn\`, finding the closest \`div\` to the element, and removing them all. &amp;#x200B; What you want to consider doing is getting the \`event\` from the element that's clicked on. Once way to do this (in plain JS) looks like: const buttons = document.getElementsByClassName('remove-image-btn'); for (let i = 0, ii = buttons.length; i &lt; ii; ++i) { buttons[i].onclick = removeParentDiv; } function removeParentDiv($event) { $event.path[1].remove(); } Per one of your comments, if you're dynamically generating the \`div\`, you should be able to attach the \`onclick\` handler to the button during generation. The above would still work for you (and could be rewritten for jQuery as well).
Boilerplate implies that you get a basic working app out of the bag to start your dev. Not that you necessarily have the choice of what's inside. With your exact same reasoning I could argue that OP template is bad because it does not give the option to not use electron but something else instead. A boilerplate is not about what someone want, else you won't be using a boilerplate. 
Or, you know, just remove bootstrap from it?
Literally unplayable.
Thanks for the help, when adding the onclick dynamically would it just be removeParentDiv()? also after following your code, I get `Uncaught TypeError: Cannot read property 'path' of undefined`
I forgot to mention, these images are being shown once chosen from the input file..
I'll have to trust that you bound directly to the method as shown above and not to the _result_ of the method. From the error, it sounds like `$event` isn't being passed, which would be the direct click event. Do you have more code that we can see, that may help figure out how to help you out better.
You're website is barely functioning on load when I opened it up. Extremely laggy. Not sure if just me, maybe another can confirm. Also, ran it through [PageSpeed](https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fchawki.netlify.com%2F) and it gives you a 24.
That's a pretty bad test, I would not use that to base performance decisions on, since it gives a very limited view. As an example on how you could improve the code: http://jsben.ch/bbXuM It also doesn't take into account how it scales, how is it going to perform with for example 10000. There's also the question of whether order matters. Here is a more complete set of tests which take caching and ordering into account, which should make for a more realistic result. [http://jsben.ch/Hd3tf](http://jsben.ch/Hd3tf) 
I updated the post with full code.
Study what, exactly? 
Got it to work, i was passing \`this\` instead of \`event\`
Glad to hear it! Good luck with rest of your project üëçüèª
Thank you for your time! Appreciate the help.
I suspect most organizations that adopt electron do so understanding the costs. Think about though, yes, it's bloated, but to the end user, what's the difference in terms of memory usage relative to run a web app in an instance of chrome? To the end user the only obvious cost is the time of initial download and install, and on decent internet connection it's not that expensive. For the developer who has a solution that's just out of reach functionality-wise for a regular web app, electron is certainly seductive. I'm sort of in that situation now. I wrote, and am now supporting in the field, a web-app meant for deployment on a lan. The server runs on a headless little box our clients plug into a switch in their lan, and users navigate to the ip of that box in a browser to access the app. Finding that ip has been a surprising bitch. Our customers aren't IT savy. We can't ask them to use something Nmap. We resorted to writing a crappy little dialog box app our customers can install to help them figure out it. But if the web-client could do just a udp broadcast for the initial discovery, boom, it would just work. I have no doubt our users would take a one-time, 5-10 minute download to improve that experience. 
The more senior you get the less coding challenges there are. It's also pretty easy for a senior dev to cut through all your bullshit with a few conversations. In saying that, also helps that my country has 90 day trials where you are fired for any reason with 1 day notice if they don't like you. When I asked my boss why they didn't challenge me for my first job out of studies he said "oh, I asked the tech lead whether we should, he said you'd either sink or swim within the first week do the was no reason, luckily for you you swam" I told him to fuck off We laughed I'm still there
To the OP... Don't let the negativity here get to you. Electron is getting a bad rap lately because a bunch of old timers are seeing kids producing better looking desktop applications then they are with the only noteworthy downside being Chromium's resource overhead. /u/weasel45 is the most objective person in this thread.
I scrolled expecting stodgy programmers to tell this person to go look it up on Google. Instead I see helpful code and plenty of explanation. You da real mvp, /r/javascript. 
I don't think that that's a good mental model for a promise. A promise doesn't say "here is where you can find the data". IMO a promise is more: "hey, I don't have this data right now, but when I do, I'll let you know and you can do something with it" (by using .then() or using async/await). 
But a pointer can be(isn't always) used that way. Yeah, I agree it isn't an exact analogy but it helped me to think about.
Wow, this is real stuff. The [triangle example](https://github.com/maierfelix/nvk-examples/blob/8d7365d3195ce3b92978b60496041bcabd90e73f/triangle/index.mjs) is 600 lines :D I hope someone rolls a nice engine on top of this. 
&gt;You can make those private now! Now you can curate your content without paying.
What about rejected promises? Null pointer exception?
 const blob = new Blob([ JSON.stringify({ stringProp: 'test', arrayProp: [1, 2, 3], objProp: { test: true } }) ], { type: 'application/json' }); const reader = new FileReader(); reader.addEventListener('loadend', () =&gt; { console.log(JSON.parse(reader.result))); } reader.readAsText(blob); This works fine. Based on your comment what it sounds like you're doing is declaring the blob like const blob = new Blob([{ stringProp: 'test', arrayProp: [1, 2, 3], objProp: { test: true } }], { type: 'application/json' }); instead. You need to stringify the object before you store it in the blob. If you don't then when you make the blob it automatically calls `.toString()`on the object, which outputs the string `"[object Object]"` which is what you're actually storing instead of a JSON representation of the object.
I agree. The problem is that I don't know how to do it properly. I either crash the billboard completely or just don't get any output.
Unknown is not the same as any?
i want the delay to be relatively accurate even if the browser tab is backgrounded
Have an object keyed by Id, and an array of the ids themselves for order, which you can map to the objects if necessary. This makes updates much easier - order updates are just swapping ids in the array, and data updates are just updating by id on the object. 
Have an object keyed by Id, and an array of the ids themselves for order, which you can map to the objects if necessary. This makes updates much easier - order updates are just swapping ids in the array, and data updates are just updating by id on the object. 
Note: previously stage 3 - it got demoted.
How‚Äôs about creating your own blockchain as your backend?
If I understand you correctly, then you can have one js file and then call that only js file in both your html files via the script tag. So somewhere before the end of the &lt;body&gt; tag, you should have a tag script calling your javascript file something like &lt;script type=‚Äútext/javascript‚Äù src=‚Äú./path/to/your/file.js&gt;&lt;/script&gt; If you really want to have two js files and need to have both in your html then just include both the files like mentioned above. &lt;script type=‚Äútext/javascript‚Äù src=‚Äú./path/to/your/file.js&gt;&lt;/script&gt; &lt;script type=‚Äútext/javascript‚Äù src=‚Äú./path/to/your/file2.js&gt;&lt;/script&gt;
My understanding is that it's like a strict `any` that won't let you do certain things (without further type information). Whereas `any` just signals "don't care, let me use it".
yeah it laggy on chrome, but faster on other browser. i wanna fix it
: - )
You can use something like gulp to concatenate the files into one minified/bablefied version. We have to do this for a legacy style app. 
I'm using it on a div. Actually am using angular google maps library. Thanks fro the response. So as long as I am not using it on an iframe, it should be redownloading it everytime I refresh. Any idea how I can do some trial and error on the network tab of dev tools?
I'm using it on a div. Actually am using angular google maps library. Thanks fro the response. So as long as I am not using it on an iframe, it should be redownloading it everytime I refresh. Any idea how I can do some trial and error on the network tab of dev tools?
So far I learned I can‚Äôt trust Zeit to execute, I would not use them for a production app yet How has your experience been?
My 2c...promises are not beginner level. Don't stress
Because this isn't a url, this uses the javascript developer function in the search bar which allows you to enter some javascript in there. If you have tried typing javascript:alert("Sample text") it will bring up a alert in the page
From that link, &gt; no operations are permitted on an `unknown` without first asserting or narrowing to a more specific type That sounds like the opposite of `any`. Very handy to know about!
The correct way to deal with it is neither global variables nor all in one file - the correct thing to do is to export the variables you need from one file and explicitly import them in the other. That'll at least give you the values you need, if they're consts (if you're relying on global variables to pass data between files... don't do that). The issue you're having - `var varFromOtherFile ...` throwing an error has to do with hoisting. The JS engine will hoist the variable declaration out of a block when you use the `var` keyword. To avoid global variables and the super-bad patterns they bring about, use `const` or `let` instead (const is preferred, use let when the value's got to change).
I think if OP is just trying to learn how to call multiple JS files in his HTML, gulp and Babel are not a helpful suggestion. It's like someone asking how to change a single tyre and recommending heavy machinery that could make his job much easier... if he was assembling entire cars and replacing wheels as part of that. He just wants to change a tyre. Invoke more than one file in an HTML page. Hopefully this will lead him in due course to learn to assemble entire cars, and use the machinery involved in configuring gulp, Babel, and why not Web pack and docker while he's at it. But you get there by steps, not teleportation.
That is how you do it üëÜ. And you're thinking along the right lines. If you think several JS functions are repeating themselves, it's a good opportunity to rewrite them, so that one function can be passed the data to achieve both goals for instance. It will be very useful learning and highly satisfying of you can achieve it. 
Excellent advice!
using Array.fill() and wondering why my data is getting mutated
I did something similar using Postgres, Express, and Heroku. Pretty easy set up and works smoothly
Nop. Sorry
Unicons is a original icons pack by [Iconscout](https://iconscout.com/unicons). For my library I just used "vue" + "pack name".
*Wooo* It's your **11th Cakeday** Klowner! ^(hug)
Being a person is not for sale. It‚Äôs not even available in your marketplace. ;) We‚Äôll all have to search inward. 
Creating a new file and naming it &lt;file&gt;.js instead of &lt;file&gt;.ts
I think so
Spelling
lenght
I am not working with any specific element types or properties in the algorithm, it is general that iterates through all of the properties of a node. I am discussing *text* of *HTMLAnchorElement* only as an **example** of a property that is destructive though programmatically it is no different from other properties which as safe to rewrite. I do not have the algorithm as a separate test sandbox example to show it to you, but there is really nothing much to see. First it clones an original node with a standard *cloneNode* method, then it iterates through the original node's own *childrenNodes* to recursively call itself, then it iterates through the properties with the use of `for (key in duplicateNode)` loop to check if some of the properties were not copied by the standard cloning method and tries to fill up empty properties by coping their content from the same properties of the original node. It is the simplest thing ever except for the latter part as the algorithm has to determine whether it should actually fill up the empty properties or not depending on how destructive it is. And this part is not ready, there is nothing for me to show you. This is a part that we are discussing here as I do not know the best way to implement it.
No, even with Angular, if it's downloading its own separate resources, they are being cached if their URL doesn't change. If it's used through an Angular library and some of its stuff is bundled in your bundled, then it's cached with your bundle. Try this in Chrome DevTools: in the Network tab, make sure "Disable cache" (top right) is disabled, and refresh the page. You should see a list of all resources that load on the page. Find the ones that Google Maps uses (you can either use the filter box on the top right in the Network tab, or find them in the DOM in the Elements tab, and right-click &gt; Reveal in Network Tab). In the size column, you will see how much data was loaded over the network. If it was cached you will see "loaded from file cache" instead of a file size. Hope that helps.
Cool... never knew about it. 
Oh no worries, you will regret to have used webpack instead of [ES6 import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) in much less than that. &amp;#x200B;
again, you shouldn't need to be work with a specific interface for an element type. You want to be working at the Element level so you don't have to analyse the attributes and work with any element type, standard or custom. If you use setAttribute() instead of modifying the "text" node directly, you won't have these problems. https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute 
Haha I was scrolling down to see if this was here, I‚Äôm victim to this too
1/ Reading Reddit flawn advises
something doesn't work.
I can never remember if it‚Äôs String.contains or String.includes and the same with Arrays. 
\- Regular ~~bad~~ way: pump it to global scope. \- Use a js packer, wait till next updates, and cry. \- Use es6 import, make your logic from the main file. \- Use a webworker, pass message, get results. &amp;#x200B; What I use, **and it's beautiful:** \- Use [es6 import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import), plus the [Broadcast channel api](https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API) to share objects between modules
*text* in the example is not a node, but a property of *HTMLAnchorElement*. As I mentioned previously, *Attr* is not related to the issue. *set Attribute* method would change the *HTMLAnchorElement* to look like e.g. `&lt;a text="TEST"&gt;` while the real *text* property will be left unchanged, which is both useless as well as corrupting to the object as it should not have *text* attribute, it should only have *text* property according its DOM specification.
Mostly forgetting that simple things like .substring( ) or .indexOf( ) exist.
I've had positive experiences with Electron Forge: https://electronforge.io/templates
returning in a map when I don't use an implicit return
That's not constructive or useful.
how are those mutually exclusive? I'm using both
Committing code that I only needed for debugging.
yeah, you're not getting what I am saying. it's not a standard property, it's a synonym for textContent. All DOM elements have two nodes, the html and the text. There are various ways to access these nodes, but you should never edit text directly because it is destructive. Also, if you look at the documentation, it's actually deprecated. This goes back to the fact that HTML is a subset of SGML. https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent HTMLAnchorElement.text Is a DOMString being a synonym for the Node.textContent property. I am trying to be helpful, but I don't think you're really paying attention to what I am saying. I can only recommend that you start writing some code and thoroughly read the documentation. Hopefully if you go through this thread it will begin to make sense. I think the different usage of the terms has been somewhat confusing as well. But I think reading the above link will clear some of that up. 
Webpack use es6 import, under the hood (when available in browser). It was spot on in 2015, but now it's slow. Of course if you want to keep 100% retro compatibility with potato browsers. That's changing, very fast, there is not much point already. Also, it require node, but my backend isn't. This is a mess. I won't install node on my servers just to pack 3 javascripts files, nor on my dev machine, only for that. **To me** frontend must stay frontend. I know peoples will dislike, but that's facts. 
To be completely honest, I never really saw the point. I mean, it's a curiosity, sure. But other than that, what does it provide? And is it worth the effort? All in all, it feels like a scoreboard for a silly game. Just my opinion, of course. Maybe others find value in these internet points, but I just don't.
I know. But why would I bother using it when I can just not? What benefit does it provide? 
if(a&amp;&amp;false){ //why my code can‚Äôt reach this }else{ //code which I tested before }
If you use typescript this won't ever be a problem again.
Every time you offend webpack, wordpress or anything bullshit coming from USA, bots triggers downvotes in loop. You should everyone take this in consideration.
Nice, I found it very interesting reading the code! 
the same problem here
using javascript. 
funtcion
Forgetting to .then or async/await an asynchronous function. Or forgetting explicit return
I want to debug a reduce function, so I change my code from this: array.reduce((acc, curr) =&gt; acc + curr); to this: array.reduce((acc, curr) =&gt; { console.log(acc, curr); acc + curr; }); And don't realise my stupid mistake for another 5 minutes. 
Why do you choose to use const in a very few places, while can use it nearly everywhere?
I pretty much agree with everything you wrote. I've been using Next.js every day for the past year and a half and it wouldn't go back to any other framework I used before.
I am thankful for the attempt to help with my question. I am not sure why are suggesting me to read the documentation that I already read as well as to use *attr/setAttribute* what contradicts to the documentation as *text* is a property, not attribute (just like *textContent*), and it should never be treated as an attribute (unlike e.g. *href* which is both a property and an attribute). You also continue to to call *text* "node" even though I repeatedly pointed at the fact that the algorithm is not specific, agnostic, and it only sees it is an *own* property of *HTMLAnchorElement* in the example we are discussing (and it is not deprecated: https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement). If the algorith gets *text* via `for (propertyName in duplicateNode)` iteration, it processes it just like any other property. There are no nodes other than *HTMLAnchorElement* node in any of this (text nodes undergo their own processing via recursion). The fact that the *text* property should not be directly is admitted in the very root post of this discussion, so I am not sure why you are explaining this to me. The question is different; it about whether it is possible to programmatically detect that this property is destructive by any means other than hard-coding it like `if (propertyName == 'text') continue`, meaning skipping it to avoid the damage.
Some people tend to only use const for types that have a literal representation instead of a constructor, such as Number or String in Javascript, as members of constant objects can be mutated.
Wow, didn't know that. While i find that very weird and nonsensical, that's not what's going on in this code.
Leaving my debugging console.logs in render methods in react, then wondering why everything is so damn slow
Really? The only time I see const is for values like the default width height of things, Number values. Although I admit I didn't read it too closely.
How to clone anything
**\[...yo\]**
You're right, HTMLAnchorElement.text is not deprecated. Not sure where I got that. I was wrong. &amp;#x200B; What I think is confusing here is there is absolutely no need to evaluate for the text property/attribute. This check shouldn't be in your algorithm. &amp;#x200B; This explains what text nodes are: [https://developer.mozilla.org/en-US/docs/Web/API/Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) [https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType) [https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode](https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode) &amp;#x200B; What's important to understand is that textContent is inherited from the Node interface. So HTMLAnchorElement.text is not specific to HTMLAnchorElement. The anchor element itself has no attribute called "text", in fact no HTML elements do because of the fact that it is a synonym for Node.textContent. Node is a parent class to HTMLAnchorElement and all other HTML elements. &amp;#x200B; Your algorithm can create new elements for the child elements, based on the element being cloned without checking for the node type. Attributes can be duplicated as well by iterating through the property and use setAttribute(). You may have compatibility issues with the *attributes* property though. Other than that, no checks on attributes have to be done. The DOM API should provide you whatever you need to safely clone any element tree. &amp;#x200B; [https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes](https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) [https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children](https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children) &amp;#x200B; I hope this finally clears things up. &amp;#x200B;
Thanks!
This is the only use case when comma operator is really handy.
Nice, that looks like a great starting point! üòç
Hey /r/javascript! This is a project I started building towards the end of last year after growing frustrated with the limitations of the iOS Shortcuts app. Shortcuts JS allows you to build Shortcuts simply by writing a bit of JavaScript. Currently, 123 of the built-in actions are implemented in the library, hopefully we‚Äôll have them all implemented in the not too distant future If you‚Äôd like to help out, adding a new action only takes a few minutes and you‚Äôll get your name on Shortcuts.fun as a token of my appreciation for your time. I‚Äôm currently working on inverters for each action, so that rather than just converting JavaScript to a .shortcut file, you‚Äôll also be able to import your existing .shortcut file and have the required code to build that Shortcut outputted as JS (and maybe even TypeScript too). The library is written completely in TypeScript (my first person project using TS) with 100% type coverage, as well as 100% test coverage. Happy to answer any questions you might have about the library, or to help you get started using it!
The primary reason for using const is you know for certain that the variable is always referencing the same object (even if it's mutated).
TIL
I'm aware, I'm saying it's not how it's used a lot of the time.
That makes no sense. A const should not be mutable
Formally *HTMLAnchorElement* class has both *text* as is its own overt specific to the class property, and *textContent*, which is inherited from *node* class. Even though *text* is a just a synonym to *textContent*, the algorithm has no way to learn that unless it will be hard-coded into it, what I am trying to avoid. In the example we discuss the algorithm is currently only processing *text* property (*textContent* is next in the iteration loop). If it turns out that in the property is filled in the original node and not filled in the cloned (duplicate) node, how the algorithm can learn that copying the value of the same property from the original node will be destructive? So far I am not seeing any ways to reasonably program it to be safe, there are no DOM APIs for that, sadly. The only way is to copy the value and then re-check all other properties of the *HTMLAnchorElement* node to see if they have changed destructively, mainly *childrenNodes* property whose *length* will become zero in case of writing anything to *text* (or *textContent* for that matter). In this case, the algorithm will have to restore the object's previous state (mainly the original *childrenNodes*) and then continue to the next *propertyName* to process. In this example it would be *textContent* which will be discovered to be destructive in the same way. But then *title* property will follow (which is also an attribute) -- it is safe, the check will show that no other properties would change if something is written into it.
Is there any documentation for these templates? I can't seem to find any way to access the Electron module from within the React side there either.
No, sometimes you do want an object that's mutable while ensuring it's the same object throughout 
especially when there is `classList.contains`, someone had to really hate people
Not a Number just joking?
that's why I started to use scopes even for one-line arrow functions, it's much handier to log and it's more readable, it comes with the price of more lines but it's worth it when having a big code which you want to be able to read after a few weeks 
forgetting to `catch` in Node and then having console full of UnhandledPromiseRejectionWarnings
I know, but the curated version would contain bugger all for an employer to look at, and still isn't any reflection of my production work.
&gt;"Formally HTMLAnchorElement class has both text as is its own specific-to-the-class property, and textContent, which is inherited from node class. (Even though text is a just a synonym to textContent, the algorithm has no way to learn that unless it will be hard-coded into it, what I am trying to avoid.)" No, again, *text* is never going to appear in any attributes list for an any HTML element. All you need to do is iterate through the attributes from the source element and set them on the target element. If you need to set a text node in an element, like for an anchor element, use createTextNode() and append it to the target element. This is non-destructive. Example: https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode Again, you never have to worry about setting *textContent* or *text*. You will need to check *children*, like you said. Iterate through the returned *nodeList* and check *nodeType* for each item in the list. If the value is 3, it's a text node. https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType I know I am just repeating myself at this point and so are you. When you're ready, give what I am saying a go and you might be surprised. Good luck!
I thought I was only the one
Hey man. Great thanks for taking time explaining it! I really appreciate it!
Generally doing something in some files which I need for debugging (commeting out certain components which gets in the way for example). Finishing my task. Forgetting to revert code for debugging. Or occasional console log slipping to a commit. I suppose compiler would lend a hand here, but to this day I have difficulty to build a case to use TypeScript in my company.
I would like to start using Nextjs but somehow I cannot set my mind how different it is the regular client side rendered React app with Redux? How my mind should be set in comparison to working with Redux actions and other classic Redux flow? Also I saw that if you want nice routes you need to have an express server running. Does that means that I need express server running in order to have nice URLs with my Next app? What if I have to communicate with some other external server and db? And if I work both on bakcend and frontend I can use that next's express server for nice URLs as a backend API too? If I want SSR content I use getInitialProps, but it calls external API, so in order to have SSR, that external server should have next setting's for nice URLs or what? It completely confusing. Please enlighten me. üòÄ Thanks!
I "found" it in 2012. It was sitting in my head, like a foggy dream. Then I had to do a lot of programming to actually create it. Two interfaces into it: [CLI](https://linuxontheweb.org/shell.os) and [desktop](https://linuxontheweb.org/desk.os).
yeah i wasn't really joking. The stupid mistake people make is putting so much effort into javascript when there's so much better out there.
Came here to say this. Forgetting to return the accumulator in a reduce. Caused me too many unnecessary headaches..
[Repo](https://github.com/HadiSalehWeb/colorful-transition) [npm](https://www.npmjs.com/package/colorful-transition) This is my very first javascript library, npm package, and reddit post! I sure hope I'm doing this right. Please check out the repo and tell me what I did wrong, in both the code and the project structure/npm/github etc, I'm very new to this whole thing. Thanks in advance!
like what?
I made a bit of a 'library' for a transition animation on my website, [check it out the repo](https://github.com/HadiSalehWeb/colorful-transition), or the [npm package](https://www.npmjs.com/package/colorful-transition). This is my very first attempt at a javascript library, at npm, AND at reddit, so I don't know if I'm in the right spot. All criticism welcome and encouraged, and feel free to report/remove this comment if I'm doing something wrong. Cheers!
Using length as a hash seems super naive. Not that client side security would ever be too secure.
`git add -p` helps.
&gt;Not really sure why would you do serious work with VanillaJS or jQuery in 2019 instead of a proper framework Because template rendering is fast and writing template is easy? Because SEO is important and SSR is PITA? And less than 1% of websites on the internet use react or vue or angular? Dont get me wrong. Front end frameworks are great. But there are plenty reasons not to use them in the real world.
This is fantastic! If my thinking is correct, this would be good for using the GPU for heavy calculations (not specifically for render-related functionality but in general)? Could it essentially be used as a compute-like wrapper based around Vulkan?
&gt; Jumps into JS subreddit. &gt; Complains about JS. Username checks out.
After while I developed vue-unicons, I myself began to use them. I came to the conclusion that it‚Äôs not very convenient to add icons to the project, yes, I had previously developed a way to copy the finished tag by clicking on the button, but as it turned out it only works when you need a couple of icons, if you need a lot, then this method is already tiring. Nothing improves the product like the beginning of its use üòÄ I decided to do something like a basket, where you can add the necessary icons, and then go into it and get the installation code ready. [https://github.com/antonreshetov/vue-unicons](https://github.com/antonreshetov/vue-unicons)
Everyone loves the sarcasm operator, and have forgotten about their first love (`Object.assign.apply(Object, [{}].concat(yo));`)
Yes, checkout [this](https://github.com/maierfelix/nvk-examples/tree/master/compute) compute example. In [this](https://github.com/maierfelix/nvk-examples/blob/master/compute/index.mjs#L298-L317) code section you can see how to read back general calculation results from the GPU. This example reads back the data and interprets it as pixels, but you don't have to necessarily do this
Using String.split(regex); And thinking that I‚Äôm going to get an array of values with the the tokens that matched the regex removed.
thanks ... i guess ....
The issue is that I am dealing more with properties, not attributes. *cloneNode* method copies the object fully except for cases of custom elements that are generated by JS Polymer library that Google/YouTube uses for the site. Since the custom elements are not part of any standard HTML classes, the *cloneNode* fails to copy values some of the properties and attributes. And this is why I am writing a function to "manually" copy the attributes and properties that were omitted. I can not just ignore properties and only process attributes (which I do, of course, so there is no need to convince me to process them) since it would not result in having a proper clone of the original node, which ideally should have **both** attributes and properties matching to the original node's ones. I do not need to create any text nodes just yet. And there is no way for algorithm to know that e.g. *text* property of *HTMLAnchorElement* is tied to a child text node without me simply hard-coding it, which is I am trying to avoid.
might be useful for beginners.
I'll have to try this out. My usual method is to diff the files and then remove the debug code before I commit
JaSON is right. I'm not consistent with my const. I promise I'll be better. I didn't realize people were actually reading this. :)
Check this: [https://electron-react-boilerplate.js.org/](https://electron-react-boilerplate.js.org/)
I think they have pills for that.
I‚Äôm new to the sub, but I‚Äôve been tinkering with JS since the mid-90‚Äôs. [Here‚Äôs what I‚Äôve been working on this week](http://tobyrush.com/bmn) (and for the past few years). I have other projects that use JQuery, and incorporate MySQL and PHP, but this one is all JS and HTML.
Yeah, it's very powerful and useful, I'm glad you found it cool!
I'm learning js but have so much stuff right now to check that I've been saving a lot of posts from here to view later.
ikr - there is so much good stuff on the web i don't know who even buys books anymore.
There's no such thing as client side security, it's an obstacle.
`() +. {`
I created a plugin to easily add an animated svg dial to your project, you can find it on [npm](https://www.npmjs.com/package/animated-svg-dial) 
You can't remove that, because contrary to your beliefs [fetch won't throw on response with error status](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch), only when there was no response at all, __forcing__ you to check for different errors in different ways like I did.
Although not JS but JSON: Removing some lines and forgetting to strip the last comma.
TIL: https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css
That's pretty much what you do, but interactive. Remember that if the files have not been added to the index yet, add them using `git add -N`, otherwise the patch would not work (there's nothing to compare to)
We've been using Next in production at Hy-Vee for over a year without any issues. What problems have you faced? 
Hi /u/weedstoragelocker, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/anthonyhuyvan, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/badcipher19, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Devstackr, this post has been removed. DO NOT POST TITLE IN ALL CAPS.
Hi /u/areknawo, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `areknawo.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [areknawo.com](/search?q=%28and+site%3Aareknawo.com+author%3Aareknawo+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|30|81%
I assume hashing a 900,000 character line string during runtime had performance issues. It's naive because the browser has an attribute for this: [integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).
Hi /u/EquivalentStudio0, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GIS_Man, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/katakuri_eats_donuts, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/prgrmmr7, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ThisIsKryss, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Geek4lyf, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/noobfromjo, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'm sorry, You're right. I won't do that again.
Okay, so you touched on a lot of different things here. &gt;I cannot set my mind how different it is the regular client side rendered React app with Redux First off, Next.js still uses React under the hood. Your state management library (e.g. Redux) does not factor into the differences between Next.js and traditional SPAs (Single Page Apps). The biggest difference, IMO, is that Next.js takes care of server-side rendering for you. &gt; I saw that if you want nice routes you need to have an express server running. Does that means that I need express server running in order to have nice URLs with my Next app? It really depends on what type of routes you want. For what I've used Next for, I haven't needed to do anything crazy with routes. Because of that, I didn't even need to configure the default express server that Next gives you for free. When you start a Next app, there *is* an express server, but it's abstracted away to where you don't have to worry about it unless you need to. So you should get clean URLs out of the box by placing files inside of the `/pages` directory. &gt;What if I have to communicate with some other external server and db? Now that you need some custom server, Next makes it easy to override the default express server. Then you would develop an API just as you would any other application. 
Hi /u/cmaronchick, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/petrovicstefan, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/prgrmmr7, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Pkjerr, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rocco20, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Malusch, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chawki_, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I feel the same way. However, I will say there have been some (although minor) hiccups with using SSR. It would be interesting to compare the state of CRA (Create React App) with Next.js and see how close they are. There's also [create-next-app](https://github.com/segmentio/create-next-app) that might be similar, but I haven't looked into it yet. 
Best might be just **=** , finally what do you think? newarr = otherarr :)
If I want to use the spread operator (`...`) in an environment that doesn't support it, then that won't help me.
You can actually do `array.reduce((acc, curr) =&gt; console.log(acc, curr) || acc + curr);`
Nice stuff! I notice you're using some ES6 syntax like const, for example, so why not use the ES6 class syntax for the Strip class, as well? You can read more abut it [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).
Yay! Of course, that is clever to not use if not supported!!! Love js a lot, making crazy with it, a lot of time spent, but my backend is not js! &amp;#x200B;
Or use the (slightly nicer in my opinion) comma operator specified above: `array.reduce((acc, curr) =&gt; console.log(acc, curr), acc + curr);`
Just finished a minimum viable UI for my side project CodePusher, which is a real time code collaboration platform where developers can solve programming challenges together. Front end is written in React and a bunch of other open source libraries. You can learn more about the project and sign up for updates at https://codepusher.io/. Also if anyone is interested I‚Äôll be posting more screenshots and writing up all the open source libraries I used to build the UI soon.
Writing Javascript. 
Any decent IDE will give you the same benefit without TS. 
Looks good! The correct way to detect an array is Array.isArray(), might be worth adding there, to be consistent with NaN section. 
&gt;In most languages, it is generally best to declare variables at the site of first use. That turns out the be a bad practice in JavaScript because it does not have block scope. It is better to declare all variables at the top of each function. See, this is the problem with Crockford. The guy provides a ton of good info ... but also throws in some really bad advice, and new people have no way of separating out the two. This is a perfect example. First of all, with `let` there is literally no reason to declare your vars at the top anymore, unless you plan to use them both inside and outside of a block (eg. `if` statement). And even back when all we had was vars, it was still bad advice. If your functions are so huge and confusing that you lose track of variables inside them, your problem isn't that you didn't put your variables at the top, your problem is you're making gianormous confusing functions! But assuming you have sane/reasonably-sized functions, there was absolutely no reason to put variables at the top, and if you did any kind of survey of major JS projects very few people did this (and I can guarantee the vast majority of the ones that did did so purely because Crockford told them to). In closing, let me just share my favorite Crockford story. The guy presented at code camp one year, and spend the entire first half of his lecture on a single best practice. He spent all that time (he explained) because he wanted people to understand that best practices were there for logical reasons, to combat language issues, and they weren't just his preference, so he needed to explain those reasons. ... then he spent the rest of the lecture doing nothing but listing "best practices" with absolutely no logical basis whatsoever: they were entirely "Crockford likes doing things this way". Some of them really were best practices anyways, but some were anti-patterns, and since he provided no justification for any of them there was no way to tell the anti-patterns from the best practices unless you were already familiar with them. To repeat: half the lecture on the importance of objective best practices, followed by half a lecture on entirely subjective practices, some of which were best practices and some of which were terrible practices, and Crockford provided no way to distinguish the two. This is Crockford in a nutshell, and the reason why I don't recommend his work to anyone.
import add from './maths'; &amp;#x200B; when it is a named export and not a default one that I'm trying to get my hands on, which is to say I forget to include the brackets around the function name... Wonk, wonk.
Omfg this! Why is this? I feel like contains is a method on another library like lodash or something else. Maybe it just sounds better? 
interviewing. I'm like, 0/15 with interviews. unemployment sucks..
Same with Python, its just len, easier to type.
Yeah So much hands on stuff to practice. I've been taking the codecamedy bootcamp, have the JavaScript course on qeue and have been doing some JavaScript 30 exercises too. So many resources that you only have to Pace yourself. My goal is to keep building stuff to get the skills naturally. Just started this year and already feel capable of at least read some code and not be intimidated by it. 
Yeah. For me it's also `Set.remove` vs. `Set.delete` and `Set.add` vs. `Set.insert`.
React native is the standard for cross platform native solutions. Flutter is up and coming fast, but they're newer and uses dart as the language. 
I've heard a few people say that react is fading out. Is there any truth to that? And at my old job, mobile was in react native and web in angular... Can you do both with react without writing 2 separate codebases? On the other hand, flutter / dart is still really new and doesn't have the same size of community for support I'd imagine. Is it reliable to go in that direction? Do you know if it's easy to get help with this tech?
Haha no react is absolutely not fading out 
react is for phones though, not mac os. Maybe OP means IOS? and there is phonegap/cordova as well for android/ios, if you don't want to add react to the pile.
am I the only one thinking that the factory pattern in general hides stuff behind too much of magic or at least has the potential to? I feel something like this may be practical for a framework which API I'm simply using based on docs, but barely outside of that scope
Look into Apache Cordova, super robust, a little more learning curve than react native or Ionic though. Also check out what Google is doing with chromium apps / progressive web apps - that's super bleeding edge but it's the future imo
Almost all the design patterns focus on keeping things abstract and making stuff more generic. After a lot of code, we usually end up with too much abstraction.
There are projects out there designed to support RN on Mac OS: https://github.com/Microsoft/react-native-macos
I use factories all the time. They‚Äôre especially nice to use if you‚Äôre using typescript
Ionic + Capacitor (both from ionicframework.com)
I do mean macOS, not iOS. TBH, I just want to make things for myself, and if it catches on then good. But me, I just use android and macOS :-) 
Why not just install node then if you need to interface with the mac backend? have it serve up some static files, and respond to commands (perhaps doing "native" things as part of the response, like any other full-stack? 
You know you are posting in a public area with half a million subscribers, right? :)
This approach seems very sane to me, though - I don't think its overly abstracted at all. The functionality for each 'element' is broken out into its own class file, you just need to know a single 'type' string to get the correct one when you invoke the factory's element constructor. `ElementType1.js:` `class ElementClass { constructor { this.type = 'typeName' } }` `main.js:` `var elementInstance = Factory.createInstance('typeName')` There's no real magic because if the factory is written sanely, you should only really have to refer to the class file to get an answer about any functionality for that class. The factory should only have to worry about things you don't want to worry about writing gross code for later, potentially across multiple files: initialization to dynamically fetch them from somewhere, mutate them, compose them - if you're doing stuff like that you (hopefully...) have a very specific use case for your 'magic' and you're placing all of the 'magic' parts in a single file - the Factory definition file.
Yeah but &gt; for some of the things I want to do, a web app would probably do the trick, but I'd still like to see if I can go further with native stuff on both platforms &amp;#x200B;
In a typed language with Generics, like Typescript or C#, you get nice type hints and code completion. If the factory pattern is done properly the instantiated elements should all have the same interface. 
well, "native" really means learning the native platform SDKs, and basically abandoning JavaScript.
If it comes to that it's ok. But say I want to set an alarm on my app. That's probably a native functionality on android, and not a functionality at all on macOS. The server can share the setting between the two platforms, ideally a common UI can deal with the display on both, and in my dream land, the framework I use has hooks to actually trigger an alarm.
The alarms are pretty crap on my android, I'll give you that. Minor correct re:react native, it is mostly so you can have better performing UI components, not a "web view", but a simulated web view. I'm lazy though, so I would probably write a small android kotlin "cron" job that polls the mac for the next alarm. And pops up a window or a web page hosted by the mac and makes some noise. 
The problem is that compacted earth is also harder to dig. When you hire the next guy to make it another foot deep, or even request the same of you, the problem is you now have a rock-hard area to dig in and the hammer won't compact it anymore.
Console.loge
If someone told you that react is fading out, probably he hasn't checked any data about that and is dumb as fuck
Link to the GitHub repo is [here](https://github.com/zsacrety/kaomos-button) Link to the demo is [here](https://zsacrety.github.io/kaomos-button) The Kaomos button is the first webcomponent of the Kaomos series. Kaomos itself is the first real project I have ever worked on. So I‚Äôm really opened for constructive feedback. Hope you enjoy it. 
the copy in that article needs editing inter alia: "instanciate" = instantiate "responsability" = responsibility
Unless a dynamic data rendering framework is exceptionally well designed, making changes, handling one off cases, and maintaining your code can become difficult. Factories in general, on the other hand, especially for managing data structure in javascript, are an excellent topic that I think we should discuss without the inclusion of rendering that data. The M in the MVC as it were.
Same goes for any security: client side, server side, even a bank can be broken into. 
There was a second there, before I read the title... I feel increadibly stupid.
The book was written in 2008, there was no let. I agree with your thoughts about having such large functions, but the scope of this book was with ES3, there weren‚Äôt even forEach loops yet. He gave good advice for the time IMO, he tried to make the language a little bit less error-prone. 
You seem to think I'm passionate about tabs. I'm not. I literally hate them non-figuratively. I'd rather have a world where tabs did not exist. If what you said were true I would be a space addict but you are just plain wrong. You probably always been using spaces and never noticed how tabs behave and that's totally ok, I'd rather be like you so I wouldn't have to be the different one.
You've said I'm wrong, but you supplied absolutely no proof. How am I wrong?
Working on a D3.js project that involves visualising financial datasets. Apart from selecting the type of stock to be displayed on the graph, the user can select the type of visualization tools to be rendered, such as bollinger bands and candlesticks. [https://github.com/wentjun/d3-historical-prices-data-joins](https://github.com/wentjun/d3-historical-prices-data-joins) This is actually an extension of a simple project which I have worked on previously, and I have written an article about it. Do [check it out](https://medium.freecodecamp.org/how-to-build-historical-price-charts-with-d3-js-72214aaf6ba3) if you are interested! 
I tested on Visual Code, Sublime Text and Notepad++ just as you wrote the last comment despise the fact that I have been a developer for 6 years. It's like I'm trying to be wrong here but am failing at it. Like I said: I rather be like you not knowing the difference. If you're happy, there's no need to know it and I don't want to change your opinion because I don't want a world with more tab users. But if you insist, here are things that **behave** differently depending on your tab character's real nature: 1. Press Tab, Press Left Arrow Key. 2. Press Tab, Press Home, Press Delete key. 3. Press Tab, Click in the middle of your tab character. 4. Press Tab, Press Enter, Press any alfanumeric key, hold shift, press Up Arrow Key.
What about a progressive web app? 
I am not a React dev and not true.
I made a simple ReactJS library for adding Gifs to your app: [https://github.com/phaniteja1/react-hooks-giphy](https://github.com/phaniteja1/react-hooks-giphy) Happy Saturday!
Interesting one
I though this was r/programmerhumor for a moment. But this is for real huh
Hey he said he's inexperienced and this was a learning project
It looks well done, the animations are smooth and all. The idea itself feels like a joke though.
Ok. But that's not really constructive, and your first comment was downright shitty. The idea isn't important in this kind of project. The point is he implemented it nicely. Don't be an ass. 
But that doesn't offer more functionalities that a website does it? 
I created a free API for random Kanye West quotes [https://kanye.rest](https://kanye.rest) There used to be a Kanye West API that was based around his lyrics, but unfortunately I don't think it exist anymore. This is my first real project that was made to be used by other people so i'm assuming there are many problems with it. If you notice anything, I would love some feedback. I made it using Express and Firebase and am hosting it on Heroku. The whole thing is on [Gtihub](https://github.com/ajzbc/kanye.rest) and you can find the source code for the site in the "gh-pages" branch. Also, there are not that many quotes currently in the database so you may get repeats quite often. Thanks for checking it out!
It's "installed" and works offline
Fiddled with sketch plugin that spits out react components https://youtu.be/9xG0x4m_q_k
I'm sorry. It just seemed like satire on the current state of webdev. Example: It wouldn't surprise me if a senior frontend dev added a delay to the actions on their webapp just to let these animations play for a bit (which speaks very well of OP but also very poorly of what i think of the industry, of course this is just my opinion but I'm sure many others feel the same way). Props to OP. I really like the way it looks, i just hope it doesn't get used where it isn't needed.
Qt framework. JavaScript and Cordova are slowly and didn‚Äôt get a real native rendering. But for qt you need to know c++. If you need an example Spotify is done with qt. https://www.qt.io 
It's sort of similar, but the exact opposite. Both \`unknown\` and \`any\` could be anything. But TS will never throw an error if you use any, but for \`unknown\` it will always throw an error until you do something to identify it (e.g. if (typeof x === 'string')). Now we know that it's a string and can use string methods with it. When using \`any\` we don't need to use the if statement. Although it will throw a runtime error if you try use it as a string and it isn't one.
Thanks for realizing about this, just made a push to fix this, also the repo is open source so if you find something else feel free to make a Pull Request!
Oh sorry!
Hi /u/The_Thus_Come_One, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
"Despise" the fact you have been a developer for 6 years, surely by now you'd know it's best practice. When I was a developer for 6 years, I had enough work with Linux by then to understand why this is really important. All these point you made are for navigating back into your white space. Sure, that's likely different and you could always go the route of converting your tabs to spaces, or pressing a few buttons in your editor to treat your spaces as tabs, not to mention all the auto-formatters there are on every IDE so if you're worried you're not aligned, it'll do it for you.. But that doesn't change the fact that it's been considered best practice for years by almost every large company and organization, with the goal to be as open-ended as possible when sharing code. The only good point I've heard of using tabs vs spaces was relevant decades ago when file sizes mattered much more.
Obviously there is no real use case for this but why has something like [this](https://www.npmjs.com/package/ladda) so many npm downloads. Where is the different?
It is such a nebulous term it is hard to say precisely, and there are differences in implementation. But without measuring, you can expect memory usage to go up, though by how much depends on what the virtual dom keeps track of, and how. I expect it is generally less memory than the actual dom, though as virtual dom itself is a tradeoff between resource usage and performance, its implementation is also subject to the same tradeoffs. Measure it is the best answer. 
I am no expert, really far from it, more of a backend developer to be honest, but my understanding is that in a regular vanilla js website, every time some state changes you need to render now, and rendering the dom is expensive. With the virtual dom you can mutate state and render the dom later. So it's not that virtual doms are inexpensive, it's more about expensive vs what. 
On Android PWAs can do quite a lot, though I'm pretty sure alarm still isn't on that list. On your device, go to https://whatwebcando.today/ and it'll tell you what it's capable of. 
Looks like the rest of it is answered, so I‚Äôll answer the optimization part: the virtual DOM diffing is the optimization. Most of them work by trying to intelligently collect changes and determine what should change on the DOM. This is an oversimplification, but: changing the text on something? It‚Äôll just change it on the DOM. Changing the text, replacing a few divs, and changing some classes on them? It‚Äôll replace the parent div and replace that on the DOM. They are increasing the memory footprint to reduce CPU time. Memory is cheap, but JS (usually) only uses one core, so CPU time is more expensive than memory. 
Oh so people actually do this. To make things clear: your execution was nicely done, kudos. I just don't like the idea of hiding slow code behind a loading bar. Network operations? Sure. But I'm sure many of those downloads are just people trying to make their users not think that their app has crashed when it's running a bunch of inefficient code in the background.
We‚Äôre in a JavaScript subreddit.
Thanks!
Re: the edit: walking the whole tree is most likely avoidable. When you find something by id in a database, with millions of records, it doesnt take minutes, because it‚Äôs not actually searching every record. If the ONLY thing you‚Äôre doing is changing color? Sure, it‚Äôs not worth it, but most apps have a lot more state changes than that. In general, yes, it‚Äôs worth it. Lastly, I wouldn‚Äôt worry too much about GC. That‚Äôs kind of the point of it, that you don‚Äôt need to worry about it. There are edge cases where you do, sure, but far from common. 
Don't forget widht and heihgt
Thanks! I think this answer got me on the right track. I'm still curious what the pruning strategies are.
&gt;When you find something by id in a database, with millions of records, it doesnt take minutes, because it‚Äôs not actually searching every record. This is a great point, and choosing diffing vs tracking is another tradeoff that uses more cpu. I think the thing is that if your user is what is creating the changes, then they are inherently rate limited, and dom vs vdom isn't even going to be noticeable, just more ram usage. But if they are getting lots of updates, i.e. from the web, that are being displayed, then it starts to make sense.
oh man, i thought those were just bots :)
Awesome :) there are a bunch, but react explains their strategy and you can always look at their code: https://reactjs.org/docs/reconciliation.html
I haven‚Äôt looked into them close enough to respond too intelligently here, but I was specifically thinking of how indexes work in databases. If I remember right, they use trees of Id ranges, so it can narrow down the results quickly. Like a lookup for a lookup. 
&gt;I just don't like the idea of hiding slow code behind a loading bar. Network operations? Sure. But I'm sure many of those downloads are just people trying to make their users not think that their app has crashed when it's running a bunch of inefficient code in the background. I doubt it. Most people use loading buttons when the app sends an HTTP request to their backend and they're waiting for a response. It's common to see them on login/logout buttons, for example. I don't see many use cases with slow and heavy code like you're guessing. In the first place, frontend rarely needs to compute large data or perform complex algorithms.
Yeah I guess it depends on how you think about it.
Hey all, I recently made a full stack voting app for with daily battles between video game, movie, superhero, and mythology characters. The app is hosted at [www.herobattle.io](https://www.herobattle.io) if you want to check it out or play along. Still lots of room for improvement if you have suggestions! The front end is on github here: [https://github.com/peterdurham/hero-battle-client](https://github.com/peterdurham/hero-battle-client) The back in is on github here: [https://github.com/peterdurham/hero-battle-server](https://github.com/peterdurham/hero-battle-server)
Sidenote: I just got the domain name. Well done.
Sorry guys, I'll be nerd here, but you need to read books :) And I'm not talking about books-tutorials like "How to use react/angular/whateverelse", but about books from guys like Bob Martin (Clean Code) or Martin Fowler (Refactoring) that describes how to actually distinguish bad/good code and give you sense of code quality. Because write code that just work and solve a problem - is not a big deal (especially in web development). What is really matter - is code testability, scalability and maintainability and here books help a lot. Of course first of all you need to learn how to actually write code and you can easily do it in web, but after, please, read some books.
I'll keep that in mind. But like you said I'll try to learn first at least hopefully from good sources enough to later be able to discern good from bad code.
Thank you!
If someone said React's dying... they know nothing. React downloads/week have nearly doubled in the last year. [See NPMTrends](https://www.npmtrends.com/react-vs-@angular/core-vs-vue)
Interesting, I got a question: what if two factory elements needs to use the same method? for example Email and Texarea needs to have a method shared between the two?
Wait are you complaining about the spinner here?
Use your imagination... you can show the spinner when the action is being completed, for example ‚Äòlog in‚Äô or ‚Äòbuy‚Äô.
Here is a pretty great site https://javascript.info I also find it helpful to find an open source project to review code for examples. I‚Äôve also found just digging into module documentation is super helpful
I like factories. In a certain context, you know a certain amount of information to build an object. All the factory pattern does is centralize this building of an object. That way, if the data to build this or that changes, you don't have to write any code other than the factory that provides the new object. You're depending on abstractions not concrete types.
https://javascript30.com this Isa great interactive way to do some learning. https://github.com/getify/You-Dont-Know-JS and this is a free excellent book series getting into the deeper bird of JS. It doesnt all need to be memorized, but it's a great read in steps towards being a JS developer instead of a developer who could write some JS of needed. Many of the topics in those books have same me countless hours debugging things which were directly related to how JS actually works. 
Why does it say 70 lines in the title when the line numbers clearly show it‚Äôs 90?
Hi /u/sunr117, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/marcosr00t, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sheraff33, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/samsume, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Zero3K, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/HamzaKhuswan, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
some lines are blank or just brackets, so they don't count
Import them into your file in the usual way and add them to the factory you export.
I have been working a bit on a chat bot for Discord. You can check it out [here](https://github.com/scoot-er/scooterbot). Let me know what you think about it. I would love any suggestions for functions or features you would like to see. If you would like you can join my discord server [here](https://discord.gg/fTb5kkJ) and we can talk about it. (I also just want to make my discord server more active)
It's standard ux practice to let the user know something is in progress
Hi /u/connor5891, this post was removed. /r/javascript is not a job board. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
In 1994 comet Shoemaker-Levy 9 broke up into 21 distinct fragments that collided with Jupiter over the course of a week. Here is a simulation of that [event](https://thehappykoala.github.io/Harmony-of-the-Spheres/#/scenario/1994%20Shoemaker-Levy%209%20Collision%20with%20Jupiter). The default camera position is the W fragment of the comet, the last one to strike Jupiter, and the focus of the camera is, of course, Jupiter. If you want to learn more about these collisions and what they taught us about comets and Jupiter, I warmly recommend the Wikipedia [entry](https://en.wikipedia.org/wiki/Comet_Shoemaker%E2%80%93Levy_9) on the subject. &amp;#x200B; Besides the above scenario I'm also quite happy with the new scenario drop down menu, which now filters the scenarios by category; previously they were all lumped together which made finding what you were looking for kind of tricky and obnoxious with lots of scrolling. &amp;#x200B; Great entries as always, folks! 
That i know. It just bothers me when it's done instead of optimizing. You don't need to let them know if it takes less than a tenth of a second.
This table [1] will give you a good idea of vanillajs vs various frameworks. Keep in mind that this is a synthetic stress test, many tests run with 10k - 80k DOM nodes and some with 4x-16x artificial CPU slowdown. You can see how long it takes to regenerate and diff a 2,900 vnode tree using domvm [2]. On my desktop machine it's 1.15ms, on mobile it's 4-5ms. This is without any optimizations (like sCU). With some small optimizations like sCU and selective redraw, it's 0.5-0.25ms. (disclaimer: i'm the author). for most use cases, it's more than fast enough. [1] https://krausest.github.io/js-framework-benchmark/current.html [2] https://domvm.github.io/domvm/demos/bench/dbmonster/
Here's a link: [https://reactjs.org/docs/reconciliation.html](https://reactjs.org/docs/reconciliation.html) according to them the Virtual DOM update is O(n). &amp;#x200B; &gt;Instead, React implements a heuristic O(n) algorithm based on two assumptions: &gt; &gt;Two elements of different types will produce different trees. &gt; &gt;The developer can hint at which child elements may be stable across different renders with a key prop. &gt; &gt;In practice, these assumptions are valid for almost all practical use cases. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Pretty slick looking
Which editor are you using? You should get autocomplete for that. 
What network request will consistently take that short of time? You can't optimize a slow connection on the user's end.
/u/sebamestre is being intentionally obtuse. Your component looks great to me and there are obviously plenty use cases for it.
&gt; Network operations? Sure. I am not complaining about network requests.
This is JS subreddit though, surely you could've guessed in this context that a network request is the most likely use case for this sort of component.
What about it is a joke? This has plenty of use cases.
Yeah, that's why I mention them in my previous comment. My comment was not a personal attack towards OP, i was just browsing my front page and saw this. Most of the things with images that show up there come from r/programmerhumor. I legitimately though this post was satire on how front end is developed nowadays, and was kinda confused by the lack of a punch line, so i tapped to leave a comment then i realized what sub this was on. After that, some people replied and i elaborated on my opinion, that's all.
why was it removed?
I don't mean that it's a bad idea. I mean that the actual post itself, if you add the right title, could be presented as satire on the current state of web dev.
I don‚Äôt think that. What‚Äôs magic about it? 
cool little component &amp;#x200B; if you're serious about providing components for other people to use, you should include some tests. looks like you're "tests" are really just a demo. &amp;#x200B; You also might get better feedback if you post this as a feedback request rather than what looks like promo for a "next big thing"
Revealing yourself as a real noob here. JavaScript in the browser is single threaded, if you write code so inefficient that you need a loading spinner, that loading animation won‚Äôt even work because the only thread üßµ will be busy. Go ahead and make us an example if you think I‚Äôm wrong. And if you are processing a large enough amount of data that you are using web workers or doing chunks asynchronously, a loading/processing indicator would be appropriate. 
Yeah that‚Äôs right. 
OK that's fair.
Huh, I think I might make a plugin to just not load low importance content, save a lot of data that way
What's up with the cursor-jacking (laggy movement, not the shape)? I wasn't even aware it was possible. It might be even worse than scroll-jacking
It‚Äôs a relatively common effect. Many sites on awwwards use that as well. 
Just to clarify, I'm talking about the transition of 200ms applied to the circle cursor which lags behind the movement. The circle shape is fine (to emulate touch appearance like in DevTools for example), just the movement is strange.
The vdom being more efficient depends on two things: 1) queries against the DOM are expensive 2) DOM mutations are expensive So instead we keep our own lightweight representation of the DOM, and query/mutate that. Then we can calculate the minimal set of changes we need to make to the actual DOM and only execute that.
I agree with this. The cursor-jacking feels bad, and as far as your demo goes I would shorten the time of the loading animation. I realize you're trying to show it off but any time something takes that long it feels broken.
Understand that. I mean of course it‚Äôs strange but I found for this purpose it‚Äôs cool, maybe because it‚Äôs so strange. But that‚Äôs just my taste, fully understand your point. I would never do that for a 'normal' site. 
Hi /u/ldelossa, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks for your feedback :)
Oh no i got EXPOSED goteem good :)
4 days for tests? Seems a bit excessive
All these guides seem like a perfect way to end up hating the craft &amp;#x200B; Take it easy, is actually better if you enjoy the ride 
Hey all, hope you enjoy this article, not trying to be a shill for Auth 0, just genuinely found it cool and saved me time.
Also works. This is debugging code anyway, so do whatever works for you. Personally, I'd never remember to use the comma operator since it's pretty obscure.
The problem with doing such a thing on a demo is 95% of users will see it as a negative of your JS button and not see it as a design choice. It's often best not to put personal preference before general consensus with anything UI related.
Classic JS developer response
Especially when you factor in 8 days for gulp and webpack
Hi /u/Ragzzy-R, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'm pretty sure `Array.sort(arr, fn)` never existed. I couldn't find it in the 262 spec (1997) or the ES3 2000 spec either.
myarray.sort(fn) has been part of the spec since JavaScript 1.0 spec in the mid 90s. I have never seen the Array.sort notation before, have you been working with libraries which could have added their own sorting methods?
Get rid of the jQuery, Bootstrap, and replace BEM with SMACSS.
That's weird. cuz it works in FF(probably some node module doing vodoo? ) . 
A possibility. As it was a react project scaffolded by CRA
So I'm confused, all the great topics to cover. How do you start? Is there a registration? Or an online class? Or how does it all work? 
I would love a world without passwords, but .... Every app and website that require phone or email verification I have ever used keeps asking me to reverify every couple of days. And each time it takes much more time than typing in a password. Sometimes the code never arrives, or arrives several minutes late. Sometimes I am not in cell coverage to see my text with the code come through. Sometimes the phone is not handy. Or I simply don‚Äôt want it to vibrate or ding when I am checking something in the middle of the night with my wife sleeping next to me. If you are using cookies they can be stolen, sessions can be hijacked, especially long lived ones. So far, I have found the combined biometric authentication with a password manager storing strong passwords the most convenient way. 
I think that I would be good if I can integrate node.js and QML.
This is an awesome little project. Simple. Creative. Fun. I love it.
Hi /u/brainhack3r, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks to op for the post. Very interesting read.Falls into my experience of spending an incredible amount of time on my ¬´ work environment ¬ª rather than really ¬´ coding ¬ª. I am super glad of being able to code only for my own fun though.
You'll have to put some braces around the comma operator operands, or the second `acc + curr` will be parsed as a parameter to `reduce`.
Not denying your bad experiences, but I feel like you are strawmanning bad implementations and your own phone settings as an argument against passwordless. Passworded websites can be implemented badly too. Biometric sounds cool. Vendor lockin to something like that sounds scary though.
Hi /u/Progressive_Coder, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please also read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks! Any suggestions? I have a feeling there is something major I am not thinking about...
Exactly..a curiosity..but an interesting one to get a feeling of what‚Äôs ¬´going on ¬ª. A nice read every six months ?
There are lots and lots of JavaScript charting libraries out there. If you want to build it yourself, I'd check out D3. If you just want a line chart ASAP, I like the Google Charts library, but that's just my preference. You'll have a lot of choices to pick from.
Hi /u/xfatal9x, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
D3 is the way to go. Here is an example that matches your request: [https://bl.ocks.org/d3noob/402dd382a51a4f6eea487f9a35566de0](https://bl.ocks.org/d3noob/402dd382a51a4f6eea487f9a35566de0) (not mine; just found it by googling "simple d3 line chart").
9999 Lines of code
Hi /u/Engineer-of-Stuff, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Interesting to see TypeScript near the end. My workplace has adopted TS heavily but it's definitely a learning curve for devs who are new to it. It's a big topic and not just "JavaScript with types thrown in". If you've just learned JS basics and have no OO design experience then I think you'd find it a bit heavy on top of everything else.
So from what I can gather, this is just a template for self study time. There are a few suggested resources for each bit, you just log your own number of days and crack on.
I agree wholeheartedly with getting rid of jQuery. It's just not needed when working with modern browsers and polyfills - if anything people are trying to get rid of it where it exists. Also agree that a good understanding of Flexbox + Grid would be more beneficial than learning Bootstrap.
I would suggest for juniors to avoid jQuery. It can still be useful in some cases, but I wouldn't consider it a core for every front-end developer to know. I would also add Vue.js, but that's me. It's great for beginners because they've got HTML, CSS and JS in one place and can learn how those actually communicate together. It's also so much more programmer-friendly than React.
Maybe spamming the exact post across different subs is not the way to go. How about you generate some content around the project? Write an article on how it can be used in the real world. Make a video tutorial. Spamming it feels like you are just trying to use the javascript community for your own gain 
1. Most developers ‚Äúhave‚Äù to learn JS because it‚Äôs so tied to the web. That‚Äôs about it. 
I'm using VS code... Works really well if I change the name of a module in that it will update the name in all the modulels that use that particular module, but it doesn't seem to take care of the issue I mentioned. 
Even 5 days. And it's definitely much more than you need to learn the basics. MB day or two. Real understanding will come with experience regardless how much time did you spend learning jest in "lab". JS developers nowadays know the price of bad code quality or low coverage. I think your words are completely irrelevant
Cool! I want to learn how to work with Firebase, too, so I'm gonna take a look at your code since it seems like a digestable exampleof how to work with it. Quick question: can you set an upper limit for the amout of requests your server handles on Heroku? Asking so that I don't create an api for one of my apps and end up with a huge bill :D! 
Frankly because it was selected as the language of the web, and web won out as the platform-independent standard of the future in an era with an ever-proliferating amount of platforms (desktop, mobile, smart TVs, car dashboards, windows, linux, android, iOS, etc.). That's not to say JS hasn't turned out a well-designed language. But it wasn't the reason for its spread.
For me it began with 1. (not the case anymore), went to 2. (not the case anymore) and I stayed because of 3. and 4. Some JavaScript open source maintainers I know are extremely committed to their projects. E. g. lodash is a library I enjoy every day.
Completely 100% unusable. Is this a joke? &amp;#x200B; If its not: Step 1, when you are building stuff you want people to use, **TEST** it on as many browsers as you can get your hands on. &amp;#x200B; I did a quick test in 3 different browsers, and I couldn't even **move the pointer across the page** in any of them. &amp;#x200B;
Cant even move the F pointer across the F page in any of the browsers I tried. Is this a joke? &amp;#x200B;
On the demo? 
If this is the demo: [https://zsacrety.github.io/kaomos-button/](https://zsacrety.github.io/kaomos-button/) ..then yes.
Thanks! There is a free tier that you can use and don‚Äôt have too pay at all. I‚Äôm not if there is limiting though.
How can you know it‚Äôs laggy when you can‚Äôt move it?
This is well written, full of truth, learnt stuffs. (Will apply 100%), happy to see that i use already 80% of all this, quality Reddit shitpost :) :) As of yet, for me, pragmatic *self taught*, melting **function** keywords and arrows functions is an overkill, and does not add a big plus in clarity, actually a downside for me in many cases. Highlighting for example. Sticking with function keyword personally. This way, can later [easily evaluate complexity](https://users.ece.cmu.edu/~koopman/lectures/ece642/10_spaghetticode.pdf)*,* harder to do with arrows functions. Ya just blabla ;)
JFC, we are done here. Just test it on a couple of browsers OK? You should have done it yourself, before even posting it here. &amp;#x200B; &amp;#x200B;
But it is not well designed. At this point it's turning into clusterf**k of features with all the proposals with no regards to what the original goal of the language is, although Im not convinced that there is any to begin with.
JavaScript is popular because of the context of its use. In the browser it is native, ubiquitous, and until recently unique. In NodeJS, it provides a dead simple way to implement concurrency and perform non-blocking I/O. So combine that with the fact that most programmers today are web developers, and it looks like JavaScript won out of the necessity of its platforms and not by its virtue as a language. Popular doesn‚Äôt mean its the best language - and it certainly is not for a wide range of use cases. But being typed is also not a prerequisite for a good language. In the end JavaScript serves its purpose, and actually has some cool features once you get to know it. On a related note, the creator of NodeJS is currently working on a TypeScript runtime called [deno](https://deno.land).
I'm old. The choice back in the day for web programming was JS then ASP. So I have no choice but to learn JS. It has stick around because a mammoth like Google didn't choose to create a new browser language.
Well your point is duly noted. I just wanted more people to know about my product &amp; thus reposted them at various time periods to reach out to more people. I will create more use case examples &amp; then post them. Thanks for the suggestion. Btw can you suggest me some places to post articles so that I can reach out to a wider audience!
Shut up man, don‚Äôt like it? Move on or give advice. Elitism in the dev world needs to stop. 
Very interesting read! The code snippets on mobile aren't really well readable, though.
What exactly is your thought process and the context you use (while thinking about this)? Because generally whether a constructor function works on `this.propertyX` (etc.) and then returns `this` as the new object, or a "normal" function creates `{propertyX:..., etc.:}` and returns it makes no difference apart from the `__proto__` stuff behind the scenes (and calling "just a function" and giving it the object or "this.method" and relying on implicitly getting the object also makes no real difference - which is precisely why it can be used to have ad-infinitum discussions (there is no real world proof to convince anyone).
Zero install ubiquity.
It‚Äôs the one that can run natively in the browser.
Well what is the original goal according to you? I think ES6+ are pretty well designed, not doubt about it.
&gt; As we all know that reverse method return the array in reverse order. However the interesting part is that it reverse also the order of the original array and it returns itself so whatever you do with the assigned variable will also happen to the original array which doesn‚Äôt happen most of Array methods like map, reduce or filter. Eh, this would be a stellar moment to talk about object references and side effects from object mutation. Beginners shouldn't just assume that .reverse() does something magic but understand how this is a manifestation of a bigger concept. Also, for any beginners, most people would strongly advice against iterating over an array/collection with a for..in loop. This is because for..in enumerates all the keys of the object, possibly including some properties deeper down the prototype chain, which is an expensive operation. A normal for loop, or a for..of iterates over the array in a more appropriate way and is also not prone to bugs arising from iterating over unwanted properties.
Testing at the end, just like at work.
I saw this a few days ago. I think it's brilliant. Hopefully, on the back of this, they decide to do more free promotions. 
It won first because there was no competition, then because none of the alternatives improved on it. Same can be said of PHP and MySQL. 
I really like this comment. Thank you for your feedback. It helps alot to update and solidify the article. Im having fun writing them cause I learn also from the readers. Cheers!
I recently started working on practising more Vue.js. Thanks for sharing this, this comes in handy!
That's one of the critical means for it to really optimize. For instance with React Fiber it sets component state, but then decides what and if to render through heuristics or user defined priority, keeping to a strict 60fps. If it has to render thousands of table rows, and say the majority isn't even on screen, it will set component state but retain the last known visual state for items that are over the budget. \[This will have the largest impact on performance\]([https://twitter.com/jlongster/status/1054554506736910336](https://twitter.com/jlongster/status/1054554506736910336)), but isn't measurable in todays benchmarks.
Question: how many hours per day? 
Thanks for this.
O_o Do you mean JS or VBScript? Back in the day you wouldn‚Äôt write server side JS and you wouldn‚Äôt write client side ASP...
Your argument is illogical. If you believe there was no goal behind the language to begin with (which is absurd, but that‚Äôs beside the point), then what is there to regard with respect to a original goal that never existed?
Except Postgres really did improve on MySQL. There really isn‚Äôt a great alternative to PHP as far as a LAMP type stack is concerned where you can run one script and then suddenly start dumping PHP files in a folder and have a website. I suppose you could do something similar with Ruby or Python, but for whatever reason those languages were all about piecing together frameworks to have your web application build itself if you memorize all of the conventions rather than just writing code to a page. Coldfusion, if it wasn‚Äôt such an ugly bitch, was used quite heavily prior to PHP gaining popularity, because it was used the same way. Jam some code in a page and you are rolling.
I had to click through four times just to get to the medium version of the original article that even mentions the original author. I hate this site because it doesn‚Äôt even credit Flavio Copes *and* the plagiariser puts his name as the Author. Heed the closer to original link: https://medium.freecodecamp.org/es5-to-esnext-heres-every-feature-added-to-javascript-since-2015-d0c255e13c6e
&gt;and UX/UI. That's like a whole career. Just add it on at the end. Smh this fucking industry is nuts.
Also typeof [] is "object". That has caused me a few headaches some time ago.
OpenSource, it's required to make good this on the web, this is why I don't buy microsoft shit like C#, ASP, etc... if it's not 100% required I simply avoid it
Ohhh maybe it was VBScript. I remember it was my Microsoft. This is like 20+ years ago.
It adapted to what people wanted. Yes, it started out as a complete mess. But it got better. People built frameworks. At a certain point it was like asking, "Why does Michael Jordan score so many points?" Because everyone is talking about it. Everyone is using it. Everyone is watching it. It's all over the internet. It's being used for more than just the web. There is a fascinating talk about how JS is basically a "bad" language but goes into depth about why it's stuck around and he even goes into the future and talks about how eventually we won't have the OS needing a certain amount of memory and everything else relying on the OS. I will PM someone and get the link for you. 
What point are you actually trying to make? You obvi don‚Äôt know even the basics of the platform but are in here trying to tell people how to design for it? Please fuck off. 
Check the link in the other comment - the snippets on the Medium article are presented correctly.
Your opinion is objective bad and wrong, kudos
But you can make Unity games in C# and then make $20 in profit after investing thousands to get it posted to all the relevant platforms. 
Postgres might be an improvement, but evidently not enough to displace MySQL -- rather like all those languages, most of them instigated by Google, that were not better than Javascript enough to throw millions of lines of code away and build everything up from scratch. 
It‚Äôs not about better, it‚Äôs about what the browser ran. And the LAMP stack is what made MySQL so popular; the fact that you had documentation and instructions that just worked to get a full working RBDMS backed web applications in seconds was all that made it popular.
For sure; and VBScript was awful.
This one makes sense at face value though
Crockford clearly knows his stuff, but he can be very dogmatic and condescending, and that has always rubbed me the wrong way.
&gt; Simply, instead of logging in with a password, you login with a code sent to your email or your phone. It‚Äôs a simple system that puts your users at ease knowing that they aren‚Äôt giving you potentially sensitive info with a bit of a mixture of 2-factory safety. Sending a code is single factor authentication. "2-factory safety" or *multi factor authentication* is the act of using multiple disparate authentication methods. The safety comes from not having a single point of failure, which your system has- the email address being compromised. I feel like having to explain this very basic concept to you is reason enough to say, *no one should listen to any security advice you have to give*. Blogging your ignorance as advice for others is outright irresponsible. 
Funny, NginX didn't brickwall like that. It was vastly superior to Apache and got taken up very widely, very quickly. The same would be true for Postgres or the JavaScript Pretender of the Month if they were as much better than what we already have as NginX was better than Apache.
I don‚Äôt know, I feel like Postgres uptake is comparable to NginX.
It gives indie hackers the tools to make trivially distributable, interconnecting, next generation platforms for general computation like [this](https://linuxontheweb.org/desk.os)
Es5 was a clusterfuck. Es6+ is turning into what you would expect from an average programming language.
I think reading about UX/UI during lunch breaks twice a week and learning Adobe XD and/or Figma on Sundays for a season or two isn't that demanding of a task. What is crazy is the backendification of the front-end. The front-end seems to be getting crazier each season. It's why I focus mainly on HTML, CSS, git, data structures, algorithms, design patterns, some tooling, and virtual DOM via vanilla JavaScript. These JavaScript frameworks are making things daunting.
hey @egr3gious would love the link!
As u/spryes pointed out earlier, the animation duration (200ms) is way to high to feel like it's intended, personally I like to stay away from too much cursor and overall flow stylization, so no animation at all. &amp;#x200B;
Thanks for your feedback, I‚Äôll change this section, I actually thought just what you said. Specifically the word ‚Äú2 factory‚Äù. Please don‚Äôt take my article as trying to be some expert guru, I was just trying to share something I thought was cool in a short amount of time I have on the weekend.
I will get it...the people in the slack aren't exactly always online and always checking their DMs....they really love to act like they live that kinda life tho. sigh. 
Because it was the only option.
I guess my wording wasn't on point. Design. Design describes how are we about to achieve the goal. But not the goal itself. And as it seems now, there are just random proposals people push based on the features they like in the other languages. Making javascript a frankenstein much like C++ is now.
It does... but I still wish it was typeof 'array'
I would expect no inheritance. Or language not have any hints that one could / should use inheritance for example. All modern languages are moving away from it (Kotlin all classes are final by default, Go doesn't have classes to begin with, in languages like Java common convention is to avoid it and Java creator said that class inheritance was a mistake) yet in Javascript someone though that it's great idea to introduce it a new. It's shortsighedness and act on whims what is making javascript bloatware, slowly but surely with needless complexity which doesn't add much to the language.
tl;dr: the order of operations matter
I guess my wording wasn't on point. Design. Design describes how are we about to achieve the goal.
Array is not a type in the JS language
The fact that` typeof null == 'object' ` is one of the biggest design mistakes in JavaScript, in my opinion, because any number or string is actually more an object than null is: `a.foo` will only produce an error when `a== null` but never for any real object. It would have been better if `typeof null` was just ` 'null'` instead.
If I could use C# or some other language on the web, I would drop JS like a hot coal. 
Interesting approach, I definitely see benefits on it but I don't find it very readable, everyone understands switch statements. Honestly, I don't use that often switch statements, usually I only need to check for a couple of conditions, so an if...else or a ternary operation is enough, for the other cases I don't see the issue on using the switch statement.
This is awesome! 
If anyone thinks these are weird quirks, I highly recommend the You Don't Know JS series of books. Everything makes sense now.
Array has some weird quirks that make it separate from objects. Instead you can use Array.isArray(arr) to determine if something is an array.
twas not a design mistake, but alas! a bug! uncaught by the developers of netscape until after it was deemed web incompatible to fix, given the amount of code that assumed the behavior at that point.
If you want some real weirdness, parenthesized expressions in the language do not evaluate their interior, they just pass it along, so this code is still valid: (a) = 1; or // we all know typeof allows undeclared variables, // but even wrapping it in parens will not force it to be // resolved first typeof (a);
And then we bring undefined in the mix and it just gets more convoluted!
That caused me a headache on the last project I worked on, when I had to create a deep object checker that called itself recursively for comparing objects. 
The thing I most appreciate about this library is that they use .mjs ‚ù§
You could return from the case statements instead of relying on mutations and side effects. Then you don‚Äôt need a break statement and you know exactly where your code is being called.
holy shit, that's old
Seriously though, this seems extremely obvious after 30 seconds of thinking about what the operator is doing. Does this really need to be its own article? 
Would've been nice if it was, though
yep, somehow i get it wrong every time 
I wouldn't approve this in code review
Eh maybe, would've been a fundamentally different language then
Exactly my point
That seems gimmicky. Why not just use a switch, but you know, don‚Äôt mess it up. It preserves readability. 
You probably know this but `Array.isArray` exists. Also, had JS had strong typing it would've been a very different language. TypeScript may scratch your itch (I can't see myself writing JS without TS nowadays).
you are aware that an array is essentially an object of { 0: something 1: something else }
We have linting rules around switch statements so that they are consistent from every dev and require the breaks and curly braces. It can reduces functionality in situations where you want two cases that utilize the same functionality, but the uniformity is worth it. Your solution leans on metaprogramming, something I try to avoid. In a large codebase it can make reading and tracing through code a pain. 
No thanks, I'll lose exhaustiveness checks 
If your switch statement is simple this doesn‚Äôt add much but I have been doing this pattern for a while and I still think it is a good one. Especially nice for ‚Äúcomplex‚Äù switches like redux reducers. 
Yes I knew about those. My largest project is a CRM built in angular so I'm familiar with, and love typescript.
Why would that be? I am interested in knowing the reason as a means of education.
Hey, I have shared my experience, I have been working on Javascript for more than 2 years and By Mistake on one of the modules I reversed the order, I knew I should not do something like this but It was a mistake I made, many of the beginner developers face same time of issue, This article was meant for those people. Sorry, the article didn't meet your expectation.
problem is the switch statement is c legacy. The intent was to have the compiler optimize the branching based on the constants being evaluated. I think in this case if you are looking for performance, you should consider if the function can be static, so you aren't re-creating these object hashes with every call, otherwise if/else conditionals are going to be more performant.
I am glad that it was helpful ...
 I am glad that it was helpful ...
Yeah, it's a good idea.
Can't these issues be countered using a linter like eslint? Using eslint the issue with lack of break ([no-fallthrough error](https://eslint.org/docs/rules/no-fallthrough) ) and the lack of parenthesis in switch ([no-case-declarations error](https://eslint.org/docs/rules/no-case-declarations) ) are easily countered. This looks to me like a struggle to reinvent the wheel, while the proof of concept is endearing it is simply not needed as existing tools can help. This is however my opinion.
ew I threw up in my mouth a little
I'm surprised at a lot of the comments here. This is called the factory-method pattern, and I think it is one of the more useful design patterns. When you have 2-4 cases, it's not really beneficial. When you have 8+ cases where each case is multiple lines, it really shines. If your cases are large enough, you can even separate them out into other files that are themselves unit-testable. One way to make it more readable IMO is to separate out creating the object and invoking it. It is a lot clearer to me then.
&gt;but you know, don‚Äôt mess it up it's weird, how if you make a bad function, you get a bad result. but hey, they got a blogpost view out of it.
Is there an implied closure within a case? 
I should have included /s whoops thought it was obvious
We had redux reducers written like this at my last job and they were annoying enough we ended up refactoring them to switch case statements. This pattern was harder to onboard new devs into, had the flexibility to allow some hard to follow code, and didn't play nice with typescript's type inference - leading to type boilerplate all over the place.
Hi /u/rabingaire, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yep, the way I usually try to aim to do switch statements is to extract it to a function by itself, and return from each case. 
I thought this was going to be a story about someone who had just discovered lineters, and was convinced that every linting error found was a real problem, so ESLint had saved them from hundreds of "problems" (but most were just dumb linting errors). Instead it was about how ESLint helped the author embrace things like stateless functional components, ie. it actually made her a better React coder. Color me (pleasantly) surprised to see a linter providing really good advice and not just "I don't like how many spaces you used to indent" kind of advice :)
A switch case? No, that‚Äôs one of the points the article tries to make. Each case operates in the scope where the switch lives unless you add a block within the switch case.
No I think it uses the parent scope
To be more precise PHP won at the time it was not very capable language. Let me unpack: at the time shared hosting was a lot cheaper. However, you could not put C application in shared hosting as it would allow one applications to access which are sitting on the same host. PHP however, had no such capability, which allowed to offer cheap shared hosting for multiple clients. Hence, host platforms started to offer php support as default. So in essence PHP won because it was less capable language. This very much like the story with javascript. It won the language race not because people were fond of the language, but because it was the only game in town which can be used efficiently and universally. Market dictated the demand and the developers who looked for jobs simply followed. This landscape however is slowly changing. PHP, is slowly declining. For a few reasons, Zend no longer funds it as it was aquired by Rogue, so developers are no longer paid for developing it. And while open sourcing might help here, another problem which prevents it from being adopted by newbies is that your platforms are changing. 1) Shared hosting becomes less relevant with cloud technology. 2) PHP can't really address the growing need for multi-core processing. And since there is no funds granted for development costs it would require to make one, I doubt we'll see something beyond PHP 8. As Dimitrij might step down, and as Rasmus told, php would probably stagnate without that guy totally. Javascript however haven't faced such radical shift. However, with advent of WebAssembly we might slowly shift towards frontends which are not solely done by javascript. Although there is a lot of work to be done. 
Author uses the same example for all approaches: data retrieval. Even in C replacing switch with a lookup is prefred, he is not addressing something innovative since lookups are always faster than switchs, but there are cases when you definetly need a swicht over a lookup, for example when you need to perform more tasks such call more mehtods or evaluate more conditions on a case. You must use a correct tool for the job. There is not a rule-them-all tool.
What of moderation is that, to close a topic with many answers. Not even providing a reason, seriously, take some hollidays.
Hi /u/KraZhtest, The answers remain untouched, the post was merely delisted from /r/javascript's index. The rule is announced in our subreddit guidelines, as well as in the post prompt that everyone sees when they go to post, that /r/javascript is not a help or support channel. See you in a week.
Hi /u/osadchijjj, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Now imagine if only they'd decided to break the code back then, decades ago...
OP's site has been blacklisted for blogspam.
[removed]
Hello, TypeScript. Obviously TypeScript != C# but it's as good as it gets.
This is the correct way to deal with switch statements. 
I find this to be unreadable. I prefer to put my reducer logic in standalone functions in different files, import them to the reducer file, and just call them from within the switch. That way you have a nice, clean, readable "index" of reducer methods, and the actual code is split out into logically grouped collections of methods. 
The ability to leave out the &gt;!break!&lt; keyword is a feature, not something to diss &gt;!switch!&lt; over
one year isnt enough to understand this properly, thats for sure
&gt; not native to any OS-- managed to get that popular OSs are irrelevant; JavaScript is the native scripting language of the **web** - the single most important platform in the history of computing.
If you've done Python (there is no switch there), the switch will look to you gimmicky... Well, even if you've done C or Assembly, the switch is just a series of GOTOs - gimicky GOTOs...
I think we are doing basically the same thing just different on how they all come together. All of the functions that I use are stand alone (in the same file) the object looks like: ```js const actionHandlers = { increment: increment, decrement: decrement } ``` I personally find it easier to read when it is just an object of functions. I use something like https://redux-starter-kit.js.org/api/createreducer but I added a some more functionality.
Metaprogramming is so easy and so powerful in JavaScript though. I haven‚Äôt experienced the reading and tracing issues you describe; I know you were speaking generically but can you provide any examples?
This isn‚Äôt reinventing the wheel though. They‚Äôve had stuff like this in Ruby since inception. And it actually makes some design patterns super easy and more powerful (lookin‚Äô at you strategy). 
You've re-invented the wheel,but it's not quite round, it has corners, so what do you do?Do you work on it? Improve it? No, you write a blog post... Here, a prettied up version I've done 3 years ago [https://gist.github.com/azder/8432068](https://gist.github.com/azder/8432068) Still, for full power, you'd go with predicates as keys, not just strings ;)
MDN also advices against for in for production. 
People not getting the point of this pattern probably never worked on complex projects.
Can I DM you a version of this that turns reducers into super easy to read, difficult to screw up, easily testable functions while still basically doing what you said? It‚Äôs sorta what you described except no switch required. 
A switch is a series of ‚ÄúGOTOs‚Äù in the same way that eg if statements and exceptions are. This is not a reason to avoid them. I do agree on the point you make towards readability. It‚Äôs just what you are used to (ie learned so far). Syntax is easy to learn, it doesn‚Äôt make things inherently simpler or better.
It‚Äôs not at all meta programming; it‚Äôs a different way of doing polymorphism. Procedural languages mostly depend on if/switch statements for their polymorphics. All that author did was turn that in a manual sort of vtable as is common in OO. This is exactly as much a pain as the procedural conditionals. What you prefer of course depends mostly on what you learned and seen so far.
The thing to remember is, just like classes, arrays don't actually exist. They're shorthand syntax and a kind of specialty object. You can use Array.isArray to verify, and Array.from to convert an iterable to an Array. But it's not a type (JS is a super simple language) so typeof will tell you object. You might like instanceof, after asserting you're dealing with some kind of object, to assert what kind you're working with. But this is why people like typescript: funcs can demand a certain arg is of a certain type - and that means your function body doesn't have to be so defensive.
Ah yes. That is pretty similar. Thanks
Why the pissing contest? Are you -- what's that term you whippersnappers use -- sperging? JavaScript won because it was first, not because it was best. But Google's JavaScript killer of the month lost because none was good enough to displace it. Not because they weren't nominally "better" than JS, but because they weren't an order of magnitude better, thus there was no real payoff to making a switch. What growing need for multi-core processing are you referring to? If you have to invent problems because you're reasonably sure PHP can't be the solution, then you're not arguing in good faith. 
The order of operations is left-to-right, and things that come after overwrite things that come before, it's not that confusing, it's cascading.
I think the article is wrong in a way as it presents the pattern as a technique to avoid issues such as forgetting a break statement etc. For this, use a linter. The main benefit of this pattern is code readability (if done right). This is not something you should use blindly to replace all your switches tho.
It is not called the factory-method pattern. It's just a plane object with some properties attached (methods are functions properties) and accessed with bracket notation to invoke them to produce result. It's called the object pattern :P
The correct way to deal with switch statements is to put a linting rule to not allow any. That way you get the most consistent switch statements ever.
Switch statements lean on metaprogramming, something I try to avoid. In large codebase it can make reading and tracing through code a pain. Yes, switch is metaprogramming for series of goto's :P
&gt;everyone understands switch statements. No they don't. They just think they do.
Perhaps I'm underestimating JS engines, but doesn't this allocate memory every time the new object is created? If you get smarter and make the "switch object" effectively static, you now lose locality and the ability to use any variables from the outer scope. &amp;#x200B; Furthermore, I know that in languages like C#, the runtime is smart enough to optimize "large" switch statements to static dictionaries, but you still write the switch since it's the right tool for the job and you just assume the JIT will take care of perf.
&gt;https://gist.github.com/azder/8432068 Here is an existing tool. When I need it, I use it.
Hi /u/Mydrax, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please also read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It is a reason to avoid them, it's the fall through (and to a lesser degree, they're not expressions) that is the problem with them. For readability, you'd always use functions (fat arrow ones) and attach them to an object (like, you know, function properties i.e. methods) and invoke them like you'd any property with the bracket notation (not dot)
Hi /u/metallicarules01, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please also read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt;A switch is a series of ‚ÄúGOTOs‚Äù in the same way that eg if statements and exceptions are Not. if's don't have fall-through, code doesn't just continue onto the else block, it skips it.
What singed you to day? Cut down on the hostility. As I've stated technology is not there yet and it will take time. However, it's coming and it's already part of web standard. There are also applications which run web assembly because javascript isn't capable to run such apps. For example https://squoosh.app/. In the time being Web Assembly is used for heavy lifting. See, javascript by itself isn't very performative language even with all V8 improvements. And while JIT compailers in theory can be faster than AOT compilers due to context based optimizations practically it's not really feasible. As you may already know, javascript itself concerns itself with delegation and runs the event loop. In browser it delegates most of the processing tasks to browser API. In Node it does by delegating most of the processing to C++ API. For example Filesystem in node doesn't run on Javascript. WebAssembly as it today is used to extend that API in the browsers. However, that being said, in time it will be possible to interact with DOM too. And when that happens, javascript will become less and less relevant. And that's long a way to go, atleast a few years. &gt; What growing need for multi-core processing are you referring to? That we are living in post Moore's law world. Computer power no longer doubles each year as we came to a limit and only circumvent this by increasing the number of processing cores. Only way to take advantage of multiple cores, is to do multi-threading, otherwise you'll be stuck using 1/4 or 1/8 of machine power. And that's simply not good enough with ever growing demands. But even when doing it on single core, coroutines are insanely efficient. For example async in Go achieved via goroutines is more efficient that whatever Node can do with it's event loop. And while performance is just a bit better, the costs in memory and processing is a lot lower, which becomes ever more relevant in cloud computing where we pay directly for resources used rather than some subscription model.
This doesn't matter in the case of an object literal does it? 9 times out of 10 my object doesn't have other fields or functions on it, just the keys I want to iterate. 
Closures are only created by functions. if you don't see a function expression (like IIFE, don't think function statement would work), there is no closure created there. Think of it this way: closure = piece of memory, the local variables and parameters of a parent function.
&gt; When you have 2-4 cases, it's not really beneficial. When you have 8+ cases where each case is multiple lines, it really shines. If your cases are large enough, you can even separate them out into other files that are themselves unit-testable. The problem is that the leap between 2-4 short cases and 8+ cases with multiple lines is the difference between a general purpose tool and specialized tool. If you're dealing with the latter, you most likely require more sophisticated data structures to organize your business logic in the first place. Take this for example: const getPosition = position =&gt; ({ first: 'first', second: 'second', third: 'third' }[position] || 'infinite'); This is not clean code. It's intention is obfuscated in an attempt to be overly clever. We have devices written into the original specification of the language designed to handle this exact case. It has high 'WTF value' in a project where many developers contribute to a code base. What you are saying is perfectly valid, for when the domain of the problem calls for it. 90% of the time however, the problem does not call for it.
You don't have to provide billing information on the lowest tier, so the limiting is, in essence, your site going offline. Alternatively, if you're feeling it, you could make people register on your site and limit them that way.
[removed]
Also instanceof String('foo') === 'string' but instanceof 'foo' === undefined. Wat??
I like Angular so much more than React, but I am going to have to start implementing react due to how common it is. Maybe using this will help in making it more like a challenge to write better as well.
Object literals are still objects, so any enumerable keys in the prototype chain are enumerated in for..in. Example: Object.prototype.enumerablePrototypeThing = 42; for (const k in {}) console.log(k); &gt; enumerablePrototypeThing Now, best practice is to never modify the prototypes of built-in classes, but it still happens and can cause bugs. Therefore it's good practice to either check if the object keys you're iterating over are properties of the object itself like so: for (const k in obj) { if (obj.hasOwnProperty(k)) console.log(k); } or, with a more functional approach: Object.keys(obj).forEach(k =&gt; console.log(k)) In some cases you can get away with creating a bare object with no prototype with `Object.create(null)` in which case for..in is safe, but generally you want to check for own properties or use a method that automatically enumerates only own properties, like `Object.keys`, `Object.values`, and `Object.entries`. In general, you'll be fine going commando, but to protect against weird bugs, these actions should be taken.
I'm a self-taught programmer and since I am unemployed pretty much at the moment I spend 10 hrs a day to study. Javascript (ES6) Data Structures &amp; Algorithm SQL UX/UI (Adobe XD) a little bit of Python During breaks, I write simple webpages to practice HTML semantics and CSS (Flexbox, CSS Grid), mainly because I dislike using Bootstrap. I you are employed maybe 1-3hrs per day is enough but be sure to take breaks in between. 
The solution isn't to defer identity authority to a series of large Web companies, the solution is to use asymmetric key cryptography on the Web: [https://www.w3.org/TR/webauthn/](https://www.w3.org/TR/webauthn/). OAuth2's main developer left because the project's design was overly influenced by monied interests who wanted a solution that could be sold as a service and managed by large actors. Fuck Oauth.
But the length is dynamically calculated
This is why you see a move towards not having any code style linter rules(for example Create React App default eslint setup) and delegating code formatting to Prettier. It's very comfortable.
null being an object is most definitely a bug, tho. A bug they can't fix because of backwards compatibility. It was never a conscious decision to have typeof null == "object".
I believe this. I saw this spec fly by my radar recently, i'll have to check it out! That said, one of the cool things about passwordless is that it's very replaceable and running your own email (or switching to a better email service you like) is super approachable. 
Interesting, but using for.. in I've never had to use hasOwnProperty and never had issues with it looping over prototype properties. Does Node.js handle things differently than a browser might in this case? 
pretty decent usage of closures, congrats.
I agree. I don't like how that looks either. &amp;#x200B; const positionMap = { first: 'first', second: 'second', third: 'third', // more cases } const getPosition = (position) =&gt; { return positionMap[position] || 'infinite'; //ignoring falsy values here } const position = getPosition('first'); &amp;#x200B; That's how I would usually write it. You're right, this pattern is a tool that should be used when the problem calls for it. I disagree that you won't need it 90% of the time, but who cares about that. Use it when you need to. It can help.
My biggest issues are: + Impossible to test for exhaustive cases through static code evaluation + Creation of the object in a closure is pretty bad, especially if the function is called often. Not sure if the JIT will be able to optimize that out. Would love to test that. + If you decide to not declare the cases inline, then it can be rough with possible mutation from outside the function.
Sorry, no, it's an error prone code smell.
Nope, it's just that built-in prototype methods/properties are unenumerable. Unless you manually set prototype properties, which usually entails making them enumerable, nothing is amiss. But as soon as you or, most significantly, a third party package modifies the prototype bugs might creep in. Given the modular nature of Node packages, it would be an anti-pattern to modify built-ins, so I bet the risk of these bugs is much lower in that environment.
This is the appropriate use case of this pattern, in my personal opinion. It effectively separates the core functionality of the "switch" in a highly readable and compact way. I would much rather have this than a "clever" switch like switch (position) { case "first": case "second": case "third": return position; default: return "infinite"; } which could probably have to be refactored when the needs change.
How do you propose resolving the smells?
No, i mean the object with functions thing this article promotes is gimmicky. Switches are perfectly fine, and more readable. The author says they're bad because you can misuse them or something. 
True! I'd just like to setup a simple database that would let people share simulations with each other, so maybe I'll give the free tier a try and see how that works with some authentication and/or registration. Thanks for the tip.
Switches are more verbose, more prone to errors (forgetting a default or a break etc) and is only more readable if that's what you've been trained to read. I prefer reading the other as it's what I'm used to, it's more condensed, and probably means that it works as intended. When I see a switch statement it's kind of a groan-moment
&gt;programmers actually like the fact that it's not typed. On the flip side programmers also like TypeScript and Flow because it gives definition to primitives and objects in more detail and gives more readability and not always for them, but their co-workers. &gt;it gives them more freedom Freedom for what exactly? I'm really actually curious for you to expand on this. &gt;NPM ecosystem The NPM ecosystem, well it could be a lot better. Its flawed system design has allowed it to turn into a slog of related dependencies and encourages things like \`is-number\`, \`is-odd\`, etc. to be used en masse. You could rightfully argue that JavaScript's extremely spare core library encourages this mentality as well. NPM has learned all the wrong lessons and wanted to be a popularity contest instead of something of value. Only in npm would npm tout its own accomplishments by saying that "such and such" library is getting 1 million downloads per week. Yeah because when I switch branches, I have to re-download different versions of whatever.js every single time (should they be different versions). These dependencies are, of course, not centralized! I have \~25 projects with anywhere from 35-50 dependencies for each one. They average 1gb in disk space each. That's 25gb of JS on my harddrive. Java, Python, Ruby in contrast all are install the library once and be globally available for the user. I have 1.5gb in total dependencies for those same 25 projects and many more project defined dependencies (90-100) for each project. &amp;#x200B; &amp;#x200B;
I'm translating a dotNet RESTful API into Node now and damn does your metaprogramming comment hit home! The dotNet project was built using tools and techniques that *might* be a good idea if you're hosting 100's of APIs, but with a project exposing 3 it's fucking nuts. The endpoints are comprised of 6-7 DI'd objects that spiderweb out to their own DI'd shit which spiderwebs out into Linq queries against connectors that (eventually) attach to a stored proc. In my rewrite, I've ended up with ~150 lines of well whitespaced, well commented JS code (including four mostly simple SQL statements) in a single file that replaces over 300 lines of dotNet spaghetti code + 100+ lines of stored procs spread over 12 different files. All for the want of "not writing SQL" plus some overuse of DI?! "metaprogramming" is a wonderful way to describe this cluster!
I‚Äôm glad I don‚Äôt work with you.
I like how everyone can say ‚Äúeveryone understands‚Äù but really each person saying that means ‚ÄúI understand.‚Äù
Condense is not more readable, it just means shorter, there is more chances that a junior developer would understand a switch than this pattern. In medium-large projects (and I would argue that also on small ones) you need to strive for clarity and understandability, since you can't assume that other devs knows the same than you, or even you will know the same than now. Switches are verbose? Maybe, but after a quick search you would find thousands of pages with documentation about it, and every JavaScript Dev understands them or at least has an idea.
To be quite honest I like the classic prototype syntax more, probably for nostalgia reasons, but I guess you're right using the class syntax would make it more consistent.
I didn't equate the two. I said it's more condensed AND more readable.
This guy has to be trolling. Each example gets stranger than the previous, but the icing on the cake is the last one. how is this: const getEditorType = type =&gt; { const itsCodeEditor = () =&gt; 'It is a code editor'; const itsIDE = () =&gt; 'It is an IDE'; const editors = { atom: itsCodeEditor, sublime: itsCodeEditor, vscode: itsCodeEditor, webstorm: itsIDE, pycharm: itsIDE, default: () =&gt; 'unknown' }; return (editors[type] || editors.default)(); }; const vscodeType = getEditorType('vscode'); // Returns 'It is a code editor' in ANY WAY better than this: switch (editor) { case 'atom': case 'sublime': case 'vscode': return 'It is a code editor'; case 'webstorm': case 'pycharm': return 'It is an IDE'; default: return 'unknown'; } 
Not where yet? The topic is how JavaScript became the champion web scripting language, but I think you're trying to drag the conversation to some universe where you can "win" your argument on an irrelevant technicality. Fuck that. No Google-owned language will replace JavaScript now or in the future. Why? First because the industry has quietly adopted WebAssembly as the successor to JavaScript, so that question is settled, and second because [the man who invented the Web doesn't like what companies like Google have done with it, and plans to mortally wound their business model](https://www.fastcompany.com/90243936/exclusive-tim-berners-lee-tells-us-his-radical-new-plan-to-upend-the-world-wide-web). 
What's the actual compute performance difference between using a switch with 1000 cases and calling an object? (Not at a computer to test at the moment.)
Very Cute :) &amp;#x200B;
I'm responding to your post where you smuggled in PHP. So I elaborated on your point. Originally I haven't even expressed any kind of opposition and the commentary served supplementary purpose for anyone who may want to follow your post. I'm not sure why are you now raging like an immature child now with profanity. I used Go to illustrate how coroutines are more efficient at handling asynchronous operations. However there are more languages which leverage the same capabilities in different areas. For example Julia which is used in academic circles and probably gonna push out Python with time for very same reasons. Rust developed by mozilla (non-profit research center just in case) is competing with C++. As for replacement, not in front-end, no Go won't be replacing. But in case of back-end microservices, companies like Netflix are already migrating away from Node. I'm not a fan of google either. However I think due to your emotional state you already ascribed beliefs to me which I do not hold. 
The short-hand of the default check with 'infinite' in this case I'm not a fan of. 
I wouldn't use exactly the style in the article, but some form of that approach is way more readable than a switch. A switch is kind of like training wheels. It's not necessarily unuseful or bad, but you generally move on when you're no longer a a baby. 
Both are terrible tbh.
Not this shit again! It's always this shit. "We hired dummies who don't know hwo to program to do our programming, so let's make sure we use all the worst features of any given language in the worst possible way because we hired idiots!" Absurd. Hire better programmers. Or train them yourself, if you're so convinced that you can only hire idiots for junior developer roles. 
I just found out about this. And, I tried my own much less accurate comparison: [DOM Dominance to Prominent](https://medium.com/@richardaleddy/dom-dominance-might-be-too-prominent-ways-to-leave-d3-react-vue-and-others-in-the-pixi-dust-1ac464f27228) When I search for that on Google I get a whole bunch of stuff I'm not into. But, I tried out Pixi.js. It's been on the back burner on the stove in the shed in the back behind all the piles of books, and other dusty things. Pixi is really cool. But, not a time saver when it comes to programming. Still, if I want to do something in an afternoon, do I have time to learn React? So, maybe Pixi is not such a time hit. At least its entertaining to do real graphics on the web page. So, I did not have the best experience of going to the next version of domc. But, I really wish I could. Some of these frameworks make simple choices, which is often the best and most efficient. The amount of code they use is small. And, for I can figure, no VDOM framework library should be more than say 2K lines of code. That's a guess, but way less than the most popular frameworks, which take all day to load, do anything, or provide easy access to the server. (I'm sure that goes against popular opinion. But, I'm talking about the experience of sitting in the chair and feeling more gray hairs popping out my head while feeling horrified at the performance of websites written in some of the frameworks.) So, these benchmarks are really very important. And, I often go to them for decision making. &amp;#x200B;
I dont hate it. It is very clever. I wouldn't like to come across it in a codebase though
Encapsulate position map in the function so it's pure.
There may be valid reasons not to choose this pattern but I think the assertions that it is not readable or understandable are pretty baseless. I would expect the most Junior developers to easily read and understand the examples in this article.
`Object.freeze` if you want to prevent outside mutations. 
Did you check in your node_modules folder!?
Not knowing this pattern doesn't make you idiot or a bad programer, actually I would bet my life that not many do, myself I didn't knew it before reading this.
I‚Äôm C the compiler does that for you if it makes sense, you aren‚Äôt necessarily supposed to do it yourself 
For what?
For what compelling reason? To show off? Obscuring simple functionality behind a list of functions isn't better, simpler or even faster. It's a primal, like IF and WHILE, hardly for babies. The last example is both more obfuscated, longer and more memory hungry than the case statement. I mean, look at this mechanism he had to use: &gt; return (editors[type] || editors.default)(); It also uses THREE local functions and a struct. You're insane if you think that's handled better than a switch. 
YDKJS is an awesome book series. And it‚Äôs open source and freely available, too: https://github.com/getify/You-Dont-Know-JS
The implication of your comment, and the countless others like it on this sub, is that "junior" (or "overseas," another common strawman) programmers are too stupid to understand these concepts, because they're not that complicated and don't take that long to learn. I'm shocked that anyone who has been programming JavaScript for more than a year (to be generous) doesn't know this pattern. Does not knowing it make you an idiot? No, that was your implication, not mine. It does, however, demonstrate that you're neither a very experienced nor sophisticated programmer. Which is fine, everyone is a beginner at some point. But recognizing that someone is a beginner and predicating your entire team's coding style around absolute beginners (with the assumption that they will \*always\* be beginners from now until forever) are two entirely different things. Even the stuff in that article isn't that advanced, and kind of makes it seem more complicated (and full of boilerplate) than it needs to be. For example, this might make it appear that you need to write a specialized function every time you want to replace a switch statement, which isn't the case: const isNotOpenSource = editor =&gt; { const editors = { vscode: false, sublimetext: true, neovim: false, fakeEditor: undefined, default: 'unknown' }; return editor in editors ? editors[editor] : editors.default; }; You can do the same thing with a generalized function that takes a series of cases and then a value to check against those cases: const switcher = (cases) =&gt; (key) =&gt; cases[key] || cases.default const isNotOpenSource = switcher({ vscode: false, sublimetext: true, neovim: false, fakeEditor: undefined, default: 'unknown' }) That still doesn't account for someone forgetting to include a "default" value (or where "default" might be a desired case apart from handling unmatched cases), but you elaborate on this pattern to get there.
There‚Äôs also the fact that Array.prototype is in the prototype chain, with many helper functions for arrays
Well he gives a list of reasons for why the top one is better, but he doesn't explain any of them. It's just poorly written.
How is this metaprogramming?
Er, I don't get it, we can already use sockets to do callbacks: socket.emit('test',{},(err,res)=&gt;{}); socket.on('test',(o,c){ if(c){c(null,true);} });
Nice
Hmmm, just did some reading up on the matter. It looks like you don't need socket.io anymore to form a websocket, it's becoming part of standard javascript. The syntax for it is rather god awful, but it is there and its much more streamlined than socket.io is in terms of resources. Needs to bake in the oven a few more years before its ready for prime time, but the ground work is there. Your code looks like it would be very useful for a native websocket.
Worrying if a new object is created inside the JS engine is a micro optimization not worth the effort 
I say this is invention for the sake of itself. Everybody knows switch/case. It is intuitive and readable. This adds nothing to it except the article writer feeling clever. Best case scenario it is a fraction faster and saves typing a few characters, worst case some other dev has to decipher "clever" homebrew patterns and getting them wrong. 
Check out some of the other replies to my post. They seem to disagree with us. 
Invoking functions from a dynamic lookup on an object that has a prototype...
Bu
Devs love feeling clever though sometimes it is misguided. And boy do they have opinions about it.
When I get home I want to jsperf the authors two last examples. 
That is not what the article is advocating. The article is advocating for using an object when semantically mapping a value to a behavior, rather than a switch statement. Not only can you write a factory-method using either style, but most classic examples are written with switch statements because it's the more language-agnostic approach.
It is pure...
Nice. A few complaints/suggestions: - The levels and game speed don't seem to increase. - the rotate and instant-place controls seem to be backwards. In regular tetris, up places the tertimino instantly, and a button is used to rotate. Not a deal breaker, but very confusing at first to have those reversed - the rotate noise gets to be pretty annoying
&gt; While typeof null returns "object", it‚Äôs not actually an object, quite silly right? it‚Äôs consider as primitive. This is a bug in JavaScript that apparently can‚Äôt be fixed without breaking JavaScript. null is explicitly meant to represent the absence of an object per the spec. It's not a bug, it's by design.
Oh, TIL, thanks!
I was not.
It might make more sense to [learn about web assembly in your browser](https://www.reddit.com/r/javascript/comments/ap6s66/inspecting_web_assembly_in_the_browser_in_linux/), tbh.
I think it‚Äôs a style preference but I‚Äôd prefer switch personally. Back when we did Java development I remember any switch statement would automatically fail review. The QE folks thought a factory class was always better. Ugh. 
Why wouldn't you? Perfectly reasonable and succint code. This pattern has been used for 10 years it's not new lol
This isn't some new pattern lol I've been developing for 10 years and when I first picked up JavaScript this was commonplace for lookups over switches.
This article is really "OO is an alternative to procedural" which is great thought it is also 2019 and it shouldn't be surprising to people that OO is easier to reason about.
https://github.com/Zmetser/nakedPassword
Hahaha! brilliant! 
Shouldn't it say "*it just has to swap each operator with the number on its ~~left~~ right*" on [this](https://i.imgur.com/lINlHDk.png) part? Awesome tutorial by the way, it really helps with learning how the machine works.
Thank you! And yes, that's a typo. Fixing it now.
Google doesn't have to manually verify - I had a chrome extension with those permissions and updates were always instantaneous (25k~ users). I believe it only happens for the first upload, and sometimes if their system detects it's needed for whatever reason (I might be wrong on that). Sending requests to a server / proxy will completely change the scope. You'll have to handle GDPR too I believe since you're sending their data to a third party. I'd just recommend sticking with current permissions. Even if Google has to review all updates, it's not an extension wherein this is a huge drawback in my eyes.
i feel like typescript is a blog post in this analogy
`NaN` is a valid IEEE-754 value. Any language supporting IEEE-754 would treat it as floating point type. What would the author expect its type? It sounds ignorant. 
What are the security implications?
Actually, allocating memory is a side effect, so your proposal will make the function impure. If the `positionMap` isn't mutated after its creation then `getPostion()` is a pure function.
So you're saying the code GOES TO the end of the else block? ;)
They might have changed the rules, I've uploaded several new versions and each is with their compliance department for review for a few days before publishing. That is a great point about GDPR, I hadn't considered that. I suppose I wouldn't really be dealing with any user data, just using an API to get dates of articles posted on Reddit. If I do decide to move to the server option I'll definitely look into the specifics though, thanks!
Maybe, but with only a glance I can tell what the switch statement will do. 
I didn't know this pattern either but I understood it instantly. After all, the point of programming isn't to memorize every pattern, it's to be able to create and understand them on the fly.
It's Open-Closed principle. When dealing with `if` or `switch` you just can't add behavior without modifying the code of the function where the `if` lives. If you use this pattern, you can change the behavior of the function (or extend) without changing the function that uses the object. It is open for extension and closed to modification and it leads to a much more flexible design and reduce coupling in your code.
This table comes in very handy sometimes: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties (be aware that you may need to horizontally scroll to see it all because of the recent design update)
Objects can be modified by default
No, not really
I mean a function is just a class of object too, yet... &gt; typeof new Function() "function"
Yes. That‚Äôs what it is useful for.
My point is not that is a hard to comprehend pattern, my point is that switch being a standard pattern or statement is easier to read and easier to comprehend and that has to be considered. I'm not saying: "don't use it" or "I will not use it", I definitely see case scenarios where it can be very useful, but I wouldn't go as far as dump the switch for this, as the article seems to imply.
ELI5: Why do we want to write CSS in Javascript instead of CSS in CSS?
Functions are just a "specialty object" too, yet `typeof` evaluates to `"function"`. It would make sense if there was consistency, but there isn't.
Not really. If you mutate the object via a side effect somewhere else, it‚Äôs going to output something different even if you pass it the same value The definition of purity is mostly two things: - no side effects, and - same input, same output. While this function doesn‚Äôt violate #1, since the object is referenced from an external scope and is mutable, it doesn‚Äôt meet #2 
And the inverse to that: &gt; typeof 'foo' "string" &gt; typeof new String('foo') "object" // Plus: &gt; typeof new Function() "function" &gt; typeof [] "object"
Second one looks fine to me, could get too big eventually.
Some JavaScript developers believe that a component (React) should control every aspect of its display. The file should contain the styles as well as the logic. I don't believe this pattern will last because there's always something wrong with it. It's either too difficult to override with other styles (one of the arguments for is that it's difficult to override), or css in js can't perform the more advanced css patterns such as media queries or complex transitions. I also prefer separation of concerns, keeping the css separate from the business logic.
Oh, yes, I see. So if you modify your object at runtime then this method becomes unreliable, yeah. You could always declare the object as a constant and use Object.freeze, I guess
styled-components addresses all the concerns you mentioned.
Are you publishing through the new dev portal? I had this problem for a while before switching and now it‚Äôs always instant.
Yeah that's the thing. You can't get :hover, etc in javascript...that's pretty damn important. Also you can use webpack and stuff like that to bundle css and js into one "unit". It doesn't need to literally be javascript CSS.
If I end up using a switch, it's usually for very specific behavior. If it's very specific behavior, I won't end up reusing it. "Decoupling" it to a function in that case is not decoupling but moving code elsewhere.
With Cute you can have hover, active, etc. Hope you like it
`new String('foo')` is an object. `'foo'` is a primitive.
`typeof null` should return "null" to be in line with the other primitives. That it returns "object" is a very early bug which was kept for the sake of backwards compatibility.
That is extremely cool.
Hi /u/Maly_Programista, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
[according to the spec](https://www.ecma-international.org/ecma-262/9.0/index.html#table-35) it should return "object". If it was a bug at one point, it isn't currently. If an implementation of JS decided to have `typeof null` return `"null"` it wouldn't be in compliance with the spec.
Yes, this behavior is of course in the spec. As I said, this is a bug which was kept. Returning "object" doesn't make any sense.
Dear god, this underscores why I hate react so much.
It makes sense in the same sense that typeof empty string returns a string, and typeof NaN is a number. These values represent the null values of their type and typeof correctly returns the type they belong to. In the case of `null`, it is the "primitive value that represents the intentional absence of any object value" so its type returns as an object. You might not agree with it, but saying it doesn't make any sense isn't accurate.
Nice theory, but that's not how that happened. &gt; The type tag for objects was 0. While `null` was represented with a `NULL` pointer. Note that a `NULL` pointer does not point to an address ‚Äî it simply points to nothing (hence why it is called null in the first place). But in the C standard, `NULL` is considered equal to 0. Consequently, `null` had 0 as its type tag, and since 0 is for objects, then `typeof null` fraudulently gives us ‚Äúobject‚Äù. It was just a bug.
I've tried it through both. I published a few updates that only included changes to the name, description etc. in the manifest file. I was hoping that since there were no Javascript changes it would be instant, but it still took a few days. In the grand scheme of things a few days isn't a big deal, but it would be nice if I could push bug fixes out quicker. These are the permissions I've had to request. Obviously it is the last 2 that allow cross-origin requests to any domain and lead to the scary warning. `"permissions": ["background", "storage", "https://*/", "http://*/"]`
I'm not describing "how it happened". I'm describing how it works now. What I described isn't a "theory" it's just an explanation of why the behavior is internally consistent across all primitive types. What you aren't understanding is what while it may have been a bug 20 years ago, it is currently not a bug and isn't accurate to describe it as one as it is an intentional design choice. 
I have tried this approach many times, and it does have its places. However, most of the time I use a switch statement. Linters catch the easy mistakes, and devs understand what the code is trying to do. It isn‚Äôt pretty, but we know switch. 
This needs more upvotes. I can't believe the top voted comment gets it so wrong. Factory method pattern is a creational pattern that returns an object. What the article describes is not returning an object. [https://en.wikipedia.org/wiki/Factory\_method\_pattern](https://en.wikipedia.org/wiki/Factory_method_pattern)
&gt; I'm describing how it works now. You are retconning it. It's just a bug which was kept for the sake of backwards compatibility. It didn't make sense back then and it doesn't make any sense now. It's one of the quirks you have to memorize. It's a primitive, not an object. The returned type is wrong.
Agree to disagree. If the behavior is intended, describing it as a bug is factually incorrect as I indicated in my original comment. 
I had experience with all three instructors, and consider Grider the best. His recent (fall of 2018) complete revision of his React course leaves you speechless. His explaining of Redux should be a gold standard. I've seen gushing reviews from developers who say his course is considered a React bible at their companies. Mead, by comparison, is too windy, doesn't really explain some pretty important things. Mead and Max both are too verbose, have too much filler in their courses. Max's project of building layers of a hamburger in React loses comparison to Grider's apps of Youtube, Twitch, blog, song selector, and a full-blown fullstack app in his Node.js+React course that utilizes credit card payment and mail sending service. Grider doesn't cut corners, he explains every little detail, and boy he has a gift of breaking down complex things.
This is written in javascript es6 only. Also supports chaining of methods which i hope is useful. 
I was asked questions about databases (don't have a degree, not a lot of familiarity). Was able to work my way through it talking about my understanding of tradeoffs between arrays/objects in relation to accessing data, etc, and how that relates to ORM dbs, etc. My advice would be to remember to keep talking your way through a problem and show them your thinking. They might be able to give you hints if you give them insight to what you're thinking. As far as actual coding, I implemented a FizzBuzz and then had another slightly more difficult problem where my inputs were "D" or "U" for down/up. Each character represented a "step" a hiker took, and I was supposed to return the total number of times that the hiker entered a "valley" (i.e., below 0 altitude). It wasn't terribly tricky, but in the high-pressure moment, I was getting caught up on how to know when to increment my count... wound up realizing I needed three pieces of data... # of times entered (which I want to return), current altitude, and eventually realized I needed to keep track of my previous altitude to know that I had ENTERED a valley rather than taken another step below sea level. Sorry that turned into a rant. Good luck!
I think you are much better of moving the scrapping logic to your server and call your api from extension. Then you can be doing daily/hourly updates to logic on your server without even touching the extension. You will be good for a long time just even using free tier on aws or google cloud. Having a db for caching - but also for maybe doing some additional analysis later is good idea too. You can also monitor your logs/errors and tweak the logic better on the server - its just a much better architecture imho.
From my understanding the reason you get this warning is because you need to read and modify the sites a user is visiting, via a content script. Your manifest.json likely has something like this: "content_scripts": [{ "matches": ["&lt;all_urls&gt;"], "js": ["content.js"] }] If you change &lt;all_urls&gt; to https://reddit.com the warning should change from all websites you visit to just reddit.com I believe. I have an extension doing something similar. Just an fyi, if you want to make requests to another domain you can do this via a background script as well, as described on [stack overflow](https://stackoverflow.com/a/7699773/3182448). With this you do not need to request permissions in your manifest. For instance, my permissions just looks like this: "permissions": ["storage"] and I make cross domain requests from my content script. This won't change the "read and modify" warning, but just wanted to add this.
Thanks to compiler optimizations, switch statements and if/else statements tend to take the amount of time. At HackReactor (a bootcamp) they recommended almost never using switch statements. I only use switch statements for Redux reducers - partially because it's what people expect to see in Redux reducers, but Redux reducers often have cases where fallthrough behavior *is* desired. 
This is really cool, but using the decimal in place of a comma to separate out the values is throwing me off. Could you do some sort of basic locale detection and use commas if in en-US?
I understand that, but stuff like this has only become of interest because of the way code is written in React. 
It's a language bug. It's not a bug of contemporary implementations, because those implementations just do what the spec says. It was a bug in that early C implementation which introduced that nonsensical behavior.
IMO an intentionally absent `break` is unusual and makes the code more difficult for future developers to read. When leaving out `break` and flowing to the next block matches your intent, I think it's better to spend a few extra lines to make it more obvious. For example, instead of: switch (action) { case 'preprocess-and-submit': preprocess(data) case 'submit': submit(data) break } I would rather read this: switch (action) { case 'preprocess-and-submit': case 'submit': if (action === 'preprocess-and-submit') { preprocess(data) } submit(data) break } ...even though, *technically*, the first is shorter, equally correct, and requires one fewer (cheap) operation. Imagine that a teammate decides `preprocess-and-submit` is too wordy and shortens it to `preprocess`, believing that the "submit" part is implied. Now, to a future reader, the first example looks like `break` was accidentally left out, while the second is still clearly a deliberate choice.
same. i believe the original replier is out of date
theres a new dev portal? all i seen is the shitty publisher interface. why is this all so badly documented lmao
&gt;I think you are much better of moving the scrapping logic to your server and call your api from extension. Then you can be doing daily/hourly updates to logic on your server without even touching the extension. You will be good for a long time just even using free tier on aws or google cloud. Having a db for caching - but also for maybe doing some additional analysis later is good idea too. You can also monitor your logs/errors and tweak the logic better on the server - its just a much better architecture imho. edit: forgot to mention, if i saw that permission request, its an immediate no for me for any extension. I'm thinking you may be right. I hadn't even thought about an hourly or so job to automatically find and cache dates for posts on the top subreddits, that is a great idea.
A word of caution to anyone who sees this and says "hey that's really cool, let's go even further". I had a gnarly bug in production that was caused by taking this method further. Consider this: class SomeImage { // lots of code with multiple ways this.imageType could be set getImage() { if (this[`get${this.imageType}Image`]) { return this[`get${this.imageType}Image`]() } return this.getDefaultImage() } getRedImage() { // returns a red image } getBlueImage() { // returns a blue image } getGreenImage() { // returns a green image } getDefaultImage() { // returns the default image } } Can you spot the totally evil bug lurking here? What if `this.imageType === ''`? Sure, I *could* fix the bug with an extra check, or by making sure `this.imageType` can never be the empty string. But at that point I'm adding complexity for the sake of keeping fancier code. Instead, I replaced the `getImage` logic with a `switch`. The lesson here is that *in general* looking up a key on an object doesn't guarantee that you're choosing from a known and unchanging set of keys. New keys could be added - at runtime, or by later developers. But a `switch` statement does give you that guarantee - `switch` will either match one of an enumerated set of conditions or `default`. In the real world that's a powerful guarantee that you don't want to give up without considering the drawbacks.
There should be a link at the top of the existing portal in a yellow alert box.
Time to memorize them all.
I hate having to look multiple lines down to see what I'm getting for a particular value. The author wrote terrible code but that's not a reason to use switch statements IMO.
Fun fact: Bill Nye‚Äôs mother was involved in the enigma project 
I believe you get this warning whenever you have a content script, since they run within the current page and could be doing anything. I have a chrome extension that makes cross domain requests via a background script. I don't have any origins specified in my permissions, since you don't need to specify them when you go this route, and I get this warning too. I had thought that if you limit the "matches" in the content portion of you manifest that it would show a reduced warning, for example "Read and change all your data on reddit.com" but I guess I was mistaken about this after looking at your manifest. Maybe it's because there is a wildcard in your match and so it just defaults to the standard message. In case you are interested, this is the method I use for making cross origin requests [stack overflow](https://stackoverflow.com/a/7699773/3182448)
Because It Iframes a website in the page and cannot be blocked or history cannot be seen. Useful for school to get around blocked sites
Meh, I'm sticking to socket.io for now. It's already got basic syntax like callbacks operational. Basic websocket needs more than just callbacks, it needs channels, streaming, broadcast, and if it could do webRTC then adding in torrent technology would be good as well. I always wondered why we don't have a torrent technology that utilizes all clients connected to a server to help carry the load of file transfer.
The universe has aligned perfectly for you to create exactly what you envision.
Really? I tried to get webrtc to work, I managed to stream some video and audio. I couldn't get it to target one client or another though, I could only get it to broadcast like a radio to all connected clients at once. I gave up and just went back to bottlenecking streams though the server. How would it work for torrenting via sockets?
Just a little detail. Bomba machines were invented by a team of Polish mathematicians. Why is it attributed to Alan Turing on your page?
well done! Feedback: On my screen, I can't see the entire board. Some grid lines would be nice. It's hard to "line up" the pieces. Kudos on the intro music :) 
Not sure why you're being downvoted for an opinion...
I haven't dug into React internals but I use Vue in my day job so I will base by answer solely on Vue, though as far as I understand, it applies to React and many other vdom implementations too. Vue component state is **observable**, meaning the framework can listen for access (get) and changes (set) to the component state and trigger callbacks. In Vue 2.x (latest major version), this is achieved using ES5 getter/setter. In Vue 3.0 (currently under development), this will be done using ES2015 Proxies. To generate a vdom trees, each component has a render function whose job is to take a component instance and return a vdom tree for that component instance. These can be hand-crafted or generated with a compiler from HTML templates or JSX. During the execution of the render function, any access to any components' state is registered as **dependencies** of that render. So when any of those state changes, the engine knows which parts of the tree depends on that variable and only re-render those. Then the new vdom tree is diffed with the old one and only the necessary real dom operations are performed. 
Creating objects is very cheap. One object is nothing.
Fun idea, will install!
Uh what? I do media queries in css in JS and complex transitions all the time. The moat beneficial thing about CSS in JS is being able to key off props ij your CSS , and tree shaking your CSS to make sure your bundle size is optimized, not the shit you said.
Could have done this `return this[`get${this.imageType}Image`]() || this.getDefaultImage();` but good on you for cleansing that monstrosity.
The framed site can be blocked (by your school) just fine. Unlike an ordinary page load, iframes can *also* be blocked by the site you add them to *and* the site you are loading in them. They may not show up in your browser history (a private window takes care of that), but no one is checking that manually. The site is still downloaded on the school network and will show up in those logs. I suppose this does help if you have a school laptop, which has an incompetent program that tries to control your browser, but does not force you to connect through school. Maybe that *is* the level of school IT security. 
This post initially only loaded your profile picture (you and your presumed girlfriend) and I thought the relationship WAS the Enigma Machine.
Learning basic JavaScript in and of itself will help you learn react. I was learning JS for a month and nothing was clicking until I did the watchandcode tutorial. The guy teaches you to make a todo list with vanilla JavaScript and breaks down everything into smaller and smaller parts first using general concepts and then going into smaller details. It made a lot of the basic stuff I learned in terms of syntax and code organization click in my head. Be familiar with html and css as well, since react uses JSX and inline styling. I started react about a week ago. Best resource is YouTube crashcourses complimented by the official react documentation when you don‚Äôt understand something. 
Not a fan. It's a lot to parse to figure out what's going on, whereas switch statements seem a lot more straightforward. If I need to do anything complex for a case, I just write a function for it. If you can remember a pattern like this, you can probably remember that you need to add a break statement if you don't intend your switch case to fall-through. 
Thanks! Guessing that's the practical Javascript course on watch and code? 
I need Pokemon-style song for that.
Yes. The free one.
Perhaps because they intend to build their simulator based on the design for the British Bombe, which was developed by Alan Turing, albeit based on the polish design. [https://en.wikipedia.org/wiki/Bombe](https://en.wikipedia.org/wiki/Bombe) 
 | it gives them more freedom well, sometimes you need to add methods to an object on-the-fly. for example, when you use an object coming from a library you dont want to touch. or, sometimes you want to send anything to a function.. Yes, you could do that in other languages, but with sometimes far more code, and planning in advance &amp;#x200B; as for the de-centralization of NPM, i think its a good thing. i've many times had issues with those central python repos, that had to spent time to solve. disk space is cheap. our time... far more expensive :) &amp;#x200B; &amp;#x200B;
That's odd, shouldn't be. Was only last month that I posted an update. Might have just been so quick due to the number of users that I didn't notice. By quick, I mean store showing latest version within 10 minutes or so.
it seems the majority seems its not the language features... it's the environment that led it to its position. interesting! maybe i'm just too romantic.
I just explained the principle behind that pattern. In 100 comments, no one seems to have made that link. Now decoupling is not only for reuse. It also help keeping people sane by not having functions that have 1000 lines, or tests that need 25 setups. If your writing a library it also let people write their own code and not change your code... etc The ops example is oversimplified for that pattern to shine and in his case, it seems better to use a switch. There is no silver bullet : to understand when you should use a pattern or not, you first needs to understand its strengths and weaknesses 
The official MDN [documentation](https://developer.mozilla.org/bm/docs/Learn/Getting_started_with_the_web/JavaScript_basics) has a part dedicated for basics in Javascript, it's a lot into detail and every bit of thing is explained. This might be a bit overkill if you are more of a visual learner or are discouraged by large amounts of text. If so, I'd recommend [YDKJS](https://github.com/getify/You-Dont-Know-JS), it's a series of books that have challenges at the end to test what you've learnt. After you're done with the basics: I'd recommend WesBos' [courses](https://wesbos.com/courses/): Javascript30, ES6 For Everyone, React for beginners and advanced React courses. Specially Javascript30! It is really reeaaallllyyy good to polish your knowledge.
Nothing related to React here. It is for Custom Elements and uses only Native ES6 code. &amp;#x200B;
[removed]
Hi /u/staywellhyrdrated, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Linters are not react tech, did you not use linters with angular...?
The warning is right to be scary. Say I post [this link](https://mail.google.com/mail/u/0/?tab=wm#inbox) to reddit.
Hi /u/thepostmanpat, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
https://apexcharts.com/docs/options/datalabels/#formatter
It's a general solution to making DOM changes based on state, but there's almost always a faster solution to any specific problem. It's just a question of whether you need a faster solution.
yea thats different from me... i only have users in the dozens and my approvals take multiple days
Thanks so much! Will Check it out
Hi /u/techie_ninja, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You can actually use a puppeteer extension with "puppeteer-extra", it has a plugin for stealth mode
You sir, are a hero! Thank you so much.
It won by virtue of being the first inside web browsers. I honestly don't see how it brings anything syntactically or technically better than any other scripting language. Personally, I find Python to be more preferable and cleaner.
Hi Michel! Just coming back to this after some time... Since bey has seemingly been abandoned - Jamie [acknowledged but completely ignored my (rather major) bug and test fix](https://github.com/jamiebuilds/bey/pull/3) - I created my own React state library using immer instead, called pullstate. [Check it out here](https://github.com/lostpebble/pullstate) - would love to know what you think! It uses hooks, immer and also provides server-rendering - I feel like I've found an interface that matches my satisifaction with `bey`'s simplicity.
And dont trust half of it
`$$('#wikiArticle li').length - $$('#wikiArticle li &gt; .sidebar-icon').length === 372`
If only the British had had a time machine so that they could have travelled into the future and downloaded the Enigma source from GitHub without having to pursue German subs left and right... Wouldn't have made for a good war movie, though, so maybe it's a good thing history didn't turn out that way. I don't know. &amp;#x200B; Great work, regardless! 
I'm a senior, actually kind of a web solution architect right now. And I know prototypes at a very simple layer, I don't know the gotchas and the edge cases. It's because I never had to ... I find inheritance in JS without a type system to just obfuscate code. If I get to a point where I'll need to understand prototypes than I'll go into it, but I've never needed it (YET). I do however know that if I need to it won't take me long to get it. disclaimer: I never use ES6 classes either - outside of react component declarations.
I go by ts definition and use undefined: `?something` is `undefined`. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
out of curiosity, how long have you been coding?
I recommend adding [Parcel JS](https://parceljs.org/) between Gulp and Webpack. It's wonderful for smaller projects!
React is for "custom elements" and "uses only Native ES6 code", too.
Just saw your post and I was wondering if you inject some script in reddit website to add the content of your extension. If so, can you share how do you inject? I already tried the default method listed on stackoverflow https://stackoverflow.com/questions/9515704/insert-code-into-the-page-context-using-a-content-script but no luck so far. I can't get my script to be loaded... I am using CJS extension and adding it manually as an alternative until I find a propper way to do this.
Async/await without exception types causes you to swallow runtime errors. I'm sticking with promises until JS gets exception types. 
it doesn't work in current Edge as "registerElement" is not a known function.
You should include webcomponents polyfill for edge
What people don't understand is that a design pattern is just that, a common pattern, a named common workaround for language/framework deficiency and JS in this particular case doesn't have it.
You see, that what you explained is just OOP, that is, objects have methods (function that is a property) and you can change the behavior of the object without changing the code that uses said object.
If you put it in a function, rhe switch, then every case can have a return, which is a bit more sane than a follow through when you miss a case,√± AND it makes it an expression, not a statement (you can use the function in places you cant use a switch)
There are plenty of jobs, even if it is true that contracting is become not and more prevalent. Have a look at jobup.ch out LinkedIn Source: I'm a full stack developer in Switzerland
Material-UI is using CSS-in-JS for its styling solution. I'm using it on production and haven't encoutered any difficulties with media queries, haven't tested with transition tho.
I'm sying the execution skips, automatically, you don't need to rememmber to put a break or return every single time so that execution will skip the else block after it eveluated the if block.
sometimes readability is more important than execution time, sadly the OP examples will probably fail at both.
but they DO love to downvote when you point it out to them
To your first question: Go on jobs.ch, because it depends a lot in which region you‚Äòre searching for. For example, in Z√ºrich there are more webdev companies then in Basel. And companies are always looking for, to have their own webdev employers. Second question: There are companies like UBS for example, which don‚Äòt like open source. And there are companies, where open-source is used. Fourth question: It also depends in which region. But I would say 6000-6500 CHF per month.
I understood you and I didn't agree wirh you. I still don't. Switches are perfectly NOT fine, otherwise there wouldn't be so much divisive opinions. Think about it this way: anyrhing in programming that can be misused, it will end up being misused.
&gt;6000-6500 CHF per month. Is that net or gross? That's not much higher than the UK and the cost of living is quite a lot higher from what I can see (compared to Manchester where I live).
Thanks for that, I'm gonna check that out now. Do you know much about the agency Netcetera**?**
You could look at optional permissions. I think that's what RES uses and it asks permissions for each new host it encounters. It might not be useful if the user then gets 20 permission prompts when they go to a subreddit but maybe there's a way around that
Gross. There are some companies, that would pay you maybe 7k but there are also companies, which would pay you only 5k. In most of all companies, you get a 13th month salary. As I said, it also depends, in which region you‚Äòre working. I never compared both countries, but when I‚Äòm in London for holidays, the living seems to be much higher than in Switzerland. With which region did you compare Manchester?
Freeze the Object (and give it no prototype so e.g. ['create'] lookups don't return the Object method): const positionMap = Object.create(null) positionMap.first = 'first' positionMap.second = 'second' positionMap.default = 'default' Object.freeze(positionMap) ...
Web Components(Custom Elements) provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. You can still use Web Components(Custom Elements) with React, but Web Components(Custom Elements) and React are different things. One thing is sure - React is very nice and well done Javascript library. &amp;#x200B; &amp;#x200B;
This is the right answer to those coders who are afraid of using switch. Honestly every JaveScriot programmer should use eslint, it‚Äôs awesome. I‚Äôve written multiple custom eslint rules to help me start adopting newer ES features instead of using old ones. For example of a custom rule, I detect when an indexOf() just compares to -1 and throw a warning that Imshould use .includes() instead.
&gt;Netcetera I know nothing, but their website looks nice :) Good luck with your job searches!
Hi /u/KellyCMI, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It's called a "dispatch table". Next! 
I am living since 8 years and working fulltime since 5 years in Switzerland. Here are plenty of web development jobs. You have to search for them. Bigger companies often use .NET and Java on the server side, smaller companies tend to use something like PHP, NodeJS or Python. On the client side React, Vue and Angular are becoming more and more popular here but legacy code is still around. Regarding salary, it depends on your location in the first place. In Z√ºrich you would get about 7000 CHF to 8000 CHF per month with your experience, but with relatively high outgoing costs, like rent, insurance, etc. In other cantons you pay less for your living but also have a smaller salary. Since Switzerland is not that big and the infrastructure is very good, it is not a really big deal to live e.g. in Luzern and work in Z√ºrich. This way you could save a little bit more money. Anyway, if you want high salary, you can apply for a job at a bigger bank, like UBS, Credit Suisse, etc. or pick an insurance like CSS, Helsana, etc. There are many options out there, but keep in mind that those companies tend to pick people who can show a big list of educational achievements rather than checking the actual skill. Smaller companies, on the other hand, look at your raw skill, but tend to pay less. In the end it depends on your personal preference. I am working in a very small company and when I hear what problems are happening in bigger companies, we work with, make me think, that I am pretty lucky working where I work and not on the other side, regardless how much more I could've earned every month.