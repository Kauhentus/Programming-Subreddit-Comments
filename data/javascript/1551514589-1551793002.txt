&gt;98ea6e4f216f2fb You are right. This is not a one-liners. I added it to complete the \`flatten\` with any level. Prolly I should add one line which tells it's not one liner. Adding curly braces to line break is personal preference. :)
I’m in love every time I see this
It should be noted that we now have the native Array#flat() method. [[1,2],[3,[4,5]]].flat(Infinity) // [1,2,3,4,5]
Really nicely done!
Great stuff dude, love the artwork too
You can do almost all of these in one line with lodash and its probably optimized better
I made a \[thingy\]([https://github.com/alex-wilmer/prettieslint](https://github.com/alex-wilmer/prettieslint)) to get up and running with esilnt and prettier in any project.
Nice! Would love to see follow ups with this thorough style.
Nice. Though I'd rather have that sort of stuff running in something like Github Actions, so it works automatically for all devs no matter what their individual setup is.
Why on earth would anyone use a font for programming that runs characters together and makes it difficult or impossible to determine [whether something is a double- or triple-equals](https://cdn-images-1.medium.com/max/2600/1*Y2FfIZMchiawzRIS_Rfrcg.png)? With a language like JS that's just *asking* for trouble...
... at the cost of an additional external dependency for your project.
Which might be in your favor at this example. Things that are used often are better when standarized. It's cool wyen you hire a dev and he knows your tooling. You will end up having less code because there are bits to import and reuse rather than writing it from scratch. And you will have that exposed as a package for your project which barely happens when you drop one liner here and there as you go. Using tools like that helps in project maintaince, onboarding etc... Dependencies are as good as your review process. You could stick to vanilla and let go react / vue / you name it - even if your custom solution would beat popular frameworks (but lets be realistic, this doesnt happen that often) you would end up creating big overhead for new members and need to wait for months for productivity to come... Its all about common language and making development comfortable. 
&gt; Things that are used often are better when standarized. It's cool wyen you hire a dev and he knows your tooling. You will end up having less code because there are bits to import and reuse rather than writing it from scratch. Absolutely true, though you won't get much more standard, accessible and "less code" than using standard language features. ;-p More seriously though, I'm not arguing against using dependencies. I'm arguing *adding dependencies is not a cost-free action*, so "lol just use Lodash" is advice that is only *contextually* useful in some situations - in others it could be a terrible idea.
And it's responsive!
It works when you have eslint take care of complaining about double equals. Still, I tried a few times and always quickly went back to Consolas, which does not have ligature support.
I'm not a fan of firacode either but the === has three horizontal lines whereas the == has only two so it's not that impossible to tell them apart.
We're on the same train :)
Dope!!
[https://ghost.org/](https://ghost.org/de/)
So cool, well done! 
Cool. Looks good. Gonna try it out. Will that configure Airbnb styleguide?
Yes. Git hooks are really powerful Eventhough all devs will use it, I would recommend the step \`npm run lint\` in your CI/CD or something. Because one can commit without running these hooks by \`git commit -m "..." --no-verify\` 
Because it's not an issue because of the ligatures you dislike. Double == are easily discernible. 
&gt;https://amitdiamant.github.io/magnify-3d Chrome Version 72.0.3626.121 (Official Build) (64-bit) Mac OSX 10.13.6 &amp;#x200B; &amp;#x200B;
Does it have a git repo?
O wow!!! Reminds me of the old days :)
Ah I had no idea about passing an argument to it, and `Infinity` is very clever, thanks for this.
None of what you said is the case if you spent any time using ligatures.
removeDuplicates only removes duplicates if they are primitives. if you use an object as parameter then it will fail
Try this one https://github.com/30-seconds/30-seconds-of-code
[removed]
Well, you need to define the definition of duplicates. :) const a = {a: 'A'}; const b = a; const c = {...a}; const array = [a, b]; // contains duplicate. a and b are duplicates. const array = [a, c]; // does not contain duplicate. a and c are two different objects, albeit they have the same structure. &amp;#x200B; &amp;#x200B;
Thanks for sharing 30 seconds of code. 30 soc gave me idea to write a post. :)
I have been using Fira Code since last one year cause it's really good alternative to Operator Mono. I have never run into any problem. Indeed, I am loving it so much that every freaking editor I use both web/desktop I use with Fira Code.
you get used to it very quickly. Might not be the best for screenshots I agree (also, yes those screenshot looks nice but for the love of god post code snippets not screenshots, I want to copy code not images). But if you work with them it's really no issue to determine if something is == or === &amp;#x200B;
duplicates are when they have the same structure, a and c is a very normal use case, in this case you would like to remove c
if that is the case then this might help. const removeDuplicates = arr =&gt; arr.filter((item, index) =&gt; index === arr.findIndex(v =&gt; isEqual(v, item))); `isEqual` can be your own or 3rd party comparator function. Here's one naive implementation const isEqual = (a, b) =&gt; typeof a === 'object' &amp;&amp; typeof b === 'object' ? JSON.stringify(a) === JSON.stringify(b) : a === b; Hope this helps.
Can people please stop using acronym-as-word stacks. 
Nice first project! I didn't try it but had a look at the source files. And I learned the 'transitionend' event that I never heard of before. [https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionend\_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionend_event) &amp;#x200B; Did you know GitHub has the 'GitHub Pages' feature? It lets you host your project on GitHub (if it's a web project) so you and everyone can try it out. It's in the Settings tab of your project on GitHub. 
I'll add this right now, give me one moment. &amp;#x200B;
This is terrific. I'm among those that cannot replace my current new-tab extension, so I'm exploring the website. It'd be great to have a page that displays just one snippet or question randomly on load. Many thanks for the great resource.
I've gone ahead and added a simple ExpressJS example: [https://limitrr.js.org/#/quickstart?id=simple-expressjs-example](https://limitrr.js.org/#/quickstart?id=simple-expressjs-example) Note, however, that there are many examples of each function within their respective pages. Should be quite easy to implement. Let me know if you have any more questions or concerns.
Hey! I think the app is awesome, although it could be a bit clearer that you're immediately loaded onto the Politics page when you first fire it up! Also, on Desktop, instead of having the hamburger menu, you could probably have the list of topics in the menu bar? 
Can you post what you have somewhere? Even if it’s just a jsfiddle or something? I’m not sure what you mean by “include session”. 
 JSON.stringify({identifier: 5, version: 2}) === JSON.stringify({version: 5, identifier: 2}) // false Same structure, different order All i am saying is that you should specify what the function works on. And the function works great on strings and numbers.
I just completed work on version 0.4.0 of CypherPoker.JS https://github.com/monicanagent/cypherpoker.js It's an open-source peer-to-peer Texas Hold'em game based on the "[Mental Poker](https://link.springer.com/chapter/10.1007/978-1-4684-6686-7_5)" paper by Shamir, Rivest, and Adleman. It runs on any browser with support for ECMAScript 2017 and uses Node.js as a back-end for anything that the browser can't handle natively. For betting it uses Bitcoin (including testnet), for networking it uses WebSockets, and an optional remote database is used to manage account information for web-based players. This is the first version to be packaged into an Electron app. In [the next few versions](https://medium.com/cypherpoker/oh-four-oh-1acf623c0ea3) I'll be adding support for WebRTC and Tor, [Ethereum smart contracts](https://github.com/monicanagent/cypherpoker/tree/master/ethereum/solidity), support for other cryptocurrencies, better status displays (i.e. what's happening behind the scenes), bots, and performance and security improvements. A few of things to keep in mind while you're trying out the demo: - This project involves multi-party encryption so it's not as fast as standard online poker. This is especially true at startup when the deck needs to be generated and encrypted. Give it a few moments. - This _is_ a peer-to-peer game so until I add support for bots you'll need someone to play against. Just open up another window (or few) if no one's available. - I'm not a designer and I accept that the UI isn't as nice as it could be. Please be kind with your comments :)
Insanely cool and very inspiring. I’ll use this as a reminder of how cool JS can be every time I struggle with learning the language. I’m in awe. 
wow, that is an awesome UX design !
I built a 2D arcade game as a side project. The basic aim of the game is to try and survive while asteroids fall from above. You can hit the asteroids and break them apart to survive and your score goes up whenever you hit a asteroid with your bullets. https://github.com/CromulentCoder/Asteroid-Blaster Currently it works only desktop but I plan to add support for mobile as well eventually. Hope you guys like it. If you have any suggestions do let me know. 
The point of ligatures is to improve readability, because things commonly expressed by different combinations of characters get unique symbols. =&gt; "Arrow to right" or "Equal or greater"? &lt;= "Arrow to left" or "Equal or lesser"? ⇒ "Arrow to right" ≤ "Less than or equal" Of course everyone can just learn what different characters mean together, but ligatures make the difference more explicit. In the specific case of strict/loose equals operators the benefit isn't *that* obvious, but it's still easy to tell them apart.
The last one fails when the random number is smaller than 0xfffff. You need to add `.padStart(6, '0')` at the end to make sure it's 6 characters. Personally I like to use `Math.random().toString(16).slice(-6)`, there is a very low chance of getting not enough characters and the distribution is pretty uniform.
Well these are the kind of people that still use MongoDB.
Ligatures are fine, but like any tool they're only useful *when they're useful*. Any font that's intended for programming that runs together arbitrary sequences of characters in a way that makes it difficult/impossible to tell at a glance how many there are, however, seems self-evidently sub-optimal... especially in cases where it's the difference between things like type-coercive- and strict equality.
If you are using double = rather then triple, there's something wrong with your code other than the font.
Your reply is actually what I said in the post ! Chill bro
Yes, It's amazing.
I didn't know that the order of keys matters when we stringify. Thanks for pointing it out.
Just realized, I should note that in `standard.js`, `biscuit` is defined **and** called in the same file, so I need a way to change how it behaves preemptively hence my original idea.
You don't need to use grunt if you already use webapck, you still need to use npm for both.
Thank you for pointing this out. I have added padding.
"JavaScript Development"
Whew! It starts to get tough after a while! This is a really good effort -- clean class-based code style and nice performance. Out of curiosity, why did you choose to use p5.js (versus other graphics handling libraries)? If I could suggest something, maybe keep the bullets firing all the time. Alternatively, you could introduce limits in the number of bullets so that the player would have a reason for not firing continuously. Besides this I found a minor bug where the keyboard momentarily stops responding if I quickly switch directions multiple times. For example, if I hold RIGHT, then quickly press LEFT, RIGHT, LEFT, the cannon stops moving. I have to press the LEFT key again to get it to start moving again. Finally, if you want some assistance on handling button presses on mobile give me a shout. I recently put together a mobile game with similar controls to your's and there were quite a few hoops I had to jump through to get them working correctly. I might be able to save you some frustration.
Then why'd you say the direct opposite in the paragraph I quoted? I'm only responding to your words.
Does it support USD? It seems to be putting the currency sign only at the end. 
I created Windows XP in the browser https://windows-xp.netlify.com/ It's not finished yet, in fact, there are still plenty of features I want to add. The whole project is written in TypeScript because it's something I wanted to learn, and this project seemed like a good way to practice with some interactivity in the DOM. No Vue, React or Angular because I felt like doing a project without a framework.
amazing!
Grunt is a little bit outdated, and there is an actual difference between webpack and grunt too. Grunt is a task runner, just like its a little bit more modern alternative Gulp is. Webpack, however, is a module bundler, but since it also does bundling automatically, you can say it "runs tasks" too, only they are more specifc tasks related to modules. Gulp/Grunt are more flexible, you can run various tasks that manipulate with file stystem, optimize images, etc. Nowdays webpack has a lot of plugins and "loaders" that allow you to treat anything like a module, so basically you can get rid of task runners for good but sometimes I still prefer using Gulp, especially for projects that don't use JS modules heavily
 &gt;the fact it wasn't necessarily easy to tell whether it had two or three horizontal lines on a mobile screen kind of makes the same point in a different context... I understand that for code samples it's not ideal (the real problem there is screenshots 🤢) but I pray you aren't programming on a mobile screen
Thanks for the feedback. Due to a lot of people having the same issue as you I will be adding a feature to open the extension when you want in a new tab so you can use it without replacing your current new tab :D
Not at necessarily - are you arguing against the entire concept of type-coercion here, or just claiming that the are always better ways to use it then testing for lose equality with `==`?
Well thanks to you and other comments Ill be adding an option to open the extension on request so you don’t have to replace your current new tab :D
I’m not sure if the “one-liner” lens is all that useful. I think you’ve presented some useful bits of code here but having the code be one line or two lines or three shouldn’t really matter. I’d personally rather see lists like these themed by functionality vs arbitrary line count, especially when some of the examples become harder to read due to this restriction.
This is a very nice website, and I liked their music! Can you be compliant with the [posting guidelines for showing off a project](https://old.reddit.com/r/javascript/wiki/index#wiki_posting.3A_showing_off_a_project) though? 
Very smooth.
I’m not the person you’re replying to, but personally I haven’t used explicit loose equality in years. Might be a symptom of working in a c# house, but it seems like each time I used to use it, it felt like it could have been done in a less sloppy way. Exceptions, of course, granted to our humble friend `if (!thing) { }` (I know it has its own shortcomings to be conscious of but it’s usually fine)
Nice article. I’ve heard the spread operator is still slow. Is this true, and if so, when does it become noticeable compared to other methods?
This can easily be done with a `NumberFinder`-class: ``` class NumberFinder { constructor(numbers) { this._numbers = numbers; } findIndexesForNumber(number) { const indexes = []; for (let i = 0; i &lt; this._numbers.length; i++) { if (this._numbers[i] === number) { indexes.push(i); } } return indexes; } getTheTwoFirstPositionsForAllNumbers() { const numbersWithIndexes = []; for (const number of this._numbers) { numbersWithIndexes.push( [ number, ...this.fillArrayWithInfinityUntilLength( this.findIndexesForNumber(number), 2 ), ], ); } console.log(numbersWithIndexes); return numbersWithIndexes; } fillArrayWithInfinityUntilLength(array, targetLength) { while (array.length &lt; targetLength) { array.push(Infinity); } return array; } getFirstDuplicateFromNumberArray() { const numbersAndTheirPositions = this.getTheTwoFirstPositionsForAllNumbers(); let smallestPosition = Infinity; let smallestPositionFirstIndex = Infinity; let smallestNumber = Infinity; for (const [number, index1, index2] of numbersAndTheirPositions) { if (smallestPosition &gt; index1 + index2 &amp;&amp; index1 &lt; smallestPositionFirstIndex) { smallestNumber = number; smallestPositionFirstIndex = index1; smallestPosition = index1 + index2; } } return smallestNumber; } } ``` You can use it like this: ``` const numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4]; const numberFinder = new NumberFinder(numberArray); const firstDuplicate = numberFinder.getFirstDuplicateFromNumberArray() ``` I hope this helps! 
I've revised the Planet Nine scenario so that it takes the orbital elements presented in Brown's and Batygin's latest paper into account. You can view it [here](https://thehappykoala.github.io/Harmony-of-the-Spheres/#/scenario/Planet%20Nine%20and%20the%20Detached%20Objects). A physicist has started making contributions to the code base and amongst other things he's added an integrator with a variable time step, the Runge Kutta Fehlberg integrator, and an integrator that is symplectic while allowing for very large time steps, namely the Position Enhanced Forest-Ruth-Like scheme. &amp;#x200B; In addition to that, you can now create new masses and add them to any simulation and specify their orbits with these orbital elements: semi-major axis, eccentricity, inclination and the argument of periapsis. There are also some new exoplanet scenarios, for anyone that might be interested. &amp;#x200B; Happy Saturday, folks!
&gt;And I learned the 'transitionend' event Cool!! I've learned about it in the javascript30 first video. It's a very useful event. &gt;It's in the Settings tab of your project on GitHub. That's what I was looking for. I've seen some projects hosted on github before. Thank you so much. &amp;#x200B;
Agree. I have tried to shed some on this in the conclusion section. &amp;#x200B;
What’s your editor setup? Colorscheme, etc?
Ah, admittedly I skimmed the examples. Glad to hear you speak on this.
Thanks. :) I also heard that it's bit slow but I think browser vendors are working on it. Here's the performance plan [https://docs.google.com/document/d/1EA9EbfnydAmmU\_lM8R\_uEMQ-U\_v4l9zulePSBkeYWmY/edit](https://docs.google.com/document/d/1EA9EbfnydAmmU_lM8R_uEMQ-U_v4l9zulePSBkeYWmY/edit) IME, I have not seen any performance glitch yet. May be that's because of babel-transpiling. In case, if I find any pertaining link/doc, I'll share it.
(y)
I use Fira Code fonts with ligature [https://github.com/tonsky/FiraCode](https://github.com/tonsky/FiraCode). The theme is Blackboard. The tool I used it Carbon [https://carbon.now.sh](https://carbon.now.sh) &amp;#x200B;
that's great in theory and all. but in practice, on the web, a lot of values get coerced to strings, so it's not really that straightforward. sometimes you have to deal with the fact that something that is represented as `35` in your database will be represented as `"35"` in your UI. Using strict equality will lead to subtle bugs in these kinds of situations.
&gt;what's the a.out file in the repo? I think it there when I was just trying to use git commands on terminal. Maybe it was created by VScode. I'm gonna remove it, I didn't saw it before, thanks :) &gt;I think these should be consistent Me too, I was trying to be consistent, but couldn't thought in a clean to do it. I'll improve it later on. &gt;You can use the key class instead. I was thinking about it as well, because, as you said, id's should be unique. &gt;You can use GitHub pages for free: [https://pages.github.com/](https://pages.github.com/) I'm gonna do it, thanks :) &gt;I think it's preferable to go to the little bit of effort of always adding a class first and styling that instead I agree with you on it as well. &gt;&lt;div id="key" class="key key--s key--d"&gt; Some people prefix with js\- js-key--d, for example, so it's obvious when looking at the HTML that the class is there to be used by JS, not to be styled by CSS. That's a much better way to make the code more readable, thank you so much. &gt;What if you could define the keys in the JS instead That's interesting, I'm try it out. &gt;And then write some code that loops through that and dynamically creates the HTML and audio tags for you on page load I think I don't know how I would do it. I'd appreciate if you could explain it in more detail. Thanks for the feedback really!! :)
Hi /u/welshwonder11, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MoronInGrey, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/uk_45, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ENx5vP, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/not-sological, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Cause its "hipster cool". After all, its JS.
Nice article. But using images to post code doesn't seem like a good idea.
I have a lot of 3D image/object/camera parameter settings this could be useful for.
A very medium article indeed. I especially like the way you present your code in the form of images of text, to make sure no one can easily steal your precious.
Glad to hear that :)
Thank. :) I have added a link of gist in the end. Next time I'll try to avoid them.
I would add "group by" using reduce function. I'm on my phone but you can find it on google - a real one line useful function. 
Great looking forward to it. Thank you 🤗
From stackoverflow: (xs, key) =&gt; xs.reduce( (rv, x) =&gt; (rv[x[key]] = rv[x[key]] || []).push(x) , {}); (I've just converted it to arrow functions - maybe I forgot some brackets) 
How on Earth does font ligature have anything to do with JavaScript in any imaginable way?????? 
including vim in a libvte based terminal natively?
Some info: I used CSS grid to recreate the album's cassette tape cover art, SVG animation with anime.js to 'play' the tape, and a paper folding plugin called oridomi.js to get the cassette cover to fold on its creases. The whole project was scaffolded with Vue Cli 3, and served via AWS' CloudFront.
&gt; Any font that's intended for programming that *runs together arbitrary sequences of characters* in a way that makes it difficult/impossible to tell They aren’t “arbitrary sequences” of characters at all, though. They are specifically chosen to make specific code sequences less ambiguous or otherwise easier to read at a glance. In my opinion, that is far more important than knowing how many characters there are in a particular sequences at a glance (which honestly seems like a pretty arbitrary criterion by which to judge a font “sub-optimal”).
Any framework is just a tool to express an idea, but it takes a bit of experience in working with different frameworks to actually see the commonalities for yourself. &amp;#x200B; For me personally I like React because it's very familiar coming from coding in AS3 for a bunch of years. It has a very Flex like approach, but I also tend to use React differently than jr devs on the team who tend to take a more "react" way in structuring their code. &amp;#x200B; Also comes down to how people learn how to code. A lot of modern devs learn through structured programs / bootcamps and they have a "right way" to do things in their mind. You tend to stick to the framework you know and be precious about it for the first bunch of years you write code, but after enough sleepless nights and joints to the face you realize shit doesn't matter, as long as the engineering concept behind it is strong, it should translate from framework to framework. &amp;#x200B; &amp;#x200B;
You've never had a situation where a value can be a positive integer, 0 or null (say, retrieving the count of some resource via an async computation), and you only care if it's an integer greater than zero? Trinary logic (true/false/null) is great for those kinds of situations (async values that also need a "pending" state), and loose equality is perfect for that kind of thing, rather than defining an entire other variable and complicating display logic just to hold the status of the request to populate the other variable.
Really cool. Thanks for sharing
I'll add it asap. Thanks for the suggestion. 
I am glad you like it !
I don't use vim but I have set FiraCode to native terminal. 
Just check my syntax before, I've typed it on my phone :) 
&gt;group Sure :)
You should check that the array you're trying to map has a length I think it was line 94 of your menu: ``items.children[this.state.selected].children.map(...)`` if you evaluate the array before the render method to something like `` const childItems = items.children[this.state.selected].children; `` then in 94 add a quick check that you're trying to map over something that contains something ``childItems.length &amp;&amp; childItems.map(...)`` 
That's a really nice start! Brings back memories...
Glad you liked my little game. The main reason to choose p5js was because of its simplicity and flexibility as compared to other libraries where I have to create models and environments. Maybe in the future when I am comfortable with them I might use them since they do come with prebuilt models. Regarding the bullets, that's the design so that players don't have a choice but to fire the bullets when they move... This way they are bound to break an asteroid and make things complicated for themselves. Also you are more than welcome to open an issue and work on the mobile interaction part as I am not entirely sure how to go about that... I'll definitely have to scratch my head a little figuring it out if I do it on my own. 
Oustanding! Really really well done.
You did an amazing job!
Crazy. Are the reels even spinning at different speeds?
it does the opposite lol
Anytime I’m messing with RegExp I have a browser tab open to [http://regex101.com](http://regex101.com)... it’s an incredibly helpful utility.
Font ligature per se? Nothing. Font ligature in code? Everything.
It's actually not at all difficult to tell the difference between a == and a === in firacode. I bet of you ran a test of someone who's used it for a day, and asked them to glance at code and tell you if it used double or triple they'd have a 100% success rate.
This is really well done and a breath of fresh air. I’d love to use this if it ever became a full library.
Go on
Don't get distracted by the noise. React is the industry standard at this point, maybe it's a bit different in China, but I'm not convinced really, as people who suggest that generally ask to take their word for it. although I do recognize some political / cultural reasons why that may be the case there. And I don't really see that changing. Even if React as a tool would be somewhat pushed to irrelevance or I don't know facebook dies, the new framework which will take it's place will be React-like just under a different name. Unless we experience major paradigm shift in terms of hardware which would offer new / better ways for users to engage with applications this will remain true. &amp;#x200B; As evidence for this I could point to few UI frameworks for WebAssembly like C# Blazor or Rusts Yew which borrows most of it from React patterns. Or Ionic which made their own WebComponent compiler called Stencil which shows moving away from Angular like structure to React like patterns. It also uses JSX. I mean I hope you get the point I'm trying to convey here. &amp;#x200B; I mean there is a lot of noise about Vue. And I suppose it's a good tool and I understand the appeal of it. It's a tool which is quite easy to learn and be really productive with. It's very intuitive for people who come from full-stack web framework backgrounds who are used to work with MVC with templating engines. And is quite powerful on it's own to accomplish most tasks in reasonably clean manner. However, easy to learn is not the only thing the bigger companies care about, I mean it can be major deciding factor at times but it's not as prevalent. Things like how the tool allows to scale your application and reuse / compose existing code is often paramount. And I would argue that React does it somewhat better. I mean, HOC's are seemless (just pass an argument into a function) thing which allows to compose functionality and the same thing in Vue is a bit more messy in comparison. It's important to note, that code reuse is not as important for freelancers who work with projects, meaning you work at a task for some client and ship the application which you when maintain occasionally, when compared how it's important with product based type of work, where continues integration, development and delivery is the modus operandi, when development never stops. &amp;#x200B; And there are a lot of freelancers who do that type of work. Which results in git hub stars or rather opinionated posts in reddits and so on. But despite github star votes or being opinionated on message boards... freelancers as such do not hold much sway in deciding there the industry is going really. In most cases, not all of course, and Vue is probably one of such exceptions, companies who deal with variety of problems and have resources to invest in research and development of engineering solutions are the ones who spearhead the change. And the rest adopt or reverse engineer those changes more to their needs. Not realizing this makes one easily swayed by rather pointless statistics like github stars. Especially for newbies or folk who never worked in organization which has more than 30+ developers on CI &amp; CD workflow. Some goes for laravel. Same goes for fad languages. Same goes for all those youtube videos which are "Learn blockchain with Go" which essentially are irrelevant in the big picture.
Forked!
But when I’m interviewing for a job and they ask me to dedupe an array on the whiteboard they’re not going to like _.uniq as an answer. It can be good to know the bare metal way to do things. 
If anything, for me, it looks clearer.
Any way to get the extension work in incognito mode? I can't seem to get that working
Thank you for sharing those cool libraries 
Damn this is fuckin sweet
Why?
Is reddit just a link dumping place now? 
I got bored last nightand was mocking some random person online when I realized that tYpInG LiKe THiS Is fUcKiNg AnNoYiNg. So I built [Sarcastify.](https://sarcastify.github.io/)
`Infinity` is too clever. Try this instead: const flatInfinity = arr =&gt; { while (true) { if (arr.some(item =&gt; Array.isArray(item))) { arr.forEach((item, index) =&gt; { if (Array.isArray(item)) { arr.splice(index, 1, ...item); } }); } else { return arr; } } }
You know you can just `require("https://cdn-images-1.medium.com/max/2600/1*Y2FfIZMchiawzRIS_Rfrcg.png")`, right? ^(That'd ^be ^a ^horrible ^future ^and ^an ^awesome ^joke ^package: ^importing ^code ^by ^detecting ^text ^in ^an ^image)
I created a fun project https://github.com/strdr4605/mockingcase. Collaborating on this project in open source helps me to understand more about software publication, releases, SemVer and best practice in developing a project in javascript! **Anyone that wants to start contributing to open source is free to join, so we can discuss new, funny, interesting features that can be added to this project or any project that is simple enough for beginners in open source!** 
That's really useful service
That seems like a very reasonable answer to me. 
Amazing!! Congrats!
JSC? That name is already taken. https://en.wikipedia.org/wiki/WebKit#JavaScriptCore
They probably wouldnt really love the n squared brute force one liner either though
Merge arrays. Why wouldn't you just do: `MergedArray = [...Array1, ...Array2];`
Personally I like the font (I use it myself), but I would probably not use it for screenshots intended for distribution. Too many people are gonna ask how to produce a triple bar equals, or WTH that even means. 
Try here: [https://vernode.com/hosting/nodejs-hosting/](https://vernode.com/hosting/nodejs-hosting/) 1 month free and it is a cheaper solution.
This improved a lot the way I manage my posts on the blog and also has increased the speed as now is lightning fast! They did an amazing job with this framework. I also host it on netlify - another amazing tool!
What would be a use case of needing to *copy* an object?
The problem was harder to understand than the solution. Honestly, these were the thoughts going through my mind as I read it.... &gt; the cake will have one candle for each year of her total age ... if your niece is turning 5 years old, and the cake will have 4 candles No. That's not how birthdays work. If she's turning 5, she gets 5 candles. &gt; 4 candles of height 3, 3, 1, 2, she will be able to blow out 2 candles successfully Why those heights? Is there some pattern or formula? &gt; birthdayCakeCandles has the following parameter: arr - an array of integers representing candle heights. Ooooh. I see now. All that stuff about birthdays and candles and heights didn't matter at all. The question is asking, given an array of numbers, count occurrences of the largest number. That's it. &gt; Third solution - the one-liner FYI to the author, 1 statement != 1 line.
Nice one-liners. I’m going to just import lodash functions :D
That works, but only for explicitly named arrays. What about the generalized case?
I don't know what the generalised case you're referring to? 😐 I'm sure that I am missing something. I am no expert but anytime I've needed to merge arrays, that's what I do.
Hi /u/aspic69, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; No. That's not how birthdays work. If she's turning 5, she gets 5 candles. True. It was a typo, thank you for pointing that out! &gt; Why those heights? Is there some pattern or formula? The challenge was coming from HackerRank so I copied their description. I agree that it might be confusing. &gt; FYI to the author, 1 statement != 1 line. Well the `one-liner` in this example is on multiple lines because of the prettier auto-formatting, and I also allowed it to be on multi lines as it's much more clear. But the end of the day you can have that code on one line if you want so it makes it a `one-liner`. 
If you need to modify an object but might need to restore part of it later, it'd be handy to have a backup.
There's something wrong with your architecture if you're straight up comparing DB and UI values. For the odd time these things happen, I still much prefer to go with strict equally and cast manually.
Pretty neat! 👏🏻
 const ocr = require('ocr') ; const img = await fetch('http://...png'); const code = ocr.parse(img); eval(code); Something like that? I'm pretty sure it would be possible. We only need someone to create a jsfiddle. 
You should try to build a JavaScript / Node frontend for LLVM. Its simplier to do JavaScript -&gt; LLVM IL insted of JavaScript -&gt; C++
Oh, I see. What if you want to merge a bunch of arrays? By the generalized case, I meant something that would work for any number of arrays including no arrays at all. Using OP's merge function \`const merge = (...arrays) =&gt; \[\].concat(...arrays)\`, you can merge \`\[\], \[1\], \[1,2\], \[1,2,3\], \[1,2,3,4\]\` without having to give a name to each array. What if you have 100 arrays? &amp;#x200B;
I seem to be missing the point. Is there any other than purely syntactic difference between the three options? This doesn't seem to improve upon the switch in any meaningful way. It is actually more code. I don't buy the "you get to name the methods" excuse. Having an extra name along the way is just gonna muddy the waters (what is the action named? jediCreateSuccess or addNewJedi? Congratulations, you now have two naming conventions instead of one.) &amp;#x200B; TBH I am all for super straightforward actions creators and reducers. Since I don't use TS, I don't even bother with the constants for action type keys, I just use strings with a rigid "naming" convention. Having the constants just adds more boilerplate to each action and symbol names are magic strings anyway in JS. If you make a typo, you are gonna find out during runtime either way.
Come on...You don't need a package for that. It's just like the \`is-odd\` one.
i know but im addicted to make npm packages rn, and why the heck not right? it’s good practice at least.
&gt;Incognito windows are treated specially. New Tab pages cannot be overridden in incognito windows. That's a quote from official documentation, so unfortunately I can't do anything about that. You can read more about it here: [https://developer.chrome.com/extensions/override](https://developer.chrome.com/extensions/override) Could you tell me is there a specific reason for wanting it in incognito or just curious? &amp;#x200B;
thank you!!!
works now. 
Tripple equals is three lines, double equals is two.
THAT'S DOLOMITE BABY!
So, as a Redux maintainer... I completely do _not_ see the point of trying to write reducers as classes. A reducer is a function. There shouldn't be any use of `this` inside. Therefore, it doesn't need to be defined as a class instance method. Some kind of a factory function, as recommended in the docs? Sure. Let me specifically address the points of concern about the `createReducer`-type approach: &gt;- In case of complex reducers we have to leave lots of comments describing what this reducer does and why. I don't see how this changes no matter where or how you define the reducer. &gt; - Huge reducer maps are hard to read. If this is truly a concern, then try defining the functions outside the lookup table. &gt; - Each reducer has only one corresponding action type. What if I want to run the same reducer for several actions? Then define the functions outside the lookup table, and associate them with multiple keys. Going a step further beyond this, our new [Redux Starter Kit package](https://redux-starter-kit.js.org/) has a [`createSlice` function](https://redux-starter-kit.js.org/api/createSlice) that will auto-generate action types and action creators for reducer functions that are passed in, and _also_ allows you to pass in reducers to handle action types that were defined elsewhere. Example: const counter = createSlice({ slice: 'counter', // slice is optional, and could be blank '' initialState: 0, reducers: { increment: state =&gt; state + 1, decrement: state =&gt; state - 1, multiply: (state, action) =&gt; state * action.payload } }) const user = createSlice({ slice: 'user', initialState: { name: '', age: 20 }, reducers: { setUserName: (state, action) =&gt; { state.name = action.payload // mutate the state all you want with immer } }, extraReducers: { [counter.actions.increment]: (state, action) =&gt; { state.age += 1 } } }) I'd encourage folks to try out Redux Starter Kit and see how much it can help simplify your Redux apps. 
Fain site! Doar cateva mici sugestii, sper ca nu te superi :D \- eu as inlocui "Don't trust me?" cu ceva mai pasiv gen "Testimonials"; chestie de priming, nu e chiar important \- un pic mai mare padding-ul stanga-dreapta, pare ingramadit \- un pic mai mare padding-ul de jos pe pagina de about, ar fi mai usor de citit \- cred ca titlurile de pe stanga de pe about ar fi mai ok sa fie aliniate in partea de sus cu cele din dreapta (align-items: flex-start in loc de center pt clasa row-middle-xs about-container) In rest e super, mult succes in continuare!
It is not a good practice to publish micro packages. That's why we ended up with frameworks having thousands of packages with at least half of them being one-liner. That's also what makes NPM's security easilly exploitable. Note that you are not obliged to publish your packages to use them with you project. You can keep them on your file system and use npm link.
Indeed lightning fast
`[...[], ...[1], ...[1, 2], ...[1, 2, 3], ...[1, 2, 3, 4]]` But more to the point, you’re not going to have an “unnamed” array. Literally anything you don’t write by hand is going to have a reference of some kind, and you can spread it, even if you need to wrap the spread in round brackets.
Seriously. This is 1 line of code. const sleep = async ms =&gt; new Promise(res =&gt; setTimeout(res, ms));
If you care about strict object equality, perhaps you should use an immutability library such as Immutable.js It won’t completely prevent duplicates instances, but it can greatly reduce the need for deep object equality checks.
Multumesc pentru feedback!! Apreciez!
Exactly...
Couldn't you just sort it and loop down until you have a different value from your initial? This can end pretty bad if everything is the same value but that's pretty easy to test for.
Just wondering; mainly because I've developed the habit of doing searches and research in incognito mode. Not the best habit, I know.
Well certainly not the best for research since none of your history is saved. Well depends on the research :P
I mainly developed the habit since my url bar history would end up with autofills for random stuff I searched previously. Since I end up relying on google to autocorrect, I end up having autofills for many misspelled things, which is why I ended up using incognito. That, and to keep my main working area and research windows separate. ¯\\\_(ツ)_/¯ Again, not the best thing to do. Perhaps I should just do research in a different browser entirely to solve this
I mainly developed the habit since my url bar history would end up with autofills for random stuff I searched previously. Since I end up relying on google to autocorrect, I end up having autofills for many misspelled things, which is why I ended up using incognito. That, and to keep my main working area and research windows separate. ¯\\\_(ツ)_/¯ Again, not the best thing to do. Perhaps I should just do research in a different browser entirely to solve this
Yes, that’s another solution I received from someone who have read the post. I might update it and add it! Thanks for your feedback! ☺️ Learning something new everyday!
Welp not really able to help you there. I use toby to save important stuff i find though. Think of it like bookmarks on steroids. Still not helping you with all the saved shit in search bar though. 
Indeed is annoying! 😂 But nice little app!
Fantastic job. I don't have much experience with SVG. Is the cassette made of individual parts and relatively positioned in a parent SVG? I love the easy resizing of it.
https://docs.npmjs.com/about-scopes Use scoping so you can avoid deliberate misspellings like sleyp.
I absolutely love `[...new Set(arr)]` for removing dupes from an array of primitives. That being said, if I was using it in a shared codebase, I'd be sure to add a comment explaining it as I don't think it's super clear at first glance.
Interesting, thanks for sharing that perspective.
I too can write unreadable JavaScript as one line. In fact I have built entire websites in one line of JavaScript! These are (mostly) unreadable messes that say “I’m smart and won’t be working here when shit breaks” 
This ☝️
You can probably remove the async from there since it’s returning a promise
The color one will not result in an even distribution of colors. Better to use 3 separate randoms.
It's better to add 0x100000 than to pad in order to keep the distribution more random. This causes a lack of red in colors under 0x100000
Late to the thread, but here's a bunch https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore
Problem with this solution is that any number under 0x100000 will have a lack of red. Very uneven distribution. Better two generate 3 random numbers, convert to string and concatenate.
Even shorter (but less optimized) solution than the ones in the article: (heights) =&gt; heights.sort().filter((h,i,a) =&gt; h === a[a.length-1]).length 
Neat, but... why? Babel natively supports typescript compilation with babel 7, no plugin required.
I'm using Babel 7 and disabling the plugin causes an exception. So I'd be interested in how the config is put together if that's the case. 
&gt;the fact it wasn't necessarily easy to tell whether it had two or three horizontal lines on a mobile screen kind of makes the same point in a different context... Yeah, that might be an issue that the minority of people have, it's not very difficult to see that there are 3 lines. Here's an example, &gt;ll &gt;lll Did you catch it? 
No problem, glad it helped. In terms of creating elements dynamically, you can use `document.createElement("&lt;tag&gt;")` to create an HTML element directly, then append it to an existing element via `appendChild`. A starting point is something like the below (assuming an empty `keys` div). This is a cut down version that doesn't match what you already have, and doesn't cover the audio tag, but it's a starting point. ``` const keysElement = document.querySelector(".keys"); keys.forEach(function (key) { // create a "p" element const pElement = document.createElement("p"); // add a "key" class pElement.classList.add("key"); // add the specific key class for each key ("js-key--x", etc) key.keys.forEach(function (keyName) { pElement.classList.add("js-key--" + keyName); }); // set the text of the paragraph to the name ("hihat", "snare", etc) pElement.textContent = key.name; // add it to the ".keys" div keysElement.appendChild(pElement); }); ``` Hopefully you can figure out the audio tag part by adapting that. Once that's all working, another thing you could think about is that once you're creating elements in this way, is it necessary to use querySelector to find elements by their class names on each click? You can add event listeners to specific elements with `addEventListener` in the loop, and you have the elements stored in variables right there, so maybe you can access them directly rather than querySelecting class names?
Wouldn't this cause an issue with distribution of colors doing it this way instead of using 3 randoms?
I like the idea of creating a map for the action types over a switch statement... that seems like a quick performance win on most complex reducers. Creating a class and using decorators, reflect metadata on the other hand -- this seems like some crazy overkill without much benefit. I'd have a hard time making heads or tails of what was going on if I found that in a PR.
I got into ligatures for Haskell and Elixir. So your argument is null and void. 
There is no mention, at all, of the acronym JSC in that link. Also, JSC != JavaScriptCore same as Java != JavaScript
It takes time to get familiarized with it, I’ll give you that. But IMO in the long run it enhances readability*. As has been stated already triple equals has three bars vs two for double equals. Very distiguishable. Also not equals has a line through making it stand out as well. There are some ligatures I’m not as much a fan of (like less equal and greater equal being angled). For symbol heavy languages like Haskell this is a massive boost in readability there given the symbols used. * there are some odd cases in languages where symbol combinations are nonstandard and fall apart with ligatures. 
can you provide a citation to back that up? It’s that i don’t believe you necessarily I’ve just been looking and i can’t find anything that claims that it’s not good practice to publish small npm modules.
and?
I didn't find this a convincing article at all - the original switch example is better in every way. "switch-case is O(n), kind of. It is not a solid argument by itself because Redux is not very performant anyway, but it makes my inner perfectionist mad." It really isn't worth worrying about the complexity of a switch statement in a reducer in any remotely real-world scenario. You caveat that but then make a bit of a mess by letting it influence you anyway. I think trying to be more critical of one's inner perfectionist (and I think 99% of programmers have one) is the way forward, not indulging it and whipping up several layers of abstraction to solve a problem that doesn't really exist. You've made life worse for any newcomer to this codebase, no matter how experienced in Redux, and for no apparent benefit. Sorry if this comes across as too blunt.
JSC is a common name for JavaScriptCore because that's what the project [calls itself](https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/jsc.cpp). If you have both installed you will end up with two binaries called `jsc` which will be problematic 
it's super cool that the ecosystems are learning from each other, and taking all the good stuff
&amp;#x200B;
No, but it's super easy to add that in. just install the airbnb eslint rules and add it to your .eslintrc.js
Here’s some research on the subject – https://arxiv.org/pdf/1709.04638.pdf
thank you so much! i’m excited to read it
Thanks! Inline SVG's mimic DOM elements. They have an top-level &lt;svg&gt;&lt;/svg&gt; element that contains child &lt;path&gt;&lt;/path&gt; or various &lt;[someshape]&gt;&lt;/[someshape]&gt; elements that can be queried just like any other element on the page. Great example here: https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes
Er. The triple equals has three lines. The double is twice as wide as it is high. The single is near-square.
Excellent. Just what I was looking for. Thanks.
Thanks for taking time to look at it! Yeah, good point, I've been wanting to add some sort of home page for a while. One idea was to make it a general 'interesting articles' page, with articles from all categories. The menu bar should only be on mobile and tablets, what's your screen size? 
dont use mongo, get a proper data structure, go back in time and kick the dev who chose prototyping over maturity
Website is dope man! Check out "Keep You Love". That song BANGS. Just so you know, the songs don't play in the order they are arranged on Bandcamp. Thanks for sharing!
Redux reducers require that you don't mutate so you have to copy objects
Relational database has a lot of value here...
&gt; Because we know that there is no easy solution to this Yes there is. Stop allowing package owner changes in the first place. If someone wants to stop work on their package, they can stop. If someone else wants to continue that work, they can fork.
And then when massive security vulnerabilities are found on unmaintained but still popular packages? Especially ones who gave control over the code to someone else but couldn't transfer the name?
I'm not sure MongoDB is the best solution for this problem, but here you can see how the MongoDB docs address a similar problem. [https://docs.mongodb.com/ecosystem/use-cases/inventory-management/](https://docs.mongodb.com/ecosystem/use-cases/inventory-management/)
Hi! We are Clay and Dzmitry, and we built https://www.dropconfig.com DropConfig is a version-control and hosting for configuration-files. Our goal was to liberate constants from the code and let them live their own separate lives. DropConfig does that and requires no new infrastructure and no new dependencies in your code. After working on many projects over the years, we noticed that every time we hand the project off, we reinvent a super-simple "back office" UI allowing users to change some aspects of application "on-the-fly". For example: - language-translation files - web-widgets settings (IDs, colors etc) - temporary banners ("down for maintenance", "new release" announcements) - CSS rules After talking to our friends we realized that other developers run into the same problem all the time. DropConfig is for all cases where you have a JSON configuration file, which is updated more often than you are comfortable making app-releases. Think of it as something between Firebase and Github: immediate availability of Firebase yet change-audit and access-permissions of Github. Plus speed and reliability of CDN.
&gt; And then when massive security vulnerabilities are found on unmaintained but still popular packages? Still preferable to transferring trust the way the current system allows, and can be handled the way every other distribution channel that *doesn't* allow this sort of transfer handles it. &gt; Especially ones who gave control over the code to someone else Don't do this either, obviously. Individually maintained FOSS projects have been using the forking approach for decades. It works.
&gt; But the ultimate goal is to use Typescript types to produce function- or block-level unboxed versions -- perhaps using a toggle in code to specify safety à la Common Lisp. How do you plan to handle the unsoundness in TypeScript's type system?
You could wrap it in a function spelling it out maybe?
I’m curious what made you give up on the Rust refactor? I have been working on a set of crates ([ress](https://github.com/freemasen/ress), [ressa](https://github.com/freemasen/ressa)) for parsing with JS that go further than esprit and have been thinking about starting a JS to IL (maybe crane lift) project. Was there something inherent to Rust that made you choose a different direction?
Totally could. Personal preference, I'm not a fan of single line functions, but yeah, you totally could make a removeDupes function. 
Riffing a bit on the usage of Math.max(), I think you can do something like so: `arr.sort();` `arr.length - arr.indexOf(Math.max(...arr))` &amp;#x200B;
Why not have it as a Set to being with instead of an array? If it’s the way that the data returns from the server, then dedupe there?
I use glyphs all the time. But I agree with you on one level - folks should just make gists to save the confusion.
Write readable code. Not attractive code. If so, then might as well put some emojis in it.
I didn’t interpret it this way. In my mind, attractiveness is a facet of readability. But I’m sure not everyone would agree haha
The second method might have very minor issues, but the first is always uniformly distributed. Each of the 24 bits should have equal chance of being 0 or 1, because if you had to pad the 0s, it means the 24 bit integer actually did have 0s at the start.
&gt; @lodash46/lodash No don't use that one. I prefer `super-lodash-ii-special-turbo-hyper-fighting-champion-edition-viii`
Really it depends on how uniform the pseudorandom number generator is. For all intents and purposes it's the same, but technically speaking 3 random numbers will be a far more accurate distribution than using one.
Is this statically hosted? and if so, how does your contact form send outbound emails?
I linked to that paragraph because it explains what JavaScriptCore is. That JSC is commonly used to refer to JavaScriptCore can be confirmed by a quick google search.
His full example is [here](https://github.com/stalniy/casl-react-example/tree/master/). In particular you can find what you need in the [code in question](https://github.com/stalniy/casl-react-example/blob/master/src/config/ability.js#L11) -`src/config/ability.js`- in line 11, and in [here](https://github.com/stalniy/casl-react-example/blob/master/src/services/todo-storage.js#L9) -`src/services/todo-storage.js`- in line 9. In `config/ability.js` in function `subjectName`, as is explained in the article, he looks for a particular property `__type` that should represent the type of the entity. Yes, this `subjectName` function is what he passes to the CASL `define` call as "this is the function that knows how to identify the types of a thing". What the article does not show is that the entities he will be checking are the ones returned by `services/todo-storage.js`, which you can see he is using in the [`TodoList`](https://github.com/stalniy/casl-react-example/blob/master/src/components/TodoList.js#L9) component. One note, though: _This is particular to the way he has decided to do it_. That is, you do _not_ need to name your property `__type`. In some cases you don't even need such a property. If you can identify confidently the types of the entities you are going to check by other means (say, by looking at a `.constructor` property, or a `.name` property you already have, or by any other means. (As mentioned, too, by default the original library checks properties `.constructor.modelName` -I guess because this is what [redux-orm uses](https://redux.js.org/recipes/structuring-reducers/updating-normalized-data#redux-orm)- or `.constructor.name` -because that's the standard, language's own way, to find the class name of an object built with `new`-.)
[https://github.com/vitkarpov/fast-xml-parser](https://github.com/vitkarpov/fast-xml-parser) Hey there! I'm a front-end developer "making something for fun in TypeScript", and here's my "blazing fast" (no performance tests yet 😂, aiming to comply [https://github.com/AndreasMadsen/htmlparser-benchmark](https://github.com/AndreasMadsen/htmlparser-benchmark) tests), with zero dependencies, XML parser in TypeScript. Any feedback is welcome 🤗; you can: \- point a direction or similar projects, where this could be useful, etc \- say that "the code is horrible, man, you should look at project X" \- say that "I ❤ TypeScript as well and want to participate" and we'll be collaborating and learn together 😊 Also, I'd like to think about this pet project as a public resume / showcase of the development approach. Open source on GitHub shows kind of project "management and maintaining" skills (issues, PRs, readme, docs, tests, linters, etc).
Yes, it is statically hosted. Netlify provides [form handling](https://www.netlify.com/docs/form-handling/) which is great! :)
I remember seeing something similiar a few months ago, the performance was not good at all, but interesting approach anyway. NW.js has some sort of AOT compilation too - V8 seems to allow saving the generated bytecode and later run it without having to do the parsing of the module again. NW advertises this as source code protection, which is definitely a neat thing! 
Check this too: [https://www.techrepublic.com/article/why-its-finally-time-for-developers-to-address-the-chaos-of-node-js-and-npm/](https://www.techrepublic.com/article/why-its-finally-time-for-developers-to-address-the-chaos-of-node-js-and-npm/) [https://medium.com/commitlog/the-internet-is-at-the-mercy-of-a-handful-of-people-73fac4bc5068](https://medium.com/commitlog/the-internet-is-at-the-mercy-of-a-handful-of-people-73fac4bc5068) [https://www.reddit.com/r/programming/comments/886zji/why\_has\_there\_been\_nearly\_3\_million\_installs\_of/](https://www.reddit.com/r/programming/comments/886zji/why_has_there_been_nearly_3_million_installs_of/) &amp;#x200B; &amp;#x200B;
Maybe it should be a combination of them both. Like when package ownership is transferred, there is a special naming convention that the repo gets automatically renamed, but npm has knowledge that they’re connected. So then when you do an update you get something like “The ownership of loadash has changed, &lt;here is a link to a page of text written by the old author detailing the handover&gt;, &lt;here is a link to the new authors work and some stuff you can judge their reputation by&gt;. y/n to update to the new package” 
Do you use netlify CMS?
No. I hose my files in a Github repo.
Why do you have a quote written by yoursrlf in your testimonials? 
Which one?
There's a library based on the idea - [reducer-class](https://github.com/keenondrums/reducer-class). What additional features to do you miss?
I use nodejs for prototyping projects just to get the clients excited. Then translate to something mature like say maybe java. 
It works when you have eslint take care of complaining about double equals. Still, I tried a few times and always quickly went back to Consolas, which does not have ligature support.
Even with same maintainer there isn't any guarantee that next minor (even bugfix) version is harmless.
Does that actually do anything for you? I realized a long time ago that "bookmarking" for me means "put away an forget forever".
That’s true, but typically you don’t see a lot of well-constructed, well-maintained, genuinely useful libraries developed by people whose underlying intent is to do harm to other developers. I’m sure some malicious code exists in a few packages out there. But it seems intuitive that the higher-profile the package, and the longer the tenure of the maintainers, the less likely it is that those maintainers are secretly trying to do harm. That said, incompetence is a security risk in itself, and nobody can 100% guard against that either.
Now that I have something to npm install not a whole lot. One thing that would be nice in the future would be to move away from pure functions. The guys over at redux are already starting to admit that pure functions have their downfalls and have implemented impure functions (although in a predictably half baked manner). The way I would invision it working is you would mutate this.state and then the main reducer function in the library would clone this.state and return it to redux. This is very similar to how the redux team themselves have implemented it. The difference between this and what they have done is it doesn’t depend on a pass by a reference hack. Instead it works with the “this” keyword which is well established and easily understood. To start with it could be switched on via a flag (maybe in the action decorator).
First of all, thank you for devoting your time to provide your feedback and for maintaning redux! &gt; A reducer is a pure function. There shouldn't be any use of this inside. Therefore, it doesn't need to be defined as a class instance method. Why? What if I want to have some private methods that have some common logic? Then I would be able to easily subclass the reducer and replace these private methods to alter the behavior. ```ts class Reducer { @Action(Action1) doSomething1(state, action) { const newState = this._doCommonStuff1(state, action) // do something else with `newState` return newState } @Action(Action2) doSomething2(state, action) { const newState = this._doCommonStuff1(state, action) // do something else with `newState` return newState } protected _doCommonStuff1(state, action) { // do some common stuff return newState } } class Reducer1 extends Reducer { protected _doCommonStuff1(state, action) { // do some common stuff differently return newState } } class Reducer2 extends Reducer { protected _doCommonStuff1(state, action) { // do some common stuff differently in other way return newState } } ``` Generally speaking, I do not see why you want to limit developer's freedom. Yes, reducers MUST be pure, but why do you want to put any other constraints? Engineers are usually smart guys, just give them some basic borders within which they should play and they'll figure out the rest. &gt; I don't see how this changes no matter where or how you define the reducer. Methods have names, which sometimes is enough meta-information to figure out what's going on under the hood. &gt; Then define the functions outside the lookup table, and associate them with multiple keys. That's what I used to do. Let's try to compare the code. With reducer map: ```ts const reducer1 = () =&gt; { /* Do stuff */ } const reducer2 = () =&gt; { /* Do stuff */ } const reducer = createReducer(initialState, { [Action1]: reducer1, [Action2]: reducer1, [Action3]: reducer1, [Action4]: reducer1, [Action5]: reducer2, [Action6]: reducer2, [Action7]: reducer2, }) ``` With clases: ```ts const reducer1 = () =&gt; { /* Do stuff */ } const reducer2 = () =&gt; { /* Do stuff */ } class Reducer { initialState = initialState @Action(Action1, Action2, Action3, Action4) reducer1() { /* Do stuff */ } @Action(Action5, Action6, Action7) reducer2() { /* Do stuff */ } }) ``` IMHO, it classes are kind of cleaner, more declarative. We do not have to jump between the map itself and reducer definition, all methods are written inline. Another advantage is that we can use type reflection with classes and decorators: ```ts class Reducer { // @Action here uses reflected type of `action` argument @Action reducer1(state: IState, action: Action1) {} } ``` While with maps we have weaker types as there's no direct connection between a key of the map and action's type: ```ts const reducer = createReducer({ // I can put Action2 here without any compilation error and get myself a bug [Action1]: (state: IState, action: Action1) {} }) ``` Let me conclude with this, I'm not saying that class-based reducers is a silver bullet that everyone should use. Its only solid benefit comparing to reducer maps is type reflection (though [unionize](https://github.com/pelotom/unionize) seems to solve it in its own way), while readability is quite subjective. IMHO, readability is much better and I truly enjoy writing reducers as classes, but you can see it differently as convenience means different things for everyone. That's why we drive different cars of different colors, right? Another things is stricter typings of [reducer-class](https://github.com/keenondrums/reducer-class): I mean different method signatures for ones with immer and ones without it. Yet again it's subjective. Anyway I'm just trying to suggest an alternative. It might feel more natural to Angular guys though. All I'm saying here is that we should not label things and abandon classes because redux is functional-ish. Any instrument can be used in many different ways to achieve the same goal - maintainable, robust and performant applications.
I shop for vegetables at the grocery store.
I've only done one Andrew Mead course but I wouldn't recommend him to anyone, actually. It was an xtremely tedious course. The 30-something hour course takes at least a month or two to finish. You can finish the course and have a working project that you have no idea how to do on your own quite easily. There's a million dependencies. He may have covered "everything from the ground up" as someone else here said, but he did it in a way that was actually incredibly confusing since he is constantly teaching you one way to do something and then deleting all of that and doing it over again. He does this over and over again for each section, but what's worse is that even the code you thought you finalized in the previous chapter gets cannibalized and altered over and over in the subsequent courses. The Jest testing was so disgustingly painful I wanted to puke. And when you're finally done with that section, Jest keeps coming back in all the later section since he keeps re-doing the code and so he has to go back and alter the Jest cases, too. Over and over and over, you keep changing the code to introduce a new dependency to solve some new issue. Why he didn't just start off with a working code done right is beyond me. You don't style the app until the very end of the course, so for 1-2 months you're just destroying and rebuilding an app that looks like shit and is only in partial half-finished stages of development. 
reducer-class is integrated with immer out-of-the-box. It's exactly what you want, but close. Take a look at this section of readme https://github.com/keenondrums/reducer-class/blob/master/README.md#integration-with-immer
Looks good, i'll have go at using it over this weekend. Thank your pointing me in the right direction.
Sweet! I'm working on a similar game, which I've named "Dinosaurs With ICBM:s", where you take charge of a hypothetical dinosaur nuclear aresenal with the aim of stopping the asteroid that wiped them out and in doing so rewrite the history of our planet... Sounds rather epic, but it's the lamest game ever, and I'm using my voice to record the sounds that are played when a missile is fired or an asteroid explodes. 
Please is a newly created forum let grow it together thanks
How did you get a job from the Mead course? It is refreshing to hear you say this and also say you still don't know how to work with Jest. For me, Mead's course started out strong, but by the end I felt like I couldn't build this simple app by myself if I tried because he used so many dependencies and didn't explain them very well and he also kept deleting code and doing it over a different way. Did someone hire you based on the final app? Do you actually know what the hell you're doing at your current job as far as React and Redux go? At your job do they use as many dependencies as Andrew Mead does for their projects?
This is what I find disturbing about modern js workflow in general. Mead's course has so many dependencies. Before this, I took Wes Bos's NodeJS course which has so many dependencies. That shit breaks. It is an extremely precarious way to work.
[removed]
Somehow I immediately thought someone was trying to make a point that Ember is better than React.
Why's that?
Seems tangential to me? Neither Common Lisp's nor Cython's type systems are sound for example Both allow compiler directives at the expression level to dial between safety vs efficiency.
You may be referring to my first post on the subject. The first pass was really bad, but it worked. :) I'm more familiar with [zeit/pkg](https://github.com/zeit/pkg) than NW.js but it sounds like they do similar things. pkg compiles source into bytecode and injects it into a node binary (and modifies the bytecode entrypoint within the binary) so you can pass around a single binary that contains your whole program. I used that at work to deploy a project for a year and it worked really well!
Mostly just lack of inertia over time. It was taking me longer and longer to refactor the way I wanted and I just wanted to make progress. It was much easier to switch back to the language I'm most familiar with.
At this point, I don't aspire to do anything/name anything unique. ;) But I'm not opposed to other names.
There are tons of different projects folks could start from this! I haven't written LLVM IR before (though it definitely sounds more sane than emitting strings of C++). And for that matter I could have targeted a C++ AST instead of strings. But this was the simplest approach to get things working for me right now where the bigger hurdle is just understanding V8 internals and Javascript itself well enough to compile a program correctly. :) &amp;#x200B; I've got a series of Lisp -&gt; Assembly blog posts though and I'm thinking of moving that project/those posts to LLVM backend to get some experience there on a smaller scale.
&gt; Haskell and Elixir Ah well, see!
I just had flashbacks to `mysqli_real_escape_string()` *^(shudder...)*
Hi /u/Suhas010, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
But how does that work when it's a company that manages the package? Do they need to change the author every time someone is added to the team? Or does this limit who can release the package? I'm a bigger fan of using signing keys, and alerting when they change, with the expectation that if you transfer to someone else you make them generate new keys (and follow a warning like you have), but if you are working as part of a team, you can keep the same keys in play for a long time. But then at that point you are basically reinventing the web of trust, which comes with its own set of issues (massive complexity, very little tolerance for mistakes, and difficult to use safely).
But the successful projects that grow beyond one person do so by transferring ownership at least in part. The person that started PosgreSQL isn't the same one making releases today. Even the Linux kernel has a system in place for this in case Linus ever gets hit by a bus or something. But I'd love to hear of some examples of package managers or really anything that doesn't allow transferring of ownership because as far as I know they all do.
Yeah, the specifics of "what is an author" with regards to groups of people vs individuals comes with it's own web of issues, but I think a warning when the author changes (whatever "author changes" is defined to be" is probably a good middle ground.
You don't need Babel for TS to JS conversion. There's already the typescript compiler. [https://www.typescriptlang.org/docs/handbook/compiler-options.html](https://www.typescriptlang.org/docs/handbook/compiler-options.html) 
&gt; The guys over at redux are already starting to admit that pure functions have their downfalls and have implemented impure functions (although in a predictably half baked manner). I assume you're referring to Redux Starter Kit's use of Immer internally in `createReducer`? I totally disagree that we are "admitting that pure functions have their downfalls". Reducers should still be pure functions with no visible side effects. I'll say that the definition of "pure function" can be kinda fuzzy sometimes. There was [a recent Twitter survey about whether various example functions were "pure" or not](https://twitter.com/radokirov/status/1097325661658570752), and it was interesting to see the variation in responses. In the case of RSK's `createReducer` and Immer, the individual case reducer functions are not strictly pure as written, but the larger function returned from `createReducer` is. I'm also not sure what you mean by "a pass by reference hack". Are you referring to Immer's `draft` Proxy argument?
Ok, now I can see how I could create those html elements. Huge thanks!
Hi /u/iRelevant_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
There's little point including a further dependency when you can do it in a one-liner. `const isEmptyObj = obj =&gt; Object.entries(obj).length === 0`
``` Object.keys(obj).length === 0; ```
A two line function shouldn't be a standalone library ... Also, if it's all the package does, at least don't make the function more verbose than it needs to be: const isEmptyObj = obj =&gt; return Object.entries(obj).length === 0; Does the same thing, no need for the if. Could probably also use Object.keys since the function doesn't care about the contents of the object either way, and you support pre-ES2017 this way ...
You seem like a very un-opinionated person and I'd love to use your dotfiles. 
You're not going to want to hear this, but it was mostly dumb luck. I got laid off and at the exact same time another company in the area was looking for front end. During the interview I did not lie about my experience, they asked for a working sample of code which I was able to provide via Github, and a bug occurred in their demonstration of their product so I went "let me start documenting what is occurring, because I'm already part of the team mode". Also because of the nature of the business I needed good credit. If I didn't study like crazy I wouldn't have gotten lucky.
Please post this on April 1.
I'm a fan of https://regexr.com/ personally, but I may have to make the switch for my day to day regex needs.
Question for you all, how much of you consider and spend time on accessibility and keyboard navigation for your SPAs? I know it’s very important but i feel most of the time it’s neglected in actually web apps and mainly the focus of the market and e-commerce web sites out there. I work on a very large banking app that is a SPA and we spend a significant amount of time adding and maintaining accessibility. I always felt we were out of the norm from the majority of web apps that are behind authentication.
For us at Scribd we spend a good chunk of time on accessibility. We rarely estimate project effort without considering it. :)
See what? Are you saying that Haskell and Elixir are just JavaScript? Or are you lashing out due to not having fully grasped any of the three languages so your first choice is to insult anyone who can?
Hi /u/RespectableCafe, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/staywellhyrdrated, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FlorinPop17, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dwalsh01, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Alpub, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/branflake2267, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wheresvic, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Maybe calling it a hack was overly harsh however IMO it’s the completely wrong way to implement it. The reason for calling it a hack is because it depends of the JS engines passing objects by reference, rather than the defined behaviour of either using return or using the this keyword. Which one is easier to reason about? A proxy object being passed by reference, then taking your mutations and transforming them somehow to mutate the actual state or mutating a class value? It’s okay to have state inside of the state management layer. As for using pure functions, If the goal is to mutate state would it not make more sense to do it directly? You would still get the predictability and observability of actions. Redux would still call the function in a predictable manner and the pass the state back to any subscribers. The only difference would be instead of the “pure” function returning a value and redux mutating the state you would do would it inside the function. 
I apologize for posting content that's not related to your group. But I would suggest adding your comments above to the javascript rules. In particular, #3. As my request was not related to a help request, but showing a configuration example of how it could be done. But I can see your point. I would suggest adding your comments above to the the rules to help make it obvious to future posters. 
I agree. I read it as attractiveness coming from the readability and consistency.
All of my production sites run on one line as well. Not trying to be a dick, haha. Nice article.
Haha, good one! Thanks! ☺️
I'm aware of the compiler. But in this example I wanted to show how to execute the compiler using Babel.transform.
This is ironic, isn't it?
 let o = { [Symbol()]: 5 }; console.log(Object.entries(o).length); // 0 console.log(Object.getOwnPropertySymbols(o).length); // 1 I'm not sure if I'd consider that object to be empty.
If you use strings without creating constants for them it's likely that at some point you'll update this string at one place but forget to update in the other one. Usually, duplication is evil. Especially if we're talking big teams. I'm glad it works for you, but I'm hesitant to admit that it's going to work for the others. 
A good tip is to look at the test cases (if any) and see what they do and why, this often gives a broad overview of what functions the code can/must do
&gt; If the goal is to mutate state would it not make more sense to do it directly? Because the goal is to _not_ actually mutate the original state. That breaks things like time-travel debugging. We still want to update the state immutably. There's many ways to do that, ranging from [nested spread operators](https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns) to [dozens of immutable update libraries with varying syntaxes](https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutable-update-utilities). Immer just happens to let us write immutable updates with the most concise and readable syntax, with the tradeoff being that you need to understand there's at least one level of "magic" going on under the hood to make that work. Beyond that, I'm really not sure what your specific concerns are with "passing things by reference". Can you give some examples?
Any reason you're using match over includes?
Quite the contrary, be blunt! Criticism and open dialog with arguments is the key to find the truth, if not absolute, then at least for the time being. I would say that my biggest argument is readability. I think matching reducer functions and corresponding actions with decorators is somewhat declarative and IMHO very readable, therefore maintainable. A bonus would be out-of-the-box integration with immer. As to switch-cases, I do not like that I have to rely on my linter to never forget `break`, I do not like that I have to return original state in `default`, I do not like huge union types for `action` argument of the reducer. I'm not saying that all these arguments are rock-solid and you must not use switch-case, they're opinionated and everyone should decide for themselves if they resonate with their inner feeling of how to cook redux. Abstractions like [reducer-class](https://github.com/keenondrums/reducer-class), [redux-create-reducer](https://github.com/kolodny/redux-create-reducer) and others are usually pretty simple, so it should not take much for any newcomer to read the docs and the code if necessary and figure out what's going on.
No reason really, I'll probably change it to use **includes**. Would that be more efficient to begin with?
This is a really well wrote post. Keep it up :)
If you really want efficiency, I believe index of is the best going so far. For 200 elements though it won't really be an issue. Searching types could be more of an issue, since you're then having to search an array inside an array. Unless your types array is large however, it once again shouldn't be that much of an issue. I'd always pick readability over efficiency unless the specific task requires efficiency. The timings will be negligible at this size of an array, so it's up to your personal preference.
Thanks so much! I'm glad you enjoyed it.
the 3rd solution makes me want to pull my eyes out
Interesting, but please don’t! 😂
For us lots of jobs require it and the client will often have an accessibility consultant auditing the app. It's not often "just adhere to best practices" kind of thing either - we have needed to accommodate specific (broken) screen-readers and screen reader/browser combos. I've also seen that not everything is objectively right or wrong; opinions on what is more "accessible" can vary. My strategy is to try to redirect design and accessibility people at each other rather than through you (the developer.) People with expertise building accessible HTML - along with being skilled at using screen readers and diagnosing issues with them - are really valuable.
Thank you for the information. If I add the write-up, would you add the post back or...?
Could u please share more info on accessibility part of your SPA. We are beginning to build SPA and I am trying to understand how this fits in.
Are there any tools which do reliable project-wide symbol renames? I haven't had good experience doing this in VS Code. Hence, I percieve renaming of the constants to be pretty much the same as changing a magic string. This string appears in precisely two places too - the action creator and the corresponding reducer (at least that's what happens in my code). I've never worked on anything Redux in a team tho, so that might change my perspective.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/angularjs] [Check this](https://www.reddit.com/r/angularjs/comments/awwhq3/check_this/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Thanks, it's good to hear dumb luck stories, actually. I just don't really understand what these last two sentences mean... &gt; Also because of the nature of the business I needed good credit. If I didn't study like crazy I wouldn't have gotten lucky. By good credit do you mean acting like you're already part of the team? By the "study like crazy" comment do you mean it just prepared to to feel like you could help solving their bugs? Or it helped you start working there without being *completely* over your head?
Thanks
Make stop the quote timer when ontouchdown and mousehover. Some of the quotes are too long to read in the time.
Thank you for the feedback. I’ll consider it! 🙏
Hi /u/drivecoder, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
We're in the process of standardizing focus designations and adding them to our design system. We build all of our components with keyboard navigation in mind, and spend time on every feature fixing UX for non visual users
We are actually still in early enough stages that shifting to something else is possible. Could you please suggest which proper data structure would be better? &amp;#x200B; &amp;#x200B;
You can also test the speed by generating mock data and doing the filtering for say 100k elements. It isn't hard to do and hard numbers are always hard numbers!
honestly it’s had to really pin down what “accessible” means. High Contrast, large font, key board accessible, screen reader accessible are all buckets in of their own with their own solutions. SPAs struggle because many of the conventions the web was traditionally built with that had accessibility out of the box or had first class JAWs support are not at play. Managing focus is probably one of the more difficult aspects as you translation from one “page” to another. Many SPA libraries have afonso that help to manage this. Sticking to semantic HTML will also go a long way as well as managing tab indices. Also aria attributes will declaratively fill in the missing pieces of the standard conventions based pieces. I am absolutely the least knowledgeable on our team of accessible web apps. We have people who are absolute bosses with it and regularly live in that world. As one other comment or said, people who are well versed in the details of accessible web apps are very valuable team members.
We aren't fully committed to mongo yet. Why would a relational database be better? Wouldn't a NoSQL(document) be better at handling this kind of unstructured data?
Thank you for your feedback
&gt;We aren't fully committed to mongo yet. Why would a relational database be better? Wouldn't a NoSQL(document) be better at handling this kind of unstructured data? NoSQL would be good if you only care about what Bob ordered or Alice orderd, but if you want to see orders where more then one cheese was bought at once than a SQL structure would be great for this. &amp;#x200B; You could have an orders\_items table where there is an orders\_id, and an items\_id thus allowing you to have an infinite amount of different types of products added to the orders, but you're still able to slice and dice data anyway you want because of the relationship ids.
Only reason my company recently started caring about accessibility is b/c we work in healthcare industry and one of our clients threatened to drop us if we didn't add support... It caused basically an entire refactor of our app which sucked in some ways, but it also allowed us to refactor and update a ton of stuff which was nice.
I usually take the following approach: &amp;#x200B; 1. Has someone else already done the hard work for me? My search keyword then is usually "&lt;framework/library name&gt; internals" or "build your own &lt;framework/library". I used this to learn about AngularJS via the book "Build your own AngularJS" and VueJs via the "Vue Mastery" course. 2. If you need to go down the rabbit hole yourself, try reading documentation and unit tests first. This will give you a good based to actually start reading the source code. 3. Just reading the source code will be very difficult to follow for asynchronous language like JavaScript. I usually use Chrome devtools debugger to understand how the application flows. This is the most arduous path to learning how a framework/library works and indeed requires a lots of debugging passes and patience. 
Hi /u/gggfff1, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
yeah we were in the same boat. Lesson learned was accessibility is easier to do upfront instead of back filling after an app is built.
There is nothing ironic. Framework wars generally refer to people making noise in various channels about certain tools they like trying to convince someone of something. I don't care to convince anyone of anything. Just sharing my experience and trying to shed some light how those load noises are being produced. And generally not to pay much attention to it. If I stepped on someones sensibilities who have that special relation with some tools, so be it. I don't really care what they think. Ultimately what they think is irrelevant anyway.
Thanks. What can i use to output the speed? Currently using react native.
&gt;Because the goal is to *not* actually mutate the original state. That's an outright lie, if you look in the redux source code you can see clearly that it mutates the original state: [https://github.com/reduxjs/redux/blob/792ac5ae541a7c0792908df8f4e2da334184e74f/src/createStore.js#L204](https://github.com/reduxjs/redux/blob/792ac5ae541a7c0792908df8f4e2da334184e74f/src/createStore.js#L204) It takes the current state and replaces it (mutates the variable "currentState"). &amp;#x200B; &gt;Immer just happens to let us write immutable updates with the most concise and readable syntax This is rather subjective. A parameter is passed into the function and then mutated, its in no way obvious where this comes from or where it is next used. &amp;#x200B; &gt;I'm really not sure what your specific concerns are with "passing things by reference". This is a bit like asking "I'm really not sure what your specific concerns are with "using global variables"." its self evident that you shouldn't base a framework around JS engine language implementations that the user has no control over. The user doesn't pass it by reference it is done by the engine. To put it into context it would be like exporting your redux store from a es6 module and using the fact that es6 modules are created once and cached to dispatch updates. &amp;#x200B;
*sigh* No. The Redux store _replaces_ the value of `state` internally. In that sense, the "store object" could be considered mutated. However, in correct Redux usage, the object _pointed to_ by `state` **should not be mutated*. These are not at all the same thing. You seem to have a serious misunderstanding of what this actually means, and it's not worth my time to keep arguing this further.
postgres for regularized data, with jsonb for arbitrary data columns. look into postgraphile for a straightforward and free graphql api
1. Fetch data via with ajax request. And save it to an array. 2. Build a card for each result. 3. append each card to the DOM. 
Hi /u/danielfalonipe, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
But have you seen husky? https://www.npmjs.com/package/husky
I made a UI with Election for the awesome JSON Server UI project. Allows you to setup a mock server in seconds. If you're going to try out the electron app I would not download the distributable since it's about \~200mb (still trying to figure out why). I would just clone the repo and run \`yarn &amp;&amp; yarn start\` &amp;#x200B; [https://github.com/mackness/JSON-Server-UI](https://github.com/mackness/JSON-Server-UI)
Note that that doesn't count entries with symbols as key
As a developer in an out sourcing/projects company, when the project is an "indoor" project of a company the accessibility level is not high (we do try to write accessible code but no one checks it). But for projects that are for regular users there is an AA level of accessibility. 
As a developer in an out sourcing/projects company, when the project is an "indoor" project of a company the accessibility level is not high (we do try to write accessible code but no one checks it). But for projects that are for regular users there is an AA level of accessibility. 
Great app idea! Simple, yet effective.
This was a really helpful write up! I haven’t written enough React to be familiar with subtleties like this so detailed posts are really helpful
I thought this was a question from a newbie and was about to write a detailed reply so I'm sure glad I glanced at the username first.
How much is pocket money in the programmer world?
I am teaching a class to beginners right now and how I’d describe function components vs classes is function components _cant_ use ‘this’, which removes a lot of confusion. My class is very confused every time they need to use ‘this’ and I actively avoid it until they have a better basis in programming 
To clarify, I know about the difference. (I wrote this article and I work on React.) The article is more about the subtler aspects of different programming models with classes and functions in React that’s often overlooked. 
Oh I know who you are, I was just tossing in my opinion :) thanks man
Microsoft made it. Just like when were reading recipes from Company A. They would include their own products although a substitute would suffice
Ah for sure! That can be a good way to explain it.
Since the plugin use hash routing to control what to show, you'll need to animate the scrolling yourself. &amp;#x200B; First, you'll need to change the way the menu items work. By using '#' inside href, the url will always change no matter what. You can use `href="javascript:void(0)"` to keep the `a` tag styling and do nothing on click. &amp;#x200B; Second, you'll need to recreate the scrolling effect. You'll need to attach a click event on each items. You can use [data-attribute](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes) to define where the link should point to. This will look something like this `data-href='#about'`. &amp;#x200B; Inside the click event function, you'll need to retrieve the element data-href attribute, then do a scroll animation to the element. &amp;#x200B; Since the plugin you are using uses jQuery, here's a quick example &amp;#x200B; replace menuItem with the class on the items of your menu ( or add one ) $('.menuItem').click(function(){ var href = $(this).attr("data-href") var position = $(href).offset().top; $("body, html").animate({ scrollTop: position }); }); &amp;#x200B; &amp;#x200B; &amp;#x200B;
It doesn't matter if it's commonly referred to as anything. Name conflicts in code, if they were to happen with this and Webkit's jsc (and I can't see how they would given this is using Blink already) can be pretty easily avoided. Now, I'm no expert in C++, but I just don't see the issue. That was all I was trying to say.
C'mon. MongoDB to store a couple of values? 
I really like Fusion.js. Great work with that! I personally wish it used TypeScript though or at least had TS definitions. I have nothing against Flow - just that almost all of my real projects use TypeScript (well, the nodejs/browser parts).
Yep. I’m aware it could be a bit overkill, as I mention in the post I like to check out certain things in my weekend projects to assess them for potentially larger real world things in future. I went with MongoDB to assess the Atlas service. And it was all in their free tier. But to play devils advocate, what other service would you recommend for keeping state, having quick read access, all within an AWS Lambda function? MongoDB has no schema, no SQL querying, was basically 1 click setup and whitelisting the IP of the VPC, is super quick, well documented, platform agnostic, easy to spin up a local version when developing. Any suggestions?
The point was that "JSC" is a bad name for a JavaScript-related project, because a rather famous JavaScript-related project with the same name already exists. Not only will using this particular name cause confusion, but it also will make it harder to google the project, related resources, error messages, and things like that. &gt; this is using Blink What is using Chrome's browser engine?
Technically they can, all (non-arrow) functions have their own `this` object. It makes it easy to miss references to `this` when refactoring an existing class component to a function.
Oh, I meant V8... Not sure I completely agree with the reasons for not using the name, but okay. Googling JSC for me, btw, lands a big pile of nothing until I put Webkit in the search. Even "JavaScript jsc" only returns a few 1st page results related to Webkit.
I found myself writing a comment for this just the other day! But then I decided to use a variable name instead of a comment. const deduped = [...new Set(allValues)] Do you think that's descriptive enough?
Where's the Javascript? :) 
This is kind of off topic but I'd like to share with you my ah ha moment briefly on OOP or `this` in hopes it may help your class at some point. As a junior dev few years ago, I was developing an IVR bot in node. I made my functions, built up the rest API. Created a switch case for states(routes), felt good about it! Integrated to twilio. When I called the 'bot', it was working fine. Then I tried handling 2 calls at once.. If user 1 went to step 2 so did user 2. At this point I was stuck, couldn't understand how to create a system to handle states between these 2 numbers, or many more! Should I save the number as id? Then I realized, ah ha, classes! That time learning c# really did pay off. Well with 'this' caller I now had a way to contextualize each caller, so they would step through the code and move them through the states in their own instanced way. 
Interesting, seems like it was prompted by a lawsuit: https://en.wikipedia.org/wiki/Scribd#Controversies 
This is a pretty broad question, frankly one which covers a number of problem domains, not the least of which is SVG. If you want to get started with SVG generation, though, I'd recommend starting with [this MDN tutorial series on the subject](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial).
Hi /u/Dumrich, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ryan_arevalo16, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Right. I probably shouldn’t have said “can’t” but instead “shouldn’t”, since in React world there is little value in using this in a functional component.
Sorry, didn’t know know such pages existed.
It was for sure. That was before I joined. One of my very first projects included site-wide accessibility updates!
I'm not really sold on hooks. For me the cost of adding side effects to what would otherwise be pure functions isn't worth the benefit.
I bet your daughter thinks you're the coolest daddy/mummy being able to do all this stuff. Good job
Definitely use [https://www.khanacademy.org/computer-programming](https://www.khanacademy.org/computer-programming) Their base Javascript course is centered around P5.js, and also teaches you basic Javascript. More advanced courses go into more detail. They have a great community to get feedback and share your creations. I learned JS on Khan Academy, and I hope it helps you too! 
By credit I literally mean my credit score. What I'm referring to when I say study like crazy is that you need grind, practice, and work so when any tiny piece of opportunity comes your way you can capitalize on it. A minor bug appeared and I used the opportunity to show I'm willing to be a team player before even getting a job offer.
Heyy, Thanks for coming by and providing your suggestion. This looks great. Though, my math skills is terrible haha. Which one do I start with? I can see so many options. Sorry 
The bunny UX is really sick. It's obviously looks cute but besides that I think what you've done is excellent re: encouraging kids to save.
Oh very interesting! My credit is great, but seems odd that it would be necessary to get a job. I'm going to keep watching Mead's React course almost for "entertainment" at this point to try to learn, but when I finished the course I realized there's no way I can ever go back to actually work on it. It took way too fucking long and more than half the code was dumped along the way since he just re-does everything over and over in every video. Really bizarre teaching method, imo. I do not feel it helped me understand anything; just confused issues, actually. So, re-watching without trying to keep up myself will give me the opportunity to just "watch and learn" (hopefully).
Without sharing the code, there's not really a lot of advice anyone can give you. Also, this isn't the help forum: [https://www.reddit.com/r/LearnJavascript](https://www.reddit.com/r/LearnJavascript)
I second point 3, there's no better way of understanding how some code works than stepping through it.
&gt;Help imperative -&gt; functional function Link is now there. Thanks for the point in the correct direction.
This explains what you ask in plain English: [http://p5js.org/get-started/](http://p5js.org/get-started/) 
I'm in education. We always develop for keyboard navigation. We test with visually impaired users too.
I was about to ask if what application did you use this best. Then I saw your name. Lol
Start learning JavaScript first. You’ll always be confused until you do that. Enough experience to understand the fundamentals of he will go a long way. 
Here is the specific link for the Intro to JS course: [https://www.khanacademy.org/computing/computer-programming/programming](https://www.khanacademy.org/computing/computer-programming/programming)
I appreciate the simplicity.
The [P5.js reference](https://p5js.org/reference/) is a great resource and explains things pretty well. createCanvas (width,height) can be any numbers, measured in pixels. The width and height become relevant when, for example, you're trying to center something in the middle of the canvas. Think of it like an artboard in Illustrator. Things can exist outside of the canvas but won't be rendered visually in the browser, the same way exporting a png file from illustrator doesn't include the things that are off the edge of the artboard.
I kept thinking "don't overdo it". There's still an issue on desktop screens because I overdid it. Doesn't handle really long text very well (I mean as far as the js is concerned it's fine). It's a css thing. I'll fix it one day :p
My conceptual preference (note: I've never used hooks, or even React, really) would be to always separate a complicated function component into 2: a pure render function that takes arguments for all computed variables (state, hooks, etc.), and a higher order function to get those variables and call it. It mirrors the smart/dumb component strategy, and isolates the pure aspects nicely.
I've taught p5.js at Virginia Tech. Feel free to ask your newb questions to me, although I don't have a ton of time. To directly answer some of your questions: *Do I have to make sure all the shapes (rect/ellipse) numbers (0,0,50,50); do not exceed 200?* Your rect/ellipse may exceed the size of the canvas, and indeed, you may position them off-canvas. Anything—or any parts of a primitive—that is off-canvas will simply not render on the canvas *Is there a number format/combination I need to know? On a few Dan Shiffmans videos, one of his sketch.js canvas is createCanvas(640, 360); and the other being createCanvas(200, 200); ...is there something I need to know? Like why is the first canvas numbers allow/different to the second canvas number?* He is simply determining the size of the canvas. createCanvas(640, 360) will have a width of 640 pixels and a height of 360 pixels. *is p5.js all about guessing when trying to position a shape?* If you're, say, trying to draw a character on screen using lines/curves/etc, you will probably have to do some guessing to get it to display the way you have the image in your head. That being said, if you start thinking in terms of x-percent of the width, then you can easily place a coordinate very close to where you imagine it would need to go. For example, if you can imagine wanting to place a point at one-tenth of the width of the canvas, and three-fourths of the height (from the top), then you could say point(width\*1/10, height\*3/4) &amp;#x200B;
&gt; I actively avoid it until they have a better basis in programming To be fair, I actively avoid `this` as much as I can, even after using javascript for years now. You just don't need it.
Project Page (?): https://github.com/thetrepanier/word-guess-game *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I made this for my web dev boot camp. We were asked to make a game of hangman for our first assignment using JavaScript. This is my second game I’ve made for class. 😀
Doesn't seem to allow input on mobile 😂
Yeah sorry about that :). we started three weeks ago, so I’m not too sure how to approach yet. Any suggestions?
lol now I notice who it is.
Thought this was a well thought out article but what do I know?
Blockchain certainly needs a backend langage, so just javascript is not enough. Nodejs for server side is good if you just want javascript. Your question is very broad. Blockchain market can mean anything.. It could be making tools for blockchain, it could be making your own blockchain, it could be mining blockchain etc.. Specify what you plan to learn.. Blockchain is big topic. For learning everything, you're better off learning full stack developmrnt along with languages like Java/C/C++ for core development... Specify.
Javascript is a great general-purpose language that will serve as a gateway into other languages. It depends on the type of blockchain you're focusing on, if you want to do Ethereum development you need to learn its custom language Solidity (which is great by the way). I think I read somewhere Ethereum is going to offer a developer friendly option to write apps using WebAssembly, but maybe Solidity behind the scenes. For Bitcoin/Litecoin development, you can use Javascript by making RPC calls to the node itself (numerous Npm packages exist for this). if you want to do anything crazier, you'll need to learn C++ to modify the wallet and create any lower-level additions. If you want to work with the Steem blockchain, they provide an SDK in Javascript (and others for other languages) because they don't currently offer smart contracts or anything that allows you to delve into the creation of your own token (it is coming though). The bottom line here is: Javascript alone is not enough to truly get into blockchain development, but it's not a bad gentle start either.
I interviewed at Facebook a while ago for the fun of it and one of the questions they gave me (which is one of their favourite questions): Given 2 identical DOM trees (but not equal) and one element of the first DOM tree, how would you find this element in the second DOM tree? It's a strange question, but I can understand why they ask it. This is the very core of how React and its Virtual DOM works (on a simplified level). They want you to write a path and reverse algorithm. Realistically, this is not a use-case most would encounter in a day-to-day web application. And if you want real speed, a Memoised DOM is far more efficient and faster than any Virtual DOM/diffing algorithm.
This. The unit tests should be anyone's first port of call when trying to understand code, especially complex code seen in a framework. If you just dive in, chances are you won't know how the pieces fit or the reasoning behind many of the decisions.
What syntax theme is being used for the code examples?
You're not going to notice any difference for 200 items in an array, regardless of what method you use to search and array. I would use `includes` until it became a problem, and then optimise later on if needed, opting for `indexOf` maybe. Modern Javascript and browsers are very fast, it takes a lot to hit a bottleneck. Premature optimisation is the root of all evil.
Nobody-ass indie dev here. Every project you named requires joining a cult at least to the extent where your code is totally structured around those "third party" "solutions". That is a super hostile thing for any company that wants to control its tech path. So honestly I would say that all large corporate frameworks with opinions on project structure are likely to treat frameworks like React as more of a threat than they're worth.
Were they ever pure functions? Returning JSX means you're calling \`React.createElement()\` potentially several times. Is that pure, or does that have side effects?
Im not really into Lisp, but I would like to see that targeting LLVM
The best solution would be to use an input element to capture the user's keypresses. This will open up a keyboard on mobile and should work fine. Here's a quick example: [https://codepen.io/short/pen/ac033fb0271290640a432e74e18b5897?editors=0110](https://codepen.io/short/pen/ac033fb0271290640a432e74e18b5897?editors=0110)
That string could appear in your side-effects as well. As to renaming, we can always do ctrl+R to find and replace, but it's easy to forget to do that for the whole project when you're in a rush, it's easy to miss it during a code review. Not to mention that with inline string constants for action creators when we build a new reducer we have to go back to action creator, copy the string and then go back to the reducer to paste it. This problem is somewhat solved with different libraries which attach action type a a static field to the action creator itself, but I'm not sure that TypeScript will be able to discriminate the union type and find the right type then. From my experience, duplication is evil, especially if you have several people working on the same code base.
It’s a slightly modified version of night owl. I believe his blog’s source is on GitHub. Someone made a VS Code theme for it(I think there are a couple) https://marketplace.visualstudio.com/items?itemName=simsim0709.over-night-owl
PERFECT TIMING. I just started learning React yesterday and this is all I've been confused about. 
There's a third option, just use neither and call ReactDOM.render() manually on JSX you built anyhow. It works surprisingly well when using React in existing apps. Honestly it makes me wonder why everything else even exists.
How long would it take you to write this widget, based on this web-service, and how much do you charge? ... See you in a week.
Thanks! Appreciate it
When I was interviewed at Facebook, the guy gave me the problem that they had when switching Facebook from multipage website to SPA. At some point in time they needed to clear all Timeouts on a page. Solution was to override `setTimeout()` and `clearTimeout() by adding a functionality to store id of Timeouts on `setTimeout()` in a global dictionary and then with `clearAllTimeouts()` clearing all Timeouts by id stored in the global dictionary.
Hi /u/BlueGold72, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Did I miss a React perf optimization at some point? I thought that passing an arrow function as a prop to a component will cause unnecessary rerenders. More specifically, if you look at the first code snippet in the op, aren't showMessage and handleClick new functions created on every call to render? Won't React's diff algorithm think it is different and needs to rerender even when it doesn't? 
Hey, Thanks so much for your time in writing this detailed answer(s). Very helpful. I now understand fully. Though, the last one was still a bit confusing but that’s probably because I don’t know how to incorporate/imagine having a imaginary y and x axis into the canvas...but at least guessing is viable. I honestly thought I was the only one who guess for the position of placing certain things like shapes etc..but glad I’m not the only knly one and it is normal thing haha. If it’s alright , may I PM you sometimes if I need further help? I’m practicing on drawing with shapes but when it gets to stuff like arcs and lines and curves, those I feel will need lots of attention along with animations...I also understand that you may have ofher important things to do but I’m happy to leave the PM and you can repmy whenever. Sorry for the inconvenience and nuisances
Either give your dev time/help to learn how to do it, hire a better dev, or pay someone to do the extra work. This is no "help me with this"; this is "work for my company for free".
I totally get the appeal in using a project like this to learn new technologies, I do it all the time. &amp;#x200B; But to answer your question, you could use Redis? Or just render and publish the html to s3?
I think you're operating in a bit of a bubble there. Yes, it's certainly the most heavily trending frontend. Right off the bat, more people are maintaining existing software than writing anything exciting. Then you've got people who are adding exciting features, but changing UI frameworks still isn't a priority. I've seen recruiters advertise "React jobs" who in fact have a "jQuery job but we might look at React in a few years" that really confuse the trends too.
The Gatsby site (HTML, JS) is all bundled and published on S3 then served out through CloudFront. But I need to pull in the total amount on the main screen from some data source. If I pulled in the data at deploy, I'd have to re-deploy every time I wanted the page to update and that wouldn't be ideal. Agree on Redis; it would be a fine solution, I just wasn't aware of an easy/cheap/free way to get a Redis endpoint up and running.
&gt;Also, what is the best way enter the market? Unless you're planning on scamming people out of investments, what market would you like to enter?
Awesome. Article about template literals then fails to use them where it makes the most sense. `return \`${arr[0]} ${censoredUsername} ${arr[1]} ${censoredPassword}\``
nothing wrong with that
A few weeks ago I've read a nice article by Max Koretskyi, it may give you some directions: [https://blog.angularindepth.com/level-up-your-reverse-engineering-skills-8f910ae10630](https://blog.angularindepth.com/level-up-your-reverse-engineering-skills-8f910ae10630)
The article is old as fuck.
This article highlights why I don’t like class components. I’ve been using hooks for a couple of weeks now and so far I’m loving them. I feel like React should have been like this right from the start. Now, if only every functional components was automatically wrapped in React.memo. I’m hoping that will be the default some day.
You should check out [the coding train](https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw) YouTube channel. The guy uses p5js all the time.
This way you'll get extra spacing. Correct way would be: `\`${arr[0]}${censoredUsername}${arr[1]}${censoredPassword}\`` but I think that in this specific case, using string concatenation makes your code more readable. Using template literals on that kind of string concatenations is useless.
For the example, I would assume that the setTimeout after a data-change is invalid. E.g. you need to cancelTimeout when your data changes. The problem does exist, but personally I have not ran into this situation before. Usually because our requirements result in cancelling callbacks if data changes.
I'd use push notifications any time the pot value changes. Getting the information in real time seemed the ultimate goal. Use web workers, localStorage and PWA for offline first so you don't need to request html and images on each refresh if the cache is valid. &amp;#x200B; &amp;#x200B;
It is pure if you ignore heap memory allocation (which is technically a side effect but usually not counted as one in GC'ed languages).
Yeah nothing wrong with it. May as well fire up a Cassandra cluster across the globe just in case a text file or SQLite store gets too complex to store 12 fucking bytes. 
Yes, but ? What so special here ? How does it compare to a more naive approach ?
Many eslint rules would be complaining if you concatenated that. It's asking for trouble. Of course, it depends how you format the contents of the array and if you have numeric values. (Probably should rename 'str' to something more appropriate). 
Which game?
Ok dude. Sorry that you are having a bad day.
What's the question exactly? Can't you have a look at the `protect` function?
Promises concept hasn’t changed tho 
Honestly, the more I learn about programming, the more I tend to avoid `this` as well. It is a rare day when I feel compelled to drop into OOP mode.
My experience has been mostly from speaking with other developers at conferences the past year and engaging with the community. Chances are, anyone working on something modern is either choosing to use React or Vue. I have a couple of developer friends who work in government here in Australia, they're both working on Angular apps (as in the latest version). There are no preconceived notions here, I am just genuinely curious if it's the case that larger companies are mostly not choosing to use React or if that is just a phenomenon in Australia or inside of my own bubble. I personally do not work with React either. Most of my use cases require the use of a framework with all of the pieces required upfront that React forces you to scour the community for third-party solutions. Right now, I am working on a large scale project for the banking industry and we are using Ember: it's fantastic. The tooling is rock-solid, it's stable, you get everything you need and the performance is fantastic. I have overseen a few React projects since it launched in 2014 and it has some serious issues, Virtual DOM is also painfully slow at scale and you end up needing to hack around it. React filled a need given the alternative at the time was AngularJS which had serious performance issues, especially `ng-repeat` over large collections of data or the digest cycle problems from its dirty checking. I think the reality of React is, developers think it's the fastest option out there, in many benchmarks it gets beaten by other choices. Right now the fastest option out there if performance matters is Inferno.
For what it's worth, I'm Australian. I generally feel the people attending conferences in the first place are the ones more likely to be across modern trends like React. How do you think a jQuery conference would go in 2019? Officially our JS framework is.. nothing, it's all server rendered and there's a mess of jQuery spaghetti I refuse to touch that animates things. I'd take React, Ember, Vue or anything else over this.
I feel you man, that sounds horrible. I recently migrated over an app that was using ExtJS. It used to be the darling of the business/enterprise world and then seemingly, it became so outdated and replaced with AngularJS, but the damage was done. A wake of apps running ExtJS were left in its wake. The thought of a jQuery anything in 2019 makes me sick to my stomach.
Which eslint rules? And what's asking for trouble? I also think that using template literals here would greatly reduce readability. And as OP said, introduce potential bugs as in your code there would be too many spaces. An alternative would be `[arr[0], name, arr[1], age, arr[2]].join('')`.
I probably made it sound worse than it is, in that my role doesn't require me touching that mess. But my point is that believe it or not, there's a whole team of people that have been doing it for ten years and honestly have probably never heard of React. You'll never see them at a conference or in a sub like this, and there's a lot of them out there fulfilling your query about "a company that doesn't use React".
Solidity is based on ECMAScript syntax so a JS developer should be able to pick it up quickly. The same can't be said for WebAssembly. You need C++, Rust, Go etc first before you can get into the JS part. Codius, the XRP smart contracts, can be coded in any language. 
Created this since I'm often switching between my dark IDE and the bright Ramda docs, which hurts my eyes every time. Put in online in the hope that someone else can benefit from it too now :)
Why was this so downvoted on r/programming? I sincerely hate that pretentious subreddit lol
I think the \`setTimeout\` is simulating a slow-ish AJAX request. In that case, the follow should still be successful even when they navigate away.
Hi /u/karanvalecha, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
How did you create the [diagram](https://cdn-images-1.medium.com/max/1600/1*Fj9jb2OPPW18fRzoJbpmuA.png)?
This post answers your question - [https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578](https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578)
Components with Hooks cover the niche that was previously covered by classes. They aren’t pure either so you’re not losing anything. That said components with Hooks aren’t supposed to have side effects either during rendering. Rules of React still apply! Unless you count `useState` etc calls as side effects. They technically are because that’s the only way to implement them in JS. But they don’t have to be in a more powerful language. You could implement them without *any* mutable state or escaping purity in a language with algebraic effects. Like Koka, Eff, or Multicode OCaml. If algebraic effects ever make their way into JS we can implement Hooks on top. Here’s another relevant thread: https://twitter.com/dan_abramov/status/1093694465917751298
https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render
Hey, I made it myself using Sketch ([https://www.sketchapp.com/](https://www.sketchapp.com/))
Js hate is still deeply rooted to this day, my money is on senior dev mostly doing this stuff, old folks with their old thinking smh 
Hi /u/karanvalecha, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Didn't know all that. Tho the method to asterisk the people bothers me.
It's just an example :)
I wrote a blog post about backend prototyping with [webtask.io](https://webtask.io) [https://medium.com/applantic/rapid-node-prototyping-for-hackathon-projects-with-webtask-io-dbd40d1753df](https://medium.com/applantic/rapid-node-prototyping-for-hackathon-projects-with-webtask-io-dbd40d1753df)
&gt;If you are going to IKEA at Saturday 1pm you might be pissed off to wait 30mins to reach to the cashier but at the same time that was exactly what you could expect and plan for — this timespan I call EWT. This guy knows &amp;#x200B;
Hi /u/bursttanalytics, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Great job. I love the minimalist design and color scheme of your website. It might be nice to add some popular artists/books list of the month/ week etc. on the front page. Will make it easier to find the latest book which one might be searching for.
Sweet breakdown and fun project! Do you know by chance if Gatsby supports a similar thing for android icons? I have a simple app idea I've been working on for my wife in react native but would probably be simpler (and faster) if I could just keep it all in Gatsby and have it sort of look like an app
Hey thanks for the comment! :) Yes, I believe Gatsby will automatically compile the icons for all platforms out of the box, Android included. In terms of making it look like an app, there used to be a way in iOS to load a web-app without any of the browser UI, but they removed this in iOS 8. Looks like you might be able to do something similar with Android: [https://developers.google.com/web/fundamentals/native-hardware/fullscreen/](https://developers.google.com/web/fundamentals/native-hardware/fullscreen/) Whether or not Gatsby does this out of the box, I don't know. But they definitely have tonnes of great plugins for achieving a PWA with offline support and service worker, etc. Good luck! :) 
[https://github.com/linnovate/mean/commit/571415e36a6c816ba3d14289bdbe0d8e3a050cb0](https://github.com/linnovate/mean/commit/571415e36a6c816ba3d14289bdbe0d8e3a050cb0) They pushed a change out a couple of days ago to sort this out (y) 
Thanks!
Absolutely! Will post when I've got it. It's not primarily about Lisp, it just uses S-expressions as the syntax to make the parsing simpler.
thanj you! yes! i am digging goodreads api for that. as you see front page is so empty :D.
Am I missing something or would using tail-recursion be simpler?
Hi Neker - First of all thank you for your comment. There is nothing special here. I would love to see a more naive approach. Please do let me know if you know one. I am not claiming that this method is perfect. The article shows a way to render 10k elements using only vanilla javascript. No react or angular involved. Cheers, JJ
Thanks! Your game doesn't sound lame at all. Look forward to trying it out. 
not sure about the scenario in the article but I had a case with an infinite tree once. Recursion blew up the call stack on that one. 
The article is talking about flattening a tree into an array to avoid recursion, so it wouldn't help much with an infinite tree.
Which environments support that right now? It pretty much requires a trampoline to be safe
I have no experience with this, but figured I'd mention this just in case: "src: [img,img.img,img,img,img]," One of those parameters is taking in img.img and in the off chance you meant img,img I felt obliged.
I work for a big cludgy enterprise non-tech company. Everything was either Ext-JS, Angular, or a ultrashitty proprietary framework. My team actually pioneered React in the org, and afterwards we’re seeing more and more teams adopt. Although there are quite a few graybeards fighting nail and tooth for the ultrashitty proprietary framework to remain a first class citizen.
I don't understand your question, please explain? Has nothing to do with environments, has to do with how the function is written. I'm really confused by the trampoline comment. //Head Recursive Factorial function factorial(var mynumber) { if (mynumber == 1) { return 1; } else { return mynumber * factorial(--mynumber); } } //Tail Recursive Factorial function tail_factorial(var mynumber, var sofar) { if (mynumber == 1) { return sofar; } else { return tail_factorial(--mynumber, sofar * mynumber); } }
&gt; It’s a small portfolio so I wanted one JS bundle and I did not want to overcomplicate things with magic. ... &gt; That is one of the 2 reasons why I used TypeScript I giggled.
The eslint rules that spit warnings about using concatenation when template literals should be used instead. The main issue I have with that code is the array named `str`. If you want readability, don't pad arrays with superfluous characters for presentation. 
&gt; tail_factorial(1000000000000000) &gt; VM274:1 Uncaught RangeError: Maximum call stack size exceeded &gt; at tail_factorial (&lt;anonymous&gt;:1:24) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19) &gt; at tail_factorial (&lt;anonymous&gt;:3:19)
Your tail factorial function should be something like this: function tail_factorial(mynumber, sofar = 1) { /* your implementation */ } Note that there is no *var* in the parameter list, that is a syntax error. And you also need a default value for *sofar*.
I'm not sure why you'd want to avoid recursion at all unless you really were in conditions where a stack overflow was likely - which in most day to day circumstances it isn't. In nearly all circumstances once a programmer has grokked recursion (and if you haven't grokked recursion then you're not really a programmer) then recursion is conceptually easier to understand and debug - which is usually the most important thing. Unwinding tree structures into loops IMHO nearly always ends up with hard to maintain, messy, code. Sure, if memory is likely to be a problem then you're forced into it, but otherwise 'avoiding recursion' seems a very bad argument just for the sake of it.
If you can't understand why using a database server to store less characters than your name is a bad idea, then you should re-apply to McDonald's. Have a great day, now. 
Only safari and iOS have implemented proper tail calls so far.
$5,000 to develop an app in a month, that's $60,000 a year, hmmmm.....
Hi /u/chucaa, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/imatt711, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I highly prefer someone working at mcdonalds over someone like you. So no worries
Best way to reduce boilerplate is to use mobx. Just my opinion. 
Yes! Please check out our new Redux Starter Kit package. It includes utilities to simplify several common Redux use cases, including store setup, defining reducers, immutable update logic, and even creating entire "slices" of state at once: https://redux-starter-kit.js.org Also, note that there's ways to simplify other aspects too. For example, many people don't know that [you can define mapDispatch as an object of action creators instead of a function] (https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object). In addition, you absolutely **do not need sagas just to fetch data**. Sagas are a power tool - they're great if you need them, but most apps don't. See [the Redux FAQ entry on which async middleware to use] (https://redux.js.org/faq/actions#what-async-middleware-should-i-use-how-do-you-decide-between-thunks-sagas-observables-or-something-else) for more details. Happy to answer further questions if you've got any! 
Thanks for a lot of useful comments. :)
Thx, I fixed that.
Hvala. Nažalost, nemam baš vremena za davanje instrukcija. Uz rad na portfoliju tražim posao pa ne stignem ništa više od toga.
&gt; if memory is likely to be a problem The more you rely on things like immutability and recursion, the more memory is a "problem".
Bitno je raditi redovito i biti uporan :)
href="**href=mailto**:xxxxx**?subject=**xxxxx"
I have been asking myself the same question past few weeks. I have tried both for a small dashboard project. I can give u my first thoughts and main differences I noticed but I am no expert on material UI. Material-UI is highly opinionated and these opinions / best practices changes a lot because the css-in-js community is moving at a fast pace. Material-UI has a lot to offer and indeed great documentation + community. Personally I think material UI does to much and they should focus on have great core components + documentation and integration with other libraries instead of trying to compete with them. Material-UI has their own theming / css-in-js library / styled-system while trying to be compatible with other libraries that do these things. Because of this locked in/bloated feeling I got with Material-UI I tried more light weight options that focused on the core components like: \- Official React wrapper for material design components web: [https://github.com/material-components/material-components-web-react](https://github.com/material-components/material-components-web-react) \- React wrapper for Material Design (Web) Components: [https://github.com/jamesmfriedman/rmwc](https://github.com/jamesmfriedman/rmwc) These are just simple wrappers for the official material design web library maintained by google and community. Important to understand is that these libraries don't require a lot of maintenance, most changes come upstream from the material components web library. ([https://github.com/material-components/material-components-web](https://github.com/material-components/material-components-web)) U should compare the material-ui community with the material components web community. (these wrappers are also made in typescript) All I need are just pre styled components that are easy to customize and use and this is my current setup: \- Typescript \- Core components: I mix both libraries mentioned above each of the components can be used individually and I choose the component I like the most. Once I see a clear winner I might migrate to just one. \- Styled components: global css, theming, css-in-js [https://www.styled-components.com/](https://www.styled-components.com/) \- I am also looking to try: [https://styled-system.com/](https://styled-system.com/) and [https://polished.js.org/](https://polished.js.org/) &amp;#x200B; These were my thoughts on the subject and what worked best for my situation. Hope it was helpful!
The game is called sarnik. And the question is this: has anyone seen this protect function? And what does it do. Reddit ruined my formatting for some reason so I know it's not easy to read. But I can post the formatted code tonight when I get back home.
href="mailto:xxx?subject:xxx"
thanks for the tip. I did that
Thanks. It's not a dumb question. It took me around 8 months of intensive work (6-8 hours per work day).
yep, I did just that using gsuite.
If the data comes to you as a flat array then iterating over it is a viable option. If the data comes to you as a tree then recursion is the only way to go.
Hi /u/likeavirgil, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vzaidman, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AjeebChutiya, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nala2624, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I think they meant "as opposed to using webpack" maybe? Though using `cat` would have been even simpler :-)
Right, did a quick conversion from java to javascript and that was a mental blip.
Tho I call it ETA like in many industries. 
The two things I thought were not too naive are the use of `documentFragment`, which is a beast I had'nt met before, and the use of `.querySelector` to fish the just-created items. The later may seem couterintuitive if speed is seeked, so I thought that maybe there was something here I didn't know. I so happens that just yesterday I was wondering how fast it would be to use JavaScript to create a large number of elements on the fly and I made [that](https://codepen.io/anon/pen/MxjgPq). My initial ambition was more modest, with a 10x10 grid, here expanded to 100x100 to fit your bill. Comparable render time. Of course the layout is now shitty. Throwing a plain `&lt;table&gt;` in the mix adds a few ms, nothing a human would perceive though. Interestingly enough, doesn't work on jsfiddle.net, I didn't bother to investigate. Bottom line : yes, it is fast, and quite usable indeed. &gt;No react or angular involved. Of course, why would you ? I still am a learner of JavaScript and haven't yet dabbled in frameworks, but I suppose there wouldn't be a point in using them for this kind of relatively simple and straightforward experiment, would there ? 10k × cheers *note from the cook : try _real_ vanilla sometime. Worth it.*
This is a great idea. FYI clicking this link and loading it in the Reddit web viewer resulted in “Your source is direct visit”
Yep, I found this article: &gt;The good news is, this is a feature in ES6. As long as your recursive call is in tail position and your function has strict mode, tail call optimization will kick in and save you from having a maximum stack size exceeded error. &gt; &gt;UPDATE Dec 1, 2017: The only major browser with tail call optimization is Safari.1 V8 has an implentation2 but has not shipped it yet3 for the reasons listed. [https://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/](https://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/)
In practice? I mean, you know that the underlying code in whatever compiler you are using heavily relies on recursion in the lexicographical parser? It's much more commonly used in systems and similar code than most strictly application programmers appreciate. In theory it's limiting sure, but I always reach for recursion whenever appropriate (although it is always a less used tool in the box), but in years of general, database and graphics coding I've very, very rarely come across stack overflow issues. 
He he ma zo je bilo u šali. Sretno zi s daljnim radom i sretno s pronalaskom posla. Živio
Why do you need to “show that it’s not an npm package”? The point of aliases is to transparently redirect package names elsewhere. Users shouldn’t care whether or not that redirection is pointing to an npm module, or some other local directory. It is not uncommon to alias a local module that eventually gets moved to an external package.
Hi /u/Lunaugh, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt;In ES6 ... As long as your recursive call is in tail position and your function has strict mode, tail call optimization will kick in and save you from having a maximum stack size exceeded &gt; &gt;... &gt; &gt;UPDATE Dec 1, 2017: The only major browser with tail call optimization is Safari.1 V8 has an implentation2 but has not shipped it yet for the reasons listed. That explains it. [https://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/](https://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/)
Yeah. You can give an alias any name you want, for any reason you want.
To tie into the other two answers: React's default behavior is that when it re-renders a component, it _always_ re-renders all of its descendants recursively. If you actually need to optimize perf, you can tell React to skip a component and the subtree of its descendants using `shouldComponentUpdate`, `PureComponent`, or `React.memo()`. The only time the reference values of callbacks matter is when you're trying to keep those optimizations from failing due to reference changes.
At this point I suggest getting a basic environment up and running then start building simple projects. Also learn Axios for http requests. 
At a Fortune 500 company and we use MarkoJS. It’s faster, has state management built in, and is a better tool overall for what we needed. The problem? Nobody uses it, so we have to onboard people with it. 
That's why some people turn off Javascript...
I would use indexOf to find the @username.com part, then use that value plus the length of ["@username.com](mailto:"@username.com)" (as the second argument) to find the next "/" with indexOf. Then I'd use substring with \*that\* value to get the rest of the string. Splitting it and then searching for your substring and then taking the rest of the pieces would be more painful.
You can read more about [documentFragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) I use querySelector to get hold of the freshly cloned nodes (read more about [cloneNode()](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode) If you don’t know why you should use frameworks, there is a high chance you don’t need them. They are tools for certain jobs. They have pros and cons. You’ll know when to use them. I believe learning the basics of front end development is a good start. Remember, frameworks come and go, good engineering practices tend to stay relevant a little longer. Keep practicing and don’t forget to have fun! 
Use regular expression with capture group
Nobody should be doing anything that much. Certainly not in real life.
Thanks a lot! We'll give it a try. This looks like something that will push us back to using React :)
codeReadability--
&gt; Unless you count useState etc calls as side effects. `useState` is definitely a side effect. I mean, it's actually the definition of a side effect. &gt; If algebraic effects ever make their way into JS we can implement Hooks on top. This is one way of approaching the problem, another would be to avoid adding application logic to components. The only use cases which require hooks or classes/lifecycle methods are those in which a) you need to inspect react's render cycle (which could be done on a global "afterrender" event/mutation), or b) those which want to do some state mutation at the component level, which IMHO is an anti-pattern. I realize this is just my opinion and I could very well be wrong, it just seems like React is adding more and more asterisks to what was fundamentally an idea that hit pretty close to the mark. Originally react just touted itself as the view layer, but I really struggle to see why we are trying to shove both data and business logic into that layer. In and of itself it wouldn't be a problem, but react doesn't offer higher level abstractions/patterns. The component is the end-all be-all of react. When all you have is a hammer, every problem looks like a nail. 
&gt; if you haven't grokked recursion then you're not really a programmer /r/gatekeeping 🙄
Sure! Please let me know how well RSK works for you and if there's anything else that would be helpful to include. I'm definitely open to further ideas for improving the package.
&gt;A critical part of JS is inlined into the bottom of the page (bottom = ensure that DOM is available first), the rest is loaded like this: var s = document.createElement('script'); s.async = true; s.defer = true; s.src = '/index.min.js'; s.onload = function() { init_resolve(); }; document.head.appendChild(s); why do they go about doing this instead of just using async and defered in the html? Is this some backwards compatibility thing? --- why are both values being set (async and defer)? Shouldn't it be one or the other? https://stackoverflow.com/a/39711009/992856 
Since this is handled by the implementation, rather than by explicit instructions in the code, I'd argue that this is a side effect of the implementation and not a side effect of the program.
Absolutely in practice. I mean there are plenty of slow and piggy compilers out there, but V8 is all C++ with minimal nonsense (re: javascript).
The `protect()` function is inside the game's source code. No one can guess what it does
Async and defer are relatively new script attributes and don't have as good backwards compatibility. Further, you are downloading the script that tells how to render the future script, when you could be downloading and rendering the DOM. People take modern internet speeds for granted by many places (and users low on data) are stuck at satellite/2G speeds.
Yeah, I was already doing that before I did the Mead course. I did the Mead course thinking it would be a logical next step to mastery. But, it was bloated and repetitive and all over the place. Took way too long and didn't focus enough on React or Redux considering it was supposed to be a React-Redux course.
Haha, True though, if you want a good benchmark for 'being a programmer' then understanding recursion is a pretty good one. It's basic enough that it's generally taught (towards the end of) programming 101 courses but at the same time it's not an intuitive concept the first time you come across it and takes a bit of aptitude to understand. 
You're missing a closing ")" after the 13. Check your console. It should tell you when you have syntax errors like that.
i think this post is not a question for https://www.reddit.com/r/LearnJavascript it's about architectural decisions.
Aah. Thanks. 
Ye sorry it’s not that, I just typed this out on mobile and missed it, in my actual code it’s there.
preventDefault should prevent the page from refreshing when I press enter to submit my form, but it just doesn’t seem to work. It does however work perfectly fine with my click event listener which is weird. 
So you need to run npx @pika/web whenever you change your dependencies? But don't need to re-run it when you change your source files? I assume here we are talking about using es6 modules in the browser so this won't work for IE 11?
thanks! i didnt see https://github.com/jamesmfriedman/rmwc at first. it looks awesome!
How does this handle GDPR?
You're preventing the default behaviour of the keydown event - but if another event is triggered - that one is being handled by the browser still
Yay, more fragmentation
What do you mean? I’ve also tried keyup and keypress with no success.
If the async and defer aren't supported wouldn't doing it this way be pointless too (as it's not supported and will fall back to blocking) I don't think there would be a difference between doing it this way and writing the cleaner `&lt;script defer&gt;` in the html 
seems to work https://jsfiddle.net/ceqv1fbh/
If the item is a submit event trigger - then you may need to capture the form's onSubmit event also
Yes, but as per the Dragon Book it's hard to think how you'd build a compiler without liberal use of recursion. 
This looks amazing. Just not so sure about having to manually rename imports which brings back gulp memories. Is there any way around that?
Also check [codeguppy.com](https://codeguppy.com) \- it is centered around p5.js, although it does a few things automatically (e.g. the canvas is already set to 800x600, etc.). You can type the code in the editor and see the result on the right... There are some subtle differences however between that an p5.js ... but for the basic drawing commands works just great! &amp;#x200B; Dan Shiffman's videos are very good indeed. ;-) &amp;#x200B; He is a very talented educator with a great teaching style. Continue to watch thous. &amp;#x200B;
This is awesome. I've been ditching the `class` constructor because of all of the binding bs you need in the constructor. I've been constructing components like this: ``` function MyComponent() { this.state = {}; this.componentDidMount = _ =&gt; ... this.render = _props =&gt; &lt;div&gt;Render&lt;/div&gt; } MyComponent.prototype = new React.Component(); ``` Every function has a sane binding of `this` and it all works really well. But, I recently ran into a problem testing these components: ``` describe('&lt;MyComponent /&gt;', function () { spy(MyComponent.prototype, 'render'); it('renders the component', function () { expect(Page.prototype.render).to.have.property('callCount', 1); }); }); ``` The above test fails because `render` is not defined on the prototype (as it would be if I had used the `class` constructor. Instead, it's on the object itself (which is why this isn't all fucked up). Anyway, it's cool to see that other people are rethinking the `class` constructor and if it really makes sense. I find that javascript code is much easier to understand when you embrace prototypes instead of pretending they don't exist.
This a project from Bali, Indonesia. It’s not part of the EU. 
Hi /u/withouparallelism, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It’s hidden in the README QuickStart, but it comes with a Babel plugin to automatically rewrite your imports for you so that you can keep importing them by package name.
You need to listen to the submit event
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I figured it out, I was being dumb, I was listening to the button and not to the form. Thanks anyway. 
let firstpart = url.explode("@")[0], username = firstpart.explode("/")[firstpart.length - 1]; Assuming you won’t have a second @ somewhere in your string.
Without a more detailed question it's hard to give a definite answer. Also, since it's a school project I'm somewhat against the idea of giving you a clear answer, as that project's purpose is for you to learn. From my understanding, this is simple array manipulation if this gives you a hint. I suggest you take some tutorials like [https://www.codecademy.com/catalog/language/javascript](https://www.codecademy.com/catalog/language/javascript) Or ask question to your teachers, which should prove to be a good resource. Btw. you post is likely to get deleted. You should post in /r/LearnJavascript
If you want to prevent form submissions, hook into the form's `submit` event.
Oh ok. Right now im on holidays and it seema as if the teachers arent responding. But still thanks!
 const query = (selector: string, rootElem?: HTMLElement) =&gt; { return Array.prototype.map.call( (rootElem || document).querySelectorAll(selector), (d: Element) =&gt; d ); }; What the FUCK is this shit?? First of all, why not just write (rootElem || document).querySelectorAll(selector).map(...) There is no point in calling Array.prototype.map like this, save for showing off. And then you realize that the whole thing is just to map to every element ITSELF, a.k.a. copying it? Why not just use the spread operator, or Array.from()? Why the hell even copy an array that came directly from querySelectorAll()??
You're welcome.
Agreed. It does seem unnecessary. The reason he mentioned in the article as to why he made the helper: &gt; Don’t call .querySelector manually as its an object property which cannot be minified). It's true, `query()` is shorter than `querySelector` - but in reality with gzip it's actually better to have MORE repetition in your files. Chances are the libraries your using are also doing `querySelector` which means it essentially gets compressed down to one character. With the helper function you created, it's actually added more size on, albeit minimal. Only other reason I can think of him making the helper was just because it's easier to type and possibly helps Typescript give proper IDE support? Dunno. Never used Typescript.
I would hate to have to receive code reviews from you on the daily 😕
&gt; I don't think there would be a difference between doing it this way and writing the cleaner &lt;script defer&gt; in the html I agree.
Hi /u/bat_bro, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
:( I'm kind with my colleagues, at least I hope that I am. I was only being mean because the author is trying to educate people, and I believe that educating people is as big of a responsibility as it is a commendable thing. And if you're showing off while educating people, at the least make sure that you're not showing off doing something completely idiotic.
As something of a JavaScript developer myself, I am truly sorry for shit like this lol its pretty sketchy
Hi /u/bubbelishdan, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Stnk8, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You did nothing wrong, don't know what that guy is talking about. The code was obtuse and wrong 
I read it as he was using Array.from and this is what it was being transpiled to, but that could just be me being hopeful.
querySelectorAll returns a NodeList, which is array-like but not an Array, hence the prototype call. 
meow!
&gt; There used to be a way in iOS to load a web-app without any of the browser UI Nope you still can! I believe it was reintroduced in 11.3 around there. Add trivago.com to your home screen and check it out if you are on iOS
&gt;Only other reason I can think of him making the helper was just because it's easier to type and possibly helps Typescript give proper IDE support? Dunno. Never used Typescript. Nah. Typescript has definitions for all of the hosting environments.
At first, I was like “wow, this is one angry person”. However, having read your explanation, I certainly understand your frustration and concern. There has definitely been an influx of “educators”. I think the important thing to remember is that we all have good intentions. We don’t want to discourage people from trying to spread knowledge, but we should hold each other (and ourselves) accountable.
Wow, TIL! Awesome
you can listen to `submit` on a submit button too.
Good bot!
1. cognitive dissonance, explains pretty much everything really. 2. see: 1. To be fair things were very crazy at the start with browsers all doing their own thing though, and that has made a lasting impression (and some still do stupid things). 3. I put it slower than jvm languages typically, which are slower than C/C++, but really the only game in town on the browser, and for smaller teams it makes a lot of sense on the server as well. Lightyears faster than python though or ruby for that matter, or probably php. It is in a really great spot IMHO. And is super flexible, and is ready to run on billions of devices with a web browser in an instant, and having a viable server in the same language definitely helps you keep your sanity. Needs more experienced developers to get overthemselves and take it seriously, and less academic theory craters who have nothing but judgmental ideology to offer. It is flexible enough to handle basically any paradigm, with hooks for C or whatever if you absolutely need it.
I mean, if I saw a code review that started with "what the fuck is this shit??" aimed at anyone on my team, I'd probably close it and tell them to try again. Programming is stressful enough without having team members cursing at each other in what is supposed to be a teaching environment. That being said, _this_ is reddit, not a code review, so the point is kind of moot. I'm not sure that sort of comment is helpful here either, though. 
#1 If a developer does not like javascript (for whatever reason) and is still yet forced to work in it, they will end up resenting it. You can see this pretty clearly with people who felt forced to use coffeescript, typescript, etc. and tend to not like it as a result. Most of these developers also aren't aware of what modern js looks like and how nice things like es6 modules are. They've probably interacted most with legacy es3/5 with callback hell and such, which doesn't leave a good impression. Javascript also has some quirky parts of it, that, much like PHP, make code unpredictable if you're used to programming in another language. For example, what do you think this code will do? ["10", "10", "10"].map(parseInt) #2 Webasm has some advantages native JS will probably never have, like being in a binary format and streaming compilation. Projects like Blazor allow devs who are already productive with one stack be productive elsewhere. That's basically it. It just allows people to re-use their knowledge to develop for the web. Though, I think a lot of these people might get a rude awakening when they realize what they *actually* dislike is the DOM and CSS, not js itself. Webasm won't save you there. #3 For a while, node was crazy fast. The other tech stacks have slowly caught up though and some are [quite a bit faster](https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=db). You can write slow or fast code in almost any language, though, and the language itself is unlikely to be the bottleneck of performance (especially in a modern optimized JS engine). Basically, worry about performance when you notice there's a problem, then measure and solve for it.
Developers that I've really enjoyed working with all have one thing in common: they don't bash (or refuse) to use a language. They may have preferences, but at the end of the day they use the best tool for the job. Sometimes JS is the best tool for the job. Other times C# is. It really depends what you're trying to build. 
Make the link to the landing page something like www.landing.com/?phone=5553343 and use that number to fill in the form. Or pass a unique id instead of the phone number and query the phone from your DB before rendering the page.
Seems largely due to JS being JIT and dynamic typing. They hate that, in addition to it "missing" certain features compared to those languages. For instance, up until recently it was kinda problematic to have private methods and the like in JS. In addition, though they rarely say it outright, they think JS and, in general, the front end stack to be too complicated. "You have HTML, CSS, JavaScript and all these frameworks and libraries.. These server side JS build tools. It's too much." For what it's worth I do understand where some of them are coming from. Depending on the project you really could have alot going on. 
Tests I've seen show that for doing "Web Server" type tasks Node actually beats Java pretty handily. But there are many other cases where Java is indeed the victor. Overall it seems Node has solid performance. Also, I saw some talk at a conference stating that WASM performance over JS isn't going to hit the highly optimistic numbers I've seem bandied out. Typically it's like 20-30% faster iirc. I could be completely wrong though, sources could be wrong or me misremembering. Just fwiw.
Well done, nice work. I noticed something that's not correct (at least I think). Flagging a square a mined one should prevent you to left-click it again, because that would make you lose if you were correct at flagging.
This. I'd like to add a key difference. Some people just like their type system which helps finding errors at compile time and give you a bit more control. If you're proficiant in a language you like to use it more. WASM gives you this oportunity. Performance often isn't the stack but how you use it. Sometimes JS just can't perform as well as compiled languages do.
Why every post in here barely English?
Thank you! I don't really remember how it works in its original version, but your idea sounds great! I will definitely implement that.😉
Well, honestly, JS still has a bunch of weird things going on. Weird at first glance, but once you know the language it almost all makes perfect sense. Almost. &gt; Boolean(false) false &gt; new Boolean(false) {} &gt; {} == true false &gt; Boolean({}) true &gt; Boolean(new Boolean(false)) true &gt; new Boolean(Boolean(false)) {} &gt; if (new Boolean(false)) console.log('Indeed') Indeed That said, pretty much every language out there has weird parts about it. 1. The strong typed ones feel superior. Those are the ones who typically love TypeScript despite its inherent negative return on investment compared to regular javascript (+Babel for ES6+ support); 2. They simply don't know what Web Assembly is, what it's for, and none of them could even read or explain its syntax. It's not meant for 99% of our daily programming tasks. If someone starts talking about Web Assembly, ask them how to make it write "Hello World!" – I've been trying that. Nobody can answer it and everyone needs to Google and... watch their faces. You'll see a frown. A big one. They'll be surprised to see what it actually is; 3. Another thing that doesn't matter for 99% of everyone out there. Multi-threaded support is coming, but simply sharding processes does the trick. An event driven system might not be as good as true multi-threaded compiled code, but it's wickedly less complicated. ### Hello world in Web Assembly: #include &lt;stdio.h&gt; int main(int argc, char ** argv) { printf("Hello, world!\n"); } It has a place in the world of web development, it's also a marginal one. The rest is just hype and people who don't know what they're talking about sheepishly repeating what others are saying.
They know how Types can help to write better code with less errors. JS is mainly untyped - just one reason Prior to ES6 JavaScript was so ugly to read... it hurts in your eyes if you didn't grow up with this ugly syntax No classes ( to be precise no class keyword) Very uncommon usage of "this" Dependency chaos, framework chaos, x build systems... No block-level scope for var!!! one of the weakest points of JS All these things made JS a kindergarden language and not a language for the big boys But things changed! ES6 brought some nice features like let, const, class keyword and arrow functions. TS is a good alternative if you (hopefully) want types and webpack became the defacto standard as build system. Dependency management... works, somehow but has big potential to improve
That makes sense. Packages may end up being published for the masses or private and then there's no need to change your import. But I'm still a little confused why webpacks docs show an example with capitalized aliases??
Javascript used to be terrible, mostly because it was only used in browsers, and cross browser compatibility was a rotten hell hole, and IE was a rotten hell hole, and all the APIs were a rotten hell hole and performance was a rotten hell hole and tooling was nonexistent except for notepad. If you do not remember the bad days of JS you are lucky :) Now PHP I will hate on all damn day long.
I think a lot of people pin their hopes on WASM because it would be a clean break. Javascript has a lot of baggage, because you can't break the web, so it's impossible to "fix" certain aspects of it. That's before you even get into static types, which I think a lot of devs feel a bit lost without. When dealing with complex data structures, it's nice you have your IDE or compiler tell you when you've done something wrong, without even having to even run the program or write any tests. The sheer ethusiasm behind Flow and Typescript is clear evidence of this desire &amp;#x200B; I think it's likely that a popular approach will be to mix JS and lower-level languages are needed. For instance, if you're writing a web server, likely most of your tasks are I/O bound (network calls, database lookups, that sort of thing). So the extra CPU / memory usage JS entails is not a big deal. But there might be some small bits where the extra performance and correctness of something like Rust is a lifesaver. [This case study](https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf) from NPM inc. is a good example. They're always going to be a JS house (duh), but they're also smart people who want to use the right tool for the job. &amp;#x200B; Ultimately JS has won becuase you need to use it, and people have created great tooling to help developers avoid its worst parts, and emphasise its strengths. WASM needs a *lot* more functionality to be competitive. It doesn't have garbage collection, it needs JS to bootstrap it still, and it doesn't have a way to talk to the DOM. Plus the JS ecosystem of libraries and tooling is amazing. It's going to be a long, long time before you can make a reasonable web app without embracing JS.
I can tell you my own personal story. I learned the other languages well. And treated JS as a browser scripting language I could spend a few minutes on to get back to the "real" work. After a few years of frustration I finally decided to learn JS in depth. Now I like it. Like any language, you have to put in the time or you're going to be constantly frustrated.
For sure, I'd personally say it's more of a good benchmark for having more experience as a programmer. I wouldn't expect a junior to bust out recursive functions, tbh. Also, if you go the self-taught route, it might be a while until you actually need to use recursion. It's definitely not something I'm reaching for very often!
I’d never heard of WebAssembly before but that just looks like C. My quick perusal of MDN seems to come up with WebAssembly being more of a compilation target than a language so I imagine you could actually compile all sorts of languages to WebAssembly and then load the compiled object with JavaScript. Sounds cool actually. Am I missing something?
👍
I can't agree with it. It looks me to more complex, and ALWAYS starts with a wall of text with is literally doesn't do anything: just a declaration. It becomes more complex, if you have more object with same naming inside, like both of them using title and description, so you should rename one of them. Meanwhile you exactly know simol just reading the code, if you see it's this.state.title, so where it's originally from. 
Love me some r/couchdb! I also appreciate, in the article, how much effort is made to discuss CAP theorem (i.e. "Consistency, Availability, Partition Tolerance. Pick two. Then pick the DB that provides you those two.") Most articles have such an unnuanced approach to DBs, and pick a DB based on what is easiest to implement within the scope of the article. Good stuff.
I can't stand JS but I love PHP lol
haha , I have seen a destructuring in 100 lines meanwhile the actual working code was less, that was everything but not easy to read and make less clutter. Every single time firstly I needed to check , who provides that data. 
Because JS is functional. Object oriented programming is harmful, especcially in frontend.
Hehe well it takes all kinds. I have to say I used to dislike JS, but these days the language on it's own is very nice, and the browser, tooling and library situation is pretty good. I find (and this is true in php too) the low barrier for entry means a lot of libraries are garbage.
 const date = new Date(var2); const day = date.getDay(); if (day === 0) console.log("It was a Monday."); &amp;#x200B;
it's occasional when you need to define the vars like that. i can also ask, what do you prefer if you have same naming? `const { foo, bar, baz } = this.context` `const { foo: foo2, bar:bar:2, baz:baz2 } = this.second` `&lt;ul&gt;` `&lt;li&gt; {foo}{/li}` `&lt;li&gt; {bar}{/li}` `&lt;li&gt; {baz}{/li}` `&lt;li&gt; {foo2}{/li}` `&lt;li&gt; {bar2}{/li}` `&lt;li&gt; {baz2}{/li}` `&lt;/ul&gt;` &amp;#x200B; or const {context, second } = this; `&lt;ul&gt;` `&lt;li&gt; {context.foo}{/li}` `&lt;li&gt; {context.bar}{/li}` `&lt;li&gt; {context.baz}{/li}` `&lt;li&gt; {second.foo2}{/li}` `&lt;li&gt; {second.bar2}{/li}` `&lt;li&gt; {second.baz2}{/li}` `&lt;/ul&gt;` &amp;#x200B; Honestly, I prefer the second solution, and think it's better way to use destructuring. &amp;#x200B; &amp;#x200B; &amp;#x200B;
 const date = new Date(timestamp * 1000); // * 1000 because JS uses milliseconds, not seconds Now you have a JS Date instance, you can use any of the date methods, such as `date..toISOString()`. Take a look at all of the options at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#JavaScript_Date_instances.
I might sit down with JS one day again, as for PHP libraries I avoid them 
You don't need to write C to write web assembly. Rust already has a webasm target and there's projects like [Blazor](https://www.youtube.com/watch?v=Qe8UW5543-s) so you can use C# too. That's kind of what gets people excited about webasm. I doubt the average dev cares about it being a binary format or streaming compilation but they do care about being able to use their own tech stacks.
Yes, agree, I doubt I reach for recursion more than once a month, if that, but when you need it you need it, it's one of those techniques that perfectly fits a certain class of problem. However, even junior programmers should know what recursion is even if they don't wield it themselves. It's usually just about the last lesson on programming 101, but I would expect to see it. I may be out of date though, these days maybe understanding and writing closures might of an appropriate threshold. Mind you, some people wouldn't consider you to be a real programmer until you'd written a basic toy compiler, a position I have some sympathy with! 
&gt; It's going to be a long, long time before you can make a reasonable web app, or web-based cross-platform app, without embracing JS. This was true a few years ago, but there are [vdom libraries for rust](https://github.com/DenisKolodin/yew), with even jsx syntax (kind of). There's also projects like [blazor](https://www.youtube.com/watch?v=Qe8UW5543-s) which just give you the runtime for you. Blazor doesn't even make you touch js, which is what I imagine we'll probably see out of the other "stacks". If you wanted to, you could make an app in webasm today. It probably wouldn't be very smart, but you could. Predicting the web is a loser's game, though. Who knows where it'll all go. It's entirely possible the hype around webasm will die down whence people realize you still have to talk to the dom and css.
To be honest most of them are n00bs, specially those who write Java code using C++ and complain is slower. I primarily work with C++, and I can only laugh at those who feel superior for using a typed language, those who abuse every OO pattern and later drown in complexity. And since they don't have a clue about assembly languages, and all the stuff going behind curtains, their projects become bloated and slow monstrosities. They should hate their own ignorance, not a language. 
1. That applies to me for Python. I already had a decade of work experience with C++ when I had to use that language. I was promised to have fun instead I could only grow hate against it. It not only runs slower, is not fit for anything larger than pet projects, and the worst are the people who use that language. A trash language for trash people.
https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation
I've seen this sequence a number of times. 1. "Javascript is a toy language that anyone can do. I'm a real programmer because I know &lt;whatever&gt;". 2. Tries to hack something together. Has not bothered understanding the language, the DOM, the event loop... Done a summary on HTML and got freaked out by CSS. 3. Gets nowhere, attempts copy paste from stack exchange and random combinations of jquery and css selectors from fifteen year old threads on then browser specific issues. 4. Gets frustrated because inevitable failure. Must be the language because see first point. 
Well said. I mainly use C# and JS / TS and really enjoy both. Especially now that things like VS code with language services took away my biggest gripe about JS being a pain to write with.
If you need to work with the dates and times, I recommend using [Moment](https://momentjs.com/docs/) to handle parsing, manipulation, and formatting. They've taken care of lots of edge case stuff, like date addition/subtraction when you are working between daylight saving time and standard time. let date = moment.unix(var2); let dayAfterDate = date.add(1, 'day'); let formatted = dayAfterDate.format('YYYY-MM-DD'); &amp;#x200B;
Everytool is usefull in X situations and for Y job. JS is great for one thing, py is great for other things, rust for other things and so on. Good programmer will try to teach himself many tools and frameworks to have his job/projects done. Every languages has its pros n cons, some are fast, some slow, some easy and others hard to master, but at the end there is no perfect language and every year we will have new features/languages/frameworks coming on, thats part of the evolution, the evolution of programmers. Those that refuse to upgrade their kits will fall behind while those who learn will progress, thats all. And tbh ive never heared a real professionals to moan about js or other lang, at least with the ones i work/know, they might point con n pros but never hate it, at the end its just a tool.
It is extremely low. Most sites would barely work if at all without javascript.
It doesn't, European laws don't matter to those not in Europe.
I find jvm stuff slower than js for nearly any task. Especially when used as intended, moving computationally intensive bits down into gyp the way node does, it beats java for any real world task.
Yup. I'm a JS Dev, I'm just relaying what my older peers have said to me over the past 5 years.
Probably the large number of devs who use js not by choice but because they feel forced to. I've actually ported server code from c++, go, and even python over to node.js to take advantage of its performance and expressiveness. I cringe at typescript code where the user is basically throwing away most of that wonderful expressiveness.
Hi /u/sockywocky, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/javaqueen123, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Null_Amount, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/marti2221, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/raprock, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BasePushAllOut_VA, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Rickygoacher, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/spite77, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Don’t see the issue, seems straightforward enough, and ignore the trolls: Create an ‘attribute’ collection (makes sense since you probably want to add items - product would probably be a better name) Create a order collection which contains an array of ‘attributes’ Profit? 
Lol if someone loves PHP and Ruby but hates JS I would just consider them braindead. Don't even care enough to change their minds.
... [10, NaN, 2] ?!? ooookay, then.
I think I’d rather work with people using a “trash language” than an individual so close minded that s/he dismisses a group of people based on a programming language choice.
Coming from Java, C, and C++ in school, after picking up JS I couldn't imagine programming with anything else for 8 hours a day at a job. 
There used to never be any closure for them.
This is from a jaded perspective: Backend developers look down on frontend developers. Statically typed/OOP people look down on dynamically typed procedural people. The amount of times I've seen people on /r/programmerhumor acting like they're gods among men for knowing how to use pointers makes me salty. Javascript is the only language that lets you write code on browsers and for that reason it's the best for me.
I joined an older dev team and the whole backend was php. I hate it, but its tough to legitimately vocalize why. Why do you say you hate it? Note the answer isnt going to be used tospeak with my colleagues, just curious. I was already granted privilege to rebuild core backend features in node.js :)
These are some loaded questions... 
[https://lucky-cloth.com/discount/St.Patrick'sDay](https://lucky-cloth.com/discount/St.Patrick'sDay)
I like strong types and I cannot lie.
Interesting. [Here's why it doesn't work as expected](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Tricky_use_case). Basically, you can use Array.map() like this as long as your callback function accepts only one parameter, and it'll work, but [parseInt accepts two parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt): the string, and the base. So what's happening is that for the first element, it's parsing '10' in base 0, and the 0 is ignored so you get 10. The second element is parsing '10' in base 1, but there is no base 1, so you get NaN. And the third element is parsing '10' in base 2, which is 2. If you do ["10", "10", "10"].map(val =&gt; parseInt(val)), you'll get the expected result. IMO this is not necessarily a failure of JS, but rather simply a failure to pass the correct parameters to a function. GIGO.
The problems I have with javascript aren't the language or its performance, it's mostly its obtuse packaging and dependency nightmare that seems to be driven by people hellbent on acting like angsty teenagers who need to learn everything hard by themselves before they learn from those before them. From deleting published packages, to coming up with docker style tagging to the left pad fiasco to deleting modules because they have bitcoin miners in them and everything else I've experienced. It seems like its always "hey, i need to do that" without thinking about what that really means and why other languages may or may not do that.
who hurt you?
Somewhere in the mid 2000s the constant flood of php vulnerabilities put me off for good.
It could be my view is skewed by the fact I didn't get one well with the lecture who was supposed to teach client side stuff
javascript is kind of a wacky language since its so hard to debug and it has so many weird quirks its mostly better now though
I started learning with python a while back and could never get the hang of JavaScript, the syntax felt unnatural and initially I would try applying what I learned with JavaScript but frequently found myself going right back to python to do the project. About a year ago I got a job that has me kind of wearing many hats, so I picked up React for a front end project, found out i really needed to learn JS and ended up kind of falling in love haha. &amp;#x200B; The big thing was I never did things with a UI before this. It use to be all cli, scripts, automation, queries, etc. So the languages I used were: Python, Bash, Awk &amp; Sed (I count them as languages haha), SPL, SQL. &amp;#x200B; But everyday I am learning that there is a purpose and tool for everything and picking the right tool even if you have to learn a little bit is always best.
WASM isn't trying to replace JavaScript. It's a standard for using low level languages for stuff like ML or game engines within the browser in conjunction with a higher level language such as JavaScript, and for most web apps, there isn't really a use case for it. You don't need C or Rust for DOM manipulation. Let's also not forget that WASM binaries are relatively large as well.
Beacuse its not a typed language 
I am a mobile game developer here's why I hate JavaScript. Firstly, JavaScript is kind of messed up. Unlike strongly-typed languages such as Java, it tries its best not to stop you from doing something which other languages would prohibit. As a result, it yields some very awkward outcome. Moreover, I started out coding with Java, so prototypal inheritance was a very bizarre concept to learn. Secondly, I hate JavaScript ecosystem, there’s the whole “framework debate” and the “forever learning loop” thing. “Oh, you just learned HTML? Nobody codes directly in HTML anymore, mate. You gotta use JSX!” “CSS won’t do! Learn SASS or LESS!” “I know you can use Vanilla JavaScript to make a simple to-do list, but learn and use React, will you? Everybody else is doing it! We gotta stay modern!” Basically, the technology and tools change rapidly and abruptly. You have to be constantly learning all the time in order to stay relevant. I love Go, because It makes me jump out the circle of web development... You see, developers have to learn how to do it the Angular way, the MERN stack way… the vue way, there are so many different tools to solve the same exact simple, boring CRUD problems. 
Can you give an example of expressiveness that is lost when moving from plain js to ts? I'm not quite sure what you mean here.
More simply, * `parseInt` function takes two arguments, the second being an optional `radix`. * The `map` callback is called with `element, index, arr` as arguments. * The `index` is being treated as the `radix`.
I felt the same way for about 19 years. I've finally taken the time to learn JS+TypeScript properly over the last year or two, and prefer them over PHP now. Especially with TS. Not sure if it's similar for you, but there's a video series and book called "javascript for php developers" that was a good start in learning some of the fundamental differences for me, and just getting more comfortable with JS in general. 
Nor have the concepts of ActiveX, but it doesn't mean we should keep using them when better options exist. The article may have been updated a few days ago but the browser versions are half they are now (which doesn't say much) and it mentions some browsers should be polyfilled. For promises. I doubt the term Evergreen Browsers was even coined then. In other words, it's old as fuck. Google or not. 
&gt; Lightyears faster than python though or ruby for that matter, or probably php. Citation?
I'll look into it, thanks
I hate when I see this example brought up because it's not a quirk of the language. The language is behaving exactly as it should. It's the fault of the programmer for not reading the docs for `Array.prototype.map` and `parseInt` Bash on the weird type coercion behavior or the uselessness of `typeof` all you want. In this case though just learn the language. 
While not a programming language, can we all agree to hate CSS?
Nothing wrong with PHP since 7 dropped. Plus Laravel/lumin is great. 
&gt; I cringe at typescript code where the user is basically throwing away most of that wonderful expressiveness. Please elaborate on this "expressiveness"
A lot of the complaints that developer's from languages with strict typing have with JavaScript can be resolved by using type linting with JavaScript. You write JavaScript with JSDoc comments to define your types and let TypeScript lint the types to catch any errors. This happens as you code, so no build step needed like when you write your code in TypeScript. Of course, you could be writing to the latest ECMAScript proposals and using Babel to compile to a target. But that's separate from type linting. The article is here: https://medium.com/@trukrs/type-safe-javascript-with-jsdoc-7a2a63209b76
I pretty much agree, I was just trying to explain why some people want it to "replace" JS, as you say.
Great explanation. Thank you! I definitely would have been looking up the docs on parseInt if I had run into that in the wild. :)
I don't have JavaScript. I hate node_modules, webpack, babel, jslint, leftpad.js, spa apps, IE, gulp, grunt, and all the other crap that comes with the ecosystem. I could go on about C# and msbuild, nuget, xml to js back to xml for project files, .net standard versioning. There's good and bad wherever you look. 
new thing called google...
Too often people use javascript for too much. It's not that I hate javascript. I hate when people write code for it that should be on the backend. I really dislike many webpages that insist on requiring javascript, because that's all they know. Also, I came from a time when javascript was less reliable. Often you couldn't do something on one browser you could do on others. It's better today but still not perfect. Also, javascript is too easy to write code that breaks because of a messed up javascript linked file, or error in the code making a mismatch of closing braces that's a bitch to find. You can't compile it! You find errors by running it, not by compiling it. Makes for a less friendly development environment. Also, the new libraries such as React are very unfriendly to working with Visual Studio. That will likely change, but it's not super simple to set up an environment to use something like react with an existing MVC site. And even when you do, you have to npm run build outside of the visual studio app itself. It's so annoying that some of our devs actually set up a test react environment through a free dev server for react. Even when you have everything set up right in React and your javascript code, debugging it can be more difficult that with C# in visual studio. Maybe there is something that makes it just as easy, or even easier, but it probably doesn't interface with Visual Studio well, so it would require learning two environments.
What? I love CSS!
I do this. But it's not liked by my colleagues. They all prefer jQuery or moustache. If template strings are available, I'd probably use those. I'd be interested in you building a dom string and DomParser it / innerHTML it and inject for your own interest to see what gains/losses in different methods are made. 
PHP is decent now.
You should try asking a less obviously biased question in a less biased subreddit if you want useful answers.
Because the best language is the language you learned first. Picking the right language for the right job is irrelevant 
I tried, wasn't able to find anything definitive in either direction.
Awesome stuff! 💪
Fear.
I love PHP, JS, and C++ but I'm starting to hate C++ with all the "new" features they keep adding, C++20 brings a lot of shits with weird namespaces as if C++ wasn't difficult to read already, I've been thinking about going for plain C
I usually look at benchmarks, lots of benchmarks, and do some of my own testing, and then make a swag.
&gt;Now PHP I will hate on all damn day long. why? what about it makes you hate it all day long? let me guess, the weird function names and the inconsistent argument ordering? or is it having to use a sigil to reference variables? it always turns out to be some trivial thing that is never really all that important in the grand scheme of things.
I recommend trying to code in ES6 and use some type of assembler (webpack, browserify, etc.) to handle the shimming for you. In my opinion it makes javascript a much friendlier language to use. Closures etc are still necessary but I prefer languages that utilize them rather than whitespace, simply because it's visible.
yeah, that was 15 years ago. EJBs were also big then, are you still using those? technology moves forward, you should too.
I would say most of the ‘hate’ towards JavaScript comes from developers of other languages who do not want to take the time to learn JavaScript properly. Most of these developers come from a class based language whereas JavaScript uses prototypal inheritance. I would argue that JavaScript is one of the most ‘loved’ languages. It has the biggest ecosystem(npm). It has and continues to grow faster than any other language. It can be used for web, mobile, and server development. Are there a few things in JavaScript that can be improved? Absolutely. But that is also the case for any other language. If you would like to do primarily web development, hands down you should use JavaScript.
Nah. This example shows you that: 1. Javascript has a very non-standard `map` 2. Javascript has a function called `parseInt` which does more than parsing ints 3. Javascript does not perform safe eta-reductions This is why it's brought up. If you did not know javascript but you knew other programming languages, you would not know these three quirks, and therefore, would expect to get `[10, 10, 10]` back. Only after you've memorized non-standard implementations does it make sense, which is how all quirks in all languages work.
Html and CSS is Turing complete. Also what you mean to say is that you don't bother to really learn how to use CSS thus you struggle with it. Try coding in any language without learning anything about it and see how it goes. 
it's really just insecurity. i think there are two reasons people hate on languages like javascript and php 1. the majority of people are bashing it cause everyone else does. when you get down to it, they can't really articulate what it is about javascript that is so bad, and if they can, it's usually something trivial (omg variable hoisting fehhhhhh). these arguments are usually based on popular headlines that aren't researched 2. people have superiority complexes and they think they're so much better than the language the knaves use. javascript and ruby and php are all good starter languages, which means a lot of shit code gets written in them. elitists usually use this as an example of why the language is bad. the fact is, youtube, wikipedia and facebook were all built and succeeded on php. facebook now has 50,000 react components and they're still succeeding technically just fine.
CSS1 was awful. CSS2 at least allowed for some cool styling but was a clusterfuck. CSS3 has been less of a clusterfuck but still sucks to write directly. Stylus was the first preprocessor that I actually liked and finally made CSS not feel like a chore.
I like string types and I cannot return numbers.
&gt;IMO this is not necessarily a failure of JS, but rather simply a failure to pass the correct parameters to a function. GIGO. In any other language that I can think of, mapping over the int-parsing function would do nothing more than parsing the ints. This is what I meant about it being unpredictable, and it's exactly the same sort of problem you have in other unpredictable languages like PHP. It just doesn't work as you would expect in javascript because: 1. Javascript's `map` implementation is very non-standard 2. Javascript's `parseInt` parses more than ints 3. Javascript does not perform safe eta reductions Only because of all three of these quirks is mapping over an eta-reduced function unpredictable. 
CSS is hard to get a grasp of but is very expressive. Try designing a UI in swing and you’ll see how much of an advantage CSS is. 
Weird function names and inconsistent argument ordering is just enough to be extraordinary annoying lol
I have no idea how other languages implement their map functions, and I have no clue what an eta reduction is, but regarding point 2, it sure looks to me like parseInt only parses ints; you can just give it a base as well. You could use ["10", "10", "10"].map(Number) instead, since Number() only takes one parameter if used as a function. Don't get me wrong, I still think JS is kind of weird, but I also like PHP, so feel free to discount my opinions. I know what an int-parser is when I see one though. Definitely no floats there.
Different languages make different trade-offs. The best programmer looks at those trade-offs to choose the right tool for the job. Programmers who already chose a very different language from JavaScript probably did so because they wanted to make different trade-offs than JavaScript does, so the idea of using JavaScript probably isn't very appealing to them. This leads to hate because unlike C++ which, if you don't like it don't use it, JavaScript forces itself in the area it's in and even when you can avoid it really biases the options (e.g. having to translate or interpret a language through JavaScript). I love JavaScript, but the idea of a Web Assembly with a mature set of things that compile to it would be amazing.
oh, i type it al day long
It's better than it once was, but it still has a lot of quirky problems and can be unpredictable.
I mean I have been using CSS for over 10 years now and even though I know it well enough, I still can’t stand having to deal with multiple browser support for gimmicky crap that makes no sense and with little to no ability to run a debugger on. Debugging a SASS or less function is about as fun as pulling teeth. 
This is pretty much my feelings on it. I don't really have that many issues with JS as a language on its own, but the NPM ecosystem around it is just frustrating to work with. ES6 fixes some things by adding more functionality to the core language, but working with npm, webpack, and especially a lot of the testing frameworks in JS just leave a lot to be desired. The amount of time I've had to debug NPM not doing what it's supposed to do, or doing something in a way you wouldn't expect, or just being totally bugged is higher than I've ever had issues with any other package manager.
Well, for posterity: `map` is a well-defined function that applies a transformation to a container type. It accepts one input, the value being contained, and returns a value which is then subsumed by the container. You most commonly see it on arrays, but you can map over a lot of things, like promises (which is called `then`). [1].map(x =&gt; x + 1) // Array of 2 Promise.resolve(1).then(x =&gt; x + 1) // Promise of 2 It allows you to abstract out logic of things like "how do I operate on promises" and "how do I operate on arrays" and just lets you specify purely what transformation you want to occur. An eta reduction is a simple transformation. Given: [1].map(x =&gt; anotherFunction(x)) You can write: [1].map(anotherFunction) (the process in reverse is called an eta abstraction) This is safe in pretty much every language but javascript, particularly when you pass a function from an object: [1].map(someObject.someFunction) You *should* be able to write this, but it's potentially unsafe, since the `this` of `someFunction` will be `undefined` unless it is an arrow function or bound somehow. 
Have you built anything with Lumen? I've tried to but realized how dependent on precisely Laravel I'd become, even the minor syntactical differences threw me off and it felt like a fairly different framework. 
&gt;Firstly, JavaScript is kind of messed up. Unlike strongly-typed languages such as Java, it tries its best not to stop you from doing something which other languages would prohibit. As a result, it yields some very awkward outcome. Only if you don't know how to use it, or you refuse to use Typescript. &gt;Moreover, I started out coding with Java, so prototypal inheritance was a very bizarre concept to learn. It's not that difficult mate, new paradigms in your thinking might feel awkward at first but that's part of growing as programmer - each new concept is a tool in your mental arsenal, and as programmers, we shouldn't be put-off by learning new concepts. &gt;Secondly, I hate JavaScript ecosystem, there’s the whole “framework debate” and the “forever learning loop” thing. The dust settled on the framework wars a year or two ago. Things are pretty calm at the moment with 2/3 options having been taken up the industry - each are pretty simple to understand once you know one. Even then you can specialize in whatever framework you choose and find plenty of work as an expert in that tool. &gt;“Oh, you just learned HTML? Nobody codes directly in HTML anymore, mate. You gotta use JSX!” HTML isn't javascript, but whatever. JSX is a useful tool in some situations, and there's certainly no requirement to use it. &gt;“CSS won’t do! Learn SASS or LESS!” Again, not javascript, but whatever. LESS/SASS are useful tools, though there's certainly no requirement to use them. &gt;“I know you can use Vanilla JavaScript to make a simple to-do list, but learn and use React, will you? Everybody else is doing it! We gotta stay modern!” People use react because it's a useful tool, not for the sake of getting on the bandwagon, it's very effective at it's job. &gt;Basically, the technology and tools change rapidly and abruptly. They don't really. Not enough to be a problem. New tools and frameworks come along from time to time where there needs to be an improvement, but you're absolutely over-blowing the reality of working in javascript. &gt;You have to be constantly learning all the time in order to stay relevant. Boohoo, you're a programmer, the industry shifts, technology improves, tools change. Programmers who fail to expand their tool-belt will make it to 50 and find themselves struggling to find work, just like the COBOL programmer I worked with whose contract just expired and is now trying to become a prison warden. &gt;I love Go, because It makes me jump out the circle of web development...You see, developers have to learn how to do it the Angular way, the MERN stack way… the vue way, there are so many different tools to solve the same exact simple, boring CRUD problems. All these complaints seem to come down to you feeling overwhelmed by the complexity of front-end development. 
I am actually really good with CSS, have used it daily for 10 years. I have been using SASS/LESS for over 7. The biggest problems lie in browser support and lack of a solid debug feature. Have you ever tried debugging any somewhat complicated logic in style sheets? It is near impossible. 
Yea I used it for some micro services on local sites and IoT devices in my house. It’s really great. I do like Slim as well though if Lumen wasn’t your bag. 
Because it's not strongly typed and is interpreted. Performance sucks and most any tool/library/api made to write and support it have suffered from a major lack of cohesive design or quality for that matter. This mostly do to the open, free nature if JS, which leads to the hate of those who only know javascript and have decided that any job worth doing is worth doing poorly using JavaScript. As a long time developer using many languages, I can say that the "all we need are strings and functions" approach to software design doesn't produce quality software.
Typescript and Flow, they got you.
I’ve had fun teaching front end development to backend devs. They could not believe the complexity of it. Security concerns, input validation, sanitization, serialization formats...and it goes on and on.
boohoo, your problem is vs code apparently
Yeah anyone who's done both knows you can't have that kind of attitude about either.
the more I hate is JavaScript ecosystem not the language itself, HTML and CSS is undoubtedly a part of it the problem is js developers are learning different tools to solve the same problem, I think this's not a programmer willing to do, I work as a game developer while out team developing game engine other than unity and unreal, we have to learn 8086 assembly for anti-cracking, fine tuned existing solutions for achieving better performance, those must be harder than what JS generally does , CPP and c# mono ecosystems are very stable, we don't consider what libraries/ framework should use....
I’m full stack, which means I’m marginal at all of them. Shit gets hard quickly if you aren’t prepared for it.
&gt; Javascript has a function called `parseInt` which does more than parsing ints Ints that aren't in base 10 are still ints.
And that’s why static type checking is important. If Array.map takes a delegate with the signature void (int, int, int) =&gt; { }, it should be impossible to pass a function with the signature int (string, int?) { }. A good compiler would catch that error. Heck, the JavaScript engine could be more useful by reporting it as a runtime error and halting execution. Instead it tries to assume that the programmer knows what they’re doing and contorts itself into weird shapes to accommodate the input, even when it is wrong.
Then you find out that function names are actually case-insensitive.
1. If you go to the far edges of almost any programming language, you will find such edge cases. 2. Wasm has some advantages, but those aren't it. Take a look at the [JS binary AST proposal](https://github.com/tc39/proposal-binary-ast) 3. Every benchmark is open to gaming. Last time I looked, a lot of those entries aren't anywhere close to how you would write a normal, scalable framework.
If speed is important, will you guys still code with js?
I still don't think JavaScript is good. I mean, it's usable for sure, but you can't pick up a language with terrible syntax and improve it while keeping backwards compatibility. If there was a choice, I'd pick basically any other of those scripting languages mentioned over JS. But it's workable, you're right.
This is why I don't like Javascript. I have to write a lot of stuff that runs for a long time to process data, and sometimes it will crash after 10 minutes because of a dumb typo, which C# would have picked up on.
He probably means daisy-chaining half a dozen anonymous callback parameters instead of declaring a named function like a normal human being. Callback hell in JavaScript is bad enough. Bad programmers make life more difficult by abusing the dynamic nature of the language.
You other coders can't deny. 
The author of node.js shares your opinion and decided to start the whole thing over. check out https://deno.land/
What about the syntax is bad?
I mean, sure? I'm answering the OP. Of course every language has faults and quirks. Of course you can write a bad benchmark. Of course JS will (eventually, maybe) get more updates that makes it more in line with wasm. That doesn't mean people aren't using thinking like what I described to not like js or like wasm. There's definitely people that don't like JS for its specific set of quirks, and want to use wasm for the performance. You can add nuance, but they probably wouldn't hold the opinion that they did if the agreed with it.
Yes, that's true. I should have been more clear. I was referring to `parseInt` guessing what radix the number was in (hence doing more and being more unpredictable).
`===` especially.
Visual Studio != VS Code
All of those cases make sense to me.
They're Just out of date with js. I like js a lot, but I wouldn't use js on the backend for technical reasons, and wasm sounds amazing, but frontend without js is yeeeaaaarrrrs away. 
A lot of folks dislike the nonsensical needle and haystack ordering.
I used C++ and C# for many years before I got heavily into JavaScript for the past several years. JavaScript has advantages but also disadvantages. There's a few reasons why I think that people feel negatively about JavaScript, especially when they are starting: In some ways, JavaScript is harder to use than many statically typed languages. Its also slower and uses more memory. People have a steep learning curve to deal with callbacks and promises and then on top of that there is no static type checking. So that is a bad experience for people when they come from the compiler checking basic things and then try to program in JavaScript and start getting runtime errors from typos. Which means then they have to rely more on TDD etc. which is adding more work that they don't appreciate. So faced with these challenges, people can either say, "well, this is a lot to learn and kind of hard" or they can just say "JavaScript sucks". Most people would rather just say the language and/or tools are bad than admit that they have a lot of learning to do or that it is just harder in some ways. Another thing: by just looking down on JavaScript and JavaScript programmers, they don't have to admit that there is any useful skill-set missing from their repertoire. People are always looking for a way to feel superior. A similar thing has happened with NoSQL. I used relational databases almost exclusively for maybe 15+ years but was happy when NoSQL came around because I realized that most applications could run just fine on non-relational dbs and I didn't have to deal with the same old problems anymore. But people would rather think they are superior for knowing SQL rather than admit that NoSQL systems can be useful. However, for many use cases, the advantages outweigh the disadvantages. The fact that there are no types means that your code can be shorter and more readable. It also allows you to code in some more convenient ways such as easily using JSON and dynamic objects. Also, browser APIs are very comprehensive and well designed. In addition, despite all of the negative feelings about bloated dependencies, npm code-reuse is amazing and much better than most other platforms. 
I hated JS for the longest time. After ES5 and ES6 dropped I had nothing much to complain about. I've moved to TypeScript, Babel, and forced ES5 for clients and for the most part haven't had a second thought to it. PHP and JavaScript have a similar if different legacy and accessibility problem.
Every language is hated by someone because no language can perfectly solve every problem for every developer. Ignore the haters, learn other languages, and use whatever tool is best for the job.
There's something if a stigma against JS as if it's not a real language because of its (lack of) pedigree and some silly flaws that have been around since the language was written. The two combine to make JS low hanging fruit for programmers who feel a need to malign something they're not skilled with, feel threatened by, or both. The evolving ECMAScript spec is making JS harder to jeer at with every release, with C# developers (a particularly vicious lot, in my experience) having their weapons taken away with tools like async/await, strong typing with TS and advanced IDE tooling being made available. JS is the most popular programming language on the planet now, and that scares the hell out of a lot of snobs with advanced degrees that have to compete against autodidacts that learned JS on the job, then turned into solid engineers based off their enthusiasm for the technology. Pair that with the largest open source ecosystem where you can find a library to do nearly anything you need in a few minutes and you get a lot of irate academics. 
I think this is a myth. Or at least overblown. Devs like to rib each other, as in any profession. It's about using the right tools in/at the right time. For those bitching about devs acting"old", just wait. 
&gt; Nothing wrong with PHP since 7 dropped. Now that's just not true. PHP is better but let's not pretend like it has no more issues worth talking about. Inconsistent parameter order for built-in functions, lack of proper namespacing for most of the standard library, primitive types not being proper objects which means we're calling `strlen()`all the time like it's still the 1970s (the 12,000 different array functions fall under that same umbrella), inconsistent case insensitivity between syntax elements (function vs variable names) that is ignored by reflection, per-file `strict_types` that is also ignored by reflection, lack of proper covariance and contravariance, errors vs exceptions is still a thing, and no doubt others I can't think of at the moment.
I dunno how the heck you're going to retrieve content dynamically in a partial view without eventually writing some JavaScript. I mean, the helpers are good, but they're not *that good*. 
I dunno how the heck you're going to retrieve content dynamically in a partial view without eventually writing some JavaScript. I mean, the helpers are good, but they're not *that good*. 
I dunno how the heck you're going to retrieve content dynamically in a partial view without eventually writing some JavaScript. I mean, the helpers are good, but they're not *that good*. 
Yeah, I did move forward, no longer using PHP.
Because it's fun to hate on stuff. First of all, everyone hates PHP. Not everyone hates JS, but, well, most people do. Do you know why? Because they *use* those languages and get frustrated. I happen to like JS a lot, but it has its quirks and limitations. Look at a chart of what's `==` to what. `"0" == false` and `"" == false` but `"0" != ""`. What a mess! HATE HATE HATE! It's fun to hate! Instead of taking it personally, you should just learn to hate it too. That's what all the cool kids do! (I mean, I actually like JS, but hey, making fun of it is still worthwhile.) It's not that people think it shouldn't be used. We all recognize that JS is pretty much mandatory these days. But I'm sure a lot of people wish there were other options for coding on the web. (No, not WebAssembly.) PHP... PHP is a fucking monster. I use it. It's got archaic sigil syntax, which is... fine but archaic. And then it has really inconsistent function names and signatures. It's not obvious whether the name will be camelCased or snake_cased, and it's not clear which parameter should be first. In JS if you want to push something into an array, you do `arr.push(thing)`, but in PHP, you do `array_push(arr, thing)`... or it is `array_push(thing, arr)`? I don't remember. And God help you if you leave out a semicolon, because everything will crash and you'll be lucky if you get logs telling you why, because you have to fuck with a bunch of settings to get anything to show up at all. (I guess if you use an IDE, this problem goes away. I don't use an IDE for PHP and JS, though.) Despite PHP being a fucking monster, I still use it. I just kvetch about it while I do, because I'm a developer and developers kvetch.
Inconsistency across array operators? 
C is a good choice, really small language.
Yup. JavaScript the language has matured quite well over the years. A ton of the problems went away post ES5. But, as you said, the ecosystem is a dumpster fire. There are so many lessons other languages have learned about dependencies that the js community appears to have totally ignored. The size of many dependency trees for popular libs is crazy. That alone should scare any experienced dev.
Typescript yo
So because I am a programmer, I should not code in C? Because, you know... C is so fucking old, who uses it nowadays right? Oh wait... Is node built using c or c++?
Ah thats part of exactly what I find frustrating with with php! I find js function signatures a lot more intuitve. The native php api is just annoying to use and I didnt know why, googling your wording just verbalized it for me
It's not about learning the language. It's just always been a bother with how different it is. Before node every web dev needed at least two languages, and while it's easy to step between a lot of them JavaScript was just a different world. It's better now though. It's been tolerable since es6 and has been getting better ever since. 
Once you start using TS, I think you have the right to bash js because it's so much less dev friendly (with small projects being the exception as compiling can be annoying)
Typescript is a js superset yo
Are you intentionally misrepresenting my point or did you not read carefully? &amp;#x200B; Show me exactly where I said to not use older languages... &amp;#x200B;
Honestly, with how fast the HMR tools are, transpilation of TS -&gt; JS is trivial now. The only irritation I have with it is using JS libraries without TS definitions. But, good ol' `any` saves the day in that case.
I like javascript but the no types and lack of standard library makes it just not very good. But I like the freedom it gives you in structuring your code and also the ability to write “functional” code if your heart desires. Also since every browser has a JS engine it is literally THE most portable language ever.
But is it not typed? 
It can help to prevent runtime errors yo 
It is typed But it isnt js But it is But it isn't
I don’t hate JavaScript in fact I like it and it’s versatility. But what I do hate that I subscribed for JavaScript news on medium and I *constantly* get articles on how to utilize Array.map or the spread operator. Is that’s what’s really important to the community?
Would be nice if they did a breaking change major version, alas.
most devs hate the DOM and not JavaScript. The DOM is implemented differently across browsers, and before the advent of solid polyfills, web programming was a considerable nightmare. A lot has obviously changed, but old scars are tough to mend. 
This is one of the most biased subs you could have chosen to ask this question, which makes me think you are more interested in stirring the pot than getting a good answer.
Word
1. According to a recent stack overflow survey, it's second most loved language behind python. It's probably just that the people who don't like it are louder. I'm not a fan of java or objective C. I don't go out of my way to bash them. But hating js is a meme, so you can mock it for karma and retweets. 2. The hope in web asm is interesting. If it's a transpilation target, you can do that with JS right now. If it's the types and stuff, you can do that with TS right now. But I do think you might be unfairly generalizing about anti js people at the end of this question. 3. JS has strengths and weaknesses. Want to do a bunch of things at once, high concurrency, js is great. Want to do computation? Pick something else. It is the best performant language in the browser, which is probably the best place for it. Every language has its place. Doesn't have to be java vs js (for example). Use java when it makes sense, use js when it makes sense. Simple as that. 
It's typed, of course. It's weakly and dynamically typed though.
Ya, seriously, everyone still shits on PHP, but they’re mostly always just shitting on php pre 7. Wtf? 
That touches on an important point, I think. Lots of devs feel like they're forced to use JS, because web applications are super popular and JS is really the only option. Or was, anyways. I suppose that's changing, bit by bit.
Before I say anything, I would first let you know that my opinion is shared among diferent teachers at my university. I'm currently at a last year of an ICT engineering degree. &amp;#x200B; That said, here are the reasons: &amp;#x200B; 1. **The ecosystem is not correct**. Javascript ecosystem is changing too fast and in too many diferent directions. NPM is a mess, bolated code exists and a simple library will already require tons of MB. Babel, the most used JS compiler, is built using JS. Because, you know, you can basically compile any C99 app faster than a console.log(). When a company develops a product, it expects it to work for so many years. Imagine building a millinare application that rules an entire city traffic lights and everything and find that's basically unable to operate 10 years later because the ecosystem has changed dramatically. 2. **The language specification is hard to follow**. The issue however, relies on the fact that although a standard exists, the browser is responsible to the JS interpretation, this introduces so many issues, first, diferent interpreters exists and this makes the job hard. Second because that means that each browser will need to constantly update the JS parser every year, considering that yes, each year from the last 5 years new additions have been made to the language (arrow functions, imports, array deconstructors, classes, ...) Don't get me wrong, those are great, but JS from today is a diferent language than JS from 5 years ago. 3. **The JS developers are egocentric**. Yes, I am also a JS dev and those does not appy to everyone. This is the only explanation I can find to justify the fact that to solve the same issue (rendering stuff on the browser) there are at leas 100 frameworks for it. Yes, look for them, there are other non-react and non-vue and non-angular frameworks. Do they all work? yes, Do they all solve the same issue? yes. Few efficient C compilers exists (most known are gcc and clang), imagine what could have happened in instead of having those 2 compilers, each diferent company used it's own C compiler. Do you think it would have the same optimization level? This is what happens with JS. Hey look, I made a faster virtual dom, hey look my syntax is more user friendly, hey look... Never ending loop. Everyone pretends to do things better instead of fixing the actual shit. 4. **The JS expansion**. JS is trying to expand to areas where aparently, it should not. Le'ts first start from the fact that JS developers decided that it could be fun to open a browser in a phone, render some HTML, CSS and JS in that browser and call it application. Yes, it is an app, no it's not how you should build it. It's one of the fastest ways to build a mobile application and to consume the phone's battery and resources. Faster computers makes programmers lazy. Do you, as a JS dev, care about memory usage? DO you, as a JS dev, care about performance? If so, why would you ever use any tech like Cordova, react native, etc? Why? Because you don't know Java or swift? Because it's cross-device? Knock Knock, Dart here, solving the same issue at native speed. Next, the desktop. Yeah. 50 MB of electron + 10 MB of app (1 MB of your own code and 9 MB node packages) to deliver a poor performant application that hey... renders some HTML, CSS, and JS on the user screen. Have you ever considered... Ultralight (the most modern)? Or the other alternatives used before to render HTML UI using FAST and NATIVE software like C / C++ / C#? Hell, now I even saw a post here about some IoT using JS. What the fuck? And arduino uno have 2K memory. 2K memory to store fucking variables. You CAN'T even send a full HTTP request with it, why would I ever be interested in fitting an interpreter inside a IoT device or a JS to AVR compiler? 5. **JS is solving issues created by itself.** This feels like a hurt me but heal me statement. HTML and CSS exists since the web was born. They allow you to render stuff on a web. Cool. DOM's JS api exists to change elements on that HTML. JS creates Jquery as a fine replacement to this long api. JS thinks that it can be faster. JS creates Virtual Dom. Hundreds of frameworks using virtual dom to render elements (that can be done using html and dom already). JS creates SPA because using a traditional TCP architecture on the server is messy and slow to make simple change page actions (HTTP's stable and evolving protocol is already solving this issue with HTTP/2 and HTTP/3 using server push). JS find it dificult to compile with SEO and long page loads. Js creates SSR (server side rendered apps) that are basically... You guessed it! traditional TCP servers serving files like a normal server would do back in 10 years. You can now server you perfectly cool react website under an amazing self recursive architecture. 6. **Bad defensive statements**. Motst JS developers would argue against using PHP, Ruby, Python etc because hey, they are slow buhhh. Hey don't dont have a good concurrency model, etc. You know, node is Js and JS have a fancy callback system to use some cool concurrency. Let me introduce you to Go and Python's async. and btw; Go eats node's ass in concurrency and speed. People saying that they use things like electron or react native to speed up developmet are wrong. Most likely they might be a small speed up but the issue here is that it's cheaper. You want crappy software made faster? great! Let me say I do not. I would rather make a good C terminal app in a week than a fancy animated, colored and using some emojies terminal app in js. 7. **Trends.** Yes, trends. Did Jquery solve the issue? yes. Did ember solve the issue? yes. Did angular solve the issue? yes. Does React solve the issue? yes. Will &lt;inser\_next\_trendy\_framework&gt; solve the issue? yes. Js devs release new software and outdate the other. That's why I said that a software built today will probably be obsolete 10 years onward. This goes against the phisolophy of the unix ecosystem and any software pattern. 8. **Not everything is bad.** There are some projects trying to emerge from the surface to let the JS comunity realize they are in the wrong path. However, due the trends issue is fucking hard. There are lightweight alternatives to React solving the same issue if you like virtual doms and those things. Svelte for instance, compiles your Js into small reusable Js components. Turns out svelte is one of the fastets performants, have a similra api as vue and is one of the smallest frameworks (in MB) once in production. There are projects to replace NPM with a more lightweight and controled way to use packages. There are projects that use Rust to compile JS (babel replacements). That said, I must say I code in JS as well. This is not a hating post, they are true facts, either you like it or not. It's hard to understand why a modern 2019 website have to be the same size of windows 98. There are no justifications for this. Additional readings: [https://tonsky.me/blog/disenchantment/](https://tonsky.me/blog/disenchantment/) 
That's not a syntax issue.
`["10", "10", "10"].map(Number)`
&gt;Boohoo, you're a programmer, the industry shifts, technology improves, tools change. Programmers who fail to expand their tool-belt will make it to 50 and find themselves struggling to find work Can I find work as a C developer? It's 47 years old. Who would use C? nasa rockets should be built using node because it's the new tech.
Because they probably never bothered using modern JavaScript with ESLint or TypeScript. Without one of those two tools, JavaScript actually sucks. And ES5 sucks.
A structured way to submit an entry would be nice. I don't use Twitter so I'm already out of the running.
TypeScript if set up and coded properly is the same if not better than other languages.
I see, good to know that. I’ll have to figure out a way! 🤔 Meanwhile I guess that people could send me their submission by email? ☺️ Or this would be a bad idea? I could also add a google form specific to this.
Ahh, so you are intentionally misrepresenting my point. Thanks for your vapid contribution to the discussion.
VS code offers to generate types, often just function signatures with lots of any types, but modifying it from context/docs is so easy. I tried Typescript before @types became a thing and it was such a chore to get types and setup tsc. Now it's dead simple especially with babel and besides one off things I'll run with quokka, I don't see myself going back. The intellisense with it is a game changer and I'm so glad I switched this year.
```python # python def foo(bar=[]): bar.append(42) return bar foo() print(foo()) ``` ```ruby # ruby def foo(bar=[]) bar &lt;&lt; 42 bar end foo puts foo ``` ```d # d foreach (i; 0 .. 3) { writeln(i); } ``` ```ruby # ruby (0 .. 3).each do |i| puts i end ``` Can you tell me which one is non-standard?
That's a feature of not being strictly typed, not syntax. Next?
When an stream walks in with an itty bitty memory footprint and a circular buffer in your face you get sprung.
JS, TS.. VS Sound like the end of a car ad
To me that doesn't seem to be an issue so much with javascript as it is with everything that has sprung up around the language, a la Node, etc.
at least it has a standard lib /s
This is all so true. I can't stand always having to look up which parameter order `explode()` uses on the rare occasions I have to use PHP. It's also more jarring than it should be that all of the c_style_functions are now intertwined with the newer Object Oriented stuff. 
Thank you for casting
In my experiences it's because developers a.) either haven't used 'modern' javascript or typescript or b.) there is this preconceived notion that javascript is supposed to suck so they continue to just perpetuate it. In my undergraduate Software Engineering program we had to use javascript for like half a semester, and it was all basic jquery stuff so I think a lot of it is inexperience. I recently joined a new time that is using a Java/Spring backend with a frontend all done with jsps. We are currently in the process of rewriting the front end using typescript and angular and everyone really is seeming to love it. It seems like once they actually get their hands on modern tooling they can start to realize the strengths of it. Personally I use node for the server in my personal projects, with a vue frontend. At work I'm totally fine doing a Java backend with an Angular frontend. Different tools work better for different teams, projects, situations, etc. Try to surround yourself with people who are open minded. 
A bad feature that basically no other language has adopted because of the errors it causes.
It would be pretty cool to submit them on site and then have a list of submissions on your site! But that sounds like a lot of work. So yeah, Google form or something would be nice.
No, programming is a cinch. Trust me. The programming is easy, the data structures and theory part of it is hard. Some of the object oriented concepts or things like references and values may be difficult but once you get it, you'll be fine. Trust me, programming is a GREAT skill to know and the entry difficulty isn't as high as you'd think. If you're nervous there are bountiful resources and tutorials online to start you off with vanilla JavaScript.
I was at a JavaScript conference in London last year and Douglas Crockford was giving a keynote. At the end he took questions from the audience. The last question was something along the lines of: “You’ve been talking about the future of JavaScript for an hour but you did not mention TyoeScript. What do you think of it?” Crockford replied with “TypeScript exists to solve problems I don’t really have.” Pretty much summed up how I feel in one sentence. You can say what you want about JS, but I dispute your assertion that using TypeScript gives you the right to bash it, because TS strikes me as a total waste of time designed to lend comfort to people who started off in Java or C# and have trouble with JS. And before the inevitable responses, yes I’ve used it. Yes, I’ve used TS on a nontrivial project with a medium sized team for over a year. All it did was slow us down, even with VS code support doing a decent amount of the lifting. 
Aparently JavaScripts "far edges" are pretty damn close then.
JS is an ugly language with a horrible syntax and a crappy STDLIB. That's why.
I’ll consider doing that on my website! ☺️ I’ll add a new page where you can find all the submissions!
Because developers using languages that require a compiler are typically uncomfortable and uninterested in doing anything front-end related. 
I'm not sure what your point is, here, to be honest. All three languages have a `map` function, all three operate on at least enumerables, all three take a delegate with one input, and all three return an enumerable comprised the return value of the delegate called for every item in that enumerable. For all three of them, if you want to `map` with index or other stuff, you do something else that isn't `map`. 
It would help if you offered your goals: what do you want to be able to build? If the answer is relatively simple pages and sites, jQuery is a very powerful library worth considering. If you want to build full fledged web applications, also known as the "single page applications", then you should learn a major framework. I'd recommend Angular 2, React, or Vue (and personally, React, but all three are good). If you want server side learn Node and Express. If you want mobile learn React Native or a similar phone-bridging solution like Phonegap.
I was really surprised a couple years back, after like 12 away, to see the evolution of PHP. I mean it's still super easy to write godawful PHP code, but the language, tooling and especially practices have matured tremendously from the bad old days. Much like JS I guess.
&gt; The best programmer looks at those trade-offs to choose the right tool for the job. The best tool for the job of running code in a browser is currently JavaScript. That doesn't mean its a good tool or that we can't complain about it.
It does dynamic typing (in my brief experience) far worse than other scripting languages (E.g. ruby). That’s why I don’t like it very much personally. 
After 5 miserable versions, you expect people will just make a switch from whatever programming languages they used in the past years? Nice try, but no.
You seem very full of yourself
The ones I hate the most and always forget the parameter order of are `array_filter` and `array_map`. Like... why would they have different parameter order?
You know ‘${whatever}’
Anecdotally not true for me. If you have some non-anecdotal (read: statistical) sources I'd love to read them. First language I ever learned was Basic (various flavours) then batch then C/C++... then a whole bunch of others. The language I like the most is probably about the 10th language I learned.
1) Javascript can do most of what those other other languages can do, but it does it all poorly. C#/Java - These are great for large projects because of corporate support, stability and type systems. They look at JS and wonder how anything bigger than 100 lines doesn't crumble under its own weight or the weight node_modules. Php - Anyone dumb enough to like like this will irrationally lash out at anything so of course they lash out at JS. Ruby - All the flexibility of JS except it is elegant and intended for functional programming, then they use the 12 million functional libraries that have been release for JS in the past week and struggle to find one as nice as the core Ruby language. C++ - The JITs in modern JS runtimes are super fast until you compare them to a compiler with 30+ years of optimization and realize that JS has only done the easy and is still about 20 years on the performance front. This language also has a really good type system system to catch a ton of bugs before runtime. 2) WebAssembly allows them to not have to learn inside out (From their perspectives) semantics of JS. They are use to their languages and want to catch errors the way they are familiar with. If the browser is just another API or library, and WebAssembly almost promises this, then they get to keep most of the hundreds millions of lines in existing libraries and workflows. 3) Javascript does have really good performance compared to its older iterations. C# and Java have the benefit of a classical compilation and a JIT stage both of which add optimizations. They both alos have stronger type systems which also allow more aggressive optimization during compilation (if a function only accepts a certain type then the case for other types don't to be in the compiled code). That said there is often little difference for common workloads. Java and C# have sophisticated mechanism for thread safe containers and threadpools, but not as many tools for hiding latency. Thread tools can deal with latency but it is like use a cruise missile to light a cigarette. C++ and Rust are at the top of performance and blow JS out of the water, but they do cost more development time. It is not like it used to be where C++ was 100x faster and took 100x as long to write. Now it is more like C++ is 10% faster for trivial tasks because there is only so much optimization that can be done to a microbenchmark. C++ is something like 2x faster for most interesting work because the JS JIT has less time to operate while ahead of time compilers can take all day. C++ might be 1000x faster for specific GPU bound workloads because spawning off and map/reducing the logical equivalent of 10 thousand threads is not a strong point for JS, and takes like 4x longer to make in all cases because while JS has gotten faster C++ has worked its ergonomics. C++ also has access to native threads (even in its standard library) and is a powerful tool for making complex threading strategies. This is the language of choice to leveraging all the conventional CPU power in multicore machines. Javascript's event loop does allow for asynchronous IO bound tasks to seemingly melt away. It is great at this, but not much else in the way of threading. This maps very well onto problems that reach out to web APIs often, something that the threading tools in older languages don't make easy but can be handled by experts.
You ought to specify where you're having trouble then we can better help you. That site seems to be an ES6 course... what parts of ES6 are you not getting?
Relevant username.
Start using typescript (like I mean REALLY use it properly) and you'll start to understand the limitations of pure JavaScript. That being said, JS is powerful, and gets the job done - it's just not exactly an elegant language, and maybe a little too flexible as to encourage bad code.
Don't worry it isn't just javascript. Welcome to the Earth where everyone hates everything for no particular reason.
Appreciating the beauty of each programming language goes with maturity - as a person and as a developer.
Hi Engagetoaster - Thank you for your message. I feel you. My colleagues used to do the same. Sometimes they were right and sometimes they were wrong. You should take it case by case and see what makes sense for you. In terms of pragmatism, if all you need from a framework is the rendering part, then this solution my be worth checking. You can create a method and then share it with your colleagues. Now, if you NEED more than 50% of jQuery, maybe there is a point in using it. Nowadays JS evolved to a level where you can achieve the same things in vanilla js without much of an effort. That being said, in my example I tried to optimise every bit as I am rendering 10k elements. In your average Single Page Application you may not need the same speed so using templated strings would make more sense. I use them too. I hope this helps and maybe sharing my post with your colleagues will start interesting conversations. Take care and have a great day. Keep coding and having fun! JJ 
It looks to me like \`self\` isn't bound in addEntry. Maybe you meant to do: let self = this; ?
Do you mind explaining what this does in JS? Also why do I have to define a variable and its type separately? I tried this but it's still showing addEntry as undefined. 
You should already heard this phrase somewhere "The more people hate specific language and the more declare this language downfall" the better the language because more people use it.
If you say so, met a lot of Developers who just get to overwhelmed by JS and its ever changing list of frameworks/Libraries that drive them away from it.
\&gt; At last i totally lost Means what???? Beside of learning a programming language you have to learn to describe und break down a problem - in this case YOUR problem.
I know C# and JS. My 2 main languages and i dont hate either of them
\`this\` refers to the context of a function call: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) So you can do this: let object = { key: 'value', action: () =&gt; { console.log(this.key); } }; object.action(); and you'd see 'value' printed in the console. Also you're having to define type because you're actually writing TypeScript in your example. [https://www.typescriptlang.org/](https://www.typescriptlang.org/) It wasn't clear from your original post that addEntry was the var that was reported as being undefined. This is probably because of the scope that your framework provides to render your HTML template. I'm not familiar with knockout, but this looks like the relevant documentation: [https://knockoutjs.com/documentation/click-binding.html](https://knockoutjs.com/documentation/click-binding.html) What you're doing seems to make sense, so I'd make sure that your file is loading correctly and not encountering any syntax errors
A lot of it depends on your background in writing code, and working with/for the web in general.
JS is my absolute favorite language but I'm still missing static typing. TS sounds like a good step forward but I'm not a fan of additional build tools/transpilers, especially because we're using V8 extensively outside browsers and wouldn't want to integrate a transpilation step to everything we dl.
Yes,thats where the troubles start.As long as i'm watching tutorials i understand everything but when i start to solving problem or making a project i'm start to panicking... 
Yeah I'm using VS Code and it's only showing errors when I'm running the HTML file on Chrome. I just need help with changing the variables inside the function :(
wow. I'm trying to learn p5 now using that YouTube channel *The Coding Train*. Love the framework. Its freckin awesome with so much capabilities. Unserrated framework. Better than many out there.
Yah man❤️ I also learnt from there 
Specially the destructuring object...because i before learned something called object constructor which include function but this destructuring is different... 
Lol. You're using chrome, edge &amp; opera at same time. Where is Firefox? Lol
I really want to be a front-end developer and i love javascript and react, even if go for back-end i would probably go for node and express..
Hahaha🤪 many localhost are running at same time
he must have copy pasted that from a 14 years old thread somewhere, hence the wrong syntax
First lie is that you learned everything. There is no developer in existence that knows everything. Try building a to do app using class components in react js. Then do it again. Then make it better. Dev is a constant evolution and all about exposure. Coding languages are similar to linguistic languages in the fact that you can't learn a bit of lingo and claim proficiency.
First lie is that you learned everything. There is no developer in existence that knows everything. Try building a to do app using class components in react js. Then do it again. Then make it better. Dev is a constant evolution and all about exposure. Coding languages are similar to linguistic languages in the fact that you can't learn a bit of lingo and claim proficiency.
I will argue TS wasn't made to give some people comfort, but as a "plugin for visual studio". TS was created because that enables MS (and other big corps that adopt it) create dumber parsers, compilers, style checkers... in short, it's an easier target for tools. That's the reason big companies actually push for static languages, not some developer comfort, that's easily solved by bashing dynamically typed languages and people who use and like them. 
It's not the compilation time problem with me (e.g. C# one is even slower), but the cognitive overload, the mental gymnastics of having to deal with all those types, extensions of classes, implementations of interfaces, hierarchies of inheritance, union types etc. Mainstream static languages seem built for compilers (software program), not for people to use. A good static language might be Python (don't quite know it is mainstream or not), and certainly Haskell with the smaller number of well defined types that are generic enough but composable in order to solve the problem at hand. Admitedly, people are used to C style syntax, so that's always a hurdle, a barrier of entry, or a put off to leaving certain mainstream ecosystem. What was the TS selling point? "Like JS but better"? And what was JS selling point? "Like Java but easier"? Well... that's marketing and sales for you.
Wouldn't it be fair to say it has two given how many things do the same thing 😂
Aussie here and I’ve read every comment without any trouble. Shouldn’t have slacked off in school mate and learnt to read property 😂
Let me repeat my first question with your same logic: All the three script languages support default arguments. But Python works totally different way from others. Python has a very non-standard default arguments &amp;#x200B; Some languages use `..` as range operator with different flavor. Which will make Ruby non-standard or D non-standard. &amp;#x200B; There is no such standard in languages world. Only preferences. 
Start now and you'll have your answer.
Getting started with programming and getting reasonable results quickly is easy. Being good at programming is hard, though. It's hella fun but one needs to be willing to actually learn for it. But it isn't "really that hard" as it might seem for someone who never coded. Yet, thinking of our past trainee, it is more than just copying snippets from StackOverflow together. 
You can also have runtime errors in the typed languages. Probably less, but it's not error free once running :)
I spend far too much of my life digging through god awful javascript written by third party developers. It’s too often used as a band-aid to cover up bad code. I’ve got no issue with the language itself I’ve just got an issue with how I see it used day-to-day.
So I recently took over lead on a project that was going to have a lot of new code. The existing app was all Node stuff from years ago, and this was an opportunity to pull the "let's rework everything". I demanded Typescript for two simple reasons: 1. The developer resources available to me were well-versed in node, and the general javascript ecosystem. The transition to typescript has been much easier than to some other language like say, Go or Python would've been. 2. The strictures and verbosity in the code itself make working on a team with people of varying skill levels much, much easier. This cannot be understated. Number 2 is really the big one, though. Anyone can learn a new language enough to get going. But the (sic) strong typing in TypeScript means that during development and code review processes, the developers can lean on the language more to ensure they're doing the "right" thing. The biggest challenges we've had have been around the various "gotchas" that transpiling always causes, but we try to stay ahead of those and the team is small enough that we've not run into any major issues -- yet (fingers crossed).
I've always preferred the DevTools in Firefox (back to the Firebug days and before), so I was the odd-one-out for many years. I even suffered through the performance issues because the tooling was so much better (though I guess it's on parity-ish now with Chrome). BUT my team's systems are always thoroughly tested on Chrome *and* Firefox!
I will give it a go. I am super noob though so if I didn't submit it's because the dog ate it...
Ah, right. My bad.
Python isn't types but people don't hate on it as much...
Yeah. Now you're using Javascript instead 🥴
In some cases it's not even better than JavaScript
... which has nothing to do with map, which I was specifically talking about ... 
Haha! It seems that your dog 🐕 is also passionate about the code! 😂
If you really wanted that, you could still do that in TypeScript. In fact, there have only been a handful of times that I really struggled implementing something in TypeScript that would've been easier in JavaScript.
They feel threatened cause JS is taking over
&gt;I think the reality of React is, developers think it's the fastest option out there, in many benchmarks it gets beaten by other choices. Right now the fastest option out there if performance matters is Inferno. oh you're referring to [https://krausest.github.io/js-framework-benchmark/current.html](https://krausest.github.io/js-framework-benchmark/current.html). That is not important benchmark. You should use the one which give you best DX. Most apps will never hit a perf issue unless developers fight against their framework.
&gt;designed to lend comfort to people who started off in Java or C# And that's unlikely to change. I'm not even saying it as a good or bad thing, just as a fact of life. There are people who understand and accept JavaScript for what it is, and people who don't. It takes an effort to accept that maybe a language that was designed without strong typing might be able to work fine without it, or even see it as an advantage. Most people who come from other languages don't make that effort. It's easier to use a tool that lets you pretend it does, to take refuge in a familiar concept.
and which totally makes no sense
Let's stay civil. Of course there are still C programmers needed, and many are probably paid very well. That said, it doesn't seem that C is anywhere close to the top languages when you look at the list of job offers.
&gt; ["10", "10", "10"].map(parseInt) Only someone who doesn't have a clue how parseInt works in Javascript would expect to get 10,10,10. If you haven't read the docs, can you really blame the language for that??? I see the same kinds of arguments frequently be made to attempt to make Javascript look "quirky" when it's really just someone not bothering to learn some of the most basic parts of the language. 
[removed]
The Coding Train is the place to learn creativity with JS. I love the guy!
[removed]
One of the projects I write some tools for is a fairly simple React Native application - May as well be a website. 7900 packages 
hahah your teachers are full of shit. Seriously, I would take all of this you typed with a grain of salt because none of it is really true. I mean it's all really garbage information you've got there.
I recently dabbled with the same project (star field), but with plain js. Fun thing. So different from the daily business :-D What I could not find, though, was any tutorial or example on making the star field ‘bend’. It’s always full speed right ahead. Can anyone point to anything that makes it possible for the star field to follow a arc or something? Something making it look more like a wormhole maybe?
I think you need some sort of data structuring such that: you need a WorkingHours array in which each array slot corresponds to the minimum duration service this worker can do. And based on knowledge of the start time for him to work and how many working hours he should work and what services he does and what are the duration for each one , you can then build this array. interface Worker { WorkingHours:WorkingHours; } interface WorkingHours { timingSlots: TimingSlot\[\]; } interface TimingSlot{ from:string; to:string; engaged:boolean; // when you reserve this timing slot set it to true, will help you to know which time is already used } &amp;#x200B;
Hi /u/ValuecoderOffical, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah, Daniel Shiffman is a really cool guy. 
How the hell can you say this and not get downvoted into oblivion? This is exactly what I've been saying for years... but man, the hate I get...
I would love feedback from people. I find this to be a really tricky area and part of my motivation for writing was to improve my own workflow based on other's remarks.
Isn't #1 an argument for _staying with_ Node / POJS? I can't see how the fact that an olympic swimming team knows how to swim is a good argument for them to take up whitewater rafting...
The problem is not JS, the problem is that JS people is trying to scape from browsers. I mean, Node is a cool experiment, but its that, an experiment
Well, i mean, the thing is that c is hard compares to lets say js. Js gets the job done. C is not used by web devs etc. If you know c is because you're probably an engineer with computer science background. Nowadays js and speciallt web is trendy and very used
Typescript is badically a; oh fuk i cannot code in js because of runtime errors, lets create a transpiler. I mesn, the project it's good but, is it really needed? JS is like: can't fix it? Re build it!
Imho, developers with closed minded, the one who prefer to know all about something rather than something about everything, usually hate what they don't understand. I find that the level of hate is worse towards php, coming from js only developers, even though they solve same problems in different ways. 
TypeScript rocks
Neither of these are sound systems.
Op: I found this randomly while googling stuff about React and found this article surprisingly short, concise and to the point and learned something I wasn't aware about React.
Does performance actually suck?
Finally! Some one said it. Too many people argue about the bug catching abilities of typescript. That having types will catch bugs on compile rather than startup (it won’t). These same people are the ones talking about typescript “to solve problems I don’t have.” But they miss the point entirely (I know because i used to be this person). No typescripts (and typing in general) is powerful not because of the static type checking, but because it communicates to other developers the structure of data and objects. In a company with a sufficiently large tech team (200+) this is invaluable. I can glance at some typescript and know exactly what a function expects, or know what the shape of some object should be. And so does the rest of my team. 
&gt; All it did was slow us down and make code more verbose. This seems to happen a lot when people get overly eager with the type system. I feel like there’s a sweet spot with Typescript but finding it can be hard depending on the team your working with. For example, some people will act like you spat in their face if you use “any”. IMO sometimes it’s just simpler to use it and move on.
I dont think that "bashing" another language is a normal thing to do. But I dont like people claiming that "their language" is the best. It also lies within the problem of scripting languages that they're dynamic and don't require proper structure sometimes which results in a bunch of hideous code and codes who never learned the proper basics because their language didn't enforce it.
That analogy doesn’t really work. Valid JavaScript is valid typescript, so anything in the Node/JS world will work in the typescript world. The more apt analogy would be a single Olympic swimmer goes from swimming a 100m freestyle to swimming a relay race. 
I love the fact that PHP wasn't on your list.
From what I gather TypeScript is mostly made because it allows porting parts of C# code to JavaScript quite easily. On a project I worked on we had lots of calculations that we needed to do that already existed in C# code that we could just use in a matter of hours. So I get that but theres lots in TypeScript that I hardly use and for the problems it uses I never really had a problem with that (like mixing types and whatnot). What also doesn't help is that for most using TypeScript is also the first time they use EcmaScript 6+. So that might make it seem like TypeScript is very powerful and very impressive, but most of it is already the new standard.
And lots of libraries and whatnot now also provide a Typed file, which is pretty handy. 
Using TypeScript isn't using ECMAScript. Saying so is either making sales pitch or being already bought said pitch.
Of course they started over in a separate project. Because why not fix the mess they made in the first place. And yet another forgettable new standard introduces itself
For all the hate that PHP gets, I wonder why nobody gave it the typescript treatment. Make up a language that fixes everything they think is wrong with PHP and compiles to PHP's binary format.
So would you rather have 7900 packages do 7900 things or 5 packages do 7900 things?
You can already do a lot with linting. And JavaScript is made so that it doesn't halt with every possible error because thats part of how the web works.
Can't be understaded? You demanded? FFS. I inherited a project in React + TS started by someone like you. It was a pain to deal with, instead of focusing on making good tests, I spent the time making the compiler happy even when the data was good (didn't accept the types). I did what I could, and I can deal with static types, but then had to hand it off to some one new, learning everything for the first time. Guess what, they put ':any' on everything. Static types are too much of cognitive overload when you can catch the same problems with just proper testing.
The PHP devs don't feel there's anything wrong with it. They're just interested in adding new features, not changing any existing one. There are plenty of patches that would improve quality of life for PHP users that don't even break compatibility and they sit ignored for years on end. On the very rare occasion they pick one up they seem intent on choosing the most asinine implementation possible.
'Cause haters gonna hate.
It's probably abused. Overly complex type hierarchies etc. The argument against mainstream static type languages is the same as mainstream dynamic languages: they've implemented some things wrong, and those things are now an excuse to jump onto the other camp... In reality, fewer well defined types is what we need, regardless if dynamic or static. Check how Haskell works, for example, check how Ruby or Python work. There are some nice principles there being copied to mainstream, but with limited success because of the baggage.
&gt;https://en.wikipedia.org/wiki/TypeScript &gt;TypeScript adds support for features such as classes, modules, and an arrow function syntax as defined in the ECMAScript 2015 standard. Which is wat superseded ES6 and was used to show people what the future of ES was all about. &gt;TypeScript is a language extension that adds features to ECMAScript 6 So what now?
It's not a strong typed language. At some point you have to realize that.
Because they're not forced to use it.
I don't buy that argument. Typescript's type system is incredibly weak (because after all, it is javascript in the end). This fact alone makes it incredibly easy to duck type. Its incredibly easy to make "fewer well defined types" in TS.
But no1 does it. That's the problem. It's an ideological, not practical issue.
Gross generalization. People dislike some parts of JS (and other languages) for good reasons. That does not mean they won't use the language if there is no better alternative. However, nowadays, JS is hardly the best tool for any job.
A superset isnt the same set. Did tou reqd what you wrote? If it is a superset it means it is something else.
First thing that struck me was wondering how you can mandate specific module versions. Perhaps as part of the module URL, but I'd hate to have to hunt down that URL everywhere it occurs. I really don't understand why rebel against package.json.
That's only surprising if you've never looked at the docs for map and parseInt.
Except that's not the signature for either function. The signatures are perfectly compatible, even with static type checking. This is simply a case of the programmer not being aware of how they work.
&gt;If you did not know javascript Case closed.
&gt; 1) Why there is so much hate toward Javascript from other kind of programmer C#, Java, Php, Ruby, C++ etc ? Because the core of JS, as a language, could have been much better designed. On top of that, in the past, support was a mess, there weren't good frameworks, nor good tooling. And people had to use JS, there were no alternatives for web development. &gt; 2) Why most programmer from C#, Java, C++ and other language put all their hope in Web Assembly instead of learning JS ? JS can be in the backend and threaten their language / job / framework ? they learned OO and they can't think outside the box or learn something new ? No. It is mainly because some of those languages are combinations of: typed, perform better, are properly designed since the beginning, have bigger/better libraries available (either standard or not), etc. &gt; 3) How's JS performance today compare to the others tech stack ? (interpreted vs compiled, single thread vs multi-threads etc etc) You cannot really have threads in JavaScript (Web Workers are the closest thing you may have). Further, with a language like JS there is no way you can manage to beat native applications in performance nor in fine control of resources, timing/latency, etc.; specially those written in languages such as C++. That is the reason WASM is so hyped up.
How is it guessing? In this case it was given *explicit* radix, on the contrary.
&gt; Inconsistent parameter order Parameter order as a thing needs to fucking die off. I've made it a habit to use named parameters whenever possible (and in the case of JS, faking it by using an object as the sole argument if more than one parameter is needed), and it makes understanding and using code so much easier. Never have to guess what the fuck that third "false" means ever again.
Hi /u/overcloudSound, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
There is absolutely no relation whatsoever between map and then.
Because one of the things people like about PHP is not having to compile it at all. Skipping that compile step is really compelling, and a lot of JS developers rail against having to compile their es6 code to es5 because it's a constant thorn in their side.
In what situations are you forced to use JS?
To write code that runs in a web browser.
Was that a pun? 😂
Thats not a bug, its just the map function passing params. The correct way would be: [’1’, ’2’, ’3’].map(Number) JS has some, but not many features thats really bad, like the == operator and possible some other minor nitpicks. PHP on the otherhand is full of these weird bugs. For a mindbender check out the date class. Its a piece of art.
- "Why so much hate toward Javascript from C#, Java, Php, Ruby programmer etc ?" - "Well, let me throw all my hate against PHP with a few arguments that are just fashion and subjective problems to me" Ok, well, revamp all primitives into objects and nobody will ever use PHP anymore, will stick to outdated versions not using the primitive objects, and 80% of the websites in the world will fall just because some guys thought it would be nice to be able to do `"foo".length` instead of `mb_strlen("foo")`. You can still encourage or contribute to the RFC that proposes a nice migration path for it though: https://wiki.php.net/rfc/class-like_primitive_types With the arguments you have, I hope for you that you know PHP's history, at least. This is really instructive.
If you have more than 3-4 params in your function, maybe you could separate concerns and split it into other functions. Like, "Hey, I'd like to do `something()`, but in a complete different way because I'll set `arg` to `false`". Make a second function `somethingAnotherWay()` and you drop the argument. Problem solved, and for any language with any argument order or name.
\- There are some very weird and silly low level design choices in the language \- It doesn't seem to have a distinct identity. What kind of language does it want to be? TypeScript makes it look like an OOP language, but it isn't really meant to be and newer standards introduce more and more functional features and React isn't OOP either, so it's a strange fit. (From this angle, ReasonML is a more sensible "evolution" of JS, than TypeScript is.) \- Every widely used tool was invented because of the need to circumvent some shortcoming of the language. Stupid dynamic typing system? Let's invent a language on top of it to hide this. No proper support for importing modules? Here's webpack to concatenate all of your files into one single .js file. Please don't misunderstand. Webpack is awesome and so is Typescript. But if you look at the big picture, a huge chunk of the JS ecosystem is about trying to fix the mistakes and shortcomings of the language.
&gt; Now PHP I will hate on all damn day long. Could you be more specific?
A Java programmer saying that JS is useless is equally as bad as a JS programmer bashing Java, or a Python programmer with C++ and vice versa. Good programmers know that every language has a place and none of them is useless. Maybe for your field/use case is true, but is never a global true you can just say lightly. &amp;#x200B; No matter how good a programmer is in one specific tech stack, if he "hates" (not dislikes) other languages, they are full of bullshit and are no different to any brand/team/music group fanboy. I personally dislike Java, yet I work with it in my company without problem. I wouldn't choose Java voluntarily for my projects tho. &amp;#x200B; A good programmer is good programmer always, not under X circunstances, in Y language.
Nobody said it is. But it certainly helps with things like typos and accidentally passing the wrong type to a function.
Maybe he doesn't want to do 7900 things in the first place...
Why use a modern API with ancient callbacks?
Because it’s more clear and easier to understand.
To be fair, he created Node, not NPM. I don't think he's really responsible for the issues the parent post was describing. I think his approach makes sense; sometimes, it's better to iterate on what you've already created. And sometimes, it's better to create something new based on the lessons you've learn. While I tend toward iterating on what already exists, I appreciate people who push forward and try new things. Without people like that, we wouldn't get tools like Node. Maybe Deno will go nowhere, but when Ryan created Node, he probably didn't expect it to go anywhere, either. 
I come from a heavy PHP background, PHP has a number of issues but so does every language really. I’ve been doing a lot more with JavaScript lately in fact pretty much 85% of my time is in JS land these days. I don’t hate JavaScript (i don’t really love it either) but for me my biggest issue when using JavaScript is not the language itself but the ecosystem around it. NPM and the package driven nature that is modern JavaScript development is a god damn nightmare. Children having hissy fits and deleting their package that you didn’t even know you were using because it is buried so far down your dependency tree. People giving their package over to completely unknown people to maintain who then sneak malware inside of it, which you can’t easily find out about because what you get from your package manager isn’t whats always in the packages repo itself. Things like these are what get to me more then the languages themselves. 
Not really, you're already using promises (without explaining them), why not use the better and newer way? If the article is claiming to be a cheatsheet, it should be showing best practices.
Me too. I tried to learn angular a few years ago with a limited understanding of JS. It was tough. Now I know JS and its common idioms and it’s much easier to use. That said, JS code styles vary a lot. Sometimes devs want to show how clever they are. I don’t see this as much in Java/C#.
Because it’s not better. It’s more noise and gets in the way.
Because promises is more noise and gets in the way of making network calls. There is a reason why adoption for fetch is so low. It’s precisely because of promises.
Because java developers compare javascript from 2009 to java from 2019, whilst JS developers compare javascript from 2019 to java from 2009.
I like the idea of fetch, but hate that you can't call `res.json()` after calling `res.text()`. In other words, when the body is decoded once, it cannot be decoded again. I am aware of workarounds, like response cloning, but it's still annoying.
I have been doing JS since 1999. I am so ready for web assembly. JS was never a robust language. It's fun for quick and dirty projects, but at scale you're going to have bugs and your customer is going to see them in their browser.
I agree fetch api made it complicated which is why this cheat sheet was made to make understanding it a little easier.
Today I would not even call JS "client side," but just "a pretty nice language in itself, that gets used most often on the client side." It is just, imo, a pleasant language to use. In a sweet spot where it is close enough to a functional language to be fun and useful without having to don a wizard hat and go full haskell nerd.
Typescript in practice is full of untyped variables.
So the only syntax I dislike is having to remember =&gt; is JS and -&gt; is Java :)
&gt; The PHP devs don't feel there's anything wrong with it. That is kind of what put me off (10+ years ago). PHP was totally "whatever it does is right," with no specification or plan. One day objects' toString() or whatever it is called stopped getting used in string concatenation. I submitted a bug that turned into an argument between two PHP devs (people who's faces were on the cover of the book) and I just noped out.
Hmm, I'm personally full stack JS developer (node + FE) and I really love JS (try to write code in FP paradigm and you'll love it too :)) Instead in my env we really hate PHP, but again, I really believe that there is only one reason why - we are lazy to learn it :)) 
&gt; it always turns out to be some trivial thing that is never really all that important in the grand scheme of things. That sounds an awful lot like "I always feel I need to justify why my opinion is correct and anything anyone else feels isn't a valid opinion".
It's an issue of accessibility too, people with screen readers won't be able to read the code
I don't think that's all there is though, there's still the continuing inconsistencies and weirdness that cause bugs. https://i.imgur.com/5pFXFbR.jpg
No 
Lack of static typing is a big problem for me. That's also what keeps me from using Python more. Now, I do not avoid dynamically typed languages, I just prefer statically typed ones if I can. And sometimes, dynamic typing \_is\_ nice, especially for small scripts (I use Python a lot for that). But in larger projects I quickly notice the absence of static typing.
No
For his name. This is a low steal title from other prog. language. 
No idea why perfectly fine posts like these are downvoted. I share your opinion very much. 
Certain framework and dependency choices will still let you interact with things that all appear to be statically typed, and you can definitely strongly type almost all of your application code with very little effort.
That's not a fault of CSS, that's a fault of the browser maintainers. 
can anyone explain why the API is such that resp.json() returns a promise after the initial promise resolves? feels pretty clunky to have to .then rice to get the response.
It's hardly the best tool for *any* job? Yeah, okay. 
Can you explain to me how it’s better for someone who’s been used to using jQuery.ajax providing some familiarity using callbacks can be much easier to ease into than dropping them straight into promises. This post is meant to make it easy to get started with fetch not a post about promises.
Should've at least used arrow functions. Makes the first then very concise, as well ``` .then(response =&gt; response.json()) ```
Arguing the semantics of his analogy is pointless, we all get the meaning of what he is saying and that's; why is there the implicit assumption in #1 that the language must be changed at all?
Me too. I still fall back to Java/Kotlin for my large personal projects because I still don't have a good enough grasp on JS to organize it properly in a large codebase. But for small-medium size personal projects I'm pretty much just using JS/TS. 
JS is the hottest language right now, soooo... Not sure what your point is
No, it's a feature you clearly don't understand. That doesn't make it bad. 
If you don't like learning new things I'm afraid you chose the wrong job. You're lazy, that's all.
So you're saying there are people who decided to become web developers although they don't want to work with JS and are thus forced to use it?
Yeah, it's "trendy". It's not like it's great at what it does right? Those stupid people following trends! Look at me, I'm not a sellout, I can use C! That's how you come off when reading your answers, and it's just sad. Why does a person need to shit on programming languages just because they don't understand them is beyond me.
Have you tried Typescript?
That was a lot of work.
There are some pretty good apps being developed with React-Native today. Skype's application shares a lot of the same codebase across Android / iOS / Windows / Browser using their reactxp abstraction. If you can deliver a good user experience at a low cost, across multiple platforms then what's not to like? Having said that, Flutter also looks great.
Honestly I'm tired of this. Like, I mainly code in C++ and JS, and I don't have any problems with JS. I know about all these weird examples but how many times I needed to sum two arrays or two objects? Zero times, I just don't write this code in real life. 
As a full stack developer, using c# at the back end, I've nothing against javascript at all... as long as it remains on the front end where it belongs. :) But seriously, I quite enjoy working in different languages. I tend not to use ORMs because I love writing SQL as well. Perhaps some developers, just many people in many things, just prefer to stick to one or two things. The amount of languages and frameworks out there is a bit overwhelming for anyone I think, so it's understandable one would want to argue for limiting what you need to work with. But JavaScript is so ubiquitous it's hard to argue that one. Also some people just dislike languages without strict types, etc. There's a huge difference in that way between say c#, c++, java, etc vs php, javascript, etc. It's easy, from a certain point of view, to see some as "real" programming languages and others as "scripting" languages, with the laden values that come with that. 
Typescript is very sound 
If computation matters it's better to stick with c# or Java. 
What a terrible argument lol
Yeah even if you are using wasm, you have to call the wasm functions with JavaScript 
Jealousy, 'cause they probably don't know JavaScript.
I would MUCH rather have 5 packages do 7900 things. The thing is, with 5 packages, you are far less likely to run into incompatibilities between the packages. 7900 packages is a huge surface area. Only one of those package needs to break it's API to cause you a hellish nightmare. Things get even worse when both package A and B depends on C. If C breaks it's API, and B updates, them you either need to update A as well or pull in 2 versions of C. This can still happen with 5 packages, however, the API boundary where it can happen would be significantly reduced. This is one of those lessons the JS community needs to learn. Less dependencies is always better than more. The best libraries have 0 dependencies. If I have a choice between reinventing left pad and pulling in left pad, you can bet your ass I'm reinventing left pad. One line libs are stupid.
&gt; You don't need C or Rust for DOM manipulation. There is LOADS of use cases for WebAssembly, for a few: * Modern frameworks use a virtual dom, although faster than a real dom it's still slower to *diff* in js than it would be native * Native speed less/sass/postcss/cssnext in your browser? This brings huge possibilities to cloud-based editors. Is Javascript fast enough in most cases? Sure. But there is absolutely huge potential in applications other than game engines. &gt; Let's also not forget that WASM binaries are relatively large as well. Sorry but this is incorrect. WASM binaries compile down to pretty much the same size as JS, often smaller. If your compiling a large application/library, then sure it's going to be big binary, but no different than writing a similar library in JS. I would highly recommend you take a look at this great talk by Dan Callahan https://www.youtube.com/watch?v=7mBf3Gig9io
You missed what OP was saying, and so did the guy who made the analogy. OP was saying that since typescript is a superset of JavaScript, meaning that any valid JavaScript is valid typescript, you can use the JavaScript ecosystem with your typescript projects. If you contrast this to something like Go or Python, you have to pull have to pull in totally new packages and learn them because JavaScript is not directly usable in go or python. His analogy is just wrong. Shifting to a completely new language from JavaScript is what his analogy refers to, going from JavaScript to Typescript is nothing like that at all. 
Try getting a result returned using fetch and promises you can’t all you keep getting are promises that returns promises. You can’t “finally” return any kind of data with fetch. Promises may be simple but how it’s implemented with fetch is not good.
They either don't understand it (JS has lots of quirks), think of ES5 versions and older or just squawk that it's bad because that's what everyone else says.
"Javascript is the only language that lets you write code on browsers and for that reason it's the best for me." That's also a reason to hate it, but it's also not true anymore. WASM or a tool/language that compiles to JS. ( Elm, Clojurescript, Typescript, etc )
Sure you can. Await the result and create a wrapper like you did in your example. Fetch also has support for cancelling requests and a more robust API for handling network calls. 
And around 80% of those things don't affect performance, or hinder development speed of somebody who is familiar with the syntax (and/or not too lazy to keep www.php.net open in a nearby tab - the documentation is excellent).
&gt;I think his approach makes sense; sometimes, it's better to iterate on what you've already created. And sometimes, it's better to create something new based on the lessons you've learn. Hail Hydra!
http://php.net/manual/en/ The search bar is in the top right. There, problem solved, next?
To be honest, I did expect to get downvoted into oblivion. The comment I was replying to had a positive vote count when I did so, too.
&gt;I really don't understand why rebel against package.json. package.json isn't the problem - I think it could be better in some ways but for now it's not too bad. It's node\_modules are installed and handled and how NPM is a giant shitshow on the hosted side.
That's not a solution, that's a bandaid.
The problem is not that the language allows to type case-insensitive functions, but the specific horrid "devs" who actually typed them this way.
So if I want to pattern match status code to which function it should run how would I do it? Show me the better way.
If so, then the needle/haystack ordering isn't a criticism, it's a nitpick. Can't have it both ways m8.