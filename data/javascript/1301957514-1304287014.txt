\*excuse about it being a proof of concept\* Just kidding, I'll get that bug patched up. :x Thanks for taking the time for the screenshot. PS: Jealous of the resolution that monitor.
It is a great PoC! Sorry to not include that in my first comment. And yes, you should be. Past me is still jealous of present me. Sometimes the 27" Dells go on sale in Canada for $750, so I can only imagine they'd be a bit cheaper in the states on sale. It's a lot for a monitor, but I stare at it 80+ hours a week and the extra space allows me to be more productive. Edit: also, I had to go out of my way to produce that damning screenshot - usually I have my browser window set at half the screen width.
Fellow Canuck here :) I fixed that up with a fade on the left of the wheel - check it out. Thanks again for pointing out the flaw.
&gt; `var x = 5, y = 3;` is ok though. That's not actually a comma operator. If it was, the value of `x` after that statement would be `3`, the result of the `y = 3` assignment expression.
That isn't actually a comma operator; it's just a multiple variable declaration.
Pretty much any language with C-style `for` loops (which are the motivation for this) will have it: C, C++, Java, C#, JavaScript. 
&gt; It is very cool that Firefox is going to “natively” support loading up CoffeeScript, It is? This is the first I've heard of this.
Hmm.. not fading for me. I'm on Chrome-dev.
I would read my Google Reader list view this way.
This is a really well-written post, but I disagree with using the comma operator pretty much anywhere. This is particularly nasty: function nextFibonacci() { next = a + b; return b = (a = b, next); } The reason you'd be inclined to use something like `,` here is because that syntax represents multiple assignment or destructuring in some languages, which would let you eliminate that temporary `next` variable, but a comma operator isn't simultaneous, so it doesn't solve that problem anyway. Better would be: function nextFibonacci() { [a, b] = [b, a + b]; return b; } This is just heinous: for ( var i=2, r=[0,1]; i&lt;15; r.push(r[i-1] + r[i-2]), i++ ); Why not: var r = [0, 1]; while (r.length &lt; 15) { r.push(r[i - 1] + r[i - 2]); }
Maybe it's because I'm on a somewhat older laptop but it doesn't run so great for me. Firefox 4 it runs so it's *just* usable and chromium it's better, but still not good enough to ever put into production imo. I'm not sure if it's a performance issue or merely that it needs to scroll less per wheel notch, but that's my 2c.
Looks quite good (not sarcastic, it actually does) for me. Firefox 4, Windows 7
Thanks! It has been a fun experiment - not sure on real world uses yet but it has been good time. 
IE9, looks great here!
Thanks for letting me know - I haven't tested on older hardware yet - I'll check it out sometime soon and report back if I make any breakthroughs.
This is a great article. I've been wondering why closure-compiler simple mode has been sneaking commas into code i've been working with and JSLint breaking over the changes. I think I'll send this article to JSLint github issues and see if someone more savvy to the project can beef up that weak spot.
Looking awesome in Opera. Well done. Wonder what kind of application this has in the practical world
Thanks - there were some slight headaches - mostly around moo alias mappings not existing yet (or I think that was the problem) - overall IE9 was great to work with.
I found it ran *very* smooth in Opera and required next to no extra work - just write to standards (with some CSS prefixes =P) and ... winning We have some ideas swirling around for real world applications but mostly this was for fun and learning.
works great in Safari
My hat is off to the author. A really well written treatment of something seemingly trivial. I won't be changing any of my coding practices, but it was fun to read.
Concise - but kind of a hack - I actually don't like reading tricky namespace setup code in libraries. I prefer to use this 250 byte (gzipped) solution: https://github.com/mckoss/namespace And with this simple extension - it can be used to mimic require() from CommonJS: https://github.com/mckoss/namespace/wiki/Design-Questions
It's a hack indeed, but the trickery doesn't affect the libraries/modules much. As an example my implementation of [Fmt](https://github.com/olov/jsshaper/blob/master/src/fmt.js) is exactly as I would have written it for general CommonJS-usage. Assigning module.exports is just a variant of assigning exports properties one by one. The real trickery is in the top-level program and when importing (require'ing) modules. The approach you've taken with namespace seems interesting though and I would absolutely consider using it if I didn't want to stay as close to CommonJS-style as possible.
Can anyone expand the abbreviation in the tweet at the beginning of the article?
Did you make this? I made something similar myself a few months ago it was a fun project. EDIT: The ray tracing one impresses greatly me since I haven't done transformations of videos yet.
uuugh! Gorgeous! That gave me stink face. Why You No tell me about Ninja tricks when we collaborate on projects?! ;^P
uuugh! Gorgeous! That gave me stink face.
Examples like this are why I love CSS3.
Modular libraries are the future, so here's a non-modular library that does a bunch of stuff? I don't get it.
Note that there is a 3-pixel bug in ie6 when dealing with floats. I don't think that the OP is seeing this case - but it is worth noting. http://www.positioniseverything.net/explorer/threepxtest.html
You get to see the ninja tricks but not the ones that aren't ready for prime time. 
impressed, it even works in ie6. (not an endorsement of ie6)
man webgl
It pulls together a bunch of modular libraries in a convenient and super-powerful small package. One ring to rule them all, I suppose.
Stoked to see someone taking the time to dig into the details of backbone, awesome initiative! There are a few things that I think would be interesting to expand on further on the subject of backbone.js, both ideas for improvements and thoughts on good practice when using backbone. For instance, backbone does not endorse any given templating model, but the ones it mentions and the one it is shipped with are both of the "generate a string and use innerHTML() to insert into DOM" kind. These are fast, but come with problems. Specifically losing "DOM state", ie scroll state, input focus and so on when re-rendering. Perhaps there are other alternatives to consider here? Look for instance at GWT and its UIBinder. There is also room for expanding on and being more stern about good practices for the views - how should their lifecycles be controlled? When should they bind/unbind to DOM and model events? What is a good way to handle view composition, like when should the sub-views be instantiated and destroyed? Should new sub-views be instantiated each time the parent view is re-rendered, or should they be re-used? 
This is my thought process: "Sophisticated" sorting? This isn't gonna be an article where all they do is mention that you can sort based on some criteria other than alphabetical, is it? \*clicks\* goddamnit...
OT: really loved the "results.filter(Boolean)" trick! :)
ie-what? 
[Negative 2 comments](http://imgur.com/1nI7q), anyone else seeing this? edit: Negative 1 comment, now that I posted this one.
What you could do is create a "standards mode" where the non-standard behavior is removed but maintain the proprietary extensions in a "compatibility mode". I'm not sure if this has ever been attempted before, however...
In any other language failing to initialize variables correctly is the sign of a bad programmer, in JS everyone wants to claim it's the sign of a bad language. 
In JS it's nice and lets your code run (often not breaking). In any other language it would throw you a nasty error that you failed at initializing foo. Sadly people not initializing their variables is apparently a fault of JS.
The only thing left to do is to run this over [webgl-2d](http://www.reddit.com/r/javascript/comments/gak58/webgl2d_an_implementation_of_the_2d_canvas/), so you get the speed of webgl emulating a canvas 2d api to run your 3d library on top of it. It *must* be done. 
I'm kind of confused by your question. It looks like your code is doing exactly what you want it to do.
This is my take on it: &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;form name="test"&gt; &lt;select name="somename"&gt;&lt;option&gt;&lt;/option&gt;&lt;/select&gt;&lt;br /&gt; &lt;input name="fill"&gt;&lt;br /&gt; &lt;/form&gt; &lt;/body&gt; &lt;script type="text/javascript"&gt; (function(){ var select = document.forms.test.somename, input = document.forms.test.fill, data = [ { name: "1", value: "Option One"}, { name: "2", value: "Option Two" } ], newOption; for (var i=0, item; item = data[i]; i++){ newOption = document.createElement('option'); newOption.appendChild(document.createTextNode(item.name)); newOption.value = i; select.appendChild(newOption); } select.onchange = function(){ var selectedItem = data[this.selectedIndex - 1]; input.value = selectedItem ? selectedItem.value : ''; } })(); &lt;/script&gt; &lt;/html&gt; - I'm using literals (`[]` and `{}`) instead of constructors like `new Array()`. It's easier to read, faster, and the best practice. - I'm using objects (with names and values) instead of nested objects. - Using document.forms[form] instead of document[form] (the latter of which is, afaik, legacy support and not the standard) - Moved the script to the bottom so that it has access to the elements above - Wrapped everything in a closure, to keep variables out of the global scope - (Not required) added a blank element at the beginning to represent the empty state. I'm running to dinner, so let me know what I left unclear :) .
Your code seems to work. Maybe you should declare your variable outside of the scope of that function? Not sure what you're asking. Here's my refactor of it with explanations: https://gist.github.com/904893
The way you describe your use of JavaScript (sounds very minimal), I'd put them on the design team. JavaScript can be a full server side language as well as client side, but it doesn't sound like that's a direction you're likely to move.
I think it totally depends on the type of app that is being built. Once you know how much javascript is going to be needed in the site/service you know how enormous the task may be. If a javascript programmer is generally just using jQuery and doing simple show/hide animation crap, with various other reusable functions (for example: a javascript clock) - then keep them on the design team. If the app is heavily javascript focused and requires more of a structured model, rather than just plugging in random shit.. then get them on the development team.
I think the problem is that Javascript doesn't "do what I mean" when an experienced programmer declares variables. More than 90% of the time when a variable is declared within a scope it should remain local to that scope. function square(x) { result = x * x; return x; } This may be a trivial example, but it is very rarely the intent of an experienced programmer to make *result* a global variable. I believe this is what the question was referring to, and just put *var* in front of it is not a good answer for this. I would be willing to bet that this was an implementation detail that was force frozen because people began relying on it from early on. Obviously you want to make the common case require no extra hoops to jump through, and the var keyword is an extra hoop. However, when you consider that there is a sizable portion of the Javascript community that has little to no experience programming outside of Javascript and are not professional programmers it may make more sense. If you look at the code of beginner programmers you may notice a striking difference. To them Javascript does "do what they mean" because they *meant* to declare a global variable there. Many of them will tell you that you have to do it that way otherwise you won't be able to access the result. They don't understand the purpose of return or assigning/using the output of a function. Everything they write uses globals. Of course anyone who has studied CS or come from languages where this is not the default behavior knows differently. Globals are usually the wrong choice, so making the user of a language go through a few extra hoops is a good thing as it forces them to think about what they want to do. tl;dr That's how it was, so that's how it is and that's how it shall be. Backward comparability almost universally destroys a language's ability to evolve and fix poor design decisions from when it was younger.
great, another thing to slow firefox down, leak memory and make it buggy.
At our place the programmers handle the actual JS coding. The designers and programmers work together to determine JS functionality, scope, progressive enhancement, accessibility considerations and tradeoffs. Do your designers typically code the JS to handle the ajax and/or interaction with json/web services? Even something like making drop down navigation keyboard accessible (with tabs and arrow keys) could be hard for designers. Why not work together on JS? You could try it on one project and if it fails, just go back to how you typically divide the code. The programmer could build the basic structure in a way that the designers could later tweak as needed.
"One solution might be to bring a more traditional programmer over to the design team to help lead the technical aspects of Javascript, while still be directed by a more design/UX oriented management." This would be my suggestion. It seems like a bad idea to require designers to have to learn JavaScript for the exact reasons you described (writing sloppy, unmaintainable, unreusable JavaScript code and probably taking longer than it should to do it). I would have a "traditional programmer" basically manage the JavaScript code base and act as the "Javascript go-to guy" that interfaces with the designers. 
What you need is a front end developer that is about 70% dev 30% designer. Someone that specializes understanding design and UX and coding it properly.
&gt; Do your designers typically code the JS to handle the ajax and/or interaction with json/web services? We have two full-time JavaScript programmers. One has a CS degree and background. The other moved into the position through Flash/ActionScript. They handle everything JavaScript related including ajax and parsing through json data. They are part of the design team. I like the idea of working together too. Something I may suggest is to keep lighter JS responsibilities on the design side and move the heavy lifting to the programming side. Thanks for the advice.
&gt; front end developer that is about 70% dev 30% designer Unfortunately, these types are few and far between! Seems to generally be 90% in either direction around these parts. ;)
For the last 6 years I've been a Web Designer + Developer and I agree that JavaScript largely should be written by the "client-side" people. With the introduction of server side JSs and a heavier emphases on JS for interface-intensive web applications the line of "who should write JS" is becoming blurry. Because of JS's close interaction with the DOM my writing HTML and CSS every day really strengthens both the way I write JS. They're so closely related that I can't image writing them separately.
I've been saying that I'm 70% dev and 30% designer for years now. Brother?
The designers should be fine with just using a library like jQuery; however, when there is more complicated data passing and code written in raw JavaScript, then leave it to the developer.
If your company is small, why try to find some abstract "right" way to organize the teams? Why not just get the people you have and put them where they're happiest doing what they're best at?
It's basically [this table](https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence), reading down. The tweet is cute and snarky, but also misleading, since it breaks out multiple operators that share the same precedence. A more accurate one would be "MFIUPSuShCoEBaXBoLaLoCnACm": * Member * Function call * Increment/decrement * Unary * Product * Sum * Shift * Comparison * Equality * Bitwise And * Xor * Bitwise Or * Logical And * Logical Or * Conditional * Assignment * Comma If you consider how rare the bitwise operators are, it's actually not that bad. In practice, all you really need to be aware of most of the time is: * Member * Function call * Increment/decrement * Unary * Product * Sum * Comparison * Equality * Logical And * Logical Or * Conditional * Assignment 
At some point the Developers are going to need to touch the design right to get it into the view and make it dynamic and cut it into reusable chunks. I think then it makes sense for the programers to handle javascript. At my company we do everything but we sometimes get designers and they just give us html and css and I do the rest including javascript and the mvc stuff.
That's great! I tried doing something like that recently, but failed miserably. I just didn't grok the math for perspective. 
As samstr said up top, depends where you lie on the app &lt;--&gt; webpage scale, but what about splitting those two up and communicating between the teams?
Yeah I'm probably somewhere around 40/40/20 for backend/frontend/design.
Why not rename the teams, "front-end" and "back-end", and then shift individuals around to oil the interface between the two, as it were. If you're doing JavaScript properly, there's plenty of code that has not a jot to do with visual design work.
I think you have to break it down to a loose continuum: design -- markup/css -- js dev You see a lot of overlap of neighbours, but straddling all three *well* for web apps takes a rarer person. At least, if you want to go beyond jQuery.OMG.magic() js, or [nerd-style design](http://simonwillison.net/).
All his achievements and smarts aside, for some reason David Walsh pisses me off to no end. I don't know whether it's his cartoony website or his writing style or his omnipresence, but somehow I cordially dislike him.
And ten years later the browsers still cant agree on a standard! When will it end!
Don't confuse "delays in implementing a new standard" with "not being able to agree on a standard". To answer your question, though, "when Microsoft gets out of the browser business". &lt;:-/
I will never forgive them for what they are doing and will do. And in particular they can never be taken seriously for the hell that was IE6. To think they would have never even made IE9 compliant if it wasnt for the crusade of FireFox and Chrome! edit: removed waffle..
Yup, I've been working on it for quite a while now. It is based on similar engines I wrote in Action Script about 5 years ago, but ported for JavaScript and the Canvas. Video, Canvas and Image tags behave similarly in JS, so there is no difference between drawing a picture of a wall or a video in the 3D engine. You could also have a canvas the user can paint on, and have it update in real time in the 3D world. Adding video to the polygon engine (the one used in the earth and the wave demo) is on the top of the ToDo list.
Most modern browsers uses hardware acceleration for the canvas, so I'm not sure how much faster it would be with webgl-2d.
Ahh I see, how does the ray tracing one work? Does it not use canvas? [OBJ Viewer](http://sobriety.1free.ws/index.php?action=OBJViewer) This is my version the test model has 1.5k polygons and runs at about 3fps in firefox4 but it was me pushing to see what could be rendered. Although I need to improve my depth sorting algorithm since there is quite a bit of incorrect clipping. I may implement a bsp tree if I get around to rewriting it. [3D Test](http://sobriety.1free.ws/index.php?action=3dtesttexture) This was my test to see if you can make a game using it, It tests sprites, 3d models and textures. Although textures are only applied to the floor because they were implemented late and are kind of tacked on.
The ray tracer uses canvas, but it never rotates or skews the images. Rotating an image is probably the slowest operation you can do, especially if the image is large (see the mode7 engine). Because rotating is slow, the polygon engine cuts out each polygon image and skews and rotates them, so they are all parallel, when the engine is initialized. The only reason this is done is because I haven't solved the matrix multiplication for doing it in one operation (the canvas transformation operations are done in reverse order from the way you specify them, which is kinda weird). I've also run into trouble with depth sorting. The way the engine does it now is to calculate the distance from the camera to one of the points of the polygon. It then uses the Array.sort function to sort the draw operations. This causes problems when the polygons are very large.
I've sorted the skew/rotate matrix when I get home I'll look at the code. What it does though is if you input the triangle defining he part of the texture you want and the triangle where it is vein mapped to then it works out the transformation matrix which is applied to the canvas. Rather than performing each step speratly. I think it's called affineTri.Js iirc if you want to have a look in the code. 
I get that. JavaScript is a deceptive language, it's not a toy script like most people from both sides think it is. It's one of the most expressive languages out there with a tonne of quirks which essentially makes it dangerous in the hands of people that don't know it. I wouldn't want a developer that didn't have a good grasp of the language coding in it for production sites any more than a designer that is hacking together jQuery plugins.
I thought I was the only one... this must be what it's like... when doves cry.
What was wrong with IE6 or IE4? These were very revolutionary builds. Sure they had proprietary features, but these have slowly become (formatted differently) part of standards -- XHTTP, CSS gradients, CSS rotations, etc. It's a pretty shaky foot to stand on to blame MS for letting their browser team die or be competitive. Consumers have ALWAYS had the choice. Stop making excuses and blaming others. Educate your friends, families, clients, or otherwise. As for the standards, the process is too long for browsers to wait. Feature detection and vendor prefixes are common in all sects of software; why do web developers feel and think their garden should be devoid of that commonality?
HTML5 storage is nice. Glad we have that. Better late than never. But if I want to build anything more than a recipe book I want a client-side database. Mozilla and Microsoft are busy infecting each other with indexeddb NoSQL garbage while webkit is kicking ass with sqlite. Microsoft getting out of the browser business wont stop Mozilla from being retarded.
Would have expected the code to be a bit more optimized before flashing it around.
How do desktop developers divide the work? Seems it would be similar for a thick-client website.
What does MS being in the browser business have to do with the Web Apps standard? Not a majority: http://www.w3.org/2004/01/pp-impl/42538/status Web Storage is a Working Draft and has a HUGE compat warning across its spec: http://www.w3.org/TR/2011/WD-webstorage-20110208/
Complicated multi-field sort. I prefer "function (a,b) { return a.x - b.x || a.y - b.y; }"
Thanks, that's exactly the effect that I was looking for. I do have a question about what you might do if you had to change multiple input boxes at once with the same selection? Specifically, I'm trying to automate the entry of address information into some input boxes to help eliminate errors in typing. So using your "framework" my data[i] looks like: { name: "1112", store: "LKQ Atlanta (Jekinsburg)", address: "2401 Highway 42 North", city: "Jekinsburg", state: "GA", zip: "30234" }, Which get's pushed into input fields named "store", "address", "city", "state" &amp; "zip". Currently, this is done by a bunch of ternary operators, like what you were using in the redone example. Is there a better way?
CSS support was atrocious, broken box model, their own DOM methods/model, ActiveX, more security holes than swiss cheese.... - list goes on It was so painful making sites work in that horrible mess.... Altho yes I agree it had many good/revolutionary features - but that was the problem huge feature creep and terrible implementation of the core/basic things all browsers should do well! They should have taken baby steps.. But of course they wanted to dominate the market and have another monopoly. Microsoft themselves freely admit how terrible IE6 was :D http://www.ie6countdown.com/ 
It's too bad their method forcibly grants them access to my browser storage without asking me. It really pisses me off when me storage access is by permission only and their demo apps using this method come right along and use it without asking.
JavaScript, as well as most other functional language do have namespaces. Namespaces in programming are represented by a different term given the different context. This magical word is "scope". At the end of the day its all the same thing to a computer.
Automated conversion of XML to JSON is potentially dangerous. JSON has no equivalent to schema, so therefore everything that is syntactically valid to JSON is golden. This is not so for many XML documents.
I'm not entirely convinced. Comments would be handy I agree. The trailing comma can be mitigated against in one of two ways: 1) deal with it 2) use this syntax: var json = { "foo":"bah" ,"baz":"bang" ,"bing":"bong" }; The quoted keys requirement seems to be a very important part of JSON if we're to avoid JSON becoming a pain in the arse. As in, I don't want to ever have to bang my head against the table asking why my JSON isn't parsing just to remember that 'abstract' and 'super' and 'package' and 'default' and 'transient' and [all kinds of other words](http://krijnhoetmer.nl/stuff/ecmascript/reserved-words/) are reserved keywords and I should have quoted them (JSTGP:appendix A, page 103). It seems that always quoting neatly sidesteps the issue of having to remember all the reserved words in ECMAScript.
You forgot one very big problem: lack of something similar to XML's CDATA. If for example you embed some form of script in JSON, you need to use escape characters a lot, especially if the script is C-like, such as the Direct3D and OpenGL shading languages.
No one is saying IE6 isn't deeply flawed. Point is that despite its flaws, it was still the best browser of its time (except maybe Opera). The major competitor was Netscape 4.7, which **didn't even support CSS if you had Javascript turned off** (and back in those days absense of popup blocking made running without Javascript *very* attractive). The real problem with IE6 is that it refuses to die.
I agree that comments would be very nice indeed. (I don't mind any of the other things the author mentioned.)
That's a good point, though I think that we should try to kill two birds with one stone and support multiline strings in JS in general, and then require that of JSON. Though it's also true that you could improve JSON before improving JS, which is part of the point of my essay.
You are hugely missing the point. Microsoft and "everyone" else admits IE6 _IS_ terrible, but you simply missed or forgot the days it _WAS_ not. Microsoft may not have followed what we know as standards today, but that is far beyond the point. We can go on all day about the amazing features IE5.5+ had that browsers of today are just now implementing. Whatever the standards committee came up with for the box model, we'd have lived with it and never have been the wiser. I am not going to scorn IE's box model -- it's different, not broken; in fact, in some cases it would be nice to have. Deep down, I don't think the IE team or Microsoft believe "my way is better." They may have paid near zero effort between IE4/5/6 and IE9, but that is on the consumer or other vendors to make the choice to kick them in the pants. Blowing hot air at colleagues is not doing a damn thing. Prefixes, defs, guards, etc are going to be fact of life, so long as we are trying to innovate. We'll have to constantly break the mold if we want to get to the future, and it's not going to be led by committee. And you must be off your rocker if you claim Python / Javascript (with no version qualifications) have complete compat without some respects paid to different environments or architectures.
This is a very good article; I enjoyed your thoughts and found it interesting, informative, and definitely up-vote-able. With that in mind, please listen to my one critique, which is unrelated to your content. I, and others like me, tend to shut down when I see things like, "This begs the question" used improperly. Here's the [Wikipedia article on "Begging the Question"](http://en.wikipedia.org/wiki/Begging_the_question). I realize that this seems like it is nitpicking, but it would be analogous to referring to RSS when you mean Atom; it takes credibility away from your well thought out points. It's all well and good to say that language changes (it is a common counterargument to pedantry along these lines) but right now, you are using that word and *I do not think it means what you think it means*. Using jargon correctly is important, and this phrase is really nothing but jargon about how we speak and interact. *Edit: note that if you were an idiot, and your points were bad, then I wouldn't care. I want your arguments to be effective because they're interesting.*
Why does Earth revolve faster than Venus?
I think one of the arguments against comments would be the tendency of some developers to put semantic information into comments, that would affect the processing. In such a case, JSON parsers that merely ignored comments (most of them) could not handle the data, breaking the universality of JSON. I think that a prime example of this would be Encapsulated Postscript. 
You are correct: I did not realize the actual meaning, though I'm surprised that this has not become an accepted usage yet (Wikipedia is not on my side: http://en.wikipedia.org/wiki/Begging_the_question#Modern_usage). Irregardless, I could care less about such issues, as they don't really seem to effect anybody. (Just kidding, I replaced "begs" with "raises.")
IIRC this was the reason comments were excluded from the JSON spec.
&gt;Irregardless, I could care less about su... **BLAM SPLAT** My head asplode.
Somethings up with venus' rotation, like women, venus does what it wants.
JSON is not line oriented so a line comment would fail miserably when newline, tab, and ws are stripped. 
Personally, as annoying as the trailing comma thing is for me to deal with, I hate seeing them. ["A", "b", ] looks to me like a list of 3 things... 2 strings and an undefined or a null depending on language. That's ambiguity I can live with out. I'll take the hit on watching my commas to make the language more consistent. I may also be a special case... I don't get to stick to one language for long. I have to jump between many of them, often within the same day. It's sometimes hard to remember, when troubleshooting, which language sees it as a 3 items array, 2 item array, or a syntax error.
I would change the default encoding of JSON to ASCII, mandating the \u0000 or \x00 encoding of characters. Even though JSON is defined as UTF-8, some of the contexts, where a JSON structure may pop up are not, e.g. embedded within a script-tag within an HTML page or elder IEs which propagate the requesting page's encoding to script contents or JSON ending in file:/// repos where the editor does not agree on UTF-8. 
Problem 1: use YAML Problem 2: use YAML Problem 3: use YAML There, I fixed it. 
I would like to upvote the suggestions with whoever could actually implement them, but I must satisfy myself with upvoting the thread on reddit.
Sorry, none of the browsers seem to support YAML. But they all have a built-in parser that can handle JSON. (Whether it validates JSON is a different question.) Third-party libraries are over-used.
I mostly agree, but I call lack of namespaces a flaw rather than an advantage. That isn't to say I prefer XML over JSON in general, but it is something that I think is important that there is no standard analog to in JSON. Considering that JSON is increasingly used for data interchange, and the popularity of mash-ups, I think a lot of effort is wasted on aggregation and extensibility that is not necessary in XML due to lack of a namespace mechanism. 
At the time that such stripping occurs, comments should also be stripped. Since comments exist purely for humans, they should be considered completely useless when whitespace is removed.
A JSON document with whitespace stripped can trivially be reformatted and pretty-printed for human consumption.
what if I want to send it to other human so I want to retain the comment but minimise the size of the file?
Humm... not a word on the lack of a standard for date representation. 
Another human will need the whitespace at least as much as they need the comment, maybe more. Compress instead.
You can still do that without the comment, and it will be just as useful as if the comment weren't there in the first place.
Then is the JSON standard going to include preferred compression method? You cannot propose a broken grammar and rely on user's habit to do the right thing. The purpose of a standard is to make the user to do the right thing and right thing only. 
Lossy compression is never acceptable. Other than that, it doesn't need to.
I'd like if JSON allowed bare numbers/strings/bools, not just arrays or hashes. Some implementations nicely provide this, but some do not. json.org is ambiguous about it, but rfc4627 clearly omits it. :(
Is that true? That seems inconsistent with http://json.org/
[document.referrer](https://developer.mozilla.org/en/DOM/document.referrer)
Numbers, strings, and booleans are JSON primitives, just like in JavaScript. What are you talking about? What does "bare" mean? :)
But these aren't generated specifically for the browser, these are human readable configuration files that the author is concerned about. Not typically a client-side concern.
&lt;script language="javascript" type="text/javascript"&gt; //detect tablets first - they get the web version! if( navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/1000/i) || navigator.userAgent.match(/9000/i) || navigator.userAgent.match(/m180/i) || navigator.userAgent.match(/t849/i) || navigator.userAgent.match(/i987/i) || navigator.userAgent.match(/tablet/i) || navigator.userAgent.match(/p100/i) || navigator.userAgent.match(/t849/i) || navigator.userAgent.match(/i800/i) || document.referrer === "http://fontaine.mccid.com") { } else if ( navigator.userAgent.match(/(opera mini|ipod|iphone|up.browser|up.link |mmp|symbian|smartphone|midp|wap|vodafone|o2|pocket|kindle|mobile|psp|treo| nokia|blackberry|pre\/0.1|android)/i)) { location.replace("http://fontaine.mccid.com"); } else if (screen.width &lt;= 699) { location.replace("http://fontaine.mccid.com"); } &lt;/script&gt; Seems weird to detect tablets just to... not do anything with them so I'd shorten it to &lt;script language="javascript" type="text/javascript"&gt; if (document.referrer !== "http://fontaine.mccid.com" &amp;&amp; navigator.userAgent.match(/(opera mini|ipod|iphone|up.browser|up.link |mmp|symbian|smartphone|midp|wap|vodafone|o2|pocket|kindle|mobile|psp|treo| nokia|blackberry|pre\/0.1|android)/i)) { location.replace("http://fontaine.mccid.com"); } else if (screen.width &lt;= 699) { location.replace("http://fontaine.mccid.com"); } &lt;/script&gt; 
I assume it means: JSON.parse('true') === true
Thank you kindly!
Thank you for this, the first guy got me pointed in the right direction, I appreciate your input as well. THIS is why I love Reddit.
This. In practice I don't need comments and I easily deal with the quoting and comma issues. The only thing that bugs me is the lack of a date representation. I use ISO8601 but I have to have a functions to handle it. It would be nice if it was just built in.
Isn't the point of JSON to exchange data, not code?
With all due respect, that's bonkers.
Personally I think it's perfect as it is. The reason it caught on so well is partly due to it's simplicity. There's no learning curve. As soon as you start adding 'improvements', the learning curve increases and we're going back in the direction of XML.
Why is Saturn bigger than Jupiter and smaller than Neptune?
Very nice! Not only is it a cool proof of concept and a snazzy CSS3 usage, but it got me to finally read *The Raven*, something I've been meaning to do for ages. Thank you and rock on, good sir (or madame)!
https://encrypted.google.com/search?hl=en&amp;q=%22code%20is%20data%22 (It had to be said)
&gt;Let's get this out of the way; Impact isn't free. If you're anything like me, you're probably a little disappointed with that statement. After all, we're using open Web technologies here, so why charge for something that is built on top of free technology. Right? Well, to put it simply; the developer needs to make a living.
I disagree on everything he says. Except maybe comments. But even then, geez dude I don't think JSON is made to be human-editable. Too many brackets to match up. Also I'd vote on keeping JSON implementation-neutral: if people want comments let them design a way to represent them as part of their object. {"comment":"This is a comment"}
It's particularly annoying how you need to escape non-ascii characters. You need to use "\u2203" representation, so a Unicode character can take up 6 bytes instead of (usually) two. 
Remember this was from 2007 - In today's age of JIT compilation appearing in Javascript engines that speed benefit could be moot.
It may be so in theory, but I don't think most people working in the real world behave as if that were true in practical terms, and I don't think JSON was designed with that as a premise.
There is a Draft for a JSON Schema Specification. http://tools.ietf.org/html/draft-zyp-json-schema-03
Just so. Some JSON parsers will not handle a JSON representation that is simply '1', for example.
json.org is unfortunately a poor specification for JSON -- people come away from reading that page with different interpretations, since the graphs appear to say one thing, yet the text says another. Unfortunately, everybody knows about that site. [RFC4627](http://www.ietf.org/rfc/rfc4627.txt) is more precise than json.org, and it only allows JSON to start with a list or hash. Had Crockford used EBNF, and clearly stated that everything else aside _this_ was the canonical parsing, we wouldn't be having this conversation. The graphs leave a little to be desired too; compare with [what sqlite.org uses](http://www.sqlite.org/syntaxdiagrams.html). Alas, the graphs on sqlite.org are also imperfect, since they don't clearly state that sql-stmt-list is the first production. Ultimately what matters is what's out in the wild. In the wild I've seen both takes, and as a result JSON serialized by one implementation is not guaranteed to work with another (learned this the hard way). Given JSON's apparent simplicity, it's pretty ridiculous, isn't it? I blame it on the above. Edit: I should be fair and note that parsing CSV is even more an adventure, despite being considerably simpler than JSON. It too [has an RFC](http://www.ietf.org/rfc/rfc4180.txt), which probably was a helpless attempt to bring sanity to the madness.
I hate when people just paste the code and call it a tutorial. A tutorial walks through the entire process and explains what everything does.
Is there an example/demo somewhere?
Funny that this is presented by MSDN - do any MS browsers support it?
Yeah I think the person has the position of Jupiter and Saturn Switched. Also there's some greyish planetoid following Saturn and I'm not sure what that is supposed to be.
 var json = { "foo":"bah" ,"baz":"bang" ,"bing":"bong" }; And then someone decides to remove the first item
 &gt; Further, it would be easier to generate JSON programmatically if one could rely on the trailing comma, as loops that print out map or list members would always be able to print out the trailing comma without having to check whether the item were the last element in a collection Usually there are functions to deal with this. In JavaScript, it's Array.prototype.join. list_of_names.join(" and ") In Emacs Lisp, it's mapconcat. (mapconcat 'identity list_of_names " and ") 
&gt;I don't think JSON is made to be human-editable. Funny. Since JSON is directly descending from Javascript, and Javascript *is* intended to be human editable, I'd say this is not right. I do like the idea of "Everything that is allowed in a datastructure in Javascript, syntax-wise, is valid JSON".
[YAML is a mess](http://use.perl.org/~Ovid/journal/39383), standard wise.
Meh no comments.. lol downvoter! You think all code shoudl have no comments :P
Keep in mind this was done in 2007 when speed did still matter, though no reason not to use it over some other implementation it happens to be one of the most elegant solutions as well.
Example doesnt work (IE 8)
&gt; It's particularly annoying how you need to escape non-ascii characters. You need to use "\u2203" representation, so a Unicode character can take up 6 bytes instead of (usually) two. No you don't, according to both json.org and [RFC 4627](http://www.ietf.org/rfc/rfc4627.txt): &gt; All Unicode characters may be placed within the quotation marks except for the characters that must be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F). And the encoding is specified, too: &gt; JSON text SHALL be encoded in Unicode. The default encoding is UTF-8. The RFC goes on to allow UTF-16 and -32 as well, so a non-ASCII Unicode codepoint can be stored in anywhere between 2 and 6 bytes depending on the codepoint and encoding. However, even with UTF-8, basic plane characters fit into 3 bytes at worst.
It worked for me on Firefox 3.6.1 and Chrome 11.0.696.16 and Opera 10.00.
This is pretty sweet - nice use of canvas. Does IE9 support canvas (I'm not allowed to upgrade yet, IE8 does not support canvas)? Any plans to bundle this with any polyfill to support IE? Would Raphael be applicable? You can also do this without JavaScript via Google Charts, if I remember right.
Well, at work all I have is IE8 - and that's the most likely spot for me to use this for client work.
Canvas polyfill for IE8. http://code.google.com/p/explorercanvas/
IE9 supports canvas, IE8 doesn't, but there is a polyfill. http://code.google.com/p/explorercanvas/
I took the plugin provided and made it generate a table instead of using a canvas so that it works even on ancient browsers. Here is the [modified jquery plugin](https://github.com/imbcmdth/jquery-qrcode/blob/master/src/jquery.qrcode.js) and the [github project](https://github.com/imbcmdth/jquery-qrcode) link.
Instead of a heavy-weight canvas replacement for IE8, you could use this version of the same plugin: https://github.com/imbcmdth/jquery-qrcode 
This is cool! Did you implement it yourself?
Yeah, I don't get it. Why not just have a url link? Aren't these barcodes useful in print and maybe TV only?
Nice, forgot about explorercanvas.
They are usually to enable a user to load a URL onto their smartphone quickly. A phone app download link, or Google Maps directions, for instance.
You can print websites, for one thing. I generate all my invoices in HTML form and then print them with Firefox (print stylesheets seem to be tricky enough that most other browser get them wrong). I use a similar script to generate a barcode in a canvas. I could also imagine that this could come in handy if your site might be run in a kiosk or people might see it on a screen they don't have direct access to (they could take a snapshot with their cell phone instead of having to write down or memorize the URL).
tl;dr: It uses a table instead, with one cell per pixel.
I use them on print outs of web pages so people can get to the page using their smart phone. It's also handy for business clients on inventory sheets.
I think you may be in the wrong place, [Hacker News is this way][1] [1]: http://news.ycombinator.com
Nothing of substance there.
yes, I wish it was that simple, firefox doesn't support that attribute.
How about you show us what you have so far.
Even better would be to delegate the hover. Make one large hover area which sits on top of your entire chart (or better yet, use the existing chart container!). The handler would map x-mouse coordinates to individual bars. This is has two advantages: You aren't creating n extra DOM elements. You aren't registering n observers. And an extra expense: You have to perform a calculation in one dimension to resolve which rectangle (which is cheap compared to creating the DOM elements and observers, and cheap even in comparison to updating the rect's own attribute).
This is the kind of standards pragmatism I can get behind.
I'd merge the two :P var table = !!document.createElement('canvas').getContext ? createCanvas() : createTable();
Is this how it works? 1. John sees a webpage on his notebook. 2. The webpage has a qrcode. 3. John takes out his smartphone to take pic of his notebook screen. 4. Now his smartphone starts loading the page.
Instead of generating the QR code with canvas why not use Google's QR code api? http://code.google.com/apis/chart/docs/gallery/qr_codes.html Don't get me wrong, this is cool.
No :(, it was mentioned in a company email. Surprised it wasn't already posted, its too cool not to get recognition.
This is client-side, so it has the benefit of relying on neither an external service nor a server-side script to process the image. Reduced server load/page load time, I guess?
Yes. More specifically, you would use a [barcode scanner app](http://www.appbrain.com/app/barcode-scanner/com.google.zxing.client.android) to take the picture. If you click the "QR/more" button on that page, imagine it as an easy way to quickly install that app without having to search for the same thing on your phone. edit: I now realize the irony of linking to the QR code of a barcode scanner app, for which you'd need the barcode scanner app in the first place.
Right, how silly of jetienne to submit a javascript library to the javascript subreddit.
http://jsbin.com/ewezo4/5
Bah. Humbug.
&gt;mitigated
Indeed. I don't see any license with it :-( I've wanted to do an n-body simulation in JS for a while, meh.
My bad. But it does appear that for practical reasons, many existing implementations of JSON encoders do encode all non-ascii using the "\u2203" type escaping. Such as PHP's json_encode(). 
I was keeping that in mind - edited my post to clarify. It is indeed still the best solution.
There's a 'createMovieClip' function in there, which you seem to have carried over from the d-project's JS port. It is an Actionscript 1.0 function though. Any reason why its included?
Yes. In fact it was really very useful at the beginning times of the Android world : when we made web pages we could offer an easy download link to the user browsing. Now it's less useful because any browser has an extension allowing the automatic display of the QRCode of the page.
It's been a long time since I used PHP, but I recall its encoding support being a bit painful, so that doesn't much surprise me.
That comment font is really icle/tiny... Me hurty eyes
"...and is not really object-oriented at all." [Crockford says otherwise](http://www.crockford.com/javascript/javascript.html), "Is JavaScript object-oriented? It has objects which can contain data and methods that act upon that data. Objects can contain other objects. It does not have classes, but it does have constructors which do what classes do, including acting as containers for class variables and methods. It does not have class-oriented inheritance, but it does have prototype-oriented inheritance."
It was more the fact that "Show &lt;website&gt;" is more widely used on Hacker News, and "Hey &lt;website&gt;" is more used on Reddit. It was a comment on the title of the piece, rather than the content.
Chrome doesn't require administrator privileges to install because it doesn't put files in sensitive areas.
Admin rights are not the issue. I have those. It's against IT policy to install things without permission - and they have scripts that run checks to see what apps are installed (I helped one of the admins write them) on a box and report back anything outside of the standard build. If it's not something they know they gave the OK on, they follow up, etc. Stupid, I know. But, I don't write the policy. I'm just another code monkey.
This appears to be an amazing roundup. Thanks for sharing!
That really sucks and makes me appreciate more and more that my company lets use use whatever tools we want as long as we don't violate licenses
Yeah, there's some certification crap where we need standardized desktop deployments and documented changes with reasoning for anything beyond the standard. Sadly, they don't accept "IE sucks. I want a real browser" as a reason for using anything else.
Once again that sucks, I'm glad the certifications body my company is under doesn't require that. Only questionable security measure they require is a super aggressive password change schedule, which imo, promotes lazy passwords.
I see [backbone](http://documentcloud.github.com/backbone/), but not [knockout](http://knockoutjs.com/), which also seems very good at the same types of things.
Yeah, we have that too. It always leads to people either using the current month as their password (with a #) or the same password with a single incrementing number on the end. It's frustrating memorizing a new complex password so often. (Thank God for password keeper on my BlackBerry)
generally that kind of thing should be done server side, it's bad practice to do it client side. it breaks parsers (i.e. screen readers) if you generate all of your static content with javascript.
this is exactly the problem and [artificialidiot's comment](http://www.reddit.com/r/javascript/comments/gfk3d/why_are_variables_global_by_default/c1n6wbf) explains why it is this way. javascript was rushed early on by netscape and designed for use by idiots. Douglas Crockford has a lot of explanation on the history of this.
That is weird. Anyone know if this has a basis in any spec? Worth noting that I get the alert in Chrome 11 but not in Firefox 4. Would be interesting to see which browsers do this. EDIT: Would help if I'd read the whatwg link at the top. Interesting.
This has always been IE (MSHTML DOM) feature, from what I remember. But I see that latest versions of Chrome, Opera and Safari all follow it as well (for compat. reasons, I'm sure; although seems safe to drop it considering FF lack of it). This isn't the only pollution that happens. Take a look at my old-ish http://kangax.github.com/domlint/ (this particular case is covered under point #3)
Appcelerator only does iOS and Andriod. But it is nice. Check out Adobe Air. It's cross platform and you can use JavaScript. 
Titanium Desktop does Desktop.
I have used Mozilla XULRunner to make some apps but it's more of a ballache especially with the lack of documentation. Try Appcelerator Titanium.
IE&lt;9 supports majority of canvas functionality when given an excanvas shim. http://code.google.com/p/explorercanvas/
I just barely started messing with Appcelerator myself, but I came to it from a friend who is all about it, so, I guess, one upvote for that by proxy. I will report more when I fix this (unrelated to Appcelerator) java versioning issue I have.
yep, this 'tutorial' is useless.
Sadly, &lt;div id="mynamespace.stuff"&gt;, does not work. But this gives me an idea. I'm going to start using id=".class" just to fuck with people.
Haha, damn. Ahhh, if I had to end up debugging something like that, I'd probably end up killing you in rage.
Yes. From this snippet: &gt;Download and Install Titanium. For mobile, you’ll also need to install the Apple iPhone SDK or the Android SDK to build and run your application within Titanium. It seems like desktop is default, and if you want mobile, you'll also need to download extras.
I was depressed to lean "You're doing it wrong" didn't originate from John McCarthy.
MongoDB for a desktop app?
Desktop is indeed default, but right now they're focusing so much on mobile that the desktop API is lacking in features and the documentation is horrible at the moment.
Wow, that does suck.
It does but the app will only run on Mac. If you build in Adobe Air it will run on any OS that Adobe Air supports without having to make many changes in code.
No, it was just something I put together. I've been working on a chatbot, so I may port mybot over to hypergraph.js when I work on it next.
LAMP is... dead? Give me a break.
Not to be snippy, but I would not recommend starting an app on Air. Flash is on its way out, and it would be folly to hitch your wagon to it.
Consider CouchDB, if you have a data intensive app; they have a setup in which you run locally. Also consider [Kod](http://kodapp.com/), an open source source code editor based upon Google Chrome.
Flash is on its way out on webpages, but Air has a chance of keeping the Flash legacy alive. There are some seriously nice Air apps out there.
Did you look at Qt? 
As some others have mentioned, you can use Adobe AIR to write desktop apps with javascript, **no flash required.** Javascript-only development of AIR apps is fully recognized and supported by Adobe. [Check out their (slightly old but really useful) developer guide for JS AIR apps (PDF)](http://onair.adobe.com/files/AIRforJSDevPocketGuide.pdf) [A blog post about getting set up in AIR for JS development](http://www.petefreitag.com/item/667.cfm) For a project of mine, we used Adobe AIR to deliver a JS-based app and I have to say, if you like JS, then it's awesome! We ended up using a *very thin* Flash wrapper around the JS content (App was actually a Flex app, but the entire UI was a webkit box), mainly because we needed the compiled Actionscript to do some image encoding on the fly. Google is trying to deliver something similar to AIR with it's [Chromium](http://www.chromium.org/Home) project, because it has some hooks to launch a page as an app (with a "-app" flag), but it's not mature yet, in my opinion. 
So... I've built some apps with AIR and Titanium. I still prefer the later, even though the documentation lacks most of the times. However you can drop most of the Titanium features and just use HTML5 stuff, like for example reading files, FormData objects, localStorage etc. As for using MongoDB... Not sure why would you want to use it for a desktop app. Having SQLstorage/localStorage it's quite easy to write a wrapper which works in very similar manner. Or you can use libs like [Lawnchair](http://westcoastlogic.com/lawnchair/) and not worry about anything. I advise against AIR, from my experience people were complaining about having to install the runtime, Titanium apps can be self contained and shipped as one package with your app + the runtime. Another thing is - you can create an application which runs in Titanium Desktop and as a Chrome App.
Why not?
No, does it support JS?
Fantastic. I will honor the day when Node worship and related blog drivel is divinely separated from actual JavaScript discussion.
This is a bad idea because it will presume programming considerations foreign to JavaScript. JavaScript is a programming language with its own type definitions and structures, while XML does not have this because XML is not a programming language. In order to get anything like this out of XML you need Schema or some other programmatic extension. JSON, conversely, is not an extension of JavaScript. JSON is a subset or JavaScript and extending JSON with a Schema similar in purpose or definition to XML Schema would appear to extend JSON in contrast to JavaScript, which is an unintended division unless you can point to JSON and identify it as not JavaScript.
I also have used XULRunner, and while it is suitable for many applications it doesn't have the greatest documentation (as you just stated). Really, XUL (which is what XULRunner uses) exists because it is what Firefox/Thunderbird/etc are built off of. It is what Mozilla uses for its extensions and in that respect it is the best method currently (which is why the extension support in Firefox is so awesome). That said though, I would look at one of the alternatives for desktop javascript applications...because XUL's primary focus is supporting existing apps and their extensions...not your custom XULRunner app and the documentation reflects this. Compare that to the absolutely BADASS documentation on javascript/dom/etc at mozilla.org...I use that stuff all the time. Unless it is some specific behavior with a specific browser I am investigating with web development I almost always go to mozilla.org for their documentation. Edit, just in case someone wanted a lazy link to the [Mozilla Development Center Documentation](https://developer.mozilla.org/en-US/docs).
Great list...missing a couple I use frequently such as SASS (although LESS was mentioned which is an alternative). Now I just wish I had time to actually use a lot of this stuff...*sigh*
You don't has to use Flash in your Air app if you don't want to. You can use JavaScript for the entire thing. Adobe Air is not Flash.
Great explanation of ExecutionContext creation.
Yes take a look at this: http://doc.qt.nokia.com/4.7-snapshot/qdeclarativeintroduction.html and this http://doc.qt.nokia.com/4.7-snapshot/qdeclarativejavascript.html?searchstring=qml Download Qt Creator and create a new Qt Quick Project and see if it works for you. 
Because DrBroccoli
&gt; designed for use by idiots This is the phrase I take issue with in that comment. I highly doubt that it was *designed* to be used by idiots. Rather it was a *bug* that was frozen into the language because it was released and used before it was ready. I've read/watched Douglas Crockford, and I agree with his assertion that Javascript is a (simplistic) Scheme with C-like syntax. I think this fact alone proves that it is not *designed* to be used by idiots, but the fact that it was used by idiots, whose code now had to be supported, is what froze this bug into the language.
Because Node isn't actual javascript
Okay, now you are plainly misinformed. You mentioned "Mac", so I'm going to leave it as you are a primary Apple user and thus not worth my time.
[Fun with jQuery Templating and AJAX ](http://net.tutsplus.com/tutorials/javascript-ajax/fun-with-jquery-templating-and-ajax/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+nettuts+%28Nettuts%2B%29&amp;utm_content=Google+Reader)
Wow, this page looks like shit. ::Allow scripts Wow, this page *still* looks like shit.
&gt;All inner functions declarations are created at the ExecutionContext step. So an unreachable function declaration will be always created. For example: function foo() { if (false) { function bar() {alert(1);}; } bar(); } This can be fixed with `var bar = function() { alert(1); };`?
why would anyone want to do this?
Sweet! Definitely let me know how you like it, I'd love to know what you think.
Ah my bad. I have only used it for mobile so knew iOS and Andriod. I wasn't aware of the desktop capabilities beyond Mac. The desktop stuff is actually pretty cool now that I've investigated it more. But yes, primarily Apple at both work and home but also have Windows and Linux at work. Kind of silly to blow someone off because they primarily use one brand versus another but whatever. Thanks for making me aware of Appcelerator's ability to work on the different OS's. 
What fantastic documentation! I wish I had a reason to use it.
Yes, currently there is only one timeline per Kapi instance. Support for multiple timelines is planned and is on the "official" task list: https://github.com/jeremyckahn/kapi/issues/35 If you'd like the square to persist, just add a blank keyframe for "3s," which is the last keyframe in this particular animation. Blank keyframes act as a "wait." In your code, a keyframe for "3s" is not defined, so the actor doesn't "exist" at the 3 second mark. Thanks for your feedback, I'm glad you're liking it!
I, for one, am not surprised that ie9 is sucking. The content type "feature" with stylesheets is annoying too. 
yes, full source code on github: https://github.com/sebcode/prototype4
The fact you've misspelt Android each time you've typed it seems kind of silly to me too. The deal is, you were horribly misinformed with your first comment, and when I refuted your claim, you even then did not bother looking to see if you were right or not, just modified your claim to say it only worked "on Mac", which was downright misinformed, and again you had not bothered to look it up. If you can't have fun with the ignorami of this world, who can you have fun with?
Kinda cool, but I feel like this is more python than js.
&gt;However, in figures we will use \_\_&lt;internal-property&gt;\_\_ notation, and in particular for the prototype object: \_\_proto\_\_ (that’s moreover, is a real, but __non-standard__, implementation in some engines, e.g. SpiderMonkey). You lost me at \_\_proto\_\_. 
What is the problem?
 I admit I'm a javascript novice, but it seems \_\_proto\_\_ is non-standard and thus not a part of the core ECMA spec. I don't want to learn bad habits. The string length of "\_\_proto\_\_" is the same as "prototype", so it doesn't even save on typing. Other than that it seems like a good article.
&gt; I admit I'm a javascript novice, but it seems __proto__ is non-standard and thus not a part of the core ECMA spec. I don't want to learn bad habits. The post is not about learning javascript so much as it's about understanding its details. Here `__proto__` is used because it's clear, it's used in at least one implementation (more, actually: FF, Safari, Chrome and Opera all use `__proto__`, not sure about MSIE) and it uses internal property notation. Dmitri also clearly indicates that it's an implementation detail of his description. &gt; The string length of `__proto__` is the same as "prototype", so it doesn't even save on typing. Ah, but there's the issue: `prototype` is an existing, read/write property with its own semantics and constructors have both `__proto__` and `prototype` (see graph 3, the `prototype` property links to the prototype object for the instances, but the constructor is a function and thus has its own prototype: the `Function.prototype` built-in), if you re-use `prototype` it's not possible to express object constructors anymore.
&gt; [With Spidermonkey objects have a property named "\_\_proto\_\_" to access the prototype chain (well the direct prototype object which then again has a \_\_proto\_\_ property so you can walk the prototype chain that way), what you access there is what ECMAScript edition 3 defines as the internal [[Prototype]] property of objects.](http://old.nabble.com/.\_\_proto\_\_-vs.-.prototype-td1181508.html) &gt; [So that \_\_proto\_\_ property is a property Spidermonkey has choosen to expose to script although the ECMAScript edition does not require that, there it is required to be implemented internally for property lookup.](http://old.nabble.com/.\_\_proto\_\_-vs.-.prototype-td1181508.html) [\_\_proto\_\_](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/proto) is deprecated in favour of [Object.getPrototypeOf, which John Resig has written an article about](http://ejohn.org/blog/objectgetprototypeof/).
`getPrototypeOf` is not a property, and thus useless for the needs of the article.
Thanks for the clarification. 
Not the article no, I were thinking that it might be usable information for those who would not like to use __proto__. My comment were in no way meant to be a reply to the article.
Actually, you can if you want. It's a workaround for optional parameters/default values. Unclear code can lead to all sorts of problems. var makePerson = function(favoriteColor, name, age) { if (arguments.length &lt; 3) { favoriteColor = "green"; name = arguments[0]; age = arguments[1]; } return {...}; } You should probably only ever use `arguments` in a loop. Otherwise, use the formal parameter name! name = favoriteColor; age = name; Oh you can see your problem a lot clearer now that you have clearer code. Funny how that works out. No need to ban the use of reassigning parameters.
So the main problem with the example in the article is that you're not supposed to treat the arguments object like its a native array. You can once you convert it to an array with Array.prototype.slice.call(arguments) https://developer.mozilla.org/en/JavaScript/Reference/functions_and_function_scope/arguments
The author should work on his javascript so that his slide presentation works on Firefox too...
Some nice tricks! (I didn't know about the tilde and the !! operators) I was a bit surprised I couldn't use my mouse to navigate through slides though.
thanks, nice read
The slides mechanism is not self-evident, clicking does nothing, scrolling either. Other than that, the slides looks fine, cool stuff.
[It feels as if I've seen this design and Javascript before](http://slides.html5rocks.com/#landing-slide), although a bit altered here.
Ew. This is not a good way to navigate a web site.
!! isn't really an operator, it's two of the same operator !'asdf'; // now a boolean _false_ !!'asdf'; // convert to to a boolean _false_ and then NOT's it into a boolean _true_ You could !!!!!!foo for all Javascript cares.
Of course, bad choice of words from my part, sorry. 
And Safari
Doesn't work in Chrome either. 
Depends. For me it seems to work as long as I don't click on the page.
When it doesn't break (clicking breaks it) you can navigate using the arrow keys.
The tilde example is fun but if you write *if (~c) {* instead of *if (c!=-1) {*, what will you gain except angry coworkers ? This doesn't improve performance nor readability.
I can only think of very seldom cases where space / code size is critical (js1k, compression). I don't think I'll ever use it, it's nice to know you can do it though.
I'm using right and left arrow keys on FF4. Works for me.
So this guy doesn't know how the Arguments object works, then claims that because the way he (erroneously) used it didn't work, you should never reassign any function arguments? Delightful! Look at me, I'm a blogger now: Hey guys, one time I wrote a for-loop wrong. Don't use for-loops. They don't work! **EDIT:** In order to be constructive, I'll write a bit more. If you "shift" array values from left to right, you are clobbering values. All of his elements were "green" because he overwrote elements to the right in the move process. It would have worked fine if he had just assigned from right to left. var makePerson = function(favoriteColor, name, age) { if (arguments.length &lt; 3) { for (var i = 2; i &gt; 0; --i) // like a boss! arguments[i] = arguments[i - 1]; arguments[0] = "green"; } return {...}; }
they're so rare, you can hardly see them. thanks for obfuscating the navigation. Aside from that, how about explicating what the tilde actually does?
Works for me in Chrome 12.0.725.0 dev on Win7
I've been planning to make a desktop app with XULRunner for quite awhile. Just need to get off my lazy ass and dig in. I'd probably end up writing a tutorial to help others since as you said the documentation for this is currently pathetic.
Apparently [there are](https://github.com/Tim-Smart/node-gtk) Node.js bindings available for Gtk+. Although documentation is basically nonexistent.
Any known demos? Looks interesting.
Uh, works fine in safari...
It's not a website, it's a slide presentation.
Whatever you want to call it, it's running in my web browser. Really ought to have mouse controls, or at least some kind of explanation that you're supposed to be using the arrow keys. Not intuitive at all.
What's the browser compliance on the `get` and `set` operators? I know for a long time these weren't usable, has that changed?
press the space bar works. When in doubt, press the big bad bar!!
I don't believe you can consider get and set operators. They are syntactic elements only valid in object literals to create getters and setters. Eg. they are more like the function keyword than anything else. Also, if you want to know whether a variable contains NaN or not, it is better to use if(foo !== foo), which will be true if and only if foo is NaN (bugs notwithstanding). The problem with isNaN is that it will also return true for strings and other things that can't be converted to numbers. Eg, isNaN("asdf") === true.
Sure it works using keys, but it's still broken. How many websites require you to take your hand off the mouse? 
**Install Firebug.** That is all.
Usually "export to format X" requires some kind of server side processing to convert one source of data into something else. I've never heard of anything that does that work clientside (in JS).
he's already using chrome! right click -&gt; inspect element.
I read an article about the difference between learning JavaScript and merely learning jQuery, and I wanted to move to the former. I picked up and read Crockford's "The Good Parts" and I really enjoyed the read. In a stroke of good luck, I came up with an idea around the same time that would lend itself to an actual project, and I didn't find anything already implementing that idea (I eventually did find something close). So anyhow, I want to grow in my understanding of JavaScript, so I think that means putting myself out there and submitting my work to be scrutinized. I already have the idea to render bubbles from a pool instead of creating and deleting them to improve performance and the options parser is only partially implemented, but please let me know if there are any other changes to make. 
In the *carbonate_demo.html* the file called is *bubbles.js* but it should be *carbonate.js* for the demo work.
Ahh! I know, I **just** realized that and GitHub's editor is down and I can't fix it yet. Just came to post the error. :( It used to be called bubbles.js and I decided carbonate was way cooler.
Can't be done, even for CSV. You'd need server-side. (well you could generate a data: URL but IE7 doesn't support that and IE8 only allows 32KB so your file could be truncated) **edit:** [Well it seems there's more support than I thought for data urls but only when they reference images](http://stackoverflow.com/questions/1575333/ie6-how-to-get-inline-base64-images-to-work-with-ie6) so it doesn't solve your problem.
Fixed
Looks neat. I think that you should take as an argument in carbonate() an HTML element for the canvas to be injected into rather than assume they want the whole body covered. That'd provide more flexibility for the developer and take a little guesswork out of the codebase 
not too shabby, a little verbose, but that's common when you're starting out. Here's a few quick modifications I'd make: 1. Don't bother making and injecting a style element (also .innerHTML is generally a bad idea). Instead, after creating var canvas just do canvas.style.position='absolute' and canvas.style.zIndex(-1). (any css property with a - is represented in camel-case in JS). 2. Wrap the whole thing in an anon function and expose what you need with window.carbonate = carbonate. 3. Use setTimeout instead of setInterval and have the function setTimeout after each iteration. This is more personal choice these days, as JS engines have gotten much faster, but it can lead to issues if your interval'd function takes longer than alloted to execute. 4. The whole beer_framework object is a little overly-complicated. You could just use vars for most of it and cut out a lot of the this.properties. Also, a lot of the 'constants' you've got in the beer_framework object could be baked into the functions that use them. For example, BUBBLE_DISTANCE_MAX and MIN are used in one function, no need to make them part of the bee_framework object (though for things that are used in many places / initial testing, they are useful). I guess my main summation of it is that it's a tad over-built and in a more class-based style than it needs to be, but that's not a bad thing, especially when starting out. As you play around with the language more, you'll find ways of doing things in a very concise and more functional manner, I know I did (and by functional, I mean the programming paradigm, not that it doesn't work) . Keep up the good work and never stop learning!
Love it. I hope we see more sites moving towards micro-frameworks. It kills me when sites load the entire jQuery library to show or hide a div or submit an AJAX call when the same thing could be accomplished with a few lines of plain-old Javascript or a micro-framework.
THIS is exactly what I'm talking about. :-) Bloated frameworks suck. I'm actually tempted to look for a reason to try out the guy's code just because it matches my philosophy of minimalistic design. There IS a counter-argument, right? Different microframeworks mean different APIs to learn and different coding styles to deal with. Each one comes in a JS file, and those could easily turn into separate round-trips to the server... Ok, those are weak arguments. Long live the micros!
Wow - that scrollbar is broken with the Reddit Toolbar activated: http://www.reddit.com/tb/gntq3
They *could* easily turn into separate round-trips, but concatenating all of your library files is pretty straightforward - especially if they're not likely to change frequently. As for a real downside - micro frameworks tend to have gaps and overlaps where a fuller framework might not. That said - I also support the unix "do one thing very well" philosophy
If you are interested in a modular library that allows you to pick and choose your functionality you should check out [ender.js](https://github.com/ded/Ender.js), it's got some pretty slick stuff in such a small bunch of packages.
Yeah, the idea that there's a "best tool for the job" and we shouldn't just default to grabbing the swiss army knife when all we need is a screwdriver resonates with me.
502 - It went through. You may want to clean up your duplicate comments. (Now, if someone could find out why people are downvoting me, that would be AWESOME.)
I built the second version of openMSN in XULRunner but lost the source files. Wrote a nice socket class to interface with Mozilla's socket system which was pretty similar to node.js' stuff. This was probably 2004 - 2005 so a while ago D:
[YUI Global Object](http://developer.yahoo.com/yui/3/yui/), [YUI Configurator](http://developer.yahoo.com/yui/3/configurator/).
Glad it wasn't just me. I scrolled down using my scroll wheel, and what's-his-name shot off the top of screen while, but nothing else moved.
Thanks, being a relative noob I was hoping for a "silver bullet" solution that was dirty easy to implement. I will start to investigate the server side options. There seems to be quite a bit out there for php and since I am already using PDO for my SQL calls it would make sense i guess to go down the php route.
Thanks, I will be investigating some server side options to do this via php. Looks as though there are quite a few readily available for each of the formats I would like to have exported to.
&gt; You invoke strict mode at the script level by including the statement use strict before any other statements in a file. To be clear, `"use strict"` is not a statement. It's a string literal. That way it's appearance in a source file is backwards compatible with non-strict-mode browsers: 
I liked that javascript didn't have the complexity of other languages with lockdown methods. Also accessors I feel are bad in any language because it hides the fact code is executing behind them which is why a function set/getVar() should be used in the first place.
in the first function you can have properties/methods before the return that are private because they'll be in a closure that only the return object can access. Here's a link for oop in javascript: http://mckoss.com/jscript/object.htm
"use strict" certainly _is_ a statement :) ExpressionStatement to be more precise.
I just updated namespace.js to support the commonJS style directly.
I just updated namespace to be compatible with the exports and require functions of commonJS. It doesn't do any loading, but given the source files are loaded by other means, code can be used compatibly.
Oh, you. :) Technically `"use strict"` *isn't* a statement, it's an expression, but `"use strict";` (note semicolon!) is. Right now you may be thinking, "but what about ASI?!" In that case, `"use strict"` still isn't a statement, but `"use strict"\n` is. So there.
In terms of end result, they're both the same thing - `App.Subclass` referencing an instance of an `Object`, which has some properties set on it. The former could be made to do more - you could define and pass arguments to the anonymous function, or declare helper functions or data structures in the function body prior to returning, all of which would only be accessible during definition of the returned object and within any functions defined. In terms of your understanding, I suppose`App.Subclass` is a bit more like a singleton; you're just using an `Object` as a container for a bunch of *stuff* - there's no concept of creating more of them. The concepts "class" and "instance of a class" map a bit more closely to constructor Functions and using the [`new`](https://developer.mozilla.org/en/JavaScript/Reference/Operators/Special/new) operator on them, respectively.
Is the _entire_ jQuery lib really that taxing?
Side note: I just took Thomas and Amy's [javascript master class](http://javascriptmasterclass.com/) and it was *awesome*! Highly recommended. 
Thank you. I see what you mean and it makes sense with closures and scope. 
Thank you, that makes it pretty clear.
Other counter-arguments: * A full-featured lib is more likely to have better &amp; widespread support, both short-term and long-term. The micros I've seen are mostly '1-man band' types, whereby all development, support, etc. hinges on the back of 1 person. They leave, and there goes everything but the code, which is fine for today but then tomorrow someone has to pickup the torch for maintenance/bug fixes, compatibility fixes, feature requests, etc. Large libs have teams of contributors, whose membership can flux without having an adverse impact on the project. * Micros are fine so long as you have a guaranteed, limited scope, but as the adage goes: _"Walking on water and developing software from a specification are easy if both are frozen."_ You might start out with a few micros, then add a few more, and then eventually once the project is finished you end up with 18 different micros. Is that really better than 1 all-inclusive lib? * Day-to-day dev usage, such as checking bug reports because the code is doing something unexpected, or even just API refrence, is greatly increased with micros. Instead of a single point-of-reference, you now have discrete references and bug tracking systems scattered all over the net, each with a different set of login credentials, etc. I think it goes without saying that not being able to access all of these resources in a single location is a huge efficiency drag.
Wrong. If it's accessed via the HTTP or HTTPS protocols, it's a website. 
lol, I did this in 1999. The author should upgrade his internets.
&gt;The general rule is that popup blockers will engage if window.open or similar is invoked from javascript that is not invoked by direct user action. That is, you can call window.open in response to a button click without getting hit by the popup blocker, but if you put the same code in a timer event it will be blocked. Depth of call chain is also a factor - some older browsers only look at the immediate caller, newer browsers can backtrack a little to see if the caller's caller was a mouse click etc. Keep it as shallow as you can to avoid the popup blockers. - &gt;Even if it were possible (I don't know), if people use popup blockers you should respect it. Most browsers display a message when a site tried to open a popup so they can still see it if they want to. You can put a remark on your site that some content opens in a popup and the user should allow it in order to proceed. [Stackoverflow](http://stackoverflow.com/questions/2587677/avoid-browser-pop-up-blockers) 
upvotes for everyone.
My friend and I were discussing this earlier today. Short answer: "No, but it's more the principle of the thing." Yes, jQuery is everywhere and most users will probably have it cached if you serve it from the Google (or another large) CDN. For me, though, it comes down to "use the right tool for the job." People (especially newbie coders) are using jQuery as a crutch without understanding the javascript underlying it or realizing that (like I said above) they could easily do the same thing themselves and learn more about the language and how it works in the process. Some people couldn't give two shits and just want to slap a plugin and a link to the CDN in the code and make it "just work." For those people, jQuery is the right tool for the job and more power to them. I'm just saying that the rest of us need to be mindful that jQuery (whether we choose to use it or not) isn't the be-all and end-all of JS frameworks.
I have a feeling that the author has no understanding of how bitwise operators are really used; his examples are pretty horrid.
Adding some sort of messaging to allow pop ups ain't gonna happen.
Browsers do that automatically
My point was that jQuery isn't exactly a big lib, in terms of file size -- isn't it like 25kb? Unless you're developing for mobile (in which case there are optimized builds/libs), I don't _ever_ see 25kb/page being a burden on anyone. Even on dial-up it wouldn't be a concern. &gt; Short answer: "No, but it's more the principle of the thing." Ok, so you admit it's dogma driving your choices now, and not an actual concern for the user experience. While I agree that doing things based on principle might make you feel better, it many times can have [negative consequences](http://www.reddit.com/r/javascript/comments/gntq3/i_for_one_welcome_our_new_microframework_overlords/c1p1u48). &gt; People (especially newbie coders) are using jQuery as a crutch without understanding the javascript underlying it or realizing that (like I said above) they could easily do the same thing themselves and learn more about the language and how it works in the process. At the end of the day, with deadlines looming and money running out, nobody gives 2 shits about whether or not the coder has an intimate knowledge of every language they touch, they just want a working product out-the-door on time. For instance, at my job, I can either: a) spend many, many hours training my devs about "real" JS usage. For a full-on, comprehensive JS training course I'd guesstimate that it'd take a couple weeks, at least, of full-time teaching. Factor in the prep time on my part, multiply the training time required by the number of devs, and now we're looking at 6 months or more of full-time training. or b) Give them api.jquery.com and let them figure it out in 15m and move on to their next task. You tell me which is more desirable. If we lived in our grandparent's generation whereby employer and employee loyalty meant that you could spend an entire career at once place, then this might be worthwhile, but in today's age of job-hopping every 1-3 years, it makes no fiscal sense at all. Plus, those deadlines don't wait on account of training; the clock keeps ticking. 
Yeah, but you're assuming people will read and allow them :) They're not going to add html text for this as well - too many pages, too manual of work.
If you're looking for a sure fire way to circumvent popup blockers you're on a fools errand, if there was a way don't you think all the annoying sites that want people to view popup ads and take survey would be using it? I gave you the best practices and the best possible way to ensure a popup shows, what you do with that information is now up to you.
Using an overlay instead of a real popup will always work. If you're looking for a solution, then you have access to the javascript on every page, and in that case, you should be able to make an iframe in a statically positioned div to the same content. 
You make good points. I'm glad this isn't a formal debate, because I'd probably have just lost. At the end of the day, the point I'm trying to make is "use the right tool for the job" and the point you're making is "that tool is usually jQuery." I don't see any conflict between those two points. Thanks for the well-reasoned response.
Exactly. There are plenty of working overlay libraries out there, and they look much nicer than regular popups. And you wouldn't need to change anything server-side, since most of them support iframes.
If we assume the `this` keyword refers to the right objet (that doesn't seem to be `obj`), you should write : function optionBox(objname){ obj = document.getElementById(objname); var that = this; // Stores the this reference /* ... */ c.addEventListener('touchend',function(){ that.close(); },false); obj.appendChild(c); } }
In JavaScript, the value of `this` is determined when you enter a function, by the code calling it — in an event handler, `this` will be the element which triggered the event (`c`). The usual answer is to create a variable in the function which is called with the `this` you want, and use it: function optionBox(objname){ var self = this; … c.addEventListener('touchend', function(){ self.close(); }, false); } (Name the variable whatever you want, "self" is just my go-to choice.) Another option is to bind the handler to the `this` you want. Some frameworks have utilities which do this (e.g. [`_.bind()`](http://documentcloud.github.com/underscore/#bind)), and it's built into newer browsers as [*function*`.bind()`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind). A couple of other notes: 1. Declare `obj` as a variable, or it will be set globally: obj = document.getElementById(objname); 2. Make sure you call `optionBox` with `new`, or `this` will be the global object (you may already be doing this): new optionBox(objname) 3. Constructors like this (which are called with `new` and create new objects) are traditionally capitalized (`OptionBox`).
&gt; Is there a general consensus of best practices in regards to opening a new pop up (or pop under) window with JavaScript with pop up blockers? Yeah. Don't.
This explanation of 'this' and creating a reference to this before creating a new function is correct. When you define a helper function within a function, 'this' changes to refer to the global context, not the declaring function or object. I'm trying to find a good article to explain the idea, but reading Crockford's "JavaScript: The Good Parts" helped me. I'll come back if I find one. The other thing I see is that 'this' and 'that' are likely to refer to the global window object. Consider this code: function optionBox(objname) { var that = this; alert(this); var nestedFunction = function () { alert(that); }; nestedFunction(); }; optionBox('test'); It alerts '[object DOMWindow]' both times in the Chrome dev console. I think you're better off defining the design of what you want to do and keep track of who or what 'this' is referring to. From the looks of it, I think you want to define all your functions on obj.
Wait a minute. Are you assuming 'this' refers to the object box? Or are you creating a global function that knows about all option boxes and manages a display feature in one function (ie, 'one close function for them all')?
It'll basically be box1 = new optionBox(); box2 = new optionBox(); ... So yes, I'm assuming *this* will be referring to the optionBox()
Perfect, it worked instantly. var that = this; ... c.addEventListener('touchend',function(){ that.close(); }.false); ...
That's what I figured was going on, but I never thought of storing *this* as a variable inside my object. The thing I was confused about is why obj.close() wasn't working. But, after looking at it and *actually* thinking about it, it's obvious that obj just represents a DOM object. Thank you!
This is what your user's expect from you: &lt;a href="http://surveyurl...." target="survey_window"&gt;Please take our survey&lt;/a&gt; This will be redirected to a browser tab for most modern browsers and they'll keep their place in the existing tab. If you do anything other than this, you're trying to shove something in the user's face that they don't want to see, and YOU are the one causing them to install popup blockers.
I wasn't sure what your argument was, since your first post was arguing jQuery's file size, the 2nd argued that it's based on principle, and then at the end of that same reply you argue that jQuery "isn't the be-all and end-all of JS frameworks". I refuted the size problem and doing things based on principle alone, and now I will say that I used jQuery as an example simply because it is the most prevalent of the "bloated" libraries (but it could very likely be prototype, Dojo, etc.). You misconstrued my main point, which is: don't jump on bandwagons just because you read some convincing blog post. Do some critical thinking that involves considering facets outside of your POV and also involve the real-world. The arguments for this 'micro movement' are chalk-full of holes and omissions (which I've already addressed), and yet people are readily picking up pitchforks and torches to rally around it. Do micros have their place? Yes, but I don't believe they will ever fully replace full-featured libraries. Are the "bloated" libs perfect? Hell no, but they solve most problems for most web devs, quickly, easily, efficiently, and with gobs of support. But yes, a good exchange to pass the time :) p.s. I don't care who the article's author is (especially given his braggadocio) when he should know by now that jQuery isn't a **framework**; loses credibility IMO when he can't even properly define the entity that he's rallying against. I also don't agree with _his_ main point: &gt; Small code is good code: the fewer lines in your source, the fewer bugs you’ll have, plus it will download and execute faster. Full of logical fallacies. [Line count has no correlation to quality.](http://www.fastcompany.com/node/28121/print) Line count also has no direct correlation to download nor execution speed...
This. I hate to see flash die because I jumped on the flex wagon only a couple years ago, but with all the latest light weight frameworks I dont see it making a comeback.
Noob alert, but couldn't you also use the .call() method to change the "this" reference to whatever you want?
I see your question has been answered, but I just wanted to bring up something I saw in your code that I felt warranted a comment. &gt; if(obj!=null){ ... You need to be careful when comparing values like null/false/undefined/etc...because: null == false == 0 == undefined When comparing those 'special' values one should use the '===' operator to check for congruency (or in this case !==). I personally use === / !== almost exclusively when comparing values unless I know I don't care that it is exact (like in this case, if you just wanted to check that something was not 'falsey'). edit: here is a good reference on this [http://www.mapbender.org/JavaScript_pitfalls:_null,_false,_undefined,_NaN](http://www.mapbender.org/JavaScript_pitfalls:_null,_false,_undefined,_NaN)
exactly! This way you can conditionally define a function
Thanks for that. I use that with undefined, but I didn't know that null fell into that category.
No problem, I ran into this issue myself a while ago...it is an easy trap to fall into. Nowadays I feel it is just good practice to always use ===/!== whether or not you are comparing one of those special values...it just makes it easier not to accidentally use the normal comparator on those types of variables.
Upvoted for JS goodness + family ties. CUZ!
You will have better luck posting this over in [/r/programming/](http://reddit.com/r/programming/) or [/r/coding/](http://reddit.com/r/coding/). You are unlikely to get many responses posting it here. I don't know how I would solve your problem though!
I just remembered this is just functions being "hoisted", so if you remember that instead of what I quoted, then any situation like this is easily understandable.
Don't think of them as triangles. Think of them as connected vertexes. 1) Pick a bunch of random points, maybe constrained (ie. if a new point chosen is too close to an existing one, throw it out and try again) 2) For each point, connect it to it's 2 to 5 closest neighbors that it's not already connected to. Repeat until all points have at least 2 connections. 3) fill the resulting triangles. Will that work? I'm sure I forgot an edge case (HAW!), but that should get you closer.
How about: * Generate some random points. * Draw lines between them. * Divide shapes made by these lines with lines until sides = 3. 
That's similar to another idea I had, but the way canvas works, you need to begin a path, draw the sides of the triangle, fill the triangle with a color, and then close the path. Something like this: &gt;ctx.beginPath(); &gt;ctx.moveTo(50,0); &gt;ctx.lineTo(100,87); &gt;ctx.lineTo(0,87); &gt;ctx.lineTo(50,0); &gt;ctx.fill(); &gt;ctx.closePath(); So i'm not sure how I would generate all of the random points and then come back to them and perform this process for each triangle between them. I also think it might still lead to some overlapping. I'll play around with the idea some more and maybe forget about the triangles for now and just draw lines between points and see what happens. Thanks for the ideas!
Thanks! I wasn't quite sure where to post so I just picked here because I'm working with javascript. If I don't figure it out, I'll look there (and think more about where to post next time :P )
It's a general problem to solve, not just a javascript one, so it makes sense to put it in some other subreddits! I like the idea that someone else came up with about making a random set of points and then connecting points to each other with lines!
Sorry, but I don't quite follow you. I've figured out how to draw individual random triangles and fill them with a random color, but the tricky part is generating a bunch that are connected at vertexes and don't overlap at all.
I've been thinking about something like this but the way in which you have to draw a triangle in order to fill it with a color would make this very tricky (see my explanation above). Thanks for the idea!
divideShape(points) { if(points.length &gt; 3) { subShapes = divide(points) divideShape(subShapes[0]) divideShape(subShapes[1]) } else if(points.length == 3) { drawTri(points) } } You'd do something like this, although the devil is in the details.
It's a [Voronoi diagram](http://en.wikipedia.org/wiki/Voronoi_diagram).
The name "self" is very, very common, almost a defacto standard. It's very good to use it. The local definition of "this" is one of the biggest gotchyas for most programmers learning javascript. I should also mention, you can avoid this mess if you pass an object to addEventListener instead of a function. I've found this doesn't work on some older browsers. But when you can use it, the object's "handleEvent" will be called for you, and "this" will be set as it should be.
Thank you! I didn't even think to look for an algorithm that already exists. That article lead me to [Delaunay triangulation](http://en.wikipedia.org/wiki/Delaunay_triangulation) which is even closer to what I'm looking for! I still need to figure out how to use canvas to fill in each triangle randomly but I'll just focus on lines for now and see where it takes me.
If you're not looking for speed in the rendering, just scatter a bunch of random (virtual, not drawn) points and assign them colors. Then for each pixel in the canvas, assign the color of that pixel to the color of the nearest point -- you'll end up with filled triangles.
I see what you're saying, but wouldn't that actually produce colored polygons and not necessarily triangles? Or am I missing something? Polygons still would be really and I'll definitely play with this idea.
there should never be overlapping as the points are fixed. if you recursively add vertexes until each shape has 3 sides, then you will have solved the problem, pick appropriate vertices/next edges based on how you want the image to look.
ctx.fill() does an implicit ctx.closePath() That's the only javascript-specific thing I have for you. Maybe you'd have more luck with your random triangles if you start by building a triangle mesh and then work backwards. Let me see if I can throw something together. 
Meh. I gots to sleep. I probably won't remember this tomorrow.
In the process of drawing lines between points in close proximity, I see the possibility that lines will overlap. Just imagine 4 points forming a square. if you connect all of the points, you will have a cross-over of two lines in the middle. Also, you are not guaranteed to form all triangles. There could be diamond shapes and other polygons. Of course, there's always a way to solve these problems as well, but it just gets more and more complicated. A comment below helped me find [Delaunay triangulation](http://en.wikipedia.org/wiki/Delaunay_triangulation) which I haven't really messed around with yet, but I'll try it out tomorrow and see if I can get it working. Thanks for all the help guys! 
But if the whole swiss army knife is already in the browser cache anyway, it might be just as easy. That said, I understand the appeal of microframeworks too. 
Variation of your idea: Start with a really big triangle. Randomly pick a spot along each of the 3 sides - this splits the original triangle into 4 triangles. Repeat as necessary 
Hmmm. Gave it a try but the higher triangle order is a bit too obvious. http://imgur.com/2jLbV
Doesn't once explain why the pattern is not needed.
I guess what the title of the article, and the article really wants to say is that you don't need classes and class trickery in JavaScript to implement the Singleton pattern.
Little offtopic: here is how you can make simple singleton in JS: var Singleton = function() { alert('a'); Singleton = function() { alert('b'); } } Singleton(); Singleton(); Singleton(); It will alert: a,b,b;
Ah, I suppose that makes more sense!
Not quite, you can't _ever_ change the functionality of a singleton, which is a single instance of a _class_ -- not a function, even though a Javascript class _is_ a function. All you are doing is changing the value of a variable used as a function call.
I'd argue the singleton pattern is never needed, regardless of language/platform.
because of currying, the function passed to addEventListener will be bound to the local scope of the function, so if you do somthing along the lines of var close = function() { //... c.addEventListener('touchend',function(){ close(); //will be bound to the instance of the close function created above If you use this.close the function will be added to whatever "this" the addoptionbox function lives in (window if it's in the global scope) and it will be overwritten every time you call addoptionbox, breaking any previously created option boxes. 
DZone is categorically **bad**, who wants to read their crap?
I think, if you connect it to it's closest neighbors, then the lines should never cross. Another way would be to start with a predefined mesh across the canvas, with the triangles in a regular pattern so you knew they weren't overlapping, then distorting the points within their triangle. 
You need to wrap it in an anon. function; currently you're creating 6 new variables in the scope, when only 1 looks to be required. Also, the block dealing with the _opts['debug']_ is a little more verbose than necessary IMO. Since it looks like _debug_ is the only option you set, I would recommend either changing from the _opts_ object paradigm to a single _debug_ parameter, or shortening the logic required to something like this (should be roughly the same, but I think you get the idea): this.debug = !!(opts &amp;&amp; opts.debug &amp;&amp; (((typeof opts.debug === 'string') &amp;&amp; (opts.debug.toLowerCase() === 'true')) || opts.debug)); That's just me though; I prefer trivial pieces of code that are unlikely to see any significant changes occupy only a trivial amount of space.
This looks like a different solution to the problems solved by _promises &amp; futures_[1][2] [1] http://wiki.commonjs.org/wiki/Promises/A [2] http://blogs.msdn.com/b/rbuckton/archive/2010/01/29/promises-and-futures-in-javascript.aspx
Don't open a new window. Spawn a modal dialog within the page. As for linking straight to Survey Monkey, try this: &lt;a href="http://surveymonkey.com" onclick="window.open(this.getAttribute('href'));return false;"&gt;Take our survey&lt;/a&gt; It degrades nicely, and it won't get blocked because the user initiated the click event.
fyi, I have a JavaScript / Canvas Voronoi implimentation (with source): here: http://www.mikechambers.com/blog/2011/03/24/javascript-voronoi-port/ It is a port from ActionScript / Flash, and not the most optimized implementation, but it might help.
I rather tend to favor accessors over Javaish getters/setters. I really don't buy the complexity argument. getters/setters share the same problem unless I missed something obvious. :) API-wise it's pretty transparent. If you decide to promote some property to be accessed via an accessor, you don't have to modify the code depending on it. Of course it can be argued that you should not use direct property access in any case but stick good ol' get/set instead... As an added benefit you can provide some derived functionality without having to care about this on the user side. Consider common conversions for instance (F to C and so on). I like Python's decorator based property syntax a lot. I wish JS had something like that...
No it really is useless as a pattern. When I first learned about it about a decade ago I loved it and used it all the time. As I grew as a programmer I got to the point where my apps never had any singletons. It's a very bad pattern. It's really just a fancy global object, which has all the downsides of placing things in the global namespace. It also can lead to surprises when methods access a singleton yet give no indication they will do so; surprising side effects are bad. Really just a quick google search for [singleton pattern harmful](http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=singleton+pattern+harmful) yields all kinds of people talking about why to avoid singletons. But that's just like, my opinion man. I've never once needed a singleton. If you feel you do, I'd argue your application's architecture is sub par.
Heh, small world!
That looks interesting. I like the ability to use normal control flow (for, if, while, etc.) with workflows, though.
Fair point. I do intend to finish the options parser at some point to handle more options. Some of those constants like the bubble's width or frames per second could be configurable. 
Thanks for that feedback. It looks helpful, and I hadn't thought of that way to attach the carbonate function to the global window object. I'll have time to work some of this feedback in tonight. I've been stupid busy lately. With regards to using setTimeout instead of setInterval, how do I keep the loop going? Does it call setTimeout again when it is finished or what?
Try generating all of the vertices you're going to use and storing them in an array (or better yet, a tree). Once that's done, iterate through the array/tree until you've filled the screen. Keep track of the points you've connected as well, so you don't overlap.
&gt;Sorry, no IEs It is to be expected.
No need to apologize.
I think you fail at comprehending the true value of a singleton, and how singletons are implemented. It has nothing to do with trying to avoid the global namespace; that's inconsequential, though, since even if the class wasn't a singleton, the class name would still occupy an identifier in the global namespace. Likewise, there is nothing about the singleton pattern that dictates that it must be available globally; it's very easy to wrap it in a getter somewhere, so that nothing outside of the getter method would have visibility to the identifier used for the singleton. Also, I see the value in singletons in that they are essentially static objects that require a non-trivial amount of initialization. The result is a static object in the sense that it cannot be instantiated, but it can contain actual ctor logic so that you can lazy-load the singleton to avoid expensive ctors until absolutely needed. I would argue that if you feel an application's architecture is sub par due to the use of a singleton, then you shouldn't be discussing application architecture. But that's just like, my opinion man.
Oh good point. Delaunay triangulation is the way to go then, I think.
Had a play around with this myself and got something which seems to work nicely. 1. Divide area into sections, e.g. 100x100px squares 2. Generate random point within each area 3. Iterate over the areas consecutively and create triangles by joins the points in each area as two "right-angle" triangles, i.e. [(x,y), (x+1,y+1), (x+1,y)] and [(x,y), (x+1,y+1), (x,y+1)] or [(x+1,y), (x,y+1), (x,y)] and [(x+1,y), (x,y+1), (x,y)] 4. (optional) Randomly select which of the above pairs of triangles to generate and it'll make the pattern look a bit less obvious. [pic 1](http://i.imgur.com/i1OUE.png) [pic 2](http://i.imgur.com/76j8N.png) Some look like quadrilaterals, but that is just due to the random colour generator. [random_triangles.js](http://pastebin.com/xUCun2de) 
On the subject of setTimeout, you've got the right idea, you just take it one step further. Firstly, you have an isRunning flag, that we check at the end to see if we should call setTimeout again. Secondly, if you want (near) perfect timing, you'll have to calculate how long the loop took and subtract that from the timeout value. This is pretty easy, just save the current time when the loop starts and ends and there's your value. Looks something like this: var isRunning = true, rate = 1000/FPS, t = setTimeout(loop, rate) function loop() { var startT = (new Date()).getTime() // do loop stuff var stopT = (new Date()).getTime() if (isRunning) { t = setTimeout(loop, rate - (stopT - startT)) } } Hope that all make sense and I'm not just rambling here. I'd love to see what you do with it next! **EDIT**: i forgot to mention, for simplicity's sake, that you want to check that rate-(stopT-startT) &gt;= 0 or you can get an error if you're lagging (this is also a way that you can check to see if you ARE lagging, and adjust FPS).
**EDIT EDIT**: If you are over lag, still call setTimeout(loop, 0), not loop(), or you can grow a really long call stack (By always using setTimeout at the end of the loop, you're basically doing tail-call recursion).
I'm looking forward to trying this all out this evening. I've also got an idea to see if I can get toggle preference to persist across pages (maybe even sessions). I'll probably start with setting a cookie value, but ideally this would actually be usable on a site.
Apparently my "Firefox 4 (which is up to date)" isn't "Firefox 4+".
That is genius! Exactly what I was looking for! A relatively simple way that doesn't involve complex algorithms and is easily scalable. I'm glad I don't have to figure out how Delaunay Triangulation works. I hadn't thought of triangles as just squares or quadrilaterals cut in half. Cutting the canvas into a grid really simplifies it as well. I was thinking I'd have to just randomly scatter points throughout the canvas and then iterate over each point calculating a certain number of closest neighbors. That would have been a nightmare. How can I give you credit if I ever end up using this for something? I was just doing this for fun and to learn about HTML5 canvas but I might use it for something like a random desktop wallpaper generator or something along with the rest of [these](http://students.washington.edu/bjmiller/canvas/index.html). Thank you!
[My favourite demo to date](http://mozillademos.org/demos/nocomply/demo.html)
1: example is not a for...in loop 2: nothing wrong with doing this new Array(21).join('=') // ==================== edit: ok well maybe #2 is a good point. var ta = []; ta[21] = undefined; ta.join('='); 3: acceptable 4: `element.onclick` ... ... WTF? Don't do this. Ever. 5: Again. No, just no. Good concept to teach but bad practices in doing so. 6: wat 13: "This check usually works, but it does by pure chance" Oh really? So if you wrap that in a loop, will it not work 100% of the time? Jesus Christ.
Agreed. obj.addEventListener('click',function(){},false); Solved!
Am I being blind here? Suposedly bad: var myArray = [ “a”, “b”, “c” ]; var totalElements = myArray.length; for (var i = 0; i &lt; totalElements; i++) { console.log(myArray[i]); } Supposedly good var myArray = [ “a”, “b”, “c” ]; for (var i=0; i&lt;myArray.length; i++) { console.log(myArray[i]); } The only difference is the fact that the length is put into a variable beforehand, nothing else, or am I missing something?
and does anyone ever do: function(a, b, c) { var d = 10; var element = document.getElementById(‘myID’); element.onclick = (function(a, b, c, d) { return function() { alert (a + b + c + d); } })(a, b, c, d); } because... you know.... they're using a closure there inside the function anyway.... how wouldn't they know it would work without the extra function?
He's optimizing, man!
&gt; new Array(21).join('=') I dunno, this seems needlessly slow. Just use a literal. Comment its length if the length is important.
I think it's the fastest way to generate a line of characters. Although now that I've tried it out, you can do this: var ta = []; //temp array ta[21] = undefined; var str = ta.join('=');
Nope :) "use strict" in context of, say, `("use strict")` or `if ("use strict") { ... }` would be an expression. On its own, however, it certainly is a statement. Why? Well, let's see how it boils down in grammar: Program =&gt; SourceElements =&gt; SourceElement =&gt; Statement =&gt; ExpressionStatement =&gt; Expression =&gt; [...] =&gt; Literal =&gt; StringLiteral "use strict" is certainly a string literal but saying that '"use strict" is not a statement' just doesn't make sense. Especially not in a context of use strict directive (introduced in ES5) which specifically defines Directive Prologue (which Use Strict Directive is part of) to be the longest sequence of ExpressionStatement's (occurring at specific places). As far ASI... I'm not sure where you're getting this \n distinction from. 2nd point in 7.9.1 clearly says that semicolon is inserted implicitly at the end if input stream if it can't be parsed as a Program. So `"use strict"` does become `"use strict";` to be parsed as a valid Program.
No need for credit. It was a fun little project. It'd be interesting to see if this could be generalized to handle any size polygon. For example to get hexagons you'd need to join points from 6 adjacent areas. 
That would be interesting. I might have to toy around with that idea. 4,6,and 8 sides would be pretty simple, but I think some of the odd numbered sides could get pretty tricky. Also, I have found that in rare circumstances, some of the triangles can overlap like [here](http://students.washington.edu/bjmiller/canvas/images/overlap.jpg) (I've put up a grid marking the sections and points marking the vertices). This seems to happen when the original quadrilateral formed by the 4 points being joined ends up with a concave side and then gets divided between the two outer points of the concave side. It is a pretty rare occurrence though and I'm definitely happy with the results. I'll mess around and see if I can prevent it from happening. Thanks again! I'm really loving it! Such a cleaver solution I don't think I could have come up with.
Maybe. Or a weird copy-paste error. But this comment is strange : &gt;Moreover, if someone augmented Array.prototype with some other custom functions, your loop will iterate over those functions as well as the original array items Of course, if someone (who ?) changes standard object prototypes I very well can have problems but there is no way I can prevent this if I let anybody add stupid libraries to my code...
The point 12 among the top 13 mistakes... Is there really someone doing this ?
&gt; Most JavaScript engines aren’t clever enough to clean circular references. Is that true or BS ? Do we still have so stupid GC today ?
Always remember: that someone could have been you. My past self pulls stupid shit like this all the time just to piss me off.
Some people don't understand closures and instead of educating themselves, they try to be extra careful like that. Yes, it's stupid, but JS is a language that suffers from a long history of abuse.
Thank you, I stopped after the first one once he said a for loop was a for..in loop.
The worst part is before a lot of optimizations were happening to javascript... declaring the length of the array as a separate value was actually faster than using the length inside the for loop
But IE has _native HTML5_! That's, like, totally webscale!
Yes. But as you're senior, you can fire you past self, no ? In fact I was more referring to the fact that changing standard object prototype * should never be done * if done should be undone * especially if you were the author (fast, before others see it) 
Anyone know why it's telling me WebGL is not supported by my browser? I'm running Chrome 11.0.696.43 beta and haven't done anything to my knowledge to disable WebGL. I also get the same message in Firefox 4.0. I have a fairly old machine. Could that have something to do with it?
Was? [This](http://jsperf.com/cache-vs-nocache) shows it to still be quite a bit faster in IE/FF.
Regardless, 'for...in' on arrays is wrong.
So I think YUI has some great widgets with powerful functionality (Datatable for instance), but hot damn is it extremely verbose and complex to do simple things. Whenever possible, I opt to use jquery instead. I think comparing YUI and jQuery is the equivalent of Firefox &lt;3.5 and Chrome 9. Sure firefox had more extensions, but the extra bulk makes you use Chrome.
For a first shot at a library, it's actually not that bad. Wrapping this in an anonymous function is kind of silly, as is hooking it to the window object; this is not meaningfully a function or a member of the window object. Practically speaking you should probably just be making a normal object and returning that. Yes, I realize you were told to do that by a redditor; k3n means well, but he's just regurgitating the things that John Resig and Douglas Crockford do, and with time you'll realize that jQuery is not a codebase you want to imitate, and that Crockford is generally reinventing a freshman CS curriculum and calling it research. I'd like to see a lot more comments and a lot more vertical whitespace; the formatting choices make this hard to read. Extractable comments and unit testing would be even better. There is a whole *lot* of repeated code here. There are many reasons that's undesirable; please start pull-up refactoring these into discrete functions. All things equal, good job.
That's exactly what I was referencing thanks :) I figured by now it would automatically do that in all cases but clearly not.
So I figured out I can resolve the overlapping issue if I restrict the points to be placed in a diamond shape inside of each square section. this will eliminate the possibility of a concave side the quadrilateral formed by 4 points. It will limit the randomness a bit, but should still look good. It should actually cut down on the number of very thin triangles. I'm working out how to limit the y coordinate based on the x coordinate right now.
YUI3 is great for (dare I say it) enterprise applications. For me the power isn't really in the widgets they provide, but the underlying framework.
[Fixed!](http://students.washington.edu/bjmiller/canvas/random-triangles.html) It is no longer possible for any overlapping (I think) and there are now fewer narrow triangles. 
Can you expand on that a bit more?
For anyone who doesn't know how YUI reads when compared to jQ check out the [Rosetta Stone](http://www.jsrosettastone.com/).
From a past thread, [@dalmaer](https://twitter.com/#!/dalmaer) was mentioned as a person to follow on Twitter for js news. See post about that, as well as links to some other blogs here: [http://www.reddit.com/r/javascript/comments/e549t/ajaxian_seems_pretty_dead_what_other_websites_do/](http://www.reddit.com/r/javascript/comments/e549t/ajaxian_seems_pretty_dead_what_other_websites_do/)
That'd be my guess. Might be a graphics issue. Make sure drivers are up to date.
Could you explain why *not* using an anon function is better?
BUT WHERE CAN I DOWNLOAD THE SOURCE CODE? Hehe. This article is actually pretty great. I may start using this. I'm a recovering jQuery addict, and I do miss it's selector.
[thechangelog.com](http://thechangelog.com) -- for the lazy ;)
Not only do the lightboxes "tear off" when dragged to either side or the bottom of the browser, they "maximize" if dragged to the top, like Window 7.
http://www.dzone.com/links/feed/search/javascript/rss.xml
This is mostly a bug fix release for YUI2. YUI3 uses a modern selector engine etc...
move the points around with some sort of noise function?
Why does this only compare YUI and jQuery if it's called "JS Rosetta Stone"? It would be far more useful if it also compared against mooTools and Dojo, at least. Paul, I'm disappointed.
I think he's trying to say that YUI is more of a RIA framework than a regular JavaScript framework. jQuery UI is atrocious in this regard (it's very hard to make jQuery UI _not_ look like jQuery UI, the class naming isn't helping either). But without the widgets, YUI isn't very interesting.
I added a few of the greats to my feeds, not that they post huge volumes of stuff, but good quality stuff usually. * [jeresig](http://feeds.feedburner.com/JohnResig) * [NCZOnline](http://feeds.feedburner.com/nczonline) * [Dustin Diaz](http://feeds.feedburner.com/WSwI) * [Paul Irish](http://feeds.feedburner.com/paul-irish) 
Here's a good list of JS folks on Twitter: * http://twitter.com/#!/nathansmith/javascript I write the weekly news update for JSMag (see below), and now I get a lot of my news from these folks - I end up favoriting most of the JS (or frontend-related) stuff here: http://twitter.com/#!/franksvalli/favorites **Blogs** * http://msdn.microsoft.com/en-us/scriptjunkie/ * http://dailyjs.com/ * http://www.quirksmode.org/blog/ * http://javascriptweblog.wordpress.com/ **Aggregated news** * http://javascriptweekly.com/ * http://badassjs.com/ * http://jsmag.com/blog/ * http://www.delicious.com/recent/javascript * https://github.com/languages/JavaScript **Related: Paul Irish's frontend bundle:** * http://www.google.com/reader/bundle/user/11165870484951445324/bundle/frontend
The dynamic duo (Dion and Ben) seem to have launched a new blog: http://functionsource.com/
Self-calling anonymous functions are usually used in this way to avoid polluting the global (ie. window) scope. In this case it's just overhead (albeit neglible) as he is only declaring the one object that he intends to expose globally anyway. So basically instead of the cargo-cultish: (function() { window.carbonate = ...; }()); he could just do: var carbonate = ...; For all intents and purposes the window object equals global scope in browsers, so the two are functionally equal, but one could argue that the latter variant is semantically cleaner as it cleanly shows the author intent of "declaring something in global scope" instead of "adding a member to the window object".
That's YUI3, which is different from YUI2.
There's no call for it. It doesn't gain you anything. This shouldn't be in the global scope, sure, but it also shouldn't be on window - it much more importantly shouldn't be on window - so it honestly should come back to the scope where it's called. The natural response is "return an object." The only reason this has been wrapped in a function and attached inappropriately to a global that it has no meaningful relationship to is someone somewhere thinks jQuery does things a smart way and is imitating them without understanding them. This is particularly sad given that no, in fact, John Resig isn't actually very good at JavaScript after all. The question isn't "why don't do it." The question is "why do it? There's this other simpler better thing instead."
&gt; RIA is such a dirty term, you must have a flash background ;). Actually RIA is the correct term for that. The dirty term is "fat client", although it is the more appropriate one for traditional plugin-based solutions.
I've used YUI2on3 which is pretty cool... yui.use( "yui2-datatable", function (Y) { Y.two.datatable.blah.blah.yui2crap.datatable.init(); } ) or something like that. *Edit: Found it...* YUI().use( 'yui2-calendar', function(Y) { Y.YUI2.namespace("example.calendar"); Y.YUI2.example.calendar.init = function() { Y.YUI2.example.calendar.cal1 = new Y.YUI2.widget.Calendar( ... ) } } --Robert
Good list, id add the yayquery podcast in ther, paul irish is involved with that also.
But isn't that just a semantic difference? Are there really any performance issues or potential errors with storing it in the window?
Did tank world used to be a canvas game?
* [js.gd](http://js.gd) ([@jsgoodies](http://twitter.com/jsgoodies)) [[rss](http://twitter.com/statuses/user_timeline/222057071.rss)] * [Badass JavaScript](http://badassjs.com) [[rss](http://feeds.feedburner.com/badassjs)] * [Ajaxian](http://ajaxian.com) [[rss](http://feeds.feedburner.com/ajaxian)] * [Codeflow](http://codeflow.org) [[rss](http://codeflow.org/feed.rss)] * [JSRoll](http://jsroll.com) (more or less dead now though, but the idea is awesome) [[rss](http://feeds2.feedburner.com/jsroll)] * [Thomas Fuchs](http://mir.aculo.us) ([@thomasfuchs](http://twitter.com/thomasfuchs)) [[rss](http://feeds.feedburner.com/miraculous)] * [Peter van der Zee](http://qfox.nl) ([@kuvos](http://twitter.com/kuvos)) [[rss](http://qfox.nl/weblog.rss)] * [YUI Blog](http://yuiblog.com) [[rss](http://feeds.yuiblog.com/YahooUserInterfaceBlog)] * [Node.js blog](http://blog.nodejs.org) [[rss](http://blog.nodejs.org/feed/)] This'll do for now, I could dig up more though.. need to sort my feeds. **Edit:** added [rss] links directly to feed, added node.js blog.
Nice list!
yes, precisely. All variable declarations and function declarations (not the assigned ones) get hoisted; so just remember this whenever you need a conditional initialization and lots of problems will be avoided.
Nice, this is exactly what I was looking for thanks!!!
I love the way she writes about the Javascript community. Even though she's very much part of the in crowd (member of yayquery, for instance), she always makes an effort to remind developers to try to assume the point of view of the vast majority of coders -- who are not gurus, and just need to get stuff done.
Why recovering, out of curiosity?
I started doing a lot of mobile web app development, and jquery was bogging down everything. When I first found jQ I thought it was a gift from the gods and used the he'll out of it. Now that things I'm deving are a bit resource intensive, jQ slows things down way too much for me.
So I just re-read this post and I still have no idea what it's trying to say.
Good to know. I'm late to the jQuery party and I'm totally abusing it (and loving it). Thanks for the perspective.
It's styled Java**S**cript, with a **capital S**.
It's clear that there's an immense amount of work to be done to make javascript libraries modular and interchangeable. Notice that you would never dream of being concerned about whether two different modules from CPAN could be used in the same perl script. Of course they can! That's the whole point of making them modules. And yet in the Javascript world that's not even close to being the case. To have a really vibrant javascript development community, we need the javascript equivalent of CPAN. 
Yes, that is even close to being the case in javascript. The only reason you would have a problem using different javascript libraries in the same script is if there was a global variable conflict. But it is standard practice, and common in popular javascript libraries, to namespace your library and only expose a single variable. There is no problem here.
THIS NEEDS TO BE A JQUERY PLUGIN!
Interesting, but doing it this way means you're locked into using the require function when you use define function to create a module (i.e you can't the regular javascript notation). Well.. assuming I interpreted the code correctly... 
We don't need a CPAN. We have one but it never took off. http://openjsan.org/ We just need a completely standard way to namespace and require modules. RequireJS is the best thing going and all major libraries should get behind it. Dojo did. If Jquery did, it would seal the deal and everyone would get on board.
Do the chickens have large talons?
It's probably the part that was in bold.
[A Minute With Brendan](http://www.aminutewithbrendan.com/) [[rss](http://feeds.feedburner.com/AMinuteWithBrendan)] 
isn't this test showing that calling require adds alot of overhead?
I think we would start at stdlib first but perl never had the implementtion problems js has. Also there was not prototypes to fuck things up.
In small applications, this is mostly true. The problem appears when you start pulling in other libraries that, for instance, between each other depend on different versions of jQuery, or some library that globally defines "$", like jQuery does. You can hack around both of those, but the difficulty of doing so, and the fact that each library will usually require a different hack (setting magic "ninja" variables and so on) highlights the problem. Variable and version clashing is one of the big issues. Another is the massive pain it is to split your code into separate files. In most other languages, you store one class per file, and each file contains a set of import statement that defines what the contents of the file will need. Maintaining even a medium sized app in JS with a long list of &lt;script&gt; is like trying to code while someone constantly punches you in the face. We want modules and dependency management in javascript too because it comes with huge benifits. The AMD standard and require.js, together with some sort way to pull modules and/or projects from the interwebs (a la CPAN or Maven Repositories), will be legitimately awesome :)
+1
I believe so. It also means that your callback needs to have parameters that match the includes. That would be a chore unless you tend to include objects rather than functions. The only usable ways I have found to automatically import lots of variables into local scope are 1. use 'eval', 2. use 'with'. I think you could modify this to make the cache object global, then split the namespace string on '.'. Then instead of cache['a.b'], you could write cache.a.b.
I don't get it. What problem does RequireJS solve? (Not saying it doesn't, it's just not clear from scanning the docs.) The main benefits of CPAN are the less obvious ones. Yes, it's a single centralized repository, but that's not what makes it good for the community. The actual benefits to the community and the language are: - standardized naming convention, so that no modules' namespaces ever clash - standardized test suite, making clear exactly how well tested each module is - raising the bar -- every module is expected to implement a rigorous unit test suite - decomposition of responsibilities - most modules solve one problem only, because you can count on other modules' availability in the archive. - management of dependencies - always clear which modules and versions are required - management of upgrades - standard installation makes automated updating of all dependent modules relatively straightforward. These benefits start to accrue once you have a culture of using the archive. Just creating the storage space is much less important than building the community support around it.
This is not meant as a troll, but an honest question from a fairly-new jQuery user... it seems like all the changes listed for 1.6 in the blog post are bug-fixes, not really new features. Why call this 1.6 instead of 1.5.X?
it's because they have a future game plan and have tacked version numbers on to define milestones. I too think that they are incrementing versions much too fast. 1.4 was just like 6 months ago ... 
Good job! It runs better for me on Chrome than on Firefox 4. 
great screencast as always josh. thanks a lot for doing these, and especially for making them free. have an upvote.
lets see android, iphone, but no windows phone 7.. blah.
Your first screencast for titanium introduced me to Appcelerator Titanium. Thanks!!
I think you are down voted for the blah part part. But actually you have a very interesting point and question at hand. So a quick search on their Q&amp;A page gives the following [result](http://developer.appcelerator.com/question/104141/windows-7-mobile) and by the looks of it Windows 7 Mobile does not support HTML5 or SQLLite, which I believe is technologies Titanium is based on.
If I might offer some advice on how to better structure your JavaScript code. Here's the sample, and my notes, below: function OptionBox(objname) { var self = this; this.obj = document.getElementById(objname); if (!this.obj) { return; } // Initializes each optionBox, adds closing box c = document.createElement('div'); c.setAttribute('class', 'close'); c.innerHTML = 'X'; c.addEventListener('touchend', function() { self.close(); }, false); this.obj.appendChild(c); } OptionBox.prototype.close = function () { var self = this; this.obj.style.opacity = '0'; setTimeout(function() { self.obj.style.display = 'none'; }, 200); }; OptionBox.prototype.open = function () { this.obj.style.display = 'block'; this.obj.style.opacity = '1'; }; Notes: * Any function used as a constructor (called with the new operator), should begin with a capital letter (so other programmers know it is not used as an ordinary function). * It is generally less efficient in JavaScript to define your methods (open and close, here) dynamically inside the constructor. It is much better to defined prototype functions - in that way each object does not have a separate reference to a copy of each function (because you are using a *closure* - any function created inside the scope of another function, that has to be saved in each copy of your object). * Assign *this* to *self* and use inside of nested callback functions. I actually prefer to use a more concise method of defining prototype functions (see this small library, [namespace-plus](http://github.com/mckoss/namespace) you can include in your code to use it: OptionBox.methods({ close: function () { var self = this; this.obj.style.opacity = '0'; setTimeout(function() { self.obj.style.display = 'none'; }, 200); }, open: function () { this.obj.style.display = 'block'; this.obj.style.opacity = '1'; } });
This was really helpful. Thanks so much.
Yes, it is.
http://www.stumbleupon.com/badges/landing/
Knew this would be the first response .Wish I could change my title to "How ..."
That's the stumbleupon button, not the follow button Example: stumbleupon.com/stumbler/stumbleupon. You'll see a follow button in the top right hand corner.
http://lmgtfy.com/?q=add%20stumbleupon%20follow%20button
I'm not sure that it is- at least, not any more. It makes native apps, they're just not very flexible.
The only problem with your snarky response is that there has only been about two people who asked this online before, and both got no proficient responses. Trust me, I googled extensively already. If you can't help that's fine, alright?
The answer is right there in that page. Pity you started calling names, and didn't look sufficiently carefully.
Nice downvote, sir, and I never called you any names. All I said was your response is snarky, and really it is. And there is no answer whatsoever. If you're referring to the stackoverflow link, it's dead. I actually saw it before the topic was deleted, and it had no sufficient reply. I really don't know what you're trying to achieve. I really am trying to be sincere, and if you feel as though the answer is really that obvious, then please, post so.
&gt; Nice downvote, sir I haven't downvoted you, though I'm also starting to regret finding you your answer. &gt; If you're referring to the stackoverflow link I'm not. &gt; and if you feel as though the answer is really that obvious Sorry, once a person has been called snarky, and then on being called on the ingratitude continued a contentious tone, it's usually pretty ineffective to ask them to spell things out for you. &gt; I really don't know what you're trying to achieve. I was showing you a google query that would get results. Sadly, it appears that you only looked at one link, then fell over and said "there's nothing there, your snarky response has left me bereft, just spell it out for me." No thanks. I think I'll stop responding now.
I really am trying to be nice here, and I'm sorry if my tone is being conveyed as contentious, but I can assure you it's not. I really am trying to be nice, as I've scoured through every single link on google. Also, I never called you snarky. I said it was a snarky response. Which it really was if you think about. That was the purpose of lmgify, a way of snidely saying "use google, duh". I'm sorry if my perception of lmgify is wrong, but that's just what I thought. Again, if you feel as though you have the answer, please reply so. I am really thought nothing on the first page of google provides an answer.
Don't waste your time with StoneCypher. He's a bitter and obnoxious douchebag. He's not going to help you. Seriously, just go to his profile and see the number of posts he has with negative votes. He's going to (wrongly) make fun of your English. He's going to divert this discussion and make it seems like you were insulting him. Basically, he's going to waste your time. Ignore him, as you would ignore a clearly-insane preacher on the street corner. Good luck and I hope someone is able to help you :)
just checked your link.... make a button http://www.stumbleupon.com/sign_up.php?pre2=subscribe_favorites that is what the link goes to, create a button that goes to your link
&gt; Also, I never called you snarky. I said it was a snarky response. Splitting unimportant hairs is boring. Attempting to distinguish between you-did-a-thing and you-are-a-person-who-does-a-thing is a waste of time. &gt; and I'm sorry if my tone ... Which it really was if you think about. You don't seem very sorry. Have a nice day.
Thank you very much, good sir!
No problem! Don't let your experience on reddit be ruined by a troll! :)
Yeah, that's the way how stumbleupon's javascript works. If you were logged in on stumbleupon, the link would be javascript void 0, and once you click it, it would notify you that you've subscribed to the user. Otherwise, if you're not logged in, it would just link you to the subscribe favorites. 
^ This one right here. Did I call it or what? LOL.
i would suggest just a link to your profile page, I just made a stumbleupon account and I see what you are looking at. but honestly how do you know your users are from stumbleupon? even so, make a link straight to your profile because I dont think you will be able to do what you are attempting
Way to guarantee you won't get the answer you can't find. You'd have to be an idiot to believe someone with a nick like that. I give help all the time, and replied several times to give you chances to make a legitimate apology.
^ This one right here. Notice how the troll has insulted the very person he claimed has insulted *him*. 
Well, as a new site, I plan to use stumbleupon extensively. Almost as the only source of traffic since I don't employ SEO whatsoever. Anyhow, no reason to waste your time on this. I'll try to figure it out somehow. Thank you for your effort, though.
HAHAHAHAHAHAHAHAH!!! Hope you find something more constructive to do than trolling one of these days, but I'm doubtful.
We're all so so sooo sorry Mr. StoneCypher, now please enlighten us. Or... GFY
Not to pry, but so I can better understand your primary goal, how would this button for people to follow you (via your SU profile) benefit you more than the current SU badge which submits your posts directly? 
This is about my current project, [stattr](http://code.google.com/p/stattr/), which is a web app with Javascript frontend. It also may be an exaggeration. The basic chain is: Helper function for fake POST requests -&gt; Helper function for GET requests -&gt; jQuery AJAX method -&gt; (actual request happens) Anonymous function to check if there was an auth error on any request -&gt; Actual callback defined by original call
look at your average nodejs app and you can probably find a 20 callback chain at the minimum. Fancy libraries like node-promise, do, or npm's chain make it easier, but still ugly. Picture the average web app, callback to read your express configuration, action on http request, perform connect to database, find row where user_id = id, make call to graph.facebook, render response template -- that's already 6 callbacks deep right there! 
f7u12 = downvote.
I find that callbacks only get ugly with too many anonymous functions nesting too deeply. If you just define the functions in a more traditional way and pass them as arguments it's much cleaner. 
There are so many instances were anonymous callbacks are needed -- for example the database connection one -- it's one line of code that immediately calls your callback, but causes your nesting to go one deeper.
Downvoted for [memebase](http://www.reddit.com/r/fffffffuuuuuuuuuuuu/comments/glawf/first_memebase_gets_busted_stealing_content_then/)
Yeah, callbacks can get messy. Especially in AJAXy calls, I'm almost afraid I won't know where data is coming from....
Agh! I didn't know! I just googled!
But....I didn't say that....I just made a comic somewhat similar to it....
I'm not quite getting your meaning here. Which database connection example? var dbCallback = function(some, params) { do_some_neato_stuff(params, some_other_callback); } db_function_that_requires_callback(dbCallback); function some_other_callback() { this_is_some_other_things(); }
Because I want to have both. Having a stumble upon is one thing, but having a follow button is another. Stumbleupon is nice to attract more people, but it's people who follow you that will permanently increase your user base. I mean, think about it, if you have, say, 700 stumbleupon followers, that mean next time you submit something, those 700 will receive your content/page, and those 700 will likely help you stumble your page too. What's not to like? And can you think of a way to implement it?
You can instantiate a global variable by omitting the "var" preceding the variable name. I believe including "var" will cause problems when trying to access the variable from another function (though I could be wrong about it being function based).
I would take an object oriented approach for this. [Here](https://developer.mozilla.org/en/Introduction_to_Object-Oriented_JavaScript) is a good guide to beginning oop in javascript. Basically, you can create a function: function Character() { this.str = (dice roll here); } and instantiate it like: var rogue = new Character(); Then you can access str like: console.log(rogue.str); Take a look at the article to get a little more in depth. For example, you can also assign methods to the Character object through its prototype.
JavaScript is not object oriented and if you have a "Class"ical understanding of OO you are going to get quite a shock when certain expected behaviors don't go the way you expect.
http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742 This book will save you MANY hours of pain. JavaScript is not OO. Good JavaScript is not imperative. Good code period doesn't rely on mutating globals.
You're right and you're wrong. You shouldn't be declaring, mutating, and accessing global variables like that anyway. Omitting the var keyword from a variable decl in a function will make it global, but this isn't something you want to do unless you're generating a function namespace or prototype.
This might be for someone a little more advanced, but I usually structure code like this: var MyNamespace = (function(){ var private, public; //Var declarations at the top (this is the way JavaScript does it anyway) //Private methods, variables, objects go here private = { privateVar : "Hello from private", //A private variable not visible from the outside privateFunc : function(){ //A private function not visible from the outside alert(private.privateVar); //Alert the private variable } //Note that the last element should not have a , after it }; //Public methods, variables, objects go here public = { publicVar : "Hello from public", //A public variable available from the outside publicFunc : function(inputarg){ //A public function that can be called from the outside private.privateFunc(); alert(public.publicVar); alert(inputarg); } }; return public; })(); MyNamespace.publicFunc("Hello from global"); //Alerts "Hello from private" then "Hello from public" and finally "Hello from global" MyNamespace.publicVar = 42; //Set the value of publicVar to something else. I don't have time to explain it all right now, but if you have any questions just PM me or reply to this thread. I'll try to look in on it later today. edit: changed alert(publicVar) to alert(public.publicVar)
Correct me if I'm wrong, but Javascript doesn't actually enforce access to private/public methods/vars, right? You can still access them from the outside via var m = new MyNamespace() m.private.privateVar 
Not in this case. The scope is limited to a function in JS ("closure"). What you can access in "m" here is what is returned: "public". And since it returns an object, it won't return a constructor, so using "new" is useless. This particular pattern is a singleton and is not what the OP is wanting. A regular constructor would be more appropriate since you potentially could use several characters, i.e. several instances ([see TobiasFunkeMD's post at the top](http://www.reddit.com/r/javascript/comments/gsk5x/learning_javascript_need_a_bit_of_help/c1pze3x)).
JavaScript is most definitely OO. Look at TobiasFunkemd's example.
There was actually a really good comment in some thread a while back that really helped me wrap my mind around OO programming as a conceptual paradigm. I don't remember the details but the person pointed out how the concept of using objects was independent of any language or implementation. Incredibly helpful.
 function MakeCharacter(PlayerName) { this.PlayerName = PlayerName; this.stats = {}; this.stats.str = ThreeD6(); return this; } var Tom = MakeCharacter('Tom Bombadil'); window.alert("Found " + Tom.PlayerName + ", with strength " + Tom['stats'].str.toString()); Just switched from foo.bar to foo['bar'] to show that they both work; in JavaScript they're equivalent.
JavaScript has no private/public. What people usually pretend is private/public in JavaScript is using some mechanism (usually a downwards closure) to set a variable somewhere where its holding code can get at it, but where there's no legal way to refer to it, thereby imitating privacy by making something unreachable in practical terms. Sadly, everyone's so busy pretending their imitation is the real thing that people get confused and ask questions that only make sense if the real thing exists - which it does not.
&gt; JavaScript is not OO. JavaScript isn't C++/Java style object orientation, [but it is object orientation](https://developer.mozilla.org/en/Introduction_to_Object-Oriented_JavaScript). &gt; Good JavaScript is not imperative. All JavaScript is imperative. This is not avoidable, by the nature of the language. Please stop being religious; platitudes are not good engineering.
And Crockford has a lot of good points but gets a little religious at times. JavaScript IS OO (even the primitives are wrapped in objects), it's just prototype-based, not class-based (but you can make it behave as though it is class-based). Good JavaScript can be imperative, OO or Functional, depending on the situation, that's the beauty of the language. Everyone hates on globals, but they're actually really useful, once you know what you're doing (I've seen good code that mutates globals, but usually you shouldn't). JavaScript is essentially a LISP dialect with C-style syntax, you can make it do a lot of things, some good, some bad, but good and bad should be in the eye of the beholder, not just what Crockford says. Above all else, remember that variables have function level scope, not block level scope.
&gt; and if you have a "Class"ical understanding of OO Nonsense. Classical OO isn't about classes, it's about interfaces and message passing. C++ and Java are *not* classical OO; Smalltalk and Objective-C are (granted I much prefer C++ and Java style OO, but this is what listening to Crockford gets you - some very meaty sounding, very wrong talk about the small piece of history he actually knows.) This is absolutely obviously and resolutely object orientation. If you can justify your claim in any more serious terms than referring to a famously Herb Schildt quality book or making vague handwavings about how you imagine if it isn't done in the way you're used to, which started 20+ years after the phrase was in circulation, that it isn't the real thing, let someone know. &gt; you are going to get quite a shock when certain expected behaviors don't go the way you expect. If you have a classical understanding of software development, then you learn the language before using it, not after. A language isn't non-OOP just because it didn't work the way you personally expected it to.
Way better than I could have explained it. Thanks :)
I think he meant classical as in class-based.
i'd definitely go api when it comes to mobile. there's so many nuances in mobile devices that it's just time saving to choose a framework where these issues are already handled. without one, after a while, you may find yourself slowly regretting it as you gradually keep adding device support. for simpler sites, check out jquerymobile.com... for more static sites you can basically just do all html and it transforms it into awesome looking mobile apps.
The train shrieked as it rumbled by the window. The dingy apartment shook as the metal monster roared past. StoneCypher blinked his gummy eyes as he awoke. He felt a twinge of regret as he realized that he had only been dreaming. He sighed, his head still against the dirty desk. His fetid breath shooed scraps of cheetos and dried food out of its path. He closed his eyes again, to see if he could remember his dream. He sighed; all he could remember was the ecstatic feeling of fullness inside his body. He sighed again and got up. Or tried to, anyway. He shrieked in pain as he felt his head get pulled towards the table. He reached out to a sticky mess on the table. He cautiously turned around and looked at it. He sighed in relief. As he fell asleep, he had no doubt knocked over his cup of Pepsi. The beverage had dried around his greasy, long, blonde hair; making it stick to the table. He gritted his teeth and pulled his head away. This time most of his hair came away with him. He sighed and got up again, brushing bits of food from his unwashed t-shirt. His fat and disgusting body cast an equally fat and disgusting shadow against the dirty walls of his apartment. He reached up and scratched his face, accidentally popping a zit. He made an exasperated noise as the secretions ran down his cheek. He staggered towards the bathroom, stepping over the many yellowing, slightly stiff kleenexes that littered the floor. He pulled down his pajamas. His pudgy hands struggled to find his [micropenis](http://en.wikipedia.org/wiki/Micropenis), which was lost in the folds of his fat. He managed to find it almost about the same time he started peeing. His urine splashed on the seat, and ran down the sides of the bowl to the stained floor. StoneCypher didn't care. He liked the sticky feeling of stale, half-dried urine against his thighs and the soles of his feet. He turned around and set his gargantuan ass against the seat of the toilet. The bowl strained to support his weight. With an almost orgasmic moan StoneCypher evacuated his bowels. The contents splurted and splattered against the inside of the bowl. The rotten, disgusting, and nauseating gases spread out, having escaped the tight confines of his rectum. He breathed in deeply, a smile forming on his lips, as he smelled his waste. After a few more moans and heaves, StoneCypher reached for the toilet paper. He noticed that it was running low and reminded himself to get some more. Otherwise, he would lose another pair pajamas. He looked over to the corner of the bathroom, where a shit-stained pair lay crumpled. He had meant to get it cleaned over a month ago. He grunted. He resolved to do it when he went to get more toilet paper. After wiping his ass, StoneCypher grunted and stood up. His face was red, and he was sweating. Staying bent over for so long made it difficult for him to breathe. He staggered back to his computer. He wiggled the mouse and then logged in. Reddit was on the screen. He got up and took off his pajamas. He sat down on his chair and spread his legs a little. He reached between his legs and began to fondle his tiny penis. He hit the refresh button, his penis hardening in anticipation. The browser finished loading the page. StoneCypher's eyes immediately swung up and to the right. He saw the red envelope. He gave out a strangled little moan as precum dripped from the tip of his penis. He slowly stroked his little penis back and forth, holding it between two fingers. Even though he was cursed with such a condition, he had still found ways to pleasure himself. He smirked, of course he would have found ways. He was the smartest person on the internet. He clicked the red envelope. His anticipation built again. He moaned... he had received a response to his post. "I'm not trying to insult you..." read the first line. He groaned. Oh yes. He knew exactly what to say to that. "... I was simply trying to point out a fact that you may have not noticed." Mmm... he groaned again... "Implied insult? Oh this will be good". He stroked his penis furiously as he thought up his responses. "I'm just saying that they ostensibly..." StoneCypher drew in a sharp breath. "Ostensibly..." he breathed out as he savored the word, like a little morsel of food. He tugged on his penis furiously. "Mmm... obviously they don't know what the word means... I need to point out how terrible they are in their English... mm....". He moaned as he kept reading. He had to pace himself. He didnt' want to cum until he read the last sentence. He closed his eyes and tried to prolong the feeling. The last sentence was coming up. He brought up his favorite fantasy. One where he gets captured and sent to prison for trolling everyone on the internet. In prison, he forcibly has his testicles removed and is passed around as a bitch. He moans in pleasure as he images being raped by numerous, well-endowed men. He opens his eyes and looks up at the screen again. "I'm just saying that you came across as a little harsh. I'm no trying to start a fight or anything." He breathed in, made sounds almost as if he was choking. "Oh yes..." he moaned. "Mmm... he has no idea... ooohh I'm going to troll him to no end... it's going to be glorious..." he moaned. Images flashed across his mind's eye. Him bent over, a gigantic black penis getting thrust into his ravaged asshole. A keyboard. His dirty, chubby fingers typing, the reddit logo, the screen, his retort to the idiot who would dare question his supremacy on the internet. He let out a howl as he hit the peak and started orgasming. His semen spurted and hit the carpet, mostly hitting previously-dried strains. He reached across the table with closed eyes, trying to find kleenex. His finger slipped off his miniscule penis, which made it flip. A stream of his cum flew across and landed on a power strip, shorting it. His computer shut off. StoneCypher's orgasm ended. He would have to buy a new power strip, but it had been worth it. 
&gt;JavaScript is essentially a LISP dialect with C-style syntax Indeed. I wrote a binary-tree-traversal function, which with its parentheses and all, reminded me a lot of lisp (but that's just appearances, I think): (function(node){ if(node != null) { console.log(node.data) arguments.callee(node.left) arguments.callee(node.right) } }(root)) A more concrete example would be the [y-combinator](http://blog.jcoglan.com/2008/01/10/deriving-the-y-combinator/) in Javascript. **EDIT**: Per vonkow, took out the semicolons to make it more lisp-y :D
Strip out all the semicolons and it'll look even more lisp-y :D **EDIT** if there's any code before this function, the first line would be a little safer like so: ;(function(node) { 
~~Dunno why you're getting downvoted on this one...~~ Though I will say that dropping the 'return this', renaming MakeCharacter to Character and using 'new Character()' results in character objects that have typeof 'Character', which can be useful. **Edit** aapl's right on this one, 'this' in that context, is the global object and I need more coffee.
Sorry, I have nothing to contribute but the fact that this thread has -1 comments and I want to see if posting one bumps it to 0. [screen shot for posterity](http://i.imgur.com/cUe60.png) edit: yes. this thread now has "0" comments. weird.
I noticed that too. Weird. Thanks for balancing the universe.
I think it happens if someone attempts to make comments in multiple tabs and then deletes them. There was a really popular self post a few weeks ago demonstrating this.
API will definitely make your life easier. Using an API you can concentrate on the actual logic and functioning of your program, rather than dealing with stuffs like cross platform, cross device issues, and lot of other things which are just a part of the process. Why reinvent the wheel? But it's always good to know how things under the API layer works and may help later while debugging.
I would tend to agree. Even if a third party library doesn't solve all your problems, it will do most of the hard work for you. I'd like to thank the OP for informing me of this library, I hadn't heard of it before and it looks pretty solid. I made a mobile web app before and used iUI. Good for its time (this was almost 3 years ago) but too many annoying limitations. It may have improved significantly since then, but regardless, this looks better. So thanks!
^ This one right here. Marking it because of tone. There is a better way to explain this without being such a tool (look at venkman's response). &gt;If you can justify your claim in any more serious terms than referring to a famously Herb Schildt quality book or making vague handwavings about how you imagine if it isn't done in the way you're used to, which started 20+ years after the phrase was in circulation, that it isn't the real thing, let someone know. Holy *shit* that's a long sentence.
I don't have the link on my phone, but Google IBM Sencha Touch. They did a great blog review of it in a series of web app APIs. Came out as #1 so I decided to give it a go. So far very pleased. The only problem that I have so far is that the *onclick* event is used in tandem with *ontouchstart* which gives an annoying flickering. The API is open source though so I may have to do some digging. Edit: [Found it](http://www.ibm.com/developerworks/web/library/wa-senchatouch/)
If you call a function without providing a context, then *this* will refer to the global object. As StoneCypher's code currently stands, *this.PlayerName* is just a fancy way of referring to the global variable *PlayerName*. He either forgot the *new*, was going for a pattern like *var obj = {}; ... return obj;* or is trolling, and is being downvoted as being incorrect or a potential troll. var Tom = MakeCharacter('Tom Bombadil'); var Gandalf = MakeCharacter('Gandalf the Grey'); window.alert(Tom.PlayerName); // wtf?
This is not entirely correct. There is a significant difference between: var Tom = MakeCharacter('Tom Bombadil'); and var Tom = new MakeCharacter('Tom Bombadil'); In the former, *this* refers to the *window* object, whereas in the second *this* refers to *Boo* itself. In the OP's example, when you use *this.PlayerName*, you're actually referring to *window.PlayerName*. Not what you want. You can see this distinction easily if you run the following code in firebug: function Boo() { console.log(this); return this; } var x = Boo(); var y = new Boo(); Firebug reports: Window learning_javascript_need_a_bit_of_help Boo {}
You are correct, I left a small error. Thank you for the catch.
No worries :)
Good catch, I keep forgetting to follow my 'no commenting on code before morning coffee' rule. I saw the {} in this.stats = {} and went blank. Good trolling, if it was, though I don't doubt it could've been sheer ignorance.
I'm being haunted by some troll with nothing better to do than generate fake reddit accounts to manipulate votes again. &gt; Though I will say that dropping the 'return this', renaming MakeCharacter to Character and using 'new Character()' results in character objects that have typeof 'Character', which can be useful. Agreed, that would be a better approach. I was tired and it was early morning. But your approach is better.
Yes, and I responded accounting for that. Please re-read my response.
Just skimming over everything, I *really* like this API. I'll have to give it a go tonight. Any idea how it performs on mobile? Seeing as it's Webkit only.
It isn't webkit only, you can use it with zepto.js (webkit only) or jQuery. However, some of the demos use CSS only prefixed with -webkit.
i've been looking around for some type of lightweight, flexible framework for handling models a bit more organized than i have been in the past but wasn't having much luck yet deciding. i was leaning towards backbone.js but it has too many complexities i just don't see myself needing. but spine looks awesome so far... this may be the one, thanks!
I'm all for pointing out when people are trolling, but there's a not-so fine line between doing a public service and character defamation/general dickishness. You only add to the overall troll level when you cross it.
i have yet to look at this...but have been using backbone.js recently and am quite happy with it. The docs could be a bit more descriptive though... I will have to check out spine...seeing as it is a direct competitor (and even has a similar name)..
In your example you access publicVar by referencing it directly in publicFunc. This will not work since publicVar is not available in that context. The reason I have a **public** and a **private** variable (i usually use i and _ as variable names for this since they are shorter) and assign functions and data to them is so I can easily access that data simply by calling: private.privateVar public.publicVar Your example sums up nicely what the intent is though, just don't be surprised if publicVar is not available directly. Another thing I found to be nice is if I need to be able to create "classes". I could simply specify the class inside the public object like so: classes : { myClass : function(constructorData){ var c_private, c_public; c_private = { //Class "private" data constructor : function(){ //Do something constructive with constructorData here } }; c_public = { //Class "public" data publicClassFunc : function(){ //A public method on the class } }; c_private.constructor(); return c_public; } } I could then create an instance like so: var inst = new MyNamespace.classes.myClass("I am constructor data"); The nice thing about this is that I can easily encapsulate all classes, functions and data related to the namespace inside the namespace itself. The class can even access functions from the namespace without knowing what the namespace is called (since c_private and c_public do not overwrite the private and public variables from the outside scope). Also if I ever need to change the name of my namespace for some reason I only have to change one line as long as all internal references are done on variables inside the scope (private, public, c_private, c_public). I have just recently started using this method to organize my code so if anyone has any comments (positive or negative) I would welcome some input. I &lt;3 JavaScript :) [edit]: Crappy English.
Ah ok, missed that. Thanks!
I'm looking into Sencha Touch right now as well and I'd say go with it rather than going from scratch. The benefits (primarily cross platform functionality, abstraction of common functionality) outweigh the negatives (learning a new framework, code bloat from all of the framework extras). In all honesty, I view the whole "learning a new framework" thing as a chance to see how decent, professional coders do their thing. Beneficial in itself.
&gt;So, an object {publicVar,publicFunc} gets returned. Oh, my bad, I totally didn't see the return at the end! Thanks for pointing that out! :) I get it now.
Awesome, thanks.
Use the Dojo Mobile API. Looks like a native iPhone or Android app. Great toolkit. 
Geez, get back his off! So the typo has a title - it's supposed to be "a lightwork frameweight". No him to reason all over jump!
No Safari/WebKit? It's the 4th most popular browser, and available for Windows.
Damn. I didn't think anyone would notice that :P
Just tried it out. It's nice, but not nearly as fast or responsive as Sencha.
I'm currently using sencha touch, started good and fast and ended up fighting with the API and several finetuning problems - but overall a good library. You can find some really good and helpful videos on http://www.sencha.com/conference/videos/
wtf!? this shit degrades nicely? how about &lt;a href="http://surveymonkey.com" target="awesome_survey"&gt;Take our Survey&lt;/a&gt; Doesn't even need javascript.
var mixed_up_apologist = new noveltyAccount();
Chrome uses webkit (although a different JavaScript interpreter than Safari)
And the test is solely about Javascript stuff... So an other webkit browser helps... not at all.
So what happened when they released IE 9 and its performance dropped off a cliff? It was probably patching security bugs....
nice primer
interesting project. i wish i could use cool stuff like this, but wordpress and IE are the banes of my living earning. 
This is poor advice. Why does he even mention the Object() constructor. Or extending the prototypes of natives? And you shouldn't be using upper CamelCase for instance methods like Gallery.Play() -- should be Gallery.play().
&gt; So the typo has a title Nice.
He tested using IE9 64bit which uses the old JS engine while IE9 32bit uses a far faster one.
"jumbled juxtaposition of concepts"... nice
&gt; JS.Packages uses object detection to figure out if it actually needs to download anything to provide the objects you want. This is why working at the object level rather than the script level is such a big win
How did you deal with the fine tuning? Change the API or change what you were doing?
That depends. Would you rather hate writing it or hate maintaining it? You can take the pain up front, do it yourself, and have a chance of getting it Done Right (tm), or you can work with someone else's framework, get a lot of work done for you up front, and suffer through the slog when you get to difficult things and have to cope with code you cannot practically gut, and which may be structured in a way which seems alien to you (or possibly wrong.) Another way to look at it is whether you think you're, as a programmer, above the average quality of the contributors to a given codebase. If you are, whereas the work will take longer, the end result will be higher quality. Frameworks are generally the right thing for average programmers, and generally the wrong thing for very good programmers. For somewhat good programmers, it tends to be situational. It also depends in some ways on what you're up to. Like for example, if you're just throwing together a mock to get a sense of what an app would feel like if you did it X way, then beeline for the heaviest framework you can find, and get most of the work done for free so that you can throw it away with less pain. If on the other hand it can never be thrown away - if it's the app keeping humanity alive - then you'd better start by proving the math that shows the CPU to be correct. One size does not fit all, your mileage may vary, offer void in Delaware.
Not very well, if it's Webkit only. Webkit is less than a quarter of the browsing populace, and that will be shrinking dramatically soon, with the release of Winphone 7, Blackberry's new generation, and Mozilla Mobile. If a web framework isn't even basically portable, they're probably cutting a ton of other corners too. There is absolutely no call for using a shaky tool like zepto; only zealots would make a choice like that (the same damning mistake was made around Mozilla, and thus killed the company whose only remnants we now know as Dojo and Google Pages.
looks good
This is where I'm stuck. I'm only a few hours into actual coding. I made the first UI from scratch and using Sencha Touch. My UI performs loads faster, *but* I haven't loaded up the code very much. I'm a smart programmer, but I'm always learning. There is going to be a huge need for lots of dynamic objects, on top of dynamic UI (DOM) objects. I know that doing it from scratch will be a great learning tool, but I have a pretty solid idea that I just don't feel like messing with or getting frustrated over because I'm getting stuck with the UI.
Well, running with a framework and scissors may be the good first run strategy. That's really up to you. jQuery mobile is my choice for shitting out prototypes fast, before hunkering down and doing it from ground up. YMMV.
A few quick points after looking at the source: - Cache the Array.prototype.slice function in makeArray(). That should speed it up a bit. - There are a few loops with the length not cached, and several that do. Do a quick search for ".length" and you'll catch it. - Triggered sends the same object to each callback. If a callback modifies that object, it will affect each one after it. You can fix this by tossing args to Object.create()
It is as if every single thing you say is pretty much the most wrong it could possibly be. Your experience with frameworks might not be good, and that is fine. But your experience with frameworks has absolutely nothing to do with how they function, what they can offer, or of what "quality" of developer a person is based on whether they use them or not. Do the programming community a favor, and stop giving awful advice. Or, if you are simply trolling as I kind of suspect, congratulations: You've irritated at least me, and I imagine many others.
Make sure you open this URL in **Mobile Safari** and Safari **on your PC**. [Github](https://github.com/rnystrom/Webcontrol) I'm new to Github, so if there is anything that I screwed up please lmk. Also, I'm using [this PHP websocket server](https://github.com/nicokaiser/php-websocket).
This isn't exactly true. IE9 64 bit uses the new Chakra engine but there is no 64 bit JIT. JIT makes a huge difference on these types of benchmarks. I would love to see how IE9 32bit compares...
Holy crap... ".attr('checked')" is going to break.
the guy uses $(window).prop('location').href; as an example. but why not just use document.location.href you don't have to use jQuery for everything I love jQuery, but as a developer i don't try to use it for everything possible. Using native javascript objects is also important.
upvotes to any one who can convert to an epub format for iPad. Online formatters won't take it for epub or PDF. I've had to use an offline reader app that removes the syntax highlighting. 
&gt; It is as if every single thing you say is pretty much the most wrong it could possibly be. I notice that this claim is backed up with precisely zero of technical merit. &gt; But your experience with frameworks has absolutely nothing to do with how they function There is nothing of a "how they function" to frameworks. Frameworks are an ill-defined bag of individual software products which share no commonalities. What I said has nothing to do with the frameworks themselves, and everything to do with the using developer's relationship with other developers. I appreciate that you're trying to contribute to this conversation, but that you misunderstood what I said and approached it in such a stunningly inappropriate fashion makes it difficult to respond. &gt; Do the programming community a favor, and stop giving awful advice. Here's a thought: I've been giving out code that's in use in GCC, ICC, the PHP engine, WordPress, MediaWiki, Linux, BSD, Windows and MSVS for more than 20 years, longer than (surveys say) the average Redditor has been alive. So if you want me to take you seriously, instead of making a string of personal attacks and failing to understand what I meant, try showing what I'm actually incorrect about with examples, rather than just asserting that my years of experience are wrong and expecting me to just believe you and cut myself off from the rest of the internet. &gt; You've irritated at least me That's nice. Did you imagine that I would care, after the way you just behaved? Look forward to more irritation. I have no intention of disappearing just because some rank amateur accused me of being wrong, then presented a hilariously incorrect view of what I had said so as to attack it. Since you seem to want to challenge my technical merit, maybe start by looking at my code. Some of it is at http://scutil.com/ , though that's just hobby code. Am I correct in believing that if I ask to see your code, so that I can get a sense of the quality of the person with the pitchfork and bullhorn screaming "clueless amateur at me," you will decline? Anonymity makes people think they're a lot more important and skillful than they actually are. I'm John Haugeland. Who are you, and why should I take your opinion, so rudely stated, seriously?
Couldn't this be completely transparent to users? They could do something like: if ele[someProp] if specialProperty(checked, disabled, etc.) access special case properly else access like a property else access like an attribute
WTF? Yeah, jQuery is really the only sane way of doing cross-browser compatible javascript that is DOM heavy, but you don't need it for everything and it bogs down performance if you do. Go native whenever possible. In your example, you don't even need `document`, `location.href` is fine.
^ This one right here. Troll states opinion as fact. Insinuates that anyone who uses frameworks is not a good developer. Why? Because he said it. That's why.
Ignore the StoneCypher troll. He is convinced of his superiority over everyone and everything in the universe.
&gt;**I'm John Haugeland. ** **FEAR ME!!!!** Also, troll.
They already [did it](http://www.addyosmani.com/resources/essentialjsdesignpatterns/epub/essential-js-design-patterns.epub) for you.
I think this sort of work is usually done server-side. The server should send the proper login bit depending on if the client is logged in or not. If you want to switch out the image with javascript you could use something like if("https:" === document.location.protocol) { // Set image src to my account button // Set link href to link to my account } else { // I guess leave as is? }
Sencha Touch is an extremely gimped version of Sencha (which is a great toolkit). That being said, it's the easiest way to create client-side web/mobile application with a large javascript footprint. I have had success on a number of projects using Sencha and the experience has translated well to Sencha Touch.
its beta right? not RC. 
Interesting theory, but what is it about jQuery that leads to spaghetti code? Is it that it's so easy to get started that it leads to non-proficient javascript users making mistakes or does it lead to bad design decisions? In essence: does it select for the wrong users, or does the library have flaws?
step 1: figure out what is controlling your login sessions. there is a chance that it isn't javascript.
Yeah, not looking forward to that change. We'll most likely be stuck on the previous version for a long time due to that change.
Here's a link to the actual talk: http://jsconf.eu/2010/speaker/the_jquery_divide_by_rebecca_m.html She makes some good points, I'm not sure her message gets conveyed properly with just the slides. Essentially many people think javascript === jquery. jQuery is a great tool for DOM manipulation, and some other related tasks. It's not an application architecture. 
Hmm...we didn't even think of that since we actually don't have control of that. We have a website through a host so there's a good chance the login session is not in Java. Thanks for the reply. I appreciate it! 
After battling with it and actually finally writing out a a code that could potentially work (quite similar to yours actually), we figured out that changes on the server side have to be made also and the company we have the website with does not allow the feature we're requesting. They said the features will be availabe in the next release. So I guess we'll just have to wait. Thanks for your help though. I really appreciate it. It's nice to know I can turn to this awesome resource when I get stuck. Thanks again! :)
Thanks for that! And yes, exactly. Jquery's a good tool, but it's not the be-all, end-all. 
People create spaghetti code no matter what the language/application. I've been dealing with other's spaghetti code for over 20 years. Some years ago a regional programming department head of a major computer corporation, by circumstance, had to look at my code, during my first programming job, and I caught him staring in disbelief. All he could say was, "I can actually read this." Coding complex applications is a design problem that needs to be treated as such. If you quickly prototype without any design process in mind and without writing clean, readable, self documenting code, you will likely end up with spaghetti code if you do not clean it up and develop a system design strategy before moving to the next iteration. jQuery is no more responsible for that than any language is. Get off the jQuery hype. It has it's idiosyncrasies, but it is no more responsible for bad programming than cheese is. Aside from that, it's a job opportunity. I'd rather have other people write bad code.
So, if library X requires library Y, how is this declared? Although you can declare this very nicely in Dojo, YUI or clojure, you can't really do this between projects. 
Thanks for the link. The talk actually didn't help me much, but the links to her two blog articles did: * [On jQuery &amp; Large Applications](http://blog.rebeccamurphey.com/on-jquery-large-applications) * [On Rolling Your Own](http://blog.rebeccamurphey.com/on-rolling-your-own) Essentially she is talking about writing single page applications (entire application in Javascript, server provides JSON data API). The argument is that jQuery's DOM based model is too simple. I don't enough jQuery or dojo experience to have a strong opinion but I did do a small part of a project in YUI a few years ago and thought it was needlessly complex and annoying. As a backend (Python/Java/C/SQL) programmer I've become leery of big frameworks because of the law of leaky abstraction; my personal preference would be for a collection of small libraries. I also find it interesting that in her wishlist (in the On Rolling Your Own article) she omits "testing" from her list (though YUI, JavaScriptMVC &amp; Dojo all seem to have some sort of testing framework built in). One of the biggest productivity boosts on the backend has been Agile &amp; TDD.
But it's easier to write complex applications at a higher abstraction (Python vs. assembly). Her argument is that jQuery's focus on DOM manipulation is a bad abstraction for complex javascript (single page apps); maybe a better analogy is structured programming vs. goto's. I don't have enough javascript experience to say if she's right or not.
You mean, just like how OO programming is just a tool, even though large numbers of programmers somehow got confused and thought it is an application architecture?
absolutely! but by her logic you should first understand assembly. But it is just as easy to create spaghetti code in assembly, were you to attempt large applications in such a low level language. I'd argue that to do the things you can do with jQuery in assembly would require design, planning and care for the systems you create. If you attempt assembly of any scale without such planning, you get spaghetti - and at that level completely unusable spaghetti! jQuery is a tool precisely for focusing on DOM, and is a handy one for that purpose, but it is certainly not for writing complex applications - you cannot. And it is not he only tool out there. But part of the problem is the DOM itself, which I think is a complete mess. God Lord, you couldn't design that any worse if you did it by committee... er... What she should be complaining about is that people don't know what a programming design process is, and when a project goes from a one off set of web pages to a full fledged application that is more than a functional curiosity, brochure, advertisement, or proof of concept prototype. jQuery really has nothing to do with it. Frankly, dried out reusable blocks of code are way overkill for a lot of the stuff most people need and want from the Web pages they hire other people to do, and I wonder how much she really understands about the whole programming design process. A few functions to generically do some rollovers or a slide show just don't require such a level of OOP abstraction.
JavaScript is pretty flexible when it comes to inheritance, mainly since it doesn't exist in a proper sense. The language provides more than one way to get inheritance-like behavior, one of which you've shown here. Since you're using Animal.call(this) inside of the Cat constructor, Cat is given all of the same properties that a default Animal would get. This way of doing inheritance also allows for a kind of multiple-inheritance and gives you the ability to specify within the Cat object the precedence of the objects you are inheriting from by the order of calls you make to other objects' constructors. For example, if you had another handful constructors such as these: function A () { this.name = "A"; this.resetNameA = function () { this.name = "A"; }; this.alertName = function () { alert("Hello, I'm " + this.name + "."); }; }; function B () { this.name = "B"; this.resetNameB = function () { this.name = "B"; }; this.alertName = function () { alert("My name is " + this.name + "."); }; }; function Hybrid () { A.call(this); B.call(this); this.name = "Hybrid"; }; Now, whenever you make a new Hybrid object, you're having the A constructor act on the Hybrid object first, and then the B constructor does additional work on the Hybrid object, then the Hybrid object sets up it's own stuff. Now, you can do things like this: var h = new Hybrid(); h.alertName(); // This alerts "My name is Hybrid." since each new Hybrid object gets it's alertName property written over last by the B constructor, but the Hybrid constructor changes this.name to "Hybrid". h.resetNameA(); // 'Inherited' from A. h.alertName(); // This alerts "My name is A." Essentially, you can have multiple constructors called on your object in this manner. Those values which are overwritten last are those which will be the properties of the objects you create, as you would expect. In this case, you set each new Hybrid object's properties to those of a new A; and similarly with those of a new B, overwriting those that A might have set. You can specify that you want to inherit properties from A explicitly instead of those used in B by doing something like this: function Hybrid () { A.call(this); B.call(this); this.alertName = (new A()).alertName; // Force inheritance of alertName from A over B (or any other following constructor calls). this.name = "Hybrid"; }; Now, this kind of thing occurs: var h = new Hybrid(); h.alertName(); // Now, this alerts "Hello, I'm Hybrid." You can rearrange the constructor calls and lines setting properties explicitly to your liking so that you can get the behavior you expect. On a different note, given the way you've defined Animal and Cat above, you need to be careful when deciding whether or not it is best to specify a variable as merely a local variable opposed to a property of the this reference. The way you've done it here is generally considered a good style of making variables act as if they were private in JavaScript. However, if you're using this model of inheritance, it is impossible for you to write a function of Cat that can properly change the same age variable as that used in Animal. The age variable becomes part of a closure that is created when you make the call to Animal. All the methods in Animal have access to this age variable since they are within that closure also. However, there is no way to reference that variable from outside that closure. For example, you might run into problems with Cat if you write it this way: function Cat () { Animal.call(this); var lives = 9; this.die = function () { lives -= 1; return this; }; this.getLives = function () { return lives; }; this.alertAge = function () { alert(this.age); // this.age is undefined since it was never set as a property of this.This should throw an Error. alert(age); // age is undefined since it was not defined in the local or global scope; when it was defined, it was specified as being local to the closure created by calling A. This line should also throw an Error. }; } As you can see, since the age variable can't be properly accessed from Cat, the ways of attempting to find age in the alertAge function don't make any sense. Also, if you write functions that set a this.age from within Cat, alertAge will work but will be using a different variable from the methods operating on age within Animal. The code will won't fail, but won't have the desired effect, which can lead to a whole mess of debugging difficulties. P.S.: I haven't put enough time into considering whether or not I do or do not prefer any particular use of these styles of gaining inheritance or multiple-inheritance-like behavior, they're just a few things to get you thinking. Every problem requires a different way of thinking and practice makes perfect. (or at least better than last time). EDIT: I didn't read over your post as well as I should have and I think I'm giving you information that you already know, but I'll leave it here anyway.
I think it's similar to what Dojo calls "mixins" (i.e. merging two objects into one), except you're really just modifying one object.
This is called mixins in the book the parent linked to, as well. It is inheritance-by-copying. The difference is that the target of the mixin has the code that initiates the copying and the source of the mixin has the code that sets the properties on the target (in other systems, the code for these two functions is "elsewhere".)
It's a quick fix though, just replace with .is(':checked').
Inheritance seems to be largely a matter of taste. Whatever you choose that works and everyone is happy with is probably good enough. The method you posted is potentially slow and memory hungry. Creating those methods every time an object is created rather than creating them once on a shared prototype is wasteful, but if you don't have many objects that may not matter.
I don't think it's a question of jQuery's DOM model being too simple, it's a question of people building applications that are too strongly linked to the DOM of a particular page. As soon as you write: $('#stockTicker').click(function(){ var ticker = 'IBM'; $.ajax( /* go get teh price of IBM off some web service... */ ) }) (god, I can't believe I just used an example with stocks!) ...now the Ajax call is bound to the markup of a particular page. This is really easy to write in jQuery, because of the powerful selector mechanism and the unified API for sending callbacks around. But if you step back and think about it, it's sort of bonkers: it's like the click event "contains" the Ajax call, which is just kind of irrational. The Ajax call needs to be its own thing, so that it can be associated with lots of different user interactions with the DOM. It's the tangling up that's the problem. Rebecca has put out a lot of stuff on this topic, and every time I see it I go "yes! yes!". And then I find myself thinking, "uh, I have no idea how to fix this." 
&gt; I wonder how much she really understands about the whole programming design process Seriously?? 
This article has some nifty ways of looking at design in JavaScript applications. However, use of jQuery shouldn't be part of an article about 'essential JavaScript design patterns'. (Yes, I noticed it was in it's own jQuery section.) One thing I've never found to be useful from jQuery was the .ready() function: what is the point when window.addEventListener("load", function () {[do stuff]}, false); does exactly the same thing? jQuery can be very helpful, but it shouldn't be used in place of what JavaScript does easily on it's own.
I agree with you about the jQuery section, but I do believe that ready is in the lib to be consistent with the rest of the shortcut jQuery.bind methods. Passing a function to the jQuery constructor is different than jQuery.ready though.
Very cool, I've never come across this. As someone who uses the modular pattern a lot (when I use jQuery), this is really useful. Check it out http://jsfiddle.net/DFq9B/
&gt; The Ajax call needs to be its own thing, so that it can be associated with lots of different user interactions with the DOM. Uhmmm. function getTehPriceOfIBM(){ var ticker = 'IBM'; $.ajax( /* go get teh price of IBM off some web service... */ ) } $('#stockTicker').click(getTehPriceOfIBM); What is the big difference? Or even: function generateTickerFetcher(ticker){return function(){ $.ajax( /* do stuff with the closed over argument "ticker" */ ) }} $('#stockTicker').click(generateTickerFetcher("IBM")); The difference seems trivial to me. Did you mean something else?
I half jest. To me, she seems to be on a crusade for standards. Standards serve a purpose, and are critical in complex projects that involve multiple parties - in such cases they necessary part of a design process, but they are not an end in themselves. Standards are a tool, and like any tool, in some situations and projects they serve their purpose, and in others they are more trouble than they are worth. Tools need to be subservient to the design, not the other way around. 
this is good. Do you know how annoying the site would be if they started putting things in the site *just* so they could use that part of the library?
 I find myself thinking, "uh, I have no idea how to fix this." [Backbone](http://documentcloud.github.com/backbone/#Events-bind)! &gt; **Bind** a callback function to an object. The callback will be invoked whenever the event (specified by an arbitrary string identifier) is fired. If you have a large number of different events on a page, the convention is to use colons to namespace them: "**poll:start**", or "**change:selection**" &gt; Callbacks bound to the special "all" event will be triggered when any event occurs, and are passed the name of the event as the first argument. For example, to proxy all events from one object to another: proxy.bind("all", function(eventName) { object.trigger(eventName); });
I'm wondering whether this way of doing inheritance is inefficient? Would each instance have to redefine every single method on itself, rather than looking it up with the prototype?
Sure enough. I was a bit surprised this wasn't more of a "breaking change" style of notice. Also... it's going to be annoying as hell remembering this when developing new stuff.
Uh, yeah, he's not calling for sites to add random functionality to exercise all parts of jQuery, the point is they're uselessly evaluating code that a sophisticated tool like the Closure Compiler would be able to detect and remove for you.
You could have a prototype chain: Hybrid.prototype -&gt; B.prototype -&gt; A.prototype. Prototype inheritance can be used along with functions that build closures on *this*. Efficient? Depends. Local variable access is slightly faster than property access so closures have a small advantage there. On the other hand closures take longer to create and build more garbage for the GC. http://jsperf.com/local-vs-property
C has structs which can contain data and methods that act upon that data. Structs can contain other structs. It does not have classes , but it does have functions which do what classes do, including acting as containers for class variables and methods. It does not have class-oriented inheritance, but it does have composition and casting.
I think it's even more telling that jquery.com isn't using the most recent version of jquery. I wonder if their backwards-incompatibility mindset is hindering them.
I hate it when the "live" demo is dead.
I don't know about them, but I generally don't go mucking about with working production stuff just to upgrade something to the latest version.
What? I learned that event-based programming "enable[s] one to build C10K-capable systems on cheap commodity hardware", and that events are "well suited to the cost structure of cloud computing", and that Javascript handles (ignore -&gt;) **database** (&lt;- not cloud. uses threads.) results like mouse clicks.
First of all: Flamebaiting extension name. Second: What is the percentage of jQuery indirectly used by jquery.com because the 34% depend on it? After all jQuery is lots of infrastructure compatibility code for the most basic things and some chain methods on top of that.
Is it worth considering that most users will already have the complete jQuery library cached? Does the browser have to reevaluate the cached copy of the library each time it visits a page that requires it?
What's the problem with only using x percent of a library it it's a common library and served from, say, google's CDN? You're probably going to get better load times using the larger common library cached on a client's machine than you would if you stripped out all the parts you didn't need and served that custom version.
I recently learned that each instance will have its own copy of each method rather than just the prototype. I've used this pattern extensively in writing [WebGLU](http://github.com/onegeek/webglu)
48 . We have to be intellectually honest when we discuss library pros and cons. 26 . Applications require thinking in terms of loosely coupled, DRYed out units of functionality, designed to work with each other without depending on each other. 49 . Choose tools, not API's. For the sake of slide 48, please reconcile slide 26 with slide 49. I realize I wasn't there for the talk but I have a hard time gleaning meaning from the two slides that follow slide 49.
Isn't that what every desktop environment with an XML UI markup language does though? Why is it considered okay (or even good) practice for them and bad practice for the web? GLADE + C/Python = Good. HTML + Javascript = Bad. Why are Javascripters expected to build a UI in Javascript when HTML works? /scratches head
Yeah, this could suffer from that kind of performance issue; looking it up with the prototype seems like it would be more efficient. Setting the prototype of your inheriting type B to a single instance of A() would avoid this constant creation of separate properties for each object. This way, you can manipulate the prototype and have the changes effect all instances of that type. If you want to fix this (and maybe even still want to do the multiple inheritance thing), you change your code so it looks something like this: function A () { this.name = "A"; this.resetNameA = function () { this.name = "A"; }; this.alertName = function () { alert("Hello, I'm " + this.name + "."); }; }; function B () { this.name = "B"; this.resetNameB = function () { this.name = "B"; }; this.alertName = function () { alert("My name is " + this.name + "."); }; }; function Hybrid () { this.name = "Hybrid"; }; Hybrid.prototype = new (function () { A.call(this); B.call(this); this.alertName = (new A()).alertName; })(); The inheritance-related calls are now being made on a single newly created object that becomes the prototype of all Hybrid instances, meaning that there is only one reference to properties inherited from all other 'parent' objects. You can change properties of the Hybrid prototype and have them propagate to all instances of Hybrid; but, this does not cause changes to the prototype of A or B to propagate downwards to Hybrid instances. The A.call(this) and B.call(this) lines still do the same overwriting of properties - at the creation of the Hybrid.prototype object - but they only do so once. Still thinking about a way to get them to propagate downward... I'll come back to this after lunch.
For some reason mine keeps coming out as faster on property access... That doesn't immediately make sense to me though since you would expect property access to have a longer chain of pointers, wouldn't you? Then again, you're using Chrome and I'm on Firefox so maybe this is an implementation dependent thing.
what does "reevalute" mean? cache invalidating? depends on the caching mechanism used. as far as i can see it: if it's cached, an if-modified-since request is sent, and 304 answers.
Very interesting
That's not inheritance at all. That's composition.
This is standard practice in other languages. It's called composition. Perhaps you should broaden your horizons.
That's actually undefined, and may legally vary between JSVMs.
Mixins are not a Dojo topic, and these are not they. This is standard composition. It doesn't become a mixin until there are several of them using a common signature set or API.
Mixins are not a Dojo topic, and these are not they. This is standard composition. It doesn't become a mixin until there are several of them using a common signature set or API. This is not inheritance at all. This is composition.
So funny that you mention this, I was jsut been reading [this](http://documentcloud.github.com/backbone/docs/todos.html). A lot of times I find myself thinking "why can't I just save this freaking object as JSON instead of having to put it into SQL?" and it looks like Backbone allows for that, so I'm interested so far...
I guess it's just an issue of separation of concerns. It's as if the GLADE file and the C/Python code were being mushed together. Come to think of it, what she's complaining about is a little like bad PHP. Anyway, all I know is that when she says "do you have problems with code that looks like THIS?" I jump up and down in my chair and say UH YEAH.
Reinventing the web, eh? Why not use forever caching and be done with it? Sure, it's not *really* hard to manage these resources - but the difference in actual benefit between this and indefinite browser-based caching eludes me. I refuse to believe simple HTTP level caching instructions are not supported where local storage is. If that's really the situation - my mind will be completely blown.
I'm not so sure she wants there to be some sort of standard framework. She seems to me more to be promoting the institutionalization of good practices in a larger percentage of newcomers to Javascript. I think she understands your last point: the point of her talk was that jQuery &lt;&lt;&lt; Javascript, and that people need to learn to write better Javascript apps. I sure do.
Yeah, who wants bug fixes and all that. Why do they even put out new versions?
&gt;Why not use forever caching and be done with it? http://www.stevesouders.com/blog/2011/03/28/storager-case-study-bing-google/comment-page-1/#comment-3164 &gt;Browser caches don’t work as good as they should [...] and are even worse on mobile.
he's just saying that it's bad, I couldn't find the list of the actual things that specifically suck in mobile. but from reading the other points [here](http://www.stevesouders.com/blog/2010/04/26/call-to-improve-browser-caching/), I am left a little bit mind-blown - I will definitely look at local-storage to replace caching in my next projects. I just can't wrap my head around browsers having a total of 50MB for client-side caching. One big page is over 1MB in most sites.
Firefox 4 finally ramped that up. It uses some kind of heuristic to figure out a sensible size. So, the latest desktop browsers are ok in this regard nowadays. Mobile is kinda sucky. E.g. the iPhone won't cache anything &gt;15kb and there is lots of other weird shit going on: http://www.phpied.com/iphone-caching/ As far as I can tell, `localStorage` should bypass all of these issues.
If served with a far-future expires header (as is the case with the Google CDN that jQuery.com references), cache hits don't require checking for a 304 not-modified. There will be no HTTP request at all for users who have visited *any* site referencing that version of jQuery from the Google CDN within a year and before it is pushed out of their disk cache.
When not using prototype, you miss out on a lot of good stuff I once inherited an app that had constructor chaining similar to this and I it became a lot easier to maintain after switching to a more advanced inheritance scheme (like the one in prototype.js) - with references to parent constructor, ability to inject members on the fly and awesome stuff like that.
"After each line of code is executed, the _$jscoverage global increments its count for the (file, line number) pair." In other words, the test measures ~34% lines were executed, including any compat and helper functions called on the stack.
jquery.com -&gt; download -&gt; ctrl+shift+i -&gt; network -&gt; F5 Request URL:http://code.jquery.com/jquery-1.5.2.min.js Request Method:GET Status Code:304 Not Modified Request Headers Cache-Control:max-age=0 Host:code.jquery.com If-Modified-Since:Thu, 31 Mar 2011 19:28:43 GMT If-None-Match:"30c0af8-14fa5-4d2110c0+gzip" Response Headers Content-Type:application/x-javascript; charset=utf-8 Date:Wed, 20 Apr 2011 19:31:19 GMT ETag:"30c0af8-14fa5-4d2110c0+gzip" Last-Modified:Thu, 31 Mar 2011 19:28:43 GMT Server:ECS (fra/D4DD) Vary:Accept-Encoding X-Cache:HIT
The code still has to be re-parsed and re-executed when used on a new page (though it's also possible for browsers to cache the parse tree -- I thought Chrome might be working on/already do that?). So caching reduces the time spent fetching the JS over the network, but more JS still increases runtime cost. How much of a cost? Well, that's worth measuring. 
He still doesn't say anything about running in different browsers. There's lot of special Internet Explorer code in there.
If you're hit by the bug, you have a reason besides updating. The update can also break stuff that ran before, even trivial stuff. Like when one minor jquery update suddenly broken [type!=xxx] checking in Firefox. 
Common CDNs help, but they don't solve all the hosting issues (SSL, for instance, can throw several wrenches into CDN-hosted JS), and the empty-cache experience is far more common than people think. But it's going to depend on your particular site, and you're going to want to measure it. Nobody else is going to be able to tell you exactly what percentage of your users are getting cached assets. Bolin's tool is a pretty interesting experiment, AFAIK there's no other information about this kind of thing out there.
I love how more and more blogs/devs are getting deep into JavaScript more often.
I didn't mean to imply that using a CDN was, or should be, the one and only solution. I would love to see jQuery become compatible with Google's Closure compiler, and have Google serve that version. I think it would be beneficial if he provided an estimation of weight reduction using Closure, but I know that's a hard thing to gauge. Also if it seemed like I was saying the work wasn't interesting or useful I want to clear that up, I'm going to be adding this to my toolbox going forward for sure.
It drives me nuts when people talk about jQuery like its an application framework/architecture. It is DOM manipulation with a few good extras that can help abstract away the ugly browser specific code and make a reasonable API for the DOM. That's it, and (in my opinion) it does that very well. Maybe part of the issue is that event based programming may lead to messy code if you're not careful (just like any other paradigm), and since jQuery makes callbacks necessary and easy, it can lead people to make a mess.
&gt; I refuse to believe simple HTTP level caching instructions are not supported where local storage is. If that's really the situation - my mind will be completely blown You haven't done much mobile development have you? :)
Looks like they (mobile browser makers) haven't done enough HTTP related development :) But no, I haven't done much in mobile, nor do I want to - I become very claustrophobic at 320px width.
Well, in your example I disagree with using location.href. This is my preference because it keeps global variable usage to a minimum.
Because document.location.href wouldn't do a very good job of explaining what .prop() does.
One good reason: F5. People reload pages all the time to get fresh content without thinking about how it affects all the static parts of the page.
You're not being haunted by anything but bad ideas. Edit: I take that back, bad ideas and TrolledCypher. But it is significant that you earned a troll that follows you around.
Spare me the polemic. Response to later edit: &gt; But it is significant that you earned a troll that follows you around. No, it isn't. He follows other people around too. He's just a boring, whiny nobody who got shot down once and is wasting months exacting revenge, because he doesn't have anything better to do. You do the same thing to a lot of people. It's not about the people it's being done to; it's about the people doing them. Get over your punishment fixation. Nobody actually cares if VectorJohn thinks they've earned the situation that VectorJohn didn't even know about ten minutes ago, and has no idea about. Your guesswork isn't interesting.
I was hoping the extension was a general purpose code coverage tool for firebug.
There's something to be said for entirely client side fragment caching I think, from a practical standpoint. It's a lot easier to dump arbitrary data into localStorage than it is to load bits of your DOM with XMLHttpRequest and depend on HTTP caching.
&gt;I would love to see jQuery become compatible with Google's Closure compiler, and have Google serve that version. The main way the closure compiler reduces file size is by optimizing your libraries for your particular usage – since the version of JQuery that you would be using would therefore be compiled down to something specific to your app, it wouldn't make sense to host that on a common CDN. (you might want to host your compiled JS on a CDN, but you wouldn't be getting the benefit of cache-sharing with other sites, since your compiled file is just for you). &gt;I think it would be beneficial if he provided an estimation of weight reduction using Closure, but I know that's a hard thing to gauge. I think that's exactly what he was trying to do with this tool. As others have pointed out, there are likely code paths that aren't being executed by Firefox, so it's likely there is some code in there that wouldn't be removed by the compiler because it's called on other platforms. However, there are some other things the compiler does, like inlining functions and of course variable renaming. So overall I don't think a 60-70% reduction in size is outlandish.
Wow, what on earth are you talking about? Nevermind, good troll.
hmm... F5 performs verification of cached content (for caching with headers like ETag), it can still result in a 304 response (saving bandwidth, but not a request) According to tests I've done (years ago), the Expire header is not affected by F5. But that was in FF2/IE7 or something like that.
&gt; Mobile is kinda sucky. E.g. the iPhone won't cache anything &gt;15kb It's 25Kb. And I think it is 50Kb for the latest versions of iPhone.
One could argue that you're still parsing/executing/storing extra code in memory that isn't actually being used. Which is why libraries like the Closure Library, when compiled using the Closure Compiler, only gives you the pieces you're actually using and wipes the rest out. Most JavaScript engines are fast enough that this probably isn't an issue (but load time might be, especially on mobile).
Actually, the Closure Compiler has this feature called "defines" where you can specify some compile-time values for booleans/strings/numbers so if you have: /** @define {boolean} */ var IS_IE6 = /* some useragent logic */; if (IS_IE6) { /* do horrible hacks */ } then you can pass a flag to the Compiler: --define IS_IE6=false which will replace "some useragent logic" with "false" such that the IE6-specific code will be recognized as unreachable and then removed from the compiled output of the Compiler. Yes, this means that you serve different JS libraries for different user agents, though on mobile (where most people are only developing for Webkit), this can be a significant savings. 
This is a technique known as "constructor stealing" (amongst other things). This allows multiple inheritance. One of the main advantages to this method is it allows you to pass arguments to the "super"'s constructor, an ability some other methods lack. A couple things to note with this method: - As you note, they are not attaching any properties to the prototype. This means each instance will have it's own copy. For methods, this is somewhat inefficient, as most of the time they can just share the copy on the prototype. - Instances of the sub-type will not have access to the super-type's prototype properties (because the constructor was not called with new, it is not creating a new object, just attaching properties). This explains why everything is in the constructor. Because of this, constructor stealing is often used in combination with some other form of inheritance: instance properties attached via constructor stealing, and prototype properties gained via prototype-chaining, etc. 
&gt;Would each instance have to redefine every single method on itself, rather than looking it up with the prototype? Yes. For this reason, constructor stealing is often combined with another technique like prototype chaining.
&gt; what is the point when window.addEventListener("load", function () {[do stuff]}, false); Using jQuery.ready() is a little more sophisticated than that. It uses DOMContentLoaded if that event is available, it's possible to delay the jQuery load event, it's less verbose syntactically, etc etc. In a lot of cases, you don't need these things, but if you're using jQuery anyway, it's a good way to go.
&gt;Passing a function to the jQuery constructor is different than jQuery.ready though. As of the current version, passing a function into $() is just a shortcut to $.ready() relevent lines: // HANDLE: $(function) // Shortcut for document ready } else if ( jQuery.isFunction( selector ) ) { return rootjQuery.ready( selector ); } 
&gt;Yes, this means that you serve different JS libraries for different user agents Careful, in some JS communities this is heresy (perhaps not entirely unreasonably) and punishable by burning at the stake.
So wait, we don't like jQuery now?
Why did you put "Go to prom with me?" on a single line when every other word gets it's own input box? Also, why can't you just ask her directly? It shows that you're not a big soft vagina whose fragile little ego can't take rejection. And the last I checked (I might not be down with high school trends today) girls you take to prom don't like big soft vaginas.
My original point is that if the site that showcases the library isn't even using the new version, then that says something about their faith in their own library. Seems like they should test every update by updating their own site to use it and realize what pain they cause with their backwards-incompatible changes. My 2nd reply was just being a smartass because I never implied that they should upgrade for the sake of upgrading. It's their own site; if they have trouble keeping up with the changes, maybe they should consider that a problem.
You're right, I got it mixed up with the load event (load and ready being different things. x788 was talking about load) ? Is there a jQuery.load() fn? probably
Add a nice helping of couch with a bit of node and you've got yourself a full stack from the client to the database, including data format, in one language. 
Even better. Thanks for the heads up, I'll use that on our current project. BTW: Plovr is indispensable, thanks for building it.
&gt; The main way the closure compiler reduces file size is by optimizing your libraries for your particular usage – since the version of JQuery that you would be using would therefore be compiled down to something specific to your app, it wouldn't make sense to host that on a common CDN. Sorry, I worded that really poorly. I wish jQuery had a version that worked with the Closure compiler. &gt; I think that's exactly what he was trying to do with this tool. As others have pointed out, there are likely code paths that aren't being executed by Firefox, so it's likely there is some code in there that wouldn't be removed by the compiler because it's called on other platforms. Point taken, I was just thinking it would be interesting to see the tool profile a site's scripts (that uses a closure compiler compatible library) pre-compile, see what it says, run the script through the closure compiler and see how much was actually stripped out, sort of like a benchmark. I guess we're free to do that ourselves though ;)
jQuery.com uses the Google CDN. Due to its overwhelming prevalence and consequent improvement in cross-site cache hits, you should always use the Google CDN over others in production. This is the response header I get on the copy of jQuery used on jQuery.com: Response Headers Age:39828 Date:Wed, 20 Apr 2011 15:33:40 GMT Expires:Thu, 19 Apr 2012 15:33:40 GMT Server:GFE/2.0 It's getting a far-future expires header extending almost to the end of the world!
Composition is function StoneCypher () { this.a = new A(); this.b = new B(); } 
I like this name. Fits pefectly.
I believe the convention is to capitalize your constructors.
Morally wrong. Kant. Principle of universality. Good night.
I dont think anybody said that. Jquery do have some of the best documentation and is very easy to use. I think some people just feel its getting "bloaty" and used jquery.com as a example. But now the question is how many of the other code is for backwords compatiblity of older browsers.
About to check the video out. Anyone have experience with this? I started a project to create a database driven note application (CRM that basically does everything I need for work from notes, charging credit cards to automated followups which I might have come up as a notification box on the side of the browser plus a whole lot more) except I've changed Frameworks twice (first time I never got on board with Zend but I'm learning &amp; hoping to stick with Symfony) but the biggest headache seemed to be learning Jquery. For what I was trying to do it seemed very messy &amp; it seemed like designing the UI was the main thing holding me back from getting real work done quickly. Any thoughts?
I've used it on a webapp and it's very, very good once you get the hang of it. Previously most of the stuff I've worked on, most bugs have come from hiding/showing/saving the wrong thing at the wrong time. With the whole VVM thing everything stays in sync nicely
Just got done watching the demo (except the questions part). Curious as to whether it'd be possible to modify stuff in a database from one browser, have someone else open the same entry &amp; modify it &amp; have it edit live on my browser. Is this possible?
I think I came across this a while ago &amp; didn't realize what the hell I was looking at. Just came across knockout.js &amp; I feel like I've finally found the solution to my coders block. Started w/ pre-2.0 Codeigniter for my project then started checkin out Zend but didn't get anywhere w/ it so now I'm diving into Symfony (when I have time). Once I'm up to speed, this should help me do exactly what I need.
Yes, and that's what the parent did, if you look at it. Constructing an object internally and binding external call references is composition, not inheritance. Javascript doesn't have inheritance. It's object composition by prototype.
I'm not really interested to have someone who doesn't know what's going on respond to "go away" with "good troll." You approached me, not the other way around. You're picking fights, not the other way around. You're making personal accusations, not the other way around. Go find someone else to talk to.
You can take trolling too far.
Yes this is possible with web sockets (not all browsers support it). Or if you can deal with a little delay on the other persons browser you can support all browser with simple polling.
Spine looks quite interesting. I am currently using Knockout.js in a project and am very impressed (other than missing API docs). It would be interested to get a feel for how it compares to Spine.
Isn't "data-bind" an invalid attribute for HTML elements?
reminds me of AngularJS, mainly because of the data-binding.
So... bad. Even their HTML code contains errors.
You're correct. He is a troll!
JSLint is hardly representative of "real web applications." It doesn't even touch the DOM.
The preview version of IE10 != production version. I do hope that it is a top performer though, for the sake of everyone.
&gt; His benchmark is based on JSLint Picking one example of your own code and seeing how well it runs on various browsers does not constitute a benchmark of any significance.
&gt;designed to test the "actual" performance of the major web browsers on "real" JavaScript applications So he uses jslint which entirely skips testing anything DOM related. Just about all of the Javascript I write involves interacting with the DOM to at least a certain extent so I don't see how his tests matter any more than many of the others. I agree with his contention that most tests are not representative of the behavior of real web applications but I fail to see how using jslint avoids this problem. All of the real web applications I write have DOM interaction as part of the equation and without accounting for this he is still not answering the question of what is the real world performance of JS in these browsers.
Comparing IE10 to Chrome 10? The dev channel is up to 12 already! &gt; A recent paper coauthored by Microsoft researchers […] Oh, that's why…
Crockford has done great things for javascript, but it's time to move forward. This isn't 2008 anymore. His opinion now seems less relevant.
I wonder what happens when we make trivial changes to jslint.js ...
Awesome thanks!
"considered harmful" Barf. Well, text rendering is pretty complicated. Of course it's kinda slow. (I use texture fonts in my games.)
Oh, Crockford. Bless his heart.
TIL I've been using jQuery wrong.
Does anyone have a good link on regular expressions? This didn't explain them at all.. just said they were better
I am with him on this one. I have NO idea what the appeal is. 
it is in HTML 5, like any other data-* attribute.
This came up recently, though in the context of learning Python. You can [pick through the links here](http://www.reddit.com/r/learnpython/comments/gtx32/help_learning_regular_expressions/).
It is not the language, but the quality of the debugger for me. I use Ihttphandler to go straight into a C# server app (no web pages). I can trace an HTTP request/response from the one end to the other with a great debugger. The horror show that is the current state of javascript debuggers on the other hand....
I like the method of caching rendered characters. Other performance optimizations that I use in animations or games: * a secondary canvas as a text overlay * a position:absolute div atop the canvas as a text overlay I used a div for text in [this game](http://realstuffforabstractpeople.com/the_rgb_game/) 
Awesome demo! It took me a second to understand what you meant with the instructions, maybe you can idiot-proof them. Also I'm not sure if it is intended that the demo *always* shows the backside (with the camera) of my iPhone even though it should view the frontside - this might be a browser glitch as I use Google Chrome.
Ya it's chrome. I recommend safari only for this demo because safari is the only browser that let's you do real 3d animations.
|Example 2.28: Changing the value of an array item |1 var myArray = [ 'hello', 'world' ]; |2 myArray[1] = 'changed'; | |While it's possible to change the value of an array item as shown in “Changing the value of an array item”, it's generally not advised. How else would you change the value of an array item? 
Fundimental #1: Learn Javascript, then worry about using jQuery to make it easier.
Yeah, that's a little confusing. Maybe the idea is that you should be building new arrays where possible, rather than manipulating the original array so that you're not destroying arguments passed to a function?
Both [MDN](https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Regular_Expressions) and [regular-expressions.info](http://www.regular-expressions.info/javascript.html) have good information on that.
A quick google found an [answer on Hacker News](http://news.ycombinator.com/item?id=1478815) that sounds reasonable. Edit: &gt; How else would you change the value of an array item? Array.splice would work just about the same.
ah, nifty. that makes more sense.
sure, that is true with all complex data types - they are accessed by reference. The should clarify, because 1. the example they provide uses simple data-types. 2. it doesn't matter anyway: array[1] = 2; array[1] = 3; alters the value of array[1] the same as setting array[1] to a new function would. try this: var m = []; var y = function foo() { return "yes" }; var n = function foo() { return "no" }; m[0] = y; alert( m[0]() ); m[0] = n; alert( m[0]() ); alert( y() ); you'll see assigning a new value to array[0] does not alter the function, but merely which function is referenced. I'd say that section needs to be fixed, either that or they are talking about something else. 
It's a huge deal. I use JavaScript now on the client, the server AND for the development build process. I write a single metadata file to describe my data schema and then use it on the client and the server. It's beautiful. Yes I know other languages and use them when needed, but a single language is way more efficient. 
Haven't read this in years, but it was a serendipitously fitting koan for the day.
`drawText()` isn't "considered harmful". It is slow, and you should cache if you can.
Am I the only one who thinks that 34% is pretty high? jquery.com is neither a wiki, a photo sharing site, a social network nor a &lt;canvas&gt; game. jQuery provides features for many different use cases, and I see nothing wrong with that. Also, half the code is probably workarounds for IE6 bugs.
That's how I read it, although I see now the HN answer is a bit unclear. Another reason they mention it might be due to the length being changed if you do: var arr = [] arr[22] = 'world' console.log(arr.length) // 23 But yea, can't see any reason that isn't simply answered with "it's just how it works and something you need to know".
&gt;Irregardless, I could care less about such issues, as they don't really seem to effect anybody. This sentence is really making my blood boil, which was its purpose, I guess.
And objects are a bunch of curried functions, all curried with the same exact info. Now, you wouldn't take 20 functions and curry them each with the same 20 pieces of information when 2 of those functions only use 3 of those pieces of info, and 5 use another 4, and 2 use 6, 1 uses 18, etc, right? So, why do you make classes that are that uncohesive? Remember, they're just a set of identically curried functions...
No, because curry causes short-circuits in electrical components.
I don't think I can support a tutorial that teaches both jQuery and JavaScript together. People need to understand why the two are different - where the boundary is drawn and _why_ (what JavaScript can do on its own, how/DOM methods, and how jQuery simplifies but doesn't invent these things). I fear a tutorial that combines them may result in a new programmer that cannot immediately distinguish between the two, or know when to use JavaScript's native methods instead of jQuery. "I need to change some attributes of #myelement, then I'll be done. Better include the jQuery framework."
An array is just a variable. That'd be like saying you should create a new variable every time instead of manipulating the original. x++; // versus y = x + 1; Not too sensible, imo.
This is what it's talking about, but that is pretty irrelevant. As far as I'm taking it, Hacker News is just grasping for straws, because they - like us - have no clue why not. This is nothing array specific. This is just how JavaScript handles objects. var x = {my: "test"}; var y = x; y.my = "example"; alert(x.my); This is nothing that is array-specific. Saying you should never change the values of arrays because objects are actually references to the original object is like saying you should never change the values of _any variable_, because any variable's object reference works the same way. As far as I'm concerned, the page saying not to change array values is simply wrong.
If you call `x++` within a function body, it doesn't actually manipulate whatever variable the caller passed in. If you call `a[0]++`, the caller's array will be modified. If you call `a[0] = a[0].attr` the caller could inadvertently lose a handle to an object by calling your method, or could need to jump through hoops to use your method to avoid losing things.
**JavaScript != DOM** You suffer the same delusions that /r/programming suffers from; /r/programming thinks that everything is intrinsically web-focused, and if it relates to the web then it belongs in /r/programming. It is a fallacy to think of everything in terms of the web; you must realize that JavaScript, as a language, is wholly independent of the _web_. The DOM is a separate entity, and in testing _JavaScript_ then the DOM should be tested separately. It should be painfully obvious that just because an application uses JS doesn't necessarily mean that the DOM is involved. If you want to test the DOM as well, then that's fine, but you are no longer creating a JavaScript benchmark but more of a browser benchmark. For instance, how would you accurately portray the performance of node.js, if all of your tests were heavily dependent on the DOM? I don't drink all of Crockford's kool-aid, but I do think his argument here has merit (whether or not it's valid). If we design every JS-related tool and resource to be so tightly coupled as to be intertwined with the DOM then we are doing the entire JS community a disservice and haven't learned anything in the past 10 years.
There are also those who would preach that to learn JavaScript, then you first should learn C/C++, and if you wish to learn C/C++, then you should first learn assembly. So we should all be learning assembly, then, even if we're only interested in adding some cheap animations to our cat's homepage. And that's the issue -- the problems that jQuery aims to solve are old, contrived, confusing, mysterious, and riddled with 1-off solutions to browser inconsistencies. To _learn_ all of that is a monumental, time-consuming (5+ years) effort.
Cool, I'd love to see a tutorial on how to make that
Cool, I'd love to see a tutorial on how to make that
Instead of V6 unix can we get one with RSX-11M+ and a fortran compiler installed? I have source code for an old BBS written by Brian Reynolds I'd love to get running.
Nice try, FB code security auditor.
Try to see whether the [simh emulator](http://simh.trailing-edge.com/) can help you, at least as far as the hardware emulation goes.
Those are languages, jQuery is a framework, with a few minor syntactical expansions. Understanding the language behind a framework is just common sense. What if there is a bug in jQuery? Just complain on the mailing list like an ass? I'm not so much worried about a person not understanding vanilla javascript as I am worried they are learning a toolkit that is only useful in certain situations. What happens if something has to be really fast or small? Carrying the weight of jQuery is an evil we don't mind for most situations, but what happens when you can't use it? Hell, are we even sure jQuery is going to be the standard in a couple years? I personally prefer the syntax and modularity of Mootools and it leads to faster, more expandable code in my projects. I'm just saying, all it takes is one popular web service to change the roadmap of web standards, don't get too comfortable.
I didn't create it, but you could nag the creator over IRC, mail or whatever. Check out [his homepage](http://www.aiju.de), I'm pretty sure there's some contact info there.
Oops, looks like someone else [already reddited this](http://www.reddit.com/r/geek/comments/gtysi/heres_a_nickel_kid_go_download_yourself_a_better/)... Didn't find it when searching, but you should upvote his post instead of me.
looks good
You are being told: "try to avoid changing the value of array items" rather than "don't change the value of array items this way". 
jQuery is just an example, it could be any abstraction really. For instance, PHP is merely an abstraction for C/C++, so are you saying that PHP coders would be better off if they.. oh wait... lol. Seriously, though, what opened my eyes was the day I came across a `%JS-abstraction lib%` article written on a graphic designer's blog (the type that likely spends 99% of his time in PS), and although he didn't know JS at all, he had a decent collection of `%JS-abstraction lib%` snippets that could do all sorts of wonderful things, very easily, and the main selling point to his readers was that _'you don't have to know how to program'_. Like it or not, that's the world that we live and `code` in. Designers would likely have some of the same words of advice for me -- I should learn color theory instead of relying on palettes found on the web. &gt; Hell, are we even sure jQuery is going to be the standard in a couple years? I personally prefer the syntax and modularity of Mootools and it leads to faster, more expandable code in my projects. The API is inconsequential; it's the problem(s) that they solve that is going to be the determining factor behind any of their demises. In other words, I think that once we see ECMA, W3C, and browser vendors working even more closely together they will remove the largest function of most of these current JS abstractions -- simple, reliable DOM interactions. If IE had gone unchallenged all these years, I doubt we'd see anything remotely close to the quality of the JS libraries/frameworks that we see today.
looks good
looks good
looks good
looks good
looks good
Ok I generally agree but this is nonsense, &gt; **You can work fluidly across client and server!** &gt; &gt; If anything I think this is dangerous rather than useful. The client and the server are different places, with different expectations. Any vagueness about that boundary is wrong. ... &gt; &gt; Certainly you don’t need two implementation languages to keep your mind clear. But it doesn’t hurt. It doesn't hurt? The only argument here is that the way to enforce boundaries is to have different programming languages. There's no other point made in this paragraph that relates to the language.
jQuery solved stupid things, like IE, and other browser-specific quirks, that made a devs life a living hell. It's just a library of all the life-saving functions put together and has some nice features to boot. If you're going to start with jQuery, you should learn that it is to help with browser inconsistencies, and you should go native whenever possible unless it makes your code much more complex.
agreed, one of the weaker articles to come out of IBM - fundamental flaws in js conventions and pseudo-html examples (with horrible things like inline onclick js calls). Objective JS doesn't need to be taught in the context of the DOM, and doing so adds an even more convoluted layer to an already challenging concept of understanding the fundamental components of most major object-oriented javascript design patterns (prototypical inheritance, and closures)
I (or, rather, my cat) made a simple memory game using JavaScript and HTML5 canvas element. The presumed twist is that cards are represented by different programming languages, and it the end there can be only one! Please check it out and criticize. (cross-posted from r/programming)
You could build this using 3d CSS transforms too. :) 
/USR/GAMES/MOO started a game. Now, if I only could figure out how to play it. Numbers like 1234 or 4567 gave some output, but not numbers like 1, 2, 100, 1000 or 10000.
And for the sake of developers 10 years from the release date.
Holy moly, it even stored my locations while on a recent trip to Mexico! 
I haven't been following all the news about this location tracking business, does it only work on &gt;3GS (with GPS)? Or will it also have tracked my locations on a 3G as using less accurate methods?
its in Application Support folder. Took me a while to find it but it's there. Have you ever backed up your phone?
Had roaming on? My cali trip pics arent mapped, i had data roaming off and there was no wifi either. 
I am pretty sure data roaming doesn't have anything to do with it, I had data roaming off on my recent holiday and that is definitely mapped
Hmm I dont think the gps works without the data though?
Right, data roaming was off and wifi was scarce, but had an international roaming plan.
OK sure. But that's nonsense. Arrays area convenient way of storing dynamic data: rather than declaring 10 variables to store data that will change, use an array and index to the data you need. In many cases that's the only sane way to do it, and under no circumstances should one be wary of changing values indexed in an array. It that were true as a general strategy, it would apply to variables as well. There is no reason to avoid changing the value of array elements. If you are using the array to point to functions or complex objects, you only need to be aware that the array does not store the objects, but only references them. The issue has more to do with how javascript handles objects. It's a false assertion either way.
It should have logged your location using WiFi hotspots without a GPS unless you disable location services. That's my understanding anyway.
Thanks for answering. view-source:link ...allows you to see the source without the loading the page. . &gt; Why do you want... Speed. . I spend a lot of time at yahoo pipes. The debugger in the pipes editor is sort of crappy and often I have to see the original source code. I just recently learned that view-source: can show the source without loading the page. I don't know how many 1,000s of times I've loaded pages just look at the source code. . I can copy and paste view-source:link into the location bar - but if possible - I'd like to use a keyword instead. --- Off the subject - I also have some xpath questions. What community is a good place to ask them?
GPS itself doesn't need data, but to load the maps you do. That is why apps such as "Offmaps" were created
How long should it take. I've had "please wait" displaying for 5 minutes. I've tried stoping and starting as well 
On the meta-topic - thank you for sharing source on this. This is an excellent example of *real world* client-side js app programming; accessing sqlite data (and packed data formats in general, like plist); and using the google maps api. To see it all together in a functional app is a wonderful study aid. I'd love to see deeper comments - but even aside from that, this is a treasure. Thank you again. 
I'm fully planning on filling out and commenting the sqlite side of things in the short-to-mid future. This little app just provided me with some motivation to hammer on the data format until I got something working.
Do you know an IRC group where I could ask about view;source:? I've asked questions at the Mozilla group #Firefox. The rudeness of that group is incredible. I asked there after I posted here but I only got silence from the masses and rudeness from one guy.
Browser bookmarks, Delicious, Instapaper, etc. Come on, people.
Also the 'save' button at the top of this page.
I wouldn't rely on reddit for anything but going down. :P
Emulator coder high five. :) I did a GBC emu in JS: https://github.com/grantgalitz/GameBoy-Online Even bundled a binary with it: http://www.grantgalitz.org/PokemonCrystal/ I'm wondering if we should consolidate our efforts for one massive project? I also wonder how long it will be before we get to an x86 emulation in JS. Windows 95 emulated in JS anyone?
No on Object because of for(var x in obj) functionality. Yes on every other class. In order to provide es5 compatibility you have to extend array and string anyways by addin methods like indexOf, trim, map etc. So arrays for var x functionality will be broken anyways.
Also helpful: http://docs.jquery.com/Plugins/Authoring
Yes, for making the built-ins compatible with ES5, no otherwise.
OK, but why? I'm especially interested in learning the rationales behind the answers.
Mostly because of compatibility. You never know, how much crap someone programs, especially in javascript.
I don't, because I don't like to assume that other libraries won't also try to cram something onto the prototypes. Better to be self contained entirely and not leak any globals. For things like ES5 compatibility, I'd do something like: var forEach = (function() { if(typeof Array.prototype.forEach !== "undefined") { return function(arr, cb) { Array.prototype.forEach.call(arr, cb); } } else { // native implementation } }()) and just call forEach inside my library. It's a little bit of overhead but not worth worrying about on modern engines. 
The somewhat poorly documented [widget factory](http://docs.jquery.com/UI_Developer_Guide#The_widget_factory) (part of the jQuery UI project) might also be interesting. It provides the functionality of the plugin boilerplate and then some, and is useful for creating any kind of state aware plugins – not only jQuery UI widgets. Update: A little more thorough introduction/tutorial: http://bililite.com/blog/understanding-jquery-ui-widgets-a-tutorial/
Is the metadata describing the json going from client to server?
Takeaway: It's 5 times faster than Chrome 10 at this benchmark, let the whining begin. (for the record, I'm using chrome 12 beta to write this message)
Kind of, but probably not in the way you're asking. The metadata file is processed and then just loaded on the client side like any other .js file. The metadata also includes security rules which the client can reference to provide ui feedback of what is permissible and the server can actually enforce. All of that from the exact same definition so there is no chance of client and server side security rules getting out of synch.
&gt; Tools like PhoneGap or Titanium make it easy to bundle some HTML pages and JavaScript together in an App and display them in a UIWebView, which is basically just a browser window. Titanium mobile's earlier versions used to do that, but it hasn't been the case for a little while now. Titanium mobile apps are all JS (+ xml for ui declaration), targeting the phone APIs, and rendering native widgets instead of just throwing stuff in a web view. The main reason for the switch, as I understand it, was simply that the "apps as a web page" model wasn't performing as well as native apps. Since Titanium is open-source, folks write bindings to APIs as they need them. For example, there's a [project to add openGL support](https://github.com/atsusy/tiopengles) on github. 
I don't out of habit, but I don't really have a problem with it to be honest. Maybe in the future once more browsers (IE) support some of the ES5 methods like `defineProperty`, which allows you to define non-enumerable properties on objects, I will consider adding some convenience functions to the built-ins. Some people don't do it because of possible conflicts.. e.g. another library defining it with different behavior than you expect, but I don't think that will be very common unless dealing with huge code bases that use many third party libraries. 
The inline diff view is not ready yet. I will be working on this shortly. I have written the diff algorithm from scratch so that any number of code sources can be supplied for a single diff operation. I still need to examine various code patterns before I can say the new algorithm is production ready. Please let me know of any features or changes you would like added!
Why? Sugar. Why Not? Conflict. I think that this is awesome: http://fusejs.com/blog/category/learn/ -- I tried it in Node.js, works pretty nicely (only compatible with modern browsers): http://github.com/hij1nx/subclass
Who else thought it was a good idea to let the 'this'-keyword refer to the calling object, rather than the object being called. And don't get me started on function expression vs function declaration.
Yes, I've never had anything against that practise. I think it simplifies the code and utilises language features better, and I haven't had any problems with it so far. I don't extend Object though (for obvious reasons), and nowadays I try to use Object.defineProperty to make sure that my new properties have [[Iterable]] set to false.
Lightweight? Downloading master is 49Mb. The (closure compiler simple, it looks like) minified library is 500 lines weighing in at nearly 300kb.
Oh, nice - no need to pre-create the dialog element. I've been looking for something like this. 
Reminds me of [Impromptu](http://trentrichardson.com/Impromptu/index.php), but this looks just as good, if not better.
It says in the post title it's an alert[()] alternative *for* JQuery not *to* JQuery.
I will say the wording in the title is horrendous. I expect some sort of alternative to a JQuery alerting plugin that I had missed. "Apprise - An attractive JQuery alternative to alert()" may have been clearer. And even than, who the hell uses "alert()" for anything else than quick and dirty debugging? It's more of an alternative to JQuery UI's Dialog or some simpler model dialog plugin.
I still agree with your original premise. There may be massive jQuery UI frameworks, but that doesn't detract from the fact that jQuery is a massive framework with a massive portion dedicated to user interface functionality.
http://www.reddit.com/r/reviewmycode
I don't understand the beef. You can still do this: function Girl(name, age, weight) { var self = Person(name); self.trait( "age", (age - 5)); self.trait( "weight", (weight - 10)); return self; } Which has the added benefit that if you omit the `new` keyword on instantiation, you don't end up fudging up the global object. And if you leave the `new` keyword in, it is silently discarded. The only problem I have with that pattern is that it makes the `instancof` operator almost useless. But I don't need that anyway.
\#\#javascript on freenode is pretty close.
Deriving and instantiating are two different things. You shouldn't do both of them with one function. Constructors are constructors. Use them as such. For derivation either use Object.create or make a second constructor for derivation that shares a prototype with the one for instantiation. John Resig, in "Simple ... Inheritance", stole the idea from base.js to use a Boolean variable to determine if a constructor is in instance or derive mode. Why have modes? Have different functions. Whatever. Just have different code paths for different things and don't be a confused mess. 
Still, jQuery UI is on Google's CDN, so there goes the “massive download” argument.
Oi, I really want to rewrite this to support: apprise(text, defaultAnswer, answers, returnFunction, animate); apprise("Text", 1, ["Answer 1", "Answer 2", "Answer 3"], false, true); apprise("Text", "Charles", "input", function(r){ apprise("Your name is " + r); }); Separating it to confirm and verify, then giving textOk, textCancel, textYes, and textNo their own strings is silly. Otherwise, great work. It's definitely Web 2.0.
What's modal?
http://jsmentors.com/
What happens when one prototypes Girl? Girl.prototype.doMakeup = function(){ //"this" is Girl or Person? }
What about http://refactormycode.com/codes/recent/javascript
I may be oversimplifying this, but is this what the author ultimately wants? http://jsfiddle.net/YQLUs/1/ *edit: this isnt a real solution, but neither is returning an object literal. Simply because you cannot add to A's prototype
http://codereview.stackexchange.com It *is* still in beta.
After years of working with bloated, sluggish IDE's like Aptana I finally purchased PHPStorm just this evening (the IDE from Jetbrains... it was on half price sale). I've been using it for the past week and it blows the likes of Aptana (and even Netbeans which is, in my experience, superior to any of the Eclipse based products) away. No idea how Aptana 3 stacks up but after trying to use every previous incarnation of Aptana, Eclipse and Netbeans (which I had settled on as my goto IDE for the past year or so) using something as powerful and responsive as PHPStorm has spoiled me. Easily worth the $49 I had to drop on it.
I'll have to check that out. I've been using Aptana 2 at work (windows) and home (mac). If Aptana 3 is as good as it's reported to be, by this article, it may be a keeper. I like the git integration.
"Just have different code paths for different things and don't be a confused mess." Oh how I wish I could tell myself of 5 years ago that very sentence. Not that he would listen. The asshole.
http://en.wikipedia.org/wiki/Modal_window
I don't do it because I'm usually afraid of conflicts with other libraries and I want my code to be "portable". I don't even try to feature detect since other libraries may have broken implementations of the standard methods.. - I'm constantly working in many different kinds of projects and with different teams, sometimes not even knowing which libraries or random code will be included on the "final" page. Lately I'm becoming more "open" to extending built-ins to match standards since not having some simple methods like `Array.indexOf` is kinda bogus and it's hard to remember what doesn't work on each browser. PS: if you are going to implement ES3/ES5 features make sure it works exactly like it is supposed to! (specially if you are a library creator)
So then does he mean add an _option_ for modal? It is already a modal window/dialog.
Thanks for all the replies and suggestions. They all look good. I'm a big fan of stack exchange so maybe I'll start there. I'll check out all of them though, thanks.
this is kind of what I was looking for initially. Is there a way to search/browse subreddits? i did a search for code review but didn't see anything this subreddit.
http://www.reddit.com/reddits/search?q=%22code+review%22
Interesting, developed by eBay, Inc? Also, how would it compare with Eclipse IDE for JavaScript Web Developers(my daily driver, even though I use it for embedded Javascript)? There is certainly room for a good Javascript IDE.
You should never create prototype chains by instantiation (the 'new' operator). This is an important fact because Javascript originally did not have any other way to create the chains until the Object.create came along, and it should always be used to create prototype chains: Girl.prototype = Object.create(Person.prototype) See http://www.ngspinners.com/jay/ for more info about easily understanding how to use Javascript.
I agree. ...wait, what about browsers that don't support it?! ... WRAP. UP. EVERYTHING. 
This was a piece of s***. It messed up half of the keyboard shortcuts and it's impossible to get rid of it. I'll give it another ten minutes before I do a fresh Eclipse install. 
I've actually really enjoyed using the beta version of Aptana Studio 3. The JavaScript support is excellent, compared to other Eclipse plugins. Plus, the sync options make it very handy.
Heh, I love my VIM.
It's relatively small compared to, say, the media part of a website. Plus, your browser probably has Google's jQuery UI cached already. :)
Ooh, faster? Oh, still Eclipse-based. So still not that fast then.
does anyone have suggestions on whether to start with backbone.js or knockout.js? I'd like to try one, but not sure of the benefits of each.
I could definitely see using this for some extremely fast collision detection, at the very least. Nicely done.
What the hell? Sitepen links to a dojo tutorial, doesn't add any content, and that gets posted to reddit? Oh don't worry, they plug their dojo training session though. Downvoted. edit: heh whoops, it seems the author is from sitepen, but wrote a tutorial and it was added to the dojo documentation. Sorry for the quick judgement. Un-downvoted. You just may want to clarify on sitepen that you wrote it, and not just linking a dojo tutorial :P
Use phpdesigner
I usually debug the PHP page to be requested by Ajax first thoroughly by calling it directly in the browser and passing different variables to it as parameters. Then I at least know the output is correct for most situations and error cases before implementing the JavaScript code to call that page.
Having used both I'd say it's really up to you to also try both and see which style works for you. I've found that the Backbone paradigms are harder to understand initially just due to the fact that the docs don't have as many concrete examples of how you _should_ do things. Also, even though you hear of Backbone as being MVC it is really MVCC (Model, View, Controller, Collections). The distinction is important because while the Backbone model is powerful it really doesn't shine in a web application context until you pair it with the Collections. Knockout, on the other hand, has plenty of good examples and so I've found it easier to get up and running with. It follows the MVVM (Model, View, View Model) paradigm and does not have anything analogous to Backbones Controllers. I've found the Knockout conventions to be very easy to understand and the data structures are pretty simple. You use observables or observable arrays. You bind things declaratively by placing data-bind attributes into your markup and then a simple call to knockouts .applyBindings function to "sync" the View (HTML) and the ViewModel (JavaScript). Ultimately the thing I've found most helpful is to download both and build a small toy app or widget using both.
Assuming one has a tough enough skin to deal with the inevitably grumpy RTFM!!!, etc, IRC crowd. :-/
actually my comment fixed the problem and unpleasant is relative; not using web standards is digusting. 
Hmm ... Seems similar to Opera Widgets
that's super informative, thanks! Think i might start with knockout from what you've said.
Similar to Adobe Air or even Prism? Naming seems like a stab in the back at Google chrome, it's unfortunate having part of your UI engine sharing the same name as a competing product. 
Pretty much identical. But when Chromeless really gets going, I'll have to switch over to it. Namely because [this](http://dev.opera.com/sdk/) ginger kid won't stop following me with his eyes and it creeps me out.
Very nice implementation, on Chrome 12 in Win 7 I'm getting a pretty smooth 50fps with 1000 objects on screen
It replaces Prism. More generally of course the browser's "chrome" was a Firefox term for the menus and other bits surrounding the webpage and they described it this way before Google Chrome. Sort of like how when Firefox started it was called "Phoenix" and later "Firebird" but that conflicted with an existing opensource database called "Firebird" and so they renamed themselves to "Firefox". tl;dr: Google Chrome wasn't the first to use the "chrome" word.
The "UI engine" is called Gecko. Anything that isn't content in an application can be referred to as chrome. Google named their browser as they did because they planned to cut away as much chrome as possible. [Chromeless is named as it is due to there being no chrome, of the regular kind, it's all HTML/JS/CSS](http://mozillalabs.com/chromeless/2010/10/21/chromeless-build-your-own-browser-ui-using-html-css-js/).
I'm afraid I didn't develop it though, I only found a link to it and decided to post it. :( If you'd like to contact him, you could try the means mentioned [here](http://aiju.de/). That said, I might still be interested in joining in on an emulation project. I started on a Java bytecode interpreter once, but never got around to implement object instanitation. Oh, and by the way, it's **really** cool to see good ol' Pokémon Crystal running inside my web browser. Great work!
I.. thought I replied to your post a few days ago, when I first noticed it... Apparently I didn't, maybe reddit had some hiccups or something. Anyway, I didn't create this emulator, [this guy](http://aiju.de) did. I simply found his awesome work and wanted to share it. :)
Would have called it, Bare Gecko. 
The term chrome is used in user interface design and has been around a lot longer than Chrome the browser. It's not even specific to browsers.
 But...why? They keep adding shit to the browser so that it can act more and more like a desktop app. Pretty soon the browser VM will be so advanced that it emulates full on x86 + GPU hlsl shaders, etc. It will be pretty much be a vmware instance at that point, and we will have come full circle. Why not just make a desktop app with desktop technology? Oh you want some web support? Embed a web browser or make your app network-aware. All this push to make 'web applications' is glue and duct-tape on what the web was supposed to be.
Like my [WtDesktop](http://www.gitorious.org/wtdesktop) ? It's a connector for [Wt](http://webtoolkit.eu). You just need to link to libwtdesktop instead of libwthttp, libwtfcgi or libwtisapi and you get a desktop application instead of a web application. 
Where's the download button?
I thought reddit hates Crockford now because of his strong opinions about JSLint?
Titanium. At least it will look somewhat native. And probably run better. 
Well, I just had a chat with reddit and he assured me that Doug Crockford is still appreciated for his many contributions to JavaScript.
I still like Crockford. :P
I don't think anyone really hates him. Most people just think he has a radical view on Javascript. 
The scary thing is that's where things are already headed. Google is already doing x86 emulation with NaCl. And many browsers are now leveraging the GPU for canvas stuff. But I'm with you on this; when a web browser becomes what is essentially a self-contained operating system then it ceases to be a web browser and it becomes just another platform to worry about. There's got to be a limit on the amount of technology recursion going on here or things will just get stupid.
I'm glad to see someone as visible, prominent, respected, etc as Crockford publicly bashing IE9 (and praising IE10).
Also: strong opinions against implementing HTML5 (until they fix more pressing security issues) Related (not reddit, but funny): http://twitter.com/#!/rwaldron/status/59125001202307072
TIL that NaN === NaN is false in JavaScript, which is ECMAScript, which is JScript.
Good that CoffeeScript says screw == and !=, do away with switch statement's fallthrough hazard.
It's false in most (all?) languages as it's part of the IEEE spec. That is why languages provide some form of isNaN() method, including JavaScript. There is good reason for it, as NaN is defined as all 1's in the exponential field, but anything can be found in the payload. So two different results that produce NaNs will produce bit patterns that are not necessarily equal.
Funny (in a very sad way) that most of the major fuck ups when dealing with the web is MS' fault.
I hated Javascript until I heard Crockford giving a lecture on it.
Because the browser ... i mean "user agent" ... API is cross platform and maintained by a standards organization. So the web app you write for Chrome on Mac OSX will also run in Safari on an iPad, or IE9 on a PC, or Firefox on a Linux box. ...well, someday...
I actually had tickets to this event but couldn't make it since my girlfriend was sick. :\
Just a small correction, JScript is Microsoft's implementation of ECMAScript.
I like that part where he says that all IEs must die except for IE10.
Thanks for posting this. He also gave [a talk recently at MIX 11 about ES5](http://channel9.msdn.com/Events/MIX/MIX11/EXT13) if anyone hasn't seen it.
I'm using json as the request data. Is there a way to send that type of request from the browser?
You can always put your test JSON data into a PHP variable on the ajax_request.php page, json_decode it then make sure it returns the right output on the PHP page and isn't erroring somewhere.
Also, from a semantics point of view, It doesn't make a lot of sense to assert that, say, 1/0 === 2/0.
But they're responsible for a lot of the good stuff too. Like, they invented the XMLHttpRequest, which is kind of a big deal nowadays.
This is an HTML5 and CSS3 demo site I built that has some unique features, such as real time lyrics display and IE9 pinned site functionality. I will be making this open source in a little over a week, but there's nothing stopping you from taking a peek now. I preprocessed the audio and stored the RMS amplitude data in a JavaScript. Then I use audio.currentTime to index into that data and influence the images shown on the canvas. (At first I thought I invented this technique, but Googling sadly proved me wrong.) Full disclosure: I did create this demo for a contest, but I thought it might be useful to HTML5 and JavaScript developers, despite the fact that the code needs a bit of cleanup.
They also had a logical box model, something the w3c can't claim.
the best thing about PHPStorm(besides its build from IntelliJ) is its shortcuts, here are some IntelliJ's shortcut (almost all of them works in PHPStorm) http://stackoverflow.com/questions/294167/what-are-the-most-useful-intellij-idea-keyboard-shortcuts
Awesome! Might use some bits and pieces for a project i'm working on.
If you are using separate (FTA SSI) HTML why not just use CSS to do the 'highlighting'? Am I missing something here, or is this just something for those that know no better?
Meh. Here's my unit test pattern: function assert($){ if (!eval($)) throw $; } var x = 12; assert('x == 12') // if the eval is defined locally then you can refer to any local variable in your expression. If it fails then you see the entire expression without writing separate message. 
It is using CSS to apply the styling. The idea here is that you have a static navigation but still want to give an indicator of the current page. The script does this (I assume) by checking the `href` against the current page and applying the class automagically. Unless you're already using a dynamically generated navigation (say, using a third-party CMS), doing this on the server side is more trouble than it's worth.
TIL Google fanboys have as many hitpoints as Apple fanboys.
I don't see how this is more trouble than it is worth, unless you have a billion links in your menu... I think this is more of an issue that people are too lazy or don't care...using javascript in this manner just feels too 'hackey' to me.
No, please do this on the server side.
Cool idea. :) The main point of this example was just to provide a twist on the good ol' assert and demo chaining a bit. Esp. "not" is something I haven't seen before. It's kind of a special case, though.
Depends. If your navigation is entirely static, extracting it and generating it dynamically may feel at least as hackish (it's about two lines of JavaScript versus refactoring the entire navigation). You're right, however: ideally, the current page should be indicated regardless of whether the user has enabled JavaScript.
ehh SQL on the web is dumb, [this article](http://hacks.mozilla.org/2010/06/beyond-html5-database-apis-and-the-road-to-indexeddb/) talks about it
Refactor your entire navigation just to add a class name (or some other identifier you can use for a selector) to it? ಠ_ಠ
You're not adding "a class name" to the navigation. You're adding one class name to the active navigation item. If your current navigation is static HTML (say, an HTML list with each link as list item), there are two ways to do that on the server side. 1. You could add a condititional to every single link: This: `&lt;li&gt;&lt;a href="/awesome"&gt;Awesome&lt;/a&gt;&lt;/li&gt;` Becomes (assuming Jinja2 as a template language for brevity) this: &lt;li{% if current_page == "awesome" %} class="current"{% endif %}&gt; &lt;a href="/awesome"&gt;Awesome&lt;/a&gt;&lt;/li&gt; (Repeat for every single link in the navigation.) 2. You could extract your static navigation into a data structure (depending on the organization, this would be a list or tree) and then iterate over it, adding the class where applicable. The first option would result in a very messy template with the potential for errors caused by copying and pasting. The resulting markup is not very DRY at all. The second option results in a very simple template you won't even have to touch when you add new navigation items. The only problem is that if you started with a static navigation, you have to put some work into it and consider how you want to store the data and all that. Simply slapping two lines of JavaScript on it (or with this jQuery plugin, _one_) is far more reasonable if the usability and accessibility concerns of non-JS users don't have a high priority. As you're not even touching the markup, you can just remove it cleanly if you decide to go with a full refactoring at a later time. The overhead of downloading the plugin and adding the necessary code is minimal if you're already using jQuery, especially compared to the work necessary for option #2. It's even faster than option #1.
To understand why this article's criticism is misplaced, you must first understand that the "NoSQL" term is a misnomer, and that the movement is really about using datastores other than classic relational type DBs such as MySQL and the like. Generally the motivation for doing this seems to be scalability. Whether an SQL-type language is used to query the datastore is largely orthogonal to the "NoSQL" concept (I told you it was a misnomer), but SQL was designed for RDBMSs, so when dealing with other database types it might not be the best approach. Obviously the motive of scalability really doesn't exist for this particular client side application, as each browser's database will only run on one machine, with one concurrent user. The "NoSQL" concept I have just described really has very little to do with the issue at hand. However, the issue that people are taking with the Web SQL Database API really is the choice of SQL as the method of interacting with the database. There are other approaches to database management that would gel much more cleanly with Javascript (perhaps something like Google App Engine's [query object interface](http://code.google.com/appengine/docs/python/datastore/queryclass.html)?). What's more, such an interface could be implemented on top of existing DB systems (as Mozilla's is on top of SQLite). The reality is that standardising on using an SQL interface from within Javascript would be an ugly choice ("Yo dawg we put another language in your language"). To conflate this issue with the "NoSQL movement" betrays a fundamental lack of understanding of what that movement is about. In fact, it appears the author's knowledge of the movement extends little beyond what they have assumed from the name. TL;DR: I agree with the article linked by BadCRC.
1) I am sorry, if adding a separate class to navigation options scares you, you need to stop trying to code websites. And also, if you are already generating your navigation with some sort of templating system, then you should be generating the nav links already, and adding a class to them should be no trouble beyond what you have already done. 2) This is just retarded, parsing a static navigation to add a class? Why not generate the nav from the get go, add the class then and not have to edit each one? Simply writing 2 lines of javascript is NOT all that you are doing. This type of setup has several draw-backs. One is that anyone navigating your site without javascript won't see it rendered properly, and for the ones that do, they are downloading an entire plugin JUST to highlight *ONE* link. It may be faster in one respect, but this is totally wrong in every other one. It feels like you are reaching for straws trying to make your argument 'correct'...but I am sorry, this is plain and simple laziness or ignorance that would cause someone to use a 'solution' like this. edit: and also: &gt; You're not adding "a class name" to the navigation. You're adding one class name to the active navigation item. Same difference, that is what I originally meant...and in no way does that require 'refactoring the entire navigation'
I just hate having to write an expression AND a message that describes what failed. It's so easy for the two to get out of synch, and it's more work than it ought to be. Ideally, you could just write: assert(x == 12) and if it failed you'd see "assert failed 'x == 12' was false". The called method 'assert' has no easy way to know what expression was evaluated before it was called, but it still might be possible in principle since there are ways to determine the stack trace on some platforms. btw, you seen this: http://chainingassertion.codeplex.com/
&gt; I am sorry, if adding a separate class to navigation options scares you, you need to stop trying to code websites. [That's not what I said.](http://en.wikipedia.org/wiki/Don't_repeat_yourself) The point isn't that you're adding classes. The point is you're duplicating code. A lot. If that doesn't disgust you, you need to stop writing code, period. &gt; This is just retarded, parsing a static navigation to add a class? That's not what I said. I said that if you _start with a static navigation_, in order to add the classes on the fly, you first have to _replace_ the static navigation with something that dynamically generates it. _Then_ it is somewhat trivial to add a class to the current page link (or output it differently). There's nothing "simple" about generating the nav if you have a static nav to work with. Generating it then means replacing the existing static nav by writing a dynamic nav from scratch. &gt; Simply writing 2 lines of javascript is NOT all that you are doing. I said the plugin can be implemented in about 2 lines of code. In any case, even writing the plugin from scratch is more straightforward than replacing the navigation (along with any secondary or sub-navigations that may exist). _Using_ the plugin is a _single_ line of code if you're already using jQuery. &gt; anyone navigating your site without javascript won't see it rendered properly I already covered that. You wouldn't do this on a section 508 compliant government website, for example. But in reality the vast majority of websites do not render "properly" (i.e. exactly the same) without JavaScript. We're not talking vital functionality here. We're talking about a usability aid that is widespread but not universal. The site still _works_ without it. &gt; they are downloading an entire plugin This is irrelevant. If you're merging the plugins, minifying and gzipping them, the added weight is just a few bytes, not even an extra HTTP request. Let me reiterate because you apparently missed it and are barking up the wrong strawman: __You wouldn't be using this script if you have a readily available server-side alternative.__ I merely explained that there are use cases for it, namely if you are working with a static navigation and want to add this usability aid _after the fact_. There are many possibly reasons the existing navigation might be static, even for an otherwise dynamic website. When the existing navigation is static, using this plugin (or even implementing it yourself) is the fastest and cheapest option if you can live with the trade-off (i.e. non-JS users not benefiting from it).
&gt; The point isn't that you're adding classes. The point is you're duplicating code. A lot. If that doesn't disgust you, you need to stop writing code, period. A lot of code? Seriously? I don't know what kind of menu's you work on, but the nav is not much, and doing a few if's in a template is no big deal... &gt; I said that if you start with a static navigation, in order to add the classes on the fly, you first have to replace the static navigation with something that dynamically generates it. This is true, and if you do it in javascript you are doing it wrong. END OF STORY. &gt; In any case, even writing the plugin from scratch is more straightforward than replacing the navigation (along with any secondary or sub-navigations that may exist). This is just false, I don't know how else to explain this but to say you are simply wrong. Writing a plugin for jquery is more straightforeward? Seriously? &gt; I already covered that. You wouldn't do this on a section 508 compliant government website, for example. But in reality the vast majority of websites do not render "properly" (i.e. exactly the same) without JavaScript. I am not arguing most pages don't render properly without JS, but that is no reason to just blatantly do things that break stuff (and yes, this is something that is getting broken). &gt; This is irrelevant. If you're merging the plugins, minifying and gzipping them, the added weight is just a few bytes, not even an extra HTTP request. Irrelevant that the user is downloading extra code in the form of a plugin (no matter how minified/zipped) and executing it to highlight one link? That is not irrelevant at all, I don't care how 'light-weight' you consider it, it is still significant and it still matters, especially when it can and *should* be done without it. &gt; You wouldn't be using this script if you have a readily available server-side alternative. Uh, I fail to see any scenario that this can't be solved on the server side. If no other way than editing the static pages... &gt; I merely explained that there are use cases for it The only valid use case for this is ignorance or stupidity.... Seriously, did you write this plugin or something? Why are you fighting for a solution that is so obviously not the right way to do it?
&gt; btw, you seen this: http://chainingassertion.codeplex.com/ Nope. Thanks for pointing that one out! Perhaps it might be possible to merge your simple solution with some extra functionality (type checks and such). I just threw together a [little example](http://jsfiddle.net/fyWub/) of this. I kinda like this idea (succinct!).
This is ridiculously old in HTML5 terms. On top of that the author incorrectly posits that Google uses SQL for gmail, docs, and calendar, and uses that as the basis for his argument that SQL is good for the web because it's what people are familiar with. He claims that it has worked *well*, despite the wealth of SQL injections that have plagued people for years. Terrible blog post.
This guys needs to find a code to comment balance.
&gt; Obviously the motive of scalability really doesn't exist for this particular client side application, I don't think that's quite right. We already have bookmark/cookie sync and it's quite conceivable that we'll want to sync/backup local files between machines so if you're sending a few hundred MB then you need to be able to have eventual consistency. You're completely right about the disconnect between sql and the storage underneath but all I'm saying is that scalability will probably still matter.