The more your know, the more you *know* you don't know
Yeah, this would have been so useful when I was learning JavaScript. I'll be following you for any updates!
how do you monetize this?
Update lodash to handle set?
So many code examples, yet no screenshots to show what they end up creating.
Were you doing a handstand, on quicksand, blindfolded, and with one arm tied behind your back too?
I've done many tests on this. Yes, transpiled typescript is much bigger when the target is es5. Mostly because how async/await gets transpiled into generators. See also here: [https://blog.mariusschulz.com/2016/12/09/typescript-2-1-async-await-for-es3-es5](https://blog.mariusschulz.com/2016/12/09/typescript-2-1-async-await-for-es3-es5)
Subtracting time would still work for countdown timers, although it wouldn't be guaranteed to fire at *exactly* the designated time, just the first available time after it. You would store the duration of the user's countdown, and the time it began. At a regular interval, you would compare the current time to the time it began, and if the difference is equal or larger than the duration of the countdown, you'd take some action, and then stop checking. &lt;input type="number" name="numberOfSeconds" /&gt; &lt;button&gt;Begin counting down&lt;/button&gt; &lt;script&gt; document.querySelector("button").addEventListener("click", () =&gt; { const startTime = new Date().getTime() / 1000; const counterDuration = parseInt(document.querySelector("input").value); console.log(counterDuration); console.log(typeof counterDuration); const interval = setInterval(() =&gt; { const now = new Date().getTime() / 1000; if (now - startTime &gt;= counterDuration) { alert("DING DING DING!"); clearInterval(interval); } }, 1000); }); &lt;/script&gt; 
Also worth noting that this `name` can change with minification. You can also compare the constructor function directly: `this.constructor === that.constructor`
Is it open source?
[https://imgur.com/a/3umZ6xy](https://imgur.com/a/3umZ6xy) I also have very limited experience with JS. Thanks in advance &lt;3
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/6aJKiUc.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ec1eg2q) 
:D
AFAIK TypeScript checks the types at compile-time and has no effect on runtime. As to the module boilerplate etc., it might, but then again it’s often up to configuration and/or negligible.
Author here! You're absolutely right, I missed that. Thanks for the review and suggestion!
I'm trying to think of a good inline trait selection syntax. Would be useful when multiple traits conflict. use traits _t = require('lodash-traits'); // returning an object's values (numbers), sorted and without duplicates return object // { a:7, b:12, c:4, d:7, e:1 } |[_t]&gt;.values() // [7, 12, 4, 7, 1] |[_t]&gt;.sortBy() // [1, 4, 7, 7, 12] |[_t]&gt;.uniq() // [1, 4, 7, 12] ```
Nice work! I have a question, though: While this does avoid possible collision, does this somehow solve the other problem associated with modifying prototypes - the need for a compiler to tear down inline cache of the object and rebuild it from the ground, and if so - could you explain how?
No, not currently, but it is something I will consider
yikesy wikesies... you kiss your mother with that mouth?
wait lol youre the guy who got mad at me for not wanting to see 14 year old nipples on reddit... why are you trolling through my comment history? literally log off my man
Almost certainly not if they’ve done the bare bones in security. That cookie is going to be compared to a hashed version on the server and if they don’t match then the request will be rejected. 
This sucks ahaha. It's literally a 30 minute wait for a 2 minute read max. 
Something that you should do anyway given that you're already adding a compilation step.
[removed]
TypeScript is not a “whole different language”. It is a superset of JavaScript. In other words, it is JavaScript with some additional features. JavaScript code is TypeScript code, but TypeScript code is not JavaScript code (until the compiler does its thing, of course). “TypeScript is a syntactic sugar for JavaScript” - [TypeScript specification](https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#1)
Hey! You can use the leftover minutes to crush some freecodecamp.
I am unfamiliar with this lol
It includes a _code syntax highlighter_ for a number of languages. Remark also includes [ways](https://github.com/gnab/remark/wiki/Contributing#building-remark-highlighter) to include only the languages you want, or even [none at all](https://github.com/gnab/remark/wiki/Contributing#excluding-highlighter-from-build).
1. I believe they embedded all dependencies for remakjs. (vbscript is from [https://github.com/highlightjs/highlight.js/blob/b6e236e1ecdfa73d4e219d23bc188a24cfec2b7e/src/languages/vbscript-html.js](https://github.com/highlightjs/highlight.js/blob/b6e236e1ecdfa73d4e219d23bc188a24cfec2b7e/src/languages/vbscript-html.js) ) 2. Add marked.js in your dependency and webpack it?
Flash was killed because it was a bloated, insecure, inaccessible mess of proprietary code with a proprietor who proved themselves incapable of disinterested in fixing its myriad shortcomings.
There's a video at the top.
Did anyone tried the game? I have like 10fps or less. But I can run many other online games with webgl.
what a weird title, this post has nothing to do with being a parent and everything to do with how to build a cool game. out of over 5000 words, a cmd+F on this page for "baby" finds 4 instances, one of which is in the title and one of them has nothing to do with the article. I'm not trying to be negative or anything, because as a parent I know how much of a struggle it is to find any time for hobbies and I sympathise. it's just that I was struck by how strange the title is. is it some kind of clickbait I'm not accustomed to yet?
Do you really need to call that function exactly when the counter hit 0? If not you in each interval you can check the remaining seconds as I mentions previous. If that value lesser or equal zero then call your function and remove the interval.
Ha! I'll give you one of mine, they were once babies.
You have my upvote, fellow dinosaur :)
`#` is not the prettiest. In some languages it is a comment. It also reminds me of the URL-fragment. In UML, `#` means protected.
Bloatware, don't use it ;D
TS compiles to Vanilla.js yes. That's why it's not vanilla.js in my mind. But yeah, we all see different in this question. To me, Vanilla.js runs in your browser without having to be compiled or use any external libs, it's just pure vanilla
&gt; TS compiles to Vanilla.js yes. That's why it's not vanilla.js in my mind. 
What will CoffeeScript do??
TypeScript is both a whole different programming language (TS code is not JS code) as well as a superset of JS, much like any other language that compiles to C, for instance. I know what you're saying though, I was just trying to present a different view. Imo, "Vanilla JS" is kind of a bad term because there is no one definition for it. Is it just the language? Is it the language and the runtime APIs that are available to you (browser, node, etc.)? What about different browser implementations and APIs specific to browser vendors, are those Vanilla? What about libraries? Is lodash vanilla js? If you're using a lodash method, is it any different than just writing the method yourself, and what makes one vanilla and the other not? If you do `const $ = document.querySelectorAll` does your code suddenly stop being vanilla? It's just a silly term. I personally interpret it as being the language plus the widely supported APIs of the runtime but I also don't really use the term.
He made the point at the beginning and at the end that the only reason he was able to do this was because he could take it in bite-sized chunks. The idea is that there are cool things you can accomplish even if you only have a few minutes here and there throughout the course of your day. He uses being a dad as an example, but it works just as well for someone who works a lot. 
Also, also worth nothing, the `constructor` property is inherited and may be incorrect depending on how the class was defined. function MyClass (prop) { this.prop = prop; } MyClass.prototype = { getProp() { return this.prop; } }; myInstance = new MyClass('Hello'); myInstance.getProp(); // 'Hello' myInstance.constructor.name; // 'Object' Here, the original, automatically generated `MyClass.prototype`, which had the correct `constructor` property (pointing to `MyClass`), was overwritten with a new prototype object who's constructor refers to the base `Object` object. So when you ask for the `constructor` of `myInstance`, you're getting `Object`, not the expected `MyClass`. The only connection an instance has with its constructor is through its prototype, and since prototypes can be changed, or abused, there's no guarantee you'll get an actual reference to the correct constructor for any given instance. But as long as you play nice and don't misuse the language too much, you should be ok.
Or it may not exist at all. function createClass (constructor) { return constructor; } MyClass = createClass(function () {}); myInstance = new MyClass; myInstance.constructor.name; // ''
It’s for online traffic school isn’t it? Those sites are horrible.
Looks cool. I added a css rule - html {scroll-behavior: smooth;}, and that made the site ux much better. I'd take a look at the webpage mobile version.
I'm not asking _you_ to write a new function. _Someone else_ is wanting to use your existing system and _extend_ upon its functionality. As a result, they need your getter and your logger, and _they_ will implement a setter. How do you transfer the getter and logger to them for them to add functionality to your system? You can't realistically just add every possible functionality for every application that will ever exist. &gt;Your question itself speaks to a very OOP mindset. Because it's a problem that is solved by OOP. &gt;You want to "extend" other people's code. In other words, you want to reuse their code and build on it. So why couldn't their code just be modules of functions you import and use? Is that not extending their work? You can! You can make a module that exports the getter and the logger. So at that point, you are doing `import { getter, logger } from 'original-work'`. So `original-work` is exporting an _object_ with getter and logger methods. You are binding related methods into an object.
tl;dr - D3.js is complicated, heavy, and modern JS frameworks make it easy enough to make your own visualizations. I'm not sure I agree with that last conclusion because I've had plenty of issues getting things to look right even for simple progress bars, especially when multiple browsers are involved, but I can't deny that I've looked into D3 and just shook my head at the complexity and lack of proper examples. (That was years ago, though, and they might have solved that last bit... I wouldn't know.)
"V8 v7.2" ... Wow. They didn't think that through, I guess.
I got pushed to use D3 by a senior dev and it was a mindfuck for me. I didn't enjoy using it. The documentation isn't great for how heavy it is 
Why are project managers influencing the tech decisions of the developers? If they really have valuable visualization implementation experience, then maybe they should be a technical lead and not a project manager. If not, stay in your lane and listen to the people who know code. 
Sure, lodash' `values` could have a waterfall of `if`s to handle every built in type. Now, let's suppose that you create your own data structure (e.g. a [k-d tree](https://en.wikipedia.org/wiki/K-d_tree)). How do you extend lodash' `values` to support this structure as well?
I recently took a look at creating SVG's from scratch, and that tied with some state management in your flavor of framework solves most of the issues that D3 originally was built to solve. For example -- if I wanted to create a bar graph, I would use a svg using &lt;rect&gt; and modify the width or height based on that value. https://codepen.io/MathiasaurusRex/pen/dwpadX?&amp;editable=true There's obviously things that are missing like labels and tables of contents, but for the most part it's there and 'responsive" 
I'm taking a class in D3 right now, and I can assure you that no, they have not solved that last bit
If you just need to plug a barchart into your app then yes that's way overkill. Also the declarative nature of the data bindings become a bit redundant if you use a React like framework anyways. But if you make a complex data visualization application there are so many helpers to use from D3, and it's very modular.
There are some things that only D3 can do. Otherwise, you should probably use something else.
This conversation is becoming tiring, so I am going to respond to a few points and then wish you good day: &gt; I'm not asking you to write a new function. Someone else is wanting to use your existing system and extend upon its functionality. Yes. The examples I wrote are how I would extend the logging functionality were it provided to me by someone else. &gt; Code sharing, re-usability, and extension is an integral part of successful ~enterprise-level~ software. We don't disagree on this. We disagree that the way to solve this is with inheritance. See [Composition over inheritance (Wikipedia)](https://en.wikipedia.org/wiki/Composition_over_inheritance). &gt; Because it's a problem that is solved by OOP. All modern languages solve this problem regardless of what paradigm(s) they follow. You can reuse code with FP. However most modern languages do _not_ solve it with inheritance. &gt; So original-work is exporting an object with getter and logger methods. You are binding related methods into an object. We agree that you must be able to import/export modules. The fact that they happen to take the form of JS objects in JavaScript does not mean it is object-oriented behavior. It also has nothing to do with inheritance. 
&gt; protocols That's what [FantasyLand](https://github.com/fantasyland/fantasy-land) is supposed to be all about. I think there was a spin-off of it that was purely funtional (as opposed to using methods), and thus pipeline-compatible, but now I forget what it was called.
Its a security guard course. It makes no sense, the part I am on right now is 3 paragraphs and under 30 sentences and there is a 2 hour timer .... I finished in 2 minutes, maybe 3?
At that many characters, you might as well use vanilla symbols object [t.values]() [t.sortBy]() [t.uniq]() 
On a slight tangent, charting library that can also do radar/spider graphs?
I’ll bite, d3 for SVG generation is a bit dated, yes, but the helper utilities for things like scales, etc. is not. You can pull in those helpers alone and generate the SVG through your component framework manually for the best of both worlds. d3 has figured out a lot of the hard math involved already, so why reinvent the wheel. Also, d3 opens up the possibility of generating the SVG server side of you want to, something canvas can’t do.
d3 is not created for performance. It's a data visualization tool. It means it has bunch of data related utilities bundled with the main library. It's why d3 is so heavy. Various scale and complex data structure are where it really shines. Recently I had to recreate a tournament bracket with Vue.js, which took days for teams to implement, I finished the same job only in a day because it's shipped with tree visualization function(d3.tree + d3.hierarchy). or just imagine, you are to implement anything other than simple bar charts, such as plots with voronoy effects, pie charts or interactive chart with gravity effects. d3 has all that functions so that you don't have to reinvent the wheel. On top of that, the recent version of d3 also supports partial import, which helps keeping the size as minimal as possible. and like I said, it's a data visualization tool. it also supports html and canvas rendering, if you found SVG format so dull. It just uses SVG because it's the safest choice for drawing vector shapes on a precise coordinate. it's just like every other issue with big frontend frameworks. Just use any tool most useful for the case. The author provides Rea t as alternative but React is a tool for reactive/real-time data. d3 for main chart with some complexity + interaction with React/Vue kinda worked for me.
Ditto man. Use the tool for what it’s for. 
They’re training you for how boring your job will be.
This. I have worked on a number of chart heavy apps, and creating a bar chart is pretty simple without d3. Creating a responsive line chart with changing axis that people can zoom in and out of and shows tags as you give through become a lot more challenging without D3. The latter is pretty standard with any app that shows some basic trend. There is a learning curve, but the site has a ton of great example with code that you can use to modify those examples. Basically once you get past the learning curve, most things extraordinarily complex visualizations are surprisingly easy.
I had an easy time using a Vue port of of ChartJS: [https://github.com/apertureless/vue-chartjs](https://github.com/apertureless/vue-chartjs) &amp;#x200B; Figured I'd toss it out there, as I weighed using Plotly or D3 etc for graphing and this ChartJS port was just much faster. 
\&gt; Remember – frameworks, libraries and tools come and go. Time is precious. I need to get this on a poster for my office.
Another thing is that the latest updates (v5) use different expressions.. So when you finally got a good example, you have to probably rebuild it to the newer version as most examples are build in D3 (v3). Used it for the past 6 weeks and it works okay but if you don’t need the heavy stuff from d3, things like chart.js would be more efficient time wise. Something I want to point out at D3, in the beginning it’s really hard but when you work with it, you will get to know some great futures as d3.nest() for example that let’s you restructure your data with ease.
Honest question: seeing as we already have the ```static``` keyword, why couldn't ```private``` just be used? The syntax is just so awful
I’ve worked on d3 recently and it’s the biggest shambles of documentation and API information I’ve ever seen. If you do find an example, it’s 3 versions out of date and items have been deprecated
... but view frameworks definitely can.
I just hate everything about the proposal, it has somehow made it to stage 3 despite the seemingly large amount of negative feedback it has received. I'm starting to lose faith in TC39, some of the members seem incredibly dismissive and stubborn.
because a hell of a lot of places don't understand how to properly structure an org for efficiency and productivity, like... every place I've ever been over the last 30 years, hell many directly allow product managers to drive development and operations decisions, did consulting at a place last year where product was allowed to decide what operating system the servers ran because they wanted to use it as a selling point for their SaaS
It is insane how this proposal got to stage 3 so quickly with the seemingly large amount of negative feedback it has received in regards to the private fields syntax. I'm honestly starting to lose faith in TC39 because of this proposal, some of their members are incredibly dismissive and stubborn. 
Sarah Drasner, Lin Clark, Eric Normand, Eric Elliott, Kyle Simpson, Andre Staltz, John Dalton, Sara Vieira, Mark Erikson, Nicole Forsgren, Kent Dodds, and of course Stephanie Hurlburt. Sorry no links, on mobile and on the run
https://twitter.com/wesbos and https://twitter.com/stolinski. I like their tweets because it’s a mix of web dev and non web dev. They’re both very casual and welcoming. Not intense. Also, Wes tweets a lot of code snippets which can be helpful or at least insightful to how you write code. 
man, you have been so helpful. thanks for all of this. Will switch to markdown next time. I prefer the async/await pattern more in my code because it is easier to read, i like the simplicity of the promise catch though. I am also trying not to mix and match in the same functions or processes. That has bitten me in my learning so far.
gotta read the code to know for sure
d3.js is not intended for creating a trivial chart like that example. 
I'm all about economy of characters, so I use &gt; Ω = console.log.bind(console) function log() &gt; Ω("hi world") hi world
at some point it's gonna be `v8 v8.8`
Do you have a linter enabled?
The Knights who say ni
Don't you guys have phones? 
Because it's bad for work.
To expand on your example, here's why someone might want one or the other: // Without async/await: somePromiseFunction() .then(res =&gt; { // Let's call this 'Event A' }) .catch(err =&gt; { // Let's call this 'Event B' } // Let's call this 'Event C' // Using promise chaining, there is no guarantee that Events A and/or B will happen before Event C. In fact, Event C is likely to happen first. // With async/await: try { const res = await somePromiseFunction() // Event A } catch (err) { // Event B } // Event C // Events A and/or B are guaranteed to happen before Event C.
Adding a symbol property to an existing prototype is going to invalidate the inline cache. I don't see this as a problem though: it shouldn't impact performance that much if it's done correctly (i.e. if traits are added to existing prototypes while loading all the modules).
View frameworks definitely can what?
I just wonder how many code highlighting tools will break treating # as comment. I've already seen that with template literals' backticks.
&gt; d3 is not created for performance. It's a data visualization tool. This doesn't make sense. Nothing is created for "performance". All apps/libraries have performance characteristics, which isn't their functionality. Any functionality can be made more performant, which is a key part of the article. We get to make data visualization more performant by not using D3. The author did not say D3 is always a bad choice.
Thank you I'll add that. Yes mobile layout is a wreck right now I'm aware haha. Just wasn't a priority but I'll be getting to it. 
I prototyped a web application with a data dashboard for work. I had to use React and i wanted to combine that with d3 to build it rapidly. D3’s Achilles heel was the fact that it’s render method when combined with React just created memory leaks and React errors. If the D3 team made it easier to allow another framework to take control of the rendering process it would still be the best framework to use. As it stands it’s a fistfight to get the simplest features playing nice with react. That said having to reimplement things like drag and drop/log scaling and grid scaling from scratch sucks. D3 is great at this. It’s kind of a shame that React has become so ubiquitous in web dev. The concept of components is good but in practice it ends up requiring that you do a ton of tooling and porting of code to end up with a stable working result. Hopefully these monolithic front end MVC frameworks will fall out of fashion soon. I’d like to be able to use other people’s solves in my code instead of having to port their code into a version that is react friendly.
Because tech decisions are a cost and any PM worth their salt is involved in those conversations. A good PM understands the trade-offs and is the person at the table who can make the call between fast, clean, and cheap. Letting engineers make that decision means the business has no control over cost.
This question is asked every single time on all JS private field posts. If you already have a private property called "a" inside object "x" what would you like to happen when you execute x.a = "test" outside the object's class definition. Obviously fail on compile since there is no public property called "a"? Nope, this is JS, if the property doesn't exist it will try to create it. Throw an error saying you don't have permission to access/create this property since a private one already exists. Nope, you just leaked your class private member information. Try to hide the private property and create a new one? Also doesn't work since this object would have to have 2 properties with the same name in run time. And the actual solution is to specify that private property names need to start with a specific character that is only legal for that usage so you can avoid public and private property name collisions.
https://github.com/hshoff/vx
There have been many long posts about this subject, but basically what it boils down to is, JavaScript is not a class based language and trying to shoe-horn private variables into it is going to be awful no matter what you do. JavaScript uses prototype inheritance. You can create an object, and then create another object that inherits directly from the first object: // User here is kinda like a class in other languages const User = { sayHello() { console.log(`Hello ${this.name}); } }; // joe's prototype is User. If User was a class, we'd say joe was an instance // of User. Here we just say joe inherits from User. const joe = Object.create(User); joe.name = 'Joe'; joe.sayHello(); // Prints "Hello Joe" This is quite elegant, but early JavaScript didn't have `Object.create()`, and if you wanted to set the prototype of an object you had to do it through a `constructor function`, which was kind of a weird concept and made the elegance of prototype inheritance difficult to understand. Other languages are class based, but JavaScript really isn't; classes are kind of an abomination that was tacked on. As a result, when we try to add private members to JavaScript, we end up with all kinds of weird problems that you wouldn't have in any other language. Let's look at a quick example: class User { private name; constructor(name) { this.name = name; } sayHello() { console.log(`Hello ${this.name}); } } Ok, this sounds reasonable so far, but: const user = new User("joe"); user.name; // What happens here? What happens when we try to access `user.name` here? In Java, this would be a compile time error, since `name` is private. We can't do that in JS, because there's no compiling involved. So we could make this a runtime error, because we're trying to access a private variable? What if User inherits from another object that has a public `name` property? Does `user.name` try to fetch the parent public property, or does it try to access the child's private property? Does the child property "occulde" the parent property? When functions on the parent do `this.name` do they access the same variable as the `private name` on the child? If I make another object inherit from user, can I do: const sneakyChild = Object.create(user); sneakyChild.exfiltrateName = function() { return this.name; } to get access to the private `name` in the user? Or can I even do: user.exfiltrateName = function() { return this.name; } ? None of these would be problems in any other language. Most of them probably shouldn't be problems in JavaScript. But, in their infinite wisdom, TC39 decided to make this a thousand times more complicated than it needed to be. With the `#` syntax, when you declare a variable as private, it's in a super secret special namespace that neither parents nor children can access. This is weird for a few reasons. fIrst of call, instead of a class being essentially syntactic sugar on top of prototype inehritance, now classes have some special things all their own; objects have properties (that you can access from anywhere), and they have special private properties which are in their own special namespace (which you can only access from functions that were declared in the class - you can't even add new functions to an object to get access to private members.) In JavaScript, if you try to do: user.exfiltrateName = function() { return #name; } This will fail, because `#name` is only available inside the open and close braces of the `class User` declaration. Already, this is weird, because an object used to be a bag of properties, with a prototype, and you and I could understand such a thing. Now, an object is a bag of properties, a prototype, and one or more other secret bags of properties that come from the class and parent classes. It's quite a bit more complicated, as a mental model, and gives you a lot of exciting new places to introduce bugs. Once you accept the need for secret bags of private properties (which I haven't, but lets assume that I have for the sake of argument), the hashtag thing starts to make more sense, because when you write `this.name`, you're trying to access the name property from the object's main bag of properties, but when you write `#name`, you're trying to access the `name` property from the super-secret other bag of properties that's only available to the class. You need some way to distinguish between "this" (the public bag of properties and "this" (the private bag of properties). (That's right, there are now effectively two different `this`s. We have lots of exciting opportunities for new kinds of bugs we never even dreamed of before.)
ChartJS, Google Charts, High Charts, etc. are all fine if you want to make basic pie charts, bar charts, etc. No one needs D3 for that, and if you are using D3 for such basic charts (instead of one of the many, many basic charting libraries out there) you're an idiot. You use D3 to create *advanced* visualizations, not pie charts.
What will TypeScript do?
Hi /u/himanu27091995, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/RoomanHyd, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/ignore_my_bullshit, please refrain from personal attacks. Thanks.
Hi /u/Indu_Pillai, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/rurounisena, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Terrible idea. Javascript is not Java ... and that's a good thing!
Hi /u/Historical_Plantain, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Roughly3Owls, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/distante, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I like the idea, but I really dislike the import syntax. I think it's perfectly suitable to stick with the current JS import syntax, and either do as flow does: // all of these are valid import trait * from 'foo-bar'; import trait { map } from 'foo-bar'; import { trait map, notATrait } from 'foo-bar'; That being said; I don't really see a need for these "traits" to have their own namespace. Why not just? import { map } from 'foo-bar'; myThing.*map() === myThing[map]() I immagine that being way less supricing to most people, and also it would be way less work implementation wise. Effectively, this would just make `.*foo` into a shorthand for `[foo]`, and could probably be usefull for when implementing the traits as well: import { map } from 'foo-bar'; class Identity { constructor(value) { this.#value = value; } *map(f) { return new Identity(f(this.#value)); } } As you can see, this mirrors the private class members proposal quite well.
They might as well give up now.
Public class fields yesss.
Linking for you: - [Sarah Drasner (@sarah_edo)](https://twitter.com/sarah_edo) - [Lin Clark (@linclark)](https://twitter.com/linclark) - [Eric Normand (@ericnormand)](https://twitter.com/ericnormand) - [Eric Elliott (@_ericelliott)](https://twitter.com/_ericelliott) - [Kyle Simpson (@getify)](https://twitter.com/getify) - [Andre Staltz (@andrestaltz)](https://twitter.com/andrestaltz) - [John-David Dalton (@jdalton)](https://twitter.com/jdalton) - [Sara Vieira (@NikkitaFTW)](https://twitter.com/NikkitaFTW) - [Mark Erikson (@acemarke)](https://twitter.com/acemarke) (hey, that's me! :) ) - [Nicole Forsgren (@nicolefv)](https://twitter.com/nicolefv) - [Kent C Dodds (@kentcdodds)](https://twitter.com/kentcdodds) - [Stephanie Hurlburt (@sehurlburt)](https://twitter.com/sehurlburt)
Will do.
Generate SVG serverside
Just "the basics" aren't going to get you anywhere interesting. You won't build anything usable or maintainable as someone just learning. You end up pasting in huge screenfuls of vanilla code that *doesn't make sense to you anyway*. Use the easiest/most productive framework you can handle and once you understand what it's doing, then go back and see if you really needed it.
Sweet dude. 
That's my point, I never said only the basics. Basics until you're bored then 'interesting' stuff. Could be a framework or whatever.. just interesting. But you can't just jump straight into a framework without knowing anything. If you're pasting code how you described, frankly you're not prepared to teach yourself. You're not gonna build a deck without knowing how to cut a board or hammer a nail my man. I've pasted code and not known how it works, learned more then went back and broke down what I didn't understand.
This guy knows what he’s talking about!
&gt;“src/\*\*/\*.js”, “!\*\*/\*.module.js” It worked! But I do not understand Is the second glob working over the results of the first glob? I thought each one was a separate rule.
Not that it'll help you now, but I just wanted to mention an approach to using D3 and React that worked well for me in the past and wasn't too much of a pain to use. I figure posting it here might help others now or in the future. The first thing to realize is that you usually don't want to be re-drawing your D3 visualization every time a React component mounts. What I ended up doing was using \`document.createElement\` to make a new DOM element to render the D3 visualization into. I then saved this element in a state container (Redux in this case, but in a pinch you could just stick in it a global variable). Whenever the state that the D3 element cared about change, I'd re-render the SVG by referring to the element I had created and stored in Redux. In the \`render()\` method of the component where I wanted to show to visualization, I added a \`ref\` callback on a div, and the callback basically looked like \`(el) =&gt; el.appendChild(awesomeVisualization)\`. So the visualization was just created once and hung around in memory so it could easily be added to the component whenever it was mounted. It saved all of the extra work in having to re-create the whole visualization whenever the component mounted. If anyone finds this useful, I could put together a blog post with a full working code example. 
This just reinforces the notion that introducing the class sugar into js was a mistake I mean, I get it. People know classes. But it literally isn't a class system. This is why you get junior devs creating javascript singleton classes and writing warped java-esque code.
&gt; That being said; I don't really see a need for these "traits" to have their own namespace. Why not just? &gt; &gt; import { map } from 'foo-bar'; &gt; myThing.*map() === myThing[map]() Originally I was doing that, but cluttering the lexical scope with traits was giving me a headache. An example of something that would give problems: import { map } from 'foo-bar'; const wrapper = { mappable: someMappableObject; }; // adding a `map` method to wrap `this.mappable.*map` wrapper.map = function map() { // Oops! // `map` is the function we're in // while I expected the symbol :( return this.mappable.*map(); }; That's why I introduced the `use traits` statement and a "trait scope" for the `.*` operator. I am [planning to add a way to explicitly pick the traits you want to use](https://straits.github.io/syntax/#use-specific-traits), but in many cases I find using all traits (`use traits *`) very handy. In [this comment](https://www.reddit.com/r/javascript/comments/a72s5e/javascript_traits_the_clean_way_to_modify_global/ec0vpmx/) I elaborated a bit further on this.
&gt; Try to hide the private property and create a new one? Also doesn't work since this object would have to have 2 properties with the same name in run time. FWIW this is what ActionScript 3 did. You could have both a public and private property with the same name. Referencing the property from outside the class would access the public version and inside the class would access the private version (by default, though you could get to the public version as well if you really cared).
OP, I saved this to view and it's deleted. I want to learn!
Good bot
Thank you, semidefiant, for voting on acemarke. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
Thank you for being kind to our fellow bots!
&gt;I’ve worked on d3 recently and it’s the biggest shambles of documentation and API information I’ve ever seen. 100%.
But consider that a framework is just a layer of abstraction. It saves the programmer from doing deeper level implementations and in this respect so is the programming language itself and all the libraries used from math to string manipulation to hashing. Nobody's arguing juniors should be writing websites in machine language or reimplementing SHA1, yet at some point in a programmer's development, they really should take some time to understand what machine code is, what a compiler is, what SHA1 is, how memory gets allocated and such as this will make them better with the higher level tools. It's a gradient of abstraction, and it's useful to work at all the levels, why ignore or skip any of them?
a fair point!
We are using VS Code. First time we used it there was no automatic follow, we had to do it manually. I don't think we opened another file and disabled it, but that is very possible. I am actually paying for mentorship and we are using Live Share for teaching purposes. Unfortunately last night we wasted 15 mins trying to get it to work. I sent an email with the link (which worked before) and he clicked, nothing happened. We tried sending a few more times, in the end he said he had to add the share manually (whatever that means), then finally I got an alert that he had joined the session. Once it connects it has worked great, but there are obviously problems. Really looking forward to seeing this released officially. The features are all there as far as I am concerned, just making it totally reliable should be the main focus! Cheers. PS Sorry no time to test more now, happy Christmas! 
I wanted to build a bar chart using d3.js, but ended up doing this quickly using css and Javascript.
Seems like D3 is still relevant as a big versatile visualize-all-the-data framework. But if you just want a standard chart or graph, yeah there are _way_ easier ways.
I like it. There's no way currently for libraries that don't want to expose implementation details (pretty much every library of significant scope) in JavaScript unless they use a closure pattern instead of a class (which has drawbacks) or the WeakMap polyfill technique. So many libraries currently use \`\_\` or \`\_\_\` or \`$\` prefixes on the object to indicate private members which looks super messy and can be tampered with by the user, leading to problems (even if they clearly represent privacy/implementation detail).
Agreed . D3 is not that necessary, and large. I use vue but just like preact , it gives you so much to make visuals data driven . Recently I opted to just use three js because I needed the performance. One area that I think it has really helped me recently is geo coding and globe related maps. I was able to quickly embed geo coded maps into my app. Would have been a lot harder to do without it as I’m don’t know too much about the details behind that stuff
Or d3 just makes it easier 
I have been a big D3 proponent for years now, having uses it through numerous jobs. At my current role, we work with a lot of live applications that require almost game-like rendering due to constantly changing data. For a project I'm currently on, I've had to shift away from SVG and focus more on canvas because of that, which is outside of the purview of D3... Or at least that was my initial thought. The reality is that D3 is very modularly built and handles many aspects of data visualizations and math in general. While I don't import the full D3 library for this application, I still find myself using numerous modules of D3 to handle various aspects. In fact, I find D3 less overwhelming now that I'm getting into how the various parts of it interacts. I think moving to canvas actually made D3 really click for me and my understanding of it, despite having worked with it for years. I'm still a big proponent of D3, but even if I work on SVG visualizations again in the future, I might stick with importing modules of D3 instead of the overall library. There's just _so much_ it has to offer and 90% of it isn't used in every single project.
I hear you but shouldn’t be hard, you just have to be aware and understand that it’s not going to be stored on vdom . Make sure you clear out everything properly and it’s still not in memory. Memory management is one of the least appreciated aspect of JS development. I just dropped it into my vue app, so easy but just heavy file size for sure. 
With the power of [loops](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)!
This sounds a lot like homework, why not tell us what you have tried and what you are struggling with.
100% this. D3's modular approach has been a life-saver when working on any advanced visualizations, be it SVG or otherwise.
[D3.](http://bl.ocks.org/nbremer/6506614) Unless you meant a pre-packaged solution where you just plug in data. 
I was thinking of using a while loop and continuously writeout L until it reaches N. That will give me the rows but then i don't know how to make the colums after that? Do i create a string and += L until it reaches N? Also how do I know it's doing it on the last one
There's surely a limit to how deep you need to know. You don't need to understand each hashing algorithm but you definitely need to understand what is hashing. My main grip when I'm teaching juniors something is that they don't have a grasp to what is happening when they do something. They've been taught that they should do that when there is this to do, not why nor how it happens. A simple example is that if you understand the notion of pointers, you understand a lot of the strangeness you encounter with variables. Why can I modify some stuff in a const ? The answer is pointers. There is a reason that one of the first thing you learn when doing computer sciences classes is how a cpu and memory work. This base principle gives you a lot of information on how things work when coding.
I have the general idea of just doing a while loop that writes out L until it reaches N and then the while loop will end but then i'm not sure how to add colums at that point? I'm thinking of doing += L but I don't know how to target the last L that's what's messing me up 
Unless I'm completely misunderstanding the situation, you can't just dump code into the Chrome console and expect the router to pick it up and use it. My guess is that maybe you'd need to edit the JS file wherever it's actually stored, possibly on the router itself? *That being said, however*... There's probably a good reason for requiring ASCII. If a system expects ASCII and tries to decode a Unicode character, mistakes will happen. 
so it sounds like you have a handle on writing L L L L That's good, so if you wanted to write ```LLLLL ```` you could do the same with a loop but without writing the \n which creates a newline. 
That will definitely get you the tall part. For the other part, you basically do the same thing, but you do it all on the same line. You can create a string just like you said. That works! Do does using `process.stdout.write` without adding the `\n` (newline) character. That will prevent you from going to the next row when you write out the character. The tricky part is the L at the corner. That would be "shared" by both loops. But what that really means is you probably want to take it out of one of the loops - I would suggest the first one.
That's weird because I disagree entirely. D3 is the base of countless libraries that generate your data viz components. So I would argue it's basically dependent on the library you're using on top of D3. But that's just my experience. I haven't had the need to go straight to D3 alone.
&gt;I can't deny that I've looked into D3 and just shook my head at the complexity and lack of proper examples I can understand the first part, but the second one has never been the case IMO. I very much disagree with it, and feel like the number of examples has always outpaced any other option out there. `bl.ocks.org` was basically designed specifically for D3 examples and there's a billion of them on there. Very recently, `observablehq.com` has become the primary examples site for D3 and allows for live editing of examples too. Anyway, when I'm looking for examples in D3, I do a google search with `site:bl.ocks.org` and whatever search term and almost always find multiple examples. If I want the best example, I add `"mbostock"` to the search query, since that's the primary maintainer of D3 and he has posted literally hundreds of D3 examples on the site over the years. Anyway, the reason a lot of people feel like examples are weak or confusing with D3 is because they view it as a charting library and not as a visualization / math helper library. There's often multiple ways to achieve whatever visualization goal you have, so it's not like you search for "line graph" and get a perfect example of how to make a line graph. Your needs might not match the example provided, but D3 will likely still provide you the tools you need to actually achieve your end-goal. 
Hi. Using the Chrome developer console to override SSID name restrictions is a commonly used trick. I did this without a hitch on my Asus router, and many others have also done it. See this [blog post](https://alexplescan.com/posts/2016/08/16/emojify-your-wifi-netgear-r6300/), or [this one](https://medium.com/@bcjordan/emojify-your-wi-fi-c01f4ac0b0ab) for example. Using non-ASCII characters in SSID names very rarely causes issues. I've connected dozens of devices to my ASUS without so much as a hiccup, and in the unlikely cases it does, one can use an ASCII-based SSID for one of their router's connections (for instance the 2.4GHz SSID or a guest SSID).
1 - Create a (N - 1)x(N - 1) grid (an array of arrays of characters). 2 - Fill all the cells with a space in each. 3 - Add an `L` to the beginning of each array. 4 - Push an array of N `L`s to the end. 5 - Stringify the grid. [spoiler](https://gist.github.com/lhorie/e7be74a27af28f5cbd8a9aba70496c7b)
... and if you're still paying attention, you could pull this off in a one-liner using a certain [method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) but I'm assuming, given the nature of the assignment, it's probably not expecting you to be using that.
Hi. Using the Chrome developer console to override SSID name restrictions is actually a very commonly-used trick. You'll find blogs describing the technique [here](https://alexplescan.com/posts/2016/08/16/emojify-your-wifi-netgear-r6300/) and [here](https://medium.com/@bcjordan/emojify-your-wi-fi-c01f4ac0b0ab), and I've previously done it myself on 2 Asus routers. Using non-ASCII characters in an SSID name will rarely cause an issue. However, should you encounter a problem, you can have an ASCII-based SSID for one of the router's networks (e.g., the 2.4GHz SSID or a guest SSID). 
Looks like you got it all figured out then! Kudos. 
Not yet on this particluer Netgear router!
It says explicitly in the TypeScript docs that it is sugar for JavaScript. Also, writing your own JavaScript would always lead to leaner code than relying on the TypeScript compiler. Not knocking TypeScript btw, I think it’s great.
I’m not using any library on top of d3, it’s a library in itself and we were doing intense stuff with it which a lot of libraries on top didn’t support. We are building web components that are deployed to client sites, I don’t like using dependencies as it is so adding another dependency was a big no. We like to keep file includes to a minimum and there would be a lot of bloat in another library to use a library. They’ve completely split out version 5 now into modules so trying to track down where stuff is in the API is very difficult, especially when you’re looking at examples from version 2 because they haven’t been updated It’s like they’ve just given up on it but they’re still developing it. I nearly abandoned it about 10 times
I've worked with javascript and programming long enough that every time I think "Oh, I'll just hamhock this thing myself", I get the 70% way into it quickly, then realize the last 30% which any finished product needs is fucking hard to properly manage. People who don't want to accept that, read these types of blog posts about MVP type realities. 
You're assuming a few things here. First off, you're assuming OOP in Javascript is a good idea: it's not. Just look at React: when the library first started out it was entirely class-based: to create a new component you had to subclass their component class. Flash forward a few years: Facebook introduces function-based classes, and in practically no time at all they are embraced by the React community as the best way to make any component that doesn't need state, lifecycle methods, or other class-only stuff. Flash forward to today: React has (almost) released hooks, which let you add state, lifecycle methods, and the like to purely-functional components. Did Facebook invest a massive amount of R&amp;D to develop hooks just to give developers options? No, they did it because OOP in Javascript is problematic, and they recognized that a purely functional approach worked better. THEN, even if you still &lt;3 classes because that's how you learned to program with Java in Computer Science 1, you don't need true private properties. As you noted, underscored properties communicate the exact same thing, and while you might find them "messy" because you're not used to them, they're actually superior in my opinion. Underscore privates can be tested, and even more importantly they can be debugged. Want to see what `foo._bar` is, and why it's causing a bug? Just look in the dev tools, *because you can*. But if you really hate being able to debug your own code, and you feel the need to use class systems that were added to JS as an afterthought and rely on prototypal inheritance instead of the classical inheritance you're no doubt familiar with ... you can *still* make truly private variables using closures. The language makes it a little harder, yes, but I'd argue that's a good thing since true privates in JS are a bad idea (eg. you can't debug them). But still, you have the option today. So again, I repeat: trying to make Javascript more Java-like, without appreciating the important differences between the two, is a bad idea.
From my experience, D3’s complexity comes with extreme flexibility. The amount of things that can be accomplished using D3 is unreal and you can see this by visiting examples that they have. However, for simple graphs I would recommend using other libraries (some of which are built using D3 ironically). There are a lot of charting libraries that are way easier to use and they work great if you’re not looking for anything crazy.
Can you give an example of an advanced visualization? 
Anything that isn't a bar chart, pie chart, scatter chart, or any other commonly recognizable chart ;) Or even one of those, if it has lots of advanced functionality that Highcharts doesn't support. For instance, I once worked on a medical site that had a sort of timeline "chart". It looked extremely sophisticated and professional, but it was also heavily tailored to the app and wasn't something you can easily reproduce with an off-the-shelf timeline library.
"player" ?
This will overwrite the check function: function isValidChar_space(a){return true;} Just copy and paste into the devtools console before submitting the change
“Second, even if you still &lt;3 classes because that's how you learned to program with Java in Computer Science 1” love the intellectual debate...
Pretty sure they will be skipping it to version 9
Hey there! Unfortunately I do not have an answer to your question, just a word of caution. If you have smart home devices, there is a good chance that some will not be able to recognize emoji characters. A lot of them (like the Nest thermostat in my experience) will just render them as [], but even some devices won't display or connect at all. Just something to think about! However, it did have an interesting side effect for me - discovering my sisters macbook air hadn't been updated since she bought it in 2014. I was using a 2015 emoji for my SSID and she couldn't connect to it. Good luck!
Plotly.js and Highcharts both have good radar plots.
I like PHP’s trait syntax. You’ve got a reserved `trait` keyword and a very declarative way to put these traits on a class by using them within the class itself. A JavaScript version would look something like ``` export default trait MyTrait { hasTrait() { return true; } } // in the importing class import MyTrait from ‘traits/MyTrait’ class UsesMyTrait { import MyTrait; foo() { return ‘bar’; } } ``` I know this is probably not possible but I think that unless a very nice declarative syntax like this is possible, it shouldn’t be included in the language. The `*` operator is already used for generator functions so I don’t think it’s good to use it for something else in the language. 
Most vanilla library APIs are OOP though, the DOM is object oriented as well so it makes sense. When you need to hold state, using functions is way more difficult (see Hooks implementation?) The main problem with exposing implementation details is that it creates a semver problem where the library author is constantly changing implementation details to add features or fix bugs but doesn't want to increment a major version unnecessarily because someone was touching a member that should be private. &gt; Want to see what foo._bar is, and why it's causing a bug? Just look in the dev tools, because you can. You can still log out/trace the stack of the member inside the closure though. I don't know why you need to do it from the public side of things. In terms of testing, I thought most people agree you should test the public API instead of implementation details because of constant refactoring happening behind the scenes which breaks tests. As long as the public behavior remains unchanging and is completely covered, it seems good. Anyway, the TC39 knows way more than me so I trust their knowledge with this stuff.
Is this ES9? 
&gt; A good PM understands the trade-offs hahaha found the PM
Heh, that came out more condescending than I meant. What I was trying to say is that people have learned certain patterns (eg. OOP) since their first programming class, presumably in a language like Java that emphasized OOP. I do mean to be a bit condescending toward people that can only grok the patterns they first learned, and refuse to learn newer/better patterns for the language they're working in (ie. Javascript). But even so, I was trying to say that even people who disagree with me on that, and want to stick to familiar patterns even in languages they're less than ideal for, can *still* get what they want.
&gt;Most vanilla library APIs are OOP though, the DOM is object oriented I'm not sure you understand what OOP (Object *Oriented* Programming) even means. OOP does not have a monopoly on objects: even in functional programming you *absolutely* work with objects. The difference between the two is how those objects are created. Functional programmers use *factories*, while OOP programmers use *classes* (typically hierarchies of them) ... but there's nothing about libraries being objects, or the DOM being an object, that in any way necessitates using a class, let alone using a hierarchy of them. &gt;When you need to hold state, using functions is way more difficult (see Hooks implementation?) const [foo, setFoo] = useState(0); man, that was *way* more difficult ;) &gt;The main problem with exposing implementation details is that it creates a semver problem where the library author is constantly changing implementation details to add features or fix bugs but doesn't want to increment a major version unnecessarily because someone was touching a member that should be private. I've been doing JS professionally for over a decade. I've written a book on a JS framework, and currently teach a web development class. I have never once heard anyone raise this as a problem, let a lone a problem that needs the solution of "true" privates. &gt;You can still log out/trace the stack of the member inside the closure though. I don't know why you need to do it from the public side of things. Right, if you know exactly what you want you can add a console.log line to the appropriate place. But what about when you have a bug and you *don't* know the cause? What do you do? You start adding breakpoints, watch statements, etc. in your browsers developer tools. And those tools simply *can't* show you the values of closure-encapsulated variables. &gt;In terms of testing, I thought most people agree you should test the public API instead of implementation details because of constant refactoring happening behind the scenes which breaks tests. As long as the public behavior remains unchanging and is completely covered, it seems good. I 100% agree with this. Still, I've definitely had times when I wanted (for one reason or another) to test a "private" variable, and with underscore privates I have that option available to me. But still, 99% of the time tests shouldn't concern themselves with privates, which is why I said debugging was the bigger issue. &gt;Anyway, the TC39 knows way more than me so I trust their knowledge with this stuff. Appeal to authority: strong way to end ;) Seriously though, I've chaired a standards body (an industry-specific one, not a W3C one): I can assure you that the people on such bodies are just ordinary programmers like you or I. They might have a bit more depth of knowledge in some areas than most, but there's nothing magical or inherent about being in a standards group that makes you better equipped to decide language features.
I really liked and still go back to [https://javascript30.com/](https://javascript30.com/) I feel like I got a good solid understanding of front-end programming with JS and it helped me to understand a lot of the new syntax and helpful tools ES6 has to offer.
THIS! thanks a lot for the write-up 
Few thoughts on the first line: [https://jsbench.me/ljjpu35nvs/](https://jsbench.me/ljjpu35nvs/1)
I meant how Hooks are actually implemented, not the outward facing API like calling `useState`. Using native class syntax would be easier than implementing Hooks yourself to avoid them... idk your snarky replies and italicized text are kind of annoying me at this point. 
Looks like an alternative to hotjar, though they do say: *While it's not yet ready for production use...*
Thanks for the suggestion! Unfortunately, no go. Chrome devtools console returned *undefined*. &gt;function isValidChar_space(a){return true;} 🡐undefined and then router again threw *Character is not allowed in SSID* error. Other ideas?
Understood, this wasn’t my rationale for defending d3. You could still gain the benefits of the d3 utilities server side.
This seems like a good opportunity for a recursive function where you would use printLetter(String "letters", int rowNumber). The String would be picked off one letter at a time until it was empty for the recursive termination case. The rowId would be iterated using a counting loop to get from the top to the bottom. Then you would print the letters based on a multidimensional array for the alphabet characters. 
Thanks! Funny you should mention that. In my own experience, the only device I encountered that wouldn't connect with a non-ASCII SSID was my thermostat too. I have that thermostat connected to a 2.4GHz ASCII-based SSID on my old Asus router (soon to be retired) and am using the 5GHz SSID for a UTF-8-based SSID name. There's nothing in the IEEE 802.11specs that disallow non-ASCII SSID names so long as they run under 32 octets. It's more the situation you describe: the occasional device that doesn't play nice with the standard.
&gt;Used it for the past 6 weeks and it works okay but if you don’t need the heavy stuff from d3, things like chart.js would be more efficient time wise. In my experience, project requirements start out basic and those sorts of libraries work fine... Then as a project progresses, business needs grow, and more times than not you're working uphill against a library that's too narrowly scoped and you're hacking at it to make it do what you need. ...or maybe HighCharts just did me dirty recently on a project I inherited. &gt;Something I want to point out at D3, in the beginning it’s really hard but when you work with it, you will get to know some great futures as d3.nest() for example that let’s you restructure your data with ease. 100% agree with this. There's so many hidden gems in D3's modules. The data / collections module alone is great for traversing and working with large sets of data for a visualization. I hadn't even heard of `d3.nest` until this comment and after a quick look at the API I can already see how I could have used that in one project I have. People who think of D3 as just for charts are thinking way too narrowly. 
Exactly, the main reason they aren't working is likely lack of updates. 
&gt; If you do find an example, it’s 3 versions out of date and items have been deprecated Something, something, Angular.
Hi /u/Lothar1995, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/WheretheBrownies, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
See also: https://www.reddit.com/r/javascript/comments/5zcb8m/can_you_help_me_allow_my_router_to_accept_as_the/
Man, they'll let anyone write an article now... ;) Great job Aaron! Really nice write-up and glad to see the progression you are making on WasmBoy!
Haha, yeah the hidden gems are very useful. I actually prefer using d3.nest() right now to combine datasets as it is great that you can fetch arrays of .csv of .json files and just restructure the combined datasets. Saves a lot of time! 
I'm not entirely sure, and I think at some point the specs changed on it. The only for loops I think you can use const in are the for of and maybe for in. It's due to the nature of how that variable is scoped. Technically in a basic i&lt;=length for loop you use the same i-variable over the course of the loop. With the other loops, each loop has its own version of the iterator. Using const is a good way to denote this technical difference in the loop, but in practice it's only really a safeguard to not change the iterator in your code. It doesn't affect anything other loop in the series to change it though. An interesting example would be to run each loop logging the iterator from a settimeout function. For 5 iterations the i-loop would log 4 5 times whereas the for of would log 0,1,2,3,4; because it is technically logging each loops unique iterator (sorry on mobile)
&gt; Nope, you just leaked your class private member information. Why is that "nope"? Can you think of another language with private variables that doesn't essentially do exactly this? &gt; And the actual solution is to specify that private property names need to start with a specific character that is only legal for that usage so you can avoid public and private property name collisions. Well. that's certainly *a* solution. It's one that quite a few JS developers have spoken against, and maybe that's a pretty good reason all by itself why it's a "Nope". Another solution is to use python style private variables; "Name your variable starting with an _, and then pretty-please don't access them from other scopes." It doesn't give you the hard protections that the hashtag naming scheme does, but so what? It's also easier to debug, since you can access private members. Yet another solution, and my personal favorite, is "Private variables in a dynamic language is kind of a bad idea, let's not do this in the first place."
NI! NI! NI! ^NI ^^NI
Well I tried my best to figure this out, but I simply could not wrap my head around how to pass data from one function to another. Maybe one day... &amp;#x200B;
Thanks!
Not saying this is the case, but sometimes it's just better to re-write it with the idea of separating things from the start. In any case, I'm sorry to see that this didn't help. Cheers, anyhow :)
It just seems to be that when I take the functions out of the main initMap function, all the calls to google are 'undefined'. 'Uncaught ReferenceError: google is not defined' &amp;#x200B; &amp;#x200B;
Yeah, this is the main way I’m using D3 nowadays. Get all the benefits of the charting math plus all the customisation / ease of understanding of something like React. You can technically generate canvases server-side, but it’d just be to export them as PNGs.
You're a champion sir. Thank you! 
Does that syntax highlighting theme have a name? I might like to try that out in vscode it looked nice in those examples.
Well, angular 2-7 doesn't really have many breaking changes so no, not really. D3 definitely has modules that still use version 2 or 3 and simply don't work on 4 or 5. I had this problem a few months ago and I'm shocked I got anything to work at all with all the example-cobbling-together I had to do.
Some libraries are absolutely geared toward being performant, and typically they do that by leaving feature/functionality out in the name of gaining performance. I think what he’s trying to say is that D3 didn’t make those choices, it does everything at the sacrifice of ultimate performance. 
A great place to look is the MDN web docs. `document.documentElement` gets the root element of the document as per the docs: https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement The second question, I'm not sure what you mean by points? That's just a regular expression (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions). I'm not the best with RegEx but looks like its checking the beginning of the input or whitespace followed by the string no-js and whitespace after (please someone else correct me if I'm wrong). Last bit, not positive. Looks like they're storing buffer errors in the global window object though.
Agreed, the linked article is about on par with saying Photoshop is excessive for scribbling a few lines or that matlab is not the best way to sum the numbers from one to ten. Nothing posted there demonstrated an understanding of what it's actually meant for. 
Coming from the C++ world which has a pretty good STL, having an that in JS would be _amazing_. Equivalents of `&lt;algorithm&gt;` or `&lt;chrono&gt;`, yes please.
Experts Say You Won't Believe There is a Direct Correlation Between Length and...
I spend way too much time programming with recursion (read: *trying to*), and I'm a little embarrassed to admit I ripped the essence of it from something else I spent way too much time working on (read: *trying to*). Let's just say it took me my whole life.
It's unfortunately not biased towards that, people are looking to fill a role with specific frameworks, and recruiters (the ones looking) are looking for the buzz words. They don't care if you have 3 years of JS experience if you can't be arsed to pick up a framework in that time. The hiring process isn't in favor of the people with low buzzwords.
This is definitely a "now, why didn't I think of that?!" moment... great article!
Cool! In my experience, these results are exactly what I usually see. The methods that iterate through something are typically 2--3 times slower than the imperative loops they're probably implemented in.
Yeah and the spread operator is dead slow. But so swag! :) Also I wanted to show an use of basic generators.
Reading some of the ideas is like porn considering some of the frustrations I've had with JS and getting everything working perfectly across different time zones.
Medium is an open platform, you don't need to be anyone special to write an article.
I don't see the point as everything will still have to be polyfilled regardless to support 99% of browsers. Good luck getting Apple to support this across multiple versions of Safari.
Using Apex Charts With React, my life hasnt been more easier in a long time. 
Wasn't expecting to see you on here, whats up Aaron! The lighthouse team misses you!
What frameworks allow for easy visualisations and are at least somewhat close to d3 when it comes to features?
What kind of help do you need. Are you basically asking for help to code the whole thing from 0?
Plotly/Recharts/Google Charts/Chartly Not all of these are react-centric, but they're easy enough to set up regardless. 
Not using Angular much obviously
It is normal for it to return `undefined` when you define the function. If it doesn't get overwritten however might be because it is not in the global space, you can check if it by opening the console and calling it `isValidChar_space('test')` if it errors out it means it's not in the global scope
/r/woooosh
Uh, `string::split`...?
Ugh, why is every other comment "lodash".
&gt;That's weird because I disagree entirely This should be interesting because I am in agreement with the above guy. &gt;I haven't had the need to go straight to D3 alone. So you've never actually used the core API, or even the product being discussed. 
Is there any surprise that a lower level language would perform better? If you want to do a "real world" comparison, you need to compare it to something that JavaScript was designed to do. How about AJAX, or animating CSS? What I'm curious about here, is how this compares to other languages like Python, Ruby, Java, and C.
The standardized fallback/polyfill mechanism on its own would be a massive benefit (though maybe this responsibility belongs with WHATWG rather than TC39). If we're gonna be polyfilling for backwards compatibility no matter what, might as well give it some first-class support.
I have similar issues. You can use postMessage to send stuff from domain.com into the iframe. You need to make sure that you do the sending after the iframe is loaded. https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
Maybe I was a bit vague. Just to clear things up, VSCode all the way!!! Yay! 
I think the point of an exploratory article like this is to show that the capabilities of the web as a platform are expanding. We don't have to be restricted to AJAX or animating CSS when the web platform can do so much more
Not sure what you're trying to say
The second one starts with an exclamation point - it’s an exclude rule. So you’re saying match everything in the first one EXCEPT for stuff that matches the second one. 
&gt; Stage 1 Without even a list of candidate functions, this will be in committee for eternity. Also, the first issue I saw at the top of the issues list &gt; Support the Actor Model Lmfao yea this entire thing is *never* happening. 
How did you know it was me?
Even more fundamental than that, in what world is the JS community going to come to an agreement on the functions to include along with APIs that are required to remain backward compatible for all eternity? A standard library makes no sense in the context of a language with 800 programming paradigms in use in any given app, especially when the "pains" listed in the motivation (downloading code) are a complete non-issue in practice. Much better just to grab what you need that can be tailored to your use cases. 
My question is - why can't we compile javascript to .wasm?
I've been using vx lately. It's pretty damn versatile. https://vx-demo.now.sh
Did you try googling your question first
Obviously the scope would need to be limited to be practical, but there's a middle ground somewhere; go through almost any other language's standard/core library and tell me a bunch of those very basic and high-benefit functions/objects shouldn't be available natively somehow in JS. There's an argument for just putting those in core, but at least this proposal will attempt to address things like fallbacks/polyfilling and versioning (relieving some of the burden of perpetual backwards compatibility), and spares core from the potential for bloat.
Yes, but it can do "so much more" relatively *poorly*. That's why it's important to compare apples to apples. Web assembly can do some things in a browser better than JavaScript, sure, but it's still *doing it in a browser*. 
I will be taking a course in D3 starting next month and I am not feeling any assurance from this thread lol. 
That's what I've done in the past for sure. Used d3's scaling functions and coordinate/path calculations and used my view library to generate the elements.
A lot of lodash functions have always felt to me like they belonged as a part of Javascript itself. `compact`, `unique`, etc. would all be great for everyone, even non-Lodash users.
[removed]
Ah just a bit of a joke, I wrote some C++ recently and was amused to find no stdlib features for splitting strings yet.
`std::regex_token_iterator`
Vega and Vega-Lite. https://vega.github.io
Sure but saying "add lodash" is very opinionated. There are alternatives like ramda, lodash-fp, fp-ts and many others which cater to different styles.
r/vrooooom
Well I'd say you still pretty much need to write a little helper function to have an ergonomic `split(str, delim)` function.
fixed the unsolvable problem!!! Try playing now! &amp;#x200B;
What's your specific use case?
It looks like it's in the global space. Console returns *true.* &gt;isValidChar_space(32) 🡐true
Even with something like Moment, date-fns, dayjs, native? 
I don't think `uniq` is a great example because that has been kinda superseded by `Set` (even if its ergonomics aren't amazing). `compact` is ok, but then again `arr.filter(val =&gt; val)` isn't so bad. I think the point being made is that we likely don't need all of lodash's functionality in a hypothetical stdlib, nor would implemented functions necessarily need to be equivalent. Just saying "lodash" doesn't really add much value to the conversation.
Have you tried ChartJS? It has a React wrapper that’s kinda straightforward to use: https://www.npmjs.com/package/react-chartjs-2 I’ve been using this at work mainly for line charts so I’m sure you can easily produce a burndown chart with this one.
I can't find it, but I remember reading someone's IT experience in a reddit post. They did this, the thing with the emoji, and it caused the entire corporations wifi to go out every time someone tried to print from the printer (IIRC).
Many long and complex answer to this thing :P Basically the poor typing system makes for tons of validation needed and very complex runtime that's just slow because of all the operations it needs to do not to crash. 
It’s a powerful framework and can be fun, but spotty documentation paired with curious design patterns and version discrepancies can make debugging frustrating
This is for a home WiFi router. An apocalypse shall not be unleashed upon hapless innocents.
You got a point but parent too. Whether we like it or not the majority of apps are Crud apps, nothing fansy, webasembly will help but not what we really call "real world".
Here's a pretty good example of a simple game written with vanilla JS [https://github.com/arnisritins/15-Puzzle](https://github.com/arnisritins/15-Puzzle) Here's a more complicated example of the same game using a web framework [https://github.com/imshubhamsingh/15-puzzle](https://github.com/imshubhamsingh/15-puzzle), which someone claimed to be their first React app (I think they did a great job) I don't really know how to help you other than giving you an example to work with. It's very difficult to solve very generic problems (like "How do I write JavaScript"). I recommend starting by learning the answer to simple questions (like "How I add an Event Listener to an HTML element?" or "How can I add a className to an element so that I can query the DOM for it later?")
Try debuging, for starter u can use console log and see what is executed and what is not. 
So TypeScript then?
First of all,format your code,at least with lines.And use 4 spaces to show code panel in reddit. for (var count2 = 0; count2 &lt; 720; count2++) { penColour(colour_random()); // draw_a_square for (var count = 0; count &lt; 4; count++) { moveForward((100)); turnRight(90); } turnRight(1); } second of all,no one knows what the penColour and the rest are.Is it a library or custom code?
I know this isn’t the point of this thread but I just want to take time to mention [Luxon](https://moment.github.io/luxon/) (built by the Moment team). I think it’s pretty great. 
Sooo where are the numbers? Percentage comparisons without numbers, and a section saying Firefox is super slow, doesn't really mean much without numbers.
They're in the screenshots. I had a buddy of mine say that I should probably had better graphs, but I wanted to show off the tool a little, but I guess it backfired if you can't see the data :') But thanks for the feedback, next time I do a write up will definitely keep this in mind :)
I got it from code.org, show code, and sorry I’m on mobile so it was hard to have proper spacing.
What's up! Stoked this reached you guys! Miss you guys too! :)
Thanks! Stoked this reached you haha! I'll have to reach out so we can catch up. :)
Is there any way to properly define a type for your nested objects? That is, can we assume that at some level we'll see something like `{error: 'Foo'}`? Posting some formatted example code would be helpful :)
Why would you want to? Why negate all the incredible performance improvements browsers have already made to their JS engines?
Works OK, but it doesn’t feel like the TypeScript you’re used to. 
Yeah, I believe typescript might be a candidate for it. I remember being explained this while looking at Dart(I know!) and they were mentioning this as to why they created dart, why the VM is so huge and the problems with the current ever growing complexity of V8. Time will tell. I personally believe we could benefit from a true App oriented display tech as well. HTML was not built with application in mind and a more lightweight UI build for web assembly seems like a logical approach. But that'll never happen in my lifetime. 
It exists, yes. I can't really speak for the quality of the actual compiler, though. 
Am I missing something or did react somehow get data joins?
It often takes me a while to understand what others are telling me, and this was the case as well. I apologize. You are absolutely right, I've been mixing up quite badly polymorphism and a handy syntax. I've been abusing property symbols, adding functions that are not polymorphic just to be able to use them with a sane syntax, and this is wrong...
If webassembly is so much faster, why wouldn't you? Write js for your application/website, compile it to .wasm using a build tool for deployment. 
Doing it in the browser is the point...
I really hate how Lodash goes about mixing up of arrays and objects and how it allows some devs to leave holes in their code bases but I do agree. Lodash has some good things in it that maybe should be part of JS like `clone`, and `get`.
Tossing jQuery in, bring the hate.
D3-geo is still rock solid. You can also use it to draw on canvas or just do the calculations and let external libs do the drawing. I did one last year, using vue to control and monitor data, d3-geo for projection and pixijs for webgl drawing
Hey thanks for the responded, and I updated the stackoverflow link with my details &amp;#x200B; My current output is : "age": "This field is required. Only numeric characters are allowed." "name": "This field is required." \- "tag": "Map { \\"non\_field\_errors\\": List \[ \\"Only alphanumeric characters are allowed\\" \] }." \- "tags": "Map {}. Map { \\"non\_field\_errors\\": List \[ \\"Only alphanumeric characters are allowed\\" \], \\"another\_error\\": List \[ \\"Only alphanumeric characters are allowed\\" \], \\"third\_error\\": List \[ \\"Third error\\" \] }. Map {}. Map { \\"non\_field\_errors\\": List \[ \\"Minumum length of 10 characters is required\\", \\"Only alphanumeric characters are allowed\\" \] }." \- "url": "Map { \\"code\\": List \[ \\"This site code is invalid\\" \], \\"id\\": List \[ \\"Unsupported id\\" \] }." \- "urls": "Map {}. Map {}. Map { \\"site\\": Map { \\"code\\": List \[ \\"This site code is invalid\\" \], \\"id\\": List \[ \\"Unsupported id\\" \] } }." &amp;#x200B; Age and name are passing fine but I'm not sure how to fix to my functions to go to next irritation without ruining the rest I created a IF conditions but I'm not doing something right and i don't see it . &amp;#x200B; &amp;#x200B; Expect output is : &amp;#x200B; \+ "tag": "Only alphanumeric characters are allowed." \+ "tags": "Only alphanumeric characters are allowed. Third error. Minumum length of 10 characters is required." \+ "url": { \+ "site": { \+ "code": "This site code is invalid." \+ "id": "Unsupported id." \+ } \+ } \+ "urls": \[ \+ {} \+ {} \+ { \+ "site": { \+ "code": "This site code is invalid." \+ "id": "Unsupported id." \+ } \+ } \+ \]
Nobody wants to store a splitted string, though. You always want to iterate over it. So having an iterative pattern for split makes sense. It’s just that an iterable in Javascript is an Array. 
Issues are sorted chronologically descending. Anyone with anything can have the first issue. 
Yeah because the screenshots were so big/tall when I viewed them full screen all of the information was still very small.
`document.querySelector()`. Come at me bro!
Are you just trying to dele ``` function toPairs(o) { return Object.keys(o).map(key =&gt; [key, o[key]]); } function traverseObject(obj, f) { const pairs = toPairs(obj); for (const pair of pairs) { f(pair, obj); } return obj; } function transform(pair, obj) { const [key, value] = pair; if (key.includes("error")) { delete obj[key]; return; } if (["string", "number"].some(kind =&gt; typeof value === kind)) { return; } if (Array.isArray(value)) { obj[key] = value[0]; } if (typeof value === "object") { return traverseObject(obj[key], transform); } } ``` my test ``` const o = { one: [1, 2, 3], two: [4, 5, 6], three: { error: "I need to be gone", one: [1, 2, 3], two: [2, 3, 4, 5] }, four: 1 }; console.log(o); console.log(traverseObject(o, transform)); ``` results ``` { one: [ 1, 2, 3 ], two: [ 4, 5, 6 ], three: { error: 'I need to be gone', one: [ 1, 2, 3 ], two: [ 2, 3, 4, 5 ] }, four: 1 } { one: 1, two: 4, three: { one: 1, two: 2 }, four: 1 } ```
Not even a good troll really, given that DOM stuff is in the domain of browsers, not the language itself (which is what TC39 is concerned with).
&gt;we are currently migrating from selenium webdriver with java to [cypress.io](https://cypress.io) where I work. I was able to do the same tests that costed me several days of work in selenium in just one day using cypress. Loving it. Hey, have have you find it so far now? - I'm thinking of alternatives other than Selenium and seemed the cypress is the way to go. Would love to hear the pro and cons from you (especially someone that has done Selenium before)
Do you still feel the same now? Am thinking to invest a bit on cypress (currently using Selenium with Python)
How do you find it now? Am thinking to migrate from Selenium to it.
Typescript has *private* and *protected* class members.
Are you sure that error message isn’t being returned from server side code?
&gt;Thank you for this its helping understand pure function and how to only use function arguments better but I'm not trying to remove the errors self but to concatenate all errors to a single string for each object key separated by dot \`.\`. 
Probably getting downvoted because AssemblyScript is mentioned in like the 3rd sentence in the article...
AssemblyScript is mentioned in like the 3rd sentence in the article...
lol. nice.
Anything from [Shirley Wu](https://twitter.com/sxywu?lang=en) basically. https://pudding.cool/2017/03/hamilton/index.html http://sxywu.com/hpff/ http://www.datasketch.es/ Here's another D3 data viz that I enjoy: http://www.datasketch.es/january/code/nadieh/
Agreed, this has made me lose a lot of confidence in TC39.
No one has ever claimed that WebAssembly will be faster than arbitrary JS, or that compiling JS to WASM would make sense.
Have you tried using D3 solely for calculations and React for rendering? This talk demonstrates a good example of doing this: https://www.youtube.com/watch?v=zXBdNDnqV2Q You can go a step further and use hooks for most of this as well.
Instead of editing the others around, empty string would be like that tiny scrap of paper left that is technically there but is essentially worthless.
The obvious answer is so that you can have some functions sped up by adding a few extra types without needing a completely different language.
Hi Aaron! I have no idea who you are, but nice article!
When can I write it though ?
This is not a pure function
Ya I just noticed you setting the const 
I think parent comment meant to say being lightweight.
You can. It’s not a very smooth workflow though. When i tried i found it easier to port most code from scratch than to try to shoehorn the D3 methods into React.
I mean, ultimately, if you can't get this to work, there's likely a way to edit something server-side, it'll just be riskier and take way more work than most of us would be willing to go to for the sake of an emoji SSID. It might be locked down, but there's a world of difference between 'locked down' like a consumer-grade Router/IoT device and 'locked down' like an unpatched copy of Windows 7 without a password, much less *locked down* like an iPhone. It's unlikely to have most of the basic security features *built in to its processor* enabled, much less any of the features offered by the OS, and router default configurations are insecure *by design* because turning off settings that make it vulnerable usually means calls from confused users asking how to enable them because their lightbulbs need said settings enabled to set up for the first time. If none of that immediately seems relevant to the topic at hand: a 'jailbreak' and a 'known vulnerability in the device's OS kernel' are the same thing. You find a security flaw or an exploit in the router's configuration, web server, firmware, or OS that lets you get root access, you can likely change anything you want. In some routers, this would be a matter of disassembling the firmware just to *read* it and manually editing the resulting MIPS assembly *very* carefully. In your case, it's a quad-core ARM chip and it's probably running OpenWRT, because that's what previous Orbis used despite claiming otherwise. It's also very likely to have several dozen fairly-trivial undisclosed vulnerabilities, like previous Orbis did despite claiming otherwise, and finding a problem you could use is likely a lot easier than it sounds. Personally, I'd probably start with checking to see if Telnet is open before ever bothering with Javascript; on some previous Netgear Orbis, Telnet was enabled by default and the default credentials were 'root' without a password. As this is just an insecure configuration issue, and routers are *full* of those by design (because customers tend to need some insecure feature or another enabled at some point and leaving them *all* enabled minimizes help desk calls / user frustration) I wouldn't be surprised if this still works. If it does, well, find the JS file it's serving, edit it directly, and maybe try to put a password on it. 
I don't understand, what exactly are you using D3 for in respect to DOM appending? D3 only needs control of the DOM when creating transitions, axes, and brushes; everything else can be rendered using React. Do you have a snippet of code as an exampl? I don't see how it's not smooth unless you aren't using certain lifecycle events and trying to do everything in the render method? The way I mostly use D3 is to create the various calculations needed for the various svg elements in a map object that I iterate over with react to render what needs to be done. You don't need to use the D3 enter/exit pattern to render DOM elements when using React.
Haha! Thanks! Yeah this is a complete coincidence a bunch of my old coworkers / buddies saw this. &amp;#x200B; But again, thanks for the feedback, glad you enjoyed it! :)
You can write it now! Take a look at Assemblyscript, Rust, or Emscripten :) Depending on your language of choice.
Yeah :( Well, if you are still interested I have all of the results as individual screenshots here in better quality: [https://github.com/torch2424/wasmBoy/tree/master/docs/benchmarkResults](https://github.com/torch2424/wasmBoy/tree/master/docs/benchmarkResults) :)
I respectfully disagree. "... tiny scrap of paper left that is technically there but is essentially worthless" --- that can be unicode null character string, or something similar. Empty String is exactly what it sounds like, completely empty of any string, only of type "string".
The rectangles are the easy part actually.
I know this is a very common answer / explanation of Web Assembly's critical use case, but...did you read the article? Because: &gt;This is due to the fact that WebAssembly offers over JavaScript isn’t a peak performance boost, but a consistent / predictable performance that can’t “fall off of the fast path,” like JIT compiling JavaScript can. Is kind of the reason it exists at all; the invalidity of random microbenchmarks on StackOverflow is why a full-app example like this is particularly meaningful. Unless you have a lot of very expensive functions that are only used once scattered throughout an application, your browser's Javascript JIT and whatever it's doing to handle WASM are probably going to have very similar outputs for the occasional function here and there. What WASM offers is *consistency* that a JIT literally cannot. 
Let me tell you that the array is most useful. I often do need it.
Could I theoretically add a third rule that filters what I get after the first rule and second rule then? Thank you for your help!🙂
https://blazor.net
Yep - as many as you want, as far as I know. 
Use ES6 generators
Because the last while is breaking before it sets the value, so it's the previous one. Same with all the others. Change the loops to be: while(true){ newBlue = guessColor(); document.body.style.backgroundColor = rgb(newRed, newGreen, newBlue); colorElement.innerHTML = rgb(newRed, newGreen, newBlue); if (newBlue === blue){ break; } };
Neat! Actually love the simple design on the page too.
Blue is changed. You just forget to update the colorElement.innerHTML at the end
Your blue isn't correct in your "Color Now:" because in your last while loop you break once the blue matches and don't update it again, so the value you're seeing is the last incorrect guess. You can just add it to where you update the background color at the end after your loops. Why you don't see it update? JS is fast. That time you're seeing is milliseconds.
You're talking about WebAssembler / Javascript trampolining, which is possible to remove and it's being worked on. Did you see this bit? &gt; WasmBoy is compiled to WebAssembly using the AssemblyScript compiler. However, if we take a step back, we can realize that we can mock out some of AssemblyScript’s global functions that we call within our TypeScript code base. Therefore, we can use the TypeScript compiler on the same code base that we use the AssemblyScript compiler with. Which gives us two different outputs in two different languages, using mostly the exact same source code!
I also read books about frameworks, but I won't read all the pages. Concepts used by framework are also valuable. Even though we can learn framework quickly, but companies also tend to hire a person who is familiar with the framework.
Thanks buddy!
You mean the part where they explained that, yes, they wrote the code for the article in Typescript? Yes, I but I don't see your point. It's not exactly comparable to 'some functions sped up.' They wrote the main engine for an emulator in it. It isn't 'some functions', it's every non-trivial part of the project. I also was not talking about trampolining unless you're referring to the last part of my post where I literally spent a sentence mentioning 'Calling it has a cost.' I'm talking about the fact that v8/Chakra/whatever's currently in firefox is going to output something *very* similar to whatever the Wasm engine does for anything that's actually been JIT-compiled rather than interpreted, barring the occasional speculative optimization miss.
IMO return n += 1 is perfectly understandable, lesser lines, the better
This example isn't DRY at all but follows your patterns to better illustrate for you what's going on: https://codepen.io/Dreith/pen/LMbWNr?editors=1010 It uses timeouts inside functions that call themselves (the function) again if the comparison isn't true. There's a 10ms delay now on each loop and you can see how fast it still is. With no delay you can't see the changes because they're imperceptible, the loops are possibly even faster than the DOM can re-render.
It is also good practice to have the script tags at the end of file before the &lt;/html&gt; tag
Isn't d3 basically a "reactive" (ie "data-driven") library, typically used to render SVG based on data points? At the end of the day React does much of the same, it's just not pre-populated with the concept of scales, axes, etc. But you can pretty easily re-derive that if you need it. And making it more explicit might even make it simpler to understand for new comers.
[removed]
OK, so provide some way to save the JIT result and immediately load + use it from the first page load. I'm pointing out the correlation with how C still has inlined assembler, even though it is in C and also compiled. Trampolining is a call cost which will go away. So in the end, writing some WebAssembly is a substitute for being unable to save JIT, and also that hand optimised can be better. Both are possible, so perhaps it will happen.
You can do `return ++n` and you're adding one *before* the return.
Actually, I'm trying to stumble my way through, and I appreciate your (and everyone else's) help whether or not I'm ultimately successful. &amp;#x200B;
Both AirBnB and Google’s ESLint rules say not to do this. 1. It most likely means there are side effects in your function (why not return `n + 1` unless you plan on using `n` later on, which is something you should generally avoid. 2. Keep return statements as simple as possible. Some one liners are fine, but if the function is already a few lines, just add one more.
Lighthouse as in the Chrome web page analyser?
Update: I reset the router to factory defaults. For whatever reason, after the reset, now when I set the *isValidChar\_space(a)* function to *true* in the console, when I use a non-ASCII value and hit the APPLY button, the *Character is not allowed in SSID* error is not thrown! Unfortunately, however, the non-ASCII SSID name is not applied. Instead, the Netgear router's Wireless page displays this error: **400 BAD Request** **This server does not support the operation requested by your client.** Does this mean there is likely also a server-side validation that can't be over-ridden? Or might there still be other client-side things to try?
Hey no segfaults will cost you double that.
&gt;OK, so provide some way to save the JIT result and immediately load + use it from the first page load. I'm pointing out the correlation with how C still has inlined assembler, even though it is in C and also compiled. This is absolutely a fair point and, if the cost to call wasm from js was effectively zero, it'd be a valid use case vaguely comparable to, say, CRP-Optimizations/inlining. (Though, my answer is probably that running the interpreted bytecode through an inline optimizer is about as close as you can get with a dynamic language, which is why V8 does so. In fairness, though, looking at the page for the compiler used by the author, it's not entirely fair to describe what they did as just adding a few global functions to typescript. There's no way to write WebAssembly in any language without either inlining a runtime environment or manually allocating/deallocating memory at the moment.) &gt;Just as a question, are you the A++ who wrote Joy?
Or as in Portland head lighthouse team? 
Seriously. How long do I have to write Javascript without `std::transform` and `std::for_each`. Enough is enough!
Data structures are pretty important. Arrays, objects, etc. Learn their methods like Array.push(), looping over arrays, accessing properties of objects, etc. Instantiation patterns. The javascript course on codecademy is a pretty good learning resource, it'll cover almost everything you need to use for daily programming. Everything else you'll learn through stack overflow when you run into it. 
Can't even find A++ and Joy in Google anymore, as it was 15 years ago. Google has references to a different language also called Joy. The original one was Objective C in Javascript, a perversely brilliant mashup that deserved to succeed. My other favourite language of all time was Nu by Tim Burks, which was Objective C in Lisp. I obviously have a thing for Objective C, for very much the reason we're talking about now. It really encompasses the spectrum by being able to use different levels within the same source code.
Other than the for loops, none of this is native JavaScript. Why would anyone know how to debug this?
Thanks for the thoughtful observations. Telnet is not enabled by default on the Orbi, but it can be enabled through its debug page. I was able to log in, and BusyBox was there at the ready. That said, using Nessus to probe for vulnerabilities is beyond my ken. Also, as you suggest, there's a limit to how much time this is worth. I was hoping for an easy client-side override of the router's SSID name validation check as I've seen before with other routers, but it might not be that simple with the Orbi.
I think ~return n += 1~ is okay. I would watch our for class setters, though. Something like this might be confusing at first glance ```js class Thing { internal = 0; set something(n) { this.internal += 1; } } const thing = new Thing(); console.log((thing.something = 2)); // returns 2 console.log(thing.something) // returns 1 ``` The assignment operator returns _whatever is on the righthand side_, and not the new value of the assigned variable.
The tiny scrap symbolises that you can technically do the same things you would do with a normal-sized amount of paper (string functions like `trim`, `toLowerCase`, render to UI), and maybe you could use it if you’re desperate, but it’s not long enough (`’’.length === 0`) to be useful when you really need something substantial! 😜 A null byte string would be a tiny scrap that’s shredded down the middle and falling apart, making it even more terrible and unusable, because null bytes are absolute evil! 😝
LOL, I have to agree there :)
I'm trying to increment the variable n. Using it as a closure.
Second one is perfectly clear and unambiguous for everyone reading it. 
Readability is always more important than number of lines
I feel a bit late to publish this Redux in React tutorial, but happy to share it for everyone who wants to learn it in 2019! It's a straight forward tutorial to learn Redux and React with Redux by building the fundamentals of a Hacker News Clone.
` function counter(start) { let n = start || 0; return function() { return n++; } } let count = counter(2); console.log(count(), ' == 2'); console.log(count(), ' == 3'); ` 
Interesting, looks a bit similar to c3 - I will have to take a look into it. Thanks.
I think you should watch Anthony Alicea's Javascript Understanding the Weird Parts [https://www.youtube.com/watch?v=Bv\_5Zv5c-Ts](https://www.youtube.com/watch?v=Bv_5Zv5c-Ts). It show you the ins and outs of Javascript. Which will help you learn node.js, react, and other frameworks more smoothly
You need to configure the [´cross-origin policy´](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image).
Read [this series](https://github.com/getify/You-Dont-Know-JS). 
If this is just about style I think it’s better to manipulate a value before it reaches the return statement. It’s clear and shows intent. Also lint-wise += on a return statement would be a no-no right? Anybody?
ty for the downvote, as i said, as long as readability is achieved the lesser lines the better.
the absolute URL stills shows on the html page. But when rendering it doesn't show
Hey, nice write up. But aren't you a little underwhelmed with the results? On firefox the results are great, I don't know if that's because of a fast wasm implementation or a slow JS engine. Overall though, for a feature that is called 'assembly' I think less than 2x performance is actually astonishingly underwhelming.
Not from me. 
Don't forget Walt: https://github.com/ballercat/walt You can quite easily experiment with it directly in the browser too, using [this Observable notebook](https://beta.observablehq.com/@jobleonard/compiling-walt-in-the-observable-experiment)
Thanks it seems efficient... however it requires to modifiy the html on the iframe and I have currently no access to it (remote proprietary platform). I'll look for an alternative method.
Start by trying to create a web application (even just like a todo app or something) in vanilla js / css / html --&gt; you will pretty quickly realise why it's difficult (and be able to practice the basics). Once you've done this it'll be more clear why React is helpful. For Node, just learn by doing, since Node is basically just js used for a specific purpose (responding to events).
Cool
I think I’ve only ever used them to dedent multiline strings, and have always wandered if there were any actual use for them besides being a kinda nice syntactic sugar for common string manipulation. Similar to the Jest thing, someone posted their proof of concept library to build DSL’s with template tags. [Github](https://github.com/lusakasa/loony) [Reddit Post](https://reddit.com/r/javascript/comments/9ilefm/loony_a_proofofconcept_library_for_building/) It’s a neat way to use (abuse) them, and I’m more impressed they thought of it than I am with the actual use case. But, aside from the syntax being completely weird, this line from the README just got my anxiety going: &gt; recursive tagged template calls I can’t imagine how hard to debug some non trivial code a masochist would inevitably try to build with that. So, while a neat PoC for template tags, no way I’ll ever use them like that in any real code. I honestly might pay the first person $1000 that shows me a compelling use case for them outside basic string manipulation (that’d I’d just rather use regular functions for anyway).
Awww, [this is pure /r/HumansBeingBros material](https://i.imgur.com/2xEBDrZ.png)! Article is really nice too ;) My impression is that the main bottleneck for WASM speed-ups at the moment is whenever you have to break out of the WASM bubble and interact with the rest of the browser. Among those, one of the biggest bottlenecks is memory access (for example, having to copy all data from a typed array to WASM memory, and then back, instead of being able to do something in-place). Does that match your experience?
Get comfortable with js first, you can do some code challenges to get into algorithms etc. And then try to build some stuff with vanilla js. Imo it's important to build websites without frameworks because after that you actually start to understand why frameworks are important. 
I was sure I'd seen a virtual DOM library that used tagged template literals somewhere. Sure enough, a bit of Googling turned up [hyperx](https://github.com/choojs/hyperx)
Since you want to go into both backend and front end, you need to be familiar with what is available where and how. For example DOM is not JS per se, it's an API you can call using JS and by defaullt there's no DOM in node.js, many other global objects you can take for granted when developing against the browser are lacking as well. Then comes varying level of support for newer (ES6) features and depending on your target platform you may need to transpile (convert from the newest syntax to older constructs that can be understood in the target environment) and/or polyfill (supply an implementation of a new native feature if it's lacking in your target env). Again, this is not strictly related to JS the language, but this is the current state of JS ecosystem. I'd argue that the single most important concept if you want to combine node and React is good understanding of the event loop and asynchronous function calls (async/await, Promises, callbacks). 
[removed]
[Styled Components](https://www.styled-components.com/).
I think something very important to having a smooth experience with Node is to use a version manager for the installation itself. Since there are two release streams (current and LTS) and regular updates, it can be a hassle installing a new version of Node to try out new features only to find out you need to switch back to previous version for stability. I'd recommend using [nvm](https://github.com/creationix/nvm) (Linux / Mac) or [nvm-windows](https://github.com/coreybutler/nvm-windows) and then installing is as easy as: $ nvm install # or nvm install --lts $ nvm use ${VERSION} This saves a lot of time when trying out different versions of Node and keeps your globally installed packages bound to each version of Node too
It's a bad idea. The clearer your code is the better - and I guarantee you that literally anyone who read your code will spend non-negligible amount of milliseconds trying to remember what exactly happen when one increments on return. Your code shouldn't be succinct at the price of being readable and maintainable. The only excuse for such code is code golfing.
I use it to render slides in [Qov](https://github.com/chunqiuyiyu/qov).
Making it easier for non-developers but tech savvy people to deal with 4000+ line json files for modifying and viewing.
Grate article! Just one thing I wanted to ask, dose thread two JS variants also run on a different worker/thread like the webAssembly one? My point is that if not, most of the outstanding performance might come from the fact that the GUI thread is free to render more frames.
I quite like the look of [https://github.com/developit/htm](https://github.com/developit/htm)
Not sure if /s but Array.map is essentially a range std::transform.
will we write UI's with web assembly in future , with a low level language?
look up links and "ahref" to connect pages together
have you tried window.onload()?
&gt;Everything else you'll learn through stack overflow when you run into it. Truer words have never been spoken
Um, I don't want to try to predict the future, but I think it's definitely possible. From what I've seen in go, and Emscripten Wasm output, they also will do some HTML, and JS for you to do things like create UIs and elements. I don't know how CSS is going along though. &amp;#x200B; But thanks for asking! If anyone has more insight on this, would definitely be appreciated :)
Pass the referrer into the iframe's URL as a query parameter or something else that the analytics solution already on the page will automatically pick up. Since you have a goal page that's down the path a bit from the initial URL (which is all you'll be able to force your parent page referrer into), you might want to setup a goal flow chart?
https://www.youtube.com/watch?v=v2ifWcnQs6M&amp;list=PL62E185BB8577B63D History and basics that will help kill many frustrations.
Thanks for reading! &amp;#x200B; And each core runs one at a time, on the main thread. While running, a time is recorded before running the frame, we run the frame, then we record the end time. We find how long it took by finding the difference of the two times. Then, we do a setTimeout() to clear up the event queue to let the main thread do something else it may need to, to run this all again. &amp;#x200B; And for the "X times as fast" calculations, I'm using the sum of all of the frame times for each core. Thus, the GUI / Main thread shouldn't be interfering with our time calculations (please correct me if I am wrong) :)
Oh yes! Thank you for that! Walt is super awesome too! I've chatted with ballercat a few times, they do awesome work :) And another good resource is [https://webassembly.studio/](https://webassembly.studio/) if we are sharing codepen / JsFiddle like Wasm sites :)
Not a developer here (petty salesguy). Tho the game is good. I played it for like 15 minutes. You should make it so you don't die when you reach the end, instead show up from the opposite site, like in the real game. Gj my friend.
Learn array methods like reduce, map etc. Life is much easier now that I know them
Can I ask what is interesting about this series? 
Is Blocking/Non-Blocking concepts important for node.js? When would you recommend beginners to learn them?
Haha! Yeah it's all super coincidence, the world is a small place! &amp;#x200B; Thanks! Glad you liked the article! :) &amp;#x200B; For your performance question, yes that is currently the case. &amp;#x200B; Thogh, Usually interacting with the browser is quite fast. For this case, all of the heavy computation of rendering frames and calculating audio is best done in WASM, and then we want to just pass the final result back to JS to then go ahead and output. If you run the performance profiler on the emulator, you will see that this output steps we take in JS don't take more than a couple of milliseconds (maybe even less than that). But in general, you want to stay in WASM as long as you can and do as much as you can there, and jump back only when you need to. But WASM is getting DOM Bindings at some point so we shall see! &amp;#x200B; In terms of passing memory, Wasm and JS can both access a exported linear memory. But if you are referring to sharing memory between web workers or something like that, then you'd want to use a SharedArrayBuffer. But Spectre happened, and now those are temporarily disabled in most browsers. &amp;#x200B; Let me know if this helps, I think I may have went off on a tangent there, or misunderstood the question, but I'd be glad to give any and all insight on my experiences :)
freeCodeCamp should be your go-to resource my guy
&gt; instead show up from the opposite site If you want to introduce some extra fun and uniqueness, consider implementing the game like it would be on a Möbius strip. Glue the top to the bottom as usual, but when glueing the sides to each other, introduce a half turn twist.
Bad timing.
Thanks! I am glad you liked it! &amp;#x200B; And don't see it in a bad way at all, definitely a valid question! So when I first started looking into WebAssembly and what demos were initially being made for it, I knew it wasn't going to allow us to start playing 4k video games in our browsers overnight. I mentioned in the article, the most realistic expectation I should have is about 30% of an increase. And even though it sounds like a little bit, it can definitely make the difference between an app the struggles, to one that can hit 60fps. Or, bring something that ran at 60fps on a high end device, to lower end devices as well. &amp;#x200B; But it does allow new possibilities for things that weren't really possible in the web. For example, [https://github.com/shamadee/web-dsp](https://github.com/shamadee/web-dsp) is a comparison between writing a video editor in JS vs. WASM. You'll notice JS is almost unusable, where wasm for the most part keeps up and could totally do it. There's also a lot of DAW (Digital Audio Workstations), that are normally desktop applications written in something like C, because they do a lot of deep computations with audio files. But with Web Assembly, there are a few popping up and they perform really well. And I guess the prime example for this, is the Google I/O Keynote where AutoCAD talks about how they brought their software to the web using asm.js, and then Web Assembly. &amp;#x200B; So I guess to answer your question of: "aren't you a little underwhelmed with the results?", I am not. Simply because my expectations were a bit lower than what I discovered, and 30% (to me) is a great step forward to brining heavier applications to the web in my opinion. &amp;#x200B; Let me know if this answers your question, sorry for the long response! :)
Nah, your discussion was exactly the kind of answer I was hoping for. I think for me the main issue is that most use-cases I would have for WASM involve moving data around. Large typed arrays, number crunching, that kind of stuff. For example, you rightfully point out that JS and WASM can access the same exported linear memory. But that is not as convenient as being able to have a bunch of TypedArrays in JS and have WASM directly access those array buffers. Let's say I wish to port [Ska sort](https://probablydance.com/2016/12/27/i-wrote-a-faster-sorting-algorithm/) to WASM, because I suspect it's faster than the built in sort (up until very recently, you could beat the native sort for typed arrays very easily with a simple radix sort). To apply that to an arbitrary typed array would require: 1. ensure enough memory is available in the WASM module to fully copy the array to 2. copying said array to the WASM memory 3. applying the radix sort 4. copying the sorted data back Steps 1, 2 and 4 are all extra overhead, and due to the simplicity of radix sort very significant overhead at that! An in-place `Uint32` MSB radix sort can sort in four passes, and since there is no branching it's basically memory bound. Those extra memory allocation + copying steps add around 50% extra memory reads/writes to the whole story. Alternatively I could try to manually allocate all of my typed arrays from the same exported linear memory in JS, but then I'm basically turning JS into a different language with manual memory allocation when all I wanted was a faster sort for my Typed Arrays. WASM is great and will become even better, but if feels like at the moment you have to meet a very specific set of requirements in your project to get the best benefits out of it.
You could update the Medium.com article with links to the full-size screenshots. (Also, the sooner everyone moves away from Medium the better, IMO)
I use them to draw tiles: const checkerboard = pixel` 010101 101010 010101 101010 010101 101010 ` Wherein the pixel template just converts that to a two dimensional array of rgb values based on a predefined palette.
I am currently using cypress at my work. I am not very experienced in development but I have contributed to other companies webdriverIO tests on top of Selenium. What I can say is with very little programming knowledge I was able to create 25 e2e tests in 2 weeks. I was able to modify the UI test runners selector suggestions to suggest first, the custom data tags my company uses, and I was able to create some custom graphQL commands that allow me to send mutations to our server to create data on the fly for me to assert against (cy.createNewCard(args,options)). I can only imagine how powerful this tool would be for someone who actually was well versed in programming. &amp;#x200B; One helpful thing for me was their docker images for various CI programs. this means we can easily integrate cypress into circleCI tests. There are some circleCI orb configurations as well to help manage configuration management. Another groovy thing to check out is their recipies for more advanced automation. They have things like single sign on, redux store testing, file upload in react, drag and drop, etc. [https://docs.cypress.io/examples/examples/recipes.html](https://docs.cypress.io/examples/examples/recipes.html) Some things to note: 1. Cypress doesn't offer cross browser support but it is on their roadmap [https://docs.cypress.io/guides/references/roadmap.html#Upcoming-Features](https://docs.cypress.io/guides/references/roadmap.html#Upcoming-Features) 2. Cypress offers plugins that allow you to extend the behavior of the software. Those plugins are community driven so a lot of people who are switching to cypress are bringing some tooling with them. There is a cool plugin that transforms webIO tests into cypress tests: [https://docs.cypress.io/plugins/index.html](https://docs.cypress.io/plugins/index.html) 1. The plugin includes two image diff suites 3. The software allows you to add your own node packages to the software, so currently I am attempting to integrate our backstopJS tests into cypress so that I can require backstopJS and use the image capture and processing within a normal cypress test 4. Cypress offers a ton of pre-processors, and for my company who uses clojure/clojurescript this means developers can contribute to the tests if they are so inclined in the language they appreciate developing in. 5. There is limited iframe support but more robust iframe support is on the roadmap 6. There is no native browser event support, but again this is on their roadmap. All and all I like cypress. There are some simple and powerful tests you can create out of the box with limited experience. The core functionality of the program is exposed in a simple way to extend the functionality of the app and to create custom commands and logic and the documentation is amazing compared to other test tools i looked at. For someone at my level of experience this is the perfect tool. They have a page that lists tradeoffs for the cypress tool which i thought was interesting as well: [https://docs.cypress.io/guides/references/trade-offs.html#Permanent-trade-offs-1](https://docs.cypress.io/guides/references/trade-offs.html#Permanent-trade-offs-1)
If you look at rust/[wasm-bindgen](https://rustwasm.github.io/wasm-bindgen/), I believe they don't copy memory - they pass references around.
It gives you an in-depth understanding of the language behind the scenes. 
Array Methods can be HUGE for you, especially as you try to make things more functionally programmatic. [MDN | Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) MDN and Google are your friends! 
Understand Callbacks and Promises is a must. Async and Await would be a plus. 
console.log(thing.something) does not return 1, it returns undefined. 
Yeah, that's one workaround: using another languages that compiles to WASM and JS to deal with the memory allocation issues. Which is great! It just doesn't help much when you need interop with existing JS stuff, I think.
Strings form a monoid with concatenation and empty string as the identity element, 
I'm no expert but I think that's what the "anyref" proposal is about
This code gave me nostalgia, good job though! You should try to use more of the ES6 syntax, perhaps "let" instead of "var", arrow functions and the "for of" loop would be very helpful since you're iterating over a couple arrays. Perhaps even JS classes since you have a background in C++. Nevertheless, well done!:)
Good course will refresh your JS knowledge in special part, because not everybody followed new syntax. I recommend Academind on udemy.
A good idea to get yourself started in JS would be to build a little project. I can recommend trying to write a router (like what express.js is) from grounds up, as it will touch upon many aspects of coding in js and building a simple one is incredibly easy. 
The reason for syntax is so that you can cache preprocessing of the static parts and only add the dynamic parts. This can actually be non-trivial performance gains if parsing is involved, but for simple string manipulations its not very impressive.
haha I appreciate that! I threw in a couple of "let"s for the for loops, but I'm not really sure why lmao. From what I understand it's basically a local variable, right? idk. I basically made this by googling a bunch of VERY \*specific\* things, so I'll definitely look into learning the ES6 syntax. Thanks for the suggestion! 
OOOooo, great idea! I'll try to figure that out today
I also saw this as a more complicated less versatile bind. I'm not sure I see your argument about different types, since the implementation of `fn` could provide different paths depending on the type of object it was called against or you could simply import different implementations depending on need. But bind also has the advantage of being used anywhere and not just where the trait has been added. If you have a `map` that works on all array-like objects, how would a trait be created to handle that? A `map` method with bind would not have to be explicitly added to any specific object prototypes and instead would just be called from the target array-like directly. (And yes, you could probably add to Object.prototype to mostly get there, but not all objects inherit from Object.prototype.) That's not to say I dislike the idea of traits in JavaScript, and I applaud these efforts. Its something I wish was available back when libraries decided they wanted to modify builtins adding to the concerns of "breaking the web" to JS enhancements. But its also something I think bind syntax mostly takes care of, even despite pipeline (which is similar but not the same).
&gt; Since you have a goal page that's down the path a bit from the initial URL (which is all you'll be able to force your parent page referrer into), you might want to setup a goal flow chart? Yes exactly... the purpose is to display conversion funnel per referrer. I'll try that.
Thanks for the reply! 
You're trying to learn how to cook gourmet food before you know how to boil water.
Just understand very well that in javascript functions can return functions. Understand the event loop. And of course understand the language 😎
Can you post a link to the page you got it from, context really helps when debugging these things
This x100. Learn it in and out. 
Building HTML fragments via DOMParser#parseFromString, found it useful when I was doing some vanilla js stuff.
Nice! I also started working on a snake game while bored on a plane the other day. It is not done though. https://github.com/alabianca/snake.js
And if not, I'd be very surprised if it wasn't covered by a different one :)
I notice this was made in 2011. Is this still relevant? 
Or the one that helps ships to navigate.
I believe the math concept in reference is called "quotient space".
Seconded enthusiastically, these books have been most helpful in updating my last-decade js understanding.
I second Async programming. Watch Kyle Simpsons "Rethinking Asynchronous Programming" course on Pluralsight. 
https://www.github.com/apollographql/graphql-tag https://www.styled-components.com I use both daily in most projects I’m working on. Super suitable language feature.
For OO principles nothing comes close to the Gang of Four book.
wasm _is_, essentially part of the JS engine - the part that's most cleanly optimized. To get there, you have to sacrifice things like dynamic typing... which is realistic for the _vast_ majority of use cases.
Or: ``` snake.y = screen.y - snake.y; ``` Much easier than some crazy maths concept
I agree with you. My only point was too supply terms so it would be easier to search for libraries and utilities.
This right here^
I know you're point, I agree it's good to know what things are before diving in the deep end. Just thought I'd give some help as I did a quick Google of what you posted and it blew my mind.
Haha yeah, I'm glad we agree. It blows my mind too. :)
Erg, well you did say you where very new. Yes learning actual JavaScript from someone that used it for most the languages life and wrote one of the more influential books on the topic is relevant to your accelerated and foundation understanding of the language.
A great learning technique is to console.dir everything. You can see the methods and instances for that object (for instance, arrays are actually class objects similar to Java's ArrayList). Its like an interactive manual. Also, when you've gotten comfortable with the basic data structures like objects, operators, and lists, start exploring es6 classes and OOP patterns. React uses a lot of OO and having that general understanding will put you a head above a lot of React developers who only know the basic framework features and cant implement their own. My last advice is to eventually think about learning Typescript (or another superset) to start using types and interfaces and get IDE quality assurance. Interfaces have been a game changer for me along with favoring composition over ineritance, and employing those principles will make React a part of a larger system you designed as opposed to the entire structure. Good luck, friend!
If I'm writing something small to appear in every title of every page I'd like to avoid dependencies. Date fns for when I'm doing more serious stuff, but pure native would be a lot less hassle. 
https://github.com/adam-golab/react-developer-roadmap
[Eloquent JS](https://eloquentjavascript.net/) goes deeper into fundamentals and helps you think about solving problems in better ways. You Don't Know JS is great, but I found it above my level when I was just starting out. 
Thanks, I’ll check this out
.bind is used a lot in react, also knowing class style oop would help, and read about the idea of what a web component is. for node, make sure you get familiar with the terminal for your system, like bash. People usually start by writing servers in node so look up how to do that on youtube.
&gt;.bind is used a lot in react, also knowing class style oop would help Both of these things are on their way out in React. I haven't used .bind in probably over a year and after 16.7 drops I likely won't be writing many class components at all.
That helps, thanks.
I would try following along with one of Wes Bos' tutorials, because you'll get to build something and learn concepts at the same time. Learning a language without building something is like trying to learn an instrument without ever picking it up and trying to play a song. You can probably do it, but it's boring.
I wouldn't be surprised if there Is a client-side way to do this, I mostly just meant to say that, depending on how much you care, finding another way to do it would likely remain an option. I wish I could be more help on the front end but I haven't written any front-end JS since September, but have spent the last month learning approximately one metric shit ton about infosec, so I went with what I knew. As an aside, thanks - I've been dredging through the firmware on my router for a week trying to figure out if and how a persistent rootkit could even get on something like this (It's the only thing left in my house that hasn't been reformatted but I'm still getting malicious redirects a few times a second) and hadn't even considered you could change something meaningful in it with client side js before seeing this post. I'm no closer to solving my issue, but fifteen minutes of poking around at inline JS and bypassing the login screen did convince me to finally throw this thing out. Tl;dr: Do whatever works for you. And also never buy a D-Link product because I think I just technically discovered a zero day and it doesn't even matter because it's more effort than the other two they've declined to patch. 
We need iterator versions of the builtins. If I `[].map().filter().map()`, I shouldn't be going over the whole array 3 different times. The solution already exists in third-party libraries, there's no reason it shouldn't be in JS (especially now that iterators are builtins). 
As much as possible you want to be relying on official documentations (which are accurate down to every detail, written by people who make a living making them) rather than video tutorial guys out there (who make a living out of teaching them). - https://developer.mozilla.org/bm/docs/Web/JavaScript - Complete latest reference for Javascript (personally took me 2 weeks 4h/day to get good fundamentals) - http://exploringjs.com/ - Online reference for Modern / ESX Javascript, the online books are free access. Past versions: ES1, ES2, ES3, ES5, ES6 (also: ES2015), ES2016, ES2017, Current version: ES2018 - https://webpack.js.org/ - For bundling - https://webpack.js.org/plugins/ - Plugins, like minify (reduce size) of your js code, etc - https://webpack.js.org/loaders/ - Loaders, like pre-load static files or css or fonts for your js code, etc - https://babeljs.io/ - For transpiling modern js and applying polyfills for your code to be run on earlier browser versions - https://caniuse.com/ - Browser support - https://reactjs.org/docs/getting-started.html - React basics - https://reacttraining.com/react-router/web/guides/quick-start - React router, when it's time to add pages to your react app - https://material-ui.com/ - Material UI for React, maintainers takes care of this repo like their baby, check it out and you'll love them - https://popmotion.io/pose/ - react animation library - https://jestjs.io/ - The gangsta testing module, react or non-react - https://lodash.com/docs/ - Convenience JS utils - https://nodejs.org/api/index.html - Ins and out of nodejs - https://expressjs.com/ - When you wanna serve your js pages, this is one of the easiest ways - https://yarnpkg.com/en/ - Imho a better npm client you might love - https://github.com/airbnb/javascript/ - Battle-tested Javascript style guide - https://eslint.org/ - JS linting - https://code.visualstudio.com/ - Great IDE for JS. Has ESLint extension, just enable it, also has Git features. - https://github.com/creationix/nvm - when installing nodejs on linux - http://pm2.keymetrics.io/ - when running a nodejs process on linux - https://www.npmjs.com/package/greenlock-express - free LetsEncrypt SSL for your site - https://fontawesome.com/icons - When you need nice fonts (lol) There are a lot more stuff out there worth checking out, all up to you to discover. When some problem comes up, you google the problem, you get redirected to github repo issues or stackoverflow posts, chances are you also get redirected to official documentations. So.. better do it differently than what the average person does by paying your dues early by reading the docs, you'll definitely thank yourself later. Also: when you come across github repos of other people, check out their package.json file for you to see what other rockstar modules you are missing.
Oh ok. I'm not OP but I al relativity new and looking to figure out the deeper parts of the language. You know how tech is, things change in a heartbeat, so wasnt sure if he was going to talk about things that arent true anymore. I'll still watch though. 
&lt;3
Hi all! This is a short video of my environment rendering system (WIP) I'm writing a project of mine called Pixling World. It's written in WebGL/TypeScript, and using instancing heavily to make sure it's performant. The only primitive is actully a plane in this game. I also posted about this a few months ago [1], when it was still in 2d. Some info about the project: Pixling World is a massive evolution simulator, where Pixlings (not shown in this video) compete for survival in a dynamic environment. The Pixlings are controlled by neural networks, and you can have a lot of them simultaneously, currently up to 1M on my gaming laptop. If anyone is interested in knowing more about Pixling world you can find some info here: https://pixling.world . I also wrote a about how it's implemented here (although parts are a bit outdated now): https://hackernoon.com/how-to-run-1m-neural-network-agents-at-60-steps-per-second-in-a-browser-183c6213156b [1] https://www.reddit.com/r/javascript/comments/9d6r41/water_dynamics_in_my_evolution_simulator_built_in/
`react-virtualized` perhaps? use react state for actions such as add, edit, delete?
It's a great series but it seems like a lot of info that is probably too in-depth for a total novice. I'd recommend it more for people with intermediate JS skills
Forget React and do TypeScript and Angular instead
 console.time("Searching for docs"); visit("html2canvas.hertzen.com"); identify("documentation button").then(click); read("Limitations section"); console.timeEnd("Searching for docs"); &lt; Searching for docs: less than a minute &gt; All the images that the script uses need to reside under the same origin for it to be able to read them without the assistance of a proxy. Similarly, if you have other canvas elements on the page, which have been tainted with cross-origin content, they will become dirty and no longer readable by html2canvas. [About tainted canvases](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image) (This maybe another minute to search for "tainted canvas"): &gt; The key is to use the crossorigin attribute by setting crossOrigin on the HTMLImageElement into which the image will be loaded. This tells the browser to request cross-origin access when trying to download the image data.
Link is broken! Where can I read it?
Hi /u/FredrikNoren, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/FredrikNoren, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/fayazmiraz, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/Mosmamma33, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
You need to have a firm grasp of Objects, Props, and prehaps most importantly, "this". If you do not understand these principles you will be hopelessly confused. You don't know js is the series I used to learn all this. Don't skip books, because they build on each other. Understanding scope and closures is super helpful too. Also take your time and take notes if you read the books. Run the code snippets in your browser console. If you do all this, by the time you finish the series, you will be ready for react.
I have done this. It’s a good pattern. 
Hi, Sorry about that, didn't know these posting rules! Anyways, can you please point out that violation of which rule caused the deletion? (if it's because of the links, I can remove them &amp; repost). &amp;#x200B; I'm not regular in reddit, but I'm thinking about it. Thanks for your understanding.
The command line. Seriously, if you're not familiar with working at the command line, take a bit of time to learn the basics of it first before trying to learn Node or even React.
Hi guys, I'd like to show you **music-beat-detector,** my latest project. It's a library that is able to analyse any mp3 files or youtube video and detect music beat. I wrote it to control some lights in my room. Enjoy!
Hm... What's wrong with good old: ``` const placeholder = 'https://example.com/placeholder.png'; document.addEventListener('error', ({target}) =&gt; { if (target.tagName === 'IMG' &amp;&amp; target.getAttribute('src') !== placeholder) { target.setAttribute('src', placeholder); } }, true); ```
Seriously?
how would i hook these up to my christmas tree lights?
The opposite of "encode" is "decode" (see antonym entry at [https://www.synonym.com/synonyms/encode](https://www.synonym.com/synonyms/encode)), so my guess would be decodeURIComponent. 
`decodeURIComponent` Makes sense once you get "unecodeURIComponent" out of your head.
You mean synchronous vs asynchronous operations like reading a file from the filesystem? It's pretty important to learn that there's always exactly 1 thread per process in JavaScript (with potential WebWorkers, which are not threads). The way long-running operations are handled is through a system of callbacks and you should use that as much as possible. For example if you make a request to a website, it may take a while to get back to you so you want to tell the browser (or whatever environment you're in): run this code once it's done, in the meantime let's keep handling other events, for example click events (in the browser), other incoming requests (for node), etc. &amp;#x200B; So in a nutshell: asynchronicity is key to the language and you should use it as much as you can to get familiar with it. Promises and async/await are syntactic sugar over this basic concept.
1. Learn generic "programming" concepts. The most generally applicable is probably C or Java, but Python or Ruby are fine too (their syntax is just a bit different) 2. Learn core JS, prototypal inheritance, unusual "this" behavior, function first patterns, core methods like .push, .map, .filter, isNaN, etc. 3. Learn core JS concepts/patterns related to asynchronicity: callbacks, pub/sub, Promises, async/await, etc. 4. Now learn about browser specific (DOM, etc.) and node specific (fs, modules, etc.) concepts 5. Last, and only now, learn about React specific and Express (for example) specific concepts
This is also my recommendation. The best thing you can do to learn Node or React or whatever the next hot JS thing is going to be is to master vanilla JS. 
We’ve made it our official front end testing tool! It’s really an amazing framework. Super easy to use and get to know and super scalable. The documentation is vast and up to date and the gitter chat is filled with questions and answers, both from the devs and users. There’s only a few cons that I can think of: the single-origin limitation, the lack of cross browsing testing (although technically is only temporary) and the CI outputs (they’re rarely give you any helpful information) Other than that, cypress is so much easier, simpler and trustworthy than Selenium that it has become my obvious choice for front end testing.
I much prefer it to Selenium, we still use it for our end to end tests. They solve the same problem, so it may not be worth a migration, but I find it much more intuitive to write tests for - and much easier to use.
I got it wrong, it was AAA+ who wrote Joy.
Try ag-Grid
Well, I've got to say, I'm a bit relieved. I'd actually be more than a little bothered if my backup reddit account was actually stealing an established dev's handle. 
They went out of business in 2001, which is a pity because what they had was one of the finest development tools I've seen in decades and I wish it was available now. Even today, I still don't have what they had, which was a REPL interface that could be attached to even binary processes. Debuggers only work when the code is paused, and Swift doesn't have an attachable REPL, and JSContext doesn't share the environment with Swift.
Hi /u/Vitamin_C_is_awesome, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
In the guidelines I linked: &gt; Memes and other low-effort content is prohibited. It's low-effort content to get a laugh. Here in /r/javascript, we aim to include topics that are educational and/or otherwise worthy of discussion. You might try /r/ProgrammerHumor instead.
Yeah it was /s sorry if that wasn't clear. Obviously Javascript has both `map` and `forEach` and probably various other things from `std::algorithm` that I didn't think of.
Thanks for helping me understand this! I was blind to it until [few hours ago](https://www.reddit.com/r/javascript/comments/a72s5e/javascript_traits_the_clean_way_to_modify_global/ec37o3j/), then I finally understood what /u/AndrewGreenh and some others meant. You guys are 100% right, the syntax I introduced is indeed (at least in part) some weird variant of the bind or pipeline operators. This aspect of it has nothing to do with polymorphism and actually pushed me to abuse symbol properties quite badly. I have some ideas on how to radically reform the syntax I've been using to make it (hopefully) more correct/clean/useful. I'll try to play, prototype and experiment with them... (An idea could be introducing a statement to dynamically define custom operators whose semantics can be configured. This should result in something close to a superset of bind operator+pipeline operator+straits operator...)
it's that day again https://github.com/davalapar/what-the-pack
React is not for beginners. Forget it for a while. And node is a back-end process, but doing stuff with that does teach you js. Just stick to js, learn callbacks, promises, objects, arrays. For libs underscore and ramda are good basic tools.
Regarding "why is the screen not changing color", the HTML changes are not actually made until your script stops running and gives the browser a chance to repaint. What you'll want to do instead is use [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame). Each time that function is called you'll want to make one guess, update the background color and return. This will be more complicated as you won't be able to use while loops and instead will have to structure this as a [state machine](https://en.wikipedia.org/wiki/Finite-state_machine).
Hi /u/Vitamin_C_is_awesome, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Vitamin_C_is_awesome, You were instructed to post help questions to /r/LearnJavascript. And then you posted another one here. Doing so again will result in the suspension of your posting privileges.
https://github.com/jcampuza/fancy-type-extension View the code here. Made it in about an hour with Vue so don't judge too hard. All credit for the idea goes to the original author! https://beautifuldingbats.com/hey-howd-you-do-that
Absolutely understand what a functional closure is. Its the combination of a function and some data. All javascript functions are essentially functional closures. When you read over javascript code, you need to be aware of how you are looking at the code you are reviewing: a function should be read twice. Once for the definition pass, where the function is being built and its data bound to it. The second time is when being actually executed function limit_check (limit) { return function (value) { return value &lt; limit; }; } In the above snippet; the first time you see it you will notice that the data "limit" is being bound to a new anonymous functional closure when the "limit_check" function runs. Next, you can read through the closure logic, with the understand that it is a copy of some logic and the data {limit}. 
Interesting. Personally I've always just used `map` and `Promise.all`: const someArray = [1, 2, 3, 4, 5]; Promise.all(someArray.map(somePromiseGeneratingFunction)) .then(doSomething); But that approach really doesn't work so well when you want to do a reduce or filter, so I could definitely see the utility here.
Try my JS library CrxOop, it is very generic, and can expose you to all types of OOP at the data structure (fundamental) level. Whatever approach you take to learning OOP, keep in mind the following: In my book, there are two main types of OOP, let us call them A and B. These types go all the way to the paradigms of the developers. Like human languages, they affect how we think, and how we think in turn, affects the language. Type A is essentially concerned with algorithms, and is a super set of type B. A class in type A is the collection of both data and functions. Essentially, in type A, your class is a "scope", and your code is aimed to documenting itself. Examples of such languages are C++, Java, and C#. Type B is essentially concerned with data. A class in type B is the collection of functions only. Examples of such languages are Javascript, Ruby, and AutoHotKey. I would use Type A, for example, to build algorithms of algorithms. I would use type B to extend the behavior of a final data structure. Type B languages tend to move towards Type A becoming a hybrid of sort. Examples are Python, PHP, Objective C and Swift. Each of these languages are different hybrids. Javascript is also turning into a hybrid. Some languages take the hybrid approach while remaining well defined, such as Swift. Others do not, such as Python and PHP. In Type B 'this' makes no sense, at least to me, and hence why I like the approach of Python. Take a look at Python. Interestingly Ruby introduces some scope into a class, while remaining a Type B language. If we use CrxOop's terminology, Ruby implements the "Shared Private" access. Interestingly C#, although a Type A, tries to cater to Type B thinking. Try CrxOop. Build a simple project, once using CrxOop's classes, and once using CrxOop's structures, and read the documentation, and keep the above in mind, and your understanding of OOP should become much more profound. CrxOop's classes are Type A, and CrxOop's structures without the 'private', not the 'private shared', access, and the mandatory constructor invocation are Type B.
[Saving people a Google](https://www.pluralsight.com/courses/rethinking-asynchronous-programming)
I know React is not for beginners. That's why I asked what I should learn/master in JS before moving on to it.
Hi /u/backtothegrill, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
All very well made points. I've yet to see a wasm application play with large sets of memory. Hopefully we'll see breakthroughs in that sometime soon.
This guy taught me so much. +1 👍👍👍
Don’t forget there is things also on the roadmap. Like true multi-threading. Also because of the processor (intel, spectre/meltdown) exploits, they had to remove some optimizations that haven’t been replaced (sharedbufferarray). Wasm is still in early adoption, I read an article (https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-🎉/), great write up by Lin Clark. This should explain some of the performance tweaks that probably make Firefox stand-out. Also Mozilla is one of the top contributors to Rust. Rust is a popular choice for WASM, as it is memory safe (by default), and has no GC. They have put a lot of time also into making it as friendly for wasm as possible. If you check out their website you can see it is even on the front page. 
Some reason I think because of the link has a emoji in it, that Reddit’s mobile app might not accept the link or display it. In that case you can just google “Mozilla Firefox Wasm improvements Lin Clark” The article is “Calls between JavaScript and Wasm are finally fast”.
If you’ve a solid background in another language, sure. Otherwise I think it’s a bit much right out of the gates.
This is sick! Nice job.
Well done! Think I commented on your 2d post. Been trying to do something similar but keep getting stuck on the damn collision detection 
Could just use tables. =)
What do you mean?
I believe that's a better description of asm.js than wasm.
It's too heavy and pricey for what it does, it's code is outdated and doesn't go well with modern best practices and technologies and it also doesn't customize really well. At least, that's my experience.
I'd use html, css, and javascript. Create a holder div with borders on 2 sides, and create cell divs with borders on the other 2 sides. If you don't want to figure it out and just want the solution, here you go: https://codepen.io/Ryuukaze/pen/yGVWEx
There's some overlap but `mismatch`, `count_if`, `adjacent_find`, `search[_n]`, `sample`, the list goes on and on. `&lt;algorithm&gt;` is so much more than `transform` and `for_each`
Thanks. I’ve clarified what I meant in the post. I’d like to play with the grids rather than just make them
Is this made in Electron? Windows also would be gangsta! This could also be a VSCode extension btw..
Hmm, I’m sorry to hear about the connection issue! Would you actually be up to chatting with me further about this? I’d love to discuss the problem you saw, as well as hear a bit more about the mentoring you’re doing. Feel free to email me at [joncart@microsoft.com](mailto:joncart@microsoft.com). Thanks so much!
Well, the first step is making the grid. The next step would be to add event listeners and do the logic.
Loopback 4 is really slick. It’s quick to get started and well documented with plenty of examples
That's some dedication
encode it to base64
React is not just front end. It's typically front end, but we use SSR with React and Node at work.
What replaces it when you need to enforce a particular scope? 
One big issue I noticed when playing it is that you automatically lose if you change direction to the opposite direction of travel (for example, if the snake is going left, and I press the right arrow, I instantly lose). This also happened when I changed direction to something else first, then rapidly pressed the opposite direction (for example, moving left, I press down, then very quickly press right, it seems not to register that I pressed the down button). I'm no Snake expert, but it seems rapidly changing directions is critical to playing the game successfully, so I'd definitely look into that! Other than that, great work!! :D
Totally correct, I faced the same issue when thought of a wasm-underscore library, turned out to be slower then native implementation due to the communication overhead. What also was clear to me is that communication between threads will always have overhead ( thought it can be much better then now). And the final conclusion I got? Wasm will probably never be a good solution for "small" tasks like sort of an array, what I am expecting to see is a full frameworks run on wasm while interacting with the GUI thered ONLY , for GUI updates using a dedicated API that will probably also bulk-ops and scheduled-pos. But it's just my opinion.
Vanilla javascript. At this point you are just learning the programming alphabet. Patterns many programming languages share. My advice: 1) Do not focus on how to "write codes". Plan the algorithm first. You can write it even in sentences, human language, in your editor step by step. Once you lay out the plan, you can implement the code. This will prevent getting lost in the code, focusing in the wrong thing wasting time, frustration and all the jazz which makes learning harder. Once you internalize the process you can get rid of explicit comments, although this is helpful technique even for seasoned programmers. All to often we get stuck on details with dim vision, when answer requires just turning around. 2) When you have the algorithm planned out, look up to official javascript documentation. Look up for methods and simply implement, tell the computer what you've already have in mind. It's easier to translate your thoughts looking up into dictionary than to think in a language you're not yet familiar. 3) Stay away from w3schools, it's not a good resource. Use official docs. Just putting this out here. 4) Once you get familiar with algorithm first, code follows, and basic toolset javascript offers, you can start looking into the language itself a bit deeper. I'm not big advocate of internet courses, but there are few good ones. One such is: Javascript: understanding the weird parts. Full lecture is on udemy, but you can find 3 and a half hours free on youtube. Very useful when getting familiar with Javascript the language. 5) Once you get comfortable there are ofc more resources. Recently, this year a very popular collection of resources was posted on github: [https://github.com/leonardomso/33-js-concepts](https://github.com/leonardomso/33-js-concepts) this will allow to delve deeper. For starters I suggest not to worry to much with editors and setting up the environment. [https://codesandbox.io](https://codesandbox.io) is a very good tool for prototyping and experimenting and obviously learning. I recommend it because it also gives you editor with file structure for more editor like experience unlike [codepen.io](https://codepen.io) and similar. A simple TODO app with basic crud actions might be a good start. You can use React preset. Just don't get carried away and focus on functionality over how the thing looks. At this point you should be reading the 33 concepts and looking up the MDN documentation constantly. Once you achieve it, you can actually start building your own environment and perhaps pimp your todo list, by allowing certain users to login, for some only to read data, for others to change data. Along your way you'll meet many hurdles how to achieve your goals and learn along the way, at this point I recommend to set up build tools with your own hands (things like babel) . Just remember, algorithm first, code later and you'll do fine. &amp;#x200B; P.S If I were you, I would try to get working with Go over node for backend. Although it may seem as overkill to learn two languages, and Go doesn't have as much community packages to do work for you, it's actually not that bad of a thing for person who is learning. You have to get your hands on bare metal. That being said, Go is very productive language which is not all that difficult to pick up. Although you can stick with Node, just giving my two cents on the matter. &amp;#x200B;
I like it and it seems like a complex and well made system, however trees don't just stop growing. They will grow at different speeds over time (due to growth nutrient availability), and depending on the surrounding weather will fall over (water exposure will either strengthen or weaken the base depending on amount, strong winds, etc.) and new trees will grow to take their place
This is really cool. I noticed the trees growing at each end of the lake you created.. how do the trees prefer the land they grow on? Also really cool effect of water accumulating at lower altitudes 
&gt; The cornerstone of JavaScript is the function. JavaScript is specified in terms of objects, has richer facilities for dealing with objects than functions, functions are objects but not vice-versa. So, objects are the cornerstone. Callers are free to ignore a function's arity even.
Wow very cool! Love to see these JavaScript audio libraries. This could be something cool to add for a dance music producer's portfolio page.
Well. You could use a simple html table for that. This table you can populate with two for loops. One for the Y coordinate and the other for the X coordinate. The outer loop creates the tablerows. And the inner the tablecells which you give two data-attributes for X and X respectively and a click handler. This handler knows based on its srcElement the X Y coordinate. You then select the surrounding cells and toggle a style or whatever. 
It's small and easy to start with, and it will give you insight into why things are the way they are in the front end space. That being said it's popularity completely waned so don't expect to get a lot of RoI. If you want something more progressive go Vue. Alternatively do a little backbone and then move to Vue.
forget about tutorials/etc. Just set a goal for yourself, I mean define a simple thing you want to make. And start coding. Google for specific questions if any. After some time, you will understand what exactly you need to learn.
Hi /u/isaacdiophant, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `diophant.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [diophant.com](/search?q=%28and+site%3Adiophant.com+author%3Aisaacdiophant+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|23|77% [self.devops](/r/devops/search?q=%28and+author%3Aisaacdiophant+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|2|7% [self.startups](/r/startups/search?q=%28and+author%3Aisaacdiophant+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|3% [self.Startup_Ideas](/r/Startup_Ideas/search?q=%28and+author%3Aisaacdiophant+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|3% [self.hybridapps](/r/hybridapps/search?q=%28and+author%3Aisaacdiophant+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|3% [self.javascript](/r/javascript/search?q=%28and+author%3Aisaacdiophant+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|3% [self.reactnative](/r/reactnative/search?q=%28and+author%3Aisaacdiophant+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|3% subreddit submitted to|count|% :-|-:|-: [javascript](/r/javascript/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|13% [ITdept](/r/ITdept/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|10% [cloudcomputing](/r/cloudcomputing/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|7% [Cloud](/r/Cloud/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|7% [devops](/r/devops/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|7% [hybridapps](/r/hybridapps/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|7% [reactnative](/r/reactnative/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|7% [StartupAccelerators](/r/StartupAccelerators/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|7% [Meteor](/r/Meteor/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [AZURE](/r/AZURE/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [reactjs](/r/reactjs/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [mobiledev](/r/mobiledev/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [appdev](/r/appdev/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [webdev](/r/webdev/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [node](/r/node/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [agile](/r/agile/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [startups](/r/startups/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [Startup_Ideas](/r/Startup_Ideas/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [netsec](/r/netsec/search?q=author%3Aisaacdiophant&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3%
Hi /u/TheTomSawyer, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/HellD, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TheTomSawyer, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TheFuzzyJew, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/toyt2, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Need-a-name1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/git_world, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/RespectableCafe, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Hyponova, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/astromateen, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/IanAbsentia, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/b4b4j1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/lumenwrites, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/hedgehoagies, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/daweasel27, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/pistonian, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Attaching new meanings to the already overloaded getter / setter, which is normally used in OOP context, can be misleading. Can't help attempting to twist this into "accessor on the global application state" metaphor, which still makes little sense given the extensively used random example. Need monads here for further fun.
JS without objects is conceivable — very inconvenient, with alternate syntax, but doable. However, without functions you can't express much of the core use cases, such as asynchronicity and event handling.
So is this supposed to be like the “game of life” where the state of a tile depends on its neighbors and follows rules until it reaches a stable state? How complex are the rules? Guess o should read your links. Very cool looking though so far. 
This is super cool man. I had an idea once a few years back to do an animal evolution simulation similar to this in Java but didn’t implement any neural networks or world generators, just simple priority queues and what not. Awesome to see someone working on a cleaner, more complex idea!
I've been producing music for quite a while and am a newb to JS so this is very interesting to me! Can I ask for an example of how you would use this to do something like changing the background color on a button when the beat is detected?
&gt; And the final conclusion I got? Wasm will probably never be a good solution for "small" tasks like sort of an array, I think that's a bit too pessimistic, "all" that is needed is that at some point we can pass ArrayBuffers. After that a whole lot of options open up.
I do use SSR with React a lot, but it's still generating the front-end (HTML layer) code, just not in the browser. By itself React doesn't give us much in terms of the typical back end functionality, like CRUD, auth, sessions, persistence, HTTP requests &amp; responses etc.
*Medium uses browser cookies to give you the best possible experience.* *To make Medium work, we log user data and share it with processors.* *To use Medium, you must agree to our Privacy Policy, including cookie policy.* &amp;#x200B; False, I don't have to agree to shit. If there is anything the user needs to agree too, there needs to be both an accept and a decline setting. Why is this so hard for site-owners to get right? **Fuck medium.** &amp;#x200B; &amp;#x200B;
Awesome work man. Keep it up
You know, I always find it a bit painful to see how everyone piles on the downvotes on a comment like this. Yes, this user didn't get the joke. So what? More importantly: *we're on /r/programmers here*. Could we maybe try to take into account that there's a strong bias for the kind of people who tend to be very literal-minded and be a bit nicer to each other? I can't speak for this person in particular of course, but *on average* there is a much bigger chance here of someone being neurodivergent and trying to give a helpful response in good faith.
Here's a sneak peek of /r/Programmers using the [top posts](https://np.reddit.com/r/Programmers/top/?sort=top&amp;t=year) of the year! \#1: [Someone's having a shitty Sunday evening at GitHub](https://i.redd.it/cy6wubznfnt11.png) | [0 comments](https://np.reddit.com/r/Programmers/comments/9q9m58/someones_having_a_shitty_sunday_evening_at_github/) \#2: [Funny Quotes that Programmers say](https://np.reddit.com/r/Programmers/comments/a0nepv/funny_quotes_that_programmers_say/) \#3: [How to become a programmer?](https://np.reddit.com/r/Programmers/comments/9xyzf7/how_to_become_a_programmer/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
On top of the other comments: don't forget `asm.js` originated from Mozilla, so they probably have a bit of a head-start here.
This is kind of an arbitrary debate IMO, and could be avoided by rephrasing to “JS has first class functions”
This looks great! I’m building a game engine using WebGL (three) and React. Are you using three? Would be super interested to hear how your experience has been with it and Typescript if so. 
Could you elaborate a little on what exactly this does?
It listens for new messages on configured Messenger chats/Discord channels and forwards them respectively.
I was doing the same, but after sometime, I had to write code looks like in my package. Look at these: [https://gist.github.com/rpgeeganage](https://gist.github.com/rpgeeganage) So that’s why decided to publish it as a public package. When it comes to, create an object using `const x = new SomeClass();` I always have a static method in my classes, so I don't have to create new when I create a new instance :D :D :D eg: ```js class SomeClass() { static getInstance() { return new SomeClass() } } ``` so I can use it like `const x = SomeClass().getInstance();`
That's still backend. Is PHP not backend just because it can be used to create HTML? 
Static class methods 
Looks absolutely gorgeous. Keep going
Yeah, made in Electron. Will probably release a Windows version at some point.
What's the tink button supposed to do?
I guess I need to update my Webpack/Babel config at work so I can finally use static methods.
I wouldn't bother now because React Hooks will be out in Q1 2019 and that'll pretty much be it for class components (unless you really love them and want to keep using them)
Thanks for the info!
Right now they grow faster and taller the more "soil" there is; the ground consists of first a layer of rock, then soil, then grass. The also don't grow where there's water. Too much water also kills the grass, which is why it looks like mud when I "pour" water on the ground for a second until the grass grows back. I want to keep adding details like these, this is just the beginning!
No problem! I recommend following a few React people on Twitter, like Dan Abramov and Kent C. Dodds. Helps you keep up with all the changes. Between hooks and suspense there's been a lot to learn this year and more coming next year. All the new stuff looks awesome too. 
Thanks! Parts of it is similar to game of life, but to me the more interesting part is the behavior of the Pixlings themselves as they're controlled by neural networks, one per Pixling, and they can move around in the world as well. The environment is "just" there to give them an interesting setting to evolve in. Here you can see what the Pixlings look like in another test video: https://www.youtube.com/watch?v=RLhbNwbWSo8
&gt; Is PHP not backend just because it can be used to create HTML? PHP is backend, because it can do all the typical backend tasks I have listed, and a lot more. It can also generate front-end HTML markup on top of all that. &gt; Because it's not a backend framework. On the backend it's a template system similar to EJS. Yes, that's basically what I said.
Nice thank you, I'll check them out. I do follow the React Status newsletter but half the time I just skim through and don't spend enough time absorbing what I read. I am pretty new to React but not new to JS/ES.
Right, makes sense.
You're complaining that React isn't a full framework despite it never tried to be, no one ever said it was, and it isn't on the front end either. If someone wants to learn React and Node, assuming they mean front end and back end is just that, an assumption. He could very well want to learn fully back end.
Tink tinks :( works my side
Thanks! I'm using WebGL directly, not through three. And yeah React for the UI. I would say that TypeScript, for me at least, is a complete game changer for this type of development (compared to vanilla JS). I can change things around quickly and not worry too much about thing breaking because of me missing to rename a variable somewhere or small stuff like that. React is also very nice to work with. Honestly tools are really quite good these days. One of the few things that still takes time from me "unnecessarily" is css and getting layouts right, but other than that I feel like I most of the time can focus on the problems rather than trying to make the tools work.
I just didn't read the article or title and just saw it was from medium and this comment. Complete ignorance as a majority of medium articles are absolute garbage.
Doesn't seem to do anything for me (Firefox Quantum 64.0 on Fedora)
Thanks! Yeah I want to keep adding details to the simulation, for instance it would be nice if the trees eventually die, and maybe if they do it could add nutrients back to the ground and so on.
This is the benefit of a bundler. Nothing webpack specific here.
Sorry, I should have said that it *logs 2*
Yeah that was my one nitpick, really love seeing these growing systems. Your hard work shows in this :)
OK, understood. Thanks a lot for the clarification &amp; the suggestion.
[https://github.com/jacklein/rn-bottom-drawer](https://github.com/jacklein/rn-bottom-drawer) \-- ive been working on a react native bottom drawer component written completely in javascript 
&gt; You're complaining that React isn't a full framework Ummm where did I complain? I have only stated the same facts you did. As a long time React fanboy I think I know quite well what it is and what is it isn't. I don't think I have ever called React a framework. &gt; If someone wants to learn React and Node, assuming they mean front end and back end is just that, an assumption. Yes, there's still the 1% chance they want a template engine for SSR and chose React for no other reason that they have heard about it. I'd suggest go wiith Gatsby then, it's a great project that leverages both node and React to generate static HTML. But hopefully, they want to learn and use node and React to the full extent, which would mean using each tool for its intended purpose, and I think the assumption they want node on the server and React (possibly with ssr) on the front-end is a safe assumption.
Is the source code available?
Is it open source? Would love to contribute
How do you even begin to start something like this? I just "graduated" from a coding bootcamp today and still feel so clueless
I would say. Forget frameworks and focus on es6 classes OOP and js native stuff like promises fetch map reduce etc. Once you master this you can master any framework or library like node and react. 
&gt; React doesn't give us much in terms of the typical back end functionality, like CRUD, auth, sessions, persistence, HTTP requests &amp; responses etc. This is when you complained about React not being a full framework. This is where you acted like these aspects are somehow "missing" from React, despite no one ever saying React should do any of that. &gt; the 1% chance Where'd you pull that figure out of?
Nice! You should add a loop pedal
Awesome work!
&gt; React doesn't give us much in terms of the typical back end functionality, like CRUD, auth, sessions, persistence, HTTP requests &amp; responses etc. &gt; &gt; This is when you complained about React not being a full framework. I think I have simply stated the facts without any value judgement about it being a negative trait (to the contrary, I think it's a good thing that React is focused on what it does best and I wouldn't want it to have an opinion about any of those). If what I said is not true, then please point me to the docs that contradict my statement. If it is true, then in what way is it complaining and not highlighting its strengths and flexibility? So far I get the impression you're trying to argue with me by reiterating the points I think we share an agreement on. &gt; Where'd you pull that figure out of? My arse, of course, but please be reasonable. If they wanted to learn React specifically in the backend context, they would have stated as much.
Fantastic work!
You're trying to argue that React isn't a proper and valid tool on the backend because it's not a framework. In your first response to me you said that you don't use React "for" the backend but "on" the backend (a distinction that doesn't even make any sense). If you aren't complaining, what was your point? What distinction were you trying to make? It's not backend tech because it isn't a framework? It's missing significant features on the backend that exist on the front end? All it looks like to me is that you're complaining that React isn't a framework. If that's not the case, maybe clarify?
Looks interesting - great job
That's incredibly cool! Do you have any proper benchmarks?
Works offline I guess
That's kinda cool. Damn, on mobile I tried to tap two simultaneously but it doesn't do anything.
Why are you stressing the *framework* term so much? You were the first to use it, so please explain why does it matter so much to you. To me it's completely irrelevant, I don't even like frameworks. If I did, I'd maybe be advocating Angular, which is waaaay down on the list of tech I'd want to work with ever again, But to the point. As I said, I use React on the backend to do SSR. Just as you said you do. My point is while SSR is a valid use case for React, it's more likely than not being used to render an app that already employs React on the front end. Also there's more to backend than rendering templates, and React does not have an opinion about approaching typical backend tasks, much less a solution (and IMO it should not, this is not a complaint, just stating the facts). Node with its ecosytem excels at doing those, then feeding React with data to be consumed and rendered, either to string on the server, or to DOM in the browser. The distinction of "for" vs "on" means that I can use React *on* the server, among other libs, to create a full back-end. I wouldn't say I have used React *for* the backend when building a web app, since there's SO much more to the backend that it's not possible for React to cover any substantial subset of the tasks. So *for* the backend I can use node and, say, express or next, and there's React on the backend doing its part as well.
Awesome, do you have any intention of using sunlight to promote/negate tree growth? Would you consider applying a somewhat random coefficient to change growth rate? What about trees outcompeting to grow tall, then casting shadows on trees around it stunting their growth? Also a death cycle to trees and the like. Maybe you’ve considered these things already. Hope you’re having fun it looks like a really cool project 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
oooops
Promises, callbacks, and closures are some of the tougher concepts to master after getting familiar with data structures, classes, and functions. 
&gt;Why are you stressing the framework term so much? Because all of the things you listed that are supposedly missing from React are components of a *framework*. &gt;I wouldn't say I have used React for the backend when building a web app Who said "for" at all besides you? And all technology on the backend is used "on" the backend. It's not like React is any less valid than EJS or Handlebars or something.
Not right now at least, and no immediate plans to make it open source. We'll see in the future.
Thanks :) Performance benchmarks? Not really but once I get into optimizing it I might add some.
Those things all sound like great ideas! Death cycle for them is definitely needed.
Stores.find
Use `Array.find`: `const store = stores.find(item =&gt; item.id === 2)`
That's true, I find myself reaching for `.reduce` more often than I should have to, as an optimization.
What is a use case for this?
If you need a server to run benchmarks on let me know, would be happy to sponsor it. Good luck!
While the problem space discussed in this article is useful for explaining webpack, not sure about these two statements. &gt; JavaScript doesn’t have a module system built-in. But it does. JavaScript has ECMAScript Modules (import / export). &gt; But what is a module system and why do you need it? I think the author is conflation / confusing modules, module loading, and module bundling. webpack is primarily a module bundler which is a built time operation. It does generate a small runtime that could be considered a module loader (shim) of sorts, which allows it to transparently operate with multiple module types (AMD, CommonJS, ESM).
let d = new Date(); if(d.getDay() == 2 &amp;&amp; d.getHours() &gt; 11) { // getDay returns day number (0-6) // getHours returns current hour 24h format (0-23) } However, I would recommend using something like Cron for this kind of things, either executing the script using system's Cron or using a package (if using node you have node-cron for example).
Try IE4 in a VM
Amazing! I really liked your project when I first checked it out but it looks like you've had massive progress. Looking forward to fiddling around with the new version. 
Reminds me of the 808 samples.
&gt;Wondering if something similar exists for Express? Express is pretty simple. Check out their documentation. &gt;I also have a couple questions about Vue. &gt; &gt;Does/Can it replace ejs template engine Yes, but on the client side. &gt;and body-parser middleware? No. Middleware are for server-side, to parse requests sent to the server. &gt;Does Vue replace express as well? &gt; &gt;I will admit I am confused about this. My thinking is that Express is used for the backend and Vue is front end? Correct. &gt; &gt;Am I on the right track? Should I been looking into something different for the front end for a first project with Node &amp; Express? Vue is a good frontend framework to start with. 
Yes
You’re literally doing the same thing structure wise in both examples. 
Awesome. Regarding the first point, just meant an accepted way of storing stuff like configs with API keys, DB connections, other sensitive stuff, and general application structure - not purely for express. I am just following the same thing I did last time, an instance folder with a config.js outside of my git repo. app.js config.js forms.js instance/ models.js node_modules/ package-lock.json package.json routes.js static/ views/ &amp;#x200B;
Thanks. Is there any reason for use the seconde one? or is it just a "good practice" to organize the code?
You can write tests for functions; you can’t really write tests for immediate code.
thanks mate
Yeah, testing and for modularity: you'll never have to write out that bit of code ever again.
Use whatever structure works best for you. For config data on the server, a common way to do it is by using a .env file, and using the dotenv package to load them into environment variables. 
Another one is variable scope. Read up on closures.
Variable scope. Read up on closures.
Appreciate the help
Mentioned above .find will find the first element that matches. If you for some reason had to find all matches you can use filter or map. Stores.filter(store =&gt; store.id === 2); which will filter the array of all the matching objects. Map also works that way but returns a new array.
Filter returns a new array as well, but map works totally differently. It returns an array the same length as the one you’re mapping, but filled with whatever you return from the function.
I've contemplated a move to \`TypeScript\` recently, but I have to be completely honest, I've literally never, ever experienced a bug related to types so I wonder about how much benefit I'd get. I prefer to write unit tests to ensure things don't break when refactoring but even then it's not the types that usually cause problems for me in that case. That being said, the allure of \`AssemblyScript\` potential is high. Any specific reason you decided to not use \`three\`?
Yes. Main benefits are: - reusability - predictability - encapsulation (closure) Wrapping logic in a function allows you to use it again and again anywhere you like while preventing global scope from being polluted, and limits the potential for name clashes and accidental mutations. It also allows you to export them and reuse them anywhere- I'll often write a little library of helper functions in separate modules and batch export them via an index; it means I can import any of them from one place and use destructuring as necessary to grab whatever I need in a particular module
This component gives me exactly what I want from validation. Validators still run when the input changes, but this runs them even if the input never changed and the form is submitted. Without this you would need to run the validators on initial load and have them fail silently then show the error messages when form.$submitted is true. I didn't want to write all of the HTML required.
Who did all art and assets?
This is absolutely exciting! Great job! Do you find certain patterns repeating with your simulation? Like what happens in Game of Life by Conway (which is much less complex than what you seem to have, but which gives raise to some very interesting repeating patterns.)
How did you make the svg diagram on the front page?
I’m still pretty new to it but maybe d3 will work for you.
you're just adding a level of dependencie and confusion for a safety net that probably isn't needed unless you're writing an enterprise app
Maybe try `reduce&lt;Record&lt;string, number&gt;&gt;(...` Typescript doesn't know you want to use the object `{}` as a dictionary of subreddits and counts. Assuming you have types for submissions and comments at that they both have a `subreddit` string property.
Cannot read property 'cook' of undefined. 
You should fire off the sound on mousedown instead, it'll feel more responsive
So I have looked at this in the past only to find beat detection to be difficult to get perfect or near perfect for that matter. Wondering how accurate you have found peak detection using sliding windows to be? I’ve seen it used with FFT but still didn’t find it to be all that accurate
If the router itself validates the ascii in addition to the web UI, you'd need new firmware that removes that validation, which may or may not exist.
I like it a lot due to its functional/declarative style - everything about the specification of the chart is described in one JSON chart that you you can run data from different APIs through. And since it is all JSON, it makes a great compile-to target for other languages. Python's Altair ([https://altair-viz.github.io/](https://altair-viz.github.io/)) makes great use of this structure by coupling \`\*\*kwargs\` to the JSON patterns.
I just want to point out that you won't "be left behind and become irrelevant" if you don't learn TypeScript. Yes it's fairly popular right now, but it's almost certainly not more popular than plain ES6. Only learn it if you really want to and not because you think you have to.
TypeScript is a SUPERset of Javascript which means that any valid Javascript is already valid Typescript. You will want to run the tsc --init to generate a tsconfig.json file. Then make sure to set noimplicitany to false. This will allow most variables to implicitly be the "any" type. Then most javascript should compile without change. You can then slowly begin adding types to variables and parameters and learning Typescript as you go.
`showElemOnClick()` and `hideElemOnClick()` are completely pointless functions in your example. They're entire separate functions that pass an argument needed for the function they call anyways just to separate out the class arg... by putting it in the function name. `const hideList = () =&gt; addClassOnClick('#list', 'hide');` is all you would need and way less "stack trace this down the rabbit hole".
Yeah for sure that's all you would need but I was trying to illustrate a point to an obvious beginner. It wasn't a great example, but I was trying to demonstrate the idea of encapsulating behaviour inside functions using the example OP gave They're definitely redundant in this example, but the concept can apply to situations where they *aren't* redundant. It's pretty standard practise in FP to compose functions from other functions. Also it's not necessarily a bad thing to have explicitly named functions when you're working on a codebase with a number of other people. If I've got a bunch of methods in a module and batch export them, it's easy for someone to tell what's going on while minimizing the chance for bugs. For instance, those two redundant functions would be useful for performing a specific action on a specific type of element when you don't know the target ahead of time, but want to save whoever else uses it the time of having to go look up the name of the CSS class. Also by writing `const hideList = addClassOnClick('#list', 'hide');`, you're actually calling `addClassOnClick` and assigning the return value (in this case, `undefined`) to `hideList`, while still firing all the side effects. It would run once and then you'd have a useless `undefined` value polluting your global namespace You'd want to pass it as a callback, like so: `const hideList = () =&gt; addClassOnClick('#list', 'hide');` So that you can call it like: `hideList();`
Well, at least I can commend you for your honesty. And I can't really blame you for that overgeneralization about Medium articles either, I guess. This one is pretty good though, assuming the topic interests you
First, vanilla Javascript. Pure, simple vanilla. No jQuery monkey business. After that, sky is the limit. Learning React literally takes a few days having a solid JS base and good knowledge of how a browser works. Angular is a bit more involved. 
Yes.
The first answer of this thread will probably lead you in the right direction: https://stackoverflow.com/questions/32265207/drawing-svg-with-mouse
Depends on your job market. Search for some vacancies, figure out which framework is more popular in your region, look over skill requirements and such. Honestly, learning their basic is not gotta take you much time and you'll probably have a preference once you write a couple of simple pages with them.
This is it. Also, if what you want to reset is the state of the game, you should decouple it completely from the logic of the game. If you’re storing it in SQLite or similar, have a cron process do that. 
You either need to store the last reset date and then see if the currentDate - lastResetDate is more than 7 days, or store the next reset date and see if the current date is after that. You can't simply check if the current date is a Tuesday because you can't guarantee that the app will be opened by the user on Tuesday. You can't simply check if Tuesday has passed without knowing which Tuesday.
I cannot agree more. When you know Javascript, I mean, really know it. You probably will find React or Angular probably not necessary. 
Thanks for sharing! Great advice.
huh?
I did! With some tips and pointers from friends who are better at this than me
See the answer above
&gt; I have been struggling with them with real projects. Now I realized these frameworks will never make things any easier. Woah, woah, woah hold on. Let me be clear on something: You don't need a framework for your resume site, or simple blog. But the reality of complex software is, the more complex the software becomes the more your code trends towards a library. Except it's a shitty library, generally, because you re-invented the wheel with a single use-case in mind.
You need to understand the different between framework and library. I assume you understood it. When you use a library, you reuse it over and over again, you control it. When you use a framework, you are controlled. These frameworks won't be relevant pretty soon. These frameworks are great for their hello world samples, anything more complex with these frameworks will end up more difficult than pure Javascript. Think about it this way, the whole things is about 3 things when you got a box/div, 1, style it, 2, position it, 3, attach events on it. These 3 things seem simple, but they are actually extremely difficult to do right. These frameworks are trying to hide some details from you, but introduced even more problems. 
I think you have it exactly backwards. Hello world samples are terrible because whatever framework you use for them will be overkill. It's actually with more complex apps that their value becomes apparent. But you'll need to look a bit past a simple box/div to appreciate that, because that's a solved problem no matter what you use.
&gt; You need to understand the different between framework and library. I assume you understood it. You assumed correctly, because I do understand the difference. &gt; When you use a library, you reuse it over and over again, you control it. When you use a framework, you are controlled. But apparently you don't. A framework is a collection of opinionated libraries and nothing more. &gt; These frameworks won't be relevant pretty soon. Much like Spring and Django have become irrelevant. Oh wait... &gt; These frameworks are great for their hello world samples, anything more complex with these frameworks will end up more difficult than pure Javascript. Wat. Using a framework for hello world is the literal worst use-case for it. You can print hello world with one line of code. Installation and bootstraping a framework is insane. As I said before, doing something complex without a framework (even if it's just a collection of well-supported libraries) is both reinventing the wheel and, once again, you are creating a framework by doing all of the underlying work yourself, but your framework is objectively worse. &gt; Think about it this way, the whole things is about 3 things when you got a box/div, 1, style it, 2, position it, 3, attach events on it. Um, no. What you've described is a view library. That's 1 piece of the puzzle. &gt; These frameworks are trying to hide some details from you, but introduced even more problems. They certainly *can*, but if you think you can design your own framework (which you will, eventually) and it's better than existing solutions, you have an ego problem. And for the record, React is *not* a framework. It's a view library. My "framework" generally consists of React, Redux, GraphQL, etc. The composition of libraries is still a framework, it's just less opinionated than Ember or Angular. Your attitude is something I've seen a lot of the years, and I expect it from a junior or low mid-level. One of the key components is thinking you're smarter than these silly framework developers. And your attitude suggests exactly that.
Very nice bro. One thing I noticed is that when you long press on a button, the transition get stuck.
Box/div is not simple, they are the essential part of the whole story. People tend to rely on the frameworks unrealistically when they actually cannot handle the box/div properly. Once you can handle the box/div, you probably won't need those frameworks.
Love it! If you can, I recommend making the snare sound a little louder. I was messing around with a basic backbeat kind of pattern, and couldn't hear the snare at all over the hi-hat.
&gt;You need to understand the different between framework and library. I assume you understood it. &gt; &gt;You assumed correctly, because I do understand the difference. &gt; &gt;When you use a library, you reuse it over and over again, you control it. When you use a framework, you are controlled. &gt; &gt;But apparently you don't. A framework is a collection of opinionated libraries and nothing more. You actually don't really understand the difference between a framework and a library. The essential difference is a framework calls your code and you call a library's code. 
&gt;Your attitude is something I've seen a lot of the years, and I expect it from a junior or low mid-level. One of the key components is thinking you're smarter than these silly framework developers. And your attitude suggests exactly that. Well, all I can say is it takes one to know one. The one who developed these frameworks are super smart. My point is these frameworks are the fun toys of these smart people. I just happened to have used all of these frameworks for many projects. That's the reason now I appreciate things without these frameworks. I'd always call myself a junior or low level developer. I only thought I was a senior developer in the first few years of my code career. 
Pedantic academic definitions are a joke. Modern colloquial usage of the term *library* has nothing to do with inversion of control. That's why Facebook calls react a view library, because calling it a view framework is silly semantics that contributes nothing to the conversation. And I like that you contributed nothing to this aside from being a pedant. The fact remains that you think you're good enough to write a better "view framework" than React, because it gives you control. We had that madness for a long time in the frontend ecosystem, and that's why the web is a sea of dog shit technical debt.
What exactly do you mean by instancing and how is it faster than primitives?
Those fun toys are being used at the largest most influential companies in the world. It's that dismissive attitude, even calling them toys, that makes it so clear that you take yourself way too seriously. I've used everything from pure vanilla to Backbone and Knockout, to the modern frameworks of today. And if there's one thing I've learned along the way, it's that the more control you give to a developer, the more likely you're going to end up with a nightmare. 
I appreciate you calling me a pedant. I never thought I'm writing a better view framework than React. All I wanted to say is my life is easier without React/Angular. Well, although Angular/React will not be relevant pretty soon, I mean there will be a even better one, and even even better one pretty soon, they contributed to the slow evolution of the web. Regarding the sea of dog shit technical debt, I don't think it's because of the pedants perusing control, it's many people over looked the simple box/div manipulating, because they believe frameworks will help them. 
Monaco? 
&gt;Those fun toys are being used at the largest most influential companies in the world. It's that dismissive attitude, even calling them toys, that makes it so clear that you take yourself way too seriously. Name one of the most influential companies in the world that use these frameworks for a influential project please, just a single one. &gt; And if there's one thing I've learned along the way, it's that the more control you give to a developer, the more likely you're going to end up with a nightmare. Well, I cannot argue with you for this point. Yes, it could be 1000 nightmares, and probably/statistically one will be a good one. 
It's funny this thread started with agreement. We all agree developers should be able to properly handle the basic HTML elements and all the subtle complexities that come with those. And I don't think anyone here disagrees those are essential. The thing where /u/soft-wear and I think you went overboard is the moment you suggested dismissing the frameworks once you understand the essentials of JavaScript and HTML. Maybe you're not in the same boat, doing the same kind of development we do. But once you build complex applications with many layers of abstraction, those frameworks still provide a lot of value. I do agree some developers focus too much on the frameworks and because of that fail to get a good grasp on what really matters and what might be appropriate *for their specific use cases*, but that's a reason to dismiss the frameworks altogether.
Thanks! No not really to be honest, because there are enough things that kind of make it random how things play out
Instancing is a graphics programming technique where you take a primitive and ask the graphics card to draw it many times (usually in different locations). 
To anyone looking for hooks right now, just point to version [16.7.0-alpha.2](https://www.npmjs.com/package/react/v/16.7.0-alpha.2): "react": "16.7.0-alpha.2", "react-dom": "16.7.0-alpha.2",
Thanks!
Agreed. You might get some acceptable result by using these frameworks, especially you work with a team of developers with different background. But you won't get the best result, not even a good result, I doubt. When these framework's major version advances by 1, your project basically died, or became legacy. But who cares, you got your money and jump to a new one. And when a new framework is born, people start to worship it, and that repeats.
I created blocks and circles using Inkspace, then paths, styles and transitions were added in a code editor ([https://codepen.io/Ni55aN/pen/NzdQpG?editors=1000](https://codepen.io/Ni55aN/pen/NzdQpG?editors=1000))
Netflix, Instagram, WhatsApp, Amazon Advertising, New York Times and almost all projects at Facebook proper are built on React. Walmart.com, The Guardian, PayPal, Google News and parts of Gmail are built on Angular. LinkedIn is entirely built on Ember.
Theres a obviously a lot of reasons, but I think a fairly important one is this: We are always making trade offs between performance and ease of development. As long as your application runs as fast as you need it to on the majority of devices, the practical choices to make are on the side of ease of development. Thats why companies are using things like electron/JS to develop desktop apps instead of low level languages that would run faster but at the expense of ease of development. &amp;#x200B; &amp;#x200B;
Hmmm.
When I google for 'does Netflix use React', I got this: [https://jakearchibald.com/2017/netflix-and-react/](https://jakearchibald.com/2017/netflix-and-react/)
You can use [https://carbon.now.sh/](https://carbon.now.sh/)
It's a tradeoff between easier development and more efficient programms. However, don't forget that computers are getting way more powerful as well. 
doesn't support LaTeX 
If you're using VScode try [https://marketplace.visualstudio.com/items?itemName=pnp.polacode](https://marketplace.visualstudio.com/items?itemName=pnp.polacode).
Thanks, I’ll have to read up on that.
That's precisely it, and its nothing new, it's been that way since the 60's, every generation of programming language, every generation of tooling is one step further from the metal, being faster to develop in and less complicated to engineer, fewer concessions given for optimization because the hardware can be asked to do more work because we simply have more of it available, you don't need fast/small/complicated to write if slow/large/simple to write performs just as well on a modern PC vs2017 has a lot of helper features vs6 didn't have, semantic coloring, reference highlighting, intellisense auto-completion, the command palette, themes, language validation, multi-cursor selection/editing, symbol peeking, and so many more, each of these is a concession of feature over performance (themes honestly being a bigger concession than you might expect). Would vs2017 run well on a 200mhz pentium 1? hell no, but does it need to? hell no. Languages are the same, asm-&gt;c-&gt;c++-&gt;c#, there are a lot of things in C# that we just don't have to worry about the simplest being pointers, does C# support them? sure to a limited degree but C was based around them, you could do some fancy tricks in C that you can't in C#, but you can develop code in C# a lot faster and a hell of a lot safer than you can in C. I can't imagine even attempting something like Notepad++ in ASM but it's almost trivial in C#. But the tooling generations took advantage of the language generations, VS6 was C++, VS2017 is mostly C#, it was faster to develop, faster to extend, and a lot more stable but at the cost of a less performant interface when compared 1-1, but modern systems have the performance to spare, your cellphone has twice the horsepower and ram than VS6 was designed to run on. If you went back and asked someone in 1998 if javascript could productively run as a server-side language they'd laugh in your face, but today node.js is almost trivial, but that came with tradeoffs, V8 was a step backwards in terms of development simplicity but it was done for performance with C++, that means it took more effort to develop than if it was done in a higher level language but it runs much faster, something we can leverage to run node.js and run performant-enough javascript server-side, would a native C CGI app run faster than node.js? sure, does it need to? not usually.
Thanks, your answer surpassed my expectations.
I love it!
Fun.
Long needed, hope it becomes a reality.
nice!
[removed]
That boom is really cool \^\^
I love how they defined "--save" in the npm installation, how do they not know it's not needed anymore lol
I think I looked at vega few years go it looked way less complete feature wise, I was using c3.js back then which took a similar approach, but uses d3 under the hood.
Seems like a good idea. I would like to see a discussion of what sort of modules would be in such a library. The &lt;virtual-scroller&gt; example seems to suggest they’re talking in terms of user interface level?
I'd also like to see entropy and heat death of the universe taken into account.
I just looked at the README, so didn't see anything about components like scrollers. But I hope that's not true. A lib like this shouldn't do that. And what about server side JS?
I wouldn't support the idea of importing simple things like a len function that gives me the length but I would support things like Date, Maps, Sets etc. Because these are things that aren't used in everyday programming and therefore can be ommitted if not needed.
I didn't see such an example, but this leads me to understand that they're explicitly _not_ thinking about UI level, but of things like `Array.prototype.flatten`: &gt; Such a library would only cover features which would be useful in JavaScript in general, not things which are tied to the web platform. (A good heuristic: if something would make sense on a web browser but not in node or on embedded devices or robots, it probably isn't in scope.)
I think that code already is valid TypeScript. The issue probably is with `submissions` and `comments` variables, which might be untyped. With the following code added before yours I get no errors or warnings: `interface InterfaceWithSubredditField { subreddit: string, };` `const submissions: InterfaceWithSubredditField[] = [];` `const comments: InterfaceWithSubredditField[] = [];` `subredditPostCounts` still might not have proper typing, since reduce can't correctly deduce it. You could use spacejack2114's answer or add an interface to describe the `subredditPostCounts` with: `interface ISubredditPostCounts {` `[subredditName: string]: number` `};` and `const subredditPostCounts: ISubredditPostCounts = [...submissions, ...comments].reduce(`...
I think this would encourage a clunkier programming style unless it also provided fp implementations (curried with data last) for use with the pipeline operator. I’m all for standardization, I just don’t want to standardize on a crappy pattern. If we aren’t using prototype, then it can’t be chained, so it really needs to support pipeline.
Connecting communities from 2 platforms, using Discord instead of Messenger for private accounts, etc.
I don't think we looked at the same thing?
Except when you have to work with multiple people on a single project, in different locations and timezones. Suddenly constraints, rules and even opinions of libraries and frameworks provide a stable platform of conventions on which to work on. Of course if **you're** the person leading the project and the budged, then there's less of a problem. Honestly though, I doubt a person who has just learned javascript would have a big team of coders in his team under his command.
Ewwwwww. No thanks.
I can't answer for OP, but I would assume it takes many iterations to get to this point. In the beginning there probably was a much simpler and primitive prototype, with a not so beautiful UI, and then you build from there, one improvement at the time. Like I said, I can't speak for OP, but I'm also working on my own side project that has gotten pretty big and complex at this point, and for this I started out simple.
Hi hevino819, actually I tested this library on Node.js. It should work on browser but you have to replace `create-music-stream` library with a new one that doesn't use some native libraries (create-music-stream uses lame and ffmpeg). &amp;#x200B; What I can suggest is to run this example [https://github.com/chrvadala/music-beat-detector#example](https://github.com/chrvadala/music-beat-detector#example) on Node.JS and send detected peaks on a browser as as events through websocket. &amp;#x200B;
Thanks a lot!
I think its mainly because of bad written plugins AND some basic wrong editor design decisions. So basically, we are going wrong way as devs/proggers. Its like the internet: Everybody can shout out into the world, unfortunately, everybody is doing so. &amp;#x200B; I think the best example is working with big files (1 GB or more). There are just few editors that can handle big files with ease. Most editors just crash or take forever.
Probably this algorithm doesn't work with every song and sometimes may require some different settings. Now the default is a lowpass filter to 350hz and a threshold reduced to 60%. A better algorithm should use a non linear threshold that follows the wave. It may calculate the signal envelope and then apply the peak detection. So, I have some ideas but I need some more time to study and apply those concepts. In the end, this is just the first version :) &amp;#x200B; &amp;#x200B;
Cool idea. Here's the best I could do, in 107 characters. I don't feel the double equals is needed at the end but if you really want type checking here, it'll be 108. (E=(e,f)=&gt;E[e]=[...E[e]||[],f]).e=(e,m)=&gt;(E[e]||[]).map(f=&gt;f(m)),E.r=(e,f)=&gt;E[e]=(E[e]||[]).filter(F=&gt;F!=f) 
Look at the [https://greensock.com/svg-tips](https://greensock.com/svg-tips), it's a pretty awesome library. Good luck ;)
 &gt;Would be really nice if there was an official place to give people recommendations for a more complete standard libary &gt;There's a whole lot of donation languishing in repos that gatekeepers don't look for &gt;JS could be an amazingly easier language with very little work on anyone's part if the gatekeepers would facilitate donation &gt;In erlang, for example, there is a bug tracker where I can go, add a ticket with some code and some appropriate tags, and if my code isn't garbage and makes sense, there's a good chance it'll show up in the next standard library under some very different name &gt;Javascript should have a process for letting people who aren't friends with standards maintainers be helpful too https://github.com/tc39/proposal-javascript-standard-library/issues/16#issuecomment-448650728 agree with this guy completely: there is so much gatekeeping happening in the javascript community now, i'm worried that this standard library will just add sugar for the current flavor of the month coding style
Yes, yes and thrice yes!
Blazor doesn't compile your code to WebAssembly though. It compiles is to .net bytecode which is executed by Mono which runs as WebAssembly in your browser.
Nope. The whole idea is to, well, include more useful stuff to make js more usable across all potential environments (so not just web and node). As you might say scroller doesn't fit into this description.
This is getting silly, Netflix uses React: https://i.imgur.com/fyR3CJM.png So does half the relevant web: https://github.com/facebook/react/wiki/Sites-Using-React
Any challenges when working with webGL + react? Also, with typescript what things do you need typed when working with webGL? I've only used three.js so I don't really know entirely what goes on behind the scenes Do you have any recommendations for learning just webGL?
I hear ya, insert relevant xkcd comic about "we need a standard". &amp;#x200B; Noobs gonna noob I guess, but "design by committee" is how we got here in the first place. And if writing a generic map or len are outside your skillset, I'm gonna wonder what you consider programming. and the example is a gorram syntax error! Voting no confidence here. const mp = new Map([["e", 8], ["n", 9], ["z", 0], ["o", 1], ["t", 2]); 
That's pretty sweet. I'll definitively use it for when I need a logo. I'm not too great at design
Very nice, glad to see you managed to minify it further! Worked fine in Node as well as from Chrome, Firefox, and Edge's consoles. :)
That's a pretty accurate description of my process too :) This all actually started out as something completely different. If anyone is interested there are also a few early videos of what this looked like a few months ago on my channel: https://www.youtube.com/channel/UCTCxqbkJPNO6szrzTu64iCA/videos
JS already has a standard library by every definition of the term. You use it every time you use e.g. Array.map(). (Heck, their example of a function that would be in the standard library is map.) Why formalize a second route for these standard library functions? 
Yeah I'm not sure if it's so much using types to avoid bugs, it's more that I can easily refactor (right click a variable and change name everywhere, and trust that it will work). Which in itself helps avoid bugs I guess. The reason I went for webgl was actually first of all because I wanted to run the simulation on the GPU (i.e. not the graphics). Then it was just easy to also render it with webgl since everything was already on the GPU.
And for terminal-snippets: [https://github.com/faressoft/terminalizer](https://github.com/faressoft/terminalizer)
To be honest I don't really "mix" webgl and react much. I'm just using react for the UI. The "world" is all in webgl. Typescript doesn't help too much when working with webgl since opengl has this internal state machine thing so, so you anyway have to manually keep track of what you're working with. I knew opengl before webgl so didn't need to do to much learning, but this site has been useful to me: https://webglfundamentals.org/
I just have one tiny thing, please add "user-select: none" to the pads :D
About your last question: It's because innerHTML, indeed, is not a function. It is a attribute, so you can't pass the value as a parameter: &amp;#x200B; `close.innerHTML = 'x';`
The proposal outlines why they think it's a good idea. The primary motivator is being able to preserve backwards compatibility - see also the `Array.prototype.smoosh` drama (i.e. TC39 not being able to implement `Array.prototype.flatten` because too many websites already used that namespace and hence would break).
Tell me if you use it :)
This would be better, if one could just select the font in the page and get a real-time preview. (Shouldn’t be too hard, since there is an API for Google Fonts). Also it would be great to be able to (optionally) output svg.
Thanks for your advice! I am working on SVG export.
Alright, thanks! I'm not quite sure how I would make the program change the value of "lastResetDate" since every time I save and run my program it doesn't save any information gathered in the last test run.
Hello, I feel that because post unique content generated by our organization, relevant to the groups where I post it, and do participate in discussions usually without any sort of self-interest, my posts, in general do not qualify as a spam. I do get lots of upvotes on some of the posts. This one in particular would have been exceptionally useful, in my option, and was above average qualify and uniqueness, for the content of content that I and other post on Reddit. Does not mean there are few high-quality posts, but the one in question is definitely in the top 3% or maybe 5%. I do respect the fact that have been a member for a while. I will no longer post to this group, unless an administrator directly contacts me and asks to reverse this policy. Respectfully, I will post where appreciate our unique content intended to help programmers be better at what they do, without any sort of expected payment etc. Seems like a community "sort of thing" to do. Personally, I think that as a moderator, you should encourage people like me to share high-quality unique content, relevant to your groups. There is bad about me sharing that we make at work, without hiding in any way that the content is connected to my work. Since Reddit is a community, there are plenty of things that sometimes go wrong, like hate groups etc. I understand that side effects of giving people voice, and a part of democracy. Original relevant content coming from an employer paying people to do Open Source and again paying programmers help other programmers to get better, is not the Reddit problem nor the JavaScript group's problem, in my opinion.
parallax on mobile very rarely works well, so it's not really a necessary feature. additionally, Rallax.js provides a significantly more robust API that you can use to create dynamic effects, including automatically stop/starting the effect, changing speed on the fly, etc. &amp;#x200B; btw I made this plugin haha. TY to OP for posting here XD
Hmm. Ok. But close; returns "&lt;button class="button-close"&gt;&lt;/button&gt; so it IS an html element therefor i should be able to set an attribute? Does close.setAttribute('innerHTML', 'x'); work perhaps?
I thought this was going to be some dork proposing to his gf via Github
Very good intro to instancing here https://learnopengl.com/Advanced-OpenGL/Instancing 
No, because innerHTML is an attribute from the DOM API, not the HTML element. `close.setAtrribute('innerHTML', 'x')` will probably return an error because there isn't an attribute named 'innerHTML' in the button tag (`&lt;button innerHTML = 'string'&gt;&lt;/button&gt;` don't exists). You want the x inside the button tag, so using `close.innerHTML = 'x';` will return `&lt;button innerHTML = 'string'&gt;x&lt;/button&gt;`
Thanks for saying so
Almost immediately after you said this, the maintainer went through and closed all of my tickets, linking them back to #16, where he had already told me to go away `:(` I really wish JS wasn't in the hands of people from the internet who just yelled the loudest. There are mature, responsible hands who would focus on improving and extending the language in small, important steps, instead of wasting years trying to replace callbacks over and over again
Three. Gets *way* more support and real world use. [It is faster](http://www.diva-portal.org/smash/record.jsf?pid=diva2%3A1228221&amp;dswid=3446) as well. It looks like Bablyon [never took off](https://www.npmtrends.com/babylonjs-vs-three).
I didn't realize Reddit was funny enough. Also forgot Airbnb, Lyft and Uber are all React too.
And I just got told to "immediately moderate my tone" because I said "I really wish you'd stop closing my tickets." Granted, we know who they won't kick off TC39, and what that person says about women, but, apparently "I wish you'd stop closing my tickets" is going too far. TC39's champions model is the death of Javascript
Updated: You can now select the font in the page!
Hi /u/aientech, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/sebbosh, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/nulleq, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/kruyerl, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/bhuwanadhikari, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt;there is so much gatekeeping happening in the javascript community now This is the case for *all* standards groups, and it has *always* been this way. You absolutely must have a famous name in your email address in order to contribute. Probably because the amount of stupid is so enormous on an open forum, that you need some kind of fast qualifier for contributors. Unfortunately, this means the few smart randoms who wander in will be ignored also.
[https://github.com/micheleriva/mjn](https://github.com/micheleriva/mjn) \- I know it's simple, but still really useful!
Who cares what anyone "says about women?" JavaScript isn't a person.
&gt; Granted, we know who they won't kick off TC39, and what that person says about women, I'm out of the loop here.
This will be an awesome way to get our code out of the oft-polluted global scope, if nothing else. Then, new built-ins can be named sensibly, instead of being beholden to the global scopes of the Alexa top 50,000.
Hi /u/yako_c, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
[https://i.imgur.com/EOTQu0k.png](https://i.imgur.com/EOTQu0k.png) Now that's my kind of spaceship!
&gt; This is the case for all open standards groups, and it has always been this way. You absolutely must have a famous name in your email address in order to contribute. This just isn't true. I've made contributions to dozens of languages. I do not have a famous name. Most programming language communities I'm part of aren't like this at all. . &gt; you need some kind of fast qualifier for contributors. If you had seen the relevant ticket, [where there's a giant wall of code and text](https://github.com/tc39/proposal-javascript-standard-library/issues/39), I think you might have thought about this situation differently. My opinion is that there was already a fast qualifier - the text
I really prefer the function bind operator, but that will probably never become reality :(
Also, you’re not keeping variables in scope any longer than they need to be. Less need to worry about namespace collision, garbage collection, etc.
You outside getObject function doesn’t return anything and therefore rec is undefined. 
Well actually Babylon.js is also used by big brand like [Adobe](https://theblog.adobe.com/behind-the-scenes-with-adobe-dimension-engineers-how-we-built-the-3d-publish-feature/) or [SharePoint](https://www.exploresharepointspaces.com/). People from Sony also gave a [great feedback on why Babylon.js](http://www.html5gamedevs.com/topic/37703-babylonjs-vs-threejs-choosing-a-webgl-framework-for-sony/?tab=comments#comment-215236). Three.js is more widely used but Babylon.js has an excellent and really reactive community. Issues on the repo are fixed and published in less than 24hours. On the DiVA pdf I could argue that Babylon.js is always less CPU intensive and more GPU intensive which is better if you consider battery or mobiles devices. Furthermore I was not able to find the code so we don't know if the Babylon.js code is used correctly or not. Regarding language Babylon.js is developed with TypeScript
Nice job. Handy little utility. 
You haven't posted any code that would help us figure it out.
I tried changing it to async function getObject(param) { $.getJSON(URL, (data) =&gt; { // received data and doing some operation with param return data }); } let rec = getObject(param); rec.then((db) =&gt; { console.log(db); }) But "db" is always empty. Is `.then()` supposed to be used here?
Adding a last one from slant: [https://www.slant.co/versus/11077/11348/\~babylon-js\_vs\_three-js](https://www.slant.co/versus/11077/11348/~babylon-js_vs_three-js)
It's a little tricky to mix async and jQuery, but the first thing to bear in mind is that you will _not_ be able to have getObject synchronously return the object that is loaded. There will always be a delay and you'll have to deal with that delay, either through `then()` or `await` if you're calling getObject from within another async function. Being async, getObject will always return a promise. That promise will resolve to the value returned out of the async function. Right now, however, your return is not returning from getObject, its returning from the getJSON handler (`(data) =&gt; { ... }`). What's returned from getObject is nothing, which amounts to undefined which is what rec will resolve to, being the promise that it is. I don't think jQuery has made getJSON thenable, taking a quick look at the [jQuery getJSON docs](https://api.jquery.com/jquery.getjson/), I'm not seeing any references to `then`, so returning the getJSON call directly probably won't work. So instead, you'll probably need to wrap that in a promise. async function getObject(param) { return new Promise((resolve, reject) =&gt; { $.getJSON(URL, (data) =&gt; { // received data and doing some operation with param return data }) .done(resolve) .fail((jqxhr, textStatus, error) =&gt; reject(error)); }); } let rec = getObject(param) .then(...) // successfully loaded .catch(...); // failed to load
You haven't shown the code where `db` gets assigned so I am going to take a guess here. Odds are you are loading `db` with an async call and you are logging its output *before* it gets filled. Some browsers have a really weird (broken) console where it doens't look up the value of something until you ask for it do be displayed, so you see the value *at the time of viewing*, not th value at the time of logging. To see if that is the case, change to a console.log(JSON.stringify(db)); 
Okay, I'm sorry, but I didn't realize it was because of the async function of $.getJSON (jquery). I posted another question here about returning the results of $.getJSON in another function: [https://www.reddit.com/r/javascript/comments/a80esk/with\_jquery\_how\_do\_i\_get\_json\_externally\_then/](https://www.reddit.com/r/javascript/comments/a80esk/with_jquery_how_do_i_get_json_externally_then/)
Yes, you are right. In fact, I just posted a [question on that earlier](https://www.reddit.com/r/javascript/comments/a80esk/with_jquery_how_do_i_get_json_externally_then/). Thank you for your help!
Both are great. I spent a while in Three, but then got lured into Babylon when I visited MS. What kept me in Babylon was the fact that its more a complete package from the start, whereas with Three I remember having plugins for everything and having to manage tons of disparate JS files to run any given example. That's not to knock Three of course, I can imagine advantages to their approach for lots of cases, but to just get a 3D engine off the ground, dive in, and do your own work without worrying about extras that Three core doesn't have, I really think Babylon wins out. Overall, I just don't think you can go wrong with either.
Thank you for teaching me about promises. Your solution worked!
They probably use yarn bc its a Facebook technology. I use yarn primarily, and didn't even know --save is optional now on NPM.
I was really hoping for this kind of spaceship: &gt; 3====D;;;;;;;;;;; 
Freaking sick!!!!!
You could use [MongoSluice](https://mongosluice.com/). Self promotion here but it works nicely and addresses the problem in a unique way. There's no mapping. No manual stuff. Just set source and target and this software creates a schema (by going through every single document) and then streams the data into a target db. What questions do you have? Would love feedback!
Easy pick: Babylon.js - API doesn't completely change every 3 months which helps when looking up older solutions online - Very active and helpful community - Very active and helpful developers (Three.js: oldest bug on GitHub from April 2013, Babylon.js: oldest bug on GitHub from 2 days ago) - The playground is such a great tool to try things out quickly, explain issues and provide help
Thanks! Might take you up on that when it's time :)
Sure, [Freecodecam](https://Freecodecamp.org)p.org underneath the javascript section, there is an es6 part that's fairly helpful.
Also note that you don't need to declare the getObject function as async because you never use the await keyword inside the function(you instead directly return a promise)
Okay, thanks for telling me!
It's BabylonJS we use at our studio. We decided to stick with it after trying both. I must say there's a lot of great features around ThreeJS, but it's not suitable for a proper pipeline since it's API changes too much, and the lack of proper documentation. ThreeJS lacks structure. On the other hand, BabylonJS is supported by Microsoft and professionally maintained. It also has support for Typescript, which is a must for creating and maintaining big applications overtime.
very nice. it's like _.get, but i imagine lighter and you don't need to install the whole lodash library (i know _.get is my top used function from lodash)
Ah right! I just use js refactor in Atom and it seems to work good but maybe it’s faster in VSCode. Hmm so you wanted to run all the code on the GPU? Interesting. Have you seen [GPU js](http://gpu.rocks)? I’ve been meaning to try this out for a while but have not gotten around to it.
Babylons loaders have always just worked for me where as the three js loaders often require me to do a little massaging. Like stuff will just randomly import all over the place sometimes. Three is always changing so this could be outdated and maybe they have added some of this, But its just a lot easier to get common use cases done in Babylon. The cameras come with nice physics effects by default, it has built in events set up for things like clicking models already. It just seems more buttoned up and professional to me, where as Three feels like a cool experiment. I get that it has a smaller community but the lead devs have answered my questions personally on the HTML5 game dev forums before so the quality of the community is at least high. 
Well that one is canonical. 
thanks i like it 
I'm a non-pro here, so i'm not "in the know" for these things . . . But what about some sort of meta-data? For example a "version.json" file, or a global prototype, or even use \`"use ES7"\` that sets the interpreter appropriately? A script with \`"use ES7"\` at the top would let you use the published \`Array.prototype.flatten\`. If missing, it would assume ES3 or whatever. I'm not smart enough to have all the answers to any of the follow up questions, but it's the kind of thing that a governing board should be able to do... determine what the limitations and parameters should be to minimize the effect on legacy use.
where does the pilot sit?
but needing to manually import Date wouldnt break anything?
I don't see why it would - there is no existing code that does `import { Date } from "std:Date";`.
Yeah, but no. Because this magic lib will bring more problems that it solves, with no doubt. 
Yeah I've seen it, but haven't really tried it. It looks very cool though! 
I dont understand. why would you need to import it manually if it already exists in the global scope?
? They made Promises and that's all. Or you can use RxJS but its a library and it wont ever be in vanilla.
[This post](http://2ality.com/2014/12/one-javascript.html#strict-mode-and-ecmascript-6) goes into some detail, but it primarily comes down to such statements effectively forking the language, resulting in browser makers having to support and ship different versions of the same language at the same time, and spec implementers to take into account the nuances of the different specs as well. In effect, I think this proposal is fairly similar to what you're suggesting, only more granular. Instead of developers opting in to specific versions of the language, they opt in to specific features. The primary difference is that the proposal ensures that there is no overlap with exiting features, so browsers don't need to explicitly differentiate.
No problem! They also have a react section that I thought was helpful. :)
alternative to this? [https://github.com/facebookincubator/idx](https://github.com/facebookincubator/idx)
&gt;Generic Functions &gt; &gt;import { len, map } from "std:builtins"; They want to include lodash to basic library? What about jQuery? Oh... wait\~ &amp;#x200B;
Thanks for your answer, I guess you're one of Babylon.js developer, so I really appreciate your involvement in this discussion. I have a question, do you know why platforms like vectary.com or clara.io have chosen to build their engine over Three.js rather than Babylon.js? Is it a better choice when it comes to 3d modeling?
n
What you did is called marketing. Not coding.
Instead of setting the value of the cookie to true, set it to the iframe.src, then you could compare your Cookie to the current src of the iframe.
So pretty much the same thing that is on the Google Fonts site. You enter the text and try out different fonts.
[https://github.com/selfrefactor/rambdax](https://github.com/selfrefactor/rambdax) \- Extended version of FP library Rambda.
I kind of doubted this at first, but a small script with `import get from 'lodash/get'` works out to 7.5k, while `import get from 'mjs'` works out to 1.4k, so way smaller. `import get from 'lodash/fp/get'` works out to 48k, for those wondering. That said, I think most non-library projects would benefit from having the entirety of lodash anyways, so I don't see that much of a purpose in mjs anyways, but that's kind of cool regardless.
&gt;This just isn't true. I've made contributions to dozens of languages. ^ This happened.
If it's running in a browser, the simplest solution is to use localStorage.
Hi /u/zimnydark, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
promises, generators, async await, web workers, async iterators, yield, et cetera
Pretty much the same thing on most font foundry's sites, to be fair. Almost all of them have the ability to stage your own text with their fonts.
I can't speak for them but clara.io for instance was created before babylon.js. and to be honest I do not consider three as a competitor but more as a friend working on a comparable sector;) Three was created far before babylonjs. But to align with several comments here you should not have issues with both engines!
Yeah that makes sense.
set the z index to 3 if the numbers match otherwise set it to 1
`?` is the ternary operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator
Like the others said, the ternary operator is basically a shortened version of an if statement with assignment. It could be rewritten as: if(dnum == nwhich){ tp.style.zIndex = 3; }else{ tp.style.zIndex = 1; } &amp;#x200B;
 if (dnum == nwhich) { tp.style.zIndex = 3; } else { tp.style.zIndex = 1; } is the long form way of putting the ternary. In plain english: Is `dnum` equal `==` (using type coercion, e.g. "3" will be turned into an integer of 3) to `nwhich` (`?` this is like this "is" part) if yes `true` then use the value of `3` if `:` not `false` then use the value of `1` 
Sorry but this has to be one of the most over engineered and obnoxious package I've seen
Why?
This is nowhere related to callbacks. Its just async tasks. Things like web workers are about threading.. Only await somewhat is and its just sugar for Promises.
+1 for SVG 
You want \`$.load\`. [https://api.jquery.com/load/#loading-page-fragments](https://api.jquery.com/load/#loading-page-fragments) &amp;#x200B; $.get doesn't support page fragments.
Ah, that's a shame. Can I still call a function to load the processed data into a variable? Doesn't seem to have that functionality. I mean, I could populate a div, then grab the contents, but that seems.. silly.
You could call your get and in your success callback function parse the the `div[customattr]` out of data into a var.
What if I had a variable (let's say standardDate) that I would set to be the first day of the first rotation at 11:00. Then every time I run the program, it checks how many days have passed (in 7 day intervals), and would determine which rotation it was on. Would that work?
JS operates under a different set of constraints from most languages though. There is no deprecation path for most language/stdlib additions, no way to remove features without breaking websites that use them. Since TC39 operates with the requirement "do not break the web under any circumstances" there's correspondingly a higher bar to meet for additions. I am also worried that a stdlib overhaul would end up centered around latest trends, but the slower pace of introduction should be pretty good at stopping that. Considering the leaps and bounds JS has improved by since TC39 adopted their current process for ES2015, I find it hard to criticize too harshly. If we end up with better builtins to handle dates, I'd be happy. I do wonder if this is too broad a ticket, leading to multiple conversations happening in parallel with people talking past each other.
How is that any better than just `import`ing from a special namespace?
As a script, approximately node -e `require(fs).writeFileSync('./merged.js', ['./a.js','./b.js','./c.js'].map(f =&gt; `${require(fs).readFileSync(f, 'utf-8')}`).join(''), 'utf-8'); But it's honestly better to just do it in shell cat 1.js 2.js 3.js &gt; merged.js 
I made this similar thing some time ago. I wish this kind of getting values from keys was a standard thing. https://www.npmjs.com/package/keyd
On the cannon, obviously.
I think so too. Using a build tool and typescript on such a short piece of code is overkill. The type definitions are just waste, besides the return type of half the functions looks wrong. They are defined to return „just“ (any) but do also might return „nothing“ (void). I think that writing this code in native js might be easier to maintain in the future and leads to an even smaller size.
&gt; cat 1.js 2.js 3.js &gt; merged.js I don't know why I didn't think to use cat. Thanks you.
Once the draft for optional chaining is approved, this will be obsolete 
Can you clarify your question a bit more? Is this node or in browser? What are you using the date for, exactly? 
So... You want a configuration file that holds a date that you can reference in any other file? What kind of module system do you use? Are you in the browser or in nodejs?
ayup
You can always make a config file in javascript, containing: var d = new Date("July 21, 1983 01:15:00"); and include that file before all others.
string manipulation is aweful
\`\`\` var d = new Date(constants.someDate) \`\`\`
This is a good example of “the shortest way” not always being easy to read. You write code for humans, not computers.
I tried to go to the page and my Xfinity wifi said the content might not be appropriate for children? Ummmmmmm...... &amp;#x200B;
Thanks a bunch man, I literally did try to create a Logo with a google font yday for a hobby project of mine, this is slick and quite useful, thanks. 
What’s wrong?
I like it...?
it's a website where you answer a question inside a iframe tag and then that iframe redirects to next question and I want to make it so I only have to set the time in one place instead of going through all the files and setting it in each one when I want to restart it. FYI the quiz is timebased and it locks you out if you are incorrect.
Yes, Im using browser.
To me the main reason to use a ternary is not its length, but just that it is an expression. In particular, if you want to use `const` and avoid mutation/reassignment, a ternary is the only way to go.
Honestly this kind of thing needs to make it in to the language as a native method. I’m fed up of seeing fuckery with conditionals checking every key exists before getting to the value you need. 
&gt; I don't know why I didn't think to use cat. Windows compat? If it becomes a concern, you can add [`cash-cat`](https://www.npmjs.com/package/cash-cat) as a `dev-dependency`, it will work in any environment that Node supports.
And z index governs how overlapping elements stack. So if you have two DIVs (or whatever) absolutely positioned at the same x/y coordinates on the page you can only see and interact with the one with the higher z index (it appears in front of the other one).
This is about the simplest use of ternary operator, so if you hold this opinion then you should use no-ternary in your linter. It's not a recommended setting in eslint-recommended so the general consensus does not agree with you. 
Hey, I guess I have an opinion that differs from other people
In English: "Display TP in the third or first layer of the view, depending on whether dnum and nwhich are equal or not"
Why don’t you save the time in the browser’s local or session storage so it persists through page refreshes? 
lol "[sick](https://www.urbandictionary.com/define.php?term=sick)" is young-people speak for cool.
Sure, there are definitely advantages to it
Tbh `--save` part is copy pasted from older release notes which date years back. We should just remove it. :-)
That's known as a 'conditional expression' and it shows up in many C-style languages, including C++ and Java as well as Javascript. It has the form: condition?expression1:expression0 When execution encounters this expression, the condition is evaluated first, just like with an if statement. If the condition evaluates to true, expression1 is then evaluated and becomes the value of the entire conditional expression. If the condition evaluates to false, expression0 is then evaluated and becomes the value of the entire conditional expression. To illustrate, consider something like: var fruit={}; fruit.type="apple"; fruit.color=(fruit.type=="banana"?"yellow":"red"); See how that works? Some people call these 'ternary expressions' (because they have three operands), but I find 'conditional expression' better captures the functionality and purpose of this mechanism.
Yeah, it's really convenient to be able to throw it into an argument list for a function call or something like that. Doing the same thing with if statements and temporary variables can become really unwieldy.
JavaScript is a fucking mess. Not only the language, the lack of a good standard library, the dichotomy between OOP and functional, etc, but specially the way things are decided and implemented. It's what usually happens with things that are designed by a committee. We can thank browser vendors and the TC39 for that. Hopefully WebAssembly will allow us to use any freaking language we wish in the browser, but we're still a long way from that.
The ternary operator is *three* parts, hence ternary instead of binary. The operator is the combination of `?` with a `:` counterpart.
This is also a bad example of a ternary; they include extra, unneeded syntax making it less readable. tp.style.zIndex = dnum == nwhich ? 3 : 1;
https://davidwalsh.name/for-and-against-let
The 3 major groups for client side languages (HTML, CSS, JS) are just a bunch of grown children who argue with each other. I remember being a subscriber to the HTML working group and the email chains were literally just arguments. Not to mention that the people who are at the top all have giant conflicts of interests since they work for companies making the web clients. A standard library would be cool but it’s not going to happen.
That's an awfully written piece of code. Try this: divElm.style.zIndex = divNumber === currentActiveDiv ? 3 : 1; This is just a guess, but illustrates two problems with the original code. Variable names should be easy to decipher and understand. And, the () are not necessary.
Im stupid and didn't think about the fact that I can make a single js file with the var in it and link to that file in a &lt;script&gt; tag.
Promises are, in turn, just memos and sugar for callbacks. Anyway, look, we have different opinions. That's okay.
What’s the point of this exactly? Why not just load the font from google fonts and output the text onto a page. 
Y’all can downvote him but you know he’s right.
Yeah, the paren placement made it confusing. I might write it it like: foo = ( bar === baz ) ? 3 : 1 No idea why someone would wrap the whole thing in parens though. 
How do i load the font on Github README.md?
i just installed cat and some other stuff on my windows computer... but now that i think about it i never remember actually doing that
It's a font picker, not a logo maker. The difference between a font and a logo is kind of like the difference between a website without css and a website with css.
I guess it's a good package for learning how to use NPM and such, other than that just use === , not really much of a proper use case here...
Yes this is the right answer. I still find it so surprising how many people don't bother to Google these days, it's faster than navigating to/opening reddit and creating a post.
Why would you hard code the date like that? (I hope it was just an example) Use session storage, it's easy, there are hundreds of good tutorials on how to use it. Google is your friend
Definitely either trolling or a joke. https://unpkg.com/ismyself@1.0.2/
OMG HOOKS! So many people act like this is the second coming of Christ. No, I won't approve your PR for us to use an alpha build of React in production.
&gt;ternary is the only way to go. You could create a function that returns the value, but yeah, ternary is shorter and easier in simple cases like this.
[y tho?](https://imgur.com/gallery/yNlQWRM)
I like the ternary. I wish Python had it. 
I am confused. This is the same thing as GoogleFonts but you can only preview one font at a time. On Google Fonts I can replace the default text and then apply it to all the font previews. What is the advantage here other than downloading an image of the font without having the actual font downloaded to your computer as well?
well it can be used to check if it an argument it receives is itself...
Sick means cool
I loled Determine what is and isn't isMyself
This is a great start. Could you do a second package for notMyself use cases?
it kind of does. tp.style.zIndex = 3 if dnum is nwhich else 1 tp.style.zIndex = 3 if dnum == nwhich else 1
weak arguments
This is exactly why we disallow ternary operators at work. Newer developers often get confused by the terse syntax. Also the parentheses are unnecessary and the variable names are horrible.
A const shouldn't have a variable value. There shouldn't really be a case when a const should have one of several values. That is what let/var is for. I know what you mean, by using a ternary to conditionally set a constant, but that's bad practice.
In my experience, parentheses are almost always misused in JS (outside of function calls of course). I always see things like if ( condition || (condition2 &amp;&amp; condition3)) { ... } Totally unnecessary to use parens around condition2 and 3.
I can't believe people are downvoting you. You are absolutely correct. Plus you haven't even been abrasive in giving your opinion. You've stated a matter of fact that "code golf" type of code is not easy to read and is usually just flexing from try-hards. Your build process will minify. You don't need to do it yourself. If you're the only one that maintains your code, congrats, you can do whatever you want with the code that no one will ever use. But if you're working with others, using unintelligibly terse code helps no one. I'm not opposed to ternaries myself, but at work we discourage use of them because of how few newer developers can recognize and understand them. 
Yeah, people will downvote if they disagree. I’m not sweating it. I’ve been at it for long enough to trust my opinion on this one.
If they've read literally any notable book about programming they would agree
I suppose that’s debatable: https://eslint.org/docs/rules/no-mixed-operators
I like using Snap SVG ([http://snapsvg.io/](http://snapsvg.io/)) for SVG animation. It's worth a look. You don't have to process SVGs, or create them in a special way. Snap just lets you add elements to your drawing, hide/show elements, all sorts of techniques.
Well, if you don't like the ternary operator you will get something like this: tp.style.zIndex = ((dnum === nwhich) &lt;&lt; 1) + 1;
Why is the ternary in parentheses? Does that change/accomplish anything?
ParticleJS is not too hard to modify. I changed it once so it would load a specific set of particles from a data file, so it would draw a map, and constrain them so they wouldn't wander too far from their original position.
Would it be possible to add a next button to select the next drop down option, so you can quickly look at many fonts?
I guess they just aren't there yet? https://github.com/tc39/proposal-set-methods
&gt; ES6 sets only support union. What do you mean by this? Set.prototype doesn't have a union method.
&gt; using a ternary to conditionally set a constant, but that's bad practice This is perhaps the first time I've ever heard this mindset. Can you expand on why you feel that's a negative? Do you feel similarly about setting a const to the outputted value of a function?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/reactjs] [Generate Project Logo with Google Fonts](https://www.reddit.com/r/reactjs/comments/a86809/generate_project_logo_with_google_fonts/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I disagree. Using const for variables that won't change *after initialization* makes it easier to read and mentally process code because you don't need to think about the state of those variables. It also guards against accidental reassignment. Are those advantages outweighed by the advantages of the practice you're proposing?
That's a terrible reason to disallow ternary operators at work. Explain ternary operator, move on. It's not a bad language feature, it's a missed teaching opportunity.
While we do mentor at work, we also work with a lot of contract/remote developers who we don't want to waste money on training. It's cheaper to simply add a rule to ESLint.
I could not disagree more. The point of a `const` is that you know the variable will be assigned once and never reassigned. There is nothing wrong with setting that initial value as one of two (or more) things based on a conditional. How is that any different than setting the results of (for example) a map to a `const`? I am of the opinion that in modern JS you should be using `const` for 95% of all variables, `let` for the 5% that absolutely must be reassigned, and `var` never. Ternaries are a big part of achieving that. 
Whoa dude, I was 100% there with you until you said "code golf" type of code is not easy to read and is usually just flexing from try-hards. Let's not throw out the baby with the bathwater. Ternary operators are great and perfectly sensible, and frequently make code more readable, not less. Way more important that that, though, the try-hard thing isn't helping anybody. There's enough vitriol. Let's be a positive force together (I upvoted the guy above you).
You're totally misusing constants and achieving it through a hacky solution. It's horrible practice.
It does not; it's superfluous.
`tp.style.zIndex = 1 + (dnum == nwhich) * 2; // (▀̿Ĺ̯▀̿ ̿)` 
Are you new to programming? Or your only experience limited to JavaScript?
The parentheses accomplish nothing there. They are unnecessary. 
But why tho? Why is it a horrible practice? I've been writing and reviewing code for quite a long time and cannot think of a reason.
so?
A constant is meant to be used for a constant value. Not a variable value. If you are breaking the normal functionality of the code with a hacky workaround, it's probably a sign you're doing something wrong.
I've never heard of a time when a ternary makes a code *more* readable. But I'm not even talking about ternaries in particular. I'm talking about the code golf approach that try-hards use because they don't feel challenged in their job.
Good article, I dug it. I'd definitely rather run into these kinds of problems than the kind that I do in imperative-world but for sure I do see them, and there were some good ideas in here.
&gt;I am of the opinion that in modern JS you should be using const for 95% of all variables, let for the 5% that absolutely must be reassigned, and var never. I fully agree. However, it's misusing const to assign it to a variable. Const is for constants. It shouldn't be a value that is different based on different results. That's a variable (let).
The value is not variable. Once it is set, it is constant. This is definitely not a "hacky workaround". I have listed advantages. You still haven't offered a reason for your opposition.
I said its debatable, not that I want to debate you. Take it up with [all these people](https://github.com/standard/standard/issues/566)
I find them absolutely readable. Easy to read and terse go hand in hand if you're familiar with the language. I can't even comprehend someone who struggles to get a ternary, even if they are new to the language. Try something like clojure. Are we talking people with less than 6 months experience maybe?
https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75 This is the advice I would follow for when to use const/let/var.
How do you fully agree then if you obviously don't fully agree? So per your definition you'd only use const for hardcoded values?
Given how feeble JavaScript is when it comes to avoiding mutation anyway, I tend not to worry. You have to manage values so much anyway, even with const, that it's not so important IMO to use it. If I need to ensure a value won't be fucked with then I'll take greater steps and use something like immutable js
I disagree with this. The parenthesis is reminiscent of their use in math - evaluate the parenthesis first. Here they are visually demarcating the expression from the assignment. Since there's a single equal sign right next to a double equal sign which could be missed visually. While interpreters don't need it, it helps to call out the difference and avoid seeing it as a double assignment like x = y = r + h. Saying that you understand something less when you see an expression in parenthesis is an odd claim. Of course they can be overused, but here it makes perfect sense visually. I bet you'd have an easier time teaching someone this line with the parenthesis than without. It's such a natural fit and self explanatory.
I'm with u/tightywhitey on this one. A ternary is kind of "ignorable" when you're trying to comprehend what a function does. I don't mean you should literally ignore it, I mean that you can glance at a ternary and know "ok this operator means something very specific, now i can move on" whereas with an if/else statement you're eating up multiple lines of code and using "brain ram" to deal with scope and indentation that would be better served elsewhere. Especially if it's just a simple assignment ternary; your code is now on one line with a clearly defined purpose instead of like five.
Sorry for the late response. &gt;It's not likely to be a security issue. I guess it's just my intuition that when the language is designed to have var, let, or const and they aren't used appropriately it could leave whatever data vulnerable, at least to being lost. But looking into it a bit more, since I guess that's an ECMA6 feature not all browsers (IE, I guess, maybe others) even support it, so it might be the reverse, in a sense: more an concern to actually use const even when it is appropriate.
We really shouldn't encourage packages like these. We really dont need another left pad, or similar issues with small packages that could be implemented by the user easily. However nice effort, I am sure its very beneficial to beginners. With latest issues especially with small packages or ones being moved maintainers let's this is scary.
I agree with your statement that const should be used most of the time, let some of the time, and var never. However I don't agree with *how* you use const.
&gt;I can't even comprehend someone who struggles to get a ternary, even if they are new to the language See OP
Lol standard is fugly. ESLint with config &gt; standard. If you don't want to debate it, don't state it. It's pretty simple.
It's variable if it might differ with other conditions. That's the definition of a variable. Constants are one value always.
Respectfully, not super pertinent to my questions – I'm just interested in your ideas regarding `const` usage. Do you have issues using `const` assigned to a function's output? Say, `const isEnabled = checkEnabled();` And do you have issues assigning `const` variables to mutable objects?
Firstly I didn't make any statement (the above statement is not from me) and secondly you didn't answer my second question. "So you'd only use const for hardcoded/predefined values"? because those are basically the only ones where I could be a 100% certain that they'll only have one specific value and no other.
Why would you respond to a chain as if you were the original commenter? Does that make sense to you?
If you aren't new to programming, your question should be answered already by experience.
\`new Set(\[...\[1,2,3\], ...\[2, 4\]\]);\`
I've been programming for many years, and have _never_ heard of anything along the lines of whatever you're trying to get at. Being condescending isn't helping your case.
OP is fine, I'm talking others who don't use them because actual engineers...contractors no less...can't comprehend them.
Newer devs often get confused about operator precedence too. You should turn on `no-mixed-operators`
Why would you not answer the question which is the core of your const opinion after being asked twice?
&gt; Constants are one value always They are not and I would be surprised if you could find references to back that up. [MDN themselves say:](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) &gt; The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned A `const` is simply an unchangeable pointer. Assigning it to a variable is fine, as is assigning it to an object and mutating that object in the future. Indeed, that MDN page above contains examples of how to do just that. If *your* programming idiom dictates assigning `const`s to strings and integers alone, that's fine – but it's certainly not in the spec, nor in any tutorials or guides I've read, not to mention any code I've seen.
I find this to be more readable than OPs example or the no paren version: foo = ( bar === baz ) ? 3 : 1 Or even this (in more complicated cases) foo = ( bar === baz ) ? 3 : 1 What do you think?
Think of this as a teachable moment, then. I'm just trying to understand where you got this idea from. I have a feeling you're confusing a `const` with immutability, but even then assigning an immutable reference is 100% fine stemming from a function's result. Did you get this concept from a specific guide/tutorial? Or maybe you use an immutable library that requires this? Would really appreciate some insight into your thinking here.
No it isn‘t. It is a constant within it‘s block scope.
Yep, that's how i'd do it too. You're concatenating arrays using the spread operator, and then using Set to pick out the unique ones. In other words, sets do not on their have a way to do unions, you had to combine some features of arrays and some from sets to implement a union. Similarly, you can combine the tools at your disposal to create an intersection. It won't be quite as concise as the union, but still just a line or two of code. 
It makes concrete the order of operations between assignment (=) the equality test (==) and the ternary (?:), so to a human reader it is useful.
Why will you not explain why following this practice is beneficial? Why do you follow it? Here's an example: `const ticketPrice = age &lt;= 12 ? TICKET_PRICE_CHILD : TICKET_PRICE_GENERAL;` Why would I use `let` for `ticketPrice`? It is never going to change and I want to make sure of that. What benefit is there in using `let` here? Here's an example of a common pattern in Java: class ThingService { private final ThingClient thingClient; @Inject public ThingService(ThingClient thingClient) { this.thingClient = thingClient; } } `thingClient` is defined at runtime based on whatever gets passed/injected into the constructor. It also should never change, hence `final`. `const` in JS is best used like `final` in Java. There is simply no apparent disadvantage and plenty of advantage.
I usually use the last version in my C# code
&gt; Given how feeble JavaScript is when it comes to avoiding mutation anyway const
Not Real Constants The keyword const is a little misleading. It does NOT define a constant value. It defines a constant reference to a value. Because of this, we cannot change constant primitive values, but we can change the properties of constant objects. This is taken directly from w3.
Ternary is nice because you can kind of read it more like English. Sort of forget the whole 'if' thing. If you see this syntax you can kind of assume anything to the left of the ? is either true or false. The ' : ' is just a kind of placeholder for 'otherwise'. &amp;#x200B; Is this thing even? Do this. Otherwise, do that. &amp;#x200B; even ? do this : do that;
For one, it is a very different experience for the eye to stare at a wall of the same word, let alone scroll through pages of it. Semantic Satiation kicks in earlier based on my anecdotal evidence. That will affect how I respond to the look and feel of any given font for a logo. I.e. not a fair consideration for each font. Not sure if that has been author's experience, but this exact use case has come up for me a number of times. Has not been a big enough pain to start a project for it, but I'm glad someone has. I just usually go into inspect for the font grid and force (a lot) more whitespace around each font. Bookmarked!
Readability is also an accomplishment
For most projects, kicking things off with a considered font for the logo is in my experience a fine example of the Pareto Principle. 20% of effort for an 80% solution.
It's a code smell regardless. 
Example please? 😺
Ahaha was this some sort of absurdily passive aggressive attempt to shit on JS &gt; OO languages? If you're focusing on pure TS/OOP &gt; JS you're an idiot, learn what's relevant. There's no reason to know only angular or react, only WASM or JS, only JS or TypeScript etc.
Posting another comment instead of editing the old one because that would be too messy and I'd like to leave it there for posterity. I got it down to 105 by defining a helper function (z). (E=(e,f)=&gt;E[e]=[...z(e),f]).e=(e,m)=&gt;z(e).map(f=&gt;f(m)),E.r=(e,f)=&gt;E[e]=z(e).filter(F=&gt;F!=f),z=f=&gt;E[f]||[]
Nice! Could you give a reason to use this instead of lodash?
That's ridiculous... what about something like a user ID? You're going to set that using `let`? And that's only one example.
Which lodash method supports deep keypaths?
Have a look at Ramda's [path](https://ramdajs.com/docs/#path) and [pathOr](https://ramdajs.com/docs/#pathOr) functions. You can compose a `dig` function like so: import { pipe, path, split } from "ramda"; const dig = pipe(split("."), path); const obj = { a: { b: 'c' } }; dig('a.b')(obj); //=&gt; 'c' dig('x.y.z')(obj); //=&gt; undefined
It's kinda irrelevant what the operator is called, it's the *language* semantics it provides in JS (a non-reassignable binding) that determines how it gets used. Just because it's named `const`, it doesn't mean it has to adhere to the semantics that constant declarations have in other languages. You're arguing for what is essentially a stylistic choice, to the detriment of technical benefit. Besides, we have the SCREAMING_SNAKE_CASE convention for naming hardcoded constants that sets them apart.
You’re confused
Lodash certainly has `has` =) You're right about flatten / expand, though. In case you're interested, I made a deep keypath library, [bistro](https://github.com/thoughtspile/bistro) myself. It's supposed to be as fast as possible, so damn sure it has `Function` "hacks" and a less convenient interface, but that's what it takes.
You can think that but implementation is different. Meanwhile await is almost same as Promise.then.
If a developer who's getting confused by such a basic feature slipped trough the interviews (or a contractor trough basic screening process), I'd 1) teach them, and 2) make sure this doesn't happen again. I mean, sure, I saw and probably authored terse and complicated pieces of code that could be rewritten in a more readable way, but in my opinion such a simple and useful language construct is not one of them.
if dnum == nwhich assign 3, otherwise assign 1 to tp.style.zIndex.
why I never see mutation talked about when we have a graphql article? seems like it is the bottleneck of this query language...
`const` is not for constants, it's for variables that are only assigned once. You should look at it like Javas `final static`.
I'd argue this is the easiest to read way of accomplishing what the line does. It can be shortened and made completely unreadable e.g. `zIndex=2*(dnum==which)|1` and in such case I'd either call the code quality police, or challenge the author in a code golfing match :)
I will guess you are not new to programming? Then you should be even more ashamed to be so completely wrong lol.
I feel you don’t grasp how wrong your logic is. not only this contradicts the MDM definition, but The aforementioned workflow is standardized in many teams at big companies like Google, it is NOT a bad practice as it makes absolute sense. 