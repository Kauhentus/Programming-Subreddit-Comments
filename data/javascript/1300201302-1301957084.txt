Check, thank you for clarification
Upboated for proving my point for me. &gt;Github I have a difficult time believing sees significant traffic. Programmer centric sites have extremely narrow readerships. I'd be willing to bet Github's traffic hasn't caught up to 2004 Slashdot. Exactly, a project like this probably won't see the kind of traffic you're warning of. If I was going to build an application who's primary requirement was to be scalable from day one, I'd probably use Erlang, because it has ~20 years of scaling well in mission-critical applications and I enjoy writing in it. However, not everyone is that into Erlang and it's honestly much faster to write something like this in Django or Rails. So, rather than bicker about this like schoolchildren, I ask you, what would you use? PHP? Erlang? C? Rails? Perl? shellcode?
No problem! Happy JavaScripting :)
If you want that to be true you should use !==.
Quakes in japan made me move west from Tokyo but should have some time on my hands soon!
&gt; Upboated for proving my point for me. No I haven't, and I'd prefer you not make up falsehoods like &gt; rather than bicker about this like schoolchildren Nobody's bickering, sir, and it's inappropriate for you to compare people to schoolchildren without reason. &gt; a project like this probably won't see the kind of traffic you're warning of. No ruby project will, which is why you've switched to personal attacks rather than admit that you can't come up with examples. &gt; If I was going to build an application who's primary requirement was to be scalable from day one, I'd probably use Erlang Oooooooooof course you would. As a seasoned erlang developer, my first reaction is to gasp and ask why. After all, very few web applications see the structure of load which makes Erlang excel, whereas most of what web applications do is string processing, which Erlang suffers at due to religious zealotry about mutability, and database interaction, for which you're trapped in ODBC, which is slow, wasteful, cuts you off from database specific features, and isn't well implemented in Erlang. So yeah, I can see how you'd go to the go-to buzzword in the Proggit community when trying to reinforce your image, but there's still no technical decision underlying that, and you're still just dropping names to sound smart. And before you accuse me of shitting on Erlang, I wrote an Erlang web server to get access to Erlang on the web because I wasn't happy with Mochi or Yaws, and web sockets and misultin didn't exist yet. The fact of the matter is that Erlang is actually fairly poorly suited for web work except in very special cases. The only reason it looks good is you're used to comparing it to other languages which are even worse suited to scale web work, like ruby and python. &gt; because it has ~20 years of scaling well in mission-critical applications Erlang doesn't actually scale very well. This is just rambling crap. Erlang is a local fast node VM. If you try to put it in two datacenters, the lag causes tremendous performance problems. Scaling doesn't mean "add another three boxes." Stop pretending you have experience in large scale application deployment. Erlang has massive horizontal parallelism per node. Pretending that's equivalent to 20 years of scaling is a red flag of complete naivete. Erlang rarely exists outside small realtime clusters in heavy duty work, and has been for those 20 years in reality used to run bare metal almost-isolated phone switches. You're reciting things you heard about, not things you know, and you're wrong both on the factual and interpretational levels. &gt; I ask you, what would you use? PHP? Erlang? C? Rails? Perl? shellcode? Yes, yes, yes, no, no, rarely; most commonly C++, Erlang, PHP, webstack technologies, SQL and so on. Also, note that in my case, that should be past tense, not present. Whereas I haven't deployed at Twitter scale, one of the applications I have significant work in is Kayako SupportSuite, which deals with way, way more traffic than GitHub. If you insult me again, we're done. I will not be called a schoolchild by someone who's trying to preach about things he has no actual experience in.
i sometimes write !== but the more i learn about coffeescript the more it seems like != javascript. either way you look at it, it isn't javascript.
 window.alert('like','this');
Proof once again that the concept of 'modal' is just too hard for some people. If you can switch to some other tab, it's not modal. Modal doesn't mean "in this context that I decided and just for this one web page and"
Wasn't referring to you as a schoolchild, but to the manner in which **we** are (hopefully now, were) communicating. Sorry if that came across as offending, I'm not into calling people names. I am in agreement with much of what you have said, and believe that you are mis-understanding some of my premise. I am not an expert in large-scale scaling, but I am under no illusion that a language or technology is going to magically scale things for you. I have not been using Erlang for very long, but I also understand the fact that, while it scales well on a single machine, you will encounter lag issues if you're just blindly trying to run one program in two datacenters. I've encountered its string processing issues and I don't think the language is some magic "just add another machine" solution. I can also see how one would go about writing something in Erlang that does scale, and it would be interesting for me to work on and further my knowledge of things. I also enjoy Erlang (and wish to learn more about it by using it in projects) because I come from a telephony background and the way that it is structured makes more sense to me than most programming paradigms. No matter what language you're using, you're going to have to adapt your program if/when it scales, or design it with scalability at the core. The amount of work needed to make it scale will vary depending upon the chosen language(s) and structure of the application. PHP certainly beats Rails and Django at scaling, but you still have to write the code in a way that scales. All I was saying, is that for a project like this, and the traffic it is likely to receive, Django (or Rails) is not a bad idea, if you're thinking of writing it in something other than PHP. If scaling was to be a primary requirement, I would be interested in writing it in Erlang to learn how to make a scalable application using the language. I do have one question for you, as you seem to know what you're talking about (not sarcasm); why PHP and not Perl? Is it a performance or design issue, scaling or something else? I'm honestly curious.
Excellent article. I've run into each of these situations many times, and it's really interesting to see them all pointed out and explained like this.
&gt; Wasn't referring to you as a schoolchild, but to the manner in which we are (hopefully now, were) communicating. Eventually you'll notice that anything you say to we you say to me. After this, you go on to write a bunch of generic platitudes that have nothing to do with the topic at hand, and reassuringly announcing that you "see ways to efficiently implement scaling in Erlang." That's nice. &gt; PHP certainly beats Rails and Django at scaling PHP is a language. Rails is a library. Django is an application. Please stop making ridiculous comparisons. &gt; All I was saying, is that for a project like this, and the traffic it is likely to receive, Django (or Rails) is not a bad idea Repeating the wrong thing does not make it less wrong. You could also say that because of the traffic level, you could use visual basic, cobol or K. "This problem is probably not going to hit us" just isn't how one chooses technology unless you don't know how to make the choice legitimately. &gt; I do have one question for you, as you seem to know what you're talking about (not sarcasm); why PHP and not Perl? Personal preference. Perl's fine. PHP grew out of perl, actually. I'm just more used to one than the other. I mean similarly, haskell's fine, but I don't use it, just because it isn't my personal preference. See also Java.
You're absolutely correct. I just used this term because I didn't get to name those plugins, most of which have 'modal' in their name.
Fair enough. :)
Good ideas to try here...
The proxomitron, and greasemonkey can both re-write code as it's delivered to the browser. It could be quite easy to search for a block of JS, and replace it with your own. Best to do game code server side, and keep the basic interface on the client.
What re-writing proxies do you know. I know of proxomitron, and greasemonkey (but that's not a proxy I think?)
Interesting... =)
Must.... resist... urge... to... Ahh, the hell with it. This.
&gt;Wasn't referring to you as a schoolchild, but to the manner in which we are (hopefully now, were) communicating. 90% of StoneCypher's comments are starting arguments and general petulance.
Yeah, when someone asks you to stop messaging them, just go troll them in other threads. Clearly you aren't starting arguments or being generally petulant by doing this. But yeah, this is much better than admitting that when you demanded reference and said someone was wrong, and they provided reference that said they weren't, you just stormed off in a huff. Golf claps all around. Good show.
What happened is. 1) Someone called you petulant. 2) You said petulant meant 'saucy'. 3) Many people disagreed 4) You claimed to be a 'college trained linguist' 5) You posted a 500 year old definition of the word 'petulant' Hilarity ensued: http://www.reddit.com/r/PHP/comments/g32qn/prepared_statements_binding_arrays/c1kse2p and http://www.reddit.com/r/PHP/comments/g32qn/prepared_statements_binding_arrays/c1kvylj?context=3
http://www.charlesproxy.com/ is what I use but if you're on Windows Fiddler is actually a little better imho and free.
I read the title as a Jeopardy! clue.
I believe that you do not understand that I understand that: Django != Python Rails != Ruby CakePHP != PHP jQuery != JavaScript etc. My statement would have been more clear if written: "PHP, Ruby, Python, etc certainly beat CakePHP, Rails and Django at scaling, but you still have to write the code in a way that scales." You clearly dislike frameworks, whereas I, understand that they have limitations, but believe that they have utility in certain cases. Have fun trolling, now excuse me while I go work on this project instead musing about how it could be n-times more scalable if I wrote a framework from scratch.
I consider several of those to be blatant language misfeatures. function Car() { function populate() { this.axles = 2; } populate(); } new Car; Why yes, Browser JavaScript, I did mean to create a global variable named "axles" contain the value 2. How else could you possibly interpret this? Similarly, when was the last time you wrote a callback or an event handler and realized "You know, having the `this` value in my callback set to some random internal array is exactly what I need here.".. s'okay, I'll keep sprinkling my code with `var self=this` at the beginning of my methods and using .bind()-like crutches.
nice try
DOMWindow
But it allows for wonderful things like mix-ins.
If only this wasn't spread across 6 pages...
Well, yes, that's true for my 2d gripe. For the first, I think I remember there's some kind of proposal to stop having "this" point to the global object by default, since that's very rarely what is intended by its usage. I don't remember the details though. For the 2d, I do miss Actionscript 3's approach, which consists in implicitly binding class method to their instance, allowing to pass instance methods around freely without having to worry about them getting called in the right context. Unfortunately, they get away with doing that by using now-defunct ecmascript 4 syntax elements, and I don't see a good way to make that behavior happen in JS proper without screwing something else at this point. 
Why is it hard for companies to compile a 64-bit app? Why would Microsoft spend all the time incorporating a newer Javascript engine in the 32-bit, just to omit it from the 64-bit version?
Somewhere I read this: &gt; IE 9 64-bit is using an older, slower JavaScript engine, while IE 9 32-bit was using the newer, more efficient Chakra JIT. [reference](http://www.zdnet.com/blog/hardware/ie9-vs-chrome-10-vs-firefox-4-rc-vs-opera-1101-vs-safari-5-the-big-browser-benchmark/11890?pg=6&amp;tag=mantle_skin;content)
nothing is ever shocking from redmond.
I have to imagine that when you're working on something like this, its not that simple. You can just recompile a javascript engine especially one thats super tuned for performance at the absolute lowest level possible and expect it to work on 64-bit machines. In fact theres 0 chance of it compiling without a serious headache. 64-bit browsers are pretty much useless anyway so they probably didn't want to waste the development time when they could do all the low-level tuning for the 32-bit version and have it cover both. Until everything is 64-bit only I imagine it will stay this way. (Ironically a tuned 64-bit version would probably operate faster than the 32-bit one)
If most of your team works in python or ruby, it might be easier for them to comment on your coffescript than raw js... (obligatory grain of salt)
Hey guys! I have an idea! Let's put all illustrations of this story each ON THEIR OWN PAGE! 
But you would expect Microsoft uses some development process/method incorporating the development for different architectures. The high-level structure of the javascript engine should be completely portably to any architecture the implementation languages support. Implementing some low-level parts of the engine optimized for the different architectures would take more effort, but the implementation for one architecture is conceptually not more difficult than that for the other. A company like Microsoft should be able to get enough competent developers to develop for both 32-bit and 64-bit. 
My preferred style is to only use closures and just not use this/new/prototype - eliminates a whole class of problems. (And yes, you can still do mixins easily)
See [this page](http://api.jquery.com/attribute-contains-selector/) and note the part about the quotes being mandatory. So, try this instead: $('a[href*=".flv"]').flowplayer(); 
That used to be my approach as well, and it's quite neat since you pretty much never have to use `this` with it. Unfortunately, it's significantly slower than the old this/new/prototype approach. If you create a lot of objects on a page, it can make quite a bit of difference. So nowadays I just accept my fate..
&gt; Why is it hard for companies to compile a 64-bit app? It's probably a JIT engine (all modern JS interpreters are). JITs have to generate assembly from high-level code, recompiling does not quite cut it: you have to create a new JIT backend.
I've only read the first page, does it explain why they benchmark IE 64bit but no 64bit versions of any other browsers?
FWIW Chakra is a JIT, this means it dynamically compiles Javascript code to assembly. Most of the tracing code (the part detecting hotspots which should be compiled to native) may be portable, but you still have to code a complete backend for each architecture, as with static compilers.
Interesting. I assume you mean that copying into objects is slower than using the prototype chain. Is there another reason? Can you point to any data? EDIT: Looks like it's function object allocation on at least IE http://blogs.msdn.com/b/kristoffer/archive/2007/02/13/javascript-prototype-versus-closure-execution-speed.aspx
I understand, but an organisation like Microsoft should be able to have a team per architecture working on the low-level native bits. Although I do understand that it is (a lot) more work to develop for more architectures, I do not understand that a successful commercial producer of software is unable or unwilling to do so.
Yes.
I think it then comes down to noone using a 64-bit browser. Theres just no reason to spend that development time. Couple that with the non-trivial nature of optimizing this thing for specific architectures and its not too surprising. x64 and x86 calling convention is very different, you still optimizing assembly and you'll see that the differences are huge. Now you're talking not just porting something back and forth but in some places using completely different optimization routines which have to be developed in parallel by different teams. It gets out of hand quickly. Not saying it couldn't be done, but economically it just didn't make sense and technically it was freaking complicated.
So why even look at this submission?
javascript:fs.select_all(); Youtube video: http://www.youtube.com/watch?v=nMdNPWa7Cuw
Sure, they could and should, but 64b software seems pretty much dismissed in Windows-land, and I think IE64 can't handle plugins either, so IE64 is barely a third-class citizen, it doesn't even get to sit at the back of the bus, it clings to the bumper. With that, and with a product team which does not seem overly gigantic and quite a lot of work done, I can understand that they did the choices they did: waste a few pounds and throw the poor thing under the lorry coming behind the bus by smashing its fingers with a hammer. Can't have poor people trying to take the bus can we?
Ignore me, this doesn't work anymore. -sulk-
Wow, I hope so! Glad you're doing ok.
They should have put in IE8 for the lulz.
But a browser is only as good as it OS
They lost me at &gt;SunSpider JavaScript 0.9.1 - A JavaScript benchmark developed by Mozilla with a focus on real-world problem solving. 
Wow, that's going to break a lot of code when people upgrade to 1.5. I seem to think quotes have been optional for as long as I've been using jQuery (back to 1.1 or 1.2). Glad I read this, will definitely double-check the APIs first when I encounter these "it just stopped working after we updated jQuery".
Just to clarify that is 20, 000 objects right?
&gt; I do not understand that a successful commercial producer of software is unable or unwilling to do so. Why throw money at something that's absolutely pointless? Until we start having Web apps that require more than 4GB of RAM there's absolutely no reason to use a 64-bit browser, it will just consume more RAM than the 32-bit version, probably run slower, and have almost no plugin support. tl; dr - 64 bit isn't always better than 32 bit.
Images so the fuckers don't get ad revenue for this abomination of a site: http://i.zdnet.com/blogs/15-03-2011-14-10-01.png http://i.zdnet.com/blogs/15-03-2011-14-10-46.png http://i.zdnet.com/blogs/15-03-2011-14-10-57.png http://i.zdnet.com/blogs/15-03-2011-14-11-13.png 
Wherever Python would raise a KeyError, AttributeError, or TypeError (when you attempt to access keys that don't exist, or call a function without the minimum number of arguments listed) JavaScript instead assigns the variable a value of `undefined`. This is distinct from `null` -- `null` values are usually explicitly set by the programmer (like traditional null or None values in other languages). `undefined` carries the semantic meaning of "due to the circumstances during this execution, this expression does not contain a value", versus "because you assigned something to null, this does not have a value." JavaScript, in general, doesn't truck much with exceptions -- probably due to the fact that in asynchronous functions, the exception almost never ends up where you'd want; it tries to be as permissive as possible.
Assuming you have the "Invite Friends" window open, this should work: var f = document.getElementsByClassName("fbProfileBrowserListContainer"); for (var i=0;i&lt;f.length;i++){ if (f[i].children) { var c = f[i].getElementsByTagName("input"); for (var l=0;l&lt;c.length;l++) { c[l].checked = "checked"; } } } 
Also, his closure implementation still uses "this" when he could be using the parameters. Weird. I'm not going to worry about it. Closures for me.
I heard the new version of IE can download Chrome or Firefox faster than any before!
But then, if I do this: function Point(x, y, r) { if (r) { this.x = x; this.y = y; } else { this.y = y; this.x = x; } } there will be two Point-like classes?
Very nice. Another issue is using these sounds for sound effects that need to be played many times at once. Some browsers just give up after 40 or so.
And yet, if only it were harder!
&gt;IE9 misreports that it can play mp4 files when it can’t. I use M4A/AAC (audio/mp4; codecs=mp4a) created by FAAC (faac -q 0.4 -w -s foo.wav) for IE9/Safari (Ogg/Vorbis elsewhere). This does work. The RC version of IE9 didn't do anything if I only called play() once. Subsequent calls of play() did work though. This issue disappeared with the final version, however. Also, don't use MP3. Quality/size ratio is bad and there is leading &amp; trailing silence. It's just awful.
Bandcamp streams without Flash. Check out how they do it. Maybe they have it as a fallback.
My bad, thought it was a broader article comparing the browsers, but I'm in the JavaScript subreddit, doh!
Yes, more or less. Unfortunately, I don't have data to show it on hand. A truly module-based approach of his Pixel class would look like function Pixel(x,y) { return { getX: function() { return x; }, getY:function(){ return y;}, setX: function(v) { x=v;}, setY: function(v){ y=v;} } } But even that still benchmarks roughly as slow as his own version. On a small class like this on something like Chrome, even 20,000 objects created this way take a mostly negligible amount of time, but it's plainly 2 to 3 times slower. It only gets worse from there with more complex code. I agree that it's not a reason to ditch that pattern forever, as it does have some clear advantages, but it's something to watch for when performance starts to be a concern. 
This change was introduced with 1.4.3 or 1.4.4. This breaks FancyBox for example. I did notify the author back then, but he ignored it.
 if (l &lt; 0.25) { alert("I'm sorry, but you lost"); } else if (l &lt; 0.5) { // since this is the else branch it must be &gt;=0.25 alert("Better luck next time!"); } else if (l &lt; 0.75) { // must be &gt;= 0.5 alert("Keep on gambling!"); } else { // must be &gt;= 0.75 alert("You'll win eventually"); // you forgot the "alert" here. just parens with a string in it do nothing. } **Edit:** Just because I'm a dick... alert(Math.random()&gt;0.9?"Congratulations! You have won!":["I'm sorry, but you lost","Better luck next time!","Keep on gambling!","You'll win eventually"][Math.floor(Math.random()*4)]);
http://www.sencha.com or http://dojotoolkit.org Avoid anything jQuery - it's not good for this sort of thing.
If you want to build your application's skeletal structure with HTML, definitely go with [jQuery UI](http://jqueryui.com/). If you want to build web applications in straight javascript, [Sencha's ExtJS](http://www.sencha.com/) is popular, but [Uki](http://ukijs.org/) is also getting a lot of attention lately.
Ext can consume skeletal HTML as well, and is far better suited to application style UI than any jQuery-variant.
thank you, i cant believe i missed that, i feel stupid now XD
[Sproutcore](http://sproutcore.com/) and [Cappuccino](http://cappuccino.org) are cool, but may be a little much for a mobile app.
That specific kind of bug is sorta difficult to create with my being-a-dick solution, because it's very DRY ("don't repeat yourself"). For reference, a better DRY-ish implementation could look like this (may look somewhat intimidating now, but don't worry): (function () { var randomPseudoEncouragement, message; randomPseudoEncouragement = (function () { var messages = [ "I'm sorry, but you lost", "Better luck next time!", "Keep on gambling!", "You'll win eventually" ]; return function () { return messages[Math.floor(Math.random() * messages.length)]; }; }()); if (Math.random() &gt; 0.9) { message = "Congratulations! You have won!"; } else { message = randomPseudoEncouragement(); } alert(message); }()); Save that and look at it again once you learned about function expressions, immediately invoked function expressions (IIFE), and closures. I promise it will magically make sense then. :)
Why is jQ no good for mobile?
It's not that it isn't good. It's that there are other frameworks that are better tailored to the mobile quirks. jQuery Mobile is in alpha 3, and will eventually be good enough to compete, but not just yet.
I've been playing around with Sproutcore lately, and it's fantastic. However, I think they're only in the early stages of making their stuff mobile-suitable.
Well for one, jQuery Mobile is only in alpha. As such cross-device compatibility and performance are extremely poor. It barely works on anything that's not iPhone 4 at the moment. You wouldn't want to use base jQuery because touch events work so much differently than typical click and hover events on the desktop.
I found it very, very easy, but then I was building an application that depended on a fairly complete implementation of the HTML5 Canvas, so I didn't need to mess with IE or Opera. (I had it working in Opera at one time, but the Canvas is screwed.)
Ok. So... First mistake: There is no such thing as "100% cross-browser+run on android/iphone" You are starting off with unrealistic expectations. Hell, theres no such thing as "100% cross-browser" anything... not to mention android/iphone. 
What all the code is wrapped in an anonymous function?
Definitely Sencha ExtJS and Touch... if you use the new ExtJS 4 you will even be able to share some code between browser and smartphone (but not all of it)
if it runs on android/iphone and chrome and firefox, that meets all the criteria. Sencha Touch can...it just requires a lot of html templating.
Thank you! Awesome! xx
I guarantee that the new js engine will be in all webkit instances on the device in the next update.
This is a great blog post, he should make this into some kind of a jquery plugin.
IE 9 is however _much_ faster at DOM manipulation and fades (like for building a modal box that performs a moving fade into view). In fact I find Chrome is easily the slowest! JavaScript really isn't everything.
Sorry for the late reply. The canvas elements for our games already had opaque backgrounds before we moved them to inside an iFrame. So we already had your solution running, and it had not worked for us. That is why I down voted.
this is more simple than what?
Did Sencha (formerly ExtJS) ever resolve the licensing issue with switching from LGPL to GPL?
Something that could be a good counterpart to Flex with its MXML/ActionScript setup would be [Ample SDK](http://www.amplesdk.com/). I've never used it myself so I don't know how mature it is compared to ExtJS and Dojo.
Or you can do it in 30 characters or so using jQuery. 
We built a mobile app with Sencha recently. It was *painfully* slow on first load. Once the cacheing kicked in, it was okay. The overall impression was, "works okay, would probably not use again". Also, you have to pay for the documentation. 
This is the biggest problem with mobile and frameworks in general. The javascript engines in these mobile browsers are generally too slow for full-stack UI frameworks. The thing to keep in mind is that a lot of these mobile frameworks are designed for [PhoneGap](http://www.phonegap.com/) to be cross-compiled into native apps rather than run the browser. There's no "silver bullet" for mobile apps right now. If you want performance, you'll have to roll your own - or build on an extremely lightweight mobile-optimized framework like [XUI](http://xuijs.com/) (which still doesn't perform super awesome). Mobile web apps are just a complete nightmare right now. The feature fragmentation between browser, device, and OS is massive. It's 10x worse than it ever was on desktop.
Exactly. I'm old enough to remember what it was like developing for Netscape 4 and earlier. It's like that whole period all over again, only worse. 
Actually, it doesn't even work properly on my Iphone4...
I wouldn't say ANY variant. With the right complimentary tools chosen you can get a pretty app-friendly stack. I currently have been playing with a combination of jquery + ui (cross-browser utilities, some widgets, animations/easing, etc) + backbone.js (MVC, general structure, etc) + EJS (templating). I have found this to be a very efficient way of working on application style ui...albeit you have to shop around for the different pieces you need to complete the stack (and there are different options for each of these).
Actually, I think you should consider the [larger issue of jQuery not being suitable for large JS applications](http://blog.rebeccamurphey.com/on-jquery-large-applications). 
Depending on his timeline, ext4 is no where near where it needs to be for any type of full production environment. 
&gt; "100% cross-browser+run on android/iphone" By this i meant that it should be 99% identical for Chrome, IE 7+, FF 3.5+, android browser, iphone browser. No such framework exists today?
No. You are going to have to make decisions, tradeoffs and adjustments to get what you want. Plus, using the word 'identical' makes me think you are more worried about the visual portion of this than the interactive. If that be the case, you need to be looking at cross browser development of CSS... not javascript. 
extjs.com
GWT is excellent, but IMHO the scenario that it's really best at is for when your whole site is one giant app. If that's the case for you then I'd go with GWT.
...or you could just use a framework that is designed for the task instead of adding a ton of overhead and dependencies on top of a DOM-oriented framework. The more plugins you stack on top of jQuery, the more brittle your application gets, and more difficult it gets to debug and maintain - it's just not worth the pain, IMO. jQuery is a great general purpose framework for manipulating DOM with some nice syntax shortcuts - I like to keep it at that.
pokerface
Very cool. Any ideas what advantages it gives you if you're already using server-side databinding in ASP.NET?
I like the concept of [Tempo JS](http://twigkit.github.com/tempo/).
yeah, what he said. just went to the sproutcore meetup at twitter's offices. sproutcore is very much interested in solving the problem of iphone/android ui for phone or tablet. i would also say (given my as3/flex background), that they have a lot of good parallels with flex.
It's annoying, I'm going to have to make a mobile app relatively soon, and I think I'll have to go with Sencha. Nothing wrong with it, but I'd love to be able to use SproutCore...
Pay for the documentation?? I'm looking at the docs right now
however, the devil might be in the details. did they optimize properly on the device? (they being RelToel's group).?
btw, the link below on Uki is interesting. I haven't heard of that one before.
Thanks for the answer, i think ill stick with flash+a lightweight widget library (like minimalcomps). By "identical" i mean 99% identical looking and identical functionality (i dont have to code and test for like 8 browsers). 
Sorry, meant tech support.
Why the hell has the poster been voted down 14 times? He/she just wants to learn. The fuck is wrong with you people?
Creation time of closures is poor but closures have a small advantage in getters and setters. I assume this is because local variable access is more efficient than property access. Here are the results of 5 million iterations in chrome. Empty loop: 33 ms Local access: 42 ms Closure Creation: 1013 ms Object creation: 98 ms Raw access: 53 ms Object accessor: 84 ms Closure accessor: 75 ms function PixelC(x,y) { return { getX: function() { return x; }, getY: function() { return y; }, setX: function(v) { x=v; }, setY: function(v){ y=v; } }; } function PixelO(x,y) { this.x = x; this.y = y; } PixelO.prototype = { getX: function() { return this.x; }, getY: function(){ return this.y; }, setX: function(v) { this.x = v; }, setY: function(v){ this.y = v; } }; function bench(name, func) { var t0 = Date.now(); func(); console.log(name + ': ' + (Date.now() - t0) + ' ms'); }; var n = 5e6; bench("Empty loop", function () { for (var i=0; i&lt;n; ++i); }); var l; bench("local access", function () { for (var i=0; i&lt;n; ++i) l = 3; }); bench("Closure Creation", function () { for (var i=0; i&lt;n; ++i) PixelC(1,2); }); bench("Object creation", function () { for (var i=0; i&lt;n; ++i) new PixelO(1,2); }); var po = new PixelO(); bench("Raw access", function () { for (var i=0; i&lt;n; ++i) po.x = 3; }); bench("Object accessor", function () { for (var i=0; i&lt;n; ++i) po.setX(3); }); var pc = new PixelC(); bench("Closure accessor", function () { for (var i=0; i&lt;n; ++i) pc.setX(3); }); 
I also tried a hybrid closure/this object in case the "new" operator was smarter about allocation or something. This performed far worse than both closures-objects and regular objects. function PixelHybrid(x,y) { this.getX = function() { return x; }; this.getY = function() { return y; }; this.setX = function(v) { x=v; }; this.setY = function(v){ y=v; }; } This confused mess appears when someone doesn't know what kind of object they want. I've seen it quite a bit, come to think of it.
This is why I'm personally sticking with jqTouch on my phone. It's pretty basic but it runs great on my phone.
totally understand
V8 is fast enough to generate real-time audio. Chrome does not have a real-time audio API.
Salutations. I would call it a string template function. Formatting usually means converting some other datatype into a string.
As I said, I can't see a difference anymore. An iframe is basically just a crude hint for telling the browser that it doesn't need to redraw those layers below the canvas. Firefox 4 will be released in a few days. With that, the last reason to do this is gone.
just reset everyone, then open the one you want?
&gt; var $notes = $( '.note' ).click( function() { $notes.filter( '.note_active' ).removeClass( 'note_active' ); $( this ).addClass( 'note_active' ); }); I'm really new and could use a little hand-holding. This is my code, can you be a little more specific? Thank you! 
I'm just guessing but I would do something like: var $notes = $('.note').click( function() { // remove from everyone, even those that don't require. $('.note').removeClass( 'note_active' ); $(this).addClass( 'note_active' ); });
Thanks for the help. I tried it and it doesn't break it, but has the same problem of not being able to close a note by clicking on it.
ok how about something like this: $('.note').live( 'click', function() { var na = 'note_active'; $('.note').removeClass(na); if ($(this).hasClass(na) ) { ? $(this).removeClass(na) } else { $(this).addClass(na); } });
I'm sorry that doesn't work either. Thank you, though!
$('.note').removeClass(na); if ($(this).hasClass(na) ) &lt;-- this condition will never be met as you just removed the class in the previous line
this is based on a .notes &gt; div structure. Feel free to supply a more relevant naming structure. // grab all notes $('.notes') .children('div').hide().end() /* hide all the child divs on load */ .click(function(){ var el = $(this); /* jquery-ify the currently clicked item */ // if the current item is active then remove it if (el.hasClass('active')) { el.removeClass('active'); }else{ // otherwise, go up to the parent, grab the active one and remove it // and toggle the child div el.parent().children('.active').removeClass('active').children('div').slideToggle(); // add the class to the currently clicked item el.addClass('active'); } // always toggle the clicked item el.children('div').slideToggle(); });
This should do it. Let me know if it works or if you need any explaining. var $notes = $('.note'); $notes.bind('click', function (){ $(this).toggleClass( 'note_active', 'addOrRemove' ).siblings().removeClass( 'note_active' ); }); Edit: Make sure as you develop the site that the notes stay inside a parent element. Using siblings() requires that. For a more semantic solution, you may want to consider a ul or ol for notes. Additionally, for your other questions: 1. You could just add the active class to all the notes in the HTML, and then remove them with Javascript on document ready. That way non-js users will see them all. If you need help doing this I can explain further. 2. jQuery is 29kb minified and gzipped. Really, as far as js libraries go, that's pretty light. I wouldn't go haphazardly chopping things out of jQuery. One thing you can do is use a CDN, that way your user likely already has the file cached. Here's a solid way to do that from Paul Irish's HTML5 Boilerplate which uses the CDN and a local fallback: &lt;!-- Grab Google CDN's jQuery, with a protocol relative URL; fall back to local if necessary --&gt; &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.js"&gt;&lt;/script&gt; &lt;script&gt;window.jQuery || document.write('&lt;script src="js/libs/jquery-1.5.1.min.js"&gt;\x3C/script&gt;') 
I don't think that's the gist of the article, at least not what I got out of it.
Good luck destroying your users battery life and taxing everyones systems. Oh and good luck with the iphone. 
Is this guy aware that the issues he's "exploring" have been addressed years ago? There are a [myriad](http://documentcloud.github.com/underscore/#extend) [of](http://api.jquery.com/jQuery.extend/) [libraries](http://documentcloud.github.com/backbone/#Model-extend) that implement his extend method. Namespacing in javascript is very much an issue of the past.
Thanks! It works perfectly! I cobbled together this: $(document).ready(function() { $("li.note_active").removeClass("note_active"); }); And it works, for a split second it shows the active state, but it really isn't a big deal. Is there a way to avoid this, though? I was planning on changing it to an ol actually, for a while I couldn't decide what was the most semantic element to use. I was just using span as a place holder. :-) I love semantics, and I about pooped my pants when I found out I could use definition lists in a real website. (Click on the little book) Eventually I will be replacing the divs with &lt;header&gt;,&lt;footer&gt; etc Semantics. :-D Thank you very much for your well thought out response. I really, really appreciate the help. Thank you! Also, this is completely unrelated, but you seem smart: is there any way to put google anylytics in a separate .js file? My search has come up [inconclusive](http://groups.google.com/group/analytics-help-basics/browse_thread/thread/811e3ed377d070b2?fwc=1&amp;pli=1). Thanks again!
To really clean up the experience for users without javascript, you probably want to write implicit styles for the non-javascript users. You can do this by adding a no-js class to your &lt;html&gt; tag, then changing or removing that class with a script in the &lt;head&gt; like: &lt;script&gt;(function(H){H.className=H.className.replace(/\bno-js\b/,'js')})(document.documentElement)&lt;/script&gt; This is taken directly from [Paul Irish](http://paulirish.com/2009/avoiding-the-fouc-v3/) Edit: I should expand on this. I'm not sure how much you know about CSS Selector specificity, but it's a pretty powerful thing to learn. So when your HTML tag has a no-js class, you can then add a no-js selector to specific styles for people who aren't using javascript, and because your CSS selector will have greater specificity, it will override the other styles you've provided. Let me know if you need me to give you an example on how this works. In fact, I would go as far as recommending his HTML5 Boilerplate. If you have a spare hour, you can watch [this](http://www.youtube.com/watch?v=qyM37XKkmKQ) to learn about boilerplate and how it can help you. As for the Google Analytics, honestly I probably don't really know enough about it to help you here, but I use this little bit of code here's a cool little way to [include the asynchronous snippet](http://mathiasbynens.be/notes/async-analytics-snippet). Not sure if that helps you at all. Suddenly 2 AM, I'm going to catch some Z's but I'll check back here in the morning, so feel free to drop any additional questions.
I think there are quite a few different namesspacing paradigms in existence with no predominant standard. Over the years, I've experimented with many different patterns. I've finally settled on a system inspired by Python's import facility. http://code.google.com/p/pageforest/source/browse/appengine/static/src/js/namespace.js Lacking a clear and unified mechanism for defining namespaces makes it difficult to read other people's code; and each library you use defines at least one global variable in the global window object.
 var Namespace = typeof Namespace != "undefined" ? Namespace : {}; Done
It might be the most elegant way to achieve this in JavaScript, but it's still not elegant enough for me. I personally just rely on his first attempt with '_' (an underscore, not a face) prefixed onto private methods.
 function ns(n, c) { c = c || window; return c[n] = {}; } More done?
good point, i called it format because its inspired by .NET's [String.Fromat] (http://msdn.microsoft.com/en-us/library/system.string.format(v=vs.80).aspx) function 
I have been working with dojo for years now, I found that the set of widgets that is provided with dojo are quite good and work nicely. The datastore implementation also works very well so there is one uniform way to provide data to widgets that require it. (combo boxes, grids, etc). I have been building web based GIS application without alot of fancy GUI requirements. It just has to look like a proper application. There is a mobile fork of dojo called EmbedJS https://github.com/uxebu/embedjs/ and within dojo you also have dojox.mobile which also contains some widgets.
While I do read Mashable occasionally, they really can be right at the forefront of the hyperbolic bullshit train. Which frankly wouldn't annoy me anything like as much if they didn't also purport to be making these ground breaking, self aggrandising 'announcements' to the wider community: 'Since we blogged about [x] it's gone through the roof!'. Ugh. From the first fucking sentence of this article I knew I was going to hate it &gt; HTML5 is no longer just a buzz word. Frankly it never was JUST a buzzword to anyone but the Chief Social Media Marketing Officers that spend their time reading sites like Mashable and tweeting things like 'HTML5 is like SO *now*!' or 'Retweet this if you're going to meet with your developers and use terms like HTML5 and CSS3 without having a *fucking clue* what they actually mean!'. HTML5 is part of a new generation of web technologies that due to the constant hyping and shouty hyperbolic articles on sites LIKE Mashable have had any realistic expectations of them replaced with the idea that they can simultaneously give you the greatest blowjob of your life while miraculously and instantaneously increasing your new 'social web apps' bottom line. Also, get off my lawn!
What advantages are there on using this instead of just using flot?
This is really short on any kind of "How". I was expecting some sort of useful explanation, not a top 7 list of cool sites that use HTML5 and javascript.
maybe because this lib is specific for statistical plots, while flot is a generic one...?
But it uses flot? :P
oh sorry I didn't notice...:) still: if you need statistical plot utilities, I think it can be useful (especially if you already use flot), otherwise you'll have to code those by yourself, since this is an enhancement over flot. just my 2¢
saw this a while ago and completely forgot until now... awesome plugin
I just wrote the new version of the code, but then I thought ughh.. this person is gonna send one of those mass invites that I hate.
flot just does the graphing, this does statistical analysis. jStat can be used stand alone, without flot, but then it doesn't have the graphing capabilities.
Maybe I'm just being naive, but I'm not really understanding why the JSYNC encoding example couldn't just be rendered in JSON.
Awesome, except for the high CPU load
The JSYNC adds much more structure than JSON would allow. For example: * The value `"!!date March 2, 1962"` represents a logical date object. You could do the same in JSON, but it wouldn't mean anything until *you* parsed it as such. * The `game` and `player` objects in the first `record` are given types (`"!game"` and `"!player"`), which I presume should be useful for automatic, custom (de-)serialization. * Those same objects are given identifiers (`001` and `002`), which are then referenced in the second record. In all these cases, the advantage is in a set of standards that define these semantics, ensure they are available in any JSYNC implementation. See [the specification](http://www.jsync.org/spec/). That said, there doesn't seem to be any reference implementation, so as of yet, none of the above is actually usable.
Yeah, i was checking out some of the demos from other sites, and problem with it, they are all really slow. SLow to load, seems that the browser windows is hurting a bit for scrolling.. In reality, i see no reason to do this with html and jQuery when it can be done on a canvas object. 
The same reason as anything, of course: Internet Explorer.
I'm not sure whether I love or hate this idea. On the one hand, yes, JSON can't serialise everything and so is a little limiting, granted. But having just spent the last week implementing a SOAP client by hand (language I'm using doesn't have anything that supports the service's WSDL), I'm really not sure that limiting what you can and can't serialise is such a bad thing. But, it's a pretty cool idea, simply because implementing the spec (on top of a JSON library) would be relatively easy. But then, you're forcing anyone who wants to use your data to either find or write code to support it. Tricky. 
Yeah but every HTML 5 feature has a downgrade path to using either flash or javascript. So as long as you keep that in mind as you are building your application, nothing stops you from using what ever you wants and just including the FIX IT IE6 scripts.
I pared down the library I use to create namespaces to this 250 byte (gzipped) open source project: https://github.com/mckoss/namespace (With 4K of documentation and 2K of unit tests).
I find it frustrating to have to deal with different ways that different JavaScript libraries deal with the global namespace. So I pared down my library to an essential 250 (gzipped) bytes. Is this proposal "essential" enough to get other people to incorporate it?
If this worked, I would love it. Unfortunately, one of the requirements is crashing and they don't specify which version of Node it should work with, just "a recent" one. 
flot does the graphing - which it does well. jStat currently provides the probability density functions and cumulative density functions for normal, log-normal, beta, gamma and (non-central) student t distributions. This allows you to plot those distributions in a few lines of code.
I don't think I like it, but that said, I sure could have used it on a project a few weeks ago.
What about http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition
Welcome to 2009. Nice to meet you.
Thanks for the link. That does have some similarities to namespace.js - though is much more heavy weight (since it includes a specification for loading modules and generating callback functions to modules that are waiting for them). I find it simpler to separate namespace isolation from module loading. I think one can be built on the other. Using "AMD" will require a much more substantial library (like RequireJS) to support it (which in turn has some sort of build magic that modifies your code based on its location in your source tree?).
This looks cool! I wish there was a github repo or something similar, though. I'd also be interested in seeing some commonjs/node action. I have to admit I'm not a fan of flot.
Is there an advantage to not just using this simpler function instead? randomPseudoEncouragement = function () { var messages = [ "I'm sorry, but you lost", "Better luck next time!", "Keep on gambling!", "You'll win eventually" ]; return messages[Math.floor(Math.random() * messages.length)]; };
I can truthfully answer this with a 100% certain... maybe. Well, with this specific usage pattern, there isn't much of a reason to put that array in a closure. That function is only called once. So, that array is only created once and only GC'd once. No matter where it's stored. But even if it's called a few thousand times, it won't really matter, since the construction (and destruction) of that fairly tiny array is relatively cheap. (Compared to outputting the result in a browser, for example.) So, in this specific case there isn't really much of a reason to do it. It's more of a structural example. (And to be honest, I did it out of habit.) But stuff like that is cool if you want to cache some data which was expensive to create and/or expensive obtain. This can be also easily combined with lazy initialization. That is, you only do those expensive things (once) if you actually need them and then you put them in the closure in case you need them again. **Lazy init example:** var heavyStuff = (function () { var init, data; init = function () { console.log('meh... gotta init...'); var i; data = []; for (i = 0; i &lt; 10; i++) { data.push(i * i); // imagine this were something expensive } }; return function (x) { if (!data) { init(); } return data[x]; }; }()); console.log('heavy stuff!'); console.log(heavyStuff(2)); console.log(heavyStuff(3)); **Output:** heavy stuff! meh... gotta init... 4 9 **Lazy init example#2 (module pattern-ish):** var mod = (function () { var init, data, theUsualThing; init = function () { console.log('meh... gotta init... the shizzle'); var i; data = []; for (i = 0; i &lt; 10; i++) { data.push(i * i); // imagine this were something expensive } }; theUsualThing = function (x) { return data[x]; }; return { shizzle: function (x) { init(); this.shizzle = theUsualThing; return this.shizzle(x); } }; }()); console.log('ze shizzle'); console.log(mod.shizzle(4)); console.log(mod.shizzle(5)); **Output:** ze shizzle meh... gotta init... the shizzle 16 25 Kinda fun, isn't it?
&gt;Yeah but every HTML 5 feature has a downgrade path to using either flash or javascript. I have a product that should be able to run from IE6 - IE9, What you are telling is that I should write it twice? (Forget Flash).
So what is 2011?
This appears to be less useful than Pretty Diff and not necessarily more easy to pass around.
Reposts from 2009. Also, native browser animations that look like Flash did in 2005, except they don't work in all browsers.
Sprite.js gives you the choice of the backend (html canvas), and it doesn't rely on jQuery: https://github.com/batiste/sprite.js
**TL;DR**: JSON syntax, YAML semantics. Neat. 
Eh, it's neat I guess, but I'd rather use [John Resig's version](http://ejohn.org/blog/simple-javascript-inheritance/). No dependency on a third party library, and I think "Class.extend" is much more intuitive than "Toolbox.Base.extend" (though I understand you could always change the name in the source code) EDIT: The one advantage to this "Toolbox.Base" implementation is the addition of static class methods.
check out [FuncUnit](http://javascriptmvc.com/docs/FuncUnit.html#&amp;who=FuncUnit). It's part of the [JavaScriptMVC](http://www.javascriptmvc.com) framework
Ah, sweet. I think I get it. I'll have to play around with this a bit. I've read a few things about caching for performance optimization and this is an interesting approach. It definitely makes more sense in the context of an expensive operation. Thanks!
Hmm seems useful if you have to access every client all at once. Not sure if it is as multi-purpose as dnode.
There were a few bugs in the initial upload of the vim script that caused it to crash -- I fixed them about a day ago. Sorry about that! As for the version -- I've tested jsctags against Node 2.6 and 4.1.
I've been in the habit of writing js really only an object-oriented fashion, so would there be any difference to writing your first example as such: var coolObject = { init: function () { var self = this; // keep a reference to the original object console.log('meh... gotta init...'); self.heavyStuff(); }, heavyStuff: function () { var self = this; self.data = []; for (var i = 0; i &lt; 10; i++) { self.data.push(i * i); // imagine this were something expensive } } } coolObject.init(); console.log('heavy stuff!'); console.log(coolObject.data[2]); console.log(coolObject.data[3]); The 'caching' is simply assigning the output of the heavy calculating to a variable that can be reference later, no? Is there a benefit to writing everything as a single variable with a self-executing function &amp; a return function? Is it just a matter of design preference? Just curious.
&gt;would there be any difference In your case `init` and `data` are public. In my case they are private. Encapsulation makes things more restrictive, but that's nice since it excludes a few error sources. E.g. if there is a bug somewhere, you won't have to check if some other piece of code modifies your private data or calls your private functions, because they are really private and inaccessible from the outside. You also always call `init`. The big idea of lazy initialization is to postpone the actual work until it's actually necessary. You can for example have dozens of those things on a single page, but you only actually need them if the user performs a specific action. Doing all of those things upfront would be wasteful and might negatively impact loading times and responsivity of your application. **Private example**: var example = (function () { var factor = 5; return { getFactor: function () { return factor; }, multiplyWithFactor: function (x) { return x * factor; } }; }()); console.log(example.factor); // undefined console.log(example.getFactor()); // 5 console.log(example.multiplyWithFactor(4)); // 20 example.factor = 27; console.log(example.getFactor()); // still 5 console.log(example.multiplyWithFactor(4)); // still 20 
I like [QUnit](http://docs.jquery.com/Qunit). Not sure it has *every* feature you're looking for though.
We're using [Jasmine](http://pivotal.github.com/jasmine/) for unit testing, plus Selenium + Cucumber for acceptance testing - we don't run unit tests in multiple browsers, because hopefully unit tests should have minimal browser-specific issues, and the Selenium tests should find those. Currently we're running it in [env.js](http://www.envjs.com/) under rhino, but we're also looking at running it under [phantomjs](http://code.google.com/p/phantomjs/) which so far looks very promising We also use a few plugins - mockjax, jasmine-jquery and jasmine-junitrunner - to generate nice reports in jenkins. Jasmine seems pretty good, but I'd like to know about other options - it's still far from the ideal solution imho.
Yeah because if they were surely their lapdog Gruber would report it right away...
What about this? var coolObject = { init: function () { var self = this; console.log('meh... gotta init...'); self.data = []; for (var i = 0; i &lt; 10; i++) { self.data.push(i * i); // imagine this were something expensive } delete self.init; }, heavyStuff: function (index) { var self = this; if (self.init) { self.init(); } console.log(coolObject.data[index]); } } console.log('heavy stuff!'); console.log(coolObject.heavyStuff(2)); console.log(coolObject.heavyStuff(3)); 
coolObject.data is public. console.log(coolObject.heavyStuff(2)); // 2 coolObject.data[2] = 'derp'; console.log(coolObject.heavyStuff(2)); // 'derp' Being public isn't necessarily wrong though. It's just out there... in the open. And that's one more thing you'll always have to keep in mind if you change things or try to fix some bug.
Ah right, public and private... I haven't done too much with data manipulation, mostly one-off actions on page load. I always try to be conscious of namespacing, but still trying to wrap my head around managing legitimately private variables/functions/etc. Thanks for the explanation!
Yep, I hear that. At least it solves the lazy initialization portion. :)
FWIW TestSwarm is very test-framework-neutral. Kumar McMillan has been trying to take the concept and make it more CI-friendly: https://github.com/kumar303/jstestnet I wrote my own test framework, [doctest.js](http://ianb.github.com/doctestjs/) which I've been using with the team I'm working with, and it's been good -- notable at least because it's a substantially different model than most test frameworks (which are mostly xUnitish).
Why not link the the [original](http://sixrevisions.com/javascript/20-fresh-javascript-data-visualization-libraries/)? Also, [flot](http://code.google.com/p/flot/) and [amcharts](http://amcharts.com/) were not mentioned. Both are excellent.
what about the HTML5 offline caching? they turned that off too
I really like [knockout.js](http://www.knockoutjs.com)'s implementation of client side data-binding. Dependencies become so easy, you don't have to think about them at all.
No, not twice. The JavaScript libraries I am taking about are used to fill missing gaps in html5 support. Here is a really good podcast about it: [official jquery podcast #27](http://podcast.jquery.com/2010/06/18/episode-27-remy-sharp-part-2/)
er.... yo dawg?
 function javascript(){ return javascript(); // should be fine };
**J A V A S C R I P T I O N**
Bout time... was getting sick of all these other languages being implemented in JavaScript but not any good ones.
Comment about turtles.
OK. I like turtles. They're definitely interesting creatures. The babies are some of the cutest I've ever seen.
Recurse you, JavaScript!
Inception and Yo Dawg jokes aside, I would like to know what the purpose of all this is. Looks like the README at the github repo (thank you asdf03) has some answers: &gt; Originally a proof-of-concept by Brendan Eich, Narcissus is being revived as a test-bed for rapidly prototyping new language features for the JavaScript language (as well as the ECMAScript standard).
Great list! I'll see if I can add anything to it later on.
you rang?
I've done that. It wasn't as hard as I expected. function javascriptImplementation(source) { return eval(source); } 
YAY! Quby got a mention!
I believe there are some Webkit audio APIs for generating sound on the fly. Probably not in the stable build of Chrome, but I know the Chrome devs are building it in (and are most of the way there).
The CSS function doesn't quite work like that in jQuery. I think you need something more like this: $("#centerbox2").css("background-image","url('images2/centerboxa.png')"); You can read more about it in the [documentation](http://api.jquery.com/css/) for the function. Hope that helps!
jQuery has comprehensive docs, including for [.css()](http://api.jquery.com/css/), I recommend becoming very familiar with them. However, there are more problems here than just incorrect jQuery syntax, I would recommend learning JS &amp; CSS basics before trying to use jQuery. jQuery is shorthand for JS and CSS, it is not a replacement for learning the underlying languages.
You aren't using the css method properly :). Have a look at http://api.jquery.com/css/#css2 Try: $("#centerbox2").css({'background-image': 'url("images2/centerbox0.png"' }); 
$("#box2").hover( function () { $("#centerbox2").css('background-image', "url('images2/centerboxa.png')"); }, function () { $("#centerbox2").css('background-image', "url('images2/centerbox0.png')"); } ); The point being that jQuery's .css method accepts 2 arguments. The first is the property you want to set (background-image) and the second is what you want to set it to (in this case, url(url)). Just a note, it looks like http://www.tcschiller.com/images2/centerbox0.png isn't uploaded to that location - make sure you upload the image (centerboxa.png is there just fine).
I'd love to see a list of languages that interpret to Javascript as well. Sometimes having an interactive shell is nice.
You can hesitate to mention it as an example, but if you're going to bring it up, you may as well provide a link, to get yourself a tiny bit of free publicity. ;)
Came here to post this. You beat me to it!
True enough. I'd probably be pushing harder if I expected to make money off Runestone Wisp. So far, I've just about broken even on the money I spent to host it. That doesn't cover: * The month I spent wracking my brain about how to make it work. * The three months I spent coding it. * The month I spent tuning the interface and expanding it after I thought it was done. * The huge favor I called in to get permission to use the music. Some of the other contestants for GameOn contest said they would be heading straight to Flash. I tend to agree. I don't think the marketplace is ready for HTML5 games. And that's why I'm ok with not linking to RSW ALL the time. :-)
Woah, I uh... I love you. (Hangs up)
Are you using maven for builds? If so there's always the excellent [jasmine-maven-plugin](https://github.com/searls/jasmine-maven-plugin) which will give you JUnit formatted output that hudson can pickup. I'm just wrapping up a project where we used Jasmine to test and test drive javascript (we have over 750 specs right now) and it's the most *expressive* js testing framework out there IMHO. **edit: just saw you are using ANT, but you should still be able to take a look at the maven plugin and glean some lessons which could help you roll a similar solution in an ANT script.
tl;dr: "My ultimate recommendation is ISO 8601 (2004) in UTC." Upvote for ISO 8601.
Dinner and a movie... where you cook the dinner and rent the movie.
This is the first time I've heard (Waquo, in the comments) claim that callbacks could be considered concurrency. If two things aren't happening *at the same time* then they're not [concurrent](http://wordnetweb.princeton.edu/perl/webwn?s=concurrent).
Word. Also supported by ecmascript 5 (and [the latest browsers](http://kangax.github.com/es5-compat-table/)).
I can't adequately explain how worried I was that the answer was going to be wrong. Happily it was correct and I can relax now.
TL;DR: "I just discovered ISO 8601 (2004) and UTC". :-/
That said, is it really news to *anyone* who's a moderately-competent developer that ISO8601 + UTC is the best answer?
&gt; This is the first time I've heard (Waquo, in the comments) claim that callbacks could be considered concurrency. [Then you should read more](http://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/). &gt; If two things aren't happening at the same time then they're not concurrent. This makes a program's (or language's or OS's) concurrency depend on the hardware and software platform on which it runs. Do you *really* want to open this can of worms?
Nice use of Wordnet :)
The best date format is the one the end user is most comfortable with. ISO8601 might be great for programmers but Marge from Accounting would just get confused by it. Allow users to specify their own format.
Best answer for what? Don't get me wrong, ISO8601 is great a lot of the time, but if you're working with a date as opposed to a datetime, it'll add more data than you mean it to. i.e. it will appear that you are specifying 00:00 when you might not intend to.
People are going to continue being disappointed in JavaScript as long as they persist in thinking of it as something you should compile into. Your life will be easier if you just accept it and write in it natively.
Headline says "date", article is clearly talking about date**times**. ISO8601 (or a minor variation, cleaned up for usability) is not always the best format for any date-related job, but where you're talking about *datetimes*, it almost always is.
8601 with any timezone is fine, because the timezone offset is specified as part of the datetime.
YYYY-MM-DD?
Question: which bear is the best?
The note about MySQL is a little confused. MySQL doesn't "reformat" the date. It just doesn't store the date as a string internally. It uses a proprietary binary format akin to a Unix time stamp. Of course, when you later query the field, MySQL (the MySQL client library/PHP extension, not the database server) must serialize that internal binary format into a PHP string for use by your script. If you want to direct the formatting, you should simply specify an explicit cast in your query using one of MySQL's date and time formatting functions.
What you display to the user and the date the system and the programmers work with do not have to be the same.
Programmers typically work with date objects, numeric timestamps, etc. If the language has date literals then usually you stick with whatever format the language accepts. Formatting comes into play when you're displaying the date for the user. If the users are also programmers then ISO8601 would be spiffy otherwise it's best to let the user decide how they want to see the date or at least default to a locale based format.
Using the language Date literal only works as long as you never have to use the date anywhere else. Once you start storing the data into a database or sending the date with JSON or XML then date literals are no longer an option. For these cases I've always used ISO8601. Is that what the user sees on the screen? Of course not.
For date serialization then I agree ISO8601 is a good choice. You can't make much of an argument against it since that's why it was invented in the first place. Deciding on it doesn't require all of the pondering and navel-gazing that OP article talks about.
This is obvious and slightly beside the point. The article clearly says the same thing in the first paragraph. The rest is about serialized dates for communications. And for that, ISO8601 is perfect.
Which is just as obvious. For date serialization and as I mentioned in another comment, you really don't need to ponder and argue the point like the article does since ISO8601 was designed specifically for that purpose. The alternatives mentioned are not. Happy Reddit birthday btw.
Thank you. The author seems to be very sheltered, focused so heavily on JS and Python. Basically, he seems like a very inexperienced programmer so I can forgive him for delving into a solved problem. And who knows? Sometimes a fresh set of eyes solve an old problem in a really helpful way.
Polar, without a doubt.
Close! At my work we use YYYYMMDDHHMISS if we need to store it in a (somewhat) human-readable format... it sorts nicely and has the side benefit of being a purely numeric value, which may or may not help with sorting speed in loosely typed languages but provides a HUGE speed boost in Java / C / etc. If we don't need to store them in a human-readable format we roll with "UNIX epoch time in milliseconds", which just so happens to be the absolute easiest thing to deal with in both Java and JavaScript.
Gilad Bracha is a PL researcher, not a web developer. Javascript is just one target upon which to build.
This, upvoted a zillion times.
I know who he is. He is a seriously smart guy, and (since I write Java a fair portion of my day) I'm highly grateful for his fantastic work with Sun. My point of contention is less with him in particular (especially since he seems interested in a target for a Smalltalk derivative) than with the hordes of people who basically go "Eww! Javascript." and ask for a way to "compile" Java into JavaScript, when JavaScript is (in most instances) far more concise and high-level than Java. I use scare quotes around compile because to me it seems more like translation, especially since compiling typically means you go from high-level to more low-level.
What is the I?
Koala. It doesn't matter.
MInutes, since MM is already taken for "month".
I assumed so, but then again even a broken watch is correct twice a day.
It still amazes me that a rushed, poorly implemented, poorly designed language has basically become the most important language of our time. If only Netscape had been a smidge more insightful back then.
Wrong. Black.
This has nothing to do with curly brace placement.
Your comment could be more useful. This has to do with automatic semicolon insertion.
As I mentioned in the article, semicolon insertion and the return statement's ability to stand on its own is what actually causes the problem (I assume this is what you're driving at). For most JavaScript developers who don't already understand this, especially ASP.NET developers who default to Allman in C#, brace location is the important takeaway though. To my knowledge, there's no way to make an Allman variant of that code work.
1TBS for life edit: 504 error that stealthly submits multiple versions of your comment for life
Again, this has nothing to do with brace placement. You even say it has to do with semicolon insertion, just leave it at that. return 1; Is incorrect for identical reasons and has no curly braces. You are right though. It would appear Allman style is not compatible, but looking through some of Allman's C code (unix Star Trek), it doesn't appear he returned many array/struct literals.
Don't downvote the (wo)man, (s)he's right. It *was* rushed, poorly implemented, poorly designed and *is* (probably) the most important language of our time. Don't think so? [Don't take my (our?) word for it.](http://www.youtube.com/watch?v=hQVTIJBZook)
It's been quite improved since release though. It has it's quirks but I still like it a lot.
Yes, yes, yes, and yes. But it's still better than PHP. Pow!
YYYY-MM-DD HH:MM:SS for me if I need a full date/time [or MI instead of MM for minutes].
With some very basic knowledge of the gotcha's in the language it becomes such a powerful and expressive language I give it a pass due to the faults of it's origin.
Crockford has a lot of knowledge and some very strong opinions, but I'm not sure he's always right. "You've all heard about cross site scripting attacks. Those attacks are fundamentally enabled by javascript's use of global variables" - @ 11:55 from that video I don't see how global vars fundamentally enable XSS. Sure, an XSS attack might utilize global variables, but that is not a cause. Even if there was no javascript code at all on a page, no global vars, you could still suffer from an XSS attack. If you used anonymous functions, no global vars, you could still have an XSS attack. There are many causes of XSS attacks, and as far as I can tell, javascript's use of global variables isn't one of them. I might be missing something, but this seems a bit wrong what he's saying.
I don't disagree with you that semicolon insertion is the crux of it. It's just that this post wasn't written primarily for the audience that sees: return 'bar'; And then understands that they shouldn't write: return { foo: 'bar' }; You and I get that, but a lot of the people who end up at [the post this is extracted from](http://encosia.com/2011/03/14/use-jquery-to-extract-data-from-html-lists-and-tables/) (where I'll cross link it soon) may not. To many people, those look like entirely different beasts. My goal here is to "trick" some of the earlier post's readers into learning more JavaScript than they may have intended to, while they're already there learning how to perform a specific task with jQuery. For that audience, I believe that being very clear and focusing on the single common scenario where semicolon insertion breaks Allman braces is beneficial.
Animates fast &amp; smooth- nice!
The HackerNews submission and comments are here: http://news.ycombinator.com/item?id=2349127
Awesome!
Would love to see the webapps people are making with this. Here is one: http://tinyurl.com/67dou5n Here is another: http://names.akshell.com/
Worst thing ever (almost).
Interesting little site, but you can't really make "proper" applications with it, can you?
 var obj = { foo : "bar", bob : "123" }; return obj; Would still work. Don't see why I should change coding style for one edge case.
I use google closure compiler almost daily. It detects this kind of errors. For example: function bar () { return {foo : 1}; } it throws: test_return.js:4: WARNING - Suspicious code. This code lacks side-effects. Is there a bug? {foo : 1}; ^ 0 error(s), 2 warning(s) 
Just a note of caution: I've used Conductor 0.1.0 in quite some occasions and it can be a very powerful tool. (e.g. dynamic number of asnyc calls with one "end" function that gets all the results) However if you do stuff like this your code becomes horrible to read! I don't know what changed in v0.2.0 though (since it broke my code in a lot of cases I didn't invest the time to check yet).
That's the only decent text editor I've seen written in JavaScript.
did you hear about the tsunami and earth quake?!??!
It's actually quite slow for me in FF 3.6, and I think it's because it's drawing circle outlines. If he used images of circle outlines instead it would probably be smooth. For example I have my own version which uses a brute force approach to collisions which runs much faster with 100 balls! But putting graphics aside the principal is still great, so it gets an up-vote from me!
This is cool!
I agree, thanks for posting!
Ill see what is up with Firefox 3.6. What OS are you on? Does it run OK in other browsers? It draws the circles once, and then they are cached as bitmaps (EaselJS has built in support for this), so there is not any drawing after the first frame (unless you turn the overlay that shows the QuadTree regions). Regardless though, on chrome, even before I was caching the graphics, it was still drawing at acceptable rates. Ill look into what is going on. Update : I just tested it on Firefox 3.6 on Mac OS X 10.6.6 on a pretty new Mac Book Pro. It runs about 22 - 23 FPS (runs at 24 FPS in Chrome, and 24 FPS in Firefox 4 (beta)).
Wow, you don't need to be such a dick about it. The dude clearly just wanted something like jQuery which automatically accounts for different browser funkyness on the fly. 
It's quite slow on the iPad. Which is probably reasonable seeing as it's the iPad, but just pointing it out. It gets about 3fps. Great demo though, I like it!
For being written purely in JS this is damned impressive. The code editor alone blows me away. I'm very curious how they did it, is it a canvas control? Sadly, it failed my "could this replace TextMate" test immediately when I typed [ and it didn't provide a matching ].
Komodo Edit: Free, Open-Source, wide language support, works on Win/OSX/Linux, extensible/customizable, years of proven stability... but you can't get integrated debugging for free. Has anyone switched from Komodo to Cloud 9? It doesn't look like it has enough advantages to bother learning a new (and rapidly changing) IDE.
FYI this is where Mozilla Bespin / Skywriter went. I haven't figure out how to run your own server, I was quite excited at the possibility of collaborative coding with my coworkers, but we'd need to host it all ourselves, no cloud stuff. They say this is possible, but I'm unsure if it is possible as in "just install XYZ on your LAMP and away you go" or possible as in "it's open source, you figure it out". I've learned much from net.tutsplus.com but this seems like an advert. Shame it never got the attention it deserved when it was a Mozilla Labs project.
FYI this is where Mozilla Bespin / Skywriter went. I haven't figure out how to run your own server, I was quite excited at the possibility of collaborative coding with my coworkers, but we'd need to host it all ourselves, no cloud stuff. They say this is possible, but I'm unsure if it is possible as in "just install XYZ on your LAMP and away you go" or possible as in "it's open source, you figure it out". I've learned much from net.tutsplus.com but this seems like an advert. Shame it (bespin / Skywriter) never got the attention it deserved when it was a Mozilla Labs project.
haha, ok fair enough. but someone else might. you dont have to down vote it. you could just move along. 
also, I've already got my answers. Just figured it was an easy way to check before I submitted them. and I gave you my up vote for responding anyway
Post your answers and reasoning first.
Tell me your answers first to show you've made an attempt and then I'll help you out.
I tried it and after an hour of fiddling got it to run. As soon as I tried to make any change, the server script crashed.
Can you give a nutshell or link for the lazy and time pressed to how you got it to (kind of) run? What's the server setup like?
It actually does do that: http://screencast.com/t/fo3loIHLzRJq
I get 24fps in Chrome too and in FF 4. Profiling in Chrome shows that it's idle for around 83% of the time, and task manager states it's using about 1/4 of one of my cores. So I think the issue is actually that it is set to run at a low framerate. If the drawing (or something else) was too expensive then the it would be using more CPU then. I also found a bug. If you turn the grid on and then off it's still shown. Btw this is [mine](http://www.playmycode.com/play/game/joe/balls) that I was comparing it to. Again it's brute force so it doesn't scale well past a couple of 100.
Uh, no, that's not the feature I was talking about. I'm talking about auto-encapsulization, typing a quote or a bracket and having the closing quote or bracket added on the other side of the cursor/selection. It's one of my favorite features of TextMate and is always the very first thing I check for.
The first one is wrong. Or technically undecidable, I suppose, since all are valid conditions.
I was wondering about that one. They all seem valid to me.
I could do the same with just three lines of code. trollface.jpg
Since it's open-source, there's a good chance someone will add that feature.
Trick question, I don't believe assignments count as _conditions_.
I see what you did thar :)
Yeah, its slow on iPad and Xoom. Canvas rendering is just slow in general on those devices.
&gt;I also found a bug. If you turn the grid on and then off it's still shown. Haha. I just noticed that also and am looking at it now. Seems to be a Firefox issue. In my tests, the QuadTree was about 25% faster than brute force with 500 circles, and about twice as fast with 1000. Im guessing the difference would be larger if there was no rendering as I think that is the main performance bottleneck. Update : Just fixed this. It was my error. For the checkbox value, I was checking: checkbox.value Which is Chrome / Safari returns "on" or undefined. In Firefox, it appears to always return on. The fix, was to check for the "checked" value: checkbox.checked Thanks for letting me know about the bug.
Oh good call I missed that.
This guy might have a decent page if he'd quick sucking his own dick so much.
Welcome to 1995.
[PC Mag Article](http://www.pcmag.com/article2/0,2817,2382386,00.asp)
You realize that using this makes us all dangerous hackers, right? Tonight on Fox News: Left wing terrorist website hates American jobs.
Or just delete your cookies.
so what's the new york times paywall?
I've always found that feature extremely annoying, maybe I misunderstand what you use it for, or if you click around a lot, but I type and I'm still left with either hitting the "] to type the semicolon, comma, what have you.
It's true not everybody likes it (which was why I checked for a setting before I wrote it off), and it's one of those kind of feature where if you aren't used to it, it's really annoying, but once you do get used to it you get dependent on it. I find myself often missing the feature here on Reddit, where it'd be very handy with Markdown formatting. For normal typing it's merely a safety feature, ensuring the closing character is always there. Where it really shines is when you've got something selected that you want to wrap, like a url or a pasted string. Just select the text and hit the quote or bracket and it applies it to both ends.
there is not one bit of '3D' in this at all. ridiculous title.
Any expression counts as a condition. Type `controlVariable = 10` into a JS console and you'll get `undefined`, which is falsy.
You're correct, but the expression "controlVariable = 10" actually evaluates to 10.
Their github page has instructions a few scrolls down: https://github.com/ajaxorg/cloud9 Crashes on OSX 10.6.6 though (UI doesn't load)...
I've been using cloud9 for over a month now and it's awesome for node.js coding! Not sure if I'd use it for "normal" frontend javascript development though, it's still a very young project and has some things missing/not working properly.
lol I can't believe this is their method for obscuring the source document. Fucking classic.
Cloud9 is relying on some pre-compiled binary components (node, o3-xml, etc) in the release-crunch we have not updated all platforms and combinations. This will get sorted soon. Till then you can compile your own binaries (check README)
We are rapidly adding stuff, let us know what you are missing!
variety works in a similar fashion. you can just turn off the overlay in Firebug or another developer tool.
I was curious of the same thing, but I think it's the thing that NYT does to non-subscribers, where you only get to read a portion of the article and after that you're blocked from viewing the rest of it until you pay them, and subscribe, at least I think.
3 lines actually
this mess things up too: jQuery = null
Ah.
you can JQuerify the page too
Is this for the paywall they have not yet implemented or the non-pay wall they currently have? 
I can't seem to hit the NYT Paywall - I've been reading articles for ages. Any help?
The NYT paywall is one week early in Canada, they haven't rolled it out yet in the US, they wanted to test it out in Canada first.
javascriptImplementation = eval;
Theoretically, you could do it with a canvas element, using js to transform/scale the image, and then maybe encode the image and store the data string so that the server could generate an image file.
Oh ho, thanks! I'll give it a shot.
I am using a base install of Ubuntu 10.4 server and followed a few guides.
Sure, popularize the method so that they'll hire competent programmers to fix it!
Just clear your cookies. That is how they track your visits, as opposed to tracking your IP. You can read 40 articles (may be less, but I believe it is 40) per month before the pay wall kicks in. Delete your cookies and you are back to 1. No JavaScript needed.
Ah yes, forgot to mention the need for x-compatibility with non-html5 browsers also.
What, and leave it uncommented? Aren't you concerned about the psychopath who will be maintaining it?
They have implemented the pay wall, it was rolled out in Canada first as a trial.
Using Java is an alternative. I used [javauploader](http://code.google.com/p/javauploader/) a couple of years ago for a project and it worked nicely. I think it's been developed and improved quite a bit since.
Nope. When I did something similar a few years back, ie (6) was the only browser that would let you load images from the client filesystem. I don't know if later versions of ie still will allow it. Anyway, it can be done with Java or perhaps Flash.
Heh, I'll ask in IRC if I have something that's really important to me. ;)
Or get web developer toolbar and turn them off temporarily
If I were the dev team asked to put the pay wall back up, I'd have done something so easily undone as well, out of principle. In reality, though, whoever made this business call is looking for short term gains, anyway, so why would they OK more expensive architectural changes that involve first-view-free and serving different views for an article?
Sweet!
1: All are valid 2: none 3: A, C 4: infinite 5: A 6: 99 7: FALSE 8: B
Why don't you try Google Picasa
Depends on if you need sorting. To sort you need to normalize the time zone, and normalizing to UTC makes a lot of sense.
By "cleaned up for usability", you mean using a space as a delimiter instead of "T" right? I'm not a fan of the "T" at all. Too hard to parse at a glance with the human eye (for me).
Basically, yeah... and optionally fiddle with the timezone/offset values after the time if they're confusing (eg, ISO8601 mandates a trailing "Z" for "Zulu time" if the timezone is UTC - bleh).
backtroll.jpg
But you tend to treat dates as epoch offsets when sorting, in which case they would all still work, as the timezone would be considered when calculating the epoch. For languages like C#, the timezone is, I believe, implicit in Datetime objects, if not specified, so I would imagine the difference computationally is negligible. That being said, when you're dealing with things like databases, I agree, stick to UTC, if only because most languages implement a method like toUTC or fromUTC to make your life super easy.
BigText comes to mind. Is this what you're looking for? http://www.zachleat.com/web/bigtext-makes-text-big/
That's really awesome, so many uses for this. Thanks for sharing =] Have you seen [Eve](http://dmitry.baranovskiy.com/eve/)? It is a similarly tiny eventing library, but events can only be global rather than attached to specific objects. I much prefer your method, but Eve has a couple of cool features (wildcards in event names, and being able to specify a context for event handlers) that you might find interesting to look at.
This is a half truth. The main pain of JavaScript is typically around interacting directly with the DOM.
Very [tacit](http://en.wikipedia.org/wiki/Point-free_programming).
Two lines of CSS + Chrome Extension :) http://wesbos.com/remove-new-york-times-paywall-css/
ok i will look at it. But the more features i add, the less it is micro... feature vs bloat kindof dillema
yup, thats the one. thanks dude
It's a really good programming book, in general. Maybe not the best book for beginners, because it ramps up in difficulty pretty quick, but I really learned a lot from it.
Had never heard of it, but I'm also generally suspicious of "one of the best" type reviews being published by the author of the same material (ie. shameless self-promotion).
I recommend it to anyone I know looking to start out in JS
No reason to be suspicious. Rey Bango wrote the review, and Marijn Haverbek is the author of the book.
Hi alteredq I kind of agree with leptons. After all this is a Canvas 2d app. But, whatever the title, it's still a slick little demo. BTW, I don't mind playing nasty when it comes to shortening code. The following code also runs the demo on FF and Chrome (neither this code nor the original run on my IE8): &lt;canvas id="c"&gt;&lt;/canvas&gt;&lt;script&gt;h=0;setInterval('h=(h+84)%151;with(document.body.children.c.getContext("2d"))fillStyle="hsla(9,99%,"+h+"%,.1)",fillRect(75-h,75-h,2*h,h)',9)&lt;/script&gt; Pasted into a new file and renamed h.htm, this takes just 181 bytes of space instead of 321 bytes on my hard drive. Theo
I probably just went dyslexic, caught the poster's name and the name of the blog... and spun/confused it with the author of the book. Mea Culpa.
No worries. I can't take credit for Marjin's awesome work but his book is really great. :)
Then no. Javascript has no access to pixel data. Flash might.
It will stay the same size.
Thanks for the pointer. I thought it's really neat that there's a console which you can work with while reading. The unique joy of JavaScript!
Thanks Rey ... I'll give it a good look (now that I've "pulled my head out," so to speak).
'3d' can be done on a 2d canavs, but you have to actually have 3 dimensions, not some stupid little expanding boxes crap. There's nothing like a z-axis here, not even close. This doesn't even get the expanding part right. If it were an approximation of '3d', the boxes would expand and the outer boxes would have different widths than the "inner" boxes.. but here all the boxes have the same width. 
Thank you!
&gt; not your typical reference tomb. Nothing worse than getting buried in one of those. 
Yeah that is pretty cool. 
Sadly, I don't have anything to contribute to this conversation.
It appears that a [previous version is available for download in full](http://eloquentjavascript.net/) on the book's homepage.
Dimension 1 is X. Dimension 2 is Y. Dimension 3 is Time. How's that? ;-) But, seriously, doesn't it look a little bit as if you are traveling down into a tunnel? 
no. not at all. not 3d at all. nothing like a tunnel.
Check out phonegap's source code: https://github.com/phonegap/phonegap-iphone You can probably use the same technique to manipulate iOS views through loading javascript within a hidden uiwebview.
1) namespaces are good. +1 2) meh, any decent editor will have a jump to definition feature. Magic numbers are not really related to declaring variables in the middle of a function. -1 3) who really thinks JS uses block scope? Ok, who thinks JS uses block scope who's used the language for more than 5 minutes? Non-issues. -1 4) Ridiculing coders for not knowing about OOP in JS, and then waving your hands about saying "use google" doesn't convince me that you actually understand prototypical inheritance either. Also, prototypical inheritance can set you up for bad falls later on (eg if you extend native objects like Array). -1 5) array literals and object literals are different things. What wrong with saying new Array(), *really*? You claim performance, but where are your benchmarks? -1 Overall: -3 points. edit: &gt; Javascript gets a bad rap on the Internet not really. Used to about 5 years ago. Now it's the sexiest language around. &gt; If you're using a variable named loader() you mean function. &gt; script kiddie doesn't mean what you think it means &gt; 40 line block of code forty whole lines? lol. &gt; Even literals like integers and strings are implicitly converted to objects with their built in constructors A String literal is not quite the same as a string object: var s1 = 'derp'; var s2 = new String('derp'); console.log(s1); // derp console.log(s2); // String { 0="d", 1="e", 2="r", 3="p" }
This guy sounds so full of himself and arrogant that it was painful to read this article. The whole "herp"/"derp" thing makes him sound retarded and unprofessional. I wouldn't want to learn anything from this guy (and I didn't). ([And this may be the smuggiest picture I've ever seen.](http://patrickavella.com/sites/default/files/profile-pic.jpg))
&gt; This guy sounds so full of himself and arrogant no shit, have you seen the homepage? &gt; This is the blog that the Internet has been missing. &gt; Stylishly late to the Blogosphere, I'm bringing my unique self to the chatter.
That is very cool but not unique nowadays, e.g. http://tryruby.org/ .
this is pretty cool!
junk
If Safari on the iPhone got WebGL support then this could become very relevant.
The point of jQuery is what you do with the selection. If you are just selecting, why wouldn't you just do it natively? It's pretty easy to do native searching these days.
Should be compared with Sizzle, not jQuery
Agreed, but I think [having &gt;1 pic of yourself on every page of your site](http://www.bennadel.com/) is as egocentric, if not more, than this guy. Although I agree that the pic is probably also the smuggiest I've ever seen, too. He looks like a used-car salesman who just bluffed his way to a win in a Texas Hold'em game.
Wow, there are so many, and these are just jquery or pure js right? JavaScript widgets needs some consolidation. This is what happens when the native widgets are incomplete.
Wow, I guess I won't be upgrading for awhile... I rarely use attribute selectors but it's going to be annoying trying to track them all down.
While not well explained, I would highly agree with this. Alert windows are much too intrusive on a user. Creating your own "alert" window allows you to not only add the text you want, but style to match your site, as well as not block a user's entire browser experience.
Research how Client -&gt; Server relationship works in a non-web environment, and you will see that's how you should also implement it in your case. 
WebGL-2D misses antialiasing on Chrome 10 (well, on my Macbook Late 2007 at least)
&gt;&gt;Javascript gets a bad rap on the Internet &gt;not really. Used to about 5 years ago. Now it's the sexiest language around. You must not read much in r/programming, sometimes it seems like javascript is the ugly stepchild of the programming world. Javascript is probably the most misunderstood and most bashed language and has been for the last 10 years, at least. 
back when dynamicdrive was the supreme hotness, JavaScript had a reputation for being useful for precisely two things: image rollovers and scrolling statusbars. Now it's all web2.0 and Ajax and JSON and HTML5 and canvas API and revealing module pattern and ooh. 
Javascript was created as an interpreted scripting language. interpreted languages are slower than compiled languages. Then someone came along and built a JIT compiler for javascript. This allowed it to be compiled before running it.
There are many, many optimizations for interpreted languages. Yet, they take time to implement. None of the current browsers are done with Javascript optimizations, each one is still working to improve them.
Part of it is the engines from the past were just so bad that there is alot to improve still since its popularity is relativly recent.
In the [demo](http://weare.buildingsky.net/webgl-2d/example.html), the Canvas 2D version is much smoother for me (Chrome 10.0.648.204 on OSX). 
They aren't *finding* them, they're making them.
Fail on my part. Yay - submitting without rereading.
Everything you mentioned except JSON isn't javascript - and this is precisely why the majority of people bashing javascript think they hate it, because they don't even know what javascript is and what canvas, ajax, HTML5 are. 
A lot of research done on interpreted languages in the late 80s-mid 90s is now being applied due to browser competition. In most cases it's existing knowledge.
Generally, if you find yourself thinking "I need to fire this event manually", you should probably think about refactoring your code. 
OP didn't mean it literally. He meant finding new ways of designing the javascript engine, obviously..
Here's the [demo](http://kenneth.kufluk.com/google/js-mindmap/)
I unsubscribed from proggit because it's such a shithole now. Honestly proggit's overall opinion on a language has basically zero relevance. Despite JavaScripts many shortcomings and oddities, I've grown to really enjoy what is basically Scheme dressed in C clothing running in a browser. That's a surprisingly cool combo.
Very clean and clear example, but would be a lot cooler if that was possible on the scale of postcodes instead of countries.
Back in the day, programming languages were either compiled (like C) or interpreted (like BASIC), the former required an extra compilation step, but had the benefit of faster execution speeds. However in recent years, that line has blurred a little, with bytecode compilation, VMs, JIT compilers, and all sorts of other beardy things that I don't really understand. So there are lots of different ways to approach the problem of executing Javascript code, and loads of scope for optimisation and improvement. Further, while there has been a ton of research into optimising strictly typed language compilers, we're really only just starting to do the same for dynamic languages - there's a whole class of potential optimisations (which, again, I don't profess to understand) that are currently at the research stage. There's a really interesting [talk by Steve Yegge](http://www.youtube.com/watch?v=tz-Bb-D6teE) on the subject.
IMO, a library provides compatibility and readability. I prefer $ to document.querySelectorAll, and the latter does not work in some engines (ie shoud die!)
web2.0 is an umbrella term at times referring to a design style, social movement or development methodology, in any case a key characteristic of 'the modern web' is JS. Ajax, well I hope I don't have to remind you what the J stands for? When we talk about JavaScript, we're normally not talking about pure ECMAScript but web DOM oriented JavaScript, which is intimately connected to HTML(5), and the canvas API (and other HTML5 APIs) are designed for interoperability with JavaScript, and the revealing module pattern is a very powerful modern JS design pattern.
because they're trying different techniques. first it was interpreter only, then, there came the first JITs. now, a plain JIT is not enough anymore. also, goals differ. just making it *fast* isn't enough; startup time has to be fast too, otherwise you're back to the java applet startup lags :) mozillas firefox introduced a tracing-jit - tracemonkey; first, it interprets code while gathering statistics about hot code paths and is thus able to aggressively optimize them. that still wasn't enough though, so they incorporated webkits (more traditional) nitro js compiler; so jaegermonkey was born, hopefully combining the best of the two worlds. as far as i understand it, mozillas js engine is a shapeshifting monster. it got an interpreter for fast startup, a traditional (per-function) jit and a tracing jit. v8 is a bit different. the story behind v8 ... google kidnapped lars bak (see hotspot jvm), locked him into a beautiful farmhouse in denmark, supplied him with some bright minds that served as assistants and guards and only let him out when v8 was the fastest js engine in the world. he used some serious black magic (some say he's got magical cloven hooves of performance), but in the end ... v8 is more like a traditional compiler, got no interpreter at all - every script is compiled before it's executed (AOT - ahead of time). over the years (is v8 even that old? years?) they optimized it bit for bit, making it faster still. yet recently, chrome 10 made another leap forward with v8/crankshaft. it's basically a 2-phase compiler. the first phase compiles fast but produces slower code and gathers statistics. as soon the system got a few free ressources, the code is recompiled in the background, with lots of optimisations. the compilation phase may be slower, but that doesn't matter much because the app already runs. the produced code is scarily fast. js optimisation is mostly a trade-off between fast execution vs. fast startup. is an optimisation that makes the code 10% faster but takes an additional 50ms of startup time worth it? sometimes they find a workaround, e.g. google can pretty much ignore compile time in crankshafts second phase. other optimisations may benefit a canvas-based game, but hurt the performance of jquery-heavy sites. there's much that's not yet tried, or not possible *yet*.
That's pretty cool, I've been using this from time to time: http://www.text2mindmap.com/
What you could do is stick the handler on an object and connect that as an handler. When you need to call the function by itself just call that method on the object.
You can't beat FreeMind. Quick Instructions: use cursor keys, insert and delete keys.
I personally use pen and paper these days if I need to mindmap something, it's way easier to picture things in your own way than using pre-defined visual effects, clipart and custom fonts to emphasize important topics and/or objects.
What do you do if the tree gets very large or there are a lot of interconnected nodes?
The other night I was using this because I hate having to install stuff. It has a few problems, flash being one of them, but it's over-all a great tool. I'd really like to find time or even see someone make a web-based MM tool that doesn't a) suck and b) can do a lot of stuff.
Paper only gets me so far. I find the computer better for anything above simple complexity.
Great summary. Good point about startup time.
No fuck you, I'm blind and use a screen reader. Quit putting all of your content in script, then we'll talk. 
You should add some JavaScript to that page so that people with JavaScript enabled don't see the exact same message (don't want to make them too feel bad). And turning off JavaScript honestly does have some security benefit. (shrug) They're not killing the web - they just can't enjoy a lot of it.
Agreed. For every part of javascript that causes changes to content, there needs to at least be a noscript alternative.
Fuck you. I don't blindly trust every script out there because I'd rather be safe. I'll turn it on as necessary. Even if I'm a bit paranoid, you are an asshole.
That *was* a really interesting talk. Thanks :)
so you check all the sourcecode of a website before enabling javascript? wow, you are awesome!
No but I only enable it for sites I normally go to. That way if I'm led to an unfamiliar compromised site, I'd have to explicitly enable javascript to get hit. And yes, my understanding of the basic concept that is a _whitelist_ makes me somewhat more awesome than you. 
Ever heard of [noscript](http://noscript.net/) and that kind of tools ? Beside, you don't have to enable javascript that often and you only have to check a website isn't fraudulent once.
That was quite an offensive webpage from an ignorant person. What's killing the web is people not caring about its open nature, see [an open web](http://www.flossmanuals.net/an-open-web/). Also, this from 2002: &gt; Java, Javascript and ActiveX can also be used for spyware purposes. Support for these scripting languages can be disabled in your browser's configuration options (a.k.a. preferences, settings, or properties). It is safest to surf with them turned off, and only turn them on when a site you trust and want to use requires them. If you don't know if your browser supports these languages or don't know if they are turned on you can use BrowserSpy to find out (along with a lot of other information about your Web browsing software): http://gemal.dk/browserspy/ from https://www.eff.org/wp/effs-top-12-ways-protect-your-online-privacy
Ugh. There are nicer ways to ask people to enable scripts for one's site. Insulting them without considering their reasons for disabling scripts is ignorant and douchey.
For those who would like to give the author some feedback about his message, he's a [redditor](http://www.reddit.com/user/jeremyckahn). Info found by looking at the [page source](http://i.imgur.com/HAQHt.png). -edited out personal info you can find on the author website, if you want it you go find it by yourself.-
but he just learned how to make a html in jquery!
There is some javascript on that page already, it gathers personal data from you and send it to google. 
It's not the JavaScript disablers that bother me but rather the people using old browsers. (I know some don't have control over which browser they use)
...and then hope that it remains that way.
Honestly, having an aggressive opinion about something doesn't warrant harassing him. I understand maybe wanting to contact him, but listing all that (especially his employer) is out of line.
I don't mean harassing, I mean feedback, as in telling him directly because posting a comment here may not reach him, and imho comment such as [entalnong's](http://www.reddit.com/r/javascript/comments/gbaw9/fuck_you_turn_on_javascript/c1ma3h7) should reach the guy. Besides it's not as if he tried to hide he's behind this site, it's written in the source, posted on his twitter, etc.
Your definition of personal data and mine differs greatly. I don't consider my screen resolution, ISP, or country of origin to be great secrets.
The lack of &lt;noscript&gt; bothers me.
That train already left the station. [CommonJS](http://commonjs.org/) is where people are reaching agreement on this stuff.
No, fuck your screen reader, browser, and OS. Tell the first to get out of the 80s and deal with dynamic content. Tell the latter two to get out of the 90s and expose better accessibility APIs.
The "disable by default and add to whitelist" approach is not absolutely perfect, but it is still way more secure than enabling scripts by default. If you want additional security you can enable javascript on a temporary per visit basis, but this additional bit of security has a trade-off in ease of use. 
I don't mean this directly at you or anyone in particular, so please don't take personal offense. :) I don't mind noscript users, but I really can't stand the elitist noscript users. I feel that you're confused about what I, and other website operators providing their services free of charge, owe you. I build websites for free. I haven't put a 3rd party advertisement on any of my websites since around 2005. I have never charged access for someone to view my site. You pay me nothing to build them and I receive no monetary compensation for your individual visit. As such I don't write my code twice to accommodate a minority. I understand why you choose to block scripts and I support you to browse the web whatever way you choose. I just don't fit your description of a malicious script writer. Why judge website owners for not doubling their workload to support you? At the end of the day, I care only about the 90% of people who were able to enjoy my work. Not the 10% who didn't get to because they couldn't trust me. &lt;noscript&gt;You don't have javascript. That's fine. We can part here. :)&lt;/noscript&gt;
Am I naive to expect redditors not to behave as 4channers ? Anyways this is public information, the guy even took an extra step to provide it in the source code and has [told the world on his twitter](http://i.imgur.com/ZOKFB.png). He makes a strong (and arguable) statement in a quite offensive way which means he's probably hurting his own cause. 
So I need to know his employer to contact him directly? You're being a jerk, and that's okay. The same as its perfectly okay for this guy to express his opinion on his own website. But don't try to cover up that you're being a jerk with bullshit excuses.
You would if someone wanted your imprisonment or death.
I can't tell if you're being serious or not so don't make fun of me for responding seriously if you're joking. :P Anyone who wants me dead or imprisoned will already know the few usable details retrieved by Google Analytics. The extra knowledge that I visited this website with Firefox @ 1440x900 once is hardly useful.
15 inch MBP? 
19" widescreen lcd. (now I messed up and gave away information that even Google Analytics couldn't figure out. :P)
Sure, your data is already out there, but if you knew that people had been traced and murdered by the government bc of this information, you might regard all future activity as secret and try to maintain that secrecy.
Actually I hesitated for a second about mentioning the employer, it is mentioned on each of these pages and directly linked from his site and github so I though it would be hypocrite not to include it, but I get your concern so I edited off the employer and email from my comment.
Although I appreciate your sentiment and generally agree with you, one thing you might be overlooking and is of great advantage to the user of a javascript blocker is that your site(s) might get hacked. I've had sites hacked with only tiny bits of js inserted. Luckily, I was alerted by Chrome the next time I visited the site and was able to rectify. Computers on the Internet are just vulnerable. Devil's advocate. 
Thanks [on the creators behalf]. The thing to remember is that not everyone is as responsible as you may be. That's why reddit has firm policies about posting unnecessary personal information. If the people that enjoy harassing others online didn't bother to look this guy up, don't do it for them.
Personal data ≠ great secrets. But leaking personal data is still a breach of privacy. It is notorious that google and facebook are tracking people outside their own network and gather as much personal data as they can through google analytics and I like button. 
I'm not overlooking the point, as it is a valid point. I'm specifically referring to people who believe I'm committing some great sin because my sites enhanced functionality doesn't work without JS enabled. Its not that you block javascript, its that you complain my site doesn't work for **you** when you do so.
&gt; I don't consider my screen resolution, ISP, or country of origin to be great secrets. ...along with [all the other data google collects on you](https://www.google.com/dashboard/).
I find it impossible to disagree with that. The blame here falls on Google/Facebook though. Not on the people who use their services for reasons other than feeding the company more data to devour. When I use analytics, I do it so I can look at the numbers later and feel good about my accomplishment. Not exactly nefarious on my behalf.
Agreed. And for the most part, I use NoScript in the "temporary" mode ... along with [RequestPolicy](https://www.requestpolicy.com/) to try to decouple some sites (eg. like google-analytics only "runs" on a few sites... even though RP isn't perfect and leaks through to some sites, on-occasion - noticed since I also run with cookie prompting turned on, too). 
This. Its called graceful fall back, or gracefully failing. If you're a developer and don't understand how to do this, then fuck you! You make the rest of us look like assholes.
That just lists the information you give them directly or indirectly. In this instance I would blame peoples complete inability of reading a privacy policy. Note that none of the information there is collected with Google Analytics. Unrelated, http://i.imgur.com/HDv7W.png
no.
i code javascript in non-browser environments all the time, and it is pretty easy to tell what is javascript and what is DOM, XmlHttpRequest, and other constructs that are not part of javascript. just because someone came up with the buzzword 'AJAX' does not mean that this is a proper designation for what the technology actually is. XmlHttpRequest can also be scripted in vbscript in IE (XHR wa invented by microsoft), so in that case would you want to call it AVbAX? probably not, because it sounds dumb. XHR can also be used synchronously, but we don't call it SJAX when we use it that way. the asynchronous aspect of XHR isn't even part of javascript, it's part of XHR. I use the .NET framework with javascript all the time, and it is very powerful, but I know where javascript ends and .NET begins. If you want to discuss javascript, please don't confuse it with DOM or XHR or any other browser feature that isn't actually javascript. This is exactly why javascript gets a bad name, because people confuse these things with javascript. If browsers supported Ruby, you would still need to interface with DOM, XHR and everything else, and people would then hate ruby because they can't figure out how to call innerText on an iframe element or whatever stupid thing isn't related to the programming language. tl;dr: there is a difference between javascript and the environment in which it runs.
Actions to elements are bound by just declaring method to a property, eg. document.getElementById("myDiv").onclick = function(){ alert("foo"); } Thus calling the the property should fire the event: document.getElmementById("myDiv").onclick(); I'm not sure if dojo.connect etc. do some magic that prevents this
I'm not claiming any of those things 'are' JS, I'm citing them as examples as to why people think JS rocks now...
Graceful fallback was a feasible technique a while ago but is increasingly becoming more difficult as users are expecting more and more functionality client side. Today's web apps are turning out to be one page interfaces that leverage JS heavily to perform up to a user's expectation. For example, hierarchal information is usually displayed in a tree control with heavy lazy optimizations to make it performant with the back end. This functionality would be next to impossible to achieve in a more traditional html architecture.
&gt; Note that none of the information there is collected with Google Analytics. Ahem. From http://www.google.com/intl/en/analytics/privacyoverview.html: &gt; **Personal Information** &gt; &gt; Personal information is information that personally identifies you, such as your name, email address or billing information, or other data which can be reasonably linked to such information. The Google Analytics Terms of Service, which all Analytics **customers** must adhere to, *prohibits the tracking or collection of this information using Google Analytics or associating personal information with web analytics information*. This means that *you're* not allowed to collect that information using the information you gain from Google Analytics. &gt; **Our Privacy Policy** &gt; &gt; At Google, we are keenly aware of the trust you place in us and our responsibility to protect your privacy. As part of this responsibility, we let you know what information we collect when you use our products and services, why we collect it and how we use it to improve your experience. The [Google Privacy Policy](http://www.google.com/intl/en/privacy/privacy-policy.html) describes how we treat personal information when you use Google’s products and services, including Google Analytics. Now, from the [Google Privacy Policy](http://www.google.com/intl/en/privacy/privacy-policy.html): &gt; We may collect the following types of information: &gt; &gt; * **Information you provide** – When you sign up for a Google Account, we ask you for personal information. *We may combine the information you submit under your account with information from other Google services or third parties* in order to provide you with a better experience and to improve the quality of our services. &gt; * **Affiliated Google Services on other sites** – We offer some of our services on or through other web sites. *Personal information that you provide to those sites may be sent to Google* in order to deliver the service. This means that they are able to take all the info you supply, from all their different products, and combine it "so-as to provide you a better (future) experience." ...as well as... &gt; Google uses the DoubleClick advertising cookie on AdSense partner sites and certain Google services to help advertisers and publishers serve and manage ads across the web. So, in short... they are telling you that *they* collect all that information on you, including through AdSense / DoubleClick (as well as their partner sites). While it's a violation of their policy for *you* to try to use that to identify folks on your website, I continue to see nothing that says that they can store and relate all that information for their own marketing and/or "site improvement" (and everything that entails). **TL;DR:** Google maintains a *large* amount of information that they can use any way they wish, unless you opt out of *several* different policies. It is a violation of their privacy policy and ToS for you to try to use this same information for your own gains.
So why cant you use a session variable to track whether or not the user has javascript enabled, then serve them either the super sexy Jquery page if JS is enabled, or a not so sexy version if its disabled? Yeah, its extra work, but honestly, it's not bad if you think about it from the beginning of development process.
I guess you don't [keep up with the industry](http://www.w3.org/WAI/intro/aria)?
TIL
When I block JS and go to your site and you present to me a placeholder on the page that says _"You need to install Adobe Flash!"_, I chuckle, close the tab, and am on my way. If you were a decent dev you'd be able to tell that I don't have JS enabled, and perhaps that's why I don't _have Flash_. In the 6ish years that I've been using NoScript, I think less than .01% of sites accurately detect that I actually have JS disabled whenever their Flash content doesn't load.
I didn't say "Fuck you for being blind." I'm a supporter of web standards and accessibility, the stuff that enables you to enjoy the internet like anyone else. There should always be provisions in place for disabled people. In my work, I try my best to accommodate all users, even those without JavaScript. That being said, this was just a fun little page I threw together in 15 minutes this morning. It's target audience is web developers who go through the same aggravations as I, so we could get a little laugh out of it.
I use noscript because most sites still work that way, and they load and run about 5x faster without loading all the ads and popovers and javascript stuff. I'm a content guy, I don't care about the layout unless it's so bad that I can't read the content. I still allow js for most domains I visit though, but usually not the other domains it loads JS from. Some sites load stuff from like 20 other 3rd party domains, it's just ridiculous. How can the possibly hope to keep their site secure like that? Oh well. 
I don't see that one passage in the same way. They're saying they don't want to be used as your tracking database. Obviously any website using analytics can gather the same information on you (and more depending on how you use a given service). Google is just saying that they don't want you to use what they gather in a method not intended by their service. ala "Don't hammer our servers in a way we haven't prepared for, gather it yourself and hammer your own". Which makes sense. Again though, the analytics service itself is not gathering much information. I've never seen any reports that show indication that the sites you visit that have Google Analytics tracking code are actually linked to your Google account in any way. I think the bigger issue here should be that Google gathers all this information about us through our normal browser. But to opt out of Google Analytics you have to download a browser addon. They're clearly not going to go out of their way to STOP tracking people. Could be interpreted a few ways: * They're making it a hassle to opt out so less people do it. * Opting out via your account wouldn't prevent the requests from being sent, where a browser addon could completely prevent the analytics scripts from even loading. * Maybe they don't link the analytics requests to your actual google account, and thus wouldn't know if the account has opted out of analytics tracking. TL;DR: Its Google who *could* be doing bad things with the analytics service. I wouldn't blame people for using analytics though. I'm not doing it to feed google. I'm doing it to feed my ego (lol) and to understand my site and users better.
What screen reader do you use? I have developed accessible JS experiences that have been approved by a non-sighted QA tester for a major corporation that was sued over accessibility. They take it very seriously to say the least. It's my understanding that with proper development practices (setting focus, ARIA roles etc) JS experiences can be just as accessible as non-JS.
I run adblock. Gets rid of the annoying ads and popups (and 3rd party crap like facebook buttons if you want) while not crippling the functionality of sites I'm actually visiting (like reddit) which rely on JS for core functionality such as voting/commenting.
That's a different story altogether though. I'm not sure what genius decided that when JS fails to detect Flash, that it means Flash doesn't exist. It makes more sense to fall back on a standard embed. That being said, Flash is more prone to be malicious over JS.
I actually use both :p
BUT YOU OWE IT TO ME TO MAKE YOUR SITE WORK EXACTLY HOW I WANT IT TO EVEN THOUGH I'M NOT PAYING ANYTHING!!!!!!! ASSHOLE!!!!!!!!!!!!!!!!!! RAGEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
Upvoted because I'm on that map. :)
Because it's hard to convince a company to spend twice as much money developing their website.
If you like your websites to be forms and text, by all means disable javascript. Nowadays, I like my site/apps to be more than forms and text. Node.js may help with some types of functionality.
&gt;twice as much you're doing it wrong
You are probably not the audience they were looking for anyway. If I do a site with Flash, there's a specific reason for it. The content will be designed to present and interact in Flash. If you don't have Flash, then you weren't who I was looking to interact with anyway. If I was wanting to interact with you, I'd damn well provide a method you could use that would give *some* level of content.
Probably.
Lock the doors, sleep with the light on... 
Even without javascript a lot of that information is logged by the server the site is hosted on; who knows who is collating that information and to what purpose.
How about the soft glow of a 19" monitor... dammit, I done it again. I'll surely be dead within a week.
Graceful degradation is indeed a technology of the past -- but not because doing so is too difficult, but because competent people now use [progressive enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement). You tree example is very easy to implement. You store the current tree state on the server-side and make every toggle link on the tree link to a server-side action which opens or closes the server-side state and sends a new current page with the new tree to the client side. Then you enhance this HTML only version by attaching a click handler to the toggle button which loads the current subtree via AJAX and updates it. It's really not that difficult.
Twice as much is too high. I guess you would save more time by just not supporting IE6.
That's really reasonable. I use NoScript and understand that many sites will not work without it. The main reason I use it, [besides security](http://blip.tv/file/3684946), is because of [shit like this](http://imgur.com/hfkfD). The web is far less annoying without intellitxt and stuff like that. tl;dr NoScript makes the web faster, safer, and less annoying.
The truth is that it doesn't matter. The types that use NoScript can figure out what is happening and whitelist the site if they want to use it. I might crack a smile when it happens but I would never expect someone to display the correct message. We're a small group and to be completely honest I probably wouldn't bother displaying the correct message in that case either if I used Flash. Though I might use an embed in a noscript.
That's the mindset I like to see. If all of the Noscript users had your stance, this particular site wouldn't need to exist. Every time I release a site that runs entirely on javascript, I always get at least one complaint that it doesn't work. People don't seem to understand that they are the ones breaking it, not I. Either you trust me and whitelist my scripts, or you don't and you move along. The third option of telling me my site is broken leads nowhere.
I really need some better test data.
that is one ugly ass website he has...like 1990's
Let's see some of your work madpedro.
Am I the only one that notices that this is a joke? Guess so.
thanks. startup time - compilation and parsing - is very important to the javascript engine implementers. john resig wrote an article about a word game recently; e.g. a huge trie becomes inacceptable when parsing on mobile phones take several seconds. 
Also, two of the basic principles of the web as a technology are REST and separation of concerns (using HTML to mark up content, CSS to define style and javascript for behaviour). Making javascript mandatory in order to use a website (ie, making access to *content* dependant on *behaviour*) violates the separation of concerns, which is (among other things) the only reason things like screen-readers and search engines work at all. Also, the implementation of javascript-reliant systems usually violates REST (though they don't *necessarily* have to). At its most basic level, "the web" is HTTP and HTML/XML. Everything else is layered on top, and this gives the most accessible, most parseable, most flexible system. As such people who turn off javascript (or never have it in the first place) are helpfully reminding you that in order to keep the web as useful as it is, it's important to design your websites so they follow the basic principles of it. In fact, it's people who shortsightedly misunderstand or ignore important considerations like separation of concerns and REST who are harming the web, not the people who opt (or are forced) to only use lower-level access. People used to take the same attitude to Flash-only websites that many now do to javascript-mandatory websites. The overwhelming majority of web designers these days know that Flash-only websites are a really stupid idea. Why? Because all those people who thought it was ok to disregard fundamental design principles like REST and separation of concerns were caught short when technologies and media (like search engines/SEO, translation services, mashups and the like) developed that relied on them, and Flash-only site developers either had to recode it in technologies that did conform to the principles, or had to engage in ever-more frantic contortions in order to replicate functionality offered for free by "the web" (HTML, REST, etc).
 I'm not actually blind, just trying to make a point. I know all about [section 508 accessibility requirements](http://www.section508.gov/), and I feel your frustrations. Still, the page was pretty inflammatory and was just asking to be flamed back. How many millions of man hours by countless web developers have been wasted making pages accessible to a tiny fraction of the population? If we took all of those millions of man hours and spent them developing a screen reader, the reader would be so good it could visually analyze the rendered output, OCR everything, and then we wouldn't need 508 compliance. Even flash content would be accessible. Again, I feel the frustration, but you asked for it ;)
Yes, as long as you connect to any website, some basic stuff is sent within your request (ip, language, ...), and I'm not even talking about websites where you have to sign in. But then, how much do you care about this information?
Yo Kenneth! Congrats on the Twitter job mate. Can't believe that you quit this green and pleasant land though. ;)
From this same source code I'd like to tell him that putting a title, description and favicon to his website would be a good idea before giving his advice on people "killing the web". Unrelated note: I'm pretty sure this website was built from [HTML5 Boiler Plate](http://html5boilerplate.com/).
It tells them a lot more than that. Simply by having visited that site, in combination with many other sites, a very detailed profile of you can be built.
Sometimes one must suffer for one's art.
That's really nice and smooth. =)
Perhaps you meant to say this, but you weren't very clear. Actually a "Just in Time Compiler" doesn't compile Javascript before running it; that would be how a classic compiler operates. It compiles bits of the Javascript just in time, just before executing it, while your code is already running. It might even first execute it the slow way first and then spits out a faster version for the next time it gets executed; there are different strategies possible there. 
PyPy is a project that has done a lot to improve the way dynamic languages can be optimized (in its case, Python, but the results apply to other languages too). 
Reasons 1 and 2 are equivalent. There are no security benefits to turning javascript off.
Simple. You go somewhere else and learn you some Javascript.
But you're working with *coulds*. Microsoft, Apple, Mozilla, every Firefox plugin creator, an unruly Greasemonkey script, and every application on your computer. All of those *could* do the same thing and more.
I think the main reason is that javascript didn't need to be fast until recently, so there was no reason to waste time making it fast. I mean, to a person there is no difference between something that runs in 2 milliseconds or 200 milliseconds. A good rule for programmers is to avoid optimizing things you don't need to, since you don't know for sure if it will ever be needed. With people making more and more javascript heavy web apps, it now makes a difference if you have a fast javascript engine, so the browser vendors compete on that.
One of the dumbest things I've ever seen.
Also, what's with these damned "window" things. I want my console only!
Ok, so lemme get this straight.... _Everyone who has JS disabled (even if from the device's lack of JS support)_ **must** be using NoScript. _Everyone using NoScript_ **must** be of high technical prowess. Put all together: _everyone without JS support must be very technologically adept_. Ergo, &lt;noscript&gt; elements are worthless, because the alleged audience is all nerds. Flawless logic. I disagree.
Damn, and here I was thinking you were an outlier. While progressive enhancement is a good idea in general, let's not lose sight (no pun intended, but damn if it isn't a good one) of the march of technology. In a survey where 91% of respondents use a screen reader because of a disability, [98.4% of respondents had Javascript enabled](http://webaim.org/projects/screenreadersurvey3/). It's entirely possible that the stereotype of a blind user not being able to use an AJAX-powered app is outdated and maybe even a little insulting. I'd love to hear from actual screen reader users to know how they're handling life on the web. Assuming I just need to read some more of this thread.
The problem comes from the fact that screen readers act much like HTML validators -- they can only handle the initial payload. Anything that is updated on the page after the initial rendering isn't available. [Try it yourself.](http://www.freedomscientific.com/products/fs/jaws-product-page.asp) 
Actually, [WAI-ARIA](http://www.w3.org/WAI/intro/aria.php) is changing that. It's already supported in browsers and screen readers to some degree.
Intrestingly, the domain name reads "F. Y. to JS". I wonder if these mixed signals intentional or incidental ;)
*cough* reddit could and probably is doing it at some level. They know all the links you click.
Actually there are many. If you look at the vulnerabilities discovered in web browsers over the last decade, more than half of them depended on the availability of scripting.
Years ago when I was working at Tymshare and maintaining their PDP-10 linker, my manager asked me to fix a little annoyance: The linker was leaving garbage behind in the unused areas of memory between the areas it actually used. He wanted that memory zeroed out so the linked images would be cleaner. A reasonable request. But not an easy one. The linker had lots of places where it fiddled with memory, and it was a mess of spaghetti assembly code. It was not a fun project at all, and by the time I finished, I was a little annoyed with the whole thing. The linker printed a message at the end of its run that included a memory summary something like this: 14271 words used, 403 free So I changed it to: 14271 words used, 403 free, and it's pretty fucking clean Now, my manager knew it was an unpleasant project and he appreciated my efforts on it. So I knew he would get the joke, and then I'd take the message out after he saw it. Unfortunately, before my manager saw it, *his* manager gave a demo to a customer that included a link step. The customer did not get the joke. I didn't get fired or anything, but let's just say it led to a few unpleasant moments for all. tl;dr Watch out when you let off steam - it may come back to burn you.
Neat, and very attractive. However, I personally think that the time for traditional music notation is over. I use [a harmonic table](http://www.c-thru-music.com/cgi/?page=prod_axis-49) instead of a piano style keyboard, and am looking around for something to replace notation with. When I figure out what it should look like, or find a less moronic, ahem, more appropriate music notation system, I'll be back to fork, fix and enhance. In the meantime, I follow your blog, sir. FWIW, I can read music notation fine. It's just a really stupid system.
&gt; I personally think that the time for traditional music notation is over. Just like the QWERTY keyboard - no one is using those anymore. DVORAK is where it's at.
I believe this is what you are looking for: [Prevent Animation Queue Buildup](http://www.learningjquery.com/2009/01/quick-tip-prevent-animation-queue-buildup)
Nice library. An upvote for you!
Wow. This is great! Looks like a lot of fun to work on. Good luck dude!
You're right, there are probably a lot of environments that don't use JS that I don't know about. Screen readers and such.
To fix your current code, you just need to add a stop() prior to starting the next animation. Example: $("#nav2").hover(function() { $('#navindicator').stop(1); $('#navindicator').animate({ Using a *1* in the first stop() parameter tells jQuery to clear any queued animations, which will get rid of your sticky nav problem. Also, to get the same functionality from a fraction of the code you can do something like the following, which will apply the hover to all of the elements (instead of making separate functions for each element): $(function() { $('#navlist &gt; * &gt; .fadehover').hover(function() { var pos=$(this).offset().top; $('#navindicator').stop(1); $('#navindicator').animate({opacity: 1, top: pos}, 250); }); });
Awesome job! You should think about adding functionality for tabs too.
I can't upvote this enough. To be able to easily turn my chicken scratch cover band notes into readable tab + sheetmusic would be great. I haven't had time to dig into it too deeply. Is there an option for bass tab or nonstandard string configurations (4,5, 7,8 string,...?) 
A parser/converter for existing ascii tab would make this a [killer app](https://secure.wikimedia.org/wikipedia/en/wiki/Killer_application), IMO.
The API allows you to essentially notate whatever you want, with support for alternate tunings, multiple strings, and all kinds of other goodies. Unfortunately, VexTab (the higher-level tabbing language) does not incorporate everything (yet). In time, I hope to have all of this reasonably well covered.
As someone who has (in the course of developing this application) spent a lot of time studying the intricacies of standard notation, I can't agree with you more. It's inconsistent, quirky, and vaguely specified. But... just like JavaScript, it's what many understand. Though that harmonic table is just plain weird. ;-)
Trust me. Five minutes with one, and you'll be ruined for the black and whites forever.
Yup, you found me. Good job. I thought that people savvy enough to view the source would find the page humorous, and check out my Github - which they might also find interesting. Apparently I just attracted vindictiveness (which I'm not going to detail). So that was bad judgment on my part. But it is what it is. I took the site down, because explaining the humor behind it would kill the fun, and I didn't need any more malicious people trying to get "even." You win.
Initializr, specifically. I bought the domain and put the page together this morning while eating breakfast. I didn't QA it much because I didn't want to be late for work. So yes, there were some things I forgot to remove from the template.
The only time I've been to the section 508 website it was undergoing maintenance. I know this because it had some text on the page that said so. That text was in the form of an image of text. That image had a blank alt attribute. Since then I can't take them very seriously.
I actually started exactly this when I discovered this project a few months ago. However after getting the basics down I stopped work on it. * digs around on hard drive for it * 
I was thinking the same thing
Dangit. I spent like 20 minutes to find this again: http://tech.slashdot.org/story/10/05/14/066220/Beautifully-Rendered-Music-Notation-With-HTML5 ...and you're the same dude. So... somebody is already working on this project and it's you so nyeah. :^) Still want *.ly instead of a newly invented music format, although focusing only on tab makes me happier to not push the lilypond. --Robert
He gets a bigger paper
&gt;Why judge website owners for not doubling their workload to support you? It doesn't double the amount of work. If you want that the site is accessible and completely indexable, you're pretty much already there. You also need some hooks for the scripts... why not use some elements which do have that kind of effect to begin with? There also is no reason to make your scripts obtrusive. Making them unobtrusive is actually usually *less* work, because it's a lot easier to maintain. Compared to IE6, IE7, IE8, or IE9, this really isn't a big deal. I mean, seriously, it can't get any more low tech than this. Forms, buttons, links. That's it. This does not increase your markup by a factor of two. Or your CSS, or your images, or your content, or your JavaScript (lol), or your databases, or your backend code, or whatever. It really doesn't. So, basically you start with usable markup and very basic old school functionality. Then you make it look nice with some CSS. Then you make it nicer to use with some JS voodoo, which in turn you also make look nice with some extra CSS, and then you add some extras via vendor prefixes and perhaps even some polyfills/shims. That basic naked initial HTML version is the foundation and everything else is just another layer build on top of that. Getting the foundation right will make building of those extra layers easier and more straightforward, but also - and perhaps most importantly - very robust and fail-safe.
But cookies are valuable for things like OpenID, sessions and my multitude of reddit accounts!
I think this is something of a myth. Just take a look at [Gropveshark](http://listen.grooveshark.com). They're rocking a large, very well-performing application in jQuery. 
That would be cool. Tabs are very varied in their formatting though and very rarely have proper note durations etc, might be difficult.
Yep... I have that working, should be pushed in a few days. :-)
I dunno theyve been compiling Lisp for, like, uh ever
Awesome. I look forward to the day vextab.js is a standard deployment on guitar tab sites everywhere. 
Excellent post, and like others I like how you point out that speed isn't the only goal.
I'd like to clarify things for you a bit: I never disable javascript and I think I see the point you're trying to make. But you start by insulting people (yes, "fuck you" is an insult) and you don't even explain why they are, in your opinion, wrong. You're never going to make friends this way. My websites rely heavily on jQuery and Javascript and most of the time I forget to use noscript, but even then, I think people who disable JavaScript are either people who are used to do it on every site and know how much they are missing / how to switch back, or people who aren't allowed to enable it and in both cases insulting them will get you nowhere. Maybe a more sarcastic tone would have better success, like a page saying "It seems like javascript has been accidentaly disabled on your browser. We're sure you didn't mean to do that so here's how to enable it on the major browsers on the market:" (followed by screenshots / instructions). If you had done it this way, I would have linked to your page in my noscript tags and I'm sure a lot of people would have done the same.
A straightforward interpreter is the lower limit and perfect machine code (generated in 0 time) is the upper limit. JS engines will probably get as fast as LuaJIT or even as fast as Java (yes, Java is very fast nowadays). They might even start to cache the compiled code. V8 for example already does that for the build-in JS stuff (if it was compiled with the snapshot option).
No, YOU comment about turtles. Oh wait, you already did. I feel all loopy now...
Add this to the top of timedCount() if (c == 0) { alert("script has reached 0"); break; }
Robert Harper doesn't mention callbacks. He does, however, define "nondeterministic composition" as a goal that callbacks would be useful for. I can see it, if "concurrency" means "nondeterministic composition" for more people than the three of us.
http://www.whatwg.org/specs/web-apps/current-work/complete/video.html#video The `video` element has a `loop` attribute.
You are attempting to execute timedCount inside itself. This is an approach that is unstable and highly error prone.
Can you use break outside of a loop? I think **return** would be more appropriate there. I would rewrite it as: function timedCount() { document.getElementById('txt').value=c; c=c-1; if(c&gt;0) t=setTimeout(timedCount,1000); } Then it just won't set the timeout call for timedCount if c has reached zero.
You can't use break like that, but so it should just look like function timedCount() { document.getElementById('txt').value=c; if ( c == 0 ) { alert('SHOOP DA WOOP'); } else { c=c-1; t=setTimeout("timedCount()",1000); } } 
that did'nt work, incase it helps here's the text field and the button to start it &lt;input type="button" value="Start count!" onClick="doTimer()"&gt; &lt;input type="text" id="txt"&gt; 
\*ahem\* [I believe you may have dropped something.](https://secure.wikimedia.org/wikipedia/en/wiki/Recursion_%28computer_science%29 "What the hell are you talking about?")
No, there is no recursive call to `timedCount()`. The call that appears to be recursive is inside the `setTimeout()` callback, not in `timedCount()` itself. If you're unsure about this, set a breakpoint or add a `debugger;` statement inside `timedCount()` and look at the call stack each time you hit the breakpoint. You'll see that the call stack is very shallow and remains at the same depth every time. If there were a recursive call, you would see the stack grow and would see `timedCount` show up multiple times in the stack
Understanding the principles of recursion is necessary for strong programming practices. This is not, however, an excuse to qualify stupid shit, probably an unintentional mistake or over-site, by calling it recursion.
I think lechatron meant to use `return` instead of `break`. But in any case, your version is more like how I would do it.
Actually, for making a loop in javascript that doesn't hang the browser, but sleeps for a set amount of time, [this](http://www.w3schools.com/js/js_timing.asp) is a [pretty](http://www.webdeveloper.com/forum/showthread.php?t=54455) standard [procedure](http://javascript.about.com/library/blstvsi.htm). I can see how this would be misleading however, so I will just consider that you've probably never needed to do this. There also exists the setInterval() function, but if scope doesn't allow you access to the interval object to clear it via clearInterval(), this is a perfectly suitable replacement that is well documented in the literature, as I have shown.
@clone00's function works fine var c=5; var t; var timer_is_on=0; function timedCount() { document.getElementById('txt').value=c; if ( c == 0 ) { alert('SHOOP DA WOOP'); } else { c=c-1; t=setTimeout("timedCount()",1000); } } function doTimer() { if (!timer_is_on) { timer_is_on=1; timedCount(); } }
There are several problems with your code, Kindley. First, setTimeout is not intended for repeated events, it takes more processor time and more code than the alternative. Use setInterval instead and then you do not have to keep calling it every time. Second, chances are very good that you're going to want to have a second timer at some point and you'll need a new set of variables. Use closures or objects to keep your code well-contained. Finally, passing a string parameter to either setTimeout or setInterval has some unfortunate effects on memory usage and performance. You are much better off passing a function. So, this would do roughly what you're asking: function doTimer() { var c = 20; var e = document.getElementById('txt'); var interval, timedCount; timedCount = function() { e.value = c; c = c - 1; // Or c--; if(!c) { clearInterval(interval); // Any "break" logic goes here. } } interval = setInterval(timedCount, 1000); return interval; } With that, you can just call doTimer and all the parts are wrapped up inside. But, I'm not 100% sure what you mean by "break". Are you wanting to make a button to stop the timer early? In that case, you will want to save the return value, "interval" from doTimer and call clearInterval when you want it to stop. 
Those were useful links for something I'm working on, unrelated to OP. So, thanks!
I've been working on a project to display and play sheet music with Javascript as well, although our work is heavily biased towards the Great Highland Bagpipes. You can see an out-of-date demo here: http://r3jjs.com/js/hdots/
I'm sure we've all written one of those. :D But why would you put a dollar-sign in front of the function name? Also, here's some map reduce fun: location.$querystring = function( search ){ return decodeURIComponent((search || location.search || '?').substr(1)).split("&amp;").map( function(t){ return t.split("="); }).reduce( function(o, pair){ o[ pair[0] ] = o[ pair[0] ] ? o[ pair[0] ].push ? o[ pair[0] ].concat([ pair[1] ]) : [ pair[1] ] : pair[1] || ""; return o; }, {}); } 
Yeah, I'm not trying to state that this is the end-all-to-be-all. Just wrote it about four years ago and working on getting various pieces of code into github. The dollar sign is to denote that it is an extensions (e.g. not a native function). I don't know if I'm completely sold on this myself, but I kind of like it right now. Thoughts? Hmm, let me take a second to digest your map-reduce fun. Thanks for the contribution :)
As in, an extension to a native object? Well personally no, I can't say I like using any kind of prefix for this kind of thing (or underscores to indicate private members, for example). But then again, I have no problem extending built-in object prototypes whereas a lot of people have a fit when the idea of it is mentioned.
I am guessing that from your links you are confusing setTimeOut/setInterval with this discussion. My dissatisfaction has nothing to do with those.
&gt; You are attempting to execute timedCount inside itself. Either you are talking about recursion (which there is none of here, but to say that a function calling itself is unstable and error prone is pedagogically reprehensible), or the fact that timedCount() sets up a future setTimeout call to timedCount(). I have addressed both, and you are now being purposefully ambiguous. If you have an issue, be clear, but don't try to backstep your way out of being blatantly wrong.
&gt; Finally, passing a string parameter to either setTimeout or setInterval has some unfortunate effects on memory usage and performance. You are much better off passing a function. [citation needed] String parameters get run through eval(). Aside from being stupid to add that minor overhead, please tell me what the "memory usage" and "performance" issues are.
I believe they get converted to anonymous functions, and each of those takes up memory. Depending on how the runtime chooses to cache these, it can add up.
I wrote a one-liner for this and it was smaller than 140 characters but nice work.
The overhead per draw call appears to be pretty high, but the drawing itself is faster. So, drawing lots of tiny particles (1x1 and 2x2 rectangles) is slower and drawing a few big transformed images is faster. My game only kinda works. There is no `globalAlpha` and 3 letter colors (e.g. `#fff`) don't work (you get black instead).
With all due respect, your one-liner would not pass the same tests that this does.
Maybe, but it's definitely not as efficient. In retrospect, I could have written my first comment in a better tone.
No worries! Why don't you paste the code and we'll take a look! That's what github is all about--social coding. :)
Oh, that was so long ago! :P
Isn't this a solved problem?
Object equality seems to only consider enumerable properties, which might be a problem in some situations.
Wow, the library looks neat. I wanted to write a library like this, but didn't have enough time for this, so definitly an upvote for you!
I am saying it is error prone to call a function for execution before that function has finished being defined as in calling a function inside itself. I was very clear and it had nothing to do with setInterval or setTimeout. Your inability to follow this conversation is not evidence of me shifting ground.
Remember that a query string is meant for the server, not the client-side Javascript.
In terms of privacy, the reason why you give away your website visitors personal data is irrelevant. The people who uses these services are to blame along with the service provider, even more because they are people and not corporations or companies. You probably know that "If you are not paying for it, you're not the customer; you're the product being sold." but did you know that google analytics is a rebranded service that used to be called "urchin on demand" priced at $495/month ([source](http://web.archive.org/web/20050316043342/http://www.urchin.com/)). This was the outsourced counterpart to the regular urchin software priced at $895. Urchin was the world leader of web analytics when google bought them and turned the $495/month service into a free google rebranded service and bumped the urchin software price from $895 to [$9995](http://www.google.com/urchin/features.html). Quite a drastic pricing change. You're not paying for google analytics for a reason, it could be because google is so filthy rich that they are happy to pay from their pockets to provide you with a useful service used to be worth $495 per month or it could be because they want to get hold onto the personal data collected by other websites to fill in gaps in their tracking system that they monetize in ways that made google filthy rich in the first place. [hint from the past](http://www.veign.com/blog/2006/08/16/google-analytics-open-to-everyone/). Maybe you should take a minute to think about the situation. Why you are giving away your analytics data to a third party ? Why are you giving it away for free to a company that makes profit from it ? What are the alternatives (hint: [piwik](http://piwik.org/)) ? Is stealthily giving their personal information to the web "big brother" a way of treating your visitors with due respect ? Would your visitors be happy to know that you give away their personal data to a third party ? On a related note to this reddit, visitors who browse with js turned off do not appear into your analytics numbers (while they do figure in your web server logs), those who use google's "[Google Analytics Opt-out Browser Add-on](http://tools.google.com/dlpage/gaoptout)" or any other way [firefox extension](http://www.optimizegoogle.com/), [hosts file](http://how-to.wikia.com/wiki/How_to_block_your_browser_from_sending_information_to_Google_Analytics), etc. don't show in google analytics either, so much for accuracy and reliability.
What you are describing is the EXACT definition of recursion. You call the function by name prior to you finishing its definition **because you are inside of it**. Many languages are built upon this sole foundation (LISP, Scheme, Haskell... really, any functional language), and recursion is neither new, nor novel, nor dangerous.
You should know better: [eff's panopticlick](http://panopticlick.eff.org/). Besides, imprisonment or death are only a subset of the motivation to track somebody. [if everyone knew](http://www.ifeveryoneknew.com/)...
&gt; It is the most widely used website statistics service, currently in use at around 57% of the 10,000 most popular websites. Another market share analysis claims that Google Analytics is used at around 49.95% of the top 1,000,000 websites (as currently ranked by Alexa). Taken from the wikipedia page for Google Analytics. I'll let you start the revolution. In the meantime I'm going to continue to do what half of all websites are already doing instead of increasing load on my server to do the same thing.
I have more important things in my life to care about than whether some websites are tracking where I visit. There are a lot of things I could be afraid of. This isn't one of them. By all means though, if you enjoy being scared of everything; then go right ahead.
Well microsoft does it, same for apple, and it's likely mozilla too and the others along, but there is a scale component to this. Google's reach goes further than all the others combined. Google has raised a huge lot of privacy concern, G has been caught collecting data about wifi networks while mapping the streets for street view and has then been caught doing the same using android phone geolocalization, they even had this project to use your computer/phone mic to record any environmental noise hoping to identify some recognizible tv audio to display contextual ads [source](http://www.theinternetpatrol.com/is-google-eavesdropping-is-it-true-that-google-can-listen-in-to-your-room-through-your-computers-microphone/), and many other cases. Thinking google is collecting all this data not to make use of it is imho wishful hinking.
Others do care enough to deploy extra effort and money to get this information, so it is obviously worth something to someone.
It's not like you were trying to hide your identity. But i'd like to make it clear that I didn't aim for harassment or vindictiveness towards but feedback as in [criticism is feedback](http://meatballwiki.org/wiki/CriticismIsFeedback). This was not a [call to arms](http://meatballwiki.org/wiki/FightingIsBoring). I figured that vindictive people would find you anyways but that this was an opportunity for other people to reach you, hoping the signal would not be lost in the noise. With such an offensive message towards the general public, you should have expected a big chunk of attention and a significant backlash. It's all about being publicly visible. You came back to me telling me "you win", because I made a publicly visible comment and thus defined a space to come to react to my comment, but you got the wrong person here, as a supporter of freedom of speech I don't consider this a win at all, imho there's no win possible through harassment and "trying to get even". A win situation would be capitalizing on the focused attention to turn fytojs.com into a place to discuss the advantages and flaws of using javascript and documenting the sane practices and those to avoid. Explain how to turn javascript on/off and what are the consequences, etc. Maybe start a project to allow browsers to identify website as being safe to turn on js on. You know, trying to make the web a better place for all. You should know that fytojs current message makes you look bad as a web professional because it implies you have a really poor understanding of the web when you say people are turning off javascript to avoid website awesomeness (as any web pro knows, you do know people are turning off javascript for valid reasons, don't you ?), and when you imply that supporting a no-javascript visitor is more work, it tells other professional that you are probably doing it wrong (see [progressive enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement)). 
Yeah, they use the wifi network locations so my iPod touch, which has no GPS, can geotag my photos for my personal benefit. A feauture I enjoy. They're a business who's intention is to make money. Read the privacy policy and use your own discretion when you decide to use their products. Don't bother trying to start a mob to take down one of the biggest companies that still maintains a great reputation with the general public. It just makes you look paranoid. :)
Not caring is usually not a good thing, but good for you anyways. But you are one person and you can't generalize your own view to the rest of the world. Actually I don't have this "only caring about my own ass" way of seeing things, nor the "I only act out of fear and being afraid". I have the ability to look at the big picture and to think and care about others which allows me to see respecting visitors as a great way to build quality organic traffic and privacy as something people value and that makes a difference. 
Very rare situations I would think.. but yeah, there should be an option for that in this function.
If you're already requiring es5 functions, you might as well use `Object.defineProperty` to define that function with `enumerable: false`.
&gt;The product is aimed at marketers as opposed to webmasters and technologists from which the industry of web analytics originally grew. From the same article, one line before your quote, which add some context to your quote. Marketers want this tool so it makes sense that it used on half the bigger websites which most probably have marketers. It was the world leading web analytics solution before google bought it, this is probably one of the reason google bought it in the first place. Anyways, you are free to choose to be part of the bandwagon (or are you ?) and not care. But you should know that google made their money by keeping their analytics data to themselves and later monetizing it. 
You're actually just a hypocrite. You criticize Google for gathering public information that people willingly publish (wifi locations). Meanwhile you're the same person I called a jerk because you posted the creator of this websites irrelevant personal information. Making the lame excuse that it was for anyone's benefit. That led to someone actually contacting his employer so he had to take it down. His website, that expressed his opinion, that hurt nobody. Your pathetic basis being that the information was public anyway. You're an elitist hypocrite who seems to do little more than try to rile people up with no concern for the rights and privacies of others. With that I must excuse myself from this tired discussion. Have a good day.
A website requiring javascript to work is broken by design. This is not how it should be done. But everyone is free to not do as it should be but then you'll have to deal with the consequences. When you complain about people complaining about sites enhanced functionality not working with js disabled, I'm with you, because they can use the website anyways but for a website running entirely on js then you are wrong, they are right: your website is broken because you prevent people from actually using the website.
cellphones ? text browsers ? corporate/military/secure environment ? older computers ? environments set up to protect user privacy by tech people who are not the actual user ?
Most of the time, when flash is used to make a website it's out of one these: "not knowing better", "budget", "graphic designers only".
Nice fallacy, thanks for sharing it.
&gt;If the people that enjoy harassing others online didn't bother to look this guy up, don't do it for them. If the people that have useful feedback to provide don't (or can't) look this guy up, do it for them. One personal's view can make quite a difference. But on reddit there is a downvote mechanism that can be used to hide content from view.
Another weak excuse to justify your mistake. You posted his personal information in a /r/programming thread **posted by him**. Please stop. I don't mean to sound rude, but I don't feel strongly enough to continue this debate but I don't want to be rude and ignore you.
It can be used to build both iPhone and android apps using the same JS codebase. 
So you're down to personal attacks ? have you run out of smart things to contribute ? An open wifi network is not the same as people willingly publish wifi location, more often than not, an open wifi network is the result of people not knowing better. Besides google has been fined and has taken a lot of heat for this sneaky mass collection of personal data[source](http://www.informationweek.com/news/infrastructure/management/showArticle.jhtml?articleID=225600465) (they also recorded what ever was being said on these networks at the time [source](http://www.pcworld.com/article/198663/google_wifi_data_collection_hit_by_privacy_group.html)). Now you are putting on the same level google stealthily and massively gathering data people probably didn't know was available in the first place and was only available to limited scope of the wifi network range, and me reposting the personal info on the web of one guy (nothing massive), which he had made publicly available on the web (same scope here), not trying to hide I did it (no stealth here), and last time I checked I'm not a transnational corporation with massive bank account built on monetizing personal data I gathered and with a historical record of privacy problems. When pointed out, I edited out the controversial part right away. While there is correlation, I see nothing proving there is any causation. I believe you give my comment too much importance here as it has been downvoted below the visibility threshold. If you honestly think not having put a link to the employer would have prevented people from finding it on the guy's github and blog, you are deeply mistaken. Due to the offensive message on the website, the backlash was pretty much inevitable. Now I'll be happy to be the target of your anger if you need to lash out at someone for an offensive website creating backlash to its author, but try at least to do a decent job, personal attacks and fallacious arguments are not. As a closing word, being for *anyone*'s benefits includes people who harass on the basis that they would find the info anyway as it is made easy to find *and* publicly available by the guy himself. So thank you for giving me more importance than I actually have and for misreading and misinterpreting my intentions. Have a good day too.
Can these apps be submitted to the App Store?
Yes, apps built with Titanium can be submitted and released through Apple's App Store. 
I do understand that you like having personal benefit reaped off other people privacy, but that doesn't make the privacy concern go away. I wonder where you get the idea that google still has the reputation it used to have. Where can one read about a google privacy policy mentioning they will roam the streets for years and gather any wifi network information if it is available, and this is one of several examples showing that you don't always have the choice. So it seems, you've chosen the voluntary servitude path... &gt;"It is incredible how as soon as a people become subject, it &gt;promptly falls into such complete forgetfulness of its freedom &gt;that it can hardly be roused to the point of regaining it, &gt;obeying so easily and willingly that one is led to say that this &gt;people has not so much lost its liberty as won its enslavement." &gt;— Etienne de la Boetie [The Politics of Obedience: The Discourse of Voluntary Servitude](http://www.mises.org/rothbard/boetie.pdf)(pdf).
Thank you. By the way I recognise your name for some reason, I looked on your profile and you only have a handful of posts. 
For anyone doesn't know already, you still have to follow the same guidelines other developers do.
Right - n0 p0rn :)
I did make the video we're commenting on... ;)
[http://www.appcelerator.com/showcase/applications-showcase/](http://www.appcelerator.com/showcase/applications-showcase/) Show's a list of Titanium Apps in the store.
If you have a collection object, length will not be enumerable which might be a problem... I suspect the reason there is no option is that there is no backwards compatible way to depend on iterating over non-enumerable properties since as far as I know it's not possible without getOwnPropertyNames.
And you have to detect if there's network connectivity, if you use iAds, they must not show up if theres no available to to display, etc.
I feel so retarded.
Kinda, there are few things which are better supported on iOS than in the Android part for the library/framework. But it's really cool for most of the apps.
You still need the ios sdk?
Yes to compile and run code in the iOS Simulator.
So you still need a mac to make iphone apps essentially.
Right. I think that's right for all of these frameworks and APIs AFAIK.
Yup I clicked "other discussion" and copy-pasted my comment over there, traffic being separated into two comment threads, I posted in the two thread to maximize chances the message be seen. Believe it or not, I don't look at who post what on reddit, I only noticed after he replied to me, haven't you noticed that I had edited my comment to reflect this when you wrote your reply. We dont pay attention to everything all the time and sometimes we miss relvant info. Had I known he was a redditor at the time I would have directed feedbacks towards his reddit message box. The reddit which got popular was the one he didn't post and I didn't look up who posted the other reddit, well snafu. As I'm only continuing because you keep trying to make me look bad based on your personal judgement of my intents and I'd like to clear that out.
Airplay SDK is one that doesn't seem to need a mac (or the iOS SDK) for development. The only part that currently requires a mac is the actual upload to the app store. I believe dragonfly SDK is similar, but I haven't used that one.
You can buy OS X for 30 US dollars and run it in VirtualBox. Or, if you like memes: I'll just leave [this](http://www.redmondpie.com/how-to-install-mac-os-x-snow-leopard-in-virtualbox-on-windows-7/) here.
What are you experiences with Airplay, I downloaded it yesterday, the documentation doesn't look so great but it seems to work?
For my purposes (a simple game) it's been great so far. Can test in their simulator, then build for Android and iOS. So far it's been identical on each platform. Use the documentation that comes with the SDK rather than the online stuff, and look through a few examples. Some of the production pipeline is a bit strange, but not too terrible once you get used to it. I have no idea how it is for a standard app or if you need any platform extensions.
Uhh, no. Recursion defines a process of repetition where the repeated action is similar, perhaps identical, but not necessarily a reflection of the invoking action. Recursion is not dangerous but this sole example in JavaScript is dangerous for the strong potential of creating unexpected endless loops. A recursive state is a potential looping condition, which will likely interfere with the state of incrementing variables used in a stated loop, such as a for loop or do loop. In JavaScript it is always safest to properly scope all functions to a desired scope and fully define them before executing them.
Recursion is a method we use to solve problems by solving one problem as an extension of a smaller, simpler problem. In programming terminology, the term recursion is overloaded to mean a function that calls itself. Still, not what is happening here, but also not dangerous. We can prove that recursion works by induction. I'm going to end this thread, because you're trying to talk your way out of misinformation. This is a commonly excepted (and taught) method of creating a timed, asynchronous loop. Yes, this method could cause an endless loop, and that might be exactly what you want. Endless loops aren't dangerous. You seem to be confusing the interpretting phase with the execution phase. You will never execute before all of the code has been interpretted. If what you said were true, and we assumed that languages worked the way you seem to believe they do, recursion would not be possible. Proof by contradiction, as recursion is indeed possible. If the point you are trying to make is race-conditions in asynchronous code, that is a known issue, and while it may lead to bugs, it is not "dangerous". It does not make this method wrong; it makes writing bad code wrong.
yeah I found it difficult to get it to fully work on both OSes, but it can be done. In the last few releases it would seem the Appcelerator team has been trying to address the Android shortcomings. 
Hello, Robert.
Well, I switched to dvorak after seeing some evidence that it was better. Glad I did. Here is some evidence that a harmonic table is quite playable. http://www.c-thru-music.com/docs/html/AXiS-64_Video_Manual.html 
Neat library...here's a fun random late-night thought: could one use this server-side with node to create a server-driven graphics engine? Kind of a cross between the nowjs and htmldom libraries? Hmmm....
You know what else they were caused by? Using a web browser. Better turn off your web browser.
Shameless plug, if anyone wants to minify javascript inside of a php application I built a library called [jshrink](http://code.google.com/p/jshrink-/) to do exactly that. If you're looking to do it automatically then the [minify](http://code.google.com/p/minify/) project is another fantastic resource.
I've installed Titanium, but I don't get the option of making an iOS project, though I already have iOS developers tools and 10.6, which are the only requirements, any clues anyone? &gt;For iOS you will need to have a Mac running OS 10.6 (Snow Leopard) and an iOS developer account (the account is free, but to run on device, you will need to pay a $99/year fee for the iOS developer program). Installing the iOS SDK is as easy as downloading the SDK and Xcode, mounting and running the disk image, and following the onscreen instructions.
When you say "pen", you mean "stylus", right?
I hope you realize how ignorant that statement is. Its basically the equivalent of arguing that condoms are useless because it's safer to not have sex at all, then concluding that everyone should just have sex without condoms. It's really not that hard to use NoScript. When your site loads, and says it needs JavaScript to run correctly, I can decide whether or not to grant your site temporary permissions based on your reputation. Google gets a grant. vectorjohn.com doesn't. Deal with it.
When you created a new project you are not able to select "Mobile" as the project type?
I don't think so. http://imgur.com/QpJMk
Can someone please explain to me why this is "fast"?
At a guess, I'd say because the browser makers have *really* optimized `Math.min` and `Math.max`, and this takes advantage of that with minimal function invocation and looping overhead. I'd love to see an authoritative explanation, though.
If IntelliJ's vi plugin was better I'd be all over it. WebStorm/IntelliJ are great IDEs.
Do you have the Xcode with iOS SDK downloaded not just Xcode?
Also it maybe a good idea to click on the "click to download" at the top right of the screen and get everything up to date. Titanium Developer is built on the Desktop SDK.
Erm, isn't modifying the Array prototype a no-no if you're planning on using any framework? I seem to recall running in to some mysterious behavior deep in jQuery when I've modified the Array and String prototypes and the general advice was "don't touch!" **Edit:** Derp. Note: Read the code before opening your mouth. He is clearly *not* modifying the prototype.
Got both, I will install Xcode 4 and see if that makes a difference.
A doodle jump clone is the best we can come up with to help a suffering nation? Japan is doomed.
You can still apply the trick without modifying the prototype.
He explicitly did *NOT* touch the prototype. This was actually discussed in the comments, which are sadly hidden on first view.
Yeah, except your argument is the equivalent of trying to pull out. Not actually effective.
You're pretty much bang on. Math.min/max and apply use native code (usually C) which is faster than any solution that could be implemented in JavaScript, which would have to be parsed and interpreted.
No, modifying *Object.prototype* is a no-no. That said, don't modify an object's prototype when you can just modify the object itself to get the result you want.
Array.max is not part of Array.prototype. I would actually consider using Array.prototype.max, but then, I'm deeply suspicious of jQuery, even without this additional reason to avoid it.
Not only is it fast, it's also simple and elegant. That's a triple win in my book!
I saw your presentation at the SHRUG last year and I'm glad you have written this book. My copy arrived today and I can't wait to dig in!
Is this similar to "use strict"? Just remember that if your server-side concatenates several JavaScript files into one URL then "use strict" or "use restrict" mode might apply further than you expected. &gt; Even the best make mistakes due to loose semantics [...] restrict mode is opt-**it** ha
Well, not sure, but you do have both jquery 1.5 and 1.4 in there. You don't really need two different versions of jquery, but I don't know if that would cause problems. Try putting `console.log('blah');` inside some of the functions and read the console to see if they are even firing.
First, you're loading jQuery 1.4.2 and the easing plugin: &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="jquery.easing.1.3.js"&gt;&lt;/script&gt; The first script defines an object called `jQuery`; the second script adds fancy "easings" (ways for something to animate) by attaching new things to the jQuery object. Then you've got the code that says what to do when someone hovers over a menu item. Then you load jQuery 1.5, jQuery UI 1.8.9, and the fullcalendar plugin. Loading the new version of jQuery _completely replaces_ your `jQuery` object, including the additions made by the easings plugin. So when you mouseover the menu item, it's trying to animate it with a certain easing, but that easing doesn't exist, and it throws an error. So you need to load only one version of jQuery and ensure it comes before any other JavaScript. To stop this from happening again, logically separate your scripts so that all your _dependencies_ are at the top. Make it look like this: &lt;script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/jquery-ui.min.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='./calendar/fullcalendar/fullcalendar.min.js'&gt;&lt;/script&gt; &lt;script type="text/javascript" src="./jquery.easing.1.3.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; // The code that controls the menu goes here &lt;/script&gt; &lt;script type="text/javascript"&gt; // The code that declares the calendar goes here &lt;/script&gt; That way it's much harder to introduce two conflicting dependencies. (The first two scripts load jQuery and jQuery UI from Google's content distribution network — it'll load faster because the user's probably already got it cached.) 
You sir, are awesome. It's working exactly how I want it to now. I figured that I was trying to load conflicting scripts. Thank you for your detailed explanation. +1 to you
i'm interested in buying the ebook, but before i do... "hey man, got a promo code?!"
how in depth does the book go? i feel like i know a fair amount already and don't want to buy a book of knowledge i already have
So basically just the internal (constant) operation is faster? Unless I'm utterly missing something, you still have to check all n items, so it's just a constant factor of O(n) still. A speed up nonetheless, but I was expecting something else I guess.
Compiled code is always faster than interpreted code (in this case JavaScript). Internal if/else, while loops, for loops, string manipulations are always faster than interpreted versions of the same code.
Depending on the constants, `O(n)` can be slower than `O(n²)` for small values of `n`. Likewise, there can be huge differences between one implementation that is `O(n)` and another implementation that is also `O(n)`. In this case it's the difference of having the overhead of the JavaScript engine or not (the same is true for other languages that are interpreted or use a VM -- JNI calls are faster than native Java code, C-library calls are faster than native Python code). Of course JIT compilation can help, but we're talking about browsers here.
What's a stylus?
I have an unlimited size paper.
Yea I think the article was in response to some JavaScript implementations of min/max that claimed to be faster than some other implementation.
It is a beginner's book, but it does cover the vast majority of the library. If doesn't, however, cover more advanced tthings such as extending OL. Check out the free chapter at [http://vasir.net/openlayers_book](http://vasir.net/openlayers_book) to get a feel for it. That's chapter 9, on the Vector layer, and is one of the more advanced chapters. The later chapters go slightly more in depth, but not too much. Chapter 11 covers how to write an app from scratch using OL + flickr data, so if you're already real comfortable with the OL library and know how to interact and work with third party data sources, you may not learn too much from the book (although, I have tried to include as many best practices and standard ways of doing things as I could throughout the book). 
I'm having issues with IE. The carousel spins around some png's with transparency. But IE suppresses transparency while they're moving. rendering it black. No, we can't change the design so we can use jpgs. I need a javascript workaround beginning with something like: if MSIE... EDIT: I'm talking about IE 8 and IE 7
Consider posting your question to stackoverflow.com if you haven't already. You may get someone to help you here, but your chances are better over there.
Where do I buy one? :P
Seems geared to beginners but nice to see all the stuff I learned from hacking together the examples in a single place. Makes me miss my old job where I used OL though
Which version of IE? I know that up to 7 transparency on PNGs isn't supported, but can be fakes with a CSS filter.
It's different than ES5 strict mode ("use strict"), but it works great together with it: "use strict"; "use restrict"; I've fixed the typo, thanks. :) 
Here are the two implementations that I know about: * [Perl](http://search.cpan.org/perldoc?JSYNC) * [Python](http://pypi.python.org/pypi/jsync) Not sure about the Python package, but the Perl module says that it is "a very early release of JSYNC, and should not be used at all unless you know what you are doing."
FYI **Posted: January 13th, 2007** It's still valid, just older than sin as far as the web goes. Unless there is some accompanying critical analysis with the submission, I'd rather not have articles that are near-5 yrs old posted...
IE 8 and IE 7.
I did, and i got way more responses from r/webdesign and r/javascript. Go Reddit!
That link doesn't work.
are you dealing with PNG transparency, because IE8 shouldn't give you any hassle with that. ie6 and 7 are the ones that need the special filter. 
I am dealing with **animating** images with png transparency. There's a big difference.
I switched to using require.js (http://requirejs.org/) instead of these types of builds a couple of months ago, and am super happy with the change. With require.js (or one of its many competitors that does the same thing) you define dependencies for each js file inside the file, much like you'd do imports in most other languages. You can then either let require.js load all files that you need, one by one, into the browser, or you can have require.js aggregate and compress your app into a single js file. There are several benifits to an approach like this. Foremost, file-by-file dependencies are a lot easier to manage. Another major benifit is the ability to do file-by-file loading during development, making breakpoints and debugging a breeze, while still retaining the ability to aggregate the whole app for production use. If you're living in java-land, I built a maven plugin called brew to use require.js, optionally together with coffeescript and haml templates, in your maven build: https://github.com/jakewins/brew
Some of this I don't agree with at all "fish" * 3; // fishfishfish That's incredibly sloppy with respect to types. Plus it would break a ton of websites since currently... "3"*3; // 9 The parts of the article that I don't disagree with are easily implemented as prototypes. Don't ask the language to do what a framework is better suited doing. edit: The triple quote comments tipped me off that you're a python coder that wants JS to be more like python. But I'm truly disappointed that string repeating works as you want in python. A truly fugly approach. &gt;&gt;&gt; "fish"*3 'fishfishfish'
CoffeeScript.
&gt; Don't ask the language to do what a framework is better suited doing. exactly.
Can I have a daily use example of trim() and string multiplication? I never had to use them in my daily work with javascript. format() can be a nice shortcut but concat syntax is great, and it wins on character length, look: 'this '+syntax+' is elegant' = 28 'this %s is elegant'.format(syntax) = 35 As a python lover, or you give me '' % () syntax (and that would require to modify a lot ES specs) or is just a waste of time. Triple quotes comments will just break the specs as you would guess. I always though that this was introduced in python because python software can be distributed compiled, and this obfuscates (removes?) the comments, but thats just my personal opinion and didn't checked beyond of that. "asd".startsWith('a') can be easily implemented as !!"asd".match(/^^a/) (even !"asd".indexOf('a')) beating in both cases the number of characters used for the call, and "asd".endsWith('d') as !!"asd".match(/d$/) equalling the number of characters. Dont see any really improvement on this functions.
Yes, that was my feeling too, that the source blogger wanted to pythonize javascript, and I love python, but javascript is becoming my language of choice everyday a little more, is just sweet as it is :)
You mean kind of like this? http://tjholowaychuk.com/post/1482512206/node-canvas-open-sourced
Looks interesting but on closer inspection: - Doesn't seem to support IE&lt;9. At all. (uses ES5-introduced accessors; de-facto among non-IE browsers, before ES5) - Doesn't seem to have any unit tests, so no way to know what works and where (or extend it safely) - Relies on strokeText, so text functionality is off on not-so-recent browsers (e.g. Opera 10.10 or FF3)
Jeez, let's hope not.
[EDITED] Or less verbose, function doTimer() { var c = 20, e = document.getElementById('txt'), interval = setInterval(function(){ e.value = c; c -= 1; // Or c--; if(!c){ clearInterval(interval); // Any "break" logic goes here. } }, 1000); return interval; } 
This one help me more http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf :)
I don't want to "pythonise" javascript, only I want some aspects from python incorporated into JS. Like, triple quoted strings being comments. It's a nice feature that can be added, yet it's usefulness is to be debated.
What is this "interval" you are passing to clearInterval? I admit I didn't need to keep the timedCount identifier, but I think it helped make the parallel to the OP's code.
my apologies, was a quick edit of my parent, for cleaning it actually you need that var. edit: basically I wanted to point out the unified var declaration, sorry for the bogus result :D
/\* Or you could use the already existing and sufficient multi-line commenting method instead of requesting a spec change to do the same thing in a way you're more familiar with. \*/
Interesting discussion, so is this recursion? (function(){ setTimeout(arguments.callee,1000); })() In my opinion yes, delegates the next call to a closured timer and recurses. func() -&gt; timer(func() -&gt; timer(func() -&gt; ...)) What do you think?
Yeah, I realize that asking for triple quoted strings are pointless for the amount of work required.
authorblues is right, timers are commonly used in javascript programs for creating safe and controlled, endless loops.
I understand your plight every time I have to write PHP. All programmers have a preferred language and wish that other languages were more like the one they prefer. That being said, don't expect the spec to be changed to make any language more like the one you prefer. :)
I think this adheres to the spirit of recursion, but strictly speaking in terms of recursion as defined by the language community, not the mathematics/algorithm community, this isn't recursion. The reason is that true recursion has a few very special properties, such as TCO (tail-call optimisation), which allows the assembly generated by a recursive call to be optimised to just a simple jump iff (if and only if) there are no statements after the recursive call. Even if the timer setup were the final call, no such optimisation could occur. So, yes with a "but", and no with an "and"...
Great explanation! Something was telling me that recursion it's a main topic on functional programming for a reason, and there it is, low level optimisations... ahh I need to study assembly :)
 function clearAndColor(el) { if(el.value == el.defaultValue) { el.value = ""; el.style.color = "#000"; } } &lt;input type="text" onmouseover="clearAndColor(this)" /&gt; Or to update your current messy code (sorry) &lt;input type="text" onmouseover="if(this.value==this.defaultValue){this.value='';this.style.color='#000';}" /&gt;
If you learn to code in a functional language, you'll HAVE to learn TCO.
It's ok, I know my code looks terrible. Part of the reason I wanted to push it into a JS function. As you might have guessed, JavaScript is not one of the languages in my library (probably should get a JS book someday). Thanks for your assistance, it worked like a charm and I was able to alter your example code and create a reset function to change things back "onmouseout".
defaultValue property... nice.
Right, the idea for triple quotes would be to allow people to migrate from python to JS easier. Which, won't happen.
Well, isn't that clever... :) Wrt your other comment in this thread, there is always Chrome Frame, although I agree in principal at least with the lack of tests.
Amen
Perhaps, but I was not speaking to the use of timers.
&gt; Endless loops aren't dangerous. How so? When loops don't end programs hang. When this is not harmful it is disgustingly incompetent.
How about making a game? The game logic sits inside a large loop that goes on forever, so that the player can play the game for as long as they would like. Procedural animations? Perhaps they loop forever. Perhaps an iterative refinement algorithm, where we give the algorithm an opportunity to work for as long as it would like (a [Spigot](http://en.wikipedia.org/wiki/Spigot_algorithm) is a great example of this). And sorry that you seem to be so narrow-minded about what makes people incompetent. The whole reason that timed loops of this nature exist is to keep from hanging the browser. Just because you haven't come up with a good reason for something doesn't make it useless or a sign of a bad programmer.
"fish"\*3 also works in Ruby. It's pretty common in 'hip' languages. I do think it's far less dangerous/abusive than "3"\*3 is, which is just terrible IMO. But all in all, everything that this blog article wants can be implemented in libraries (except the triple quote comment thing of course). And I'd rather just pull in a library and use it and know it's there than have to detect whether the user's browser has the latest string additions.
The power of sprintf is where you want to do : 'The float value is %10.2f'.format([4.1243]) &gt; The float value is 4.12 Which would cast as a float, trim to 2 decimal spaces, pad to 10 characters , right aligned. It's also a lot easier to maintain, since it doesnt require you to muck about with string concatenation, and the string format and values are separated. Also if you need to re-use the same string format, you can assign the format string to a variable and just use stringFormat.format(input). 
but javascript isn't necessarily really interpreted code anymore. to the contrary: tracemonkey uses a different compilation strategy (tracing) than the gcc that may be even faster thanks to really aggressive inlining. to be fair, in practice the native function is probably a lot of faster either way - and it may never beat the code produced by tracemonkey -, but i believe in theory the javascript code could be faster.
Running JavaScript code can be faster. Way faster. We just need to upgrade the language or do something close to that. `"use strict";` mode is already doing that to an extent. If I'm thinking right, this is compiled JavaScript code, and not compiled static code. You just can't optimize JavaScript completely when you can do so many things in the language, although it's not done in practice. Nobody does this, or I hope nobody does: var myNumber = 6; // its an int myNumber = [4, "wat", true, null]; // oh wait wtf You just can't get that to run as fast as we want without making the interpreted language more strict. 
The scene-graph stuff, that's nice. But for such simple animations I'd actually expect shorter or more elegant code. It just doesn't look good enough to justify using it over standard canvas + JS.
I used Pure + JQuery for a RIA ajax application. I haven't used knockout.js yet but it looks promising. Edit: -1 comments!!! Didn't looked like a negative comment when I posted it
jQuery is the worst example for this article. jQuery is not an application development framework at all. It is a DOM wrapper and that is it. That's all. If your "non-trivial JS application" needs to do DOM manipulation and you happen to like jQuery, then jQuery **is always** an ideal solution. Because that is what it does. 
Great, someone has replicated a much-reduced subset of MS paint. Knockout.js looks interesting.
ah, static types. it's complicated. i mean, we don't want java all over us, again, don't we. of course, all that type juggling adds a huge overhead that's hard to beat. but, thanks to webgl there already are typed arrays that speeds things up a lot. still, i'm not sure if tracemonkey can't optimize that away. i mean, they optimize code and got guards that make changed code recompile, so if the compiler figures out an array only contains a certain type ... there *already is* type inference for js.
[Examples on Github](https://github.com/alexyoung/javascript-dsl-examples) One issue with the latter two: The client's function is stolen and re-evaluated in the DSL's scope. That could be surprising. I humbly suggest a fifth method. Eval the DSL definitions in the client's scope. Use eval like an import statement. // In library code var importDSL = 'var foo = DSL.foo;'; // In client code eval(importDSL); foo(); 
I cannot play with this yet on Linux. One thing strikes me though. Your index 'i' into the buffers doubles as timing for the wave. It is local to the audio callback so every time the API requests a new buffer you begin counting from 0, and 16348 % 10 == 8, so every 16348 samples you keep the same output for 8 samples instead of 10.
I don't see any knockout in that site. But Knockout is by far the best client side data binding library i have worked with. 
What's the definition of "non-trivial JS application"? Does Twitter qualify? How about some ecommerce site? Well, either way you'll need some base library which takes care of browser normalization. jQuery (or YUI or whatever) can do this for you. But that's about it. It's not an application framework. You won't need all that much functionality in most cases though. Something very simple which manages your modules and takes care of passing events around (and maybe logging and something which unifies xhr stuff) is often everything you need.
Very nice. Took me 5 minutes to finish that darn 12-puzzle without pausing. Interesting concept.
fart? really?
agreed, would like to see the knockout.js connection
I agree. I've found so many things that jQuery doesn't do, many little obvious things that a web application might need. For DOM it's ok, but the API has many quirks and inconsistencies. example: .bind("click",function(){}) and .bind("click",{"hello":"world"},function(){}) is just a stupid way to do this. A better way would have been: .bind({type:"click",data:{"hello":"world"},handler:function(){}}) ..is much more extendable and forward thinking. Sure it is a bit more typing, but you get a more usable and extendable system out of it. Passing arguments has proven to be brittle and I consider it an outdated way of doing things. 
Set display to "none" instead of setting visibility to hidden.
&gt; console.log('loosing'); ಠ_ಠ
if you look at the source code of the iframe, it's ALL knockout. I'm not really sure exactly how they're doing the data binding to the canvas, but it's pretty cool.
Can I hit him on the head for saying "Class Names"? There are no classes in Javascript damnit, only objects!
Why should I not extend prototypes of any objects?
Only if I can hit him on the head for interchanging 'anonymous function' and 'closure'
its a double lose. you "loose" twice if you do it that way.
Source on the var thing? I don't really see how that's possible, at least not in modern interpreters.
Because the functions you added will show up when you loop over the object with`for(var i in obj)`.
Use Object.defineProperty then and make that property non-enumerable.
Does this work in all browsers?
Since he is mostly talking about node.js (V8) the var performance impact should be extremely small. He specifically says that if you're developing for the browser, you should ignore some of his points.
Mm, that's what I've been suspecting. Just done some fiddling in Firebug, and" +new Array()" gives you 0 back, which makes sense. Still seems a little odd.
This is a _node.js_ specific styleguide, so you shouldn't worry about browser-compatibility, and yes, this works in node/v8. Actually, there is not really a problem with extending object prototypes in the browser, either, with a single exception: Never extend Object.prototype (unless you use Object.defineProperty and set the property as non-enumerable), as this will break using objects as hashes/dicts. Monkey Patching, as this is called in Ruby/Python, can be useful, but it _could_ break third party code. But I've never encountered this problem, unless the third party code was broken anyway (e.g. using for..in to iterate over elements of an array). Many libraries actually make use of this technique (e.g. PrototypeJS).
Yeah, I wonder how that works. Maybe the LHS evaluates to (int)0 in lieu of an actual expression exactly because a binary operator is used, thus forcing a cast of the RHS?
Could the + sign be interpreted as a "positive" sign? `+100` evaluates to 100 just as `-100` evaluates to -100.
Yep, you've got it. '+' and '-' when used as unary prefix operators (as opposed to the binary infix operators that use the same tokens) indicate positive and negative numbers. The operand on the right is coerced to a number.
conversion to number. a common use case is the Date object var timestamp = +new Date(); instead of var timestamp = new Date().getTime(); var timestamp = new Date().valueOf(); // in case of Date those 2 are equivalent +new Object(); calls the Objects valueOf() method. example: Array.prototype.valueOf = function () {return this.length;}; // note: don't do this! ;) var foo = +[1, 7, 9, 2]; // foo = 4 
 var foo = +new Bar(); Is the same as doing: var foo = parseFloat(new Bar().valueOf()); ...for objects that define a valueOf function This works because the positive operator (*NOT* addition) will attempt to parseFloat() on the valueOf() the object on the RHS if the return value was not a number. **NOTE** I prefer to write these as: var foo = (+new Bar()); Because it is clearer that I am using + NOT to mean addition but as the opposite of negation (whatever that is called). Here is an example of why I wrap these kind of statements in parentheses: var NINE = function(){ this.valueOf = function(){ return "9";} // Returns a string! } var a = 1+(+new NINE()); // 10 var b = 1+new NINE(); // 19 ?? Here variable **a** will equal the number 10, as we expect, but variable **b** equals the string "19" because the return value from valueOf() is never run through parseFloat() in the second instance.
It may be white-space around the element, example: &lt;div&gt; &lt;span&gt;oject&lt;/span&gt; &lt;/div&gt; Deleting the span above will leave 2 white-space #text's around it from the newlines. But it could also be a css thing, a markup thing, or even a browser bug. You really need to present a test case otherwise we're guessing blindly.
// TODO: insert obligatory K&amp;R vs Allman rant
i stand corrected, didn't notice the iframe in the view source.
Correct. I believe this is also equivalent to using Number(). var d = Number(new Date());
The whole thing is in KO (I know because I built it =) - check the source for the actual app (the bottom iframe) or the github account: https://github.com/Skookum/ghostwriter
There is [unary + as well as binary +](http://rx4ajax-jscore.com/ecmacore/operator/plusmnus.html). The above is unary plus. It's used in favour of parseInt since that function has some woeful error-ignoring habits (it converts as much as it can then ignores any error, and ignores whitespace too IIRC). There's at least one more parseInt() showstopper, but I've forgotten what it is Edit: &gt; # If the input string begins with "0", radix is eight (octal). This feature is non-standard, and some implementations deliberately do not support it (instead using the radix 10). For this reason always specify a radix when using parseInt. (from MDC's parseInt page). But nope, that's still not the showstopper I was thinking of
Exactly. There is not a "natural" one pixel space left by hiding a div, whatever youre seeing is a side effect of something else on the page. 
Actually, the unary + operation is like parseInt(new Bar(), 10), not parseInt(new Bar()). (note the radix)
With respect, no, no, no, no, *no*. **Casting** to an integer is not the same as calling **parse**Int() [Edit: or parseFloat()]. parseInt() inspects a string and attempts to *extract* a string from it starting with the first character and working through character-by-character: * parseInt('123') gives 123 * parseInt('123a') gives 123 * parseInt('a') gives NaN casting to an integer attempts to interpret the whole input value as an integer, and fails if it isn't one: * = +'123' gives 123 * = +'123a' gives undefined * = +'a' gives undefined Sometimes you want to just extract a number from a string and don't give a crap if there are extra characters in it, but sometimes you want to be sure that a value (eg, that's been entered by a user or supplied by a web service) *is* a number. parseInt() is for extracting numbers from (possibly-longer) strings. Casting is for determining if a *whole value* is a number, and failing if not. It's common for people to think they're the same thing (and there's some overlap in some scenarios), but in reality they're quite different, with very different results and failure-conditions.
According to your post, the only thing wrong in what I said is that I (lazily) used the function parseFloat() instead of the function Number() to represent what happens internally. Ok, I agree it was a lazy "basically, this happens" hand-wave because I didn't feel the need to explain JavaScript's internal "type coercion." Here, let me fix what I originally wrote so that you can go find something else to be pedantic about: var foo = +new Bar(); Is the same as doing: var foo = Number(new Bar().valueOf()); ...for objects that define a valueOf function (note the lack of a *new* operator next to the Number object). By the way, in JavaScript we cast to Numbers and NOT integers - there are no integers in JavaScript - and we always specify a radix on parseInt().
It's not really used *in favor* of `parseInt`, given that `parseInt` should really be used for *parsing* (though given its limited usefulness at that, regex is usually used instead). Oh, and the radix problem can be fixed by passing in `10` as the second parameter 
except allman breaks javascript.
Because it was intended to be usable by complete idiots who can't grasp why they need to declare variables before use or the concept of variable scope. I don't mean it is impossible to write good js code, mind you. It just allows you write horrible code. I'd like to claim most programmers now know better. Unfortunately, you won't believe who still pass as programmers...
document.display.src isn't spelled correctly either time in your next function.
Can't believe I overread that every single time I checked.. Thanks a lot!
Can you give an example of a variable being in the global scope when you want it to be local? If 'var' isn't used then isn't it just sloppy code? If you define a variable within a block that has its own namespace (such as a function,) then it is local to that function. Outside of that it is global. What is so complicated? Tons of languages are this way. The only big difference is that JavaScript (and Perl if you don't use strict) lets you create variables without declaring them, but if you are writing applications and not glue there aren't many legitimate reasons to do that. As for why it would be like this, C. I don't see anything overly wrong with this behavior?
document.display.scr easy to miss get firebug :P
The problem is somewhere around the line where you forgot to do **programming, motherfucker**.
Get firebug up in this bitch.
...in *one edge case* to do with returning object literals, which isn't even to do with Allman styling, that's only concerned with block braces. But, ahem, I'm not going to argue this again!
Downvoted for speaking the truth? Have an upvote.
He was talking about object constructors, the closest thing Javascript has to classes. Calling them classes is fair, as they are the thing you use "new" on. I don't think it's head hit worthy.
This sounds like unverified personal belief to me. Since Javascript reads ahead in a function to find all the variables, I doubt it much matters where they are declared. Edit: also, === is definitely faster. The whole point is that it doesn't do type coercion.
A side note: Please don't omit semicolons *sometimes*. Either don't use semicolons where you don't have to (and this requires you knowing the exact ASI rules!) or use them everywhere.
here's an example: (function() { foo = 'bar'; })(); console.log(foo); echos foo. what I'd like to happen is for that closure to **not** be able to set arbitrary variables in the global scope. edit: not
indeed, i just like stirring the pot sometimes. Coding style is up to the coder's best judgement, imho (sadly, best judgement isn't always the best...)
I'm pretty sure that using a single var statement is faster than having multiple of them. Thomas Fuchs (the scriptaculous guy) benchmarked a lot of these micro-optimizations in his "JavaScript Performance Rocks!" Book. The performance differences are not _really_ noteworthy, but there was a measurable difference in all tested browsers.
His personal taste. There is no difference between these two.
jQuery is more than just a DOM wrapper. jQuery is: DOM, ajax, events, animation/effects.
ummm, that does assign 'bar' to the global var foo, isn't that what you wanted?
edited the post, lololol
&gt; Can someone explain the rationale [...] There isn't any valid reason for this. It was a mistake. Same thing goes for ASI (automatic semicolon insertion).
I would put ajax and events under the DOM umbrella. Maybe not strictly, but I guess what I meant by DOM was bad browser API. The XHR object (ajax) is complete garbage, so jQuery improves it. And events are definitely part of the DOM. The only thing in that list not part of the DOM is animations.
then just tack a var in front of foo. An easy way to think about it is that var means, within this (function, not block) scope. When you omit the var keyword, it goes up the function scope tree (prolly not the correct term, but you get the idea), looking for a variable with that name, if it doesn't find it when it hits the global scope, it assumes it's global. This is not unlike how prototypical inheritance works, so it makes sense in a prototypical language. As an example, consider: (function() { var foo="bar"; (function(){foo="baz"})(); console.log(foo); })() foo will be baz, not bar, and no global foo will be created. Edit: if we were to say "var foo='baz'" within the inner anon function, then foo in the outer function would remain unchanged. 
see my reply to haxd in this thread.
It's a design mistake in the language itself, there are quite a few of them. I recommend Douglas Crockford's [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742), he goes into a lot of good practice work-arounds for the pitfalls of the language.
&gt; According to your post, the only thing wrong in what I said is that I (lazily) used the function parseFloat() instead of the function Number() Kind of, yes. However, those two concepts (extracting a number *from* a value vs. turning a value *into* a number) are a common mistake that a lot of people make, so I wanted to emphasise that they weren't the same thing at all lest the mistake be propagated further. ;-) Annoyingly, though Javascript provides the Number() function to convert strings into numbers (ie, conceptually identical to =+, rather than parseFloat/parseInt), the Number() function actually behaves different to either of them: * Number('123') gives 123 * Number('123a') gives NaN * Number('a') gives NaN So yeah - it *should* have been completely correct to describe =+ as "syntactic shorthand for Number()"... but sadly in practice it's still technically slightly different because =+ and Number() have different failure-modes when presented with non-number input. This is almost certainly a fault/unhandled edge-case in Javascript the language though, so don't feel bad for getting *that* bit wrong. ;-)
JavaScript was released in 1995 by Netscape with the intention of doing image rollovers, alerts, and other minor scriptings of otherwise very static webpages. Netscape rushed the living hell out of it on top of that. No one knew at the time what kind of impact JavaScript would ultimately have. As is often the case in this industry, when something works, people go with it regardless of how flawed it may be. So we are left with a capable, but very flawed language. It's just the way it is.
eh, in the latest Chrome, `+'123a'` and `+'a'` both evaluate to NaN...
It's not a design mistake, it comes from the fact that JS is essentially a variant of Scheme, masquerading as a C-syntax imperative language. The mistake is that people assume that it will behave like your average Class-based C-syntax language, when in fact it does not. There are plenty of mistakes in the language, but this isn't one of them, it's a poorly-understood essential feature.
[loosing](http://en.wiktionary.org/wiki/loosing): Present participle of [loose](http://en.wiktionary.org/wiki/loose).
So, I think both of your points are non-issues. Using a single var, while looking much cooler, is not near as readable or maintainable and it's doubtful that it suffers any performance impact at all. And I doubt that any _performance hit_ from using === is going to be significant enough to warrant attention. The only place I could think of it being an issue is if the code in question was called millions of times, and even then the _hit_ I think is likely to be under the threshold of human perception. So, unless you are writing super-highly-mega-optimized code, do what's smarter....which IMO is whatever is the most readable &amp; maintainable. I seriously doubt that 99.999% of the time the choice of using == or === will have any real implications at all. So, in short, I think that your comment is all FUD.
Mistake is perhaps a strong word, but you can't blame the users completely for misunderstanding the languages design when it seems to go to a lot of effort to hide or obscure many of its functional features/origins.
The context was as the antithesis of "winning", in which case the correct word would be "losing", not "loosing"
I think the biggest problem with people's understanding of JavaScript comes from the Java part of the name. That was the biggest mistake of all, let's change the syntax to look like Java and give it the most confusing name of all time, as a product tie-in deal with Sun. People see the word Java and subconsciously think it's just an slimmed down interpreted version of that ungodly language, not the badass LISP-y beast that it is. That, and how it was used in its early years of existence.
Interesting - I was in FF3.6.16. I guess it's either undefined in the spec, or one of the browsers has got it wrong.
I deleted my earlier post because the var thing was misinformation. But my point about == / === still stands. Here's some code I used to verify this: function test1() { var testi=0 var test1 = false var test2 = false for (var x=0;x&lt;100000;x++){ if (test1==test2) {testi++} } } function test2() { var testi=0 var test1 = false var test2 = false for (var x=0;x&lt;100000;x++){ if (test1===test2) {testi++} } } function test3() { var testi=0 var test1 = false var test2 = "asdf" for (var x=0;x&lt;100000;x++){ if (test1==test2) {testi++} } } function test4() { var testi=0 var test1 = false var test2 = "asdf" for (var x=0;x&lt;100000;x++){ if (test1===test2) {testi++} } } console.profile() test1() test1() test1() test1() test1() console.profileEnd() console.profile() test2() test2() test2() test2() test2() console.profileEnd() console.profile() test3() test3() test3() test3() test3() console.profileEnd() console.profile() test4() test4() test4() test4() test4() console.profileEnd() The Results (average run time): testdiff1 = 3.888ms testdiff2 = 6.177ms testdiff3 = 19.817ms testdiff4 = 4.25ms I've run this in different ways, many times, and my point is valid. When you are testing two variables of the same type, using == is faster. When you are testing two variables of different types, === is faster - but my point is that if you are testing two variables of different types or the variables are of unexpected types, you are probably doing something wrong. 
How do you access a variable in an outer (but non-global) scope in Ruby? Because of this, python had to add a new statement ([nonlocal](http://www.python.org/dev/peps/pep-3104/)) in version 3. var in js avoids this problem. Lua does something similar.
I'll be the first to admit that I didn't fully understand the full set of features of the language until just a few years ago, it's easy to be productive in it as a front end developer without even being aware of the functional goodness that's in there.
Defaulting to global is fine because really you're just being lazy if you're not declaring your variables ahead of time. And the ultimate laziness is using all globals. So defaulting to global enables the ultimate laziness, while getting out of the way of coding properly -- where you declare everything with my/var/etc. What's REALLY dumb is having to declare globals like you do inside a function in PHP. That is inexcusably stupid design.
As vonkow said, why not just put the 'var' before foo? Shouldn't you always be defining your variables before you use them? The language supports creating them by using them like that, but then it goes to global. That doesn't seem unreasonable. Add 'var' and then life is good?
Declaring globals as in PHP is worse. Because if you include a file from within a function and there's a function definition in the included file, from within that function, you *cannot touch* the function level variables from the calling function, nor the top level variables from the included file. You can only touch the function's own variables, and the globals. Example: function foo ($x, $y) { include 'bar.php'; } in bar.php: &lt;?php echo "invoker variables: ($x,$y)\n"; # ok function bar() { echo "local: $x\n"; # wrong global $y; echo "global: $y\n"; # wrong } bar(); You don't have that problem in Javascript. 
I'm reading examples from the [Coffeescript homepage](http://jashkenas.github.com/coffee-script/). The homepage also works as a simple javascript syntax reference.
fuuu Im still doing var a,b,c,d; because I think its cleaner.
I actually encountered the same scenerio yesterday, and came up with basically the same idea. window.onerror = function(error, where, line) { var p = {}; p.error = error; p.file = where; p.line = line; p.useragent = navigator.userAgent; p.os = navigator.platform; p.cookies = navigator.cookieEnabled; try { var plugins = []; for (var i in navigator.plugins) { plugins.push(escape(navigator.plugins[i].name)); } p.plugins = plugins.join('|'); } catch (e) { } var d = []; for (var i in p) { d.push(i + '=' + escape(p[i])); } new Image().src = 'http://site/track/jserror?' + d.join('&amp;'); } The concept of gathering more than just the message was so we can try to recreate it.
there's also a discussion on [Stack Overflow](http://stackoverflow.com/questions/5495984/coding-style-guide-for-node-js-apps/5497467#5497467)
Agreed. It might be an abstraction, but who doesn't love abstractions these days?
&gt; Using a single var, while looking much cooler, is not near as readable or maintainable I'm not in it for the performance or adhering to Papa Crock. I actually find it *more* readable, it cuts out needless chaff (no need for the visual distraction of a bunch of var var var) and the only time I get into the maintainability issue is when perform too many operations in the statement. var foo = 'blah', blah = 'foo', fooblah = (foo === blah) ? 'yeah' : 'naw';
I do do that, but I would like it to be the other way :P
I'll have to look up almost all of this, but I'll give it a try. Thanks for your time, much appreciated!
Something else: on the first run, you will not see 'bilder/ne_buch_1.jpg' but 'bilder/ne_buch_2.jpg' because your incrementation is before the document.display.scr="bilder/ne_buch_"+count+".jpg"; edit:Maybe that is what you want after all.
21 long, barely readable lines of CoffeeScript... and a 100,644 line, 6500KB text file. Pretty cool despite the title though. :)
Do we really have to go over this again?? Coffeescript != Javascript this belongs in r/coffeescript 
Just wondering .. Why sou you call the function 5 times instead of just extending the loop? Eg x&lt;50000? Also, the last loop is one order of magnitude less than the others.. 10000 vs 100000
Kids the days.. Loosing their spelling
I'm preparing something for my local javascript group [js-montreal](http://js-montreal.org) tentatively called "Bad Parts Stew" where I wanna show how some of the 'bad' parts of JS per Crockford &amp; others can actually be fun and useful. In particular the with() construct, which i think is maligned a bit unjustly.
thanks for that catch, though the results don't come out to be much different.. 4.25ms instead of .425ms which is what is expected running it 100,000 times vs 10,000 times. 
There's also an inherent higher level of complexity required for code changes; when declaring a single variable per var means that we have a constant N^firstline .. N^lastline # of lines affected. With the multi-line var that changes -- depending upon your situation -- to one of the following: * N^firstline-1 .. N^lastline (if you remove the last line, you have to replace the comma on the previous line with a semicolon) * N^firstline .. N^lastline+1 (if you remove the first line, you must move the _var_ to the next item) * N^firstline .. N^lastline (for all else) This falls apart even further if you introduce docblocks -- you are documenting your code, right? :) And I stray from DC in the sense that I advocate declaring them directly before use (in the appropriate scope of course, and not re-declared within loops).
No problem! Good to get an expected result!
I don't see those cases as slowing me up considerably and it might be offset by the lack of extra visual cruft and extra var keystrokes. I'm not going to argue that too strongly though, as I don't have any hard metrics... I don't adhere to having one var statement per scope, and I see value in delcaration-upon-use, especially in longer functions. And usually I have inline comments on the line above. One line of comments usually is enough for one line of code: var foo = 'blah', // This will set blah to 'foo' blah = 'foo', // Combined variable that outputs... fooblah = (foo === blah) ? 'yeah' : 'naw'; *edit: looks ugly without syntax highlighting but it looks nice in [my chosen colour scheme](http://dengmao.wordpress.com/2007/01/22/vim-color-scheme-wombat/)*
You failed to comment one of your variables, which I think supports my arguments (unless you intentioanlly left the 1st one off, in which case it's an incomplete example). Also, I was talking about comments ala' docblocks, which aren't used universally, but which are extremely helpful for both IDE support and for generating API documentation. /** * This is a short description of the variable. * * @type {string} */ var foo = 'blah', /** * This is a short description of the variable. * * This is a long description of the variable, and more of the long description of the variable. * This is a long description of the variable, and more of the long description of the variable. * This is a long description of the variable, and more of the long description of the variable. * This is a long description of the variable, and more of the long description of the variable. * This is a long description of the variable, and more of the long description of the variable. * @type {string} */ blah = 'foo', /** * This is a short description of the variable. * * This variable is necessary to support * * @type {string} */ fooblah = (foo === blah) ? 'yeah' : 'naw'; I will submit that this is all heavily dependent upon your environment; if I wasn't on a team and was one of the sole (or only) maintainers of my code, then I would likely do it more like your example. But, reality prevails and bills need to be paid.
Hmm. In Firefox and Chrome's debug consoles I get: &gt; Number('123a') NaN &gt; +'123a' NaN &gt; Number('a') NaN &gt; +'a' NaN Seems like Number() and unary '+' are the same. Did I miss something?
Have you heard of jsperf.com?
Wow, yeah, I'd never comment my code that heavily. I rely on developer knowledge of js and decent variable names. That seems to cover most cases. If I was part of a team that insisted on that level of commenting, I think I would leave that job. And I'm not being facetious.
You'd be surprised what people do for money... Also, when you have 15 people all working in the same code, all with varying levels of JS experience and experience with the software, it's pretty much a must to have such extensive documentation.
I just don't see the need for it in cases like /* sure, doc here is good to describe the function */ function process_ids() { // Does this comment really need to exist? var id_array = [1,454,53245] ...
Fucking sweet name. Edit: Yours, not the book (although it's not bad!).
Could you clarify in what way this is a heritage from Scheme (afaik Scheme does not have such a "feature"), and is not at least a debatable choice? Also, in what way is it essential? As you mentioned elsewhere, what happens is when JS does not find the variable in local scope it will traverse the scope chain upwards looking for it, eventually hitting the global scope. Saying "guess I'll just create a variable here" is obviously what JS does, but I'm not sure that it's necessarily the best choice. I can't speak for BE, but in my recollection I've heard him only mention this with a hint of regret, with the implication that it was just what was done, not necessarily a conscious design decision (or at least the wrong one. If I'm wrong on these points I'll gladly stand corrected). "In Netscape 2.0, there are bugs to do with implicitly defining a global variable by setting a new name with assignment within a function" - Brendan Eich, answering a question about implicit globals I'd also note this is changed in strict mode, but that's neither here nor there. Touching on the "essential" point earlier, BE explicitly reccomends *not* using this "feature" so I'm not sure in what way it's "essential". Perhaps you mean it's a result of or related to an essential feature: closures ...but I don't think getting rid of these implicitly created globals would hamper that. It would be just like what happens now if you try to dereference a variable that doesn't exist: the engine would traverse the scope chain and not find any variables initialized and throw an error (akin to strict mode does now, reasonable imho)....or perhaps it would just come back to the scope it started in and create the variable there (less reasonable imho). (For the record: I'm in the SWYM camp: if you want to create a variable, declare it first with let or var, if you want it global..declare it in the global scope) I'd say if *anything* it was done with the intention of being easier on noobs, or just as a result of haste....
I highly doubt that was Eichy's intent. But yes, I agree that it's extremely easy to write shitty js and a lot of "developers" fuck it up on the daily. 
Disagree. Most cases are local variables, so why make me type out extra stuff? I like Python 2.x's approach of reading global/upscoped vars without any extra declaration, but requiring a declaration when you *set* a global variable.
Where Number() has the advantage that everybody knows what's going on. Tricks like this (or attaching |0 instead of using Math.floor()) have the opposite effect of comments, in a way.
Your confusion is why this is generally considered a bad practice.
Devil's advocate: function process_ids() { /** * These ID's must be hard-coded here, please do not remove! * * Why must these be hardcoded here? According to the PHB, these are the * only 3 ID's that we'll ever possibly need, and so it would be silly * to make an AJAX call to retrieve these every time that we need to * process them. * * @note These are bit fields! Please use the appropriate bitwise * operators; for the tokens that these bit fields represent, * please see bits.js. * @type Array - an array of integers sorted low-&gt;high. */ var id_array = [1,454,53245]; } Yes, ordinarily you don't need THAT much documentation; many times it is as simple as: /** * @type Array - an array of integers sorted low-&gt;high. */ var id_array = [1,454,53245]; Even if no actual domain-specific information is documented, at least when I am in Aptana and I type out **id_array** it gives me all of the info that I previously attached in the comment. Not monumental, but it saves time. For declared variables that haven't been initialized (such as _var foo;_), it will also allow the autocomplete functionality. For this example, it'd offer you all of the array methods (and their respective descriptions, parameters, return values, etc.).
So you're telling me that you put *at least* as much comment as your second example for *every single variable*? It seems like that wouldn't save any time overall, for me at least. I can see it coming in handy for a large "class"-like object/fn, but for local variables in your average 10-50 line function/"method", I don't see the need. Again, it comes down to developer experience, but type hinting for native methods isn't something I prioritize in my editor (vim).
Combined with a JavaScript stacktrace library (eg. https://github.com/emwendelin/javascript-stacktrace), logging JavaScript errors comes in handy. I wish everyone didn't make things (especially really simple things like this) jQuery plugins, though! jQuery isn't always necessary (especially not in this case!)
For me it's mostly because I often use HTML in strings and I prefer to do '&lt;a href=".."&gt;' over "&lt;a href='..'&gt;" or "&lt;a href=\"..\"&gt;". It's just a matter of preference, though.
Compare that with this: var foo = 'blah', blah = 'foo' fooblah = (foo === blah) ? 'yeah' : 'naw'; ...and suddenly *fooblah* is a global var. I agree this notation cuts unnecessary fluff but it's just way too easy to have a slight typo cause unintended results.
From what I remember, the event loop on most modern browsers is stuck at around 16ms which could account for your upper bound fps.
The spec sets a lower bound of 4ms on a setTimeout or setInterval call - anything less than that is supposed to get treated as if it was 4ms. IE9 actually ignores this and will let you go down to 0, because it lets them cheat on benchmarks. When I was doing yesterday's Bunsen doodle, we also ran into this - I bumped the frame rate up as high as it would go, but visually it still only ran 2-3 times as fast as at 30 fps. A timer inside the event loop indicated that it was only taking up like 1ms of CPU time, so I'm pretty sure that the extra time is either because of setTimeout fuzziness or time spent in the rendering engine.
You’re absolutely correct. I just ran a test on Chrome and got around 4.4ms. Edit: Here’s the rest of the results for my platform (in case anyone was interested). I ran this [test](https://gist.github.com/897926). For Mac OS X: Chrome 10.0.648.204: 227.9fps = 4.3878894251864855ms Firefox 4.0: 96.6fps = 10.351966873706004ms Safari 5.0.4: 97.1fps = 10.298661174047373ms Opera 11.01: 96.4fps = 10.37344398340249ms It would seem that other browsers possibly set the minimum event loop higher than 4ms. Would you agree?
http://www.zombo.com
yeah, i know, i was just joking. either way, "loosing" is a *very common* mistake among native german speakers.
Ahah - I was using `var i = &lt;éxpréssion&gt;` rathér than just `&lt;éxpréssion&gt;` - pérhaps that's it. My bad, if so. (Damn réddit mold - now to communicaté I must appéar Frénch ;-).
Completely agree, cant see a reason why they say this... it doesnt make it easier whatsoever separating it,.... Thats a ridiculous argument, that somehow highlighting something and moving it around and removing a , and inserting ; is somehow a massive time waster...
I was referring to how JS goes up the scope chain, looking for the variable as an essential feature not necessarily how it makes it global if it isn't found, but didn't do the best job of saying so. The decision to just make the var global if it isn't found is kinda questionable, especially considering that js does the exact opposite when it gets to the top of the prototype chain looking for a non-existent property of an object. The behavior is admittedly a little wonky and gets more people into trouble than it helps. I guess I'm just so used to scoping in JS that it seems reasonable to me at this point, but I agree that the way strict mode handles it is more intelligent, if slightly less forgiving. Being a scripting language originally designed for ease of use by non-programmers, there are many forgiving aspects of JS that also let you shoot yourself in the foot. I'm definitely in the SWYM (tho I call it the MWYS camp) camp with you, declare it in the scope you want it in, you're just asking for trouble otherwise. Have you checked out BE's post on how he'd make JS if he had the chance to do it all over again? [It's a great read](http://brendaneich.com/2011/01/harmony-of-my-dreams/).
using setInterval to periodically check that you haven't written bad code??! Ugh, learn how to scope.
No, not every single variable, just every non-trivial variable. True, most local transitive vars that are fairly simple may not require any documentation and yes, it is more handy for larger class-like objects. But, and once again this goes back to your dev environment, it's easier to advocate a single strategy for this to a large group of devs than it is to define a flow-chart style strategy whereby you say something like "if they are simple vars, use one _var_ statement, if they are complex vars, use a _var_ statement for each variable". Also, if you start down the path using the single-var statement and then later you need to add a complex variable which requires more documentation, then you might end up with a mixture of styles, which is likely worse than either one individually. Sadly, much of _enterprisey_ development is centered around coding to the lowest common denominator on the team...
Better not be an April Fools joke
Yeah, I do see an upper bound fps provided by these browsers, but it is quite a bit higher than the paint rate (at least for Firefox where I can accurately measure it). The difference between paint rate and frame rate is important to my demo because the visual frame rate is min(paintRate, frameRate). That is, if animation frame rate exceeds paint rate, then the browser is essentially frame skipping. I noticed this problem more severely when my computer's cpu was maxed out doing something else. My demo claimed 60fps, but the paint rate was noticeably slower, probably 15 per second.
As a Brit, I look forward to being able to address elements with the £('') syntax.
OK, but you can't compare apples to oranges: var i = &lt;expression&gt; will return undefined, no matter what the value of &lt;expression&gt;. So that really doesn't help to distinguish between the results of the unary operator '+' and the function Number(). So, to summarize what I think we've learned here: 1) parseInt(&lt;string&gt;) returns an integer number, if it can find one at the beginning of the string, and returns NaN otherwise. 2) Number(&lt;string&gt;) and unary plus '+&lt;string&gt;' both return a number if the entire string can be converted to a number, and NaN otherwise. For strings Number and unary plus '+' seem to be identical. As an aside, it seems to me to be much better style to use Number() than unary +, given the choice, as the intended consequence is much clearer. 
Gah, sorry - `i = &lt;thing&gt;`, not `ṿar i = &lt;thing&gt;`. Bloody mold. ;-)
great april fools joke! ...no one actually uses yui!
You can use JSLint for this purpose... http://jslint.com/
I don't think the guy is right or wrong. Yes you shouldn't blindly use one tool simply because it's popular; you should have good reasons to justify using that tool. However having a large base of material you can search through (which comes from being popular), and already knowing that library inside out are both legitimate reasons for picking one library over another (and instead of rolling your own).
This does awfully look like an April Fools joke, but someone seems to really have taken his time to actually a create a hack that does what the blog tool says. In the blog, they linked to [this github repository](https://github.com/fakedarren/mootools-locale/tree/master/Source) which at first glance does look valid!
Yes, It was not Brendan Eich but Netscape who totally fucked up the opportunity to ship a great language.
This is the lightest library I've ever seen!
Oh, I haven't been talking about one v. multiple var statements for a while here; that's basically down to individual choice, or the needs of one's environment. It's the (to my style) excessive commenting I've been talking about. And yes, if I had to put 3+ lines before most variables, I would switch to one var statement per variable. Enterprisey stuff is only awesome when there are Klingons around.
Sure, ASI can be a dick but it can be worked around. I use [JSHint](http://jshint.com/) on all my code and it throws these errors for your example: Line 2 blah = 'foo' Missing semicolon. Line 3 fooblah = (foo === blah) ? 'yeah' : 'naw'; 'fooblah' is not defined. I have it set up as a node.js module, reverse-proxied through nginx so I can just hit http://mysite.dev.local/jshint in a browser and it spits everything out.
Downvoted for random bolds right in the middle of the article and those awful link ads. Also, this is false: &gt;Another nice thing about jQuery is that you can use it with other Frameworks, one disadavantage is that you cannot use Native JavaScript with jQuery Objects. jQuery selectors return a set, even if the length is 0 or 1. You have to specify which object out of that set you want, obviously, but you CAN select it as a native object. For instance: $(selector)[0] .nodeType
jQuery is a library, not a framework.
None of the libraries on this page are frameworks.
&gt; Oh, did I also mention that Apple uses them? I was about to cry foul on this, but it appears that they do indeed use Protaculous on the main site. Many of the subsites like the dev tools and the iPhone help pages run on sproutcore or an internal library named PastryKit. The New York Times also uses Prototype.
They're Libraries yes, but they're also "Frameworks". Most of the time you use them interchangeably. http://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks
Here's 1. http://www.prototypejs.org/
Wicked! Glad to see Skookum's keeping you busy *and* creative. :)
[relevant.](http://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library)
Hmm - their [front page](http://puremvc.org/) doesn't give me much confidence in their JavaScript knowledge: "He has done the previously unthinkable. Ported an OOP framework to a language without classes" 
Wow! looks amazing. I've been working on something similarish to simply annotate lyrics with chords ([demo](http://chordforest.don.al)). Wished I had seen this earlier. Will be contributing some in the near future =] Hoping your website comes up again soon so i can take a further looksee.
Really? CoffeeScript is probably too small for its own subreddit. Since it helps you write JavaScript, this seems like a pretty good place for the occasional CoffeeScript posts.
You should check [this](http://nokarma.org/2011/02/02/javascript-game-development-the-game-loop/index.html) out if you haven't seen the RequestAnimationFrame APIs.
I've been using js2-mode for emacs. I'm sure it is not infallable but it always seems to catch things. var i; // blah blah for (var i; &lt;- This "i" will be underlined. x = 10; &lt;- The x will be highlighted if not in scope. It's one of the smartest syntax highlighters I've seen.
coffeescript does not help me write javascript. Coffeescript is for people who prefer ruby/python syntax and who just never got the C style syntax of javascript. It has less to do with 'helping people' write javascript and more to do with making ruby programmers comfortable with their syntax preference. because it compiles to javascript does not in any way make it appropriate to post in r/javascript. It is like saying if someone tacked-on a perl syntax to javascript and then started posting to r/javascript about how beautiful their 'made up language' is compared to ugly javascript. same thing with coffeescript, and it is quite annoying to people interested in reading r/javascript for javascript. tl;dr: having a preference for ruby style syntax really has nothing to do with making anyone a better javascript programmer.
Don't use the t-word in the same sentence as the word layout... It sounds like you have a lot of catching up to do when it comes to front-end development. First you need to get a firm grasp on css, check out this tutorial http://www.subcide.com/articles/creating-a-css-layout-from-scratch/P2/ Then the easiest way to get your javascript functionality in place is probably jQuery, poke around and see if you can find some plugins that does what you want. Here's a good starting point for jQuery: http://www.noupe.com/tutorial/51-best-of-jquery-tutorials-and-examples.html read up on .load and .animate once you feel you've got a good grasp of the library. Good luck
This is a myth. I've coded in enforced semicolon languages, and in javascript where it doesn't matter, I've built huge codebases with both, and enforced semicolon always leads to unnecessary wastes of time - if you forget one, and recompile it breaks, and then you have to go back and fix it and then recompile - no matter how little time this might take, it adds up in time and frustration, not to mention the time it takes having to comply with enforcing the semicolon while you code. Thank Eich that javascript doesn't enforce semicolons. It's bothersome and really one of the less useful beliefs in javascript programming; that you must always use semicolons. I've never once had a single problem in 15 years coding javascript that was caused by the omission of a semicolon in javascript code that wasn't due to a typo when writing a for-next loop. not one time. Enforcing semicolons at the end of a line as a terminator isn't helping anyone really. The interpreter doesn't care, it doesn't make code any more or less readable, but when it is enforced, forgetting one causes friction and wasted time. It may come down to your coding style and how you format your code, but in my experience, having to add a colon at the end of anything and having that rule be enforced by the compiler is counterproductive. There are lots of myths in javascript, because it isn't the easiest language to master with all it's quirks (every language has quirks). But because someone got comfortable using enforced semicolons in another language does not mean that it should be a best-practice in javascript. Same goes for variable typing, those in favor of strong typing got very used to it and javascript's dynamic typing vexes them somehow, so because they don't understand javascript this is one reason it gets put down a lot by this particular group of programmers. tl;dr: I've never read about any solid, conclusive evidence that leaving out semicolons in javascript is going to hurt the code, but I do have direct experience that enforcing semicolons definitely leads to wasted time. 
They tried to write classes back into JavaScript... really?
This looks exactly like the sort of terribly truncated coding style that gives perl such a bad wrap. Nesting multiple for loops and conditionals into a single line is not generally 'elegant'. A wall of code in that style is just about unreadable.
https://github.com/madrobby/vapor.js
I should have known you were a redditor Noel! Awesome.
This won't work in future browsers and does not work in IE9.
Working in FF4 and Chrome 11(Dev Channel). Link?
Can you supply a source for that? as far as I was aware, that's just the way the language is, not something that is browser specific. Regexes don't just work like functions, they *are* functions (eg. typeof /regex/ == 'function')
Whitespace, motherfucker. Use it.
April Fools.
All I said is that mixing the two styles is bad. If you prefer no-semicolon, go for it. If you prefer all-semicolon, go for it. But don't switch every 2 lines just because you can.
... what? Edit: If you're trying to get google to see the site better this wont work, all reddit links are `nofollow`
Those damned standards getting in the way of proper Microsoft ass-kissing.
Just wanted google to directorize the site which it did in 5minutes, was awesome.
doesn't matter if you switch every two lines. doesn't matter at all except to style fetishists.
This isn't what reddit is supposed to be used for, and you're an asshole.
I can't believe I didn't know this.
This is a bug, not a trick. Mozilla implemented a feature in SpiderMonkey that allowed calls like this to regex objects as though they were functions. Since mozilla added this feature, they of course had to treat a regexp object like a function (ability to use the invocation operator) thus having to add the *call* property to the regexp object. According to ECMAScript standars the call property should be limited to functions only. The *typeof* operator checks a single property (the *call* property) to determine if the object is a function. Eventually JavaScriptCore, the js engine for webkit and safari, copied this feature. Chrome implemented it too. Souce: Obcena, Mark. *Pro JavaScript with MooTools*
This is a bug in the language. ECMAScript standards say the *call* property (which typeof uses to check if an object is a function) should be limited to functions only. The bug was originally implemented by SpiderMonkey and copied into JavaScriptCore (webkit and safari). Chrome implemented it too.
[Where's Walden?: JavaScript change in Firefox 5 (*not* 4), and in other browsers: regular expressions can’t be called like functions](http://whereswalden.com/2011/03/06/javascript-change-in-firefox-5-not-4-and-in-other-browsers-regular-expressions-cant-be-called-like-functions/) has the details of its planned removal from future versions of Firefox. 
Really liking some of the recent articles out of readwritehack.
I know LoC isn't the best measure (I mean, minified it's only 4 lines!) but it's just to indicate the lightweightedness. It's 2.1k minified, one single file. I hope you find it useful :) edit: now it's 1.7k minified, thanks for the pull request! edit: 1.5k, I removed the bringtofront plugin and added zIndex as an optional parameter, defaulting to 9000.
good work. :)
Actually, it's "[[Call]] attribute" not "call property". The former one is an internal object attribute, inaccessible to user code in standard way. The latter one is accessible to user code, and is usually inherited from `Function.prototype`.
See "callable regexp" in http://kangax.github.com/es5-compat-table/non-standard/
Wait. How can you blame it for not supporting browsers that don't support canvas in the first place?
Do you really need the bringtofront plugin? Iterating over every single element is quite a big task, especially in IE on any site of reasonable size. Otherwise pretty nice!
well, how else to ensure the shadow and dialog don't have other elements on top of them? Just set a massive z-index and hope for the best? Have zIndex as a setting with a default of 9000 and if people need to increase it they can pass it in as an option? That might be a better way of doing it actually.... edit: code updated. now defaults to zIndex of 9000, or you can pass in a specific zIndex if you need to. Thanks, that was a very constructive comment :)
Yeah, unfortunately setting the z-index very high is really the best way to do it. And you have to be careful, I've seen ads use such a high z-index that it will break IE if you add even one more. So in those cases, that plugin would break the page.
folks in the know shouldn't be encouraging n00bs (sorry, OP) to use == or inline handlers.
the [demo](http://www.puremango.co.uk/jQuery-liteDialog/demo.html) page is quite hideous. Since the demo divs aren't even links, I didn't even think to click on them. Add a little css plz :P
The internet has plenty of tutorials on how to write JS in many ways. There are hundreds of books on the subject... instead he ended up here asking a specific question looking for a specific answer. If he ever chooses to pursue learning proper JS, I'm confident he will be able to find the appropriate channels. :) Sometimes its nice to just help people without lecturing them or feeding them a bunch of knowledge they never bothered to pursue on their own.
Is gst gaming its own posts? Someone posted this article couple hours before gst (with no other articles in between), and gst has 20 points? There's a point when gst is helping and when gst is driving submissions away, and this is one of them.
As if Reddit needs more shitty replies...
a few weeks late, but still pertinent: http://jsperf.com/innie-v-outtie
actually someone (you?) added a pull request with a prettier demo page, which I've just merged, so take another look :D
Yes, I post the same article 7-8 hours before this post (with direct url) . Surprisingly I had 0 votes and post had 16 votes.
Is it me or do you find the quality of these sitepoint articles is usually very variable, and-or sometimes not really that good?
It's not just sitepoint articles. Anything dealing with seems JavaScript vary wildly in quality.
i've never heard of this and do any other languages have this operator? 
http://en.wikipedia.org/wiki/Comma_operator
I find: a? b : b to be clearer.
I C++ (,) is programmable just like (+).
What a terrible idea. When would you ever want to hide a statement inside a comparison when you can just give it it's own line? Putting the loop body inside a for statement isn't elegant. It's clever for clever's sake; more importantly, it makes it much harder for the person after you, who hasn't read this blog post, to comprehend your code.
It is like posting Chicken-scheme and Eiffel articles to /r/C_Programming.
And even that is horrible.
They are a throwback to the past, where one site wanted to have all the reference on everything " web development " but generally failed as it was general whimsy and mini projects of the writers.. w3schools = sitepoint = bad I'm finding MDC is the best source really. This blog has good quality articles recently: http://javascriptweblog.wordpress.com/ and perhaps 10 others, I have not time to find in my Delicious :D
I think it's of limited usefulness, but there are a couple of cases where it's handy. First, there are a few cases where adding a quick-and-dirty logging statement would be easier when using the operator. Second, if your for loop has multiple increment statements, it seems clearer to have them all inside of the loop definition (prev = node, node = node.next). I think a few other languages provide the ability to do this as part of the for loop syntax. It's not something I'd want to use all over the place, and the article certainly seems to overuse it, but I don't think it's completely useless, either.
Looking for feedback! Be nice, pretty please; I'm no JavaScript expert. :)
Why do you consider it to be horrible? I find it to be common place in a lot of code I read. Maybe you're referring to the case where people use it for a ridiculous amount of lines? But I find this extremely clear and far from horrible: a = 3; (a === 3) ? true : false; I usually use it to handle function calls instead of if/else. Just curious.
(function (b) { return 1&lt;!--b; }(1));
it's not the ternary operator that's horrible, of course, but the fact that here it's used to return the same value regardless of the evaluated target, only to take advantage of the evaluation's side-effect.
Doesn't a === 3 already evaluate to a boolean?
It's great if you want to make your code less readable without making it any faster or smaller. If you want to evaluate two expressions, use two expressions. This way it's easy to see that there are two expressions and that you evaluate both of them. Whoa. Mind-bending. `var x = 5, y = 3;` is ok though. So is `for (i = 0, len = a.length; i &lt; len; i++) {...}`, but you shouldn't try anything "smarter" (air quotes) than that. Future-you will hate you and so will the rest of the team.
I use it in Java fairly often.
This isn't as concise, but I think: (e0, e1, ..., eN-1, eN) being equivalent to: (function () { e0; e1; ... eN-1; return eN; })(); also explains the comma operator pretty well. With the one caveat that not all statements (which would be otherwise valid in the function) are valid expressions that can be used with the comma operator.. mainly `var` statements. For example, neither: (var x = 1) or (var x = 2, someFunction()) are valid.
It can be very useful (and sometimes clearer) when you need something to be evaluated at the end of every pass through a **for** loop, without exception: for (i=0; i&lt;100; x++, i++) { } Without using a comma you're stuck with the unpleasant task of either a. remembering to increment x at every possible point where you might loop, or b. structuring the internals of the loop so you always fall out at the same point just so you can increment x in one spot. As you can imagine, either way is pretty easy to screw up. Other than that, I've never found a particularly good reason to use the comma operator in the 20 or so years I've known about it (it exists in many languages, not just JavaScript)... it's pretty much a one-trick pony, but the one trick that it does is fantastic when you need it.
I'm pretty sure this operator was taken straight out from C, like most other javascript operators. Imho, the only legitimate case to use this is when a comma separator would almost work, but doesn't ( as in `for (a=1,b=2;a&lt;b;a++){}` rather than `for (var a=1,b=2;a&lt;b;a++){}`. First statement uses an operator, second statement a separator. ) Anything else is just obfuscating code, and the few bytes salvaged by using it are unlikely to be worth the loss in code maintainability. 
This example seems pretty weak to me. Why wouldn't x just be i? Even if x is a fixed difference from i you could just replace all references to x with that fixed difference(ie. if x == i + offset then just use i + offset instead of x).
1. x isn't initialized in the loop... which tells me it's set outside the loop to some arbitrary, unknown value 2. Feel free to replace x++ with any other expression that modifies x 3. Even assuming x is always (i + *ofs*), there are three damn good reasons to NOT replace all references to x with (i+*ofs*): a. it's far more error prone to type (i+*ofs*) every time you need it (especially when taking precedence into account); b. cluttered expressions are far less readable than simple ones; and finally c. it's almost certainly slower as most tight loops would need to calculate (i+*ofs*) several times per pass rather than just once. But whatever, the beauty of the comma is that you don't *have* to use it any more than you're forced to use the ? : operator.
Oh, yea that makes more sense. I misread, sorry.
Yup, it was just an example. Like I said I usually use it like: (a === 3) ? funcA() : funcB(); Sorry silly example :)
^U
How about `for(var i=0, l=foo.length;i&lt;l;i++)`?
Even though it happens to be the fastest.
[Looks great on my screen](http://i.imgur.com/S2VoB.png). &amp;#3232;\_&amp;#3232; 