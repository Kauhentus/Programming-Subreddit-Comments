How the hell does that work?
Once you get some mastery of a programming language, I imagine these are the only things that tickle the brain anymore. I‚Äôm a huge fan (spectator) of code golf: https://codegolf.stackexchange.com
The hedonic treadmill is brutal
Do you live under a rock
Wtf did you say?
Oh I'm so fucking sorry dude. ;-P
Burn it with fire!
i think this error is caused by `import` keyword. though fixing that would still fail due because you did not include react script
create a mono repo. lerna is popular.
Docz is pretty nice, and because it uses *.mdx instead of *.md, it works with react components too.
This advice is not wrong in isolation, for example where you or your colleagues write all the code and trust each other implicitly. The problem is that when every two-line problem is factored out into its own module and stuck in a public package then every non-trivial module ends up depending on tens or *hundreds* of third-party modules written by unknown developers of unknown trustworthiness and the attack surface of your code becomes fractal as any random asshat can [left-pad](https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/) you, bury [bitcoin-wallet stealing](https://www.trendmicro.com/vinfo/se/security/news/cybercrime-and-digital-threats/hacker-infects-node-js-package-to-steal-from-bitcoin-wallets) code, or just quietly include a crypto-coin miner in an update. Small modules are good code-factoring, but increase reliance on trusting your dependencies.
are you using imports and js modules without bundling them through webpack / parcel / etc first? if thats the case you should read up on the whole modular js topic again. *while there is an option to use ES6 modules in the browser, this is not the way to do it.*
Gitbook works nicely. If you use gitlab, you can keep your documentation as .md files in a git repo, and have gitlab's CI automatically build and publish the website whenever you push a commit Here's an example of my one: https://benjymous.gitlab.io/PlatformDocker.html (Config is dead easy, you just branch their example project, and that comes with all the build stuff built in)
async function* foo() { if (0); else do return yield delete void await this instanceof typeof new class extends async function () {} {}; while (0) for(;;){} } Added `for` at the end Also - this is stupid 
Alright, this gets a little lengthy (probably) and just warning you. The reason I love Javascript starts with the asynchronous model, which I foam over the mouth with! Here is a list of simple reasons I love Javascript! 1. NO COMPILING NEEDED 2. asynchronous 3. Write once, run anywhere 4. Easy desktop apps (NW.js or electronjs (I prefer electronjs)) 5. Create mobile apps using wrappers such as Ionic 6. Easily power a low CPU &amp; RAM usage network/server 7. simple NPM module for nodejs instead of tracking down a script on the internet (such as not going to lets say [https://freecppmodules.com](https://freecppmodules.com) (not real url) and downloading a header file) 8. High level language - so no garbage collection is required or dealing with fixing binaries (fuck binary files)! I've also made a few videogames that I'm going to or already have posted to the steam store using said Electron! The language is highly expandable and has a relatively simple syntax (unlike C, C++, Java, Ruby (ruby is actually super simple), brainfuck (lol), php, or other languages!
What is, the moon?
In chrome you can take memory snapshots which might give you what you need
With those two options. Any request that succeeds will resolve a response with a status code that you can use. Including 504 for example. It can still reject with an error in the case of dns errors, socket timeouts etc. Where the request doesn't complete. In these cases I don't think you have great options for handling it nicely. The error doesn't get a consistent code or message to deal with AFAIK 
It depends.. You can 'cheat' and go for something like Unity which can be exported to a web game. You should learn the basics of the actual Javascript language first but if you already know another language then you'll be fine to jump right in (in my opinion). Phaser is an excellent JS library for games but it does do *a lot* of handholding which may be ideal if you don't have a js background already. Disclaimer: I only do gamedev as a hobby
[https://vuepress.vuejs.org/](https://vuepress.vuejs.org/) works pretty well
There is no defined way in which garbage collection occurs. It's left up to the different web browsers to be implemented in whatever way they like.
I am using docusaurus and it feel great
Thanks for your input. I appreciate it :) 
Hey, man! What kinda game are you planning on building? I ask because it would help me answer the question :)
React clone? Seems more like polymer/lit html inspired.
&gt; Small modules are good code-factoring, but increase reliance on trusting your dependencies. On the surface it may appear as good code-factoring, but in practice it is the opposite. I'm looking at the `node_modules` for my non-trivial Electron app and I see can 4 different query string parsers, 2 random bytes modules, 2 promise libraries and there is probably more duplication to be found. That is without counting the duplicate functionality in node's built in libraries. Small modules in the NPM ecosystem bring in a heap of duplication because every small module pulls in its own set of unique dependencies. npmjs.com itself is largely responsible for this situation. This ecosystem has a major curation problem which is exacerbated by this micro-library culture. In other words, finding stuff on npmjs.com is terrible, and made even harder by the 1000s of tiny low quality trash modules which have been thrown into it. 
293 [commits](https://github.com/TheHappyKoala/Harmony-of-the-Spheres/commits/master) and counting, and thanks! It's been a great learning project and I would recommend everybody to try to put more time into one particular project that is close to their hearts as you do learn a lot about code reuse and how to write code that scales well, not to mention all the mistakes you make and how much there is to learn from them :D! 
Maybe Gatsby? Supports Markdown with plugins: [https://www.gatsbyjs.org/plugins/?=markdown](https://www.gatsbyjs.org/plugins/?=markdown)
Not the best (I doubt there is such) but a very good one is buttercms, give it a try.
You can use a library, but I am not sure why you are immediately excluding the idea of not using a library at all. When you build a large system like a CMS your going to be doing a ton of custom code regardless of whether you chose to use a CMS or not.
Choose readability all the time. Turn to performance when you encounter a problem about it, otherwise just ignore it.
I‚Äôm using ember for my web app, and I hate that it simply requires babel, there‚Äôs no opt out. My app has a very narrow target which all supports all the latest features, but I still have to spend hours fixing issues introduced by babel thinking it‚Äôs smarter than it really is.
1 + (+console.log())
ReadTheDoc template, very clear and useful for Rest API documentations Supports markdown syntax and ReStructured Text as well
If that special character counts as a line terminator, does that still count as a one line? 
If it comes from honeypot you can bet I won't lose my time looking this
Or split your code up so you can employ a more readable approach and still keep performance high. Helper functions could solve a lot of readability in these examples.
i started learning cms system. but confused with different framework and libraries in JavaScript. 
OMG I had so many feels watching this üòç It's mad to think that It has been 8 years and Ember is still going strong üéâ
I've recently release Guidemaker 1.0 and it has been powering the Ember documentation for the last year or so: https://github.com/empress/guidemaker It's pretty cool now that it has a Netlify one-click button to get started in less than a minute üéâ
I find that to be a bit of an issue, some of the frameworks are so divorced from javascript that knowing one does not mean you know the other. So I didn't use any of them, needed to get shit done and didn't have 3 yrs to spend on learning a framework inside and out especially with frameworks coming out every other week. I started with getting the webserver setup. Once I had that I opened up a data channel using the socket.io channel. Then I wrote a function called client_logic and another called server_logic. Client logic had stuff like, client_logic.get, client_logic.count, client_logic.save etc. Then you would feed in a type like client_logic.get({type:'box'}) and it would get you all the objects in the database where were box's etc. To do that it had server_logic which would listen for the calls, perform the operations, then send back the data. Just that logic set between server and client sped things up by an order of magnitude. I also forgo using bootstrap and write my own CSS. So I could setup some super simplistic rules for how lists of things, menus of things, and editing things should look (usually those are the core 3 display elements). I wrote another function called client_display which I can call to display the 3 common core display types I listed above.
All I can hear reading this article is "premature optimization".
I'm not quite sure I fully understand your question, but assuming you just want to sum the largest and smallest numbers in the array you can just do: const sum = points[0] + points[points.length - 1]; This gets the first item in the array, and adds to it the last item in the array.
Yep - this is the only way I know how to do this. Take snapshots at different points in time and what's gone between snapshots has been garbage collected.
I believe you are talking about [faceted search](https://en.wikipedia.org/wiki/Faceted_search).
Indeed. That's the conclusion, if is not an issue, just go for readable and maintainable code. Also, if there are minor performance issues, tools like lodash work well. (Is faster in many cases than ES6). Another way is to implement your complex performant logic in a helper function wrapped in readable methods/classes. 
Yep, they could indeed! But sometimes, when looking for extreme performance, we need just to write down a custom algorithm for doing something, and that hardly is readable or nice. Is just performant. In the examples I also tried to uglify a bit... Guilty!
Hi! Thanks for the feedback, but, could you explain please?
I think there's a difference between some where it is likely that the engines will never be able to optimise the gap away, and others, where we could expect the gap to close. For example, (and as a nonexpert), I expect the gap between Object.assign and spread parameters to close fairly soon.
Good point. Probably the code will evolve into more readable and the engines into more performant, to compensate. Will be interesting to watch! :)
Performance + comment each'ish line? 
I never said that we should make all our assumptions based only on optimization, actually, on the contrary, I'm saying that if the application runs well, then continue with readable code. Turn the alarms and make changes only if the performance is actually at risk, if the app is slow or having performance issues. The idea is to: deisgn &gt; code &gt; test &gt; optimize. At least, that's how I like to do it. I prefer to have a readable code and some crucial part rewritten for optimization (maybe wrapped for readability), rather than an unreadable rocket application. :)
Hey! Could you explain please? :)
[removed]
I meant by explaining what the code does on the lines that look too complex. By doing this a new person will learn better about JS + you get the performance.
Hi /u/user20199, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/xsaleem, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hackertomobile, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Masterms1601, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jsloverr, this post was removed. Low-effort content such as listicles, memes, clickbait, etc. is prohibited. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It was a nightmare in Flash too. 
Hi /u/teddmagwell, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/loks15, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/python_roma, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MegaMadness, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
What makes this component better than https://github.com/nkbt/react-copy-to-clipboard for example? What's the browser support like?
why comma?
Yes and no. Comments are future lies. Code will be updated, comments will be forgotten. And then people will read a comment that doesn't match the actual code. Also, the code should be readable, almost like readable english (that's for another incoming article). The goal is to write as readable code as possible, and use comments only in extreme situations and not for explaining the code, but for explaining why something was done. 
I think it's a variable whose name is a whitespace character. It's set to `1++`. There's probably a zero width whitespace like paragraph separator before `console` to trigger ASI. Then it's a typical `log` call being passed a reference to the whitespace-named variable. ``` x = 1++ console.log(x) ```
&gt;https://medium.freecodecamp.org/writing-scalable-architecture-for-node-js-2b58e0523d7f Thanks. Just did it.
Writing backend logic for any project these days is pretty easy, thanks to full stack JavaScript. This is especially so with the introduction of dozens of frameworks for both client side and server side implementation...
Never read anything so true before in my life lol
Are there actually any mods here? This domain steals content from other sites, you have been told several times already.
Worth keeping in mind that the efficiency of the newer constructs will improve over time, perhaps the results of those perf tests will change too.
Is it just out of curiosity or do you think you might be having memory leaks?
You choose what you want to hear I suppose. The article is not suggesting to give up ES6 syntax, just pointing out what the alternatives should the use of certain ES6 syntax cause problems. In other words, this has nothing to do with premature opimisation and everything to do with pointing out HOW you can optimise if NEEDED.
My system starts out with a core module, about 70kb. If you want [a desktop](https://linuxontheweb.org/desk.os), that is about 150kb. Otherwise, you will be using [the CLI](https://linuxontheweb.org/shell.os), which uses a Terminal application (80kb), and that pulls in the shell interpreter+execution engine (180kb). Then, there are various graphical applications for the desktop, which can be anywhere from trivial little things that are hundreds of bytes long, up to about 100kb in the most extreme case (though that amount can be dramatically reduced in most cases by simple whitespace removal). If you are in the CLI, everything is built around the concept of command libraries. For example, the command to invoke my JS version of vim can be imported into the current execution context like this: `$ import fs` . This imports a bunch of commands from the 'fs' (filesystem) command library.
For sure! Engines will adapt to newer JS versions. I think that engines will evolve into ensuring 'new javascript' performance and javascript will evolve into readability and ease of coding
...and only do that when you notice a need for that performance. I see pre-optimization all of the time...and usually its at the cost of readability or maintainability. In the small number of cases where speed becomes a problem, then splitting that code off into a separate module/function/etc is the route to take. But even then...wait until you need it.
Its weird to me that it's a react component. 
Not mentioned is the cost associated with script size, both network transfer and parse/compile time. In our case, ES5 transpiling produces ~10% larger bundles. I am not sure exactly where this fits in the overall optimization picture, but it's certainly not negligible.
God damnit I read "sort" without reading the actual task and then wondered what the fuck is this `map(n =&gt; n + 1)` all about... aaaaaaanyway, I'm all for middlegrounds, however only while avoiding premature optimisations.
&gt; On the surface it may appear as good code-factoring, but in practice it is the opposite. I'm looking at the node_modules for my non-trivial Electron app and I see can 4 different query string parsers, 2 random bytes modules, 2 promise libraries and there is probably more duplication to be found. I agree, but I think we're using subtly different definitions. Small, single-purpose models are *definitely* good code-factoring, as *within a single project or organisation* they allow you to pull in everything (and *only* the parts) you need. As you note, however, the problem is that as you need to start relying on modules and projects from *outside* your local team, project or development group that ability to pull in a different micro-modules for every random requirement leads to massive redundancy, duplication and inconsistency. I would argue this is a consequence of *the way we use* small modules rather than a problem with small modules itself (if there was wide agreement in the ecosystem as to what the "best in class" libraries were for given areas it would be a lot less of an issue, for example)... but you may consider this an inherent, unavoidable problem with small modules and I confess I have some sympathy for that viewpoint, too.
One of the aspects the author missed is that trying to do better than the "compiler" is a losing battle over time. You might find a clever fast way to do something, but the people writing the RTE will optimise for the most common use cases to the point that eventually the readable code will be on par or better than your custom algorithm and now you or worse, someone else, is stuck maintaining that code and it's not even serving it's purpose. 
I use babel daily and have for years now...what problems are you encountering? I have had very few complaints over my time with it.
We probably have to accept that React is like the new jQuery... instead of writing 10 lines of code yourself, simply install an npm module with 25MB of dependencies for the job.
This is the idea behind abstracting logic out to a service in angular. Wait, do people still use angular 1? I‚Äôm getting old.. or my codebase is.
100% agree. That's why changing readability for performance should be done only when there are performance issues, and it should be done with minimal impact in readability and maintainability, for example, using lodash (has faster methods than ES6), or wrapping complex performant code into readable wrappers.
It really didn't like the asm.js code (had to research how to exclude certain files), and it complained about the spread operator until I found a way to enable support for that. I also couldn't get it to not replace the spread operator by `Object.assign` for the longest time. I've fixed all of these issues so far, but it's taken time I could have used for my actual project instead.
If you want to know whether or not a *specific object* is garbage collected and you're okay with a node-specific solution, you can use [node-weak](https://github.com/TooTallNate/node-weak). It supplies you with a callback that is called when your object is garbage collected: ``` var obj = {}; var ref = weak(obj, function () { console.log('"obj" has been garbage collected!'); }); obj = null; global.gc(); ```
Certainly not, and should be considered for big projects. Nice catch!
I like your solution, but I don't know how to get it to work for mobile devices. Could you help me?
I agree on the fact that JS engines will get faster and faster. But if NOW you have to solve a performance issue, you need to know the costs of using a ES6 reduce methods against creating your own custom method. Of course, when creating such high performant solutions, you may wrap them in readable methods, and also maybe add a comment explaining why this was created.
Honestly those boil down to knowing the tool you are using and in what context/requirements your app has. The spread operator was/is not finalized and requires a flag to turn on, and asm.js is outside the context of babel...and so requires some special configuration. Every tool you use requires knowledge of how to use it.
Good points. I like that the post reminds people of always remembering that there are different ways to solve problems and that there's likely never one right way. I think that's extra important to remember in this industry since there can be very real restrictions to what features you can use, how much code you can reasonably load, etc. Teaching devs to use the right tool for the job is pretty important.
The API of this thing is weird as well. For example why a \`component\` prop instead of using \`children\`. \`cb\` acronym is also not well named. And it has deps that should be in devDeps.
Thanks a lot! Feedback is hugely important! :D
You are right. There is an important distinction to be made here. Factoring out code is indeed a good practice. The irony here is small modules let you DRY for your code, but at run time the effect is the opposite. Multiple implementations of the same thing. The DRY principle isn't applied at npmjs.com. I would love a "Best of NPMjs" site/catalog which just chose the best modules and organised them into coherent virtual libraries of related functionality. After that, npmjs.com should just purge any module which hasn't been downloaded in the last 3 months. 
Yea, the end of your article makes that clear. u/ogurson probably just didn't make it that far.
Well, as I said in the initial post, I don't blame babel for this, I blame JavaScript developers sprinkling babel into everything by default.
Amaze balls
Their name and address are a good start, just in case you have to send some legal letters when they don't pay up. Why is that in this sub?
Amalls. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Amaze balls'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
Design patterns are just known solutions to problems that come up frequently. It‚Äôs very likely you‚Äôve used or seen many in use while at work but just didn‚Äôt have a name directly attached to them. A study of design patterns and the problems they solve help you to create better code because they solve problems you are very likely to encounter.
&gt; I blame JavaScript developers ...I don't even know what you are saying here. You are blaming the ECMA standards group for creating new standards and then babel implementing them in a sane manner (via flags for non-finalized features)? Or are you blaming developers for not implementing features outside of spec (like ASM.js)? It feels like you just want to complain.
In the first perf test (maybe others as well) 1) I got wildly different results. The two tests were within 2% of each other. Very different from 75%. And 2), jsperf has a "setup" section. Your array and functions should be defined there.
ogurson is probably meaning optimising things that aren't (yet) in critical loops that might take a while to run with the sort of data you expect to present to them. Worrying too much about performance before you have an actual problem can lead to over-thinking, bike-shedding, and other cognitive time-wasting patterns. We've all been guilty of this from time-to-time! If you don't need the performance *right now*, stay as readable as possible and worry about performance later. In most cases you'll never need the performance in your code, because other bottlenecks (DOM manipulation, network access, reflow/redraw, the user) will dwarf your code's time impact so the time spent optimising isn't productive (unless you learn something valuable, as learning is productivity too, you may not need the tricks now but playing with them and keeping them at the back of your mind for future use may be valuable). This is particularly true when you are working around deficiencies in the browser/compiler/other rather than your own algorithm: you might find that by the time your application is dealing with data large enough to need clever optimisations that the compiler or standard library may have evolved to do the same or better without you lifting a finger. Or the affected bit of code might have long since been replaced by that point. Also, optimising for deficiencies in the environment might be detrimental in other environment - an optimisation for V8 (Chrome/Node) might have the opposite effect on Edge/Firefox/other. I was always told these valuable rules of thumb: First rule of optimisation: *don't*. Second rule of optimisation (for advanced coders only): don't *yet*. (the third &amp; forth, and probably the next ten, rules are simply "test, test and test again" - test a variety of data-sets and environments *before* you optimise, at each step along the way, and again after)
I really like how the styled-components inspired use of a `styled` tag has become a de-facto standard for CSS-in-JS React libraries (and using props for variation). Emotion does it too now. Anyone used linaria and styled-components and can compare them? The theming capabilities of linaria look interesting, like how you can directly use css variables.
Theoretically, no, because you are basically asking something akin to the "halting problem", just replace `halt()` with your function. Of course assuming people avoid certain patterns, you can do what you mentioned (AST walk, coverage analysis) to get what you want. 
Hi /u/theantb, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt;You are blaming the ECMA standards group for creating new standards I wouldn't call those JavaScript developers. &gt; and then babel implementing them in a sane manner (via flags for non-finalized features)? As I said, I don't blame babel. &gt;Or are you blaming developers for not implementing features outside of spec (like ASM.js)? ASM.js is not outside of spec, the basic premise is that it's backwards-compatible JavaScript. Anyways, to me it feels like babel is the new jQuery, and for the same reasons. JQuery was created because every browser implemented some features differently, and it provided an abstraction on top of that. JQuery was part of every framework, you didn't have a choice. A few years ago, people started to get rid of it because it's bloat and not really necessary unless you're trying to support ancient browsers. Now the whole process repeats again with babel.
&gt; ASM.js is not outside of spec, the basic premise is that it's backwards-compatible JavaScript. It is not standard JS. It is outside of spec. &gt; Anyways, to me it feels like babel is the new jQuery, and for the same reasons. They are not remotely similar....other than the fact that a lot of projects depend on them. Babel is written to do FAR more than solve inconsistencies in platforms and will survive despite refactoring and improvements in javascript. Babel is not bloat or unnecessary in the same sense at all that jQuery is and was. Like I said, you are complaining because you don't like something...and you don't like something for poor reasons IMO.
Anyone have a real world comparison with Emotion? Felt like I had just made a decision when this hit 1.0 at the end of last week...
Reading this made me a bit sad because I enjoy using ES6. I never once thought that using High-Order Components would reduce the performance.
The ability to read code is way more valuable than the ability to write code. Readability in 10 seconds is way different from readability in 10 minutes. Large, complex code with the best comments ever still can't be quickly consumed, and cognitive load is the currency of developers. When optimization is appropriate, then go down that path, but many times 1ms vs 100ms may just not matter or be perceptible.
Just curiosity
Interresting, thank you
If I click a dot, it shows some text associated with the dot. But then I scroll down to another section, the highlighted dot changes, but the text associated with the new dot does not appear (the originally clicked dot's text still appears). Android, Chrome
That's not really how garbage collection works. It's a black box that you're not supposed to have any introspection into. If it's just for curiosity you might find some specific solution for one JS runtime but in real production code you should never need to worry about GC or how/when it does its thing.
Thanks for sharing your article. You have a very reasonable stance on this topic. My own approach is: write for readability, wait for slow performance, then look for ways to improve. In my own experience things like caching calculated data structures or increasing indexing in databases are the most powerful ways to improve performance, but as you point out, there are many places to look.
k
Don't worry! The cases where you'll have to sacrifice ES6 readable and enjoyable syntax are pretty rare. And as people are saying, engines will keep up and run each time faster adapting to JavaScript's evolving trend. You can easily keep enjoying ES6 like I do, unless you have to face an edge case were performance is critical, in that case, you can always try other 'readable' solutions such as: - Using lodash (its methods are faster than ES6's) - Wrapping your unreadable performant code into readable handlers, methods, classes, etc.
Patterns you might have used (outside of any frameworks): // factory pattern let div = document.createElement('div') // flyweight pattern let obj = {} obj.toString() // iterator pattern let arr = [1, 2, 3] for (let elem of arr) ... // observer pattern div.addEventListener('click', function () { ... }) // singleton pattern let selection = document.getSelection()
&gt;Using lodash (its methods are faster than ES6's) Are they faster because they use ES5 solutions like in the post?
Indeed. That's what I try to explain in my article towards the end. Optimizing should come when performance issues are encountered, not beforehand. (Keeping in mind always that we're coding following best practices). And, if in need of a performance boost, explore which solutions may be the best ones, taking into consideration scalability, maintainability and time to invest. This considered, is good to know what we're dealing with. If I have to process a 10MB object, I know that I don't want to use all the ES6 goodies for this, but rather create my own implementations in the most readable way as possible. 
&gt; write for readability, wait for slow performance, then look for ways to improve. This is biblical. Is the synthesis of what I tried to explain. Thanks a lot! 
I personally prefer the MUI Styles way of using object literals. Easier to parse, easier to use with tooling. Of course, MUI Styles also supports tagged strings, but I don't use them.
No. We find reduce also in ES2015, and is the same implementation, so, same lack of performance compared to a for loop. Lodash is faster because they implemented the reduce functionality with *while* or *for* loops and they wrap it in a method called reduce. Check this for more information on how lodash works underneath: https://github.com/lodash/lodash/blob/4.17.11/lodash.js#L9708
Note: Part of the article was removed. It was challenging reader to implement this query (and earlier a query with WITH block) using Knex.js without using Knex.js raw methods in return for USD 30 reward. While it is possible to write the latter query using Knex.js, it is admittedly not the best use case for Knex.js.
Please show me where we have been told several times already? Spoiler: we don't read every comment
Completely agree.
Also, why didn't report this post if it's so egregious?
It amazes me my project has barely been live for half a year and css modules are no longer the standard. That being said, I'm sticking with css modules, I prefer to have regular css files for that time when people realise that maybe css in js wasn‚Äôt that good of an idea and the next hot thing comes around.
Standard according to who? Also CSS modules have been around since 2015, so even if they had fallen out of favor by now - that's hardly a short fad.
So there are several things going on here. First, the code is in Script mode and loose mode (the opposite of strict mode). This allows assignments to globals without a const/let/var modifier (i.e. `a = 1`). Second, there's a variable whose name is a Hangul Choseong Filler character (`\u115f`), which is an invisible character that is a valid Identifier. It appears once at the beginning, once before the `++` and once between the parentheses. There's also Paragraph Separators, once after the `1` and once after the `++`. If we replace the invisible characters with equivalents, we would get this code: a=1 a++ console.log(a) Which prints 2
I need to get familiarised with the new ecma functions, I feel the old one more comfortable than the new one. Just started working on new functions, obviously will get used to it. But at the same time, browser compatibility is also an issue. New functions are not working in old browser versions. 
The rotation on that balloon is a nice touch :) does that happen in real life balloon outings? I noticed a rocket launch from NASA the other day also rotating during ascent and it makes me wonder if that is a designed effect to counter a different force or if the rotation is part of ascent to begin with.
Wow, it's almost like putting them where they belong in the first place! What a wonder!
Webpacks‚Äôs plug-in does something similar, mini-css-extract-plugin. But instead of writing CSS into the JS file you can import them, the plugin ends up concatting all those css files. I‚Äôm not sure of the details off my head, but you can can specify how class names are renamed, for example hashing them so that we avoid naming collisions, or to obstruct readability. 
Psst - regular ole css works just fine still, and will for the next decade.
I can see how the clickbaity title could cause confusion 
This made me wonder if JS engines will ever be able to optimize `x = x.map(someFunction)` into something in-place to avoid memory allocations, if it can determine that `someFunction` does not mutate `x`. I mean, I realize that it's simple to implement for yourself as: Array.prototype.mapInPlace = function(fn) { for(let i = 0; i &lt; this.length; i++) this[i] = fn(this[i], i, this); return this; } ... but I don't like messing with the prototypes of built-in objects. Plus, that's my own code - a built-in optimization could make *existing* code of other people faster. Anyway, this inspired me to actually benchmark that `mapInPlace` function to see if we can learn a bit more here: https://run.perf.zone/view/map-vs-for-loop-vs-mapInPlace-10000-items-1549991921935 https://imgur.com/a/wCxDlfL On my machine, the `mapInPlace` version is as fast as the for-loop in Firefox, and _sometimes_ as fast in Chrome. To be precise, the latter only is as fast if the passed function is declared earlier as a top-level function. Presumably V8 doesn't inline the closures quite as eagerly **in this benchmark**. I cannot stress the latter enough: you cannot really extrapolate the heuristics that the JITs of various browsers use from this isolated case. Still, that's an interesting performance gain. And when Chrome doesn't inline the closure `mapInPlace` is still a bit faster, but not quite as much. This suggests that for this basic example the call overhead is already a bigger bottleneck than the memory allocation. Not sure how that would work out for more complicated functions.
Hi /u/Huzkie_, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SecretAgentZeroNine, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chawki_, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Thanks I'll add it
Correct, although it actually runs when I copy-paste it into the console (using firefox).
I use [Typestyle](https://github.com/typestyle/typestyle) because of its awesome Typescript support on each css rule. I don't think that level of type safety is possible on the styled-components declaration unfortunately :(
The difference here is that instead of writing css and 'importing' it in your js files, you're writing the css using javascript and it is getting extracted into static css files. &amp;#x200B;
6 months? css-in-js has been around for years. JSS for example has been around since 2014.
One tiny nick pick detail: In the article, you say to pick performance over readability &gt;When the project is meant to be scalable When you're designing a project to be scalable, the decisions regarding this should be at the level of the architecture and not at the level of small functional pieces of code. I would say go for readability in this case, and if your performance tests show that the piece of code is causing issues, then refactor it to be more performant. That's just one small thing in a good article though. This is the internet. People will complain about everything. The OP probably just read the title of the article. 
Hi /u/dxmsyrup, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I don't think the hangul character is the issue. When I copy and paste in Chrome, this is what I get: const x = ` ·Öü=1·Öü++console.log(·Öü) //prints 2`; for (const c of x) console.log(c, c.codePointAt(0).toString(16)) 20 ·Öü 115f = 3d 1 31 ·Öü 115f + 2b + 2b c 63 o 6f n 6e s 73 o 6f l 6c e 65 . 2e l 6c o 6f g 67 ( 28 ·Öü 115f ) 29 20 / 2f / 2f p 70 r 72 i 69 n 6e t 74 s 73 20 2 32 You can see that the initial space and the `u115f`s are there, but the `\u2029`s are not.
Maybe the article [here](http://humbleposts.com/backend-developer-learning-path-and-skills) can give you some insight. 
My average day is something like this: Show up at work. Get some coffee. Check if there are any emails I need to read. Check if there are any PRs to review or ticket comments I need to address. Work on various feature/bug tickets on whatever projects we're working on at the moment. There might be a meeting or two where we discuss current or upcoming projects. The work is about what I expected. Sometimes I get to work on stuff that's interesting. Sometimes I just work on CRUD endpoints and UI components. Most of our projects are written with React/Node, so most of my days are spent writing javascript (I'm hoping to start building new projects in Typescript though). The most frustrating part is working on poorly maintained legacy software. As much as I love coding, being neck deep in a 10+ year old PHP or Objective-C codebase makes me want to throw myself out a window. The best part is being paid to learn and solve problems. I can't speak for all companies, but where I work they don't mind paying me for time spent learning about new technologies or tools that we will need in current/upcoming projects. The benefits and chill company culture are both great perks too. Most of the things I wish I knew earlier are technical. I wish I had taken the time to learn more about all sorts of topics that I still don't consider myself an expert on: SQL, Git, Agile, web security, semantic HTML, GraphQL, Android/iOS development.
[`window.open`](https://window.open)`(url, '_blank');` seems to work, I've tried it myself in console and it worked Source: [https://stackoverflow.com/a/13682407/8746088](https://stackoverflow.com/a/13682407/8746088)
An editable collection of rarely used JavaScript features. The goal is to make you play with occasional horror on your face.
You have the window.open method on javascript (sorry I can't say more, I'm on my phone) 
_I think_ reduce is actually faster than for, with larger amounts of data
Here is something that works when you run the code in the console. document.addEventListener('click', () =&gt; { const elem = document.createElement('a'); elem.href = 'https://this-page-intentionally-left-blank.org/'; elem.target = '_blank'; elem.click(); }); If I remember correctly this won't work in one of the major browsers (I forget) and instead you have to append the element to the body and then remove it after the click.
Use compiler
Open Chrome dev tools, run performance profiling, then go to Call Tree, find the function that you are interested in and see if it has Major GC or Minor GC inside it. Or go to Bottom Up, select Major GC or Minor GC and see if you can find functions that you are interested in. 
Honestly, I thought so, as well. If it involves the same Big O Notation, then there's no difference. I'm not sure how much the new *reduce* has improved in this instance.
they might be easier to use, but if you want to protect your users, then you want to specify no inline styling in your content security policy, and use css files from trusted domains to avoid crosssite scripting
6 months is enough time for *another* new JavaScript framework to come out that tries to fill some niche role that you feel helps workflow, but inevitably is just another framework you have around
they might be easier to use, but if you want to protect your users, then you want to specify no inline styling in your content security policy, and use css files from trusted domains to avoid crosssite scripting
I always believe that CSS belongs in css files, not in JS.
Sure. First thing, just to make it clear, I read the whole article before commenting. Second - others explained it pretty well. I know my post sound ignorant but I'm just a bit bitter about general state of JS community. Especially on the topic of performance there are a lot of articles about irrelevant microoptimisations. What is even worse it often leads to bad decisions, more complex code etc. To sum up - I got nothing against you. It's just... Every time someone talks about performance it turns into discussion over meaningless microopts. I guess I just prefer this topic to never be touched. 
Huh, weird. Yesterday when I tried cross-posting, I definitely saw a UI message saying that cross-posting was disabled. But maybe what it *meant* to say was that I wasn't subscribed to this sub yet?
Fair enough! A practical implementation could stop after some number of steps, and declare to the user that there is no connection found between functions A and B in fewer than X steps.
This could be useful; a suggestion in the original post might end up being a more practical way of seeing a chain of callees: [https://www.reddit.com/r/typescript/comments/apmhsx/how\_to\_find\_whether\_one\_function\_indirectly\_calls/eg9uxu8](https://www.reddit.com/r/typescript/comments/apmhsx/how_to_find_whether_one_function_indirectly_calls/eg9uxu8)
I will try this. It will help me to see what is being done in other places. Thank you
I am very much that type of person anyway. I try things over and over again until I either get it right or throw it. I like this idea.
I have become pretty good at basic code like html and css. I have not really used tried to write anything myself that is javasript. I tried to write my own contact form once and it was a flop. I am able to change things in another javascript but that is about it. I kind of understand how it works.
I took a look at this link. It looks pretty good. I saved it and will try it out. Thank you.
&lt;i onclick=‚ÄúWindow.location.href=‚Äòhttp://Disney.com‚Äô‚Äù&gt;link&lt;/i&gt; that navigates away without creating a new tab/window
It's a jarring moment when it happens 
Is my post still active? I was receiving good information from this. I am a new webdesigner trying to figure things out. I am sorry if I am in the wrong place. I am new to reddit. I did add this link to my reddit stuff.
Disclaimer: I'm a core contributor of styled-components. One of the biggest strengths of the two libraries and others in the ecosystem are that the APIs are converging, like you're saying. We've spent most of our time to get the styled-components API just right and will go the extra mile to make the right decision. That amounts to "linaria/styled" feeling just about the same with just a couple of differences when you're looking for the "extended" API of composing styled components and combine blocks of CSS and the attrs API. So at the end of the day most of the difference comes down to the trade-offs and limitations that linaria (currently, but not indefinitely) has. Say you care about static or prerendered sites (e.g. Gatsby) then you'll find that Linaria might be a better choice for your static output.
This one is quite a limitation :( &gt;A limitation of using CSS variables for dynamic values is that they only work for property values, and you can‚Äôt place them arbitrarily like you can with styled-components. For example, the following code won‚Äôt be valid: ``` @media(min-width: ${props =&gt; props.minWidth}) { font-size: 16px; } ```
Yeah, it's still a pretty new feature, so it's probably got some roughly edges.
People can still comment on it, but it was removed from this subreddit (it won't show up on /r/javascript anymore).
Hi /u/brainhack3r, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Nice
Transpile your code
Some sanity at last!
OK, don't worry, don't want to start a fight. But these spammers have been doing it for a while in all the JS related subs, always the same pattern (months old bots with only a few posts, posts to)
&gt; Also, why didn't you report this post if it's so egregious? I did, but I don't know how it works, maybe if I report it as 'spam' it goes to the reddit admins and not the subs mods...? :shrug: 
We can only catch the ones we're aware of, if they're not reported, or if they have a new account, there's nothing we can do.
This looks interesting...how would a CSS preprocessor like scss fit into the toolchain, since it says "optionally use any css preprocessor"..
* cubes, not open office * concise proven stack, not a pile of trending shit, or a vague long list of everything * salary, not hourly
Thanks! Check out using the touch equivalents of mouse events (e.g. touchmove instead of mousemove). You could also look at pointer events which should cover both.
I thought the browser prevented client side from accessing a visitors copy/paste buffer for security reasons?
Are you separating your concerns, or just your languages? 
Ahh..remember one of my first times actually having to deal with a memory leak. FU BitmapData!
This is a very sweet demo!
With your approach, you don't know what state/type the user will be in (null or object). If you instead initialize to an empty object, then you always know the type and there are no surprises there. You can do a one-line check to see if it's empty or not if you know that something like id or name will always be there if the object is populated (sounds like that's the case for you). And you won't have errors if you try to read a property that's not there, which could happen if someone didn't know that you're initializing things to null. Lastly, in your example. You could have the condition where the user exists, but the name property is missing. In that case, your v-if would pass, but you wouldn't display anything. If you checked instead on the property of username (which you'd have to do the object initialization to not error), then you would be guaranteed to display the user.username value. Just some thoughts.
If you're using webpack, just add sass-loader like you'd normally do and configure it to process .linaria.css files
function (options = {}) { ... }
Oh..yeah that makes sense. I had thought for some reason it was the other way around, and you could use scss within the component's style blocks. That's what I get for being stoned at work :) &amp;#x200B; &amp;#x200B;
obj.forEach((key)=&gt;{ }); will walk you through the object by its primary keys. If you just want everything in .answers, why not just say let answers=obj.answers; then deal with all the answers specifically?
Placing your component's styles in a sibling document to your component still adheres to module principles and shouldn't be considered a dumb "separation of languages". Stuffing everything into one file creates mile-long documents, and causes issues/limitations with transpilation and syntax highlighting. I always considered CSS Modules superior to CIJ solutions.
(Psst. Hey, I agree) Windows is an office productivity OS, and unless you are developing in .NET, it is the worst of the big 3 to develop on. My recent new job uses Windows 10, and it's not a big gripe, but I miss Linux. Git comes from Linux, the command line tools we use so much in frontend come from Linux, Apache/Nginx run on Linux. Windows 10 is liquid insanity. Linux still comes in discrete releases. Ahh, so nice.
Yeah ‚Äî I will never understand why CSS Modules didn't end up as the standard tool. It fits perfectly into the existing preprocessor ecosystem *and* has all primary features CIJ solutions offers.
Heh, I am always super curious about developers forced to use win10 and .net for basic javascript text editing. It must drive them completely bonkers because then they have a compiler giving them errors that the web browser doesn't have a problem with and vice versa. I wonder why such trust and faith continues to be placed in microsoft by management? Like, why do our governments, hospitals, education system etc continue to use an expensive and poor tool instead of saving money and using a stable excellent tool? It's like watching monkeys try to build a house by hammering together pool noodles while they use a stack of bricks and boards as a toilet.
They have different meanings. In your example you're creating an optional type, i.e. it can either be null or an object. Your junior is creating a required type and using {} as the default value. A good rule of thumb is to use an optional type if your business logic requires you to do something when the value isn't supplied. If you don't need to do anything special, go ahead and use a reasonable default. Since you only want to make an API call if the user is missing, you'd probably prefer `initialize(user: ?user) over initialize(user: user = {})`. If you're going to call the server anyway, use a reasonable default so that you can still render the view while the page is loading. And for the record, your default can probably be more reasonable than {}, so try to use { username: undefined } or something like that. But honestly the root of the problem is that you aren't tailoring your types to the nature of your application correctly. If you're loading the user over a network, your type should look a little more like `{ lastUpdated: ?timestamp, error: boolean, user: { username: ?string } }`, then you check lastUpdated to see if the user should be updated. The reality is that your application isn't actually dealing with a User type, it's dealing with a UserThatMayNotHaveBeenLoadedFromTheServerYetOrTheAPICallMightHaveFailedOrBecomeOutdated and that requires a different solution than what you provided.
I'm not totally certain what you mean by that, but I do utilise CSS modules and not just one large stylesheet for everything. I understand the advantage of modular design and I definitely like it. I just think that styling in JS is rather clunky; not to mention any inline-style solution is absolutely terrible. 
Well, I believe part of your problem is that your using frameworks and probably bootstrap to begin with. This has caused you to fail to realize that your relying on the framework for providing the CSS instead of writing it yourself. Basically CSS3 came out with the 'flex' tag, flex allows your elements to fill an area until they bump up against the next element. Most frameworks do not utilize this instead they just stamp something to particular sizes set it and forget it. Framework CSS is truly garbage and to get around it, you'll need to write your own CSS.
Does this all really matter if we can just transpile the code? I would say make sure the code is as readable as possible and then just transpile to do performance optimizations. 
Do you enjoy writing quotes around every property and weird selector strings? This at least is my reasoning why I like regular CSS. Although I like vues approach to styling the most.
Thanks for the feedback! And I agree with what you say. What I meant by scalable is: Imagine you write a piece of code that handles a user base, so a user array. And you're mutating it and doing operations on it. As long as the application is small, the user base is small, that array will be small, say 10k. But as soon as the project scales up big time, user base increases a lot, and now you're handling an array of 300k. Those operations are taking way too much time now, even risking timeouts... That was the use case I had in mind. For an average project, I agree, first go for readability, and as soon as we detect performance issues, we'll address them in due time.
Awesome! 
I would favor the null. Even if I'm not using TypeScript, I still like to be cognizant of types. That is, user objects are expected to be a certain _shape_ or interface. If an empty object violates the expected shape/interface of user objects, then it should never be assigned to something that's expected to hold a user object.
I understand, and I agree with what you say, sometimes it just gets out of hand the whole performance issue. That's why I try to pass the following message: "Go with readability until you encounter performance problems, when you do, this is what may be slowing you". Probably I didn't explain myself in the best way. I'm myself always prioritizing readability in my code, I know it has a cost, but is insignificant for the time being.
I've use this structure before for enterprise applications to good success. If you're making the repo public it might be a bit tougher for some third party to digest but for internal usability I found it a neat and easy solution. Building the core in a separate repo and importing the modules was too much of a pain in the ass to maintain and switch between quickly especially in a medium-large team of developers. Do report back what you ended up doing though, I'm always interested in how other people solve similar problems!
I loved this. Thanks a lot! I do think that JS engines are memoizing functions, so for example, when calling sort(a-b), the engine memoizes that and the next time is run there is almost no cost. But to be honest, I don't have an in depth knowledge about engines.
I've tested this in www.codewars.com. For many achievements you have to be able to run your function in like 3-5 ms, not more than that. And it should run at that speed for 100, 1k, 100k or even 10M arrays... doesn't matter, same speed. In those scenarios, when I used *reduce*, the impact on my code's performance was like an anvil. Just turtle speed. But of course, we're talking of extreme edge cases, hardly we're going to find a case where we need that amount of performance with JS. Whoever is looking for those rocket speeds will be using other languages such as Go, C++, etc.
F
Agree with making the code as readable as possible. But take care with transpiling, when we write in ES6, it gets transpiled to ES2015. Meaning that arrow functions will be converted *(for example)*, but not *reduce*, *map*, etc. Those already exist in ES2015 and will cost the same.
Just adding to what @kor0na and @iAmMaybe said. Once you get used to ES6 functions, you'll flee on your coding. Literally fly. The code is so much readable, neat, intuitive, elegant... Just amazing. And of course if you're concerned about compatibility, with Webpack or Babel or any other similar tool, you can write in ES6 and transpile and serve it in ES2015 for compatibility.
If your CSS rules are a mile long in one file, you might want to consider breaking your components apart to be more atomic (i.e. make each sub class its own, reusable component). For example, I'm a fan of this JSS plugin that's reminiscent of styled-components but uses a javascript object syntax instead: [https://cssinjs.org/styled-jss?v=v2.2.3](https://cssinjs.org/styled-jss?v=v2.2.3) Instead of creating individual reusable *css classes*, consider creating individual reusable *components*. Doing this helps to promote reusability and will make each of your components smaller in size and more atomic. It's even possible to drive the state of the component's styling using props, and a separate css class will be generated with the diff of each permutation. For example, if I have a Button component and I want it to display the "primary" color when a form is valid, I can simply pass that value in as a prop, rather than having to manage entirely separate css rules / state myself. Another benefit our team found is that it enforces isolation of css rules per component, since the generated css class name is intentionally randomized and then minified in production. It might seem counter-intuitive if you're used to traditional css, but the benefits of it mean that the component's styling will always be predictable, as it's not possible for some other component's styling to do something like: \`.MyWidget &gt; .Button { ... } \` to override the styling of the Button component in an unpredictable manner (which is unmaintainable at scale). There are several CSS naming conventions people have created to address this problem which are now no longer necessary, such as BEM, SUITCSS, SMACSS, etc.
&gt; Stuffing everything into one file creates mile-long documents, and causes issues/limitations with transpilation and syntax highlighting. I use styled-components all day every day...this is not how you write your modules. If you do this in anything, you are doing it wrong. Writing things using CSS in js libs doesn't mean you lose the ability to split your styling up. And there are several ways to go about spliting it up...arguably more choices than SASS/LESS/etc give you.
[removed]
&gt;Do you even scope, tho?
Right, and html belongs in html files ? 
Css modules is just making up for the lackluster support of shadow dom. It‚Äôs not something that should become a standard rather something to be ultimatly replaced by one
it is really easy to just not use the new stuff, and continue what you were using before. besides the big stuff like Angular/React/Vlue, there really is no need to chase the framework dragon the end user can't tell the difference
Styled components uses regular CSS syntax 
Done thanks 
i would go with `null` as the default. just be aware that &gt; Due to the limitations of modern JavaScript (and the abandonment of Object.observe), Vue cannot detect property addition or deletion. https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats
I thought one of the benefits of css in js is so you can code split your css instead of loading everything at once? 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I think you want your regexp to be just `/[√ú√ñ√ò√º√∂√∏]/g`
`[...string].map(c=&gt;letters[c]||c).join('')` if you avoid the regexp, the code can be easier to extend for multi letter matches.
Why couldn't you just use the `onCopy` callback? ``` &lt;div onCopy={e =&gt; cb(e)} /&gt; ```
Webpack can code split normal CSS just fine. It works the same for Linaria.
It's very rare that someone needs to actually dynamically generate media queries. You usually have a fixed list of media queries, in which case you can toggle some class names based on prop to apply desired one. It's a bit more work for sure, but for such an uncommon task, it's acceptable imo.
If this is the actual use case, consider: ``` string.normalize('NFD').replace(/\p{M}/ug, '') ``` Normalization Form D decomposes any characters into base letters with combining marks. The `\p{M}` uses the new unicode property escapes to match all the combining marks and remove them.
You were so preoccupied with whether or not you could, that you didn't stop to think about whether or not you should. Cool project, but cannot see myself using it.
There is plenty of profiling built into chrome, probably firefox too. Not sure about node, but I do monitor total memory usage on my node instances and haven't had reason to dig deeper, knock on wood.
I've been avoiding null as much as possible and opting instead for undefined. It's worked well. References to keys that aren't set on objects return undefined, makes checks very predictable whether it's an empty object or an object you've "nulled" keys to be undefined. That said empty objects should be rare (unless you're making a dictionary of arbitrary keys) which makes things like checking object.keys length irrelevant
I wish people would stop writing new libraries for me to learn! In all seriousness, I think that you, as the developer of a new js lib, are supposed to tell me.
To be fair it's a long way to get that far. I also stopped halfway through to prevent straining my eyes from all the rolling.
I‚Äôm still using just plain ol css and managing all my css global vars with a global stylesheet. Seems to be working fine. 
https://github.com/braintree/credit-card-type
I would love it if there was something like sketchup3d online. I used to absolutely be in love with google sketchup then they forgot about it, sold it, and now some douchebags run it and they locked it all up behind paywalls. There are some 3d stuff online, and while it must have been a hell of a lot of work to create them they are still unfortunately not up to snuff.
[removed]
Wait, sketchup ran on JavaScript? 
This guy JavaScripts.
In that repo's list of alternatives there's a decent looking package by Photopea, and it's considerably smalled than the Seikichi one: https://github.com/photopea/UTIF.js But I would say if you're loading TIFFs in the browser, the size of the JS library is probably not of much concern...
[It's built-in üòâ](https://code.visualstudio.com/docs/editor/userdefinedsnippets)
Why discourage curiosity and learning?
The creator of CSS modules made Styled Components. So it kinda makes sense to check that out as well if you're shopping for libraries in 2018.
Nice demo
I think you may be thinking about frameworks. I believe that libraries don't have learning curves, just use cases. I'd love to know of a library that you find hard to learn.
I'm saying that Vue and React are built on JS, so you should give it credit for allowing that.
Thanks, I know this. But it does work if the initial value is null and you reassign it like in my example. It wouldn‚Äôt work if it were an empty object and then I‚Äôd try to fill it with new properties.
Yeah, this is not correct at all, because type of null indeed is an object. And if you have an API and always knows what it returns, you don‚Äôt have to check for said properties if you already have the user. That‚Äôs literally what I‚Äôm saying in my example - I know username will be there when I already have a user. I would check for optional properties, but not required ones. If your backend is properly written &amp; tested, you should be able to rely on it.
if you dont mind using a library, try lodash.deburr [https://lodash.com/docs/#deburr](https://lodash.com/docs/#deburr) or you know, check out the code in github and learn how he did it
Oh no, I mean that a javascript implementation which could be accessible in the browser would be fantastic. At present there are 3d sites you can go and do 3d design, save etc but most are paywalled, and the tools/interfaces are still lacking polish.
Good post
I see! 
Hi /u/thepotatochronicles, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/beefyjon, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/solkimicreb, this post was removed. Low-effort content such as listicles, memes, clickbait, etc. is prohibited. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
As far as a client side API with a link to the server side, probably Logic would be a good one. As in, logic.save, logic.get, logic.count, logic.template etc. Allowing the client side to simply say logic.get({type:'user'}) to pull up all users etc. I find myself writing that one repeatedly.
This looks cool, thanks! I'm getting into both Node and TS right now. Also appreciate the commented out options in the tsconfig file. 
Is there a specific reason you need to use tifs over other image formats? 
Uh yes, unless you're using a framework which is based on a component-type system like React or Vue. But anyway, the main point is that throwing everything into a JS file can really become quite messy and isn't really intended for the web. 
It's a nice feature! I had a play to see how you would implement a solution to /u/beefyjon's problem: "Create wrapped comment": { "scope": "javascript,typescript", "prefix": "com", "body": ["// ${1/(.)/=/g} //", "// $1 //", "// ${1/(.)/=/g} //", "$0"], "description": "Create a comment block wrapped in special formatting" } This creates 3 comment lines (after typing "com" and pressing tab) with mirrored inputs, then when you press tab again it replaces all the characters on the top and bottom lines with "=". I'm not sure if there's a better way to do this. Doesn't seem to let you use functions just regex. 
Nit: "ES6 spread syntax" is actually an ES2018 feature. It is in fact `Object.assign` that's ES6.
Being able to interop CSS and js at runtime is a pretty huge feature of CSS in js that doesn't exist in CSS modules.
I'm honestly surprised that there are no desktop cms applications that work like a CMS to the end user, but behind the scenes compile all the content into static html files which can be hosted for pennies a month.
Huh? What's not correct at all? I wasn't talking about `typeof` checks. Maybe I should have just said "state" and not "state/type," but for the record... Yes, `typeof null` yields the string '`object'`, however `null` itself is of it's own special type. It's a primitive type in JavaScript. And null does behave differently than other objects (I'll touch on that farther down). Regardless, that's not the point I was trying to address/make; sorry for any confusion there. ... &gt; if you have an API and always knows what it returns, you don‚Äôt have to check for said properties if you already have the user I mean sort of, but api calls fail for all kinds of reasons. And data can come back unexpectedly as well. You cannot always trust an api nor the data that it will return. ... I'm saying if you do data() { return { user: {} }; } then that sets up the initial expectation for anyone reading the code. If you just set it to `null`, then other devs don't know what to expect later and have to track it down in the code to see when the null value can actually be treated like an object. Setting it as an empty object to start with makes it clear that you're working with an object. And I believe it's more robust than setting to null because if some dev tries to read a property on an empty object, then they get back `undefined`. On the other hand, if they try to read a property on `null`, an exception is thrown and the program crashes. I suppose you could argue that's a good thing in the vein of "fail early, fail often," but I don't know.. Then, with the empty object, you can treat the other part nearly identically if (!this.user.id) this.user = await this.fetchUser() And, as I alluded to before, if you use `null` and want to check any properties on `user`, then you have to always check to see if `user` is truthy first. It's if (user) { id = user.id; } vs just id = user.id; You're actually writing more code and more checks just because your program is kinda brittle. Lastly, in your template, you can simply do &lt;strong v-if="user.username"&gt;{{ user.username }}&lt;/strong&gt; That makes it so if the username (or whatever property you might have in the future) isn't there, then the whole thing doesn't render. You'll have less unexpected results doing it that way. ... Like I said, just some thoughts. 
I am very comfortable with css, but at the volume I do, it's just impractical. Sass or Less is what gets me through.
This stuff has all been figured out, I might suggest just leveraging existing functions to do this. I dunno if this will tell you what store a store credit card is from, but it should confirm that it's not a valid card. Stripe has a js lib you can use with lots of client side validations. [https://stripe.com/docs/stripe-js/v2](https://stripe.com/docs/stripe-js/v2)
I just want to develop a page which can shows images uploaded by customers. Sometimes, customers choose to upload TIF images, so I have no choice. I did feel this library is useful. [https://github.com/photopea/UTIF.js](https://github.com/photopea/UTIF.js) However, it requires me to put this: &lt;body onload="UTIF.replaceIMG()"&gt; It works by replacing the img tag with the canvas tag. If the page has already displayed some images and the tag is img, how do I use UTIF to replace the tag after loading? UTIF works in the onload phase. If my page has been loaded, could I UTIF to replace the img tag? Thanks 
This is something I‚Äôm also recently getting very interested in. I‚Äôve been spending more and more time working with three and I absolutely love it. It mostly seems to get attention for gaming applications but I think the creative side could use more love. Personally I‚Äôve been trying to experiment with ways of helping novice users more easily create simple low-poly environments in a way that‚Äôs more intuitive than powerful full-featured things like Blender. However I do feel compelled to point out that the three.js editor is a thing: https://threejs.org/editor/ It‚Äôs not Blender but it‚Äôs also pretty good at showing possibilities. Plus it‚Äôs not like sketchup was blender, and that was part of its strength.
CSRF and XSS protection in a lightweight API framework that is currently under development!! ...wait...is that a pelican or a plumbing diagram for a high feluting toilet...? 
Ho shite, I didn't know about that! I'm going to go check it out, lol, I might be able to incorporate it into something I'm thinking about creating. Thankee sai! 
I like it! Good work 
I am sorry, I only knew the typestyle approach really. Yes that looks kinda how I would want it, but I have to study that more to come to a conclusion.
You obviously haven't seen muzzleapp.com
&gt; string.normalize Be aware that this only supported within ECMAScript 2015 engines.
That's a job for wasm. JS would simply choke. 
Hi, thanks for answering. We're showing a spinner if we have no data, so we actually had an empty object `{}`, checked with lodash's isEmpty function and based on the result we displayed a Spinner, which seems meh to me. Why check an empty object with lodash, if you actually don't need it and aren't displaying anything anyway unless you have the data? Yeah, you might be right with the second paragraph, I'm not sure I understood it correctly, because I don't know that syntax you're using, but you're saying we should basically have an empty model (or a model with some dummy data) until we load the API data? That could be okay, but as I said, we're actually expecting it empty upon page visit and showing a spinner if it's not there, it's just how we say it's empty? Colleagues say `{}`, I say `null`.
This is not really about expected options, I said I can imagine using `{}` when I don't know what properties it will have and we will add them dynamically, but not in this case where we exactly know what will be there and we either have it, or we don't have anything.
Do you mean you define a variable with the initial value `undefined`?
If you used this syntax in Vue.js, like setting user initially as `{}` and then fetched the result, it wouldn't update the data because you're not setting the initial value correctly. In Vue.js's case, the properties you set when you init the object are the ones that will become reactive, so if you set user as `{}` you would have to use "hacks" (bad practices) like Vue.$set to make the new properties reactive. You would either have to set it as `null` for it to be reactive, or set the whole model like user: { username: '', email: '', age: 0 } However, this is where my example render `&lt;strong v-if="user"&gt;{{ user.username }}&lt;/strong&gt;` would fail (or rather be empty), because I actually have just an empty string as a username. I either choose to render this for nothing, or I add another property to check like so `&lt;strong v-if="user &amp;&amp; user.username"&gt;{{ user.username }}&lt;/strong&gt;` which costs me performance. Also &gt;api calls fail for all kinds of reasons They do indeed, but if I have an error, I catch it and I don't replace user's data and keep it at `null`?
I feel obligated to point out that's not a blur. And `document.getElementsByTagName("BODY")` lol What year was this written? I'm getting flashbacks of all uppercase html tags from 2005 
fyi, after getting my head around it a bit more, I did find this and was able to modify/delete one of my own posts with minimal coding. So far this is the best library I've found as the raw api is a bit terse. https://github.com/not-an-aardvark/snoowrap but I'm sure there are a lot of gotchas yet to come. 
Most of the time, if you try to optimize something, 10x or 100x should be the first goal. That's hardly ever the type of loop you use, rather a bigger algorithmic problem. But then again, sometimes it is.. measure twice, and optimize once, as they say ;-) 
did you take a look at https://threejs.org/examples/ ? It actually achieves amazingly powerful levels of rendering in real time. I did not see it choke in any way and seems to be doing some serious stuff.
&gt; If you used this syntax in Vue.js, like setting user initially as {} and then fetched the result, it wouldn't update the data because you're not setting the initial value correctly. In Vue.js's case, the properties you set when you init the object are the ones that will become reactive, so if you set user as {} you would have to use "hacks" (bad practices) like Vue.$set to make the new properties reactive. Bro, what? https://codepen.io/anon/pen/MLBaEW?editors=1010
Not really, they‚Äôre fundamentally different approaches to solve the same problem, and I vastly prefer CSS Modules after working with various CIJ implementations. Thanks for the suggestion though!
I never said my CSS is a mile long. I said that component documents end up being a mile long when you stuff CSS into them. I appreciate you taking the time to write all of this out for me, but all of these features, perks and approaches are *the exact same* using CSS Modules. Except, in my opinion, better, since you can use the entire existing pre/postprocessing ecosystem and isolate the styles to documents with their native extension and syntax, and automatically get one external stylesheet generated for you.
&gt;I use styled-components all day every day...this is not how you write your modules. If you do this in anything, you are doing it wrong. I replied to the person above me who does, I didn't say *I* do it like that. &gt;It honestly sounds like you haven't given them a fair shake. Have you given CSS Modules a fair chance? They have the exact same benefits, and more. The fact that this very thread reaches the top of the subreddit when CSS Modules has done the exact same thing for some five years is interesting to say the least.
Sorry, the last time I tried it it didn't work. They might have updated it since. I know it because this is why I stopped initializing objects with the `{}` value.
&gt; I do think that JS engines are memoizing functions, so for example, when calling sort(a-b), the engine memoizes that and the next time is run there is almost no cost. Well, sort of, but that is only part of the story. First of all, top-level functions and closures are treated slightly differently here. The latter tend to be more "dynamic" than the former and harder to optimize. And when I say dynamic, I mean that they are polymorphic. For optimal performance you want to aim for having your functions monomorphic a.k.a. type stable. This basically means always calling the function with the same type and number of of arguments - every time you call a function with a different "type" for the argument (say `foo(5)` vs `foo("five")` vs `foo({a: "Alice", b: "Bob"}, Math.PI)` vs `foo({x: 10, y: 10}, "bar")`), the engine has to: - detect that the function is called with a different signature (V8 calls them "hidden classes"), which takes time - undo whatever optimizations it applied to the function ("deopt" the function), - recompile a new one, - decide if it is worth it to apply full optimizations to it IIRC, V8 will only deopt a function so many times before it bails out and use a version that is not fully optimized. This is one reason why refactoring can improve performance in JavaScript: functions provide "boundaries" for optimization/deoptimization. So if we have: function foo(x) { if (typeof x === "string") bar(x); else if (typeof x === "number") baz(x); } Maybe `foo` ends up permanently deoptimized because `x` is called with many different call signatures (not just string and number). If so, `bar` and `baz` are still always called with the same type of argument, making it more likely that they are at the very least *not* deoptimized, and possibly optimized if called very often.
Do you have any good use-cases for this? All I've seen in practice is various `useMargin` or `hasSomething` to either switch between two values or exchange two property blocks. Both of which is the exact same thing as creating the class names in advance, except you do it at runtime (longer execution time, no caching‚Ä¶), and move the conditional logic from the JS to the CSS. The one redeeming feature of CIJ, in my opinion, is theming. It can absolutely be done with CSS Modules as well (depending on your build step and preprocessor usage), but CIJ has the potential to be cleaner about it. That said, CSS custom properties are a much better fit for theming anyway.
If you run `tsc init` it will automatically create a tsconfig file with comments for you, so it's not something the op wrote himself.
There are, somewhat. Look at Netlify. It has these features from an online editor, edits the files, compiles them again and stores them in static storage. It's similar to making a GitHub pages static site.
 string.replace(/[√ú√ñ√ò√º√∂√∏]/g, letter =&gt; letters[letter] ) That didn't work
Introducing a new document root just to stop the bleeding is a terrible fix, though. That‚Äôs like painting the sick trees leaves green. That "standard" has to be accepted by a wider community, which is rightfully rejecting it.
That worked, thanks!
Hey, feel free to ask more precision about the debugger! Cheers.
RemindMe 2 days
You can use jquery for that
Knowing some clients they will contact you a few days in and ask if you can make the screen brighter. Fully knowing they haven‚Äôt paid yet. 
Waw! Thanks a lot! I'll have this in mind from now on. Maybe writing 'expensive' functions in such a way that V8 can optimize them... Thanks!
&gt; I'm honestly surprised that there are no desktop cms applications that work like a web CMS to the end user, but behind the scenes compile all the content (couple dozen or hundred pages) into static html files and upload them to S3 to be hosted for pennies a month. Lol. Swap out S3 with FTP and you just described Macromedia Dreamweaver circa 2004.
In Sweden Wednesday is called "mini-saturday". So here is a sneak launch of my WebdriverIO new reporter. It makes videos from failed tests, and then renders videos to human speed. Check it out and give some feedback! Repo with included demo: https://github.com/presidenten/wdio-video-reporter Even though videos end up in your ouputDir, its also nice with a flashy report. The reporter integrates seamlessly with Allure reporter Example allure report with videos on failed tests: https://presidenten.github.io/wdio-video-reporter/
I know you already got some answers but... I wonder... When you say "no luck", or "it didn't work", what exactly do you mean? I ask because I just opened the console, copied and pasted your code _as is_ and it did indeed work. It returned `"boker"`, so I'm a bit confused as to what your problem is.
How long till release? I feel like bootstrap 4 just came out
You could still build the pages to be dynamic and vary by some database entries, then run through all the permutations and output html files. So a single design creates a couple hundred static html pages. Why not since storage is extremely cheap compared to compute resources.
dynamic media query? why? That seems like a huge smell to me.
I tested on nodejs, and not sure if ‚Äòreplace‚Äô is a new method. So maybe that was the reason. I am on mobile, but later will check again.
I hope it will be compatible with IE11, not because I love IE so much, but in gov sector it's still a requirement. And IE actually has more market share than Firefox so technically IE is #2 most used desktop browser last I checked...
I am pretty sure the limit is about the dynamic prop value - Not about the media query part. &amp;#x200B; If I understand correctly, they are saying that all CSS JS-properties become CSS variables and because of that they must be known in compile time and can't be truly dynamic.
I am pretty sure the limit is about the dynamic prop value - Not about the media query part. &amp;#x200B; If I understand correctly, they are saying that all CSS JS-properties become CSS variables and because of that they must be known in compile time and can't be truly dynamic.
IE only has a 2% market share. Edge has 4%, so combined they are comparable to Firefox's 6%, but Edge is a different browser to IE.
No, `replace` is not new at all. Could it be that you expect the original `string` to be modified? Because if that's the problem, then, sure, it won't. `replace` returns a _new_ string, it does not modify the original. Other than that I still don't know what you mean by "it doesn't work".
Clearly you don't work in enterprise or government. In my world IE11 still holds 16% unfortunately. From memory it's Chrome, Safari, IE11, Firefox, Edge. 
I looked at [this](https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22deviceType%22%3A%7B%22%24in%22%3A%5B%22Desktop%2Flaptop%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222018-02%22%2C%22dateEnd%22%3A%222019-01%22%2C%22segments%22%3A%22-1000%22%7D) report. I don't know how representative it is, it's just the first thing google gave me when searching for browser market share.
I hope not. Let legacy frameworks handle legacy environments. &gt; And IE actually has more market share than Firefox so technically IE is #2 most used desktop browser last I checked... Checked where? StatCounter claims IE is third at 6% (and that's desktop only).
When you love functional programming so much that you think an expression should be a dense 5 lines long
Even microsoft considers IE a "compatibility solution" at this point and partially doesn't support it on it's own sites (broken layouts etc). Source: https://www.zdnet.com/article/microsoft-security-chief-ie-is-not-a-browser-so-stop-using-it-as-your-default/ Why not simply use the old Bootstrap for your old target browsers?
This package is regular CSS. As are styled components and emotion. It just happens that this CSS lives in the same file as your component.
Linaria is the best of both worlds IMHO. Static sheets with interop using CSS variables. There aren't a ton of use cases for this, but the ones that exist it's a LOT easier using CIJ. 
[console.trace();](https://developer.mozilla.org/en-US/docs/Web/API/Console/trace) might be of help for a relatively direct chain of calls to your function.
you never go full immutable.
Of course using the bootstrap version that supports the necessary browsers is a straight forward solution. &amp;#x200B; My own fear is that someone will pull an angular or w/e package or just pull "bootstrap" that defaults to BS5 into a project without realizing that it has no IE support. Recently had something similar with fontawesome between v4 and v5.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
It's not framework's responsibility to make 
But all addons/plugins/extensions/etc that use jQuery will still work fine, right? &amp;#x200B; &amp;#x200B;
Don't reinvent the wheel - the algorithms for cards include luhn algorithm for validating the number and checking the type (https://github.com/EDumdum/luhn#readme). Checking whether it's an Amazon non-visa for example isn't generally possible (not forever, at least) from a regex because as the link says, the list of those is updated regularly.
Concur, I find it quite alarming the number of people in the SME sector where I mainly operate who use Edge - because that's what came with the PC. Then again, I flat out refuse to have anything to do with IE11, but Edge is sort of OK
I'm not sure what you mean by "all CSS JS-properties become CSS variables". What are CSS-in-JS properties? The library converts function interpolations to CSS variables. &gt; they must be known in compile time and can't be truly dynamic The whole point of using CSS variables is to have dynamic prop based styled during runtime. They don't need to be known during compile time. For example, consider the following: ```js const mobileWidth = 480; const Button = styled.button` font-size: 14px; background-color: ${props =&gt; props.color}; @media(min-width: ${mobileWidth}px) { font-size: 16px; } `; ``` This produces something like: ```css .Button_t1ugh8t9 { font-size: 14px; background-color: var(--t1ugh8t9-0); } @media(min-width: 480px) { .Button_t1ugh8t9 { font-size: 16px; } } ``` Here static non-function interpolations (such as `mobileWidth`) are inlined to the CSS, whereas dynamic prop based interpolations (such as `props =&gt; props.color`) are replaced with CSS variables. Whenever `props.color` changes during runtime, the CSS variable's value will be updated.
This one really took off! Congrats with the 8.000+ stars on GitHub! &amp;#x200B; And thanks for the awesome note-taking app.
Why is it alarming? Edge isn't really bad, safari is actually worse than edge in html5 support.
&gt;Clearly you don't work in enterprise or government. In my world IE11 still holds 16% unfortunately. I do, and I'm aware that in our environment it's higher than 2%. But to imply that it's higher than Firefox generally is inaccurate
oh yess... thanks for informing me ...
https://github.com/twbs/bootstrap/pull/23586#issuecomment-324345404
What are talking about? My company all laptops are imaged with Windows 7 with IE11 as standard. They‚Äôre locked down so you can‚Äôt install another browser unless you raise an IT request for which the only alternative option is Chrome. For non-IT staff the Firefox usage rate is 0%. That‚Äôs over 100k employees. I‚Äôd imagine the IE usage rate which those staff is north of 80% they simply don‚Äôt care enough to request an alternative browser
&gt; My company all laptops are imaged with Windows 7 with IE11 as standard. They‚Äôre locked down so you can‚Äôt install another browser Okay, but I'm not on about enterprise companies specifically, and neither was u/romeozor, who I was replying to. The usage for [IE11 is just over 2%](https://caniuse.com/usage-table) - for him to imply that, globally, IE11 has a higher market share than Firefox, is misleading and untrue. I understand that in enterprise environments IE11 is the forerunner by far, but that simply doesn't carry across to non-enterprise.
Thank you man, this works. Sucks how it doesn't allow functions, maybe in a future version...
He was talking about the government sector, and the government sector is often worse than enterprise due to budget and terrible support contracts. I think I need to pull up the metrics, because either the government and enterprise where you live is weird, or you haven't actually seen metrics and are making assumptions based on global usage statistics which includes personal usage. 
I'd like to make fun of you for being a government agency and making such a giant obvious mis-step as using IE...then I realize your probably my government and it just makes me want to cry at all the stupid.
Hmm, agree probably wrong choice of words., and sure, edge isn't bad (although it's font rendering seems a bit off sometimes). I guess it's more that it shows up the number of people who when presented with a PC just take what they're given. 
so it will use vanilla js?
Not your government, sorry.
You can do this on recent builds of Windows 10 with the shortcut `Win + ;`. Typing a word after using that shortcut allows you to search the emojis. For the search term `insect` it suggests the following: üêõüêúüêùüêûüï∑ü¶ã Oh, snails and scorpions are not insects either!
It looks like another hipster framework with a clever name yet somehow still feels tired. I mean 'tell the story behind your code' is just marketing mumble speak, my god we aren't your average dip shits looking to buy a ticket to the next fyre festival. Trying to imbue emotionality via marketting and clever nick names reeks of having a money man in charge used to creating an image that often is just false. The features are the important part and what it can accomplish and bring to the table. From what I can see it will affect the way templates are done such that they incorporate javascript and HTML together in a hap hazard and ugly way that is counter-intuitive to how we currently do this, and brings no efficiency or ease of use to the mix. Its just trading one syntax style for another for no good reason than to pretend a tool has been created when really none has. This is garbage
I have tested it out against native optimizing bff4 by Oleg Mazonka, and I was shocked, because I managed to beat it using just pure JavaScript. The test case: [\[click\]](http://s000.tinyupload.com/index.php?file_id=00528897122655515164)
its* own sites
Oh thank god, I hope we take over your IT infrastructure peacefully.
Last place I worked was insurance related. The top browsers that were being used: IE 11 Chrome IE 7 IE 8 I'm not kidding. We rewrote the front end in Angular 5 and let everyone know that Chrome is now the only supported browser, and if there was a bug in any (or all) other browser(s) but not in Chrome then we wouldn't fix it. People were mad.
Yussss! It's about time. I'll never understand why it took this long.
This is what he said: &gt; And IE actually has more market share than Firefox so technically IE is #2 most used desktop browser last I checked... Nothing about government sector whatsoever - he was making a statement about global browser usage in all sectors. You are the only person who brought up government sectors ;)
How did you sell that hard cut? Doing angular 6 now and we need to support IE11, which is not the worst thing in the world and stuff work for the most part, but IE 7 and 8? Wouldn‚Äôt even know how to get a browser to test it in. 
I've been writing css for 20 years....I use styled components these days for the benefits it provides over css modules.
Behold, proof! https://imgur.com/a/4htlpmT
I've moved a lot of stuff out into testable functions as I went in to clean up the code today. It's a bit more readable now: `const chartPointsForAllDatesInRange = ({ tick }, start, end) =&gt; {` `const realStart = tick.calcGroup(start);` `return _(numberOfTicksForDuration(tick, start, end))` `.range()` `.map(s =&gt; emptyChartPointStructure(realStart, s, tick))` `.value();` `};`
Ok
Benefits, such as?
People still using bootstrap??
I could write an article or I could point you to one that sums a lot of the points I would make (but not all)... https://medium.com/@perezpriego7/css-evolution-from-css-sass-bem-css-modules-to-styled-components-d4c1da3a659b
&gt; I said that component documents end up being a mile long when you stuff CSS into them. This points to a lack of understanding of using libraries like styled-components. Give them a try in a project...like a real genuine try...use it in a project, small or large. Then come back and tell us how they suck.
we can add popups and callbacks after the copy is done. Nothing more extra I guess. Reduced the size too. Thanks for pointing out.
Don't worry, I'm certain they will change all the css classes again. Upgrading is a bitch
Great, now everyone just needs to remove bootstrap as a dependency ;)
This seems like a simple blogger framework with a small feature set. What is with all the marketting though? "Tell the story behind your code"...calling it 'poet' It gives off this vibe like you guys want to sell me tickets to fyre festival. It's too thick with the marketing for what is really a pretty flat simplistic product.
&gt; I didn't say I do it like that. You were implying this is a general issue with libraries like styled components...that is false and demonstrates a lack of understanding. Which is why I suggested maybe you didn't really know them well enough to say CSS modules is 'superior'.
Because you're selectively quoting ignoring the first sentence! "but in gov sector it's still a requirement. And IE actually has more market share than Firefox so technically IE is #2 most used desktop browser last I checked"
Dealing with this on a daily basis is quite possibly the worst thing in the world... debugging in IE when the browser‚Äôs DOM inspector doesn‚Äôt even work is quite the difficult task. Literally just console logging everything 
To add to this, our angular app is pretty big (although I have no real point of reference, this is our first) and when we save code changes and the ng server pushes out a refresh, IE often decides to poop itself and needs to be closed and re-opened.
Any alternatives to share?
Well I personally feel that anything that bootstrap does can be pretty simply hand-rolled. If you wanted a grid system then you could find some alternatives or just write your own very simply. Write your own CSS classes that do what you want. I don't really get what Bootstrap does that's so special- personally I find it more of a hindrance than a help and I'm always fighting against it when I take on a site or system that's using it. Also it's very easy to make something using bootstrap and then end up with something that looks undeniably "bootstrap-ish" and that always looks lazy. Obviously everyone has different opinions on it, but I'd choose jQuery and no Bootstrap over Bootstrap and no jQuery...
I haven't heard about jQuery for years.
Huh? Why does MS ship it as the default browser for Windows server 2016?
Don't worry... If it's anything like bs4, it'll be another 3 years
The whole thing was written in Java back end and JSF front end. It was horrifically slow. There are millions of users on the site and the company needed a complete rewrite in order to reduce the slowness. One of the leads talked them into Angular. They decided to try it out. The initial "test" portion went from a 4-minute page load (on average) to a 4-second page load on average. That's not an exaggeration. I have to point out that the guy did also alter some of the mysql queries, which really shaved two minutes off, but the rest was because of better front end code. After that, the higher ups were all in. They put out a statement that the program was being rewritten and everyone should move to Chrome.
Really cool tool for modern application!
Wait, it's out? 
There is only a big problem - it's too voracious
Unassigned variables are already undefined (you'll need to explicitly set undefined in vue state object properties though for their proxy observer thing to work). JavaScript has a concept of implicit null (undefined) and explicit null (null)- but when you can assign undefined explicitly what's the actual advantage of using null when the lowest common denominator is undefined? There are unavoidable cases for using null (browser apis, json uses it over undefined) but I've found most instances in my own code can be replaced with very simple architectural changes like just not writing the "null" entry coming back from a json api. I developed my disease from the main typescript developer having major hangups about null https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined I can't find the article but he was so angry it won me over
streaming and websockets. Users have been wanting real time updating data on their screens for awhile. They also want skype like features through a website including file transfer etc. Streams solve most of those problems, and sockets allow dynamic data to flow client&lt;-&gt;server&lt;-&gt;all other connected clients.
Modern PCs have enough memory to run such applications without any freezes.
Welp, at work we're still on v3 because we msut support IPad 2+ which use a version of safari that does not support well flex boxes. 
Well, I do agree with you. It's funny how some people will at the same time say 'that you must not reinvent the wheel' yet do not want to use jquery and rather... rewrite polyfiles that will basically do what jquery does. You can already see that the Bootstrap team wrote a selector function, it won't be long before they'll either drop a lot of compatibility like v4 or rewrite many things that jquery does.
The Canadian government uses ie11 and requires both English and French. Have a nice sleep!
Yep. I do think there is a use case for bootstrap. Say you're making a website for some backend code and you just need a bare bones front end and can't be arsed writing it yourself. You can generate error messages and have some modals and not need to write any code really. But beyond that I find it highly inflexible, if you want to extend said modal you have to go around the houses to do so, but you can make a modal in a few lines of code and modify and build on it super easily. It's far more biased than something like jquery, which is more like syntactic sugar. I find it weird when people hate on jquery because it does what it does in the simplest way and it's a real pain in the arse to try and write some simple selector and event code in vanilla js. 
I've no idea how easy or hard it is to emulate bits of bootstrap's functionality, but I think unless you work in a field where you have to push out a different design with each client, Bootstrap has amazing value for companies and developers imo. Designing layouts is an art in itself, and time consuming. The places I know would struggle a lot if they had to find budget for design. Of course these places don't live and die with public satisfaction over sparkling design. There's a "standard" template they can use, a nice website that showcases what the library is capable of, the design language is very simple (rows, columns, dialog, form group, etc), the library being popular makes it easy to find community extensions (table grids, date pickers, w/e). Of course you can make all these in-house, but how will it be better than bootstrap then? And if you need to hire someone, they will have 0 experience with your internal design language, but likely have worked with bootstrap. &amp;#x200B; I would not be very happy either if every site I visit daily was derived from bootstrap, but stuff we work on, it fits just fine.
That's a mildly infuriating article. Not only is the CSS Modules usage absurd, it lists decade-old CSS preprocessor features as something available only through CIJ. I suppose just I don't see enough benefit of generating styles through javascript to willingly sacrifice the entire preprocessor ecosystem.
You're 100% correct. Horses for courses and all that. Many agencies I've worked at have emulated bootstrap syntax without the hard dependency on it, which mitigates the issue of having an unknown design/naming system. Works as quite a nice middle ground for bootstrap lovers, haters, and agnostic...ers alike. 
&gt; I suppose just I don't see enough benefit of generating styles through javascript to willingly sacrifice the entire preprocessor ecosystem. You aren't 'sacrificing the entire preprocessor ecosystem'...you don't lose any preprocessing capability...you gain more in composability and functionality. Like I said, build something with it before you decide its bad. Getting to know something at a far deeper level than reading an article gives you a much greater appreciation and understanding of that thing. Thats what I had to do before I realized what the true value of things like styled-components was. Prior to that I had similiar reservations against it.
To a web developer you need to know JavaScript. No frame work has completely replaced the need. Also, if the something goes wrong on the client side, you to be able to troubleshoot.
&gt;Like I said, build something with it before you decide its bad. I have. And I don't say it's bad. I just feel like CSS Modules is the same, but better.
I just seriously doubt that statement...you haven't spoken like someone who knows it.
What I don't think they thought about, that Electron ships a full featured Chrome. That means it includes the codecs for VP8, VP9, H264 and many more. It contains the driver for the damn Xbox 360 controller. That all is shipped with your app and loaded. By now I don't use any Electron apps anymore and my computers perform way better. So the argument that computers have enough RAM is not true entirely. And there is literally no difference between an app running in an Electron container or in a Chrome tab. The only difference is, the Chrome tab uses less RAM and CPU.
Hooray looking forward to less dependency on jQuery!
Holy shit, how do you get browsers to wait for 4 minutes for the page to load? Wouldn‚Äôt they just time out?
It's not that bootstrap does anything "special" it just saves you from having to create a few hundred classes yourself. Using a standard css library has other benefits like, your team knowing all the classes, standardized spacing, preventing the creation of redundant classes, and amazing documentation. JQuery on the otherhand, you haven't needed since document.querySelector became a thing. What are people using jquery for these days?
Jesus christ. No, I haven't misunderstood shit. I'm using both in parallell between work and hobby projects. I just prefer CSS Modules and genuinely see CIJ as a mostly worse/zero sum solution to the same problem. This is an absolutely pointless conversation.
Hi, thanks for raising this. I was relying on a screen width media query to hide the associated text on mobile devices but this didn't work on CodePen due to the fact that the default mobile view is 0.5x scale (which is close to desktop). I shouldn't have been relying on this media query anyway as there are touch devices that are larger than the 1024px i was targeting. I have amended this issue on the demo, and will commit more substantial fix for this on github later today. Thanks, Paul
I feel your first paragraph answers your second. Jquery isn't just sizzle. If it were just querySelector then yeah, sure, it's pointless. But I think that event listeners and triggers are so much simpler and easier in jquery than the long and stretched out version with vanilla. And if you wanted to use those 6 lines of code for triggering an event multiple times, you'd wrap it all in a function a la DRY. Then you apply that to other aspects of the library, and you're just writing jquery again. I am much more in favour of bootstrap as a css library than a js library btw
Which company?
*Hey just noticed..* It's your **2nd Cakeday** oogleh! ^(hug)
It's pointless because you are now not being genuine I feel.
:( You make developer moose across canada cry when you use foreign software.
I mean that performance has nothing to do with the client lol that's all backend. Typically the things that would speed up pages would be load times between typical request response cycles. Again, that's only slow of you have a slow backend.
Why do you think javascript is a mess? Imo using typescript eliminates most problems of JS with type assertions but you seem to like python which is dynamically typed. JS does have some quirks but their just quirks not something to give up over
...and you still work there..?
&gt; I have to point out that the guy did also alter some of the mysql queries, which really shaved two minutes off, but the rest was because of better front end code. &gt; I mean that performance has nothing to do with the client lol that's all backend. ???
&gt; It is true that Javascript is still the backbone of the frontend but its place is like that of assembly language. You don't write code in assembly language. Lots of people write code in assembly language. It is really the only way to have control over the binary size, memory usage and timing of a piece of code. Avoiding learning JavaScript because you're worried that you'll run into difficulties with type safety is insane. I'm pretty well versed in Python, Java, Go and a bunch of other languages (including several flavors of Assembly), and I'd never consider any one of them a viable substitute for JavaScript.
Its not a big one so not taking names. Working on creating web-based simcity sort of educational game these days.
The rest of a couple minutes. 2 minutes was front end code changes? What I'm saying is that it has nothing to do with front end code or framework. Literally unless you are creating stack overflows everywhere in your code you can not recreate that sort of issue.
https://analytics.usa.gov/ IE is 2x Firefox
I consider myself a fullstack dev. I've had some experiences with Java back-end and JS front-end, NodeJS back-end and Dart front-end. But never in Python. Most of my experience is very event driven between the server and client. I.e. Server provides the interface via a webserver, a websocket is opened on the client connection and a whole bunch of data is requested by the client on each pages. To me, NodeJS makes alot of sense as a backEnd due to it's async nature and scalability. While it is mono-threaded, it is easy to have it launch some child processes on different threads. It's also well documented and make a non resource intensive server. There's also a whole lot of npm modules that you can use but this is a double edged knife as your dependencies can grow quite fast. For the front-end, I've recently made the switch from Dart to Javascript. The reason that I chose Dart previously was for it's OO design, while JS didn't have much back then. But so far, I have to say that Javascript came a long way in the last few years. The ES6 class system and inheritance, while not perfect, works pretty well. The ES8 introduction of async/await helps simplify your async calls that uses Promise and while some people argue against untyped variables, it does help to make some part of your code that use deeply nested data structures quite simple. To me this last argument was the straw that broke the camel's back for Dart when they release their v2.0.0. I had some structures like Array of Map that contained Maps that contained arrays and that became a pain to parse in JSON in Dart, while in Javascript it's not even a concern. Also, particularly on the front-end Javascript has a lot of resources available. You need to draw charts? There's a thousand different add-ons that you can use. You would like to simplify your life, there's a hundred of frameworks available. Although it can be time consuming to find the right one for you. Keep in mind that it usually is possible to use a Javascript add-on in a different language. But it's usually not that easy. All in all, I'd say that yes, Javascript is a must for a web developer.
I have no idea why you'd assume I'm lying about this, is it really that incomprehensible that I prefer CSS Modules over CIJ? Actually, whatever, let's not waste each other's time anymore.
&gt; Actually, whatever, let's not waste each other's time anymore. That I can agree with you on.
&gt; I don't really get what Bootstrap does that's so special It gives those of us who are design impaired a sane, professional default style out of the box within a reasonably easy to follow framework. If I had to design a website on my own, it would be much less professional looking than what bootstrap gives out the box. I also implement custom css for many other projects based on very specialized specs made by actual UI designers. It is usually simple enough to follow, but I also notice that these design often don't allow reuse very much as controls are often exceptional on each view instead of using common controls. This often results in a mountain of css. so even with designers, there are problems. I quite often wish our designers were forced to work within the bootstrap framework so that they are forced to think about reusable styles in their designs.
Make something yourself. If you can't be bothered to do that, [Bulma](https://bulma.io/) is a great alternative.
Hi /u/Itzik-Pop, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
He said &gt;JSF front end Please read the comments before replying :)
They didn't time out, because 2 minutes of that was chained api calls, so one would return, and then another one would go, etc. Then it took 2 minutes to take all the data, form it "correctly" and build the page. The main problem was that the databases have massive amounts of data, and the apis return massive amounts of data, and JSF just is not fast at all, so trying to cherry-pick that data based on other parts of data (for instance, only people with certain roles can view social security numbers) took another 2 minutes. With Angular and using persistent data (thanks to a user service and jwts, every api call no longer needed to check the roles of the user), it removed 99% of that logic from the pages.
Ok? What are you inferring?
Yep, I come from a design background which is maybe why I'm less enthused by bootstrap as a whole. But regarding your last point: YES. A thousand times yes, just not necessarily tied to bootstrap. I've received designs for websites clearly done by print designers. Sent as an illustrator AI file in centimetres with absolutely no understanding what can and can't be done with CSS. A good digital designer is a godsend. 
&gt; My company all laptops are imaged with Windows 7 with IE11 as standard. They‚Äôre locked down so you can‚Äôt install another browser unless you raise an IT request fo &gt;For non-IT staff the Firefox usage rate is 0% Apparently, non-IT staff just can't be bothered filing requests to install software x, y, z and having to wait a week for some disgruntled IT-clicker to drop by. I have worked in an environment like this and it sucks. &gt;all laptops are imaged with Windows 7 with IE11 Mainstream support for windows 7 ended in 2015, it will be completely end of life (no more security updates) in less than a year, tell your IT department to get it's shit together. 
Yes, switching to Angular did shave almost 2 minutes off of a page load, because there were many instances where Angular was MUCH better than JSF. Here is one example. In JSF, every single API call had to check session and then pass that session, and then the api would check that session to ensure it was valid and then it would return the user's roles. Because of security reasons we were not allowed to cache user's roles in a session or even a cookie. However, with Angular, we were able to use JWT and a User service that meant we no longer had to verify roles with every single api call. Also, the databases have massive amounts of data, and the apis return massive amounts of data. Certain roles have different permissions on that data, so it's up to the front end to decide how to display that: for instance, is it read only, editable, or hidden? JSF is just extremely slow in that. Angular is fast as fuck. That's almost exactly what Angular was written for, and that's where it excels more than any other framework.
Jwts are not spa specific. You can do that in jsf apps. You are attributing a frontend change to all things you fixed on the backend 
Isn't that global though. For me, when also filtering by country, the percentage sits around 12. we have a rule of thumb to support anything over 5 percent.
When your frontend code has bugs it sure is nice to be able to debug it within the browser. You may retort that sourcemaps will always save you from having to see the raw JavaScript but that assumes that they are available (unlikely in a production environment) or work (Chrome has the best support but it‚Äôs still incredibly buggy or difficult to work with at times... and you might be debugging a Safari-only issue).
I usually cherrypick bootstrap concepts that I really need. That seems to work just fine
‚Äúbothered‚Äù
Ok, so maybe the jwt isn't Angular-specific, but the rest is. I don't know what the hell you're talking about with the rest of the 2 minutes. 2 minutes was shaved by api call changes, yes. The other 2 minutes had nothing to do with the api. Maybe you missed this part: "...it's up to the front end to decide how to display that: for instance, is it read only, editable, or hidden? JSF is just extremely slow in that. Angular is fast as fuck."
You are more of a junior dev right?
The government sector sure doesn‚Äôt feel like a legacy environment to the tens of thousands of developers who work in it. 
&gt; Lots of people write code in assembly language. It is really the only way to have direct control over the binary size, memory usage and timing of a piece of code. &amp;#x200B; People who write in assembly language are handling the 0.01% edge cases which cannot be handled any other way. There are people who do some insane optimizations like in HFT where you have to think in terms of CPU cache levels(L1, L2, L3...) and they rarely have to touch assembly language. The point is that Javascript is a complete mess and it's a result of maintaining insane compatibility with older versions. Python3 broke Python2 because they realized that they weren't going to carry the baggage of past mistakes. Not so in Javascript. 
Ironic, as we're all trying to remove Bootstrap as a dependency.
jquery still does a lot of incredibly useful stuff. The best advertisement for jquery, ironically, is this site: http://youmightnotneedjquery.com/ Look at how simple things are in the left column, and how much more code is needed in the right column. jquery has many convenience features such as chaining, for example: item.addClass('selected').siblings().removeClass('selected'); and you don't have to check for nulls after each selection. Many functions such as closest() and remove() have no equivalents in IE11, and other things such as replaceWith() and before() are not available even in Edge. For simple sites it is easy enough to remove jquery, but for more complex javascript applications, especially apps that have a lot of interactivity, removing jquery will result in more code, or you will end up writing a lot of utility functions thereby creating your own little clone of jquery. Also, I'm sure a lot of sites and apps that use BS5 will continue to use jquery for other things anyway (all it takes is one plugin) so, in reality, a lot of BS5 sites won't have less code. jquery may be outdated from a javascript point of view, but nothing beats its syntax. Nothing is as simple and straightforward. It's not cool anymore but there's little compelling reason to tear it out of existing projects other than a refactor. It still works great. 
Tailwind css, pretty cool workflow
MS FABRIC!!!! Do you want the whole thing with just MS flavoring? MS FABRIC!!!! There's Clippy but you can say there is! MS FABRIC!!!! It's not very confusing. MS FABRIC!!!! Your apps will look like they are part of Office! MS FABRIC!!!!
I just started using [Bulma](https://bulma.io/). It uses SASS and you can just pull in what you need without being overwhelmed with other crap and having to override everything constantly.
[Materialize](https://materializecss.com/) is a good alternative.
Huh. Good to know. I wish more packages would do this.
How is my comment doing that's?
I really like it! Is it open source? A little piece of feedback, when i enter full screen i would like to easy get off it and i couldn't see an easy way other than navigating back. Thank you for sharing!
Would you mind sharing specific code snippets? I‚Äôm interested in what the issue is. Google Apps Script does only run ES5 JavaScript though, so unless you use something like clasp and turn it into TypeScript, using const for variable declaration wouldn‚Äôt be supported. 
It most definitely can. If you have a lot of slow queries, using an SPA you can load up the main application and load the queries asynchronously in the background, giving your application an appearance of vastly better performance. This is compared to pure server-side rendered apps like JSP, which will need to wait for all those queries to complete before it sends the rendered page out. Of course, it‚Äôs also possible to go the hybrid route where you SSR the fast stuff and asynchronous load the rest, but in my experience that‚Äôs not common until developers start thinking in the SPA mindset. 
Thanks for taking the time to reply! Just to add some clarification, in the scope of JS-related technology where would you draw the line "concise &amp; proven" and "trendy"? E.g. is React trendy or proven? What about ES6(+) features?
&gt;Google Apps Script does only run ES5 That's probably where a lot of the issues are coming from. EX: `const double = [1, 2, 3].map(i =&gt; i * 2)` Are you saying that Google Apps Script *does* run TypeScript though?
Yup, I moved my project to clasp with typescript and it solved all of these issues for me. It even let me use features like padEnd which are in ES2017. clasp also solved the annoyance of deploying by making it a one-liner: `clasp deploy`
Yeah, I‚Äôd change that to ES5 syntax. Map still works though. Take a look at clasp. It‚Äôs a terminal tool, similar to Git. It has built-in support for TypeScript. Just change the extension of your file to .ts and you can use ES6 syntax. Just beware to never pull again afterwards, as you get the compiled JavaScript back from Google‚Äôs servers. 
can confirm. devs always want the bleeding edge, which is totally understandable, but ops need stability, which makes for a reliable product. its a saucy rolling balance. üòÑ which is why jQuery will be around for a long time yet, 'cool' or not.
Why not use CSS grids?
It's a 5min read. Lots of big pictures. Did you really not like the article? I thought this was a great explanation for those unfamiliar (or too familiar) with ES6+ methods. 
Again fully dependent on backend changes. Literally almost zero from client code or framework is going to improve those aspects and if they are the old code was just poorly architected at a service level. Even if your spa can load async you still depend on the same calls that were originally made...so if those were slow they will continue to be slow.
Electron gives you node, which chrome doesn't (filesystem interaction, listening to a socket etc aren't possible in a chrome tab)
Yeah I consider both of them to be "regular ole css" - because they spit out .css files and you can write normal ole css in them. 
&gt; People who write in assembly language are handling the 0.01% edge cases which cannot be handled any other way. People use assembly languages where assembly languages are the best tool for the job at hand. There are plenty of use cases where Assembly is appropriate, and no, high-frequency trading is not one of them. I don't know why you even brought it up, to be honest. In my 20+ years of programming experience, I've never once run into a situation where Python or Java was the best tool to generate JavaScript code, nor have I ever known anyone to make such an argument in earnest. Until now, of course. Even if there were credence to the idea that transpiled code is superior to handwritten JavaScript, JavaScript has some great transpilation tools that handle issues of backwards compatibility and problems introduced through poor handling of dynamic typing. There is no good reason for someone interested in writing modern web apps to avoid learning JavaScript.
That‚Äôs great! You can now add jquery to your site! And those who don‚Äôt want it get to use bootstrap! Win win!
Reddit markdown tip: for multiline `code` block, simply indent the code by 4 spaces. This will retain all whitespace and make the code look more natural: const chartPointsForAllDatesInRange = ({ tick }, start, end) =&gt; { const realStart = tick.calcGroup(start); return _(numberOfTicksForDuration(tick, start, end)) .range() .map(s =&gt; emptyChartPointStructure(realStart, s, tick)) .value(); };
Glad I could help! I'm not an expert-expert and JS engines change all the time, so please just take this as a general rule-of-thumb, ok? Besides, properly refactored code tend to be good for readability and composability anyway, so luckily good coding styles tend to give the benefits I just mentioned for free. Only the type stability bit might be non-obvious.
Oh hey thanks
I switched from bootstrap to tailwind and I'm loving it so far. Way more customizable and way easier to change things without having to "undo" the default bootstrap way of doing things.
I'm going to nit-pick your code, but I think it's objectively better. Lately I've been on a semi-anti-lodash kick, in my experience it's becoming the next jQuery. Don't get me wrong, I _love_ lodash, it has some phenomenal uses, and it's really helped bridge some gaps in a jQuery-less environment. However, it seems to me that it's become the proverbial with which to hit every problem. Perhaps if you're not using Babel _and_ you have to support runtimes which don't offer ES6+ support, then it's more useful, but a majority of the uses of it I see could be replaced with ES6+ code directly. Example: _(3).range().value() === _.range(3) Specifically, I really dislike the 'wrapped' functionality most of the time. So really your example could be: const chartPointsForAllDatesInRange = ({ tick }, start, end) =&gt; { const realStart = tick.calcGroup(start); return _.range(numberOfTicksForDuration(tick, start, end)) .map(s =&gt; emptyChartPointStructure(realStart, s, tick)); };
Going to nit-pick your lodash usage as it could be simplified (I had an off-topic rant about lodash that I deleted, but wanted to share the useful bit): const chartPointsForAllDatesInRange = ({ tick }, start, end) =&gt; { const realStart = tick.calcGroup(start); return _.range(numberOfTicksForDuration(tick, start, end)) .map(s =&gt; emptyChartPointStructure(realStart, s, tick)); }; That does the same as your code, but it avoids the 'wrapped' functionality and make the code less awkward.
Good job.
You can do the same with Bootstrap, add also import the SASS sources.
Ha you deleted and rewrote your comment while I was replying. Your off topic rant was on point dunno why you deleted it other than a worry that I would get butthurt which wouldn‚Äôt be very good idea on a post whose point was we shouldn‚Äôt get butthurt when someone suggests better code. I welcome nitpicking and will look at this shortly when I‚Äôm on a real computer instead of mobile. We‚Äôve already heavily refactored that method today, it probably doesn‚Äôt look a lot like what I posted earlier. With that said we have a rule on my team. If it can be done with ES6, you don‚Äôt use lodash. 
Hi /u/mudza100, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah, really sorry about that. I deleted it because it was off-topic, and really, it's more of a thought that should be it's own post so as not to detract from your discussion. Again, sorry! 
All good. It‚Äôs a fair point. Es6 has corrected a lot of the deficiencies that led to the need for lodash in the first place and we should use the vanilla language whenever possible. 
okay, thanks
ok now that I'm at an actual computer and can read the code, yeah that's better, I think that the chain was a legacy of what it once looked like. We have already changed enough stuff that the chain was gone, but I do appreciate it.
FINALLY SOME GOOD FUCKING NEWS
Fetch?! 
Okay. I did not know that there was a subreddit that was for learn javascript. I found this feed and subscribed. I will continue to use this feed but also use the other. I am so new here. I am trying to figure it all out. Thank you.
Will look into it. Second time I saw this recommended today. Thx.
Maybe you can do this with ION. Instead of a server it is using IOTA Tangle nodes. In the demo you need to enter nicknames, but I think with changing the open source code you can have that 'automatically' connected. [https://github.com/peterwilli/iota-ion.lib.js](https://github.com/peterwilli/iota-ion.lib.js)
If you're on React or Vue you have some really fantastic options. Far more robust than BS 
Recently, I've created some simple React package (my first!) to support PWA presence on iOS devices :) &amp;#x200B; [https://github.com/kkoscielniak/react-add-to-homescreen](https://github.com/kkoscielniak/react-add-to-homescreen)
That might be the case for ES5 and supporting IE8/9, but jQuery cannot compare with ES6+. I haven't seen anyone using `XMLHttpRequest` in a long time!
I use firefox. I open the debugger tool bar and found all kinds of stuff. I there a way to see there specific elements on the page? For example the search bar or the image rotator.
Bulma
I +1 perfection diagnostic.
IE 7‚ÄΩ *IE 7?!?!* Tell me if you need a hug.
Please see my comment above. I think you are mistaken about how the library works.
Nope. Bulma is much more flexible to your needs.
&gt; But I think that event listeners and triggers are so much simpler and easier in jquery I would have 100% agreed a few years ago, but you really don't save that much anymore Click event with JQuery: $('.click-me').click(function(e){ // do stuff }) Click event with vanilla document.querySelector('.click-me').addEventListener('click', function(e) { //do stuff }) Is JQuery shorter? Sure, a bit. Is it saving me enough time/effort to warrant including an entire extra library? No, not in my opinion. I'd argue that bootstrap, on the other hand, saves me hours or days worth of work in a large project.
React is proven, yes. But if you use React, just use React. We are talking about looking for jobs, and I have noticed soooo many job posts that say 'Frontend frameworks like React, Vue, and Angular.' Uh, do you use all of them? Jesus, I hope not. I do not want to learn every framework! Trendy stuff is literally all the new things you see on subreddits like this and /r/webdev. One example I can give is GraphQL. I recently switched jobs, and I got two offers, both of which seemed pretty good. I picked the one that did not use GraphQL, because I do not like the whole concept, and want to wait for it to get blas√© and die.
Here's a sneak peek of /r/webdev using the [top posts](https://np.reddit.com/r/webdev/top/?sort=top&amp;t=year) of the year! \#1: [Animated login avatar](https://v.redd.it/38jmec4zrlh01) | [88 comments](https://np.reddit.com/r/webdev/comments/7zanzv/animated_login_avatar/) \#2: [StackOverflow is super toxic for newer developers](https://np.reddit.com/r/webdev/comments/9n24fl/stackoverflow_is_super_toxic_for_newer_developers/) \#3: [Markup horrors of the ad blocker wars](https://pbs.twimg.com/media/Dt23cXZXgAEDdW4.jpg) | [402 comments](https://np.reddit.com/r/webdev/comments/a4k85f/markup_horrors_of_the_ad_blocker_wars/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
So?
meh.. couple weeks ago i posted a guitar composer.. app.. thingy. following that theme.. https://pamblam.github.io/Fret-Friend/ generate chords and scales for any fretted instrument. these are the three libraries that make it work, all original Generate the notes of any chord https://github.com/Pamblam/Musicology Generate the different voicings of any chord https://github.com/Pamblam/Voicings Generate scales and chords diagram https://github.com/Pamblam/Fretted 
[Fetch isn't supported until Edge 14](https://www.caniuse.com/#search=fetch). Some of us are still supporting IE11.
I like Bulma's style. Feels nice and fresh.
\\p is even newer than that... ES2018 I think.
&gt; ES Number.MAX_SAFE_INTEGER 
I think the complaint is about converting an already lossy audio again, resulting in even worse quality. If there was a way to get the original audio and save as is, that would be ideal.
And the migration will probably be a nightmare and I will give up and keep using bootstrap 3
Hi /u/mattiasep, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Cool game.
i thought the meta was "just use flexbox CSS does everything natively now"
No. I'm not.
lol I couldn't believe it either. In fact, when that data was shared, I was like, "WHY ARE IE8 and IE9 SO HIGH ON THE LIST?!" and then got the response, "Did you even see the first place one?" It was so outlandish that my eyes didn't even notice it.
Javascript is an unforgiving language. If you're new to programming, it will allow you to make mistakes you don't know you're making. As an experienced developer, however, weak typing is a moot point. There are a few good practices that help to mitigate it, but in general, it should not be an issue. Frameworks that do Javascript generation for you are nice, but they'll only get you so far. As soon as a client requests something outside it's capability, guess who needs to compensate? If you're doing any kind of complex interaction on the frontend, you need to know Javascript. There really isn't any excuse not to.
Yes, it's called CSS.
Who makes js games? I pray for their sanity
That is surprising from your statements about what angular actually accomplished for you. To each their own. I think you are not actually evaluating what code changes accomplished for you correctly. You are attributing way to much to the framework which were all backend optimizations. You probably could have fixed every issue you had without doing a complete front end rewrite. I can certainly guarantee that. Whether your app was wanting to move away from jsf is valid but all your performance gains had nothing to do with a switch to angular. I can say that never seeing your codebase because I actually understand what angular gives you lol 
Hi /u/mobydikc, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mogla, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/duceum, this post was removed. If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/eligloys, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Iiiinteresting. It seems like `console.error(Error('foo'))` might be a bit more useful, though, since that'll also show filenames, right?
Ok but here's one I don't get: `Logger.log(parseInt(2)) // logs 2.0`
All numbers in JavaScript are floats, so this is expected. The only difference is in how the logger formats the number - the console may format as an int if it is one to a certain number of decimal places.
Edge 14 was more than two years ago, no? That's a pretty long time in evergreen browser world. And there's a polyfill for IE11 if you need it. Some modern APIs, including Fetch, are so much better than the traditional alternatives and so widely supported now that not using them without exceptional circumstances just seems like a waste. 
https://www.htmlelements.com/ and https://www.htmlelements.io/ are great free alternatives
My react-ion to anything that I am supposed to do as a web developer because big, bad Facebook says so is to just tune out and keep hammering away on [a new kind of frontend](https://linuxontheweb.org/desk.os).
Can I build a performant website, SPA or web app using your new fangled OS on the web? No? Oh. That's a shame. Did Facebook tell me or the millions of other devs using React to build anything? No. (Sorry if I come across as a dick, but shameless self promo while also coming across as shitting on other projects makes you look really egotistical)
&gt;And there's a polyfill for IE11 if you need it. Yes, let's remove jquery to polyfill fetch.
Why?
Welcome to hell. You are powerless here.
It sucks ass. Im doing it as a backend developer
Use a framework like Bootstrap. It will make your life easier. 
Loop through all the years, and for each one check if it falls out on Monday. Look at Array.filter, and Date.getDay.
Look into Array.forEach and Array.map.
What are you struggling with? 
I'm going to post a react version ``` class Person extends React.Component { render() { const { first_name, last_name, jobs } = this.props.person; return &lt;div&gt;{first_name} {last_name} {jobs.map((job) =&gt; &lt;div&gt;{job.title}&lt;/div&gt;)}&lt;/div&gt; } } ```
&gt; Fetch isn't supported until Edge 14. &gt; &gt; Some of us are still supporting IE11. Cool, but there is no reason everyone should be forced to have jQuery just because some people are still supporting outdated tech and don't want to install their own dependencies.
this is why frameworks like bootstrap exist
 &gt; devs always want the bleeding edge, which is totally understandable, but ops need stability, which makes for a reliable product. Bleeding edge? ES6 came out in 2016. It's not like it just came out. And ES6 was a huge update that really evolved the language for the better. It's not a fad, it's how modern Javascript works.
React can be categorized as an "other project"? Meh. I'm all for DIY project builders, let's change the world! Trust me, I did hesitate to make this post because I am cognizant of rule #1 here. But it is actually starting to happen, and we all can start banding together to take ourselves a nice bite out of the FB stock valuation. To wit, my servers got pounded by a single IP from Sri Lanka last night, probably because a teacher over there with a full classroom behind a NAT doesn't think [the CLI](https://linuxontheweb.org/shell.os) is quite so new-fangled. I mean, I literally need help on my end ASAP after being a lone developer on this thing for 6+ years. My entire experience while trying to promote this in the past has been basically this same kind of negativity, which always just made me quickly retreat back into my hole to keep pounding away on it. [But things are now starting to change, in that respect](https://www.reddit.com/r/web_design/comments/apwqmx/a_detailed_guide_to_css_animations_and_transitions/egc2tmp/)!
Cool stuff! I made a serie of gif image, regarding your query. The first one use the pointer, and text editing. The second gif show the same element, but to add some styling. (This is the css lang) As you can see, everything can be autocompleted, basically by typing the first letter. [https://imgur.com/a/kkGzWvs](https://imgur.com/a/kkGzWvs) The third gif, shows basically the same thing, but from the console. This is javascript. As well, the auto completion gives a lot of informations. This shows the usage of [getElementsByClassName](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName). I first copied one of the class into the &lt;p&gt;. &lt;p&gt; is a paragraph in html. It seems complicate to mix 3 langs, but this makes sense. Html is the markup, it declare elements, you can customize by attributes. Css is the lang for styling. This alone gives the aspect of the elements, and of the page, the position between them, this is mmade to make interfaces. Javascript is not mandatory to use. Javascript has full power, it can modify the elements, and also the css. It can access everything on the page. It can also make maths, or take new datas on the network to display it in the page, and more and more. See the gif: [https://media.giphy.com/media/oxYtFDIetCgADdbq32/source.gif](https://media.giphy.com/media/oxYtFDIetCgADdbq32/source.gif) Hope this give a good start! I learnt personally a lot from there, being curious! No worries, years later, I still find new stuffs very often ;) For everything else: [https://developer.mozilla.org/en-US/docs/Web](https://developer.mozilla.org/en-US/docs/Web) Good lucck, feel free to ask more! &amp;#x200B;
Lmao. I'm sure it would look nicer if you made it in React.
Great! I just watched the video. Well thought out, the possibility to mute and unmute tracks and to change pitch and tempo to respond to the intensity of the game.
Yeah I tried but Im just not good with it, I learnt a bit of it from the documentation. I could buy a course on Udemy but we're very limited with time for the project we're working on
I feel you, I found handy classes like d-none d-block and stuff like that only after hardcoding horrible functions that were trying to detect if you are on mobile or not... Reading the documentation is something really worth its time.
[But why...](https://gph.is/1gDlF9j) Why not just doing something that isn't a giant rubbery penis...?
True that, but for sockets we have websockets and the average filesystem access is only uploading. What I want to say is, most apps are just the website packaged in an app container, they don't use the advanced features of electron usually. 
These dont work :/ &amp;#x200B; so the object is inside the state of people. constructor(props) { super(props) this.state = { showId: "", employee: [] } } &amp;#x200B; and i need to loop through employee but still getting errors. Not sure how {first\_name} works in this situation with using props with the const var? 
I was like: what's a broken-ass version of my beloved Chrome devtools doing in my browser window, haha!
&gt; broken ass-version *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
Github only explicitly prohibits pornography in the community guidelines, and generally allows sexually-oriented projects that are either artistic or educational in nature. I can't speak for any potential employers, but as long as you stay within the community guidelines, I say go ahead with your rubbery penis experiment.
Look up destructuring if the const { first_name ... } = stuff doesn't make sense. like /u/BehindTheMath said, look into map or forEach array methods and it'll make sense. You can map the employee's array to components like ``` this.state.employee.map((person) =&gt; &lt;Person person={person} /&gt;); ``` then make a person component like i showed above.
&gt;I can't speak for any potential employers Unless pornHub or something they will not find it amusing.
Bootstrap is way, waaaaay more than just a grid system.
&gt;Reading the documentation is something really worth its time. RTFM is the only way!
Doesn't Server 2016 use Edge as the default browser? That's entirely different from IE.
What else does it include? Even after a quick google I didn‚Äôt see much outside of it being a framework for mobile responsiveness. 
Don't be lazy, just take a look at their [documentation](https://getbootstrap.com/docs/4.3/getting-started/introduction/). Especially their components and utilities.
yeah i'm slowly getting the hang of it. I'm following the documentation, I was just struggling with some really annoying things about css. Such a pain! But I'm slowly getting it &amp;#x200B;
Yeah the documentation really does help
CSS Media Queries, finding the right screen widths and min/max and urghhhh.. all that but i'm kinda getting it now &amp;#x200B;
yeah, I'm using that, I'm just really a beginner at it
It‚Äôs less about being lazy and more understanding the distinction between that documentation and a grid system. 
Honestly I hate the classname soup that bootstrap turns your markup into. I'm all about CSS-in-JS now but before that I really preferred to use BEM and then use mixins or extends with SASS for style re-use.
Everything you see in the documentation, the components and all that are part of Bootstrap. Which is why Bootstrap is more than just a grid system.
I think another key is interpersonal. I don't just let designers unknowingly add to the scope of a project or send me unusable mocks. Sometimes a half hour review of the mocks with the designer with requests for some revisions and reuse can save you hours of work. 
Hi /u/bigw01f, this post was removed. Low-effort content such as listicles, memes, clickbait, etc. is prohibited. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thistoohard2, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jinki_zero, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah exactly... dont you just import the libraries you need instead of the entire bootstrap library? I thought this was obvious...
you missed the point. dev?
The vue 3.x *codebase* will itself be written in typescript, but usage of typescript in an application *you build in vue 3.x* will be entirely optional. With that being said, typescript will certainly not hurt your resume.
go ahead with your *giant* rubbery penis experiment
Hi /u/secue, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thekoc11, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheJCD92, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/madtriks, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
What do I have to hammer on this to get past ‚ÄúGetting the filesystem...‚Äù?
it says the .map is not a function. Strange. An object is being returned though? 
if its an object, its not going to have `.map` on its prototype chain, that's an array method. so your data is wrong/different from what you gave as an example. 
According to Wikipedia it's the default 2016 and 2019. I can't speak from experience because I've not used those versions though
link was just an example of what I heard yesterday, srry for posting it
oh hey there self, so nice to see you again üòÇ.
I changed the data a bit but its still the same format basically &amp;#x200B; &lt;blockquote class="imgur-embed-pub" lang="en" data-id="a/NswNDzz"&gt;&lt;a href="[//imgur.com/NswNDzz](//imgur.com/NswNDzz)"&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="[//s.imgur.com/min/embed.js](//s.imgur.com/min/embed.js)" charset="utf-8"&gt;&lt;/script&gt;
It is developed and tested in Chrome on a Chromebook, and is really optimized for that use case at the moment. I know it also works in recent Firefox versions, and I have seen it work in an MS/Edge browser in the past (I'm not sure if it still does, and I get almost no hits on my server from it). I know Safari always gets stuck somewhere early in the "boot" process, by way of my server logs, but I don't personally have access to one of those browsers to investigate further. So, basically, as with anything fairly new and untested, YMMV!
this appears to be an object with a `direct_reports` array, so `person.direct_reports.map(...)` 
I get your point , I just wanted to do something that wasn't bubbles .
Amazing
Fair enough. I tried to access it from an iPhone so I‚Äôm probably one of those entries.
Rubber. Duck.
That's the equivalent of removing the whole toolbox and just use the smaller tool you need. What's so wrong about it? A fetch polyfill is really small.
Not _every_ feature. Missing notables like Proxy, Reflect, symbols and some others. I noticed some descriptions are a little off too. In `for...of` for example (the most glaring example of those I scanned through), it was compared to `for...in` except for the fact that it iterates over values instead of names. This is a generalization that is only true in some cases. Specifically, `of` only works with iterables while `in` will iterate through any object's properties. A value version of `in` would have been our beloved `for each...in`, though that was sadly lost with the abandonment of E4X. But otherwise, in general, most of the other topics are covered clearly and concisely.
It is related to JavaScript as this CSS property remove from the developer the needs to develop a scroll for the future
Because if you're using jquery for ajax, you're probably also at least using it for dom manipulation. There's no reason to remove what is working.
MIGRATION? No baby, we modified the bootstrap.min.css on too many 7pm fridays
That's great, but it still doesn't belong here.
You're right you can use additional classes to accomplish most of the use-cases. Most of the time I use them it is to toggle a property between two values. But I find it refreshing to think of css properties as a function of component props (just like markup) rather than having to map props to classnames and classnames to properties. There are definitely cases where being able to interop at runtime cannot be replaced with modifier classes alone. Usually these situations are handled by directly modifying `style` values on DOM nodes (or passing dynamic `style` objects in react). The most common situation that comes to mind is transitioning the height of a variable height element (such as a list). The only pure CSS solution I've found is with hacks like `max-height: 99999px`, but this causes the transition timing to be off. Using styled-components, I can calculate the list's height at runtime. ```js const listItemHeight = 100; const ListItem = styled('li')` height: ${listItemHeight}px; `; const ExpandableList = styled('ul')` transition: height 0.2s; height: ${props =&gt; { if(props.open) return props.children.length * listItemHeight; return 0; }}px; `; ```
You obviously don't know shit and think you're smarter than you really are. We made the backend adjustments and then rewrote the front end, hence how I know that the api calls adjusted 2 minutes from the load. Also how I know that switching the front end code shaved almost another 2 minutes off. We did EXTENSIVE testing on these things. You either don't know shit about Angular or don't know shit about JSF or both. Trying to manipulate the massive amount of return data in JSF was fucking terrible. Not to mention that the `if` statements were equally horrible. The computational lag in JSF building its template was so horrifically slow that it caused a massive amount of wait. That has NOTHING to do with the back end. JSF is not good enough to handle complex data manipulation quickly. Period. Now, obviously anything that can be done in Angular can be done in vanilla javascript; however, what I'm pointing out is that Angular specifically was made for this exact scenario with `*ngIf` statements and the `async` pipe. 
I know a lot more than you do based on this conversation. You don't know what you don't know obviously. If you truly think that switching to angular gained you 2 minutes of load time you are just a lost cause and an inexperienced developer. Its really not a big deal you are just misleading people into things that are literally not true which is why I even said something in the first place. I have 10 years of professional experience working in java, node, and the past 4 years with modern js frameworks. Any developer with over 3 years of experience would understand that your arguments that Angular dropped your load times by 2 minutes are just utter nonsense. That or you don't actually know how to explain what optimizations were made. 
You shouldn't learn any language. You should do projects. Try to do a web project without JS and see how far you get before you have to learn JS.
But by eliminating jQuery you can save 70KB on your download, freeing up room for your 8MB hero image!
When you don't need client side (or generated with the likes of Gatsby) or it adds too much complication would be my responses. But it's kind of an odd question...
I personally prefer Vue, cause I don't like JSX and prefer my templates in separate blocks then the styling and logic. But that is basically all. I think React is a good library IMO. Also React is just a library not a complete framework.
It's probably more of a question of multi-page vs. single page app, rather than framework vs. framework. React vs. Vue is pretty much entirely preference. 
Jesus Christ, you're dense. I feel like you're not even reading what I'm writing. I'm done with this conversation. Because you're an idiot.
I am reading what you are saying and you still don't seem to understand at a high-level what you did to get the performance fixes. It has nothing to do with framework and especially nothing to do with Angular which you seem to keep insisting. Everything you did in angular at the data level can be accomplished at the JSF layer and perform equally as fast. The gains of angular are from the developer side and the component model not necessarily performance. Look this conversation can be over, I agree it should be, but you are very wrong here whether its ignorance or misunderstanding I don't know. If you can share your codebase I could probably show you how ridiculous your statements are. Im sure your stuff is proprietary tho so you cant share it.
I have no use for this but just wanted to say this is genius.
When you're making a content-based site, like a blog or newspaper.
I do it all the time, actually I've been meaning to make some local linting rules to remind me to curb my smarty pants coding habits in the workplace lol.
Im going to sleep now, so im gonna check it tomorrow just curious for now: Im creating a game in JS. Do you know how to loop parts of the music? I have combat music that has intro and then I want to loop other parts for the remainded of the combat. I also wonder how will it all sound when there's music, attack effects and voice at the same time. Cant really mix music in JS lol
Like what? 
Sorry, maybe I am just too tired, but this reads like a word salad. 
Shut the fuck up. Look, dude. I've been a dev for 7 years. Is it 10? No. But it's enough. I have PR's that have been merged into AngularJS and into Angular (obviously separate PR's). I know what the fuck I'm talking about. Jesus Christ, your attitude.... eat a dick. I know exactly what I'm talking about. You are the one that doesn't. Fuck, man. You're such an idiot.
Several possible answers: - it's a static site - the team/company standardizes on a different framework - what the client really needs is a budget CMS (wordpress, etc)
You are not as experience as you think if you really think Angular was the reason you saved 2 minutes of load time. Maybe you should get a new job.
1. When you don't have complex application state to manage 2. When you need ensure CSS is separate from JS 3. When you need to ensure that a solution is as flexible as possible i.e. minimize use of 3rd party libraries to ensure control over dependency structure.
It's smaller and faster because they do not care about insert order of CSS, which can introduce subtle bugs. I don't get the hype, styled components are better.
But React is insanely good at static sites (Gatsby) and can work as CMS then. 
Look man Im not really trying to shit on you. Just what you said doesn't actually make any sense or you are interpreting what you did to lead to an end result which wasn't actually the reason why it was fixed. It certainly wasn't just Angular versus JSF rendering. Cheers, good luck with your career. 
When you need a fully-featured framework instead of a library.
My first question is: Do you have to use basic js?
Could you be more specific? How would that translate to a business need?
Let say you work for a gigantic enterprise company and you have hundreds of developers working on the same project around the world. You could argue that having a more prescriptive framework with more agreed-upon conventions would make collaboration easier, since there are less things to figure out and tweak.
That's a great answer. Thank you!
What is the alternative? Sorry, I‚Äôm really new to this and thought I could make this work with plain vanilla js. Do you think I should use a more advanced method?
Wrong. You're wrong. I'll reiterate: You're an idiot.
You are wrong. If it doesn't make sense, then that's because you're an idiot. There were several devs with multitudes of experience on the project. You weren't on the project. You are an idiot.
I mean I do think you 'have to', but Vuejs would make this MUCH easier. That said if you wanna stick with basic js. I need to read over your code some more. Could it be that your delete function isnt being passed an id of the object? I'm gonna reread to make sure. 
lol okay man...believe what you want. Believe that Angular is what saved you 2 minutes of load time because of control flow...just wow. Let me know when you are a principal engineer making 200k a year and get back to me with this nonsense.
Right now you‚Äôre removing the form. First find the input you want to remove.
That's not how the app works. More evidence that you have no fucking clue what you're talking about. You're an idiot. 
&gt; In JSF, every single API call had to check session and then pass that session, and then the api would check that session to ensure it was valid and then it would return the user's roles. Because of security reasons we were not allowed to cache user's roles in a session or even a cookie. However, with Angular, we were able to use JWT and a User service that meant we no longer had to verify roles with every single api call. This literally has nothing do with Angular. This can also be done with proper caching or service architecture on the Java side, just to point out how stupid you are. Since you continue to call me an idiot but literally don't understand jack shit apparently.
&gt; const form = document.getElementById('form'); const input = document.getElementById('input'); const addBtn = document.getElementById('add'); const list = document.getElementById('list'); let id = 1; addBtn.addEventListener('click', addTodo); function addTodo () { const text = input.value; const item = `&lt;div id='${id}'&gt;&lt;input type='text'&gt;${text}&lt;input type='checkbox'&gt;&lt;button onClick=removeTodo(${id})&gt;Delete&lt;/button&gt;&lt;/div&gt;`; list.insertAdjacentHTML( 'beforeend', item); id++; form.reset(); } function removeTodo(id){ list.removeChild(document.getElementById(id)); } 
Isn't that exactly what Facebook is though? Since they created React to (presumably) fit their needs, I would think it should be quite appropriate for large scale enterprise projects.
&gt; I understand that some of the other frameworks (Vue) is a bit faster, but in reality, is React ever that slow? and how does React suffer in terms of performance? React was rewritten to enable performance leaps that are unseen in the web. Through scheduling it can prioritize content and enforce strict 60fps. It could theoretically run faster than native gpu driven multi core apps. [This is what happens](https://twitter.com/jlongster/status/1054554506736910336) if you simply switch it on. This talk goes into some details: https://youtu.be/v6iR3Zk4oDY?t=246
React can work with a CMS but not as a CMS. A CMS will have backend functionality like content types/permissions, access controls, a module system, content blocks, view constructors, etc., etc.
rofl at recommending vue to remove an element from the dom
I was thinking the same thing. I would retort by saying that Facebook (presumably) has (most of) the world's foremost experts on React working for them. If you needed to assemble some less-than-Facebook quality engineers to architect a project, it might require more rigid parameters.
Would it not make easier?
hey, i see how vue would be simpler. I dabbled with react and react wouldve been a lot easier to work with this. not saying vue is completely interchangeable with react. but i believe you when you say this is something easier to do with vue. 
Was insert order solved by styled components? I remember that being an issue for them as well? https://github.com/styled-components/styled-components/issues/382
Getting on my laptop now to see if we can figure this out without a framework.
This is roundly what I thought was the issue looking at it.
Thank you a ton! This worked better than what I had. each delete button i am adding dynamically works when clicked, i.e. it removes the form input. Now the problem is the original form i had is not removed when i click the delete, however it does delete the newer forms i added through the add button. &amp;#x200B; i am exhausted. need to figure out that little big. &amp;#x200B; thanks so much again. 
Have you actually used Gatsby? In my experience it's extremely over-engineered. It required a million plugins to do anything, and couldn't do simple things like code syntax highlighting in one-off layouts without `dangerouslySetInnerHtml`. Another fun one: we built a docs site on top of it just last year. Now we need to [migrate](https://www.gatsbyjs.org/docs/migrating-from-v1-to-v2/) for absolutely no reason other than Gatsby has a new major out (and their graphql version is mismatched w/ the rest of our monorepo, or some such crap). And have you used wordpress lately? You can get some impressively customizable templates for dirty cheap that any layperson can use.
&gt;Do you know how to loop parts of the music? Yep! game.music.loopSection = "combat" &gt;I also wonder how will it all sound when there's music, attack effects and voice at the same time. Cant really mix music in JS lol You sure can! And there is a full mixer with volume and pan that you can control programmatically or in the editor. The music isn't a single audio file. There is an audio file for each individual sound in the music, so it can be mixed at will.
My brain is fried. Another commenter helped a ton and listed my mistakes. I fixed the little discrepancies and now the new forms I created do delete when I click on the delete button. But the problem is I had a form that is already on the page. When I click on the delete of that, it does not delete itself. It deletes all the new forms I added dynamically though. Sorry if that doesn‚Äôt make sense üò≠
This sounds like homework. If not, you can use Array.findIndex.
Do you have dynamically created ids for each form? Or classes? 
Polyfills can be sent only to browsers that need them, improving performance on more modern browsers. Take polyfill.io for example, on the latest Chrome, it sends an almost empty file. https://polyfill.io/v3/polyfill.min.js
My pleasure, good luck!
Lmao
That "demo" is really bad. You're making a point about react being fast with showing us a laggy react app. To be fair, it's certainly the developers fault it's so laggy. Then this "magic switch" makes it work like every other library (not laggy on rendering a few simple components). You should check some benchmarks,react isn't even close to being fastest. But then again pure performance isn't why these libraries exist in the first place.
Opened this on my phone, incredibly long JS load time, the site is not a good example for its mobile application.
Hello üëã React doesn't really have an impact on "Facebook stock valuation". That's most about ad revenue. The React team is a small part of Facebook (six individual contributors and one manager) who are passionate about helping other frontend engineers‚Äì not just those at Facebook. I'm pretty sure I speak for all of us when I say that we wish you and desk.os the best!
Search through array. At every item check if this item equal item you are searching for. If yes return the index. If not move on. If loop ends return -1. 
For a reference site, one option is Mozilla's MDN. They have JS here: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)
Thanks, that may help
No problem. For anyone who comes by later, the full JS section on MDN is here: [https://developer.mozilla.org/en-US/docs/Web/JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
I changed to classes! Yeah someone reminded me ids are unique to one
Great! Sorry I wasn't more helpful.
What does the function loadSound do?
One of the stackoverflow posts I found while searching said to use that to load the sound. Like I said, I just started yesterday and I'm mostly youtubing syntex issues and going with programming knowledge from other languages.
The function doesn't seem standard to me. I think you should checkout the MDN for how to create audio.
I'm reading through it now. I didn't know the address until the guy above told me
React was rewritten so that it could catch up to Vue and Ember. Ember has had async rendering for years via the glimmer engine. Each framework will have specific use cases where they will outperform the others... But in general, modern frameworks' performance is indistinguishable from one another. 
A good percentage of game cheats are written in assembly and C as well. I think what‚Äôs missing here is you can‚Äôt break the web. When you are working with server side or desktop code you can include delendencies like a new version of python, if you needed to. That doesn‚Äôt work on the web. You can encourage people to use a new version of Chrome, but not install it for them. 
Click event in React: onClick={do_stuff} Or for the less JSX inclined, click event in Vue: @click=‚Äúdo_stuff‚Äù True frameworks are where the gains are at.
Thank God!
When the pages aren‚Äôt interactive or just a little 
It seems complex at first but you will get there. Tailor your media queries to your layout/design. 
I would choose ember for apps that require less than a full-time developer each week. Maintenance on ember apps is a dream. Standard builds with ember-try compile against beta and Canary branches. Codemods are included for all migrations. There are LTS releases with supported migration paths to the next LTS. Ember has ember-data which handles a ton of boilerplate, unrivaled until Apollo, but graphql is a big investment for small Dev groups. There's only one way to set up ember apps, so if you've got two or three you are maintaining, you don't have to worry about what the prevailing wind was for which react starter you used. I use react 100% for the past year+, but we have over 100 contributors and major performance constraints. Ember gives good performance and outstanding Dev velocity at the cost of reducing custom solutions to esoteric problems. I've used react on weeks long freelance engagements, and it's fine, as long as you aren't the one maintaining it. But for long lived small apps, ember is my choice.
If your components are that long, you still should consider breaking them apart to be more atomic. Also, if you're not doing so already, consider creating stateless functional components instead of creating a class and extending React.Component. One thing those external CSS classes cannot do is update based on changing props. This means you're taking on the responsibility of managing which classes to show or hide manually.
Also, styled-components uses its babel plugin to transform your inline css into a normal styled component, while emotion adds class name to your component (i think). Not that that‚Äôs better or worse, just a difference. Emotion is also framework agnostic, so there‚Äôs that!
When you have an established team and project with no React experience. When you have a team full of contractors who will leech your company for pay and React training, then leave you in a lurch after 3 months to go get paid 20 percent more after they've sold themselves as React experts. When you have a team full of back-end C# developers who have a strong, pseudosexual affinity for Angular and TypeScript. 
Bootstrap is great for small projects that don't require much design (or none), for medium-big projects I would never use it, I find myself constantly fighting with all the extra specificity and weight that adds to your css. Like any other tool is useful if you use it as intended.
Has the license changed? Last time I looked it was only free for office integrated apps.
But Gatsby is great for such purposes. 
Definitely agree, just seemed outside the scope of the conversation.
This is really cool man. Everything about it. You should be proud! I'll definitely be using this library. I'm doing an SRS app where I am making it heavily game-themed with gamification elements.. trying to spice up the learning process. I can totally use this during each phase of the process. It's too perfect. I especially love that you can increase the bpm as time passes. It's brilliant!
Is this just a nicer version of the existing github file history tool? Or does it have additional offerings?
Weird that they‚Äôre removing ie from their supported browsers. It won‚Äôt be fully discontinued until what, 2023 probably??
An object factory is a function that creates objects. Object factories make it easy to create objects with complicated combinations of data and/or methods that you wouldn't have to write out each time you make an object. Classes are used to make objects much in the same way factory functions do, they're just a slightly different way of going about things. Using a function for now is fine and gets you pretty much the same result. What you have now is a good start but you'll need to fix a few things with the syntax because you have object methods laid out, but no object. And you'll need to be sure you return the object you create so it can be captured when you call `createPizza` let myNewPizzaObject = createPizza()
 Wanted to throw my hat in the ring to aid on your problem. The main part in the code below should be looked at is binding the button's \`onclick\` handler, which takes the click event (keyboard supported too), and gives you access to the DOM tree from the button up. This will save on having to query the DOM repeatedly for elements as it's already available in the event. &amp;#x200B; Hopefully this gives you some insights and ways to do things (without additional frameworks). // Global placeholders var addBtn; var clearAllBtn; var inputField; var todoList; // When the document is loaded, call `init` window.addEventListener('load', init); function init() { // Assign placeholders to DOM Nodes // now that the document has loaded addBtn = document.getElementById('addBtn'); clearAllBtn = document.getElementById('clearAllBtn'); inputField = document.getElementById('input'); todoList = document.getElementById('todoList'); // Attach the event listeners addBtn.addEventListener('click', addTodo); clearAllBtn.addEventListener('click', clearAll); } function addTodo() { // If there's no data, don't do anything if (!inputField.value) return; // Create placeholder elements var node = document.createElement('li'); var deleteBtn = document.createElement('button'); // Assign our text input value to // the textContent of our node node.textContent = inputField.value; // Buttons should have a type, // some kind of text, // and lastly, assign the click handler deleteBtn.type = 'button'; deleteBtn.textContent = 'X'; deleteBtn.onclick = removeTodo; // Append the button to our list item node.appendChild(deleteBtn); // Append the list item to the list todoList.appendChild(node); // Clear the input for good measure inputField.value = ''; } function removeTodo($event) { // Clicking the button passes an `event`, // grab the `path` (heirarchy of nodes), // the node we want from the list (button &gt; li), // and finally, remove it from the DOM $event.path[1].remove(); } function clearAll() { // Quickly reset all the data in the list // to nothing todoList.innerHTML = ''; } &amp;#x200B;
Simple application. Creating generic library. Creating injectable script like embedded video player. When size of bundle matters. Those are some cases that immediately jumps out to me. 
In what scenario would a react bundle be too large?
Very very cool. 
It's not. It's terrible and the only reason I use it is because I have no choice when it comes to web development. If I had my way I'd be using Kotlin for everything. Typescript makes it far more bearable. But unfortunately it's still shit underneath. I'm ready to dump all my Javascript knowledge the moment WebAssembly becomes popular.
What software are you using? Maybe they have a server side check. I know that fritzbox allows emojis, so does Unifi. 
When you're creating a bundle that will be injected into other people's code. For example, lightweight video player, utils, analytivs, etc. In that case you'd want your bundle to be small, lightweight, and fast as possible. Other scenarios I can think of are when you're creating app that doesn't need view. In that case react will render useless. Or when you're in an environment that isn't able to use react. Or when someone asks the question what is a bad library. In those cases react isnt the answer. okay last one was joke) ha
Does this look correct (sorry, I am having a hard time understanding this): &amp;#x200B; &amp;#x200B; function createPizza() { addCheese(cheeseChoice) { return cheeseChoice; } addMeat(meatChoice){ return meatChoice; } pickSize(sizeChoice){ return sizeChoice; } addVegetables(vegetableChoice){ return vegetableChoice; } return; } let myNewPizzaObject = createPizza(); &amp;#x200B;
Gigantic *software* enterprise companies can use whatever they want. For everyone else your statement is true.
Seems like loadSound is undefined. From Googling, looks like it‚Äôs a function from the p5.sound.js lib ‚Äî do you have the correct library included in your project?
Or you can use the actual Material web components: [https://material.io/develop/web/](https://material.io/develop/web/)
just my opinion... but I dont think the question was geared at finding an alternative due to technical reasons. I think it was a how does this person respond to a question. And more specifically do they look beyond just the technical scope of the project. For example, if given any tech stack choice, but given all junior devs, what would you choose vs. all senior devs? Do the devs need training? If so, does the business have the time and budget to allow for it? Is there a legacy system that must not be replaced? Lots of other questions can be explored or drilled as some of the ones above are answered.
r/lostredditors. This is the Javascript sub üôÉ
Nvm figured it out got to use the escape sequence. \\ shows 1 \ so I just have to double the number of \ to get the amount I want to show. 
Ops hahaha
It's an escape character so each // within the quotes only counts as one /. Just like "/"" would result in a single quote
Those are forward slashes. Actual backslashes `\` are typically an escape character, meaning you need to double them: `\\`.
Oh yeah thanks! 
Thank you
Follow this guide for basic DOM sound playing: [StackOverflow Audio](https://stackoverflow.com/questions/9419263/playing-audio-with-javascript/18628124#18628124) You are currently trying this: [P5 Sound](https://p5js.org/examples/sound-load-and-play-sound.html) Which requires the P5 library. Note: The first link may or may not mention that most browsers will require user interaction on the page before being able to play audio. You will have to fire the sound off after an input event listener is triggered. This is to prevent auto playing of annoying audio.
Just so you know you are posing in r/JavaScript not r/Java. I'm not much of a Java developer by any means but executing that command in JDK 1.8.0 I had the expected output. I think you may be referring to \ not / in which case it is doing that because \ is an escape character so to output \ you will need to type \\ this specifies you are actually wanting to display that character. If you are still confused lookup escape characters.
This community is awesome sorry for my mix up, thanks for the prompt replies!
When you're writing utilities or a backend service? If the question was: when would you not use it on a frontend app? Maybe when something better comes out? The React model is the right model for today's apps, but maybe for content sites you'd move faster without Gatsby.
You're still missing the object part. To create a new (plain) object you have a couple of options but the most common is to use the object literal syntax which is a set of name value pairs within curly braces (`{}`). let myObj = {}; // empty object let myPizzaObj = { sauce: 'marinara', extraCheese: false }; // object with properties console.log(myPizzaObj.sauce); // marinara You can add methods (functions) to your object using the syntax you have (mostly, except we need to add commas; when using the `class` syntax, commas aren't needed), but it has to be within the curly braces of the object literal. let pizza = { addCheese() { }, addMeat(){ }, pickSize(){ }, addVegetables(){ } }; Once you have that object, you can return it from your factory function function createPizza() { let pizza = { addCheese() { }, addMeat(){ }, pickSize(){ }, addVegetables(){ } }; return pizza; } let myNewPizzaObject = createPizza(); // returns the pizza object myNewPizzaObject.addCheese(); // works! (but currently does nothing) Then its a matter of making your methods do what you want.
animations with canvas or webgl. while they can work with react, probably not always a good idea when performance counts
do you know if there are any decent alternatives to gatsby (that still allow you to use React for static sites)? I agree that Gatsby appears to be really over-engineered, but I can't really back up that criticism with an example of something better.
When your app is 90% form based. Forms in React and Redux (mostly with Redux-Form) is pretty complicated for something that would be so simple done vanilla.
https://github.com/nozzle/react-static
Late to the party. But here's the [open source project](https://github.com/Ll2NZ/react-d3-ggplot#demos) i've been working on
this is a great answer and an absolute edge case. Question: did you know about this because you've had to implement something at a job?
yes, should have clarified - it was for a front end role.
Yup! I used to develop daily in React. Maybe a more elegant solution has come along since.
The important question is: what emoji are you trying to use? üôÉ
You are doing it a bit wrong. &amp;#x200B; Create a &lt;div element in &lt;body &lt;div id='randomStyle'/&gt; Then target this div in order to write in text and apply style which you want. &amp;#x200B; let divEl = document.getElementById('randomStyle'); divEl.style = 'font-weight: '+randomItem2; divEl.innerHTML = `${randomItem}`; Also, your second array would be // var Secondary = \["bold", "italics"\];
Why is this better than others. [yargs](https://www.npmjs.com/package/yargs), for example? 
&gt;... asked me a very intersting question : when is React NOT the tool for the job, and frankly, I couldn't find an answer. Did you get the job? 
 const Link = styled.a` min-width: 12rem; margin: 0 auto 20px; padding: ${props =&gt; (props.primary ? 18 : 16)}px; border-radius: 5px; text-decoration: none; border: ${props =&gt; props.primary ? 'none' : '3px solid currentColor'}; background: ${props =&gt; props.primary &amp;&amp; 'linear-gradient(90deg, #D26AC2, #46C9E5)'}; color: ${props =&gt; props.primary ? '#1D2029' : '#D26AC2'}; &amp;:hover { opacity: 0.95; } @media (min-width: 768px) { margin: 0 20px 0 0; &amp;:last-child { margin: 0; } } ` ü§¢
hindsight 20-20... I probably shouldn't shipped this without writing tests first. Shit will probably hit the fan now...
React is not the answer when you have a team that doesn't have a react skillset. When your team knows html and css, then you should use those. Not every company is a tech company, so you should use older, more simple technologies when it fits your company skillset.
It looks pretty slick!
He i appreciate it im pretty new to javascript. Ill try this out :) 
Might this be more palatable? const Link = styled.a` min-width: 12rem; margin: 0 auto 20px; border-radius: 5px; text-decoration: none; &amp;:hover { opacity: 0.95; } ${props.primary ? css` border: none; background: linear-gradient(90deg, #D26AC2, #46C9E5); color: #1D2029; padding: 18px; ` : css` border: 3px solid currentColor; color: #D26AC2; padding: 16px; ` } @media (min-width: 768px) { margin: 0 20px 0 0; &amp;:last-child { margin: 0; } } ` or const Link = styled.a` min-width: 12rem; margin: 0 auto 20px; border-radius: 5px; text-decoration: none; border: 3px solid currentColor; color: #D26AC2; padding: 16px; ${props.primary &amp;&amp; css` border: none; background: linear-gradient(90deg, #D26AC2, #46C9E5); color: #1D2029; padding: 18px; ` } &amp;:hover { opacity: 0.95; } @media (min-width: 768px) { margin: 0 20px 0 0; &amp;:last-child { margin: 0; } } ` 
Lmao Thanks for that üòÇ
AFAIK you don't even need the css`` helper if not doing any interpolation inside.
this is pretty sweet
Didn't say it was. Just decided to write something and share it that's all
kind of reminds me of xstate except with less complexity and less payoff
Is it open source and is the source code somewhere available?
Yeah, I could have added that, huh? https://github.com/mikehelland/openmusic.gallery https://openmusic.gallery
wow ingenious! Awesome! If I have any use of this in the future I will definitely use this!
Is it because your additions all have ids based off of i, whereas your initial input has an id of "input"? 
Great point I still do it because it triggers css highlighting in vscode with the `vscode-styled-components` extension :P 
Hmmm... I‚Äôll test that out soon! Thank you
&gt; If all you have is a hammer, everything looks like a nail... Seriously, try this as an exercise: just use node fs.writeFile and React's renderToString to hack together a static site. Need markdown? Hack something together with `marked`. Need code highlighting? Hack it together w/ `prism`. Need hover effects? Hack it together with some SSR CSS-in-JS lib or some jsdom-based crap or just vanilla CSS. I guarantee most gatsby-lookalikes do basically what you just did, but with a bunch of ceremony to wrap over APIs (only to expose the same options args) or package the ugliness into more palatable plugins or whatever. The React ecosystem sucks for static sites because most of it is geared towards working with a real DOM and static sites are largely about serializing stuff to a string from an enviroment without a DOM API. 
Many answers here saying about cases when you still can use react even if you don't have to or if it would be not the best answer. My take on this, that React is not an answer in a task that doesn't include templating of any kind. For example, when you write script for statistics collection or canvas drawing. There may be cases when react is not best solution, but still can be. For example, when you need to make a page without much interactivity and state management, but you still can use react as a templating engine. We mainly use React because we have our own components library and most of my colleagues is more experienced in React than anything else, so we can do things faster even if React is not really necessary or the best solution.
So cool! I might have a use for this in the future. I'd like to make games using JS. This is awesome. Keep up the good work!
I mean, where the site you have to build can be a ‚ö° fast thingy not complicated, why use react? It has to serve a real purpose. If it does not well maybe just go static. I doubt you will have .5s load time on 3G with React.
So what Emotion has to offer me that I do not have in styled-components?
SUBBED!
Didn't work in Mobile Firefox either.
Thank you! &gt; I especially love that you can increase the bpm as time passes. You have full programmatic control over the music, so you can change from Major to Minor, or add a shuffle, turn on and off reverb and other effects, or have the laser play a different pitch depending where you are on the screen, and plenty more, etc.
Null. One reason logical consistence either data structure exists or it doesn't. Second is more practical. When you will get an error, you'll get a type reference for calling something on null. Indicating the problem right away. If you try to access property on {} it will simply report that it's undefined, thus leaving a lot of other possible issues to rule out before you can come to conclusion.
Thanks. If you just want to make music with it, you can do that too without having an app or game to use it in. You can use any sound that you can get at with a URL and sequence it in.
Damn this is brilliant
This is such a cool project. Excellent video too. 
Amazing work!
I used this project: [https://github.com/prismicio/universal-react-website](https://github.com/prismicio/universal-react-website) as a starter for our company site: [miso3.com](https://miso3.com) Prismic is great CMS: [https://prismic.io/](https://prismic.io/)
That's seriously cool stuff man. How long did it take to develop? Do you have a strong background in music? Were you able to commit full-time to developing this?
I‚Äôve got one: making an interactive 3D game with lots of custom animations. And actually react could still work well for some applications of that. 
Tried emotion and converted to css and css modules. I have lost almost nothing and got hot reload.
&gt;How long did it take to develop? I took the long way around and actually wrote this in Android first! Along with the gallery concept, it's all been years in the making. But having written it 4 or 5 times on different platforms, I kinda knew what to do this time around. I decided just a few months ago that, bah, port the Android app to JavaScript, and I'm not looking back. Very happy. &gt;Do you have a strong background in music? Yep. &gt;Were you able to commit full-time to developing this? I'm a starving musician, so, yeah, kind of. I only play like 4 hours once a month. The rest of the time I can work on whatever project I like. The Android app could run the same jam across multiple devices using bluetooth, and I made a touchscreen guitar: https://www.youtube.com/playlist?list=PLsOxTsr9xDj5QOnhELHCm1IkFaW3GqjG- https://www.youtube.com/watch?v=zayksxJu3dk With Chrome working as well as it does on mobile now, I can now do this with JavaScript and use Web Sockets instead of Bluetooth. That's what the "Live" button does. This thing has a chat client and multi-user built in. I've been toying with using Web RTC to accomplish the same thing.
Great tool, great great tool.
why javascript for OOP ? someone correct me if I'm wrong but isn't inheritance quite important in OOP, because if so, working with inheritance in JS feels painful
where did you get reference to `props`?
Hello, the editor which is basically 80% of the whole thing is open source yes. Here https://github.com/krasimir/demoit As for the the fullscreen, I'll think about how to solve that.
When you already have a code base written in html and css.
Hey and thank you for your feedback. There is no budget or marketing involved. It's only me (one person) trying to combine CodePen and Medium with some Git-like history tracking. Wordpress is far more generic than Poet. Poet is targeting technical writing where everything starts with the code and evolves into to an article. Article that is actually built of your progress checkpoints which I decided to call "commits" and use a Git-like approach. It is not meant to be a tool for building e-commerce web sites. That is why there is no shiny dashboard for creating pages, neither fancy editor with option for bolding a text. It's about coding web stuff and eventually explaining what you did and how.
&gt;Look at how simple things are in the left column, and how much more code is needed in the right column. &amp;#x200B; And also note how they use shitty code, leaving out braces etc, to try to make the non-jQuery versions less bloated. &amp;#x200B; One of the reasons I like jQuery, is because I can write very tight and easy to follow code.
ELK stack is open source and readily useable. I found the install and setup relatively easy because of the good documentation. But I have devops experience in numerous languages and tooling. A readily available service (elk as a service), which I haven't used though, is [logz.io](https://logz.io). &amp;#x200B;
This is great! I built a full screen electron app for my daughter when she was 1 that would play the Super Mario Bros level complete soundtrack and change the background color whenever she pressed the keyboard. At first it was too just cultivate a reward in the screen when an action happened on the keyboard, but I later evolved it into a tool to teach her the alphabet. But no where near as sophisticated and cool as what you've built! 
No framework had scheduling before React and it's still the only one that does. Async rendering is good and fine, but a framework that can schedule at the core is something else. Have you clicked the last link? Even if you're convinced that what you say is so, it might just be interesting to you nonetheless. The difference that this makes isn't indistinguishable, you can bombard it with render requests and it will do fine, everything else goes down - including multicore gpu driven native apps. That is why it's a big deal.
You're missing the point. Every app will lag once it expends its fps budget, this is where we're at. If you hand Vue/Angular or even the worlds fastest native app just enough views to render, it will choke. That doesn't happen in React if you switch Fiber on. Scheduling at the view core is something that hasn't been done before and benchmarks are not equipped to measure it. 
Great. I've no experience with ELK stack though. Will we be able to create dashboard to show live logs to our developers? Mainly, that's the issue because it's hard to show logs to developers by doing ssh to the server.
You can always keep using older versions of Bootstrap 
Dude, this is awesome. i would be so proud.
Kiefer Sutherland has some cool hidden talents, I had no idea he was a js dev.
Really awesome! I'll keep an eye on it.
i'm not sure if you get reactivity for the update from `null` to the object in the first place. but you could still use [https://vuejs.org/v2/api/#Vue-set](https://vuejs.org/v2/api/#Vue-set) to get around this (potential) issue.
If it's on udemy then that course is going to be on sale alot more. I've seen the same courses and other ones on sale all the time
[https://www.udemy.com/build-a-blockchain-in-javascript/](https://www.udemy.com/build-a-blockchain-in-javascript/) Just take a look \-only 22h left...
Fantastic work! Well done and thank you! If I ever find time to finish any of the games that I started developing over the years then this will be a must-have.
And? They will be back on sale soon enough. They say 22 hours left to get you to impulse buy it but the truth is the sale will end and not long after, hours or days, they will be back on sale again. Take a look at their library and see how many expensive courses are on sale for a fraction of the price. They are always always ALWAYS on sale. And they bombard you with new sales on and on
https://www.reddit.com/r/learnprogramming/comments/7uu98h/reminder_for_people_buying_courses_on_sites_like/?utm_source=reddit-android
React can be build with a shitload of languages...
multi-page doesn't necessarily exclude react. to be honest, my experience is heavily around react, some experience with angular and now working on a POC for migrating from asp + knockout to React (multi-page). I see no downsides in React in multi-page .. if you do, honestly please share.
Not saying any courses are bad or good that you will have to research yourself or find out yourself but my point is you do not have only 22 hours left. I've seen plenty of courses I myself have been interested in on sale and those same courses went on sale again and again several times a week/month. I would be very surprised if this course you're interested will not be on sale next week again
1. could you expand on this ? I see react as a view layer, handling complex state with setState seems very counter intuitive. 2. also expand on this please. I'm not trying to be a jerk but I honestly don't see the connection, React has no opinion on how you handle your CSS. The ecosystem around React (devs + libs) do seem to move a lot towards css-in-js but React doesn't hinder not using it. 3. that means pure vanilla I guess, I guess this could be an argument. 
Fully agree. I see a lot of arguments here but none really hold. Yours actually make sense, when I interviewed for the current company he had a lengthy discussion about migrating away from knockout + ASP. They asked me (I have extensive experience with React) what framework/library I would recommend, I told them 'the one your current dev team has more experience with as long as it's not holding you back (knockout + ASP)'. Obviously I made a case for React but I made it clear that I'd need to assess the devs to say how costly it'll be. 
I partly agree but I see 1 big downside in this. Fully featured frameworks come with a language of their own and a rigid pattern that can hinder the development of your developers. Angular 1 had this, it's both an advantage but I see it as a hinderance, maybe because of personal experience. A lot of times Angular 1 devs would know the Angular 1 API but struggle with basic javascript ( I can give myself as an example ). From a business perspective it makes some sense.
There's a massive thread already on this comment where I and others discuss it, if you look
Be very careful when looking at performance for choosing your tooling. The argument only holds when performance is a hinderance or when there are benefits from that performance. Vue/Ember and others might be a lot of times faster than React (maybe, I don't know), but your use case might never need that sort of performance. In 99% of cases the ecosystem and speed of development of a specific toolset will trump the performance.
I'm the same, I like the idea of styled-components &amp; emotion and tried them both but I found css &amp; css modules enough for component based approach.
Logstash, I remember it used to be some open project, now I think it's under elasticsearch. it had some sort of agent ( think it was called grok ) that you could configure to watch/pickup log changes, do parsing on them ( if needed ) and them send them to your storage ( elasticsearch ). it had a few interfaces, most popular Kibana, that you could use to nicely view/sort/analyze the logs
Okay, thanks for information.
maybe you should give a look to this. [https://github.com/danistefanovic/build-your-own-x#build-your-own-blockchain--cryptocurrency](https://github.com/danistefanovic/build-your-own-x#build-your-own-blockchain--cryptocurrency)
Whst the flip¬ø
Thanks for help.I'm actually found some good material about that.But i need 1 good example with full explanation how it's works and how publis blockchain and how synchronize and much more...but thank You.
Tl,dr: nothing funny happened. Author got distracted, stressed and therefore didn‚Äôt achieve their original plan to learn javascript. There‚Äôs a bit on how they plan to overcome those distractions, but if you‚Äôre not interested, I‚Äôd suggest skipping this post.
OMG this is like totally brilliant!
Would you mind sharing some of your using cases? I am experiencing performance issues while integrating three.js or canvas map with vue, even though I did some clean up in component life hooks, gpu usage and memeory sometimes still goes higher after navigating between pages.
Doing all that inside a template literal is fugly. It's much better to call a function which accepts your props and returns a string. 
Think this would do it. const sortOnlyNums = (list) =&gt; { const pointNums = list.filter(num =&gt; typeof num === 'number').sort((a,b) =&gt; a - b); return list.map(item =&gt; typeof item === 'number' ? pointNums.shift() : item); }
Use a custom compare function as parameter for sort() See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description
Could you please format your code as `code` like everybody else does?
var a = [2, "a", "t", 5, 4, 3] a.sort((a, b) =&gt; { if (a.constructor !== Number || b.constructor !== Number) { return 0 } return a &lt; b ? -1 : (a &gt; b ? 1 : 0) }) console.log(a)
it is possible to post your help with old style javascript because i work on Adobe DC project?
I know you want to, but I suggest that you don‚Äôt I made a bunch of NSFW games, even wrote a porn site (thumbnail kind) and I couldn‚Äôt use them in interviews, I could have spent my time making something to aid in getting better jobs, rather than making something fun. Use GitHub to land you a nice job
This is really interesting! Nice work!
Is there any reason PM2's built in keymetrics dashboard won't work for you? i'm not too familiar with it, it does cost money for more than 4 processes though.
1. When you have persistent state that must interact between multiple different pieces on a page. While JS is not immutable, a framework that at least takes cues from immutability in maintaining state should be more consistent. That's not to say it's impossible to achieve the same result otherwise, it just makes things easier. 2. Correct, react is not opinionated how you implement styles. However most react devs (and guides i've seen) strongly advocate for CSS in JS to promote ease of re-use regarding components *between projects* and proper separation of concern, that's definitely an opinionated topic. What i'm saying is particularly if you have your workplace organized into specific dev/design teams, implementing this may not be the smartest move depending on the situation. 3. Yup pretty much.
If all you're doing is DOM manipulation, then sure JQuery still has value. But if you're building a robust webapp, then using one of the major frameworks is the way to go. I work for a company with a react app and the few places someone chose to use JQuery are code smell to me that I refactor away when I find it.
With React, you write javascript. With Angular, you write Angular.
[removed]
Wow nice work man
I'm saving this. Will surely come back to it. Thanks a lot for sharing your work.
Jaw falls through floor ! Bring the Jam !_!
We've not used keymetrics dashboard though, it seems to be only for monitoring memory and cpu usage.
So you're suggesting ELK stack as well?
You can view the logs on it too, along with custom metrics
I didn't know that's what it was called :) But if it's the above, yes. I used it when I was working in the Netherlands for a company with a very large infrastructure of microservices. I don't know the infrastructure of the ELK stack, but were were sending everything from everywhere and it always felt responsive.
Ha ha your comment is funny but I‚Äôm not sure much would be improved if a government could only use domestic software. 
You do, I always use null and have absolutely no problems :) I write quite a lot of two-way bindings and break everything into smallest components possible, so I guess I'd have noticed if it didn't work like this. But maybe it's also because I always render conditionally, so I don't render a component that needs some kind of data if I don't have it yet. Once I have it and I render it and pass the data as props, that's its default value so it works, maybe that's why? I really don't know, I just guess I got used to writing it in a way that works without really thinking about it. 
Thanks for suggestion :-) It looks exciting though. Going for it ([https://pm2.io/plus/](https://pm2.io/plus/)) work out for us. Appreciated :+1:
Oh Okay. Got it. Looking into it for now ([https://pm2.io/plus/](https://pm2.io/plus/)). 
Hey man, 'tis all good in the hood :) BTW, [desk.os](https://linuxontheweb.org/desk.os) is simply one particular interface into the tech-universe-swallowing behemoth-in-the-making that that is currently called "Linux on the Web". [shell.os](https://linuxontheweb.org/shell.os) is yet another portal into that dimension! That one, in fact, has been getting pounded very, very hard by a single IP on the LEARN (Lanka Education and Research Network) range of addresses in Sri Lanka for the past two nights (I assume it is a classroom sitting behind a NAT). I know there is another country very close to that one with a market that FB has been eyeing like a salivating animal for many years... Maybe we could all get together and talk sometime :)
as a tip, we were using docker containers with consul &amp; marathon and the sort, there was no need for pm2. in doing that the whole logging part was already setup in the docker container, we just had to provide some startup params for the logger to pickup and send stuff to logging service.
Thanks
Generally this stuff can be fairly easy, you don't normally need templates. For instance: [https://codesandbox.io/embed/jp1wr1867w](https://codesandbox.io/embed/jp1wr1867w) Here's a good overview for animation in React: [https://github.com/aholachek/react-animation-comparison#the-results-ordered-by-preference](https://github.com/aholachek/react-animation-comparison#the-results-ordered-by-preference)
Splunk 
`obj.forEach` is not a function and if it were it wouldn‚Äôt walk through the primary keys. Do you just make this stuff up lol
Hi /u/faps_with_lite_mayo, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/spacetimematters, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/5oco, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fruijjj, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Care to show a code sample?
Sadly I think you are right I don't really have time to mess around, I've changed the idea and I'm doing something more PG.
It's brilliant I'm half way through it. What's more the code he uses has no bugs. He explains stuff really well.
Any reason you decided on vanilla js instead of a framework? Just curious 
pipe your logs to cloudwatch
Thanks. Will fix that
When you want to avoid bike shedding and optimise for productivity - in that case something like EmberJS is a great choice
obj['cards'][0]['price']
obj.cards[0].price
Object.keys(obj).forEach((key)=&gt;{}); Honestly I was a little tired, but you couldn't see how it was supposed to go? I could get the submitter not seeing it as a newbie, and my bad. But you should have been able to see what I was going for there. 
yay thank you very much :) I knew it would be something close :)
You converted txt(an object) to a string (called obj...) so you cant reference obj["cards"]["price"]. So your variable names are unituitively backwards for one. But as it is you can use txt["cards"]["price"] //will just be the data OR obj //will look like a serialized json object, aka a string. But rename txt to obj and obj to txt and maybe it will be clearer. 
&gt; ImmortalDB: Like Evercookie but maintained and performance-friendly Fixed title. Because this shit is just as evil.
The name is *BetterArgs* so it would be good to explain _why_ it's better. If it was called BetterArgv then ok. Second, there are 10s of option parsing libraries so it's usually good to help people out and explain why this is different, "better", etc... than the others. 
Nothing was "intended for the web", the web is a collection of standards which just happened and aggregated around html/js/CSS. When react and JSX came along, people screamed heresy and that html and js should be separate ; turns out it works really well. Actually working with css-in-jss reveals the same is true, and allows to neatly scope styles to their components. Nothing forces you to it, but it does work and works well
Well, for one thing, we would be secure in the knowledge that our internal data is not flowing to foreign entitites. Which honestly should be a matter of national security, and possibly treason charges. Like those are our strategies, long term goals, missile engineering designs etc. Also keeping it local means that instead of multinational corporate conglomorates making money and gaining experience we keep that at home. We pay canadians money to create IT systems for the government of canada to use....I know, sounds insane eh?
Thanks. It's slightly better but I think this is a good example of why this doesn't need to be written in JS: it's literally a bunch of needless syntax with one conditional `props.primary` that can be handled via CSS. Though any further commentary on this subject has likely be covered [here](https://gist.github.com/threepointone/731b0c47e78d8350ae4e105c1a83867d). üòâ 
That's great.I am very interested in technology and for politics of blockchain. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
this was a great post
As everyone else is saying, ELK stack (ElasticSearch + LogStash + Kibana) is the right answer. I'll add on to that: _hosted_ Logstash is the way to go. Sure, you can build your own ELK stack set of servers, and you can train someone to learn how to set them up, maintain them and monitor them, but cloud hosting of them is so cheap it's not worth it. I've used two cloud hosted services: ElasticCloud and Sematext Logsene. Sematext is by far the better service. It is cheaper, requires less maintenance and oversight, designed exclusively for logging, and has a bunch of nice monitoring features that ElasticCloud does not have. Most importantly, it has an "archive to Amazon S3" feature, so you can keep a small number of recent logs on Sematext, and back up logs indefinitely, reliably, and cheaply at S3.
Recommending an advanced js library to someone, who says they are new to this, does not make this easier. That's like giving someone a motorcycle before they can even ride a bycicle. Adding/Removing elements, adding click event listeners using Vanilla.js is significantly easier than telling someone to just use vue. &gt; Would it not make it easier? No, it wouldn't and it might even scare them away. 
It's not. But okay lol
Thank you! 
This is very cool! I wonder how difficult it would be to add a layer to hook into pulseaudio/alsa and get sound right in my terminal
not sure if people are upvoting as it is a nice list of things to consider adding, or of things to look out for, but thanks for the info.
&gt;var a = \[2, "a", "t", 5, 4, 3\] a.sort((a, b) =&gt; { if (a.constructor !== Number || b.constructor !== Number) { return 0 } return a &lt; b ? -1 : (a &gt; b ? 1 : 0) }) console.log(a) Elegant coding, but I realised that though this works on the above example, it would fail if a\[0\] was any number &gt;3 in the above array...
frameworks are bad. &amp;#x200B;
Still undecided... but, I'll think about it.
Does it preload the music assets? Or is that on the game dev to handle &amp;#x200B; &amp;#x200B;
You can still use the entire existing postprocessing ecosystem when using Linaria. The native extension doesn't really matter anymore as you get the same syntax highlighting, autocomplete and linting* experience when using CSS-in-JS. The advantage is you directly map your component's prop to styles. Not prop to class name then class name to style. It's more ergonomic. It also plays well with JS tooling in addition to CSS tooling (such as static analysis tools can tell you about typos, unused styles etc). There's less room for mistakes due to the stronger integration. * Linaria's linting experience is the same as vanilla CSS due to build-time evaluation. Runtime CSS-in-JS solutions don't have as good linting.
Sure, scheduling is new... But someone from ember could say: "Async rendering is good and fine, but a framework that precompiles templates into opcodes run by a VM is something else" There first link is a shitty app that had no reason to be door except Dev stupidity. Glimmer would have likely sped up the same type of app on ember, by being more efficient, rather than limiting render ops. Dan's demo is certainly interesting, but completely contrived. This doesn't prevent jank for all use cases, it eliminates it for apps that were rendering hundreds of thousands of deeply nested dom items that change all at the same time while other JS animations play over top. I'm positive there are features that will only work in react thanks to this tech... But the ember devs could find a scenario where their VM is key, but fiber fails... It doesn't mean that everyone in the world should switch to ember. I don't think the absence of this tech has been holding the community back. So, like I said earlier, each framework optimizes for specific cases they think are important, but in general, their performance is indistinguishable from each other. Demos will prefer one framework over another, but anymore, they're all contrived scenarios to showcase the frameworks'strengths and ignore their weaknesses. 
Try this: /(^$)|(^\d+ \d+ [NESW]$)/ 
I've recorded a video about new [Javascript ES10 features](https://www.youtube.com/watch?v=8Ie7hHxVbA8)
:) I mean just 171 bytes away, dude.
You honestly think adding and learning vue is easier than adding a click event listener? 
This is great ! Works perfect. &amp;#x200B; Could I please ask for a short explanation ? How does (\^$) capture an empty field? How does \^/d+ capture a number between 0-9 and \\d+ a space? &amp;#x200B;
Won't this match multiple digits before each space? So in theory `11 22 S` would pass? I feel this would work slightly better (just dropping the + signs): /(^$)|(^\d \d [NESW]$)/
Hi /u/ndrw17, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hackertomobile, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/valcarni, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/leopoldtaylor, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MrHassanMurtaza, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/uuuzzz, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/IvanQuinn, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lnxosx, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yaror, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hennacoin, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dukma, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Very interesting! Are the results region specific? For example, are they based on load times when the US? If I was in mainland China would I see different results for baidu libraries? Or same for Japan and Hatena blog.
You make some good points despite your cynicism. It feels like ie11 is existing non-conforming, the government can‚Äôt simply tell everyone to start using Chrome.... it‚Äôs the same business relationship, just easier on developers. A national infrastructure that supports domestic software is an interesting idea, although tax payers may not see it that way. Maybe Shopify can build everything. Also, I am curious, what is your take on open source software? 
This is close enough to classnames that it doesn‚Äôt need to exist.
Ohh, gotcha. Makes sense. Yeah I didn't really think much into 'Args' in the name. It wasn't meant to say it was better than another package, just better than regular arguments ('args' or 'argv') 
I wasn't able to find much on this topic, especially without using a context. I figured a write up on my results might help someone out! tl;dr creating a hook for making api requests using the useReducer hook.
[https://www.reddit.com/r/webdev/comments/aqiaov/animating\_urls\_with\_javascript\_and\_emojis/](https://www.reddit.com/r/webdev/comments/aqiaov/animating_urls_with_javascript_and_emojis/)
just a suggestions, but wouldn't a regex replace everything that inst thoses symbols. the iterate though the new string and just check every other char, and +1 from your current char to see if it is the appropriate closing?
Do you honestly want to hear me out or are you just looking to get validation that you're right when you're not?
Interesting, thanks for posting! üòä
The problem as stated is ambiguous. Can you be more clear?
I agree with [Parsley-pw](https://www.reddit.com/user/Parsley-pw) on using the regex to shrink your actual search strings. +1 there In addition to that, IMO add initial checks, 1) is the total number of brackets even? // if all brackets are closed they shud be even 2) to check the corresponding closures, its not enough to check just the +1 characters, they need to be checked from the middle inside out ( \[ { to be compared with } \] ) - = 6 characters compare middle out - a)compare n/2=3 withn/2+1 = 4 b) compare n/2-1=2 with n/1+2 = 5 till end of string 1 2 3 4 5 6
Thank you ^_^
This question is definitely trying to detect if you have a degree or not lol. The solution is as simple as "push opening brackets onto a stack, pop them off when you encounter the appropriate closing bracket, then check if anything is left on the stack when the string ends"
That's the way. I didn't catch the basic idea. 
oops, I wrote it on my cell phone. I didn't test it yet. I saw an error in it.
Yeah, but the only totally dark part about js are regexp. Should I learn it as a priority for a junior fronted position?
When your application really, really doesn't need to be a SPA. Don't get me wrong - I love using React and Elm to build complex apps that run in the browser. And when you're living in the world of consumer-focused apps where having sites and apps that feel super snappy and responsive, it can feel like React is useful in almost every project. But consider that there are a *ton* of web apps that are never seen by the public. I'd wager that there are more internal, line-of-business enterprise web apps in existence than there are consumer-facing web apps. And for a huge number of these line-of-business apps, there isn't much advantage in adding React. There's a good chance that these applications are going to be in use for decades, so the fewer moving parts, the better. And plenty of LOB apps mostly involve entering data forms. For applications like these, you might be better off sticking with something boring like .NET Core or Java. These apps often don't need JavaScript at all, although they often use something like the jQuery validation library to automagically do some client-side validation to make things a little nicer for the user. There's usually no extra code needed by the developer to add this client-side validation. Last time I did something like this in .NET, I added data validation annotations to the models in C#, and the framework created forms for the models and automatically added client-side validation - and the same annotations ensure that server-side validation only requires a single method call. So I suppose all of that is a very roundabout way of saying that React is not the answer in boring line-of-business apps where a SPA framework will add complexity but won't provide much or any ROI. 
The K, Kibana part helps with creating the dashboard. Check this out: https://www.linode.com/docs/databases/elasticsearch/visualize-apache-web-server-logs-using-elastic-stack-on-debian-8/
What's the use case for this sort of thing? If the user clears their cookies: so what? If the browser clears local storage: so what? I'm struggling to think of any use case aside from ads and tracking that should necessitate any data being replicated across all of these storage forms.
Does it include non-web world? If so, when your project demands a desktop application, and stuff like Electron is not suitable (too large bundles). Then you must go .Net (probably C#) or even lower-level stuff like C++.
Honestly, you don't need a CS degree to solve this (I certainly don't have one). The only data structure you need to be aware of is a stack, which is really just an array where you only ever push and pop. You certainly also do not need regexes. Here's a straightforward no-frills solution: function verify(text) { const stack = []; for (const c of text) { if (c === '(') stack.unshift(')') else if (c === '[') stack.unshift(']') else if (c === '&lt;') stack.unshift('&gt;') else if (c === stack[0]) stack.shift() else if (c === ')' || c === ']' || c === '&gt;') return 0 } return 1 } I used shift/unshift because checking `stack[0]` is a little less cluttered than `stack[stack.length - 1]`, but other than that it still works as a stack.
Tax payers should see it that way. You know what a developer like me does? Head full of 10+ years of hardcore knowledge? I sit on welfare because no one will hire me. Meanwhile they'll give the Trump administration a nice hefty tax cut off what we pay to Oracle (billions of dollars) to nearly tear our entire government to the ground by freezing our ability to pay public servants. Like I see these big big projects that should be completely 100% us handling it because its our internal systems, they are critical to us surviving. Then they just freeze us out of the whole thing. We are handing our life support systems into these foreigners hands and paying them for it while guys like me sit here with our thumbs up our asses wondering if we can afford the gas money to drive to the store. I like open source software, I use linux mint, and I develop using linux web servers.
Hi /u/prequelme, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lksMisty, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NThompson_, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Doesn't maintain context const joe = { name: 'Joe', getName () { return this.name; } }; console.log(joe.getName()); // Joe joe.getName = onceOnly(joe.getName); console.log(joe.getName()); // undefined or window.name/error (strict mode) in browser
this is pure and this is simpler. Saying this is just like saying Redux doesn't need to exist because there is Flux
Sigh...
&gt; I certainly don't have one If you don't mind me asking, what kind do you have, if any?
A 3 year college certificate in electronics. Which for a computer engineering career is pretty much worthless :)
Let the needless micro-optimizations begin!
Electronics _seems_ related! I have a 4 year Art degree (which took 5 years to get). You might think, oh, that means he can develop _and_ design! But, despite the supposed merits of my degree, anytime I try to design anything, it comes out looking like shite. ;)
I'd say no. There's plenty of more important things to learn (testing, version control, common libraries, css flexbox/grids, http, etc) You can usually figure out a simple regex via googling and regex learning tools. Complex regexps don't come up that often because they are usually hard to read even for seasoned programmers anyways.
 it works this time. ``` var a = [9, "a", "t", 5, 4, 3, 0] var picked = [] var nums = [] a.forEach((x, pos) =&gt; { if (x.constructor !== Number) { picked.push([x, pos]) } else { nums.push(x) } }) nums.sort() picked.forEach((x) =&gt; { nums.splice(x[1], 0, x[0]) }) console.log(nums) ```
Cool, this will be useful.
Closest thing to day-to-day programming we learned was logic gates and karnaugh maps and a we had a lab about copying hex codes into MS debug make a PC send bits to a now-defunct serial port connected to a breadboard w/ some LEDs (so I guess sorta similar to doing arduino stuff?). We also did some math by hand for some very specific stuff (e.g. fast fouriers), which may sound impressive but frankly was just regurgitating equations using high school level math. I don't remember most of it anymore :P
&gt; I don't remember most of it anymore :P I know the feeling :D
This was a cool guest post we had today on building a Vue.js SPA for e-commerce. I'm not a coder, but my team thought it was cool and I thought I would share! 
Hi /u/sushant_jadhav, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks so much! I just did as instructed :) Sorry for the inconvenience! 
Checking +1 from the current position wouldn't quite do it. If you remove all non-brackets, you could still have something that reduces to: ``` ((([[[()]]]))) ``` which is properly nested, but wouldn't be recognized as valid using the technique you suggest. I may have understood what you meant, though, and I apologize if that's the case. 
[removed]
In case you're interested in additional reading, the latest version of Sedgewick's Algorithms book covers this exact question using a stack. It's in Java, not JavaScript, but the lessons you learn will be fairly easy to apply in any imperative language. 
NPM download statistics are far more indicative of what noobs and junior devs are fiddling around with, usually because they read something in the ‚Äòonline community‚Äô. It‚Äôs a whole young hipster subculture which, no offence intended, has little to do with what people ‚Äòin the industry‚Äô are doing, especially at the corporate level. If you are learning, don‚Äôt put a lot of stock in NPM download statistics. It‚Äôs a very distorting source of flimsy significance that veers the precious, limited focus of people learning webdev. I can‚Äôt help warning people about that. Learn a basic stack, and only learn trendy stuff when the significance comes from the fact that you know for sure learning it will help get you a job. I also think a lot of developers who make these NPM packages, or groups of devs who are heavily invested in certain ecosystems, try really hard to push these download numbers by writing blogs and articles. It‚Äôs like SEO, they want to inflate the relevance of their stuff or their ecosystem to make their project/skills seem more impressive. 
My advice would be do something simpler. I went through a bootcamp recently that is prestigious for producing coders in my community and we had to scrap features we thought we would add. Think of all the stuff in a reddit clone. Upvotes. Downvotes. Threads. Titles. Text. Comments. Deleted comments. Edited comments. Whether someone has been kicked. When a subreddit was made. How many users it has. How many are active. I'm not trying to piss on your parade. Apps are not successful unless they have a unique spin on an existing idea. A 'reddit clone' sounds like just that--a clone. Make something you wish Reddit was, not what it currently is. 
Huh, ya, that's how I went about it sort of. Just recursively matched completed brackets (like /\([^()]*?\)/) in copies of the string and removed those. Concatenated the resulting string from each run, then check if that contained any of the brackets in it. Could easily be cases that misses, but time limit and all. Cool seeing so many different solutions.
Saying "hey are bootcamps worth it" is like saying "hey, are colleges good? It boils down to the people teaching you. The kind of teaching style. How well you get along with your classmates. Whether they give you time for lunch and R&amp;R or treat you like a peasant who has to code x amount of lines before you can take a break like some nightmarish startup might. I recently went through one. I wouldn't say I regret it, but having a bootcamp end in December is just BAD. Startups do not hire in December--or much in January, at least not here. If they have stockholders, their fiscal year ends in March so they are just trying to coast by without having to tack on more workers. Maybe that's good in some ways. Gives me time. But it's also led to situations where a company said they were not currently hiring and then a week later one of my classmates was hired by them. They didn't post the job. Not sure how she got it. But good for her I guess.
I agree, and I love it. Been fussing with technology as a child, and I think its so awesome to create and problem solve. When I get myself into the industry I hope to look into game dev also. Thanks for you input, I agree with it all!
You forgot to bind joe. You should care about the context: `joe.getName = onceOnly(joe.getName.bind(joe));` That's how js works. Here is how you can spoof context: ``` const jane = { name: 'Jane', getName: joe.getName, }; console.log(jane.getName()); // Jane ``` If you just take a reference from a method (without binding), it will be impossible to recover the initial context.
classnames is pure as well. There is an impure "alternate bind version" for the edge case of non-ES5+ environments using css-modules, but they recommend against it in favor of the pure "dynamic class names" approach. &amp;#x200B; The only way in which decider is "simpler" than classnames is that it only offers the object syntax, the api is otherwise the same. Seems like more of a "missing feature" than a "simplification". &amp;#x200B; Regarding size: classnames is 371B. I'm not sure a 200-byte savings is worth forgoing a well-known, years-old package for somebody's newer, less-useful clone. &amp;#x200B; "Saying this is just like saying Redux doesn't need to exist because there is Flux" - This is not an accurate comparison. Flux is an abstract concept, a pattern that is implemented by redux. decider is a concrete implementation that is nearly identical to another concrete implementation, classnames.
I don't want to bind. joe.getName = onceOnly(joe.getName.bind(joe)); const superJoe = Object.create(joe); superJoe.name = 'Super Joe'; console.log(superJoe.getName()); // Joe (not expected Super Joe) `onceOnly` breaks normal function this binding - something core to how js works.
Lost me when it claimed that variables aren't hoisted, only functions. That's wrong. Here's a much better source of information. https://www.digitalocean.com/community/tutorials/understanding-variables-scope-hoisting-in-javascript And "the force"? When did Morty ever talk about The Force or Jedis?
&gt; https://www.digitalocean.com/community/tutorials/understanding-variables-scope-hoisting-in-javascript Link claims let/const isn't hoisted, but they are too (hoisting used to define the TDZ)
I've recently did something similiar for fun and I've decided to solved it without reasonable stack solution. I went with something like that: [ '()', // true ')(', // false ')()', // false '()(', // false '())', // false '((())())', // true '((())()', // false ].map(x =&gt; { let result = x; do { prevVal = result; result = result.replace(/(\(\))/g, '') } while (result !== '' &amp;&amp; result !== prevVal); return result === ''; }) So the main idea is to find pair of parens \`()\` and remove it, than repeat the process and check what was left when you start looping without changes in the string. I think it could work with other kinds of brackets.
It'll download all the right files when you do "prepareSong()" or "prepareSongFromURL()". Also it uses IndexedDB to store them so you aren't downloading them over and over.
Actual regular regular expressions can be learned in an hour. They can be useful for validation which isn't that unlikely to be a simple task during an interview either.
&gt; Is JQuery shorter? Sure, a bit. Is it saving me enough time/effort to warrant including an entire extra library? No, not in my opinion. That's because your VanillaJS code is _not_ equivalent to your jQuery code. Most obvious differences are that it can throw, it only handles a single element, scoping can screw you over unless you control entire DOM (so you are not writing a library/reusable code) and query engine is not quite as powerful as jQuery's. Your example also handles an extremly simple, barely realistic use-case. A real page will almost certainly need to use event delegation, in which case jQuery's `on` will make your code _vastly_ more readable and organized. Sure, you get some performance gains with Vanilla, but as a wise man once wrote, premature optimization is a deadly sin. A simple fact is that jQuery was made obsolete by _modern JS frameworks_ and not VanillaJS. If you are using direct DOM manipulation for some serious work in 2019 like some dinosaur, jQuery will still save you a lot of sanity compared to raw DOM. Not really sure _why_ would you do serious work with VanillaJS __or__ jQuery in 2019 instead of a proper framework but still, jQuery wins easily and the sad fact is that most of the time VanillaJS is only useful to impress your peers.
Yup it's a basic stack question well everyday is a school day üòÉ.
Im usually super snarky about everything but this is really badass man. 
What is returned is a bad code review :P &gt; is (t,kv) the accumulator and the current value? yes, `t` is the accumulator and `kv` is the kurrent value. You have to be careful though because this `t` is shadowing the `t` from the original function parameters being assigned to `x`. That `t` us also used in the reduce defining the starting value of the accumulator if it exists, or defaulting to `{}` if it does not. And if it does, these are the same value anyway (both `t` variables being the same). From there you can break it down. In `x`: `fr` is some object, `f` is some function, `m` is some other function, and `t` the accumulator object that may or may not exist that will default to `{}`. These all work together to possibly update the `t` value and return `t` back in the reduce callback through the comma operator (notice the little `...,t)` at the end there).
Eh, you can certainly review syntax in an hour if you already learned it before. From zero, an hour might cover the basics of `.`, ranges and quantifiers (`*`, `?`, `+`). Maaaaybe booleans, capture groups, escapes and lazy matching. You're probably not gonna get to anything starting w/ `(?` (e.g. named capture groups or lookaheads) or flags in an hour. Backtracking optimization takes entire books to understand. FWIW, some people say learning git also takes an hour. For everything, there's a certain level of proficiency you can reach by putting an hour in, but often you need quite a bit more time practicing to get fluent in the basics and graduating to industry-level skill level.
If/when Web Audio API is supported by node.js it would work out of the box. This could be an option: https://github.com/audiojs/web-audio-api/tree/master/lib
Part of the trick is `Object.entries`.. That takes in an object and returns an array of all the Key Value pairs (which I assume is what `kv` stands for: e.g. ``` $ Object.entries({foo:1, bar: 2}) [ ["foo", 1], ["bar", 2] ] ``` so in each loop of the reduce `kv` is an array where they key from the original object is `kv[0]` and the value is `kv[1]` Took a swing at expanding out the function and came up with this: ``` const x = (fromObj, filter, mutate, toObj) =&gt; { return Object .entries(fromObj) .reduce((accumulator, keyValue)=&gt; { if (!filter || filter(...keyValue)) { accumulator[keyValue[0]] = mutate &amp;&amp; mutate(...keyValue) || keyValue[1]; } return accumulator; }, toObj || {}) }; ```
First off, what the hell? Who gave you that problem and are they just trying to be a try-hard that doesn't know how to write readable code? Or was this passed through a minifier and is what was spat out the other end? Either way, fuck whoever gave you this problem. So, inside of the reducer we have this function: ``` (t, kv) =&gt; ((!f || f(...kv)) &amp;&amp; (t[kv[0]] = m &amp;&amp; m(...kv) || kv[1]), t) ``` Here, `t` is definitely the accumulator and `kv` is a key-value pair as an array of `[key, value]`, which comes from [`Object.entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries), which takes an object and turns it into an array of arrays of `[key, value]`. Next, if `f` doesn't exist (or is false), or `f(key, value)` is true, we set the result of `m &amp;&amp; m(key, value)` (a boolean) to `t` at the current key. Then we return `t` the accumulator. Here's the function unminified: ``` const r = function(originalObject, f, m, initialValue) { return Object .entries(originalObject) .reduce((acc, [key, val]) =&gt; { if (!f || f(key, val)) { acc[key] = m &amp;&amp; m(key, val); } return acc; }, initialValue || {}) } ```
[https://github.com/Dallas-Oliver/Flickr-API](https://github.com/Dallas-Oliver/Flickr-API) Heres my try. my API\_key is in there but idc. I would appreciate any feedback. thanks friend!
If you said yes, my plan was to go over it with you. As I have looked at your comment history and it appears that you are new to js also. 
&gt; But. In the past few years, but also overall, I get really bad or very basic answers. Senior devs clearly having many years of experience could at best give partial and mostly incomplete answers. I've noticed this in the interviews I've conducted as well. I always ask about prototypes. I think they're fundamental to the language, even if they're not used so much anymore, at least not directly. If someone is familiar with inheritance in JavaScript, they should at least have heard about "prototypes" even if they never refer to it in code anymore. `this` is also important. I have not yet been able to experience the bliss of this mysterious code everyone always refers to that is able to avoid the use of `this`, so anyone coming into my group better know what `this` is, how its used, and where its value comes from. &gt; What is your view on a swift and fun real-world-based FE interview? My interviews (often as the technical screener) are usually 3 parts: a question and answer section which covers basics like prototypes and things of that nature, a coding exercise involving a data structure that needs to be converted into HTML (covers basic MV* along with some CSS), and finally a mock code review which is a git repo with a dead simple app that is littered with errors - anything from variable typos to race conditions. I'm told the code review is quite fun, and surprisingly helpful in seeing how much people understand and can debug code. Altogether these take about an hour, though depending on skill, I may have to speed things along, especially because I want to give people time to ask questions of me at the end.
Ask yourself what this gives you over just doing: ``` if (DEBUG) console.log('debug on'); else console.log('debug off'); ``` 
If you want to disable functionality on a conditional basis you should wrap up the conditions in a handler function. Then send all work to the handler. If you ever need to change things you will only have to change the handler as opposed to finding and replacing every ternary declaration.
I'm having trouble thinking of a practical use case for this. It's great to describe an API (since we need that to use it), but how would I use the npm module?
Hi /u/shiikurox, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I don't like it. Why not: console.log(`debug ${DEBUG ? 'on' : 'off'}`)
I can't say what priority learning regexp should be but I would learn it. It's one of those universal tools I've used in every language. 
That would make anyone used to windows / .NET super twitchy. Linux, not so much. I think it depends on who is stuck maintaining and using the code.
Mainly less typing and I think it looks cleaner and more concise.
Tell the idiot who have you this problem that x=ligma, because that is the response they deserve. 
You save what, 8 key strokes, 10 max?
I'm not much of a framework guy, but this seems to have some pretty unique requirements. On desktop the UI shows a main panel on the left half and detail panel on the right half. On mobile it just shows one at a time and gives you a back button. You can see that by resizing your browser window to portrait or doing ctrl+shift+m on FireFox to go into mobile mode. I doubt any framework out there would make that easier than just doing it myself. It borrows from the Android pattern of using fragments. I also want to be able to say show 3 panels side by side, or 2x2, so I planned for that. I also just started writing it (based off the Android app I had written) just to see how it would go, so it started vanilla and I just never saw a reason to do anything besides what the browser has available. 
Good point about support... didn't think about that. Seems like it's been widely supported for a while though: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator 
times how many times I use it in the project. Could be a lot!
or https://github.com/lukeed/clsx
*visualized - we've just released the new version of graphql-editor. This link shows github schema visualized as a graph 
&gt; I don't know for sure that short circuit behavior is required in a javascript implementation It is defined in the spec and has been in the spec since forever. I'm not saying that people should do what OP proposes (they shouldn't), but this particular argument doesn't really have much merit. I also don't get your argument about Windows vs Linux or how is it even related.
This won't work if I don't want console.log (or any other function) to trigger if debug is off. ``` DEBUG &amp;&amp; console.log('debug message'); ``` 
Thank you! This is the future. I've been around before jpeg, when gif was compuserve owned. Grab that code now, it will be used on everything someday.
That wouldn't be ternary then. You can also bake this stuff into your log call const log = (...args) =&gt; DEBUG &amp;&amp; console.log(...args); ... log('debug message'); // either works or doesn't
Not really a huge deal, I feel like if you've got the basic premise (keeping a total of the # of left braces and subtracting from the count every time you encounter a matching right brace), your interviewer could have definitely gotten you the rest of the way to using a stack to do this efficiently. Probably something useful to know if you have the urge to ever build a compiler, too. 
Alternatively you could open up Chrome and use its console and do whatever you want to the music: music.getPart("Hip Kit").data.audioParams.gain = 0.25
Alright kid, 1) This is a new user account and not my main, well it is now. I am not entirely new to JavaScript and have used it before and FOR dom manipulation and dynamically creating elements. So, maybe do more research first. 2) It is easier to do it with Vue due to verbage of creating elements in JavaScript and lack of verbage in doing it in Vue. Why would I go through the trouble of adding an event listener for a dom element when there are THREE professionally written framework/libraries for this? Step 1) Create a component that has the inputs you need (or one for each) Step 2) create a component for the forms Step 3) create a component that calls those other two components Step 3 sub A) Have that component have a click function that adds a new component. Event listener in JS (addEventListener('click', function(){/*some shit here*/}) Event listener in Vue: &lt;div @click="doThing"&gt; || doThing: function(){/*some code here*/} Your concept of what is and isn't easy is flawed. Learning something isn't hard if you want to learn it. I learned Javascript in school and don't care to go and relearn it because... well.. it's kind of useless unless you're : A) writing modules or libraries to use in web development (node, angular, etc) B) using said modules and want to understand them. I understand them enough through my understanding of JS that was taught to me in school. And I learned more doing something that made my life easier than writing unimportant code that someone's already done for me. 
I like this solution for this particular use case a lot. My question was more about the overall use of ternary and whatever `DEBUG &amp;&amp; xxx()` is called for uses outside of variable assignement.
I think the linter is a good source for guidance. If the linter doesn't like it by default, you probably shouldn't do it. For me personally, use _specifically_ of the ternary operator without assignment bugs me. I always want that format to be `result = condition ? if-true-value : if-false-value`. The use of the short circuiting in logical operators (`&amp;&amp;` and `||`) is a little more ambiguous, though, and should be ok, but for simple cases, nothing beats the clarity of a good-ole `if` statement, even if it is a couple of extra characters. With the `log` example above, the logical operators actually work better because it also simply allows `false` to be returned from the log if it isn't "turned on" which could potentially also be useful.
This is a very useful answer and I like your thinking about ternary vs logical operator use. Also, I'm definitely stealing your debug log function above. Thanks!
Stupid question: why? I don't mean that in an asshole way at all, more just ... what are the benefits (and/or costs) of using a hook vs. a normal call?
How would this library compare with redux-starter-kit?
There's little to say, really, and most has already been said by senocular, but I'll add two points. One is you both mention "even if they are not used [directly] so much any more" and I don't know. I guess I think they _are_ used, both directly and not. _Scope_, _Context_, you simply _can't_ not use them, because it's not so much about _using_ but about how things work. _Browser event handling_, well, I don't care if you use a library or a framework or if you don't, it's still necessary to know how that works at some level. Also, those "Frameworks and a few basic patterns" do not cover _by far_ what is needed for writing good code. What they _may_ provide is enough to "assemble together pieces" one does not really know how they work... which takes me to the second point: That lack of understanding may, in some (many? perhaps) situations not be a problem at all. One may get away with assembly pieces together and successfully build something... as long as nothing unexpected happens. Because once something does happen, and it doesn't have to be something extraordinary, then that lack of understanding _will_ kick back and that person will most probably be completely unable to solve the situation. And again, it doesn't have to be something extraordinary. It may just be some slightly different requirement, or some unanticipated usage, or a performance concern, or a bug, situations which will very probably occur at some point -unless the things you're building are basic an trivial. Unfortunately, though, what you've seen is far too common. Where I live, it's almost disheartening. And what's worse is that, to some extent at least, it is being promoted by the industry at large -companies and the developer community, both-. There's this constructed perception that "anyone can program _without learning_" or with minimal training. And yes, _anyone can program_ indeed, but not without learning. It does actually feel like _we_'re going into a path of "code labourers" or "code operators" that assemble pieces with more or less finesse, and where somehow "we strive for the best quality" lives along "oh, come on, horrible bugs and spaghetti code are common, right?" and the meme of the dog at the computer saying "I don't know what I'm doing" was never a joke.
I care
Kid? I'm probably twice you age and have been coding as long as you've been alive. I did my research, I looked at your past year's worth of comment history. If you actually knew what you are talking about, you'd know how to pick the right tool for the job. Adding one of the massive top 3 libraries vs the less than 10 lines of code required to complete OP's task proves the point. Telling a newbie to learn vue vs understanding the absolute basics of javascript is only going to cause frustrations. Your latest comment proves you don't understand how js works or how vue works. You might understand where to put certain keywords in a vue component but, against looking at your comment history, you probably don't understand why. Creating an element and adding an event listener in vanilla.js is two lines of code, runs extremely fast, requires no external dependencies and adds no technical debt. The function the event handler calls, that deletes the element, another 3 lines. Again fast as hell in vanilla.js, no external dependencies and no technical debt. The problem with learning how to code in school is they teach you some library and how to build something simple. They don't take the time to teach you how it works or why it might be better to use something else. 
If you're already using OpenAPI for something, it's amazing, otherwise not so much. OpenAPI itself as a standard has a lot of great use cases though. In my case, I'm building [an HTTP development tool](https://httptoolkit.tech/view/). This library means when I intercept HTTP requests to debug them, I can find the matching one of these 1400 API specs immediately, and then retrieve a bunch of metadata about the endpoint, and immediately add the description &amp; a link to the docs, add explanations to request parameters and responses, and even automatically spot missing/invalid/deprecated requests. Being able to match arbitrary HTTP requests up with a detailed spec &amp; documentation on demand is neat.
Somebody make an example that uses the worst in each category.. you know.. for science
no, flux as a facebook implementation. There's a facebook lib called flux and it's abandoned since redux is out. just compare the api. Classnames becomes as simple as decider only with css modules, but it loses purity and you can't use it on functional components anymore.
it's heavier and you can't use that with css modules. &amp;#x200B;
Cool, I'm not criticizing, this is a very impressive project. Having built out many projects with both vanilla and various frameworks, I would say one of the biggest reasons to not go fully vanilla is that it's so easy to create a mess of spaghetti. Also if you want to open source your project, it's much harder to get people on the same page with how your project works and how it should be expanded if you built everything from scratch. I'm not really into UI libraries like Bootstrap but for complex client side projects React/Vue provide a lot of value.
Having recently learned about the GPT library and its similar system, I always thought it was doing some complicated shenanigans behind the scenes with the command queue. Thanks for showing how simple it is.
I hope these questions are not part of Front End interview stuff or i would be fucked 
Thanks for the suggestion, man.
Thanks!
Asking why is never stupid! I gloss over this a bit in the post, but the main reasons I found are the ability to give state to functional components and re-usability. I can add this hook to the body of any functional component and it instantly has the ability to make requests to an API and store the status and result of that request in local state. This only takes one line of code (not including the import)! I can also continue to extend this hook with additional functionality if I need to. Oh, and hooks can be called from within hooks, so I could actually wrap this hook in another that implements some re-usable logic for calling a specific API. I hope that all makes sense.
It was for a remote position so I guess they wanna be sure to take someone who has really good programming skills. Other interviews have been much easier.
Well it does show that i have a big gap still in JS :( 
&gt; This literally has nothing do with Angular. This can also be done with proper caching or service architecture on the Java side Wrong. That's not how JSF works. Again, it wasn't specific to Angular but specific to JavaScript. &gt; At least from the perspective that you think JSF apps couldnt do this just as fast lol you are clueless Also wrong. To again point this out: JSF does NOT build ANY of the template until ALL data is parsed, whereas Angular (and this IS Angular specific) begins building the template as soon as you navigate to the page and updates it based on what data gets parsed. So even if it did parse the data at the same speed, Angular would STILL be faster. You're fucking stupid.
&gt; return 1 If iteration reaches the end of the string, return whether the stack is cleared.
Hi /u/Nerdahan, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Jsf works perfectly fine with large data sets and computation. Stop being a moron. You can literally leverage ajax in jsf and build modular components that don't inflate the view phases. I'm sure your codebase was just garbage like your attitude. You literally don't understand web development. So you are rendering angular on the server then?
Take a look at Jsperf if you are into this sort of thing - it‚Äôs a great tool.
or...you know...for business as usual. https://jalopnik.com/
You're wrong. On all accounts. And still an idiot. You're not nearly as smart as you think you are.
If you're working on e-commerce sites, then a strong correlation has been shown between perceived performance and conversion rate. React (and SPAs frameworks in general) isn't good at getting content on the screen quickly, especially in mobile. One solution is to server-render (in ecomm' it can be considered a must anyway, for SEO, and to be able to cache the generated html in an edge server) and only hydrate client side, but you still pay a price in time-to-interactive: you're showing content on screen, but the interactivity comes in only after download and parse, which isn't a good perceived experience. Static site generation here is not usually an option (or not an easy one) if the site you work on is big and includes personnalisation. Note that you still can overcome the issues and use React, but the investment at that point will be big in tooling and optimization techniques (Walmart published several articles about that. They built a service called Electrode on top of node to be able to server-side render and cache efficiently their React fronts. But not all companies have the engineering power of Walmart...). But the requirement that would kill the ability to use React (or Vue, or angular, etc.) here is if you can't bring node.js (or any other server-side js flavor) in. Now you can't server-render efficiently. You'll use a templating language from your server language and you won't want to duplicate the effort with React components. So you'll go a route where you just add minimal js in your front, just picking the interesting concepts from the hype frameworks to drive your architecture, without botching your perfs. 
It's amazing how large some of these scripts can be. I was trying to improve our page speed score and found that Intercom was 300kb minified \*and\* gzipped. Absolutely insane. The widget almost has more js than the entire site combined. 
Nice! That definitely would have passed that test. If that were a project on the job I'd have asked for rework in a code review for a few things, though. You didn't escape the variable used to create the 2 URLs. It could be used for something nefarious, but it could also just break the search that the user was trying to send or the resulting image URLs. You called a variable 'n'. I'm fine with the use of 'i' because it's pretty commonly used like that and it's just an index for a loop. (Hence 'i'.) But n is something that I immediately groaned at. I'd much rather have seen you name the function argument 'text' and change 'n' to 'json' instead. Or just pass in the parsed JSON. Another bonus would have been putting in good accessibility stuff, like alt tags or captions on the images with the titles from the results. But overall, it was good, clean, readable code using modern JS. 
Lol you can't acknowledge much of anything. Apart from showing you how to do it in real code I don't know what to tell you. Believe what u want. Was probably the right move from jsf regardless. Too bad you got roped into angular which is already trending down because it's over engineered garbage, typical Google bullshit. But I'm sure youd suck angulars dick if it had one.
I‚Äôve used it. Definitely a great tool. For testing single math operations I wanted to really be able to drill down, so I did it manually. 
You're an idiot. I feel you will never stop being an idiot, and the worst part is that you think you're smart. As most idiots do.
That depends on your definition of "plugin"
It's possible to use a lot of npm modules in browser or you looking for something else?
I can say the same about you. I'm sure you couldn't even explain in a technical level what part of jsf where our were seeing this issue. You tried but came up with some nonsensical answer about how angular can render control flows faster lol if you have 7 yrs exp, good god. Never seen someone think they are so right then hand wave with "angular is fast" lol what do you make 80k max? Mid level dev. Can't explain himself properly and ignorant enough to just hand wave arguments lol
It was a multi-layered issue, but I'm done explaining, because you're an idiot. I work from home and make 6 figures as a senior dev. 
You didn't actually explain anything. You said wrong and called me an idiot about 7 times. Pretty sure you could have saved us both arguments sake of you just explained logically what fixed your problem. Yet you still insist angular gained you 2 mins in render time lol the fact your app had a 4 min render time is a testament to how shitty your company and team is for one. Good luck I'm done wasting my time with you. Id love to know what shitty govt contract company you prob work for.
Yeah, thanks! Now I see. Forgot to pass \`this\`. Fixed!
If you like redux saga, you will may appreciate some of the things that Sitka has to offer; I think redux-starter-kit doesn't do that out of the box