Good point. I'll add that benchmark too, interested in the results.
In your case Vue could make more sense since you can more readily re-use old HTML. React is not really made to drive a huge blob of HTML but rather small re-usable pieces/components. Vue internally is based on Reacts principles, so it may just be a good way to get familiar with the functional aspects of it, though they certainly are covered in a thick coat of abstraction. &gt; On the other hand, React seems so much more popular, has much more libraries jn their ecosystem, much more components, in that sense React seems like the best choice If you'd start a fresh project, then yes and that's what [most would do](http://www.npmtrends.com/@angular/core-vs-angular-vs-react-vs-vue). React leans in a more coherent direction than traditional template based frameworks, also simpler to learn and use.
I am still dipping my toes in, but ReasonML seems pretty cool. (Its a syntax extension on top of OCaml) https://reasonml.github.io/ There are existing bindings to React and React Native.
Typing stuff is the smallest of the cost you'll have when you want to test out a concept in a Web environment, which can be done with a simple script tag and a couple of lines of code without any dependency other than the browser. A server is added when it's necessary, like if you want to test cookies. The less dependency, the less code you'll have to worry about and less time you'll spend in things that don't matter. That is also valid for different scales, where the difference is that instead of a server you add libraries or code deduplication when (and only when) it becomes necessary. It's not being afraid, it's trying not to overengineer a simple task sometimes one would want to do in any environment without unnecessary dependencies, something many people are still yet to learn.
Old javascript (es5 and prior), yes, it was awful. New javascript (es6 and up) is quite ok. Modules, async-await, bundling and loaders, importing any data format while parsing happens at compile time, it actually makes it cleaner than most languages i've worked with. As for the labour to format all of this, tools like prettier do this fully automatic.
I can agree a lot of developers are over-complicating the development environment, even I did this mistake a few times. But we are not talking about a complex webpack config here, it's just a basic local http server which requires zero configuration. I can't understand how you think of this as over-engineering. The only case where one could say it's more complicated is for a complete beginner, but even then this justification sounds more like "I don't want to learn" than the solution being complicated.
As long as we dont get to see your code, we can just guess what the issue is. The key here is the e.preventDefault(); that makes the a-element not doing what it usually does. Check this short jsfiddle [JSFiddle](https://jsfiddle.net/zzhwx2r8/) 
I have a repository where I have a couple of functions I use to calculate the buy/sell of crypto sales before selling them. One of them is a function that is called as profitFrom({ buy: 0.00, sell: 0.00}) and returns the percentage of loss or profit. An amateur would want to create a website to calculate it, start a server, host it somewhere, use a test framework, maybe use openshift to host that is free... I just copy and paste in the chrome devtools and call it with some values. That's the only thing I need. The test is a couple of console.log statements that run before the function is added to the global scope. No test framework necessary. If I want to provide a better interface I can create an HTML file with a couple of raw html inputs in file://. No server. If I want to make it better I do it incrementally until I need a server. The cathedral and the bazaar by Eric Raymonds explain this approach in (real) OSS with fetchmail. That eventually found its way to the agile manifesto in the form of incremental delivery.
Doesn't work in Firefox ESR 52.3.0 and Internet Explorer 11 You should probably use Bable to ensure it's compatible with all browsers, not just with Chrome.
Why not just use composition in JSX? &lt;Component&gt; {isLoading ? &lt;Preloader /&gt; : &lt;p&gt;Loaded!&lt;/p&gt; &lt;/Component&gt; Or if the parent component contains the logic that sets isLoading, make children a function that the parent calls: &lt;LoadingComponent&gt; {(isLoading) =&gt; isLoading ? &lt;Preloader /&gt; : &lt;p&gt;Loaded!&lt;/p&gt; &lt;/LoadingComponent&gt; Then it is explicit. HOCs are "clean" in the sense that you're sort of just hiding what is actually going on under the carpet.
It's about the VanillaJavaScript.js these days
Even more seamless transition in the same vein would be Flowtypes on your regular JS + functional libs.
As another anecdotal data point, I landed on Reason after being a similar situation to yourself. For me, it strikes a lot of sweet points. It is based off OCaml/Bucklescript (OCaml as JS) so there is a pretty mature community behind it. It fully embraces that JS interop is necessary and tries to make it as seamless as possible. It is backed by Facebook with all the good and bad that brings. There are probably few apps in the world that get as much use as Messenger which is written in React Reason and vanilla JS React. I believe a fairly large portion if not most of Messenger is now Reason. Reason also has the infamous Facebook licence so you'll need to decide how you feel about that. It can run in a browserless context. I plan to use Reason on the client side, for toy scripts and ultimately for server development. There is promise for a really good isomorphic story as shown by this admittedly limited app (https://github.com/jaredly/isomagic-todos). As someone trying to learn it in their spare time, I get a feeling of momentum behind it. Some parts of the developer experience are still patchy. Yet if you follow the Reason Dischord you can see the intelligent people trying to improve things. And they're working quickly. I feel that over the next year the bootstrap and the language will get better documentation and the quality and availability of tutorials will improve. Something I hope to contribute to. I think the important thing is to find one of the languages that appeal to your sensibilities the most and go with that. If you learn Purescript picking Reason will a lot easier than learning it from scratch anyway. Reason appeals to me and if I want to learn Elm later, there's nothing stopping me. TL;DR I like Reason. You might like Reason too. Or not. There's still a lot of great options.
Thanks for your feedback ! According to caniuse IE doesn't support web audio api. I'll need to dig into polyfill for it, but on the first look i cannot find one that support Analysers. I'm already building the library using rollup &amp; Babel. Compatibility should be ensure for all the standards javascript stuff. The issue may likely be about Web Audio API support. It should work on Firefox 52, could you fill an issue on github with the steps to reproduce (and a stack trace if you got one) ? Would be really cool :) !
Why.js
Haha i though about creating a brand called "Useless.js"... If you like this kind of stuff, i also made an Atom plugin to play piano while coding... Because i can !
&gt;play piano while coding Well that's something I'd appreciate, and I'm using Atom. What's the name of the plugin?
I would do something like this: firstname = filterData[0].firstName || '';
You are arguing a point I did not even make. Running a simple static server CLI to serve files at localhost:[port] vs. loading the file via the `file://` protocol has nothing to do with how you do the rest of development cycle, e.g. how you choose to verify the solution. I'm still waiting to be presented with one good argument why loading a html via the `file://` protocol is preferred in some cases and how it will save time or have any other positive impact on the development workflow. 
Or Safari.
Here it is https://github.com/Okazari/atom-play-piano Not sure it "play" piano like you think ;) !
Check this https://blog.patricktriest.com/what-is-async-await-why-should-you-care/
Assuming you have control of your form variables // there simply isn't enough information in your post // about how you're getting your form data // but the point is that your form data is stored in some object const formObj = { first_name: 'John', surname: 'Doe', middle_name: '', }; sqlQuery += filterNPI === '' ? Object.keys(formObj).filter(v =&gt; ( formObj[v] !== '' )).map(i =&gt; `(${i}="${formObj[i].toUpperCase()}")`) .join(' AND ') : `(npi=${filterNPI}`; There are a lot of ways to get want you want to get to. But to help you out a bit better I think it would be valuable to know how filterFirstName is being set and if you have control over how your form is being rendered.
"TypeScript Deep Dive" is an excellent e-book! And it will not waste your time. It's short, to-the-point, and full of useful information. The official TypeScript Handbook is also great documentation. `ts-node` makes it easy and fun to run your TS code. `ts-node foo.ts` Very simple. VSCode has excellent TS support and makes it easy to get started with excellent coding assistance in both TS code and your `tsconfig.json`. It does not require any configuration other than a `tsconfig.json` file. 
You can embed vue components in your pages using the [cdn](https://vuejs.org/v2/guide/installation.html#CDN) (Vue.component, not single file components). If you already know Vue it's trivial to start immediately. I may be showing my ignorance here but with React you're going to need babel to transform the jsx. I don't think it's a matter of a script tag.
It's messy as in it's not strict. Other than that, it's up to the author of the code.
&gt; Running a simple static server CLI to serve files at localhost:[port] vs. loading the file via the file:// protocol has nothing to do with how you do the rest of development cycle, e.g. how you choose to verify the solution That's pure nonsense. The development cycle is not separate from building, they're fundamentally coupled to each other. At some point, you need to make a decision to either use a server or not. There are cases where you don't need to, recognizing those cases and tradeoffs differentiate the amateur from the professional. Or do you think developers are just monkeys that type code other people tell them to? Maybe in broken organizations they do, but that's a whole other problem.
thats actually way more fun then rythm
Are you separating things into separate files, and using something to concatenate/compile them (gulp)? Even if you're not using a pattern or framework, just doing this can really help you feel organized. 
In short, you only need to use semicolons where JavaScript's "automatic semicolon insertion" (ASI) will not insert one. Here are the rules of ASI: The language spec says that semicolons will be automatically inserted *only* where there is a newline and the absence of a semicolon would mean the code has a syntax error. The exception is "restricted productions." They will have a semicolon automatically inserted at the newline even if the code doesn't have a syntax error without the semicolon. `return` and `throw` statements are two examples of restricted productions. ASI is a rigid part of the language spec. It works the same way in all browsers and interpreters.
Glad you like it ! I may post about it later on since there is some interest :) !
Yes this is a known issue i'm not able to solve by myself (i don't have a mac &amp; Safari) could you help by contributing on this issue ? https://github.com/Okazari/Rythm.js/issues/7
Vue seems to be more suited to what you need to do. Although of course, if you were planning a full rewrite and turned your system into a GraphQL or Restful API system, then Vue and React would be equally applicable. But for what you suggest, it sounds like Vue would be easier to graft into what you want to do.
I would consider learning functional programming. Imperitive programming has a tendency to be messy by default because its focused on trying to tell the computer how to do everything, rather than describing what needs to be done.
I have full control over the html. Nutshell it's a prototype with a filter bar of various options. Each option can hit a different part of the api, so I've been trying to find an elegant solution to dealing with it
`const getFirstName = (filterData) =&gt; filterData &amp;&amp; filterData[0] &amp;&amp; filterData[0].firstName`
No, because your portfolio is supposed to show that you understand more than just styling. Any idiot can download bootstrap. But not everyone can build, say, a to-do list with local storage functionality. Styling a portfolio project with a pre-built library shows that you know enough to not try to reinvent the wheel. It's more about getting something that *works* and has a *purpose*, not just having pretty styling. 
&gt; I am always trying to create multiple simple functions and methods that do only one thing at a time. This is one of the strategies laid out in the book "Clean Code." Functions do one thing and function names describe what they do.
You can build the react components and include the transpiled versions. Presumably if you're updating the codebase, you'll want to be using latest JS syntax either way. I'd expect a Babel step regardless.
Okay maybe it would be easy enough to store it like this... Given... &lt;input type="text" name="first_name" class="js-form-input ...otherClasses" /&gt; function getDataFromForm() { return Array.prototype.map.call(document.querySelectorAll('.js-form-input'), (elem =&gt; ({ [elem.getAttribute('name')]: elem.value }))); } // on submit function submit() { const formElems = getDataFromForm(); sql += filterNPI === '' ? Object.keys(formObj) .filter(v =&gt; (formObj[v] !== '')) .map(i =&gt; `(${i}="${formObj[i].toUpperCase()}")`) .join(' AND ') : `(npi=${filterNPI}`; return axios.post( '/my-api-endpoint', { sql }, ) .then(res =&gt; console.log(res)) .catch(err =&gt; console.warn(err)); } I don't know if this is any help though... What I've done in a react app recently is just have some initial object with a shape of (...something along the lines of...) Array&lt;{ name: string, label: string, type: string }&gt; Generate my entire form. It becomes a lot of fun when you do form submissions and you don't have to care about adding inputs, removing inputs, or changing requirements, because you just need to change it in one place. If you don't mind managing things in more than one place I think .join() solves your problem just fine, and mine is potentially more error prone (the code I wrote above wasn't tested/run at all) and unnecessarily complex if the form won't ever change.. Edit: &gt; Each option can hit a different part of the api I didn't address this and I don't think my solution solves what you're trying to get done but I really recommend seeing if you can't leverage objects to do what you want and store stateful information about each option. You could also think of using click handlers that pass in data into some closure that is then called when the button is clicked (this requires the button or the event listener to know the endpoint which might not be suitable for you).... man there are a lot of possibilities that I don't possibly have the time to explore 
Really needs an video demo for non-atom users.
INTERESTING. I just retried with Firefox and now it works. What's the difference from when I tried this morning: I have my Headphones plugged in. Apparently, that's the problem. After quite some time though, the elements start to move very slowly anyways. Same thing happens if I plugg headphones out while the demo is running: everything slows down massivly. Weird. Chrome doesn't care about headphones beeing plugged in or out, works either way.
Ok that's more precise. I need to investigate that. Thanks again for the feedback :)
I did something similar for YT videos. var video = document.getElementsByTagName('video')[0]; var stream = video.captureStream(); //...yada yada yada `captureStream` is only supported experimentally for Chrome. Also I could never get the levels right on mine.
That sound really great ! I could expose a "connectStreamSource()" method. I'm already using stream for microphone support (https://github.com/Okazari/Rythm.js/blob/e1c7d751b54e0b89d6d61b8f12015a23ee605b90/src/Player.js#L60) Could be really fun to make a chrome plugin animating youtube page according to video sound :) !
Safari has a Windows Version or setting up a mac vm isn't that hard. ;) If it works in chrome, then it's not far away from working in safari, both are WebKit browsers.
My goal was to animate the new logo increasing the "thicc"ness of the font with the beat. I am satisfied that I could do it now, so I probably won't.
It's just you.
Yeah, true words. I did try on the windows version, but it was working fine. Looks like i'll need a mac vm.
CosmicJS alert
React and jsx actually work fine [using script tags](https://www.reddit.com/r/javascript/comments/6x0spz/best_javascript_framework_that_doesnt_need_ing/dmc6ze1/). It's only that most people have probably moved on and use build tools. But this is more or less the same, Vue ships an extra parser that would otherwise be a compile-time transpiler. 
Either is a viable solution. Contra to what /u/IX-Hispana said, you can absolutely use React without a build step, you just need to use an alternative to the JSX syntax (either plain `React.createElement` calls, or one of the several hyperscript-flavored libraries out there). It's also completely fine to add React bit-by-bit to an existing server-rendered page - you just call `ReactDOM.render()` multiple times, once for each separate component tree you want to add. I've got some related articles in the [React Tips and Techniques#JSX](https://github.com/markerikson/react-redux-links/blob/master/react-techniques.md#jsx) and [React Component Patterns#Wrapping Non-React Code](https://github.com/markerikson/react-redux-links/blob/master/react-component-patterns.md#wrapping-non-react-code) sections of my [React/Redux links list](https://github.com/markerikson/react-redux-links).
&gt; I could expose a "connectStreamSource()" method Yes, please!
https://github.com/Okazari/Rythm.js/issues/29, omw ;)
Caveat lector: This article is written by a company advertising its own [paid service](https://cosmicjs.com/pricing).
Thanks. I will have to dig into this some more. React is on my TODO to dig deeper. I was going head first about 4 months ago..Create-React-App, etc.. running example projects but then life got in the way.
Safari for Windows hasn't been updated since 2012!
&gt; ...comment everything Comments should be added only when absolutely required. &gt; Every time you write a comment, you should grimace and feel the failure of your ability of expression. -- clean code
[Safari for windows was discontinued in 2012 :/](https://en.wikipedia.org/wiki/Safari_version_history) ive run into issues with safari where things are fine in chrome. usually z-index issues. 
Is there a type definition for this yet?
Trouble is on this line: this.browserAudioCtx = AudioContext || webkitAudioContext If AudioContext is not defined, it throws an error. It doesn't fall back to webkitAudioContext. The script stops. Easiest fix: this.browserAudioCtx = window.AudioContext || window.webkitAudioContext 
Actually, it was written by a guy who made an mini API who is bragging about it (i.e. me). Here is the official posting on Medium (the article) I wrote: https://hackernoon.com/cosmic-js-with-static-web-applications-c291d3dd4b33 Sorry about all the edits. Just posting this from my phone.
Thanks ! Gonna try/push this correction asap :) (If you have some free time, PR are welcome :) !)
I know it was dc'ed, but still could help figuring out some problems. A mac vm would be my first choice. ;)
I think so. Could you give me an idea as to what that would look like?
I tried doing what you said but maybe I didn't understand correctly. I put some raw html that said: &lt;div id="taghere"&gt;&lt;a data-localmed-toggle="modal" href="https://www.companyswebsite.com/widgets/3d295zg2-0229-41fv-ac5b-3f7313e02484/"&gt;Schedule Online&lt;/a&gt;&lt;/div&gt; then put the CSS in my pages CSS field but to no avail. I'm assuming I did something wrong.
I dont even want the "schedule online" part but its there...
The readme never says what this library *does*. It talks a lot about how to call it, but doesn't say what calling it will accomplish. I presume this is a linter for '.editorconfig' files? Or maybe it checks the source code, to verify that it matches the '.editorconfig' settings? I have no idea. If it does check source code, can it automatically fix problems, or does it just report them? I want to know!
There really isn't a solution for IE. The web audio API isn't something which can be polyfilled unfortunately. 
Can you put the code you have on codepen or somewhere?
I'm not sure how that is answer at all honestly. 
You just have to `flow` with it.
Is that because you don't understand functional programming ? Or because you don't believe functional programming makes things simpler by design and more understandable ? (At least to another person who understands functional programming ) Or because I don't describe what they are ?
Because it isn't actually answering the question of is Javascript messy. 
This is not really related to javascript, is it? I mean, .editorconfigs configure an editor, .js files being a very small subset.
After checking the repo more closely, it seems there are currently three different versions of this checker. One for php/java/javascript. Why not combine them into one? Also, the ignored file patterns should probably be configurable via an rc file (ex: .editorconfigrc).
Keep watching - there are other transitions (it's random).
I'm relatively new to React, so sorry this is more of a question than an answer, but why wouldn't you write: `this._onClick = this._onClick.bind(this);` 
Weird, I used iOS to test it. What version of iOS are you using? What device? One of the random transitions does involve boxes flying around but it is supposed to eventually gel back into a photograph.
It's more complex than you may think. Here's the docs on interop. https://guide.elm-lang.org/interop/javascript.html
I'd suggest parameterized queries or an ORM over sanitizing inputs. 
I'd love to hear your feedback on this. While I don't work directly for Cosmic JS, as a freelancer I'd love to hear what issues you have with the article I wrote. The full article was originally posted on [Hacker Noon](https://hackernoon.com/cosmic-js-with-static-web-applications-c291d3dd4b33). Definitely not my most successful article to date, but considering I wrote it out of my own free will: I'm honestly interested in hearing why people are responding to it so negatively. The reason I'm so passionate about finding out why is because due to my health: I've had to put (what feels like) twice as much effort into my work than usual. Understanding the correlation between this will help me understand what I can do better in the future.
Exactly what I use - except that I tested with Safari rather than the Reddit browser (not that it should make a difference). If you have a spare minute, can you try the link just using Safari to see if it still occurs?
High order components are better because they are composable.
Learn to act before you react
Yes, the Stage 3 Class Properties syntax allows you to write class methods as arrow functions, which are then auto-bound to the class instance. That's the generally recommended approach for handling method binding. There's a great article called [Why and How to Bind Methods in your React Component Classes](http://reactkungfu.com/2015/07/why-and-how-to-bind-methods-in-your-react-component-classes/), which lays out the different options. There's also a Reddit comment thread where [Dan Abramov gives his thoughts on Class Properties being the preferred approach](https://www.reddit.com/r/reactjs/comments/54xnao/fat_arrow_vs_autobind_vs_bindbindbindbindbind/d85wj0l), and I have a bunch of [other related articles on method binding approaches](https://github.com/markerikson/react-redux-links/blob/master/using-react-with-es6.md) in my [React/Redux links list](https://github.com/markerikson/react-redux-links).
It may not answer the title but does attempt to answer the question in the post - my reasoning being JavaScript can be messy and imperative programming does tend to lead to messy code by default - whereas functional programming doesn't - and it needs less comments as it should be more self explanatory
 #mummotunneli 4 eva
could have mirrored the express api more closely, but that doesn't really matter. ie. like import {Router} from 'express';... const router = Router()....
Can you link your js13k game so we can see this in action?
Very cool. Thanks for sharing
The deadline is September 13 and I haven't put the game online yet :) The example at https://stasm.github.io/innerself/example01/ might be a good place to look at right now. Be sure to open the console to see the log of state changes.
^ This guy knows where the money is at!
 Access-Control-Allow-Origin Should be sent by the API server, not your ajax request. I'm assuming the Access-Control-Request-Headers header is being sent back from the API server and it's including the headers you sent to the server as it's content.
wopr@bandcamp.com
I understand that it's just a pet project and less than serious. But the thing with innerHTML is that it requires sanitizing your input, or you will be in trouble someday. http://i.imgur.com/e5CH94y.png
Because if I have a mainly Javascript project I maybe didn't have php installed for example. Thx for that suggestion I will consider it for the future :)
Yes, naturally! Thanks for pointing this out, still.
Thank you, I will add this tomorrow.
Hi /u/myceleb, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
It is written in javascript and usable via npm
You are confusing building and verifying. You could be verifying your code by emailing it to the client and ask them to check it, without you ever running it. Is it a stupid and slow process verification process? Of course. But it's a verification process nevertheless. And in this verification procedure, it doesn't matter if you use a server or `file://` protocol, you won't need either. In over 5 years of my web development experience, I haven't found a decent case of why one should avoid using simple static servers to serve the page and instead use the `file://` protocol. And I had worked and am still working with very good developers, some that have expert-level knowledge in the field and none of them ever encouraged the use of it. I'm still waiting to see an example of when the `file://` protocol is superior. The example you've described before doesn't really count; if you want to run some simple js code, [you can do that in the node repl](https://stackoverflow.com/a/22817680/1276128). This way is even simpler than creating a html file which loads your script file, or worse, writing js inside a html file. Once you get to a point where you decide to add some UI, the code can be included on the page as-is, given that you haven't been using node-specific apis. And above all, I would like to hear your rationale about what makes using the [`http-server`](https://www.npmjs.com/package/http-server) not worth the time. Let's be honest, the total time we spent arguing this is way more than the accumulative time it would take you to use the `http-server` over navigating to the file in your file explorer and opening it with the browser of your choice. It's not adding any complexity to your setup, it's either find and open the file or cd to dir and run `http-server` + open http://localhost:8080. But above all, for quick hacks with basic html, css and js, I prefer the [Web Maker chrome plugin](https://chrome.google.com/webstore/detail/web-maker/lkfkkhfhhdkiemehlpkgjeojomhpccnh?hl=en) or any of similar online tools, such as codepen, jsfiddle or similar. Needs zero config even if you want to use JS or CSS compilers or add external libraries.
_Look at the bottom right_ For all of those like me who were confused at first.
According to the Firefox console it looks like the Access-Control-Request-Headers are in the Request Headers. Interesting to note that the Allow-Origin should be on the api server, I'll have to see if I can add that in there.
Wow, that's really good to know. That's really a big problem.
Interesting read. Don't get though why you would want to use HMR on the server, just restarting the process on file changes would be enough (i.e. nodemon). Or are there open connections to your dev server that you want to retain (e.g. websockets)?
wrap em in promises then chain them e.g "Promise.all()"
Can you show us the bit of code that you managed to build so far? Its hard to debug without any data. :)
There is already a standardized version of this available in modern browsers. https://dom.spec.whatwg.org/#dom-element-matches
Thanks for the feedback!
I thought this was important to highlight so I added a [Caveats](https://github.com/stasm/innerself#caveats) section to the README. Thanks again! 
It's not fully developed since it isn't working, but this is basically what I have: &lt;script&gt; function loadDoc() { var xhttp = new XMLHttpRequest(); var xhttp2 = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 &amp;&amp; this.status == 200) { document.getElementById("demo").innerHTML = this.responseText; } }; xhttp.open("GET", "demo_get.asp", true); xhttp.send(); xhttp2.onreadystatechange = function() { if (this.readyState == 4 &amp;&amp; this.status == 200) { document.getElementById("demo").innerHTML = this.responseText; } }; xhttp2.open("GET", "demo_get.asp", true); xhttp2.send(); } &lt;/script&gt; See how there's an xttp and xttp2? I tried doing open/open, send/send. I've tried open/send, open/send. I don't know if the order is wrong, or if it's something else getting in the way of two simultaneous requests within one function.
I just tried your code and it worked fine. https://jsfiddle.net/qwvskt0n/ What's the issue? 
&gt; no use of expensive bind Uhh, not sure how to break it to you. This is using the exact same binding under the hood.
&gt;Doesn't work in Firefox ESR 52.3.0 and Internet Explorer 11 That's a good thing.
I've never done that before so I hope this turned out right: https://codepen.io/kammon2/pen/ZJZMeq
Under some interpretations of React's Terms of Service, if your company sues Facebook for patent infringement, that invalidates your license to use React. You should consult your company's lawyers to make sure that's not an issue before proceeding.
Why not just use textContent instead? That would escape (and un-escape) HTML for you.
I suggest you give it a quick scan, to find out if its style suits you – as a programmer you should be able to read it *very* quickly. This is its quick start chapter (introduces ES5 quickly): http://speakingjs.com/es5/ch01.html
Possibly useful – my in-depth JavaScript books for programmers. Free to read online: http://exploringjs.com
There's a series of books called "You don't know JS", by Kyle Simpson, that digs deep into advanced JS topics. You can easily purchase them online it get them in GitHub (https://github.com/getify/You-Dont-Know-JS), since the autor opensourced them
This is a thing called middleware. Look up express middleware.
Coincidentally i was on youtube when i saw this post, tried searching (because yolo) and found this... https://www.youtube.com/watch?v=K0ShhDbgRxk My favorite part : &gt; what are callbacks?... Pure evil. xD
Video linked by /u/MWrathDev: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Async and await in JavaScript VS promises VS callbacks - Alberto Falchi](https://youtube.com/watch?v=K0ShhDbgRxk)|BrisJS|2017-07-04|0:11:57|0+ (0%)|66 &gt; JavaScript is a naturally asynchronous language, but these... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/MWrathDev ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dmm00yx\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
Maybe this? https://async-await.xyz/
Thanks for posting this! I'm Nick Johnstone, the interviewee from this article. If anyone has any questions for me, about Cycle or anything else, feel free to ask and I'll answer :)
Why is there a steam screenshot? Why does this look like some sort of limited version of a feature release statement and why is it on such an ad ridden blog?
I wonder if I was the only one who thought the boxes were large checkboxes before realizing the demo was bottom right
&gt; JavaScript is not the language of the future *sniff* :-( 
textContent removes the entire markup. All that's left is a concatenation of all descendant child nodes. The DOM structure of the components would be lost.
It may have to do with the fact that I have a findByID inside the two functions, and a line that changes the InnerHTML to what it grabs (rather than load() ) Either way, very odd. I'll have to toy with it. Maybe it was just syntax, a 404, or an issue with my browser/server.
This is awesome! 
Haha i admit it can be confusing, i need to work on the UX there :p
For learning: https://learnnode.com
+1 for axios, also I could be wrong but I thought the wgwt-fetch polyfill did the same thing 
First of all, I appreciate you taking the time to research and respond. I think this has been such a hot topic since people would rather err on the side of caution than dive head first into building a huge commercial code-base and product with a framework that has some suspect licensing verbiage. My boss was a developer for many years and is very intelligent so for him to know about this before me, even though he's not a Javascript developer, certainly made me pause to try and do some research (hence the original post/question). That's the one thing I wanted to know about Preact is if using a framework with almost the same name and coding concepts could, in itself, be considered a copyright infringement. I'm not a lawyer so it's been hard to get a straight answer... some people say the concerns are valid, others think it's overblown. Anywho, thanks for your input.
Big up to 'https://github.com/ldd' the latest version should now work on Safari
Gulp? Does Aurelia not use webpack?
You're over engineering with tons of tools something that can be done in a non node environment by opening the browser and getting shit done. There's a lot of use cases you mentioned, each of them have its own requirements and a browser is not enough. You use appeal to authority saying that you've been working for 5 years in Web development, which doesn't matter. If you want a page to calculate something simple for yourself, you use plain HTML input, DOM and the browser. Incremental delivery is a mindset. It applies to all scales.
Personally, I just write it this way: class ComponentName extends Component { _onClick() { // ...respond to the event here } render() { return &lt;SomeComponent onClick={() =&gt; this._onClick()} /&gt; } } This seems especially handy to me because oftentimes the handler is a one-off one-liner, so I don't even bother making it a method. class ComponentName extends Component { render() { return &lt;SomeComponent onClick={() =&gt; this.setState({date: new Date()})} /&gt; } }
This method will cause excessive re-renders because the arrow function creates a new function instance every time the render method is called. 
It doesn't. Babel turns the this reference into a class variable a la var _this = this. It does not use Function.prototype.bind
I avoid this because I think reassigning the class method causes some engines to not be able to optimize the class. I think there is a jsperf for that... Somewhere...
That's great thanks. Esp. for the Dan Abramov link
If you enjoyed this and want to get a feel for Cycle without worrying very hard, you might enjoy these videos I made a few months ago, "CycleJS How and Why". https://m.youtube.com/playlist?list=PLP4qxCldB2jRJmszTeuS1-zghi60g1vzJ 
What if I don't want to build my app in a web browser?
Well, the courts have already decided that: https://arstechnica.com/tech-policy/2016/05/google-wins-trial-against-oracle-as-jury-finds-android-is-fair-use/ The issue in this case is that Oracle owns the Java API's, but Google re-implemented them for Android. The court found that Google's re-implementation of the API's was covered by fair use, and therefore not a case of copyright infringement. As long as this ruling stands, Preact is in the clear.
In modern browsers there is little difference in performance between using `Function.prototype.bind` vs. a closure. It still doesn't take advantage of the prototype. Each instance of the class will have a unique `_onClick` function whereas the `render` function will have referential equality between instances.
Haven't tried flow !
I've been thinking about this today. I can't think of an instance where you couldn't use either a parameterized query or an ORM. Can you give me an example? I'm not against sanitizing inputs, but I'd only add it as an additional layer of protection. There are many ways sanitizing can be done improperly (via front-end, homemade regex, etc), but parameterized queries and ORMs guarantee a deeper protection against SQL Injection. String manipulation shouldn't be your last line of defense. 
Cycle is a JavaScript framework, but isn't only for building browser applications. The DOM driver is one driver among many, so if you want, you can write Cycle apps that run in Node on the backend, and use other drivers like websockets, http servers, database drivers and anything you can think of. I have personally used Cycle on the backend for building multiplayer games in the past. Here is one example of a [websocket backend in Cycle](https://github.com/Widdershin/enigmatic/blob/d6e2546a24000dfd49853a1a28262634e450e6dc/server.ts#L132-L181). There are also implementations of Cycle for various languages that are intended for use outside of a browser context, for example Java and Kotlin. If you give an example of what platform you'd like to target I can give a more detailed answer about how you could utilize the Cycle architecture in that context.
Well, it might be, but if JavaScript is still one of the most popular languages in one hundred years, our field would have a lot to answer for. That's not to say that the browser isn't the platform of the future!
JavaScript in its current form. Personally I don't care if JavaScript evolves into something better or something better with a different name comes along and replaces it.
I forked your project in hopes of adding some sort of minimal sanitation (as 5tas suggested). I might try to add some documentation too. While I get this technically isn't production safe code, it is nonetheless a great way to show what you can do with modern JS.
This is incredibly cute! Thanks for sharing. I don't see myself ever using this, but I appreciate the artistry of cramming the basic React + Redux concepts into 400 bytes.
The steam screenshot is an example of practical applications. Limited? Sections is considered complete, maybe you're talking about the full JS software suite. The blog is the author's blog and ads pay the bills.
ORMs are not simply string manipulation. You suggested "sanitize" without details. This could be misinterpreted. I would never suggest someone move forward with an architecture built on concatenated queries. If you're arguing that this is acceptable, we'll have to agree to disagree. 
Oh, I forgot to add "show off a project" to the title. Sorry im new to this.
When configuring a project using aurelia-cli, it prompts to you for choosing between RequireJS, SystemJS or Webpack. Whatever you choose, the project will always have a directory called aurelia_project/tasks where you will find a lot of gulp tasks (build, run, etc).
&gt; There is no global state in the application. I'm out. Thanks. 
Does this mean you'd have to pass information in series through elements In order to access variables higher up in the scope chain? 
Nope. We use the Redux connect middle wear for our react apps. Just wrap your component in the connect function which allows you to map the application state into props as well as provides access to your stores dispatch function. Redux store is the single source of truth. Components pull data out of the store and signal for the store to make a change via dispatching an action. 
I don't know if this can be considered showing off, but I got bored and started writing my own language called Poop. [This brief snippet](https://i.imgur.com/IDDrvB3.jpg) took me a little more than a day to write. I learned some fun stuff, and might actually continue with it.
Is that really a global state in the traditional sense?
Just made the pull request now.
Yep, I'm with you.
We have a comparable pattern to Redux called [cycle-onionify](https://github.com/staltz/cycle-onionify) that uses a similar single state atom and reducers to enact updates. It also supports components making updates, either to specific parts of the state tree or broader. You can still achieve the benefits of this approach without the downside of allowing all of your application to modify the state at any point.
"Or, you could of course pay a third-party company, like Chargify, a percentage of your revenue ..." Ehhh, isn't that what you guys are going to do when you launch 1.0? Or how are you going to manage your billing structure at launch? 
I’m confused — is this real or satire?
Have you checked out elm? I absolutely love working with it and hope it gets way more popular... All the good stuff about JS without the bad and a kick ass compiler! 
First, the frontend went to backend. Now, the backend comes to frontend?
EcmaScript maybe? JavaScript in its current form is already drastically different than it was when it first started.
I have not used it yet but I hear good things and the details I've read sound great! I'd be all for a mainstream shift in that direction.
I mean, isn't that inevitable
Yeah that was my point ;)
That's good to see! Time to spend an evening playing with them, and looking for differences between them and in node.
I would think so.
I've added a sentence about what this tool is and a screenshot of sample output.
JavaScript does not have private members and emulating them is rarely worth it. If someone is using the undocumented member and mucking with it in ways that you don't support then it's really their problem. Even C# has this as a potential issue given that you can use reflection to alter private data. If you must hide the data the you may need to revisit your use of inheritance. Is inheritance the right solution?
&gt; .. Tylor, a previous core team member who has made fantastic contributions .... He was working as a barista and had just taught himself to code a few months before. o_O
Yes. Data structure library it would be nice to have it. I didn't know about c#issue. Thanks. 
Actually, yes. You have one top component with application state, which passed down within context. So, with connect you just pass parts of context to component.
This. Oh my god, I am going to play this during one of my live coding sessions :D
This is real, it's an article about a framework called [Cycle.js](http://cycle.js.org/). Not sure what might have made this seem like satire, happy to address any questions you might have.
Tylor is one of the fastest learners I have ever encountered. His skill after six months of self education was about what it took me 5 years to accomplish, with more help than he got. On top of that, he's incredibly polite and ludicrously humble.
I've been writing JavaScript and Python for nearly 10 years and have never had to worry about having truly private methods or attributes on my classes. Do you encounter this often?
Is this whole thread an ad for Cycle.js?
Do you have any browser extensions installed? Could could try disabling them one-by-one and see if it's goes away. Otherwise there's likely something in your code or a library that you use, but hard to help you without the source code.
This is huge. The sourcemap support for transpiled ES6 modules is pretty bad, because libraries like Babel preserve ES6 module semantics like mutability of primitives. If we can just run ES6 in development without transpilation then devtools will be a lot less brittle. The only question is whether this is advisable, given that we'd be running fairly different code than production (albeit one that should be semantically identical).
Maybe a stupid question: can it be used in conjuntion with React?
https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch3.md Go through the prop descriptors and immutability sections you might find some thing there.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [getify/You-Dont-Know-JS/.../**ch3.md** (master → cef9f59)](https://github.com/getify/You-Dont-Know-JS/blob/cef9f59e812650d849533c8789b29a4f1fe9d946/this%20%26%20object%20prototypes/ch3.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmmm94v.)^.
yes.
Yes, it's feasible to use Cycle with React as the view layer. Staltz is currently working on an app that uses Cycle on top of React Native, Tylor recently started working on a [React Driver](https://www.webpackbin.com/bins/-KsuoSB1zw6JKW1cIcCH) for [Motorcycle](https://github.com/motorcyclets/motorcycle), which is an alternative implementation of Cycle.js powered by a different stream library, Most.js. There's not currently a great story around using the main Cycle.js implementation with React, mostly because the virtualdom implementation that powers the current DOM driver ([snabbdom](https://github.com/snabbdom/snabbdom)) is fast and covers our use cases well. Also, it would make the most sense to use React with pure functional views, which is pretty much how we're using snabbdom right now anyway. Once the work Staltz is doing on integrating Cycle with React Native becomes more widely available, it will be easier to integrate Cycle with React all round. I'm also really excited about approaches like [nanocomponent](https://github.com/choojs/nanocomponent) which are attempting to make it irrelevant as to what rendering framework is used for a particular component, which could potentially allow all frameworks to use components written with any view layer, which would be nice. There are also a few efforts going on to create an abstraction over virtualdom implementations to enable you to use them interchangeably. Here's one [WIP project](https://github.com/skatejs/val) I've come across that does just that. I'm also quite interested in the approach [react-faux-dom](https://github.com/Olical/react-faux-dom) is taking, which is to create a faux element that can then be rendered to a virtualdom representation. I think this is one of the most promising approaches for doing this in a nice cross framework way, since it just gives you an element object that can be interacted with normally, so you could use it with any JS component. But yeah, so far nobody has yet put a huge amount of work into making a React driver for Cycle, mostly I think because there's not necessarily a good tradeoff there in terms of effort to reward. The biggest win would be getting access to the React component ecosystem, but there are other ways to achieve that. TL;DR: Possible - yes, easy - no, future - most definitely.
The idea behind this interview was to spread the word about [OpenCollective](http://opencollective.com/), and how it's used to fund Cycle.js development. So if anything it's an ad for OpenCollective. I just like writing Cycle apps and want more people to be aware of it, so in that sense, yes! But not because we're trying to sell you something, just because we want to share the work that we do and the ideas we have.
Check it in Network Inspector in chrome - it should show request initiator.
Are the benefits of using it with React more than perhaps integration with an existing code base or reusing premade widgets? I've worked a bit with Cycle.js, really enjoyed it, and didn't find myself longing for React at any time...
I can imagine it quickly turn out that way; I've worked with it a bit and it's really enjoyable. I think almost everyone who touches it more than superficially feels that way, but as the learning curve can be high and there's no big company behind it, adoption is slow. Which leads to everyone who enjoyed using it to be vocal about it :)
It's relatively well-positioned to be the main benefactor if and when WebAssembly is widely usable, depending on how fast Evan manages to make that its compile target. Then again, once Elm is widely used you'll quickly find yourself longing for the next language. like PureScript ;)
Nothing really springs to mind beyond the reasons you stated. We support JSX so that's not an issue. Maybe if you worked for a company that had to review and approve each dependency and they were already happy with React.
Another problem if you are using webpack is how to handle different types of assets which you are importing just from your js code and webapck loaders transpile them as well.
Does this mean we can use ES6 features? 
Thanks, glad you liked it! To be honest, I wouldn't recommend using this unless you really *really* **really** care about size.
By the way, one of the primary reasons I think anyone should at least give Cycle.js a try for a small throwaway project is that it's a _really_ good way to teach you how and why to do [Functional Reactive Programming](https://vincenttunru.com/The-case-for-Functional-Reactive-Programming/). It just sort-of naturally nudges you to the correct way of doing it, and as such really helps make it click. Even if you're not going to do FRP explicitly afterwards, being exposed to a new paradigm will help a lot in your daily work as well. (Alternatively, I also wrote [an introduction to FRP](https://vincenttunru.com/Javascript-reactive-programming/) that segues into an introduction to Cycle.js and what problems it solves for you.)
https://medium.com/javascript-inside/why-higher-order-components-make-sense-fe4145b4e305 Here is the article about why HOCs are better than other alternatives of abstracting logic.
Are you more involved with OpenCollective as well? I'm interested, and there's this form "Join the waiting list!" where you can leave your email address, but the "Join" button is greyed out and I can't submit the form. Do you know who I can contact about this? **Edit:** Never mind, I found a contact button :)
You've been able to use ES6 features in Chrome for quite a while now. As long as you're aware of what browsers and versions you target and check a compatibility map i.e. https://kangax.github.io/compat-table/es6/ This is if you're working without a transpiler. And this news is just that if that's how you've been developing javascript then you can now use ES6 modules as well (as long as you're only targeting the last chrome version). It's a great step forward towards native implementation of ES6 but honestly if you're doing anything for public display, you'll want to target at least a couple of older versions of most browsers and thus have to choose between full blown ES6 + transpiler, half-assed ES6 where you manually check feature compatibility (maybe add some shims) or old school JS.
I mean, is it possible for something that's completely free to have ads? Like, there's no commercial proposition here. It's just someone talking honestly about why they like it and their personal views and experiences.
I think the most exciting source of JS knowledge is the following series: https://github.com/getify/You-Dont-Know-JS Start with it
Wow, thanks!
 You can find the code and examples on the website below. https://github.com/nigayo/javascript-async 
Does that mean I can use import and export without needing a module loader? I tried it with the actual chrome version but it says "Uncaught SyntaxError: Unexpected token import"
You're probably on the stable channel. AFAIK 61 is currently beta version, stable is at 59 or something. I could be wrong tho and we both need an update (my beta is at 61 ATM)
Totally agree, let's not do that please. Also some other things that bothered me from the article &gt;Any CORS policy change requires a server-side code change (or at the very least, config change), which is likely to require some kind of deploy. Well yeeeaaa... CORS is a sever side policy, making changes to that policy obviously requires you to make changes on the server side.... Who would have thought? &gt;Browser support for CORS is mostly good, but if you have to support some older browsers (even IE9), you’ll need a backup option I'm sorry but Microsoft stopped supporting IE9 almost a year ago. It's market share is nowhere to be found anymore for being so insignificant: https://www.w3counter.com/globalstats.php IE11 has 3.65% market share, if IE10 is not making it above 1.8 then no, I do not think you have to worry about supporting IE9 anymore. Especially if you're re-inventing a technology. 
How using `http-server` or using node instead of running the code in the browser is "tons of tools" is beyond me. I'm just stating the facts, 5 years is a while and I've seen some stuff and got some things done. If a developer with 5 years of experience (which is very little IMO) sounds like authority to you, that's your problem. &gt; Incremental delivery is a mindset. It applies to all scales. But how one person feels productive is subjective. You might be faster with opening a html file via `file://` protocol, but I can get going faster with jsfiddle and avoid writing any boilerplate. I can't aruge that either one is objectively better, but as we are both competent web developers, we know that `file://` protocol has it's limitations and it's best that beginners do not use it to avoid problems such as the one OP is talking about. 
I would say unit, because e2e tests are slow and we only used them for proving the implementation of the requirements from the user storys. Unit tests are quicker and display implementation errors easier and more quickly imo. 
In a browser? Probably only WebRTC
e2e tests can be done by any employee or even the customer without being automated. So I'd say unit tests because they are more easily written and maintained. And as a developer they will save you time on future iterations.
Our field *will* have a lot to answer for. JavaScript is accessible for use without huge amounts of learning before starting, like PHP proved in the past few decades, so like PHP, it will spawn loads of decent codebases, but also loads of badly maintained ones. You can bet you bottom dollar that there will be some unmaintained, legacy, technically bankrupt codebase in some vital, unchangeable, role somewhere that will make JavaScript seem terrible. There probably already is.
IMHO definitely e2e as they cover "real" functionality. I would choose e2e as even when unit tests are passing this might happen - https://i.pinimg.com/originals/f8/96/00/f896005d0548bb2ea84227c1acbe3232.gif ;)
There is no right or wrong answer here, as far as I'm concerned. Both kinds of tests serve different purposes and depending on the quality of the codebase and the quality of the tests provide different value. Personally, I would also lean towards E2E over unit tests, because they (ideally) test the entire product from a user's perspective. Actually, if there is a "right" answer, it is to choose to say no to the PM and to not release until both the feature and all tests are completed. 
 &lt;script src="build.es5.js" nomodule&gt;&lt;/script&gt; &lt;script src="build.es2017.mjs" type="module"&gt;&lt;/script&gt;
Stable was 60 and since 2017/09/05 it's 61 :-)
What is this?
I'm not seeing what point you're making. Perhaps some words that go with that snippet of html may clear things up.
Sorry I just mean by using the "nomodule" attribute, you can test if the browser support es2017 (more or less) to serve either the transpile js or plain es2017 js: - during development you can run your modules directly (no need to recompile them on each edit and to hot-reload them). - in production, in evergreen browser, you will serve something rollup or webpack built to merge your module together or in bundles (once browsers support `import()`). - in production, in legacy browser, you will served your transpiled and merges modules. Of course, once some browsers supporting modules become legacy (on mobile) you will need to transpile to es2017 your production module build :)
Beta (Linux 64-bit) is @ 61.0.3163.79
If they are returning the proper status codes, a 405 means you used the wrong method. A 401 should be the CORS status code. [stackoverflow on status codes](https://stackoverflow.com/questions/11200570/should-i-return-a-401-or-a-405-response-code-to-a-rest-api-user-without-sufficie)
free: CodeCademy, free code camp, javascriptissexy paid: udemy courses
Webpack should have never allowed importing non JS assets in the first place
_YES_
&gt; but adding methods or props through inheritance doesn't work I'm not sure what you mean here. You can use inheritance with weak maps as long as you're inheriting through classes (going through a constructor and not using something like `Object.create`). In fact the weak map approach is functionally how private members will work when ultimately implemented in the language, at least as far as the current proposal goes. If you're worried about non-constructor inheritance, then the safer route would be to use symbols. They're accessed and inherited the same way as other public members and as a result no issues with `Object.create`, etc. They're not fully private (though hard enough to access) but provide the benefit of preventing identifier collisions. In other words, users can add their own `entries` field to an instance or as part of a subclass and not worry about it potentially conflicting with an internal member of that same name. Edit: missing word
I googled "how to sanitize inputs." The second result is suggesting that the very idea of input sanitization is nonsense. It suggests escaping instead. Are you suggesting escaping or sanitizing? Are you suggesting removing bad characters? What about Conan O'Brien? No apostrophes allowed? That is amateur at best and a huge security risk at worst. Suggesting sanitization requires more detail. Here's the "second result" I mentioned above: https://stackoverflow.com/questions/129677/whats-the-best-method-for-sanitizing-user-input-with-php I saw a post last night about someone complaining that an email input on a form would only allow email addresses from popular domains. It's hilariously wrong, I know. But it illustrates the kind of approach someone would take after being introduced to input "sanitization." The concept of rejecting bad inputs seems simple enough to attempt to implement yourself. Such a suggestion requires details. Now, let's look up ORM or parameterized queries. Unsurprisingly, the results are direct and decisive. I have never met anyone who actually thought that SQL concatenation was a good idea in production. You're the first. This should worry you. I'm not here to suggest half-ass implementations and "one time" solutions that will rot a codebase. I'm a professional, and as such, I suggest solutions that are not fundamentally flawed. Yes, sometimes "rewrite you're codebase" is the correct answer. In the case of SQL concatenation, this is decidedly always the answer. 
egghead.io is great for javascript. But not everything is free there.
Array's `sort()` method by default, uses binary string comparison. i.e. compare by character code. Thus `"Z"` would be placed before `"a"`, since the character code for `"Z"` is `90`, and `"a"` is `97`. You'll need to use a custom string comparison function for the `sort()` method. e.g. http://jsbin.com/teluzifiri/edit?html,js,output The `strCompare()` string comparison function first compare the strings case-insensitively. If both are the same (which ensure that B/b comes after A/a, C/c comes after B/b, etc.), it'll compare them case-sensitively (so that uppercased characters would have higher rank than lowercased characters).
Beta and Stable don't bump to the next major version at the same time. They currently point to the same build: - https://chromereleases.googleblog.com/2017/09/stable-channel-update-for-desktop.html - https://chromereleases.googleblog.com/2017/09/beta-channel-update-for-desktop.html - https://www.chromestatus.com/features dev -&gt; 62, beta -&gt; 61, stable -&gt; 61 
I imagine Webpack will just transpile the non JS imports, and leave the JS ones. It's definitely going to leave a confusing disconnect between source and output though.
Hi /u/jfranklin34, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
When I think of global state, I wasn't really talking about it from a framework point of view. You know globals like `window.someVar`. Unfortunately, in the context of this article global state of something like Redux is more like an in-memory database.
* You should take advantage of CSS and simply add/remove additional classes. This is the correct route. CSS classes weren't meant to be redefined. * You could (but this is extremely hacky and ill-advised) inject a new stylesheet into your document that contained the redefined CSS rules; you might need to use `!important` everywhere, though. * Or maybe use something like [`CSSStyleSheet.deleteRule()`](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/deleteRule) (and `CSSStyleSheet.insertRule()`).
fix me, but afaik you still have to use some kind of module bundler if you want to avoid thousands of network requests for one-liner modules.
I just threw together an example, in case it saves anyone 10 minutes: https://github.com/bgard6977/webmodules 
I assume this project is more for professional/person growth rather than a product OP wants others to actually use. App size is 159.8MB for showing colors. Definitely kudos for trying out Electron and building something with it, but I hope you're also aware of the downsides of it.
It is a bundle for older browsers: &lt;script src="build.es5.js" nomodule&gt;&lt;/script&gt; It is a ESM entry point for newer browsers: &lt;script src="build.es2017.mjs" type="module"&gt;&lt;/script&gt; This is using the updated MIME for JavaScript with the .mjs file extension : https://datatracker.ietf.org/doc/draft-bfarias-javascript-mjs/
Yeah this should have been handled directly in the webpack config instead.
Isn't HTTP2 supposed to make this less of a worry? I could be wrong
Oddly enough, I've felt the same way about your responses. Maybe you're projecting? Have a good day. 
Just a HTTP request or if it's continuous data, you might want to look into websockets. Keep in mind you'll need a server, which could just be one of the computers.
...Why are you writing thousands of one-line modules?
Be sure to include `type=module` and serve with a valid JS MIME type.
i'm not, but some other module i'm using might be using lots of sub-dependencies.
You did, thanks :)
Your language was consistently inflammatory. "Well no shit. " "some broken half ass untested" "doesn't exactly move the conversation forward, does it?" Your information was incorrect/bad advice: "This isn't an architectural question." "ORMs... string manipulation! ;)" "...implemented right now for this." You refused to actually be helpful by providing details about sanitization or its cousin, escaping. Instead, you created strawman arguments and analogies with inflammatory language. Yes. Because of this, I shut the conversation down. I'm being honest about projection. You're simply wrong here, and you don't like it. 
Then don't use that module. The current dependency nightmare is because everybody just throws on a dependency without thinking about the added complexity and amount of files they're including, and people need to hold module creators accountable for that. Oh right. I'm in /r/javascript, where good coding practices go to die. Never mind, then.
Id really like to use this in chrome extensions (content scripts especially), I'm curious if that's going to work.
I recommend you pixi.js and particles extension. (Shameless plug: game made with pixijs including jetpack particles. http://klad.io )
Yes, it's just an app to learn Electron. And it works great when I'm offline :) And yes it's big because I just did the application and I packaged. Also I learn a lot of APIs about Electron. This app help me for these APIs. Ps. I new at Electron so I don't know how to minimize the package size :)
my thoughts exactly! but unfortunately, sometimes you just cannot find an alternative module for your problem.
We are not going to charge a percentage of revenue, we will be having tiered planning with flat monthly fee. Percentage of revenue could become very costly, and Chargify charges both % of revenue and monthly fee.
Huh.. I can see how you took [this response](https://www.reddit.com/r/javascript/comments/6y4wmg/have_n_number_of_input_fields_that_may_or_may_not/dmm7ar0/) as an attack. I was just disagreeing with you. My apologies. I never intended for that to come across as inflammatory. I'll consider being less direct in the future during disagreements. I sincerely thank you for the insight.
It's funny AngularJS was promoted as MVVM and we were encouraged to write big views, and directives were a little extra, like filters, not the main thing by any means. Yet directives allowed for the component-based architecture that took over the front end thanks to React (remember the "use an isolate scope for reusable components" mantra?). If only they had had a less insane interface...
This is great. I love seeing what other people are using to learn. Thanks for sharing. Were you doing some actual coding along with these videos?
Correct me if I'm wrong, but a browser not supporting "nomodule" or 'type="module"' will load both scripts...
The 'ol double dip!
No prob. I often get carried away myself (see previous comments for proof :) It's a fair point that difficult advice can potentially be ignored. It's also a fair point that "rearchitecting right now" is not always an option. In those scenarios, I agree. Sanitization (front and backend) is a fine initial fix, with an understanding that the project will incur technical debt. I think we're saying the same thing here, but I can see why you've taken my stance to be less than agreeable. I've never conceded that there is a proper place for sanitization. That was my mistake. In my job, I have to be a stickler for long-lasting and concrete solutions in the face of simpler ones, so this kind of suggestion tends to hit a nerve.
Glancing over the link, this looks akin to the architectural flow of Flux, Redux, Vuex and the like. Is that a correct assessment?
So, to deal with people messing with your psuedo privates, did you just say "here's the contract and if you screw with the psuedo privates, whatever behavior happens next is not my fault?" Did you have a layer of securty in case someone accidentally messed with them? Thanks
This seems great: &gt; The Web Share API, available today on Chrome for Android allows you to invoke the native sharing capabilities of the users device, allowing the user to easily share text or links with any of their installed native apps! Because I think people are often not logged in to say Facebook in their mobile phone's _browser_? So when, on a website, someone clicks share-with-Facebook, a Facebook login dialog appears, and they have to type email + password. Which is annoying, on a mobile phone. I guess they might just cancel instead (not share or like). But they're probably logged in to the Facebook native app? And now they can share, without having to type username &amp; password? That seems good
We just use `babel-preset-env`, target our supported browser versions and basically don't worry about to it.
Id you are interested in learning this stuff, I'd highly recommend looking into "Coding Math" on Youtube: https://www.youtube.com/watch?v=zm9bqSSiIdo&amp;list=PL7wAPgl1JVvUEb0dIygHzO4698tmcwLk9 he does a bunch of stuff like what you are describing and explains very well how to do awesome visualisations yourself, without any libraries. 
Didn't expect that, never used WP before but now it can be interesting.
This is great for Chrome users and a big step to using ES6 modules on the client. We're still a long way from implementing this technology for non-Chrome browsers a bunch of people around the world use: FF, Safari, IE, Opera, etc. 
Old browsers will ignore the `nomodule` attribute since they don't know about it, and won't recognize that `type` value and will ignore that script. Conversely, new browsers will see the `nomodule` attribute and know to not load that script.
Video linked by /u/Amadox: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Coding Math: Episode 1 - Introduction](https://youtube.com/watch?v=zm9bqSSiIdo&amp;list=PL7wAPgl1JVvUEb0dIygHzO4698tmcwLk9)|Coding Math|2013-11-25|0:07:50|783+ (98%)|50,615 &gt; Coding Math is a video series aimed at demonstrating... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/Amadox ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dmn40we\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
What? The whole point of modules is modularizing your applications. Even if you don't use external packages, it is still generally good practice to split your application into several modules, one per class or piece of functionality. Even a medium-sized app following this guideline might have over a hundred modules. Right now, webpack solves this problem by bundling all of the modules together into one or a few files so only one request is made, but if browsers start supporting ecmascript modules, suddenly you don't need to bundle anymore and your hundred modules will each be their own request. I don't believe this problem has a solution (aside from HTTP/2 perhaps). As a side note, you may be mistaking modules for packages, where a module is just a single source code file and a package is a dependency such as a library.
...just for their homepage, not for wordpress itself.
that title is kinda missleading...
Oh yeah let's just everyone write their own bubble sort instead of using a battle hardened one that'll DEFINITELY be an improvement
Misleading title. This is just the dashboard interface for **wordpress.com**
Doesn't even fully make sense. You're replacing PHP with Node and React, and MySQL with... What?
So the library is [hardcoded to lookup www.google.com](https://github.com/LiamRR/JSdns/blob/master/JSdns.js#L15). If you want to lookup anything else, you need to modify the source code. Wut? I think you haven't quite grasped the purpose of a Node module.
And any wordpress using the JetPack plugin.
Out of curiosity, what do you think the right way is to declare that a JS module depends on CSS? I can appreciate that importing CSS into JS is funky, but I also like declaring that JS module A depends on CSS file B.
They're missing the new assignment feature that was released in Safari. a;10 console.log(a) # =&gt; 10 Looks likes Chrome is finally behind the curve. Edit: /s Good on you Apple.
Yes :/ what way would you suggest I do it? Note that I'm pretty new to this lol 😉 any help welcomed Actually. I'm going to re-think this tonight. 
Seems like it doesn't work yet: https://bugs.chromium.org/p/chromium/issues/detail?id=738739
Unfortunately, one of the biggest drawbacks of using Electron is its package size. Electron packages an entire Chromium runtime with any app you develop, which accounts for the majority of the size. 
Safari shipped ES modules a few months ago. FF and EDGE have them under the flag, hopefully should be shipped in the next version(s)
This is 100% inaccurate title. WP is not "leaving" php/mysql -- they are *adding* node/react. You still have the backend present and powered by php/mysql -- they're simply separating the FE/BE with a modernized JS frontend.
Yes.
You aren't reading it, by the looks of it. [`reader.readAs...`](https://developer.mozilla.org/en-US/docs/Web/API/FileReader#Methods) is not called in your snippet. ~~You're instead calling the `onload` function yourself, which creates an new Image with an undefined `src`, which then fails to load.~~ (ed: my mistake, that's a closure.) `reader.onload` is an EventHandler - it a callback that the reader fires when it's done. Assuming you're wanting to use Data URLs, it should look like this: var reader = new FileReader(); reader.onload = function( ev ){ // ev.target === reader // ev.target.result === reader.result === the dataurl string, your img's new src } reader.readAsDataURL( files[0] ); Note that the image may not load instantly - you're currently racing to load the image before the cropper needs it. To be safe you should call the cropper from the image's own `onload` event.
Ah, I see... didn't think about that. Thanks!
usb thumb drive
Hi! Author here. I briefly went over it in the post, but the reason why we don't use Nodemon and co is that our boot process is long as our app is quite large. For any given route (represented by an "app") there is a backend component as well as a frontend component; the backend component hooks into middleware that compiles frontend-code (in development), generating assets. During the initial compile this process can be extremely slow until incremental builds kick in. This fixes that problem completely. But aside from the frontend portion, we've found using hot-swapping to be quite a bit faster overall, even for server-centric services. Nodemon et al reboots the entire system; `express-reloadable` swaps out changed files during runtime. In larger apps these seconds add up and become noticeable, so every little cycle counts. 
I am ludicrously envious
I don't think there is a right way to make JS depend on a CSS file. CSS is seperate, if you're looking to style a component, give that component a unique tag or class name.
Right on - I'd add/remove a class on the body (or some other element that you know will contain all the elements you care about) and use a descendant selector to change the behavior when the outer class is present.
I am making my Angular 1 app happier, by rewriting it into knockout + router5.
&gt; The sourcemap support for transpiled ES6 modules is pretty bad The sourcemaps that Webpack generates are fine, but certain settings are broken (last I checked) due to several factors (including an issue in Chrome).
This doesn't make sense. Unless you're doing something wrong (which, with Webpack, is understandable) the end result of importing a non-JS asset either isn't transpiled at all, or you can generate a source map for it, or you can externalize it from the bundle.
But that is one of Webpack's best features.
&gt;You’re maybe wondering why you would need such an old framework Excuse me 
These are good suggestions.
&gt; The current dependency nightmare is because everybody just throws on a dependency without thinking about the added complexity and amount of files they're including That's what third-party dependencies are for. Don't preemptively optimize, do enable tree shaking, and do use a bundle analyzer.
knockout is solid
https://www.npmjs.com/package/watch-http-server - live reloading with zero config :)
It is relatively simple, that's for sure.
Quote with &gt;, and double enter for a new paragraph.
Can you elaborate? Both webpack and Babel have open GitHub issues around mapping import names. The result is that "import $ from 'jquery';" will create something like '_$' which is an object that has property 'default'. My understanding is that there has not been any effort by webpack/Babel to map $ to _$.default - though I believe that the sourcemap spec does now define a way to do so.
I've made a simple React driver that we're using in production at Descartes Labs: https://github.com/sunny-g/cycle-react-driver
Nice read, it is useful to reduce something that may seem complex to such simple examples. (Not sure if you are the author of this article but if so the link to your twitter in the article seems to be broken)
/r/learnjavascript
Yeah what I normally do is not document any private methods at all ever, and make it clear in your documentation that if a method is undocumented that it is considered private and has no guarantees. If I feel the need to write documentation for a private method (it's happened) then I make sure the project at least has a naming convention that implies something is private, typically this means I prefix all private methods with an underscore. If someone uses my library and is using private methods/attributes and I remove or change them in the future, then tough shit buddy, I never said it was ok to use that, that is your fault, not mine. If you want to buy a pair of pants and put them on backwards I don't think Levis will give a shit, but they will think you're an idiot. There is really no point in adding a "layer of security in case someone accidentally messed with" my APIs. Security in what sense? Preventing them from doing what? If it's a client side JavaScript library then security is mostly a moot point because it has to communicate with your server eventually, so just secure everything at the server, don't trust anything a client does ever. Plus, if your library is communicating with your server someone can very easily open their dev tools in the browser and reverse engineer your API and write their own client that does something malicious. Never trust client side code.
My project has 100 components that are imported in various places. It's unfortunate to import the JS for those components in a way that supports tree-shaking, and also declare CSS dependencies in a completely removed manner. CSS modules fit the bill but don't help with legacy CSS.
We are working on this open source project with NodeJS, Express, React, and Redux. Git repo: https://github.com/service-bot/servicebot Would love to hear some feedback!
Yeah, I search how to minimize package size and I saw this not possible :D My app size is 1.4Mb but .exe file is 60Mb and installed size is 160 Mb :D
But now bundlers can have simpler JS module -&gt; JS module semantic and utilize the native loader for loading shards. It also means that in development you don't have to run a bundler.
Thanks i was too lazy to Google it ☺️
I suggest you read the [Node documentation about Modules](https://nodejs.org/api/modules.html) Basically you want to use the exports global to define an API for your library. For example: exports.lookup = (host) =&gt; { ... };
Node is adding behavior that's not found on the web: named import specifiers, allowing imports of CommonJS, switching between CommonJS and JS modules based on file extension. I'd stick to not importing anything but real modules, and only using paths to import.
What was that guy's name again?
I got tired of working with Regular Expressions by using console or generic regex online tools. So I made this WYSIWYG Regex editor specifically for those who JavaScript. It shows you real-time preview of most regex methods like test, match, exec etc. Available now at https://regexly.chipto.io
When will Firefox ship Web USB (assuming they are planning to do it sometime)?
Why would you want to do that instead of simply pushing the new string into the array and then sorting it?
Actors are at about the same level of abstraction as callbacks and Promises — they are building blocks that let you tackle asynchronous problems. Flux is an application design pattern, and it's at a higher level of abstraction compared to Actors. Could you implement Flux using Actors? Most probably yes, but that's just an implementation detail at that level.
Yes, especially the one made by Chris Hawkes and learncodeacademy. But I also really enjoy mpj's videos.
Java or Javascript?
there is nothing wrong with changing the class on many elements. Alternatively change the container element class and use the child selector.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
react-redux provider is root component and accumulates all of application state. And you can use this state all along your app. This is not some "global (like window)" state (until you intentionaly want make it shared like this).
What is the advantage of this?
It's all about picking the right tool for the right job. I've seen some people pick angular just because they need two-way databinding, and I've always thought of that as being akin to putting monster truck tires onto a sedan. I don't know your business requirements, but if knockout and router5 make your life easier and your clients happy, then that's awesome. 
You could always wrap FileReader in a Promise if you want that sort of api (resolve when it succeeds).
Better XSS.
Why in JS? 
Of course — and so what? The OP didn't mention anything about the array sort being a performance bottleneck, so why recommend this kind of optimalization? Wouldn't it be, what's the word... premature?
There is a spec being outlined for HTML modules (which is a non-JS type). I don't think the problem is that webpack supports other filetypes, its just that we don't have a standard yet. Some day there will be a good one and then we'll have a standard consensus of what to expect when importing the type.
It fixes the problem, but you still gotta get some process to figure out the dependency graph and then push out the files within a single request.
I like it. &lt;3
You are completely right and I stand corrected. Don't know how I managed to miss that in OP's post, but I did.
`rm -rf angularapp`
The library inter-dependency problem is a much larger problem of decentralized work, and where volunteer mindshare should be spent.
Was it this? https://tech.io/playgrounds/347/javascript-promises-mastering-the-asynchronous/what-is-asynchronous-in-javascript
CSS modules seem like a good compromise for now, but I feel like in a few years they might be totally outdated and replaced with something better.
That is object oriented javascript
Yes. But perhaps I wasn't clear. I will edit. 
I will never understand why so many bloggers and GitHub users upload weird/creepy portrait shots of themselves on their projects. I feel like every time I see a reddit post of some new tool, API, or other pet-project the thumbnail is super awkward
Look into codeschool.com - did their 3 JavaScript course and found them a lot more challenging than TTH. 
Finally had the possibility to try it out on a physical iPhone... The scrolling is really awkward. Gonna fix that ASAP ;)
 npm install vue
bullshit
 npm install aurelia-cli -g au new 
i implemented structured query language in javascript. it's got less bugs, wider support and smaller size than similar libraries (alasql). better logo too. http://pamblam.github.io/jSQL/
Self-promotion. 
[removed]
My man. 
i'm not familiar with every pattern name but it's similar to the [revealing module pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript). your specific one is probably somewhere in that book, though.
I'm going to start off with stating that I am not an angular fan. I'm not a fan because I've had to help a large enterprise r&amp;d group build web apps in it and there are too many black boxes that devs don't understand. (I cannot count the number of angular devs at that shop who couldnt explain the digest cycle effectively and how dirty checks happen for example) That being said all of these are really great advice and following will help people understand some of those black boxes better. While I would still advocate for any new dev to be done in React, modern Angular, Vue, etc, this is great advice for people with out the ability to migrate their codebase to a new framework. 
In the $watch example, do you really need to use it? I mean, whenever you change the currentUser, everything on the template that is based on him should update because it is going to trigger a $digest, right? Unless you're doing something asynchronous that isn't using angular's $q or $timeout
The error message seems pretty descriptive. Your URL is in some kind of blacklist.
Very cool, but I have to recommend you check out RegEx buddy.
Branding is an important part of 21st century life. I'd hire the weird guy with the picture before Id hire the weird guy with *no* picture.
the way you did it, it isn't really anything. there's no reason to use the new keyword with your `changer` function because it's not really constructing anything. it's methods are static. most of the time this sort of thing is done in javascript to provide a private scope to write functions in, in that case you don't usually instantiate it with `new`.
It depends what the software is, what you're testing and what you use it for... and how much you depend on it. Eg if you use a tool by Company X to calculate mortgage amortizations you want the tool to be accurate. Having some tests you can throw at it to ensure it does things correctly, esp. after a software upgrade could be quite useful and protective. In my world I write web applications thus depend on web browsers/webviews to run my apps. I have a test suite I run in new versions of browsers to see what they do. On multiple occasions Chrome has updated and changed the behaviour of something that negatively affected my apps, ditto with IE/edge even to the point where a small batch of builds break but before and after are ok. At a minimum some smoke tests will give you some confidence that nothing major breaks during a 3rd party software update. Banks in particular tend to be more cautious.
This might be my new go-to, nice work
My ears were dying to hear this. Thank you.
I usually use regex101.com, if you ever add an explanation and quick reference like they have that would really make it good. I love the function previews at the bottom on your site though
Hopefully this doesn't go the same direction as Durandal, Caliburn, or his work on Angular. Just a bunch of NIH. 
Thanks for the sweet words. My goal (only goal rather) was to keep this as minimal as possible in terms of UI and features. Other tools, like [Regexr](http://regexr.com/) the one I got inspiration from and the one I sourced my tokenizer/parsers from, are very generic/broad scoped. This one is specifically and only for those who JavaScript and Node.js
looks interesting, i worry the name may prevent it from catching on.
Me too.. thanks :p
Alternatively, var things=[]; things=document.getElementsByClassName('classname'); for(var i=0; i&lt;things.length; i++){ // do stuff things[i].style.color='red'; } This is pretty easy, or maybe it's exactly what you are trying to avoid?
I myself have lived my life using tools like those, but knowing what the "real" output will be when you actually put things together in your code saves a lot of pain and time spent in debugger and console. I was considering explanations/references myself but after I read "Don't make me think" by Steve Krug, I'm bit nervous. Maybe I'll add them in collapsible pane 
The community seems pretty active, and the few short investigatory projects I've done with it recently went like a dream. Not too opinionated, not too much hardcoded automagic.
No, and it doesn't make sense to me either for the exact reason you've listed.
CSS Modules are a separate thing from HTML Modules : https://github.com/w3c/webcomponents/issues/645 that are inferred by the extension. I think it's a cool idea and makes total sense with the way webpack works.
What part is bullshit?
regex101.com is my normal go-to, but their examples suck. I find myself googling syntax, and having it at the bottom is really nice. I'd personally like to see the expression and sample text a little bit bigger. They don't feel like the focus of the page.
The template will update, but JS code that relies on it will not unless you watch for the change event
Why is he saying "ani-mee" Is it not prenounced like the chinese cartoons? Edit: sorry for asking 
`sort()` will compare every item in the array with every other item in the array every time. just splice it in where it needs to go. * loop thru the array backwards until you find an index that is "less" than the value to insert and `splice` it in after that. * if you never find a value less than the one you want to insert, either `push` or `unshift` it, depending on the value of the first index. for(var i=data.length-1; item=data[i]; i--){ if(item &lt; input){ data.splice(i+1, 0, input); added = true; break; } } if(!added) !data.length || data[0] &gt; data.length ? data.push(input) : data.unshift(input); http://jsbin.com/yewarobusi/2/edit?html,js,output
lolwut
This is really just a factory function, _new_ isn't doing anything here as you aren't using _this_
what on earth does any of that have to do with the question? he wants to avoid `sort`, not make it even more inefficient. 
it's called a race condition. wait for the response before you start doing stuff with it.
This is great! I love the regular expression related methods and return values. I can never remember what methods return what. Added to my bookmarks. 
Really? It struck me as solving the same problem of "state management in systems that support async" but in the opposite way. Redux asks you to define one source of truth for the state of your app, this actor pattern seems to ask you to let every actor be its own source of truth. I may not have gotten the full picture from this article though, I'd like to hear more about it.
Or end up like backbone, angularjs, polymer, dojo or jquery.
what am i clairvoyant? how do you expect me to debug code for you without seeing it... line 34.. maybe
I've seen this in engineering applications. When an update is released, it's imperative that the application produces the same output. In most cases, the tests will pass, but sometimes there is a failure by software providers to retain backwards compatibility. I've caught a few issues during upgrades using internal testing. I can imagine similar scrutiny is required for banking applications. 
Have you ever tried [Rubular](http://rubular.com/)? it is normally my go to
But that's for ruby isn't it?
Does anyone who has used greensock and anime.js have any comments on how the two compare?
Let's hope so!
obviously you have to encode the bits with java and send them over the html network using DOS
How do you mean it isn't doing anything? I've created a new object based on the other object. How else would I use that type of function?
lol
How would you use it *without* `new()` — can you give an example?
I'm just going to point out some basic issues. &gt; 11. ("#StartButton"). onclick = startNewGame (); Spaces before "onclick" and "()" will break the flow. &gt; 184. updateEntity = function (something){ Same with the space after "function" After line 285 you repeat the first 16 lines which includes duplicate IDs. That breaks the browser since it can't figure out which of the duplicate IDs it's supposed to reference. Also, is this app supposed to be run with jQuery? Maybe I'm missing where jQuery is loaded. The whole thing also needs to be dropped into an HTML5 wrapper.
Yeah my bad, lines 1-13 is in jQuery which I will remove. I just want a canvas that will display a title and a button where I can press to then display the actual game canvas by using a onclick function. Doesn't have to be fancy just a simple text with an arial font. 
sure. take a peek at this project i'm working on: https://github.com/Pamblam/jSQL The main js file is defined like this: jSQL = (function(){ // lots of variables and functions return { // object properties }; })(); that way if i wanna have a variable called`myVariable` inside my `jSQL` plugin i don't have to worry about there being another variable called `myVariable` somewhere else in the script. find a tutorial on scope in javascript for more information. or if you wanted an example of how you would use your changer function, it's the same, just without the `new`. var changer = caseChanger(); console.log(changer.lc('hELLo wOrLd')); console.log(changer.uc('hELLo wOrLd')); or if you wanna use the `new`, you could do something like this function caseChanger(){ this.lc = function(str){return str.toLowerCase();}; this.uc = function(str){return str.toUpperCase();}; } var changer = new caseChanger; console.log(changer.lc('hELLo wOrLd')); console.log(changer.uc('hELLo wOrLd')); however, if you're making constructors you're better off using the `prototype` so you're not defining the same methods over and over for ever instance you create: function caseChanger(){}; caseChange.prototype.lc = function(str){return str.toLowerCase();}; caseChange.prototype.uc = function(str){return str.toUpperCase();}; var changer = new caseChanger; console.log(changer.lc('hELLo wOrLd')); console.log(changer.uc('hELLo wOrLd')); but again, you're not constructing anything, so in this case, anything that uses `new` to construct an object is pointless.
what even is an iframe [jk]
Great book! 
The article is junk.
Ok this seems really useful but I don’t need it right now (last week would have been great!) and I know I’ll have forgotten it when I do need it. How do people remember things like this?
if it helps me get that next, better-paying job, i'd do it.
That's not branding though. Associating a project with a human identity is not a good way to create a persona and identity unique to your brand... I get it for small projects and résumé boosters, but if you want your project to grow to become bigger than yourself you need to give it a set of well-designed, identifiable graphics that convey to the consumer or end-user what that product is about. You can still apply to a job and explain, "I created such-and-such project that has a user-base of X and has been forked X times". If I were hiring, I would think much more highly of a project with thoughtful and effective expression rather than just uploading your most recent selfie.
use window.frames.myFrame
That's what I did with `window.myframe`. `window.frames === window`, so `window.frames.myframe === window.myframe`
debuggex.com is cool too
i like looking at my own face so i want to see it in as many places as possible.
I'm one step closer to the Edge and I'm about to break??
The unicorn thing is very twee and effeminate. Apart from that, even if ironic, it's still kitsch. Can't we think for ourselves?
I myself place stuff in bookmarks bar. At the end of day you remember stuff when it hurts, just like you remember Google, MDN, CodePen, JsFiddle etc. 
yes I was pretty clear in the title - "without iteration through each element". Anyway I received a working answer, thanks though.
Anime is japanese cartoons.
No fans of regexr?
Ok. Do one thing at a time and make sure each step works so it's easier to debug. Work on design and development separately. Just do all the graphic elements first (HTML + minimal CSS), then build in functionality. **Basic Layout** 1. Create an HTML5 wrapper. 1. Create a canvas (minimal attributes). Test to make sure it's there — You can use a background color or border. 1. Create a title. 1. Create a button on the page. Use CSS to set the font-family: to arial, and whatever color: you want. Check your code for syntax errors (Hint: it's always syntax). **Game Canvas** (if I understand correctly that you are using two canvases for different purposes) 1. Create the second canvas. Make sure it's there. It doesn't matter that appears below the first canvas, you can fine tune the design later. Let's get it on the page and working. 1. Give it an ID. Call it what it is. **Development** 1. Create a script container in the head of the document. Make a super simple script function() which will make a change to the game canvas (change the color, move or resize the canvas). It's just something to test to make sure you're properly targeting the game canvas. You can use a getElementById('gameCanvas').fillStyle method 1. Put an onclick event on the button to calling the function(). Test it. Make corrections if needed. If you cannot get the script to work, put an alert('ok') at the top of the function. If the alert() appears when you press the button, the function is being called successfully and the problem is after the alert. If the alert() does not appear, then the problem is with calling the function(). I *think* that's it for what you have to do thus far. When you get to creating the game script, use the same process — do a bit, test it to make sure it works to that point, do the next bit (I often use an alert() to make sure variables are working at points). Don't try to write the whole script at once. And trust me on this: Do it the hard way. It's perfectly fine to use reference or modify existing code, just make sure you know what it's all doing and why it should or should not be done that way. Don't just copy paste.
I am. This tool is inspired and based of off* Regexr. This is just more dedicated to JavaScript ecosystem. \* Regexly borrows tokenizers and highlighters from Regexr's codebase
that was very constructive. mind elaborating?
And people still have hopes! One day...some day....
You would just call the function: `var x = caseChanger();` without using `new`.
That's my go-to.
your example was a bit sloppy (things instead of things.length, also your for loop used commas instead of semicolons) but I got it working. I tested a huge document (50,000 repetitions) and there is no difference between your version and the single derived class version!
Wow hah
right, I added or removed the class. By the way there was no difference between this approach and iterating.
That did the magic. Thanks!
Cool! Looks and feels awesome :) You may want to join to @RegexHQ org? I'm initial organizer of it and author of some stress tested RegExps like `youtube-regex` and `mention-regex`. I can send you invite and you can move your tool here :) I'm also adding it in our wiki.
Please go spam LinkedIn like everyone else.
This is great, it added some clarity that I hadn't seen from other articles. It's certainly not as bad as I previously thought. I feel like it's a insidious license agreement though. Mostly in the case of releasing open source projects. If say react is a dependency of your library, all the sudden users of your library now have to agree to the facebook license. Fairly certain this was the main reason Apache made the decision not to allow dependencies that fall under the license.
As if
What's the problem here? Due to security restrictions you can't access it, I guess. How does Chrome behave?
This looks good so far on my phone. Will check it out tomorrow from my computer. Thank you for sharing
Creating an iframe should still be accessible, as long as it hasn't loaded something out of context. Either Edge is broken here, or OP loaded a page into the frame from some other context.
at least undefined is typeof object 👍💩☢️
Every frame you append to meeeeeeeeee...
This is definitely a case of edge being broken. My favorite part is not even being able to do `x === x`, which should never error no matter what the value of `x`.
Banks are paranoid organisations by nature, and when you rely on software to manage and protect billions of dollars then spending a few million to test the software using is seen as a good and cheap insurance policy. Also, just because the software you buy in is tested, you still have to install it into your organisation's infrastructure and configure it all. It is valuable to test that the software, once installed and configured(!) is doing what you expect. 
Not being able to access it is fine. Not being able to do things like equality checks against it, or console logging it, is a problem. Chrome behaves in a much more sane way: http://i.imgur.com/ekF6i1b.png
Hey man, Thanks for your help but sadly I forgot a piece of code. I added the missing code in a new pastebin: https://pastebin.com/0SmRJ2U1 I would appreciate it if you could look at it again. 
The last line reminds me of my favorite browser puzzler. Can you pass a value to this function that causes it to return `true`? function f(val) { return (typeof val === 'undefined') &amp;&amp; val !== undefined &amp;&amp; !val; } rot13'd answer: qbphzrag.nyy
He didn't mention about the `.component` directive (see https://docs.angularjs.org/guide/component) what with using typescript and `.component` methods you can get into a pretty good space with angular 1.x
When will you ever learn? You can't 'win' with Edge.
Okay I tried to solve this the last 30 minutes or so and I successfully gave up on it. Can you explain if this is even possible and how?
what the shit?
Sure, you can use Brackets for JS development. There are a bunch of editors out there, such as Brackets, Atom, Sublime Text, VSCode and many more. All of them work well, and all of them have plugin/extension support. Just go with one of them and happy coding.
I honestly don't think this is completely fair to say. I'm actually relieved to see MS being hyper restrictive -- I'd honestly prefer this to seeing a post on how [the console can be used to break the browser security model](https://www.exploit-db.com/exploits/34363/). I'd agree this situation is pretty infuriating for devs, but "broken" means against going against some spec. The [Console spec](https://console.spec.whatwg.org/) doesn't have much to say about how browsers are supposed to do reflection and the DOM and ECMAScript specs are silent on it. But retaining the reference after "clearing" the body's innerHtml *is* correct behaviour (the node is removed from the DOM, but the reference keeps it from being GCed, and the security restrictions should survive as well).
Thanl you for the answer! &lt;3 Have a great day! &lt;3 
If you're beginning the editor doesn't impact your experience since you have no experience : ) with good and bad stuff. Every one should work for you as a starter. Once you get used, you will begin to feel "the language/stack" and have a clear image in what you like or not, and try different editors that fit your taste. Don't waste time, just start coding. Personally I use vscode.
I agree -- retaining the reference is the correct behavior. But what's the point of having a `win.closed` property if it's going to be inaccessible after the frame window is closed? And what do equality checks have to do with the console spec? Those two issues seem to violate the html and ecmascript specs respectively. And by the way -- the behavior is broken in different, but equally bizarre ways if the iframe is removed with `removeChild` (in which case `win.closed === false`). So it seems more likely this is just a case of random, hilarious IE/Edge bugginess than any kind of consistent security measure. And the icing on the cake is -- this was a same domain iframe when it was open, with unfettered access to all of its globals from the parent window, so it's not even a cross-domain issue.
Editor won't matter much initially. However i'd recommend sublime over pretty much every other editor.
Push me to the Edge all my friends are dead. 
Same here, 'full-blown' sounds like a lot but it actually isn't hard to set up.
That property is non-standard and deprecated in current browsers though. Still works in FF and Chrome however!
Found the [explanation](https://stackoverflow.com/a/10394873). tl;dr: backwards compatibility for browser capability checks &gt; This violation is motivated by a desire for compatibility with two classes of legacy content: one that uses the presence of document.all as a way to detect legacy user agents, and one that only supports those legacy user agents and uses the document.all object without testing for its presence first.
Sorry, I always have errors like that when typing on the phone. I made the corrections above though. Secondly, and I could be wrong on this, I think that the main performance draw is that of the actions, rather than the identification of elements within the class, because the browser must essentially do the work one-at-a-time anyways. There may be differences across browsers and devices, but I've never noticed too much of a delay using this method. 
And on top of that, monkey-patching things like Node.prototype is something we went away from a long time ago because it proved error-prone.
Ah wait I didn't take all the statements into context. I don't see what the issue is here now... other than IMHO Microsoft shouldn't be throwing a permission error but rather some sort of invalid/null pointer error. (Unless that's what you are trying to point out as flawed ;-) Step 1: you add an iframe as the current window's only body content. - works Step 2: you assign the inner iframe to the variable "win". - works Step 3: you log it to the console. - works Step 4: you wipe out the current window's entire body content (eg the iframe is being destroyed). - works Step 5: you attempt to set the closed property on the now deleted iframe. Fails Now I'll argue here that MSFT is being weird as I'd expect an error but not 'permission denied', I'd expect "can't access 'closed' property on undefined" as what we really have at this point is a null pointer. Step 6: you try to see if win is truly equal to win (is undefined equal to undefined) but both are null pointers so you get an error. Fail (permission error vs null pointer) Step 7: you compare it to a string. Fail (permission error vs null pointer) Step 8: you call typeof on variable win and get object. I'm not sure if I would expect the default "object" data type on a null pointer but... yeah I think "undefined" would make more sense here Step 9: you console log variable win and get undefined. Works as expected (now) Now I'm curious how other browsers handle this? After step 4 what is "win"... is it null? undefined? And what errors do they throw attempting to access it or compare it. 
It's *personal branding* - you are selling yourself. You want to walk into a room and have people associate your face with getting shit done. Also, no programmer worth their salt is going to individually brand their projects... they are too busy coding new projects.
use jquery and do $('classname').css('cssattribute','cssvalue') using plane javascript, document.getElementsByClassName('classname').style.cssattribute='cssvalue'
i forgot what but there is a bug in javascript where something is null or undefined and shouldn't be but fixing that bug would have broke half the internet so now it stays. edit: typeof null is an object
Every stupid rule it madeeeeee
It takes the word "bleeding" in bleeding edge on a whole new level
That is one ugly console
The thing is, JS has no notion of a null pointer whatsoever... Unrelated code shouldn't be able to mutate a variable and literally break the language like this. Edit: contrast with Firefox: document.body.innerHTML = "&lt;iframe name='foo'&gt;&lt;/iframe&gt;" // "&lt;iframe name='foo'&gt;&lt;/iframe&gt;" window.foo // Window → about:blank var ref = window.foo // undefined document.body.innerHTML = "" // "" ref // Window ref.closed // true ref === ref // true typeof ref // "object" console.log(ref) // Window { InstallTrigger: null, close: close(), stop: stop(), focus: focus(), blur: blur(), open: open(), alert: alert(), confirm: confirm(), prompt: prompt(), print: print(), 755 more… } // undefined
Another Edge case.
Check out Addy Osmani's Essential JS Design Patterns (free to read online): https://addyosmani.com/resources/essentialjsdesignpatterns/book/
It's a special object that exists in browsers for legacy compatibility. The special rules for handling it are defined in the HTML5 spec and described in appendix B.3.7 of the ECMAScript specification.
I am posting this simply because I am surprised how little this project have received attention. It is a wonderful platform for commenting, comment moderation, etc. It is being developed Mozilla, The New York Times, and The Washington Post. A lot better than any commercial alternative I could find.
Generally you can either: a) Only use the parts of ES6 that your chosen browser supports (which is very little because IE is garbage) https://kangax.github.io/compat-table/es6/ b) Use Babel https://babeljs.io/ to transpile your code to something that older browsers can use. In a nutshell, Babel basically takes your ES6 code and turns it back into ES5 code. You would do this as a "build" step before deploying your application.
There's also the option of using ES6 + polyfills
Nice one, good work!
Generally speaking: No. Could there be valid reasons, although would be more "the exception, rather than the norm": Yes. This would be more of an E2E or an Integration test - but if they can have some automated tests around "Their application is still performing as expected", then when they release a new version - can have some automated tests to verify "Yup, everything is good" before updating your software to use their newest version. It can also help isolate where the source of an error is popping up = "Is it on our end, and something we can control/fix, or is it an issue with the vendor? We have been sending X and getting Y back for ages - but now sending X gets Y back". It would be swell if everyone stuck to SemVer properly, and versioned breaking changes accordingly, etc - but thats not the world we live in, and even then - not everyone uses SemVer properly. 
Thanks! How well does transpiling work with regard to debugging? Because I'll be debugging code that was transpiled to ES5, can I reference back to the ES6 code?
Hi /u/Black_Yoshi, this post was removed because /r/javascript is not a job board.
Yes, using sourcemaps
Thanks very much!
...game?
The quickest, easiest thing would be to do nothing, since it sounds like it's already built! However, if the point of your curiosity is to learn a modern framework, Vue has a really nice easy learning curve and great docs, I'd highly recommend it. React/Preact are also great.
If you can't access it you shouldn't be able to check for equality. Being about to check for equality reveals information about something you're not allowed to access - it's a security leak.
You get an upvote, you get an upvote, EVERYBODY GETS AN UPVOTE
It's like library design from about 5 years ago. After that we had AMD and Common JS modules. Now we have ES6 modules.
No demo page?
What version of Edge are you running? I just tested this in IE11, Firefox, Chrome, and Edge and all of them set the reference to the iframe as undefined as soon as it is removed from the DOM via the innerHTML = ''; line.
You can see it in action on their blog https://blog.coralproject.net/the-empty-box/ (or on NYTimes or Washington Post). However, I didn't find the backend demo – meanwhile, setting up a demo with a docker is a breeze. In general, this app/ codebase is a good example of an app well done. Even though I am not planning to use it myself (different requirements), it serves as a guide coding guide.
Another recommendation for Vue and it's low learning curve. Also recommend taking a look at React/Preact and go with whatever seems to resonate for you (personally, I'm biased towards Vue).
&gt; beginning the editor doesn't impact your experience I disagree-a good editor like VSCode and Webstorm enhances your dev experience significantly-even if you're a total noob.
It's like a div, but if a div was built by Satan.
I actually know someone that was hired my Microsoft for the sole purpose of fixing their dev tools. He's a really smart guy, so it seems MS is actively searching for good talent to try and fix their garbage. It seems unlikely that they'll ever be back in "style," because they just seem to be too far behind all the time.
Jesus, why are you even trying MS? Just stop
It's a Joke. On 4chan (which is originally an anime website and still has tons of anime images posted even on the most unrelated threads) people call anime "Chinese Cartoons". The reason is probably so that if someone points out that they are actually japanese, you can identify them as an outsider.
`window.foo` becomes undefined, but the saved `var ref = window.foo` doesn't. I'm not running Edge at all (non-MS OS), this was Firefox. Edit: `var foo = window.foo` is equivalent to `window.foo = window.foo` in global scope, this may be why you got what you describe above. Edit2: Grummer
but dis is jabbascript wot are u honking about (but seriously - make request to server, POST request)
I replied to the wrong comment. But thank you for the link, I found it helpful nonetheless :)
because as developers we can't dictate what browsers our end users will use?
 Hold me now I'm six feet from the Edge and I'm thinking maybe six feet Ain't so far down
&gt; Just looking for the quickest, easiest way to do this. As another user said, mustache.js seems like the easiest solution, but other than that I would just do use [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) and "manually" build the dome. I mean you're just turning some json into a list right? I don't think you really need a framework for that.
I meant why Microsoft is even trying now, not why are we even using Edge. IE/Edge should needs to be taken out with a shovel.
Not only that, but you're well positioned for upgrading to Angular 2+
Too vague.
We need a windows without pre-installed browser
Honestly, if you're just looking to try javascript the lowest friction avenue would be the console in dev tools. ctrl + shift + i &gt; type javascript in
It defaults to the profile pic. Most people use a picture of themselves. I don't think they intend it to be weird/creepy... we're developers not models!
Just seeing the IE console gives me anxiety.
I never get to use it but I've always liked ejs. But in regard to frameworks all of them make this trivial -- angularJS and vue probably being the easiest to drop in. Writing a vanilla function that just places items into the DOM is probably the fastest way.
Whatever text editor you use, do a little research into good plugins to install - something like an article or YouTube video. I've tried all the text editors except for vim/emacs and I prefer Visual Studio Code ( even after paying for phpstorm) .
You're not allowed to access globals on a cross-domain window object. That's about all. The window in my example is neither cross-domain, nor am I trying to access any globals on it. So I'm not sure where the security leak here is -- especially since this works perfectly in every other browser.
&gt; This is definitely a case of edge being broken. Edge is behaving by-design here and, from a security standpoint, the behavior is desirable. Security assert permissions are failing during the comparison. &gt; My favorite part is not even being able to do x === x, which should never error no matter what the value of x. I understand why you might initially think that way but this isn't correct. There are plenty of cases in which you cannot do such a comparison in JavaScript, as you've discovered here. The equality check is not a reference comparison, it is evaluating intrinsic properties and failing due to aforementioned security assert.
If they're a good CTO they wouldn't need convincing
this is pretty cool, nice work!
&gt; There are plenty of cases in which you cannot do such a comparison in JavaScript Any others you can think of aside from `NaN`? &gt; The equality check is not a reference comparison, it is evaluating intrinsic properties and failing due to aforementioned security assert. You're saying strict equality checks evaluate properties on the object you're comparing? Preeeetty sure that's not correct &gt; { foo: 'bar' } === { foo: 'bar' } false Final question: if this behavior is for security reasons, why does it work perfectly in any other browser?
Node is a must have. Then Webpack and Babel. Just Babel will be OK but you wouldn't be able to use modules which is one of the more important specs. A small config gives you es6 and up, modules, you can npm install anything you want and import it directly in your code. It also http-serves your project with live refresh. module: { entry: './index.js', output: { filename: 'bundle.js', path: './dist' }, devtool: 'source-map', rules: [{ test: /\.js$/, use: { loader: 'babel-loader', options: { presets: ['env'] } } }] } Installs: npm install webpack webpack-dev-server babel-loader babel-core babel-preset-env
I don't really think that's true. As I said in the post, part of the CTO's job is to be cautious and think about the big picture. Any change on the scale of a completely new frontend language should require convincing (even if it turns out to be an easy case to make).
I'm the author, but you could try feather-ts.com. it's under 10kb gzipped, has no module loaders and comes in a single file. Typescript is optional but probably makes the API easier to use. 
I've always used Sublime Text. Very customizable and I would highly recommend.
Never going to use Yarn after these comments by its creator: [Defending](https://np.reddit.com/r/node/comments/6whs2e/multiple_coc_violations_by_nodejs_board_member/dm8n6qo/) these [horrible sexist comments](https://np.reddit.com/r/node/comments/6whs2e/multiple_coc_violations_by_nodejs_board_member/) of a former node.js board member.
Benefits * Flatte provides to create a NOSql database model. * MySQL like transaction for Firebase. (If all conditions are passed, flatte sends the whole data to firebase.) * Client side processing. * Flatte handles copy records and external effects for you. No need to write everything in your application. (Denormalization) * Flatte allows you to create field based functions. * You can create your constants with predefined templates. (also with functions) * You can apply filters to incoming values. (Such as uppercase, date format..) *With Flatte Manifesto Builder, you can easily create and visualize your manifest.
Sublime Text.
Sublime
RIP Chester
Other cases? Here's a silly contrived example: var t1 = function() {}; t1.prototype = { get x() { if (this._flag1) { throw new Error('contrived example of internal state triggering exception'); } this._flag1 = true; return 123.456; } }; var o1 = new t1(); var test1 = o1.x === o1.x; var test2 = o1.x === o1.x; Now you may look at that and think "hey, that's a property comparison and it's not the same!" (or you may already know where I'm going with this?). In this example, I'm trying to stress that internal implementation details have the potential to raise exceptions. With regard to the equality check itself; the evaluation varies based on the types being compared. (Think of .NET's IEquatable&lt;&gt;, Java's Comparable&lt;&gt;, or operator overloading within a type implementation.) Native scalar type comparisons are fairly straight forward (for the most part) but complex type comparisons are quite different, especially those that may encapsulate references that persist outside of the immediate scripting context. What I'm trying to lead to here is that 'win === win' is failing to do its comparison due to a security exception raised during evaluation as the frame has been removed from the document. The comparison is not that of an anonymous object but of a the [HTMLIFrameElement](http://www.w3.org/TR/html5/embedded-content-0.html#the-iframe-element) internal implementation. As for why does it work "perfectly" in any other browser? I would argue that, and I'm being pedantic here so bear with me, that the comparison works *differently* in other browsers but that does not imply correctness as each browser has its own security policy to adhere to. In the case of Edge, it is by-design for that security exception as Edge implements a stricter policy here. And for what it's worth; I'm not being pro-Edge or anti-Edge or trying to take a side -- I don't care what browser people use or what cars they drive. Just trying to explain some of the internals and why this is valid behavior. :) Edit: fixing link.
At least they have one now... 
Visual Studio Code. Used WebStorm for some time (free for me because I'm a student) but VSCode is faster and looks better (imo). Edit: Oh, I forgot: for CSS specifically I sometimes use Adobe Dreamweaver because it has a nice live preview mode that's garbage for most things (especially all the WYSIWYG stuff connected to it) but incredibly handy to immeditately see how changes in your CSS affect your design. Part of Adobe's Creative Cloud and thus quite costly, though...
Your second link doesn't work for me, but you do realize that Ashley Williams is employed by npm, right?
Maybe this is the one you're talking about? http://jsbits.net/blog/async-return/
Atom
&gt; Now you may look at that and think "hey, that's a property comparison and it's not the same!" (or you may already know where I'm going with this?). In this example, I'm trying to stress that internal implementation details have the potential to raise exceptions. Right... but doing a property lookup during the comparison changes the goalposts entirely. That's the property lookup which is failing, not the comparison. `a.b === a.b` has obvious potential exception cases. `a === a` should not, providing `a` is defined. A better example would be: var o1 = new t1(); var x = o1.x var test1 = x === x; var test2 = x === x; &gt; I would argue that, and I'm being pedantic here so bear with me, that the comparison works differently in other browsers but that does not imply correctness as each browser has its own security policy to adhere to. That's a nice way to justify all kinds of ridiculous bugs. Show me a security hole that's caused by being able to do strict equality checks against a window object, and I'll be happy to take this line of reasoning more seriously. Not to mention -- things like `win.closed` are actually part of the html spec, so you can hardly say "it's just an implementation detail!" about that. Here's another thing -- it doesn't happen if you remove the frame any another way, for instance using `removeChild()`! So if it's valid behavior for one case, why isn't it valid behavior for another? Answer: this is just one of Edge's ridiculous, quirky bugs, which make dealing with window objects a total nightmare.
I think /u/sensorih was referring to the comments by thejameskyle
sebmck and thejameskyle.
Not that this is very helpful but spaces before parens are ignored, just for the sake of being thorough 
&gt; GraphQL is the second coming of the ORM. Writing GraphQL queries appears to be pleasing and has a sensible value proposition and elegance. And just like ORMs, used *judiciously* they can provide a lot of value without running afoul of the downsides. Unfortunately, that's often a big ask.
&gt; property lookup during the comparison changes the goalposts entirely I wanted to show an example with a clear internal implementation to demonstrating why you cannot count on '===' always working. And it was admittedly contrived. As for goalposts and all that; they didn't change, the execution scope resolution was different but that's trivial. Would this be more to your liking? with (t1) { var test1 = x === x; var test2 = x === x; } Is it still referencing the property? Yes. And that's the point. The IFRAME object reference you had is a reference to an object that exists outside of the scripting context. That is to say, it can change and be manipulated externally and the reference you have to it is a wrapper. (This is true for all GUI browsers on all OSes.) Performing an equality or comparison against the 'win' reference results in some interop across the script-bridge for the internal implementation to do its work, analogous to the contrived 'x' property above. &gt; Show me a security hole... Consider the fact that the IFRAME reference exists outside of the scripting context, potentially providing opportunity for lateral movement across security domains. &gt; Answer: this is just one of Edge's ridiculous, quirky bugs, which make dealing with window objects a total nightmare. While it may be easier to process this situation as a 'bug' and move on, I wanted to give insight into the mechanics and explain why this is valid expected behavior. If you still disagree or think I'm full of it, that's fine by me. Cheers. Edit: fixing quote formatting
thejameskyle only has 11 commits in the Yarn codebase and worked at Facebook when Yarn was created, and is not the only creator (there are 18 core team members right now). On his website he also claims to be a core member of the TC39 (the technical committee that guides Ecmascript) and Babel. If you are going to base your technology choices on a single community member's personal views, then you shouldn't use JavaScript. Remember that open source contributors are seldom "interviewed" or questioned before their acceptance into a project, and the personal opinions of an individual are not that of a project's entire team. Individuals with differing backgrounds, cultures, religions and value systems can still come together and make something great. I like to believe that the whole of a project's community and the overall project's impact on the programmers that use it are greater than the opinions of a couple members.
sebmck is the creator and he commented in that thread as well.
sublime for everything, JS, php, python, Go, etc. It'll do it all and best part is it won't eat up a metric shit ton of RAM doing it.
Day to day life must be difficult if that comment is beyond the pale. God I wish my hobby and work life weren't entangled in this dumb social politics that seems to stalk web dev.
Just because you disagree with their statement doesn't give you any more of a right to be a dick about it.
&gt; God I wish my hobby and work life weren't entangled in this dumb social politics that seems to stalk web dev. It's IT in general, stick a bunch of anti-social nerds in a room together and just wait for the cluster fuck to happen. I'm pretty much a full-time mediator, along side being a systems admin.
&gt; I wanted to show an example with a clear internal implementation to demonstrating why you cannot count on '===' always working. Right -- but in all of your examples so far, the javascript interpreter never gets as far as the equality check. It's failing when it tries to resolve the values on either side of the `===`, which short circuits the code way before the equality check can take place. So I don't think they're at all equivalent. For example: `throwException() === 1` always fails, but it has absolutely nothing to do with the `===` since it never reaches the `===`. But that changes for the `win` object in my example. Referencing `win` -- say, by calling `noop(win)` doesn't trigger an exception by itself. It's only when the comparison happens that it throws an exception. That -- as far as I'm concerned -- is a unique, and pretty concerning special case. &gt; I wanted to give insight into the mechanics and explain why this is valid expected behavior If all of this is expected, then why does the behavior totally change here: http://i.imgur.com/wirlVu8.png If it's just a security policy, and not a bug, shouldn't it give consistent behavior in both cases?
Since this thread devolved quickly into politics here is an outline of what the post contains (Hopefully I don't miss anything) New Features: * Yarn Workspaces * Auto-merging of lockfiles * Selective version resolutions Fixes/Improvements * A better interactive upgrade experience. * A faster file integrity check. * A separate lockfile parser module that you can use in your project. * The ability to defer to another Yarn binary for consistency. * Many more fixes and features that went into Yarn 1.0. I'm glad to see the yarn team continuing to drive innovation. 
Brackets does a decent job of showing you changes in real-time. I prefer it over dreamweaver in most cases
Seen a lot about web components recently (stenciljs.com etc), thought there would be lots of recommendations for that type of thing-but if mustache.js (even if it's old) fills the gap then that's good enough for me. Just wanted a quick "setup data url" and "wrap html elements" fix
Please shut up. Please. 
True. In college I had a professor who thought it was hilarious that a woman in his neighborhood got upset when he followed her with his drone. She was jogging. I pointed out what the situation may have looked like from her perspective.. she's out for a jog and some creep is following her around the neighborhood ignoring her angry looks and waves. Empathy. Some people lack it. 
Npm is also supporting a developer who has engaged in similar hate speech. 
Good lad
This isn't strictly JS related so I'm not sure if you'll get an answer here. You might have more chance on /r/MachineLearning or maybe /r/neuralnetworks You could also read through [this](https://github.com/songrotek/Deep-Learning-Papers-Reading-Roadmap) but those papers are very theoretical.
They've had one for over 2 decades now... What are you talking about?
&gt; javascript interpreter never gets as far as the equality check Incorrect. Let's take a step back. What is an equality check here? It's going to end up as a function call [in the case of objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness) due to the fact that it's not a reference comparison (e.g., NOT comparing addresses), it needs to do a comparison of the object *value*. Now let's be nuanced by critically thinking about what is the object value? That requires inspection, especially for exotic objects like IFRAME. And so we end up with something like this in polish notation where the === function reference is going to be the invocation target: ===(function ref) x x In the 'x === x' example, it will "short circuit" as you said, and fail while trying to push those values onto the execution stack. But that doesn't mean this is apples to oranges! Let's continue and think about how that 'win === win' evaluation is going to execute. Sure, no "short circuit" error when we push those onto the execution stack but we're not done with the equality check, we need to determine equality for an exotic object and that means it has the potential to define equality itself (this goes back to comments earlier about Comparable&lt;&gt;, IEquatable&lt;&gt;, or your own 'bool T::operator==(const T&amp;) const'). But let's keep it super simple and imagine a recusive property comparison check that recurses for everything with exception to scalars. That means that... ===(function ref) win win ... can be thought of as expanding into additional equality checks when scalar properties are found and the result is the aggregate AND. (Not showing the result composition here for simplicity.) ===(function ref) win win // complex ===(function ref) win.prop1 win.prop1 // &gt;scalar ===(function ref) win.prop2 win.prop2 // &gt;complex ===(function ref) win.prop2.xyz win.prop2.xyz // &gt;&gt;scalar ===(function ref) win.prop3 win.prop3 // &gt;scalar Hopefully, here is where you can see this relating back to the original 'x === x' example if any of those nested properties were to raise an exception. As for why the behavior in your second example, it's because it's a completely different scenario using different APIs. You removed a node from its parent child list and you didn't destroy it, you can still append that to another element if you wanted to. Whereas the first technique doesn't use any of the node list APIs and instead uses the much older [innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) which has completely different semantics.
I just tried this and it worked as expected. Are you running under some kind of enhanced security policy? That's the only thing I can think of that could cause what you're seeing. 
Its part of the broader political chaos and identity politics that is very prevalent these days. Its nice to think that you get to ignore it and get on with your life, but that's not really an option. When something like this does manifest itself in your life you have to make the right choices, because many small choices have a larger effect, and all choices carry risks including the choice to be passive. We live in interesting times.
This is amazing. These are all features I wish to see out of the default npm tool, but yarn clearly has them outpaced in innovation. 
sublime is good if you only need an editor and youre on a mac. i recall notepad++ being better than sublime on windows. gedit does the job on linux. for js/html i don't usually use an editor tho i use an ide. i like netbeans personally, on all platforms.
That means a lot coming from such a comely nympho. Thanks.
&gt; But let's keep it super simple and imagine a recusive property comparison check that recurses for everything with exception to scalars. I get your reasoning here -- but in what other case does `===` for an object type ever crack open the object and look at the child properties, rather than just checking if the reference is the same? If that were true, would this code not be true? `{ foo: 'bar' } === { foo: 'bar' }`? Also -- wouldn't it be impossible in that case to do `win === win` for an actual open cross-domain iframe? Since the equality check would try to read restricted values? (in reality this works fine) &gt; As for why the behavior in your second example, it's because it's a completely different scenario using different APIs. Does that explain why `window.closed` returns `false` even though the iframe window is closed? Why should the API used to close the iframe have any bearing on the security policy for the iframe window? &gt; You removed a node from its parent child list and you didn't destroy it, you can still append that to another element if you wanted to. ... which I can also do when using `innerHTML`: http://i.imgur.com/D436tQH.png Seems like an element detached from the DOM should act just the same as any other element detached from the DOM, for consistency's sake, no?
Intellij. Might me overkill but i live the shortcuts and stuff
Thanks! ;) Btw great tool!
But how do I add properties to the class that extends? 
Through the constructor, just like any other class. Do you have an example you're seeing a problem with?
I was looking at facebook's "Immtable Js" library and I can alter their privates, but the code doesn't break. I', trying to figure out how I can build mine like theirs (which might be unfeasible) .
The repo for the result of this project is [on GitHub](https://github.com/boneskull/all-types)
Hi /u/brunocborges, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/Ramirond, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `auth0.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [auth0.com](/search?q=%28and+site%3A%27auth0.com%27+author%3A%27Ramirond%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|228|91%
Hi @kenman, can you please provide which exact guideline this post went against?
VSCode does this automatically (@types are acquired transparently for any imports) FWIW. It will also load types from node_modules/@types so your package.json update would work as well. This is typically the better approach as it pins a particular version.
I've worked on projects that were a perfect fit for GraphQL or OData. Specifically, reporting applications where were just filtering and displaying data in tables and graphs. Trying to create bespoke REST calls for every possible combination would have been ridiculously difficult. Our counter-party refused to even consider OData, the special snowflakes demanded a custom format. So we ended up sending them a custom format... that was cut and pasted from the OData spec minus the word OData. 
I use webstorm and find it very good.
There's not a single bit of javascript in the article. It doesn't even mention "javascript" in the text. For the article to be tagged as "javascript" is disingenuous, at best. For you to post it here at /r/javascript is unacceptable; please only post javascript topics to /r/javascript. Thank you.
you can always install `@types/*` locally (which I'm trying to avoid), or you can _manually_ install `@types/*` globally. cool to know about VSCode though!
The post is about Oracle Javascript Extension Toolkit (JET). I expanded the acronym in the article for the sake of having the word "javascript" in it (besides the JavaScript tag on Medium). Is this enough to restore this post?
I stand by my prior comment -- no JS, no /r/javascript.
I also wrote this code : let x= new Immutable.Map() let y = x.set(9, 22) delete y._root.entries console.log(y.get(9)) and It broke!!! So, if Facebook can desing their product that way, so can I...those guys are legit.
&gt; It's IT in general, stick a bunch of anti-social nerds in a room together and just wait for the cluster fuck to happen. Okay, So I kinda see where you are coming from, but this is a pretty broad generality. At our (small) Web Dev company, the _accounts manager_ is by far the 'nerdiest' and none of us are anti-social. I think it is more the hip-to-be-offended vocal minority, (both left and right which extremists in each are as bad as each other) which are usually younger generation, and IT professionals generally are younger. I'm a senior dev with 10 years working experience... and I'm 29.
&gt; in what other case does === for an object type ever crack open the object and look at the child properties Distinction has to be made between [ordinary and exotic objects](https://tc39.github.io/ecma262/#sec-ordinary-and-exotic-objects-behaviours). Ordinary 'complex' objects (think pure JavaScript objects) are relatively easy to understand in that there is really no meaningful support for equality. In order: equality is essentially determined by (1) type and (2) value. (Value comparison in the case of ordinary complex objects is actually a reference check!) The strict equality check has more steps but we can ignore the other ~9 here, that's the crux of it. Exotic objects are different, they are only partially implemented in JavaScript and the equality check on the value is pretty much a black box. It's up to the implementation to determine what it's own "value" is in this context and it may involve internal inspection like described above. &gt; If that were true, would this code not be true? { foo: 'bar' } === { foo: 'bar' }? Since this is an ordinary object, it will first compare the inferred anonymous type declarations and then value using reference (as per above). (Note: depending on the caching strategy employed, the type check may fail first. E.g., V8 with aggressive caching.) &gt; ... which I can also do when using innerHTML: http://i.imgur.com/D436tQH.png &gt; Seems like an element detached from the DOM should act just the same as any other element detached from the DOM, for consistency's sake, no? Ideally, YES! The implicit removal via 'innerHTML = ""' is going to *internally* call similar node APIs but it does so within a different context because of how it came to be. 'innerHTML' was implemented by IE and Navigator well before it was standardized, the standard came after the fact and so there are inconsistencies in implementations and a bit more vagueness in the standard than usual. Personally, I wish 'innerHTML' was a readonly property but that would have really hampered web development in the early days.
JavaScript jabber is a good one. https://devchat.tv/js-jabber
I absolutely love yarn. Started to use it because of it's lock file (before npm implemented a lock file too) and never looked back. It's so fast, and works so well, that I don't feel the need to go back to npm's slowliness.
definitely Webstorm..when I see my colleagues struggle with basic things Webstorm does automatically I just wonder if it is worth the time using a free IDE or editor or whatever
Ok someone tell me why I should use this over npm/bower/insert other front end pkg manager here. 
IE10 was the first one that was usable at all, and IE11 was the first one that allowed you to edit CSS... barely... Edge's is decent but it's the first one I would call finished. 
I'd also recommend VS code. I also migrated from WebStorm (too heavy, and its default code analysis tool is too restrictive) I still have to get used to the git view because I mostly use the command line, but I'm sure I'll eventually get it. Besides that, it just works as intended.
And windows 10 has an ie JavaScript section in power options. Such garbage.
Oh yeah for sure, it was a bit of a hyperbole and a lot of it has to do with the hiring process as well.
I think you're worrying too much about stuff that honestly doesn't matter that much. Focus first on building a library that does what you need it to do, then focus on making it better. 
&gt; IE11 was the first one that allowed you to edit CSS Now I know you don't know what you're talking about. You've been able to do that since IE6. 
Yeah i'm really confused now what the difference between npm 5 and Yarn 1 is other than slightly faster https://stackoverflow.com/questions/44243950/what-features-of-yarn-are-not-yet-available-in-npm-v5-0 Maybe it's time to go back to npm? Curious what others think? 
Well to be fair npm 5 pretty much does everything that yarn did before 1.0 so the gap isn't that big 
"npm/bower/insert other front end pkg manager here" is an apples-to-oranges comparison. The point of Yarn is, effectively, to just be a faster, better version of npm. It's backwards-compatible with npm, and uses the same package repositories. Thus, there isn't really any sort of significant drawback to using Yarn over npm, unless you're just apprehensive about it having been around for less than npm has. Bower, and potentially other package managers I'm forgetting right now, are in a completely different category, and aren't really realistic options for new projects at this point. Hell, [Bower's README](https://github.com/bower/bower) literally tells you to just go use Yarn if you're starting a new project.
i havent found a CI/CD pipeline yet that doesnt break when using yarn. npm is fine though. they need to address that imo.
&gt; The point of Yarn is, effectively, to just be a faster, better version of npm. Heard that one before, but now with NPM lockfiles how is it better? It's just Facebooky. I mean, I'm all about technical merits here, convince me it's still better than modern npm?
Oh wow, I had no idea about Bower's Yarn/Webpack shout out. If Yarn is an npm derivative, misewell check it out.
OK, glad we kept up this line of conversation! Didn't know a whole lot about exotic objects before now. I'm still of the opinion that this is a bug; the fact that these objects behave so unpredictably in different situations in Edge, without any obvious justification, is a big red flag to me. I work on a lot of libraries which deal with same-domain and cross-domain frames and windows, and being able to reliably infer "is this window open or closed?" or "this this window the same as this other window?" is really important to the stability of my code. For example, [this is my `isWindowClosed` util](https://github.com/krakenjs/cross-domain-utils/blob/master/src/index.js#L364-L443), and most of the excess code here is just to work around obscure IE/Edge scenarios where `win.closed` doesn't work as expected. That said, it's really nice to have some more context around these kinds of objects, and the potential implementation reasons for these problems, and I'm definitely learning a lot from what you've shared. So thanks for your patience!
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [krakenjs/cross-domain-utils/.../**index.js#L364-L443** (master → 0a37d5b)](https://github.com/krakenjs/cross-domain-utils/blob/0a37d5b14244cf3d11ef88707077f68b8ef3a95c/src/index.js#L364-L443) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmpam45.)^.
I went back to npm after using Yarn for a while. Very happy with the current state of npm.
As the post states yarn 1 adds these features over the features addressed in that SO post: * Yarn Workspaces * Auto-merging of lockfiles * Selective version resolutions Not everyone needs them, but I will personally take advantage of all of these features. Workspaces, in particular, will solve a problem I have been mulling over for a couple of months.
It's not that big, but it took npm nearly a year to get to version 5 and the initial release was, by many reports, really bad.
Well, the post points out three new features that version 1 adds that npm doesn't have: * Yarn Workspaces * Auto-merging of lockfiles * Selective version resolutions Also, don't understate the difference in speed, depending on platform it's still twice as fast as npm for me measured over 10+ projects ranging in size from a couple small packages to hundreds of packages.
Messed up part is that I've already fully built it with 10 or so data structures and tested it rigorously (HashMap, AVL tree, Queue etc....standards ). Was going to deploy it and start using it soon but I might overhaul. It won't be that bad. LMAOOOO. R.I.P to me. I need to take a project management class
Travis works well. Here's help for others: https://yarnpkg.com/lang/en/docs/install-ci/ I've also, personally, had no problems with yarn and bamboo
You need to start from ES5, I think you should read a language text book - like Rauschmayer's Speaking JavaScript http://exploringjs.com/ and then read a patterns textbook - https://addyosmani.com/resources/essentialjsdesignpatterns/book/ and then read Rauschmayer's ES6 books. And like everyone else, just read a lot of code, be passionate and always be asking questions. Everyone is still learning what ever level they are at. Don't give up :)
do you know if AWS codebuild/codedeploy are compatible or if they make it unnecessary?
Ideally (but not entirely commonly) TDD is about sketching out the business rules and functional requirements as tests before you even begin coding the actual _thing_. However, in practice, it ends up oftentimes being a validator _after the fact_ that you have, in fact, written code that complies to the business rules and functional requirements and that all code modifications should subsequently not violate said tests, lest you start a regression. These tests should be evaluating against the output and action of your code, not the code itself necessarily. Now, I've been in front-end nearly two decades and also did back-end for nearly half of that, but I can count on one hand the number of people I've worked with over that time and did TDD the optimal way and had the deliberative time to do it, never missed deadlines, and/or weren't questioned by non-technical managers as to why it was necessary to do it before coding and discouraged it without understanding the benefits. I wouldn't let it become an impediment to getting the cadence and knowledge of how to write meaningful tests, but rather something you grow into when your requirements are clear, final, and precise--and _those_ are the key elements to success, there. Working in many product and agency environments, however, doesn't often afford you that time, which is why just having tests at all that prove your code hit the mark (in retrospect) count just as much. (Nobody wants regressions, and everyone wants the rules followed.) Sure, it's not ideal, but it's reality in most places. If you've already written the code, and then go to write the test that complies with the business rules and functional requirements, then you're fine. Take some time to make sure your tests are properly abstracted from the code that's being tested (e.g., loose coupling between presentation layer and the test, if any at all). If you're writing tests to test the veracity of your coding style/patterns, you're better off working with a linter like ESLint (and the commensurate SASS/HTML linters) to act as an enforcer in your IDE and build process.
&gt; I'm still of the opinion that this is a bug; the fact that these objects behave so unpredictably in different situations in Edge, without any obvious justification, is a big red flag to me. I hear you and I sympathize. Really. But when you get into proxy/wrapper exotic objects, you're walking the edge (pun *not* intended) between neat and tidy standards-compliant behavior and the wild wild west of implementation introduced behaviors. It's not an excuse, just an explanation. And to be fair, Chromium has it's [fair share too](https://bugs.chromium.org/p/chromium/issues/list?can=2&amp;q=innerHTML component:Blink&amp;colspec=ID Pri M Stars ReleaseBlock Component Status Owner Summary OS Modified) but it has so far enjoyed being the de facto standard for modern browsers such that we often casually interpret some of the more subtle bugs as expected behavior. &gt; So thanks for your patience! Thank you too for bearing with me. Cheers! :)
&gt; In react I know to use a constructor inside my class, but not sure what the constructor really does. Depends on what the constructor looked like. Not every React component needs a constructor. Typically, if I'm not setting up an initial state object or binding functions, then I don't bother. &gt; For TDD I can't fully setup a test without feeling I'm writing a test to simply justify the code I already wrote. Don't worry about it. TDD is massively overrated. Sometimes people write tests which essentially re-state what the function did. Don't do this; it's a violation of DRY and essentially means that when you change your function, you're doubling your work and need to change your test as well. Instead, reason about what your function is supposed to do. Think about a small set of inputs, representative of each different operational case you can think of. Test to see if those inputs conclude with the expected outputs. But don't obsess about it, and admit that there are some things that aren't a good fit for the TDD model. Anything dealing with UI, for example, is bad with TDD. 
Not JS or even programming specific but I'd recommend the Stack Overflow podcast, they talk about tech and running a tech company, programming, lots of relevant topics. Plus, it's funny!
Webpack dev server and other tools make this possible with any editor 
right, my example of constructor was meant more in the lines of I don't understand the role of the constructor in general, I've read and watch my fair amount of react tutorials to understand when I need a constructor just not why I need a constructor when I need constructor... (not sure if that's going to make sense). &gt;Anything dealing with UI, for example, is bad with TDD. I wish someone would've said this like this to me a while a go LOL. Although I still want to learn and fully understand TDD a lot of what I do is focused on the UI side of things. Trying to think of ways to test that is always been a headache. Thanks for a reply truly appreciate it. 
Thanks for the resource links and suggestions. I most definitely am passionate about my trade, my passion for it is the reason why this is a bit frustrating. Not finding a clear path to advance in my knowledge bank is not something that's been common up until now. 
&gt; In react I know to use a constructor inside my class, but not sure what the constructor really does. Constructors are there to let you do something by default when an object is created (instantiated from a class), in other words its a fancy name for a method (function) that is called immediately after the object is created. This is Object Oriented Programming (OOP) 101 and is a common description for many OO languages, however if you want react specific documentation : &gt; "These methods are called when an instance of a component is being created and inserted into the DOM: constructor()" https://facebook.github.io/react/docs/react-component.html#mounting &gt; For TDD I can't fully setup a test without feeling I'm writing a test to simply justify the code I already wrote. Then you are not doing TDD. The 3 laws of TDD mean you are locked into a dev cycle of about 10-30 seconds, starting with writing your test *first*, meaning you must be intimately familiar with your test suite as you are with the coding language you are writing in. http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html &gt; tl;dr : What good resources to use to go from a Javascript for UI (jquery, simple react/vue apps) dev, to a test driven/ data driven Javascript dev? 'Uncle Bob' (martin) is someone i would characterize as a general authority (not specific to JS) on this, he's done many presentations over the years but (AFAIK) mostly dealing with statically typed languages (hint look into typescript). For example, an excerpt i put on my channel for reference : https://www.youtube.com/watch?v=is41fgDrqn0 *Note in the presentation how 'the button' is in existence before the production code even comes into the devs awareness? That's TDD.* I would also recommend studying up on SOLID coding principles at the same time. Why? TDD is primarily associated with testing (there is also integration testing but that comes later), more specifically "unit testing". What does this imply? It means that in order for you develop with respect to TDD properly your code must be in a unit-like (modular) form. SOLID - details coding principles that allow you to write modular code in such a way that it's easy to test. 
Yeah, we've all been there. You'll get better at it with time.
Also, the built-in "offline mirror" capability.
Sure, non-standard and deprecated, still used in .1% of the websites that some users might wander on and you do not break user space, ever.
The difference is that yarn is still way faster and npm 5 doesn't work half of the time. Look at how many issues there are on the npm repo. 
Try using it on one project. It is significantly faster. 
Huh? You seem to be missing some context.
Why every one talk about vim, atom, code but no one notice that pen &amp; paper still alive. They are healthy With pen&amp;paper there is no need for shortcut Do u ever started with pen &amp; paper ? Pen &amp; paper can optimze your time, structure your work, minify your functions ? Or i'm mistaken
Never had a problem with circleci.
i used their sample .yml but ended up getting build errors with yarn that disappeared when i changed it to 'npm install' instead of 'yarn install'. its not only me theres multiple stack overflow and bug reports on this topic.
I like to start with pen and paper and then transpile to inscribed clay tablets. 
Heh ! Some Water For Transpile It To WebAssembly. Then How Much Line Your Remove Every Hour ?!
Don't push me cause I'm close to the Edge.
What is options.preset.env?
I use it for any language that supports Regex - still use it quite a bit when i need to generate regex's for javascript - regex format is pretty universal
I'm so lost here. I think your links are not pointing to the right parent comment?
* [SyntaxFM](https://syntax.fm/) by Wes Bos and Scott Tolinski * [5 minutes of React](https://5minreact.audio/) by Petr Myazin * [Toolsday](http://www.toolsday.io/) by Chris Dhanaraj and Una Kravets * [Shop Talk Show](http://shoptalkshow.com/) by Dave Rupert and Chris Coyier
Each module only runs once // object.js console.log(1) export default makeMyObjectSomehow() // loop.js import obj from './object' console.log(2) export Object.keys(obj).map(doStuff) // a.js import thing from './loop' console.log(3) // b.js import thing from './loop' console.log(4) // index.js import './a' import './b' The code above logs: &gt; 1 &gt; 2 &gt; 3 &gt; 4 
Several books have been mentioned and are good suggestions. I found, however, that when I was first starting to delve deeper, I was able to nudge myself down the right path by reading something a little lighter first. I recommend Kyle Simpson's You Don't Know JS series. Each book is quite short, but this series gave me the knowledge I needed to move forward towards denser resources. They are all free and available on Simpson's Github.
What interest does FB have in controlling a package manager? They know who’s using which packages? 
JS Party is awesome. They have some really awesome people on. 
Oh yeah, me and /u/jeresig have a running tally, last I checked I was *way* ahead. /s
No. All-lays start, and end, at 0 in JavaScript.
Doesn't everyone run their builds in a container these days? We use teamcity or Jenkins and both have no issues running both our client-side and server-side builds with yarn
I use yarn with codebuild. But you do need to run `npm install -g yarn` as part of your build steps
Notepad2 or die. 
Me too. There were some (really bad) issues with the first few releases, but been good since.
&gt; right, my example of constructor was meant more in the lines of I don't understand the role of the constructor in general, I've read and watch my fair amount of react tutorials to understand when I need a constructor just not why I need a constructor when I need constructor... (not sure if that's going to make sense). So, JavaScript is a strange beast. Constructors in general can be a confusing concept. So I guess we'll start from scratch. In the beginning, there were functions. You could call a function to initialize an object for you, and you had an object: function LeClass() { var o = {} o.x = 10; o.burp = function() { console.log("burp"); } return o; } var o = LeClass(); console.log(o.x); o.burp(); This gets tedious because it's a repeated pattern. Particularly the ```var o = {}``` and ```return o;``` lines. Why bother wasting our time when we know this function is going to create a new object for us. So we use something called ```syntactic sugar``` to make the language sweeter. We use the "new" keyword to tell Javascript to automatically do those things for us. This is now called a "constructor function", because it essentially constructs our object for us. function LeClass() { this.x = 10; this.burp = function() { console.log("burp"); } } var o = new LeClass(); console.log(o.x); o.burp(); This time we're using the "this" keyword to refer to an object that JavaScript created for us, and we don't have to remember to return it, it's assumed. The constructor function made our lives easier. So JavaScript did more things for us, and introduced Prototype inheritance. The line that starts with ```this.burp``` assigns a new function to every ```LeClass``` object we create, which is actually pretty inefficient if we have a ton of them. Also it gets pretty messy if you define all of your functions within the constructor function, so in classic JS you're supposed to take that out and assign it to the prototype. function LeClass() { this.x = 10; } LeClass.prototype.burp = function() { console.log("burp"); } var o = new LeClass(); console.log(o.x); o.burp(); It's more efficient, a bit less messy, and now totally confusing to everyone, because the ```burp``` function, while removed from the ```LeClass``` function, much further away from it in code. Sometimes people were defining functions in entirely separate files. Sometimes you want this; like if you're making a plugin library for another class and want to add a new function to an existing class. Most times you don't. So, JavaScript 6, ie "ECMAScript 2015", added more syntactical sugar, to formalize the idea of ```classes```. This takes all the code above and gives it a more traditional syntax that visually simplifies things and helps developers think less about syntax and more about what the code does. Thus we can rewrite all of that as: class LeClass { constructor() { this.x = 10; } burp() { console.log("burp"); } } var o = new LeClass(); console.log(o.x); o.burp(); Now what this does is create another encapsulating scope around everything that defines what a ```LeClass``` is. Before we were initializing the object within a function called ```LeClass```, but now we're thinking more in terms of objects than functions. There's a special function that every class ***can*** have, explicitly named ```constructor```, which does exactly what ```LeClass()``` did in the previous examples. It serves as a place where you can initialize your object with data that needs to exist. In React, every component class is passed a set of properties when it is first initialized. Sometimes a component will want to examine these properties and construct a state object based on them. Consider an Accordion control, that maintains a state deciding whether it is open or not. class Accordion extends React.Component { constructor(props) { super(props); // advanced topic. "super" calls the parent class's (ie: React.Component) constructor. this.state = { isOpen: props.isOpen; } } render() { // here we can assume this.state is a valid object. Without a constructor, this next line will fail, // because "this.state" is undefined, so "this.state.isOpen" is a null dereference exception. const style = this.state.isOpen ? "" : "display: none"; return &lt;div className="accordion" style={style} /&gt; } } render(&lt;Accordion isOpen={true} /&gt;); So a constructor helps you ensure that your objects have everything that they need to have before you can use them. Basically it makes sure your objects are initialized.
Nope, stick with npm.
I'm more of a marker and whiteboard person.
Yarn has a vested interest in maintaining drop-in compliance with npm but these features bring it out of feature parity and slowly into lock-in...
Man, THANKS! thanks for taking your time to write that up, I appreciate it! 
Found this generator by [Pawel Grzybek](https://pawelgrzybek.com/) very useful. It lets you quickly create a code snippets for the most popular code editors. const {${2:}} = ${1:}; This is an example of a code snippet that lets you destructure your variables. I use it everyday when working on React project.
Yup. Most of the episodes are quite good.
[d3](https://d3js.org/) is fantastic
[Frontend Happy Hour](http://frontendhappyhour.com/) Some guys from netflix talk about frontend and tech in general while having some drinks
Right there with you man. I have a similar background and I am encountering the same thing right now. I don't have much to add, but what helps me when I'm getting frustrated is to remember how far I've come.
Atom. I use VS Code when I need IDE-esque support (TypeScript, etc).
I did the same, but once npm5 came out, it pretty much solved all the issues you just mentioned. So I switched back because yarn always felt like just another unnecessary piece of the stack to be aware of.
Yarn wouldn't even be here without npm's footsteps to follow. We're using yarn + lerna in a new project primarily for speed and bleeding edge monorepo management tooling, but npm deserves way more credit than people give it... they've made great strides with the v3-v5 releases and I'd hope that workspaces makes it back to npm.
You'll want to transpile everything using babel. That'll make it work on IE.
I don't want to say you shouldn't do this, because if it works for you, more power to you. But most users of TypeScript are typically in agreement now that `"devDependencies": {"@types/..."` is the way to go and I know atom, Webstorm and VSCode all support it. If somehow you made this the workflow for a project, I know I wouldn't want to make it a requirement on any peer-developer to have to download all of DefinitelyTyped for the project to work...
&gt; Since this thread devolved quickly into politics where? there was one comment that was at like -60 and everything else was talking about the post.
Thanks for positive words :) Just PM'd you myself!
The reason I don't use Ember is because I tried to use it once. Ultimately, my problem with it is their philosophy of convention over configuration. If you like to solve the problem the way they do, using the same names, structures, and paradigms as the experts at ember, AND you want to make the things they expect you to make, you'll have a great time. Deviate in any way from their philosophy and conventions, well, I spent about two weeks trying and failing to do something I considered relatively minor. Still haven't figured out how to use ember "correctly."
It was the first post, and it with its responses were the only thing here when I wrote my post.
Yes, yarn may not be here, but there would be a package manager. Perhaps one that did a much better job than npm from the start.
Try [Mithril](http://mithril.js.org/). I know there are lots of advantages to using a framework like React or Vue, but the barrier to entry and all the magic really bother me. Mithril is more of a library than a framework — more-so even than Vue — and gives me everything I need for most apps.
&gt;Common criticisms of Ember. &gt;It’s not cool. straw men like "it's not cool" really lower the credibility of the entire post. common criticisms is a copout. what are the author's criticisms and pain points they've identified from experience?
https://yarnpkg.com/en/docs/selective-version-resolutions &gt; Why would you want to do this? &gt; - You may be depending on a package that is not updated frequently, which depends on another package that got an important upgrade. &gt; ... &gt; - You are relying on an unmaintained but working package and one of its dependencies got upgraded. You know the ugprade would not break things and you also don’t want to fork the package you are relying on, just to update a minor dependency. As someone who has run into this situation multiple times, this is great.
&gt; What good resources to use to go from a Javascript for UI (jquery, simple react/vue apps) dev, to a test driven/ data driven Javascript dev? if you're capable of translating ideas and information from other languages to js, then the [rspec book](https://pragprog.com/book/achbd/the-rspec-book) is still one of the best book son TDD and testing and the why of testing. it's written for ruby but very informative. i'd check out [head first design patterns](http://shop.oreilly.com/product/9780596007126.do) to give you a good intro into object oriented design, which can help answer questions like "what does a constructor do" both of these books aren't written for javascript but explain the concepts that you can then apply to javascript. i'm recommending books because i dont think you can get the depth and breadth of information necessary to answer "what does a constructor do" from reddit comments, even detailed ones.
Help?
NPM has been *extremely* unreliable for our company. I'm talking about having to `rm node_modules &amp;&amp; rm package-lock.json` on an almost daily basis. Things started going south when we started using git dependencies (some of our stuff is not ready to be published on NPM yet). There is something about the way NPM handles git dependencies that screws up the `node_modules` tree on anything but a fresh install. Now that yarn has workspaces, I'm looking forward to moving our stuff back into one big repo and use yarn to manage the dependencies between the different modules.
Were you using docker? I was running build (and test) scripts from the container in my circle yml file.
Anyone notice they link to a commit that has been reverted? The commit to enable workspaces in the Babel repo? Looks like it still has some bugs needing to be worked out. On another note, I love the speed of Yarn. Does NPM5 run quickly now?
[Fun fun function](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q)
Sublime Text 3 all the things! 
Yeah, I tried switching back when it launched but I had problems with it resolving dependencies, and That made me stay with yarn. I'm sure those problems are already fixed by now (happened with 5.0 on day launch), but didn't have the time to try it again. 
Instead of using webpack + babel, you could also use just rollup, which is IMO very underrated. 
NPM wil bundle correctly from private git+ssh sources, Yarn will not. Seems to have trouble with git-archive.
I liked it, but it didn't really seem to drive the point home. Kinda just ended. 
Will you be getting rid of Lerna and replace it with the Yarn workspaces? 
The parent is correct. Look at this bullshit from the article: &gt;As part of the patent grant, you’d have to stop using Facebook open source upon claiming patent infringement. That could really hurt, especially if you were using React or any other Facebook open source licensed under the BSD+Patents license, and it’s not clear how much switching to another React-like library like Preact or Vue would help; you need Facebook’s patent licenses anyway — in the eyes of the law — for any library that uses data structures, algorithms, or techniques patented by Facebook. How is it "not clear how much switching to another React-like library like Preact or Vue would help". This is like saying it's "not clear" how switching to Linux would help, if Microsoft terminated your Windows licenses. Of course it's clear. The author is completely confused. Your LICENSE to use React ceases if you claim patent infringement by Facebook or its partners (for ANYTHING - invent teleportation? BAM: Facebook can use it for free, and terminate your react licenses -- actually ,it terminates automatically - if you ask them to stop.). Obviously this does not cause a Preact or Vue license to terminate. It's totally unrelated. There's nothing patentable in React anyway. Preact and Vue don't infringe on shit. Bottom line: 1) author is totally confused. 2) don't use React. 3) Preact and Vue are fine. Ignore this stupid bullshit article.
[removed]
[removed]
Went back to npm, using yarn on ci servers was annoying 
it's a babel preset. env is the latest I think where it support es2017 and more.
The main selling point for the frameworks you mention is in the declarative paradigms they exhibit
Hey, sorry, somehow I skipped over this comment, and also didn't have the time to implement that piece of functionality in the last few days. Now I do.T The library looks great (and great slides! They introduced the concepts very nicely). I am definitely using it. 
There is no reason You could not scrape the price. Finding the correct price would be harder. Granted You are likely not just going to find the price on a random given product page, but also discounts, taxes, prices from related products, etc. If You are using OpenGraph for the other information, why not check for type:product and use [product:price](https://developers.facebook.com/docs/reference/opengraph/object-type/product/)?
Atom with Facebook's Nuclide package on top. It's wonderful for react but even in non-react jobs I find the javascript 'intellisense' much better than VS Code's. And once I incorporated flow into my job I never wanted to go back.
VIM/NeoVIM
Looking at the cheerio documentation, I'd assume you want something like this: $('body').filter(function (index, element) { return (element.text().indexOf('$') &gt; -1); });
Like everyone else they've had issues with npm.
[Never forget](http://jonnyreeves.co.uk/2016/npm-shrinkwrap-sucks/)
What's the matter? You stuck in this thread? How we can help you?
WC itself is a harmless spec. It tries to fix something that no one suffers from: encapsulation. At best it allows to wrap a directive so it can be used everywhere, that's actually great. But alone this spec couldn't produce a dynamic site. So they've built frameworks around it like Polymer. Most of what they do is non-standard and highly arbitrary. To get dynamics back suddenly HTML is littered with code statements, javascript-like emulators, weird template semantics, dependency injection, etc. None of this is actually easier or better than what we have, it's less declarative, it's harder, bigger in size, needs polyfills, isn't cross platform. Their motto is "use the platform" as if suggesting stability, but their standard is so frail that Polymer is actually the worst offender of them all. *Every major* they have released had you write your application from scratch: 0.5 -&gt; 1.0, 1.0 -&gt; 2.0, 2.0 -&gt; 3.0. The reason that happened is obvious, it lacks a clear foundation and all the building blocks they'd need aren't specified in the standard. Established frameworks on the other hand can simply wrap into WC if they want to, there's nothing that prevents them from doing so. &gt; a pattern not a technology. It's all about the pattern. When MVC came about, layout inflating died. The same is true today with `view=fn(state)`, we don't need to hack the dom or mess up HTML any longer because this is a clean foundation. WC was thought out many years ago, using patterns that were relevant then but aren't today. This is what the extensible web manifesto was made for, so that vendors can't peddle high-level abstractions as standards, because they quickly out-date as has happened countless times before. Sadly that's what's happened here, again. 
No, it's not. The only whitespace sensitive language that comes to my mind right now is Python.
Yarn v1 broke my build immediately (after using 0.27) with "Cannot find module 'X' Removing --ignore-optional fixes it
Yeah I highly agree with the You Don't Know JS series https://github.com/getify/You-Dont-Know-JS Kyle (author) also has some great videos here: https://frontendmasters.com/ There are also a bunch of great Javascript series at the frontend masters site!
Thanks man, I appreciate the help! 
The merging sounds really nice if you're often working on different branches - I've ran into merge conflicts in `yarn.lock` before (even on my own), and that can really be a headache.
On GitLab CI you simply build in Docker containers, and as Node's Docker image contains Yarn now, that works flawlessly.
It's not really a derivative, it just uses the same archives and makes it rather easy to switch. That said, you'll want everybody who works on a project to use Yarn (and the same version to boot). The same holds for npm though.
One thing I wish the release post paid attention to, is whether the upgrade is a breaking change. Does the structure of lock files change? Do all team members (or me and my CI) need to upgrade to v1.0 at the same time, and do we need to do some conversion of `yarn.lock` when we do? Even if all that is not required, it would be nice if they mentioned it. Anyone know the answers?
no it's not, that's why minifiers / uglifiers can be used.
https://github.com/babel/babel-preset-env You can also chain env to a specific browser to ensure that all the polyfills are present in order to run your code: `["env", { "targets": { ie: 11 } }]`
Even if it didn't couldn't you just do `npm i -g yarn` and carry on from there?
I'm going to disagree with the other posters and say that it *is* whitespace sensitive, although this is the only case I can think of right now: function f() { return true; } console.log(f()); // undefined JavaScript will interpret the newline after `return` as the end of the statement and return `undefined`, in stead of returning `true`.
Ah cool thanks alot for this explanation :)
This is the developer equivalent of "what's the deal with airplane food???"
Anyone who favors npm over yarn is obviously a special kind of an idiot - you're better of not dragging down development teams and peers to the deeper corners of hell - just focus on writing code and leave build / infra to folks who can make saner, objectively better choices. Please.
It's advised to get everyone in your team to use the same version, otherwise you might have subtle differences in how the hoisting works. That being said, starting with the 1.0, this will get even easier thanks to the [`yarn-path` configuration](https://github.com/yarnpkg/yarn/pull/4204): you just have to check-in in your repository the single-file version of the Yarn version you want your team to use along with a yarnrc that contains the relative path to this file, and Yarn will automatically delegate any command run in your repository to the checked-in version. This way, you won't have any issue with accidental upgrades and will have full control over when you want to make the switch.
I know the advice, but it feels a bit like a cop-out: surely plenty of versions will be compatible with each other? I can't imagine them breaking the format every patch release. Thus, it'd be nice if they could emphasize whether or not this is the case for every release (and this one specifically). I don't really like prescribing a single binary, especially since my CI just uses the official Node Docker image which comes with a version of Yarn. I just want to know if I have to upgrade when it upgrades ;)
You could, and I used to do that before it was included in the official image. That does greatly increase your build time though.
Plenty of versions will be compatible, and starting from the 1.0 we aim to respect the semver rules, but we're not immune to an undetected bug that could break a few things. I expect this to be relatively rare, but it's still nice to be able to pin down your code to a specific version (it's also particularly useful on CI environments, since you can be 100% sure that you will use the specific version you asked for, regardless of whether your provider upgrade the version they ship). So in summary: we're not going to break things intentionally, but if you're still concerned, you can make yourself immune to it :) 
Didn't know what a snippet was until now, cheers.
Right, and obviously I am accepting of the risk of small bugs (just as I know that a non-major version upgrade _might_ still be breaking), I just want to know if there was intentional breakage or not. More specifically, has the computation of package locations been knowingly changed in a new version, as explained in [this post](https://yarnpkg.com/blog/2017/05/31/determinism/)? If there's usually a message saying that it's not, then I know where to look to be prepared for when it is. But anyway, I suppose I am to presume that no such changes were made intentionally for Yarn 1.0? (And of course, I want to lock Yarn to a specific version in CI. I just don't want it to have to fetch a specific binary every time, but rather simply use the one included in the image - that's locked to a specific version.)
I thought that they were the same thing. But I believe I'm using Javascript 
&gt; In react I know to use a constructor inside my class, but not sure what the constructor really does. These are basic es6 class semantics. If you learn them once they will be natural to you. If something is not clear to me, i usually look it up here: http://exploringjs.com/es6/index.html#toc_ch_first-steps For instance, you don't need the constructor at all, you only use it if you need to store local variables or want to initiate something when the class is instanciated. In React that's usually propsTypes and state. With specs that are upcoming (currently stage-3) even that you don't have to do: class Test extends React.Component { static propTypes = { name: PropTypes.string } state = { count: 0 } handleEvent = () =&gt; this.setState({ count: this.state.count + 1 }) render() { return ( &lt;div onClick={this.handleEvent}&gt; Hello {this.props.name}, you've clicked this {this.state.count} times &lt;/div&gt; ) } } ... &lt;Test name="..." /&gt; That's actually the primary distinction between React and others, it mostly doesn't introduce foreign concepts and is always close to the language. There's a small transpilation step for JSX, just boils down to a function call. Constructs in traditional frameworks on the other hand are arbitrary and volatile black boxes, change from version to version. I prefer not to do things in the Angular/Vue/Polymer/Aurelia way, i'd like to solve problems in the same way i would solve them without framework, in generic js. React allows that, but a good grasp of es6 is needed since online examples will often make use of all the languages features or even use drafts like in the example above. 
Hello all! We have created new E2E testing framework that works out of the box with almost no configuration hell. The tool uses JS+protractor+cucumber under the hood and works on regular sites and single-page-apps as well. It's also easy to include it into any CI environment. Take a look at Quick Start section: https://thesoftwarehouse.github.io/Kakunin/quickstart/ to see how easy it is to start testing new project using built-in steps.
It’s not white space sensitive. Despite how the return is handled as a big bug... however, white space sensitive means that you can generally not worry the spacing to define functions and it actually matters how many spaces you put. If that’s the only case you can bring to the table, it’s safer to call that a bug. 
This is more of an ASI issue, though it does involve whitespace - as do other ASI issues as line breaks are what cause those situations to be ambiguous.
jscript is still a thing?
The second argument for `addEventListener` can be an object - yes, a non-function object - or function. Function listeners are called when the event is dispatched while objects have a specifically named method called: `handleEvent`. So it appears the level at which this value is validated seems inconsistent. For example I would expect your second example to be valid, even though a `handleEvent` member doesn't exist, but for the first one, I guess you could question whether or not `undefined` should be allowed. Given `null` is spec-ed that way for , it seems reasonable enough to consider them, and treat them, the same. The other types are obviously invalid.
We're like 3-6 months shy of the new hotness in medium articles being complaining about people complaining about JavaScript development. Look. Think more critically about the tools you are choosing to use and don't just use them because someone told you to. These tools are meant to help you. If they are not appropriate for what you are doing, or are not helpful than drop them. Nobody is forcing you to lint your project. Nobody is holding a gun to your head saying "Use Babel instead of Buble or traceur or typescript". All these tools are open source. If you don't like how something works, it gets better by you fixing it. The JavaScript ecosystem is fantastic because there are millions of ways to do something. People complaining about "yet another x" but they're also the same people complaining about using "x". The longer I develop the more I'm convinced that people hate on JavaScript because it doesn't hold your hand. Then they complain people wrote tools to hold their hands. Yeah, it's full of foot guns, but maybe we don't point a gun at our feet in the first place? You can do something about it, you know. Your modern JavaScript experience doesn't have to be bad. Fix the tools, get better at using the tools, or write better code that doesn't rely on those tools and don't use em.
Have you reported a bug to npm?
JScript is JavaScript without the patent infringement. Its all ECMAScript. Unless you're talking about the .NET version which is different, and something I can't comment on since I've never used it.
npm v5 makes a mess with package.json (indentation, whitespaces, lines order...) each time you perform an action. No problem with Yarn. I hope one day, Yarn devs will allow package.json comments. Every day I miss Bundler and gems: it just works, no headache.
".... or do something fun" I think you're in the wrong job fam.
I still find npm 5.4 buggy especially with Facebook owned projects, the known issues list is still pretty long - https://github.com/npm/npm/issues/16991
right.
yep... my understanding is that it was built for IE(9?) back in the day but has been abandoned. Our IDE TestComplete supports it and didn't support JavaScript at the time. We've considered "converting" our codebase but it provides low benefit (from what we know)
I don't think breaking userspace is an issue webdevs have to worry about.
I actually enjoy it, probably should've closed it with something else
It might sound like I am complaining but the fact is I really enjoyed all that.
I already described speced and real behaviour. And I think handle of **undefined** just produce code errors without any profit (also it is hard to catch this error by linters) . The question, is why it needed at all ? Is there any correct useful example for **undefined**, **null** and non-function Object ? 
Next year, I wonder what everyone will be using and dissing yarn about.
Of course it is not an issue for webdevs? Browsers vendors are the ones with an awful user space to maintain piratically forever.
atom text is solid
Even then. Userspace is pretty much only used when talking about operating system design.
A browser can't (really) break userspace
This site doesn't use gutters for mobile views, kinda awkward to be giving dev advice and over look something like that. 
all changed snapshots are updated at once
Hey, this is obviously light humour and made me smile. Just ignore those who are taking it too seriously.
My guilty pleasure is putting together build tooling. I like it almost more than the actual coding... it's like putting lego pieces together.
[this](https://www.html5rocks.com/en/tutorials/webrtc/basics/#toc-rtcdatachannel) might help you
I wasn't aware JScript still existed. I have never used it, and probably will never use it. JavaScript is accessible on all modern browsers. I see no reason to use a separate dialect that might not be compatible with non-Microsoft browsers. 
&gt; What good resources to use to go from a Javascript for UI (jquery, simple react/vue apps) dev, to a test driven/ data driven Javascript dev? Write command line applications for Node.js.
Wow, you guys must be young. JScript is Microsoft's attempt to avoid trademark stupidity (nothing to do with patents). The name JavaScript is an owned trademark of Oracle (formally Sun). JScript was created for IE3. I believe JScript might have had some differences from the standard ECMAScript spec in the early days, but those days are long gone (like 15+ years long gone). **tldr;** JScript is an attempt to avoid trademark infringement and nothing more.
hey cut us some slack! Thanks for the info.
This sounds a lot like Chimp. Why not roll with that?
we're using jscript for automated desktop testing. not web development.
I have been using React v16 now for over a month in production. Haven't had any issues or reason to downgrade. Glad to see RC.
Neat. Are you using any particular features of the JScript dialect? Can you not use JavaScript?
Good work. I use [TestCafe](https://devexpress.github.io/testcafe/) which has been fantastic so doubt I'll switch but always interesting to see different approaches.
Don't see what you're talking about
Why not typescript? Why downvote?
Cool. I use http://regexr.com/. 
Usually there's 10-20px of padding on the left and right side of the screen for potential scroll bars or just to make sure that text isn't off screen. On this site the numbers from ordered lists are off screen on mobile devices.
Celebratory [emoji tweet by the Node twitter. ](https://twitter.com/nodejs/status/906147250744815616)
document.write("idk");
It's not a dialect... it's the same as JavaScript. Just a different name. It can also be used to write scripts that run outside of the browser (from the desktop/command prompt) using Windows Scripting Host, just like you can write scripts in VBScript. Kind of like Chrome V8 before Chrome V8 was cool. Though not as fast.
Awesome mate! I have a hard time understanding the `html` function. Could you maybe walk me through it? const html = ([first, ...strings], ...values) =&gt; values .reduce((acc, cur) =&gt; acc.concat(cur, strings.shift()), [first]) .join('');
What makes you conclude it has slowed down?
Learn multiple languages. The more languages you learn the more you will understand all of them. 
Hey, this sounds *exactly* like where Java was 5 years ago.
Ah that looks like exactly what I need, thank you!
I didn't find React to be that difficult. I'm in the process of helping to rewrite a fairly substantial app over from Rails to React with a small Flask backend. I didn't have any substantial experience with large projects or major frontend frameworks beforehand. I've been working part time on this project for about 9 months. The technically difficult part was integrating Redux when it was clear that passing handlers down was getting out of hand. But we hit that difficulty naturally and came to Redux as a solution, and it has worked out well. The only continuing problem is that we have deeply nested state and that causes the reducers to become hard to manage. For now, we manage with some libraries that can help with deep comparisons and cloning and unit tests. I want to try to normalized the data coming in eventually, when I figure out how I want to do it. There's is 'magic' going on with React, but it's all under the hood. You don't have to learn a lot of conventions compared to something like .net mvc or rails. It is mostly just javascript, for good or ill. I feel like if you can write a function and HTML, you can write React. Most of our bugs are unhandled cases because of javascript's weak typing, plain old wrong business logic, or unintentional nested object mutations. Things that I don't see other javascript frameworks addressing any time soon. The only other framework that I would consider moving to would be Elm, which addresses all of those concerns, in addition to ongoing concerns about developer experience and tooling.
Ooh I didn't know they had product tags like that past the type! Thank you I'll check it out.
Sure, thanks for asking! The signature of the function is given by the spec: it's a [template literal tag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals) and it receives an array of literal strings as the first argument and then a variable number of interpolated values. If you have the following tagged template literal: tag`Today is ${new Date()}` …the `tag` function will receive `["Today is ", ""]` and a new `Date` object as arguments. Now I wouldn't even need the `html` function if arrays stringified without the comma between their elements. I wanted to allow this common React idiom: html`&lt;div&gt;${items.map(ItemComponent)}&lt;/div&gt;` In this case, the `html` function receives `["&lt;div&gt;", "&lt;/div&gt;"]` and an array of `ItemComponent` instances. There could be more interpolations and more arguments, so I gather them all up with `...values`. Next, I iterate over `values` (which by now is an array of a single element: the array of `ItemComponent` instances) and reduce them to a new array, this time inserting the literal strings from the first argument between and around them. But I don't only push individual `values` to the new array. The trick here is to use `concat` which has a special behavior for Arrays (and any objects with the [`Symbol.isConcatSpreadable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable) property defined). `concat` flattens arrays passed in as arguments to it. &gt; [1, 2].concat([3, 4]); [ 1, 2, 3, 4 ] What `html` really does is it interpolates all values in between strings *and also* flattens any arrays passed as interpolations in the template literal! Let me know if this helps and if you have more questions! 
`setState` is async so you'll never get it that way, if the precision is only 1 second maybe you still can, but surely not combining `setTimeout` manually, you need to be sure the previous render was flushed properly to the dom. I would use some svg/animation lib/component, if you want to start simple tho just use setState but make sure the previous state was flushed
I've done research into using WebRTC for arbitrary data before. The basic limitation you have to work around is that browsers cannot transmit or receive broadcast packets on any network. Therefore, the challenge is to get clients to discover each other. Once the connection is established, browsers are capable of full P2P. Though it is possible to do serverless WebRTC, this requires transmitting the "offer" (connection information) by some other means. https://owebio.github.io/serverless-webrtc-chat/ This is the closest you can get to pure P2P, but it is not user friendly. It is better to set up an [ICE](https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment) (Interactive Connectivity Establishment) server on your LAN to listen for client connection requests. https://stackoverflow.com/questions/30742431/webrtc-on-isolated-lan-without-ice-stun-turn-server For connection over the internet, you need a [STUN](https://en.wikipedia.org/wiki/STUN) server for clients to use to discover their own external IP addresses. Since STUN uses very little resources, there are some [free STUN servers](https://github.com/DamonOehlman/freeice) on the internet. [Simple WebRTC example implementation](https://github.com/shanet/WebRTC-Example) Commercial WebRTC implementations also use a [TURN](https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT) server as a fallback for failed P2P connection establishment. It's simply a classic central server. There are no free ones because it's expensive to operate. If you don't mind going over the internet, [this](https://www.sharefest.me/) is a website that does WebRTC P2P file transfer. As an alternative to P2P, [Socket.IO](https://socket.io/) is an easy central server library that works on LAN. [Serverless WebRTC example](https://github.com/xem/miniWebRTC) [Simple WebRTC example](https://github.com/shanet/WebRTC-Example)
 class Example extends Component { constructor(props) { super(props) this.state = { seconds: props.fromInSeconds } } componentDidMount() { setInterval(() =&gt; { this.setState((prevState, props) =&gt; { if(prevState.seconds === 0) return { seconds: props.fromInSeconds } return { seconds: prevState.seconds - 1 } }) }, 1000); } render() { return &lt;div&gt;{this.state.seconds}&lt;/div&gt; } }
What didn't work exactly?
ME IRL
Oh wow. I'm kinda lost :D Gonna have to walk through this a few times. For now, what I've done is steal your code and adapt it to toss out falsey values in my use case :D ${place.address &amp;&amp; `&lt;p&gt;${place.address}&lt;/p&gt;`} I dont' want to write a ternary each time: ${place.address ? `&lt;p&gt;${place.address}&lt;/p&gt;` : ''} This line would return either `place.address` if it existed, or `False`, `''`, `undefined`, `null` or what other falsey flavour of the day JS decides to throw at me. export function html([first, ...strings], ...values) { return values .reduce((acc, cur) =&gt; acc.concat(cur, strings.shift()), [first]) .filter(Boolean) .join(''); } I just filter em out and now it works :)
the new keyword before a function causes it (among other things) to return a brand new object, and sets it on 'this'. But when you explicitly return something, it overwrites the brand new object new created. In your case, you return a new object you define. So removing the new keyword results in the same behaviour.
+1
looks cool that too
This looks awesome! It should totally work that way. Would you like to submit a PR perhaps?
Sure :)
I prefer sublime. But IDE doesn't matter.
I already described how non function objects can be used when implementing handleEvent. And who's to say your handler function doesn't return a function or object as a valid handler? Linters might not help you much there. As for RTEs and null, that depends on the intention of the spec. It could be a backwards compatibility thing or simply allowing to fail gracefully for unknowns.
Btw still need to wrap my head around this line: values.reduce((acc, cur) =&gt; acc.concat(cur, strings.shift()), [first])
You forgot to mention my favorite phase: several hours of going though two-year old Github issues trying to fix a fucking `unexpected token ,` error in Webpack.
TL node: kakunin(確認) means confirmation or checking
Are you familiar with the `Array.prototype.reduce` function? The whole thing starts with `[first]` as the initial value (which is the first literal string in the template literal; it is guaranteed to exist and at minimum to be equal to `""`). It then iterates over `values` and calls `(acc, cur) =&gt; acc.concat(cur, strings.shift())` on each of them, where `acc` is the result of the `reduce` so far and `cur` is the current value. For each `cur`, it returns a new array which is a concatenation of the result so far, the value and the next literal string in order: `acc.concat(cur, strings.shift())`. Suppose you call `html` like this: html`Today is ${new Date()}` This is equal to: html(["Today is ", ""], new Date()) Inside of the function, `first` is `"Today is "`, `strings` is `[""]` (an array with all other strings) and `values` is `[new Date()]`. We start with `"Today is "` and then call the `reduce` callback on the first (and last) element on `values`, i.e. `new Date()`. The result of reducing is a concatenation of `"Today is "` (`acc`), `new Date()` (`cur`) and `""` (`strings.shift()`). If there are more literal strings (which also means more values), in the next iteration of `reduce`, `strings` will be a shorter array. So this code really just zips values and strings together taking into account the strings at the extremes. 
i just read that the James Kyle comment linked above. if there's a code of conduct then it either applies to everyone and all sides or it's a complete sham, there's no ifs ands or buts about it. 
We can use JavaScript now as our IDE supports it but we havent switched to it as it doesn't play nice with JScript. It seems to be an all or nothing kinda thing. I don't know if we are utilizing any JScript features. I've never used full-fetaured JavaScript so I'm unsure of the features only available to JScript.
I've noticed JScript doesn't let you circular reference where JavaScript does. That's the biggest issue we have.
Can you share a screenshot?
there's lots of politics and drama
So JScript referenced like this: UnitA contains: //USEUNIT unitB If UnitB (just my IDE uses this language?, not sure) contins: //USEUNIT unitA then upon interperetation, my IDE throws an exception like this one: https://i.imgur.com/9BVTEl5.png
get the latest from here https://github.com/google/closure-compiler
Checked again and can't replicate, the numbers for the ordered list under the TDD section were pushed off screen and I wasn't seeing any space on the left and right of the content and the vertical scroll bar wasn't present. Don't know the name of it but now it's doing the thing where the entire page can be pushed/swiped off screen. Maybe it's more todo with reachability or safari browser ? On IPhone 6 with safari browser. 
There's a lot of stuff happening in the developer tooling space: things like Chrome puppeteer, Facebook's prepack, TJ's up, Rich Harris' butternut. Tom Dale (Ember guy) had recently written an article that modern frameworks are turning into build systems, that is pretty spot on. Personally, from having interviewed people from big tech companies (e.g. them Twitters and Pinterests), I hear that these companies are also investing a lot in making developer tooling better. My team at work is actually dedicated to dev tooling as well.
lmao, you're insane. The IE6 one basically just showed you errors. 
This was exactly my experience setting up a new project last week. I'm going to get around to adding type annotations to shut Flow up... I swear...
yes and lots of bloggers still screaming for attention.
Idk what my lib is. I wrote all of this code myself.
Should `clearInterval` on `componentWillUnmount` too.
It's a great introductory article. If you were a junior dev and were applying to a front end position I would highly recommend understanding the concepts in this article.
I think this answer is underrated. Node.JS simplifies JS development and forces you to learn the core language because it cuts out a lot of cruft that DOM programming introduces. I think most JS fatigue comes from this fact: JS can run in **so** [many different contexts](https://www.reaktor.com/blog/node-js-satellite-means-anyone-can-space-programmer/). Frontend dev in the context of [vanillajs](http://vanilla-js.com/) has not changed even in recent years. VanillaJS still exists. But now when I write JS, I have to know where it is running...is it running on top of the OS (node.js), or the browser? Learning JS via Node.JS is in fact the same way everybody got their start with pretty much any other language: helloworld.js: console.log('Hello World!') Run it $ node helloworld.js Hello World! $ It feels most like when first learning Java/Python.
Not sure, but clicking on the JS settings in the CodePen shows that the preprocessor is LiveScript, so I'm guessing it's that.
It's a common problem. Here's one solution that doesn't use es6 https://stackoverflow.com/a/17750253/764384 Actually: didn't read thoroughly this may not be the problem, sorry, but maybe it'll prove helpful, so I'll leave the link.
This guy googles
Medium is honestly becoming terrible for devs. It's the same 5 articles rewritten for peoples blogs every month at this point. Mainly React vs X (they're all good and valid) and Javascript tooling is terrible (it's not). For day to day client work, I'd personally always pick React (usually with Redux/Reselect as I'm dealing with larger projects), but Vue is great too, especially if you just want to build something quickly. Angular is also great, perfectly valid, just not my personal preference. Ultimately that's the only difference that matters.
I'll look at it when I'm free. Thanks for the information.
&gt; Think more critically about the tools you are choosing to use to be fair choosing is how one spends the first month of JS development. Then the next 2 months learning those.
Are you logging `i` to the console after the loop? You break out of the loop only after `i` reaches 3. Inside the loop `i` should never reach 3 if `baseClasses.length` is actually 3.
My favorite part of the language is when you head to Stack Overflow to ask a question about how to do something with JavaScript and the response is answered using jQuery 99% of the time. 
FYI As of chrome 61, you can blindly write all ES2015,6,7 syntaxes, including imports! 
Nub question. Does this mean a potential decline in the use of babel? I would imagine many projects no longer need it right? What other commonly used node features would still require babel?
It's worse when your boss comes back after 3 hours and asks what you did. And you haven't started yet. Is there something that bundles these processes together? Because there should be. We have things like package managers, asset manager, what's stopping people from creating a IDE manager where you just click on checkboxes and generates a new project?
Two reasons. First, it's hard to really evaluate typescript on our codebase until we get to ES6 as a starting point. Second, ES6 is clearly the lingua franca at this point in time (with TypeScript built on top of it). TypeScript has only really gained in popularity over the last year or so; it remains to be seen whether it has staying power or whether something else will become the new hotness in a few years' time. edit: fwiw I didn't downvote you
I've been fairly happy with this one: https://regex101.com/ 
If by 5, you mean 10-15, then I think you're about right - early days of maven, junit lagging until testng pushed it along, eclipse and intellij (and netbeans, anyone remember netbeans?) racing to the bottom of suck, Java 1.5 released and @SuppressWarnings everything...
never trust code from the client...
If you really want to learn es6 and join the ranks of the Gods, http://exploringjs.com/es6/ there is no substitute.
"Angular is used by Google, Vine, etc..." Had to check the date on this article, because Vine.
This sounds more like you haven't really thought out what you want and what you need. And if you need to exclude something for any linter, its probably because you are pretty shit at what you do. There's a reason they throw errors (not to mention its pretty easy to use a custom config and disable it there)
Hi /u/2StepsFr0mHell, I'm going to leave this one up, but in the future, please submit links using the "Submit a new link" option. Thank you.
Posts like that just show lack of respect and intelligence . Of course JavaScript is not a real language and one can master it in few minutes. Then spend half an hour to master npm/webpack/flow. Then you start coding. Oh noes it's not working!!! Obviously because it's a shitty language. 
[ES6 Support](https://kangax.github.io/compat-table/es6/). Also, if you start a project by doing everything at once, you're gonna have a bad time. Start making something, add stuff as you need it.
If you have access to Pluralsight - Kyle does a talk on [Advanced Javascript](https://www.pluralsight.com/courses/advanced-javascript) that is great. It isn't a substitute for his books, but an excellent way to learn quite a bit of their content.
It's the `supress automatic return` modifier in Livescript http://livescript.net/#functions TL;DR: a = (x) -&gt; 1 // a = function(x) {return 1} a = (x) !-&gt; 1 // a = function(x) {1}
Babel will still be needed for: 1. Frontend projects targeting older browsers, even evergreens when users might not always be using the latest version 2. Any new ES features going forward that aren't supported by the runtime, like decorators and function bind 3. Miscellaneous code transforms, like Flow types and JSX
&gt; it's safer to call that ~~a bug~~ ASI FTFY
after doing a lot of scala, elm looks like sooo much fun
Yeah. The backend has been redone using Flask.
Not 100% sure what the problem is, but if it's an async issue -- use `let` instead of `var` for your `for loop` ------------------ ``` for (let i = 0; i &lt; baseClasses.length; ++i) { ```
Looks cool. Do you have an open source project that you've build with this?
https://www.regexbuddy.com/ Is the best regex tool there is.
Yeah. That is frustrating. 
Agreed
Couldn't find any out there so I created it myself. It pays attention to some of the attributes for a month field, like min and max. It then includes validation so if you choose a value greater than the max or less than the minimum value, it pops up an alert. If the browser already supports `input type="month"` it does nothing. If it supports `input type="date"` it uses that input type instead and returns the chosen date with just the year and month. If the browser doesn't support `input type="date"` then it uses a dropdown for the months and either a dropdown for the years (default) or an `input type="number"` field with the correct minimum &amp; maximum values set for years based on the min/max values in the original input. To choose the number input instead of the dropdown, just add `data-year-dropdown="false"` to the input. 
Are you saying when you do `console.log(i);` in the `onclick` function or when you console it out in the loop at a random point? Maybe try removing all the attribute setting (but not `onclick`) and console things out to see what the result is. Something like this helps for fast iterations: https://repl.it/Kr51/2
Thanks :) I'm currently working on a project where I use Gruu, but unfortunately it is not open source - it wasn't my choice :( However, I'll soon start something new that will be open source. Now, Gruu is in an experimental stage and I'm learning what is the best way to use it, how to structure files and many more. Having gained experience during the first project, I'll be able to shape some patterns about the example Gruu application.
I was all about Sublime Text 3, but VS Code won me over.
Curious about the direct array access issues, most of my issues with array bindings were resolved in more recent updates such as value converters not properly detecting array mutation.
Sure thing, but you can trust code from the server.
&gt; Angular, on the other hand, comes with a confusing nest of build tools, boilerplate, linters &amp; time-sinks to deal with. Are you kidding me? Just install the `CLI` and go `ng new project`. It's like 5 mins max, provided you have the wherewithal to do 10 mins of research. That old saying "Weeks of coding can save hours of programming" applies here. &gt; A big difference between React and Angular is one-way vs. two-way binding. Angular’s two-way-binding changes the model state when the UI element (e.g. a user input) is updated. You literally have to go out of your way to do 2 way binding in Angular. One way binding is default -- via a property binding and event binding -- and reactive forms provide a lower friction way to do a one way binding while providing Observable interfaces into many events and properties of your form, ie full featured. 
A feature I'd really like would be automatic resolution of suitable versions when using --flat. Either the minimum stable versions or the maximum version that satisfies all constraints. Currently, installing something like webpack with a flat hierarchy requires me to make dozens of version decisions because it finally starts. What a nightmare.
(node.green)[node.green] is a good site for this type of question. Short answer is that with modules there is no real need for babel for node unless perhaps you're doing something more outlandish. 
Am I seriously the only one that noticed that this post was marked help?
Well, a few things to note: 1. This was all pretty well documented in an article on Hacker Noon last year https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f 2. Most of what's broken is the browser, not JavaScript or ES6 3. Programming is hard, configuration can be even harder 4. All these tools like linters, type checkers, git hooks, npm scripts are designed to make your life easier. So if they are doing the opposite, you're either doing it wrong or shouldn't be doing it at all! None of them are requirements to write working code.
If using https then probably, but if it's not a secure connection you're leaving a gaping hole for a mitm attack.
To be fair, the build process is ... special, there's so much going on like AOT and it's not always bug-free. We needed something extra so we ejected into one *wild* config, caused a collapse. After getting that fixed dependencies the cli was stuck with were updated, caused another. Then some more. Overall it caused at least some inconvenience. I get that cli's are trying to enable lots of possibilities, but i'd prefer setting up projects by hand. Looking at the ejected webpack config we now have, is that even possible for Angular?
you would still need a pretty good reason not to simply share data between servers. And that would be really situational (i.e. some distributed code generator or something).
or you've done all this before and you use your own boilerplate, get up and running in 2 minutes and stop bitching about how modern development is hard and understand this is why you get paid so much
Try this workflow instead: Have an idea? Maybe a React app or component, if so open [codesandbox](https://codesandbox.io/s/new) * Start coding right away, no babel, no bundling... * Looks great, now I am getting serious... * open console, `create-react-app` Not writing React? Still an app? Open [webpackbin](https://www.webpackbin.com/) Wanna try out a npm library? Open [runkit](https://runkit.com) Type `const lib = require("..");` Oh, I am actually writing an library myself! Then why wouldn't I want to go through the troubles of setting up transpliling, unit testing and bundling so that: * users of the library can get started in one command (or one script tag) * potential open source contributors can just git clone and npm install to start bug fixing 
https://github.com/Flatte/Flatte-Web
My only beef with these articles is the comparison between libs and frameworks. Not sure why the frontend community mixes these up. It's comparing apples and oranges.
Vine? Wat?
Netbeans? Pffffttt we were doing just fine with Borland JBuilder till you smarty pants EJBer's came along. /jks
I've heard the Vue is good for slow integration, that's what Gitlab has done. They moved form jQuery to Vue slowly over time.
It's kind of weird at this point. Both React and Vue are libraries that have enough sub libraries to make up a framework at this point. 
I started work with angularjs in 2014 (or 2013, I do not remember). I am a freelancer full stack developer who build complete solutions. My problem is surely not unique but maybe rare: I do not work on simple projects, I mean, there is only a handful simple websites I made in the past few years, the rest is pretty complex and unique. I made basically everything one could need for a website or webapp, but all in angularjs. (spa cms, ecommerce solutions, wysiwyg editor, reddit like forum, crm and of course countless small things like lightbox in every conceivable way). I have everything now to be super productive. Sorry for the rant, but I needed to write this before my question, which is: **How the fuck can I switch to a more modern framework** (or library)? --- I know that I shouldn't switch just because there are better frameworks, and lets be honest, SPA sites built with angularjs are still can be called modern, but the more things I build, the harder it will be to upgrade. I fear this is the reason there are developers with vastly outdated knowledge, they just did not wanted to abandon the work they did before just to spend months for the trendy new thing. I need something like the micro frameworks in php, something small and helpful but easily replaceable without the need to change the way I work. Sorry again for the rant and for my english. 
Thanks a lot for this. Very cool. 
Don't misunderstand me I think this is a terrible idea. I'm just saying that over a secure connection you can probably not worry too much about injection attacks.
In the context of comparison, React and Vue are used as frameworks alongside supporting libraries, so the comparison is perfectly valid.
Is what even possible? You didn't describe anything in enough detail to know what you're asking.
gotta say, your last line doesn't really nail the whole "i really enjoyed all that" theme.
I disagree. They're view libraries. Frameworks are comprised of libraries. So if you're comparing libs you need to analyze the ecosystem that allows you to build your own framework. In contrast if you're comparing frameworks then you're evaluating productivity, maintenance, etc... To me these articles are like writing an article titled "Rails vs. Erector vs. Fortitude". It's not the same. 
Yeah. I'd like to see a framework with these libs that the community supports. Not 100+ react one offs. 
Instead of comparing GitHub stars, better check npm trends: https://npmcharts.com/compare/react,angular,@angular/core,vue AngularJS, Angular 2+, Vue.js... all have a somewhat similar approach. React is more of a newer paradigm, it fixes most of the problems older stacks had in a radically different way, yet elegant. This article fails to explain the different paradigms. Also please stop "Want to use TypeScript? Go with Angular!". React and its ecosystem has the best TypeScript experience thanks to JSX. JSX being just JavaScript, everything is checked by TypeScript like any regular JavaScript piece of code. You cannot do that with HTML templates.
I thought this was like the idea for a book, godammit!
Likely an analogue clock too, that i have made some years ago :) http://molokoloco.github.io/flatClock3d/
Anything you put in set interval or set timeout will be executed in the global scope. Console.log "this" inside the interval and youll see its pointing to the window object. You need to do var self = this outside the interval and then use self instead of this inside the interval.
Nice, I'm starting to use Angular and have no idea how to use JavaScript properly. This looks like it will help a lot as a reference.
So... am I wrong to have a visceral hatred of arrow functions? I find them so unreadable! So, am I just old or am I not alone? Oh yea, and GET OFF MY LAWN!
&gt;Let's add ESLINT, ***Flow*** and a preset provided by Google or Airbnb or whatever is on fire these days. booo! Dynamic typing is a thing of beauty, learn to love it instead of giving into FUD.
I love this style, especially with a font that supports ligatures. Fira Code and a JetBrains IDE are glorious.
Yes, beforehand it showed 1 2 3, I'm not sure why it keeps stopping at 3. I also logged (i*3) formulas and 11 kept getting logged.
I'm not sure. I do Angular. I read the book before learning it. Most of it isn't all that useful. You need to understand generators, iterators, fat arrow lambda, symbols, and let. The rest is a waste of time for your purposes. Unless you want to join the rank of the Gods. What you'll need is a firm understand of Rx.js ([buy this book](https://www.amazon.com/RxJS-Action-Paul-P-Daniels/dp/1617293415/ref=sr_1_1?ie=UTF8&amp;qid=1504916139&amp;sr=8-1&amp;keywords=rxjs)). You'll also need a very firm understanding of the Angular docs.
Arrow functions do not bind this, so I think the above code will work with no modifications.
Thank you, using let completely solved my issue. I figured it had to be an issue such as that. I appreciate the information.
&gt; React and its ecosystem has the best TypeScript experience thanks to JSX. JSX being just JavaScript, everything is checked by TypeScript like any regular JavaScript piece of code. You cannot do that with HTML templates. JSX alone is reason enough for me to never want to transition from React, with or without considering TypeScript. (Though I hear Vue supports JSX, which is cool!) At the end of the day, the primary concern of any front end application is going to be to turn data into a view. JSX makes that "last mile" of getting your data into the view so, so much easier to deal with than any template system. A large part of that simplicity is enabled simply by virtue of it being syntactic sugar over plain JS. No `ngFor` and other DSL bullshit, just good ol' native methods like `.map`!
not nearly as fast as http://sap.github.io/chevrotain/performance/ (pun intended)
Man I love Fira Code, I use it in both VSCode and Visual Studio. There's no going back
Not going to give my opinion but did want to remind anyone learning JS that arrow functions and full functions are semantically different. They are not just a stylistic choice (though in some cases they can be interchangeable). It is important to know when to use or avoid each. For example you might want named function hoisting. You're going to want a non-arrow function definition. Want to avoid creating a new scope? Maybe go with an expression referring an anonymous arrow fn. TLDR; do what works, just focus on understanding trade offs.
Also worth checking out reflex or react-hs + GHCJS. Particularly since reflex mobile will come out soon and then you will be able to use reflex for both web and app (both iOS and Android) development, with lots of code sharing between platform. Reflex mobile will almost certainly perform far better than react native, due to not needing to use JavaScript. 
&gt; Maximum callstack exceeded is back and full of vengeance Neat.
The point is why? Whenever you have more than one person they have to manually install all the versions of the code. God forbid the version they install isn't a major difference from yours.
Hi /u/kaanekinci, please submit the project link, and include the image as a comment. Thank you.
That's odd. Glad you figured it out!
I have a question about the currified **Use arrow functions instead of anonymous functions** example. In this: const add = x =&gt; y =&gt; x + y; const values = [0, 1, 2, 3]; const incremented = values.map(add(1)); console.log(incremented); What is `y`? Is it `values[n]` or is it `1`? Is that just what `map()` does? Does it imply tacking on `(array[n])` to whatever function you give it? So it's like it's doing `add(1)(values[n])` for each of the numbers in the array?
`y` would be the current value as `map()` loops over the array. Let me break it down a bit. Let's say we want to just add 5 to each number. Our `map()` callback would look like: function add5(y) { return 5 + y; } const newValues = values.map(add5); Now, instead of hardcoding 5, we're going to write a function that takes a first number, and returns a new function that uses that number instead of 5: function createMapCallbackThatAddsANumber(x) { return function mapCallbackThatAdds(y) { return x + y; } } const add5 = createMappCallbackThatAddsANumber(5); const newValues = values.map(add5); Hopefully that clears things up a bit.
they are not apples and oranges. you can eat both apple and orange, but you cant really use two frameworks together without hurting your website performance
The latest versions of Chrome/Firefox aren't really missing any "must-have" features anymore (unless you're likely to be doing something with async iterators, or just can't live without class field syntax). You can just defer all the transpilation/bundling configuration stuff until later. Eslint? Style presets? Meh just use VSCode with the prettier extension installed and you're good. Choosing to go statically-typed is your own problem...
FYI Reselect is an amazing option for dealing with nested state in the interim. Selectors inside your mapStateToProps just really clears up state management.
Not sure I understand. Are you suggesting using vue and react in the same app?
Look, I like Flow as much as the next guy, but you don't really *need* static checking unless you're on a large team or you're one of those weird /r/programming purists.
i dont see any code.. how do you know op's using arrow functions?
i think i put my comment on the wrong thread. my bad. that was supposed to be in reply to op, not the person who posted the code snippet above.
&gt; and hear your thoughts on Gruu When you make any statements about performance, try to prove it with numbers. Even badly designed benchmark that is tailored for your library will be way much better than just saying that it will be faster because it doesn't perform unnecessary renders.
Not trying to stir up anything, I'm just just genuinely curious, why? Clearly, OP wanted to add some context as to why they shared this link. Why would you prefer them to submit as a link and then add a comment?
You might like Elm, the tooling is pretty straightforward
no i am saying its not like you can use both libraries at once. so the comparison is justified 
💩🦄
I thought the same thing
What is Fira Code?
Or you could use markdown.... clear concise straight forward and can translate to other formats pretty easily. Although I guess this is more for having your resume on your website.
I don’t doubt they are trying because the platform certainly has improved from a few years ago.
Fira Code is basically just a font except it has programming ligatures which make things such as "&gt;=" look like "≥" etc. Check it out on [GitHub](https://github.com/tonsky/FiraCode) there's plenty of examples there
We depend on it to power our various moderation tools; reddit has automod, which can action problematic behavior based on the domain, and the 3rd party browser extension from /r/toolbox, which helps us find those problematic behaviors: &gt; Available submission history for 2StepsFr0mHell: &gt; domain submitted from|count|% :-|-:|-: [self.hearthstone](/r/hearthstone/search?q=%28and+author%3A%272StepsFr0mHell%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|17|19% [self.heroesofthestorm](/r/heroesofthestorm/search?q=%28and+author%3A%272StepsFr0mHell%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|14|16% [tech.io](/search?q=%28and+site%3A%27tech.io%27+author%3A%272StepsFr0mHell%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|9|10% OP posted `tech.io`, but it's only 10% of their posting history, so no problem....except, we know that number is actually going to be higher because of the text posts. I did find another instance besides this one, and the total % is still well within a reasonable range, but it's a chore to have to research.
Interesting. How would I use this in say, procedural generation of sentences, names, or even buildings?
This article focuses on happy path with the new changes. Tutorials never talk about how there are like 6 different ways to create a new fat arrow function. Which by the way is not this-aware nor does it contain the capacity to refer this lexically. I guess this might be useful if you're 3 or 4 scopes down and want to refer to the above(normally written) function scope this. Point is, es6 is great if you like sugar and bandaids. I prefer to see my abstractions for what they are and be able to deal with the issues first hand until they're dealt with in the core(if at all possible).
*cough* and they don't have this reference either *cough cough*
There are many relatively new things, but not everything went through to the mainstream. This is the community that settled to the mainstream solutions, not the ecosystem (there are still many interesting not-so-popular projects on Github). 
To each his own. I personally dont like JSX at all preciecly because I have to write out object.keys and .map every. single. time. not to mention the className and { /* lol this is a valid comment */ }
Wtf do any of these do
It's called boilerplate, you can use yeoman (years old) or if you like React `create-react-app` or `next` are awesome options.
I have written an article about it a while ago https://medium.com/@gajus/parsing-absolutely-anything-in-javascript-using-earley-algorithm-886edcc31e5e
className isn't a JSX limitation though, that was a bad call the React team did, other functional libraries do use class. Current React (16) also finally does. As for map, i use this function every day when writing plain javascript. I think i prefer that over ngFor because everything that goes beyond simple loops, like filters, reducers, transforms, ranges, etc. is getting hairy in template frameworks. I think loops aren't even a good argument for templates because JSX can easily do it: https://github.com/AlexGilleran/jsx-control-statements &lt;For each="item" index="index" of={ items )}&gt; &lt;span key={ item.id }&gt;{ index }. { item.title }&lt;/span&gt; &lt;/For&gt;
Thanks for your article, it's what made me use Nearley for my own project. 
I wrote this [parser for electronic component descriptions](https://monostable.github.io/electro-grammar) with it recently. Very good, would recommend. 
Will these Vue vs React articles ever end??!! There's a new one every week with absolutely nothing new to say, since most people still don't understand what makes React different and just focus on JSX vs templates. Written by people who should know better, often in charge of picking the tech stack, who have no clue about functional programming, immutable state etc, the core concepts of React. Another popular cliche in these comparisons is claiming that Vue is so simple but React needs a whole toolchain. That has stopped a little ever since CRA but it was never true to begin with. If I wanted to learn a DSL I'd use Angular, Vue or hell Knockout/Ember etc. But I don't, I want to use all of JS and this is what these articles never consider.
&gt; I need something like the micro frameworks in php, something small and helpful but easily replaceable without the need to change the way I work. Functional frameworks all base on the same principles, they're simple to learn, tiny, replaceable. You can switch them, some offer compatibility layers, to others you could at least port components. Another thing that really makes a difference is the state-manager. Redux for instance is self-contained and independent, you can use it in all frameworks, in plain js, or even across platforms and languages. That pretty much takes the pain out of the ongoing battle between frameworks. They're mostly the same, their APIs are stable, they all handle JSX, semantics are mostly the same, state is abstracted. It just doesn't matter anymore as it once did.
You can remote debug an android device and get access to all of the dev tool features such as performance: https://developers.google.com/web/tools/chrome-devtools/remote-debugging/ Also, the first thing to do is make sure react is in production mode and not developer mode. This is easily accomplished with react dev tools in your desktop browser: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en
The issue exists afterall. I have noticed drop in traffic after updating production to React ^16.0.0-rc.2. Turns out it is due to new pages not being indexed. http://imgur.com/a/L4DTc You can see it live here https://go2cinema.com/. You will need to use an old browser such as Chrome v25. That error: &gt; Uncaught TypeError: cannot set property 'nextEffect' of undefined Is coming from react code base. The same issue is affecting Fetch as Google. I am not able to replicate the same issue using "Hello, World" example. I am guessing it might be something to do with `setState` or context being using in the real world app. Opened React issue: https://github.com/facebook/react/issues/10656
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/mVKpVUI.jpg ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dmrl0qf) 
100% agree - I would agree with the observation that most people don't consider Ember cool. But what relevance is that to anything - Java isn't cool but is still widely used in industry (especially enterprise). If they had of tried to link "coolness" to other related things (community size and support, ease of learning, willingness for new developers to pick it up etc) then may have been more relevant.
Separate CSS is also dated though. There are some real great potential CSS in JS solutions. Though I do recognize it's not always easy to transition.
Thank you, I'll run some benchmarks.
I accept you are good at it. I'm really sorry for posting this.
We didn't have issues with value converters, but we did have issues with renders not getting triggered by the bindings. The only possible solution we found was to replace the entire array, or use the .splice hack. This might've changed in a really recent version of the framework, but last time I checked (about a month ago) we were on the latest version of everything and it was still an issue.
React is great for that too. A lot of projects (ours included) have slowly migrated from Backbone/jQuery to React piece-by-piece. React's unopinionated nature makes it so you can do it entirely on your own terms.
I think all posts are automatically tagged with help until the author removes it.
No, it's impossible to write a webpack config that will bundle an Angular project /s
You can see wiki at github. Flatte manifest builder: https://flatte.maxabab.com
Create the grammar (if you can, the hard part) then use it as a generator. See step 2 and 5 on the site.
jQuery with simple WebMethod C# backend communicating using JSON has worked very well in large projects in my experience. Simple tools that allow you to focus on the actual project instead of the framework. The main advantage with using jQuery is that it is used as support tool, not a framework, and thus avoids the main problem that usually crops up during the later stages of projects written using frameworks: Trying to move a toothpick using a bulldozer (Making small changes to the logic or UI that doesn't fit into the framework). Another big advantage is that C# and jQuery support in StackOverflow, blogs and forums is really second to none. You are almost guaranteed that any problem you encounter has been encountered before. Also all Javascript developers, whatever framework they prefer, know Javascript (and jQuery is usually just Javascript + Selectors). Thus all Javascript developers should integrate easily into the team. 
ooh you want to have a function that adds 5 so you make a function that returns a function. then this means: const add = x =&gt; y =&gt; x + y; We're defining something static called 'add', we point 'add' towards a function ( x =&gt; y ), that function is defined as `y =&gt; x + y` so we take the x that was the argument for 'add' and use it together with y that was the argument for `y =&gt; x + y` which was an anonymous function. This smearing out of arguments is currying. 
Hey boss! Nice work. I'd put a note in there that it won't work on IE and anything lower than safari 9 since you're using Array.from