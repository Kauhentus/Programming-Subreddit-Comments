Thanks! One vertex per pixel - probably a lot higher than necessary, but it was easy and I was aiming for a static image. :D
Hey, you might be missing the point. 
Google API TOS prohibits &gt;Scrape, build databases, or otherwise create permanent copies of such content, or keep cached copies longer than permitted by the cache header; But I think it's not a big deal to download some to play with.
&gt; Some are abandoned / looking for maintainers. In the JS land I wouldn't touch them with a stick. I found one that hasn't been updated since 2014. This isn't a problem. Perhaps if vast majority of your experience is in JS, you just don't know any different, but 5 years without change is not abnormal. Projects being "finished" is not abnormal. Neither is a reason for concern on its own. &gt; Some are larger projects that are in the 50k-100k LOC range. If you tell me that you went through and properly audited all of this code: you are lying. Do you usually audit unit tests and example code, or are you just trying to inflate your numbers to bolster your argument? &gt; If the above is what a typical project pulls as dependencies, then you're on the hook for auditing close to 250k+ lines of code, you better have a full time team dedicated to doing that then? Dude, exactly how difficult do you think it is to audit c# code? It's 120,000 lines that can be mostly breezed through and maybe 30,000 that needs a bit more careful reading, with less than 10,000 lines that isn't plain and straight-forward. It's not JS where you can change object prototypes, overwrite any property with a function, and might only have minified code.
well actualy crypto functions are writable: crypto.getRandomValues = function () { return 123; }; crypto.getRandomValues(); // 123 IDK why the initial design decision was to allow reassignment of builtins, but yeah, overriding them used in the past for evil stuff like JSON hijacking and location.href tampering (impossible today, it's non-configurable). The threat is more of other scripts in the same contetx, bad browser extension can screw you in much worse ways since it has access to higher privilege APIs.
Hi /u/youngzionisthename, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
thanks for sharing...this is helpful
I have more of you are a glutton for punishment 
ha ha ...thank you...let me start with these
Not a problem let me recommend one more if you are going for learning all three Internetingishard.com
That sounds like homework. 
These are obviously homework/study questions. I'm sure you'll find a ton of people to help guide you if you tell us what you've tried, what you're thinking, and where you're stuck. As it stands, you just gave us a list of homework problems with no context. You're not going to find many people to help you there, and if they do, they're doing you a disservice. 
[Here's](https://codepen.io/tontonsb/pen/pYGMoB) my go. Nothing fancy, just my jQuery with the article's HTML. Instead of having event handlers that invoke other events I prefer to keep the flow more linear. In this case I decided to have event listeners that invoke actions. Actions do the change that was required and call the update function that synces whatever else needs to be updated on changes.
r/woosh
Or maybe that's how the credit card of my company got pwned on OnePlus checkout...
i'm the author, so my experience is great! the biggest difference is that DropCSS does not execute or precess `&lt;script&gt;` or JS. so if you rely heavily on PurifyCSS's magical inference of JS files, then it might not work well for you. however, if you can manage a whitelist or inject additional html to prevent DropCSS from removing certain things, then the performance is far superior: https://github.com/leeoniya/dropcss#performance
That's impressive, sick stuff
Not allowed to use the built ins? Well... Then they are unsolvable.
Well I could answer those, but you really should try on your own first. I would be doing you bad if I were to give you the answers. I might could answer now, but when you'll need to use those concepts later, I won't be there. I say, take a stab at them. Try the first one, and tell us what you're thinking. If you can't get it, I could help you from there. But to just give you the answer is bad. Hint for the first one: search on Google something like "Javascript function arguments variable"
Not really sure. I know you can just string them both together in one sentence and it'll work. Like I said, I only have a small amount of time to work on these so if something works I just continue haha but it would be a lot better to just say the intent without the "hey google" bit
Yeh I'm just doing this to better my programming skills. 
Had a look at the demo and looks really interesting, definitely going to have a play with this! Keep up the good work!
Chrome is wayyy faster than anything from Microsoft. Edge is in the process of just using V8, because Edge is very sad.
If it was connected to a smart coffee maker it could even learn your schedule and make coffee for you before you know you need it. Or at least offer to make it when it thinks you will. 
That would be fantastic haha
&gt; Then I can dive into the JavaScript engine code base: e.g. V8, SpiderMonkey i generally try not to make assumptions about what people are capable of, but judging from your question, i think you're likely in way over your head. JS engines have several stages of compilers in them with extremely complex inference semantics. assuming you are already an experienced C or C++ dev, it will likely take you many months just to begin to unravel anything meaningful related to performance assessment in just a single engine. take some time to read through these to assess whether this is something that you can reasonably undertake: https://mrale.ph/blog/ https://ponyfoo.com/contributors/bmeurer good luck!
Thanks for your comment! I see this is a very hard topic and it is almost impossible to become an expert of every aspect of JS engine running in the browser. I am not hoping to become an expert browser developer, instead, trying to find different choices of underlying data structures, hash functions, and so on that can be found on different browsers. And hopefully they can cause performance gap that can be observed. Thank you again, I must work harder!
This is amazing. This was reposted on r/gis and is exactly what I've been looking for! I was planning on writing something similar in Python that utilises aster DEM tiles and the Copernicus hub API for textures. You've given me a lot of food for thought, especially when you alluded to the math required to turn latlong coordinates to 3d space. Brilliant stuff, thanks so much for sharing!
i would imagine that it's probably extremely unlikely that you'll see any such low-hanging fruit in mature JS engines.the data structures and hashing functions are likely already optimal. my guess is that most of the difference comes down to subtle intricacies in bigger-picture architectural decisions that won't be apparent from any single sub-component. maybe there is poor cache alignment buried somewhere deep in the weeds. i'm sure if you look hard enough you might spot an accidental O(n^2) where O(n log n) is possible. these systems are heavily and continuously profiled and compared against what other engines do and what ASM they end up producing. the likelyhood of finding something juicy enough to point a finger at and say "this here is why a certain construct of JS code is running poorly", is lottery-level unlikely, imo.
You lost me. All you're doing is: Putting a reference to a class (I assume) in an array. [entityType] "Unboxing" it. [0] And then constructing it. new nowAReferenceToThatClass(store) You can store references to `class`es in variables. Hell, you don't even have to give classes names. var a = class { constructor(b) { this.b = b } } //=&gt; undefined new a(1) //=&gt; a {b: 1} 
Redux starter kit is the best. Should be the actual redux API IMO.
Really nice, I like the visuals! I love the Spotify API! I built [this](http://dynamic-pide.herokuapp.com) with it for a university project (the cumin page). Keep up the good work!
Yeah, I was thinking more in the lines of making a small practice project in which the API is used and the data used on the spot. No need to save the pure json and definitely no need to scrape all of Google places content to a database :)
new \[class {constructor(b) { this.b = b } }\]\[0\]('b');
if you want to instantiate a class by it's name (and it exists on the top level) you can just call it like this if you're working in the browser: &amp;#x200B; `function createByName(name, arg) {` `return new window[name](arg)` `}`
WAT?
Thanks! I really loved your UI that black and green UI and the graph looks awesome! 
 let c = { Pig: class { talk() { return 'oink'; } } }; let p1 = new c['Pig'](); let p2 = new c.Pig(); console.log(p1.talk(), p2.talk()); // oink oink
Those renders are gorgeous, thanks for sharing. Have you seen this other ray traced approach: https://www.tylermw.com/throwing-shade/ ?
&gt;You lost me. No, I'd say you pretty much had it figured. &amp;#x200B;
Wow, I feel lucky to have a conversation with someone you who has proficiency in the browser and the JavaScript literacy. I agree that both JS engines are extremely optimized so that it is less likely that I can improve their performance with out so much efforts. Yet I still believe there exists \_different design choices\_, where both way can be considered as optimal, however showing \_different worst-case behavior\_. As a straw-man example, quick sort and merge sort has different worst case pattern. I am wondering whether I can find such inputs that hopefully is handled differently, thus showing performance gap. In other words, I am not trying to improve existing browsers, but to find such different design choices that can show different behavior only when such \_strange\_ inputs are provided. Thank you for sharing your wisdom!
Interesting. Someone should name a javascript library after it, or something.
It definitely does not invoke a system call.
Thank you.
How does it far with ES5 strict mode enabled?
This is a great article. As an interviewer, the one of the most important things I'm looking for, especially in junior engineers, is what does this person do when they're stuck? Can they work methodically through something they've never done before?
Would saying can I Google it be ok
Hi /u/AnecD, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Vs Code or Atom?
Amazing work!
Sounds super cool, consider adding a GIF for showing the plugin in action.
I think i tested Atom before but removed it, i think because it didnt install system-wide so i couldnt associate filetypes with it the way i did with notepad++. VS Code isnt part of Visual Studio? Sorry, newbie in programming
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/node] [Any recommendations for an IDE for small node projects? \[x-post from r\/javascript\]](https://www.reddit.com/r/node/comments/b57fm0/any_recommendations_for_an_ide_for_small_node/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Give it another go. VS Code is similar editor. 
Microsoft visualise studio code is dope. Use this.
It's pretty much always ok to say. But usually an interviewer will want to see what you can do without it. Interview problems are generally pretty contrived. They have to be to be solvable without context in a short time frame. But there are many problems that come up in the actual job that may not have Stack Overflow pages. For example, when dealing with internal code. The goal is to see if you can handle that type of situation, or if you'll need a lot of hand-holding.
You want to use one of these patterns: * Make a static lookup Dictionary/Array/Map of string to class name * a registry where you manually register the classes at application start * a registry where the classes automatically register themselves You can probably use `constructor.name` somewhere if your minification allows for it. If you go whole hog OOP, the pattern is called "[abstract factory](https://en.wikipedia.org/wiki/Abstract_factory_pattern)". If you don't go whole hog OOP, then it's just a "look up table of classes". 
VS Code or die
Visual Studio Code and Visual Studio only have Microsoft as the owner in common, otherwise they’re two completely different products. Visual Studio Code is a fork of Atom with a few UI adjustments.
Why wrap it in a promise? setTimeout should work. 
Vs Code Sublime Text Brackets Atom Webstorm 
if you pick a very narrow feature, then you might get somewhere. but you'd have to have an extremely reduced test case as not to involve too much else. `Canvas` or `Video` or `Image` probably have minimal interaction with JS aside from their external APIs - much less so than language constructs like loops, functions, closures, etc. but at that point you're not really perf-testing the JS engine :) there are many truly brilliant people working on JS engine cores; unturned stones will be exceedingly rare.
Depends. If you notice the interviewer is very young and has otherwise a "iamverysmart" kind of attitude, it's best to actually avoid asking that question.
Probably also a sign that you may not want to work somewhere if they use this kind of interviewers
Hi /u/JustMeGeoffrey, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What about all the irrational numbers?
Downvoted due to article being behind Medium paywall.
WebRTC requires a server to exchange SDP data that is called WebRTC signalling. In my open-source project [P2P Media Loader](http://novage.com.ua/p2p-media-loader/demo.html) I use public and free WebTorrent trackers to connect peers by default. &amp;#x200B; You can use [bittorent-tracker](https://www.npmjs.com/package/bittorrent-tracker) client library to connect free WebTorrent servers by some info\_hash and connect your peers.
Yeah agreed :)
VS code FTW!
Vim. 
I had an interview for an “entry level website designer” position. They started asking me about how to convert to binary and how to do complex backend stuff. Which I never had any experience before and I don’t lie on my resume. 
That's kind of what guided me there, but if it's Node and there's no `window`, so I tried a few ways and this what I ask about is the only one-liner that worked.
That doesn't really achieve the goal I'm after though. The only reason I put it in an array and "unbox" is, well, because if I have the class name in a variable, say `className` can be `User` or `Event` and I want to instantiate it, calling `new className()` will fail, but `[className][0]()` creates an instance of that class. I guess I didn't quite explain that the `className` is a var, that's what I meant by dynamic! At this point I guess I can tell it's not the right way to do it, what I'm trying to accomplish would be done this way in PHP: ``` $className = 'User'; $user = new $className(); ``` 
Thanks! I'll look into the `constructor.name` a little closer as that sounds like it could get the job done. Basically I want to do sort of PHP's `$className = 'User'; $user = new $className()` with minimal coupling, so I was trying to avoid having a registry/dictionary, but didn't know how to create the class without an array so I created one. It's not a clean solution by any means, that's why I ask here :)
Ideally they would give you google when doing any kind of programming.
 » var className = Audio undefined » className function Audio() » new className() &lt;audio preload="auto"&gt;
I’m still surprised I never get this question in interviews. I’m at the point where if someone says “oh I read that in the doc the other day, let me look it up really quickly” or “I always get slice and splice mixed up, let me look it up on MDN”, they’d get major points. We don’t expect people to know everything by heart, but knowing where to find the documentation is really useful. 
The duck debugging is the right answer here. 
I have encountered interviews where they didn’t really want me to use google but mostly because they wanted to see me problem solve under pressure, with as little help as possible (for a Senior position too), and I think the article addresses that very well. It’s usually less important that you actually solve the problem that demonstrating that you can solve the problem.
You can't access variables in scope by name in JavaScript. For example something like this is not possible. class Foo {} let entityType = 'Foo' new [entityType] The `[]` operator here will create an array with a single element of the 'Foo' string rather than try to resolve the variable named `entityType` into its class reference. And there's no other way to access the scope as an object (minifiers are heavily dependent on this behavior to work). To get what you're after, you have to refer to property names in objects. This means each of the classes that you need to refer to through `entityType` must be accessible as a property of an object and not just a variable in the current scope. See /u/inu-no-policemen's previous comment for an example of this. You can also assign your classes to global which would also make them inherently available everywhere without using a string window.Foo = class {} // window is global if in browser environments let entityType = 'Foo' new window[entityType] // OK new Foo // OK Or if using a single module that exports each of your class (probably not ideal given classes typically get their own modules, though if their small enough, it wouldn't be a big deal), you can import that module in as a single object from which each class is accessible through a named property. // entities.js export class Foo {} export class Bar {} // app.js import * as entities from './entities' let entityType = 'Foo' new entities[entityType] // OK
Because when you use await on it it looks like synchronous code. How are you going to use setTimeout in purely imperative code without screwing up your flow?
What does "convert to binary" mean?
Oh I should have said “count binary” or something to that effect. basically write a script that counts binary and convert numbers to binary. 
Yeah, so without using promise the code below setTimeout will run right after registering the setTimeout callback in the event loop. But if we use promise, it will stop the execution of the funtion right? 
Yeah exactly
Cool, thanks! 
they are still writable under strict mode, furthermore, strict mode is opted-in the the current script, it won't affect others.
Hi /u/scienceram, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Like control flow?
Yes. 
I think visual studio paid edition can do this. Otherwise, idk
Thought that said Pornhub for a second... I need sleep
Hi /u/Nishchit14, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Criticalbarny1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/amazingrhona, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/YourTechBud, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/the_vico, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kachnitel, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/shpark1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/IAmNotARedditUser, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Same..
Hi /u/Tontonsb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Guys! I have had the mythical thing called sleep. And I love read pornhub. Unsure thus is because I'm a lewd person. Or its just a name that you are bound to read wrongly. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/googleassistantdev] [I used Google Actions to keep track of my coffee consumption](https://www.reddit.com/r/GoogleAssistantDev/comments/b5ax9q/i_used_google_actions_to_keep_track_of_my_coffee/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Means it’ll move even more slowly?
I believe it's built with Ember
Order really doesn't impact functionality, unless you are talking about using very specific selectors. https://codepen.io/anon/pen/zbbaGz
&gt; Might not want to release your Source Maps to prod I'm curious about this one, is the concern about security? Or protecting IP? Or limiting bandwidth use?
I get that this is an ad, but why take away all the fun and experience of setting up a websocket infrastructure? Don't do that if you never had, you will learn a lot.
Hi /u/ssmihailovitch, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/flyguy_cali, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
... what would you use this for? 
it's kind of difficult for me to believe that i've been writing code for about 35 years, and have always done this with an if. got a quick one for rolling around when going backwards? 
....reality is often disappointing :(
airbnb rules forbid anything that isn't obvious what it does at first glance. 
VS Code has had this for a really long time now too. However, it generally doesn't seem to work. I suspect same in Chrome, as they are probably implemented exactly the same way. 
I came here to find the comment that I was certain would be here.
\`className\` is a string, right? Then \` \[className\]\[0\]\` is also a string, and isn't callable. I doubt it is good practice, but in node you could perhaps go \`\`\` let user = new global\[className\]() \`\`\`
And no link!
TSLint is being phased out. I think you should consider ESLint instead.
How does one get started with it?
This is helpful. Can anyone recommend any other good resources (like this one) that focus more on the process and strategies and patterns for solving these kind of problems instead of specific solutions to specific problems? I'm thinking, "You're being asked to count something: is it a frequency? If so, here are the options you should think about. Is it a sum? Then this. Are you being asked to partition items into multiple groups? Then this..."
Any open source alternatives to this?
You look online and find a tutorial on how to implement socket.io. You will need to install Node.js and Express, set up the Express server, add the socket.io code in the same file as the Express code, and finally connect the client to the server. Whew, all of that just to set up! ^ This is going a long way to try to make easy things sound difficult. 
Google is your best friend. Google for another game tutorial that uses web sockets or just Google web sockets and you'll see some good examples.
Have you considered using google maps "InfoWindow"? [https://developers.google.com/maps/documentation/javascript/examples/infowindow-simple](https://developers.google.com/maps/documentation/javascript/examples/infowindow-simple) &amp;#x200B; It's a more built-in way of showing additional information related to a Marker.
I sincerely doubt it works as you think. I'll check when I'm at a computer again, but what you should do is put the classes together in an object keyed by their names. Then you can look up the class / constructor by the name (string) of the class. 
I think more interesting is the document that explains why certain names have been ruled out: https://github.com/tc39/proposal-global/blob/master/NAMING.md
Hi /u/yoWaduppp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You also need a lot of cables, a computer, a keyboard, and then even buy a screen. In order not to fuck up your spine, you'll need a chair and a table to rest the screen on. Don't forget that you also need a mouse! You'll then need to memorize the placement of about 50 crucial keys on the keyboard in order to not take forever to type code (but there's actually more than 50 of them -- brrr!), and only then you'll be able to start coding. Now add the overhead of learning to use a textual editor... And don't let them fool you! There's an additional hidden cost here: you need to download the editor firstly, but to download it, you need to learn to use a browser! To make the matters worse, you'll need to choose a browser as well.
Hi /u/unadlib, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
For the very basic use-case for the sake of learning the basics of something new, it's not that different from anything asynchronous. How do you react to the fact that user clicked with a mouse? You attach an event called "click" and pass in a function which will run when it happens. The function is given an "even" argument that contains details about the click (eg. coordinates of the click). Now you just have a different source of events -- the network. Follow any tutorial for sending a simple message via web sockets (it's *really* easy, unlike the article's introduction tries to make it seem). Receiving events from the other player is just like receiving the mouse events, except you're also in charge of dispatching them. You're also in charge of deciding what is payload of the event (instead of mouse coordinates, maybe it's the number rolled on the opponent's dice).
Chill, bro.
If you make a JavaScript object with the ID of the location as the key and the value as whatever info you want you could get the value by making a function that takes the ID of whatever you clicked as a variable and then fill the info box with the relevant info from the object. Something like: function(“click”, function(event) { infoBox.textContent = jsObject[event.target.id]; displayInfo()}) This assumes you’ve already got a function for displaying the info box called “displayInfo” somewhere in your code, you’ve set a variable for the info box as infoBox = document.getElementById(“info-box”), and your object is named jsObject, but you can change any of the names to whatever you want. You’ll also need to add this as an onClick event to your markers which should be simple enough (marker.onclick = function from above). I’m pretty sure this will work, and I apologize for the awful formatting; I’m writing this on mobile.
"globalThis" sorta refers to the fact that `this` equals the global object if your sloppy mode shit code uses `this` without being bound to anything (e.g. when you call a constructor function without `new`). I'm not a fan of trivia-based naming. New programmers won't make that connection. Modules and classes are always in strict mode. You'd get a type error. `this` doesn't default to window/global. Additionally, constructors of classes can't be called without `new` anyways. "globalObject", for example, would require a much shorter explanation. It would be a much better name.
it's exhausting!
I would prefer to call in a custom div with that info, I want to design a whole website rather than make a map with few points in it.
What about unread pornhub? Do you love that?
You can create custom API endpoints using WP as well and you can use those endpoints for your React Native app. Have a look here - https://developer.wordpress.org/rest-api/extending-the-rest-api/adding-custom-endpoints/
If you Google web sockets you will get a lot of different sources and some might be absolute shit. In a programming forum the worst possible response is to tell someone that's asking a legitimate question for proper guidance to "Google it". About as helpful as a stack overflow comment telling someone to Google it. If you don't have a good answer why be passive aggressive to the person that is asking a constructive question especially when that question is relevant to the comment above theirs? 
We should just use `maailmanlaajuinen` and be Finnished with this whole thing.
 [https://github.com/tim-soft/react-particles-webgl](https://github.com/tim-soft/react-particles-webgl#readme) &amp;#x200B; A 2D/3D particle library built with react-three-fiber and webgl It's my first public library so do your worst
Sponsored by pubnub. Lots of SaaS apps these days out out tutorials that require their paid framework. 
Well, you know what they say about when you only have a hammer ... 
&gt; you will need to learn some networking concepts, such as client prediction. The time spent doing all of this is time you could have spent developing your game! That... is... developing your game. That's what development is: learning how things work. Now, there certainly is a case to be made for taking advantage of tools that provide a level of abstraction that frees you from reinventing the wheel. But in this case, I think understanding sockets and client prediction is fundamental to building a multiplayer game.
In their defense, that's probably the best way to promote a paid framework: show people how to solve problems with it.
Disagree. If you want to see any boilerplate stack, and how to set it up, your first course of action should be to google it. Unless it was released literally yesterday, there will be many tutorials to choose from. Yes, there will be bad ones, and you, as a ~~programmer~~ person, need to know, or need to develop how to weed out bad sources of information. 
Nodejs + express + socket.io
For the networking api, socket.io (with node.js) is pretty good. I also recently started using [ws](https://www.npmjs.com/package/ws) and the native javascript websocket object, which are a bit less complicated than socket.io (though you have to do a bit more implementation yourself).
That would only work in JS if your class is declare on global context (window/process), which is no longer favored pattern in JS. 
There is no way this attitude will be sustainable AND create something that's easy to use for future generations. &amp;#x200B;
That was my first thought. There's more irrational numbers than rational ones.
They explain that the globalThis does not refer to the global object in every environment and context, and therefore would be a misnomer.
Hmm.. Why aren't you guys using .webp format? It offers better compression for images when it comes to the web.
The other guy gave a pretty good explanation, all I can add is I recommend `websockets/ws`.
Hey everyone, I have written a new post on D3.js, and it is a follow up from my previous tutorial that I have written. This time round, I am focusing on the general update pattern, as well as the selection.join() feature. Looking forward to hearing some feedback regarding my writing! &amp;#x200B; All the resources (demo, repository, etc) are in article, so feel free to check it out!
I agree. Can we just do language versioning or something?
It doesn't refer to a `this` in strict mode either.
the problem is I can't host WP on firebase
that's why i search an alternative
I've used [socket.io](https://socket.io) a bunch, anybody know of a good P2P solution? I want to cut down latency between clients by establishing connections directly between clients.
it's so stupid. I know standards are trying to converge server-side and client-side JS, although they're languages called "javascript" they never were the same... there's already a global object in JS and it's called window.
This is super cool, you should host the demo on now.sh or something so it's easier to see in action
Doh, have a look at how yarn manages dependencies...
&gt;You'll then need to memorize the placement of about 50 crucial keys on the keyboard in order to not take forever to type code (but there's actually more than 50 of them -- brrr!), and only then you'll be able to start coding. Or just go into management 
Who's being passive aggressive.... he asked how to start using web sockets. I was trying to be helpful. Sorry I'm not gonna spend 20 minutes searching myself for a good example to give him. This isnt stack overflow, this is fucking reddit. Besides, in my opinion googling is a great resource. If you're stupid and just click the first example given, yes you might end up with some shit examples. But if you take a few seconds, read the articles, go to proper programming blogs to read, etc then your gonna find some amazing examples and resources from people that probably aren't gonna be sitting here on reddit replying to comments.
I still remember when all of my packets came by bicycle courier over the tele.
Wat? 
I've said it before, I'll say it again: modernize JavaScript when it's run in a module (a real module, not a simulated Webpack module). ES modules out in the wild are extremely few in number compared to all the other JavaScript in the universe, and will offer almost no difficulty in maintaining compatibility... if the cut-off is established soon. I'm just yelling from the benches here, but I hope someone on the field is listening.
haha, the image of a literal "handshake" made me laugh, which made my boss turn and say "what's funny?" umm.. too much to explain
It's not a post about JS.
Awesome, thank you for the tip! I think you're onto something, will try different parsing options shortly. Also I can't help butt read you username as stupid butt. Sorry. Thanks again!
Hi /u/bursttanalytics, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JuriJurka, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I don't know why this isn't a thing for every language, we version everything else, why don't we do this for the languages themselves.
Should stay in success or error status until you return focus to that tab.
Sure thank you :)
I hate JS!
use c++
What about showing the code?
If find is undefined, array is not an array. If array is undefined and const, the only way that could happen is if array isn't initialized. Do you have some sample code?
fhritp
It's not a fork of Atom; it just happens to use Electron. 
It also happens to look very similar and have the same shortcuts for the command bar/quick open it also happens to have?
First, we tried this already and it doesn’t work. JavaScript engines like Firefox’s have supported versions in the past but later gave up. We does JavaScript 1.6 actually mean? Does it mean the same thing to Firefox as it does to IE? Does this mean that a browser now has to wait until they support the entire next version before attempting to support any of it? That would be disastrous. Versioning doesn’t work here because there are too many different engines and we want features to be available as soon as possible.
&gt; We does JavaScript 1.6 actually mean? Respectfully, I find that's a weak argument. For one, it does have a definition (MDN example): &gt; The corresponding ECMA standard is ECMA-262 Edition 3 and ECMAScript for XML (E4X) with some additional features. So it's not totally a hand-wavey, made-up thing. Even if that's not as strict a definition as we might like, past mistakes or implementation problems are no indicator of whether the idea on the whole is a bad idea or not. "JavaScript 1.6" is over 13 years ago, and there's been more JS written in the 5 years then probably the entire history of JS up until that point (if not 5 years, I'd bet the farm that it holds true for 13 years ago)... just because versioning didn't work in the caveman-era of JS doesn't mean it can't work now. And I'm not even certain it'd solve the problem at hand, and it certainly could produce more trouble than it's worth, but I do think it'd be interesting to explore the concept of semver in the browser with respect to the JS runtime, perhaps tied to the ECMA version: &lt;script version="^9.0"&gt; &lt;/script&gt;
Throwing my stupid game in the ring: https://github.com/delaford/game It uses websockets (ws library) and Vue.js and canvas. It's not much but I hope it can give others something....
I don’t use `this` period. But they aren’t making JS just for me.
STOMP over websockets (that's the protocols) by installing RabbitMQ (the message broker, i.e. the thing everyone connects to) is a really solid way to setup realtime communication that can reach the browser
Have a look at their explainations. They go over why they can’t use globalObject.
I love trains!
&gt; why take away all the fun and experience of setting up a websocket infrastructure uh, so you're not wasting time and energy reinventing the wheel? most people don't have infinite time and would rather focus on the core mechanics of whatever they're building instead of basic infrastructure. how committed are you to this gatekeeping? to you write a new auth scheme when you spin up a new project? do you avoid using aws so you can build your own hosting? I mean, when was the last time you created an IDE from scratch? you should try it sometime, you will learn a lot
With all due respect, that doesn't make it a fork. It also looks a bit like (and shares shortcuts with) Sublime Text, Webstorm, Brackets etc🤷‍♂️
Once a const has a reference, that reference cannot change or become undefined
`const` declarations affect variables, preventing them from being reassigned. It does not cause the values of those variables to become immutable. Arrays, for example, can have their elements modified when assigned to a `const` variable because the variable itself is not being reassigned, only content within the variable's value. So if `array`, declared with `const`, started off as a valid array, it will always be a valid array. What isn't guaranteed is that the contents of the array will remain the same. `const` has no effect over that. const array = [1,2,3] array = [] // Error: const prevents variable reasignment array.find(x =&gt; x === 3).toString() // OK array.pop() // OK: const does not prevent mutations array.find(x =&gt; x === 3).toString() // TypeError: array.find(...) is undefined Note that your error is saying `array.find(...)` is undefined, not the array itself. The example above is failing because the `find()` returned undefined for the 3 that was no longer there and `toString()` was trying to be called from that undefined value.
I can't argue that at all. 
Try putting your code in [https://jsfiddle.net/](https://jsfiddle.net/) or similar website, so people can see it live and help fix.
You've got a few problems here: 1. The backslashes on your 'order' property are causing this thing not to fire 2. You have a row that is not doing anything 3. You have an empty points column that will not sort if it doesn't have data in it 4. It's hard to tell if things are sorting if the values are all the same in each column. Did you copy and paste that code snippet? Try and see if you can figure out what the code is actually doing before you throw it in and run it. Also try and see if you can grok it before posting it to a thread like this. [DataTables](https://datatables.net/) documentation is pretty good, and their forums can be helpful if you get stuck - the guy who maintains it even shows up to answer some questions for the community, and if you get really hosed, he offers direct support for a fee. [Check out this fiddle for a working example of your problem](https://jsfiddle.net/4m1nek65/)
you made a new line every time you won a game of pong?
It's a pretty cool script, but it would be great if we could stop the "I made this thing in X lines of code, but putting as much shit on one line as possible". It would have still been cool if you made it in, I dunno, 44 readable lines.
It's like the \` typeof null == 'object' \` bug that they decided not to fix because it'd break too many sites. Purposefully introducing or keeping things that are bad for the future because they refuse to break things temporarily.
Java != Javascript my friend. Wrong sub. I’ll still take a look at your problem though. Watch for a PM. 
I was just gonna say something like that. Turn off Word Wrap, and you can do it in 1 line!
[Google Cloud Speech to Text API](https://cloud.google.com/speech-to-text/docs/)
appreciate it! &amp;#x200B;
Yes, you are right; thanks. It looks like the issue is with find, not the array. I was confused by the phrasing of the error message because find is defined for arrays, 
Only `top`, specifically? style.replace(/[^\-]\btop\s*:\w+/, "top:176px")
[https://github.com/iktina/speech-recognition-service](https://github.com/iktina/speech-recognition-service)
Javascript interviews aren't javascripty enough?!
p0rnhub multiplayer pogg
\+1 Don't over optimize. This code ain't readable, it's a pain in the butt to debug. Verbose code wins in the end..
That was only used as an example, the rest of the piece has nothing to do with JS -- it's generic programming interview material.
You know what else you could do? Just copy that source code, claim it's yours and call it a day, but what is the point of doing that? I'm not saying you shouldn't offload parts of your work to third party SaaS in a business scenario, but if you're reading that tutorial you're probably trying to learn, not crunching to get your startup rolling. If you're committed to learning, why not learn how exactly websockets work, how to set it up, authenticate clients, manage connections, subscriptions, the pubsub pattern, deployment, scalability, plus a million of other things depending on the stack you choose... but sure, you can just focus on the core mechanics of making that element move across the screen, if that's all you want to learn. Your attitude is how we end up with plaintext passwords.
Congrats! Its nice to see people practicing making things like this. This entire subreddit is filled with people who provide negative feedback to people just exploring what they are capable of. I say nicely done. 
Thanks, I’ll check that out!
This is great work, thank you!
I enjoy using [geojson-vt](https://www.npmjs.com/package/geojson-vt), but it's not what you want when it comes to updating or editing data. It's specific to PostGIS, but are you looking for something along [these lines](https://github.com/mapbox/postgis-vt-util)?
Versioning in other languages and such works - because the developer or publisher has control and can determine what it runs on, and typically has sovereign control within that environment. Someone distributing a Java program will install Java with it, of a specific version, and within the bounds of the JVM the developer is King. And they can assume the JVM will be consistent, and that they can control what version of the JVM they're on. And similar with C or similar - you can decide yourself what assumptions to make when you compile. Pythons the same way; you'll bundle the interpreter in your install. In all these cases, the developer has control because of the implicit contract with "installing a program". Well, except JavaScript. As you're browsing the internet with your JavaScript runtime (whether it's interpreting or JIT compiling or whatever), the consumer has absolute control of the environment. Including the version of the language they're using. And you want to be able to reach as many people as possible, which is exactly why we transpile. But since we're transpiling to the lowest denominator... What happens if the ES standard kills something? Well, all those companies that are compatible with old stuff... Now aren't compatible with the new things. This isn't an issue when developers control what the runtime looks like, but everything breaks down when the runtime is arbitrary.
&gt; This is done with a 0.25 seconds global omni-directional message delivery rate. So 250ms? For multiplayer gaming? This seems like it may work for turn based strategy, but nothing real-time. Unless I am misreading.
Versioning in other languages and such works - because the developer or publisher has control and can determine what it runs on, and typically has sovereign control within that environment. Someone distributing a Java program will install Java with it, of a specific version, and within the bounds of the JVM the developer is King. And they can assume the JVM will be consistent, and that they can control what version of the JVM they're on. And similar with C or similar - you can decide yourself what assumptions to make when you compile. Pythons the same way; you'll bundle the interpreter in your install. In all these cases, the developer has control because of the implicit contract with "installing a program". Well, except JavaScript. As you're browsing the internet with your JavaScript runtime (whether it's interpreting or JIT compiling or whatever), the consumer has absolute control of the environment. Including the version of the language they're using. And you want to be able to reach as many people as possible, which is exactly why we transpile. But since we're transpiling to the lowest denominator... What happens if the ES standard kills something? Well, all those companies that are compatible with old stuff... Now aren't compatible with the new things. This isn't an issue when developers control what the runtime looks like, but everything breaks down when the runtime is arbitrary.
Not sure if this was just a typo here or in your program as well, but you have the semicolon INSIDE the quotes of \` el.style.top = topOverride + "px;" \`, which would cause it not to work.
OH MY...i overlooked that. Definitely a typo. that might explain why it wasn't working. THANK YOU!
thank you! I will check in tomorrow with this.
WebRTC maybe?
Good luck lol. I tried suggesting once that maybe people shouldn’t be so reliant on third party libraries for things that you could easily do yourself with a bit of JS and people jumped down my throat. People would rather pull in 1000 random packages to glue together than actually work to code anything.
Plan carefully before going P2P. If you plan to make something big, server side control is critical to security. Server side connectivity is also useful if your game is competitive in nature to prevent DDoS attacks against other players. P2P works best with games like Stardew Valley where players are constantly interacting with a host's world and have no intention to ruin the connections of their peers. If are making a shooter, P2P can cause a lot of connectivity and security issues (ie, Destiny). Regardless, best of luck! 
Is it possible to win? I feel like the other paddle just automatically centers/hits the ball everytime
The idea is if you know the proper route to learning it then why not bullet a few things just to be helpful. If you understand web sockets then it's not hard to give a basic breakdown. If that's too much then why comment anything at all especially a "Google it" reply?
It's not that Google will result in the worst guidance it's that it's a shitty response on a forum where the entire point is discussion. 
Wasn’t expecting to see Idaho on this sub.
is RabbitMQ good for sending game states at 30 times a second?
Yea 250ms is WAY too slow. You need 20 to 30 times a second.
You're right on the singleton front. Thats what this effectively is, an instance that you're exporting rather than a class that allows users to create instances. Everytime this gets imported somewhere, each import gets the same instance. So if there's any state being maintained in this guy, it'll be shared by all users. If not, well, then it's not really a big deal.
* and 6 million lines of C++
You could make the methods static if there's no state. Essentially the equivalent of module.exports = { foo(){}, bar(){}, } Then there's no instantiation necessary. Otherwise what you have is fine, and yes this is a Singleton.
[https://wiki.openstreetmap.org/wiki/Mapnik](https://wiki.openstreetmap.org/wiki/Mapnik) should do what you want, setting it up is not for the faint of heart though.
I say: Fuck it, more cold golf! It small.. but it could be smaller!!
Looking into GraphQL libraries on the frontend got me thinking along very similar lines a couple of months ago. Especially the idea that the store can be told to track data's freshness, and re-fetch it automatically when needed. Essentially, you're maintaining a local copy of (the relevant parts of) the application database - a copy that automatically stays in sync with the server. And then building all UI logic on top of the local copy. This seems like the obvious direction things will go in from now on. It'll be interesting if this also leads to greater adoption of offline-first, but that can be tricky depending on the application. Not everyone wants to have to handle version conflicts from stale offline data. But at least a read-only mode could be supported that way.
That's really useful, thanks for explaining it!
Awesome! Thank you!
Sweet, thank you!
I did. "globalThis" is still the worse name since it doesn't make any sense for people who'll never see `this` defaulting to "window". This will be yet another of JS' nonsensical warts. Like typeof null equaling "object", this is another thing whose explanation will require a brief history lesson. Well, since I'm not a TC39 contributor, my opinion on this doesn't matter in the slightest.
“You have officially been excommunicated from the sub church of c++. Almighty Code looks down upon you. “
&gt; modernize JavaScript when it's run in a module They sort-of do. Like classes, they are always in strict mode. And there are some additional early error checks. E.g. you can't redeclare a function. So, this whole monkey business of assigning a function expression to a const variable (because you could *theoretically* redeclare a function by accident if you use a dumb editor) is entirely pointless.
Map. Selecting countries on a map 
What's your problem? The documentation page you linked explains exactly how to plot one.
I tried doing the four spaces at the beginning of every line to preserve indentation, but it didn't work. 
There’s going to be an explanation either way. If they named it globalObject, you’d have to explain those exceptions too. I know. No-one paid me any attention either when I expressed concerns over adding “class” syntactic sugar to the language, and now private members using #.
Just released mew versions, please update
69 lines after running through [Prettier](https://prettier.io/).
 It does work, try again. ;)
"If you wish to make an apple pie from scratch, you must first invent the universe" -Carl Sagan
Yeah, maybe state the columns as well. 
You can host it on netlifly I think. Have a look 
Okay, it worked this time :)
It does return, it's just slow. Here, I copy/pasted to a fiddle for you.. https://jsfiddle.net/wg3cqs0b/
See what happens when you optimize for line count? Clearly a sex joke there. I'm not sure what it is, but it's there.
Well done! Ignore the haters
Spam. See users post history.
One line, no comma challenge
Okay, thanks. I guess since it didn't return fast enough the site I'm on thought it was wrong. I'm glad I was right, even if not efficient.
I figure it's helpful for Javascript developers, built with vue.js but appreciate if this isn't the right forum for sharing this. the map and list is built with vue
&gt; If they named it globalObject, you’d have to explain those exceptions too Not really. This distinction isn't important for users of the language. The name as-is makes sense for users. There is nothing to explain except for the very concept of having a global object called "globalObject". &gt; I expressed concerns over adding “class” syntactic sugar to the language Adding classes was a big improvement. Everyone and their dog used different class-like constructs which weren't compatible and which were opaque to static analysis. Adding a standardized declarative way to create classes improved the situation significantly. Now they can be properly analyzed and documented. You get auto-complete and call-tips. Classes from one library aren't any different from classes from another library. Also, the vast majority of users likes them. By the way, having classes does not mean that you have to do everything in an OOP fashion. You can freely mix and match OOP and FP. That's a good thing. It's very convenient.
https://www.reddit.com/wiki/selfpromotion
Hi /u/w3develops, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Set your font size to 0.01, and you can do it in a couple of pixels! 
well done!
Hi /u/buttlicker9001, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/connor11528, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Whoa haha, great quote 
yeah only expressions should count tbh
Flickr has images free to use under CC License. 
The first talk is only for $9.95 Join **4000+ devs** who already watched our lectures. &amp;#x200B; But you have **no lectures**... 
It's very daunting if you keep thinking about those AAA titles, but even you can develop a web page with node.js, and websockets, tell your friends to login with a cool username, and have their dot show up with all the other dots. And they will think *you are so fucking awesome*.
I feel like counting multiple variable declarations/definitions separated by commas as one line is cheating anyway.
As I recall, C# forces _all_ code into a class. In JavaScript, however, that requirement doesn't exist. You'll have to consider whether a class is really needed. In this specific case, if there's no constructor (and I presume no data), then this doesn't sound like the situation for a class. You may be better off with ordinary functions. export const getSomething(ids) { ... } export const getSomethingElse(otherIds) { ... }
Uncle Bob &gt; Code Golf
This is there correct answer OP.
Yes, I use also have to know Python, SQL, and Puppet. I don't recommend being a single language developer.
For job, we usually have a python backend, so some of that. Really dislike python though. Outside of work, I do a little C# for gamedev and php sometimes for personal sites (usually Wordpress). I am interested in Golang, and with that I have have been exploring Hugo for static site generation. Also, would really like to see what I could do with wasm. C and C++ were my primary languages for a long time. For tools and one off projects and tools, the massive tooling, support, and library availability of node/npm is hard to beat.
&gt; score[ball[0] &lt; 0 ? 1 : 0]++, ball = [0, 0, ball[0] &lt; 0 ? -0.016 : 0.016, 0], reactionDistance = -0.5, reactionSpeed = 6 Yea, that's not one line. Using the comma operator instead of semicolons doesn't really change that. Anyhow, you should use requestAnimationFrame instead of setInterval. The way the ball is reflected is buggy. It takes the current up/down direction into account, but the way it does it seems to be flipped. E.g. when the ball is on a downwards path towards you (8 o'clock), and you hit it with the very top of your paddle, you can get a trajectory which is so steep that the ball is going backwards (11 o'clock). Classic Pong just shoots the ball back depending on where the paddle was hit. The ball's previous trajectory is completely ignored.
Applying `airbnb` lint rules, I get 77 lines: const canvas = document.getElementById('canvas'); const ctx = document.getElementById('canvas').getContext('2d'); const paddles = [0, 0]; let ball = [0, 0, -0.016, 0]; const score = [0, 0]; let cursor = 0; let reactionSpeed = 6; let reactionDistance = -0.5; canvas.addEventListener('mousemove', (e) =&gt; { cursor = e.offsetY / 250 - 1; }); ctx.textAlign = 'center'; ctx.font = '50px "Press Start 2P", Arial, sans-serif'; ctx.fillStyle = 'white'; setInterval(() =&gt; { if (Math.abs(ball[0]) &gt;= 1) { score[ball[0] &lt; 0 ? 1 : 0] += 1; ball = [0, 0, ball[0] &lt; 0 ? -0.016 : 0.016, 0]; reactionDistance = -0.5; reactionSpeed = 6; return; } ctx.clearRect(0, 0, 500, 500); if (Math.abs(ball[1]) &gt;= 1) { ball[3] = -ball[3]; } ball[0] += ball[2]; ball[1] += ball[3]; paddles[0] = cursor; if (ball[0] &gt; reactionDistance &amp;&amp; ball[2] &gt; 0) { if (ball[1] &gt; paddles[1] + 10 / 250) { paddles[1] += reactionSpeed / 250; } else if (ball[1] &lt; paddles[1] - 10 / 250) { paddles[1] -= reactionSpeed / 250; } } if (Math.abs(paddles[0]) &gt; 210 / 250) { paddles[0] = paddles[0] / Math.abs(paddles[0]) * 210 / 250; } if (Math.abs(paddles[1]) &gt; 210 / 250) { paddles[1] = paddles[1] / Math.abs(paddles[1]) * 210 / 250; } ctx.fillRect(20, paddles[0] * 250 + 225, 10, 50); ctx.fillRect(470, paddles[1] * 250 + 225, 10, 50); ctx.fillRect(ball[0] * 250 + 245, ball[1] * 250 + 245, 10, 10); ctx.fillText(`${score[0]} : ${score[1]}`, 250, 100); if ( ( ball[0] &gt; -220 / 250 &amp;&amp; ball[0] + ball[2] &lt;= -220 / 250 &amp;&amp; Math.abs(paddles[0] - ball[1] - ball[3] * (-220 / 250 - ball[0]) / ball[2]) &lt;= 29 / 250 ) || ( ball[0] &lt; 220 / 250 &amp;&amp; ball[0] + ball[2] &gt;= 220 / 250 &amp;&amp; Math.abs(paddles[1] - ball[1] - ball[3] * (220 / 250 - ball[0]) / ball[2]) &lt;= 29 / 250 ) ) { const alpha = (ball[0] &lt; 0 ? 1 : -1) * ( 7 / 16 * (Math.atan(ball[3] / -ball[2]) + Math.PI / 2) + 0.004375 * Math.PI * (ball[1] - paddles[ball[0] &lt; 0 ? 0 : 1]) * 500 + 27 / 64 * Math.PI - Math.atan(ball[3] / -ball[2]) + Math.PI * 3 / 8 ); const x = ball[2] * Math.cos(alpha) - ball[3] * Math.sin(alpha); const y = ball[2] * Math.sin(alpha) + ball[3] * Math.cos(alpha); ball[2] = x * 1.02; ball[3] = y * 1.02; reactionSpeed = Math.random() * 4.5 + 1.7; reactionDistance = Math.random() * 0.7 - 1; } }, 1000 / 60); 
Yeah anytime.
Go - not proficient - and looking for another language, probably will be elixir
&gt; Not really. This distinction isn't important for users of the language. Likewise, the usage of globalThis as a name instead of other considered options is not important to me because it will create precisely zero confusion to me in relation to the `this` identifier. &gt; The name as-is makes sense for users. What name? There is no currently available reference to the global this value (as distinct from the global object value) in all environments. It has to be found at runtime, with code that cannot be made to handle all cases. &gt; Adding classes was a big improvement. Everyone and their dog used different class-like constructs... I guess I am neither everyone, nor a dog. I don’t use any form of classes in JS by choice. I don’t use `this` either, if I can help it. Some libraries require it though. Standardized [classes have some issues](https://reactjs.org/docs/hooks-intro.html#classes-confuse-both-people-and-machines) that make my job harder. &gt; Also, the vast majority of users likes them. Gonna need some evidence on that one. Also, if it is indeed true, would you support every policy or development decision supported by the vast majority of users? If you want to mix your programming metaphors, that’s fine with me, although it is the source of my problems with using some libraries. However, if one believes something is inherently limited or broken, the ability to use it with non-broken things would be considered a disadvantage, except perhaps in terms of compatibility with old codebases. You can mix month old vegetables in with fresh ones in a stew, but that won’t make the stew better than using exclusively fresh vegetables.
In addition to JavaScript, I use Ruby, Java, and Python. 
how about writing it in a few hundred line and minify it to one?
C# mostly, and of course some database language, we use both mssql and mysql.
How does it work? Does your crawler search for products as the user hit search or you are crawling and maintaining data beforehand? What's the purpose of this platform?
C#, Powershell, bash, Typescript
&gt; globalThis as a name [...] What name? Gee... I wonder. &gt; Standardized classes have some issues that make my job harder. You can pass around methods in other languages just fine ("closurized tear-offs"). That it doesn't work that way in JS has nothing to do with classes. &gt; Gonna need some evidence on that one. Just check the source of modern libraries and frameworks. &gt; You can mix month old vegetables in with fresh ones It's more like veggies and meat and you're being a vegan.
Php, rust. Looking up to dart because flutter.
Python, Bash and JS daily.
Most programming languages and tools aren't configured for the locale in theory you could mix local identifiers with English keywords ensuring that it is only readable by people that speak both but this would drastically limit future contributions. 
Why is practicing this kind of thing good?
[removed]
Yes. Daily I code in Perl, PHP, and Java in addition to JS. Typescript and Kotlin are also starting to appear in the mix.
There we go! Still a good achievement but it has to be readable!
[https://jsfiddle.net/wLmzh56a/1/](https://jsfiddle.net/wLmzh56a/1/) \~150 lines of (somewhat) readable code, in case anyone else wants to see how it works. Still not sure about the angle calculation though lol..
The example given is, unfortunately, too artificial to correctly judge the situation, but it _could_ be that the problem is not in documenting this but in how you're trying to write the code itself. What are you trying to achieve by having a class and then adding one particular function to only one particular instance?
I guess almost all competent JS programmers also code in a few other languages. 
Why do you assume anyone using Js is working exclusively on web tech?
Okay, to be more specific, I am writing a game. I have a class called "Menu", which all of the menus from the game are derived from. It handles basically all of the general functionality tied to menu's (things like aligning the various elements, handling key events, etc.). For example, when a menu is loaded, there is a generic Setup function that handles a lot of basic functions, and then calls a function (if existing) that is intended to be implemented by specific instances. We'll use OnLoad from example. Every specific "Menu" has very different OnLoad, depending on that menu's functions. Dynamically building option lists, composing parts of the menu, etc. The OnLoad method can also be passed a parameter by providing it to the call to load a menu (which passes it to the Setup function, which passes it to OnLoad). Some menus don't care about any parameters, while others can make use of them (for example, a "Race Select" menu that is passed the specific unit being targeted). The generic "OnLoad" (which does nothing directly) is already documented as part of the class as being abstract. But I want to be able to document specific implementations of "OnLoad" to specify details about the parameters. My code works without issue, and everything is documenting properly with JSDoc except for this, and I just can't figure it out. 
Why is practicing good? Is this what we've become?
What's wrong with you? I asked why is practicing minimizing games like pong into 22 lines worth it.
That poses an interesting question. What is the most lightweight (fewest lines of C++/c) OS + Browser combo able to run this example.
I won't be using it in webpack, but i love the idea of embedding the detection code to the client. I suppose the best of both worlds would be to avoid User-Agent detection on the server, by detecting main client features and serving bundles of them. But deciding which "main" features to detect is easier said than done.
Nice.
It’s not a bug it’s a feature 
JavaScript is Unicode compatible. So, it's language independent. You can actually have this kind of code. function 汽车() { } 汽车.prototype = { 颜色: "红色", 车轮: 4, 增加轮子: function() { this.车轮 += 2; } } var 我的车 = new 汽车(); console.log(我的车.颜色); //"红色" console.log(我的车.车轮); //4 我的车.增加轮子(); console.log(我的车.车轮); //6 And you can mix any character from any language. e.g. Chinese mixed with Russian and Greek. And even Emoji characters.
Ok, a couple of ideas... 1. Just in case it was misunderstood, I didn't mean you might be doing something _wrong_. Your code may work without issue, but what I did mean was you might be doing something in a way that was not the best or most appropriate way of doing it. 2. JSDoc, I insist, has some limitations. In fact, most JS documenting systems have them. This is due to the fact that most documenting systems are opinionated and focused on documenting _certain_ code shapes, but not all. So, yes, JSDoc will probably _not_ support documenting what you have, at least in any consistent way. 3. You could indeed modify a little bit your approach and it could be easier to document but also it might be a better way of doing it. Let's try this: First, to verify I understand your problem, this is what I understood from your explanation: You have a certain component (`Menu`) which has some _base functionality_ and then some customizable behaviours (`OnLoad`). You can pass `OnLoad` at instantiation/set-up time -i.e. as a parameter- or you can assign it a handler later, once you have a specific instance. Now, if not specified or reassigned, there's a _default OnLoad_ handler which is part of the `Menu` and is already documented in it. And then, you want to have a number of different OnLoad Handlers with specific behaviours and you want to document these as well. With your current organization, JSDoc is not correctly documenting them. Ok, so, with all this in mind, I see two different paths you could follow. Which one to choose, depends on your _intention_ with some of this. I see two different ways you could intend to go with this: a. Generic behaviours, or b. One-off specific behaviours. The difference is, if a certain OnLoad behaviour is going to be 100% specific to a menu option or if you're defining behaviours to be reused. In other words, if you want, say, ActionMenu, InfoMenu, OptionMenu, etc (i.e. Generic behaviours, "activates/deactivates an option", "calls an action", "shows an info", etc), which a number of different menus may reuse, or if you want completely specific behaviours, say, StartMenu, ResetMenu, QuitMenu, etc, which will _not_ be shared in any way. If you want generic behaviours, then _probably_ the best idea is to group those somewhere else. Not in the Menu class but also not in each instance. As for _how_ to do that... you could use inheritance, extending the base Menu class, or you could just have a _helper_ class or module that has no state and provides the different behaviours to be plugged into the instance. The first one I think is self-explanatory enough. The second one is just having a, say, MenuBehaviours class with a number of static methods like `MenuBehaviours.ActionMenu`, `MenuBehaviours.OptionMenu`, etc (or just an object, you don't _need_ a class). This approach gives you both an easy way to document all the possible behaviours (and all in one place), but also a better way to organize them in your code. If your behaviours are instance specific, then a different approach is needed, and it's a bit trickier to find the best place for the behaviour. I'm not sure I have all the information needed, but you seemed to suggest that the Menu instance is a member of something else that instantiates it and manages it. If that is so, then that's probably the place to put that behaviour, because it's going to be related to it. I mean this...: If you have a... idk, MainScreen, which has a Menu to which you assign the MainOnLoadBehaviour, and a second ConfigScreen, which has another Menu to which you assign the ConfigOnLoadBehaviour, then this most probably means that the MainOnLoadBehaviour is mostly tied to the MainScreen (i.e. calling stuff in the MainScreen) and the ConfigOnLoadBehaviour is tied and calls stuff in ConfigScreen. (Note that this is where I lack enough information and I'm just using this as an example). Then, if this is so, an appropriate place to put MainOnLoadBehaviour is in MainScreen. Say something like this... class MainScreen { // ... // in the constructor or in some method or whatever... ...() { menu = new Menu(); // or whatever menu.onLoad = MainScreen.menuLoadHandler; } //... menuLoadHandler() { ... } } Now, this can, again, be easily documented. What the `MainScreen.menuLoadHandler` does is actually documented in the documentation for `MainScreen` and it makes sense to do so because, while it is the Menu behaviour, it is tied and coupled to the MainScreen, it's not related to the general behaviour of _a_ menu, but to _the Menu in MainScreen_. And it also makes sense from the POV of organizing your code because of this same reason. --- I want to insist one last time that while the above may not be exactly your case, because of the lack of details, it is meant as an example to explain that, maybe, placing your code for those behaviours in a different place can help you both with the original documentation problem _and_ with a better organization of the code itself -but without implying the original code isn't valid or working correctly, of course.
https://hackernoon.com/implementing-a-websocket-server-with-node-js-d9b78ec5ffa8 - here's a tutorial.
How does the search work? 
It's the worst practice ever.
I regularly code in JS, PHP, SQL, C#, with Python and [VB.Net](https://VB.Net) touched reasonably regularly (horrible legacy project the last one). However I've been coding for 30 years and I worked out a few years ago in that time I've written code for money in excess of two dozen languages over that period - to some extent depending on how you count and what your definition of a distinct language is, but the list looks something like - Fortran, COBOL, C, Lisp, NATURAL, DL/1, JCL, EasyTrieve, Pascal, Delphi, Prolog, C++, VB6, ObjC, C#, Java, VB.net , Cold Fusion, JS, PHP, Python, Processing, SQL, T-SQL, PL-SQL, Perl, AWK, dBase, FoxPro, Lua, 8086 Assembly. Plus a few more I've not been paid for, like F#. And I'm itching to try Rust and a couple of others at the moment. Don't get hung up over programming languages - languages are something as a programmer your should pick up and use as you need them. It's a bit zen-like in that you're only enlightened when you see past the language the code is written in :-D
Oh wow, that's stupid... [https://github.com/sanjaytwisk/nextjs-ts](https://github.com/sanjaytwisk/nextjs-ts)
That's the point. next.js / typescript has no boilerplate code. Literally zero. /s
Follow this long enough and you probably end up with something like Z80 on a ZX81 or ZX Spectrum. This could probably be knocked up inside of a few kilobytes. Maybe several hundreds lines, but they'd be assembler.
 As I understood you're trying to decide whether or not to deliver JavaScript-enhanced content. The best implementations degrade cleanly, so that the site still operates without JavaScript. I also assume that you mean server-side detection, rather than using the &lt; noscript &gt; element for an unexplained reason. There is not a good way to perform server-side JavaScript detection. As an alternative it is possible to set a cookie using JavaScript, and then test for that cookie using server-side scripting upon subsequent page views. However this would not be suitable for deciding what content to deliver as it would not be able to distinguish visitors without the cookie from new visitors or visitors who are blocking cookies.
There is more to programming than web development. JavaScript is popular, but so is Python and Java. I suggest you learn languages that are used in application areas you want to pursue in your career. For example, if you like statistics or data analytics, then learning R or Python is a good idea. If block chain programming is your goal, learn C++. Mobile development? Then learn Swift (Apple) or Java (Android). Even JavaScript has Node.js which lets you write standalone programs with JavaScript syntax. So decide what you want to learn next and start exploring the language(s). This field is a never-ending cycle of learning. That's one thing I love about it.
Check out the [noscript](https://www.w3schools.com/tags/tag_noscript.asp) tag.
Thanks for your time, I really appreciate the response. Sorry if my previous message sounded a bit defensive. I've just been struggling with trying to get this documented, and it's been making me frustrated. You misunderstood a little bit about the structure, so I'll try to explain in more detail. Some of this is probably more information than necessary, so I'm sorry if it's overly long. (First off, this is a canvas app using PIXI, just so we know we're not talking about anything to do with DOM) My project is structured like this: src GameObject Graphics UI Components menuheader.js menufooter.js Menus titlescreen.js raceselect.js And so on. As for the JS, each folder is basically a namespace on top of the previous object. So e.g. Game is a namespace that has nested namespaces of Graphic, GameObject, and UI. UI has nested namespaces of Components and Menus. Each member of the Components namespace is a class that defines some sort of UI component. Members of the menu namespace are instances of a BaseMenu with some extended, specific functionality. The parts that are extended are documented in BaseMenu as abstract (jsdoc @abstract), as there are a handful of them (onLoad, previewData, etc.) So, rather than "OnLoad" being passed at creation, it's defined like this (basically what one of the menu files looks like): let baseMenu = require("./basemenu.js") let raceSelect = new baseMenu(); raceSelect.onLoad = function(){ Attach(new UI.Components.Header(paramlist)); ... ... } ... ... module.exports = raceSelect Your examples of the generic behavior "(i.e. Generic behaviours, "activates/deactivates an option", "calls an action", "shows an info", etc)," are behaviors either covered by the base menu class, or by something in the Components namespace. When I mention a "Menu", it's a discrete object with a unique set of components. While navigation of the menu is primarily always the same (and thus handled in the BaseMenu class), the actual functionality and look (components) become too specific to be handled by the base class. The "UI" namespace, along with having the nested namespaces of Components and Menus, also has some functionality. Handling how menus are loaded &amp; unloaded, handling some other UI stuff not related to menus (maps, etc.), scaling and resizing, so on. It really doesn't do much to manage themselves. I think, from looking at what you're talking about with "Screens", that what you are thinking of as "Screens" I am thinking of as "Menus". The difference is I haven't made each menu itself a class (sub classing from the BaseMenu), but just a static object of type BaseClass that I directly assign the extended functionality to. I tested before having each Menu be its own class, but it feels counter-intuitive - I feel like a class should be (or have the potential to be) reused. It makes more sense in my mind that e.g. "Title Menu" is just a specific instance of Menu, and that "Race Select" is just yet another instance. JSDoc will document it that way though, even if I dislike those getting listed under "Classes" (though I am sure I can modify the template).
I used to program in VB, then .Net (C# and VB.net), then also Python and I dabbled in Clojure for a bit. But I hated it. I specialise in JS/HTML/CSS. I'm a front-end developer and I'd rather be a specialist at that than a novice at many other languages. And I don't have the time/space of mind to be a master at multiple programming languages. I'd rather learn another human language. I'm fluent in 2 languages and learning a 3rd (Spanish) which will serve me very well in the rest of my life :)
Is that the full recursive function or just the confusing part? Try understanding the reduce function with a simplier example. W3schools and Mozilla have more bite sized examples to work with.
Ok. You have this, which I guess is a module. let baseMenu = require("./basemenu.js") let raceSelect = new baseMenu(); raceSelect.onLoad = function(){ Attach(new UI.Components.Header(paramlist)); ... ... } ... ... module.exports = raceSelect Again, this is a module exporting `raceSelect`. `raceSelect` is, efectively, _extending_ `baseMenu`. But what you have here is, in a way, two different things. On the one hand you have a module `raceSelect` that _extends_ `baseMenu` on the other you have the construction of the one unique instance of `raceSelect` you need. Going back you your original explanation, you're trying to document `onLoad` as part of the instance and this JSDoc does not support/understand. Ok. Then again, you could write the above just as: let baseMenu = require("./basemenu.js"); function onLoad() { Attach(new UI.Components.Header(paramlist)); // ... } let raceSelect = new baseMenu(); raceSelect.onLoad = onLoad; module.exports = raceSelect; The difference is small. But it does reflect something: first you define the behaviour contained in this as a module, then you build the final product of the module (`raceSelect`) and export it. This is also more easily documented, as you should be able to document it as `@module raceSelect` and then the `onLoad` function will get documented as `raceSelect:onLoad`.
That's the full thing. Still it feels very overwhelming.
🤯 Wouldn't like to debug that!! 😂
Add your warning as part of the normal page markup and use javascript to switch its display property to none. 
You know why
This is literally the way humans figure out how to act and develop moral structures. I think there are more reasons to build things than "I want money," or "this is the fastest way to do x." 
I don't see any recursion here.
Your missing the actual function, flattenDeleteById. An example of your data object would be helpful as well. &amp;#x200B;
Didn't know that. Thanks for the suggestion :)
Good tutorial @ [https://www.sitepoint.com/recursion-functional-javascript/](https://www.sitepoint.com/recursion-functional-javascript/)
Edited, forgot the top line
Not moving the label though. Thats what I need to do.
Hi, I added the data object, and the missing line
Me neither. Ugh...
Giggity
Turn your computer off and imagine it and you can do it in 0 bytes, like we used to do _**BACK IN THE GODDAMN DAY**_
I mean, you could use that logic to justify practicing anything. Murder, arson, child abuse... No, not everything needs to be practiced. Try reading his comment correctly.
It crawls and the data is put in a db. Then the items’s features are compared and I put them in a graphdb for the relationship. The purpose is just to find equivalent products. When I went to buy a car, I had no idea what other cars were in the same categories and the salesman saw my bluff when I said I was considering another model from another make. I thought it could be nice to have something that gives you that.
I am using elasticsearch. 
To understand recursion, you must first understand recursion
You're missing wherever the statement is that calls this function. You have the function definition, and the statement of the data it's acting upon, but you don't have the line that likely says something like `flattenDeleteById(data, [something])` which implicitly sets 'parent' to `null`. From there you can follow the code, assuming you know or can look up `reduce`, `Object.assign` and so on.
You're missing wherever the statement is that calls this function. You have the function definition, and the statement of the data it's acting upon, but you don't have the line that likely says something like `flattenDeleteById(data, `[some ID]`)` which implicitly sets 'parent' to `null`. From there you can follow the code. The line o.children = flattenDeleteById(item.children, id, newArray) Is where this function becomes recursive, as it's now calling `flattenDeleteById` with a subset of the data rather than `data` itself. As the program flow goes further down the tree, further statements call this function again with smaller and smaller subsets until the end condition (which I can't really see in this case; I assume `data` being null degenerates gracefully with `data.reduce` but someone else can figure this out.) Make sense?
&gt; Sponsored by Pornhub damnit /u/mcshadys now I'm doing it too
You're using AWS and it took you 2 months?
If you want to hear him singing it: https://www.youtube.com/watch?v=zSgiXGELjbc
That's quite a complex example to try and figure recursion from, it might be better if you simplify it right down to just the recursive part. export function visitChildren(data) { data.forEach(dataObject =&gt; { console.log('visiting dataObject with id:', dataObject.id) console.log('it has', dataObject.children.length, 'children') visitChildren(dataObject.children) }) } That function will visiting each of the nodes and children in the exact same way as the yours- the stuff I skipped are the parts that take care of returning the data and deleting things.
I find nothing convenient about classes. I used to use prototypal classes, then ECMAScript 2015 classes. Now I use none. I just use objects. If I need more than one, I create an object factory. Similarly, I no longer use "this", so having "globalThis" is not attractive to me. I've gone completely functional with the Composi framework: https://composi.github.io. Composi gives me functional components, no class components, and robust state management in just 3KB. No need for binding "this" in inline events--components are functional. Instead the view communicates with the state management system by sending messages (actions). The functional components have life cycle hooks at the element level, instead of at the component level like React. This means a life cycle hook always has a reference to the element it is registered on. No need for "this" or createRef like React. Composi was inspired by the Elm Architecture: https://guide.elm-lang.org/architecture/. Elm is a functional language, so no classes or "this". Like the "smoosh" controversy, this appears another attempt by a committee that is disconnected from the people they're supposed to represent trying to force a ridiculous name choice on us. I'd prefer practically any name over "globalThis". But personally, if it ever becomes a shipping feature I will never use it because I see no need to.
So far, for me. No. It depends on the job and your team, but one objective thing is that typescript will always be less concise than JavaScript.
Note that `install.audit` is actually `--install.audit`. It's a special syntax that basically means "whenever the `install` command is called, add the `--audit` flag". You can use that for any flag, and the `install` part isn't required - `--audit true` should also work (it will be ignored on commands that don't support it). Overall the best yarnrc flag imo is `yarn-path`, that you can use to enforce a Yarn version across your team. You might actually use it without being aware if you use the [`yarn policies set-version`](https://yarnpkg.com/en/docs/cli/policies#toc-policies-set-version) command, which uses it under the hood. As for `check-files`, it's not a super useful option - it will just cause Yarn to trigger a reinstall if it detects that a file got removed somewhere inside the `node_modules` (otherwise it will bailout). 
One technique is to add a \`no-js\` class to the &lt;html&gt; tag and then remove it with inline js. You can the create a some content but only show it (using css) if the \`no-js\` class is present
Best? Maybe. Better? Absolutely. JavaScript has type coercion gotchas, agnostic data containers, no built in undefined/null checks, etc. which makes your code less safe and harder to reason about. Typescript goes a long way towards alleviating these (and other) issues. I started using Typescript as a result of learning Haskell and experiencing the benefit of thinking in types. There’s less mental clutter and it improves the readability of your code immensely. 
Dart / Flutter - think demand will be massive in a couple of years and its a really nice language / framework to use.
I operate a gypsum flooring pump with JS. Here’s the proof if OP needs it. 
Yes, type systems are a good thing. 
For quick and dirty, throw-away code, no. For any sort of sane project with over 100 lines of code, definitely yes. The only possible criticism is that Typescript is more verbose, but for any serious developer sanity should be more important than a few saved keystrokes. 
This will be awesome for my projects! Thank You!
If you're writing a small project for yourself, no. Having types gets more valuable the less familiar you are with the code. Since TS is gradual it's more like a heavyweight linter (more effort, more bugs caught) than a set of guarantees but I find it more useful than not for professional projects. The main thing I dislike about it is that people revert to Java-ish OOP when working with TS and the result is awful APIs.
Can you elaborate why is it less concise? 
Me too with the VB.net. Old legacy monolith that I maintain. Then SQL, .NET, bash and a bit of Python and PHP. 
Hi /u/prdmagnet, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/StackDev_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/plexom, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vospit, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rcx918, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jsloverr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/philsaid, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/foe_to, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tortikolis, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/OdisJabronis, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dicebecast, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lysyfacet, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ElJefeSupremo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dobkin-1970, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lucksp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
 save-prefix "" So tired of builds breaking due to "minor" version increments in packages.
//Count all humans that ever existed starting with Adam var totalHumans = 0; countDescendants(Adam); function countDescendants(dad) { totalHumans++; forEach(dad.children as child) { countDescendants(child); } } This will recursively count every human. What happens when it counts a person that never had children?
FYI, here's the talk Abstract In 2014, I made a strong argument that TypeScript was destined to be irrelevant and that my company should not use it in any of our projects. Fast forward to 2018 and we use TypeScript for, like, everything we build at Progress, and I am no longer a source of trustworthy information. In this talk we’ll discuss why I was wrong. Specifically, we’ll take a look at why TypeScript succeeded where other compile-to-JavaScript languages like CoffeeScript and Dart have languished, and what that means for future of the technology. Come to learn the basics of TypeScript, and whether TypeScript is a good fit for your next project.
To be honest I think APIs are as significant as language, if not more so. Coding a C utility on Windows and Unix are completely different animals, despite being the same language.
It's a good idea, mate. Give me the repository if you are pushing it to GitHub. Connect with me on Twitter: https://twitter.com/RazaJChauhan?s=09
Hi /u/samesJeabrook, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If you use Redux, then no. The idiomatic structure of Redux, where actions are identified by strings and have a dynamic payload, then typescript offers very little benefit in that situation
Saving for later!
 let canvas = document.getElementById('canvas'), ctx = document.getElementById('canvas').getContext('2d'), paddles = [0, 0], ball = [0, 0, -0.016, 0], score = [0, 0], cursor = 0, reactionSpeed = 6, reactionDistance = -0.5; canvas.addEventListener('mousemove', e =&gt; { cursor = e.offsetY / 250 - 1 }); ctx.textAlign = 'center', ctx.font = '50px "Press Start 2P", Arial, sans-serif', ctx.fillStyle = 'white'; setInterval(() =&gt; { if (Math.abs(ball[0]) &gt;= 1) return (() =&gt; { score[ball[0] &lt; 0 ? 1 : 0]++, ball = [0, 0, ball[0] &lt; 0 ? -0.016 : 0.016, 0], reactionDistance = -0.5, reactionSpeed = 6 })(); ctx.clearRect(0, 0, 500, 500); if (Math.abs(ball[1]) &gt;= 1) ball[3] = -ball[3]; ball[0] += ball[2], ball[1] += ball[3], paddles[0] = cursor; if (ball[0] &gt; reactionDistance &amp;&amp; ball[2] &gt; 0) paddles[1] += ball[1] &gt; paddles[1] + 10/250 ? reactionSpeed/250 : ball[1] &lt; paddles[1] - 10/250 ? -reactionSpeed/250 : 0; if (Math.abs(paddles[0]) &gt; 210/250) paddles[0] = paddles[0] / Math.abs(paddles[0]) * 210/250; if (Math.abs(paddles[1]) &gt; 210/250) paddles[1] = paddles[1] / Math.abs(paddles[1]) * 210/250; ctx.fillRect(20, paddles[0] * 250 + 225, 10, 50); ctx.fillRect(470, paddles[1] * 250 + 225, 10, 50); ctx.fillRect(ball[0] * 250 + 245, ball[1] * 250 + 245, 10, 10); ctx.fillText(score[0] + ' : ' + score[1], 250, 100); if ((ball[0] &gt; -220/250 &amp;&amp; ball[0] + ball[2] &lt;= -220/250 &amp;&amp; Math.abs(paddles[0] - ball[1] - ball[3] * (-220/250 - ball[0]) / ball[2]) &lt;= 29/250) || (ball[0] &lt; 220/250 &amp;&amp; ball[0] + ball[2] &gt;= 220/250 &amp;&amp; Math.abs(paddles[1] - ball[1] - ball[3] * (220/250 - ball[0]) / ball[2]) &lt;= 29/250)) { let alpha = (ball[0] &lt; 0 ? 1 : -1) * (7/16 * (Math.atan(ball[3] / -ball[2]) + Math.PI / 2) + 0.004375 * Math.PI * (ball[1] - paddles[ball[0] &lt; 0 ? 0 : 1]) * 500 + 27/64 * Math.PI - Math.atan(ball[3] / -ball[2]) + Math.PI * 3/8); let x = ball[2] * Math.cos(alpha) - ball[3] * Math.sin(alpha), y = ball[2] * Math.sin(alpha) + ball[3] * Math.cos(alpha); ball[2] = x * 1.02, ball[3] = y * 1.02, reactionSpeed = Math.random() * 4.5 + 1.7, reactionDistance = Math.random() * 0.7 - 1; }}, 1000/60); 1 line
 let canvas = document.getElementById('canvas'), ctx = document.getElementById('canvas').getContext('2d'), paddles = [0, 0], ball = [0, 0, -0.016, 0], score = [0, 0], cursor = 0, reactionSpeed = 6, reactionDistance = -0.5; canvas.addEventListener('mousemove', e =&gt; { cursor = e.offsetY / 250 - 1 }); ctx.textAlign = 'center', ctx.font = '50px "Press Start 2P", Arial, sans-serif', ctx.fillStyle = 'white'; setInterval(() =&gt; { if (Math.abs(ball[0]) &gt;= 1) return (() =&gt; { score[ball[0] &lt; 0 ? 1 : 0]++, ball = [0, 0, ball[0] &lt; 0 ? -0.016 : 0.016, 0], reactionDistance = -0.5, reactionSpeed = 6 })(); ctx.clearRect(0, 0, 500, 500); if (Math.abs(ball[1]) &gt;= 1) ball[3] = -ball[3]; ball[0] += ball[2], ball[1] += ball[3], paddles[0] = cursor; if (ball[0] &gt; reactionDistance &amp;&amp; ball[2] &gt; 0) paddles[1] += ball[1] &gt; paddles[1] + 10/250 ? reactionSpeed/250 : ball[1] &lt; paddles[1] - 10/250 ? -reactionSpeed/250 : 0; if (Math.abs(paddles[0]) &gt; 210/250) paddles[0] = paddles[0] / Math.abs(paddles[0]) * 210/250; if (Math.abs(paddles[1]) &gt; 210/250) paddles[1] = paddles[1] / Math.abs(paddles[1]) * 210/250; ctx.fillRect(20, paddles[0] * 250 + 225, 10, 50); ctx.fillRect(470, paddles[1] * 250 + 225, 10, 50); ctx.fillRect(ball[0] * 250 + 245, ball[1] * 250 + 245, 10, 10); ctx.fillText(score[0] + ' : ' + score[1], 250, 100); if ((ball[0] &gt; -220/250 &amp;&amp; ball[0] + ball[2] &lt;= -220/250 &amp;&amp; Math.abs(paddles[0] - ball[1] - ball[3] * (-220/250 - ball[0]) / ball[2]) &lt;= 29/250) || (ball[0] &lt; 220/250 &amp;&amp; ball[0] + ball[2] &gt;= 220/250 &amp;&amp; Math.abs(paddles[1] - ball[1] - ball[3] * (220/250 - ball[0]) / ball[2]) &lt;= 29/250)) { let alpha = (ball[0] &lt; 0 ? 1 : -1) * (7/16 * (Math.atan(ball[3] / -ball[2]) + Math.PI / 2) + 0.004375 * Math.PI * (ball[1] - paddles[ball[0] &lt; 0 ? 0 : 1]) * 500 + 27/64 * Math.PI - Math.atan(ball[3] / -ball[2]) + Math.PI * 3/8); let x = ball[2] * Math.cos(alpha) - ball[3] * Math.sin(alpha), y = ball[2] * Math.sin(alpha) + ball[3] * Math.cos(alpha); ball[2] = x * 1.02, ball[3] = y * 1.02, reactionSpeed = Math.random() * 4.5 + 1.7, reactionDistance = Math.random() * 0.7 - 1; }}, 1000/60); 1 line
Depends on the project, I don't think that there is any reason to run to use Typescript as there is still a lot of issues working with libs such as Vue and TS. For a "hardened" production codebase, then I think there is a good use case; but not for MVPs or basic sites and apps that will be subject to big changes.
Hi /u/random_____boi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/prdmagnet, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; If you're a developer, I bet you're a little bit like me, you have an internal barometer that can sense how in-control the codebase is at any one time. I feel a sense of dread as we start to pile on features if I'm feeling that the current patterns are not able to sustain the addition of more features without causing serious deterioration of the overall quality of the code. On the flip-side, I also feel a huge sense of relief when I refactor something that was starting to slip into disorder and then manage to create the right abstraction that lets us reign it in. Doing this can be downright euphoric. This paragraph in particular describes me so well.
If you worked on any legacy web app javascript... the problem is the framework/plugins. Which typescript doesnt solve. 
As your manager I would tell you your JS is unmaintainable and to stop trying to be "clever" and instead writing simple, easy to understand code.
That's what Java does, to some extent, with things like [this](https://jcp.org/en/jsr/detail?id=47). It's not a bad idea _per se_ but: 1. It only makes sense to standardize for some specific, general APIs. And these have usually needed a fair number of years to reach both importance and maturity enough to be picked up for standardization. (That is, most JSR come from years of a certain library becoming a _de facto_ standard.) 2. The process and organization involved requires **a lot** more effort, resources, time, stability, and agreement than what the JavaScript community can provide. And so, I don't see this a feasible.
But I'm not just introducing and discussing my open source project, right?
Prettier is life. I don't know how the hell I tracked my opening and closing brackets without it
Dart is a conservative language design so it's down to the libraries for reasons to adopt. Demand will only be massive if there's a lot of network effect going on (e.g. it becomes the UI language for Android or Fuchsia becomes the new Android).
[https://myscreen.tv/](https://myscreen.tv/) The site allows you to share your screen via webrtc, and/or record and download the raw video data from your screen.
&gt; I won't be using it in webpack, but i love the idea of embedding the detection code to the client. I guess this library could be used as an npm script to generate a "detection code bundle" - that way it could be used outside of webpack/more easily be incorporated into other bundlers. As for the best of both worlds comment, I'm personally not sure that doing any user-agent based detection on client side would be any better. For one thing it would add to the bundle size, plus user agent's can be spoofed and so pretty unreliable. Personally, I like the idea of listing all the polyfills you need explicitly, as it's almost like listing your dependencies. It also serves as almost like documentation to understand what features are "approved" to be used inside your application.
I know several languages, and I have used them in the past. I generally don't use them in my current job though (other than sometimes using Less or Sass). 
Check out bracket pair colorizer if you use vscode
Hi /u/AllThingsSmitty, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
 I have done the three courses. I can tell you in my opinion Grider's course is the best. The guy have a gift at explaining complex concepts (as redux). One the things that I consider important, is all the diagrams that him shows, explaining every concept in detail. You are never lost because, every few videos him explains what needs to be done and why to complete the app (and you develop several apps through the course).
I couldn't agree more.
I had the same experience with his course. The only good thing is that I learned to setup a dev environment for react without using create-react-app.
I guess we’ll have to agree to disagree. It’s illustrative that you cannot accept my issues with classes, while at the same time expect others to accept your issues with globalThis.
Looks like it does almost exactly what prettier does?
This is why code golf is measured by number of characters, not lines.
Oh ok. I thought prettier was just an auto formatter and not a full visual aid.
&gt; Similarly, I no longer use "this", so having "globalThis" is not attractive to me. "globalThis" isn't a "this". Defaulting to the window or whatever does not happen in modules or strict mode in general.
**tldr;** * TypeScript compiles into Javascript - it can target ES3-ESNext * Improved IDE support for editors that support Typescript - e.g. autocompletion, code navigation, various documentation hints, etc * Compile time errors / static analysis * Most common competitors are Dart (Google) and Flow (Facebook) - both not as widely used --- As a non TypeScript user, I'm personally still trying to find a convincing argument to use it. The extra tooling and dependency + reliance on Microsoft to continue support what is essentially a new language &amp; syntax just doesn't bring me much joy. I too, like the speaker, find joy in purity of a language without a wrapper ontop of another wrapper ontop of another wrapper - at some point you have to ask yourself whether it's worth that additional dependency. In the case of TypeScript, it seems to me it would only appeal when: * You use an IDE (and use autocompletions, code navigation, etc) * Large, complex code bases (types may help bring cohesion to understanding the business logic and help prevent type errors) * Operate with many developers It kind of frustrates me to see libraries on npm, even the most basic ones, use TypeScript for this reason. A tool should add *significant* value to your application in order for it to be worth it, so in the majority of apps I've worked on it's just not been worth it. I do think that types will eventually become native to Javsacript though - tools like TypeScript are modelling effective ways it can be achieved. So is it worth holding out until then?
&gt; cannot accept my issues with classes You wouldn't use classes either way. What could I possibly accept or not accept here? I also used object factories for a while. It wasn't really any better and it used more resources. You just had to hope that the engine would figure out what you were doing and that it would use hidden classes under the hood (this predates ES6, by the way). If you use classes, you get classes. It doesn't matter that their semantics are defined in terms of prototypes. The engine is stamping out copies as it would with any other class-based language. I'm not sure why some people insist that it's just "syntactic sugar" which doesn't affect anything when it evidently does.
&gt; As a non TypeScript user, I'm personally still trying to find a convincing argument to use it. The extra tooling and dependency + reliance on Microsoft to continue support what is essentially a new language &amp; syntax just doesn't bring me much joy. Well, here's one: [TypeScript is just Javascript](https://vincenttunru.com/TypeScript-vs-Javascript/). _If_ Microsoft ever proves to be unreliable in terms of TypeScript, is relatively straightforward to "migrate" to regular Javascript. The syntax is practically the same, and if you don't also use TypeScript to compile to older versions of Javascript, the output is usually perfectly readable. The primary downside is the extra tooling, as you mention. That said, that issue is getting smaller and smaller, [now that Babel can also strip TypeScript's syntax extensions](https://vincenttunru.com/why-combine-babel-and-typescript/). A lot of tooling you might already use transparently supports TypeScript, e.g. Jest is moving to zero-config TS support. &gt; It kind of frustrates me to see libraries on npm, even the most basic ones, use TypeScript for this reason. This is really baffling, as you hardly notice this as a library user. The TypeScript type definitions do not get shipped to your users, they hardly take up space on your hard drive, and if you use an IDE with TypeScript support (like VSCode), you'll get improved code assistance even if you yourself do not use TypeScript. In other words: libraries supporting TypeScript adds insignificant costs in the worst case, and provides significant value in the best case. Why would you be against that?
$79/mo what do you think I'm made out of?
I think all 3 of your “only appeal” bullets apply to majority of organizations and are easier to build in to the workflow and sell to other stakeholders vs knowledge sharing sessions and proper documentation. 
Hi /u/algodaily, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Ultimately I think it comes down to the benefits of static/dynamic typing, because that's really the core of what Typescript offers over JS. And on it's face, static typing is terrible: it's more work for less benefit. Anyone who tells you they had 500 bugs caused by type issues and then they switched to TypeScript and all their troubles were solved is full of it. Nobody has 500 or even 50 bugs caused by typing issues, and if you somehow did I'd be far more worried about your testing practices than switching you to Typescript. But, as I learned (being a scrappy young Javascript dev who was forced to develop in Java), is that the true value of strong typing doesn't come from preventing typing bugs: it comes from providing meta-information to your tooling which your tooling can then do neat stuff with, like provide auto-suggestions that it otherwise wouldn't be able to. Typescript is still relatively young, and that tooling is still heavily evolving. It's clearly evolved more on some development stacks (eg. Microsoft VS Code) than others. If your stack doesn't give you access to tooling which can use it, then yes, Typescript is largely a solution in search of a problem. But the tooling around it is only going to grow, in all tech stacks, and in the future that tooling alone will give you reason to adopt Typescript.
In my experience, typescript typing is often a impediment to using non-typed libraries since it takes quite a while to type every variable or object (I'm aware you can configure this).
&gt; In the case of TypeScript, it seems to me it would only appeal when: &gt; &gt; You use an IDE (and use autocompletions, code navigation, etc) &gt; Large, complex code bases (types may help bring cohesion to understanding the business logic and help prevent type errors) &gt; Operate with many developers So... most use cases? Sorry I don't mean to sound snarky, but I can think of way more cases where Typescript adds value than cases where it is an unnecessary headache. It *is* just plain old Javascript with extra optional annotations that give great self-documenting power, supercharge your IDE/editor with more info for static analysis, and helps prevent entire classes of bugs. I mean, who isn't using an IDE (including vim &amp; emacs here) to write modern high level code of any significant size? And sure there's a tooling cost, but it's small and anymore almost every JS project has a tooling cost. Even for small one-man projects I find TS valuable, especially when coming back to it months later and there's so much more information readily available in the code's structure and syntax. Once you scale up to many developers and complex systems it becomes an immensely valuable tool. I've worked large projects in both JS and TS, and the power of TS makes it no contest IMO. For all but the most trivial of throwaway projects, I'll reach for Typescript over Javascript ten times out of ten if possible.
&gt;TypeScript succeeded where other compile-to-JavaScript languages like CoffeeScript \[...\] have languished CoffeeScript didn't languish, it was merged into master.
&gt;So if array, declared with `const`, started off as a valid array, it will always be a valid array. const a = []; Object.setPrototypeOf(a, null) `
&gt; I do think that types will eventually become native to Javsacript though - Why though ? Dynamic types are a very intentional part of language design. Python, Lua, R and others chose dynamic types on purpose. Its not like they "didnt get around to static types yet" they left it out on purpose. If you feel like static typing will eventually be a native part of javascript, do you also think whale oil lanterns will replace in-home electricity, horses will eventually be added back to cars, and smokestacks with coal furnaces will make a comeback in ships ? 
its still an array ;) Array.isArray(a) // true
Which of CS' features were added to JS? Arrow functions, for example, aren't something CS came up with.
TS is dynamic/strong instead of dynamic/weak. Type annotations aren't mandatory. &gt; do you also think whale oil lanterns will replace in-home electricity, horses will eventually be added back to cars, and smokestacks with coal furnaces will make a comeback in ships ? Weak types and silently discarding errors isn't what I'd equate with technological progress. If you divide "bananas" by 5, you did something stupid. You probably want to be told about it. You most likely didn't intend to create a NaN value in a roundabout fashion. That's the thing you're so gung-ho about.
IIRC flow has been abandoned n favour of TS
&gt; It kind of frustrates me to see libraries on npm, even the most basic ones, use TypeScript for this reason. A tool should add *significant* value to your application in order for it to be worth it. When I use libraries, I want them to have TS support. In other words, the types in a library help the user, not the library. From one Sponge to another, I suggest you try to use TS, or really any typed language, on a fairly large project.
The only argument against "__global__" is that it's a pattern they used in the past. And... that Python uses that pattern for avoiding collisions with userland stuff... and that's bad!? I think it's great because it looks like garbage you probably don't want to mess with unless you really have to. It's absolutely perfect.
What's the motivation behind using Yarn now that NPM provides lockfiles, checksums, and auditing?
&gt; Which of CS' features were added to JS? bound functions, destructuring, class sugar, default parameters, string interpolation, lexical scoping, splats, exponent operator Coffeescript never made a claim to inventing anything. It was just supposed to be better syntax for JS.
&gt; I'm still not convinced of the benefits over using something like flow. Support. DefinitelyTyped covers so many libraries (&gt; 4000), plus factor in the number of libraries that now ship with types. Even Jest (written by Facebook, the creators of Flow) have migrated to using TypeScript.
Well yes, but actually no.
The primary reasons to use TypeScript, to me, are: 1. If you plan to ever refactor your code, ever. 2. If more than one person touches your code. 3. If you plan on distributing your code as a library and publish updates 4. If you plan to return to your code after a hiatus in which you forget how your code worked. Your concerns seem spurious. Are you really concerned with extra tooling? Do you avoid packers and minifiers and linters for the same reason? Are you aware that TypeScript isn't a new language and simply JavaScript with annotations, and that any valid JS program is also a valid TS program? And that TypeScript is completely open source, with an MIT license, meaning that you are in no way reliant upon Microsoft? I simply don't get the hate for this language. It's done nothing but skyrocket our productivity and eliminate hordes of stupid errors. 
&gt; do you also think whale oil lanterns will replace in-home electricity, horses will eventually be added back to cars, and smokestacks with coal furnaces will make a comeback in ships ? This is possibly the most asinine comparison I've ever seen. Weak typing came first. Strong typing was invented afterwards when people understood that weak typing was prone to error. In your example, Javascript is the whale oil lanterns, horses, and smokestacks with coal furnaces. 
&gt; Coffeescript never made a claim to inventing anything. That's why you listed a bunch of features which CS borrowed from other languages? &gt; lexical scoping Thankfully, scoping in JS isn't like scoping in CS. That would seriously suck. https://donatstudios.com/CoffeeScript-Madness
I already believe in the demon globalThis. Is that good enough?
One doesn't need to type run for tasks.
It sounds a bit circlejerky, but whoever is advocating node and react/Vue as their stack of choice can work almost exclusively in JavaScript. I don't of course because as you said, being that loyal to a single language is a bad idea.
Best thing I did with my yarn file was delete it and use NPM
They considered forming a country a few years back so that the domain name system would be forced to give the JS community the “.js” TLD. The proposal was scrapped due to being out of the scope of the TC39. I think this plan will be similarly abandoned almost immediately.
Java didn't invent a whole lot either, but it was still the template for aspects of JavaScript.
&gt; You wouldn't use classes either way. You must have missed all my references to being forced to use them due to api enforcement by some libraries. After all, it was you who claimed that they are used in “vast majority” of “modern libraries and frameworks”. &gt; You just had to hope that the engine would figure out what you were doing and that it would use hidden classes under the hood Making a lot of assumptions there, buddy. Who said I used object factories or prototypal inheritance?
Thats what the callback functions in `then` are for. If the caller of `topFunction` needs `myData`, it needs to either accept a callback that it can call with `myData` topFunction(callBackToGetMyData); Or more appropriately, use a `then` in a promise returned from of `topFunction`. const dataPromise = topFunction(); dataPromise.then(function (myData) { /* ... */ }); In this case, you simply return the `new Promise` from `topFunction`. function topFunction(){ return new Promise(function (){ // do some stuff such as a web data request console.log(myData) resolve(myData); }); } 
Sounds more like you're struggling to convincing yourself to use a Microsoft product rather than thinking about TypeScript itself.
Nice work! keep up the good work. Well designed and easy to understand the room and interaction with the other player to start the game. Congrats
I meant detecting using javascript code, not using user-agent at all, to precisely avoid that pitfall. I also like the idea of listing polyfills, and however given how polyfill-library works (each polyfill has its own detection code, and there is a dependency tree of polyfills), one has to embed detection code for each top-level chosen polyfill. I'm not sure it will fit all needs, or if some polyfill won't be missing. It should be workable, though.
I just think that having outlived its usefulness isn't quite the same as having been assimilated by or merged into JS. JS did for example copy one specific feature from Dart (for-loop iteration scope), but even that isn't quite enough for claiming that Dart has been a major influence for JS. Things like arrow functions, parameters with default values, etc have been around for ages. As a niche language, CS did very little to further popularize these features. I won't give it any credit for that.
You’re using a script to auto-like girls on Tinder?
1. Speed. Yarn still runs leagues faster on pretty much every project I use it on, compared to npm 1. The installation and lockfile is more reliable. I find myself deleting node_modules far less often with yarn than with npm
Any company of a certain size and age is going to have technology diversity and old crufts laying around waiting for the right time to decommission or upgrade. Flexibility is valuable. A pure JavaScript stack is only realistic for small organizations.
Low effort questions warrant low effort responses though.
&gt;I won't give it any credit for that. Continue being wrong I guess?
Wow, that makes perfect sense. Thanks so much! 
1) no comment 2) it is best to attach event listeners per module as needed and remove when function no longer in play. Also make the event listeners module-specific to account for other event listeners and to prevent same-names. 3) you don’t check after it the function already accepted the argument. You sanitize and check during the input and preventing it from reaching the function of it is not what the function expected. 4) you can write scripts to test some things but personally, I manual QA test my features because I know what they do so I test if it is working as intended and whatever edge case or user stupidly might happen. But you are only 1 mind so it is best to have peer review or somebody else test it. Preferably somebody that knows programming and one person that is a newbie user. 
Plus, yarn workspaces are awesome. They make running a monorepo much easier. Still need lerna for some things, but still very useful.
What was the reason? I'm using yarn in last year and it has only pros over npm.
On autocompletion, whats great is that some packages ship with types included so even using vanilla JS you get completion from the type definition files. Doesn't add safety of course, but improves the developer experience for sure.
You think Dart deserves credit for arrow functions and parameters with default values and, say, Swift deserves credit for string interpolation? They didn't come up with that stuff either.
&gt;I mean, who isn't using an IDE (including vim &amp; emacs here) to write modern high level code of any significant size? I only use lots of `echo "line of code\n" &gt;&gt; main.js` in my workflow.
I'll speak for them...they don't care about Microsoft, they care about it being a thrid party. 
Hi /u/LLCoolioVanillaIceT, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tothetopbaby1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It isn't very *restfull* to know about URL design! Rest is about relations, not hard-coded or client side created links.
Hi /u/DerNalia, this post has been removed. Please just link directly to the project. If you feel it's absolutely necessary to include the twitter link, add it as a comment.
Hi /u/wordswordsyeah, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ujjain, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Grandpa_Willy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/adtechmadness, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It's still a work in progress, but I'm happy with what is there so far. I'm going to be implementing more generators for routes, tests, etc throughout the next couple weeks. &amp;#x200B; Screenshots / other info here: [https://twitter.com/nullvoxpopuli/status/1110590260768067584](https://twitter.com/nullvoxpopuli/status/1110590260768067584)
We had a very bad JS training at work and the teacher said that TS will be dead in a year and is a fad. He thought that types will be introduced in another EcmaScript spec. I had to correct him even on things like people tried to do it in ES4 and it failed and nothing is gonna change...
Why is this tagged (in the site, not here) as _recursion_, the text mentions _recursion_ a number of times, but a recursive solution is never shown or even attempted? 
ok, I made a new post here: [https://www.reddit.com/r/javascript/comments/b5uuht/i\_made\_a\_cli\_tool\_to\_help\_out\_with\_consistency/](https://www.reddit.com/r/javascript/comments/b5uuht/i_made_a_cli_tool_to_help_out_with_consistency/)
&gt; The extra tooling and dependency + reliance on Microsoft to continue support what is essentially a new language &amp; syntax just doesn't bring me much joy. Well, to be fair, the current language is mature enough that if MS drops it, it will still have an active community and projects using it that it won't die out so easily. They could fork it (if MS doesn't release it) and continue there. I don't expect it being dropped and ignored so easily. Many folks like what it offers, so it will remain used. At least until JavaScript gets some of the stuff from this (like getting all the types in external files by having your IDE look it up and JavaScript supporting adding types (regardless of whether it actually does something with it)
Sorry, the title of your post is very awkward, and reads like you actually have a question. Feel free to repost, but please make it obvious what you're posting about. Thanks.
https://trends.google.com/trends/explore?date=all&amp;geo=US&amp;q=%2Fm%2F0hjc5m0,es6 CS introduced a better syntax for front end development, its popularity and usage dropped as the most popular features were supported by browsers in the form of es6. Brendan Eich wrote some articles about CS's popularity and the things it was doing right on his blog: https://brendaneich.com/2011/01/harmony-of-my-dreams/ https://brendaneich.com/2011/05/my-jsconf-us-presentation/
URLs have very little to do with this library. It’s designed so that it can be customized to work with any REST API.
Actually, Python is moving towards static types too. When these languages were invented the popular static type checking tools were very primitive compared to Typescript and Flow. People reacted to the horrible (and mandatory) type systems in Java and C++. The new type systems deserve to be judged on their own merits. Electric cars lost out to ICE for a century but technology has changed and they are making a comeback.
Thank you very much! :)
I guess I disagree with that. They asked how to get started (clearly wanting the comment OP's personal recommendation) after the comment OP said not to skip learning web sockets. Asking how to get started seems like the perfect next reply for someone that is interested in learning more. If I didn't ask questions and stuck to the path I was taking when I was learning software development I'd be screwed right now. I am incredibly grateful toward the people that took the time to outline things for me. 
So, he was comparing it to other compile-to languages and not to JavaScript. If agree that typescript is the best compile-to at least that I've found, although I haven't dived into rust to JavaScript yet.
I love using typescript... type checking for my javascript.
Thanks for the guidance! 
&gt; Why would you be against that? "Hurr durrr, Microsoft" is usually the main reason.
Nice. Reminds me of the rails gem for react
Uppy 1.0 is being prepped for launch on April 25. There's much still to do and we're gonna be writing about that every day, for the next 30 days
I've been coding a react side project in Typescript. My biggest finding is that it makes Redux unusable. Most of the entire store quickly became dedicated to shuffling types around. In the end, I think my work project has a far easier time. In addition, React propTypes are checked at runtime. Typescript types disappear at compile time, so propTypes can potentially catch errors that TS does not (especially when interfacing with third-party libraries using `any`). As a more general note, our work project is hundreds of thousands of lines, but we've never had a type error that TS could have helped with. The closest we've come is tracking down a missing polyfill in IE11, but TS wouldn't have helped with that either.
node, python, java make up my primary stacks. to a lesser extent, kotlin and groovy. i don't have any really new languages to investigate, since the language is possibly the least important part of a solution. 
&gt; CS introduced a better syntax for front end development The syntax is different, but I wouldn't call it better. It's quirkier and has more edge cases. To me, that makes it worse. Well, the syntax is one of the things it did come up with. &gt; https://brendaneich.com/2011/05/my-jsconf-us-presentation/ He joined some CS session there. Of course it makes sense to reference features which are also in CS in that context. He talks about arrow functions (which were in C# a few years earlier) and classes ("class" and "extends" were a reserved keywords since 1997's ES1 and "private", "static", etc since 1998's ES2). In the first blog post, he doesn't really talk much about CS.
Workspaces &gt; Anything NPM offers.
Wow, this is actually really great! It's not overly complicated, uses classes quite naturally, and has incredibly few dependencies! I actually might use that in my next project.
You can always just declare that module to any it all... Then no problems! No intellisense but no compilations issues.
I hope you don’t intend to use this subreddit to promote your as-yet-released work here for the next 30 days. 
Just the first &amp; last post, I thought. Some may find it fun to follow along. Or would you say that’s already going overboard?
the final solution has both an iterative and recursive solution in it
&gt;It kind of frustrates me to see libraries on npm, even the most basic ones, use TypeScript for this reason. How is type safety not a concern for people? Also maybe libraries you've seen are small part of other libraries or someone who has used this library in larger project has written types for it so others don't have to write their own types... &amp;#x200B; This extra tooling gives you so much more confidence in your code, its not for every use case, thats fine. The Microsoft argument is baffling as well, to think that OS community wouldn't just fork their own if enough people had a problem with the direction of the library or choices made. &amp;#x200B; &amp;#x200B;
I haven't got as far as this in my JS learning yet, however I have this bookmarked for when I get there. Thanks. 
I'm really new to coding in general, so I must be out of the loop. But, why is Microsoft-support a bad thing? Wouldn't support from an entrenched / well funded source with tons of talent make a tool more reliable to use? &amp;#x200B;
The final solution is an iterative loop and nothing more.
I pick up languages as needed I guess, I've worked with Java, Apex and currently working on a project that has Rust, C# and Python code though I haven't really had to work with those languages yet, as my role has mostly been front-end. 
&gt; TS is dynamic/strong instead of dynamic/weak. TS is static/weak, not dynamic/strong Python is dynamic/strong. JS is dynamic/weak C is static/weak
&gt; Python is moving towards static types I have seen no evidence of that; it would break many core python concepts. &gt; Electric cars lost out to ICE for a century but technology has changed and they are making a comeback. Buggy whips are never coming back. There are still a lot of dedicated equestrians, but the writing is on the wall. 
And yet, they choose `#` over `private`
there's two versions of the same function in that code snippet, one is iterative, one is recursive.
&gt; Weak typing came first. Strong typing was invented afterwards when people understood that weak typing was prone to error. We arent even talking about weak/strong. We are talking about static/dynamic. You need a primer on this topic perhaps. &gt; Javascript is the whale oil lanterns, [Static typing is like this](https://tellmeboutblog.files.wordpress.com/2017/11/cargocult.png?w=656). No matter how enthusiastic its fans are, its never going to work.
Whoa
It should be `onclick = method` not `onclick = method()` - that would mean you're calling the function rather than simply setting it as the onclick handler. Not that this kind of micro benchmark should have any bearing on anything.
&gt; TS is static/weak, not dynamic/strong It would be if type annotations were mandatory.
&gt; It would be if type annotations were mandatory. you are thinking of optional/mandatory now ? You seriously need to hit a tutorial or something. 
Ah you're right, I'm dumb :/
Certainly, CoffeeScript did have some obviously good features before they were added to JavaScript, but ... I’m so happy that I no longer ever have to read that “I’d rather be coding in Ruby” syntax.
Yea, I'm not quite convinced that it's the best way to do this. Too bad they can't use a leading underscore like Dart does. I think I would be more in favor if they went with the implied `this`. Just "#foo" instead of "this.#foo" would have been a win. Stage **-**1: https://github.com/littledan/proposal-private-shorthand
This made me smile, I really like the illustrations😁
You can flip-flop types in TypeScript. https://en.wikipedia.org/wiki/Type_system#Combining_static_and_dynamic_type_checking
Here how it has been achieved on classic Atari's Pong arcade game: http://www.vbforums.com/showthread.php?634246-RESOLVED-How-did-collision-in-the-original-Pong-happen&amp;p=3920731&amp;viewfull=1#post3920731
\`\`\` createOptionElement = (user) =&gt; { return \`&lt;option value'${user.real\\\_name}'&gt;\`; }; \`\`\` This returns a string. You need it to return JSX. Try the following: &amp;#x200B; \`\`\` createOptionElement = (user) =&gt; { return &lt;option value={user.real\\\_name} /&gt;; }; \`\`\`
The idea that static type checking is going away is just wrong. You and I might not like them. That doesn’t make them obsolete. Millions of people prefer them. With respect to Python adding static typing, it’s right here in the docs: https://docs.python.org/3/library/typing.html 
Well, you're right, now. A couple of hours ago, that code was _not_ there, though.
&gt; the true value of strong typing doesn't come from preventing typing bugs: it comes from providing meta-information to your tooling which your tooling can then do neat stuff with It's also handy for module providers to define valid inputs to their functions. For example, if I create a module `isPalindrome(string)` a type definition saves you when someone passes the number `1001` and complains that it isn't a palindrome. You may say that is so dumb that would never happen, but anyone who has ever published a module on npm can tell you war stories. 
I'm with you here, but I can only upvote once
In a modern implementation, I think I'd just scale the impact on the paddle to (-1, 1) and then multiply it with 0.125 to get a ±1/8 turn. https://en.wikipedia.org/wiki/Turn_(geometry)
It's actually a good thing, since it's likely to just accelerate its overall growth and support. I think it's the people who tend to go big tech = bad, who are making too big a deal of it. It's open source....
Hi /u/vmcilwain, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Neither did JS. What’s your point?
Unnecessary types. It'll always be less concise. After that, typescript has a lot of weird things it "highly recommends" via fucking error messages, that bloat the code, BUT do make the code more bubble wrapped and safe. Does anyone actually think typescript is less verbose than JavaScript? That's like saying the government operates in a simpler matter than a startup. It's an absurd assertion.
Very nice!
I love CSS Tricks. It’s probably one of the best resources for anything CSS. 
I guess I've listened to Hamilton enough. It's time to seek help.
The topic of this branch isn't that hard to follow. Just read it again.
Great little guide! Love it. The use of arrow functions allows for simple returns to keep the map() methods concise. If I didn't know that this behavior was at play, I'd certainly trip myself up attempting to practice and build upon the examples from this guide.
Love the UI. Gonna steal that little lift/gradient thing.
But TypeScript is dynamically typed...
 &gt; Even Jest (written by Facebook, the creators of Flow) have migrated to using TypeScript. Damn. That's wild
Part of it, at least, is that Microsoft did a lot of damage to their reputation in the developer community in the 90s and 00s. Some people just regard their involvement as an indication that things will be proprietary and against standards and are extremely reluctant to engage. I was one of them and only slowly have they begun to re-earn my trust over the last few years. 
&gt; But TypeScript is dynamically typed... What are they teaching kids these days... https://en.wikipedia.org/wiki/TypeScript Go learn the difference between weak/strong, and static/dynamic, and while you are there optional/mandatory typing. 
I just almost never have type safety problems. TypeScript actively slows me down when I code. I’m the opposite of the guy in the original speech. I drove adoption of TS on my team and abandoned it a year later. 
&gt; Millions of people prefer them. [static types] This is true; a lot of I suspect comes from universities teaching java. That said; the languages which have recently undergone explosive growth, python and JS, are both dynamically typed. So despite the conscious preference for static typing, for whatever reason people are going with dynamic languages. There have been numerous attempts at a static language alternative for JS on the web and they have all failed, so far. The biggest regression has been swift over objective C; but that ecosystem is rather centrally controlled by one company and not really open to organic development. &gt; https://docs.python.org/3/library/typing.html Thats not evidence python is transitioning to static types. Optional static typing is real problem for JS with the proliferation of TS, but python seems mostly unaffected so far as I can tell. 
You're welcome!
Thanks. Here's the code if you are interested: [https://github.com/vraa/gauge-generator/blob/89f3cca58b6afc6b68e9e9a452fccaf3997c054c/src/gauge-form.css#L14](https://github.com/vraa/gauge-generator/blob/89f3cca58b6afc6b68e9e9a452fccaf3997c054c/src/gauge-form.css#L14)
[removed]
This was excellent! I loved the song. 
&gt;Optional static typing is real problem for JS Why the resistance to it, if it's optional? You don't have to use it if you don't want to.
I mean you literally can type: let x: any = {}; x.myDynamicProperty = 42; So. It's a dynamic language. &gt; Go learn the difference between weak/strong, and static/dynamic, and while you are there optional/mandatory typing. Right back at you, you condescending prick.
`yarn-offline-mirror` and committing the resulting directory of packages = fast, offline installs. Yarn handles this setup way better than any available approach with `npm` in my opinion. 
ES21 or ES22 will kill TypeScript! 
It's awesome when it works, but I've never been able to get it to work with a significant (work) project. The errors I've gotten are incredibly baffling, and I eventually gave up trying to track them down. And I couldn't find a way to exclude the \`goog\` module system stuff; overall, closure compiler feels targeted to googlers or people using their toolchains.
That sort of defeats the entire purpose of typing! Anything passes through.
&gt; CS did very little to further popularize these features Are you sure about that? In the grand scheme of things, sure. But in the JS-sphere I'd say it was reasonably influential.
Hi /u/SaintsBeatEagles, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I read it again. I still don’t get it. Elaborate. 
How could JS deserve credit for features which were added to JS because JS introduced them or made them popular? Derp. The topic was why you'd give credit to CS for JS features it neither introduced nor popularized. I then listed some run-of-the-mill features which can be also found in other languages as a counter example. To which you replied with that circular nonsense.
The person you’re replying to literally said CS never maid the claim to invent anything, just “better syntax”. You arguing against yourself here.
Cant tell if this is a joke or not. If true then that is really sick
It's the bandaid for the libs that don't provide it. You can always pour time into typing another person's lib, or you can any it the way I indicated.
I asked for CS-specific features which were added to JS. Not things like arrow functions which predate CS. They answered with a list. Adding that CS didn't invent these things does not undo that list. They were having their cake and ate it too.
Learn this now. Trust me. You will learn 20 ways to manipulate arrays and you will always come back to these 3. Of all the things I do as a developer all of these are in the top 5.
An object-oriented language? C++, gives you more knowledge than Java &amp; C#, and not as much as a pain than C. Java and C# are too abstracted. 
This is unfortunately the reality though when the language distribution is built in to the browser. For example, PHP7 releases breaking changes to your application? Not an issue since we can choose our versioning server side and can wait until our codebase is compatible with the newer distribution - ECMA on the other hand needs to be very particular about backwards compatibility(like html, CSS) because the developer doesn't have a choice what distribution to use for their application. &amp;#x200B; In my opinion, being able to pull a specific ECMAscript version in &lt;head&gt; or somewhere in the document would be awesome and would allow the spec to breath a bit more in the future. 
I'll just say two things - Put all pages into a database so if your app has a bug you can process the pages again without scraping again - It's difficult to tell if a page is different. Usually just comparing the html isn't good enough (dates change and sometimes there data like what server sent the content)
More Javascript. 
Node.js
What this guy said. Dig deeper into the language. Practice solving problems using the language.
This
that was soooooooo cute:)
Your scrape could be part of a cron job configured to run at whatever interval you want. Selenium is a good tool for doing the scraping, there are libraries in many languages and it gives a lot of functionality for problems unique to web scraping - waiting for DOM elements to load, etc. Ideally, there’s a date or timestamp somewhere on the page that you can parse to know whether it’s been updated, otherwise you could just compare strings against what you’ve previously scraped. You’ll have to figure out how to parse the relevant data and save it in a database. Your website would then just pull info from the database. 
Dig deeper in css and js. 
Learn react and node. They are a fantastic combo. You can use node for literally anything backend, and react for anything frontend. So much better than regular js
C# seems like a cool language. I hear it's organized and easy to learn. I was thinking about making that my first language tbh but I learned more about what JS could do and decided to go that route instead. Also, I hate riding popularity, so I was turned off from Python. 
querySelectorAll returns a node list (not an array). Try wrapping tr in Array.from() before treating it like an array. 
nice
React, Node, a deeper comprehension of JS, and SQL and NoSQL (MySQL and MongoDB are both popular).
i logged i at the funtion and i was undefined
.
Somebody give this man a couple snare drum hits and a cymbal!
Learn how to write all your CSS-in-JS!
If you’ve just finished a boot camp for JS or a set of tutorials, it might be time to learn typescript. An understand of typing will be helpful in dealing with other languages, and it’s getting more and more popular. If you’ve been doing this for a while, and enjoy programming that works as a function (input-actions-output) and have a good understanding of pass-by-ref &amp; pass-by-value, you can check out Rust. If you love UI and the immediate visual output of CSS, HTML and JS, you can try Swift (or even objective-C) to mess around with UI in iOS and OSX
TypeScript
Typescript will bring the mastery of your javascript to the next level
Js Frameworks, and supporting technologies like node and graphQL, platforms like firebase, compile to Js Langs like typescript
Yeah, yet-another-webm-porn browser, but it was my first foray into building SPAs and using Elm. [https://www.damsela.com/](https://www.damsela.com/) Still working on it. Really hard to find feedback for a porn site. Don't want to post it on my Github, it always looks like spam, and people shy away from talking about porn earnestly. The front-end has been fun to build since Elm lives up to a lot of its hype (not all), but now I'm getting into the stage of the project where it's pretty much all chore work. I have to improve the categorization system if I want it to be useful. I have to work out the cross-platform and mobile device issues. I even have a half-built user authentication system so that I could log in and add videos to my own favorites list, haha. Anyways, drop me a line if you think it's worth polishing this to compete with something like [instantfap.com](https://instantfap.com). Do you like anything about it? 
Anyone writing CSS in JS is going to rekt by an XSS exploit one day.
The examples haven't shown this then. There you need to know a static segment for a collection resource and the library *assumes* that a single resource can be constructed by just adding an ID segment... This is clearly about URL design! 
Are there more security holes than when inserting dynamic URL CSS data? And isn't there a lint rule for that?
[removed]
Yes, it's more verbose. "highly recommends", I think here you're mentioning stuff like nullable to not nullable where it forces to check that the value exists, or when we make a method to validate the data, but where it is called it doesn't understand that. It's not as simple as not using it, nonetheless, it brings quite some value. we made a huge refactor to flat the components properties to benefit from PureComponent.shouldComponentUpdate(). We were using Flow at that time, because of that we found a substantial amount of places where the properties weren't updated to the flat structure. We might have manually tested and found the issues or not, or forget to test some edge cases. Having a typed system did helped a lot in this case. 
I've had great success with [puppeteer](https://github.com/GoogleChrome/puppeteer) to do the actual act of webscraping. What you're likely looking for is a headless browser + API to programmatically pull out elements. `fetch` requests can work for simple sites, but for more complex ones that use JS or other techniques to asynchronously render content you need a proper browser engine to parse, execute the JS, and load additional content. Periodically running the 'fetch' is your best bet for keeping up to date. Pick an interval that makes sense and is 'reasonable': does your University need &lt;10s latency between updates? &lt;10m? Finding that lower limit gives you a guideline for how frequently you need to poll. Some sites pass a hash back inside an `etag` header, which gives you a very cheap option: you can make a `HEAD` request that _should_ return with just the headers, compare the `etag` to the one you previously fetch, and if it has changed, refetch the page. This highly depends on the website you're targeting, so I wouldn't rely on it, but it's a good way to reduce the bandwidth you're consuming. After you run the 'fetch', you probably want to hash whatever content you've pulled out and compare it to a previous hash. It's cheaper than storing the whole page (although that works too) and is "good enough" when it comes to change detection for most purposes. Make sure you check the source website's `robots.txt` and Terms of Use. Both can specify terms for how you scrape their site that you should be aware of. Finally - if it's a small site or another department in your university, consider reaching out via phone or email. They might be willing to open up read-only access to their database directly, which could save you a fair amount of time.
Like everyone says, go deep on javascript. It's incredibly powerful and since you're asking we can only assume you've barely scratched the surface.
From the first blog post: &gt; CoffeeScript is well done and more convenient to use than JS &gt; Meanwhile, polyfills such as CoffeeScript (when not run as a server-side code generator) may become more widely used, pushing JS in different directions. Still, it will be hard for polyfills to beat native code implementation, &lt;script&gt; tag prefetching, and the other built-into-every-browser advantages of pure JS. CS deserves credit because it popularized a lot of features, some hit or miss, for front end development. That doesn't mean it invented them, but a lot of devs became familiar with them through CS and there was a demand for them to be incorporated into the language supported across browsers, hence ES6. I'd go as far as to say CS made it possible for ES6 to happen, seeing as it normalized using a compilation step which led to Babel and backward compatible compilations.
We do provide .webp when it makes sense (supported by the browser).
&gt; so propTypes can potentially catch errors that TS does not But they only catch them at runtime. Hence, they're useful if you use them to deal with malformed external data, but TypeScript warns you to fix your errors before you deploy them. That's a significant advantage. That said, I do wish e.g. `JSON.parse()` would return the type `unknown` rather than `any`, so it would actually tell you where you might have to deal with runtime errors, e.g. using `propTypes`.
Typescript 
Yup. People tend to overuse libraries as well and it becomes a crutch. They definitely still have their place in array manipulation, but almost every time I review a PR where they use libraries, they will inificiently use multiple methods which could have been replaced with one reduce (one iteration vs many). Unless it's a commonly used method, libraries slow everything down when multiple people are in the same code base. It's like reading a sentence that has a regional slang term. You gotta go look it up in urban dictionary to make sure your assumptions of what it means is correct. Didn't mean to rant on libraries. But if you can map, filter, and reduce all the things, then you will be a valuable addition to a frontend team. 
Ah, are you saying they should have explained arrow functions? As I'm assuming arrow functions are taught from the beginning these days, think it's still an issue? As I had been in JS world for 7 years pre arrow functions they tripped me up for awhile in the transition, but doubt that would be an issue for a new dev 
It hasn't, but most of the community is adopting TS over Flow.
Embedded C programming
Except CS introduced these features to client side development. Most ruby on rails probably used CS and, Dropbox and Github, at some point, were writing new JS in CS. CS didn't have to invent them to influence JS, but it created demand for them in the built in browser language. Fact is CS had more adoption and support than Dart, that's why people credit it for influencing JS.
Thanks for the heads up on etag. What so you like about puppeteer?
Rust. That is if you really learned JavaScript. Not just to write a few loops, select a dom element or how to import a function. A lot of newbies simply don't know what they don't know, because they lack knowledge neccessary to identify it.
No flow is still very much alive 
Oh, that's a good idea! you can actually file an issue about this [https://github.com/foreseaz/react-loadcon/issues/new](https://github.com/foreseaz/react-loadcon/issues/new)
You can provide ts/flow typing while still shipping standart js. 
I'm still struggling with reduce. I wouldn't know a real world application of this method.
Thanks for all the advice. It’s a website that the university manages where they can post campus events to. I’m gonna see if I can get read only access to it. Thanks again.
Just wanted to say that but you took my word haha. Excellent advice since probably OP haven't mastered JS yet.
Simple API, easy setup, good underlying browser choice, good cross-platform support, relatively stable. I've used it for automated testing of rendered output, capturing screenshots, and rendering SVGs and PDFs. For a web scraping job it's easy to recommend. For testing something like Selenium with cross-browser testing can be worth the additional investment in setting it up.
[removed]
So it does the same thing as Selenium only it's newer and simpler, easier?
1. Your problem: You have a `for (var i = 0; i &lt; tr.length; i++) {` (line 22) and then, _inside that loop, you have another `for (var i = 0; i &lt; div1.length; i++) {` (line 44) that messes the value of `i`. You cannot share the same index for those two loops. 2. The correct place to submit this question is /r/LearnJavascript
Man i wish i had time to read these
Many of these books are outdated or not very good. I wouldn't waste my money. Also, nice undisclosed referral link. I always recommend the [ExploringJS](http://exploringjs.com/) books to people interested in JavaScript. 
Basically. Selenium has cross-browser support and some nice test-oriented features. Puppeteer doesn't. This makes puppeteer my default choice for pretty much everything where I'm okay using only Chrome underneath. If you haven't tried it, I'd recommend playing with it.
I'm totally going to check it out - thanks!
Any of these not horribly outdated?
Hi /u/joboy8457, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It's painful as objects are passed by reference and cannot be deep cloned without issues. I'll give it another try.
Many Google interfaces now have this "three dot icon", and behind it - is a "Download" button Do you think I can open multiple windows with Puppeteer, and get it to click that download button? I'll actually need to be logged in Puppeteer can remain logged in and click that download button right?
#BREXIT VISUALISED IN PIXELS! &amp;#x200B; [https://codepen.io/SarahC/pen/drqxyw](https://codepen.io/SarahC/pen/drqxyw)
Sweet!
I hope so.
Perhaps how to grow vegetables in your back garden, or a bit of plumbing or wiring. I'm serious, my point is learn some skills outside of programming.
Just because jQuery is legacy and mostly useless **today** doesn't mean it doesn't get its credit as an important piece in JS's evolution. CoffeeScript is the same.
That's really nicely polished!
Anything can happen with "undefined behaviour" https://www.reddit.com/r/programming/comments/1po78/int_i_5_i_i_i_question_i_php_13_c_14_why/
jQuery is a library, not a language. jQuery's API design influenced the DOM APIs. jQuery did introduce quite a lot of stuff. The DOM APIs aren't part of JS. JS' standard lib doesn't cover any kind of IO. You can't even write Hello World with it without extending the runtime. jQuery did browser normalization which was very important when you had to support different versions of IE. CoffeeScript didn't do anything like that. It was just one of many to-JS languages.
Isn’t this a little outdated now? 
Looks great - was looking for something like this for quite some time. It has HTML and CSS too, will definitely use it, thanks!
Hey! The most simple, yet quite common real-world use-case of reduce is when you want to calculate the sum of something. Let's say you have an array of employees with salaries, and you want to know the sum of all salaries: class Employee { constructor(name, salary) { this.name = name; this.salary = salary; } } const employees = [ new Employee('John', 50000), new Employee('Jack', 45000), new Employee('Josephine', 54000), new Employee('Jacqueline', 41000) ] Then you could write: const sumOfSalaries = employees.reduce( (sum, employee) =&gt; sum + employee.salary, // first parameter, the reducer function 0 // second parameter, the initial value of 'sum' ) You could do this with DOM element heights, or whatever you need it for. There are also lots of way more complicated use cases, but using .reduce() for them is not always the best option.
 const wineReduction = ingredients.reduce((sauce, item) =&gt; { return sauce += cook(item) + ', ' }, '') This is really bad code which makes me think the author has trouble understanding reduce. It will work, but using += here is unnecessary, confusing, and may lead to bugs in other cases. You don't need to, and SHOULDN'T mutate the accumulator (here: 'sauce'). You always RETURN the new computed value WITHOUT modifying any of the input variables. That's the whole point of .reduce() - it's functional, meaning that all a reducer function does is producing a return value using ONLY the input values (parameters). It also adds an unnecessary comma at the end. This can be avoided by *ommitting* the initialValue parameter, so it will be the first item in the array. Then we can add the comma *in front* of the following items, so the last item won't have a comma after it. A fixed version of the code is as follows: const wineReduction = ingredients.reduce((sauce, item) =&gt; { return sauce + ', ' + cook(item) })
Here's a real-world example I wrote recently: ``` var query_string_data = window.location.search.substr(1).split('&amp;').reduce(function(obj, keyval){ var matches = keyval.match(/(.*?)=(.*)/); if (matches) { obj[matches[1]] = matches[2]; } return obj; }, {}); ``` Here's what this does: 1. Takes the query string of the URL (in the form of `?key1=val1&amp;ley2=val2&amp;key3=val3`) and first removes the '?' at the beginning 1. Then it splits the result on the &amp; character, giving me an array in the form of `['key1=val1', 'key2=val2', etc]` 1. Then the reduce function splits up each string into the key and value (the `keyval.match` bit) and produces a n object where the keys become properties and the values become the values of those properties This object is assigned to the `query_string_data` variable, so I can then access query string data in the code like so: ``` if (query_string_data[key2] === 'val2') { // do stuff } ```
Oh, really? Sorry, I was a complete noob who thought jQuery was a language. /s What jQuery is is irrelevant. It is part of the JS ecosystem just as well as CoffeeScript, and helped evolve the ecosystem just as well as CoffeeScript, so both of them deserve credit just as much.
&gt; Oh, really? Sorry, I was a complete noob who thought jQuery was a language. /s You missed the key point of jQuery not having any effect on JS itself. &gt; It is part of the JS ecosystem just as well as CoffeeScript Text editors are part of the JS ecosystem as well. So is NPM. Neither is relevant when it comes to language features.
Is it? What changed? Coding learner here? 
It still uses var. Other than that it's of course still useful. 
I heard people using const now. Sometimes i use const instead of var it doesnt run. Is there any case i should use var only?
You should only use const if you aren't planning on changing the value. Use Let if you need it to be mutable.
Thank you. I’ll keep that in mind
Thank you. I’ll keep that in mind
Well, internet explorer doesn't support any new feature, so if you plan of supporting it you should use only es5 and obviously var. But I really encourage you to study the difference between var and let (and const) and why let was introduced 
`const` has 2 intended limitations: * It must be assigned a value on creation * It can't be reassigned If the value of a `const` is an array or object, you can still change its contents because `const` unfortunately doesn't make objects immutable (which is sad IMO, this should be `let`'s behaviour. But `const` spam is already consolidated). In all other cases, use `let`. It behaves the same as `var` (can be reassigned) but is block-scoped (limited to the pair of brackets it was declared in) instead of function-scoped.
Wow slow down. That’s like next week material! I’m still on inline function hahaha
Yet 'const' can be used to name functions as in 'const doSomething = () =&gt; {.....}' This thew me initially as the function will potentially output a different return each time, yet it works just fine. 
Python or php for backend. Or go deeper into the frontend rabbithole with react and redux. possiblyt with typescript. It never ends. 
Not for "anything" backend. It isn't very suitable for template rendering due to the forced callbakc/promises nature of the language
Check the changes, it is constantly getting better [https://github.com/google/closure-compiler/wiki/Releases](https://github.com/google/closure-compiler/wiki/Releases) I agree it is not as user friendly as it could be, I think a really good blog article/tutorial could make it accessible to a lot more people. Google don't seem to be promoting it to the outside world, probably so they don't get an influx of support tickets. I found if you leave it in the default mode (not advanced) it works well, but when you go advanced you need to re-write your code sometimes. Default mode is already the best minification you can get, so it is not a big problem :)
Oh boy here we go
Think of it like this, you want to use reduce any time you want to create a new value based on values that some/all items in you collection have. If you have a collection of numbers this could mean calculating the sum. If you have a collection of people you could group them based on age or gender. You can also use reduce to implement map or filter.
- HTTP: Especially the cache-related headers, cookies, CORS - Web APIs: Push, WebRTC, sockets, indexedDB, web workers... - Auth0, HTTPS, and general security. Lots of devs know javascript but don't know enough about these other aspects of web development.
let and const don't affect mutability, only control whether or not the variable can be reassigned.
Dragging doesn't seem to work on touchscreens.
Because the reference to the function itself doesn't change. Calling the function returns something.
In addition to function vs block scoping, let is also different from var in that let declared variables: * can't be accessed before they're declared * are not allowed to be declared twice in the same scope * do not create global properties when declared in the global scope
If it's declared as a primitive it is. But you are correct of course in the broad sense. I was trying to keep it simple for the guy considering he was just using it and not realising why his code wasn't working.
I guess you didn't run the code examples. In your promise example you have var myPromise = sum(10, 5); myPromsise.then(function (result) { Which will result in an error when myPromsise is undefined. 
They've also forgotten to use `new` when creating the promise in `sum`. So it should fail before ever reaching the myPromsise typo
Yes this is dated. There are a number of things that you shouldn't be using now, `document.write`, for example, which seems to be present in many of the examples. Otherwise it would have been a pretty decent cheatsheet back in the day. It also looks like a section on Promises got tacked on, but as /u/gmerideth pointed out, the example is broken.
It’s missing a lot of ES6+ features that are very common in modern JS. Arrow functions, spread operator, object destructuring, functional array methods(map, reduce, filter), modules and imports... 
Well, that is just a misunderstanding from your part, but it's expected if you're still learning the ins and outs of the language. The assigned function never changes, but the result of the function depends on purity, which is a whole other topic. This is more related to functional programming than JavaScript itself. If a function is pure, it will always return the same for the same set of arguments. But if a function is impure (such as handling I/O, altering state or reading from global variables for example), its return may vary.
That's why I said it's all ES5 man.
Your friend doesn't know what he's talking about. .NET Core + ASP.NET Core is a perfectly valid and modern backend stack. I'm not familiar with ASP.NET Zero, though, beyond what I could find by looking it up just now. My immediate impression is that the pricing seems real steep (*way* more than, e.g. [Laravel Spark](https://spark.laravel.com/)), and I'm generally wary of these sorts of boilerplate products. 
React, which opens the doors to feasible app development, something that would be rather hard with just javascript and html, and at the same time it increases your understanding of javascript. Before React i knew javascript, but figured i barely knew it at all, functional programming, currying, immutable state, maps, reducing, all of these i didn't touch before.
The standard describes how fetch is supposed to work. fetch.js is an implementation of that standard with code that creates a function you can run in your code that works as defined by the standard.
The whatwg/fetch standard repository is documents describing fetch. The github/fetch repository is a polyfill that provides the bare minimum to wrap XMLHttpRequest with the fetch api. https://caniuse.com/#feat=fetch suggests that fetch is built in to most major browsers and is unlikely to need a polyfill (except for IE11).
huh?
That is actually true, i keep forgetting that. I need to put that on my todo list. Also the docs layout sucks on mobile.
Yes, such libraries often do that. If they don't, it's not because they think TS helps them so much but because they'd rather make it easy for TS users than easy for JS users. But any library worth its salt offers a transpiled variant. 
[removed]
That’s a bit of a moot point if you’re talking about using React for everything front-end related.
ASP.net Core is being actively developed and it's used widely in the enterprise world alongside Java. Just cause every start-up under the sun isn't using it doesn't mean it's irrelevant lol. As for Zero I've never heard of it but it seems to use Core 2.0 and Angular 7 so it's pretty damn up to date. Looks expensive too but hey you're not paying for it.
I'm not sure why you're mentioning the benefits of type safety here. I'm only arguing that you can't program as concisely as JavaScript. I've made the full argument too many times, and frankly I've never considered TypeScript a purely detrimental experience, however if anyone thinks "Typescript is objectively better than JavaScript" they are a scrub. It'd be like saying C++ is objectively better than Python. They're too different to even make the comparison.
Since your question was already answered, I'll tell you something else. See that colored bar below "commits", "branches", "releases", etc? If you click on it you can see the language breakdown of the repo. The first one is 99.9% HTML. The second one is 99.5% JavaScript. And there is of course also the one-line summary at the very top which tells you exactly what each project is.
the answer is you're fired. :)
Yeah but I'm not suggesting you should. It's more reasonable to do things that require a high level of interactivity in react, and things that are more static (like settings pages, management pages, about pages, login pages etc) as regular server side templates. I do this in most projects where I have time constraints. 
If you're typing everything, you are doing something wrong. If you use classes, that's a built-in type right then and there (you can assign to the class body in TS outside the constructor). If you use function that return primitive `{ success: true, data: _data }` objects, once again, TS will infer that return type and you wont have to type up manually.
Thanks for beautiful comments guys It is time to rub my friend's face with those comments.
Yes. Depending on your API design it is possible to cache the preflight (options) request. https://medium.freecodecamp.org/the-terrible-performance-cost-of-cors-api-on-the-single-page-application-spa-6fcf71e50147
For those looking for an up to date, easy to search version alternative version of this, check out https://devdocs.io/ Note: I have no association with it, just an occasional user.
31 i guess First ++i runs Then i++ plus that becomes 21 Then i+= 21 runs I becomes 31 and after that i++ runs which makes I 32 after the expression executes I guess it dependes when u want the I value after the line or just before it goes to next line 
Hi /u/Nekomancer120, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sicknoto, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
if you can keep the user facing api at the same domain/port, you have no need for CORS. Except if you want to use it to prevent non-clients, but CORS is not very useful anyway, as anything that isn't a browser can just ignore it. Honestly I don't know what they were thinking when they threw CORS in there.
Hi /u/kevinvz, this post has been removed. Please don't post announcements of announcements which lack any substantial JS content. Thanks.
Hi /u/GoonGamja, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/1f1nas, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Flamyngoo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/shindesharad71, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/C0ffeeface, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/araw830, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/__sandeep, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I run it in codeblocks and says 34, because we run i++ first, but use 10 as value, then we run ++i, but we use the i++ as value, namely 11, so ++i is 12, which makes i = 22, and then we add 12, the last i we found, which makes it 34.
Yup i was wrong 
my apologies
&gt;If you click on it you can see the language breakdown of the repo. The first one is 99.9% HTML. The second one is 99.5% JavaScript. great tip, thank you!
master5o1, thank you for your reply So i use first one just for reference (documentation) And i add second one when i need fetch to work in IE, correct?
Incognito mode
Doesn't work because I have most of my extensions enabled in incognito mode. However, guest window works.
Ah. I keep incognito fresh for pretty much exactly this purpose. I'll have to keep guest window in mind for debugging other machines, though.
Hi /u/code_crab, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/selrok, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
thank you &amp;#x200B;
This is what eloquent people call "cringy". This is also what programmers call "pretty cool".
&gt; I mean you literally can type: So if you disable everything that makes it typescript, and fall back to the underlying JS? riiight, so essentially not typescript, and nothing to do with "weak" typing. Have you learned weak/strong static/dynamic optional/mandatory yet? If you are going to be a condescending boy, you should not make such obvious errors. It ruins the facade, and reveals you are a newblet. 
&gt; Why the resistance to it, if they're optional? You don't have to use them if you don't want to. Own a lawn mower? Would you be resistant to buying a new model of lawn mower, which by default also lays landmines and caltrops under your feet unless you keep pressing a certain button all the time? Thats typescript. And who wants ":any" to be sprinkled all over the place. And when I set a team to do some landscaping, I dont want to come back and find the place polluted with type landmines. Its better to remove the temptation and insist upon proper unit coverage. 
Is insisting on unit test coverage better than insisting on typing your code properly? They do similar yet different things.
IME unit tests do catch any errors that static typing would, while the converse is not true. Typing is not substitute for units. I suppose static types enable some auto-completion tools to work in some IDE's, but I dont think that is worth the overhead of static types. Autocomplete itself can be negative, since it rewards guesswork. &gt; typing your code properly? And what is "proper" ? There is usually no one true type system; and as a problem changes you have to refactor multiplicities. You end up coding out spaghetti because you need to import all the types you interact with, instead of using clean interfaces and making encapsulated modules. Encapsulation/modularization is not just public/private methods - its complete independence from other code. You cannot be independent of something if you directly depend on it or its type information. IMO; static types have exactly one and one use only: machine primitives. I would have no objection at all to JS supporting int64_t, for example. Without "Buffer" node.js would be crippled. But creating oodles of static types for Object has no benefit, and I would argue is actually negative overall. OOP is a weak programming model which encourages bad habits, and static typing is rocket fuel for mistakes and waste. So yes; I strongly avoid it where possible. Typescript:JS is like Herpes:Partner 
I find myself in need of simple optional type annotations (not as complex and deeply nested as TypeScript) everyday, though I don't think they'll be coming anytime soon. TC39 has a graveyard of type proposals, most recent ones (like [this](https://github.com/samuelgoto/proposal-pluggable-types/issues/1) one) that are still active seem stalled.
Nice! Would be really neat to have this as a chrome extension
Almost clicked the link while browsing the reddit at work. Please flag with NSFW at the top of your post!
We have plenty of bugs happen in production, but types aren't one of them. The 0th bug-catcher is coding standards. In addition to prettier, we have quite a few conventions about naming and code structure. Enforcing those patterns reduces bugs (including type bugs) because other patterns begin to look out of place in the codebase. The first bug-catcher is unit tests. Proper testing will deal with all the potential issues (including type issues) that occur within a component. The second bug-catcher is proptypes which are used at every component. These will catch most type issues between components during initial development. They will also catch esoteric runtime issues when the e2e tests run. The third bug-catcher is proper code review. We require multiple devs to sign off on all PRs and they are required to adhere to our coding conventions, unit tests, proptypes, and e2e testing.
Interesting take, I’ll look into POC on this.
This is really cool ... Well Done!!
Hi /u/puzpuzpuz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
really fun question! Here is my solution: ```js const test = require('tape') function next(result, isAdd) { return (n) =&gt; { if(!n) return result result = result + isAdd * n return next(result, 0 - isAdd) } } function add_subtract(n) { let result = n return next(result, 1) } test('add_subtract tests', t =&gt; { t.plan(3) t.equal(add_subtract(7)(), 7) t.equal(add_subtract(1)(2)(3)(), 0) t.equal(add_subtract(-5)(10)(3)(9)(), 11) }) ```
I see it in most every language and development community for which there is more than one choice. Humans are often emotional.
Throwing my stupid game in the ring: https://github.com/delaford/game It uses websockets (ws library) and Vue.js and canvas. It's not much... been working on it for about a year
Thanks.
Right, so I'm glad I surrounded my assumption with disclaimers, as that does sound like you're like to catch many type bugs before they hit production. I would argue, though, that the amount of effort it takes you to do so is far greater than TypeScript adoption would be, and the risk of errors slipping through larger. With TypeScript you'd still have to write unit tests, but you could skip all assertions that check whether nonsensical types would not be problematic. PropTypes requires you to run the code (which can get especially cumbersome if there are a number of preconditions to get to the state in which the propType becomes relevant) to catch errors. And code review requires extra cognitive effort and vigilance on the part of the reviewer - though I'll immediately add that additional types also result in more noise for the reviewer.
&gt; In my opinion, being able to pull a specific ECMAscript version in &lt;head&gt; or somewhere in the document would be awesome and would allow the spec to breath a bit more in the future. It baffles me that something like this has not been implemented yet. Do you know if there are or have been any proposals for it?
Personally I don't love the `__thingy__` pattern here too much, but it's still better then `globalThis`, because it at least makes sense.
That's pretty impressive. Noticed a typo in your README: &gt; It is an improved debugging experience **witch** drastically improved client-side debugging. Unless your debugging process involves witches...
I think the article is great as-is. Very informative. Just offering a helpful tip, in case anyone else is prone to the same thinking as I am. I've been using JS long before arrow functions as well. So if, like you said, arrow functions are taught from day 1, then I'm part of a minority here. The new devs are probably just looking at me like, "Well, DUH!"
You want something like?: const values = [1, 2, 3, 4]; values.forEach(val =&gt; update(val)); or you could do for (let val of values) update(val);
Yep. Specifically you'd probably want multiple tabs: interface is documented [here](https://pptr.dev/#?product=Puppeteer&amp;version=v1.13.0&amp;show=api-class-page) Your code to access a link behind a download button would look something like: ```js ... await page.click('.three-dots-selector') await page.waitForSelector('.download-link-selector') // important if it is delayed in rendering await page.click('.download-link-selector') ... ``` You might also be able to bypass clicking the three dots by directly clicking the `.download-link-selector` - it depends if they're rendering it (or not rendering it) with JS or CSS. Clicking doesn't depend on visibility to a user, just accessibility via DOM. Puppeteer uses Chrome underneath which has a full cookie jar (where most authentication is stored). By default it behaves like regular chrome, although I can't remember if it uses your machine's cookie store or not - I mostly use it in a deployed state where that would be bad. You can optionally open an incognito browser context - no stored cookies, no session/local storage retained, etc.
My boilerplate evolved from gulp to webpack-only config then a typescript react boilerplate https://github.com/kucukkanat/boilerplate-frontend
Cheers, I'll look to see if I can splice in your bits somehow. It can be pasted into the JS box on here if that helps: https://codepen.io/leomarquine/pen/xGzMjZ
&gt; You missed the key point of jQuery not having any effect on JS itself. In your previous comment, you talked about how jQuery *did* have an impact on DOM APIs. A language's standard library absolutely is part of the language. It may not be part of the actual valid syntax of the language (which is what CS influenced), but there is so much more than syntax to a language. A language is an ideology, it's a way of expressing logic and building programs. A language isn't just a set of grammatical rules that compile or interpret to produce some output. A language is its paradigm, its package manager, its standard library, its naming conventions, etc. jQuery had an impact on DOM APIs, Text Editors had an impact on application development (see: Atom and Electron), and NPM had an impact on package distribution, package naming, package accessability, and so much more.
Thanks for your valuable response...
How long would it take to build Reddit clone using only JavaScript, that is react frontend and node backend and mongodb for database??
Hi /u/ac13332, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Also document.querySelector is supported in most modern browsers now, it works just like jQuery's selector: &amp;#x200B; `let myElement = document.querySelector("#pageEl.superClass");`
&gt;Improved IDE support for editors that support Typescript I find that there is very little TypeScript gets you in the IDE (at least most advanced ones) that you can't get with JS, honestly sometimes I find that the way people decide they want to write TS does more to get in the way of autocompletion and navigation than going to JS.
Thanks. I appreciate it. Still lots more to do. But I am trying to get the basics out first. Will get it fixed.
&gt; If you plan to ever refactor your code, ever. Maybe try refactoring vanilla JS in a modern IDE, *really not that hard*... &gt;If more than one person touches your code. There is a small self documentation bonus to well written TS, please don't overreach on this. &gt;If you plan on distributing your code as a library and publish updates In my experience just about everyone has a TS/flow definitions files and distributes standard JS. &gt;If you plan to return to your code after a hiatus in which you forget how your code worked. see 2. &gt;I simply don't get the hate for this language. It's done nothing but skyrocket our productivity and eliminate hordes of stupid errors. Nobody hates Typescript, in fact it is beloved by me and pretty much everyone else on this sub. We are simply trying to keep the discourse on this civil, and not continue a tedious debate on static vs. dynamic
Good question. I am curious what you would like to convey with this question 
Also, I think development time is relative to the skills. But the value of Reddit relies on users around it. Building that user base takes years 
Will using nodejs here affect performance ? If it does how can I improve or should I go with golang or are there any other alternatives
I'm fairly good with react, I have built a few APIs in node, I'm targeting for a small user base around 200 maybe and want to scale in the future
&gt; A language's standard library absolutely is part of the language. The DOM APIs are not part of JS' standard library. Take a look at the relevant standard: https://www.ecma-international.org/ecma-262/8.0/ Runtime environments which embed JS engines like browsers, Node, game engines, etc, extend the runtime with their own APIs in order to do IO and whatever else they need. JS' standard library covers very little. It only includes the very basic stuff like Math, arrays, strings, Map, and things like that. You can't even write Hello World, because it doesn't even cover writing to stdout. If you want to do that, you have to extend V8 or whatever with your own APIs. That's what Node basically is. They took V8 and added a bunch of APIs for IO. JS' standard library doesn't cover reading files, sockets, and things like that. You can't write a web server with it without adding the required capabilities to the runtime first. Node does this for you. &gt; Query had an impact on DOM APIs, Text Editors had an impact on application development (see: Atom and Electron), and NPM had an impact on package distribution, package naming, package accessability, and so much more. Yes, lots of noteworthy stuff, but, as I said, this isn't relevant when it comes to JS' features. There is no feature in JS which can be traced back to jQuery. If you want to see jQuery's influence you have to look at the DOM APIs.
WARNING. If you don't know what you're doing, for the love of all that is good, please don't ever use this cheat sheet. It's worse than trash, because at least trash is safe and just sits there. This is more like radioactive waste. Stay away from it or you will become ill.
mdbook is a replacement for mdbook? something went wrong with your title?
I couldn't maximize the window after minimizing it
Depends. Can you give a few examples that you think are hype driven?
Oh, Tyler..... :-( I can see MPJ's wording and influence in your article, which is a shame because MPJ [got composition completely, entirely wrong](https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/). And since your explanation mirrors his, you got it wrong too. What you -- and MPJ -- _actually_ described isn't composition, but **multiple inheritance**. In a language that naively supports multiple, such as Python for example, we can write: class eater: def eat(self, amount): print(self.name + ' is eating.') self.energy += amount class sleeper: def sleep(self, length): print(self.name + ' is sleeping.') self.energy += length class player: def play(self): print(self.name + ' is playing.') self.energy -= length class barker: def bark(self): print('Woof Woof!') self.energy -= .1 class meower: def meow(self): print('Meow!') self.energy -= .1 class adopter: def adopt(self, pet): self.pets.push(pet) class friender: def befriend(self, friend): self.friends.append(friend) class Dog(eater, sleeper, player, barker): # &lt;- this is inheritance, only from multiple classes instead of just one def __init__(self, name, energy, breed): self.name = name self.energy = energy self.breed = breed leo = Dog('Leo', 10, 'Goldendoodle') leo.eat(10) # Leo is eating leo.bark() # Woof Woof!
I'm tired of repeating this but here we go: this tutorial doesn't explain "inheritance vs. composition" it explains "inheritance vs. traits", where traits is a form of multiple inheritance. JS community has no fucking clue what composition is apparently.
It's amazing how much one guy screwing up can replicate around, isn't it. It's basically how cancer starts.
Thanks for the heads up. I'll do some more research.
Not just JavaScript frameworks. Some frontend WASM frameworks are already imitating it to a degree. For example: [https://github.com/DenisKolodin/yew](https://github.com/DenisKolodin/yew)
No need to be salty. I write to learn and part of that is being wrong sometimes. A nudge in the right direction will help your cause better than dragging me and the JS community with it.
slymntkn beat you to it a few hours ago https://www.reddit.com/r/javascript/comments/b5uxh2/javascript_inheritance_vs_composition/
Your disagreement really seems to be semantic. When most people say "JavaScript" (or any language for that matter), they mean not only the syntax grammar but the APIs in browsers, etc. You arbitrarily reducing the definition of "JavaScript" to the literal language is really just pointless
&gt; https://www.reddit.com/r/javascript/comments/b5uxh2/javascript_inheritance_vs_composition/ Missed that. Thank you.
Pretty much. However you're probably better reading the docs from Mozilla. https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
Well, it seems the goal was to advertise yourself here. But after further investigation, you did provide an interesting read. And the project you're working on seems interesting enough on it's own. Have a point. As for React. Yeah, React is a paradigm on it's own. Not just a view lib at this point. A paradigm which will remain dominant or inspire libraries to come. Although it's already happening with WASM, i.e: [https://github.com/DenisKolodin/yew](https://github.com/DenisKolodin/yew)
The other commented poster this infamous video that got everyone thinking composition is traits, and it's just annoying to keep seeing this popup all the time, and only in the JS community. It's not personal, I think your video is nicely put together etc. But yeah. Composition is when you combine multiple independently encapsulated objects, in order to form higher behavior in the object containing them. It's subtle (it seems) but it's critical, because in your implementation, you're combining object "parts" that may conflict with one another or need to be sometimes aware of each other's state and existence. In your example, you'd have a Dog instantiate (or inject in the constructor) instances of Eater, Greeter and so on and contain them as properties (typically private, but not necessarily), and now the parent object, dog, calls upon those independent objects to implement its methods, including the interface methods that the public expects Dog to have. Not everything has to be composition, BTW. Traits are useful sometimes. But like classic JS inheritance they are more fragile, because they're less encapsulated, and less flexible. You don't contain objects that you use to build yourself, you instead "graft" someone else's methods on yourself. It's inherently limited, just like classic prototype inheritance is. 
Hi /u/algodaily, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `algodaily.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [algodaily.com](/search?q=%28and+site%3Aalgodaily.com+author%3Aalgodaily+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|9|90% [self.cscareerquestions](/r/cscareerquestions/search?q=%28and+author%3Aalgodaily+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|10%
Hi /u/LilaTookbank, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Now we're talking. I really appreciate you taking the time to write that up (for me and for anyone else reading the comments). I'll take a stab at updating the article (and eventually video) based on your comment.
Nothing wrong with that. If someone posts the general question, they get the general best library/framework in opinion of commenter.
This is why I'm taking the criticism of OOP from FP people in JS with a big grain of salt.
No, I do not have any libraries in my mind 🙂
I like to compare developers to amateur photographers. A lot of amateur photographers are always shopping for a better cameras, lenses, and other equipment. Their photos never get any better but they spend a lot of money and have a lot of fun collecting tools. Experienced photographers focus on lighting, composition, and interacting with their subjects. They can produce amazing photos with the most basic cameras. You can make a website with any JavaScript framework (and a lot of non-Javascript tools like Elm.) But at the end of the day what matters to the end user isn't what tools were used to create it, but what information it conveys and what features it provides. You can learn new tools all day long but that won't necessarily lead to producing better websites and software. So pick a tool and focus on making great websites and software with it.
My question I think is beyond the scope of offering a solution to some problem. 
The way it was explained to me sticks Inheritance = “is a” Composition = “has a” In his example: a dog is a barker, sleeper, eater etc.
My question is not meant to offer consulting 🙂
Sorry about that.
There is nothing arbitrary about that. These are separate standards with separate specifications and separate standards bodies. Furthermore, even if browser APIs like the DOM stuff, WebGL, IndexedDB, or the Gamepad API were part of JavaScript, they wouldn't be language features. They are just APIs. Language features are things like async/await, default values for parameters, destructuring, weak references, TCO, etc. All of these are things which the language has to provide directly. You can't add them with a library or by extending the runtime. E.g. you can't write a library which would add Dart's cascade notation to JavaScript. A library can't change the syntax or how parsing works.
limited by Rust? Why is that limiting?
MPJ you say? I heard this point argued (quite vociferously and also, apparently with a similar error) by Eric Elliott: https://www.google.com/amp/s/amp.reddit.com/r/javascript/comments/3oy9c3/composition_vs_eric_elliott/
**Direct link**: https://www.reddit.com/r/javascript/comments/3oy9c3/composition_vs_eric_elliott/ --- ^^I'm&amp;#32;a&amp;#32;bot&amp;#32;-&amp;#32;[Why?](https://np.reddit.com/user/amp-is-watching-you/comments/970p7j/why_did_i_build_this_bot/)&amp;#32;-&amp;#32;[Ignore&amp;#32;me](https://np.reddit.com/message/compose/?to=amp-is-watching-you&amp;subject=ignore&amp;message=If%20you%20click%20%27send%27%20below%2C%20the%20following%20action%20will%20be%20taken%3A%0A%0A%2A%20The%20bot%20will%20ignore%20you%0A%0AYou%20will%20receive%20a%20confirmation%20in%20reply.)&amp;#32;-&amp;#32;[Source&amp;#32;code](https://github.com/bvanrijn/aiwy)
MPJ you say? I heard this point argued (quite vociferously and also, apparently with a similar error) by Eric Elliott: 
Hello r/javascript. I made this library after putting in some work with TypeScript and React Hooks, so I kinda wanted to push it a bit and use most of the things I've learned recently. This library is a collection of pre-styled JSX elements based on the common HTML Form Elements. It offers an easy way to collect form data and/or input values, while letting certain HOCs do the heavy work on the background. For more detailed information about these, check out [this section from the README file on the repository, which explains how do these HOCs keep track of their respective inputs and how to access their data](https://github.com/rmolinamir/react-formalized#form). It is also possible to change CSS themes on the fly by using React `Context` objects and `Providers`, for example changing between light and dark CSS themes globally which is shown in the showcase. The style and animations were inspired by different `&lt;input&gt;` elements from popular websites such as Reddit and Netflix. Any feedback is greatly appreciated. Have a good one, cheers.
So if I understand correctly, ByProxy sends and handles HTTP requests under the hood? That'd makes communicating with the server so much easier, clearer and logical. No need to setup REST API verbs and friends. I think I'll definitely use it (and maybe send some PRs) as I've been looking for some ways to make client-server communication less of pain when working on monorepos. This is not a valid solution to every project but that's definitely interesting IMO. Thanks for sharing.
Jup, i fixed that bug yesterday but forgot to deploy it :S nice catch
That's a good thing. That's how development environments evolve. Now it's up to everyone to take responsibility for their choices when working for production, that's a different matter.
No prob! Definitely want to use this at some point, and I'll try to help out with pr's if I can too!
Or following the Lishkov-substitutional principle, "is substitutable for". 
Limited by Rust? Why is that limiting?
hey! thanks for your attention! As you may read in FAQ or on the main page, we've been doing online courses before, for CIS region. And we've done talks like this before, in Russian. So we have a developers community, but it's the first time we go forward with the content in English and worldwide speakers :)
you may google [doge.codes](https://doge.codes) to find out more ;) we're the first educational company in CIS region that got official GitHub partnership for student packs
* whispering to OP's ear * DOM is faster than VDOM
:D Sure, but plain JS + HTML + CSS rare stack for real world project (maybe for now) 
Here's some useful resources: * The first and easiest is wikipedia. The [Composition_over_inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance) article describes composition as "containing instances", and the [Has-a](https://en.wikipedia.org/wiki/Has-a) article describes it as having a "member field of an object". * The Python community (since object composition is a language-neutral concept) [describes composition](https://web.archive.org/web/20170707220607/https://learnpythonthehardway.org/book/ex44.html) that same way. * And the ActionScript community (ActionScript is an ECMAScript language) [describes composition](http://www.adobe.com/devnet/actionscript/learning/oop-concepts/composition-and-aggregation.html) that same way. * And Herb Sutter (a prominent expert in the C++ community) [describes composition](http://www.artima.com/cppsource/codestandards3.html) that same way. * And JavaScript-specific explanations that pre-date the influence of recent bloggers also [describe composition](https://stackoverflow.com/a/8696786/1698612) the same way. * And most importantly, the GoF book -- where the rule favor composition over inheritance comes from -- describes object composition as "objects acquiring references to other objects," and their code samples match all the previous descriptions. https://i.imgur.com/xDHUGYc.png And just recently, I get to add a new resource to this list. Martin Fowler's Refactoring book is popular and well known, and his second edition -- rewritten for JavaScript -- was just recently released. In it, he shows composition as having a field to hold an object, then initializing that field with an instance of the object. His code sample [looks like this](https://i.imgur.com/1A6B6Oo.png).
You may want to read up on Svelte, particularly version 3 which is nearing release. It's one of the more exciting projects in the JS ecosystem, in my opinion. [https://v3.svelte.technology/](https://v3.svelte.technology/)
Looks interesting, I will check it out
👍
So good, thank you. 
Jesus Christ, how can you expect useful tips with this amount of information?
Once I wrote a library which is a better alternative to some established library. It targets people who think differently than what other library provides. But I started getting so many demotivating comments from people who love that library before even checking out what my library does.
Hi /u/0Square, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
https://github.com/aplomBomb/BeatSaberCompanion Haha oh boy
Hi /u/loplopsterster, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
No. For starters there is Vue (though this is also a vdom framework) and secondly there is WASM. 
WebComponents also.
Wasm is really cool, but for me it's more about future (next 3-5 years) 
Trust me, I'm wrong person to talk about this since I'm all pro Vanilla approach 😊 For me it's easier to use template literals and and write something 3x faster and 10x lightweight over websites that use React, Bootstrap and whatever cool kids use nowadays. I'm not saying that any of this are bad, it's just fact that small website size makes me happy, I rewrote jQuery based legacy front-end of our intranet at work and most of pages weight 60kb over 400kb previously and from that 60kb, 50kb is actual content. Looks better, works faster and everyone's happy 😊 You can call me Marie Condo of front-end development 😂 does React makes you happy? Go for it! Everyone should use whatever they like, unless they are restricted by corporate policy or something.
Good one :D!
[Clearly, the writer needed to invest in better QA](https://cdn-images-1.medium.com/max/800/1*pv2rEQX-kUJQDXJmNkmYpA.png)
Interesting idea using Vue as an event bus for your game. I've only recently learned about the event emitter pattern and immediately rolled my own implementation of it into my app. So, I want to as some questions: 1. Is is better to instantiate this shared bus in a module and import it (like you did), or just make it a global variable? 2. Are there any benefits to using Vue over something like EventEmitter3? 
Fix is live along with some other minor qol improvements. The css resize icon would overlap the maximize button (need to change that button when minimized) and block maximizing
WASM will hopefully break JavaScript s monopoly. That alone will be pretty big. Being able to use much stricter languages that don't transpile into large amounts of js will be pretty awesome. 
Yeah, great alternative, but with leak of contributing and centralized community (IMHO)
Wow, great example, thanks
I'm still a beginner in web development but the color of the page is hurting my eyes. Also, there's currently a fairly vulgar "promotion" on your page so you might want to look at taking that down... Cool idea though.
https://github.com/qgustavor/generic-speck It's a [Speck cipher](https://en.wikipedia.org/wiki/Speck_%28cipher%29) based obfuscation library. In the last months I were using it in some projects without issues and it could be used in some projects. Example: Firefox Send could use it [to avoid ID collisions](https://github.com/mozilla/send/issues/445). In the other hand at the moment I think it's a bit hard to understand.
Because some people describe things inaccurately? In that case nobody associated with any group of programmers should ever be allowed to talk on any topic ever. 
aren't tools like grpc solving the same problem? I'm genuinely curious, as I'm still somewhat new to service/api principles and practices
Hey, writer here. Thanks for reading the article. :) Can you please explain what is wrong with the picture?
Average of 115 and 26 isn't 141. Minor in the scheme of things. :)
Yes, that makes sense. I can see how that can seem wrong. :) The implementation given at the end of the article uses all 4 of the parameters available to the reduce function and it sums up the numbers until reduce arrives at the last element. At the last element, the sum gets divided by the length of the array. The image directly reflects that algorithm. Maybe I should add a note so that it is clear. Thank you for clearing it up. :)
Haha thanks for the heads up, I deleted it. Yeah about the colors, i'm pretty shitty at design and defining/matching colors. I'll have to find better colors.
Lit-html has been pretty nice to work in lately. Very React-like, baked-in style encapsulation, no VDOM.
The simplest reduce ever. `&lt;pre&gt;` `&lt;code&gt;` `// Sum up all the numbers together in the array` `const someNumbers = [20, 30, 40, 10];` `const theSumOfAll = someNumbers.reduce((acc, val) =&gt; acc + val);` `console.log(theSumOfAll);` `// Result: 100` `&lt;/code&gt;` `&lt;/pre&gt;`
It just isn't. Things like scheduling bring performance benefits you wouldn't be able to get in a vanilla app. Basic scheduling means ordering read/write queues in order to prevent layout thrashing, this you could maybe still hack together, or diffing so that only the parts of the view change that must be changed, and here it gets harder because doing this means you have practically written a framework. Modern scheduling on the other hand isn't achievable imo, meaning running a strict 60fps by prioritizing content and retaining elements that are over the budget async. The latter in particular is and always has been the bottleneck. 
Convert number of words to some duration
Why does everyone keep using reduce for problems which should be solved by map? The second problem (capitalizing first names) is a textbook example of when to use map. 
Thanks. I'm not able to find one with good examples on how to use with a back-end DB.
What are you top 5 links to give to someone who started doing front-end with react (and didn't really give dive deep into anything else) and wants to switch to vanilla approach?
Usually you would have a server application that handles connections from your front end to then query the database, table viewers are usually just the presentation of that data. I can’t look deeper until later but again it all depends on the libraries and services/servers you use to store that data in the db in the first place.
[removed]
It’s true. The event loop is perfect for machines that react to events
https://javascript30.com is good start (Wes Bos is awesome guy) Also MDN has everything you might need: https://developer.mozilla.org/en-US/docs/Web/JavaScript
It seems like the numbers of looking at images are completely arbitrary, where do they come from?
Chiming in to plug svelte. What makes it so exciting is that it's a compiler. It's a fundamental shift from the paradigm set forth by other frontend frameworks. It doesn't need to ship a huge runtime because all the work is done during build. It's fantastic. It feels like the future. It's the fastest frontent framework out there and generates the smallest bundles out of every framework out there. Just as amazing as svelte is Rich Harris' (author of svelte) blog posts. That guy is as good with words as he is with writing code. One thing that isn't quite mature is large-scale state management. Specifically, svelte's Store doesn't support nested Stores. Vuex, for example, can have dozens of nested vuex modules to help organize code, but with svelte, the Store needs to be one giant object. Overall, it's great to be able to easily build reusable, highly interactive controls very easily and be able to consume them from anywhere without having to ship a runtime as well. This has come in handy when retrofitting new controls onto legacy products.
Maybe not the final frontier, but it's established a clean paradigm that goes practically unchallenged. Previously templating-MVC lasted for over 20 years. The reactive approach will likely last a while as well. The language does not matter, React would run in javascript, reason, c++, wasm, etc. The framework around it doesn't matter, pretty much most frameworks these days are React clones with the exception of a few leftovers, and with things like hooks they will start to interface with one another more than they already do. JSX is also just a small detail which isn't that critical to Reacts larger picture: a single, cross platform, universal standard for how to construct a component. 
Give me one real world usage example in which you think React is superior over Vanilla approach and after few days I will give you faster Vanilla version. By real world usage I mean something that used on world's top 500 websites and not some weird UX nightmare. This example must be written by you and hosted on JS Bin, JSFiddle or CodePen.
React is just a library for building components that leverages a virtual DOM. It neither invented DOM virtualisation nor was the first technology that embedded XML syntax in procedural code (it stole that from XHP which stole it from PHP). Neither technology is coterminous with React, and indeed I believe Vue.js uses both. Virtual DOMs are not perfect. They require extra runtime code and these days are often not much faster than native DOM manipulation. There may come a time when browsers provide some kind of high-performance transactional DOM updates out of the box, at which point VDOM becomes a white elephant. So I wouldn't expect them to be around in five, certainly not ten years' time. JSX is handy but still has its detractors, who prefer 'fully fledged' templating languages like Angular's. I personally am ambivalent on the matter: I think it's great how terse and 'batteries included' Angular's language is, but I appreciate the simplicity and debugging story that JSX gives me. But there's no reason, again, that ECMAScript couldn't provide its own arrow bracket syntax for e.g. calling constructors, or that a more general-purpose compile to JS / WASM language couldn't provide its own tag syntax. I think the next phase of innovation will be in compile-to-WASM languages which will no doubt have their own approaches to the problems of front end development. Initially most of these will be designed to allow developers of systems languages to try their hand at front end - this will fail, I think, when most of these developers discover that the thing they hate about client-side web isn't so much JS as evented UI programming. What will still stand after that, I am not sure, but it might be some kind of strongly typed functional language designed to be used across the whole web stack.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/mid_core] [Javascript help](https://www.reddit.com/r/mid_core/comments/b6aplf/javascript_help/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I was going to ask just that.
[Javascript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/) is a really good (and free) book that covers more advanced topics. Not only that but you will see these design patterns in most other languages too.
Clicking "Learn More" on their homepage returns a 404...
Version 3 hasn't been released yet, so the v3 website is still incomplete. Check out [version 2](https://svelte.technology/)
Hey! Eik Tu Nachu! I speak less than one language. Thank you for your concernes. 
1. I learned it this way via Laracasts and Jefferey Way is top-notch. It just works. 2. One less thing to load, I suppose.
Through in a bunch of console logs. Makes sure those values are what you expect them to be. I suspect something is \`undefined\`, and then getting turned to \`NaN\` when you do math on it.
Ok thanks 
I'm just going to post this here incase somebody that falls into that category reads this. https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464
Abraham Lincoln quote at the end made my day!
Reinforced Q learning [https://en.wikipedia.org/wiki/Q-learning](https://en.wikipedia.org/wiki/Q-learning) [https://github.com/GrosSacASac/JavaScript-Set-Up/tree/master/js/ai/qlearn](https://github.com/GrosSacASac/JavaScript-Set-Up/tree/master/js/ai/qlearn) Eventually I am going to integrate it into my game (which is also open source) Message me if you are interested to come to the next JS meetup
I through Python was the main inspiration for es6, maybe because it was used heavily at Mozilla. Of course it was also an inspiration for CS.
I think people tend to get too tied up in the fact that React uses virtual DOM. It's not that a big of a deal, it's just an implementation detail. It might even change in the future too. We are also exploring React ahead-of-time compilation and we are aware of the cool ideas that Svelte, Angular and Glimmer all brought with them. There are also other important parts of performance that are to do with concurrent scheduling, rather than just reducing raw instruction counts. If something is going to be expensive to do, it's going to be expensive regardless of the underlying implementation – so things like scheduling will offer significant benefits.
AFAIK lit-html is just efficient templating solution based on template literals. It does not have baked-in style encapsulation. Custom elements (webcomponents) have and there is small base class that combines lit-html and webcomponent and it is called LitElement. Thank you for sharing words about lit-html. I believe it has a lot of potential, it just need bigger community. :) 
TL;DR: count the number of words, plus some arbitrary time to look at images.
Out of curiosity where are you from?
It does not seem like you are counting images as 1000 words.
Are you a shill for React? Sometimes I feel like these posts are manufactured by a farm of Facebook funded sockpuppets. React has fucked the front end. How many insecure npm dependencies is required to run it these days?
I wish I had one too but preferably someone reasonably experienced who would know what was going on when I didn’t 
Thanks for this article. I like the illustrations. What did you use to make them?
I especially liked their PHP courses [https://www.youtube.com/playlist?list=PLfdtiltiRHWHjTPiFDRdTOPtSyYfz3iLW](https://www.youtube.com/playlist?list=PLfdtiltiRHWHjTPiFDRdTOPtSyYfz3iLW) [https://www.youtube.com/playlist?list=PLfdtiltiRHWEbLm0ErHe7HgEOVIO26R\_o](https://www.youtube.com/playlist?list=PLfdtiltiRHWEbLm0ErHe7HgEOVIO26R_o) 
You could make a "JavaScript Partners" Discord server. I'd join it. I'm a reasonably experienced js dev :)
Experienced devs could have a role to signify that they don't mind people messaging them for help
console.log is my only coding buddy
What the ultimate future holds as far as the rendering engine implementation details go, no-one knows. There probably won’t be a “final solution” because there are always new goals and new tricks to try. However, in terms of speed, the next step is probably the template string method used in hyperhtml and (later) lit-html. This technique could be implemented into react as a build step or with minor code changes. At the same time, they are working on rendering priorities (React Fiber) that makes the overall rendering slightly slower, but allows the more time sensitive updates to happen more regularly. Additionally, research into doing more work off the main thread via workers will be researched and refined, further improving responsiveness at the small overall speed cost. After that, more research will be done on pre-computing optimum, minimum possible updates and compiling the rendering calls down to raw dom operations (plus helpers). React is already working on this. After that, there will probably be some research on render optimization, where the compiler tools figure out speed improvements via rendering updates out of order and other weird tricks. By then, the browsers will probably have exposed a lower level dom api for use by frameworks. With these tools, frameworks will be able to send the browser bulk update commands in a binary or pre-optimized form, so the browser can more quickly make the updates without having to make higher level api guarantees. This sort of thing will open more doors to use wasm more feasibly in ui code. Beyond that, many, if not most aspects of a dom object are never used for any given piece of dom. The virtual dom was invented largely to get around having to perform diffs and operate on a much simplified version of the dom to minimize exposure to it. Imagine a dom api that allowed dom regions to specify which parts of the dom features it actually needed. In this way, you could sandbox regions to prevent unnecessary processing. This is similar to the idea tackled by the paint api in Houdini. Once you do that, you’re just a single step away from implementing your ui rendering entirely via a shader, running on the gpu. Some frameworks already have some of these. There is already ongoing research into most of these.
\&gt; Give me one real world usage example in which you think React is superior over Vanilla approach and after few days I will give you faster Vanilla version. &amp;#x200B; Can you rewrite this\[1\] \~70 lines of React code in Vanilla. It is not real world usage example, but at least it shouldn't be so hard to rewrite because it is just \~70 lines of code :) &amp;#x200B; [https://github.com/localvoid/uibench-react/blob/6b5d4df7deb2874ef3de8b5a97bae014352fe77b/js/fc.jsx](https://github.com/localvoid/uibench-react/blob/6b5d4df7deb2874ef3de8b5a97bae014352fe77b/js/fc.jsx)
I was really into JavaScript Design Patterns when I was first becoming proficient, but since ES2015 I don't really do anything fancy. I think you may be surprised how far vanilla JS modules and a simple factory pattern (like classes, but without inheritance because you're choosing what to put in the object you return) will take you-- beyond this, you will find a lot of opinions: [Eric Elliott's Composing Software](https://leanpub.com/composingsoftware) is one I like. There are fewer books written for full apps probably because you will naturally want to choose patterns and architecture for your specific problem/software/business. You can learn about this from general computer science talks/books since the principles are largely the same.
A L G O R I T H M
Yep. I had to stop reading because I kept thinking: “can’t map do that?”
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^3 from Eric Elliott.
Whisky is my coding buddy
Also just started JavaScript. 
&gt;It's the fastest frontent framework out there Any proofs?
\&gt; If something is going to be expensive to do, it's going to be expensive regardless of the underlying implementation – so things like scheduling will offer significant benefits. &amp;#x200B; If something is going to be expensive to do, concurrent scheduling that is using component boundaries for preemption won't help :)
I agree that constructors don't violate the open/closed principle, but more importantly I think a factory pattern is simpler and more flexible. I stopped using prototypes a few years ago even on small projects where I am the only contributor. I was surprised to see so many people complain about the \`class\` keyword being added to ES2015: Crockford, Elliott, etc. and had to try it myself. It's kind of nice-- it's how I would do prototypal inheritance if I were in a situation that called for such a thing. As far as his "kinda toxic" reputation, I don't know anything about that.
This looks awesome! I’d love to see some examples on how to handle authentication 
I absolutely love rust, but the package ecosystem is just generally newer and less accessible for the average developer. That said. I think making a new program instead of improving old tools is kind of silly 
Yeah couldn't resist the self promotion. I've been working on Solid for a few years now. Open Sourced it last year. I worked hard to make it not only fully featured, but arguably the fastest library out there from a benchmark perspective. But let's face it's not enough to be \_\_\_\_\_\_ (fastest, require the least code, small in kb, highly composable, support portals, suspense, context, and so on...). No one wants another JS UI library regardless of what it is. And then suddenly React Hooks were announced their API almost exactly matched what I had been working on, except Solid kinda does it way better. I suddenly felt validated. But the React Community has been on the fence. Next thing I find myself writing articles promoting React as an indirect way to promote my own perspective, and people actually identify with that. Maybe I will try not to bury the lead as much in my next article. Yew looks cool. I've been watching carefully the progress on WASM. In the [JS Framework Benchmark](https://krausest.github.io/js-framework-benchmark/current.html) WASM-BindGen is is neck and neck with Solid. It's not a fair comparison since the WASM implementation is the equivalent of optimized hand written JS and not representing higher abstractions like found in Solid or Yew. I see an older version of Yew is present in the benchmark. I look forward to see how it's performance improves as it develops.
I think you are doing yourself a disservice by assuming that JavaScript has anything to do with application design. I'll give some general rules that I follow (sometimes) that certainly don't fit every circumstance. At the application level I'd look into the actor model (can't recommend a singular resource here - resources abound). I'd also recommend CQRS/DDD ([good introduction here](https://medium.com/@domagojk/patterns-for-designing-flexible-architecture-in-node-js-cqrs-es-onion-7eb10bbefe17)) At a (UI) module level I'd recommend treating components as finite state machines if applicable. It's extremely valuable to dive into a complex interface with a state diagram in hand ([good introduction here](https://rauchg.com/2015/pure-ui)) As a general rule, keep your side effects and logic separate. This will make testing simple. In the same vein, unit testing isn't as important as others might let on. Keep your functions pure and as algebraic as possible, and they have predictable results. Project level testing is the way to go (do two modules interface with each other as expected?) Don't depend on a module that has a lot of dependencies, unless you have looked at all of those dependencies. I find that JavaScript works very well with a functional and modular style. Others enjoy inheritance, which is fine too - but understand the consequences of tight coupling if you decide to go that route. Also understand the consequences of extensibility if you go the functional route. Your coworkers might end up with all the pieces, and a very complex puzzle in front of them. Ultimately just try to keep things as simple as possible. This applies to everything in the world as well as JavaScript. In time you'll notice patterns that I'd warn you about if I didn't firmly hold the belief that they can only be learned through failure. Just build and have fun with it (and continuously research), and you'll decide for yourself how it should all come together :)
I laughed out loud. I can’t believe I didn’t think of this sooner. Thanks mate 
r/ProgrammingBuddies
Have you guys seen the [JS Frameworks Benchmark](https://krausest.github.io/js-framework-benchmark/current.html). Virtual DOM libraries do not dominate the top end of that benchmark. There are other performant ways to write JS code without resorting to Virtual DOM. I'm the author of Solid(ko-jsx and mobx-jsx) so obviously I have a bias. But trust me when I say this is an area that is constantly improving. Having general appeal and popularity is another thing. But don't trust me just look at the numbers.
We shouldn't turn this into Vanilla vs Framework. It's as awkward as WebComponent vs Framework. Abstractions are useful. Let's move on. DOM is faster than VDOM obviously. Can a non-VDOM library be just as sophisticated as React and more performant? Definitely. Do they exist today? Definitely. Performance or features alone is not why you choose React at this point.
Such wit. Please take my upvote 
Got it sorry
12 seconds for the first image? that’s a long time for an image... in terms of visual recognition images are faster processed than words. unless you’re talking about an article that consists of porn images i doubt that’s accurate. 1-3 seconds maybe?
So much effort of precision to reach another imprecise result. What is the picture is a technical chart. What about tables, what about code examples, what about the skill level of the reader, at reading or on the topic of the article.
Why not? Component boundaries are great for time slicing units of work – especially expensive workloads leveraging suspense.
You probably don't want your average reducer to be that complex. I'd just do `const average = (list) =&gt; sum(list) / count(list)` instead of mixing the two function implementations together On the same note, you'd probably be better off expressing the last example as const result = { minimum: list.reduce((acc, x) =&gt; x &lt; acc ? x : acc), maximum: list.reduce(acc, x) =&gt; x &gt; acc ? x : acc), average: sum(list) / count(list), } Which gives you the flexibility of abstracting out the reducers as you need to and it makes it more clear how each member of the object is derived But an important thing to remember about reduce is that, while it's certainly more declarative than a for loop, it's still a very imperative way of solving problems and you should try to limit your use of it to library code. If you're throwing a bunch of business logic into a reducer, it's likely that you haven't broken down the problem correctly
I have no issue with making a new tool actually. It just seemed weird to put the other project down for being written in another wildly capable language.
Not sure if it’s just the particular times I’ve needed to use a reduce function, but I have always found that coming back to that code later - reduce functions are difficult to read, and resistant to refactoring. I’d almost always prefer to write out a full iteration as a for loop in most cases over writing a reduce function. Many of the classic simpler reduce functions like concatenation of a list of strings is built into the language 
It will work only when you split your task into many subtasks(components), in many use cases there is usually one cpu bound task per user action that you won't be able to split into many components.
Yes, this. Every time I use a function like this, I will inevitably have to explain how this code works to 20 other developers when they come across it. Compared with a simple for loop which everyone understands.
What do the markers represent? How many can you realistically expect there to be for any given nav item?
[stackoverflow.com](https://stackoverflow.com) 
I really like this idea. I've been toying with similar ideas with Typescript. The biggest issue I've run into is unifying client/server types at compile and run time. I think the holy grail is something like this: - Server defines a compile-time RPC interface (basically a bunch of functions with clearly defined prop and result types) - Server uses compile-time types for automatic run-time input (and output during dev/tests) validation (using AJV or typescript-is) - Server uses compile-time types to generate a client module that exposes a typescript interface for making requests against the server. - Generated client module includes the same input/result run-time type validation as the server. I've had some success getting this working. When it works right, you get full compile time type hinting and run-time type validation on the client for functions defined on the server. 
I think I will switch this weekend to ArangoSearch. It will allow me to remove elasticsearch and just have arango on production. I also saw that arango had a graphql endpoint so I could just write directly.. making the code even easier :D I love personal project cause you have to make sure you save as much money as possible hehe
1001* 
Yes, it is an imprecise result. Based on the two Medium articles that I've mentioned in my post, that was all I could salvage. 
Yes, it is a long time, but that is what they've mentioned in the article [Read Time and You](https://blog.medium.com/read-time-and-you-bc2048ab620c).
Found this old gem (python code) - I am actually glad we *don’t* have list comprehensions in JavaScript because of the kind of madness it would create https://github.com/Larkenx/classes/blob/3b6fedfb95587810bfe90a4087a348562c0b0784/retired/artificial-intelligence/hw3/gobblet.py#L441
You'll never get something precise unless you start tracking each user and infer their reading capabilities and personalize the algorithm. So my point is that if it's not possible to give a better estimate than "numbers of words * X" there really isn't a point in spending the time.
From this article - [Read Time and You](https://blog.medium.com/read-time-and-you-bc2048ab620c)
With suspense, you can handle it like Promise.all and resolve only once all subtasks are complete. Which is a better UX and gives a better "perceivable performance" than having lots of components show flashing content (a bit like how fonts can when they're not loaded then suddenly load).
[removed]
Not sure where the toxic reputation thing comes from. OP has a history of ad hominem attacks on Elliott (“snake oil salesman” etc.) over what is essentially a professional disagreement over semantics, which is ironically, toxic itself. 
Can someone explain this const declaration usage? Not used to the object layout. const { characterCount, otherLanguageTime, wordTime, wordCount, } = wordsReadTime(strippedString, customWordTime); &amp;#x200B;
Seems like the visuals could be helpful to those unfamiliar with reduce, but "changing each element of an array" is literally the definition of `Array.prototype.map`
Javascript Application Design. JavaScript Application Design: A Build First Approach https://www.amazon.com/dp/1617291951/ref=cm_sw_r_cp_api_i_VtfNCb4YDSQ2E
Seems like a picture is worth 52.17 words
[It's called "object destructuring"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring)
Ahh, yes you're completely right. LitElement :)
average = accumulator.average + (current / (currentIndex + 1))
Thanks. It's an ES6 feature I've not used, but am now a bit more familiar with. Cheers! For anyone else curious, this article really helped me understand [https://hacks.mozilla.org/2015/05/es6-in-depth-destructuring/](https://hacks.mozilla.org/2015/05/es6-in-depth-destructuring/) Specifically the part under **Multiple Return Values**, which specifically relates to the code snippet above. 
Your first code snippet is set to an element lookup. The second code snippet is set to the value of an input. What are you trying to do with the snippet that doesn't work?
I think part of that has to do with the initial value argument coming after the callback, your eyes kinda have to jump around. And since it's an optional arg it can't really go anywhere else.
Hi /u/aolhelp, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I'm glad you didn't call it AI/ML or what not. 
Hi drumstix42, Sorry for that, I missed out that I am trying to get the value of the element. The thing is even that piece of code is not returning the expected result, I am getting an error with this line var pqfd = tbl.rows[row].cells[column].getElementById("pallette_quantity_date" + column); console.log(pqfd.value); &amp;#x200B;
Brilliant 👍🏻
 getElementById() Is a method only available on the **Document**. Element IDs are intended to be unique, so element nodes do not have the *getElementById()* function
Thank you for reading the article. :) I've used [draw.io](https://www.draw.io/) with the fonts [Permanent Marker](https://fonts.google.com/specimen/Permanent+Marker) and [Indie Flower](https://fonts.google.com/specimen/Indie+Flower).
Thank you drumstix42. Thanks for the explanation as well on the getElementbyId.
Thanks! I'll check it out This is a bit off topic - have you ever written code to use Google Oauth to connect to others users accounts? Such as created an online app that pops up "do you wish to share your Google Analytics data with xxxx.com"?
This is awesome - so pupeeteer can do this even without opening a a chrome window - it does it headless? Can it do this even without opening a window manager (like gnome for linux)?
You can define map using reduce, so there
Yep. Several times - there's different flows depending on how you want to access data and use credentials, and I can point you at a couple libraries to help you get started. If you want to chat about it you can PM me - it's a little off the topic of web scraping (although it looks like moderators have already locked the post).
All of the examples in this post make zero sense to me.
&gt; so pupeeteer can do this even without opening a a chrome window - it does it headless? It opens a _headless_ chrome window, yes. There's a full instance of chrome running, just no window manager. &gt; Can it do this even without opening a window manager (like gnome for linux)? Yep. I use it in dockerized environments and deployed servers where a window manager would be problematic - typically debian-based. There's a couple extra install steps and you need to make sure the system has dependencies installed. 
mknnfnk
Thank you 🙂
You said that scheduling will offer significant benefits when something is going to be expensive(I assumed that you've meant some expensive cpu-bound computation), and the point I am trying to make is that it doesn't work when something is going to be expensive, it works only when there are many non-expensive components because scheduler is using component boundaries for preemption. It has nothing to do with suspense, "perceivable performance", etc.
Nobody with an interest in writing readable/maintainable code would write that, even in python.
Yeah I second this. You should use map, filter, some, every, etc...way before using reduce. When you reduce you're reducing `an array of something` to `something else`. It's not clear your intent, you can do pretty much ANYTHING with reduce, so whoever is reading your code can't figure it out as quickly as it would if it were using a map.
It's like you haven't read a word of what i've written, there were arguments in there. Many of the top 500 websites are driven by React, including the site you're on right now. If you're not willing to engage in an honest discussion, why should i give you anything. Tell me your impression about these topics (thrashing, etc) and i'll shower you with sandboxes you won't be able to either convert at all, or make faster.
A big part of why refactoring JS in a modern IDE is pretty fine is because IDEs treat it as untyped TypeScript. They'll use type inference on your code combined with type definitions from libraries to try to figure out what you're doing. If you manually add some types it'll do an even better job.
There's gonna be a red item with a list of books they read and blue item with a list of dudes they....
Someone might show an example of how to pad a string out to a specific length with a for loop. That sort of example is there to explain how the for loop works. But that's such a common use case that it's included in vanilla JS as padStart and padEnd. Map and filter are reduce. Reduce is what's known as a fold in functional programming. Using a fold, you can implement map and filter. Map and filter just happens to be such common use cases that they're been given it's own function in the base language of ECMAscript. It's like syntactical sugar.
React is the only framework that has this sort of scheduling atm. Watch the first couple of minutes into this [https://youtu.be/nLF0n9SACd4?t=185](https://youtu.be/nLF0n9SACd4?t=185) and tell me how you're planing to do this in a vanilla app. Yes, very much performance is one of the reasons people choose React. In concurrent mode it does not suffer under load any longer, you can bombard it with requests and elements to draw. The Chrome team is currently working with the React team to bring this to the web one day under the web scheduling moniker. Then maybe your point will hold.
It seems to be possible: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource
I don't know E.E. personally. I've never crossed words with him on the Internet. I have read a fair number of his writings. Leaving other arguments -about his actual knowledge or expertise- aside, Elliot _built_ himself a reputation through certain practices. While one may or may not consider these practices _bad_ the fact that he did use them is not really debatable; it's out there. The way he built that reputation was mostly through self-reference and self-validation. That is, he wrote some stuff and then he wrote other stuff where he would write how correct he was. He _"SEOd"_ his way into relevance through a network of links to his own writings but referencing them as independent opinions. Not only that, but a number of times he's picked up on popular words (not necessarily buzzwords but yes) to give them different meanings that serve his own purposes, not the meanings they originally had, causing more confusion on the way. Also, while this may not be as relevant, he tends to argue most of the time through "I'm right and everyone else is wrong; and I'm right because I said I'm right", which doesn't exactly contradict that image described above.
yeah, using white colour is a double edged sword sometimes, so using a very light grey helps readability
Abstractions are always slower, than vanilly. Its tradeoff between optimization and expresivity. Hope you will someday meet some C++ or assembly purists ;) Its true you CAN write more performant code in vanilla JS. But given team of 10 people working on big project, what is a probability of bugs or bad things happen? How long it will take you to write that feature? Thats why you use abstraction over vanilla. If performance matters, you have to invest into vanilla over framwork.
Maybe check is visible instead?
[removed]
Hi /u/asifsha, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
May be try adding data attribute to both the images and then have onload attribute for them with a counter. When the counter adds to 2 ie. both the images have loaded the trigger the animation.
That's not how averages work. You'd want `(oldAverage * index + newValue) / (index + 1)`. But really, why do extra multiplication and division on every step just to make an internal intermediary object obey the same rules as the public final result? 
https://en.wikipedia.org/wiki/JavaScript First sentence: &gt; JavaScript [...] is a high-level, interpreted programming language that conforms to the ECMAScript specification. What do you think that sentence means? Or these two: &gt; [JS] has APIs for working with text, arrays, dates, regular expressions, and the DOM, but the language itself does not include any I/O, such as networking, storage, or graphics facilities. It relies upon the host environment in which it is embedded to provide these features. Do you think the Wikipedia article is wrong? It's saying the same things I did. Also do a Google search for *programming language feature*, *list of programming language features*, and similar terms. We are using narrowly defined terms in this industry (just like any other industry). That's what allows us to discuss these things. The other party wouldn't know what we're talking about if they weren't properly defined. And when the other party isn't familiar with these terms or conflates them, we end up with a non-discussion just like this branch. E.g. if you ask someone about their favorite language feature and they answer with "Element.matches", they did not understand the question. `Element.matches` is of course really convenient for event delegation, but this is just some minute detail of some API and not a language feature.
This is how component oriented frameworks work. If you have a table with 1.000.000 cells, the table is a component, and each cell is a component. If each cell takes a ms your app is dead. You will either page it or virtualize it. Fiber does the virtualisation at the core. Your saying that if an op takes a second to conclude on the main thread then fiber won't be able to do anything about it, which ... may be correct, but i don't see how that has any relevance because that's usually not the cause for jank. If you have enough visual elements, eventually the application will skip frames and interrupt the interaction or visual flow (animations, etc). This is what a scheduler can solve.
\&gt; but i don't see how that has any relevance. &amp;#x200B; "If something is going to be expensive to do, it's going to be expensive regardless of the underlying implementation – so things like scheduling will offer significant benefits."
I always find it helpful to look at what the ES3/ES5 version would look like when learning newer javascript syntax/features. https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=N4KABGD0lg8gRgKwKYGMAu4yoPYDsBndMAEwEN0ywBeMYMMgLgEYAaMeRgJndUYGYwAXwDcWXIWL0yvYTVIUyYoSFARoYAIIAnbWQCe4_EQWV5AbTY9-rACysArAF0xECSfMyO7AHR_tyERO8uSUyiBAA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.4.2
It’s totally possible to give a better estimate than this, you just have to know (in at least gross terms) who is reading. Source: studied reading—a lot of it—for a failed PhD run. 
Yes, I'm not a huge fan of it :)
WebStorm is great, but they didn't let students use it for even an open source project, so I've already moved to VS Code.
I've had problem with that solution multiple times, mainly with some sort of libraries that appends every time a new DOM elements (complicated ones), and setTimeout + debbuger was always helpful then ;)
As a student you can get a free educational license. :)
Students can get a educational free license by their school mail box.
I went through this at the time with Support, they confirmed that because the project had a sponsor, my licence was cancelled.
Because it's a good example of .reduce()-s versatility. You can basically implement all of Array's functional API with .reduce(). OTOH, the functional API is there for a reason, just because you \*can\* do something, doesn't mean you \*should\* :)
It's nothing new, but I've been building some stuff with mithril lately. Most of my experience is with react, but building applications with mithril is just so much faster and genuinely more fun
The capitalization example is easier done with map: let people = [ { firstName: 'michael', lastName: 'Scott' }, { firstName: 'jim', lastName: 'Halpert' }, { firstName: 'dwight', lastName: 'Schrute' } ]; function capitalize(s) { return s.charAt(0).toUpperCase() + s.slice(1); } let capitalized = people.map(person =&gt; ({ ...person, firstName: capitalize(person.firstName) })); Min/max/avg example is easier done with a straightforward imperative loop: let numbers = [115, 26, 99]; let min = Infinity; let max = -Infinity; let sum = 0; for (let number of numbers) { if (number &lt; min) { min = number; } if (number &gt; max) { max = number; } sum += number; } let average = sum / numbers.length; console.log(min, max, average); // 26 115 80 If you want to clean it up, just stick it in a function. Note that I don't flip-flop types. By the way, the ±Infinity stuff is basically how Math.min and Math.max work as well. The article does a good job at illustrating that using reduce for anything remotely complicated results in code which is much harder to follow.
In my experience, unless the accumulator/return type of the reducer is a primitive, you need to pass a type argument which simultaneously helps the compiler and provides better readability on intent than any argument ordering could provide. Example thing.reduce&lt;string[]&gt;((acc, val) =&gt; [...acc, val.property], []);
Or just `minimum: Math.min.apply( null, list )` and similar with `Math.max` ;) 
Wait for both images to load via onload: https://jsfiddle.net/6r3gw485/
Hi /u/normie42069xd, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
?!?! Last I read it was free for university students and open source projects granted that you share with them the idea of your OSS and they approve said thing
When you have a hammer and all that shebang
Not to mention on that same example - allocating a new array and spreading the old one.... Just push to the accumulator and return it!
If the open source project has funding then, even as a student not related to the funding or the project, you can't contribute using WebStorm.
JetBrains has a large astroturf community on reddit. You'll see them in most JB threads downvoting anything negative and generally rave about JB. It's very obvious.
Man, reduce confuses the shit outta' me.
Hi /u/abdalah_farhat, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
that seems nuts... look at an image and count to 12... i’ll read the article, it’s interesting where this comes from :)
Similar to SignalR?
The amount of typos in this (including in his code) makes it an awful read.
Any reason why you decided to parse the raw code instead of rendering it in the DOM first? That would be less prone to error right? Also, any consideration for background images used as content? 
I didn't downvote you. Sorry that you had such a bad experience, mine has always been good, but I never did something similar to you.
Really good article, thanks.
Thank you for that - it's helpful. Though I do want to say that I'm not assuming that JavaScript has anything to do with application design. My position is that there are patterns, idioms, and concerns that are either unique to JS applications or more prevalent in that environment, and I want to learn more about those. And even when certain ideas are common to most languages it can still be helpful to see them presented in JS terms. For example, I'm currently reading a book that's broadly about strategies for solving programming problems - reframing, simplifying, reducing. But all the examples are written in C++, so there's a lot of time and space given to dealing with fixed size arrays or allocating and freeing memory, none of which is a concern in JS. The book is useful, but it does make it hard to see the forest for the trees at times. If I could choose a different book that focused on the exact same concepts but used JS examples, I would read that book instead.
I like Belacqua, but man, that book seems painfully dated by being so specific. Not just ES5 but grunt, jshint, browserify, bower, traceur...
Taking a look at the table of contents - it looks like a primer on functional programming. Is that a fair assessment, or does it also spend time applying it to larger problems?
Hard to argue with completely free. VS Code all day.
Can you use “lodash” package throughout your library, using named imports but replace lodash with lodash-es in your webpack build?
https://github.com/krausest/js-framework-benchmark
Login form is not a real and complete HTML form. It doesn't have any submit ability, thus enter in it doesn't work, and browsers are less likely to remember the logins for players. You should have the buttons be inside the form, with `&lt;button type="submit"&gt;` and then you should capture the submit event, prevent event defaults and stop event propagation and send your own ajax calls instead.
It’s free for university students....
To sum up a number of the comments here, here are some handy rules to know when to use forEach, map, filter, or reduce: Use forEach when: - You want to perform a task on each element in the array - You do not want to change any data in the array - You want to iterate the entire array Use map when: - You want to return an array of the same size - You want to change all the elements in the array - You want to iterate the entire array Use filter when: - You want a new array with the same data, but less items - You do not want to do any changes to the data - You want to iterate the entire array Use reduce when: - You want a new data structure from an array - The new data is related to all elements in your array - You want to iterate the entire array But wait, there's more. Some other tips for picking the right type of loop. - Don't forget about our other friends, like `for() {}` and `while() {}`. These can exit early, and are generally faster than their callback counter-parts. - There's other great array functions that combine some of the basics, [check them out on mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) - Reduce should probably be used as a last resort. Reduce is very powerful, but often results in complicated and difficult to read code.
So who's the anti-Elliott? I've seen you recommend Rauschmayer in the past, and I like his books very much, but his content is also very low level, nearly spec level. Who's doing higher levels of abstraction well?
What article would you recommend instead?
Hi /u/rob_mat, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/aolhelp, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/akikio12, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/greymalik, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/j-byrd, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/VersionConflict, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/harrydry, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cally0611, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/istar00, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nohyphenshere, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
And you've come to the conclusion that it is "the fastest framework" by looking at this numbers [https://krausest.github.io/js-framework-benchmark/current.html](https://krausest.github.io/js-framework-benchmark/current.html) ?
Ok. Sorry, about that. Is this because it is a survey? I saw some similar posts and tried to structure it similarly. I also realize this is a new account and might look suspicious. Any suggestions on how to reformat to meet the guidelines? Thanks! &amp;#x200B; [https://www.reddit.com/r/javascript/comments/b5m68i/do\_you\_code\_in\_other\_programming\_language\_at\_your/](https://www.reddit.com/r/javascript/comments/b5m68i/do_you_code_in_other_programming_language_at_your/) [https://www.reddit.com/r/javascript/comments/b68o69/react\_and\_vdom\_is\_the\_final\_frontier\_of\_frontend/](https://www.reddit.com/r/javascript/comments/b68o69/react_and_vdom_is_the_final_frontier_of_frontend/) [https://www.reddit.com/r/javascript/comments/b66iuk/first\_project\_with\_react\_please\_check\_it\_out\_and/](https://www.reddit.com/r/javascript/comments/b66iuk/first_project_with_react_please_check_it_out_and/) [https://www.reddit.com/r/javascript/comments/b5ovv7/share\_your\_yarnrc\_file\_anything\_interesting/](https://www.reddit.com/r/javascript/comments/b5ovv7/share_your_yarnrc_file_anything_interesting/)
I ran the benchmarks on my own machine a while ago.
NONE of the examples is best solved with reduce.
RunJS is now available on Windows and Linux: [https://runjs.dev/](https://runjs.dev/)
But why it is so slow in this results [https://krausest.github.io/js-framework-benchmark/current.html](https://krausest.github.io/js-framework-benchmark/current.html) ?
we got a new dev here that loved reduce, none of the implemented uses have been error free so far. There are so few problems that are actually best solved with reduce.
Not only university students. I'm in high school and I have it for free. 
No idea. I ran it last year when svelte version 2 had just been released. It blew everything else except Inferno out of the water. 
No, it's because this question is asked pretty frequently here.
Ok, fair enough. Thanks for the context
So it is not "the fastest framework" anymore?