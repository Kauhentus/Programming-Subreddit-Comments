Didn't they stop unpublishing after leftpad? So only NPM inc have unpublish rights now? &gt; The result of the investigation concluded with three packages and three versions of a fourth package being unpublished from the npm Registry.
I forgot to say "thank you". From all thread it is the first (or second) attempt to answer the question "how to organize code in FP style"
Just find a really long page/Wikipedia article and split by space ;) 
&gt; I've seen, react, express, angular, vue, etc. But i have no idea how they all differ. Expressjs is for the server only. The other three run in the browser. The real difference between them is syntax, all of them can build most any app you can think of.
What I don't really get is how the dependency got in mailparser master? 
It depends on what's on stack overflow. 
That's fair, I'd just assumed that they disabled it altogether.
In that case we're in agreement. 
What's the problem if content is useful and not junk?
Well hot damn. I thought it only ran locally installed. One off globals is an awesome idea. Thanks for the correction!
&gt;it is not always fashionable. it's useless in JS. Only people who use it are people coming from Java/.Net who don't understand JS fully yet.
How does it compare to https://crossbar.io/?
[This](https://devdocs.io/) is a cool site for many docs all in one place..
I think the implication of his comment is that you could source your gitignore files from that repo. Looks like you're using an api right now, but maybe you could add a second source.
It [did not](https://github.com/nodemailer/mailparser/commits/master). The last version of mailparser on github is 2.2.0, where the author clearly states it is deprecated. So only the version in the npm registry was broken, which seems to fit their action of revoking the author's npm token.
http://tylermcginnis.com Very legit
But the content is *not* useful, and *is* junk
https://stateofjs.com/ You can't just understand the frameworks without seeing them in relation to the entire ecosystem. Note that the second most popular front-end framework is .... NO FRAMEWORK. 
I think DI helps on vast, long-lived projects where no one developer will ever really be able to mentally behold the entire sprawling application, and only really understands the part their team works on. On the other end of that spectrum, if you are working on a project that is inherently contained, or something you build all on your own, it just feels like an artifice of shoots and ladders that doesn't help at all.
&gt; "constructors establish the environment." I agree, though there is some nuance there, because "environment" can sometimes mean scalar value data (config etc) or other dependencies, or both. If you are mixing both, then many auto-resolving DI containers can have trouble with that unless you establish that environment early on in the bootstrap process, or use factories. And then what if that environment must change? This is why I much prefer passing data in as arguments into a method, and making sure that method's only dependency might be the actual dependencies that class was instantiated with. Dependencies go in through the constructor, data goes in through method arguments. When it comes to data models / dtos / value objects - constructors take no dependencies ever, and only take the data that constitutes a valid model / DTO / value object.
Did you even read the article? "React and Vue, in comparison, are universally flexible. Their libraries can be paired with all sorts of packages. React even offers an exchange of the library for API-compatible alternatives. But similar to Angular, React may be confusing too if starter kits or boiler plates are utilized. So Vue turns out to be the cleanest of all three frameworks because it strives for simplicity and ease of use. Vue’s code is extremely readable and there is no need in external libraries or documentation." I generally agree with the author and this isn't obvious to most people. How is this junk? 
&gt; Found the person eager to deflect racism. What exactly are you going on about /u/daemon-electricity? I legit do not understand.
Holy shit this is scary. From a "you may have a bug" perspective it's not that bad, but when you think about this from a security perspective, you might have security holes all over your code base. An attacker can potentially affect the logic / flow of your program in a weird way and then potentially abuse that. I'm having a hard time seeing how this can be fixed systematically. I'm seeing a lot of comments repeating the same 3 solutions: - Use `Map` - Use `obj.hasOwnProperty(...)` - Use `Object.create(null)` Those are good in isolation, but they can't really help a whole code base. In theory every bit of code that uses `obj[...]` needs to do this. That includes my whole code base and every lib that I use. This sounds like a fools errand to me. Even if I manage somehow to make sure that every single `obj[...]` call that comes anywhere near my code is safe, it only takes one dev to accidentally make it vulnerable again. I wouldn't blame anyone for getting caught by this. When you're thinking of using a dictionary in javascript, an object seems like the best solution. There's always the usual rule of thumb for security: "validate all your inputs". That can work, but what am I supposed to do? Have a blacklist of all Object prototype properties and ensure that all strings that are passed in as input are not one of those? That'll work, but it still feels like a fools errand. Every input string is a lot of strings. Am I missing something? Is there a better solution here?
The only issue I have with Traversy media, is i feel like he doesn't really explain what he's doing or why he's doing it. It's more of a follow along. I do like him and his channel though. 
Oh and the net ninja. 
What have you tried so far
in an application there's actually very little code that requires side effects. For example, you could write a react/redux app with functional components and the only part of the code you write that needs to be impure is your server calls. The rest of the impure code is used implicitly via react and redux. The disadvantage to this is often performance in some places but again this doesn't matter and there are solutions to the problem for performance critical paths. BTW ``Maybe`` isn't to deal with side effects it's a way of dealing with values that don't exist when the type system doesn't have nulls 
**HTML** &lt;div id="progress-bar-container"&gt; &lt;div id="progress-bar"&gt;&lt;/div&gt; &lt;/div&gt; &lt;button onclick="document.getElementById('progress-bar').className += ' full'"&gt;Click Me&lt;/button&gt; **CSS** #progress-bar-container { background-color: #ddd; width: 300px; } #progress-bar { background-color: #08f; height: 20px; transition: width 0.5s linear; width: 0%; } #progress-bar.full { width: 20%; } No JS here, what this does is it increases the value to 20% but no higher, I’ve experimented further but I’ve come to the conclusion that one button incrementing the value by 10/20% each time isn’t possible without JS and that’s why I’m here lol
Well technically you do have JS in your HTML in the onclick handler. Might be best to move that to a separate file. In that file you could handle the incrementing and cycling. Something like: let progress = 0; const progressBar = document.querySelector(‘#progress-bar’); document.querySelector(‘button’).addEventListener(‘click’, () =&gt; { progress = (progress + 1) % 5; progressBar.style.width = (progress * 20) + ‘%’; }); 
Of course so how would I link that to the button and the CSS progress bar making it increment?
The npm module "[os](https://www.npmjs.com/package/os)" has 29K weekly downloads and 276 packages depend on it. This is **NOT** the Node core module [OS](https://nodejs.org/api/os.html). It is a one line module that is `module.exports = require('os')`. While it isn't currently malicious... one patch release and it would affect a lot. There is simply no need for this module, which begs the question of its purpose. I reported it to npm a while ago and it seems like they don't care.
genius
I like how blunt you are. friendship accepted
Best place is here by far: [http://reactjs.org/docs/](http://reactjs.org/docs/)
hey, Have a look at this https://codepen.io/anudeepd/pen/NMazwM. I added required JS code to wrap in span element. Let me know if that works.
I've been using [this package](https://www.npmjs.com/package/gitignore) for a while that does the same thing.
Thank you. I won't be able to test till Monday. I'll let you know! Really appreciate the help 
Iirc you still have a 24h grace period to unpublish a module after publishing it.
So why is it better than hackerrank or other code challenges platforms?
I recently switched my site/blog to Gatsby and it's pretty nice if you're familiar with React. You can just host it on GitHub pages and there's a section in the docs on how you would do that. https://www.gatsbyjs.org/ 
Put it in a javascript file and put a script src in your html file, similar to how you add css requirements to your html. The JS will run when your page loads and attach the click event to the button.
Why is there this ecosystem surrounding Node where they simply accept packages from anybody? Wouldn't it be better to review source code and manually approve each submission / update of each new package?
Does the pip registry do that? What about Maven? Or Bower? Or Chocolatey? Or Homebrew?
Ok sure, they are all the same. So ideally we need staff moderating all of these repositories.
# Design goals Produce the fastest possible static websites using the latest and greatest technologies and best practices Intuitive, tailored experience for building static websites with Markdown, JSX, and ES2015 that makes the underlying tooling and frameworks invisible Minimal configuration, just focus on your content # Under the hood, Hokusai is powered by these fantastic tools: [Webpack2](https://github.com/webpack/webpack) [Babel](https://github.com/babel/babel) [Inferno](https://github.com/trueadm/inferno) [Styletron](https://github.com/rtsao/styletron) [Remark](https://github.com/wooorm/remark)
I just looked over the docs and I don't see the difference. Can you explain to me how one can be potentially more dangerous than the other?
&gt;We determined the published versions of mailparser that depended on http-fetch-cookies did not use the module in any way Got to love them stale dependencies
My code is shit until proven genius.
[https://github.com/Relaxed\-Theme/brackets\-theme\-relaxed/blob/master/README.md](https://github.com/Relaxed-Theme/brackets-theme-relaxed/blob/master/README.md)
For a quick explanation of what some of the frontend frameworks \(React, Vue, Angular\) are leaning towards I've written up [How components won the "framework wars"](https://codewithhugo.com/how-components-won-the-framework-wars/). React, AngularJS, Angular, Vue, Inferno, Preact, Riot, Ember are all frontend frameworks/libraries and most of the stuff talked about in the post are valid. Express, Hapi, Koa are frameworks/libraries that you can write backend applications in \(ie they run on the server\). This has been enabled by Node, which is a runtime that allows you to run JavaScript code just like you would Python/Ruby/\* insert language of choice \*.
I don't think I tried that one haha..
You sure it's not this.props.state.risk\_level?
This is exactly why it's dangerous because it looks natural.. for now. The content of the README is sparse enough and links to official docs that is why it "looks" official. On the comment you originally replied to, it's already mentioned that the owner of the 'npm-os' may push a malicious patch one day and all the projects/websites etc will automatically update to it. `require('os')` in node *does not* require an npm install. 
makes sense if you accidentially push some credentials
No, the people using the modules need to make sure that they are not using malicious code. Same as code from github, stackoverflow, etc..
 {risk_level: state.risk_level.risk_level} Should be {risk_level: state.risk_level.risk_value}
NPM can't possibly have the resources to audit every package. It's all open source. After Heartbleed there was some discussion that there needs to be more shared responsibility for open source software. That seems to have fizzled out a bit. Corporations that get to use FOSS software for free should be expected to contribute (including security auditing). Even as individuals we should take ten minutes to spot check a library once in a while (which should kindof happen anyway during the normal course of your work). Some kind of code signing or web-of-trust-like strategy would be great. Even having your github stars cryptographically attached to your public key would help demonstrate that you're not going to throw away your good reputation just to harvest a few thousand environment variables.
They could change their implementation to be something malicious. Users would get the npm update and never know. 
I finished the my landing page for my new side project (https://httptoolkit.tech), complete with interactive examples of the UI I'm planning embedded in the background of the features I'm talking about. The core is Gatsby + React + styled components. The graph uses [VX](https://vx-demo.now.sh/gallery) (way easier to get working with React than D3/Victory/Recharts), and the response body editor is built on [Monaco](https://microsoft.github.io/monaco-editor) (the editor that power VS Code). Building live examples into the page has actually been a really fun way to prototype bits of UI, find tools I can use for the real MVP now, and iterate on what I'm building and how I'm pitching it at the same time. It's things like this that really let you see the power of universal JS imo: you can build demo components for a desktop app and trivially get them working live in the landing page itself from day 1. Painfully cool.
Tho if you've already pushed sensitive info probably better to just change it at that point
I think you'll like my ORM, tabel, http://tabel.fractaltech.in. It does away with the concept of "one-Model-class per table", and provides a few primitives like "table", "raw", "cache" etc to work with your data layer. This results in your domain-logic related code being written in the form of functions that take some data as arguments, do something with that data, and return some data in response. These functions can then be reused across various parts of your codebase, like sockets, job-queue, cli etc.
Dependency injection yes, but why the DI-container though? In JS, since you can pass functions as params and return functions, your DI should at worse look like a higher order function: `const makeService = (dep, otherdep) =&gt; dep.shouldDoSomething &amp;&amp; otherdep.dosomethinelse({ my: 'params' ))`. Coming from React, where you just build up your tree of components with direct imports, I started working on an AngularJS codebase where you use strings to reference singletons defined on the global `angular` instance... it just doesn't make sense if you have a way to include other modules (which as I understand, AngularJS wasn't created at a time where that was necessarily true). In Angular the DI with types sort of makes sense, but again, why do I need to state the deps in the constructor _and_ the module? It's cool to be able to swap out services with the same interface but instead of changing the import where the service is used, you change it somewhere along the module chain. 
I‘ve started learning web on more or less my own for a year before taking a job as frontend dev. Within just a few months I learned so much more by looking how my coworkers and seniors solve issues than I would have if I was on my own. 
This bot is really cool. Anybody know how it works?
I think others pointed out the issue. Try out the [redux-logger](https://www.npmjs.com/package/redux-logger); it saves me a lot of headache
I try to think of what I'll think of the code in six months. If I still think it's awesome then it's genius. Otherwise probably not.
&gt; So only NPM inc have unpublish rights now? I believe that's correct. They removed the ability for users to unpublish or delete npm entries; but npm still reserved the right to do so for security issues such as this.
Nope, thank dog I am no longer a teenager
Since it's just for practice, it doesn't really matter. But localStorage is easily lost (generally by the user when clearing their history/cache), so it's not really the best way to store persistent data for the user. Basically, you should expect the data to be lost/removed at some point in the near future. Also note, the localStorage data is also not shared across different browsers, which might be a bit annoying for the user as they always have to use the same browser on your app.
It downloads and executes an npm package. In fact the result is the same as your command, except it doesn't save it to package.json (also your command doesn't work without `-g`). It comes with npm &gt;5.2.0.
No. Using local storage to hold something like a bunch of strings is exactly what it’s meant for really. Just remember that anyone using the same computer can view that storage so never store anything private. 
https://github.com/Netchicken/Guess-the-Definition The dictionary is under Assets. 
I’m not looking to add the item dynamically, I just have a JSON file and I want to throw this object in the middle of the list of objects
If you reread the article you'll see that the unused inclusion of http-fetch-cookies in mailparser was deliberate and the result of an unauthorized push to mailparserr
Well it looks like where it says for(var i=0; i&lt;lines.length; i++) { process.stdout.write(lines[i]); } You need to change `write(lines[i]);` with `write(YOUR_PROGRAM(lines[i]));` and then somewhere else you have something along the lines of function YOUR_PROGRAM(input) { const num = Number(input); if (isNaN(num)) return input; return num * num; } 
License bot is open source, and the code is available on GitHub. https://github.com/JoshMcguigan/license-bot
Is there a reason why you're using an object and not an array? Do the indexes need to be assigned by you or will the automatically assigned indexes that happen when you create an array be ok? I don't know what you're actually using it for, but using an actual array rather than an object and using splice would be the easiest way to do this.
The problem is... you install a module that's nice and clean, it has 3 dependencies and it uses all three sanely. Of those 3 dependencies, two are self-contained and one has 4 dependencies. Of those 4 dependencies, three are self-contained and one has 2 dependencies, and of *those* 2 dependencies, one is self-contained and the other depends on ALL THE PACKAGES, and congrats, you now have 80% of npm in your node_modules including four different versions of lodash (none of them current), three versions of underscore (none of them current), jQuery (for a Node application), 6 different promise libraries even though you're developing for Node 8+, a slew of libraries that are like 2 lines of code but still bring in crazy dependency trees of their own, and at least 8 different pre-compiled binaries that do God-knows-what. I think the solution here is a `sane-npm` package manager that wraps `npm` with some extra functionality: * `sane-npm install foo` first analyzes its dependency tree. If it would introduce a fuckton of dependencies, it warns/stops install and calls out the packages that are "super-dependent". * `sane-npm install foo --fix` does the same, but also automatically opens a GitHub issue with each "super-dependent" package. * `sane-npm install foo --quickfix` does the same, but makes the GitHub issue angry. * `sane-npm install foo --mock` identifies dependencies that bring in lodash/underscore/&lt;your favorite utility library&gt; to use a single function that's identical to one available in the standard library since ES5, and automatically creates a Hacker News post calling out the maintainer for it. I'm only partly joking...
I have no clue tbh. I’m just trying to add some items to it because I use the website and noticed some stuff that should be in this big list of stuff is missing. I figured I would just add the items to help out the dev but I assumed there was some way when editing the .json file to be able to add an item without having to manually increment every item after it. 
Sounds like it would be easier to do it elsewhere in the code. Probably better just to let them know it's missing.
Thank you, it does help. I'm actually a student of fullstack dev as well but we've only just begun and haven't covered anything beyond html, css and hints of JS! I'm excited to create interactive pages and especially excited to be able to understand more of JS. Thanks!!!
Im self taught with about 2yrs of experience and basically this sums it up pretty well. Having a mentor isn't necessary, you're not going to be worthless as a developer without one. That being said, how much of a negative impact it has is largely contingent on what kind of person you are. That boils down to, if you're aware of your weaknesses and can actively account for them while learning you will be fine
Have to be careful with this from people of different countries. Germans, for instance, generally prefer things to be more formal than people in the UK. I've had first hand experience with web apps using first name as putting some Germans off. 
That's a great summary. There's also [StimulusJS](https://github.com/stimulusjs/stimulus) which is somewhere in between full-blown front end frameworks and manipulating DOM manually with jQuery. It simply gives you an ability to break up your app into reusable blocks.
... Why don't you check wtf your process.env.database_url is and check if it is correct
Just because you can, doesn't mean you should.
calm down dunno why your so mad
That has nothing to do with functional or object oriented programming at all.
I'm not trying to be a jerk, but learning JavaScript as a frontend developer is not optional. If you are still in school and wondering "is learning JavaScript really necessary?" - just trust me (and I'm sure every one of your instructors) - you absolutely do. CSS is only used for layout. Any logic, conditions, dynamic interfaces, etc will be built using JavaScript.
I think this could be best implemented by using D3.js: drawing particle + calculating force + circular node is pretty easy with D3's native feature.
I'll take a crack at it. "First, on my getOrderBook and getTicker function I can't find a way to return the values without first assigning to a variable." See this: https://eslint.org/docs/rules/no-return-await So it looks like the linter will complain if you directly return await, but it's not really a problem and the warning can be disabled? Am I reading this wrong? To clean up the 'then' callbacks, you can always move the refactor the function and call something like getOrderBook().then(handleOrderBook); getTicker().then(handleTicker); I would also get rid of that global state (the 'lets') and have getCurrencyData do what the function name says... get the currency data. Your function currently 'sets' the currency data on some global variables. 
 const sq_ints = num =&gt; num *= num; Why are you reassigning the parameter? Why not just return the squared number?
And if you've come up with a way to use a popular library that you haven't seen anywhere else, it's a pretty sure sign that you definitely shouldn't.
&gt; Disclaimer: beyond this point you probably won’t learn anything. I’m going to use JSX for things it shouldn’t be used. The article clearly says that.
It is interesting trivia and informative about implementation. But some whizkid 22-year-old is going to do something stupid with this and I'll have to fight him for four days after I reject his PR.
Al right, so the most probably reason is: your database is empty, as opposed as your local database. Since it seems you are using no framework and building up your stack manually I'd recommend you to start using migrations. They will shape your database (schemas) using scripts, you can run them up and down (do/undo) and write custom code in case you need them. They will both run on development and production, and create a table that will keep track of which of them had run, so it knows you have to run a new migration before deploying. All of this in an effort to end up with the same schemas and database state (not the content itself necessarily) on every environment. Check this out this might help https://db-migrate.readthedocs.io/
how can you get this first name?
I feel like you did Angular a huge disservice here, so I'll add to it: Angular (all versions): Highly-opinionated framework that works with DOM manipulation through Model-View-Controller, with all aspects covered. Included is routing, HTML, controllers, etc. Building templates mostly with specific divs that can do interactive state management (mostly through ui-router in Angular 1.x), that allows you update/interact with the DOM in "real time." Angular is an everything-out-of-the-box framework, meaning, you ONLY need Angular (any version) to get an app up and running. If you're someone that likes that, Angular is perfect for you. If you're someone that would prefer to select your own Model, View, and Controller, then Angular is NOT the one for you. It creates a MUCH steeper learning curve, which can hurt you in the future, because learning to do it "the Angular way" is not typically how you would do it outside of a framework; however, I HIGHLY recommend you learning how everything would work in plain JS as well as in Angular. On the other end of that, because it's so opinionated, you can make a career out of being an Angular specialist and not ever have to worry about learning other tools. There is a lot of high-risk, high-reward with Angular in all version, but in 2+, there's a heavy reliance on TypeScript and RxJs, both of which are fantastic tools on their own, leading to a wonderful knowledge of the future of Javascript.
It says in the article
That's true but my main problem is trying to figure out how to rewrite any function to use their method of standard input/output.
Awesome, thanks!
I've been impressed by the combo of Gatsby + [Netlify](https://www.netlify.com/) recently. Feels a little bit more powerful than GH pages, but still just about as easy.
Is this hosted on GitHub Pages?
Wow, I understand exactly what you are saying. Thank you for helping me.
JavaScript is the only way you can make a webpage interactive without having the user install cumbersome software. All frameworks that make webpages interactive are JavaScript based. Including bootstrap and jquery etc. so if you are making anything but static webpages you will need some knowledge of actual JavaScript. In addition to being the only viable front end language of any significant use these days, it can be used to be a backend/ general purpose programming language ( node.js) and can be used to build both hybrid and native iOS and android apps (via react native). Basically trying to be a Front end developer without knowledge of JavaScript is like trying to build a house with glue only without using nails and screws. 
I understand what you're saying, I guess modifying the boilerplate shouldn't be an issue. As long as the output matches what they are expecting. Something like this: var stdin = ''; process.stdin.on('data', function (chunk) { stdin += chunk; }).on('end', function() { var lines = stdin.split('\n'); for(var i=0; i&lt;lines.length; i++) { var parsedLine = paraseInt(lines[i], 10); var result = sq_ints(parsedLine).toString(10); process.stdout.write(result + '\n'); } }); Same idea of what /u/our_best_friend was saying in their post. Thanks for the links and help, reading the docs now.
https://codepen.io/anon/pen/QrqeQp?editors=1010
Same, I'm often right!
Awesome stuff! This is really handy!
Don't forget dependencies bringing in babel
Cool! I wish I knew that existed before. Does it do multiple environments at once?
Why thank you sir! 
Hi, yes, the code in that blog is. Merge sort, for example can also be implemented with functional programming and it's using the divide and conquer methodology. And we can probably implement merge sort without study the methodology in advance, yet study it will help us solve more board set of similar problems quicker. Dynamic Programming is also a methodology that we use actually very and probably without notice we are using this method, it's great at solving optimization problems(such as the knapsack problem).
See, what you just described is overcomplicated. That's why Angular is overcomplicated.
I don't think he actually gets the name, he just uses the Facebook button which displays the name and crops out everything but the name using CSS and then styles it and places it where he wants. What I'm not sure is how he knows how long the text is. I don't think he does, so I'm guessing it crops names other than "John" incorrectly. Which is why I see "Facebo" when I'm logged out of FB.
That's not necessarily true. For the longest time it's been bad practice to "do work" in react render methods, but the new suspense API stuff involves doing just that. Things don't change unless you try new things. 
This is how to get your website reported for privacy invasiveness.
Speaking of creepy - check [this](https://clickclickclick.click) out
[Enki](https://www.enki.com/) Sounds like this could work for you. They have a nice mobile app and offer "workouts" for various technologies. I use it on my commute sometimes.
It's important to mention that in 2018 there is a **huge** difference between building web *sites* and building web *apps*. When building websites with minimal UI interactivity, using a framework like React or Vue may seem like overkill when all you want is some form field validation on your Wordpress contact form. Interactive *web apps* is where frameworks really shine. Far too many people who have built mostly websites begin to learn a framework and throw their hands up in despair at what seems to be excessive complexity, without realising that frameworks were not built for their use case.
Does anyone have experience with Hugo? I messed around with it a while ago , and it seemed very promising. Didnt get to explore it much further
Agree. Docs is enough!
Cool. It is like a hosted version of Dash.
This is more than likely the culprit! Good catch
I am so tempted to make some lib for crypto and get it included anywhere to just check one day how many WIF / private keys it would be able to sniff out.
This article is literally a crap rewrite of: https://blog.risingstack.com/node-js-10-lts-feature-breakdown/ basically the same sections and wording.
Javascript is especially popular for the entirety of the "full stack" right now. E.g. a MERN application made with React.js, backend made with Express.js using Node.js to access a Mongo Database...
 donuts.forEach(({ type, cost }) =&gt; console.log(`${type} donuts cost $${cost} each`)); https://jsfiddle.net/2r4cjLxj/
What we need is a "web of quality and security" decentralized reputation system for open source in general, where projects accumulate a higher score as they're reviewed by more people, and reviewers improve thier scores (and influence) by the quality of their reviews. A project's maximum possible score would be the minimum score among its dependencies. When a new version is released, it gets a score of 0 for both quality and security. If I want to use the new version in my project and care about my project's reputation, I have a strong incentive to review the new dependency. Or I could eliminate it from my project, or extract the functionality I need into a new, more focused, more stable dependency. 
nice &gt;)
http://egghead.io/
I wouldn't focus on the implementation technology and would treat the tool like a tool and not like a library. My personal preference is [Hugo](http://gohugo.io/). It has a lot of features, it is mature and it is really fast.
I actually don't know the size but there are two element that use to crop name from button. - One of them is picture which is 40px - One of them "Connect with" text element which is almost 138px. I move iframe with these values left and right and change the width and get only name from iframe. Regarding "Facebo" thing, Yeah, that's right. But i think, it can still be determined. You could measure the width of connect button and check if it has similar values with "Connect with Facebook" button's width. Then you could say that, i couldn't determine your user name or something. I didn't spend too much time on it. It still need some polish even for this sample. I'll work on it when i get chance.
I actually don't understand downvotes. I was trying to help JS community with explaining this thing and get downvote. I think some people misunderstood the subject. Just think about it, how powerful that information is!
I've seen Titef mentioned a few times on here. Thought I'd finally ask some questions. I've used Jasmine, Mocha, Jest, Tape and various other testing libraries/frameworks over the years. Not once have I thought man Jest is nice and all, but I wish it was 3x as fast, and I wish it was less than 3kb. I have no idea what 3 times faster means here, I assume my test is the bottleneck and not Jest, so by switching to Titef I might save like 1 second over 1,000 tests, but I wouldn't expect my whole test suite to run 3 times as fast. CLI, programmatic approach, pluggable reporters etc are pretty much par for course. What does this have that differentiates itself from something like Jest? What features would a Jest user miss if they started using Titef \(like for example, there's an awesome vscode plugin for Jest, Jest has mocks, and fake timers, and what not, does Titef?\).
thanks!
When I first started in web development I used to code in PHP and tried as hard as I could to avoid using JavaScript (jQuery at tops). With time I started to realize that JavaScript was not only necessary for my job (frameworks and libraries strated to popup everywhere in Js) but I understood how immensely powerful it was by itself and how much I could do. Nowadays I barely use it for front-end anyways. I use it for ML, webservices, data science, etc. JavaScript is very very powerful.
Yes, and we shouldn't be celebrating these types of personilzed messages without user consent. I know Facebook has terms and conditions that users accept but I don't think they realise how their data is being used and who is using it. The recent Congress hearing shows just that. It's a cool concept, but extremely creepy and not privacy friendly. 
The normal way, except maliciously :). How this works is that npm doesn't have anything to do with github at all. When you release a package on npm, you do it from your own local version, which *should* be the same thing as on github, but that's a social convention, not an enforced one. (In fact in the general case, it's not possible to verify this (without completely reproducible builds that is).) So.. a developer releasing a new version of a package on npm does... ``` git pull ... do whichever build steps are necessary npm publish ``` If an attacker can obtain the developers `.npmrc` file, they'll be able to impersonate them and `npm publish` will also work for them, so all they have to do is ``` git pull ... do malicious changes to the code do the same build steps npm publish ``` and voila, there's a malicious version of a package on npm. (The true developer would likely follow with ``` git push ... git push --tags ... ``` so that the new version (and release tag) also gets to github, but that's not a requirement.)
Terrific idea and brilliant execution! One thing to correct: when You complete "play" section and go back to code, text with "Well done! Return to poem selection" is still visiable and is veiling code;)
Any links to this package? And what drawing library do you suggest? 
https://www.npmjs.com/package/cubic-bezier
Some of these concepts do make sense and are incredibly useful. For instance this: &lt;Sort&gt; &lt;List /&gt; &lt;/Sort&gt; It's maybe a weird way to put it, but imagine you have a bunch of components that connect to a store to fetch a theme. Now you want certain of these components display in night-mode or inverted or whatever. You don't want to fork the entire component and go through complicated transforms consisting of RGB converters and whatnot *each* time it happens. You also do not want to touch the store and create x variations that need to be managed again. Using JSX and modern concepts like context you can make transforms declarative and central: &lt;InvertTheme&gt; &lt;Section /&gt; &lt;/InvertTheme&gt; Here's a demo for instance: https://codesandbox.io/embed/mjv84k1kn9
Couldn’t you retrieve the text using JS and hide the button visually?
Math involved in Bezier curve drawing is pretty easy, so might aswell not use that worthless package and make one yourself, include actual rendering, and then publish it because few functions that only can return a point is a joke.
And even if you need to know the index of the element, \`forEach provides you index an optional secondary parameter. donuts.forEach\(\({ type, cost }\) =\&gt; console.log\(\`Donut ${index} : ${type} donuts cost $${cost} each\`\)\);
Unfortunately, it's not possible. It's CSS hack and because of cross origin problems we couldn't reach iframe content elements.
Awesome project!
I was thinking the same thing... want to take a crack at building it?
In the case of Archivator, it's about keeping copies of things locally. One use-case could be to quote the article and elaborate from it with statement like: Archived from example.org/... on 2018-04-30 at the bottom. So that if an author wants to be sure what he refers to is still accessible 10 years from now. The local version also gets parsed, images are also copied and refered to locally, the content converted into Markdown, and all text gets slurped into a list of words with a count of usge for each of them, minus stop words. ({"hello": 20, "world": 20, "javascript": 18}} so that I can guess what's the content of the link. That said, next steps will be about flooping through articles, and adding to an Index. Then, another use-case will be to get all words, if they look like it has a list of ingredients with measures, I'll keep them aside &lt;ul&gt; &lt;li&gt;1tbsp salt&lt;/li&gt; &lt;li&gt;2tsp sugar&lt;/li&gt; &lt;li&gt;1cup of Milk&lt;/li&gt; &lt;/ul&gt; ... {"ingredients": [ {"name": "milk", "measure": 1, "unit": "tbsp"}, ]} Where I could then index and tell which ingredients I have, and know which recipes archived could use it. I can't wait to get at that point!
Yes, I use it for my personal site: https://github.com/ciscoo/mateo.io
Some of the things I encountered lately where Hokusai stable release would improve is: * Dev experience * Live\-Reload * Components * building your site with components without caring about CSS getting bloated * JSX \(you could argue this is a bad thing\) * Just a static site \(Easy Deployment, SEO, Speed\) * You can bring your data from anywhere * User experience * High performance \(Loading, Interactive\) * Can be very interactive * PWA \(Offline, working with/out JS\) Something that really bothers me is that I can't use utility css classes and I would really like to keep my site working without js \(menu with checkbox/:target\)
opened PRs: [https://github.com/DiegoRBaquero/node\-os/pull/2/files](https://github.com/DiegoRBaquero/node-os/pull/2/files) [https://github.com/DiegoRBaquero/node\-vm/pull/1/files](https://github.com/DiegoRBaquero/node-vm/pull/1/files)
That is very cool to hear! Actually it is also meant to be about learning to code by seeing it in a different way (than just "functional").
I have written tons of path implementations for my animation library - you should be able to use them pretty easily: http://github.com/anim8js/anim8js
What? Is this still debatable? I did a bunch of interviewing like this a year ago, and even then people seemed surprised if I used `var` anywhere (old habits...). In certain circumstances you might need to take compatibility into account and be more careful, but in general I thought there was pretty good consensus that full ES6 is a good goal everywhere at least. An interviewer (or interviewee) not recognizing ES6 code at all, as here, would be a screaming red flag to me.
Alright, so the real issue here was that the NPM keys for that package were compromised somehow. I think we'll have to start adding security to modules, sandboxing them so they can only use certain whitelisted Node calls, and they can't change any prototypes, that kind of thing.
OMG Get your mind blown with backreferences and case-insensitive matching.
But he already has the canvas bezierCurveTo function. And apart from the curve itself, you just need to draw the handles etc.
Quality contribution
Do you want to render your bezier curve to triangles or to pixels? triangles: https://www.npmjs.com/package/tesspathy
The hard part is [drawing lines in webgl](https://mattdesl.svbtle.com/drawing-lines-is-hard). SVG can do beziers. Depending on your use case, an easy approach might be to use SVG and render that to a texture and then use that texture in your webgl scene.
Quality libraries, skids.
TLDR; Use `?:` at the beginning of your group to omit it from matching results.
Quality attitude
Loved it! Reminded me of this little interactive js "puzzle". Albeit a much more depressing one: https://codepen.io/faso/pen/VeMyYK
Hey @iends thanks for the feedback, but i wrote this reading many blogs and nodejs commits and one, you mentioned, so yes it have 2 feature that inspired by the post or you may call it as crap, may be that was the beauty of writing for the person who wrote it and i could get a better way to potrait. 
You can also use the third parameter to mantain all your variables inside the function scope and dont access external variables. donuts.forEach(function(donutSummary, i, ds) { var donut = ds[i].type; var cost = ds[i].cost; console.log(donut + " donuts cost $" + cost + " each"); });
Actually I would like to use that curve in Three.js, which already provides support for curves. I'm just missing to tool to interactively draw them, which I could of course create, but I was wondering if there was something ready
&gt;Rejecting worthless things is a quality attitude, but unironically yes
&gt; Linux depends on 1500 pieces of software and has been exposed to vulnerabilities because of it. WTF. please point me to literature where the Linux kernel depends on 1500 pieces of software. This is just blatantly wrong. 
Ehm.. Is this a joke? Docker cloud is shutting down in about 2 weeks.
Is it? Dammit I didn't know, first thing I've stood up on it.
.....we hope. 
&gt; The Linux Kernel is just a bunch of C files that get compiled by running make. There's no 1500 pieces of software anywhere. Sounds like this is a philosophical question of what you think differentiates a "pieces of software" from "C files."
In order to do this, you can't be modifying `innerHTML`. Every time you do so, everything within it is redrawn. ***** I believe you can use `insertAdjacentHTML` with `beforeend` to have it work: tableRef.insertAdjacentHTML('beforeend', allRows.join(' '));
could you explain how exactly React and Paper.js works on it? It is really cool.
It is coherent, and I liked an invaluable resource which can be used to solve any problem regarding bezier curves, but of course, you will choose to be ignorant fuck because you're just a retarded JavaSkid who when asked to write a fizzbuzz would firstly try to check if it's on npm.
Have you compiled a linux kernel before?
Sure, I can tell a bit about the apps structure. The app is bundled with webpack, and the rendering of the menus and routes is handled by React (React-Router). The "game" / "interactive" part is handled entirely by Paper.js, which uses a &lt;canvas&gt; Element to render vector graphics (such as the "Bits", the heart, and so on). Paper.js is basically a very nice utility-belt when it comes to drawing on a canvas. You don't need it, but it makes things more streamlined. Definitely the most fun part. The highlighting of the code is handled by highlight.js. Let me know if you have any questions. 
So, what's the bug? Give us a place to start.
So, your selection algorithm isn't quite right. The reason it always picks the first available, is because you are only checking that there is A winning move if they make that selection. What you need to check is no matter what the human does, that it will not lose.
Can you look through my code once and tell me what exactly I should be changing there?
The easiest way to get help is to drop this into a codepen, that way I can clone it and try things and let you know what I found. It would take me significantly more time to dig through your code, and rewrite a portion of it.
Thanks! Here it is: [https://codepen.io/iamycee/pen/ZoaoWe](https://codepen.io/iamycee/pen/ZoaoWe)
Rubbish
Care to elaborate? Your comment isn't helping anyone.
Sorry, I will have to revisit this later. There's a few issues I am running into with your code. The easiest to fix is you are using a global variable for availableSpaces, which starts messing things up with recursive calls. Make sure you only use local variables in recursive calls. But the algorithm itself is somewhat flawed since it is selecting a human move, when in reality, it should be evaluating the AI move based on what the human COULD do. So it shouldn't be picking a human move at all. It should simply eliminate all moves that result in the human winning.
The Stripe API is well documented and you can use a test API key while developing, I integrated a Java app and it was nice to work with. You can use node and set up a redirect in IIS to serve your API from node over port 80
code example for `Node v=10.0.0 error code` looks wrong
I’m half way through it and I’m doing a masters as well. It can be done in a year if you make the commitment.
also OP, i noticed you incosistently place a spacebar after your `if` and similar statements you should pick one sytax style and stick with it, otherwise im just left with the impression you have no attention to detail when it stands out to me from across the room
https://github.com/tjanczuk/iisnode
Love the idea, the sunset one takes forever though.
my instinct is to leave the cache out of the redux store, it should not be represented in your application state i've switched from react+redux to preact+mobx a year ago and have never glanced back preact is, well, obviously fantastic, and mobx has shown me the light and i'll never waste all my time on theoretical app architecture best practices again redux made architecture good mobx made good architecture easy
interesting. ill definitely leave the cache out of the store. data !== state. regarding mobx --&gt; I will check it out. unfortunately, at a fast moving startup, switching frameworks/refactoring can be viewed as a major time waste. upper management may not be supportive. regardless, it is good information for me in future projects.
Okay, thank you. I'll look at solving it from that Point of view
I never acted like I didn't know what you meant. So I'm a contrarian who should understand what you mean not what you say, but you're just being normal and helpful when you bring up JS technicalities that are both irrelevant and untrue? Try this in node: const hi = 5; hi.hello = 'llama_turd'; console.log(hi.hello); Report back your findings!
What rock have you been living under?
This indeed worked, thank you very much!
I tried my hands on a chrome extension recently (without react) and I noticed that in order to see changes after saving, you have to reload the extension and then reopen the dev tools window. So if you want to see console output and you are working on a nasty bug, you continuously have to re-open dev tools. Did I do something wrong or is there a better way to develop chrome extensions?
What makes this different/better than existing solutions? (ex: JsFiddle.net or CodePen.io)
fixed. Thanks for the feedback, it was my second article and i am learning :) 
Very nice indeed, can you edit the side bar items? 
Unfortunately I've done the same
[https://github.com/bfred\-it/webext\-inject\-on\-install](https://github.com/bfred-it/webext-inject-on-install) Here you go. I was looking for this for my project [https://2fb.me](https://2fb.me) but I didn't end up using it because it required giving access to the tabs permission which is kind of restrictive. 
There is an extension for that, look for something like Extension Reloader.
Yes. Webpack/Rollup will load it through the `module` field, instead of the CJS one. Btw, cool trick is the `main` field to point to `dist/` directory, instead to specific CJS file, like all usually do e.g. `dist/index.js`. Why? Because in case you run a file through Node without the experimental modules flag, and inside it you `require` such module that uses just `dist/` in the `main` field then node will use the `dist/index.js`, otherwise if you run it with the flag it will use the `dist/index.mjs` file. How to reproduce it? Create a folder inside your `node_modules/foobarry`. Initialize package.json. Create `dist/index.js` and `dist/index.mjs` files with different `console.log` outputs. Then `"main": "dist/"` and `"module": "dist/index.mjs"` in your `package.json` file. Final step, create `example.mjs` in your root **example.mjs** ```js import foo from 'foobarry' ``` and run it ``` node --experimental-modules example.mjs ``` It will output the log from `dist/index.mjs`, not from the `dist/index.js`.
Where’s the best place to READ about react? I bought a video course and got the react basics down pretty well, it then jumped to a HUGE redux section and now I’ve essentially forgotten the react basics. 
I kind of went with `["div", {class: $myClass, id: "world"}, "Hello World!"]` Yes it completely stinks but I hate writing HTML in JavaScript.
Only for the background side, I believe the UI can be updated (if you're loading the view via its path in the address bar, not sure about popup or content scripts)
&gt;ES6 is the latest standard What about 7&amp;8? Seems like this article is a few years late.
I feel your pain, I had the same issue. I was trying to workaround with programmatically opening the popup by sending an event from content script, but it seems like it is not allowed. Wish there's a better way for this. 
Except not as robust, or featureful, and without IDE support (though that could be added). No compile-time errors if your html is badly formed. And it's parsing source JS using `indexOf` add looks like it could be tripped up if your source code contains `{{` that isn't part of this template syntax (e.g in quoted strings, or in comments). It probably works well for the author, but I think most other people would be better off using more standard tools with better support and documentation. Hope that doesn't sound too harsh. With more work it could rival those other tools, but right now I'm not sure what this offers that something like JSX doesn't
How portable is keeping my flops in local storage versus something like a gist or fiddle?
So your `index` is a typed user input? You could just have a user select the index from a list (like a drop down or something). I think defining what exact issue you're experiencing when running your code would help me understand what needs to be fixed.
You might want to mention the issue you’re having
Really cool...but how do you delete items?
updated post with all necessary code. I'm generating the index myself.
select it and hit del 
I've thought about it, but that little phrase "decentralized reputation" reminds me of this [relevant XKCD](https://xkcd.com/1425/), and most research seems to be focused on e-commerce without any clear winners. If only there were a decentralized reputation system for evaluating decentralized reputation research. :) But maybe it's possible to treat dependency management as a form of commerce and find an existing approach that would fit. 
 const f = "u" String.prototype.suck = "butts" console.log(f.suck) dumbass
I guess i'm having trouble placing if this is really a security issue or just codacy trying to be proactive.
If that's an argument for "JavaScript can't have constants/doesn't have primitives", I could come up with similarly impactful arguments for probably every language I know (including Rust and C++, which undoubtedly have constants). If it's just a contextless insult, stop acting like a child. Actually, either way, stop acting like a child.
If users have no way of inputting a custom `index`, then there should be nothing to worry about. I think it's probably codacy being a little overzealous.
it does exactly what i said it does. as bonus, it proves you're a contrarian dumbass. go suck a butt.
Being self-taught isn't necessarily bad, as long as you have the proper resources. Being taught by someone else generally requires a time-commitment, whereas with self-learning you can decide your pace and practice on your own time. And even a tutor/instructor can impart you with his/her own bad habits. There are plenty of online resources and video tutorials like these that teach you the proper coding conventions, you just need to look for them. Good luck! https://www.turbo360.co/tutorials?track=intro+to+development
No, you should use ES3 so it works in Photoshop CS2. Seriously, what is the fucking point of writing the same thing over and over again, especially when the time to "write ES6" was 3 years ago? 
don't do drugs and javascript
Joining the JavaScript/Nodejs users group in your city is a good way to keep your motivation. I do so.
I have the same question!
 creating objects: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects creating classes: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes let: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this 
hey didnt expect a reply! thank you so much!!
Why the math? Imo this is a waste of time if you want to become a developer. Furthermore, I see this turning away people who don't like math who otherwise might like programming.
Never use var. 100% pointless. If you must know, you can Google it. It has weird scoping rules (gets hoisted to the top of the function or the page if you're not in a function). 
If you have specific questions, go ahead and ask. It can be overwhelming. MDN does a pretty good job of explaining things, but there can be gaps or times where some documents are using older conventions. The objects page, for example, shows constructor functions but not classes. The classes link after it goes into more detail with how classes work. Constructor functions as classes are considered an old syntax compared to what is done with `class` today. Similarly `let` (and `const`) are considered replacements for `var`, though you should know the differences, especially when older examples/code may depend on `var` and not `let` or `const`.
thanks!!!
Np. You should also use const where possible. (stops you from rebinding a variable) 
is it common to use characters like Δ or φ in source code?
Personally, I feel like I didn't really understand programming until I started reading mathematics texts on mathematical logic and computation theory, so I can see where OP is coming from. This resource that OP made to me doesn't seem in line with what a casual blog reader might be looking for....
Chrome is so unfriendly for power users it amazes me they keep working on the dev tools. If I want to run a extension on about:blank it my decision and you should let me roll with it. 
When dealing with math why not use the symbols that math people would know? It’s not a super common thing to do but it was fun. 
I can't wait for the day that we can replace VBA with JS. 
It looks a bit awkward in mobile. Also the graph is still showing a range up to 100 even if the submitted course grades are on a 4 point scale. 
Affiliate advertising.
But... I love VBA.
This is amazing. 
Let us whisper of a dream...
Let me know when they bring HTML to Outlook
Javascript is eating the world. I was saying this to a guy in my bootcamp the other day and he was like nah. Funny to see this today.
Euclidian formula is known to developers but the mathematical symbols you've used aren't. I work on GIS products and recognise it all, but without pre-existing knowledge it's a little confusing at least :)
fucking finally
&gt; https://codepen.io/iamycee/pen/ZoaoWe So, it's been like 7 years since I looked at minimax, and I am definitely wrong. please ignore But the algorithm itself is somewhat flawed since it is selecting a human move, when in reality, it should be evaluating the AI move based on what the human COULD do. So it shouldn't be picking a human move at all. It should simply eliminate all moves that result in the human winning.
Fucking finally
yet they still haven't prevented people from executing shell scripts from csv's.
Yeah it does look awkward on mobile. Im on it. &gt;Also the graph is still showing a range up to 100 even if the submitted course grades are on a 4 point scale. Its currently works with percentage grades. 4 and 5 point grade scales are in the works. I would have included them in the initial launch but apparently the scales arent standardized and different schools have different conversions from percentage to 4 point or 5 point.
Yes please. I absolutely love Google sheets for the very fact that you can use JS to do scripts and more.
[removed]
Inb4 Oracle sues MS!
so markdown?
But seriously though. Outlook has no respect for html. Your email can have no flaws and have errors. It works everywhere else!!
Ugh. Microsoft + JavaScript. This never ends well
That’s not a new concept at all. That guy lives under a rock.
As slimy as the code feels, this was a fun post! Definitely did not know this was a thing!
If it can be done in excel it will be done in excel.
Been using var for 10 years never had any issue with it. Its not strange if you learned how it works and got used to it. Normally all your variable declarations should be at the begining of the function anyway. It seems to me very strange to define variable in the middle ... problem isnt with var ... but when you use undeclared variables ... thats when things start to go strange ...
Drop me a line when they add typescript to ms paint 
Are you talking about TypeScript? Because Typescript is amazing.
Did you get that border-bottom bug too? lol 
I sure hope so. 
can you do time based triggering?
Gah, I just spent a whole day trying to figure out how to get achor tags to work properly in Outlook HTML emails before I gave and sent the damn HTML doc as an attachment 🙄
You're life would improve markedly if/when they do
From what I remembered you can basically trigger scripts to run but then again you would need something to trigger these scripts but I guess in that sense yes?
If somebody can make tensorflow.js work inside excel, does it mean Neural network training inside excel?
I’ve develop in VB since version 6, and I can work my way through some C#, however the idea of using JS in Office is very intriguing. Do you guys have some good websites you can share for learning Office.JS? I’d like to give my apps a much better interface with some optimized code. Using Google API in VBA is a complete nightmare.
Status quo bias at play, methinks.
Funny thing is: the older version supports more features than the latest one. Also, the Mac version renders amazingly (probably has webkit under the hood)
Yes you can. In a script go to Resources &gt; Current project's triggers. And select what timeframe you want. I do it regularly to align with Adwords scripts.
Send me a message when they add Haskell to Microsoft Bob.
JS gave people a general purpose tool that is portable, easy to learn, easy to manipulate into any number of coding paradigms. it makes all the sense in the world that it'd spread to nearly every available niche and platform. only thing holding it back is poor performance and lack of compiling to binary for machine code (though im sure somebody has a compiler that turns JS to assembly or something)
&gt; Normally all your variable declarations should be at the begining of the function anyway. I strongly disagree with that. Variables should be declared at their point of first use. A practical reason for abiding by that rule is to avoid accidentally using a variable before it's been initialized with a value.
Just use JavaScript in Photoshop.
lol background images are suicide on outlook
If I'm ever in a position where I have to sift through 50 frameworks, somebody shoot me. I kind of can't believe there's that many available, haven't really heard of any past #10
Javascript is compiled just in time...
Props to guy under a rock deciding to go to a boot camp. Relevant xkcd about today being the day someone learns something everyone else knows. 
I have a lot of bones to pick with JS, but it *is* a step up. 
..and the worst is?
Check out [MDN's page on Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to see why you're running into this behavior. The VIN isn't a number you'd use in math, but rather an identifier that consists of digits, so it makes more sense semantically to store it as a string, not a number.
You are amazing, thank you soooooooo much! 
inb4 Oracle has a hissy fit.
When someone says "I use VBA quite a bit", I hear "this should not be a spreadsheet, but a database". &gt; Are they eventually going to make it obsolete? Implying it isn't obsolete already, lol
Don't you love how they decided to make JavaScript files executable with unrestricted permissions? It makes ransomware so easy to spread! Yet another reason I use Linux btw
Dreams come true.
Here: https://www.npmjs.com/package/fizzbuzz
Cool...Appreciate it.
Microsoft brings leftpad to Excel
You're in the wrong neighborhood here
wow this awesome!
That's pretty unreadable. Consider formatting your post.
i loved how it was in html, thanks! im going to check out every one of these replies! thank you so much!
No. See my PH comment. https://www.producthunt.com/posts/chattt
and this is a website which is a paid course,ill rather go look at MDN or w3schools, thanks though! :)
Let's not do dev news/blog/article stuff on Facebook.
As someone who hates JS with a passion, this is still upgrade if I'm being honest.
Every popular interpreted language nowadays has JIT built for it, it seems counterproductive, but now we have best of both worlds.
Such an useless update, [excel was already turing complete](https://www.youtube.com/watch?v=iCeOEQVUWZ0), and people could have just written JavaScript interpreter and JIT in excel itself with no problems.
Linux definitely doesn't have viruses and is immune as it has no vulnerabilities.
&gt;Linux definitely doesn't have viruses Linux can theoretically get viruses, but it doesn't in practice. At least it doesn't blindly execute a .js file attached to a shady-ass email when a hapless user clicks on it. &gt; &gt;Now stop being autistic :( &gt;don't bring OS wars into programming sub that has nothing to do with OS I was talking about a *code* execution feature a *programmer* chose to implement in the *program* known as Windows.
You absolutely should drop w3schools from your list. They are widely known to be substandard and often inaccurate. MDN is better than them in every way.
And then its Ecmascript 4 or lower haha
what about executing malicious Javascript code now ...
You can drop an executable into linux machine just as well as you can drop it into windows machine and that thing is platform independent, only malware itself needs to be picked, which is very easy to do anyway.
Yes. 
I like how it calls indexOf/lastIndexOf many times with the same arguments.
No problem, just transpile your .xlsx with babel.
Declaring variables in the loop is very bad practice. Try to benchmark it and you will see. Also nightmare for garbage collector. I declare variable once at the beggining of function and work with that ... every other language works like this, the diference in javascript is that normally using undeclared variable results in fatal error while in javascript it looks up the scope. First I thought that perhaps variables defined via let wont be defined in the child blocks, that would sort of make sense to use when making bizare callbacks, but thats not the case. Variables defined via var and let both get inherited to children (due to javascript scoping rules). So only advantage of using let is when you dont want to have some variable defined in the beginning of function and define it in the middle, which seems to me very strange usecase. If you have larger code and define variables as you need them you will loose track of what you are using when. Especially when you edit your code many times and definition gets removed by accident... Thats why I believe its better to have everything in the beginning.
Also, imgur and youtube links are not correct.
I'll give you my brief rundown, and hopefully it's helpful :) 1. Use classes if you have many functions operating on the same data. 2. Use individual functions for small and reusable bits of code (like common array filters). 3. There is `let`, `const`, and `var`. `var` is the _old way_ of doing things. `let` is a more semantic way to scope variables more predictably, `const` is a way of declaring the reference of the variable to never change. I typically avoid global variables, but if you need a global, probably use `var`. If you are scoping a variable to a function or loop, probably use `let`. If you want to document that a variable should not change, use `const`. `const` and `let` operate similarly, but `const` means the _reference_ to a value cannot change. For strings and numbers, that means you cannot re-assign the value. For arrays and objects, it means you cannot fully reassign the variable, but you can add properties (like `someObject.thing = 'new value'`, or `someArray.push('stuff')`). Objects and arrays internally are references and not the same as numbers, booleans, strings, and other primitives. From the C# perspective, they are similar to pointers, in that they _point_ to objects in the internal js implementation.
I actually managed to solve this, but it took 2 days. Problem 1. I had wrong selector Problem 2. I used es6 function so "this" is not the same as function Final solution I found just by reading d3 docs: [d3.select](https://d3.select)\('.threshold\_area'\).each\(function \(\) { this.parentNode.insertBefore\(this, this.parentNode.firstChild\); }\); Select item: [https://github.com/d3/d3\-selection/blob/master/README.md#select](https://github.com/d3/d3-selection/blob/master/README.md#select) Selection raise or lower: [https://github.com/d3/d3\-selection/blob/master/README.md#selection\_lower](https://github.com/d3/d3-selection/blob/master/README.md#selection_lower)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [d3/d3-selection/.../**README.md#select** (master → 4dcb341)](https://github.com/d3/d3-selection/blob/4dcb3412318a6e2ecada79196b42336758d29133/README.md#select) * [d3/d3-selection/.../**README.md#selection_lower** (master → 4dcb341)](https://github.com/d3/d3-selection/blob/4dcb3412318a6e2ecada79196b42336758d29133/README.md#selection_lower) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dymz0rd.)
Well the difference is that when you use let you get error while when using var you get undefined when you try access the variable before its declaration. If later by accident you remove the definition, both results will be same - javascript will lookup variable up the scope and if its not there you get undefined. If it was defined somewhere up the scope you get 'unexpected' results. Not sure if you can actually gain something with using let in favour of var. Perhaps better garbage collection? Dont really know. Maybe you have some example which clearly demonstrates how var is terrible and how let is awesome and you can enlighten me. I will gladly learn something new.
JS? This is Microsoft, dinner encourage more JScript. 
&gt; why not use In your own personal package it's not a big deal, but the fact that it's not on keyboards would make it extremely annoying to come across in a collaborative project
[https://xkcd.com/1053/](https://xkcd.com/1053/)
SHHH This is my retirement plan!
Pointless article, real world equivalent of “I drove a car at night with the lights off” shock horror it’s shit.
Currently it's only a personal project. Haven't gotten any pull request yet. 
&gt; For example SSL is a dependency that was vulnerable. "SSL" is a dependency of the Linux kernel? What?
Does it even fucking matter? Are you moving the goalpost? What? If you ran a project on Linux that used SSL, which is pretty much fucking everyone, you had an immediate vulnerability. Worse, you had a vulnerability that many intelligence agencies and who knows what else already knew about. Do you fucking code and only use node and no libraries? Python and no libraries? I think you assholes are deliberately missing the point.
How about the this keyword, gets me confused everytime! :(
Doesn't mean I'm not interested in seeing what happens if someone did that.
Oracle has a trademark on the name JavaScript... for some reason.
I was talking about benchmarking use of var or let inside the loop. You should avoid doing that as it declarates variable each loop. Regarding the scoping ... well ... I use functions for that. Even in your example there is not really need of the outer block. Just call the function that do lock, unlock and also stuff in the between... I dont have any formal programming education so I am pretty sure that you are right, I just never encountered problem with var in practice so I was just putting there my 2 cents. It is rather subtle difference. I also dont see any benefit of going more local than function level ... just create more functions if you need more locality. KISS principle.
While I am not a fan, I see this a "potential" win for those running Office on Macs. 
Not disagreeing their quality could be better. There hasn't been a perfect reference, trust me. There was stuff easier to find on the Wikibooks; and just last night I found MongoDB stuff working better with w3schools references, than with Mongo's own API docs. 
 &lt;noscript&gt; &lt;p&gt;Why are you punishing yourself like this, Mr. Ashton?&lt;/p&gt; &lt;/noscript&gt;
Javascript is the new Lua.
`this` is always the object the javascript interpreter is currently working on. Unlike some stricter languages, `this` inside a member function of a class doesn't necessarily mean `this` instance of the class. Javascript allows _any_ function to be bound to a value, and that binding reflects what `this` actually is. By default, in the global scope on a web page, `this` refers to `window`. In a non-bound function, `this` refers to the actual function. In previous times, before es6 classes, you could _fake_ classes by using a function as a constructor, which would look like this: function MyFakeClass() { var somePrivateAttr = 'shhh, I'm private'; this.getSomePrivateAttr = function() { return somePrivateAttr }; } var instance = new MyFakeClass(); console.log(instance.somePrivateAttr) // undefined console.log(instance.getSomePrivateAttr()) // 'shhh, I'm private' But the problem being that functions would break class-like bindings, so people typically did: function MyFakeClass() { this.somePublicAttr = 'hi!' var self = this; this.log = function() { return self.somePublicAttr } // use self because the nested function here isn't bound to the instance of `MyFakeClass` } This can also be fixed with: function MyFakeClass() { this.somePublicAttr = 'hi!' this.log = function() { console.log(this.somePublicAttr } // this will refer to whatever we use in the following `.bind` function this.log = this.log.bind(this); } But you'd need to fix the binding on each function, so it was easier to do the `var self = this` trick. In es6-land, classes do _some_ automatic binding: class MyClass { constructor() { this.publicAttr = 'test' } log() { console.log(this.publicAttr); } } But es6 binding has it's own edge-cases, too. If you pass a function around, you'll want to make sure you explicitly set the bind context like this: class MyClass { constructor() { this.windowWidth = window.width this.updateWindowWidth = this.updateWindowWidth.bind(this) } updateWindowWidth (e) { this.windowWidth = window.width } } var thing = new MyClass(); window.addEventListener('resize', this.updateWindowWidth); If `updateWindowWidth` isn't bound to the instance of the class (`this`). Someone smarter than my can probably explain why this is the case, but you'll just need to accept it as how javascript works.
I read it's in the planning. Can you imagine managing databases with excel and building a front end through a connected service. Would be so cook
&gt; I was talking about benchmarking use of var or let inside the loop. Check my benchmark -- I'm doing that. In theory, yes, this could be less efficient, but in practice it is trivially optimizable. &gt; Just call the function that do lock, unlock and also stuff in the between What if the stuff in between throws an exception? What if you accidentally forget and call `return` in there? RAII exists for a very, very good reason. I 100% understand and I'm not faulting you or trying to demean you in any way, but please understand that you're forming your opinions on a very limited subset of what is programming and what is considered valuable within all of the programming community. The TC39 did not recommend `let`/`const` without any good reason to do so, and your strongly stated opinions "Declaring variables in the loop is very bad practice." and "using let is when you dont want to have some variable defined in the beginning of a function ... very strange usecase" are pretty ignorant and should not have been stated at all as a fact. If a new programmer comes in (this thread) and sees your opinion stated as such and I weren't around, they might actually start using your practices, which have been outdated since the '80s. I also highly recommend you look into reading something like Code Complete 2. It'll change the way you think about programming.
better use browser with no js than less js? there almost modern javascript code won't work well in opera mini browser, and it can't be fixed by `noscript`
The different reactions from here and /r/programming are super entertaining. 
Ah, gotcha.
I do both
really cool! maybe you can integrate with stackoverflow and linkedin?
async and or functions that return promises, which is an async operation. 
nice I like it. Starred. 
@bashir26 Linkedin integration idea is really cool. We can generate auto CV both linkedin and github
Thank you for the link, lots of useful info there for sure. I guess Duolingo isn't the ideal model, rather what I was looking for was an online course that was presented in short segments with a repetitive nature. Between work and a new baby I have very little time to study anything and my attention span is not the greatest right now :) I just found [Udacity](https://www.udacity.com/course/intro-to-javascript--ud803) so this might be somewhat useful. I used to be a flash card junkie so that route is always appealing too.
The client side implementation of signalR is pretty gross. The default json serializer in MVC is terrible. Mvc also includes certain js/css libraries by default and sometimes can make it annoying to get rid of them. It's really not as bad as it was back in the day when web forms were still a thing, but it's still not great.
I'm hoping JS can replace VBA 100&amp;#37;!
This things apparently change as browsers do optimisations. It used to be a difference, also it seems to me good practice to put declarations outside of loop ... you are declaring variable, why would you want to declare it every loop cycle? Is declaration action completely free operation these days? My opinions arent ignorant and I did ask for some example where using let would be beneficial, because I trully see no reason. If you use variable before it is declared with let, it produce error so in the end you put let anyway in the beginning of the function. var hoists automatically to the beginning and let force you to actually place it there. If you placing var in the begining there is completely no diference.
Visit a local morgue.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/Jmog2WP.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
damn dat spaceship got small hands hahaha
Lmao does it really look like hands 😂 I was going for blasters 
If you're not going to use some kind of bundler, then yeah, you'll need a global of some kind. I'd recommend a single global object that holds all your global variables so that you don't pollute the global space too much. If you're going to use a bundler, then you could just import it in. That's too complicated for where you're at, though, so don't worry about it.
Thank you so much :D
why not just add the file that contains the vars with &lt;script src=”script.js”&gt;&lt;/script&gt;? 
Yeah that's what I was planning to do, I just wanted to make sure that having the constants as global vars was not against best practices
Its really ok. In fact, there is situations you must to do it that way. Lets say when you using APIs with secret keys involved, you would want to declare vars with the key values in different file and use them with reference and not with hard plain string of the key, and then .gitignore the file when you uploading to github or any other git client really. (just an example where this method is handy) 
Hi /u/yasintoy, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/Ivggbobn, For javascript help, please visit /r/LearnJavascript. Thank you!
After being lukewarm with electron, this looks pretty dank.
Is this kind of a big deal? It seems pretty great relative to electron.
It's a cool idea but it needs a lot of work to be usable in a real app.
Definitely. Its made by a guy who is still in school so probably he works on his free time :\)
A few questions for you... * How does this compare with [React Native on Windows](https://github.com/Microsoft/react-native-windows)? * Can the user create multiple Window components? * Is there a way for the user to define additional components, and if so does it use JS or native code? * How customizable is this compared to Electron, in which you can use any web technologies you see fit? You'll notice a theme in the above questions: I'm curious as to what the features and limitations are for this library, both in it's current state and as a general approach. Including some of these in your documentation might help people figure out whether or not this library/platform is a good fit for their app.
Exactly. I guess author will notice the traffic &amp; will probably reply :\)
Are you talking about a node environment? I can’t imagine a scenario where using secret keys as globals client side would be recommended... the keys would be exposed to the public! even in node, they would probably be a commonjs or es6 module via esm 
hm, I'm going to have to look into that. I wonder what crazy unnecessary stuff I could do. React for photoshop?
I'm starting to get used to it now. It's kind of like a super power--creating terrible html that looks like it avoids all the bugs by accident.
I teach Web Development at my local College. Been teaching it for over 15 years. I have a youtube channel with lots of tutorial playlists. It's the reference I have been creating for my students. https://www.youtube.com/channel/UCTBGXCJHORQjivtgtMsmkAQ I would suggest starting with the lists - JavaScript from the Start and JavaScript in the Browser. However, you can jump around from topic to topic as needed. There is no required sequence for the videos.
[http://gph.is/Z0AvM5](http://gph.is/Z0AvM5)
well, yeah I talked about node environment , and in personal projects most of all, as you mentioned you are a beginner so I assumed you would want to create some projects for yourself and less for production at this time so , when you work in node on personal projects it can be handy to use global vars like that. 
&gt;managing databases with excel What a time to be alive 
How is this controversial? I mean, good for him and all, but youth and lack of experience aren't plusses. I'm not saying this project is bad in any way, but /u/deadcoder0904 implied that it was a positive.
Your second example is quite bizare as that places var even outside of function in first case. First one it depends ... I rather would not create another scope just for one cycle, you realise that all the other variables you use inside of block are taken from parent scope? So block itself is not encapsulated anyway and might create those 'global' problems you trying to avoid. Block scoping wasnt present in javascript ... well now you can do it with let if you want, but should you do it at all costs? Come on ... again I am saying .. yes in theory you might be right, in practice it hardly ever is a difference. If you just start learning programing I believe that function scoping is all you need and you can learn and use block scoping later. Declaring variables in the beggining of scope seems to be as a good practice. You are also doing that ... you just create more scopes.
Not OP, but thanks for clarifying 
&gt; Your second example is quite bizare as that places var even outside of function in first case Yes, but it's not bizarre because semantically it is identical to the for loop example. The variable goes inside the repeated aspect, not outside. By your logic, we're still creating that `var` multiple times. &gt; First one it depends ... I rather would not create another scope just for one cycle, you realise that all the other variables you use inside of block are taken from parent scope? So block itself is not encapsulated anyway and might create those 'global' problems you trying to avoid. I have no idea what you're saying here. I recognize that, with `var`, the variable gets hoisted to the top of the function and it is mechanically identical. We no longer have to do that. I think declaring variables at the top of a scope is an artifact of poor language design, and it creates more cognitive load to teach people to do that. The point is, don't encourage people to declare their variables before they're used. You're saying "teach them to declare them before they're used and then teach them again later", but I see no point in the two step process. Just teach them to declare the variables naturally where they're used. That's how every language and every style guide suggests it *unless the language discourages it*, which JavaScript no longer does.
Hi /u/luizcrf, For javascript help, please visit /r/LearnJavascript. Thank you!
Why the need to name non-native things "native"? It's really annoying.
I would just say that's not winning the argument but avoiding the argument. It might have been an unideal example, but you could easily imagine it being more complicated (referencing each variable more than once). And even still, I think `let i` within the loop is way more readable.
Sorry, but I can't understand your question. The project is pretty well explained in the link provided.
Spamming the up arrow you get going pretty fast!
I am saying that if you create block scope by using let on one variable, it will inherit all other variables from parent block, so when in your block you access any variable which is not explicitly defined there you are actually referencing stuff from outside which is completely against the very same principle you are trying to achieve. It breaks encapsulation. Create logical blocks whenever you need them, but dont create scopes just so 1 variable is better localised ... that completely makes no sense. You cant take general principle and apply it to the extreme especially if you have no clue if creating new scope and declaring variables might or might not have some impact.
[Official](https://github.com/webpack/webpack/issues/7240#issuecomment-387471419) response from webpack basically saying "how dare you create an issue and make this public?". And then they locked it :D But who knows, maybe it wasn't an official response and it was just an ***individual*** locking this thread and trying to shame OP. Imo it's an issue that should be taken with npm. In the past they've stated they were not going to tolerate name squatting. Here's one of the github repos(obviously created just for taking up namespace on github) https://github.com/parceljs/seed
Well yes, but the fact that all variables were declared on top is easily seen that this version uses less variables, thus is more memory efficient. Its harder to rewrite/debug code which has multiple scopes and variable declarations all over place. If this whole discussion is only about the comfort of using i in for cycles then I have nothing ...
I tried to learn JavaScript from all over, a book I bought, YouTube, online free courses and all that, none of them really taught me anything that stuck in my head. I paid for CodeAcademy pro though and I like it, it teaches me better than anything else I’ve tried, it also has small projects, which helps bc on my own I can’t think of anything to do for a project 
Anyway, thank you for good talk. I have learned a lot. I might consider using blocks in the future.
So the goal is to create a cross platform way to build UIs with React. React Native on Windows is obviously going to be more specialized so you get to more components, but only on Windows. Multiple Windows can be created. React components work just fine, so any JS will work. But actual native components need to be implemented in libui. Any PR is welcome! Electron has the advantage that it's basically a web browser, so web programming is the same. Proton Native is different. It's not as customizable in UI, since it's native components, but it still runs with node. I'm adding more UI customization like text styles, yoga/flexbox, etc. as they come out in libui-node. Basically right now you're not going to get more functionality than Electron. The hope is that we can build something over time to compete with it, and encourage others to help. Electron also has the advantage of GitHub backing plus years of development. 
Well, I think the point is more so that, if the variable is *not* declared in the block, you *know* it's declared elsewhere, whereas if you never have block scoped variables, you just have no idea. It's not infinite information, but it is better information.
Yeah you too. Sorry if it ever felt hostile. Take care.
^The linked tweet was tweeted by [@CharlesDardaman](https://twitter.com/CharlesDardaman) on May 08, 2018 17:57:02 UTC (124 Retweets | 178 Favorites) ------------------------------------------------- GOT IT! \#coinhive \#Excel \#Microsoft \#Malware [Attached photo](https://pbs.twimg.com/media/DcsWJ09V4AAq2u0.jpg:orig) [Attached photo](https://pbs.twimg.com/media/DcsWI_oVMAAt9qL.jpg:orig) [Attached photo](https://pbs.twimg.com/media/DcsWTpYU8AA3Fm7.jpg:orig) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
This is the closest, and cleanest, app I've come across regarding coding *a la* "Duolingo": https://grasshopper.codes/
This should be all you need to get started: https://www.w3schools.com/js/default.asp Just realize that you don't need to memorize everything. You learn by having to look up what you need to know to accomplish your task, imo.
i think you're selling it short, it seems like someone created a react type interface around [libui](https://github.com/parro-it/libui-node), which is node bindings for a C library of the [same name,](https://github.com/andlabs/libui) which looks to be a pretty comprehensive library. Not like someone made all this from scratch, but the concept behind it seems obvious and the approach consistent, so I imagine in theory it's got a lot of potential. Whether it works that well in practice is another thing to be seen.
I’m the creator of Parcel. This post is not accurate. Ryan does not represent webpack and there are no hard feelings between the teams. Please delete this post. Thanks! :)
That would not work. When I say react components, I mean user made components that extend React.Component. I make the destinction of native components which are part of Proton Native and react components which directly use React and the user creates. 
Thanks for the clarification. In its current state, Proton Native already looks like a great way to quickly make small utility applications using only JavaScript. Thanks for all of your hard work!
I have read HTML files in using Ajax. I would think you could do the same for a text file. 
Use `FileReader`, `.readAsText` the input file, assign the reader a `load` listener, then access its `result` and `JSON.parse` it (or do whatever you need to turn the text into an array)
Ok,can you post a sample code?
Well what I am saying is he can't work a lot on it because he's in school &amp; obviously its a great thing he's making something nicer in school. I was probably playing video games till college :\)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tjanczuk/iisnode/.../**100_helloworld** (master → c816a67)](https://github.com/tjanczuk/iisnode/tree/c816a6740ae63e2c3065653539ea18b9c5edfce6/test/functional/www/100_helloworld) ---- 
Honestly shipping this is infinitely more valuable than finishing.
All the mentions of React Native (that it’s “compatible,” uses the “same syntax,” etc) seem disingenuous and are a huge turn-off. I’m using React Native, and I don’t see any overlap between the APIs. There are people actually working on desktop ports of React Native. This seems like a totally different React-based framework trying to use the name. Like calling your homegrown non-SQL database “Postgres for the web” or something.
Looking very interesting! It's a bit concerning that there isn't CI or automated tests. At this point that's table stakes for anything that wants to be a platform.
his comment might remind us all of how this far this project given a single developer who is young, implying it could go huge given the right resources.
Wait, this isn't React Native? I kind of assumed it would be a compatibility layer or something. 
Can you be more specific ? 
&gt; it isn't bloated as Electron so you don't need to ship the whole browser. Wow that must be like 35 floppy disks. 
I got this error when i did that. :( The iisnode module is unable to start the node.exe process. Make sure the node.exe executable is available at the location specified in the system.webServer/iisnode/@nodeProcessCommandLine element of web.config. By default node.exe is expected in one of the directories listed in the PATH environment variable.
Based on the the list you provided I can extract several standalone topics like web technologies (protocol &amp; networking), language design, software engineering, ux research, and so on. You can find litterature on these subjects in open access repository like arxive, meta search engine like google scholar or even sci-hub if you don't have any access through your university. You seem to mix the many facets of front-end developement, maybe you should start narrowing down one main subject and expand from here. 
No.
Every time I'm looking for a promise-related library, your name always shows up
I would be pissed if that happened. Please reach out to the rest of the team and maybe tweet about it, that seems to be how most of the active guys in the community like to do it
https://www.enki.com/ 
Which API is that?
Search it on Mozilla Developer Network
Leave out the secrets, include them through env vars?
You should let people use their own tokens and secrets when they use your tool. For example instruct user to set env variables.
The most widely used OS is written in C though, and only a very few developers right C in their day to day jobs compared to JS.
Seems to work fine on Firefox too
If you actually want the parcel org on npm just contact support. Reserving org names for future use is an explicit TOS violation.
here's a sample, I built in the past [https://codepen.io/Laassari/pen/XVNrpV?editors=0110](https://codepen.io/Laassari/pen/XVNrpV?editors=0110)
Have you considered that your competition may not be Electron? Electron, Essential Objects, Awesomium, and Openfin are all Chromium wrappers that allow you to display existing web content in a native window. Your app, instead, allows you to create native UI elements using JavaScript. One main reason to use Electron (or one of the other platforms listed above) is to enable code reuse and design consistency between web and desktop versions of an app. Your framework does not, and will not solve for this, so it will be a hard sell in some (I think most) circumstances. Instead, this may be better positioned as a competitor to WPF, .NET, other native desktop frameworks, and even Java applets. Basically, Proton is to .NET what Express is to Tomcat, or what Electron is to Essential Objects, in that it solves a problem with NodeJS which was previously best solved with something other than JavaScript.
Well they got on the Electron train with MS Teams. Maybe Outlook will be the next Electron app?!
Simple and to the point. Nice use of libraries I think more people could take advantage of (the use of libraries rather than reinventing the wheel)
I figure setting a heroku server-like node app separately for authentication and issuing session tokens should work fine. Then that session token can be used by your user facing app.
Thanks! And it should render alright, but the interface is not mobile friendly yet. I had planned on taking a mobile first approach with the next version though. I had never heard of Brian's Brain before this. Not sure how I hadn't. I did a bunch of reading about cellular automatons before/while making this, and never once came across Brian's Brain that I can recall. Or maybe I did, but just forgot to look into it. Thanks for bringing it to my attention, either way! Maybe I'll give this a go. Can't imagine it's any more difficult than Life. In fact, I can probably reuse some, if not a lot of code from my Life engine.
iirc it's only a minor change to the rules, but i never actually built one from scratch. [spent a lot of time messing with Brian's brain]( https://youtu.be/uYky74FaC70) though lol. like, [a lot of time](https://vimeo.com/84019385). it's a very fun rule set 😂 
Two possible solutions, 1) the API may have a JSONP endpoint in addition to JSON, and 2) a server side proxy ( in PHP or similar ) would allow you to access the API cross-origin. Even if the API doesn't have a JSONP endpoint, you can easily set up a proxy that wraps the JSON requests and presents padded JSON you can call cross-origin.
https://twitter.com/CharlesDardaman/status/993912675804614657
Ok.
https://github.com/dwyl/english-words
What does "native" mean to you? I think it means "an application that runs locally without a web browser" as an analogy to what it means on mobile, which is "an application that runs locally without a web browser."
No. const just means the variable cannot be reassigned, not that you can’t manipulate it.
Well, in functional programming you shouldn’t push to that array. But yes this is perfectly valid JS. const list = [1] const newList = [...list, 2] // [1 ,2]
Definitely
Nice!
Yep, immutibility is generally a nice idea when you can manage it. Do you have a specific example of a situation where you think creating a new array when you add an element to an existing one would be too convoluted?
If you're creating that variable and pushing in the same function then I don't see a problem. It's definitely faster because you have less garbage collection. 
Mutating variables is bad form in functional programming, but it doesn't have much to do with the use of "const". You can mutate variables declared with const or let, and both are fine if you're not trying to program immutability and both are bad if you are.
Agreed, at this point in time if I wanted a cross platform React solution for desktop I'd probably just use React web, then wrap it in Electron - even if Electron is a battery/memory killer.
That's only the case only because **very few** developers tried to go further than using `npm install dependency-that-solves-my-trivial-problem`.
This is the answer. You shouldn't mutate things that are given to you, or that you give away. If you create and emit this thing all in private, then you can mutate the shit out of it just fine. "Mutation is bad" is a reasonable rule of thumb, but it's not gospel.
one man's best practice is another man's worst practice. 
Image manipulation in JS is not easy. I recommend cutting the image into tiles on the backend, it is going to be much easier to do. Cut the image, assign a random name to each tile, store the correct sequence of tiles somewhere and serve it to the client together with the images. Then on the client read the sequence and generate the image. p.s. Are you inventing a system to stop people from saving images from your website? Spoiler alert: it won't. 
I mean, there's nothing in the spec that defines `let` as being something that will be *reassigned* as opposed to *mutated*. In fact the spec never makes it any kind of requirement for using `let` that the value will change in any way (though it's a sensible convention). It is syntactically valid to do *anything* with a `let`, reassign, mutate, or nothing. `const`does specifically preclude reassignment though not mutation; however a constant that is not constant isn't much of a constant IMO, so whether it's by mutation or reassignment, it makes sense to me (and I'm sure to many others) to avoid changing values assigned to a `const`, without the overhead of an entire library dedicated to that purpose. I think my interpretation is more intuitive than yours, but then, I would, because it's the interpretation that came naturally to me (and my team). But you do you, because life is too short to argue about conventions with strangers on the internet, and to be honest, so long as the people you collaborate with are working to the same convention as you are, then it's a useful convention. 
I was told to search for a system that shuffle the image for my job. I assume it's for the url to direct to a shuffled image, and don't have the "clear" image directly, I guess. I personally know that everything in frontend is not "secure", but I'm not the one that take decisions for this project. yeah I thought about the image manipulation in js, that's why I search to do it in backend too. the thing is, it need to work with a seed (a 5-10 characters string generated randomly when we create the entity where the images will be stored) and I have no idea how to work with a "seed". That's the main point I'm stuck ^^"
&gt; I think my interpretation is more intuitive than yours, but then, I would, because it's the interpretation that came naturally to me (and my team). But you do you, because life is too short to argue about conventions with strangers on the internet, and to be honest, so long as the people you collaborate with are working to the same convention as you are, then it's a useful convention. Is the right answer.... to pretty much everything. Gold star! :)
&gt; constdoes specifically preclude reassignment though not mutation; however a constant that is not constant isn't much of a constant IMO, so whether it's by mutation or reassignment, it makes sense to me (and I'm sure to many others) to avoid changing values assigned to a const No it does not. `const` means that the reference is a constant, not the value. The naming is a bit unfortunate, it could be `constref` or whatever, but it is you, who are interpreting it differently than what the spec says, and how it works.
This is less about frontend not being secure, this is more about people pressing PrintScreen button after seeing the reassembled image. The "seed" thing you talk about is not very clear to me. You can have a seeded random number generator which will give out the same pseudo random number sequence as long as the seed is the same, but you don't need a sequence of random numbers, do you? What you need is an encoding function that will take a string (the correct order of tiles) and spit out an encoded string, and a decoding function that will take a previously encoded string and spit out the original string. Am I right?
JS has some aspects of a functional language, but it's not strictly functional. If you really want to follow that paradigm you need to start using libraries like Ramda, Immutable, Immer etc Pushing to an array is not something that you would do with a purely functional language, because it mutates the array. If you want to mimic that in JS, you would create an immutable array-like structure with a library like Immutable / Immer From the JS point of view there is nothing wrong with pushing to an array of course, they are designed to be used that way
One addition: In enterprise level programming, on large projects with large teams running for years (the business changes so the code needs to change too, new feature, new laws, new practices, etc.), if the language doesn't already do it for you (so it's not just a Javascript thing but general), you probably want to DEEP COPY every mutable structure that you get. If your function gets an array, create a new array from it (in languages other than Javascript with better libraries you will get "iterable collections" of which there will be many many different implementations for all kinds of use cases and not just arrays). Since you don't have control over the producer of that data structure you cannot be sure it isn't mutated somewhere, while you are working with it. Google **"defensive copying"**.
Couldn't they just right-click -&gt; "save image" ?
So, in functional programing on this case they'd want you to use **let**? Or they just never want you to mutate arrays? That would seem extremely restrictive to. Personally I'd still use const with push, because I'm not changing the type of the variable only the contents of the array.
&gt; What you need is an encoding function that will take a string (the correct order of tiles) and spit out an encoded string, and a decoding function that will take a previously encoded string and spit out the original string. Am I right? Yeah that's why I meant with seed. A string to encode/decode the order of the tile. and this string is generated randomly (I don't have access to the code rn so I can't show you the generation of the seed). yeah there is stimm the possibility of people that will printscreen, but if we can at least prevent "common" bot to leech the images it could be good (and I think it's the wanted result of the system) 
If the image is made out of many carefully arranged 10x10px tiles each of which is an individual file then doing that will only save them one tile. 
When I read about the "new" updates to Javascript a while back ago, they used pi as an example for const. I therefor always thought that const was to be used as a constant value. But your comment made me read up on it again and now I learned something new, thanks :)
This has nothing to do with promises. You get a promise AFTER you already started some asynchronous task. You want to not even start it to begin with if you want to "slow down".
Agreed - it doesn't make sense use `const` to communicate something that's not enforced by the language
&gt; It's definitely faster Although you may be true, in most cases, I would not trade code legibility for a coupe of microseconds. 
Is it actually being done? I'm asking because deep copy is expensive, and what's worse in JS objects are pretty free form, so you don't even know HOW expensive, so unless you have just a few entry points it sounds like it could have significant performance impact. 
Values like numbers or strings, and booleans really act as constants, since you cannot edit them, but objects and arrays can be modified - just not reassigned. So, pi in your case was an actual constant
As I said, this has little to do with Javascript. Few JS projects are large enterprise projects. Also, things like mobile browser runtimes care a lot more about resources than whatever runs those enterprise projects (often servers and powerful desktops for the client part).
Mutation in general should be avoided (if you are going for a functional style), but the basic array (and object) interfaces make that a bit hard. There are libraries that can help.
Didn't see these library, it could be good to encrypt the sequence that define the "tile order", I guess. I'll have to do many tests to find a way to describe the tile order in a string and all other kind of things. thanks a lot.
You're mutating a variable, so this isn't functional programming. There is nothing wrong with that though.
Defensive copying is done, but it doesn't have to be a recursive deep copy. You can just create a new collection with the same contents, if the contained objects are themselves immutable.
Common dude. No one ever used Google Analytics and thought wow that its a crap product, its built completely horrible. Its built with angular.
If it was a one-off instance, sure. But if you're constantly unnecessarily creating memory allocation, you will see large garbage collections that may cause long frames, making you miss your 60FPS target. You have to weigh-up the trade-offs for sure, and I would advise against rigidly sticking to principles when they hurt the overall performance.
``` const list = [item]; ```
It's restrictive because it makes your code easier to reason about. 
I think we did not find a common understanding of what a "seed" is, but you seem to have found some sort of direction, which is good. Good luck!
Hiding and showing a tbody
Are you talking about SPA, a single page application?
dang it... maybe i'll just wait for the game to official allow that
In functional programming in this case the problem is no the use of `const` or `let` is the use of javascript native `array`. So you want to do functional programming maybe you should use somethink like [Immutable js](https://facebook.github.io/immutable-js/) instead.
You can't change the variable of const in javascript. You can only change the thing the pointer of your variable points to.
Not sure what you mean, but I think this is what it does. By default if you have a something loop through 100 async tasks, it will return all 100 promises at once and 100 http requests will hit your API at once and maybe overload the server. What this looks like it does is limits it to only n number at a time.
This description is hard to parse, I’m sorry. Where do they “show” this content? Can you give me a link to an example of that?
Is your file uploaded by the user? 
Okay no, this is a terrible terrible article. Holyshit. 1) That map doesn't return anything, you're calling Promise.all on an array full of undefineds. 2) You don't need an async function there. Even if you WERE returning the result of await myObject.httpPost() you could still drop the async and await keywords and get the same result. Please don't do this. If you're using async functions just do a loop. This code will wait for each promise to resolve before starting the next one. for (let myObject of my_array) { await myObject.httpPost(); }
In fp, you create new variables instead of modifying the existing ones. If you want to do fp in js in a performant way. I would suggest to pick any of the libraries which give you persistent data structures eg. Immutable js / mori js 
It depends what you want to do. If you want a constant array you need to freeze the object so it becomes immutable: const list = Object.freeze([item]) [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)
A nav. If the rest of your page is static, you can set one up pretty easily with an onClick handler. Alternatively, there are plenty of UI libraries or frameworks that you could use.
Functionally you'd be expected to do something more like: `const newArr = [...oldArr, newValue]`.
Just use [].concat() instead. It returns a new array and doesn’t mutate the original, so immutability is preserved.
That design pattern is pretty bad. If you need to have contextual buttons then you should not reuse the widgets and rename text / replace image and redirect to action to different functionality. You should have a separate list of buttons for each context instead and replace the list of buttons is replaced - possibly with different styles too. Thus users won't try to associate similarity for similar buttons that do completely different things. Also users would have to mentally process the text/image on the button itself instead of clicking a button in a familiar location.
The term “seed” makes sense to me only in the context of making the process of generating random numbers predictable. I don’t see how this would be applicable to your task, at least not how I understand it. You will use RNG when generating tiles: let’s say you cut an image into 4 tiles, then randomly assign numbers from 1 to 4 to them (like, top-left one is 4, top-right is 1, bottom-left is 3 and bottom-right is 2) and store the resulting “correct answer” sequence 4-1-3-2 somewhere in a database. Then your front end will request these tiles when needed and will build the final image from tiles using this sequence to put them in the right order. This sequence won’t change after the tiles have been cut, so there is no need to re-do the random number generation, thus no need for a “seed”. If you wish to encrypt the sequence then you might need an encryption key (or “salt”), but that’s again not a “seed”. That’s my understanding.
Yeah, this is a good starting point. My method is to treat everything as immutable by default, but use mutability when performance mandates it.
Generally, mutability is bad. If a value is a result of some internal data manipulation, it is better from a readability perspective to always create a new list and give it a new name that reflects the update you made. ``` const oldList = [] const listWithNewItemAdded = list.concat([item]) ``` (JS does not enforce this by default for backward-compatibility reasons, but it allows you to make a value immutable by using the `Object.freeze` function.) If a value actually represents an object in your program that is mutable and can change at runtime (say your list of friends on FB), it is better to declare it using `let` and replace the whole list every time the value changes. ``` let list = [] const updateList(item) { list = getNewList(item) } ``` This allow you to separate functions which mutate values, like `updateList` from ones who just return values (like `getNewList`).
Excellent answer. Also "Spooky action at a distance" has entered my mental phrase book!
http://leagueoflegends.wikia.com/wiki/Aatrox Kinda like here with abilities, strategy etc.(doesnt work on phone, only desktop)
Ok, these are called "tabs", or "tabbed navigation"
And if you aren't transpiling or can't use the spread operator for whatever reason const newList = list.concat([2]); // [1, 2] Unlike push, concat doesn't mutate the original array. 
No screenshots? It's bad.
You don't need bottom:0; Try giving the CSS for left nav as top: 0; and height: 100vh;
thank you!
yes thanks!
Really great write-up. For a real world JS example, I usually use lodash's merge to create a deep copy of my state in my reducers instead of working with a library like immutable. let newState = _.merge({}, state) before my switch on actiontypes ensures that I do not mutate state and always return a new object.
Hmm I think I start to understand it. the thing is, to make the "unshuffle" thing harder we'd like to make the "encode key" random random (like that each image have it's encode key) and use this "encode key" shuffle/unshuffle tiles (in fact, to retrieve the correct sequence of tile order.) and it's this "encode key" I called "seed" I based my words on this node plugin I found that used the "seed" words : https://www.npmjs.com/package/image-scramble But I can't use this one, after lots of try, I can't get it to work for "large images" (tried with 250x250 jpg and png, works great, then with 700x1300 px, doesn't work). So I try to do my own PHP and JS program to do it. I hope I'm clear enough ^^"
Eh, "I did my homework but it's not right and I don't know why". The classic "Do my homework" usually doesn't involve trying to do it yourself first - just a statement of the homework problem itself. OP put the effort in but has misunderstood how `foreach` works and is asking for specific help about that. I don't think that's unreasonable.
I think the "Output" examples are basically that...
It captures the variables, not the values of the variables. When printX is called (within the console.log) the value of the x variable has changed to 4. When it accesses the variable, it sees that value rather than it's original value of 3.
When function printX is being defined x is 3, but when you call it by doing closeFunc()(), x is going to be 4, because x is modified after printX definition...
Thanks for helping out. That didn't work. The issue is with the viewport. After swiping with hammer.js, the top is locked\-in and will not change when the URL Bar changes. If the URL bar is visible, and I do a hm\-swipe, then get the browser to a state where the URL bar is hidden, the fixed element just stays where it is. The touch response becomes off by the height of the URL Bar. ie, to click on a link, I need to touch 1cm higher than the link to register it.
This is valid JavaScript and valid for most languages. "const" in almost every language means "shallow const." Which is unfortunate because the shallowmost level of enforcement is often the least important (who cares if you overwrite a local variable that no other method can see anyway?). That said, if you're interested in this kind of thing, you might be interested in Rust, which is really rigorous about enforcing mutable -vs- immutable data.
If you want it to capture the current state, you'll need to do something more like this: var closeFunc = function () { var x = 3 var printX; (function(x) { printX = function () { console.log(x) }; })(x); x = 4 return printX } console.log(closeFunc()()) It essentially creates a new variable with the same name and keeps the value there.
&gt; Not sure what you mean, See headline.
CodeAcademy &amp; FreeCodeCamp. See if it's something you want to pursue, if the answer is yes, there are lots of great courses on udemy. There is always a sale on for £10
I don't know that I'd recommend this to anyone. I am pretty sure someone who wrote code that made this behavior necessary would just get fired at my company.
Ok thank you 
I detect zero experience with enterprise development. Which is the keyword mentioned *several times*.
I've not read it myself, but I've heard good things about "Secrets of the JavaScript Ninja". "Eloquent Javascript" and "You Don't Know JS" get recommended a lot, but I'm not sure if that's entirely based on merit or just because they're both freely available online. Worth a look if you're on a budget though.
Thanks. I have "Secrets of the JavaScript Ninja", but I've never read it. :\-\) I'll need to take a look at it. I'll also look at the others.
YDKJS is good, but can't say it's a great one for beginners. It's more supplemental reading once you've got a handle on it and want a little deeper understanding. I just figured I'd mention it as it almost *always* gets recommended.
Sounds like you have it backwards.
Watchandcode.com is amazing for beginners. Practical JavaScript is the class, it’s free. I’ve watched a few different “Beginner” tutorials and this is the only one that makes sense all the way through. Gordon is a great teacher! 
It's best practice to avoid `let` where ever possible. This includes arrays. Another best practice is to use pure functions and not manipulate arrays with push though, but that doesn't always make sense.
This website looks great! I think I’ll start with this, thank you
You can't change value types, only objects and arrays(which are objects in js) can be mutated with const but you cant change their type.
+1 for Eloquent Javascript 
Should I learn HTML and CSS before JavaScript?
Not if you don't want to 
&gt; slowing down the generation of the promises. Is still a poor way of describing it. Slower/faster are completely arbitrary. &gt; Now our requests are executing as slow as we want, because we can set concurrency to any number that we want. And I added progress bar as a bonus. Just call it concurrency...
I have done HTML and CSS before JavaScript.Freecodecamp is a great source for learning, but also Udemy.Later this day I will buy JavaScript turtorial from Jonas Schmedtmann.Price is 10$ and it is 26 hours long video.
I think it's awesome. You realize Babel was written by someone in high school, right? Almost every modern website on Earth uses Babel in one way or another. In fact, I wish more high school people would realize age has nothing to do with programming ability. If you have a brain capable of souping up information and putting it to use building something that works awesome, who cares how old you are? 
Ad hominem attack instead of addressing my comment.
"Output" examples in json? Shit. Special for you: https://timber.io/blog/creating-a-real-world-cli-app-with-node/ And UI/UX 101 is ultra important here.
Shipping a competitor to electron vs getting a cs degree. If this framework is a big deal it's better than a degree. 
I reject your reality and substitute my own.
That’s terrible practice. You shouldn’t just leave a variable at the top scope and change it throughout the program, that’s similar to using a global variable.
How is it a poor description? JavaScript will by default generate all promises right away. With this it holds off and only generates n at a time. That is slowing down the generation of promises by setting a maximum concurrency.
&gt; Spooky action at a distance If you didn't look it up, that's where it comes from : **https://en.wikipedia.org/wiki/Quantum_entanglement**
If you're using `combineReducers`, making that copy at the top of your reducer is going to make a lot of unnecessary copies for all the actions that that particular reducer isn't handling. Also, making a deep copy of a part of state that's not changing is going to break memoization if you're using a library like reselect.
Unless you're doing something async, that is.
&gt; In FP, rather than mutating your current array, you would pass it into some function, which makes a copy of it, appends or removes elements from it, and returns a brand new array. I feel as though this is a bit disingenuous. This is not the norm in FP in general, just in JS FP where libraries are not used to abstract the following concept away. Generally in FP you are using linked lists instead of pointer arrays where the whole array is not copied but a reference is changed and you still point to the old data for the parts that did not change, so "copying" the whole array is only really done where the language does not fully support FP conventions for lists.
I actually thought "Secrets of the JavaScript Ninja", despite it's awful title, was an excellent book.
I always suggest Javascript Alonge https://leanpub.com/javascriptallongesix/read 
I made a little sliding puzzle game with an uploadable image. You can see it [here](http://fullr.github.io/sliding-tile-puzzle/index.html). The easiest way I found to divide the image into multiple pieces was to just use it as a background image with an offset.
[Sounds like you have reading comprehension disability, because now I've just tested it and it works exactly as I said, I can't change the pointer, but I indeed can alter the value itself](https://i.imgur.com/MLwvcqz.png). Care to explain how this is backwards to what I said? The pointer is constant, value is not :)
Hi /u/Alandcook, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/grkuntzmd, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Etshy, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Gaia_Knight2600, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/acc-to_ask_questions, For javascript help, please visit /r/LearnJavascript. Thank you!
No. const does not mean the array is immutable, but rather the reference is. 
Not sure who downvoted without explaining but I'm guessing it's because of this overly general statement: &gt; It's best practice to avoid `let` where ever possible. `let` was introduced and has it's purposes so saying it should be avoided wherever possible is not really being fair to the reader. In general, when doing FP in JS with ES6+ conventions I find that `let` is rarely used and I find that `const` is my primary definition keyword, but this is not to say that `let` is bad practice. It's more about how you are using your variables and learning when both are to be used is important whether doing FP or not.
I this case no. What your trying to avoid in functional programming isn’t so much “never mutating” but “never having side-effects.” In this case the array is not used anywhere else, you would have no side effects by mutating it. If for example the array was something the function was given, that is used by other parts of code, mutating it could affect those parts of the code and thus you’ve created a “side-effect.” Never mutate is just a hard and fast rule to prevent side-effects but as you’re seeing, it’s very often confused as a rule itself. If you want to keep things immutable on any larger scope of project I’d recommend adopting something like Immer.js which gives you a clean API and helps keep things legible and logical. If your just doing a small learning project and want to build good habits, there are are a lot of examples with the spread operator or concat that work just fine.
&gt;For my own sanity, I don't use const for anything which may mutate Why? Because you think it will confuse some people? Because the construct is very clear and unambiguous in what it does. Const prevents variable reassignment .. full-stop. It does not mean the object that the variable references is immutable. 
I'm saying it isn't great that someone manages to release a major product while still in school, I'm saying that it's not a plus _as a user_ that it was created by a student. Here's two competing products, same price, one made by a high school kid, one by a company. I'd wouldn't ignore the amateur product, but I would start at the professional one.
You can consider that `printX` is assigned with the code snippet `function() { console.log(x) }`. In that assignment line, JavaScript does not care what is in the function. The only thing it cares about is that variable `x` is used. The result is that `x` won't be released after `closeFunc` complete its execution. NOTE that it will NOT check the value of `x` or preserve any value for `x`! So, when you call `closeFunc()()` at the end of the code, it will output the final `x` value `4`.
&gt; Code is executed line by line right? So, when function printX is being created or defined, x is 3. This is correct but I think a hard way to think about it. Instead of "What was the value when I made the function", we should be asking "what is the value when I _call_ the function?". So, yes, `x` is equivalent to `3` when we create the variable `printX` but we don't pass `x` to the function and instead say "Read from your parent scope". And in your parent scope, you set `x` to be equivalent to `4`. To see what I mean, let's try something else: const arr = [] const closeFn = function(a) { const fn = function() { return a.length } return fn } const innerFn = closeFn(arr) arr.push(1) console.log(innerFn()) // 1 So we aren't even looking at `arr` until we call `innerFn`
Correct. Although syntactically this is totally valid since `const` only protect the var itself not its deeper content, but this breaks the concept of "immutable" on `list`. When you claim `list` as `const`, you are not only telling JavaScript interpreter that `list` is a constant, but also letting people who read your code believe that `list` will never be changed. `list.push` breaks the promise for them and they will get confused and will cause bugs that are very difficult to find. No matter you are doing FP or not, this is never a good practice. 
thanks for your valuable feedback. 
thanks
There's not much of a difference. The principles are the same. For setting things up and such, almost any tutorial will do.
Oh sorry didn't know there was a LearnJavascript ^^" 
not really what I want, cause I would like to modify the image itself (or create a new one) and upload it, and not just change its appearance on front end.
How does this post only have 2 upvotes? 
You don't. You do integration tests instead. For example, use Puppeteer to load up the page at some breakpoint and inspect whether various things are visible or not.
If I have a string “cat”, I can’t change the value of it to “dog”. I have to make a new string “dog” and store change the reference (e.g. variable, array index...) to point to “dog” instead of “cat”. 
&gt; Well, CoffeeScript is dead The [coffeescript changelog](http://coffeescript.org/#breaking-changes-argument-parsing-and-shebang-lines) seems to indicate that it is alive and well. I think v1 is dead and legacy, and there was a lot of resistance to v2, but it happened, and coffeescript is still a thing. --- Anyway, if there is a company hiring a JS developer, but don't know what a JS developer actually is in 2018, then that doesn't bode well for the company hiring.
Agree. Most of my recent work is to convert ES6 to ES6. Feeling exciting to simplify the code and also considering using ES7 features to simplify more (such as async).
`var list = [];
May I ask why you prefer Jest/Jasmine?
he's a sophomore in high school, not college
This is not Javascript.
I've yet to meet somebody who actually does TDD regularly. People love to talk about its virtues and recommend it to others. But even the biggest TDD advocates I often catch them writing their unit tests at the end. And I'm not even sure if doing TDD will actually result in better practices. It's like a quasi-religous belief. Just trust the process!
What you may seek are the stronger compiler assurances of TypeScript, and its [ReadonlyArray\&lt;T\&gt;](https://www.typescriptlang.org/docs/handbook/interfaces.html) type: const list: ReadonlyArray&lt;string&gt; = ['foo', 'bar'];
Lol I know. I was talking about me. I was playing video games even after college :\)
If you explicitly declare a const, yeah. Otherwise you can change that string's value all day long. var test = "val1"; test = "val2"; console.log(test); Or did I genuinely miss something?
You missed something. We’re not talking about a variable containing a string, we’re talking about the string itself. The value is immutable. This is different to an array, for example. You can change the values stored in an array without changing the array itself. 
It takes discipline, that’s for sure, but i think it’s worth to do it this way
I never went too far into functional, but what it did teach me was what many have said for years that immutability is great even in OO. Things that never changes can be trusted and do not cause any weird side-effects when you least expect it.
Check out fun fun function on YouTube. Super interesting and detailed series on TDD with JavaScript. 
I really dislike the Chai's assertion API. It's obnoxious to type sentences with periods in between every word: `foo.should.be.a('string');` I just prefer the assertion API of Jasmine/Jest more.
i've done it quite a bit, but not as extreme as the books suggest. It really helps you develop better code but it takes way more time upfront. I'd do it for complex algorithms and stuff but not for everything.
I detect zero experience with enterprise development. Which is the keyword mentioned *several times* and then some more. Is it too much to ask that people actually *read* the comments they respond to? (Plus, when a condition is mentioned, it helps not to ignore it.)
Of course, there is no asynchronous programming in Javascript. And with async/await we even have *functions suspended right in the middle*.
First off, please encode those values before adding them to the URL. Just wrap them in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent between the + signs. Second, it's unlikely to be a cross domain error because you aren't actually trying to access another domain when getting the ticket ID. Perhaps your regex isn't working?
Why would you ever use let when const works in the same spot?
So I've spent a bit of time getting to know Nuxt, and here's an initial demo: - https://github.com/davestewart/vuex-pathify-nuxt-demo The main thing seemed to handling states as functions, which was easy to solve; check the 1.0.5 version of the plugin. I did come across a situation with registering components in `plugin.js` where they loaded before the store was set up - would be good to handle that at some point, but for now, I've added more questions here: - https://nuxtjs.cmty.io/nuxt/nuxt.js/issues/c7044 /u/_sirberus_ if you can help that would be appreciated! 
Used in a porn site in 3... 2... 1...
I'm a bit nervous to post this because I'm still a noob and not very confident in my code, but I'd like to get better. I wrote a little app to parse through and display the content from /r/PhotoshopBattles without the user needing the click through reddit's dumb interface. I used the reddit and imgur APIs and I wrote it with jQuery, mostly because I like their $.ajax function. I'm thinking about rewriting it in vanilla and using axios for the requests instead. Check out the app here: [Photoshop Battles Viewer](https://github.com/JonKelley88/Photoshop-Battles-Viewer) It's not responsive and sometimes the images don't appear on the initial load (Does anyone know why?). I would appreciate feedback on any part of it, but in particular, I am looking for ways to improve my JS. 
Thanks for the feedback, I genuinely missed that one. So I might have to move this to the inside of the cases. On the efficiency comment though, I think it is vastly overrated. Using this strategy I have never ran into performance issues. Because generally your reducers handle uses cases or interactions on a higher level than the more localized component states. And those higher level interactions tend to run less frequently.
Although these changes are really nothing, its a few good tips. 1. Put you JS import just before &lt;/body&gt; for speedier load times. Currently before anything renders on the screen it has to load the JavaScript which seems quite hefty. 2. If you do a few websites you should look into Bootstrap. It makes your page mobile friendly, responsive and look nicer and it's quite simple.
Thanks for the reply. I more or less understand now, but what do you think about the wording of that sentence in the article? 'The closure is a collection of all the variables in scope *at the time of creation* of the function.' Is that the best way to explain it then?
&gt;(btw the console.log(closeFunc()()) doesn't need the console.log :D) Oops..LOL Thanks for the reply. I more or less understand now, but what do you think about the wording of that sentence in the article? 'The closure is a collection of all the variables in scope *at the time of creation* of the function.' Is that the best way to explain it then?
Thanks for the reply. I more or less understand now, but what do you think about the wording of that sentence in the article? 'The closure is a collection of all the variables in scope at the time of creation of the function.' Is that the best way to explain it then? 
Ah, that's clever. What do you think about the literal wording of that sentence though? 'The closure is a collection of all the variables in scope *at the time of creation* of the function.' Is that the best way to explain it then?
Have a look at cypress.io - it seems to solve your problem judging by their presentation video :)
I wonder if this could be used to recognize gestures?
I don't think it's a good way of explaining closure but more or less I could get what the author tried to say. The closure packs the variables(think the variables as containers!! It's not a snapshot of the variable values) at the time it is created. Think of a thief steals all the phones on a bus. He packed all the phones in his backpack so that even if he leaves the bus (the function who created those variables ends ) he still has access to those phones ( the closure can access those variables even if their creator ends). However the original owners can still lock their phones remotely after being stolen ( the creator function can still change the value of the variables after the closure is created). That's why we say the thief only steals the physical phones not the contents in the phones.
As someone noted already, the *variable* is still in scope. The value that's stored in the variable was changed. There's no guarantee that the value won't change, just that you can access the variable.
`const` doesn't always work where `let` does. const t = 2; t = 4; // Uncaught TypeError: Assignment to constant variable. Arrays work because you're not re-assigning the array generally (only adding/removing if mutating) because they are modified by reference.
wtf... you really deleted your old comment with negative points and pasted the same thing. xD
my next post will show you how to prevent xss in excel
I never said that it does.
Just fyi every programmer (even working professionals) feels this way form time to time... Best advice is to try not to get mad at yourself or the code. Create a positive relationship with solving bugs! If you find some crumb of curiosity and fun when you solve hard shit you will be able to sustain yourself and get over the hurdle of learning complex stuff. Also try out other resources, like this book: https://nostarch.com/javascriptforkids (I know it sounds patronizing but its really good! I use it to teach adults javascript where I work)
Hi /u/antoaravinth, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
JavaScript is not a good language for writing unit tests. even without taking about TDD it is p super hard and tricky to write tests with tools like jasmine. if you want to learn TDD, use Java or Python. if you have to use JavaScript, don't do TDD. Actually I don't think TDD helps me improve quality in any perspective. In contrary it encourages people to do anything only to pass the tests without thinking about code readability, architecture,and any thing else. 
The book’s well written and clear but the exercises, in general, are very difficult. The squirrel project really through me for a loop, and the exercises at the end of Chapter 4 were brain melters. I’ve heard about MDN (Mozilla’s website), is that a place that might be a little more, user friendly? (I was told Eloquent JavaScript was good for beginners.) 
What if the variable definition itself happens after the function definition like this - var closeFunc = function () { var printX = function () { console.log(x) } var x = 3 return printX } closeFunc()() So in this case, the variable x is not in scope 'at the time of creation' right? Yet it works. Am I just taking that sentence too literally or is there nothing wrong it?
What if the variable definition itself happens after the function definition like this - var closeFunc = function () { var printX = function () { console.log(x) } var x = 3 return printX } closeFunc()() So in this case, the variable x is not in scope 'at the time of creation' right? Yet it works. Am I just taking that sentence too literally or is there nothing wrong it?
There act of learning the syntax is the easy part, you're also learning to think a little bit differently. Eloquent JS is great because it pushes you to start thinking the way you need to think when it comes to writing logic for software/applications. I would recommend that you stick to it, but supplement your learning with videos that go more into computer science, and more importantly, coding as a theory. Learn about, and most importantly, THINK about how to put everyday things into heirarchies, models, data sets, objects, arrays, etc. And think about how you could write simple, straight-forward functions, loops, etc. That will help you grasp how you can better use your tools to solve problems. Stick to it, you hit multiple plateaus as you progress, but every level of progression is incredibly rewarding. 
Thanks. I’ll check the kids book out.
I think the ‘thinking differently’ may be the hardest part. My background is English/writing, so this is definitely exercising a part of the brain that hasn’t been exercised in a long time. It’s also causing most of my insecurities about the language. 
obviously opposite. unit test is independent but language features can make unit test extremely difficult. try to find a JavaScript library that can mock any object just like Python's unittest.mock you'll understand what I mean.
I pretty much get it. I'm just frustrated with the wording of that article. For example, if the variable is defined after the function definition. var closeFunc = function () { var printX = function () { console.log(x) } var x = 3 return printX } closeFunc()() Here is the line again - 'The closure is a collection of all the variables in scope at the time of creation of the function.' The variable x hasn't been created 'at the time of creation of the function.' So it can't be in scope WHEN the function was created. It's a matter of where not when right? The function has access to the variables in the scope it was created. Time of creation doesn't matter as long as it was inside that scope. I'm just frustrated that I can't take things literally from guides/articles as I learn to code on my own.
Apparently I am an idiot.. I was using Value instead of innerText.. so I wasn't actually getting anything, I have been able to get it to work using: javascript:function url() { var date = new Date(); var y = date.getFullYear(); var m = date.getMonth() +1; if(m &lt; 10){m = '0' + m;} var d = date.getDate(); if(d &lt; 10){d = '0' + d;} var date = y + "-" + m + "-" + d; var ticketID = document.querySelector('div.partner-warranty-info').innerText; return 'https://docs.google.com/forms/d/e/1FAIpQLSdgCA1L2LNy1VTLeUxJwSuQyR7Ps1bmkve1JAhXh2J8BhEk6Q/viewform?usp=pp_url&amp;emailAddress=boise@ubreakifix.com&amp;entry.1537985835=403&amp;entry.773908209=Boise&amp;entry.5003097='+ encodeURIComponent(date) +'&amp;entry.889241924='+ encodeURIComponent(ticketID) +''; } window.open(url(),"_blank"); However and my final problem, the ticketID give a long string with Date, Name, etc. and ends in a long number, which is why I had the regex.. I only need the number on the end.. any ideas on that one?
Sinon.JS has all of that capability. You’re just a Python fanboy, lmao. 
I'm not talking about fake or stub in sinon. In regards to python mock, you can call any methods or access any attributes on a mock and you will get another mock. In pseudo code, `m = Mock(); assert(m.foo is Mock); assert(m.bar() is Mock);` This is extremely useful since I don't need to mock every attributes deep in a complicated object to make my test working. In JavaScript? Well its easy to write a single level mock (I can do that too) but making a mock that can catch any calls? Hmm I'm still trying to make a mock library that can do this. I appreciate if you could let me know how sinon can achieve this. Why people invented dependency injection such an anti-intuitive thing? Because JavaScript cannot mock what is imported. JavaScript does not have the concept of "module". You want to mock the whole dependency? Sorry you can't. Once something is imported, there's no way to replace it with something fake - unless you can gain access to the context, which as far as I know is not possible. 
Think "the time of creation" as "the context of creation"... it means the whole `{...}` of the `closeFunc`. `printX` is not executed when defined so javascript only cares about the context. Again don't pay too much attention to the sentence, as long as you understand how scope works that's fine.
Hoisting will take effect and it's the same.
Anyway this is not the point. Go back to what OP asked, consider the following two points: - is writing test cases easier with python or java than with JS? - does TDD encourage people focusing on test cases instead of design? I know that there are many libraries that can make JS unittest feasible however that does not change the fact that it is much more difficult than doing tdd in python or java.
Explain in words what makes Java unit tests easier. You have happy path, you execute function, you expect result. Then, you make additional cases that test exceptions and unexpected inputs. What is fundamentally superior? Explain.
What you are talking about is the ideal case. Unit test is not only execute then expect. You will consume 80% of your time on dealing with dependencies. Either with mock, stub, fake, whatever you call it. I apology for my previous comment about Java - I don't know Java at all. But I can explain to you why python is way better easier than JS. 1. with unittest.mock you can mock everything without any efforts. Think of how to mock this in JS: `var a = { foo: () =&gt; ({ bar: () =&gt; ({ b: 1 }) }) }`. And the caller do this: `a.foo().bar().b`. If you want to mock `foo` then you have to make a fake object that returns an object contains an attribute `bar` which returns an object with attribute `b`. All of these are not necessary in python. 2. python has the concept of module so even after something is imported you can replace it with your fake like `module.foo = fake()`. unittest.mock.patch just does this. 
1. You don’t put all that in one test. You break it down to a more fundamental level and make sure the object that bar() returns is what’s expected. Then you have another test that makes sure foo() returns bar. Don’t overload tests. 2. Node with ES6 modules has modules too... duh. I’ve already told you you can mock imports.
Absolutely. The "memory" would most likely be stored as JSON. You can obfuscate and complicate things a little, but it should be taken for granted that anything running in the browser can be replicated. If you were to do that, you would more likely run your code server-side to be used via an API.
&gt; Since 2015, ES6 (ECMAScript 6) has been out for years and it has been accepted by most developers and has been proven safe and effective. Open up safari console, copy / paste: var arr = [1,3,5].map((i) =&gt; i*i); console.log(arr); ... next
whats the point?
Thanks!
If I want to learn about this stuff, should I start with learning standard Tensorflow before trying to learn Tensforlow.js?
That's actually an interesting application, makes me think about the inconceivable ways ML will change things, big and small. Everything.
I’m a web dev with no ML experience. I got really excited when they released this tensorflow.js api. Unfortunately it’s still really hard to understand. Google offers like a 12 hour ML crash course that will help you understand concepts. And then there are walk through with code examples that are tensorflow.js specific on their site. I’m still learning myself so I can’t say a best way to go about it but there are (scarce) resources out there if you look!
Sure, but if it's actually running realtime in the browser then all the info you need to copy it is available to you.
Ok, thanks for the help!
If I were you, I would read up on some language agnostic concepts of ML (how neural networks work) and maybe start playing around with something that's easier to pick up, such as brain.js. Then move on to something more complicated. Here's a good read: http://neuralnetworksanddeeplearning.com/chap1.html
This only becomes worth thinking about if you're trying to render at 60fps, for example, and need to process a lot of data in under 16ms.
&gt; It's like a quasi-religous belief Which is why I like to call it `The Cult of TDD`. 
You can do the same in node it's called `rewire`
i don't envy you, because any of those things could reference half a dozen 'aftermarket' or official ecmascript features, and mixing them doesn't always yield the most maintainable code I would guess those are selecting the body (tag) of the document implicitly by tag name... $() is used in jquery and probably other libraries similarly to querySelectorAll as a catch-all tag/id/name/class/etc getter I recommend Making sure you have an id and probably a name on your element (and make sure you're using document.getElementById, not just getElementById) if you've already done that, try console. logging the output of the selectors already in use to get some more insight into what they're doing 
The $(‘body’) stuff is jQuery library and not inherent to JavaScript. It is used as an easy way to find elements on the page. You may wanna look into that. There is other libraries that use the $ thing but jquery is the most famous and by far the most used. So look at jquery tutorials and see if you start understanding stuff In order to understand scope in JavaScript, I recommend you watch a Udemy class called JavaScript, the weird parts or something like that. It is $10 and worth every penny. You will need to have a bit of background in JavaScript before hand but just beginner stuff As far as programming languages go, JavaScript is very weird, and behaves totally differently than many programming languages. For example the class structure in JavaScript isn’t a real class like you would see in Java but actually a JavaScript object. the course I mentioned will explain all that 
N00b here...is there even a difference between for loops and for each? I wouldn't have expected much difference....
This is good info for learning javascript. What if you've already done this though? How do you get a js job then?
thanks - when I went to run document.getDocumentByID(myid) - it comes back as null. When I do a console.log on Document, I can find it in there .. but it's buried down a bunch of levels. Is the reason it can't find it because it's not at the surface level? 
I will super sign up for that course right away : thanks! 
Somehow JavaScript continues to impress me. That's pretty cool.
I'm confused, how can "npm scripts" count as a task runner, and replace Gulp, among others? 
code: [https://github.com/jordanleo7/fcc\-pinterest](https://github.com/jordanleo7/fcc-pinterest) live: [http://nodejs\-pinterclone\-pinterclone.a3c1.starter\-us\-west\-1.openshiftapps.com](http://nodejs-pinterclone-pinterclone.a3c1.starter-us-west-1.openshiftapps.com/) I just submitted this Pinterest clone project to finish the freeCodeCamp back end development certification, and I'll be using it on my portfolio to find my first developer job. I built this project with React, Apollo, Masonry, Node, Express, GraphQL, Mongoose, and Passport.
Maybe try [http://read.humanjavascript.com/](http://read.humanjavascript.com/)
I'm curious why. Knowing how to test responsive pages is definitely something that a Javascript developer would be interested in, and it is something that is typically done in Javascript too.
Good points, I'll restore it. Sorry.
Well, I want to use it on a webpage. I can manually compare files and show the output, but I expect there's lib for that.
Hi /u/RangleonReddit, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Hi /u/snoozerextension, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
&gt; If you want to run several in parallel ... you can just pull batches off the array at a time and use Promise.all to run the batch in parallel. That only works the same if all requests have very similar latencies. The promise returned from Promise.all will only resolve once all the underlying promises have resolved. But if some of the underlying promises resolve much sooner than others, you'll have dead time where you don't have all N requests available. Promise.all also rejects immediately if any of the underling promises reject even if other promises have not yet resolved. I'm not sure 
shouldn't be... getElementById should get any element with the matching 'id' token (make sure yours has that, that the casing (upper/lower) matches, and that it is in the same frame rather than an iframe or popup
Your for-of is missing a `let` so the variable `i` is leaking to global scope. Other than that, good read :)
https://github.com/google/diff-match-patch
It is in a label..which is in a div..
And yes , yikes .. it’s getelementbyid.
.attr() needs to get passed an attribute to actually look up. For example if you want to look up a certain attribute in an element you could do: $('#changeImg').attr('src') which would in your case return: https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/2000px-Tux.svg.png To assign an attribute you would use a second argument like this: $('#changeImg').attr('src', 'https://my.app/my_awesome_image.svg') You can read all about it [here](http://api.jquery.com/attr/) 
hmm, i tried it: i typed into the console: $("#changeImage").attr('src','http://www.pngmart.com/files/4/Cool-PNG-File.png') but then nothing changed onscreen :(
Try using ' instead of "
Might want to log out the result of your selector to make sure jquery is loaded and working correctly
For me it was the realization that a test is the fastest way to run my code. I don't use nodemon, I don't even run your apps on localhost anymore.
The jquery selector is not right here. Try "#changeImg"
how do i do that again? instructions were unclear :(
Your're using $("#changeImage").attr('src','http://www.pngmart.com/files/4/Cool-PNG-File.png') in the console when the element has the id "changeImg", not "changeImage". So try using $("#changeImg").attr('src','http://www.pngmart.com/files/4/Cool-PNG-File.png') instead. 
oh shit wait i just realised my ID for the img was changeImg and not changeImage. hold up ill try and report back, thank you!:)
&gt; The variable x hasn't been created ... Read up about “hoisting”. `x` has indeed been created when the function is created.
hey man, thanks so much, it solved my problem, silly me!!!! :\(
Using arr.concat(newItem) would be more in line with functional programming principles
Nice! It's refreshing to see a new not-React/Angular/etc website, the performance is great. Yes, rewriting in vanilla should be doable, and especially valuable as a learning exercise. As you do it, 1-10–line helper functions can go a long way. If you're willing to drop IE (not Edge) support, you can drop axios too, in favor of [fetch](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch). The first thing I would change about your code is to take all CSS editing out of it, and instead change it to toggling meaningful class names, with the styles in CSS. Second, split up functions that are very long, even if the split-out part is used only once. The biggest/easiest opportunity is all the event listeners you've inlined. It will make the code easier to read (logic is grouped and named), which will make it easier to see patterns in and organize. More on the UI side: instead of updating the shopped image's .src, create a new image element and swap it in. Doing the first causes the UI to do nothing until the new src loads, so if the src is a .gif that takes 10 seconds to load, it feels like the UI is unresponsive. Doing the latter responds immediately (clears the old image) and lets the user see the image as it's loading (a big jpeg wiping down the screen, or frames of the gif as they come in). (If you really want to get fancy, update the .src then wait 100ms, and only if it hasn't loaded yet do the swap, so that you get the benefits of the swap without flashing a blank area when it wasn't necessary.) And definitely on the UI side - get rid of the "View photoshops" button and trigger that action on a click anywhere on the image or title. "Click this thing to dig in" is a well-known UI paradigm.
React being shoved down developers throats on every occasion made it into what it is now. There's nothing wrong with Angular the difference is it expects you to be comfortable using TypeScript and with strictly typed syntax which my guess is not everyone likes. I for one enjoy writing Angular find it much better structured and thought out than React + Redux. Given how quickly Dev tooling changes and how quickly frameworks die we all gonna use something else in the next few years.
No you aren't redeclaring it. It's perfectly fine.
But why? React is a cross platform framework, the api is generic and not bound to the web in the slightest? We use react-native on multiple platforms, and we do re-use generic packages, like hot-loader, redux, router, motion, styled-components, etc. This is possible because the 'react' package simply defines what a component can do, and as long as the component doesn't rely on react-dom it can be used everywhere. Pete Hunt once said this was the goal from the get go.
NPM Scripts can be used as a build tool that replaces Gulp or Grunt. This [article explains it well](https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/) in more detail
Didn't like it because it's too basic for me. Any other app ?
It appears to be deliberately misleading and the conclusion and answer is incredibly wrong. The only way that the getUser function would be "skipped" is if it was marked as "async". Then it would return a promise and that could be used to *properly* wait for the response, instead of setting a timer and hoping it's done by then. But the author doesn't show the declaration of getUser, and certainly doesn't talk about the proper ways to wait for asynchronous code to finish. The comparison to Java is inept, too, because it also has async code.
cool
First time I'm hearing about that, and I'm considering myself on top of news. Thank you! 
There are websites that give free web templates for the sake of learning. http://www.free-css.com I started my first project by finding a webpage I liked, and then I would try to recreate it from scratch. Definitely helped me with the whole coming up with an idea part of the project. 
https://youtu.be/e57ReoUn6kM
It really depends where your bottleneck is. It's much faster to do diff checking with immutable data (since you just need to do a single flat reference check). Even if the cost of modifying your state is marginally higher, you save a couple of orders of magnitude elsewhere as a result.
Very good 2 parts articles with ideas. https://medium.freecodecamp.org/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c
&gt; document.getDocumentByID(myid) First of all, should be document.getElementById Second thing, be sure to put ('myId') in quotes - that's why it returns null see here: https://codepen.io/damyco/pen/mLxOOY
Check out SoloLearn 
Thanks 
&gt;the ML is occurring in python on a server. not necessarily ... https://js.tensorflow.org/
I thought they had started moving over to Go?
Parcel is still very new. And if you have an already building project, you rarely change the build if it works. New projects where it can shine, however many use angular-cli and create-react-app to quickstart a project, and both use webpack at the moment.
Always check that the first function is returning what you want before continuing your code. I.e logging out the result of selecting $changeImage would have shown you that wasnt an element, and save you the step of maybe thinking the problem was with the attr() call and leading you to notice the error sooner I call it "active debugging" and I'll pretty much check my assumption on every line before moving to the next!
One should return an element and the other should find nothing. I dont understand, hmm
mind-blown
I really like some concepts of angular, but they can all be added to react aswell. What I dislike about angular the most is the template language. 
They have way too many exercises where all you do is fill in the values for variables. Like the looping lessons. You don't actually put code in place to construct a loop. Instead they will run through a loop printing out strings or colored squares and you'll set the values that go in the strings or colors. So essentially they hint at what you need to change, you change it and watch it run. For them most part all you are doing is reading code - if you pause to do that. The quizzes do make you think a little thought they are usually 1 or 2 questions and that's it. I like the idea but the execution isn't the greatest.
What have you tried? What didn’t work?
 const tagSet = new Set(); for (const obj of theObjects) { for (const tag of obj.tags) { tagSet.add(tag); } } const tagArray = [...tagSet];
I did it using the following code, I'm guessing this could be shorter const tags = [...new Set([].concat(...this.props.notes.map((note) =&gt; note.tags)))]; 
Gotit! const tags = [...new Set(...this.props.notes.map((note) =&gt; note.tags))]; 
Really you prefer jsx over regular html Syntax?
This isn't StackOverflow is it? Kidding! Found the solution already! See below.
Even shorter, destructure the argument: const tags = [...new Set(...this.props.notes.map(({ tags }) =&gt; tags))];
Ooh! I like that! thanks
This is aimed at teaching grandma how to code.
I guess they stopped.
I found it tedious and dumb after about 10 minutes. HOWEVER, this is designed for people who have no background in programming. People who do not have any kind of mental model of any aspect of programming. To you, variables, loops, functions are second nature, to people that this is targeting those are all foreign concepts. Presumably they've done some research that these are problem areas for complete beginners.
Regular Html doesn't have directives, pipes and some other constructs that you have to learn. Jsx has so few rules, the rest is Javascript. 
Can you post some dummy data formatted like it comes from the $.get\(\)?
Ok I give you that you do need to know those. I guess it's personal preference for everything. I don't mind React if I'm honest I find JSX bit annoying on the other hand composite components are brilliant. 
Shit, i didn't new i could deconstruct the argument! neat.
I would accept that but they aren't teaching people how to do looping - they are teaching them how to change variable assignment values. It would have made more sense if the exercise has you construct a loop. Let me get an example from the app. The exercise "Band Names Generator" says it will teach you about putting a loop inside another loop. You are given the following code: for ( var adj of [ 'Raging', ]) { for ( var noun of [ 'Pharmacists', ]) { print('The ' + adj + ' ' + noun); } } What you have to do to successfully complete the exercise is add more strings to adj and noun. You don't actually interact with the structure in a meaningful way to understand where the loops are or how they work. You don't have to 'type' out a loop you just add strings to a list - the app adds the quote marks and commas even - you just type of what will be in the strings.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
&gt; I would accept that but they aren't teaching people how to do looping - they are teaching them how to change variable assignment values. Maybe. And I say that because I don't know what it takes to teach programming to complete novices. I am skeptical of the educational value of the tool, but it very well may be based some good fundamentals (like some current research or usability studies they've done, etc.). 
Well I'm not an expert either - but I'm going to go out on a limb and say that typing in variable values when all the other code is provided for you is not likely to be a great way to teach someone to code.
Maybe that's the other half.
Build a tic-tac-toe game. You'll need to build a user interface, implement the logic of the game with its board, pieces, turns, etc, and then you can implement an automated player to play against (first you can build a dumb player, then a smarter one if you want).
object?.[expression] is so ugly. Great feature though. I'd use it all the time. 
Wasn’t this rejected some time ago? Or can they keep trying to get it into the standard?
Used angular one back when it was new and shiny, but never but didnt build anything large with it. IMHO Typescript is such a blessing (im not a java dev, last time i wrote java was back in college, some 8 years ago) for development. Its not all in, as all javascript is valid typescript. Personally i have never used the newer angular versions, but because of typescript i know the dev experience. I use typescript with react and it really catches soooo many bugs. Typescript is imho really the best thing that has happened for a long time in js world. I also understand some devs who absolutely hate it.
Mandatory jQuery is a library not a framework. Right?
Not fully rejected, but I think it was agreed that they should try for a better syntax before allowing it to go past Stage 1
It's close, but still not what I'm looking for. I see it compares it by char, rather then by word. I.e. if there's 1121 and 1131, I'd like to highligt all the number. Here's what I want to get: https://imgur.com/a/8f7aNrB I've edited some data, but shows the idea: one line removed; one line added, several lines modified: lines highlighted, exact difference highlighted too. 
I personally would love if this got added, I use Ruby's safe navigation operator (`current_user&amp;.roles`) fairly regularly. The biggest issue I've encountered with using the Ruby version, and I'm going to assume will encounter if this were added, is someone else reading the code that is unaware of what the operator does will be completely confused the first time the come across it. I do like the use of `?` over Ruby's `&amp;`, as that makes it *(slightly)* more clear (in my opinion) that you're only doing the next thing if the return value from the previous method/accessor exists.
There's the "do it yourself" option, and then there's the "do it like a smart programmer" option. The latter option is to use Lodash, specifically it's `uniq` function.
[removed]
You can’t explain semantics to people who don’t care.
From the link: &gt; Which JavaScript library or framework would you regard as essential to you on the majority of your projects?
Most surprising is Vue: 1. React 2. None 3. JQuery 4. VueJS 5. Angular
This is very helpful, thank you :) 
"Understanding how arrays work is very easy. I'll just bring in a React component, Redux store, and the whole JQuery library to demonstrate just how easy."
What makes React so appealing? 
It should be noted that being employed as a developer was not a requirement to participate in this survey.
not quite that bad, but if you need a medium article to explain the reduce function \(as opposed to the MDN or w3schools page... not that this is inherent knowledge \), you probably don't know about typescript, and won't understand why these examples don't work
This should give you some insight into the event loops and how callbacks are handled closer to the metal; https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5
Its popularity.
One reason is that it's just a stone's throw from React Native allowing you to easily produce a mobile version.
They should've gone with ??
Hi /u/everek123, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/nab1lll, For javascript help, please visit /r/LearnJavascript. Thank you!
I'm downvoting it for title. And then for the rest of article that show absolutely nothing new, except the fact that people seems to learn frameworks before language.
you could use chrome [commands](https://developer.chrome.com/extensions/commands) to handle the shortcuts
This is horrible. I hit the button, the pretty error appeared, I tried to select the text because it has instructions in it and the sodding thing faded away before I had the chance. Make the box stay visible while the user's mouse is in it. Make "tweet cack to... " into a URL that does as much of the hard lifting as possible. I don't twit, but if you can construct a URL that prepopulates a new twit page for them, do it. If I got this as an error, you can bet that if I could remember the twitter address you'd get a stoning.
And Hi :) 
It's more functional, one-way data binding and its state management makes it really simple to work with and control data flow, JSX makes things feel clean and compact.
why is that surprising? Vue and React are pretty much the same but Vue is just syntactically much nicer.
And in 5 years, it will be Vue.js or some other new framework. 
I can't help but think to the normal user, this would be very confusing, and to a developer attempting to debug the problem, I don't think it would be much help. Maybe at the very least it should a stack trace. At least then, although it will be confusing to the user, a developer might be able to track the bug more closely.
The interviewer wasn't being very helpful. I feel they lured you into a trap that was unfair. The original code actually expresses the intent pretty clearly, the latter is extensible but on its own lacks clarity or purpose. 
I should add, interviewing is hard for both sides, but any machiavellian crap will backfire on the interviewer more than the interviewee. Good interviews are collaborative. 
Look up the difference between let and const because you should be using const here 
A few years ago, I thought this would happen too. React is already 5 years old, though, and at least in my part of the world, the market for React developers is hotter than it's ever been. It appears it'll continue on its upward trajectory for a while still. Things will definitely change and evolve, but I think we're seeing some maturation in the JS ecosystem so perhaps we won't see as much rapid churn as we did in the past. 
As in you can share a lot of code between a react project and a react native project, or that learning one allows you get easily use the other because they work similarly?
It’s pretty easy to use. The initial effort is setting up and configuring your dev and deploy processes. After that it’s easy to rapidly build out your app. If you do freelance - this will likely be a one time time investment that you can reuse. I’ve heard good things but haven’t used create-react-app. 
&gt; I think we're seeing some maturation in the JS ecosystem so perhaps we won't see as much rapid churn as we did in the past. I hope so. I'm envious at how C# or Python programmers don't have to keep up with as much shit as web developers. 
&gt;What makes React so appealing *to this small subset of developers*? FTFY. Never heard of ashleynolan.co.uk or it's polling. There are many other polls that don't have anywhere near these results. Here's one: https://w3techs.com/technologies/overview/javascript_library/all This one has jQuery at 96.5% market share, and React at 0.6% market share, which sounds a littler closer to reality depending on your version of reality. 
I think he meant he was maybe surprised it wasn't higher?
I partly agree with you, but I do think templates are objectively worse than JSX, and that's a huge thing. My evidence is that JSX is compiled while templates are strictly interpreted, and often poorly. I've spent hours trying to figure out why Angular bindings were emitting nothing, only to realize I misspelled a variable name and I was trying to access a property on undefined. In Javascript, this fails and emits an error, linters will catch it, and it will be quickly solved in development. In a template, nothing happens. Just nothing. At least in AngularJS, you will simply see an empty string as though it was valid input that corresponded to an empty string. Not sure about Angular, but the fact that logic is now in strings rather than code is a tremendous failure. As for tilting windmills, I largely agree until your non-technical management comes at you with articles claiming Angular is "the enterprise solution" and React is "for smaller projects".
The stack trace and better debug info is in the console. The original problem is if the console isn't open - you'd have no idea that the error occurred.
Survey was about developer's perceptions, not actual currently running products (which includes legacy products, BTW).
yes it is widely used now, but learn vue if you want to stay ahead
Not terribly surprised. I started learning Vue recently and it's great. It's easy to use, easy to learn. It might not have the massive ecosystem React has, but I love Vue so far. And furthermore, it's great that I can just port in Vue for any other project. I built a center-of-balance calculator for my Air Force job (I'm a load planner for cargo aircraft) in Vue. Didn't use components (aside from the root component) or the vue-cli, I just used directives for their reactivity. Really simple to use.
&gt; I'm getting really tired of people trying to push the idea that templating is some sort of objective failing of frameworks that use it over JSX I agree. There are real pros and cons to each: JSX is not realistically statically analyzable (in the way that svelte templating language is), but error reporting and typing integration in templated engines tend to leave a lot to be desired. There's some progress being done on both sides, but it's still a hard trade-off to make as a framework designer. &gt; that must be purged to save it Yeah, I really don't get that mentality. Having different tools using different approaches is good! That's how innovation happens and that's why we aren't still using Prototype.js. Besides, use the right tool for the right job. That includes taking into account team velocity, cost of maintaining legacy code, etc.
Both
`$ next build &amp;&amp; next export` generates the site statically. I'll add Next is good because of Nuxt (not affiliated), which shares much of the same design and API as Next, just uses Vue instead. I use both for different websites and its very easy to switch between the two considering their similarities. 
Being able to abstract templates state and logic into encapsulated javascript components. Also an abstraction of best practices for DOM manipulation and cooperative scheduling so you don't have to think about it. 
I think it's just that Vue still has that "new hot thing" vibe that lots of the cool kids like to talk about, but hasn't quite hit the mainstream stride yet. Not surprise because it's not good, surprise because it's been more widely than adopted than they realized. Maybe that's just my biased perspective because I haven't gotten around to touching it yet, but that's why it's a surprise to me as well. 
Couple things: Why should our view be so decoupled from the interactive part of the code? React does away with this and instead brings the html into the js side so that interaction and display are tightly coupled. Another benefit is that React includes a virtual DOM, making sure that the slow interactions with the actual DOM are only done when necessary. Another is that React forces you to encapsulate your visual components, helping to clarify their inputs and outputs. This means easier testing and reusability.
Don't listen to this, Vue will never displace React. We aren't in a situation like jQuery vs Angular or Angular vs React, where one framework provides significant benefits over another. Choosing React vs Vue is large subjective, and there aren't many significant benefits in either, but React has a much larger ecosystem and I prefer it over Vue in every way.
It's quite easy to get started. https://github.com/facebook/create-react-app
&gt;The initial effort is setting up and configuring your dev and deploy processes https://github.com/facebook/create-react-app
There is a graphics, but it doesn't seem to be interactive :/ 
thanks a lot, actually managed to get it running by just having it sent to me again in a. txt
The vue ecosystem is more than large enough to support any project
Glad to see "None" ranking high. Shows that a lot of people realize that tools come and go, but fundamentals are what are really essential.
I said it in a joking manner but the adult film industry has driven a large number of internet technologies forward. It's generally frowned upon to discuss it in conferences but ask in private and you'll see what I mean.
I'm pretty sure if you look on github or in npm you can find the vote-bot written in React responsible for this result
This right here is the correct answer.
Have you ever re-used React components between a native and web project?
Of course you don't need If/Else, but sometimes it's better than the alternatives. You choose what's best for the situation.
&gt; The Front-End Tooling Survey 2018 So among readers of this blog there's a bias towards a specific library?
Answer: No, it is not a replacement for Redux.
And definitely not nicer
I'm most surprised by jQuery. Either there are a ton of people stuck with legacy code bases, or a ton who desperately need a skill refresh.
Not really, there's probably a good amount of people that found Angular to be kind of a shit show or felt like they got the rug pulled out from underneath them when Angular 2 was announced, so they moved on and found React and/or Vue. See also [Angular — Stop Already!](https://medium.com/@chillypenguin/stopping-angular-40ea642c484d) which is an interesting read.
I’m surprised Moment isn’t in the top 5. 
Yeah, React is dope AF. Just make sure you know JavaScript before blogging about how hard it's been for you to learn. ;P
i never said it would replace react. It might, but I don't know. However it is growing faster than react and is likely to overtake it in popularity.
I am not sure if it is by design but the Documentation site has both English and Chinese displayed at the same time and it is hard to read. Looks like a lot of work went into this but the Codepen example is just a Hello World button. I'd add more Codepen samples.
I thought that article was.... bad. He specifically picked a contrived Angular template example and tried to pass it off as 'i didn't look into it'. His feigning of ignorance throughout the article is dishonest at best. Angular was a shit show for a whole 6 months, which was back in 2016. I wish people would just admit we're going with what's cool instead of fake technical arguments.
There's always the hidden third option, be a condescending rube on reddit
I can't speak for Angular (&gt;=2), but that's not quite how it works in Vue. If you reference a variable name in your template that doesn't exist at runtime, you'll get a runtime error telling you exactly what the problem is. The level of sanity checking at development time probably still isn't as good as actual JS (let alone TypeScript), but it certainly doesn't just silently fail, and it does get linted. (Also, Vue templates aren't really 'interpreted'; they're compiled to render functions at either build time or runtime, depending on how you're using it.)
meh, I really do not like the look of JSX, at all. I find it awkward. Vue Components look much cleaner to me
You won't understand until you've worked with both, they are fundamentally different. Vue is template based, React is javascript based.
Well thats something entirely possibe with react as well. In fact facebook themselves dont use react for their entire apps. Only in for select components that require the amount of optimization I guess
React is amazing. Lots of people claim it's just another fad framework de jour, but I disagree and here is why: Yes, React is a framework, but it's also a fundamentally different and *new* paradigm for web development (at least in the mainstream). In React, the idea is that your views ("components") are (supposed to be) pure functions of their props and state ("props" are just like html element properties, they are how you configure the component, "state" is just internal state). Whereas in most other mainstream frameworks you are modeling state changes (when this model changes, change this element value, show/hide this element, etc), in React you are simply modeling the data itself in any given state, and React handles the work of updating the DOM for you. That might or might not sound confusing, but React on the surface is actually very simple and easy to pick up. And well worth it.
I bet if I wasn't lazy I could find some internet comment saying the exact same thing when AngularJS first came out...
I haven't personally but I know a lot of people who have. Building a React native app is on my to do list I just haven't gotten there yet unfortunately. It's totally doable and worthwhile to share code between projects, but it does take some work upfront to learn what things can be ported over, what things can't, and how to structure your code to reuse the things that can. https://hackernoon.com/code-reuse-using-higher-order-hoc-and-stateless-functional-components-in-react-and-react-native-6eeb503c665 https://blog.smartive.ch/how-were-sharing-code-between-react-and-react-native-607cdd1f5247
Vue provides an api, React provides a javascript abstraction. That's why people say "React is just javascript" because you can use Javascript patterns with React Components. With Vue that's much harder, but Vue does other stuff like give an api for free scoped css. I'm not sure what you're experience is, I've built webpages with both and it feels significantly different. 
There's a little bit of both going on there. The syntax is the same but the components that you use are different. A lot of the components that you use can be easily rewritten for react native.
Just pick a pattern that makes sense for what you're trying to do, you can probably create a few of your own boilerplate this way https://addyosmani.com/resources/essentialjsdesignpatterns/book/
jQuery is a library not a framework, how can anyone trust that site now?
If you're looking for a boilerplate, you are inherently asking for a framework, so just go ahead and use a framework with a CLI. As someone who primarily uses vanilla js at work and side projects, this is my take: using vanilla js is a consequence of how chartered is the realm you are threading. If you are building a thing that talks to a database and renders stuff in HTML, that's a workflow that's been optimized to death by frameworks. If you're writing libraries, there's usually not a whole lot of resources to hand-hold you through the task of code organization and that's when being comfortable with the raw power and footguns of vanilla becomes more of a necessity. If you're interested in implementing the building blocks that would othewise be provided to you by a framework, that's another good reason to use vanilla. In this case, you'll probably want to draw inspiration from the frameworks that you have experience with and maybe research how things are done in other frameworks. This should give you a good idea regarding what underlying technologies to use, and what kinds of abstractions to create.
&gt; That might or might not sound confusing, but React on the surface is actually very simple and easy to pick up. And well worth it. I think it is because React is the framework that closely resembles how vanilla HTML elements work. It is one-way binding and sub-elements can only affect its parents through event handlers. Like in Vanilla HTML we always do &lt;input type="text" onchange="onTextChange()" value="bbb" /&gt; In React you can create a custom form element which has similar syntaxes and mindset: &lt;Slider onChange={this.onIntensityChange} value={this.state.intensity} min={0} max={100} /&gt;
&gt; [Vue] is growing faster than react Would like to know where this is coming from. Numbers show the opposite: http://www.npmtrends.com/@angular/core-vs-react-vs-vue 
That would conflict with this other proposal, https://github.com/tc39/proposal-nullish-coalescing, that is meant to work alongside optional chaining.
Thanks for your detailed response. Your final paragraph best describes what I hope to do (probably better than I could explain). I haven't written much without a framework in years, and would really like to "go back to basics" in a sense, e.g. learn about abstractions from the level of vanilla JS, which I think you mentioned.
&gt; React handles the work of updating the DOM for you. Correct me if I'm wrong as I'm not a front-end dev but don't Vue and Angular do that too? 
While I found *Essential* helpful for learning about design patterns, I felt like it didn't really cover much in terms of local development environment, and the overall structure of an entire web application project. ... perhaps I'm not remembering correctly?
Jquery in 2k18 LUL
I’ll never understand the sports team mentality some people have for the frameworks they use.
&gt; Vue is template based, React is javascript based. What? Are you talking about template differences between the two? Because JSX is not javascript; sure it looks more javascripty but at the end of the day both JSX and Vue's templating get compiled (transpiled? idk) into function calls that create the dom elements and bind the data. They basically do the exact same thing, it just looks different. ...I've worked with both. They're _very_ similar. If you're familiar with one you can pretty easily jump into the other because the concept is essentially the same.
From the link: &gt; Which JavaScript library or framework would you regard as essential to you on the majority of your projects? I'm confused, what are you getting at? 
I'm not a front-end dev so I wonder, is it really hard to learn one if you know the other or does knowing one make learning the other easier? 
I really enjoy React, and using it with Redux has helped me immensely in writing clean and relatively bug-free code, but I cannot wait to see what evolves out of React. I feel like there is still significant room for improvement in the FE framework world.
If you just want hassle free hot reloading etc this is an excellent tool https://github.com/egoist/poi
Python2vs Python3 is not even comparable to it imo. Being a JS developer is definitely worse.
Is it hard to do? Bout to start dabbling with React Native myself.
I use this in React apps: https://github.com/rt2zz/redux-persist
&gt; I prefer it over Vue in every way. Not OP, but as someone who is coming from Vue to React (for work purposes, not personal preference): why? &gt;I would go so far as to say Vue is a step backwards and I actively dislike it. How is it a step backwards? It's one thing to not prefer it for one reason or another, but I think even the React dev team would snicker at that statement. Care to elaborate on this?
Same for React. 
A dude at a conference i was at demoing VUE. Someone else said they were there to use VUE knowledge to get jobs. He asked them "Have you thought about react?"
I'm using Redux so this looks perfect. Thanks!
In short, React feels like JS with a little sugar. Vue reminds me of angular mixed with backbone. Custom attributes, templates, etc. I know there are ways to use jsx in Vue and whatnot, but I just don't see what you would gain.
Oh word my bad did not see that. Thank you! 
I've never tried Vue (I hear great things). But, mobx (a simple state manager) has the concept of computed values which are essentially properties which can be computed from existing state. Is that similar to Vue's version of it? 
&gt; I'm not familiar with Vue, and only slightly familiar with Angular, so I'm not sure. Yeah, obviously React and Vue update the DOM for you... &gt; React has one-way data binding (as /u/GreatValueProducts pointed out). Angular v2+ has one-way property bindings by default -- you must use `ngModel` directive to use 2 way binding. 
&gt; a solution could be devised that doesn't include introducing new syntax This already exists in several forms: ((foo || {}).bar || {}).baz function get(fn) { try {return fn()} catch (e) {return null} } get(() =&gt; foo.bar.baz)
&gt; I wish people would just admit we're going with what's cool instead of fake technical arguments. Maybe people are going with what they can reason with more easily?
[Here's an update, with a link to the full discussion.](https://github.com/tc39/proposal-optional-chaining/issues/62)
from my experience TDD kill creativity but results in better code so it depends if you want to play around with something to check how it works you probably shouldnt involve test if you know what you want to do and whats posible then you can write test upfront. So in conclusion if you know what has to be done and how to write test you can go for TDD and then it looks something like this for start if you create some User class you describe how you expect it to behave: ``` // class describe('User', () =&gt; { // method describe('authenticate', () =&gt; { // use cases it('should authenticate for valid credentials', ()=&gt; fail()); it('should notify about invalid credentials', () =&gt; fail()); }); ... }) ``` And while implementing you add tests at least im doing it this way. for testing you can use libraries like [jasmine](https://jasmine.github.io/) [jest](https://facebook.github.io/jest/) [mocha](https://mochajs.org/) for learning I would sugest Angular2 + becouse it already has ready environment ngcli enables fast starting without to deep knowledge and generated components already have template tests.
The latter. A lot of overlap between the two, props, state\(data\), etc.
usually like this http://i.imgur.com/nZ7PWFI.png
Just a little bit of context around who the respondents were \(as I ran the survey\) – they came from a number of different communities, including this subreddit \(as the link to the survey was posted on here a while ago\), rather than just those who read my blog. I would say the main bias would come from the fact that those filling it in are developers who keep up\-to\-date with industry news using newsletters or by being a part of a JS/CSS community like this one – those who that aren't active like this in the industry likely would never find the survey \(and are unlikely to come across the results\). There is likely a bias from this type of respondent to be more likely to use the latest tooling than those that don't. That being said, as I've run the survey for three years, the comparative year\-on\-year results will show a rough trend simply as it's the same type of developers who are taking part each year – and so you can see how their habits are changing each year. Also – the title does indeed do a fair bit of editorialising!
I have built a react-native app, and I write react for the web daily. What I've found to be the crux of the difficulty between sharing components is: With react for web, you can render any html element or other custom react components that you've built, which render any html element or other custom react components that you've built,... Eventually, react for the web boils down to rendering html elements. divs, spans, tables, imgs, etc With react-native, you can render other react components that you've built, or, instead of html elements, react-native components in Facebook's list of react-native component library. No divs or spans etc. Instead you're using react-native Views, Texts, Images, etc. It is completely feasible to create an app whereby the middle non-leaf components are usable within a react-native and react for web context, and only to write leaf-node components separately. I haven't seen this done before, but I can imagine it. Although, styling for react-native is all flexbox, which will need to be abstracted. Also, event handling is different between the two stacks, so that would need to be abstracted as well. The more I think about it, the more daunting it seems, and the more it seems like a bad approach.
React actually helped me get better at JS just by virtue of how helpful knowledge of the language is in your application thereof. And then pair it with TypeScript... it's so nice... _sheds tear_
If you're an engineer, html in js &gt; js in html If you're a designer, js in html &gt; html in js 
true
&gt; Vue reminds me of angular The only real similarities I see Angular on any meaningful sense is directives, which were arguably a pretty great feature of Angular. &gt;backbone What's wrong with Backbone? So far the only complaints I've heard about Vue is that it's not React, that Vue is just a combination of other frameworks^*, or that you prefer React because it's basically just JS with sugar. None of these points indicate how Vue is a "step back" as you put it, but rather highlight why you *prefer* React. ---- ^*- Let's ponder for a second the idea that maybe it's not a bad thing that Vue piecemealed out what are arguably the most useful, and powerful tools that a lot of other frameworks leveraged, and managed to do so in a tiny, easy to use API. 
No, you're right--that doesn't really get into your Dev environment. However. Those patterns do inform application architecture. For Dev enivornment... Do you mean web server, et al?
Most react apps are much farther than a "stone's throw" from being usable with react-native. If you go into a React-Native app expecting things to just work how they work in the web, you're gonna have a bad time. Styles, event handlers, dependency management, build tools. All of these things have inconsistencies between the web and react-native and they will cause bugs. If you want to run your web app as a mobile app, just wrap it in a web view or use Cordova/Phonegap. Personally, I think react-native is far too unstable to be worth using unless all you want is native looking forms.
You will have that problem with any new language-level feature, just look at how puzzled some people still are with short-arrow-functions. But that's the price you have to pay for a better development experience...
That might break existing code in a pretty bad way.
Is that Polymer's influence on Vue?
&gt; vote-bot written in React How would you use a UI library to write a tool that needs no UI?
Not sure I agree with this - engineers should have an eye for the simplest and most elegant solution, which I believe is “html with markup” which vue provides beautifully. I have used both react and vue extensively and jsx, for me, is something we will look back on as a mistake in years to come.
Yup very similar since Vue is built on top of reactive concepts as well
Aren’t higher order components considered an anti-pattern now-a-days? 
I don't think it's right to look at React as "another JQuery" that will have its day then fall out of favor. JQuery and React are fundamentally different things. JQuery started out as a library to basically patch some of the bad parts of early JavaScript. It evolved into a sort of tool bag for JS developers - an alternative interface to the JS API. And as the Web APIs have improved, JQuery has provided less value to developers. React works more at the architectural level, providing a well thought out architecture for creating SPAs. This is independent of the Web APIs, and indeed of JavaScript - languages like Elm and PureScript encourage similar architectures, and wherever you find a compile-to-JS language that's actually used, you're likely to find either bindings to React or a native React-like library. --- I bet that in 5 years, WASM will be emerging as a fully featured interface to the Web APIs. Sharing code between client and server is *huge* for complex applications. To their credit the WASM working group is moving slowly and concentrating on solving a more limited problem set right now - but I think it's inevitable that the project will expand and adopt "replace JavaScript" as a goal.
Thanks for the background information! :)
Maybe, no idea about polymer.
In vue, computed properties are per-component instance though, making it incredibly easy to e.g. combine a `displayName() { return this.firstName + ' ' + this.lastName }`.
Don't know why you're downvoted. Ditching jquery from our codebase is one of the big priorities where I work. You can do most of it with native specs nowadays, and the rest can be done in tiny utilities
Don't worry, I stopped caring about Karma a long time ago, in fact I don't think I ever did in the first place. It is much more satisfying to say what you truly think over getting virtual internet points. In fact, I highly recommend more people try it :)
I always find the sensible opinions here at the bottom on reddit.
Moment has been around much longer and many more people will know it by name compared to `date-fns`. In the context of this conversation, it makes more sense that it would be in the top 5 list.
One thing I would consider a step back when going to Vue is that it’s harder to use higher-order components, something which is very natural in React. Also, React’s Fiber architecture looks like it’s going to be leaving Vue quite far behind when it comes to building smooth 60fps interfaces.
Most of that is JSX, not React, though.
You don't even get the native look in react native. Everything uses its parent UI component and is styled by react native, rather than the OS.
...React has _wayyy_ more jobs than Vue in the US.
thx.. i will fix it :\)
React's components were stolen from web components, which were stolen from native platforms. In fact, web components will be supported by most browsers soon.
DOES. NOT. COMPUTE.
I agree and disagree, depending on the context. Since the wording of the second item is what worries me: "None of them are essential – I feel comfortable using native JavaScript on my projects". The "on my projects" part is something where I'd say a framework becomes necessary. At least with the definition of a project being significantly big to be called a project. I do however think it's bullshit to require a certain framework for things like a job interview. They can be a plus, but should not be a requirement in my opinion. JavaScript knowledge in general could be the requirement and even that is debatable these days with all the compiling / transpiling. So in this way I think it's a good thing "None" is ranked high.
React is super easy to learn, it's just hard to find good explanations for things. I'd highly recommend chugging away at it in your free time. It seems the industry is really pushing vue and react.
So long as you arent touching the dom or any dom-related javascript (lets be honest you shouldn't be doing that anyways) your code should nearly be 100% interchangable. There might be some small things you will have to change like divs turn into views and a few other things like styling needs to be modified but the core of your code should work perfectly fine.
I am really not a fan of some of the design decisions with create-react-app at all. Compared to vue-cli it's incredibly barebones, the webpack config is hidden/ non-existant (depends how you look at it) by default and you have to eject it to change things. I mean I get it, zero config build tool saves you some time but a few options on init and the option to save a preset would make it a lot more useful. Now I have my own boilerplate saved so I don't have to go through the whole process again but not every project is the same so I tend to spend time setting things up manually every time. 
I immediately discredit this survey because jQuery is not a framework. It is a library. 
You can do this with service workers IIRC.
Just that it's fallen out of favor for render\-props I think
BUBBLE. HEADED. BOOBIE.
The survey was about essential frameworks/libraries, and Moment is problably easier to fill in yourself than DOM libraries like React, jQuery...
Oh, yeah you put that way better than I did. +1
Render props is easy to pull off with Vue. You can do it identically how you do it in React with JSX. But check out scoped slots and creating renderless components for the more "Vue" way of doing it. 
[Mobx](https://github.com/mobxjs/mobx). IMHO the best state management library out there. So simple, yet so effective.
I don't know anything about it. Just asking what it's like, what the differences are, etc. There seems to be little to no info or tutorials on it.
Local development environment. Node.js/JavaScript tooling changes so quickly, and it gets rather irritating, as I'm sure you know. I'm a bit averse to some technologies (Yarn comes to mind) because I've seen countless tools come and go in the past few years (Grunt and Gulp, especially). Bad example, I know. Also, examples for large scale web application file/directory structures don't seem to be very common when they're not based on a popular framework. Please let me know if you want me to clarify anything; my brain's not working at its best right now. And thank you for your help !! :)
Not sure if you are serious or not.
Thanks for the response, but using new tools is the exact opposite of what I want to do. My [response here](https://old.reddit.com/r/javascript/comments/8igqtk/those_of_you_who_code_in_plain_vanilla_javascript/dyrpy49/?context=1) helps to explain my mindset, and [this post](https://old.reddit.com/r/javascript/comments/8igqtk/those_of_you_who_code_in_plain_vanilla_javascript/dys0a7t/?context=2) touches upon the issues I have with tools.
Yup. React will make you a better JavaScript programmer. But if you're not great at JavaScript and not good at diving into things you don't understand, it'll be a really rough place to start.
You know Vue allows you to write render functions in JS? You don't have to use templating.
I can't wait for the day that React can go the way of jQuery! Until then though, it's been the best component API I've used. 
Opinions, man. I haven't worked a project in the last 5 years in Node, React, Polymer, Angular, HTML, or anything else that _someone_ didn't include Moment and Lodash. So it surprises me to not see either in the top 5 list. That is all. 
Well clearly you have more experience than me, so I totally defer to that. All I can say is I've spoken with developers from React Native shops and agencies where they have made code-reuse a priority. Why they made it a priority and how well it has worked for them I don't know so well off the top of my head. I do imagine they would have already stopped by now if they weren't seeing benefits. 
Hence the "**tl;dr**" disclaimer...
It depends: short answer is, it's a replacement. However, if on your page you want to do something simple, like animate something when a button is clicked, jQuery shines at this. The problem with jQuery is you end up mutating UI/DOM elements directly, inferring exactly what to change based on an action: * SomeAction =\&gt; UIManipulation\(\) That is, when the "\+" button is clicked, show a dialog and after that, insert an li\-tag into this ul\-element over here. React is fundamentally different: 1. SomeAction =\&gt; StateManipulation 2. State =\&gt; View Here we can see that when actions are performed in our UI, we update our state, **not** the view. Then, we let the library \(React\) initiate which components need to be refreshed. Our components are basically descriptions that say "these state/props map to this view". Whenever state changes, we churn it through our machine that says "okay, you gave me this state, I'll produce this view". Then React takes what you produces, diffs it against the actual DOM, and performs the minimum required updates. The reason this is amazing is that, typically, your state will usually be **way** easier to reason about mutating than the UI is.
Another way of looking at it: jQuery was originally written to normalized DOM APIs across different browsers. The need for that currently is not widely needed anymore. React is basically a "very powerful templating library" that can respond to changing state.
What? How? How is an overwhelming amount of choices worse than a complete restructure of code?
&gt;Angular is not scalable to large codebases As someone who has used Angular extensively in the past for large cordova and web based apps, I don't disagree with that. I never supported Angular in any of my comments beyond stating that directives were a pretty great feature. &gt;backbone is not as productive as react I'm inclined to agree with you here, but I also feel it is largely subjective, and highly dependent on what you are trying to do, and how you want to go about expressing that. I only briefly toyed with Backbone years ago, so I don't have much stake in opinions on it either way. &gt;I am by far the most productive in react, find it scales best to large applications, and has the most robust ecosystem. Having used Vue pretty heavily, and in large production ready applications over the past year and a half, I keep seeing people say this and I — like the majority of other developers using Vue heavily — do not understand where this mentality is coming from beyond the suspicion that the people making the claims have not actually used Vue to any degree of complexity. Even the React dev team have themselves commented that Vue is as fast (if not faster), and as scalable as React; hell they even contributed to the Vue - React comparison in the Vue docs. Shit, you can even use Redux in your Vue apps if that's your flavour. This idea needs to stop, cause it's just patently false. &gt;You are welcome to disagree And I do, at least on the points I addressed above. I don't doubt your a good developer who is experienced with React, and while I may grow to appreciate React as I dive deeper into it as my job will require of me — and I'm sure I will — there are a few comments you've made that just don't jive with reality, and essentially indicates what I, and many others, have suspected: a lot of the cons floating around regarding Vue are being perpetuated by people who actually haven't done enough with it to make those statements with any meaningful conviction. &gt;but my original point is simply that Vue will never be taking over React in the same way we have seen with past frameworks. And I was simply addressing your comments that Vue is a step back, a claim which I still haven't seen you support. You did do a good job trashing Angular and Backbone, but still nothing about how Vue is a step back beyond how much you like React. &gt;I don't think anyone will disagree with that. I know I might be coming off as contentious, or argumentative at this point, but I assure you that's not my intention. It's just that I keep seeing Vue get bashed on like this by people largely from the React community who very clearly only either skimmed the docs, or by plugging in the CDN on Codepen and making a to-do app, completely ignoring a lot of the more complex, robust features of Vue. That said, I do disagree with that sentiment, at least in the extent that Facebook is on shaky grounds right now, and have already run into some potentially large backlash from the community during the licensing fiasco a while back - React is not immune because of it's adoption %. It can fail. Notice that, despite how great it is, Yarn has yet to skyrocket the way it was expected to? 
That wasn't the point, the point is that a React Component is fundamentally different from a Vue Component.
&gt; Angular I think there's a learning curve with every framework. All of the `hello world` apps make it seem so simple and ground breaking but once you get into real world problems, the framework's difficulties really start to shine through. 
The fact that you have to keep relearning those choices? I was developing Python2 and Python3 around the same period and it just really didn't feel that hard to get readjusted... It was the same for the most part.
I could not agree less with you. Js in html isn't "simpler" it's more convoluted since you need to understand how each special attribute is interpolated
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
That's true, I mean I'm currently looking for a front end job and having to learn angular, react, vue, and all this other B's is pretty annoying. Esspecislly since I'm good with vanilla js. I just think it would be worse to have to restructure outdated code. That's the worst.
Shocked no canvas/webGL framework isn't on this list. Create.js and Pixi are super duper useful, it makes me think canvas is still not too popular.
It allows me to write a stateless, purely functional web application
Well, you could see it that way, however I think in vue some basic additions have been added to html which enable simple communication between js, data models and the dom. For me, and this may be personal, but every time I have to edit someone else’s jsx I want to end my own life. Ternary operators in markup, again personal view, are I think the antithesis of a good web dev pattern.
Now I'm getting FOMO that I don't know react.js at all. I'm pretty sure that jquery got as popular as it did because it was so easy. It was simple to learn. It made code easier to read and easier to type. It was like a gateway drug that convinced me that frameworks were worth the effort to learn. Vue and angular came next. I'm still not convinced that the hours spent learning those two were worth it. And now the internet, my personal framework dealer, is telling me that react will make everything good. "Have a taste, kid. Everyone's using it."
Except React developers are busy writing HTML in JavaScript, so maybe that's why so many of them rate it as "essential" - it forces you to do *everything* React's way. Most of the other entries in the poll are far less opinionated and replaceable. Angular is probably the closest to React in that way.
You hit the nail on the head here. The wording of the question is terrible. If someone is developing a large, dynamic frontend application and chooses to do it entirely with native JavaScriot, then that person is an idiot. For large applications to make business sense, a framework *is* essential.
I think what React offers is a tool chest of patterns that let you solve a majority of problems, regardless of how complicated. When I encounter complicated problems, it usually means picking one of maybe 10 different design patterns from my tool chest (dispatch from redux store, controlled components, etc.) And because data flow is top down, I rarely introduce regressions outside of the components I refactor. 
I would disagree with the whole "it's harder to understand how your app is working" thing. "v-for", "v-if", etc, these are fairly straightforward directives. The whole syntax is incredibly simple, and therefore very easy to follow and understand.
I haven't used jQuery in like 4yrs, does that mean I'm not employed? 
Do it, you’re going to love it.
I created this starterkit based on Webpack 4.8 and ES6. Easy to use: https://github.com/jonathanlinat/yet-another-and-really-basic-webpack-es6-starterkit
Nah, learned vue, vue much beget
I see, so you're looking for workflow tips, esserntially. I'm afraid I don't have a great answer for you there. That's where things get messy, and ultimately, you should be familiar with many options, but ultimately use what you like for personal projects. I try to familiarize with gulp, grunt, weppack, less, sass, stylus, etc... Just so I can comfortable with each (for job prospects), but on personal projects I generally just stick with gulp for task running and stylus for css processing because I personally like those. There really isn't a right answer-- use what you like. Then you can have a nice package.json ready with your usual suspects in the Dev dependencies and spin up a new project fairly easily.
I started learning react and vue at the same time 18 months ago. 2 different projects. It was a great experience and both are valid choices. I'd highly recommend both of them. If you are unsure and are newer go vuejs. It's got better docs, a kick-ass new cli, and the entire ecosystem of tools under one team (more consistent docs and feeling of plugins). If you are more advanced and are comfortable spending more time learning, they are still both solid picks. 
Okay, but we're still struggling to _understand_ your point. You keep touting the phrase that they're "fundamentally different" like it's some kind of chant or dogma. Even if that's the case (which as far as I can tell, it isn't really, it seems you're mistaking syntactic sugar for architectural implementation differences), then what does that change? The point you just made was that you can't easily make higher order components in Vue because: 1. (said explicitly) a Vue component is hidden and not something you can abstract over 2. (heavily implied) Vue components are not javascript functions Point #1 is just plain false, and that's because point #3 is incorrect, as has been pointed out to you. Vue _can_ and _does_ use javascript render functions. If that "wasn't the point", then what was? _How_ are they fundamentally different?
Yeah, React + React-Router + State-lib-of-choice starts to look more like an ad-hoc framework.
just a note.. Please do not mix DOM and JavaScript. jQuery tried to fix DOM. DOM is language independent.
I develop a lot in Angular. It has a learning curve like anything else, but once I got into it I found it very straightforward, easy to learn, and very efficient.
Maybe, but most of the reason why I picked Vue was so I could learn Vue.
HTML5 webStorage is an excellent option. https://github.com/localForage/localForage library wraps IndexedDB, WebSQL and localstorage into a singe API. But I see that web storage has a cap for maximum bytes of data to persist per each domain. Service Workers could also be good option but rather a overkill if you jus want to set and get data. 
I'd read it as: "I know JS, so I can easily figure out the framework du jour and I'm comfortable going outside their conventions/limitations if I have to".
date-fns is great, but lacks support for UTC and time zones in general.
Definitely a replacement. jQuery will feel heavy and inefficient once you learn React.
good point, that's just not something i've had to worry much about recently so I haven't encountered that issue. Just saying though, alternative libraries like date-fns might explain why moment.js isn't in the top 5.
Why it's a step backwards: Vue is just Angular 1.x with a Backbone-like API mashed together with a virtual DOM. Also there are like 2 companies that actually use it and the rest are just hype-chasing astroturfers.
I replied before I read your comment -- Angular 1.x + Backbone is definitely the vibe I get. 
Primis.
Hadnt heard of `date-fns` before; thanks!
If you're not *willing* to understand, there's no point in explaining. 
Does the Russian botnet get repurposed to brigade React discussions with pro-Vue propaganda after business hours? These arguments are so ridiculous. 
&gt; To do things the vanilla way I edit files locally or on an Apache server over SFTP. I make a folder for each project. What else do you need for the basics? I'm sorry, but I don't see the relevance here...it sounds like you're just directly modifying the files on your server without any build process? &gt; You want to avoid frameworks but you want to immediately spark your project off with a giant, intricate boilerplate. I respectfully disagree. A boilerplate doesn't necessarily have to be "giant" or "intricate". Alternatively, not all frameworks are big. &gt; Try an experiment: run screaming into the wild with absolutely nothing but HTML, CSS, and script tags. Add the boilerplate in as you find yourself limited. Add testing in when you find bugs in things you already tested. So like, basically what I would do in the 1990s? ;P Sorry, that's not exactly what I'm trying to ask, either. Perhaps my ability to use language is just terrible today. &gt; When I decided to break back into JS after doing scientific programming (mostly C++) it was amazing to me how much *crap* people attached to the process of even the most simplistic apps. I still find the return on time investment lacking for a lot of things taken as gospel in the JS community. You can't get a sense of those costs and benefits until you've tried something without all of those patterns. Yeah, I'm fully aware of this. In fact, my background prior to JS/web is probably similar to yours. I'm getting increasingly irritated at how "trend-driven" web development seems to be, and how much the JS community hypes things up.
I haven't used jQuery in like 4yrs and would never use it again because it's a deprecated library, does that mean I'm not employed? Just trying to understand your logic here. Not everyone has to support legacy browsers.
http://www.reactiongifs.com/r/npa5yMn.gif
Ah, thanks.
jQuery is not deprecated, and has nothing to do with legacy browsers? You might be employed, but you also sound like you don't know what you're talking about.
Yes! This is the sort of thing of which I'd like to see more. Are there any popular ones, presumably using ES6 or TypeScript? Or is it more common practice just to start from complete scratch and install (dev) dependencies as one sees fit?
Amen..... except the people who use that one thing... you know what and who I mean.... just hate them so much....
React fanboys will tell you its "dope af" (of course they will) but I tried it and it's a mess especially when your application becomes complex and you work in a team. Personally I wouldn't recommend it even for beginners
I had to eject once to get decorator support working. It was a (very mild) headache but, just saying - create-react-app doesn't have _everything_ you need. 
Bery shitty article, thanks for the trash
Yeah. I'm very comfortable with the fundamentals, but I'm sure as hell not going to build any significant front-end project without a framework. It's just inefficient. I think this answer says "I'm not familiar with these frameworks" or "I don't work on any significant projects". With the off exception of course.
English documents we are already in the process of sorting out and will be released recently. Thanks for the attention.
\&gt; JSX is compiled while templates are strictly interpreted, and often poorly Angular 2\+ is compiled. You can choose to use JIT \(in the browser compiling\) or AOT \(ahead of time\). It compiles the HTML templates down to pure JS. You can debug it just as you would any other JS. The AOT one uses TypeScript to also strictly typecheck our templates, warn you of any variables missing in your Component class, warn you of incorrect property access, etc. \&gt; The fact that you have to globally register components and features is also a huge drawback Angular 2 modules are not global. You have to export components/providers \(services\) from a module, and they are only available if you import that specific module. There is no global space. \&gt; whereas in Angular \(at least AngularJS\) you once again have to grep to find any instance of using that component. App won't start if a component isn't found from usage in a template. Even gives you a nice stack trace back to where it fails and shows it in the template source map.
Throughout the years I’ve written the same functions over and over, so I have them stored separately and customize them further if necessary. Boilerplate is a framework tho. Isn’t it.
To be fair, some higher ups just decide things like, "jQuery and bootstrap. That's all you get." I've had to build a pretty large application under those constraints. You end up writing a lot of boilerplate that the frameworks do for you, but after a while, adding a new view at any point is just as easy as using a framework. And hey, if they're paying me to write the boilerplate... I, for one, am gonna write it.
great!thank you!
Okay, yeah, most of my experience was with AngularJS so I definitely generalized. However, I did take a course on Angular and at least by default things aren't so clear. I definitely remember a global cache. I'm seeing NgModule registration when I Google. Is that not the case anymore? It looks like that's how you register the component with the module.
It has everything to do with legacy browsers. It has no use in modern browsers that aren't past their EoL.
Yeah, I'm about to just make my own. Maybe it's confirmation bias (and/or alcohol) or whatever, but I feel as if 5-10 years ago there was at least *something* that *resembled* industry standard or common practice. I've just been coding in AngularJS for so long.
No, it isn't. A boilerplate project may use a framework. A framework may contain boilerplate code. But the two things do not equate.
It's mean to compare bar toilets to stack overflow 
I see. It's less global, but it's still fairly global compared to components importing other components directly and services being unrelated to the framework entirely, so you just import and use it in the component file and it's perfectly encapsulated and you never need to change files to answer the question "Where is this component/service/variable coming from?" (unless you happen upon those larger structures where a module exports from another file, which maybe exports from another file, etc., but I think that's unavoidable). &gt; Templates are still strings, or rather just HTML with extra binding syntaxes and some control attributes (for/if). It is a string, but Angular rendering rewrites that to TypeScript for type checking against the component (AOT only), then to Javascript. I see. I think you also said there was linting for it. This would bother me a few years ago because I doubt that kind of linting had existed yet and the tooling surrounding this kind of thing (strings as logic/programming, which is becoming quite common in JS between Angular, Vue, and some CSS in JS libraries) wasn't as mature, but now I suppose you can probably use anything JSX can use, right? Will your linter be able to tell you if you're trying to use a directive that doesn't exist?
True!
Are Vue and React similar-ish as a framework? I know Angular, but want to pick up either Vue or React (was leaning towards vue)
cool app but honestly it made things more confusing . not werth the time
Save yourself the trouble and learn vue.
Yes, the "Fiber" rewrite of React's internal algorithms shipped in React 16.0,and all the new features they've shipped and demoed since then are based on the Fiber architecture as a baseline. 
Cool. Send me your resume so I can never make the mistake of hiring you.
I'd assume your html looks something like this: &lt;script&gt; &lt;div&gt; &lt;div&gt; &lt;label&gt; &lt;input type="checkbox" id="id-whatever"&gt; &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;/script&gt; If that's the case, than that's invalid code, anything inside a script tag is interpreted as JavaScript. Given that you mention it `console.log`ing, it's more likely something more like: &lt;div&gt; &lt;div&gt; &lt;label&gt; &lt;input type="checkbox" id="id-whatever"&gt; &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; if that's it, then in the JS, just put var checkbox = document.getElementById("id-whatever"); console.log(checkbox.checked) // true or false Scoping doesn't apply to the document, you get any element from anywhere in your JS code.
you're combative, defensive, stubborn, and arrogant. If people want to use jquery, the fuck it, let them use it and move on with life. The browsers don't care, the users certainly don't, and everyone knows how to use it. Arguing about it is bikeshedding and wasting everyone's time to the highest degree.
If I were you, I would just stick with React. Most jobs these days involve React, and not many people are still using Angular.
&gt;wasting everyone's time to the highest degree. Ah my apologies for forcing you to read this far down in a conversation I was having without you, then. 
I’ve made some simple things in JavaScript. Remade space invaders and got a side scroller working. 
I admire the fact that you don't want to rely on tools and would rather understand how everything actually works. However, I think your views on tools and frameworks are a little skewed. It's important to understand that it isn't about learning a specific framework or how to use a specific tool. It's about exposure to all the different paradigms and design patterns. That way, when you're ready to start your next project you aren't paralyzed looking at a blinking cursor and an empty "app" directory. You'll already know that you like the way webpack handles task A, so you'll implement some of that. You like the way angular handles DI so you'll implement that. And so on. You're correct that frameworks come and go, and maybe webpack is just the flavor of the week. But it isn't just about learning the framework or tool. It's about being able to take advantage of the experience of all the people that *wrote* the tools. They started exactly where you are. "I want something to help me develop better" and that's what *they* came up with. Get exposure to everything you can. You can get a pretty good gist of most things in a few hours. Then pick the stuff you like from each and build the next best thing! The way you feel about frameworks means that you want to do more than scratch the surface of development. That's an amazing thing. But it's foolish not to take lessons from the people who came before you.
You can use express to proxy the external APIs to your angular address I am hazy on the details as I don’t use angular 
I agree, this does seem possible.
Just started with vue, it's really nice, it's growth has been exponential too. It's pretty young, it's been around since like 2016 I think. Could easily see it taking off in the next few years
There's more to the ecosystem then that. Sometime about 10 years ago, the JS community started getting these people that made it a toxic culture of dick swinging incompetent fools who care far more about being stylish and trendy then building functional stable technologies that will work for years without constant programmer and technical babysitting. If you're not building software that should be feasibly maintainable I'm 5 years without a complete rewrite, you're doing it wrong.
To be fair, there's also a lot more people that know react
Sweet!
Great. Thanks for the starting off point. 
Look, I understand what you're saying but it's wrong to say it's deprecated. It's been widely used for a loooong time and most of the web still uses it, and won't go anywhere. Plus it's actually a really handy library (though I personally avoid)
Great app! I really like it. 
This actually is the kind of thing I need in a project I'm working on now. I'm building a crm for my company that is basically an a ton of html forms with vanilla js and jQuery in some places. Giving the user some kind of feedback when there's an error (even if they don't fully understand it) would be incredibly useful for bug reporting. Instead of them putting in a ticket that says "I went to this page and the table has a bunch of squiggles" I can give them something they can paste or screenshot. Thanks for posting!
Exactly, so why advocate for Vue to "stay ahead" if React has a huge lead and just about equal momentum?
so that means now i can use my raw es6 without babel?
In React (haven't tried Vue yet so I can't compare/contrast) everything in the UI is state. So where you are doing this.pause_disabled = false; // then later... this.pause_disabled = true; Doing that will not cause a re-render. I have a guess why the start button would work while the pause button doesn't, but it isn't important because the answer is - all that stuff in your constructor (except the function binding) should be in your state object. And every time you change those values you should be using this.setState() - everything else looks good from first glance.
[If you don't care about IE11 or Opera Mini, sure.](https://caniuse.com/#search=es6). There's other benefits, though, like uglification + minification.
Vue uses template (thought it comes with render also) react uses life cycle 
I like this
Sure if literally no other browsers matter
Honestly react is unnecessary in 90% of the apps it's used in. Don't use react just because you don't want to spend 5 minutes and learn how eventListeners work... Smh
Honestly, outside of templating, it almost feels like the framework isn't even there. You're just writing a typescript app, with some added decorators. They also did the work of setting up an amazing dev environment for you, which is also awesome.
Both Vue and React started out in the same year, they're just two months apart actually. Since then React practically blew up, and not just on the web. Vue on the other hand is a flat line, and in almost 5 years it hasn't even caught up to the old Angular 1. Every year we're hearing that it's going to be the bomb, yet: http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core The reason for that is obvious to anyone that has used both. React is a paradigm shift. Vue on the other hand is footed in the old way, which most of us know and struggled with long enough, for instance Angular. There's no point any longer to go through these regressions.
I get what you want, which is a simple boilerplate for SCSS, ES6 imports, etc. Just write it yourself, it can be written into any project pretty rapidly with Webpack, Grunt, Gulp, basically whatever you want. Other peoples' opinions are hardly relevant in your personal project, there is no industrial standard because the JS community is a huge churn of fads. \&gt; I'm sorry, but I don't see the relevance here...it sounds like you're just directly modifying the files on your server without any build process? My point is: if you're writing vanilla JS why do you need a prefabbed build process? Direct scripting is the only constant in the sea of Grunt, Gulp, Rollup, Webpack, and whatever new fad will pop up in 2 years. You're talking about 5\-10 years back elsewhere in this thread when none of this boilerplate compiler setup was mainstream. That's still completely doable. \&gt; So like, basically what I would do in the 1990s? ;P Or the entire time up until \~5 years ago. When doing CMS or PHP work I can spend time setting up a Grunt or Webpack pipeline to concat and minify scripts, but the bandwidth saved is absolute peanuts. Generally I only bother with it in those projects if I'm going to also be using SCSS or getting seriously complex. It's the dependency quagmire of frameworks and NPM packages where tree\-shaking and minification start to become necessities. \&gt; Yeah, I'm fully aware of this. In fact, my background prior to JS/web is probably similar to yours. I'm getting increasingly irritated at how "trend\-driven" web development seems to be, and how much the JS community hypes things up. I just ignore it and only look at enterprise adoption. I frankly could not care less what the SF startup crowd is playing with when their ventures fail 90&amp;#37;\+ of the time. It's all the more convenient to me if the enterprise frameworks are less popular because that makes them a more lucrative skill.
Real time is not required. I don't have anything set up yet. Just the idea to make this project. I will build it at home before migrating it to my office. I'm not sure how that will work as far as getting set up on a server, I'm used to developing smaller systems leveraging SharePoint at my work so this is a new challenge. Does this affect the suggested solutions? I probably need a solution with a small footprint and no licensing/expense. 
Experienced developers know, above all, that specific choice of frameworks don't matter, nor will they get convinced by an essay comment reply on the internet. AngularJS is fine, React is fine, VueJS is fine as well, and I am allowed to have my opinions. I already switched to another framework and language anyway, it's ReasonML and ReasonReact, which are significantly better than else by miles. Only they aren't popular so I don't use them professionally.
JSX *transpiles* to javascript at compile time, it is a superset like typescript or babel. JSX leaves scope and all assumption as they are: const A = () =&gt; &lt;div&gt;hello&lt;/div&gt; const B = () =&gt; &lt;A /&gt; Why does this work? Because JSX is simple sugar for: const A = () =&gt; createElement('div', null, 'hello') const B = () =&gt; createElement(A) Vue on the other hand works with **string-templates**, they are parsed and executed in sandboxes, they loose all relation to scope and the presentational layer, which is why you need DI and component registrations to blow references back into it. As well as ridiculous code-like markup extensions. This is why in Vue absolutely everything has to be re-learned and absolutely nothing can be solved like you're used to. 
You should check out https://github.com/timarney/react-app-rewired
Basically let provide block scope while var is global. This article explains it really well and has a good example https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70
who doesn't use rollbar or similar? they all have free tier
It's a major misconception that Vue is somehow easy to learn and use compared to React. Not sure what has actually led to this (though i think Vue's docs for a long time were simply deceptive), but the irony is: the opposite is the case. Vue is a massive framework in the traditional sense, with hundreds of api's, a huge documentation, new syntax, broken assumptions, where absolutely everything has to adhere to its rules. React on the other hand is a small pattern. Maybe 1 or 2 api's, documentation is great but you don't have to read it, you solve problems with it like you always would.
Isn't this the same as: https://www.twitch.tv/communities/programming
How about this loop? var callbacks = []; (function() { for (var i = 0; i &lt; 5; i++) { callbacks.push( function() { return i; } ); } }(); console.log(callbacks.map( function(cb) { return cb(); } )); Most people don't realize this will output [5, 5, 5, 5, 5] because of how car hoists i. Basically it boils down to the fact that there's no reason NOT to use let. And it avoids confusing behavior like the example above.
React native is based on the 'react' package, which defines react-components, and the reconciler (react-reconciler), like all other renderers. react-native, react-dom, react-native-windows, react-native-macos, react-native-web, react-blessed, react-hardware, react-vr, react-ar, and so on, they are all based on these two packages, where the reconciler defines how native elements look - but they are all fundamentally react and they are all driven by the same semantcis and obviously can all use and tap into the react eco system. react-native can use react-redux and react-motion and whatnot just like the react-renderer that drives your wrist-watch or the refrigerators display. The is the whole premise with react. Listen to this if you're interested: https://player.fm/series/future-of-coding-1541118/11-how-reactjs-was-created-with-pete-hunt
"your first pick—choosing a code editor—is crucial" I mean, is it really?
This is getting ridiculous. React didn't steal anything, a component in react is a function, and this is the most logical approach yet. It has given given react wings to do what browsers won't be able to do over the next 20 years. [React is free from the browser](https://twitter.com/rauchg/status/955174495593132032), and not just that, all these targets share semantics and can even re-use the eco-system. Web components on the other hand are based on an outdated idea that's not only impractical, it would push us back into the stone ago if people would be naive enough to fall for it, which they don't thank goodness. A web component is a imperative directive. Without the shadow root lurks a buck naked dom, which, you guessed it, needs a framework or you're back to dom inflating by class querying. The catch is, *ever* "component" you load has a different framework in it. You load 10, you could end up with 10 frameworks. They are unable to interact with one another, they are basically dumb blobs. Silliest of all, they are browser-tied, which is the only reason Google is pushing this so hard, because of their fever-dream where *their* browser will act as an embedded content host on all platforms. 
I agree 99% of the time you will get away with vanilla and simple pubsub 
I think you’re looking for a Document Object Model explanation as found on the [W3 Schools site](https://www.w3schools.com/html/html_scripts.asp). **Note**: _make sure to have your **ad-blocker** on for this site!_
Start here: [https://www.w3schools.com/js/default.asp](https://www.w3schools.com/js/default.asp) It's easy tutorial which showes on examples how to start with basic JS combined with HTML &amp; CSS.
If you're worried about that, especially in JavaScript, you're doing something very wrong. It's like when people argue about factory functions vs constructors. Sure constructors may be faster, but both will create about a billion objects a second, and the difference is about 1%. Except this case is different in the fact that let has very clear advantages over var. And except for visual basic or old c books, every manual for basically every language will tell you not to forward declare variables. Ever. This isn't even really an opinion, it's been the accepted standard industry wide for at least the last 20 years.
I'm gonna give you a short answer. Other in the sub might elaborate more. START NOW! Try to imitate other websites. If you are stuck, check their website source and imitate. Master javascript. Learn the DOM. I would also say spend a lot of time with css. Many people know javascript, but don't understand css properly, and knowing css very well can save you tons of messy javascript code and time. Advance HTML? All I can think of is data attributes and maybe accessibility. 
The last remaining share of IE is probably from enterprise environments tbh... It's probably worth supporting the last dying embers of IE for now.
Vue is a OOP templating framework, like Angular 1, which is most closely resembles. Huge api, hundreds of functions and semantics to keep in mind, a new arbitrary syntax, everything has to adhere to its rules, nothing behaves as it would. DI, mix-ins, view and the code that forms it are ripped from one another--which is a misunderstanding of separation of concern. Most of us went through this already with Angular 1.xx.
What tools/engine would you like to work with?
You can filter your array to return positive integers if the length of it is &gt; than a half of original array then you have more positive integers than negatives 