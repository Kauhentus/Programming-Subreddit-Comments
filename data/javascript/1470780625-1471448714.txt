No problem and oh yea, sorry, I omitted anything other than just the basics of what you'd need. setTimeout like you had in your code before is a fine way to emulate a delay. Regarding 'deleting' the file, there are some solutions out there, but most are picky and difficult to reliably implement given JS by default blocks/limits access to local file information. However, if you wrote server side code (such as in node) and emulated a back-end locally on your machine, then you could always have the server-side code handle file manipulation.
I recently started messing around with makerjs too and couldnt quite figure out why the examples use document.write to render the svg output. the output can just as easily be rendered into a container element here's an updated fiddle - [https://jsfiddle.net/brzm1qb3/4/](https://jsfiddle.net/brzm1qb3/4/) - hope it helps.
It helps that everything is written in a single language. I could see eventually having separate repos for client, server, and shared. For now, performance is fine with everything in one place.
This is a great trick! I don't know why I got so mixed up lol but it makes perfect sense now
Thanks, makes perfect sense now.
No I don't think anyone ever worked on that. I still think its a good idea if someone does want to add it
Here, in a list: https://twitter.com/Leech/lists/web-dev
Wouldn't you like to know ;)
I didn't know that, thanks for the heads up! 
I wrote the article, is there any way I can improve it to make it more clear on how to use it?
Great post, wish i had of waited a day to setup flow as you've covered most of the major pain points. üëç Is there a reason why when resolving paths `.` gets current directory but `./`doesn't? ie. [options] module.system.node.resolve_dirname=. # works module.system.node.resolve_dirname=./ # doesn't work 
As seen on http://treksit.com/ ? 
Hey, loving flow. I was wondering, do you know some editor/ editor plugin that shows the type information on hover. I tried Webstorm, Atom, Nuclide, VSCode, but they all don't support this yet it seems.
Nuclide should support this. Does this page in the Nuclide docs help? https://nuclide.io/docs/languages/flow/ There's also a vim-flow plugin that has a number of useful commands, including `:FlowType`. There's an emacs plugin [in the flow repository](https://github.com/facebook/flow/blob/master/flow-types.el) and the inimitable Bodil has [a nifty integration with flycheck](https://github.com/bodil/emacs.d/blob/d28264cf072bb8a62459a48813d0cb30804b4f5b/bodil/bodil-js.el#L121). I've also seen some other Atom plugins for Flow and there is a [Flow for VSCode](https://github.com/flowtype/flow-for-vscode) effort that could probably use some love.
Free gauge components for d3.
Oh wait, there is a tooltip in Nuclide, but it only shows the first letter. So it shows `n` if it a `number`.... Seems like a bug.
Yeah thats totally screwed up. You want to share a gist with all the plugins you have installed? (Run `apm ls`)
Sure, this is what I got: https://gist.github.com/kasperpeulen/490a6068440e28fc2d6235b2a82ffdf6 I just installed atom today. Edit: Got it kind of working with ``` .nuclide-datatip-overlay { width: 300px; } ``` Not perfect as it makes the width of the hover fixed, but at least I have some type info !! :D
Honestly, I'd love a tool to run Uncss over a set of Pug templates.
Yes, but [treskit it borrowed it from that pen by Terry Tong](http://treksit.com/credits.html).
I started my post with "You should learn JavaScript fundamentals, first and foremost.". I don't think I could have been more clear.
Very good. Once we identified a bug in their code, and I raised a PR against it. They merged it and deployed it up to production in about 2 hours. No bullshit.
Wow man excellent list. Thanks a ton for taking the time to put that together. Super helpful.
following you, always solid advice and good tweets
the second version has a LOT more code, yet none of it is specific to this problem and 99% of it will be in the library (Ramda + Monet/Folktale.js/something else) You own code then becomes a lot more robust and will be shorter or same length as previous version. In general monad code is shorter than imperative code IF imperative code also handles errors. Remember the size of the pyramid of doom using callbacks if errors are actually handled? Promise chain for example can handle any error at the very end once.
LOL, I was thinking the same thing but trying to resist the urge to make a comment that is anything but glowingly positive and ego boosting towards the OP. As negative opinion of the dribble people post on the interwebz is considered trolling. I think (I hope) what the OP means is that the boilerplate is lightweight, not the components its interfacing :) I usually start my projects with the following minimal boilerplate. &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta viewport="width=device-width, initial-scale=1"&gt; &lt;link rel="icon" href="data:;base64,iVBORw0KGgo="&gt; &lt;title&gt;boilerplate&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; EDIT: Feel free to copy and modify to your own tastes :)
JS packages give me nightmares, especially after using Linux for so long and loving packages - NPM is like the horror story told to Aptitude maintainers.
I use a plugin (accounting.js) to handle currency and number formatting. It's easy and clean. Anyway, I noticed this happen when I left my numbers sans formatting last week. It didn't screw with my numbers but it sure seems strange. Why does this happen? Database says "1.5". It's shows up as 1.5000000000001 or some Bologna. What's the dill, pickle?
http://javascriptweekly.com/ is pretty good, I'm subscribed to the RSS feed.
Not working for me.
Haven't seen this one mentioned yet, but it's a more of an aggregator. https://javascriptkicks.com/
http://nodeweekly.com/ if you are working with JavaScript in Node
I love sublime
I hate, hate, **hate** questions asking which is the "best" because there is ***never*** a such thing as "best". It only ever depends on what works best for you, because in the end, it really just doesn't matter. Ever. If you like Sublime because it's fast, cool. If you like Atom because it's customizable as hell, sweet. If you like VS Code because it's super useful, awesome. if you like WebStorm because... I don't know what's good about WebStorm since I haven't used it personally, but if you like it, just use it for christ's sake. And, of course, if your job requires a certain editor... there's not much of a choice there.
Sublime and VS code are excellent editors WebStorm is a Javascript IDEs with a lot more features. I personally prefer WebStorm due to its extra features, but the others are good aswell
https://www.devalate.com
The output you want isnt valid json. Arrays dont have identifiers. Use objects instead
Thanks for the help sir.
You could potentially build your own logger to send errors to an API endpoint. I'd actually bet there's a SaaS solution out there already. It would basically be an AJAX function to call on error. Or you could log to localStorage and pull your manager's log later?
I use PHPStorm, which is basically WebStorm plus PHP features. I've tried Atom (too slow) and Sublime (Didn't really have the features I wanted, such as VIM mode) and so I've stuck with PHPStorm for years now and been quite happy.
I love javascript weekly. Found that when I follow the news throughout the week, the good stuff is always caught in JS weekly, makes it far easier to stay in the loop.
Here is [a good list](http://jstherightway.org/#whotofollow) to get started.
Yay, did I win something? :) 
c'mon it's 2016, we're not animals
(disclaimer: I'm one of the libuv maintainers) This is slightly misleading. libuv does 3 different types of i/o: * network i/o: this is done using epoll/kqueue/IOCP, in a single thread * file i/o: runs in a threadpool * getaddrinfo / getnameinfo: runs in a threadpool So there is no general pool of worker threads which is used for asynchronous i/o. That is just the case for file i/o. [Here](http://docs.libuv.org/en/v1.x/design.html) is libuv's design overview. And [here](http://www.slideshare.net/saghul/libuv-nodejs-and-everything-in-between) is a recent presentation I made about how libuv and node work together. 
Not sure what Service Works has to do with anything ... You still need to load the entire website data in a single request, likely JSON.
Or farmers.
Couldn't you/he put the names of providers in an array or something ?
The same one everyone picked the last 150 times this question was asked ... on reddit ... today ...
It feels nice and easy that one `import` gets everything, especially in a highly modularized project architecture. But it also introduces a more complicated development environment and larger toolset. Should or not, it always depends on the specific problem you're trying to solve.
your code is nice and easy to read. kudos. And i dont believe op means actually deleting the video, more like hiding the video from the user. in that case your code will work nicely. op: just overwrite app.play(); with setTimeout(app.play,2000); and you are good to go
This is a horrible tutorial. Doing the validation on the client side will not prevent anyone (with knowledge) from bypassing it. 
&gt; https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.eg0x7vhfx Thank you
oh yeah... I already read this. Didn't quite speak to my issue exactly. 
hey, not that good codepen but from what i can gather you should probably put the images inside a fixed-height div. or wait till fadeout is done and then do the fadein on the next picture. might experience some jumping then as well. i would probably just add a fixed height on div.fadein with overflow: hidden.. dirty but quick fix. otherwise i would not fade in the next image before the previous is completely gone. edit: add this to your css div.fadein { height: 600px; overflow:hidden; } unless you have other divs with this classname.. then you should probably give it a id or something.
I third that. No!
I'll give a concrete example. In our app we sometimes deal with hardware printers. Sometimes our app tells a printer to print something. In frontend we have a function something like function canPrint(print) { return printManager.printerHasCapability(printer, 'print') &amp;&amp; doComplicatedThingsWorkWell() } Our QA manager noticed that a specific printer does not print during one of the situations. Presumably, this function returns false for that printer, but I can't be sure. The problem is that we have a remote team of devs which don't have access to the printers. If we had, we could take a printer, connect it and better debug it. It would have been awesome if a QA manager could dump JS state so we could have reproduced the situation without a real printer. Of course, this also means that our code sucks since it's hard to test and isolate bottlenecks. But before rewriting anything I would love to try to solve this problem faster :]
The way to do this is to have a development webpack config and a production webpack config. The development config will use the style loader, and the production config will use the extract loader and add the plugin. You can keep this fairly clean by having a shared config, with the dev and prod configs just adding the necessary extras.
One advantage of loading in JS with large sites is that css can be chunked with js if you use chunking. If you do it right it means clients will only load the css they need for what they are viewing. This is much tougher (but possible) to accomplish using separate css files.
I can think of several easy ways to bypass this, the easiest of which is to use a free or even disposable email address (sharklasers.com, mailinator.com)
But the real question is: is that group of users profitable after taking into account the extra investment to make it work without js? The answer is almost always *no*.
It has been known for a very long time to the catholic church that humans come from humunculi. 
Ok so I sort of get the config options to configure webpack to use the env variables but how do I do this in the code. So lets say, I have login page and at the top of the JS I use: import '../../less/views/authentication/index/0.less'; to load in the login LESS file. How will webpack configs remove the import statements in my other JavaScript files a production environment? 
As you may know 'considered harmful' comes from Edsger Dijkstra's famous article 'Goto considered harmful' which sparked the advent of structured programming. But even now state machines are easily and comprehensibly programmed using goto. Dogmas considered harmful.
Simple solution: Avoid css-in-js and use normal css for such cases. Complex solution: reinvent css selectors in css-in-js functionality and use them. IMO, whatever benefits css-in-js brings are more than negated by its limitations.
[removed]
&gt; ...doesn't work for HMR with the webpack dev server You should be detecting the environment (dev vs. prod) by an environment variable, and only adding `extract-text-webpack-plugin` to prod. I'm also using `extract-text-webpack-plugin` and have HMR working because we differentiate dev vs. prod.
[removed]
It was just meant as an alternative to having two configuration files. You wouldn't do anything in your code. All imports stay the way they are, but you configure the used webpack-loaders depending on the ENV variable. In your webpack config: if (process.env.NODE_ENV === 'production') { // configure ExtractText Plugin } else { // configure style-loader } That's all I was trying to say. Personally I prefer to have two configuration files as there are usually more differences in my setups, but if you only have a few small differences, the ENV variable does a perfect job. Remember that you just have to export a configuration object at the end of your webpack.config.js. It's perfectly fine to use variables and functions to construct that object.
&gt; Could you give a ELI5 on epoll? I haven't really been able to get past the technical descriptions. Ok, let me try :-) On Unix all polling mechanisms (say select, poll and epoll) work similarly. The idea is that you put your file descriptor (a socket is a fd) in non-blocking mode, then add it to the list of fds to be monitored, and then you wait for the state (readability, writability or error) to change on any of them. When you put a socket in non-blocking mode, any operation which would result in blocking fails with EWOULDBLOCK, so we don't run into the problem of blocking if we call read() at the wrong time, for example. The different polling mechanisms (select, poll, epoll) have different features, epoll being the most performant with a high number of connections, but they can be abstracted as a similar thing. 1. Put the sockets in non-blocking mode 2. Add the sockets to the pollset with flags indicating we want to wait for reading / writing 3. Block until any of the sockets needs something to do or we hit a timeout 4. Run the operations we need on the sockets which are ready When we call the (usually) blocking functions on a socket after epoll told us it's readable, they should succeed. &gt; Why polling instead of interrupts...for example this thread says to use interrupts for asynchronous events. Note that it mentions it for *urgent* and **infrequent** events. Reading / writing from a socket is hardly infrequent :-) &gt; If all network requests are on a single thread, how do you handle thousands of concurrent connections? By taking turns. Let's say you have 1k sockets. All of them are in the epoll pollset, waiting for data. You will only process data from each socket as it becomes available, you don't need to *wait* for it. Hope that helps a bit!
Check my blog https://rainsoft.io. I post on a weekly basis, mostly about JavaScript.
Can I say fuck? Like: Fuck No.
&gt;&gt;you speak as front-end %1000 wrong, I wear all the hats. &gt;&gt;definitely not as a business person 1000% wrong, so invalidates any credibility you think you have. Business is about being pragmatic. If .000001% of the audience doesn't pay for the feature you are writing for them, and they have a workaround (i.e. stop using that old browser) then you are fool if you make them a priority. You are shitting on my opinion when you put words in my mouth, and assume I don't know anything but front end or business, but you are REALLY trying to virtue signal here, and it is laughable.
I personally like to have 3 configuration files: a webpack.base.config.js with the shared configuration, webpack.dev.config.js for dev and webpack.prod.config.js for prod. Those two files extends the base one (I use lodash's merge with a custom merger to avoid any duplication of nested arrays). Even if I use separate files, I still set NODE_ENV to production/development for React to be properly minified and to conditionally use certain babel plugins. For example, I don't want babel-hmre preset to be used in production and you can do that in your .babelrc or package.json: "presets": [ "es2015", "stage-0", "react" ], "env": { "development": { "presets": [ "react-hmre" ] } } So all in all, process.env.NODE_ENV seems to be more and more relied upon so it may be a good idea to use it as much as possible.
I split my configs using process.env.npm_lifecycle_event, which is described in this [Webpack tutorial](http://survivejs.com/webpack/developing-with-webpack/splitting-configuration/). The gist of it is that that variable contains the name of the NPM script that was called, so you can use that to conditionally set config values.
Repeat after me, No No No.
My vote is for WebStorm. JetBrains makes some amazing IDE's. 
If you're building a "traditional website" like a blog, microsite, company listing... then no. CSS was created and works well for such scenarios. If you're building a web application, there may be a lot of merit in some kind of css-in-js setup. If you're using React, there are a lot of solutions for this, and good arguments about why you'd want to do it. Consider this, Facebook, Khan Academy, Netflix and possibly many others are using css-in-js in production. There must be a reason why.
Also tell that to Angular 2, where styles are put directly into the component.
It's not a specific tool, but that's one of the scenarios that is made possible when using something like React and Redux. If your app's UI is a function of its state, and you track the current value of the state and the steps that led up to its current value, it definitely becomes possible to include that info in a bug report and load it up yourself for debugging. There's some talks demoing this listed at https://github.com/markerikson/react-redux-links/blob/master/redux-techniques.md#debugging , and the presenter of one of those talks just published his own lib for doing that sort of bug reporting at https://github.com/dtschust/redux-bug-reporter .
If you want to avoid string-conversions, this function should work as well. function roundTo(num, decimals) { var tens = Math.pow(10, decimals); return Math.round(num * tens) / tens; }
No, never this a horrible idea. It might work for Facebook or Google, but chances are you are not on their problem level are high. The original idea started with a presentation about CSS by a Facebook employee who said it's hard to namespace CSS. Allrighty, even true. This is not a problem though with individual developers and small teams. 
In my opinion, the answer is yes. Modern front end development is all about components and by importing a style sheet in to your JavaScript you are inherently grouping your component in to one chunk of code. With the advent of CSS modules you even ensure that no clashes happen between CSS files. This was something I was adamantly opposed to until I started using it. It drastically speeds up development time and aids in debugging. So why should you do it? You want to create a maintainable CSS framework with no class name conflicts for easy debugging. Now to talk about performance: you can use the ExtractText plugin which creates a CSS file that you can link to in your HTML. 
Don't do #3. Let your minifier do that. The very bottom example is fine, though. \#5 is not worth the performance improvement, for the most part. In #7, I'm not sure why you'd want the single item within its own array rather than as its raw value. \#12 is definitely wrong. Items at one end of the unsorted array have much less chance of making it to near the other end of the array, making it not random. Some of the other hacks are good, especially setting array.length as a way to truncate or empty it.
I usually start at the top of a file and work my way down.
1,2,4: Although I'm pretty guilty of this, the coercive hacks are just terrible for readability and have so many gotchas when it comes to truthy/falsey. Should be more explicit about checking for null/undefined or converting to numbers. I guess that's why you call them hacks. 
For #5, I think a better way is to traverse the array backwards, so there's no need to cache the length.
component based architecture doesn't invalidate the elegance of separation of concerns though and doesn't invalidate the original intent of these technologies. A &lt;p&gt; tag is always a paragraph, it's never anything else. How it looks is irrelevant to its meaning. The result of clicking on a &lt;button&gt; should always be reproducible regardless of how that &lt;button&gt; looks. Or perhaps I'll dust off an old classic one: &lt;table&gt; represents a table of data, not the layout of a page. In fact, the content of a website should never care about the layout. It's that very concept behind responsive design. Same content, same markup language that describes the content, but radically different look &amp; feel depending on what's loading the site.
I usually start with `ctrl+f` or github search to find what I'm looking for, then continue searching for function declarations (to drill deeper) and call sites (to zoom out) as I need to. I specifically *don't* start at the top because a) many codebases are split into a ton of modules and there's either no easy "top" or the top-level is too abstract/boilerplatey b) going from the top only really works up to about 1000 LOC, then it starts to get hard to keep everything in your head.
coming soon is integrations with bug trackers: Asana, Github, Jira, Sheetsu (Google sheets), and documentation for custom integrations 
For now I changed the 'no support' text to provide a little more information and be a bit friendlier. In them meantime I am improving my SEO pre-renderer to be usable as a fallback mechanism. Thanks for the feedback again!
If you have some leads like an error/warning/throw/any token really, you can grep through the directory structure for that token. Its a bit like googling, it takes some finesse... but it'll give you the line where that code is, and you can start from there.
Eyes
Interesting, I read mine in a Russian accent.
ever try Klingon?
nope, I'm not using react but am in the process of switching to aurelia. 
Also Aurelia does this as well.
It's currently not a blocking issue. I wanted to use it more to be able to leverage HMR in webpack. 
Need to see code. 
Well the first thing to keep in mind, when on a mobile device (such as an iPhone), it uses the same javascript engine across any browser you open. So, you probably have some kind of cross-browser compatability issue either in your own code or even potentially within leafletjs. Here's a comment I made the other day about debugging cross-browser issues: https://www.reddit.com/r/javascript/comments/4wxea6/question_how_to_test_with_different_devices/d6ansbh. Looking through your page source I can't see anything immediately that would prevent it from running. As far as any feedback goes, simplify your comments to only important relevant information and write your code semantically. It is a bit difficult to follow. Good luck!
no
No, and hire someone who knows how a browser works.
no code, no cure
If people stopped 'hacking' and started writing maintainable js, that'd be great.
I do not. In the process of switching to Aurelia.
Hey, no problem. I hope it helped. 
This question would be easier to answer if you mentioned some libraries. To give you a general idea, what do most libraries give you? Hopefully less work and a cleaner API for developing for your app.
sublime text is NOT AND IDE its a TEXT EDITOR
Any Help is appreciated. I am just at my wits end and very frustrated that I can't seem to grab those elements. Even after I google the crap of out of it, so I turn to you reddit.
This is more about the proper architecture of components and their stylings than the efficiency of CSS in JS.
Good clarifications... I would just add one more note for **Round IV: Extending HTML** I would argue that in React you can achieve the same thing as with Angular directives by the use of so called [High-Order Components](https://www.sitepoint.com/react-higher-order-components/). I created a very brief JSFiddle including the same features of the Angular directive shown in part IV of the article, but implemented as a React HoC: https://jsfiddle.net/0sooqyof/4/ It is more verbose than the Angular Directive code for sure, but that is one of the points of React/JSX anyway I would say. It tries not to perform magic component composition / templating / data-binding for you behind the curtains and therefore does not produce unexpected behavior that you might not have expected (directive collisions, property collisions, ...) The only thing that I would like to have a better solution for in React is the actual syntax for composition of multiple of such HoCs (where each of those themselves might expect some HoC properties, or event other HoCs) Some integrated JSX syntax for the HoC composition in React would totally give it the edge in Round IV in my opinion. As it is now, I would count round IV as a tie. EDIT: I just found this simple solution which seems pretty much what I wanted for the HoC composition, will have to try it out in the future :) http://engineering.blogfoster.com/higher-order-components-theory-and-practice/#composeallthethings
My company is using [CSS Modules](https://github.com/css-modules/css-modules) in our React production code. Seems to work really well, and helps us write styles on a component level without worrying about class names being repeated elsewhere.
Thanks I will give that a try. Just banging my head on my keyboard today. Still new to applying javascript practically if that isn't already painfully obvious, but I'm learning a ton. 
&gt; finally address that 1 information that I got wrong NO NO NO, you act like I don't know anything about business, or that I only do front end, you are wrong on so many counts. And your application of "fallacies" is laughable, the reason I point out the ad thing is only because you asked what I thought, then you tell me what I think is false? &gt;&gt;what's your take on that? YOU CANNOT AVOID ADS BY TURNING OFF JAVASCRIPT, GET IT NOW? IF PEOPLE TURN OFF JAVASCRIPT TO AVOID ADS, THEY MIGHT AS WELL TRADE THEIR CAR IN FOR A HORSE AND I DON'T CARE! You want to support mythical (and apparently stupid) people and argue with me, you are false.
Haha, well I hope you don't feel "told off" - you asked for suggestions, so I was just commenting from that perspective. As far as making code readable/semantic; I took some time and went through your source - here it is in a fiddle and some comments from me on how I would modify it: https://jsfiddle.net/76wk57ok/
If you write code like this next to me I'm gonna slap you.
&gt; If your browser supports the APIs, you should see a live demo of it just below. Looking at it on chrome, isn't supported. Not what I expected, haha. I'm guessing beta/nightly builds do?
fyi, the way [].forEach.call works is: the first argument, elements, is the arraylike collection to operate on, the function(element){} is a function to execute against each item in the elements arraylike collection, where element is the individual item to operate on in this iteration, so to use it appropriately you would want to do: var elements = document.getElementsByClassName('plan-finder-table'); [].forEach.call(elements, function(element) { phantomcss.screenshot(element); }); Ive never used phantomcss, but if it just needs (as an argument) the individual html element that you want to screenshot, then this should work.
most idiotic thing I've read to day, thanks. when someone calls out perceived "fallacies" then commits a 1/2 dozen of them per post, tell me again what credibility they have? 
Nice collection. For #7, I think array.pop() would be a cleaner solution, as it removes and returns the last element instead of an array with only the last element.
V1 is in 53+ (beta).
while i can't speak to webpack, npm v3 does have a reduced hard drive footprint due to its deduping algorithm. at that point (arguably at any point, but especially now) it's better to use bash/terminal/cmd/etc. to navigate to the extension and open it in a file explorer or editor or w/e.
Shuffling via random/sort isn't a very good idea. Use Fisher-Yates instead.
Some people in React too. I've been experimenting with it and while there isn't an obvious winner, it seems to be a slight improvement. I used to have one or two huge CSS files with global class names that got messy really quickly, especially once you start adding libraries with more common class names. Then I started creating small CSS files next to the components, so for example I'd have a toasters.js component and a toasters.css stylesheet (the first simply does an `import "./toasters.css";`). This is ok, but you still have to keep 2 files in sync; your JS and CSS. So now I've begun putting most styles in `style` tags. I can use JS constants, with the spread operator it's easy to inherit, styling is easy to find and change, less file switching, etc. Downsides are not having availibility of things such as :hover and :before, and you have to fall back to a legacy method to get those in (e.g. a .css file or a baked in &lt;style&gt;). But most of the time that's only really needed for general things anyway which I still prefer to put in an actual CSS files (e.g. `btn` and `btn-default` will still be in stylesheets). But if :hover was available in JS I'd consider moving these definitions to a JS file and import that in the future. And I used to think using the style attribute for actual styling was blasphemy.
you completely lack any business sense whatsoever, and apparently you lack programming sense. Apologizing cannot fix that. you cannot compare an essential like water to anything we are talking about, that is beyond brain dead (ooh, we need water, guardian must be on to something!), so damn stupid. the 1% is a white whale, if you want to pursue it, it will be very expensive and you should already know that, but you don't and think every company should pony up because of your idealism. trade in your car for a horse now or go away.
Ok thanks!
&gt; aurelia Interesting twist. May I ask why?
Ah, this is just how I would structure a single page application that is consuming an API. Depending how big the project gets too I would probably eventually breakout each MVC component into their own files, use npm =&gt; webpack/node to compile it all into a minified version for production, etc. So in short this is just a native JS approach to MVC, but there are many variations out there and how you use it just depends on the scope of your project.
Although it's nifty, never been a big fan of the !!something. I like making my conditional checks really explicit so it's super obvious what the intention of that code path is. Everytime I see !! I have to think about it a little harder. &amp;&amp; is also super useful for React, even though it's kind of hacky. In your render doing { someVal &amp;&amp; &lt;ConditionalComponent /&gt; } is pretty slick for small things. Been using Ramda and propOr/pathOr instead of using || a lot of the time. Let's you traverse deep in an object and is safer. 
It feels kind of weird how strongly people oppose importing CSS to, for example, React components. I totally agree that using ES6 imports for .css files isn't how it should be done and I've had problems before with tests and other scripts that import my React components the node way. Besides this CSS modules seem to come with a ton of advantages. One of the core concepts of the component based thinking is that components should express their dependencies explicitly and not be dependent on anything in the global scope of the application (e.g. javascript libraries in window scope). To me, getting rid of the implicit CSS dependency floating in the global scope just seems like the next logical step. Also, having a local scope for CSS files makes it so much easier to give descriptive names to classes. I agree that there's still couple of practical issues, but I see no reason why CSS should have such a special position in this matter. I've been using CSS Modules in multiple production projects for over a year now and have been perfectly satisfied. I wouldn't choose globally scoped CSS and BEM for a new project anymore, even though BEM was really a game changer when we first started using it. IMO this feels kind of the same conversation we had with HTML not belonging into js files when React was introduced.
Sublime with Vintageous is mostly better than real Vim, I think.
turn off your computer now then, there is no such thing as 100% secure. You will be left in the dark if you turn off javascript for the most part. You will get a static blob that large companies will spend less than a percentage of their time on, enjoy. Edit, ooh you can load entire new pages when they click anything wooo!!! You know what? I should just have you explain to them what a fallacy it is to disable javascript? :)
Honestly, if a method doesn't refer to "this", meaning the class, then it probably shouldn't be a method but a stand-alone function. Additionally, inheritance seems like a good idea, but in practice it doesn't come up all that often, I've found. 
I guess I could have been clearer on that point. You're quite right that the logic doesn't work for bigger concepts. If it's complex then having docs and especially stack overflow topics is a big bonus. I was actually thinking of a smaller library that had an API that was more complex than the dozen lines of JS that it wrapped. Actually, I'll update the article...
or Array.prototype.forEach no?
Lol, so clueless, doesn't even know what the word "maybe" means. Anyway the number of people with javascript enabled are gonna outpace the people that don't. You go ahead and spend 99% of your effort chasing the 1% and shrinking that don't. This has to be like the 300th fallacy you have made. Or you ACTUALLY encourage turning off javascript and have people install 1000% less secure apps if they need anything more than a glorified book. You don't have many options here, you don't *really* think things through. You can chase idiots if you like, that is your prerogative, but don't think it makes you look smart.
Well even besides absorbing contributors, if new hires are already familiar with a framework, that's one less thing they have to ramp up with before becoming a contributing member of the team.
you can inline them, but best practice is to put them in styleUrls as a list of files. this pretty much matches shadow dom spec where each component gets its own css.
Actually, no - it only binds it for that instance. Because bindAllMethods(this) is called in the constructor, "this" refers to the instance; and is only called when the instance is created. 
At my work we like to open source things for a couple reasons. 1. Pulling out generalized stuff as a dependency shrinks the main code base and is a good way to organize things to avoid coupling. If it's also generally useful, might as well open-source it. 2. We can get some free work from people using it. If people like it but it doesn't quite hit their usecase they might just extend it and contribute back upstream. Then we all benefit. 3. It's a decent recruiting tool. People like working for companies that give back, and we're a pretty tiny company so it's a good way to get attention for ourselves. If lots of people use our tools, they'll be more aware of our company. 
You can use [Radium](http://formidable.com/open-source/radium/) to allow `@media` queries and `:hover`, `:focus`, `:active` within JS.
you are obviously arguing for turning off javascript and pandering to the whims of the fraction of people who turn off javascript rather than using computers as, I dunno, computers? I think you are on team luddite or something, you don't even know what you are arguing for, this started with you hacking up a progressive rendering suggestion, and several assumptions about me, so you are terribly confused in any event. You probably shouldn't install a browser either, that could be unsafe.
http://react-etc.net/entry/your-license-to-use-react-js-can-be-revoked-if-you-compete-with-facebook maybe https://github.com/developit/preact if you're set on such.
This is an npm 3 behavior, not a webpack thing. Npm 3 does the flat-as-possible node_module structure, whereas npm 2 used nested node_modules for everything.
The blog post is rather sensationalist. The license terminates if your company makes a patent claim against Facebook.
I'm not your lawyer or a lawyer at all so my interpretation is as good as garbage: If you sue facebook for patent infringement, your React licence is revoked. If facebook is suing you for patent infringement and you counter-sue *them*, then you React licence is also revoked.
Phantom css picks up the DOM element by looking at the css selectors, so I would have to say both. 
This is a big motivation. Not only does it help with name recognition, but you'll also get passionate people who come to you specifically to work on those projects.
A good analogy for this is a Java/C++ style class is a blueprint, while a JavaScript class is a prototype. A blue print is just a plan, and isn't physical, while a prototype is, and takes up space.
I'd say the 'main' draw (for me at least) is familiarity with the interface already. After using IDEA for so long webstorm was a super easy get-up-and-go experience.
Hey! Cool! Thanks for that. 
this looks really amazing!
[firefox is planning on it](https://hacks.mozilla.org/2014/12/mozilla-and-web-components/) [under consideration in I.E./Edge](https://developer.microsoft.com/en-us/microsoft-edge/platform/status/shadowdom?filter=f3f0000bf&amp;search=Shadow) [will appear in Safari 10.0](https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html) Web components (and shadow dom) are coming, but I'm more worried about shadow dom seems to discourage progressive enhancement, personally.
it's mostly FUD and nonsense by now. plenty of teams at google use react with no issues. https://twitter.com/paul_irish/status/754864479460929536
Agreed. Though there are many frameworks that have no caveat of such nature so why not pick another? 
Yes
Angular 2 handles this very well with encapsulated scss files for every component. You really dont have to worry about writing over css classes that are being used elsewhere
WARNING Shadow DOM specification is being upstreamed to DOM Standard [WHATWG-DOM], HTML Standard [HTML], CSS Scoping Module Level 1 [css-scoping-1], UI Events specification [uievents], and other relevant specifications. This specification may not accurately reflect the latest conclusion. See Issue #377 for details. [citation](http://w3c.github.io/webcomponents/spec/shadow/)
Very thorough, appreciate the response
The two aren't mutually exclusive. React is predominantly the 'V' in MV*, etc. while I use neither in daily practice, I've used react for a few projects to spin it around the block and kick the tires. I enjoy it. after it finally 'clicked' I was pretty into React. Angular, on the other hand... Well, I've not seen A2 yet and would rather it go the way of the dodo bird, truth be told... But I'd home grow my own MVC type frame work before ever choosing Angular without HEAVY influence of C level or higher... So I guess I'd say React. And for the M and C, backbone. For all the things it's not and Angular is.
even if it wasn't FUD, there are like 3 or 4 MIT licensed api compatible alternatives. So even if facebook's license contained some stings, no problem to switch any time.
&gt; It is important to note that JavaScript does not have classes like Java or C++ have classes despite having a class keyword. Although JavaScript does have classes like Python and Ruby have classes. ;-)
The problem seems to be the variable `top` in `specialArray`. It it a global variable of type `Window` (kinda?) and you try to access it, and this seems to be a Security Error.
Your description reminds me of this: https://facebook.github.io/react/tips/controlled-input-null-value.html Maybe try using empty string `''` instead of null in your state. React doesn't handle null|undefined most people expect I guess.
This just seems like bad code to me. I'd just write f to accept o as an argument, but it could just be a style thing.
&gt; but I'm more worried about shadow dom seems to discourage progressive enhancement Interesting point, but why? Because users will need the freshest browers and JavaScript turned on?
To add to this : The first one is the one I'm using 99% of the time. I seldom need to instantiate many objects with the same properties. But if I need to, I would use the second one, or more often, a class which in javascript just is syntactic sugar for the second one.
I think it's a valid point, specially this part: There‚Äôs another flavor of shadow DOM is called ‚Äúclosed‚Äù mode. When you create a closed shadow tree, outside JavaScript won‚Äôt be able to access the internal DOM of your component. Just think about how many browser extensions this can take out in a single swipe. RES etc. If the whole page is in the shadow, you can't touch it. Did I read this right?
The community contribute to them.
por que no los dos? https://github.com/ngReact/ngReact it really depends on what you want. I've been using Angular for a while but most companies I've been interviewing at recently want React, so whatever, started learning React. At the end of the day they're just tools and whatever is useful or you feel happy with will be the same, is hard to argue one or another being objectively better.
Will this make the Polymer library obsolete?
They are working on letting extensions and user scripting through. It is complicated and may not be there at launch, but it is a goal to let happen.
Download the code, beautifying it to my personal preferences and then read it with syntax highlighting enabled.
[removed]
So you're saying if I have one CSS module with a class name like **.foreboding-eyebrow** that is display block while also using the same class name in another module but display inline-block, things won't break?
I'm ok with leaving behind the tin foil hat crowd. 
unless your website is a government conspiracy news site. 
Considering the fact that most libraries or source code I read are rather large I take a kind of weird approach. * First I download the source code and open it in sublime text. * Next I find any big function that produces an Object and console log it with the name of the module/enclosing function. like **console.log('in this function returning', theobject)** * Afterwards I just run the code, open up chrome and see what was logged, and in what order and I inspect the Objects it returned. This way I can know not only the order of object creation, but also see how it was made and what functions and properties they come with. Sure it's lazy, but it takes a long time to figure out what is being sliced applied, binded and composed by someone else whose created those abstraction layers over a really long time. 
I've used angular 2 and react, and react is better. Angular 2 fixes a lot of problems with angular 1, but it is still very 'framework-ee'. Jsx allows you to do regular Javascript which means ramp up time is much shorter, and you don't have to jump through hoops to accomplish certain things (ex: wetting up a pipe in Angular Vs. Array.prototype.filter or map). Honestly, I wouldn't work somewhere unless they used react.
My opinion on Shadow DOM hasn't changed in the 6 or 7 years since it was announced. * scoped styles are a good idea, and have been around since like 2010. You don't need Shadow DOM to get this. * Shadow DOM will be abused for advertising and spyware. The web is already drug addicted to this toxic shit. It many cases legitimate ad space is a vector for serving malware. Shadow DOM will unnecessarily extend these capabilities and simultaneously abstract the ugliness that makes it identifiable. * Global references are bad, but you don't need to operate in the global space to build portable web components. This is a convenience abstraction for incompetent architects.
i couldn't explain my own thoughts better and that was totally my point, thank you.
This is a really amateur/naive solution. It would be more effective to implement your validation on the server, perhaps training a spam filter to handle this.
Pardon my ignorance, but if I can't get styles into or out of the components, how will a website that makes use of shared/public components enforce a consistent style across their application?
Most likely they have a call to stopImmediatePropagation in their handler which would prevent yours from being called. Here is an example of this working: https://jsfiddle.net/5xvo55a8 Comment out e.stopImmediatePropagation and you'll see the second handler is fired.
&gt; Mithril is nice, and is an entire MVC, so you don't have to worry about JS fatigue. That said, it doesn't have anything like create-react-app, so you'll need to setup your own build system (which let me say again is a complete bitch). This is a little bit incorrect. You don't need a build system with mithril since it doesn't use JSX or anything like that, though you're certainly free to hook it up into buble or babel w/e. You just don't *need* to. &gt;It's currently being rewritten, but the new API will be backwards compatible, so don't worry about learning something that becomes redundant. The component api is changing, but the hyperscript-like `m()` is not changing. Instead of `view` and `controller` components have functions like `oninit` and `view`. Additionally, things like `m.request` return streams instead of promises. &gt;Mithril is nice, make sure you use MSX (google it) [...] I don't know anyone who writes mithril with msx syntax. I don't recommend doing this.
lol, newbie. "omg I has to turn off teh javascripts cuz I don't trust teh siteses". you said what your point was NOT, I'm telling you what your point is, since you are oblivious. The world isn't going to cater to you and your irrationalities, deal with it.
I really want to like webgl, I even had a webgl course in college, but every time I open a page with webgl my laptops fans starts spinning like crazy. 
&gt; I haven't used Angular 2 though admittedly it does look much better than Angular 1 (components ftw). FYI, angular 1 has components through directives, but they're just verbose. Since 1.5 you have much more direct syntax: app.component('helloComponent', bindings: { message: '=' }, template:'&lt;div&gt;Hello {{$ctrl.message}}&lt;/div&gt;', controller: function() { this.message = this.message || "default message" } }) Compared to angular 2: import { Component, Input } from '@angular/core'; @Component({ selector: 'my-hello', template: `&lt;div&gt;{{message}}&lt;/div&gt;` }) export class HelloComponent { @Input() public message = "default message" } Only modern vdom can get even slimmer if you have a *stateless component*: React: const HelloComponent = ({ message = 'default message' }) =&gt; &lt;div&gt;Hello { message }&lt;/div&gt; Hyperscript-like (hyperscript, vue, mithril, inferno, etc): const HelloComponent = ({ message = 'default message' }) =&gt; h('div', `Hello ${message}`) Really puts the boilerplate of angular in perspective, I think. e: added some stateless components per u/avindra
&gt;My personal favourite is the Yahoo User Interface library (YUI), followed by jQuery, Dojo and Prototype but there are dozens of other good libraries out there and you should find the one that suits you and your product best. Wow, this is a dated article. 
The problem may lay in your graphics drivers. Or possibly your graphics card is too weak to render 3d graphics. some laptops have awful integrated gpus
&gt; I have the following code for filling the object: What are the things that would be put into the box? I don't see any code that fills the box element. I only see it adds a new link element into an element with ID "download".
React using a stateless functional component: const HelloComponent = ({ message = 'default message' }) =&gt; &lt;div&gt;Hello { message }&lt;/div&gt; This should demonstrate why React is so wildly popular. It builds on your existing knowledge, uses the latest language features in a smart way, and tends to have the least boilerplate code. At the end of the day, these libraries are just tools and I want the one that not only performs well, but is the most simple to use and understand.
Aside the clickbait title, keep in mind this solution requires you to make an account by them, and all [but the most basic tiers aren't free](https://cosmicjs.com/pricing). Also, $19/mo for SSL? Really? We're in the age of [free ssl](https://letsencrypt.org/), and SSL *is not optional* for APIs that authenticate. 
I have have the newest 13" MBP and a year old ThinkPad with an i7 and a GT 730m
Thanks for the comment. Absolutely the API is under SSL free of charge. This 19/month SSL is for your deployed application. And it is One-Click SSL that auto-renews that removes all of the complexity of the process. So we believe it is worth it for the convenience.
Personally I still prefer React to Vue, but I see Vue as a good compromise between Angular and React. You get the lightweight component-based aspect of Vue and similar data/state management paradigms but can use html templates like you do in Angular (if that matters to you). I use React in personal projects but at my day job we use Vue for the reasons above. 
For most cases it is syntactic sugar but, as always, [the details are important](http://www.2ality.com/2015/02/es6-classes-final.html).
Huh? Fetch already returns promises. If you want monadic promises, you're better off with converting them into [futures](https://github.com/Avaq/Fluture#promise) (particularly since libraries like that do not make error-handling them optional).
lols. i totally saw those libraries mentioned, and checked the last update date, but did not check beyond it. my bad yo. still, not like this is bad information, by any means
THIS is fucking awesome!
Hi Johnston, If you're working with SharePoint, than I could not more highly recommend SPServices (a JS library, available here: https://spservices.codeplex.com/) that is built on top of jQuery and will simplify your life extremely. Here's a fiddle/example: https://jsfiddle.net/1ntyh30t/. I would only recommend this to be used in Internet Explorer (which if you are using SharePoint is more than likely your default browser).
could be a lot of lines with echo 10 echo 33 echo .... neither WebAssembly nor the bootstrapped forth have a concept of strings, strings are implemented in third and then you can do a simple hello world :) forth because it's the language you can bootstrap from assembly the easiest
Yeah ... Some people think they need to code for the humans to read the code and simply ignore that they should code for the machine to execute said code.
This is pretty neat, but whoever did it really needs to learn about webworkers so it does't lock up the browser every generate.
Ah yeah, didn't notice the links were on the page, nice :)
This is because the capturing phase happens before the bubbling phase; if `stopImmediatePropagation` is called during the bubbling phase, this means that capturing listeners will have already been called: http://www.quirksmode.org/js/events_order.html#link4
you are stuck in semantics, your purpose is clear, and it is dishonest of you to pretend this is about anything but your misconceptions and misrepresentations.
Yeah exactly. CSS Modules compiles all classnames to unique strings so for example **.foreboding-eyebrow** would become **.TheBeardofGilgameshComponent_styles_foreboding-eyebrow**, where the first part would be the directory name, second the filename and last the classname. This behaviour can also be configured and you can even generate classnames based on the css file content hash. Now the way you refer to these generated classes in your components is just to import the .css file, for example `import styles from './styles.css'` and then you can just use the property of that `styles` object matching you classname to get the generated classname. So `styles['foreboding-eyebrow']` would equal `TheBeardofGilgameshComponent_styles_foreboding-eyebrow`. 
Well, how about https://medium.com/javascript-refined :)
React might be better at the moment but if you shoot for long haul Angular2 will secure your job for years to come.
That doesn't make it any less of "a dumber system."
So far, I've been looking into Hapi and Restify. Both seem to be polar opposites. Hapi, an extremely opinionated framework that handles a lot for you. The framework looks solid, with almost every one of it's npm dependencies being something created by the Hapi team or it's creator. Then there's Restify, which is about as bare bones as it gets compared to just pure node. 
Vue to me is really what angular 2 should have been: similar concepts that are paired down drastically to stay competitive in the modern JS world.
I think this is a great suggestion, thank you! I've spent a lot of time building Cosmic JS to help all developers build apps faster and easier. I'd love to see you try the Free tier and by the time you're ready to add more storage / features, we'll have that exact plan ready for you :) Let me know if you have any questions, I'm more than happy to help you get started!
I'm not a Microsoft fan, but I'm not one of those guys who thinks they've literally never done anything useful or good, either. .Net is not my ideal language, but it's miles ahead of things like Visual C for application development, given that you need to develop a Windows application.
I work now on REST APIs and we use [Koa framework](http://koajs.com/). It is leveraging generators and it is created by people who have done Express. I can definitely recommend it. It take a while to catch the concepts of stacking up middlewares, but once you get it, it's pleasure to work with it.
I think it's fair to assume jsx isn't core js. But you can use core js within the context of jsx. 
Believe it or not: I make a living by working full-time on Vue.js. The theory is simple: I create something that helps others solve their problems. If I do it well enough, some of the users will be willing to financially give back. So I started a Patreon campaign and it's kinda working: https://www.patreon.com/evanyou
New version of Vue js should be stable in month or two. It will be mostly backward compatible. 
Thx for the explanation re: Firebase. I'm new to JS, but I have to say their docs look readable. Those pre-built apps look good. I'm surprised they are not highlighted more on your main page, as the clear examples might be a major draw for new developers. I spend a lot of time on Codepen forking other apps. Easy-mobx looks good. &gt; This is actually the users in the Cosmic JS CMS, not the users of your app. lol, thanks for clearing that up. I'll play around with those examples. 
like the idea and would like more tests :)
omg that seems a lot of money, who will know that OSS could give so much money, maybe is the future.. just saying
Good news - we're currently working on relaunching it :) Watch this space, it'll be cool, promise!
Prepare for the feed getting a lot better soon. It's been a bit of a poor cousin to the email so far, but we're cleaning it up a lot.
Oh god! you want to turn it into jshumor???
Sounds like you could have a column :-D
Thanks! Email newsletters are so old-hat, RSS is much nicer to consume. I actually have a chance of reading it if it's in my news reader, compared to having it sit in my inbox unloved until the next time I clean up all the junk that's accumulating in my inbox :P
I disagree with a lot of these comments actually. If you work with enough developers on a large enough project, it's not realistic or even desirable to understand the implementation of every object in the system. I personally like to use the code-folding feature of most modern editors and collapse the code to its function definitions. It gives you a view similar to what you'd see in a C or C++ header file. The exposed public interface is the interesting, informative part of an object's definition. Short of needing to actually update the private implementation, why would you even care how an object works under the hood?
Oh, I didn't even know this! Really cool. I wish Shadow DOM would soon be available for all major browsers so we could skip the one additional build step for CSS modules and it could potentially also remove the need of importing .css files to JavaScript. 
At your day job will you be updating to 2.0 once it's stable? 
Usually on commercial websites third party ads are sandboxed into iframes. This does nothing to protect the end user, but at the very least it protects the rest of the page from defacement and reference clobbering. With a Shadow DOM, in theory, many of those problems can be avoided directly so long as the provided intention isn't to perform malicious activities against the host page. This isn't a valid problem though as long as ad space costs money. Ads only interfere with the host page, because the associated code is incompetent (like criminally incompetent if this were any industry other than marketing), and not because they are maliciously targeting the host page. When ad content is spoken of in a security context the subject of concern is the end user. Nobody really cares if incompetent ad content destroys the containing page except the page owner. https://duckduckgo.com/?q=malicious+online+advertising&amp;t=h_&amp;ia=web 
Just change the class to: class="panel show" Not class="panel.show"
Super quick way to do it would be add this acc[0].nextElementSibling.classList.toggle("show"); Basically just setting the first of the 3 elements (index 0) to have the "show" class. Here's a fiddle https://jsfiddle.net/uztsr4bm/
If you look at job postings (in Silicon Valley at least) Angular wins by a significant margin ... much like PHP used to dominate server-side jobs. But just as with PHP, I'd take any of Angular's competitors over it (except Knockout ... fuck Knockout). And I'd certainly take a high quality framework like React over it.
in the latest hacker news "who's hiring?" there's twice the amount of react job posts than angular ones
I haven't made up my mind yet. We're using a few of the functionalities that are being removed (partials, activate hook, events) but it doesn't seem like it would be too hard to migrate to whatever the new corresponding paradigm will be. I do like the idea of server side rendering and the render function.
The app now supports private generated links! :) 
Vue is my favourite!
&gt; If it returns undefined then will the "child = undefined" assignment cause the for loop to end? Yes. If you turn undefined into a boolean, you get false. And an assignment evaluates to whatever was assigned. E.g. x = 5 evaluates to 5.
Thanks everyone that makes complete sense. Next logical question I suppose is... Is there any workaround stopPropagation to get this working in some way? 
Awesome, that explains that. Thanks!
Hi /u/Lair_East, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Can anyone speak to the trade-offs of using Vue vs Knockout? Not looking to spark a heated debate or anything, but if there are any clear advantages at this point (eg. Since version X rendering large lists of items is faster) it'd be great to know. I currently am developing something in KO but that's just because it was the library I was most comfortable with. Performance, however, is a huge concern so if Vue is known to be superior I'd really like to hear about it.
yup, point 1, you and some other guy don't use javascript. re: point 2, no you two are definitely NOT worth it. re: point 3, still probably not worth it for just you two guys. re: point 4, sure, you might convince someone else not to, based on your misunderstandings and misinformation. re:again, shouldn't you be listening more if you are learning? 
There's barely any API changes. There's been almost 5 months alone since Vue 2 was announced and it's still not final yet. Evan said there would be 1.x support for awhile as well if the changes are too much for you 
This sounds directly applicable for my situation where I'm working with hundreds of canvas elements, which are in jQuery sortable lists. Knockout does *okay* until a certain point and then it sort of hits a wall to the point of being unusable.
no Javascript
Every method call will complete before the next one begins. Javascript has the ability to create "futures" but without the ability to wait for their completion (Future#get). consider this: function later(done) { setTimeout(function () { done(); }, 100); } console.log('before'); later(function () { console.log('during'); }); console.log('after'); This code will output: before after during (if you run that in your browser console or a node repl, you'll likely see an "undefined" between "after" and "during" -- that's just the REPL showing the value at the end of the executed code but before the timeout is executed). Javascript engines will execute code to completion. However there are constructs, like setTimeout and setInterval, which allow code to be executed in the "future". What happens is that you're taking a function and registering it in a list to be called at some point later. For setTimeout/setInterval, this will be some number of milliseconds. For an XHR request, it will be when the XHR call is complete (success or error). The setTimeout call simply places the function in the event loop with a time to be executed. &gt; removeUnwantedAttributes(), applyFriendlyValues() Since you didn't post the code for these functions, I can only assume that they make some kind of async call and invoke the supplied callback (the function you provided as the last argument) when the async call completes. Like the setTimeout call, these functions likely perform some action that results in your callback function being executed later. Makes sense? If not, this may help: https://developer.mozilla.org/en/docs/Web/JavaScript/EventLoop 
&gt; You would hope that's the case but then we have something like heartbleed... Now you're nitpicking. There's always going to be examples of bugs in OSS. But as Eric S. Raymond in his essay and book The Cathedral and the Bazaar said "given enough eyeballs, all bugs are shallow". So yeah, OSS is prone to have less bugs than private code bases. &gt; Code is the only good indicator of programming skills. That's the whole thing. People contributing to OSS is evidence that they can code. &gt; What and how often they contribute means nothing. This is flat out wrong. It's not the same somebody contributing support for a new file system than somebody fixing a typo in the documentation. 
Is there any kind of JS certification that has any weight? I've never heard of one. 
How is that nitpicking? Because it's a major example that proves you wrong? That doesn't make any sense. People contributing to OSS is evidence that they can contribute to OSS... You're putting *way* too much weight on this. https://books.google.com/books?id=3Ntz-UJzZN0C&amp;pg=PA174&amp;hl=en#v=onepage&amp;q&amp;f=false Simply put, there's no reason to think "more eyes = better code" other than it sounds nice to say.
Yeah, I'd look for a different company if possible...
Cool! One thing I immediately noticed is the lack of a signifier after a pokemon is selected. Even a little X at the bottom of the currently selected pokemon or something to tell me I can click it to remove it would be a small, yet helpful, UX improvement.
Technically, all it does is change your classname to a globally unique value. So, once it's compiled down, there's no performance hit at all compared to regular CSS.
if you are learning React &gt; "as my first framework" ... I dont think you should have any concerns about competing with facebook.
So what exactly is the value proposition here? Storing JSON differently to have references instead of duplicated objects? Why is a DTO not sufficient for this? &gt;But even when sticking to plain object trees the data often doesn‚Äôt have the desired JSON structure that is needed to integrate with back-end services. Attributes might need to be stripped, or the server API‚Äôs change but you don‚Äôt want to rewrite your client side code for that. This is *literally* the entire point of using DTOs; so you have an unchanging, easily serializable contract between service layers that both sides can adapt into their native model structure.
They even have docs for 2.0! http://rc.vuejs.org/
To my understanding, once an event has stopped propagating, it cannot be re-started; it's all workarounds from there. This StackOverflow link contains a bunch of jQuery-isms but also has creative solutions: http://stackoverflow.com/questions/7811959/how-to-continue-event-propagation-after-cancelling Some of them make reference to how to trigger events from within JS code (but some default behaviors *only* happen if the event was actually caused by user interaction): https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events
 import { map } from 'lodash' map(obj, (value, key) =&gt; { ... })
It involves picking a tab and letting it be the "main" tab. All actions done on other tabs would be handled by it. Changes to main would get sent to the others. Then you would handle the case of when the main tab was closed, picking a new main cooperatively.
It's funny to see how much hate there is about these techniques on here. Stuff like CSS Modules and Aphrodite are standard practice for most of the React community. Maybe I'm just a bay area hipster though.
I agree, however css is just not designed to be split up into components gracefully.
You can even go smaller, by including only the functions you need: https://www.npmjs.com/package/lodash.map
In general I would say no. But have a read on critical css, and you'll start seeing things like https://github.com/filamentgroup/loadCSS. From there you'll learn more context either you need it for performance sake or SEO even (own topic by itself, again need a lot more references to read up, like how Search Engine "favors/rewards" fast loading sites).
This example, though, would be more readable if `React.createElement` was on the same line as the return. I think some people just try too hard to make their code look nice.
You can't find their event listener and detach it because its not exposed to page level javascript. You can however, insert your script before any of theirs run, to ensure you get the first crack at being an event listener. 
Our code guide discourages implicit iteration over objects, because it tends to hide bugs on type mismatch. 
Thanks for the resource! &gt; I know UI developers get all super excited at the idea of deploying and receiving untrusted code modules, but that level of excitement displays a sort of immaturity and security ignorance. That might easily be a valid point, I just don't know enough about it. On a general level I'd wait for maturing. There were a lot of maybe childish excitement about AJAX, too, but it is still around and has its [security issues](https://www.owasp.org/index.php/AJAX_Security_Cheat_Sheet) as well. This kind of stuff usually needs weighting.
Are you suggesting that the code I wrote is less explicit than the code you wrote? 
If your company doesn't have anyone skilled at js who would be able to answer that, there's probably not much point worrying about it anyway, because you will have to reimplement everything once your team realises the front end is an unmaintainable mess Source: real life T_T
Knockouts error messages are pretty terrible (or often nonexistent) compared to React as well. If nothing else, React makes it a hell of a lot easier in terms of tooling
Okay thanks I'll check it out
Yep, on the webpage I do console.log(listName) and it displays 'Chat' 
The reason I want it to be able to use a variable instead of a hard coded name is so that the list name can change and all I'd have to do is call this function and it would add the list item to the correct list 
JSON.stringify..?
Thanks! I understand now. :)
Can Vue.js be rendered server-side? I for one think HTML like this: &lt;template v-for="branch in branches"&gt; Feels like Handlebars nonsense. I'd opt to use React instead: {this.state.someItems.map((item) =&gt; { return ( &lt;Item key={item.id} item={item} /&gt; ); }, this)} More native JS sorta feel to creating any view. Outputs simple HTML to the DOM. Can be rendered server-side. Just JSX takes some getting used to ;) Gonna look into Vue.js though. Seems to be getting huge!
Agreed, I personally prefer this implementation: https://github.com/folktale/data.task
Does it work? It tells me that Arcanine is strong against Mewtwo.
Hi /u/kenman, sorry, I just wanted to show these cool things that were introduced and thought that "JavaScript" is the best fit. Of course, I read and re-read the guidelines but still cannot say I understand why it is not. Anyway, would you be so kind to help me figure out which subreddit is more suitable for this kind of submissions, if not this one?
leftpad-esque nonsense ...
Not at all: https://github.com/vuejs/vue/issues/2873 Most of the changes are behind the scenes. 
Well we had originally built our own framework, which is now in place. But each portal is updating based on their own teams and isolated servers. So some of the teams are picking up angular, while my team is using a just JavaScript with pub sub. I haven't really had the time to check out vue and see if it would be an option. 
&gt; Do you have any reference tutorials for the (I assume) ECMA 2015 stuff you're doing in your react example? The only ES2015 stuff in there is the arrow function `=&gt;` :) Fun to play around with, just be careful not to over-use it because it's not a function, really. It's anonymous, making debugging slightly more troublesome than if you used a (named) function instead. &gt; Mainly, why you're able to put a function inside {} That's JSX: https://facebook.github.io/react/docs/jsx-in-depth.html &gt; why you're able to return a string (?) inside parenthesis That's JSX, too. Don't look at it as a string, but more of an external React component (the `&lt;Item /&gt;` part), which might in turn return a string or HTML element or React component. &gt; what =&gt; is and what else is going on here that my not-up-to-date brain can't figure out? That's the ES6 arrow function: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions Basically you used to do this in ES5: this.a = true; yourArray.map(function doSomething(val, index, arr) { // "this.a" doesn't exist // the context of "this" is bound to the scope of the `doSomething` function }); With ES2015 you can *also* (not restricted to!) do: this.a = true; yourArray.map((val, index, arr) =&gt; { // "this.a" is true }); It's fun to play around with. And React + JSX keeps HTML and JS all together because I think there's no need for separation of these "concerns" anymore, nowadays.
Also when I refresh fast I can see input blinking white for a while. It's so fast my recording software can't record it ;D
It can be [server rendered](https://github.com/vuejs/vue/wiki/Vue-2.0-RC-Starter-Resources#server-side-rendering). and there is a [demo app](https://github.com/vuejs/vue-hackernews-2.0) built with SSR Though, Vue strongly recommends html templates, Vue also provide a [babel plugin](https://github.com/vuejs/babel-plugin-transform-vue-jsx) for jsx. 
Ohh, that's cool! :) Thanks!
Soon as I read your post I was felt so silly for my brain fart. Thank you so much!!! :)
You could start with this: https://github.com/egoist/vuepack
&gt; some of the heavier ones, like react, might actually take longer to initialize due to just the sheer size Maybe, but it also might not. If you're just comparing library size, vue's 24kB min+gzip, while React+ReactDOM is 42kB min+gzip, so the difference in download time will be a fraction of the variability of the TTFB anyway (ie. not significant). Vue init is still reading through and tokenizing out strings from the DOM, while React is rendering purely via javascript functions, so one could be faster than the other depending on the test case. I suppose React does have its lifecycle methods to go through, but so long as you appropriately use stateless components that's fine.
Sweet, loving the simplicity and solid docs for Vue, already found great use for it in a SaaS project I am working on.
Awesome, thank you. I wasn't sure where to start with this. 
As of Vue 2.0 it will only support one way down data binding with a global event system in favor of two way. There's also Vuex (also created by Evan) which is a redux like lib that also provides single state management with reducers. I've been working with Vue every day for the last year building an app like you describe, heavily modularized and component based with lots of state like you describe above. Vue 1.x has been amazing for that, really looking forward to 2.0!
Pretty cool, but aren't those already named by their names on labels, not E*** in most countries?
I also found React easier to learn basically for the same reason you mentioned: there is not much to learn. One thing that confuses me is given the number of stars Vue has on Github, why are the tutorials and learning resources (beyond the basics) so few and far between? I believe Evan did mention that he'd be focusing more attention on learning resources, so that's a good thing.
True, understandable. I mentioned React as Vue acts (for me) as simply the V in MVC, similar to React. Good points though.
Besides the usual technical props, what I like about Vue is how approachable and lowbrow it is. The docs are written with a minimum of jargon, the API feels natural... I think it's the least overengineered amongst the popular front end frameworks.
You know with googling, the words "using" and "with" are pretty superfluous.
I'm not sure why you got downvoted for this. It seems like a perfectly good solution, and I think you're *probably* right about the speed. Not to mention the problems you can have with deep recursive functions anyhow.
Thanks for your answer. Do you use it in a production environment? 
Though, to be clear, redux can be used with all kinds of libraries, including vue (and there's even an official implementation in vuex).
Angular is a more "comfortable" choice for a lot of .NET developers. You might be able to steer them towards aurelia, due to rob's influence on the project, but I've typically not had much success in getting .NET shops to adopt vdoms like react, vue, etc.
Nah, the surface area of vue's API is still much larger than some of its vdom competitors, like mithril. Maybe even react.
&gt; http://mherman.org/blog/2015/02/12/postgresql-and-nodejs/ Yeah I went through that tutorial but it's pretty basic, although it was good for setting up the connection and such, ideally I want a video series which will talk me through more than just basic CRUD, I want to be really good at it when I've finished the course. I guess tutorial wasn't a good word to use in my original post, course would have been better. Sorry about that.
I recommend looking into an ORM, as well. It pre optimizes easy queries for you, and is largely db-agnostic. Try out Sequelize.
The browser interprets your markup as if it were XML. In other words, new line, tags and space between elements in your markup get converted into empty text nodes to make the html structure resemble the physical structure look of your markup. That said, you can avoid the empty text node problem by using DOM accessors that ignore them. Instead of `element.childNodes` use `element.children`. The following accessors will always return a DOM node while avoiding empty text nodes: ParentNode.childElementCount ParentNode.children ParentNode.firstElementChild ParentNode.lastElementChild ParentNode.nextElementSibling ParentNode.previousElementSibling ParentNode.hasChildNodes returns DOM nodes and empty text nodes. To get the same result, you can test using the `chidren`: if (ParentNode.children.length) { // Do stuff with the children. }
Please create a blog post on something like [medium.com](https://medium.com/) instead of giving us a wall of text, which is clearly a marketing gimmic. A blogging site would give you the opportunity to show graphs, statistics, and comparisons.
 Item.setHandEquipped(802,1) ( ModPE.setItem(843, "weapon_65", 0, "infared sword"); This line has a random open paren. Please also format your code better and preferably put it on JSBin or something :/
It looks like a good start. You've written a few bugs that are easily apparent in the attached demo. http://imgur.com/DJ6vJf4 Between the 8/8 and 9/8 is not 18:00 and that is drawn in the wrong place anyway. I guess it may be your timezone code as I'm +0200. How does your code handle time zone changes like DST? Significant figures on the y axis is one too high. It should be 149.5 and not 149.50. you can and should algorithmicly detected the right precision. 
I think vue and React can be good for both, at least compared to literally every other option there is. Only compared to one another is it clear that vue is nicer for binding to existing pages, and react for building from components.
Thank you. Ive never heard of jsbin but i knew reddit has a javascript subreddit. And it probably is a good idea to format it better. Thank you!
Yeah, building from components seems a lot more natural in React. 
define what "more modern redesign" means. Is it subject graphical aesthetics, or more idiomatic code aesthetics or program structure?
It's just useful to have it hosted somewhere with text editing / execution capabilities. And no problem! Good luck.
A bit of both. The project I am working on (the CSFieldGuide website) is aiming to become more accessible, through browser compatibility and performance. Ideally using open-source technologies too. Thanks for the reply!
An on topic note now: Just because you are rendering using a canvas context for the interactive view, there is nothing stopping you from adding a switch to build the svg XML structure as you go with a dummy interface that mimics the canvas api. you could get it so that prints and graphs for reports are vector graphics. You should be able to implement the full screen API on mobile devices, screens are tiny and opening up more screen space for fiddly graphs is very important. 
Google "sequelize example github" and look at the little project. In conjunction with the sequelize docs, this should take you a long way.
I actually prefer to just use promises, but here is a great video by MPJ that explains Generators. He also has tons of other videos that are just plain fun and knowledgable. Hope this helps! https://www.youtube.com/watch?v=ategZqxHkz4
I can vaguely remember that simple methods didn't work in some older browsers. I would have to test them out to remember why. I just tried in Firefox and Chrome and both of these flatten multidimensional arrays: * `myarr.join()` * `myarr.toString()`
&gt; yeah we don't have to avoid globals anymore. Exactly. Because we can use classes now. https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/
Use Knex, and just go readt their documentation/examples.
... or we can accept that ES6 is a thing now and there is no need anymore for disgusting workarounds.
The first paragraph appears to be missing a sentence or two.
I came up with this one but it's seriously ridiculous and doesn't take in account strings that contan square brackets: JSON.parse('[' + JSON.stringify(nested).replace(/\[|\]/g, '') + ']') 
That certainly may be. I haven't developed a Windows application in 15 years. It leaves much to be desired when developing for the web, however.
Did you log the value of the type property? The two pieces of code you provided to set the type property are equivalent. If it's not working it's because `listName` doesn't have the value you think it does at the time you're trying to use it.
The author makes no effort to explain this, not once does he even mention react router, is he even aware that it is thirdparty? And if not, why should I take him seriously?
Yes. Arcanine cannot have a move that is not effective against Mewtwo, and it can have a super effective move against Mewtwo. For example, the move bite has the type dark and dark is super effective against Mewtwo. I am only looking at the types and not the stats. I believe that I would need the level of each pok√©mon to take the stats under consideration.
Really nice assessment. A minor correct: &gt; Logarithmic degradation is exponential Mathematically logarithmic scaling is different that exponential scaling. Exponential growth is more regular. It produces a less dramatic broad curve. Logarithmic scaling starts slower and finishes faster so it produces a sharper and more dramatic curve. Logarithmic scaling can be though of as a sudden unchecked explosion while exponential growth is rapid but more predictable.
I see this as less gimmicy than a separate site with eye candy and visual distractions.
I think of generators as processes (pieces of code) that you can pause and resume: * When you start a generator, you get a _generator object_ `genObj` that you can use to control the process: function* gen() { console.log('hello'); yield; console.log('world'); } const genObj = gen(); * `genObj.next()` resumes execution of the process, a `yield` inside the generator code pauses the process: genObj.next(); // output: hello genObj.next(); // output: world Why is that useful? * Producing iterable data: data returned via `yield` to `next()` is iterable (via the `for-of` loop, the spread operator `...` etc.). And using a normal loop to compute this kind of data and then yielding/pausing whenever a new piece is ready is simpler than maintaining manually where you currently are. For example: function* iterArgs(...args) { for (const arg of args) { yield arg; } } for (const x of iterArgs('hello', 'world')) { console.log(x); } // Output: // hello // world * Receiving asynchronous data: Generators can also receive data via `yield` from `next()`. That means that you can wake up a generator whenever new data arrives asynchronously and to the generator it feels like it receives the data synchronously. **You can use generators to tremendously simplify working with Promises**, by combining both modes of operation (producing and consuming data). Promise-based version of a function `fetchJson()`: function fetchJson(url) { return fetch(url) .then(request =&gt; request.text()) .then(text =&gt; { return JSON.parse(text); }) .catch(error =&gt; { console.log(`ERROR: ${error.stack}`); }); } With [the library co](https://github.com/tj/co) and a generator, this asynchronous code looks synchronous: const fetchJson = co.wrap(function* (url) { try { let request = yield fetch(url); let text = yield request.text(); return JSON.parse(text); } catch (error) { console.log(`ERROR: ${error.stack}`); } }); ECMAScript 2017 will have async functions which are internally based on generators. With them, the code looks like this: async function fetchJson(url) { try { let request = await fetch(url); let text = await request.text(); return JSON.parse(text); } catch (error) { console.log(`ERROR: ${error.stack}`); } } All the versions can be invoked like this: fetchJson('http://example.com/some_file.json') .then(obj =&gt; console.log(obj)); **More information online:** * Chapter ‚Äú[Generators](http://exploringjs.com/es6/ch_generators.html)‚Äù of ‚ÄúExploring ES6‚Äù. * Blog post ‚Äú[ES proposal: async functions](http://www.2ality.com/2016/02/async-functions.html)‚Äù on 2ality. 
You can always comment on medium post and ask author directly ;). Imo, while he should have mentioned that react-router is not backed by fb, the fact is react-router is de facto router for react. Even searching on google and github for alternative router is hard as search terms must include `react` and `router` 
As EnchantedSalvia mentioned, Variables are one way. Or you can add attributes to your component to say change colors or do modifying styles based on the attributes internally to the component. Variables are a lot harder when using multiple components from multiple vendors, since each one could be looking for different vars. Attributes to open up styling, means you may end up with quite a few (albeit not *a lot*, remember components should be as minimal as possible) color (or other specific properties) modifiers to edit the way a component looks.
In the video before the one you posted, he was SO EXCITED for Promises and generators because it made callbacks a lot easier to deal with and to make readable, so that is probably one part. If you haven't already maybe watch his "callback hell" video as it is a direct lead in to that one, and not too long either. Maybe context would help you understand what he is trying to get at. 
&gt;Why would I? Chances are more people will see my objections here, than on the medium page. Because 10 to 1, the author is not aware of this reddit thread. &gt;My problem is a bit deeper than that tough, it is the fact that he misrepresents React as a framework on par with say Angular when it is no more than than a mere view library. if that is all the problem you have, then the author admits that he is fluent in ember only and may have made mistakes wrt to others. 
If you combine promises with generators and a coroutine library like co or bluebird.coroutine, you can write code that looks essentially the same as async/await ... very sync looking code. It's worth learning pairing promises with generators.
Curious if you've used Sequelize?
&gt;Because 10 to 1, the author is not aware of this reddit thread. It is not the author I'm trying to convince of anything, it is people reading the article &gt;if that is all the problem you have, then the author admits that he is fluent in ember only and may have made mistakes wrt to others. Is is a bit more than a simple mistake don't you think? It shows he put exactly zero effort into researching the topic he wanted to discuss.
&gt;It is not the author I'm trying to convince of anything, it is people reading the article Ehh, but the author can update the post if you show him the truth. even if you don't have a medium account, it won't take more than a few minutes to give him your response. &gt;Is is a bit more than a simple mistake don't you think? It shows he put exactly zero effort into researching the topic he wanted to discuss. Maybe, but then no one, who thinks like that, that has pointed it out to him either. just saying. 
Thank you so much! I will try to implement these. I currently don't know how to make an algorithm that can make a random 7 digit sequence that uses upper/lower case letters and numbers. For updating the URL visits, are there any other ways I can do this? I used express, as I can understand it better, I am still experimenting with Koa. Thank you so much for letting me know of the status 200 thing. I will change it so that it returns a 404 status. Thanks again! 
&gt; Ehh, but the author can update the post if you show him the truth. Or ignore it entirely, not really willing to spend the time on just 1 person. &gt;Maybe, but then no one, who thinks like that, that has pointed it out to him either. just saying. Or maybe they are just as dumbfounded as me that it left them speechless ¬Ø\\\_(„ÉÑ)_/¬Ø
1. url.increment('visits', {by: 1}) ‚Äì it will do it in one query, without race conditions 2. You can create array of small, big letters and numbers and pick random element of it 7 times, it is easy :) 
React router doesn't even require JSX. You can just use a config object.
hm. the keyboard shortcuts only work when you're focused on the editor window at the moment and not the menu... is this the issue?
You can't capture messages from multiple tabs using only one single function *instance*. It's simply not possible. For capturing messages only from a single tab... If you own zyx.com (the site in the first tab) or have write access to that site, do your message monitoring in the existing `message` event handler function. Otherwise, if you're doing it as a client (via web browser), use GreaseMonkey script to hook `AddEventListener()` so that when the site tries to add its `message` event handler, you can provide your own `message` event handler instead - where you can call the site's handler function later from your handler function. i.e. Original: {Message} -&gt; OriginalHandler() { //... } Hooked: {Message} -&gt; YourHandler() { //check message... //... //call OriginalHandler() } 
Other posts have explained the benefits well, but I think this thread shows that a lot of generator tutorials/videos focus on the wrong things Like, it's cool that generators are interables and you can for-of them or whatever, but for most developers they're just a better way to handle async data, or the secret sauce behind async/await I think people should focus on this more common use case first (handling async data in a more sync way), then maybe explain the other neat things about it, so we don't confuse people or have them going 'so what?'
Are there any remote bootcamps for beginners? That would be a huge market.
They're functions that remember where they are. Each time you call one, it picks up where it left off. Every time it hits a `yield`, it pauses again and returns
I don't know why you would want to yield in the middle of a function and then resume later. Why not break it up into two separate functions? For business programming, readability and understand-ability is much more important than esoteric exercise of yield/next. The way you describe yield/next makes it look like an old BASIC GOSUB command. Bleh.
He passes a 1 to it and suddenly the one variable is available...huh?
when you hit Ctrl+S the URL at the top should change to the URL of the paste. it uses the browserHistory API. Maybe you don't have support for it? 
I tried React once. Honestly, it's the whole JSX thing that rubbed me the wrong way. I like Backbone because it a) has nice models that snap into any REST interface well and b) is modular. If you're working on a Rails project that you kinda want to sprinkle with JS and don't want to go with the default UJS, then Backbone seems like a no-brainer.
Yes, you could break a generator into a bunch of separate functions (or function calls). That is the traditional way of doing this sort of thing, and it certainly works! Programming languages are powerful because they do things for you. Specifically, they let you say *what* you want to do, without worrying about the details of *how* to do it. A simple string concatenation like ('hello' + x) involves a tremendous amount of work, including type conversions, memory allocations, data-copying loops, and more, but we don't have to worry about that stuff. The Javascript language handles it all for us so we can get on with work. In the case of generators, Javascript now allows you to say, "I want to do this, wait, and then do that." The language handles all the complicated details of splitting this up into separate functions so we don't have to worry about it. Writing a generator requires a lot less mental overhead than writing a bunch of separate functions, or trying to track state between one function call and the next. True, generators may seem weird and unfamiliar now, but all new concepts start out that way. Give it time, and generators will become the easy and obvious way to solve all sorts of problems.
Knex.js + objection.js Best combo ever
Try setAttribute() https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute
Read the source code of the libraries/frameworks you're using and understand the patterns/algorithms they are implementing to get things done.
I've been working for about a year and I agree. I think part of is a reflection of the Javascript ecosystem (constantly in flux, so much churn!). I think you should consider doing back-end or full stack work. I'm made the switch to doing more back-end work and personally found it more fulfilling because I spend more time building things than learning new frameworks. I also like math a lot and find I use algorithms more in the back end than front end (although it's still not as much as study in school). The nice thing about server side development is you can really work for years in a technology and not feel like you have to learn a new one. Heck you could have just stayed in PHP in the last decade and still can be able to build cutting edge apps. Obviously you couldn't say the same about the front end. So my advice is to mix it up and maybe try some back end work.
Generators are functions that can send results back and pause, using keyword `yield`, without terminating their own context. Calling their `.next()` method causes them to resume where `yield` left off. This can be used in lots of funky ways. Consider the case of making new random items for a video game. function randomFrom(someArray) { return someArray[Math.floor(Math.random() * someArray.length)]; } function* genRandomWeapon() { while (true) { var newWeapon = {}; newWeapon.kind = randomFrom(['sword','axe','mace']); newWeapon.bonus = randomFrom([-1,0,1,2,3,4]); newWeapon.element = randomFrom([null, null, null, null, 'earth', 'air', 'water', 'fire']); newWeapon.special = randomFrom([null, null, null, null, 'poison', 'vorpal', 'holy', 'infernal']); yield newWeapon; } } And now you can get new weapons by calling your generator's `.next()` and looking at the `.value` member of the result. &gt; genRandomWeapon().next().value; Object {kind: "sword", bonus: 0, element: "earth", special: "vorpal"} &gt; genRandomWeapon().next().value; Object {kind: "axe", bonus: 0, element: "air", special: null} &gt; genRandomWeapon().next().value; Object {kind: "axe", bonus: 3, element: null, special: "holy"} &gt; genRandomWeapon().next().value; Object {kind: "axe", bonus: 0, element: null, special: "vorpal"} &gt; genRandomWeapon().next().value; Object {kind: "mace", bonus: 2, element: "fire", special: "holy"} &gt; genRandomWeapon().next().value; Object {kind: "sword", bonus: 1, element: null, special: null} &gt; genRandomWeapon().next().value; Object {kind: "sword", bonus: 3, element: "water", special: null} &gt; genRandomWeapon().next().value; Object {kind: "sword", bonus: 1, element: null, special: "holy"} &gt; genRandomWeapon().next().value; Object {kind: "axe", bonus: 1, element: null, special: null} 
Medium has only minimal eye candy 
Interesting theory. Why do you believe this? Do you have examples? Async functions have been used extensively in other languages and I can't recall hearing anyone claim they'd rather use CPS or something instead.
&gt; do fun projects in your spare time And if you're feeling like you're aren't learning algorithms or whatnot, but also feel stuck in the front-end, focus these fun projects on the bleeding edge web graphic stuff. Lots of algorithmic thinking required there, but you can shake off some of the burden learning the nuances of a new language. 
Global cyclomatic complexity is not impacted by generators, but I think you're suggesting that the generator function's complexity in isolation increases. Presumably you would also argue against if statements having blocks because it increases cyclomatic complexity as well. After all, ifs can only allow a single statement that's a function call to the consequent/alternate. Lower local cyclomatic complexity = better always! I'm not sure why you think generators and async functions are harder to test or are poor encapsulations. Why have these concerns not manifested with the myriad other implementations in other languages?
I actually find testing generators super easy (given, my exposure to them is via redux-saga). What about them is hard to test? Like you say, it's much like testing a bunch of separate functions. Very simple. example: const myGenerator = function*() { const secretConstant = 3; const passMeSomething = yield secretConstant; yield doubleFunc(passMeSomething); }; const generator = myGeneratorFunction(); let next = generator.next(); expect(next).to.equal(3); next = generator.next(2); expect(next.value).to.equal(4); next = generator.next(); expect(next.done).to.be.true; 
That's good to hear. You never know how good a school is til you hear a recommendation. Checking them out now. EDIT: 20 grand is way out of my price range, but HR look like they're well organized. Back to W3 schools, JSBin and Codepen for now. 
 &lt;button type="button" onClick="myFirstScript()"&gt;Button 1&lt;/button&gt; &lt;button type="button" onClick="mySecondScript()"&gt;Button 2&lt;/button&gt; Like this?
Seems like you guys just need to find another company to work for.
 document.getElementById("some-input").value = "Johnny Bravo";
I agree with this, besides [Jeffery Ways](https://laracasts.com/series/learning-vue-step-by-step) courses on it there isn't much. In my opinion Vue has a better web components implementation than react though, sometimes react goes too far with the "we know best" mentality. Like I'm never gonna write my css as js objects.
Actually, it removes more than just empty strings, which may/may not be useful depending on your situation... &gt; ['', false, null, undefined, 0, '0', 1, {}, []].filter(Boolean) ["0", 1, Object, Array[0]] How about `String`: &gt; ['', false, null, undefined, 0, '0', 1, {}, []].filter(String) [false, null, undefined, 0, "0", 1, Object] Might as well cover `Number` while we're at it: &gt; ['', false, null, undefined, 0, '0', 1, {}, []].filter(Number) [1] 
Can you offer an alternative? And no, making a set of functions is NOT an alternative since: 1. It's not maintainable. 2. You can't wrap a callback tree into `try/catch` 3. We already had it and it was terrible. Also, multiple returns don't increase complexity. There are functions that have exactly the same complexity: function (x) { if (x &gt; 0) { return 1; } return 2; } and function (x) { var result; if (x &gt; 0) { result = 1; } else { result = 2; } return result; } and are equally easy to test. Generators do have state and, consequently, not as simple as a single function exactly because one generator can be used instead of a bunch of callbacks.
I think you need an empty line before and after the indented code block.
Don't you have access to the i value inside the click listener? 
Interesting that the number 0 got filtered since 0 defaults to false. But it could still be useful if you understand the quirks. Also my use case for the Boolean filter was for path names like **/something/other/** which creates ["","something", "other", ""]
ember-concurrency.com is a great abstraction that relies on generators. By using yield you get to remove a lot of defensive code and imperative state management from your apps.
... even considering semantics, react is a framework. Get over it.
It looks like your JSON object was serialized to be a key of another JSON object. This is the data you're seeing on the backend? How is the backend getting this data (what language and framework)? How are you sending data from the frontend? It sounds like you're trying to send JSON but are sending it with the wrong content type.
i hate dependency bloat probably more than most, but i think NPM could be partially to blame here. unlike "git add/commit" which works as an explicit add-some-files, "npm publish" does an implicit "add-all-files". and the crazy thing is that there's no way to toggle an explicit publish mode. no way to only publish files that are in your git commit log. there is no ".npminclude" or anything like it. the default is to publish your whole damn working directory and pray that you haven't forgotten to add an entry in .gitignore or .npmignore or left some temp notes.txt file hanging around alongside your source. this default behavior and lack of a toggle is mind-boggling. i can't tell you how many times i've published temp WIP shit that should have never been made public. i have simply resorted to cloning into a clean dir and only run npm publish from that. it's rather pathetic that you cannot simply tell NPM to use your git log for any and all public files. /rant
how do i ignore absolutely *everything* besides what is commited in git? i cannot continuously maintain a `.ignore` file, because i make temp files all the time and there is not 1000 patterns that will match what and where they all might be. they are certainly not all in `/temp`. i just want npm to publish what is in my commit log on a specific branch. nothing more. it's not a complicated request yet i have found no way to do this.
Create a symlink'ed `.npmignore` to your `.gitignore`?
i do not want an explicit exclude, i need an explicit include (which my git log already is)
Oh yeah, I forgot about .sync. Coming from React I always did one-way-down so I never really used it before.
`.npmignore` like this? # Ignore everything * # Exclude the files you want !.npmignore !package.json # etc. And you could do that in a simple script: cat &lt;(echo '*') &lt;(git ls-files | sed 's/^/!/')
Sounds like you're just making your life harder than it should be.. You could write yourself a script that updates your `package.json` or `.npmignore` with only the files in/not in your git branch and then calls `npm publish` Expecting `npm` to support reading from `git` is a bit of a stretch though, as they'd then likely have to do the same for other VCs and open a can of worms when they already have documented and working methods of handling this specific to `npm`'s case that doesn't interfere with other tools you may be using for your development
if `.npmignore` is also published then it is a non-starter because i dont want my private exclude list to be public. populating `files` in `package.json` together with `.npmignore *` seems to be the least hacky way of getting this done. adding support for executing a couple git commands (not actually parsing the git index) seems like a trivial thing to add support for, equally trivial to the already-supported proprietary`.gitignore`. saying that adding support for git (arguably the most used and modern VCS in history) means adding support for all other VCS is probably not a fair assessment of reality.
I have written a guide to generators using examples and GIFs, http://gajus.com/blog/2/the-definitive-guide-to-the-javascript-generators.
I don't see the point, async/await is in stage 3 already and there isn't any pressing need to shake up the Promises paradigm for some syntactical sugar (especially that which hasn't caught on with developers particularly well, which I suspect is due to the same reasons fibers never caught on).
I'm surprised you don't need to install `babel-fieri-loader-packify` to get access to this. 
Thanks! Looks like the final piece of the puzzle. I just don't quite get why there's a need to transform the data at all. I have a normal object before sending it, and then at some point it's getting mangled and turned into this format. 
yeah, i was trying to keep it simple. 
Supporting what you ask for really doesn't make sense though. A lot of the time, the files you want to publish have zero relation to what's in git. For instance, please don't publish your test cases. If you're transpiling, please don't check built files into git. Edit: Also, `files` is the "explicit include" you would want. By default, `npm` uses `.gitignore` when no `.npmignore` file is found.
My job is to write my company's proprietary framework from the ground up with zero external dependencies. I have the exact opposite problem. Sometimes I just want to be brainless and use angular. 
God damn that's hilarious haha. It was actually added in a commit 4 days ago. Still brilliant as all hell. https://github.com/babel/babel/commit/f36d07d30334f86412a9d2771880cb566a82a9b6#diff-4f7a3a65a4c37780e71d32cd3adabe0c
Even a vomit stirrer will become bored with stirring the same amorphous mess of vomit every day. Dfferent coloured vomit buckets can help alleviate the boredom.
The point of this library is the mapping from the DTOs to their native data structure. JavaScript has native way to convert model objects to DTOs (unless you are willing to literally use your DTO as internal structure, which means very tight coupling between different parties and serious limitations on the internal model structure), this library tries to fill that gap
Form encoded data is a key/value type of format. I don't know Angular and I don't know your backend but maybe Angular is serializing your object as a string and using it as the key in the form data. Your backend may be automatically transforming this format into an object.
Found a solution, two actually. The one I came up with: Object.keys(obj).forEach(e=&gt;newObj = JSON.parse(e)); My "weird JSON" is just a key-value pair where the JSON I actually want is the key to a junk value. By putting this in my NodeJS backend I can work just the key, JSON-parsed, as a new object. The more canonical way, which I'll probably use in the end: http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/ Thanks those who advised :)
Straight concatenation is bad because your modules lose their scopes. Webpack/browserify/rollup concatenates all your js files into a single bundle but it does so by wrapping each file in their respective module formats. These module wrappers don't come without cost though. Rollup's module wrappers are the most performant of the 3 with browserify far in last. You'll notice these performance hits during the initial execution of your bundle. Look in chrome's timeline tab and you'll be able to see a ton of time spent in browserify's define/require module functions. That all being said, I see no reason why you couldn't configure your "concat" plugin to use a module bundling system to preserve their scopes.
I've written a lot of command line tools and have never needed to share code. It's all just too specific to the task at hand, and if it's not then that's when you use a third party library via npm. Don't really understand the use case here.
you have your html with meaningful ids for the inputs, like "name", "sellerID", etc, and in your javascript you are using things like: var name=document.getElementById("input1"); var sellerID=document.getElementById("input2"); var Summary=document.getElementById("input3"); var item=document.getElementById("input4"); var claim=document.getElementById("input5"); var businessdev=document.getElementById("input6"); There is no input elements with the IDs "input1", "input2", etc in your HTML
satire, fyi
in devtools, on the network tab, when you make the request, is the data proper or is the entire object listed as the key of another object, like you are seeing from your backend? If it looks right in devtools network tab, but looks wrong when you parse it via the backend, then the problem may be with how you are parsing the data on the backend. edit: I would highly advise you to actually fix this rather than just find a workaround.
wew lad
That's what I was thinking too - the way I understand create-react-app is that you can still npm install other dependencies and use them in your code base...
Incorrect. Vue just happens to work really well for binding to existing pages, but that doesn't mean it's not good when building with components. I strongly suggest you do more research on Vue's single file components.
so... like this? function MACNote() { var name=document.getElementById("name"); var sellerID=document.getElementById("sellerID"); var Summary=document.getElementById("Summary"); var item=document.getElementById("item"); var claim=document.getElementById("claim"); var businessdev=document.getElementById("businessdev");
Oh, you're talking about concatenating js modules, I gotcha.
no problem, if you ever find something similar, share it here so I can learn about it. 
The first example was as simple as you can get with generators. Start there and work your way forward. Read the first link he posted. If you don't understand something in there, then ask about that instead. Snapping at someone who is attempting to help you is very discourteous, and doesn't help anyone.
ReactJS touted itself as a library. React Native says it's a "framework for building native applications using React": https://facebook.github.io/react-native/ ... see the title. I think that originally React was 'just a library', but the re-organized things last year to split it in two (React + ReactDOM), to enable easily using the library part with other renders like ReactNative, React Canvas, etc. So at this point... is React + ReactDOM a framework or a library? React + Native Render is aparently a framework.
If this is literally true then you are either 0 years old or very weird.
&gt; My frontend is Angular. There's your problem.
Fuck you
Thanks for this! It also seems yield has the ability to assign the parameters to variables according to the video I linked...or evaluate to the value passed as a parameter I guess you would say. Is that correct?
Hi, I think I've had the same feeling for the last 15 years. Although I've had to learn framework X and library Y for work, I've also learned stuff I was interested with, which was usually not related to work that way I got to learn other languages, tools or environments. Sometimes you get really lucky and what you do in your daily job is also what you're really into, but otherwise you might have more fun learning stuff you want to, at least that's been my experience. At the end I can't complain, I like programming and get paid to do it, that's already lots considering the current employment market ... Now concerning Angular ... In general, we've all used it in different ways, and given how the JS development landscape changes, we've also changed our way of using Angular overtime (e.x. in the "early" Angular days, no one was using browserify nor webpack and now it's kind of the standard). I've worked with several teams and projects in different companies and the way I see it is that people with different experiences and way of doing things has been rather a positive experience: at the end you can always agree on common principles, concepts and ideas, the more you'll know about something the better, for good or bad. I'm sure you'll be able to use your previous knowledge or experience in your next job. 
definitely the latter
Every front end interview: Insane algorithm problems. First project: Build me an email template.
I love Vue, and I'm looking forward to the updates. I'm not a web developer, but rather a scientist who just wants to make simple monitoring (and occasionally control) web apps that update in real time. Vue's template-like approach is really easy to grasp, and furthermore, I can do everything I need to do without any special tooling. This makes it much friendlier than other options for people like me who don't want to spend so much time learning about the latest bundler. 
Can't answer for OP but I can guess he thinks it's important to gain control over your dependencies early on. As soon as you start adding something like Redux, you don't want to be beholden to someone else's versioning decisions. 
Hey! Thank you for the advice! Do these also exclude the textNodes that only have "/n"? Or are those not considered to be empty?
Look at you Mr. Buzzkill
 const value = yield promise; const stuff = doSomething(value); const changedStuff = changeStuff(stuff); This doesn't make any sense to me. Won't `value` be undefined, unless you're passing some argument inside your `.next()` calls? Yielding a promise will just return `{value: Promise, done: false}`, so you'd need to do something weird like `.next().value.then(resolveHandler)` which feels like creating a completely new problem. I'm not being pedantic but I have yet to see a readable/helpful example of generators actually helping out with async. 
Modern browsers: for(let i = 1; i &lt;= 4; i++) { document.querySelector('#elButton' + i).addEventListener('click', () =&gt; document.querySelector('#audio' + i).play() ); } Old browsers: for(var i = 1; i &lt;= 4; i++) { (function(k) { document.querySelector('#elButton' + i).addEventListener('click', function() { document.querySelector('#audio' + k).play(); }); })(i); }
Hmmm, I'm using `bluebird` and `co`. Bluebird for promises and promisify-ing and `co` for the coroutine part. Maybe I'll just use bluebird.
Thanks for the heads-up on the url-shortener, I've added it to the prohibited domains list.
yes, you're right. the second option would have to be run in a [coroutine](https://www.npmjs.com/package/co) function to get value to not be a promise, but you still need an outside library to handle what generators should do natively the good news is the folks at ecmascript made a proposal to do exactly what that function (plus co) does without needing anything else by adding async/await as keywords. consider the following two examples co(function* (promise) { const value = yield promise; const stuff = doSomething(value); const changedStuff = changeStuff(stuff); })); async function(promise) { const value = await promise; const stuff = doSomething(value); const changedStuff = changeStuff(stuff); } 
As said ASP.Net has been huge eversince before Node. And to be honest PHP has better chances than ASP.Net especially with 7.0 and upcoming updates/upgrades
You forgot about the polyfill you'll also need.
After moving from ASP.Net to Javascript I can't think of anything that wouldn't make me go back, hopefully the Node.js workflow is influencing newer versions of ASP.Net to make it easier for those that have to use it.
This is definitely preferable to the solution above. Recursion is not an acceptable solution for operations either mutating or constructing n-length Arrays. The threat of maximum recursion depth is always looming.
[removed]
pro tip: `missing )` `unexpected string` `unexpected keyword` and `unexpected end of input` mean your missing a `( ) ; } {` somewhere. and! the best place to look first is the line above where the error message is. check that line for a missing `; } { ( )`first to fix most problems! 
W E L C O M E T O F L A V O R T O W N 
&gt; If you own zyx.com (the site in the first tab) or have write access to that site, do your message monitoring in the existing message event handler function. @jcunews1, i have access for zyx.com. But i can't get your point "do your message monitoring in the existing message event handler" . Can you please provide some example or more light on this? 
Yes. When you `yield` a value, it will be "returned" back as the result of `generator.next()`. When you pass in a value to `generator.next()` it will be "returned" to the most recent `yield`. One additional catch is that when you `yield` a value, it will be wrapped up in an object like this: { value: "yourYieldedValue", done: false } The `done` value of that object will signify whether or not we've reached the end of the body of `generatorFunction`, or if we still have more code to execute. So to demonstrate passing values back and forth: function* generatorFunction(arg1) { console.log('Starting...'); console.log(arg1); var fromNext1 = yield "fromYield1"; console.log(fromNext1); var fromNext2 = yield "fromYield2"; console.log(fromNext2); return "fromReturn"; } var generator = generatorFunction("fromArg1"); console.log('Made generator'); var fromYield1 = generator.next('!!! this value "disappears" !!!'); console.log(fromYield1); var fromYield2 = generator.next("fromNext1"); console.log(fromYield2); var fromReturn = generator.next("fromNext2"); console.log(fromReturn); Three additional things to note. 1. You can pass arguments into a generator function when you execute it. See `arg1`. 2. You can return values from a generator function, as well as yielding them. See `fromReturn`, and take note of the value of `done` in the corresponding object wrapper. 3. The first value you pass to `generator.next()` is more-or-less ignored (as far as I can tell, maybe someone can correct me on that), and the first call to `next()` is just to kick the process off. The output of this application will be as follows: Starting application... Made generator Starting generator function body... fromArg1 { value: 'fromYield1', done: false } fromNext1 { value: 'fromYield2', done: false } fromNext2 { value: 'fromReturn', done: true } Done! So when you call `yield` followed by a value, that is passed as the result of the `generator.next()` expression. When you pass a value into `generator.next(val)`, that is passed as the result of the `yield` expression. It basically allows you to pass values back and forth. Also note that calling `generator.next()` does *not* have to be called synchronously. You can throw in some callbacks, timeouts, promises, etc, and the `generatorFunction` will still know how to pick back up where it left off. That's why everyone else is posting about using promises to write asynchronous code that looks synchronous.
sure np
According to the spec, the order of object keys is left up to the browser's implementation. If order is important, you should be using an array as the spec guarantees order for them. The reason why the browser has chosen to re-order some of the keys has to do with improving look-up times. I don't know all the specifics, but I'd imagine numeric keys get a boost from being in order, whereas non-numeric keys probably aren't worthwhile since they will have to be hashed internally anyway. This was a major problem for devs when it first started coming into practice as far back as 6-7 years ago. JSON.parse would mess up the order of keys returned from the server, ruining any server-side sorting done by the database. The solution, as stated before, is to use arrays (which make more sense semantically anyway).
i dont think so but maybe... the html looks really generic and from reading the code my guess is it should work! if its just one label per textbox then yea. it looks like some group rendered with those `card_element_xxx` so maybe just maybe you may need more text boxes (one per each), im not sure. or write a `generate_label()` func if it is one label per textbox.
I ejected because I didn't want any dep abstractions. Personal preference.
&gt; it returns them in the order they were initiated on the object (as you'd expect) I would never expect that. A hash table does not maintain order. 
Also does someone happen to know how to reliably get the property keys in the correct order they were placed in the object? I need to loop through objects in a specifically constructed json in the same order as they are placed there and perform some tasks (even JSON.stringify sorts the keys the sameway) And I really don't want to read the json files as text files and parse them manually to get the ordering...
Yep, that's what linked hash maps are good for.
If order is important, you should be using an array. Just about any language's implementation of hashmaps do not reliably maintain order. The only exception I know of is PHP's associative arrays. Ironically, this makes PHP the "quirky" one, not JS.
x-posting this from /r/gamedev, because I think this might be the better place for this. I don't plan to enter. My game won't be done in time nor would it be below 13 kb.
This definitely sounds interesting, thanks for sharing!
Thanks, this worked!
Im making tje effort i can. I just keep making silly mistakes i dont know how to fix =| and i forgot to put the error. That is my fault. Here are the answers to your question. P.s. i know basically a few things about javascript, but i try to pick up as much as i can. Answer to question 1. The code is a blocklauncher mod for minecraft pe that adds items, weapons, armor, and a crafting recipe. Answer to question 2. The answer is in question 1. Answer to question 3. Here is the error message. I realized i forgot semicolons but i do not onow where the ( goes. Here is the error. function setTile(inf,min,inf,200); org.mozilla.javascript.EvaluatorException: missing formal parameter (ultimatecraft_20160809.js#137) at org.mozilla.javascript.DefaultErrorReporter.runtimeError(Unknown Source) at org.mozilla.javascript.DefaultErrorReporter.error(Unknown Source) at org.mozilla.javascript.Parser.addError(Unknown Source) at org.mozilla.javascript.Parser.reportError(Unknown Source) at org.mozilla.javascript.Parser.reportError(Unknown Source) at org.mozilla.javascript.Parser.mustMatchToken(Unknown Source) at org.mozilla.javascript.Parser.mustMatchToken(Unknown Source) at org.mozilla.javascript.Parser.parseFunctionParams(Unknown Source) at org.mozilla.javascript.Parser.function(Unknown Source) at org.mozilla.javascript.Parser.parse(Unknown Source) at org.mozilla.javascript.Parser.parse(Unknown Source) at org.mozilla.javascript.Context.compileImpl(Unknown Source) at org.mozilla.javascript.Context.compileReader(Unknown Source) at net.zhuoweizhang.mcpelauncher.ScriptManager$ParseThread.run(ScriptManager.java:191) at java.lang.Thread.run(Thread.java:818) Sorry to bother you again. But thanks for your help and advice. It is greatly apreciated.
Hola! It's an interesting project that will be useful for people still using Promises, although this problem has already been solved with the Observer pattern ([RX](https://github.com/Reactive-Extensions/RxJS), [Kefir](https://rpominov.github.io/kefir/), [Bacon](https://baconjs.github.io/), etc). If you haven't heard about it [this will (probably) blow your mind](https://www.youtube.com/watch?v=XRYN2xt11Ek).
Thats a funny script. Thanks for the tips.
 A for-fun project I threw together in a few days - https://github.com/tannermeans/tabgen. My buddies and I take a lot of screenshots for other teams at work. We were thinking it would be fun to always seem like we are looking at the most ridiculous stuff in background browser tabs in the screenshots. Hence tabgen. Not incredible code, but I was going for speed over anything else. Live here: http://tabgen.surge.sh Side note: http://surge.sh is awesome!
If you want something ordered, use a list. Also, JSON spec specifically calls out that properties in JSON objects are unordered. from json.org: &gt; An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace). Each name is followed by : (colon) and the name/value pairs are separated by , (comma). Use an array.
is that a typo or does ES6 accept parameters without parentheses? 
I found Vue has more involved (different too) syntax, and a much larger API. React doesn't have much beyond a .createClass() and the component lifecycle methods. As for component nesting, there was no clear explanation of how nesting of child components and binding top-level parent data to such children works (i.e. parent state data being passed as props to children are meant to be consumed with :prop for binding). &lt;ul class="list-group"&gt; &lt;template v-for="lib in libs"&gt; &lt;lib-li :lname="lib.name" :version="lib.version" :github-url="lib.githubURL" :url="lib.url" :type="lib.type"&gt;&lt;/lib-li&gt; &lt;/template&gt; &lt;/ul&gt; :prop with the access to variable within quotes was something thoroughly confusing for me. (Edit: The sample code is provided by a friend who works with Vue. lib-li is a custom component nested inside another custom component). --- Also, Vue.extend, Vue.component, new Vue (on some dom element), new Vue() with dynamic components and all the caveats around template parsing - Not sure how someone claims that they found Vue *much easier* than React. Fits their mental model better? Sure. Easier? *That claim is doubtful.*
where I live, their is literally a ratio of 100:1 or higher for .Net:javascript in regards to gainful employment. Some regions are just straight up .Net through and through. Particularly I find that organizations who's main product is something other than a web app, but who have multiple web apps, and are what one would consider an Enterprise company, tend to love the .Net platform.
Ok I like the idea of promise.allignorefail or whatever but you can just use promise.all with wrapping calls with .catch or use one of the existing modules like https://github.com/simongong/precise-promise-all. For doing things in series I would use a for loop with await.
wow... you might have better luck in: /r/forhire or /r/freelance 
You get string concatenation, because your "numbers" are actually strings. Turn them into numbers and it will do addition. &gt; var a = '2' undefined &gt; var b = '2' undefined &gt; a + b "22" &gt; parseInt(a) + parseInt(b) 4 &gt; +a + +b 4
thanks!
Well-known data structures and algorithms do cover quite a lot. And as you already noticed, there are also a bunch of product features which are extremely common. The truly unique part is the business logic which often isn't that complex. There will be always some new stuff, but you can heavily rely on your experience and the libraries/frameworks you're familiar with. It heavily depends on your projects, though. Actual applications can require quite a lot of code.
You are partially right about the concerns of doing this. In fact I had a massive processing where each item had to reach an API endpoint, and this API had a concurrent processing limit. But, before reach this step, the function to apply to each item could fail, because of the dependencies libs, but the whole process must not stop, the not processed items, or the failured ones where ignored, and in the next execution the program will try to process them again, each time the number of tries is incremented, and if the the count reach a certain limit, then another mechanism starts. The sequence you are talking about is a "cascade dependency", I would define a function to specify the cascade, for instance: const proc = item =&gt; { let itemCopy = Object.assign({}, item); return fetchDepA(item).then(depA =&gt; { itemCopy.depA = depA; return fetchDepB(item); }).then(depB =&gt;{ itemCopy.depB = depB; return itemCopy; }); }); Npfic has been written with massive items process in mind, not for single items, npfic would take the function to apply to each item of an array, and this function could be a cascade sequence or whatever (that returns a Promise), and will return a Promise that will resolve a an array with the same length as the given one, with the result of the applied function, or an `{error}` if the function application fails for whatever reason, so you can just continue with the results of the processed ones, and do another thing for the ones that failed. I think is that a `catch` is a very abrupt way to handle an error which must be used just in the lowest possible level of the application, but in the upper levels It could be filtered with the proper data structures. I don't know if have exposed my point of view, and of course, I'm aware of the project scope application. Perhaps I chose a bad name and description for the project because I always had the huge array items to be processed in mind. ******* Muchas gracias por la correci√≥n de los n√∫meros pares y el comentario, has andado bastante fino/-a en tus deducciones =D 
&gt; you can just use promise.all with wrapping calls with .catch I don't take what you mean with that. I didn't know about that module and it seems pretty similar to npfic. I've read its README and, takes some ideas of the ones I've applied. Maybe I could take some ideas from the author, or even to work with him/her. Thank you for discover me that module. And you are rigth that would be much easier to use a for loop with await, but it is not standart yet, so maybe with ES8. The idea with npfic was to use only native available tools with no third party deps. 
The problem with the observer pattern is that it is not standart yet, so you need dependencies like the wonderful libs you have referenced. But you are rigth and the observer pattern will deprecate the patterns we are using now. Sounds amazing anyway. (Thank you for the video, I watched around a year ago another video from Jaffar Husain talking about ES7, and in that video he introduced the observers too, but the audio was awful)
This is plainly wrong unless you can show this behavior defined in the documentation. Some JS engines may choose do this way, others don't. It's your fault if you wasted time with some quirky behavior
&gt; Sounds unfair to judge easiness just by glancing over the API without having actually used it at all How did you figure I merely "glanced" over the API and didn't "actually use it at all"? &gt; arguing over what you just looked up in the past hour is kinda pointless Again, where did you figure that all that I mentioned was something I "looked up in the past hour"? &gt; "there are companies with new hires comitting Vue code on their first day" Where did this come from, and why? &gt; It's totally ok to have differing opinions, but do realize that API easiness can be quite subjective depending on your background and preference. So what are we even arguing about? I don't want to sound too assuming and let this devolve into a mud slinging fest, but are you upset that someone mentioned why they ended up liking a different framework more, and the reasoning was not good enough through your "subjective" lens? I don't know if you can see some subtle contradictions in what you state as principles.
&gt;Correct me if I'm wrong, but your main concern when doing this was probably some sort of massive processing where you didn't want to bring down the resource (some server or something) by firing up too many concurrent requests. Is this correct? &gt; In fact I had a massive processing where each item had to reach an API endpoint, and this API had a concurrent processing limit. This conversation is beyond me, but I know that Elixir/Phoenix is a functional language/framework that is very good with fault tolerance, concurrency and large scale API trafiic. http://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections It works well with Node and all versions of JS: https://medium.com/@diamondgfx/phoenix-v1-1-2-and-react-js-3dbd195a880a#.gpz6ywbyz There are various Elixir to JS transpilers available: https://github.com/bryanjos/elixirscript Here's someone who ditched React and migrated to Phoenix: https://robots.thoughtbot.com/how-we-replaced-react-with-phoenix * For my projects, I want to write a mix of Elixir and Functional JS. That last link shows it's relatively easy to switch between the languages. 
I know it's"meant" to work like this, but it was just my intuition that they'd stay ordered since I never had any evidence show otherwise. Although I have read alot of js documentation this is something I missed. I didn't make this thread to complain that it's a bug, just as a psa since I wasted time on it I thought some others might as well come upon the same problem and knowing how it works and knowing not to rely on the object key ordering is good.
What are the main differences for you between the .Net stack for web development and the Javascript open source stack ? (js, ang or react, node) etc Whats the version of asp.net you used last ?
Pretty cool! You should check out http://highlandjs.org/. It has some excellent flow control. 
Im on the internet! Im allowed to be helped in an agressive manner, its a human instinct to be agressive. I do it all the time. I do need a better editor, im currently looking into that and i think i found a few i like. When i am away from home i sometimes work from my phone which is not ideal, but when i have stuff figured out i like to work on it asap. Its just me. Again, i dont know a lot about javascript, so i try to learn as much as possible from whatever scource i can find. Thank you anyway! Im finding my way around these things. I guess. Sorry if i was not clear in this. I was writing this from my phone. =)
&gt; So apparently when you call Object.keys it returns them in the order they were initiated on the object (as you'd expect) EXCEPT whet there are numbers as a key, then it puts all the numbers first in numerical order The sentence above sounds like you are convinced this is some default behavior that will happen when you have numeric keys. If you try with negative numbers, you will see that it won't work anyways, it is more likely an optimization for array indices than a JS quirk here. 
It definitely is not unprofessional. Jokes and easter eggs like this are an entrenched part of programmer culture.
Ive used it in personal projects. We stripped it out of the use at my work due to scale complications but I doubt any personal projects come near to the amount of that data that was needed for my work project. We pretty much saw issues with about ~200k datoms so think 200k attr-value pairs. So if you have an average of 10 attributes per entity that would be 20k unique entities with minimum visible performance issues. I think the best use-case for Datascript is when you can store your entire application state without blowing browser memory. That way you can use Datascript as the funnel point for your database fetches or subscription based updates. Note: This metric was from about 1 yr ago I'm not quite sure what its upper-bound is now.
They will also exclude text nodes with new lines. They only return actual DOM nodes.
True, but it is slower in perf tests (http://phrogz.net/js/string_to_number.html). Also it will return NaN if the entire string is not a number, whereas I think parseInt() will stop at the first nonnumeric character and return what it found.
This is a framework agnostic question. It all depends on what your app needs are -- more client side stuff vs more server side stuff (or both). Every client side framework, whether React, Angular 1 or 2, Vue etc etc etc are tools to do more complicated stuff on the client with less work. They don't necessitate that you build your entire app in a certain way. You can definitely use Angular 2 with the structure you're used to. It's probably more common to see SPA, JWT with Angular 2 because it allows you to do everything on the client with less work. The question instead is... "is it worth it"? And the answer simply comes down to what your front UX requires. 
https://www.youtube.com/watch?v=NvWTnIoQZj4 You can just listen long enough to hear his first sentence. Don't try to build a career off of one language. It's something people do when they are either 1) lazy, or 2) in the wrong profession.
&gt; ... Javascript ... (as you'd expect) ... Never expect when dealing with JS. Always check.
At work, yes, I do stupid stuff over and over. Largely because it is a giant monolithic old school Java application. They run UI unit tests with Java, build UI artifacts with Java... oh the pain. When I mention that there is a universal standard that is 20 years old with superior support and executes more than 20x faster (the DOM) they look at me with confusion. Mind numbing painful. In the open source software that I write and maintain I am constantly solving new and rewarding problems. Sometimes the new problems can require repetitive tedious effort to get right, but the end-state is worth the boring work that went in. Out of a lack of features I do find that occasionally I am doing mundane manual things over and over until I refactor a superior architecture or write new automation. Usually this requires putting in something like 50x normal effort to achieve automation for what is normally a simple manual task, but the time spent on those manual tasks adds up and there is increased risk with manual effort.
This is a project I did to scratch my own itch. I have this problem of finishing an article I start reading. I can not abandon it however bad it is, don't ask me why. So I developed this extension for chrome where it tells you how much time it would take you to read an article. Sounds odd but for me Knowing the time investment I have to put in upfront would restrain me from mindlessly reading random articles. Works best on article based content. its opensource and you can contribute here, https://github.com/usergit/read-time link to the extension: https://chrome.google.com/webstore/detail/read-time/nccohhimobidpghgpnejnbkpoichbbml
Get better with Javascript before tackling Node.js or any of the frameworks. It will make your life much easier.
I find its best to come up with a project you would like to build, and learn how to build it. Though, there are some great video's out there, but nothing beats actually building something.
So that depends. You said you have "some" experience with Java. Do you have a college background in computer science/CIS? Any of those? Are you self taught Java?
Sizzle (the CSS selector engine that underlies jQuery) will rely on document.querySelectorAll when it is available. And it seems that document.querySelectorAll is quite forgiving of missing closing brackets (and in different ways too): http://stackoverflow.com/questions/29120822/how-why-is-attribute-string-a-valid-queryselector-js-bug
Im no pro, I have taken a few computer science classes with java
Here is how you should think about it: *keep it simple*. Avoid patterns, shortcuts, anything sloppy, anything that seems to cut corners Consider the language like this: * core vanilla JavaScript * Node.js api and asynchronous programming * DOM and query strings (the browser's API) Concentrate on learning vanilla JavaScript without getting into the APIs too much. The quickest way to get off an running is with Node. Just save JavaScript code into a file and run it with something like: `node myfile.js` Some subjects to focus on: * references and functions. Learn how references are declared and accessed. * Scope. This is the most important subject to this language. Learn to nest functions, accessing references across scope boundaries (closures), and why this is important and what it can get you. * Get comfortable with arrays, the array methods, and the string methods. These are really primitive things, but once you nail them you can do almost anything. Things to avoid: * Inheritance is optional in this language. As a result, I suggest avoiding the subject entirely. It means additional code, a bunch of conventions and abstractions and other unnecessary extravagances. You are probably going to have to learn this later to untangle somebody's spaghetti code mess, but until then you can save time avoiding unnecessary extra work. * Holy wars. Eventually you will encounter stupidity over how code should be indented, eye candy style conventions, whether or not you should use semicolons. All these things are stupid. A good beautifier can instantly solve all those conditions for you (and sometimes even fix broken code). * code patterns, generators, factories, and other copy/paste stupidity. When you encounter a problem demanding a solution solve it directly instead of relying upon convention to simply do it for you. Your users will love you more. Don't bother immediately jumping into Node's APIs. You will need to know this eventually, but you can put this off for a long time. If you suck with vanilla JavaScript learning Node's api will be really hard. Also, don't immediately jump into learning the DOM. Learning the DOM will only take a good reference and about 2 hours of practice to achieve mastery, but its easier once you are somewhat comfortable with how the language works. Many people will tell you that you don't need to learn the DOM. When I was first getting into programming I heard all kinds of nonsense about what I did or did not need to learn. If the knowledge is a universal standard, a foundational technology on which almost everything else is built upon, and still relied upon you almost certainly need to know it. I also learned that people would tell me not to learn certain things because they were shit developers who were cutting corners and couldn't be bothered to learn these things themselves. When you learn important stuff early you are in a better position later to make quick decisions about capabilities and what doesn't work well. Here is a DOM reference that I wrote when are ready to jump into it: http://prettydiff.com/guide/unrelated_dom.xhtml
I am also learning JavaScript atm and can really recommend: http://eloquentjavascript.net/ Its a great book with many examples and you can read it online for free. On top of that I am doing some JavaScript exercises with codeacademy and freecodecamp which are also helpful. (you could test your HTML and CSS with a few exercises there too). For practise codeacedemy and freecodecamp are great but to really understand the problems the book has helped the most for me.
I liked learning through FCC (free code camp). It's pretty hands on but emphasizes projects which is nice. Later on I'd recommend checking out Javascript: The Good Parts. It's a great book. 
express.js and socket.io would be a good start. youtube has good tutorials, two of my favs: `street fighter clone in ruby` and `tictac toe in js`, just search t he language and app name and you get a good tutorial: ex `flappy bird javascript clone`. could start with a game first, to make a multiplayer game you need to learn: rendering, networking server/client, database data storage, input handling, sound programming, file system loading resoures, and sometimes anti cheat tech, encryption. theres not much else!
Thanks, Ill read that book!
Thanks for the input! 
Thanks for your input! ill start off with core JS then.
Since you are likely going to want to get going with the more modern aspects of JS definitely check out ES6 resources. While you will certainly want to know some of the old code you will be seeing, by the time you really hit your stride you are likely going to want to be coding in ES6+ a lot. Babel should allow you to get ES6 syntax into your projects. Totally worth the effort in getting things setup.
&gt;you obviously haven't worked with it in any real capacity &gt;you don't even see the equivalency &gt;Either that or you are just really dumb, which I believe is not the case. Wow, I had a feeling that name-calling, subtle passive-aggressive statements typical of millennials, and sheer egoistical stupidity was lurking just around the corner, and boy was I right. Butt-hurt parent when their child is criticized, eh? I was going to justify a few points, regarding whether or not I've worked with Vue and whether or not I'm capable of seeing equivalencies, but seeing how rude you are and how far your head is stuck up your posterior regarding the virtues of Vue (onboarding, commercial success etc.), I'm pretty sure I don't want to handle the bitterness you'd spew out. And your pretense on certain agreements - you don't have to make yourself seem so noble, while covertly trying to have the last word in the argument. You know this devolved thread isn't about what we agree or disagree on - It's simply your hurt ego in action, which is all too common amongst folks who cannot handle any form of criticism, especially when the criticism openly favors a competing option wildly more successful and better adopted. Rant on, and hurl some more remarks regarding my intellect, or how Vue is being taught in primary schools. I'm sure people will find it worthwhile. Here's your opportunity now to have the last word, use it! (Deliberate over the insults and the passive-aggression well).
Oh, i see , i will check it. Thanks!
Node is a JS runtime. Browsers are another. Starting with Node command line tools is perfectly fine. It's very similar to starting with command line tools with any other language.
&gt; everything in JS is an object Except for primitives. http://www.ecma-international.org/ecma-262/6.0/index.html#sec-primitive-value *member of one of the types Undefined, Null, Boolean, Number, Symbol, or String* They only look like objects, because they are autoboxed when a method is used. E.g. `5..toString()` is actually `(new Number(5)).toString()`.
&gt; glimps Lol
Try /r/freelance or /r/hiring, or /r/learnjavascript, you might have better luck.
the script is there it even tells you how to edit it...It says to download the script as Html and then edit i dont know how to do that
Neutron was probably taken for one of the other Electron starter packs.
&gt; I would never expect that. For reference (in descending order of my subjectively perceived usefulness as a quick read): - http://www.2ality.com/2015/10/property-traversal-order-es6.html - http://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order - https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys &gt; The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).
Is your server truly being run locally, or is it an external service?
No one is going to work for you for free, go away.
 var word = "abcdef" function open(word, url) { window.open(url, "_blank") } open(‚Äúhttp://www.forvo.com/word/‚Äù + word + ‚Äú/#de‚Äù); open(‚Äúhttp://www.dict.cc/?s=‚Äù + word); open(‚Äúhttp://translate.google.com/translate?sl=de&amp;tl=en&amp;u=http%3A%2F%2Fde.thefreedictionary.com%2F‚Äù + word); 
it looks to me like the first one is an assignment statement, single =, and the second one is a boolean expression. the first one evals to "mySecondPara" and the second one evals to either true or false. 
I edited the code, basically instead of "click" I want keyboard event like keypress/keyup. It seems that there is an issue with canvas focus, but I am not sure. You can check console on codepen and see that handleEvent is there so it should be called on keypress but it is not. I will try to do event listener on document or a body and see if it works. @Edit: document.body is working fine on keypress so it must be canvas focus.
it's a local one
Wouldn't use it just because it's so obscure. Instead of adding a comment with a link to the docs which explain wtf is going on, I'd rather write it in a way where that isn't necessary. It's just too much hassle for everyone involved.
&gt; It seems that there is an issue with canvas focus canvas.tabIndex = -1 Then it's focusable and will receive keyboard events.
Hey, I just found this answer on Stack Overflow and it seems to be working, do you know which browser support this? Thanks for the answer.
Yea, good point. Just adding it to the window is a bit more convenient. There won't be a need to focus the canvas first.
All. tabIndex is old stuff.
Hey, could you link me to a place where I can read about handleEvent method? I was trying to find this inside Object prototype but couldn't find it. I am googling this but there isn't much info about this so far.
React is more popular because it is backed by fb and has been quite stable and easier to migrate in recent times. Angular 1 was **the** most popular js framework at one time, and would have remained the de facto js framework if it were not for [angular 2](https://en.wikipedia.org/wiki/Osborne_effect)
 Whats more popular and why apples or oranges ?
I'm obviously annoyed by how you ignored the valid technical counter arguments in my first response and instead chose to focus on how you felt offended and started to drag the conversation into a non-technical direction, so I played along. Now you are again avoiding all the logical/technical parts of the conversation and throwing around direct character attacks - honestly I'm not sure who is the butt-hurt one. When you fail at winning on logic, you attack the character of the opponent, how childish they are, and completely making this a mud-slinging contest when you were the first one declaring you didn't intend to do so. Classy.
I totally agree with you! And yes when you feel the need of the command you look it up :) As these are only "tips and tricks" it'll beneficially to those who are somewhat familiar with git. Also there are a lot of common basic git commands too! Also you can [configure](https://github.com/nirajpandkar/git-tip#install) so as to greet yourself with a git-tip every time you open a new terminal! This will allow you to **be in touch** with all the git commands and also **learn some new ones** if you didn't know them already. 
If you could point out where the insult really was, I'd appreciate that. Premise: a developer with decent intelligence that has used both Vue and React in real capacity should be able to comprehend that the := binding syntax does the same thing as ={} in JSX. Fact: @instatis failed to see that ("thoroughly confusing" was his own words) Conclusion: either he has not used Vue to build anything real, or that he does not possess decent intelligence to comprehend the fact. I believe he is a smart person, so the only logical conclusion is that he has not used Vue to build anything real. One possible counter argument is that even a developer with decent intelligence may fail to see the similarity of := and ={}, which I simply don't think can be possibly true. Now, if you look at my first response to him, 90% of the comment was focused on providing logical/technical arguments in response to his statements - however he chose to capitalize on some of the non-technical assumptions I made (which, I admit was unnecessarily passive-aggressive, and for that I apologize) while completely ignoring the technical parts. Factually, he was the one who steered the whole conversation into the wrong direction while playing the victim, and I was the one trying to stay on course.
Oh yeah? Those bytes really important on your disk?
WebCL is supposed to take advantage of the GPU...
Would be much more interesting if it did named exports. I have literally never wanted to export an array of modules as an index. Two problems: 1. How am I supposed to know which modules are at which position? const [a, c] = require('./'); 2. What if module `b` gets added to a folder that contains `a` and `c`? If I rerun indexr, I'll have code that should point at `c` (position 1 in the old array) and now points at `b` (position 1 in the new array). This is very bad. The index I really want lets me do this: import { a, c, } from './'; Though even then, I'd want to test my build process to verify that it properly tree-shakes imported-but-unused modules. And since imports can have side-effects, I'm not sure that could always work.
I'll second Crockford's 'Javascript: The Good Parts' as a great intro book. Skip the weird train-track logic diagrams at the beginning of the book and you'll be good to go. 'Eloquent Javascript' and 'You Don't Know JS' are great books too, but they cover some more advanced topics that a newb to Javascript might be better tackling after really getting a strong grip on the fundamentals.
Yeah right, direct character attacks. I don't know if you have memory issues, but I'm not the one name calling others as possibly dumb, just because someone might have a different opinion. To set the record straight, you're the one who made it personal, not me. It was you who took it in a non-technical direction, not me. I listed some code, talked about the syntax etc., and you immediately screamed "not fair", "you glanced it over", "obviously you didn't this and that", "really dumb"..... Classy, right? And then to turn it over to someone else, lol. *"No no it wasn't me it was you".* As for being butt-hurt, I don't have a dog in this fight, unlike you - I use and like React, but am not an evangelist by any means. The conflict of interest from your end is not something to be argued about - it's too obvious. I guess engaging with opinionated, self-promoting trolls, especially ones with overly inflated egos and acerbic tongues always result in the same thing - An epic waste of time and feeling of unnecessary bitterness.
It would be pretty easy to export named objects. I can add this as a feature if you like?
Javascript Code by: LSProgramming@yahoo.com How to edit the code in the Javascript version (to change the sites it searches) If you like the Javascript solution but want it to search a different site (or an additional site), then all you need to do is download one of the multisearch HTML files and edit the code in a text editor (I like Notepad++ on Windows, Textwrangler on Mac). The code is really easy to read and change. Here‚Äôs a sample one for German. Ignore all the code that isn‚Äôt in bold: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body style=‚Äùbackground-color:grey‚Äù&gt; &lt;p&gt;What German word would you like to multisearch? Type below, then press enter please.&lt;/p&gt; &lt;input type=‚Äùtext‚Äù id=‚Äùboxu‚Äù autofocus&gt; &lt;script&gt; document.getElementById(‚Äúboxu‚Äù).onkeydown = function(e) {searchy(e)}; function searchy(e) { if (e.which == 13) { var q = document.getElementById(‚Äúboxu‚Äù).value; window.open(‚Äúhttp://translate.google.com/translate?hl=en&amp;sl=de&amp;tl=en&amp;u=http%3A%2F%2Fwww.google.de%2Fsearch%3Fq%3D‚Äù + q + ‚Äú%26num%3D10%26hl%3Dde%26tbo%3Dd%26site%3Dimghp%26tbm%3Disch%26sout%3D1%26biw%3D1075%26bih%3D696‚Äù); window.open(‚Äúhttp://www.forvo.com/word/‚Äù + q + ‚Äú/#de‚Äù); window.open(‚Äúhttp://www.dict.cc/?s=‚Äù + q); window.open(‚Äúhttp://translate.google.com/translate?sl=de&amp;tl=en&amp;u=http%3A%2F%2Fde.thefreedictionary.com%2F‚Äù + q); document.getElementById(‚Äúboxu‚Äù).value = ‚Äú‚Äù; } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Basically, all you need to care about are those window.open parts. In the example with ‚Äúwindow.open(‚Äúhttp://www.forvo.com/word/‚Äù + q + ‚Äú/#de‚Äù);‚Äú, it‚Äôs opening a new tab in your browser. The address it goes to is http://www.forvo.com/word/SOMETHING/#de, where SOMETHING is whatever you typed in when it asked you ‚ÄúWhat German word would you like to multisearch?‚Äù. So if you want that link to be a link to a German Wiktionary article on your word, then you‚Äôd go to an example page, and check out the URL. Here‚Äôs a page about rabbits (Hase): https://de.wiktionary.org/wiki/Hase ‚Äì you can see that the word is the very end of the URL. So the new code you want would be this: window.open(‚Äúhttps://de.wiktionary.org/wiki/‚Äù + q); If you wanted that link to be a Google Translated version of the same link, you do the same process, finding an example page, figuring out where in the URL you can see your search word, and then replacing it with ‚Äúq‚Äú. So here‚Äôs our Rabbit page in Google Translate (I put Hase in bold): https://translate.google.com/translate?sl=de&amp;tl=en&amp;js=y&amp;prev=_t&amp;hl=en&amp;ie=UTF-8&amp;u=https%3A%2F%2Fde.wiktionary.org%2Fwiki%2FHase&amp;edit-text= And our code would be: window.open(‚Äúhttps://translate.google.com/translate?sl=de&amp;tl=en&amp;js=y&amp;prev=_t&amp;hl=en&amp;ie=UTF-8&amp;u=https%3A%2F%2Fde.wiktionary.org%2Fwiki%2F‚Äù + q + ‚Äú&amp;edit-text=‚Äù); If you want to search additional websites, just add more of those ‚Äúwindow.open‚Äù lines, instead of changing the ones that are there. Then save the file and open it in your browser. If you make an awesome script that would be helpful to other folks (rather than just a slightly changed website or two), please drop it in the comments so we can add it to our collection of links above!
Apparently redditors are saints and they don't make mistakes, so if anyone does, they'll make fun of them.
I think obscure might just be the perfect word for this usage. Op isn't doing it for readability or necessity. Op just thought it was a clever way to do it. Clever like this usually ends with code that is hard to understand and maintain. Seems we're all on the same page about it but if I saw this is a code review, I would ask for a rewrite. Besides the EventHandler obscurity, there is simply no reason to combine all three event handlers into one handleEvent public method on whatever object this is. It's not a good idea.
Oh dear, now that you asked, I'll tell you what I usually tell all *presumably* young people, e.g. junior devs in my office: "You're perfect sunshine, you did nothing wrong. You're the personification of integrity, impartiality, courtesy and rectitude, and it's the world which is wrong and has issues. Go on, be yourself!" There, does that clarify things for you? I hope so. I found nothing passive-aggressive or even remotely discourteous in your stunningly unbiased posts throughout this Reddit thread. Just ignore what that other scoundrel said: the one who had a different (read: *wrong*) point of view or whatever.
Cool stuff. How about updating the JSFiddle with a solved example and setting the flair to Solved =)
Well, I though it might be an slang word for something ... oh well.
PM-ed you. I don't want to mention any here and start another rage fight. Aren't you already enjoying the dissection of your intellect by a superior being who has *the-42-answer* all figured out? Lesson for you today is that you should never engage directly with framework authors, especially when they create Reddit threads for self promotion. Otherwise, you're an idiot (see what I did there?) ;)
Got some stuff that might help you. I maintain a big list of links to high-quality articles on React, Redux, and related topics, over at https://github.com/markerikson/react-redux-links . It's specifically intended to be a great starting point for anyone trying to learn the React ecosystem. In addition to the more React-related links, it also has articles on topics like the [Webpack](https://github.com/markerikson/react-redux-links/blob/master/webpack-tutorials.md) build tool, [ES6](https://github.com/markerikson/react-redux-links/blob/master/es6-features.md), [Functional Programming](https://github.com/markerikson/react-redux-links/blob/master/functional-programming.md), and even some very helpful articles that give [overviews of the modern JS development world](https://github.com/markerikson/react-redux-links/blob/master/basic-concepts.md) . Should be plenty of information there to help get you oriented.
I recently read your post of a lady humming and I heard the same thing outside my window at 3:00 AM. There was some humming at first but afterwards I started hearing whispering for two minutes.
Last I heard it was only working on Firefox 38, and [Nokia](https://github.com/toaarnio/webcl-firefox) was leading the charge on developing it. It worked fine when I tried it, but doesn't seem like it's in development anymore. 
Looks like it's being sent zipped as it starts with PK, and it looks like it has a file table at the end. 
I've tested it on Firefox and Chrome in linux. I don't have a mac to test with. I couldn't work out why it wasn't working for you, but I added buttons you can click to achieve the same result instead.
Talk about over engineering a problem... 
Did you lose someone close to you?
This is an example taken out of a book. It was written for teaching not to be the optimal solution. 
On my local host I refer to the js file containing the drawing code with the following line `script type="text/javascript" src="trialDrawing.js"&gt;&lt;/script&gt;` Here in JSFiddle I don't know how to add the javascript window's content in between div tags.
I work on enterprise business. Angular is by far more popular there. But I guess on startup scene React is more popular.
 let max = {} let size = MOUNTAINS.length let line = '' let output = '\n' for (let i = 0; i &lt; size; i++) { for (let k in MOUNTAINS[i]) { max[k] = Math.max(max[k] || 0, k.length, String(MOUNTAINS[i][k]).length) } } for (let th in max) { output += pad(th, max[th]) + ' ' line += pad('', max[th], '-') + ' ' } output += '\n' + line + '\n' for (let i = 0; i &lt; size; i++) { const tr = MOUNTAINS[i] for (let td in max) { output += tr.hasOwnProperty(td) ? pad(tr[td], max[td], ' ', typeof tr[td] === 'number') + ' ' : ' '.repeat(max[td] + 1) } output += '\n' } function pad (s, num, ch, dir) { const str = String(s) const p = (ch || ' ').repeat(num - str.length) return dir ? p + str : str + p }
All my controllers are factory functions which need deps passed to it before hey can be used by express. This lib assumes the controllers are not using dependency injection and will use global deps. This lib would be propagating a bad practice 
mc_hammerd, I appreciate your advice and I'll need to take a look over react
If you like Aurelia, have a look at the library I've been developing since 2014 - https://github.com/Munawwar/lithium-ui/wiki. It uses HTML-compatible templates, ES5 "classes" (believe it!), runs on node.js (check the tests) and more.
Relax, we've both called it a day, and I accept your apology so please accept mine as well. These things never tend to end well unless we choose to be the better versions of ourselves, and that takes some effort. No offence meant, and none taken. I'm hoping it's all good here onward. To finish, and to clarify once again, I admire Vue and the direction its headed in, and I continue to work with it on a daily basis (professional, and personal). Whatever was up there as criticism was basically from the early days, when I was struggling with Vue having stepped in from the React world. I guess I too should have made that perfectly clear, instead of making it seem like those criticisms were my "present" criticisms after having claimed to work with Vue for a substantial amount of time. Sorry about that ambiguity. Cheers, and keep up the great work with Vue. 24,000+ stars isn't a trivial feat - Vue has a pretty bright future ahead.
Thanks, I'm glad it can end like this :)
jQuery is definitely not going to cut it anymore. I highly suggest diving into the React ecosystem (not that it's super great necessarily but it's important nowadays). Edit: maybe do a tiny tiny example project in react for example, do it with bare minimum stuff, then use JSX and ES6, use Redux, add server side rendering to it and so on... that'll expose you to a ton of stuff (and comes with fatigue, take it real slow and easy) 
Thanks, I was reading this but still can't understand it perfectly :| I assume that every object has this method, either way it works for me :D
Isn't a function an object in js? I think lots of things are actually objects when you get down to it
If you have experience developing already I think you should dive right in and learn all the little js quirks as you go along, you don't really need to know HTML and CSS if you want to write node either since it's serverside js, if you can code you don't really need to learn HTML and CSS either since they're so straight forward, for CSS/Sass you'll just be learning the various properties.
You're not alone. It's the wild wild west. 
Actually they won't.
But that's not pure functional monadic programming! And you have the gall to call yourself a javascript programmer! 
Out of curiosity, what tasks are you attempting that are limited by WebGL?
That's not the point. It's the lack of respect for users by assuming they'd be happy for all of their projects and deployables to include the developers joke.
Honestly I think the good news is now JS frameworks are more Javascript focused which makes them easier to read. For me learning React took about 2 days, and Redux an hour which is amazing since they're frameworks that are built around the language. Angular on the other hand is a whole other issue, since they essential took anything that resembles Javascript and modified it to be syntactically different, and behave differently. The good news is people are dropping angular fast. 
I have a cousin who works as a sr. software engineer/manager and he told me the two biggest technology's are Ruby on Rails and the MEAN framework. 
I need to write a kernel which takes a dataset and writes to arbitrary positions in a buffer. That is not possible on WebGL.
I doubt NG1 would have remained the de facto JS framework since even prior to Angular2 people were leaving the framework. I mean there is a reason why they made the second one.
A good starting point (both for creating a development environment, deployment, and learning in general) is to set up MEAN stack (http://meanjs.org/) program on your development machine. It will help you to learn and deploy nosql database (mongodb), serving files (express), client-side with angularjs, and node. There are tons of samples and tutorials out there. I like [scotch.io](https://scotch.io) and youtube (good one here: [https://youtu.be/6Sbau-oE37w](https://youtu.be/6Sbau-oE37w)). This is not to say that you would stick with MEAN stack for future development. Once you can develop and deploy a MEAN stack application you will be much more comfortable exploring other frameworks and deciding which one you like best. Good luck!
That's the beauty about open source, don't like a direction the current maintainers are going? Fork it and maintain it in your own direction. Stop being so goddamn entitled. Edit:// https://hueniverse.com/2016/01/26/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time/
With react do I still have to use some library/framework like backbone to give structure to the code? My understanding is that react handles just the view. If true, what other frameworks do you suggest using with react to build a modern web app? Thanks!
I was trying to use Rollup, but I'm not opposed to using Webpack or Browesrify -- I just need to get one of them working. I'm trying to use the ES6 syntax, and right now i'm just trying to import certain files for side effects only (e.g., `import "file-name"`). I can't seem to get it to do any of it's import magic. Right now my build looks like this: rollup .rollup({ entry: 'js/main.js', plugins: [ babel({ presets: ['es2015'], exclude: 'node_modules/**' }) ] }) .then(function (bundle) { var result = bundle.generate({ format: 'es' }) fs.writeFileSync('_build/main.js', result.code, 'utf-8') }) Where my `main.js` file is just some `import` declarations, and the import files are exporting a default function. 
Thanks! I'll definitely give it a read, I'm sure there's a bunch of stuff I'm not taking advantage of.
Wow very fast feature add!
https://www.npmjs.com/package/create-index Does this.
I‚Äôd keep it as simple as possible. Tools and configuration mechanisms change all the time, but the good thing about ES6 modules is that it is easy to migrate code bases should it be necessary.
Yeah, plus the only argument he puts forward for Aurelia is that the template is stored in an .html file instead of written in JSX. I'm sitting here thinking _who cares_.
It's an absolute gong show
Any time you post anything in a programming forum, someone will always post out how you actually can do something using some library. Vue is fine and obviously you can apply the same patterns - I could apply those patterns using jQuery events if I really felt like it. I was simply pointing out which library you'd have an easier transition to which patterns from.
Are you asking for a JavaScript preprocessor that can actually reason about all the ways a function can work and then reimplement it in a terser fashion? That sounds like a non-trivial matter for a language with dynamic evaluation and loose types. In the general case it might even require you to solve the halting problem.
First good article about practical property based tests in js. Article I was looking for
Go ahead!
Though, functions which operates with numbers are quite understandable to cover with prop-based tests (thanks to your article). But I'm struggling with strings. Let's say I have function splitting string by comma and dealing with edge cases like `const splitByComma = input =&gt; input.split(',').map(_ =&gt; _.trim()).filter(_ =&gt; _ !== '');`. What are the properties I can test?
No, I'm just asking for a JavaScript preprocessor that will inline every function call. It is trivial.
I prefer declarations. As you say, they are easier to spot and they hoist, though I'm not using eslint rules to avoid calling a function before it's declared.
I found this treatment of ES6 modules very helpful. https://laracasts.com/series/es6-cliffsnotes/episodes/10
Es6 and modules are going to be the new standard anyway, this is less of a fad than things like typescript and coffee script. Barring minor changes, this is what browsers will support in the coming years, and the toolkit to bring these features now is well written, stable, and well documented. 
You could generate random strings and verify that the result set never contains an empty string. Here's another quick example: const result = check(property([gen.string, gen.string], (a, b) =&gt; { return splitByComma(a).concat(splitByComma(b)).length === splitByComma([a, b].join(',')).length })) console.log(result) It really depends on what you're expecting here. It should always return an array, it should never contain an empty string and calling it with 'foo' and 'bar' separately and joining the results should equal calling it with 'foo, bar'. The example might be too trivial, imagine having encode / decode functions that expect a string and return a new string, you would test it with decode(encode(str)) === str. 
Depends if I am using a FP style and creating higher order functions. In that case I will use ES6 arrow functions as it reads more closely to the function's intent. Unfortunately arrow functions must be assigned.
&gt; More predictable behavior ?
The node way: Define a reference and assign it directly to `module.exports`. Consider this example: var myApplication = function { ... module.exports = myApplication; Just that easy. It creates a property after the name of the reference assigned. You can also assign multiple multiple things to exports by assigning to a property name: module.exports.edition = edition; module.exports.meta = meta; module.exports = function export(x) { ES6 modules aren't here yet and if you are writing full stack code. You need to support multiple environments. Here is how I do it and avoid creating global references. First, with Node. Node provides a global reference, an object named `global`. This is meant to provide a global namespace similar to the browser's global scope and Node populates some stuff into it. For security and to prevent reference clobbering I create an object with the same name as my application into the global object: `global.prettydiff`. For compatibility with the browser environment I put all my modules in there instead of assigned to local references. On the browser side: I have a file named global.js. It contains code like this: `var module={},global={prettydiff:{}};` That is the only code in this file. I include this file into my HTML before any other script files. It is my 2 global references and everything else will be populated onto `global.prettydiff`. This can quickly result in horribly long references, but fortunately objects are passed by reference in JavaScript. In my library files I can have something like `options = global.prettydiff.options.functions.validation`. This provides an easy to use local reference that points to a globally available item without creating additional global references. We have to export the libraries in a way that they can be consumed by Node and avoided by the browsers. At the end of my library files I do something like: if (typeof module === "object" &amp;&amp; typeof module.parent === "object") { module.exports = global.prettydiff.myLibraryName } The end result is modules that work in the browser and with Node. No build process required. Not having a build process is a **huge** win. But, this is only good for code you manage. If you wish to include NPM modules in the browser you will need something browserify and will need to run builds to turn your NPM modules into something the browser can use.
React's `Component.setState()` method gives you a built-in way of storing data per component, and it's entirely possible to build a complete app using just component state to store everything. This often involves having some of the upper components in the UI tree handle all the state storage and logic, and having the lower components simply receive that data and display it. However, it's very common to use some other data store library to keep your data outside the UI tree. Redux is probably the most popular choice in the React community at this point, but MobX is attracting plenty of attention as well. You could even use Backbone if you want, and there's a number of adapter libraries out there to help you plugin Backbone Models and Collections into your React Components.
&gt; Not having a build process is a huge win. Mind explaining why that's a huge win? To me, it's a huge win to require your dependencies at the top of the file, because it provides a high-level view of what needs to happen in that module. It also makes it very easy to tell when your code is doing too many things - there shouldn't be more than a handful of `import`s in any given file. ``` import { validation } from 'options/functions'; ```
Actually the JIT compiler is very good at optimising your program where it needs to be optimised. That's why JavaScript is very fast compared to things like Python - often *at least* 5 times faster and easily 10 time faster in many cases. However, if your goal isn't optimisation and you just want to do your own research, you could maybe write a babel transformer or just roll your own. If it's a new code base (one would assume it is if you're doing research), keep all your functions in one file and give them upper case names. In fact, you don't even have to use JS syntax, just do something that is easy for you to parse. Next, introduce some special syntax in your source code to make a function call. Now write a program that scans your source code and replaces your special function calls with the code in your functions file. Basically a dead simple macro. Some things to consider are: - Apply UUIDs or some specific prefix to variable names to avoid conflicts due to the lack of self contained scopes. - Maybe leave Higher Order functions alone Good luck.
You may be a cynic, but leave your mom out of it!
Not bad for someone who's just learning for the first time. In fact, the fact that he took this much time learning and understanding puts him above most.
If there is just one formal parameter, and it's a simple one (e.g., no default arguments), then the parentheses can be omitted around that parameter in an arrow function.
Some good points. To expand, Ember is a full stack. Everything is integrated from the first minute you create your app. If you prefer a slender focused framework to which you will add 3 or 4 more 3rd party frameworks of your choice then Ember is not for you. I have integrated other 3rd party tools like Virtual-Dom with Ember for specific use-cases so it's not out of the question. Speaking of which, 3rd party tools like jQuery plug-ins work well with Ember too.
This is probably easiest with a regular expression. http://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url
There is some truth to that, but one could argue that no code (or tests for that matter) should be written until the API/approach has been agreed upon.
Angular 1 with components will get you a finished product that's seemingly close to Angular 2 (maybe even using [ngForward](https://github.com/ngUpgraders/ng-forward)). Angular 2 will get you most of the way there, but then you'll realise nobody else has caught up so all the libraries out there that you want to use, you can't.
You can absolutely achieve your preferred approach with function declarations. The only thing that changes with a declaration over an assignment is hoisting, and generally the name of the function since most people don't give their functions names when they assign them. So in your example you can only use the `showMessage` function after it's assigned, and in a stacktrace it would show up as an anonymous function. So you could do: var showError = showMessage.bind(null, 'error'); var showSuccess = showMessage.bind(null, 'success'); var showInfo = showMessage.bind(null, 'info'); function showMessage(type, message) { // ... } In this example, `showMessage` could be used anywhere within the lexical scope of the function declaration, and in the stacktrace, the function will show up as `showMessage`, which is usually helpful. I personally don't use assignments. I will use declarations 95% of the time, and the other 5% I'm using fat-arrow functions when I'm passing in a function as a callback and the logic is brief...if it gets beyond a few lines of logic, I break it out as a declaration. I've also found that declaring functions (or assigning them for that matter) over inlining them has the side-effect of the function being more SOLID.
What email client are you using?
react
lol, thank you. :P - either way it's still a compliment to me. I don't code in JS mostly python and django. :) 
Hi /u/idesi, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
lightweight for a *React/ES6* boilerplate. Obviously there is an overhead for those tools.
What do you mean? The biggest ES6 feature not in node right now is import/export of modules. everything is still backwards compatible. Old code will keep working, but if dependencies move to ES6 then the old code should either switch to a newer version of node or stay on the old dependency. At this point all the popular native dependencies that I'm aware of are at least running on Node 4 so I don't know why anyone would stick to an even older version.
I prefer named functions (i.e. function declaration) if, for no other reason, it helps with debugging. By assigning anonymous functions to variables, you just get a function pointer on a variable. This means, when you get a stack trace, everything will say "anonymous function" which makes tracking down an error pure torture. I typically recommend named functions unless the application of the lambda (anonymous function) is sufficiently small that it doesn't rely on a chain of subsequent function calls. Side note, you can actually bind a function inline by simply making it an expression via wrapping it in parentheses: var boundfoo = (function myfoo() { /* do stuff */}).bind(null, my, args, here); Now you have a bound function assigned to a var which is named and easier to debug. 
Learn (in this order): 1. ES6 2. React 3. Flux/Redux 4. Webpack 5. Express 6. Isomorphism/universal With this, you will be close to the cutting edge and able to get very good jobs.
Function expressions can also be named, specifically to facilitate debugging and recursion. var foo = function foo(){};
Indeed, I was just providing an example to sit alongside the OP's post, re: binding and such. With that said, if you're naming your function, but not doing something else (like partial application, for example) why go through the extra step of assigning it? It seems like redundant code which could be refactored away. 
Oh yep, I was definitely talking more about the benefits in its current form (e.g., bundling/concatenation).
Yep, important JavaScript feature: new versions of the language are always completely backward-compatible (with the exception of a few exotic details).
This. Just read up on some frameworks. If you ever run into a project that would make it efficient to use/learn/apply a framework or library; then do it. Honoustly it really depends on the company you work for, and what kinds of projects you do there. If it is something like a commercial agency, then learning React/ Angular etc is pretty nifty as you can get stuff done really quickly, and it would not be a problem if the application goes dead after 3 months. However if it is a long term thing and big investment, then doing most things without frameworks might be better, as you won't get stuck with it when you still work on it 3 years later. I once build a React application, and 2 months later everything was different; so it suddenly became extremely hard to get proper documentation with outdated libraries. So just keep it simple. 
ES6 is important, the rest will come and go. I dunno, YMMV, but I find it's not worth getting too invested in a particular library or framework and just pick them up as needed.
A function declaration is just shorthand for a hoisted function expression assignment. That's *one* use case for function expressions, so if consistency with regard to the use of declarations vs expressions is important for some reason, choose expressions.
Although as of [Webpack 2](https://gist.github.com/sokra/27b24881210b56bbaff7) you will not transpile into commonJS any longer and use the babel-preset-es2015-webpack preset, which leaves your modules as they are. This also unlocks tree-shaking, a very effective unused/dead code elimination not possible in commonJS.
I prefer function assignment, because I am usually writing functions in one file and calling them in another. Functions can be both assigned and named also although that will still function much like an assignment to an anonymous function.
[removed]
A lot of examples in books are like this because they are trying to teach techniques that help on large problems, but need to explain it using a simpler problem because they don;t want to spend time explaining the larger scale project before explaining the technique. They could use bigger issues as examples but then you run the risk of people not understanding because they misunderstand what you are trying to solve rather than misunderstanding how you are trying to solve it.
[this](https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.5d9aw0spt) is the best analysis of the situation I've seen lately, and it recommends React.
React is both easier to learn and, well, better.
React and Angular don't really do the same thing. Angular is a full framework, while React is only concerned with the view. You can use React in Angular. I recently started using React and Redux, and although I can't speak for Angular 2, this combination is much easier to learn, and more importantly, easier to read and write than Angular 1. Redux has a bit of an odd learning curve if you haven't done functional programming before, but once you get the hang of it, it's very easy to use, especially when you start using high order functions.
Not sure what you mean by saying "embedded in JavaScript" (that's not a thing), but from your explanation of the site it is likely they are using canvas to manipulate an image dynamically. Is there a &lt;canvas&gt; tag somewhere in the page? If it is so, you should be able to use your browser console to address it and extract the image data out if it. 
Netbeans.
It would seem that, yes, it's a canvas. It looks a little like this in the developer console https://gyazo.com/6f6a3ff01bd1f77d9dffac048ed00982
Thanks.
Thanks.
I wanted to create a subtitle player with as main faeture support for advanced substation alpha subtitles. Those are normally embedded in a .mkv files, which is a pain because you can't access seperate tracks in a .mkv file in a video element. You would need to subtract the subtitle server side before it can be accessed by the client... which I think is a huge pain to do. I knew that there wasn't a easy and efficient way to do it in JS but the question still remained inside me: could it be done? Hence I started digging about how subtitles are stored in mkv files and found out eventually that when you convert the byte stream to characters the subtitle is just mixed amongst the video/audio data :D. Unfortunately it is mixed in such a way that it is spread across the whole file. Which meant that I had to side load parts of the file every second to get the subtitle for that second of the video... which unfortunately means that this cannot be used by the masses as it puts a huge strain on both the users data connection and the webhost. The connection needs to be able to load every second "x * 2" kb (where x is the bitrate of the file that is being played) within ms to be able to get the subtitle in time.... derp x). Anyway... I am a bit proud of myself that I got it workin all be it very inefficient xD hence why I made a video: https://youtu.be/ajwqUHIWbqM ^^. Keep in mind that it is still very crude and wip... thats why i didnt put it on git yet + the gibrish you sometimes see in the video (actual some random vid data converted to a string xD)
Thanks for the help, very appreciated, unfortunatly, that also includes the grid for the canvas. Then it's no different than taking a screenshot.
Declared references always get hoisted, so if you believe one way avoids hoisting your belief is wrong. Function declarations are hoisted above other reference declarations. The only exception is IIFE. There are four ways of going about this: * anonymous functions without a reference assignment * declared functions * assign functions * declared and assigned functions All functions require a reference or else you get an error, except for IIFE. The reference can be implicit, such as an anonymous function passed as a function argument or stored in an array index. Functions are accessed by reference and are scoped to the declaration point of that reference, even if implicit. Functions declared without a name are said to be anonymous. Function names are how functions are identified to the user for things such as profiling, error reports, and other output. Two anonymous functions are indistinguishable in that kind of reporting. This is the primary advantage to naming functions. The other major distinction is that functions always know what their names are. This awareness is critical to building callstacks. A function doesn't know anything about external references even if they are available as closures. Anonymous functions declared without a reference assignment look something like: var myArr = [0, 1, function () { return true; }]; myArr[2](); var myFunc = function (name, callback) { return callback(name); }; myFunc("test", function (data) { return data + " executed"; }); Anonymous functions declared to a reference assignment look like any other assignment: var myFunc = function () {}; They are called just the same as functions declared by name: myFunc(); An example of a declared function: function myFunc() {} //does not terminate with a semicolon The only advantages to explicitly assigning a function to a reference are to mitigate hoisting (more on this later), change the reference's scope, and to allow vanity references. Consider this example. //a function declared with a stupid long name for uniqueness function I_am_unique_but_this_reference_is_a_pain_in_the_ass() {}; Instead let's assign that to a local reference that isn't a pain in the ass: var myParentFunc = function () { var simple = I_am_unique_but_this_reference_is_a_pain_in_the_ass; simple(); }; Understanding the vanity thing is convenient, but its the change of scope that's interesting. Both the parent function and the pain in the ass function are global. The reference `simple` is not global. This reference is declared within the parent function and so is only available within that function. Since the reference points to a thing declared elsewhere you have closure and all the benefits that provides. You can also assign and declare a function: var myFunc = function myFunc() {}; In this case the two reference names are identical. When that happens only one is available. The innermost reference (the function name) is hidden (unavailable) under the outermost reference (the one declared by var). If the two references are different then both are available. When a function is declared and assigned you get the benefit of both approaches. This is how I prefer to do it. Now... about that hoisting mitigation. The only way to avoid hoisting is to declare references in such a way that there is nothing to hoist them around. You can't cheat this, but you can prevent it from doing anything different than how the code reads. There are probably several ways to go about this, but here is the approach I take: 1. Use a single declaration per scope (or two if you must use `let` and `const`). 2. Place the declaration directly at the top of the scope. 3. Ensure all local references are declared as a comma separated list off that one declaration point. //seems reddit has trouble with IIFE examples (function globalIIFE() { "use strict"; var a = 0, b = false, c = function myFunctionName() {}; }());
In the future, use Reddit Enhancement Suite's comment saving feature because it saves the full text of the content for cases like this.
~~There's no grid, and it saves image as its. Also, it's an `&lt;img&gt;` not `&lt;canvas&gt;`~~ Edit: Misread &gt;_&lt;
If you've learned 1 new framework, you probably have a handle on the rest of them. Do a couple simple projects in whatever new framework you like best (or 2, if you really want), and then feel free to apply for those jobs. All of those things are so new that they basically expect to have to cross-train people from the others anyhow. Be clear in this, in case they're unreasonable, but I don't think you'll have an issue. Personally, I really love React and recommend it highly. But I think learning Angular or Ember is also important as they're fairly different. So that'd be my list for you.
Sorry, I've misread &gt;&lt; Could you link to an actual link with image?
Obviously the canvas contains the image and the grid, you would have to see where the canvas gets the image originally from, or remove the grid from the canvas programatically. About which site are you talking in the first place?
I'm judging by what they said: "this way I can remove it from anywhere in my object." That's not a good reason to unnecessarily implement an interface and combine three event listeners into one. I guess we'll have to agree to disagree, but using an object as an EventHandler when it's not an EventHandler is pretty much the definition of obscure ("not clearly expressed or easily understood"). So not only is the object itself attaching click, keypress, and keyup events to a canvas, it has the implementation to be used publicly as a EventHandler elsewhere. That just doesn't make any sense. While I was aware of using an object as the EventHandler interface before I saw this question, I honestly, don't think I've ever seen it used. That rarity makes this even more of a bad idea.
Did you fix this already? I see no issues with your Codepen. However, see [my comments](https://www.reddit.com/r/javascript/comments/4xo8bn/addeventlistener_using_this_handler_to_call/d6h2lrt) as to why I would highly recommend against an approach like this.
Vue also has a vue-cli for streamlining the startup process.
That was a good read. 
In most browsers (and now part of the ES6 spec) a function's `.name` property will be set with function expressions in addition to function declarations. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
Someone made a joke article that said there was Guy Fieri picture in the Babel project, so they went ahead and added this as a response.
Self promotion, but maybe you would be interested by [Virt.js](https://github.com/arcanis/virtjs). It's a ES6 library that implements everything you need to work on the actual emulator engine without having to worry with implementing actual input / output interfaces (which according to my experience is the least fun part of writing an emulator).
That is so stupidly amazing.
the server return a mime type :application /zip so i don't think the mime type is the cause of this apparently fetching with ajax/axios return a string format of the file or smth like that 
That's actually been my goto reference whenever I'm stuck! I actually found a small mistake or two where I'm pretty sure flags were incorrectly set, but for the most part It's been a great tutorial. I never would have gotten started if it weren't for that, so thank you. 
The aim of the script is to fill the gaps where RES or Reddit is missing, i.e. preview anything in a frame regardless of the website. It will not affect sites that can already be previewed by RES or Reddit, and it also does not require you to have RES. The previewed sites are shown through archive.is due to some sites being HTTP-only, causing a browser warning when these are shown in a frame which needs to be manually overridden. As archive.is is HTTPS, we can get around this.
I'm already entering js13kGames, but this is a great idea. I'm glad there are still people out there promoting the importance of size-optimal, accessible websites.
Thanks, I'll definitely check it out 
This looks very intriguing. Does it have a cross-browser support for getUserMedia() for audio input? That is the most difficult part of WebAudio that I have encountered so far. Would be nice if someone could say, "yes, we have done the magic for you!" 
As an actual JS engine engineer, let me suggest two things I have found to be true in my experience: * Function inlining is not at all trivial to do correctly * Modern runtimes do a reasonable job of inlining based on heuristics we've found where inlining is worth the cost (IOW, your JS engine is already inlining and doing a reasonably good job of it).
The demo and tagline look incredibly similar to http://vincentgarreau.com/particles.js/ https://github.com/VincentGarreau/particles.js/
In PHP several groups of people had felt a set of high quality packages and interoperability standards were needed and so set up things like [The League of Extraordinary Packages](https://thephpleague.com/) and [the PHP FIG](http://www.php-fig.org/). Both organizations had participation from well known community members so if you wanted to build something similar you should probably look toward defining a set of common packages that most projects rely on and which are currently lacking a well managed quality package as well as a group of high profile community members to support your effort. The first step is by far the most important: What is currently missing today?
Here's my attempt at a mobile GBC emulator, based on the gbonline library. I got Dropbox linking working yesterday but I've been busy at work and haven't been able to update. Check it out: http://107.170.177.153/gbc Save method is being migrated away from localStorage, it's just not that reliable imo Screenshot via Safari iOS9.3 iPhone6 https://www.dropbox.com/s/uepqb8oh6egm202/Photo%20Aug%2015%2C%2011%2056%2053%20AM.png?dl=0 
You're already making AJAX requests to the Steam API. What you will end up doing is pointing those AJAX requests at your own server instead. Your server will receive the request and data, then make a call out to the Steam API, wait for it to complete, then return the response from Steam to the original request client (your React app). It sounds like you already have a PHP app that does this, though. Any reason you can't keep using that? If you want to get into NodeJS, check out Express and run through the basic tutorials. Steam API doesn't allow CORS for a reason. Generally APIs have credentials which you must provide to get access. You don't want these credentials to be stored on the client, in the user's browser. They should be safely hidden in your backend server.
This looks quite comprehensive and I'm actually shocked at some of the numbers: 400-600ms of overhead for ~5000 `require()` calls on a nexus 5 is huge! Thanks for sharing!
*with
Oh hey Imran! I started on my own GB emulator a while back; looking to get back in to it soon, and my core was heavily referencing your tutorial series (along with a hefty chunk from VisualBoy). There were two big developments in browser-JS since your series that I think go a long way to an improved emulation experience in-browser: shaders (for all that scaling the screen fanciness), and more importantly typed arrays. Being able to model the registers and memory banks as actual 8/16 bit ranges, instead of relying on huge string buffers and piles of bit-shifting and masking madness makes things way, way easier. https://github.com/jkoudys/remu/blob/master/js/utils/emulator/z80.js#L48
To prevent security issues, JavaScript operations on files are pretty complicated and restricted. The best place to do the conversion is on the server side and it's also probably where you're most likely to find a usable existing implementation of a converter. If you dare, you'll want to check out the [FileAPI](http://www.html5rocks.com/en/tutorials/file/dndfiles/) and its [compatibility charts](http://caniuse.com/#search=file) and consider any platform-specific APIs if you're making this as an app. That should let you read files locally and operate on them. Assuming that all goes well and works on the platforms you are aiming for, the most obvious way to perform file type specific conversions is going to involve either manually writing it or finding a JS implementation. More realistically, if you find a C implementation of a converter, you can try [Emscripten](https://en.wikipedia.org/wiki/Emscripten) which lets you compile C to JavaScript. See how this is getting complicated now? As a person who has been working with JavaScript for well over a decade, I'd recommend finding a way to do it on the server side unless you want this to become a project in itself. Edit: If it's coming from the camera, there is also [pulling straight from the camera](https://davidwalsh.name/browser-camera) rather than the file system and then using [toDataURL()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL) to get it as an image, but (1) [it looks like right now compatibility for that is more mixed](http://caniuse.com/#search=getusermedia) and (2) the set of supported image formats for that is murky but doesn't seem to include TIF. toDataURL() seems to have pretty strong support though, so it may be a viable way to normalize the input (i.e. whatever you can figure out how to write to a canvas can, by that method, be saved as a PNG before sending to the server).
Nice comparison. Its good to know the onetime cost associated with each page load. Some projects I work on have legacy requireJS, would be nice to know how it stacks up.
Not surprising. Modules are encapsulated by biolerplate, which in the browser is an abstraction to emulate non-browser environments. There is a cost to that scales to the number of modules. &gt; The more JavaScript included on a page, the slower that page tends to be. That is usually true, but it really depends on what the code is doing. If the code is primarily user interaction and events it is probably a safe assumption. If a large part of the code is some application processing not associated with the browser then it becomes largely untrue.
I think angular 1 is a zombieland, react is more "now" but is a compromised solution imo and I'd only learn it if a client that I have currently required it. 
Hey, yes I fixed it by adding event listener to document instead of canvas. The reason why I am doing it this way is because I saw it somewhere and it seems to be good way in my case. I can still call a method in object property instead of "this", but it makes it easier for me to handle my code so far instead of creating a function outside of my object. I hope that makes sense and if you have a better idea on how to do this then let me know. I don't know what do you mean by "(...)combine three event listeners into one." I am learning JS from the tutorials, I haven't learned any coding at school so the way I do stuff might seem wrong to others.
If it is trivial, why not have a go and implement it yourself?
I was very tempted to use PostCSS. I generally use it on my web projects, but felt it wasn't required for desktop apps and was a bit overkill. I'm still on the fence though. PostCSS has some nice plugins that could be helpful (Lost, CSSNext etc). I went with PouchDB because it's lightweight and allows for easy sync/replication with remote CouchDB. I'm trying to build it as an offline first boilerplate. Your feedback is much appreciate. Keep them coming in. Create a pull request if you like ;)
That's strange. I'm attempting to run it at work on our guest network. I wonder if something security related might be preventing it from working. I'm not sure what else it might be. Thank you for the reply!
That certificate is about as good as one you made yourself. There really isn't any point in getting it. Build something you can show off.
Maybe use bcrypt or scrypt instead. See http://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage Make sure when you do the comparison between the computed hash at login and the stored hash you use a constant time comparison to prevent timing attacks. You can use the native node crypto module to handle this directly.
Don't exactly understand why you're getting downvotes, it specifically states that it's written in JavaScript.
It is not possible beyond the trivial cases. Take for example function f(x) { if (x % 2 == 0) { h(x % 3); } else { h(h(h(h(h(h(h(x))))))); } } How would you inline `h` in the above function? 
w3schools is about the best at showing the simplest, purest form of some aspect of Javascript without a bunch of clutter and superfluous concepts. I don't care what anyone says. I look forward to tutorials on ES6 from them. Still though, the cert is useless and probably not something you'd want to put on your resume considering the vast majority of js devs have a bad opinion of them.
https://www.reddit.com/r/Frontend/comments/4xotd9/angular_vs_react_vs_aurelia/d6if523
This guy knows what he is talking about.
It's not trivial, though. There are many "edge cases" (read: normal JS things) that your simple implementation will not handle. For example, the semantics of direct eval will differ, you have to handle "arguments" and "this", any locals in the inlined function (which may have same names in the outer function and cannot leak), normalize error.stack differences, fn.caller, and more. If by "all function calls" you mean "all pure functions which operate only on its parameters" then it's substantially easier but still not a walk in the park. Even just detecting such functions is extremely difficult based on syntax alone (actually, impossible, but possible to approximate if you're willing to put up with some semantic differences I suppose).
Are you sure you mean memory leaks and not just filling the memory? Memory leaks can be avoided by limiting the scope of variables to the scope they're needed in. Anyway you can find out how much memory they're taking up by going to your chrome devtools 'profile' tab and taking a heap snapshot.
Did someone shake your code? All your semicolons have fallen off.
You have a point, maybe you are right, but wouldn't it work to just ignore all those concerns and beta-reduce all function calls, assuming the user is using a subset of JavaScript on which that is safe? Mind that subset is still huge - JSON, loops, if-then-else and mathematical operators work fine, for example - and most of my programs are on it, thus my interest. Edit: by the way, here is the piece of code that lead to the question: // Orthographic projection of a vector onto a plane // :: Vector3, Camera -&gt; Vector3 function orthoProj(pos, cam){ var camAxis = Vec3( Quaternion.rotate(cam.rot, Vec3(1, 0, 0)), Quaternion.rotate(cam.rot, Vec3(0, 1, 0)), Quaternion.rotate(cam.rot, Vec3(0, 0, 1))); var deltaPos = V3.sub(pos, cam.pos); var normDist = V3.dot(deltaPos, camAxis.y); var normProj = V3.scale(normDist, camAxis.y); var posOnPlane = V3.sub(deltaPos, normProj); return Vec3( V3.dot(posOnPlane, camAxis.x), V3.dot(posOnPlane, camAxis.z), normDist); }; That function is called in a inner loop and, yes, JS engines do a **terrible** job at optimizing it. I'd place a bet that if the function calls were inlined all way down and the intermediate allocations got removed, it'd be one or even two order of magnitudes faster. Doing so manually is awfully laborious, though.
Eh what is different from mvvm here?
&gt; You basically work at NASA This is awesome. I hate the output that webpack generates and this is super useful information when analyzing your builds.
I think it would only be meaningful if I went ahead and manually inlined all the function calls so we could compare. That might take about a hour which I don't have right now. But if I find an opportunity I'll remember to do it eventually. I'll be really surprised if both versions come out equal.
Those aren't ridiculous examples of monkey patches...
I didn't really see him as complaining at all - just trying to identify what the valuable lessons to learn from React are.
It looks like you're trying to build up a template string programmatically. That's not how React works. React needs a series of `React.createElement()` calls, which are normally done using a tag-like syntax called JSX (such as `&lt;div&gt;Some content here&lt;/div&gt;` ). I think you need to step back, start over, and do some reading about how to use React. I have a big list of links to tutorials on React, over at https://github.com/markerikson/react-redux-links. I suggest you go through some of those. 
What you're doing there isn't React at all. Start with [the React docs](https://facebook.github.io/react/docs/thinking-in-react.html), see how they create the table in that example.
I was actually curious so I went ahead and did it. As I suspected, manually inlining produces huge speedups - up to an order of magnitude on that case, at least on micro benchmarks (should this be different during production runtime?). I'm on OSX, though, so I'm not sure how to test on Chakra. [Here is the code.](https://gist.github.com/MaiaVictor/6d4b15a496df7c281a0dffef6923d433) 
&gt; I don't really gravitate towards larger frameworks, only because my daily work doesn't require it, and I'm personally more interested in the lower level techniques and parts of the web and JavaScript. I also work either on my own, or in very small teams where existing frameworks (or what have-you) aren't already in place. Sounds like a website builder to me, at leastin the context of the needs expressed in this article. Are you saying he doesn't make websites?
switch cases need breaks between cases. i have a headache and i might not be comprehending your code tho.
OK, thanks, let me know what you find.
Can't wait to start working at NASA.
That... That looks like it worked!
this needs to be added to the Angular2 cli
Is there some way to "hack" Webpack to avoid such big gap in comparision with Rollup?
This looks beautiful! More related to blessed than webpack-dashboard but does anyone have success running under tmux? I get [letters instead of lines](http://i.imgur.com/FKlrFMV.png) for the borders while in tmux but clean output running directly from my terminal. My `$TERM` is set to `xterm-256color` and `$LANG` to `en_US.UTF-8` both in and out of tmux.
I took a look and confirmed Chakra's performance here is less than ideal. I still believe this is a bug, but I've asked our JIT engineers to take a look. Will let you know when I find anything new...
when your compiler needs its own dashboard your doing it wrong
"It is not possible"
Not to thread jack but does anyone elses webpack builds take like 600 years? - also, dashboard is nice!
Nope mine just takes 500 years. But seriously, it really depends on your codebase and your deps.
There's a variety of things you can do to speed up Webpack builds. I've got a number of articles on Webpack build optimization listed at https://github.com/markerikson/react-redux-links/blob/master/webpack-advanced-techniques.md .
This is just highly-polished log data from the compiler. Get woke.
is the file size in bytes? Also is it possible to lower the resolution of the image too?
Nice thanks for this, I've gone through a lot of articles and tried a lot of things but still haven't been able to get it under about 10 seconds on my MBA.
OK, thank you, I'll be waiting. I still think it is just that JS engines don't inline as much as most assume. It is a hard thing to do in arbitrary code, as you said.
Nice. 
How about just "Worker"? A Worker: A piece of code that doesn't touch DOM APIs or concern itself with UI topics of any sort, and can be fed jobs or batches of tasks that can be satisfied without external, possibly-DOM-touching APIs and frameworks. Can make HTTP requests. Don't forget about [ServiceWorker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API), or even [WASM](https://webassembly.github.io/), which may execute in similar contexts.
This is needs to be built into webpack.
That's because what you posted is not in JSON format.
Ah fuck. I'm sorry for my ignorance but what about it isn't JSON and/or where should I look for the answer. I'm sure it's simple but you know how it gets when you look at something for so long :/
I think the issue is the double backslash. If we assume that what yo posted is a JavaScript string, that double backslash will resolve into an actual backslash (since the backslash is usually used as an escape character in JS strings). Then, when JSON.parse() parses the JS string, it'll see a backslash followed by a double-quote ("), and will throw an error. It expects it to be an escape character, but the string ends before having a character to escape. 
Oh I get it the stein never ends because the backslash says that the quote is part of the string and, therefore, there is no closing quote. I think? Sorry, still new to this. Thanks for the help
nah i don't need a raw log of my js compiler i'd rather it 'just work' and focus on writing my application. Get woke.
Because it is MUCH trickier than I anticipated. Give me a minute to do some research. Trust me this isn't easy why it's not working.
I think stale fries is onto something. The double backslash causes the string to never end. 
you have it exactly right.
I appreciate the help man. The team and I thank you from the bottom of our previously hopeless hearts. 
Ok, thanks man! 
Mdn is absolutely the worst if you want to learn just one quick thing. Mdn goes out of it's way to use arcane examples while explaining the simplest of concepts. It has it's uses but if you just want to know one particular thing while you're learning, avoid mdn.
I'd suggest thinking about ignoring Ember Data unless the APIs are already JSON API compliant or you can write an ED adapter with relative ease. There are some good sources for writing adapters and I think that a recent book focuses on it. I've done Ember projects just using jQuery ajax calls/promises and it fits neatly into route model hooks where you just return the ajax promise as the result for fetches and similarly use ajax promises for saving data. The addon "ember-promise-helpers" help out with providing feedback when saving and fetching. If you do choose to not use Ember Data then remove it from your project. The ED docs discuss how to do this on their first page I believe.
A big gap in what way?
I'm guessing you don't use the JS console either, right? Who needs their hand held! Amateurs. I alert() all my debugging statements.
I actually take that all as a compliment. It is one of those things that is so simple that it masks all of the power and complexity it streamlines. It's not just sugar, but if it looks like that's all it is, then I've succeeded in fixing the browser's turbulent API.
They will continue to function correctly, ES committee is highly dedicated to ensure that new versions of js do not break any existing js app. This goes way beyond disallowing breaking changes. One story i heard was that in es6, `Array.prototype.contains` was renamed to `Array.prototype.includes`because a library called mootools added `contains` method to `Array.prototype` and hence using the name `contains` might break those apps.
Every Library in JavaScript just re-implements something that the browser should have implemented already, and properly at that. Jquery does it, react does it, famous does it, etc. This one does as well, but it adheres to the native conventions, therefore keeping intact the intended design patterns between the XML, CSS, and JS. Jquery, on the other hand, actually does a terrible thing from a Computer Science standpoint, by creating a redundant CSS layer, for one thing. And for another, it's own API is not consistent with itself or the DOM to be optimal. In other words, Jquery's methods don't co-operate with themselves, let alone the DOM, fluidly which results in ever-more patchwork and work-arounds due to lack of foundation.
Have you: 1. Started using a cache for both webpack and babel? 2. Stopped using the expensive `es2015` babel preset and switched to `modern-browsers` for development instead? 3. Started using a DLL bundle for your external modules? 4. Started using `happypack` to run your transformations in parallel? 5. Looked into your dependency graph and manually broken up expensive cyclical dependency chains? 6. (if you're using a VM) Made sure that the VM shared folder is the fastest implementation or considered running webpack in the host? 7. Considered mounting your source directory in a RAM disk?
It's so flexible it's insane. We get datatype detection, scope nesting, you name it. You can even do these variations: ('click').on(document)(callback); 'click'.on(document)(callback); ('click')[on](document)(callback); 'click'[on](document)(callback); /click/.on(document)(callback); /click/[on](document)(callback);
I don't really care for the use of strings as logic defining parameters, makes it hard for my text editor to compliment my writing, and it seems rather ambiguous, normally I'd log an object/method to see its properties, is that still a thing?
Haven't tried most of those thanks. My solution so far was just to use a beefier computer and build our product faster rather than wasting time but I'll need to look at this soon.
Absolutely! This just makes use of the pattern that you can derive from most things on the native front-end. That pattern is there's a method, a datatype, and a callback. So instead of datatype.method(callback), it's method.on(datatype)(callback). JavaScript doesn't allow us to use the former unless we use constructors, adding a lot of overhead in itself, let alone the fact that you have to re-method re-propertize everything, ultimately still resulting in redundancy anyway. I've talked about some of the other benefits of this approach in the other comments as well. As far as logging objects, that's still in tact. The aim here was actually to do just that, leave the native paradigms in tact, instead of using constructors and ending up inevitably with a whole new API that may or may not even be a robust framework. (hint, Jquery) There is, though, the ability to introspectively log a wiki document for any given method you are using, since JavaScript is single-threaded, and this all runs through a consistent API.
The source is on github. Feel free to tinker with it
b-but webpack is more than just that though
Have a look at https://github.com/wisercoder/uibuilder for your native element creation. Remember to support svg node creation with ```node = document.createElementNS("http://www.w3.org/2000/svg", type);``` Tasks backed by RxJS would be killer. 
Good points. Let me clarify the first 1, as that is easy. I respect discipline, but 1. String Parameters with spaces * a.) human readability is closer to english (a good convention elsewhere, such as var naming, etc.) * b.) intuitive way of passing in parameters, or specifying the method further. (I personally don't like functions that you always have to remember 2-5 parameters. I hone in on a practice of 1 parameter wherever I can.) * c.) efficiency (because of the order of operations to locate the command, it's incredibly efficient to just separate entries by a space. I've done intensive bench-marking on this library, and was determined for the utmost efficiency. If you look at the code, you can see how elegant it really works out to be, throughout it all.) * d.) putting code inside a string is not a vulnerability here in any way (this goes back to point c with how it is implemented, if the command is not detected upon lookup, it fallsback to a failsafe. It cannot execute a command that doesn't exist. commands inside strings is mainly an issue with injection and attacks.) 2. Console Wiki This one is easy to defend. It is an optional dependency, of course! I wasn't so absentminded to include an entire wiki in a library! I should have specified this better, so that's my fault, but yes, the overhead only exists during the development stage, if you choose to include the optional dependency. :) 3. Overloading I wouldn't say it's overloaded. I'd say it's balanced and it scales well too. I'd argue the opposite of jquery.
You didn't see me write that. :P This was in a comment that illustrates the creativity that is possible. Besides, I'd venture to bet that you'd argue jquery's necessity for things like "swapping the data from every other table row and performing a calculation on it." Which we start to understand how jquery has almost single-handedly enabled bad practices and the misinterpretation of back-end and front-end roles. And you don't see me hitting anyone!
It's still a terminal program. However, feel free to make a 3d aalib version. 
This is truly a great report. You started out with an excellent point, (although, on the other hand, it kinda validates the console wiki. :) I completely agree with all that you've said. I can tell you are a programmer by the way you think. We're a lot alike. There's an intuition that comes with experience, and I wouldn't trade mine and I'm sure you wouldn't either! It's always good to sharpen it up though! My last defense of my lib is the management/scale that it really does enable through conventions. So, thank you for taking the time to chat about it. It's valuable feedback to me all the way. I posted the source code link in the post. If it seems like a good use of time to you, feel free to bring any other criticisms!
&gt; But, are query strings SEO friendly? Does it matter? Thanks in advance Why not check what google has to say about it? http://static.googleusercontent.com/external_content/untrusted_dlcp/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf Have a look at page 8 and 9 Also have a look at what they have to say about ajax applications: https://developers.google.com/webmasters/ajax-crawling/docs/learn-more
is it April 1 again already?
All I can see is you trashtalking. Not shipping anything.
*sigh* Never a mathematical or scientific proof. Not a single argument here against that.
same shit with C# , people say the JIT will inline, but it wont , it doesnt , and there is no priority in doing so so just let me force it, and deal with the edge cases myself imo.
I find this library quite interesting. One gripe I have is, that your syntax is "do this - on - something", so I would guess, "click".on(document) will trigger a click on document. All in all I still prefer libraries that do one small thing only. 
&gt; Output to console, if i may say so myself, is purely genius. I can't tell if you're being facetious or if you really lack this much self-awareness.
Yes.
I came across the idea while working on it. Noticing it was great is a valid expression.
Is there something wrong with it being a great feature? How do you feel when you come across a great opportunity? what's the first thing you say to yourself? "That's a GREAT idea!" lol. Don't you? I was simply defending it for what it is because I truly felt that way.
That's a great criticism, and definitely a negative. Also, I agree about libs. You've got the right idea.
Actually I think this should be doable with CSS transformations and a lot of work. Some really great video from Google I/O 16 about using CSS transformations: [High performance web user interfaces - Google I/O 2016](https://www.youtube.com/watch?v=thNyy5eYfbc)
Could you point me into some sort of direction? Or is there some tutorials somewhere?
"Mdn is the worst", and you use w3fools. Look, I don't want to tell you how to do your job, but serious js devs consider the above an absolute joke. If you want examples, bc that's how you learn, stack overflow is even more likely to give accurate results than w3fools. Seriously it's a horrible reference site. Simply for the fact that they spread misinformation. Had an issue last week with array. Splice mdn page clearly explains the definition of the method, w3fools calls the 2nd method "How many" which does not clearly indicate this argument is the number to delete (mdn lists the argument as "deleteCount") in this case mdn is more explicit and accurate. Edit, I'm mobile. My phone hilariously autocorrect "w3schools" to fools.. sorry that was not intentional
nearly all (linux/unix) terminal emulators support vt100 escape characters. Escape characters allow you to control your terminal in cool ways. Things such as print the next text in a bold font or green color. It also allows you to move the cursor around so you can overwrite existing text. I haven't looked at the source but I assume it uses blessed to print to the console. blessed is a library that abstracts away the usage of these cryptic escape character and allows you to easily write to the terminal window to create terminal apps with nice interfaces. 
That's a great and useful talk, thank you for the link!
good: really helpfull with webpack output bad: that I need to feel like I'm working for NASA just preparing my code to execute properly
 var subreddit = 'javascript'; $.getJSON('https://www.reddit.com/r/' + subreddit + '/new.json?limit=1') .then(function(data) { var post = data.data.children[0].data; console.log(post) }); API docs are [here](https://www.reddit.com/dev/api/#GET_new) 
You're a Genius dude, a GE NI US, i was stuck here for a week a didnt know what to do thanks :) &lt;3
Can you make an example of this? i didnt understand it very well 
Aye, in this case you're right. I just wanted to remind that functions aren't dependent on events as I think a lot of beginners are under that kind of impression. Sometimes you just want two different things to call the same function :)
&gt;We believe that the Angular 2,0 API is highly influenced by OOP ideas and goes against the shifting of the JavaScript community towards FP that we have been explaining in this article. Well you might as well believe that [cancer causes cell phones](https://xkcd.com/925/) **Here is my honest opinion**: You got it backwards, it is not that js community is shifting towards FP, but devs, ~~from js community~~ the ones you talked to, are shifting towards React. Hence they follow the paradigm React prefers i.e. functional programming. When they will use angular(or other non-functional js framework), they will migrate back to OOPs. BTW: those, who actually know OOPS and design practices, prioritize composition over inheritance, anyway 
I'm working on a port of VBA-M. It even supports sound!
Webpack is open source. Typescript compiler is open source. Webpack is a lot more than a compiler. Have you ever even used Webpack? Saying it isn't "proven" is laughable to those of us who use it day in day out without issues.
Hey guys i cant make it work :/ can you please tell me why? i mean yes and no, it doesnt do what i want http://jsfiddle.net/5gsBV/309/ i want to introduce a value in "Unidades" and then after operate them i want to take the value of each input of the column "paletas" 
Do you guys know if there is some solution to close gap betwenn Webpack and Rollup? 
I don't think the decline of angular 2 is because people want functional programming, it is because people want a good framework and angular 2 just sucks in that regard.
goals-animation.gif is pure self-indulgence. Animation should exist to inform the user - this animation is there to show off a designers skills.
I always type bower commands wrong: `wget ...`
LOL haha im so dumb... Thanks dude :) 
I know that, are you sure your advice applies to my code? Here is the example without cutting of React.element etc let GameOfLife = React.createClass({ _start: function () { console.log("it's alive!") }, render: function() { let table = ''; let rows = 30; let cols = 30; for (var i = 0; i &lt; rows; i++) { table += '&lt;tr id=' + { i } + '&gt;'; for (var b = 0; b &lt; cols; b++) { table += '&lt;td id=' + { b } + '&gt;' + '&lt;/td&gt;'; } table += '&lt;/tr&gt;'; } return ( &lt;div&gt; &lt;table id="table"&gt; &lt;tbody dangerouslySetInnerHTML={{__html: table}}&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;button id="button" type="button" onClick={this._start} &gt;Click Me!&lt;/button&gt; &lt;/div&gt; ) } })
I have a [script](https://github.com/lhorie/mithril.js/tree/rewrite/bundler) I'm using for bundling Mithril that basically does what Rollup does, but for CommonJS modules rather than ES6 ones. It's still a bit rough around the edges though (lots of bugs, no tree shaking yet)
I think, [this figure](https://svbtleusercontent.com/lavjoo6cdcmaka.png) suffers from its over-simplicity. If you use classes, you can also use FP. Of course not in Haskell or Clojure style, but still. Like it is for good old JS with or without classes. It was always an object oriented language, although not based on class, but prototype inheritance.
Did you mean IEEE 754?
I interpreted it as "keep your eye on this item on the next page" - as a way to communicate to the user what they probably want to be looking at on the new screen. Some apps might have too many functions/things those sort of animations help you focus on what's important. This animation though takes that idea to a crazy and mostly pointless level.
I see. Thanks for the info. You've created a cool and easy solution, thank you for sharing it. üåû I had decided to creep out of my cave and chime in with a touch of feedback. Frustrating that some mobile browsers are cutting corners for performance reasons. I'm curious if there's a way of attaching the revealing animation on the scroll-touch that was mentioned in the comments? Not all users will be willing to switch browsers. 
Who TF is 'we'? Jimmy? 
cool, I got the problem but I'm not sure how I can find a solution for this. What do you mean by tweaking the timing?
I love [this talk](https://www.youtube.com/watch?v=MqHDDtVYJRI) and great visualisation on numbers and its binary representation in javascript.
The team of developer in our office...
This looked great and perfect for my project so I started messing around with it and soon found that WaudSprite just doesn't work, and was last updated two months ago. It seem to stall on a `fs.exists()` check with a wildcard filename, as is in the examples and without which WaudSprite is utterly pointless.
If this guy is putting Angular 2 as "Pure" OOP he has no idea what he is talking about. Angular 2 incorporates RXJS as a core dependency, functional reactive programming is built into everything from rest api calls, to async component loading that can be conditional on the return of an async data call. You can control the data flow of the application however you want, if you want immutable data flow from smart components to dumb components like in React you can do that. I've been working on business process automation tools in Angular 2 for Kroger since January, it has been the Architectural Standard web framework for internal tools, (waiting on the release before using it for B2B or B2C apps). It is owned by Google so it will likely be around for a while, it is an entire framework instead of just the presentation layer of the application like React. It has built in Unit and End to End testing frameworks that are developed specifically for Angular 2 using Jasmine and a wrapper around Selenium. All of the complaints I have seen about Angular 2 other than "I don't like it", have been about them making breaking changes in the RC versions or about how long it is taking them to get to final release, never that it isn't "functional" enough. Also that gradient of frameworks from "OOP to Functional" is laughable, without counting the features of all the frameworks and describing how each of those are either functional or OOP suggests the ratings are largely arbitrary. While developers might prefer more "functional" frameworks developers don't choose their implementation language, Architects do, and Architects don't care about how "functional programming" something is, only if it is reliable, effective, and fits the rest of the architectural stack. None of that is covered in this article. 
Good point!
&gt; High performance web user interfaces - Google I/O 2016 I've actually seen this one. Paul Irish is the bomb, but even though you can do a lot with css, or almost anything, it will take a ridiculous amount of time to do it proper. That is why i wondered if i missed a step/ lecture or whatever? If not then i assume no one is actually able to do such intense visual cue's properly, yet? 
The article specifically states: "This behavior is explicitly left undefined by the ECMAScript specification. In ECMA-262, section 12.6.4: &gt; The mechanics of enumerating the properties ‚Ä¶ is implementation dependent."
You mean like going back to how we did flash applications? But then using canvas? Or even shadow dom, whenever it hits us?
Word
Redux is just a more reactive implementation of the Flux design pattern, you can have time traveling state rewinds in Angular 2 by creating a single data provider to manage state without ever having to npm --save a single Redux implementation.
Yea, agreed here. Client-side-JS-based encryption is like the equivalent of locking your bike outside on a busy street, and then hiding the key under a mat nearby.
I made a [diff of changes](https://gist.github.com/aaron-harvey/4a4d532a5fa716feabb811be2927527f/revisions?diff=unified) for anyone interested in adding this to [react-redux-starter-kit](https://github.com/davezuko/react-redux-starter-kit) (v2). 
You probably don't. The binary heap works well in imperative languages because it meshes well with the imperative paradigm. It doesn't work well in the functional style, so you wouldn't really use it ever. Use the data structure that enables your task, rather than simply trying to copy imperative structures into a functional style. For example, I've read about something called a "leftist" heap when I've seen people discuss min queue structures in Haskell. In general, the very idea of an array is kind of verboten in purely functional programming. Linked lists are far more idiomatic.
I'm not saying it is a great idea, but if you want a fairly exact and consistent experience across platforms/browsers then you don't have many choices. I was actually thinking of the original autocad.
I changed the width and the border sizes so all the cells would fit. I also added data-row and data-col attributes to the cells to make it easier later for OP. http://codepen.io/anon/pen/RRdGPY
Yeah, I see what's happening. The `{someVariable}` syntax for interpolation only works inside of JSX, like: `&lt;div className={someVariable} /&gt;`. When you do it in the middle of a bunch of string concatenation, what you're actually doing is defining an object with a key and a value, like `const someObject = {b : b};`. That object is then implicitly having `toString()` called, and that of course returns `"[Object object]"`. Not only are you mixing together two different syntaxes and semantic approaches to generating an HTML structure (string concatenation and JSX), there's no reason to be doing string concatenation to put together this table at all (and _definitely_ no reason to use `dangerouslySetInnerHTML` ). Do it all in JSX: function fillArray(size) { // see http://www.jstips.co/en/create-range-0...n-easily-using-one-line/ return Array.from(Array(size).keys()); } const GameOfLife = React.createClass() { _start : function() { console.log("Start clicked"); } render : function() { const numRows = 30; const numCols = 30; const rowIndices = fillArray(numRows); const colIndices = fillArray(numCols); const tableContents = rowIndices.map( (rowNum) =&gt; { // Note the use of JSX here const columns = colIndices.map( (colNum) =&gt; &lt;td id={colNum}&gt;&lt;/td&gt; ); const row = &lt;tr id={rowNum}&gt;{columns}&lt;/tr&gt; return row; }); return ( &lt;div&gt; &lt;table id="table"&gt; &lt;tbody&gt;{tableContents}&lt;/tbody&gt; &lt;/table&gt; &lt;button id="button" onClick={this._start}&gt;Click Me!&lt;/button&gt; &lt;/div&gt; ); } }
&gt; Why should a graph line transform into two buttons? Why should a button transform into a full-screen select-list?! It makes sense to me - I click an item with some styling, and whatever it gives birth to 'inherits' the same styling and is given a kind of animated continuity. &gt;depicts some absolutely meaningless animations I am inclined to disagree, but I'm no more qualified than you to say. Still, I encounter developers all the time who reject animations and visual finesse because they don't personally understand its value. Oftentimes this conveniently aligns with not doing something that looks tough or maintaining their pristine abstractions. This is a shame, because writing high performance animations can be interesting and rewarding work indeed.
why is he afraid of using node?
FP !== React React is only one of several FP like framework options mentioned in the article. OOP is old. Its like showing up to the Battle of Agincourt with all the latest and best tools and superior numbers and the greatest education and yet you still get your ass kicked because in the end all this bullshit just weighs you down until you are drowning in the mud. It is better to be nimble in your execution and have that long vision for a slim architecture.
This is more an outline of a blog post than a blog post. I‚Äôd explain more and show code examples.
It's one of those things that doesn't make sense on the surface, but makes a bit more sense digging down into it. Key quote: &gt; The standard defines: &gt;arithmetic formats: sets of binary and decimal floating-point data, which consist of finite numbers (including signed zeros and subnormal numbers), infinities, and special "not a number" values (NaNs) It seems goofy, but this isn't really Javascript fault for being weird.
I can - but why would I want to? This is the real issue with Angular 2: its value proposition is just not strong enough to overcome the economics of switching over from an established competitor (React/Redux). How do I substantiate that assertion? I actually don't have to - NG2's lack of momentum speaks for itself. I have been saying the same since January: by next year, Angular 2 will be regarded as a niche framework, something comparable to where Ember is today. Fundamentally, Google is not invested in Angular's adoption in the wider world and only seeks to serve its own fixation with making SPA development more genial to its hordes of Java developers. Its competitor is not React but GWT. In that sense, I am sure it will succeed - but Google's "backing" does not mean what many think it does.
FYI Number.isNaN() behaves differently than isNaN(). https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
Having a testing framework right off the bat is letting us do TDD /BDD easier than a react / redux approach simply because we can grab an angular 2 starter template and get started working immediately. Also we are using this in conjunction with Pattern Lab, so we can have a team creating generic angular 2 components to meet the business's design goals which can then be pulled in by other teams to jump start development. I admit that I expected Angular 2 to be released sooner too, and I see the advantages to working with a more established competitor but because we are creating our own components / widgets in house we don't care so much about the larger open source adoption of react/redux. We also have cross functional teams and hordes of C# and Java developers so your point about that actually argues in favor of at least adoption of angular 2 in my specific work context. I am no expert though so feel free to disagree if I'm wrong
This post reads weird. `s/reference/variable/g` There, that's better.
A lot of people are missing the whole CSS filter animations (using SVG filters as CSS filters: quick example: http://tympanus.net/Development/DistortedButtonEffects/ ). As they say more than likely will only work in modern browsers but if you had a lot of time, definitely doable. 
&gt; This micro-benchmark suggests the opposite is true. Doesn't do anything [on this](https://gist.github.com/MaiaVictor/6d4b15a496df7c281a0dffef6923d433).
We are using Typescript and it has been easy for people who have been working on services for a while to jump into the UI code if needed, an experienced UI developer would then pair program with them to catch them up to speed. We allow for lowered velocity and prioritize cross functionality of team members over it. As far as cross team dependencies on the UI our approach is that if there is not a component we can use out of the box we will get a design from UI/UX, if they do not have a design ready we are expected to share partial responsibility, implement what we think is a good design, then get it approved by designers. Designers don't have more weight than developers and if we come up with a UI that the business likes more the designers will adopt that and work with it. I was on a team that did this actually. For Pattern Lab if component comes out later that replaces our feature we accept the tech debt of refactoring the code if it provides sufficient business value, if not it is okay if we have partial project specific code and Pattern Lab code in the same project. I'm only a co-op here though so limited experience (that can be taken into account on my opinions too), hope that answers your questions.
guess its also near impossible to make a library for it, cause the moment you actually need this then what you need would be so extremely custom...
&gt; In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. null was represented as the NULL pointer (0x00 in most platforms). Consequently, null had 0 as type tag, hence the bogus typeof return value.
Seriously I could not find a lot of substance in this post, it basically could be summarized to one line: Angular 2 uses classes and Javascript is moving towards functional programming therefore Angular 2 will fail. Then it goes on to say that probably the best solution is to find a middle ground between OOP and FP, which is exactly what Angular does. Angular 2 probably only uses classes because its a great way for example to model a component: the component has a state and a serious of private functions that operate on that state, a class is a great way to model that. Separating data and functions that are always going to be tightly linked would not help make a more readable program. Also dependency injection kind of needs classes, the constructor is an ideal place to inject dependencies, not sure how we could do dependency injection with pure FP. We would have to inject the dependencies in each function using partially applied functions ? Angular 2 uses classes sparingly where it makes sense, sometimes we can optionally implement an interface if we want to, but its not required. And the API does not require us to extend classes for most use cases, if any? So that middle ground between OOP and FP that the author mentions is what Angular 2 is doing, it only uses classes where it makes sense and does not encourage extension. Angular 2 is by the contrary another step in the community adoption of FP, due to its deep integration with RxJs, its probably the best framework right now for building functional reactive applications using for example @ngrx/store, which is very similar to redux. 
Wish this was an option, client specific request. To be clear SSL will be used, its more so of a case of them not wanting certain things in our logs. Its stupid, I agree.. but when a paying client asks for something typically it will be done regardless. 
Not so much afraid as unwilling to spend the time and money for it to go through info sec and all the other red tape. We handle a lot of sensitive information and their are certain mandated steps by government entities that have to happen for every T that is crossed and I that is dotted. Those steps cost a lot of that time and money.
As much as I love FP in JS it's certainly brought out a bunch of uneducated, dogmatic, and zealous folk.
What are they requesting? I mean the thing is if they can see your traffic they can see the encryption tool being passed along with the key unless they are like pasting the key in manually on the client. And even then that's assuming your code has zero XSS-style vulnerabilities. I suspect whatever government mandates you are supposed to follow would not consider this a valid solution. Most importantly **this is a solved problem**. SSL/TLS was created for this explicit purpose. 
&gt; React tightly couples presentation, logic, and data in a way that could be considered to violate separation of concerns, possibly resulting in an unmaintainable application. Does it? Components do contain logic and presentation but the two are still separated. React apps are very maintainable and only as coupled as you make them.
Maybe I'm missing something, but why don't you just use HTTPS?
a ton of large companies are using node now.
That's entirely a function of the user's computer. If I have 128GB of RAM and a 64-bit OS/browser, I can store far more objects than someone with 4GB of RAM or a 32-bit browser. Virtual memory and whatnot complicates the picture further. The best bet for _any_ kind of development is to use less memory if you can without compromising run-time performance. Even if the browser can store 32GB of objects, odds are the user might have a few other tabs/applications that they want to use that memory for. Don't be a hog.
Hey you, no linking to outdated specs: https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type
My bad, sorry. Do all browsers actually implement the new spec yet, or is it just experimental branches?
probably after effects it is just graphical prototyping. (ie that guy doesnt know html). the problem imho is, its not really feasible to be able to update that layout with a few days work (as a html dev), a real designer may be able to do it in a few days (if he doesnt know html: weeks, if the html guy isnt an artist, weeks...), a flash guy could do it in minutes. its also a painpoint to now make SVG buttons/graphs/elements, and rewrite all the logic of a html graph to a svg graph. it would make a great flash app. anyway googling `two d morph js` theres some great librarys like two.js and greensock, which are svg! maybe its easier than it sounds. ill have to try svg on my next app. (but the last problem: how do i convert psd to svg!) i would get the psd from the designer and try to convert to svg, and more good news is theres already free oss charting libraries.
The one I linked is the master branch which is the target for the latest versions of all the engines (none of us wait for the final specs to be out before implementing). You linked ES5.1 which is very old at this point - most engines have complete support for ES6 and many have complete support for ES7 as well. But there is stuff in master that isn't supported anywhere as yet.
this really needs to be added to ember-cli Also, isn't angular-cli a fork of ember-cli?
You'd want to use an array to represent a complete binary tree. Less overhead than using pointers.
NX doesn't prevent these code injection attacks: ('hello').__proto__.replace = function() {/* do evil stuff */} ({}).__proto__.toJSON = function() {/* do evil stuff */} ({}).constructor.create = function() {/* do evil stuff */} ({}).constructor.prototype.hasOwnProperty = function() {/* do evil stuff */} [Google Caja](https://developers.google.com/caja/) implements sandboxed code evaluation, and it requires more than what NX is doing.
Its more like that React doesn't have opinion about your architecture (unlike Angular or Backbone), so it is possible to write React that way. 
I am happy to be able to use C# on the backend and javascript on the front end. Strongly typed languages are so much more helpful when writing business classes and interacting with databases. Plus C# has so many classes that allow simple manipulation of datasets.
By many companies you mean your company?
implement it yourself if it is so trivial....
No.
literally the second sentence answers your question &gt; It is a more robust version of the original, global isNaN().
Remember when we used to think Flash was awesome because of exactly this... It was awesome. This kind of thing was out there in 2002-2003 (with low frame rates), its only a matter of time till we get good UI to build this more easily.
just read through this and try not to shake your head https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding &lt;why *ngClusterfuck="let wtf of wtfs" [wtf]="wtf"&gt;&lt;/why&gt;
Angular needs to die in a fire.
It's OK if your heap is just an array and an integer with the index of the tail element. Your functions just expect a similar signature on your heap datum. an empty heap would be something like `{heap: [], tail: 0}` and a function like `add(1, heap)` would return `{heap: [1], tail: 1}`.
"Web worker safe" is the term I've seen used a few times.
I got curious so made this twitter poll: https://twitter.com/bterlson/status/765671887615594497
&gt; The author deleted this Medium story &gt; ‚Äî https://medium.com/@xpl/setting-up-supervisor-with-mocha-for-automatically-restarting-tests-when-code-changes-2470d439f72#.n27qkv1i3 and here we go 
Very interesting, thanks! 
Hmm I tried Number.isNaN("") but same result
What I am really missing is an optional compare function for the union, xor etc family of methods. I imagine in practice I would use these with objects with many properties and i only want to base the set on certain property. 
Careful - isNaN means "is NaN when coerced to a number" (eg. isNaN("asdf") is true). Number.isNaN means "is NaN".
I think you need Set subclass with custom equality. It's quite easy to write such subclass using Map as backing storage. 
how can I overload equality check in javascript? I have never seen it done. QUick googling says it's not possible.
The problem is not JavaScript, it's the nature of the browser. It's just not safe. Once the browser itself has some kind of (cross-browser, effective) crypto available, then we can move towards actually doing this in a safe and secure way. For now, just no.
I imagine he means a Java-like .equals()-style API. You can't override `===` (`==` can be overridden to some extent using toString/valueOf hacks).
This thread is about a webpack dashboard is that literally 2 days old.
The good news is it's optional. You were ranting about Webpack, not the dashboard.
You don't override equality operator, but implementation of `.add`,`.remove` and `.has` methods to use backing `Map` instance instead. 
so you have a backing map instance and then? how can I say I want to union set a with set b and I want to it on property X. You get lots of issues with strict equality since every map that has the exact same members are still unequal to eachother. 
Not saying they don't. Never said they didn't. Just said that people might expect keys in order.
Front-end fatigue AND eye fatigue. I like it
This is exactly what underscore.js does :)
It's also all powered by a treadmill, for that full body fatigue.
How titles are assigned depend on the company but in general they are not a time-based thing. It depends on your skill level. How ling will it take for you to attain a certain level? No one can say for sure.
In the current market: junior = 0 years, senior = 3 years. I maybe exaggerating a bit, but that's what it seems like.
It's also the most common polyfill for `Number.isNaN`, although some, cognizant of the potential for host objects that don't play nice, also check `typeof x === 'number'` because one of the few things that host objects *aren't supposed to* do is make the [`typeof` operator](https://tc39.github.io/ecma262/#sec-typeof-operator) return `"number"`, `"boolean"`, `"string"`, `"symbol"`, or `"undefined"` (it still returns `"function"` if and only if the object is callable, even if it doesn't inherit from `Function.prototype`). --- ^(Even then, the latest HTML standard specifies that `document.all`, if it exists, must make `typeof` return `"undefined"`, as one of three willful violations designed to deal with legacy sites that either test for `document.all` first or just assume that it exists and start working with it: https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all)
This :)
x)
This looks awesome. Excited to see how it develops further down the road 
The demo uses WebGL, and if you can't get the demo to work, you can [here](https://github.com/Erkaman/regl-cnn) find a recorded gif that shows what it is supposed to look like. This demo does handwritten digit recognition by evaluating a Convolutional Neural Network on the GPU with WebGL. The network was trained in TensorFlow [by this script](https://github.com/Erkaman/regl-cnn/blob/gh-pages/scripts/create_cnn.py), and the network was then reimplemented on the GPU by hand with WebGL. The main purpose of the demo was to demonstate how our WebGL framework [regl](https://github.com/mikolalysenko/regl) can be used to greatly simplify GPGPU programming in WebGL. The secondary purpose was to test whether evaluating Deep Learning networks in WebGL is doable. To our knowledge(but we may be wrong!), our implementation is the first implementation ever to attempt GPU accelerating neural networks with WebGL And we hope that this implementation will provide a foundation for people who, like us, wish to experiment with Deep Learning and WebGL The GPU implementation can be found [here](https://github.com/Erkaman/regl-cnn/blob/gh-pages/src/gpu.js) Note that this network will probably be slower than the corresponding network implemented on the CPU. This is because of the overhead associated with transferring data to and from the GPU. But in the future we will attempt implementing more complex networks in the browser, such as [Neural Style](https://arxiv.org/pdf/1508.06576v2.pdf), and then we think that we will see a significant speedup compared to the CPU. Lastly, if anyone has any questions, I will be glad to answer them here. 
That would also be nice to have for maps for key equality. 
Something to keep in mind as you work through your career is, as you get years under your belt, make sure you aren't just repeating the same year. If you find yourself solving problems that aren't challenging is either time to shift your focus in the company you're at, or find a new position. A piece of advice I heard once was "be the worst player in the band." this was for music, clearly, but it applies to programming as well. Apply for positions that scares you a little. Work with people who are just plain better programmers than you. Learn what they have to teach and try to keep up. It's hard, but it makes you better. These are the kinds of things which build a senior developer. It takes time but, more than that, it takes a lot of work. It's fun and challenging, but it's definitely work. (and it's worth it) 
i generally use the term "function" for functions that are not part of a class, in a class these are methods. Thats just me though
A method is a function which is associated with an object, is one way of looking at it. But generally you just stick to /u/johnnyvibrant's rule of thumb and you will be fine. 
In my experience, they are used pretty interchangeably by most people (including myself). If I were to make a distinction, it would be (something along the lines of...) that a function should always return a value, a "pure" function should also have no side effects, and a method is anything else. Some languages make a difference, some don't.
Could addElements not be achieved by accepting multiple arguments on add, and using the spread operator? Kind of like push for arrays. 
can you give some examples of beginner functions that are not part of a class, and perhaps example of methods that are in a class? 
anything not bound to an instance is a function. Anything namespaced by an object is a method. class Foo { aMethod() { function theFunction() {} } } function aFunction() {} Static Methods (java) are methods, they are bound to the class object. Or more precise, methods use and manipulate of the state of an object, functions do not. One of the corner stones of functional programming is immutability and having no side-effects.
Every method is a function and not all functions are methods. You can only speak of methods in context of an object.
I was planning on implementing more complex neural networks, [such as Neural Style](https://arxiv.org/pdf/1508.06576v2.pdf), and my expectation is that some kind of library will be formed as I do this. So yes, probably.
&gt; I feel like putting my API key on GitHub is an extremely bad idea That's because it is a bad idea. Exclude it from your repo and use environment variables or/and JWT to pass it.
In my opinion sometimes it's worth it to implement your ideas and then decide if they are good or not. I always had "great" ideas in my mind, I discussed them with people around me and some agreed while others didn't. I wasn't convinced they are not great until I actually implemented them, that gave me better perspective and made my expectations much more realistic plus I gained experience. I'll take a look at your code and see if I have any advice. EDIT: Just realized the post was deleted, PM a link to your github if you are still interested in a brief code review. 
Then there's Perl with subroutines... Agree mostly. A method to me is something that alters the state of the object it resides in.
X-Post referenced from /r/node by /u/keithwhor [Create a Node.js Rio 2016 Medal Count Function Online with stdlib - Now With Full NPM Support](https://www.reddit.com/r/node/comments/4y4buf/create_a_nodejs_rio_2016_medal_count_function/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
So can we say in browser JS everything is a method cause it all gets put on the global object? Edit: To clarify I meant every function definition 
What about procedures? Are they function or method? 
No.
Can we say "functions" for non-class functions and "class functions" for functions defined within a class?
This is truly awesome! How much time have you spent making it?
I wouldn't start a project based on Strapi. From reading their blog it doesn't seem like they know what they want to build. At least wait for 3.0...
About one and a half week. But that's mostly because I'm a total rookie at machine learning and neural networks. It would probably have taken less time if I were more experienced with it. 
Depends where you're working. I went straight from my degree into a "Senior Javascript Engineer" roll simply because I started working for a startup. That was a few years back now, and I'm probably only just experienced enough to be considered "senior". Edit: I use the phrase "a few years back" similar to an old man looking back over his life. Not "im a l33t dev with 2 whole yearz xp bro".
http://stackoverflow.com/questions/27522979/read-a-local-textfile-using-javascript
Can you clarify? It already works like `.push` except return value. 
I hyard them lads in makrosopht speek funktchn about everytin
All methods are functions, but not all functions are methods. Calling a non-class function a method is incorrect. Calling a method a function is not incorrect - it's just less precise.
I had mucho troubles with my 9's. 
https://imgur.com/a/G66To Not sure its relevant. 
Grew up on Qbasic/QuickBasic/GWBASIC myself so I feel ya! But Perl's Subs returns one (or more) values.
In JavaScript (in browsers at least), ~~all functions~~ global functions and function-level functions are methods as well. For example: let add = function (a, b) { return a + b; }; console.log(window.add(1, 2)); In a browser, the default namespace is the `window` object (which is an instance of `window.Window`). With that said, anonymous functions might never be assigned to a variable (see the following code), which would make it impossible to be a method. For the sake of technicality, the above code has a function that is not also a method *until it is bound to a variable*. Since that is practically instantaneous, there‚Äôs no sense in arguing that the function (without the contextual code) is not a method. let result = (function () { return add(2, 3); }()); ~~I think that this is the only case in JavaScript in which a function is not also a method.~~
&gt; From my understanding, if a function is inside an object, it's now referred to as a method. In traditional programming languages you would be correct, when functions are declared without class scope they are just functions. However OOP in javascript is somewhat different then most other languages, because functions are objects: *"The Function constructor creates a new Function object. In JavaScript every function is actually a Function object."* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function If you want to know more i suggest looking up a more general comparison of how OOP works in javascript vs more traditional languages such as java, C, etc.
You could just as easily argue that AJAX is a meaningless complication; after all, removing the reload flash doesn't obviously "add" any meaning. But of course, that would be a minority opinion in these times - most of us would agree that it adds visual continuity. I think you are being too close-minded to the meaning that animations like these can convey. It's a shame I'll be downvoted for offering a contrary opinion.
Then to get `Set` again you have to: `new (mySet.constructor)([...mySet].map(fn).filter(fn2).map(fn3))` vs `mySet.map(fn).filter(fn2).map(fn3)`. 
I have written [simple class for you](https://gist.github.com/Ginden/822aaafa98a122e76fb22d9c21cf6060), I think it should match your needs.
What if in your first example the variable is a local variable. That would not result in an add property on window, so it's not a method then right?
How the fuck do you screw up an isNaN check.
Only functions defined globally get put on the window object. Function definitions can be nested though. Locally defined functions are not attached to window.
In my shop, we do ruby and JavaScript, so we use them both. We're pretty good about keeping things straight, but usually the context makes the difference if the term is transposed.
Well...basically it's like this, right? http://myselph.de/neuralNet.html
That demo was a huge inspiration(I even borrowed some MIT-licensed code from that demo. But I did of course leave acknowledgements in the code). But the huge difference is that this one is implemented on the GPU, but that one was implemented on the CPU.
When I used the example I added some code to process the canvas for multiple digits, maybe you would want to implement that, too: var data = ctx.getImageData(0,0,canvas.width,canvas.height).data; var array = []; var nextLine = canvas.width*4; var startingLine; var charStarted = false; for(var i = 1; i &lt;= canvas.width; i++){ var whiteLine = true; for(var j = (i*4)-1; j &lt; data.length; j += nextLine){ if(data[j] != 0){ whiteLine = false; } } if(!charStarted &amp;&amp; !whiteLine){ charStarted = true; startingLine = i; } if(charStarted &amp;&amp; whiteLine){ charStarted = false; array.push({start: startingLine, end: i-1}); } } //console.log(array); document.getElementById('nnOut').innerHTML = ''; for(var i = 0; i &lt; array.length; i++){ var width = array[i].end - array[i].start; var height = canvas.height; var canvasCopy = document.createElement("canvas"); canvasCopy.width = 280; canvasCopy.height = height; var copyCtx = canvasCopy.getContext("2d"); copyCtx.drawImage(ctx.canvas, array[i].start, 0, width, canvas.height,100, 0, width, canvas.height); document.body.appendChild(canvasCopy); recognize(canvasCopy, copyCtx); } 
Nice! I will take a look at that.
First, please outline your qualifications to make such a proposal.
Wow. Just... wow.
It's a dynamic site. CMS/API driven content.
It really depends on what you are building &gt;I don't think I need to implement 4 libraries and 3 frameworks for a simple app that generates a table Yes you are right. But I dare you to build a simple CRUD with vanilla JS, or a JS 3D game without using three.js, or a little real-time app without socket.io We, as developers, try to be as efficient and productive as possible, not using frameworks is basically refusing to use the tools you have in front of you. Would you build a wheel with your hands if you had a shiny hammer in front of you ? I don't think so. People aren't being obsessed with framework, they are just looking for the best tool to build whatever they want to build 
After a second thought and some testing, I think the above code examples are all correctly sandboxed by NX. The reason is: `/* do evil stuff */` inside your functions can not actually do evil stuff. These functions can only access variables from inside the sandbox, just like any other code in the string expressions. If you need some extra proof try to do something actually 'evil' inside one of your examples, like accessing the LocalStorage. It won't work. I will add a text case for this and post a link to it later today. Let me know if I am missing something important here. Thx (: 
Let's just come up with a name for it. And use that one consistently. How about **browker**?
I recommend you to read this: https://slack-files.com/T03JT4FC2-F151AAF7A-13fe6f98da 
If you are going to work with people just make guidelines, schedule and structure before starting code, that is what most of big teams do at work.
They dont think it be like it is, but it do.
It is not, I'm just new to javascript and I don't understand why for most of the people the only resource is implement this or that. My last 6 js related questions in stackoverflow (most of them simple/medium and solved with vanilla js) have a bunch of people answering with frameworks or libraries after specifying I want to use vanilla js. Do I really need a framework to make an onclick event that prints squares on the screen or a library to animate an element (finally I made it with css)?
That's my point, I'm not saying you don't need frameworks, I'm just saying people are using them bad. (loosing control of the code, innecessary bloating)
Many people learn libraries instead of JavaScript. For instance, everyone knows $('.class &gt; whatever') but not everybody will be familiar with document.querySelectorAll(). Many people are lazy, and would rather load a framework than have to think how to solve a problem themselves. Many people don't know better, and think that everything should be solved by using a framework.
it is indeed the case for [Pascal](http://wiki.freepascal.org/Procedure).
It's a (very) succesful startup in Paris, the CTO username is sKeLz0r as well, on github and other platforms. I met him while working In an accelerator in Paris, thought it was you ! 
Got the name from uncharted, I guess he did the same.
Yes. My comment wasn't `Set.prototype.map` vs. `Array.prototype.map` but `Array.prototype.map` vs. `Array.prototype.forEach` - in reaction to the parent comment. I don't understand the absence of those methods on *all* iterables either.
Are those decisions made based on the reputation of the person proposing them? Rhetorical question - of course not. Look at the *proposal*, not at the person.
Something I learned working with java: You don't need to master the language, you need to know how to program. Then learn the basics of the language and try to setup a large project, then you will see where the language lacks of tools and need external support. Same with javascript, I didn't feel like I need template or those ultra-bloated directives for front-end layouts but I really felt that I needed strong backend support and a library for showing statistics and analyzing data.
&gt; my experience is that it's just as easy to write horrible tangled Backbone based code. Angular, too. Most of the NG1.x ecosystem comprises blog posts showcasing massive, bloated controllers that can't or won't delegate their responsibilities to other services. No framework can protect against that.
&gt;It's a function referenced by an object's member, but a method needs to be "more special" than merely that. Agreed, if the function doesn't use the context 'this' then I don't think it deserves to be called a method. Storing a reference to it in some object or binding it won't change its behavior, so it's not properly a method.
Helpful as *always*
Closures are objects with one implicit `apply` function. In fact, crawling the scope chain is basically the same as crawling the prototype chain. In addition, the final scope is the global scope (window scope).
&gt; Building CRUD apps in vanilla JS is easy. I do it all the time. Building simple apps in vanilla JS is easy. When you build a complex app, you will either use a formal framework or create your own ad-hoc framework and then claim it's 'vanilla'.
Half the time I google something Javascript related it is to just get a reminder of the syntax for example forgetting something like how to write **getContext('2d')** . While I really like mdn as a learning tool and a go to guide for getting deep into a subject, sometimes I just want a fast answer. With MDN I may have to read through pages of descriptions of depreciated or experimental stuff before I figure out it's **getContext('2d')** not **getContext2d()**
If you have problems understanding the code is not the language itself.
Frameworks provide you with prebuilt code for common tasks that you would otherwise have to build yourself. This code has be tested and has been proven to work. This prevents bugs in your code and decreases development time. Some frameworks also provide an opinionated way of doing things. This provides your app with a common architecture that your team and new hires (as long as they have experience with the framework) will be familiar with. Opinionated frameworks also try to discourage bad practices by making it harder to use them, while also making it easier to use best practices. Frameworks exist to make your life easier. If they're not going to make your life easier don't use them.
Check out https://github.com/google/caja/wiki/AttackVectors Consider code that sends JSON to a server via an HTTP request. The attacker's `toJSON` function will be invoked and can modify the object however it sees fit. Now the server has received data modified by an attacker. Another example: If the attacker replaces `Object.prototype.hasOwnProperty` or `Array.prototype.sort` (or any number of other built-in methods), they'll be given access to any object and any array on which those methods are called. If the attacker traverses those objects and gets a reference to any sort of DOM object, it can get `document` and inject code into the page. Also `document.defaultView === window`. But access to `window` isn't necessary to do evil things, as shown above. Also, why is sandboxed code evaluation important in the first place? Are you expecting to execute arbitrary, user-provided code? What apps do that?
At that point it really becomes a heavy cost burden to the company or project you are working for/on. Someone has to maintain this code as well. Say both developers leave the company. Did the company set aside ample time for the developers to write up documentation on structure, code style, best practices, API documentation, state management, request handling, while they were busily rebuilding the wheel? If the code isn't particularly understood by anyone outside the group, what good is it for future developers. Again, a framework is meant to be consistent, so if both developers move on to a second project, they can re-use the same tooling they learned with the first, but may be better at it. If they didn't use anything at all, they are starting from scratch, again.
I updated the repo, your example is tested an documented. https://github.com/RisingStack/nx-compile
i may have had a similar issue within the last month. my fast solution was to use FileSaver.js (https://github.com/eligrey/FileSaver.js/) 
 class foo { myMethod() { return 1 +1 } } To remove any ambiguity.
Thank you for the response, I was pretty suped when I saw the new HTML 5 feature...unfortunately. the download anchor isn't supported in IE 11. its 2016 i can't believe a browser can be so terrible.
I found this too. Unfortunately, i need to use vanilla javascript to meet my needs. This is for a sharepoint site, where I can only add in javascript. Thank you for the response. It is appreciated. 
and fields or properties for things things attached to a glass that aren't functions.
Have YOU ever worked on a team before? The more consistency and standards set in place the better. We aren't here to reinvent the wheel. Use your tools, ship code, make $$.
Those features shouldn't be hard to add, unless I misunderstood something. The only real limitation is that you can't use too large textures, and textures are used to store the tensors of tensorflow in the implementation. So we can't have too big tensors, but they don't tend to be that big, so that's not a problem I think. I removed template strings because they are not supported in older versions of javascript(couldn't get it to run on my mobile otherwise). But you are saying that they are more portable?
do be do be doo
oops, I copied the readme from a different project. Fixed the youtube link. Thanks. The video is me just playing around with the live demo, kinda crappy not really worth watching. Documentation might come at some point down the line. There really isn't much to it right now, everything you need to know is in the ui.html file. Make nodes and connections between them. Other then that there really isn't anything else. Still thinking if there is better ways to implement things, also would like to add input elements into the nodes like how blueprint in unreal works. Then I need a way to serialize the whole things and deserialize it back. Hence the reason for no documentation, everything is still in flux.
jQuery is only used for ready() and for querying ".score". ready() can be replaced with: document.addEventListener('DOMContentLoaded', ...) https://developer.mozilla.org/en/docs/Web/Events/DOMContentLoaded jQuery(".score") can be replaced with: document.querySelector('.score') That's it. Your game magically got ~33kb smaller.
Ah ok, I see. Thanks for the tip!
I think that those are non-returning procedures.
UPDATE:: It seems like filesaver.js, could work. I just need to wrestle with it a little bit to get it working. Thank you.
where do you think you are? Hacker News?
&gt; You could just as easily argue that AJAX is a meaningless complication; after all, removing the reload flash doesn't obviously "add" any meaning. Not well you can't. AJAX is also faster and lighter on the server and bandwidth. The "reload" flash is just what you experience as the developer sitting in the same building as your server. Lots of users would experience a multiple-second delay (i.e. mobile users, dial-up users), which absolutely does interrupt the workflow for a user. And there are many actions that make more sense when you're staying on the same page rather than loading a new one. &gt; I think you are being too close-minded to the meaning that animations like these can convey. Then explain to me what information it conveys.