Wrote a cross-platform Chrome app to upload data from a medical device officially supported solely on Windows, from any computer.
What about for smaller projects with minimal needs? Feels like adding a whole library like lodash is overkill just for a handful of methods. 
I've made a few toy apps, and I continually try new frameworks and libraries to keep up to date on things. I've wanted a big real project to contribute too, but don't have any ideas.
I have absolutely no problems with polyfilling JavaScript into behaving the way JavaScript is supposed to behave. I *do* have an issue whenever somebody starts *adding shit* to the native JS runtime environment. Don't you dare attach your own methods to `Array.prototype`. *Don't you dare!*
This was presented at the nationJS conference in the DC area. I was at this talk and just to clarify you are correct, he was very much being sarcastic about them getting something right at w3schools. So no worries there.
Aside from the step-by-step hands-on tutorials of Codecademy, I would agree that in the field of reference and clear presentation, W3Schools takes first place!
I'll throw some constructive criticism in on how I think some of these examples could be done better. I don't mean any offence, however I feel your article is a bit misleading on how to properly use promises, and hides many of the true benefits and instead just using them as glorified callbacks. &gt; var items = [ /* whatever... */ ]; &gt; &gt; items.forEach(function (item) { &gt; callToFunctionAsync(item).then(function(result) { &gt; item.someProperty = result; &gt; }); &gt; }); &gt; &gt; // I want to continue once all the async calls are resolved You're using a very nice monadic functional construct (promises), but writing in a very imperative style and throwing away most of their utility. To get the full benefit of promises, you should ideally aim for a more functional approach, avoiding side-effects such as mutating the original array while in the middle of iterating over it. (This is a really good way to introduce race conditions). A better approach - use a purely functional style, and return a promise to the new value instead of mutating the original object. var updated_items = Q.all(items.map(callToFunction)); &gt; Actually, this is such a common pattern that I suggest you to create an utility method to manage No real need to further abstract this, the common pattern is map and traverse (`q.all`). &gt; Our second pattern looks a lot like the first one, but there’s a twist. This time we want the asynchronous calls for each of our items to be made in order, not in parallel like in the first pattern &gt; var items = [ /* whatever... */ ]; &gt; &gt; // We create a promise which is already resolved (returning null) &gt; var masterPromise = WinJS.Promise.wrap(null); &gt; &gt; items.forEach(function (item) { &gt; // This is where we chain all the asynchronous calls one after the other &gt; masterPromise = masterPromise.then(function() { &gt; return callToFunctionAsync(item).then(function(result) { &gt; item.someProperty = result; &gt; }); &gt; }); &gt; }); &gt; &gt; masterPromise.done(function() { &gt; // Continue... &gt; }); This could be represented a little cleaner with reduce, which also lets us avoid any side effects as above. function runInOrder(items, asyncfunc){ return items.reduce(function(lastPromise, item){ var initialPromise = Q.when([]); return lastPromise.then(function(itemsSoFar){ asyncFunc(item).then(function(result){ return itemsSoFar.concat(result); }) }, initialPromise); }); } var updated_items = runInOrder( items, myAsyncFunc ); &gt; Mixing synchronous and asynchronous paths It's often easier to simply lift everything into an async context when you're mixing and matching. var result = (x &lt;= 5) ? Q.when(foo) : callToFunctionAsync() 
I would start with basic algorithmic footprint/complexity. Afterwards begin learning standard data structures (tree, graph, etc). Perhaps afterwards learn various sorting systems and their relative structures &amp; costs. Then move on to cocaine. Once you have a good dealer see if you can try your hand at glyph rendering in cairo/freetype. If you find yourself with three free days and an 8-ball give layout a try. Especially linear constraint systems. Those are amazingly... i don't have a descriptor for how it should be called. Finally, and of all the best, is rendering. Get a good handle on DirectX SDK or OpenGL and use bitblts from painting to push the rendered contexts to a compositing layer (you'll need to BRGA to RGBA your buffer!). Oh, and after that learn HTML, CSS and Javascript....... Jesus I think I should stop trying to develop browsers.
Would you mind expanding on this? It sounds interesting.
 &gt;I've wanted a big real project to contribute too, but don't have any ideas. https://assembly.com/discover
I am going to take this advise on board, i'm at the stage where i'm still learning core concepts, this will be a great footpath, thanks.
That has been my thoughts as well, thank you.
I don't think the approach of sticking with plain js is for everyone, i understand that progression quickly is a motivating factor, the quicker you see positive results is great. I'm considering imposing the restraints of no frameworks or libs for a while, mostly because i've been encouraged by the head software engineer at my company, to tackle js like a mechanic fixes a car. I really want to be the go-to person for javascript and be able to look under the hood of any framework and library and understand it, albeit with some effort. I appreciate the comment and the link, i'm going to add all of the links/books to my reading list, i think 'is there a better/another way to do this?' is the philosophy of any good developer right?
Thanks for the links! I certainly need some confusion cleared up, i'm sure they will help :)
Thank you for your recommendation, i've completed the course on codeacademy, but i'm going to take a look at teamtreehouse.com. :)
I'm glad i'm not alone! I think when working with a team of developers, it always helps to have a specialist in an area, being that guy could be invaluable.
It's definitely fun! My first project is a text-based adventure game, it's great having to solve problems and getting things to work, but as a beginner, sometimes it really takes some brain power. Thanks for the reply.
I was pointed towards jQuery first and then after a little while, i went to vanilla javascript. The result was me being confused with for example..click events, is it .on, .onClick, .click, .addEventHandler? I kept getting confused which was what, in the end i felt that i needed to stick to vanilla for now and so i can avoid everything meshing together, at least until i'm comfortable with it doing so. Thanks for your reply.
Thanks! going on my reading list.
And thank you sir! going on my reading list also.
I think you make a good point, thanks for the reply :)
Thanks for the kind words, i'd like to think i'm certainly both curious and determined, i really enjoy JS and i think in recent years, there's been a lot of buzz about all the possibilities the language offers. Your recommendations,have been noted.
I agree, i'm going to move onto jQuery and then frameworks such as backbone and marionette JS. My jobs front-end MVC system, uses these frameworks.
I made [Cluckles](http://cluckles.com)
This is actually something that I'd been wondering about when I first looked at React because if it's all about building reusable components having dependencies to CSS doesn't make any sense. React components should include CSS to be truly reusable and portable. Writing CSS in JS is pretty crappy though, especially when it comes to pseudo selectors. As I see it there is no real solution available.
I think it should be: function runInOrder(items, asyncfunc){ var initialPromise = Q.when([]); return items.reduce(function(lastPromise, item){ return lastPromise.then(function(itemsSoFar){ asyncFunc(item).then(function(result){ return itemsSoFar.concat(result); }) }); }, initialPromise); }
Good catch - I believe you're correct. 
Building react.rocks.
Criticism is very much appreciated, thank you. I was taught procedural programming and am not really versed into functional programming. I know it's very trendy these days, but I don't really get its assets. &gt; (...) you should ideally aim for a more functional approach, avoiding side-effects such as mutating the original array while in the middle of iterating over it. (This is a really good way to introduce race conditions). I've thinking this particular sentence over and over for like 10 minutes and... I don't get it. What's the problem with mutating the items inside the array while looping on it? Why would it introduce race conditions? &gt; It's often easier to simply lift everything into an async context when you're mixing and matching. Well, I think that's what my example is trying to demonstrate. I don't really like ternary conditions because they lack readability. I wrote this third pattern because just a couple days ago I found a code written by a colleague, like so... var result = someFunction(); // Checking is the function returned a promise if (WinJS.Promise.is(result) promises.push(result); function someFunction() { if (somePredicate) return 12; else return someCallAsync(); } ...and I choked on it.
It was a joke...
What *THE*? There are a ton of these on NPM.
 .mysite header.myheader nav.mainnav ul.navlist li.navitem a.navlink span.icon { color: red; } .mysite header.myheader nav.mainnav ul.navlist li.navitem.is-active a.navlink:hover span.icon { color: green; } I have seen it happen. Still sends shivers down my spine. *shivers*
Unfortunately that also has a perf impact. Whenever the browser sees an element with the button style, it needs to crawl up the dom tree to see if any parent has the mysite style. I prefer prefixes to avoid that, e.g. mysite-button. That doesn't solve any core problems. It's just what I do. The FB dev will also need to consider the perf of a JS solution. Even though the JS is fast, I believe that most browsers are much faster with CSS classes than a set of styles applied as one-offs on individual DOM nodes. If React could resolve the dynamic styles to CSS classes in the majority of cases, this would be really awesome. The other downside of dynamic styles is that they're harder to debug. Not from a JS sense, but from a designer sense. CSS styles are easy to look through. When styles are being generated dynamically, it's harder to see what's going on from the Chrome dev tools.
it's not, the person giving the talk just didn't know how to write CSS correctly.
I'm confused on the initial problem that was trying to be solved here... For example, if I was given this task here's how I'd write the button dropdown CSS: ``` .button { ... } .button.depressed { ... } ``` Is this not the *exact* same thing as the React CSS replacement he showed on the next page? And I really don't see the point of yet another precompiler for CSS...Sass/SCSS or LESS seems to work for most people.
the upcoming web components standard is the *correct* way to solve this problem. http://webcomponents.org/
"16 ways that JavaScript can change your life! Number 4 made me cry." 
Testers **hate him**!!
In case anybody's interested in simplified SPA development, I've created a nice and simple boilerplate for MithrilJS https://github.com/fristys/mithriljs-boilerplate
What an odd question 
I wrote a self published book about the MEAN stack with a focus on node.js parts. Here's a link with an applied coupon if you're interested. https://leanpub.com/yfa-nodejs/c/Only4Bux
That's an awesome use of Chrome APIs. I'd be interested in reading a blog post about it if you have one.
There will be. This talk was given at NationJS on Friday. They recorded it but will need time for editing etc. I'm sure once it is up there will be a link on the NationJS site.
 undefined = function() { return Math.round(Math.random()); }
This seems like a huge hack to work around a bunch of "problems" they supposedly couldn't solve... which many other teams in the industry solve every day with no difficulty at all. Programmers working in languages without formal module/namespace management solved the name conflict issue about a millennium ago by using `module1_functionA()` and `module2_functionA()` as the names. More recently, various talking heads in the CSS world have advocated things like `component1--classA` or `component1_classA` as if it's some radical new idea, which is mildly amusing but doesn't mean the idea itself is any less practical. Similarly, the wider programming world figured out a long time ago that composition is usually a better default than inheritance. Several of the problems mentioned in these slides don't exist in the first place if you combine styles through composition instead of defining things one way and then overriding some of them under more selective conditions somewhere else. Again, plenty of the well-known CSS talking heads have suggested more structured/systematic variations of this principle for those who need to work at very large scales, and there are plenty of real world examples of the idea working well. Too much modern web development seems to be about fixing problems that were only created by making poor choices in the first place, and then building one needlessly complicated "solution" on top of another. Get the basics right, and a lot of these frameworks and heavyweight automation tools simply aren't necessary.
Over engineering at its finest.
&gt; Unfortunately that also has a perf impact. Whenever the browser sees an element with the button style, it needs to crawl up the dom tree to see if any parent has the mysite style. I prefer prefixes to avoid that, e.g. mysite-button. But using that also has a performance impact, because now the browser has to parse the extra length of the mysite-button identifier every time! I imagine the effect would be similarly devastating in either case.
Short answer, there are many ways to skin a cat. So yes. But then again the main problem won't JUST be connecting clients to each other, it will also be transfer of the files. Does the assignment specify on how large the files are etc? I am asking this, because our biggest example is something like BitTorrent. They split the files in smaller chunks and create hashes to perform sanity checks on those small bits. So if a chunk is corrupted or incomplete that chunk won't resole the same hash as a complete chunk: Let's create MD5 hashes of the words Sanity Check(you can generate these with md5 libraries: https://github.com/satazor/SparkMD5) and sets similar to it: Sanity Check: 704eecbbc342a50f0523253f4ce0665d Sanity Fleck: 62c26e02e66445587873bff1d335198d Sanity check: f9302e03a99b7077287f26fc3f99ea1f Already from the first character you can see these md5 hashes are not the same. You can perform similar operations on files, or chunks of files. So to ensure that everyone is talking about the same thing you would like to have a hash of all the files you are sharing. Let's forget for a moment that we can also slice it up in smaller chunks. We would still like to know that a person sharing a file has the correct version of it. The first seed would send the hash and the file and the person receiving it can become a seed if the file is complete and the hash corresponds with the hash of the first person. Now the next person can start downloading the same file from both persons. In the case just above here it probably will download from only one person, unless you do decide to slice 'em up in several chunks. This would ensure a more 'pure' way of p2p because more peers can contribute to one download. So as I said, there is a plethora of ways to do this. You just need to decide on how complex you want to make this. Easiest implementation: Server collects ids Client receives ids of other peers as well Client shares file Server collects information of which files are shared by which clients. Client receives list of files shared on server by peers Client connects to right peer for sharing of file. Makes sense?
It is though, write a CSS rule and it applies to the entire document instead of being isolated to the module you intend. It's all scoped to the document unless you use inline styles.
I wrote some Nodejs scripts to analyze the leaked Adobe passwords. https://github.com/geon/xkcd_1286
You can scope it to an ID set to the body tag, and now you have scoping to the module/page you want rather than every single page.
I have an interest in coding and I find these responses to be inspiring. Being able to use this technology for things outside of work is extra incentive to learn it, in my opinion. That alone seems to to separate this field of study from most others.
Thanks for the link, thats just what i have been looking for!
&gt; `var canTheImportantDudeWrite = config.get('users.someImportantDude.credentials').write;` // true This was where I started to suspect I was being trolled.
I'm a fan of React, but it seems to me that a scoped stylesheets polyfill might have been a better solution. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style I'll grant that this wouldn't do *everything* they wanted, but it likely deals with the most serious issues around styles stepping on other styles.
I didn't even get it was humor
Why you frameworks when vanilla is prettier &amp; faster... _.isUndefined(value) || _.isNull(value) Is equal to: value == null
I wish this exists so that requiring css in webpack makes sense.
I especially like the switch pattern... also known as using the switch statement. :p Sorry, but this list is actually really pathetic. Most of the things listed aren't patterns at all. They're tidbits of random information. And the few items that are legitimately patterns are poorly represented.
Thank you for saving me time to read the article and making me chuckle as well. Switch pattern FTW!
Ok. I'll bite. Clicking now... I'll take the Single var Pattern. Thank you.
Since you brought it up, what do people think of the switch statement? I think it's quite unnecessary. Using if statements is about as readable to me as using the switch statement. And you can't forget the "break" keyword when using if statemets. Most answers on stackoverflow state that the benefit of switch is performance and readability. I'm not that interested in hyper-micro-optimization, and I'm not convinced using the switch statement is more readable. The only good argument I stumbled upon is that when you're using if-statements, the reader can't instantly tell if all the if statements compare the same variable. I guess that's a good argument, but doesn't seem beneficial enough to create a new control logic construct to the language.
I use moment.js all the time as well and I think it's a great library but I really wish it was immutable. But they're been discussing this and decided so I know it's not going to happen.
I couldn't find anything about CSS on that site. Do you have a link for me?
switch statements are great for times when you want a cascade of things to happen. Yes it's hard to read but it has it's uses.
I happily use switch instead of multiple comparisons against single variable from simple reason - it's obvious what variable does the switch operates on. While switch takes more lines for the same thing, I find it more readable if you're comparing one variable multiple times with simple values. Plus with ifs, to know what's going on, you need to check if there are no different variables and/or different comparisons. The only way to complicate it with switch is using variable in case and omitting the break in a case with code. Compare for yourself: switch (type) { case 'box': runBoxAction(); break; case 'target': ...a few lines break; case 'single': case 'miltiple': recountVelo(); break; case 'shelf': dumpVelo(); break; case 'chair': dumpVelo(0.5); break; case 'stool': dumpVelo(0.6); break; default: console.warn('Inapropriate type sent to updateDBR'); } vs if (type === 'box') { runBoxAction(); } else if (type === 'target') { ...a few lines } else if (type === 'single' || type === 'multiple') { recountVelo(); } else if (type === 'shelf') { dumpeVelo(); } else if (type === 'chair') { dumpVelo(0.5); } else if (type === 'stool') { dumpVelo(0.6); } else { console.warn('Inapropriate type sent to updateDBR'); }
Is this a joke?
I created a messaging board for me and my girlfriend to chat on. You can create named conversations, tag them, and give them labels. We have ongoing conversations on lots of different topics going back about 9 months now. It's better than facebook/texting because we can have more than one conversation going on at the same time. Backend is in Django, frontend uses Backbone, Exoskeleton, Browserify. It's a great place to experiment with stuff. It's also hosted on Heroku's free tier, static assets by Amazon's S3 (also free). The only dollar I've paid is in the domain which is like 9.99 a year.
Stuff like this gets written, and the community wonders why it has a reputation for being a mishmash of questionable technologies 
This sounds awesome! Would love to look at the source if it is available.
When people say native methods are "slow," it's really a relative comparison. This kind of slowness will not be your bottleneck most of the time, especially in client-side code. In the rare case it is a bottleneck, say you have a `forEach()` loop in a hot spot and it's sucking CPU cycles, you'd be better off switching to a `for (;;)` loop than switching to lodash. That way you avoid creating the function object and all those stack push/pops and variable environments which result from functional programming in the first place.
also 194 sloc for 4 contributors. seriously? its worse than [this](https://gist.github.com/jbebe/5884598)
That is a really nice idea. You'll be able to go back and read them when you're old. :)
 (function (undefined) { // where is your god now })();
Essentially this post (with minor word changes) has been cross-posted three other places, without declaration. Please read this: https://en.wikipedia.org/wiki/Crossposting
Yeah I would agree that performance usually isn't a huge concern. Readability and maintainability are usually more important for me. 
Node-specific alternative with better handling of environments: https://github.com/lorenwest/node-config
The immutable way to do it would be to use a linked list. You can push and pop it without modifying the underlying elements. If the assignment requires you to use an array then I can understand the frustration. 
Wow. All that for 2 people? Even Slack/HipChat don't have all these features Edit: not being sarcastic
Consider taking a look at https://github.com/gajus/pie-chart and see if you can learn or even contribute.
it's requiring an array :/
Very useful thanks! 
What? Another one? I like safe property navigation, but this is an up and coming feature of c# which I hope typescript gets. I disagree entirely with your opinion of type safety though.
Read it before. Type safety means you need to define interfaces instead of dynamically adding, but the payoff is huge. I write a huge SPA which would be near impossible without type safety.
Everyone my age 33+, used w3schools A LOT. It was recently that the internet decided, and shown how, it was a sometimes bad resource. 
For spite I'd rather just use the coffeescript implementation. Less LOC, no interface to write, compile to js and it runs anywhere...
The dark parts? More like 'fundamentals'.
 x = false or 5; // x == true; x = 5 and 4; // x == true; x = 1 == "1"; // false (== compiles to ===) I think the non-boolean behavior is quite nice in JS. So the first line should be `5`, the second should be `5` and the first should be a syntax error. Force people to use pareantheses with this to be explicit: `x = (1 == 1)`
Indent by four spaces to get code formatting in markdown, example: x = false or 5; // x == true; x = 5 and 4; // x == true; x = 1 == "1"; // false (== compiles to ===)
Try running "grunt --stack mytask" and see what comes up
I call these types of libraries "artificial-sweeteners" because they exist solely to "enhance" javascript with what *they consider* to be sugar. It's totally cool if people are into these, but I do have reservations about them which makes me feel as though the whole approach is over-engineered: 1. Javascript is *the* language that you want your developers most comfortable with, because it is the actual language you end up compiling down to. 2. Debugging becomes more complicated. You not only have to debug your own application, but also debug when your compiler creates code that's not exactly the way you want it. 3. You have to train everybody on your team, and all new-hires to use your chosen artificial-sweetener, then re-train them if you switch to another. 4. The available talent pool is now fragmented. Maybe you'll find the right person, but they are unwilling to use your chose artificial-sweetener. 5. A large proportion of open-source javascript developers contribute solely in vanilla javascript. You would be limiting the amount of people that are willing to contribute to your project.
I'm wondering if you had progress with that question... The first time I fired spy-js in the browser I was fascinated, but I couldn't find any useful way to use it on the server, maybe due to the same reason - everything is made up of promises.
Hrm, for some reason I only had 3 spaces. Weird. Anyway. Fixed it.
This is basically how I feel about all of the JS "replacements" as well. Until browsers natively support something other than Javascript, then you have to know Javascript. Why add the cognitive load of also having to know another language that is then compiled down into illegible Javascript?
Website looks stupid on mobile. There's a menu floating in the middle of the screen, obscuring the content.
FWIW I agree with you. Being able to reference other config values within a config is helpful to allow for value composition, even if the example is a little contrived. The rest of the stuff is of questionable value.
This is cool. I wonder why you can control with css the circle color, the remaining % color, but not the % color itself. Why not allow control of all (or none) colors with css?
&gt; I started Spider because none of the existing languages that compile to JavaScript were perfect. *Situation: There are 14 competing standards*... All that being said, sometimes something clicks and it becomes a viable alternative. Lots of people eschew CoffeeScript, but it makes some teams happy and there's zero shame in trying to create a tool that makes people happy.
1. Why is it easier? It seems that this approach is a combination of hiding certain javascript features that you find ugly, and introducing a new set of patterns that one must memorize in order for it to "be easy". 2. On your own documentation you have parts like (NOTE: I might get rid of this). This is another advantage of vanilla Javascript: it's built upon a real spec that is immutable, and backed by a strong community. I feel comfortable writing my code against javascript because I know it will continue being useful well into the future. Spider could be abandoned next week. 3. Real large apps benefit more from ubiquity than sugar.
It's likely better to control it with code, because there may be more than 2 arcs. If you used CSS, you'd have to generate 2+ class names to handle all the different colors. D3 has standard color scales that work well for most charts: https://github.com/mbostock/d3/wiki/Ordinal-Scales#category10 If you don't like those, there's always ColorBrewer: http://colorbrewer2.org/
[They're probably talking about the shadow DOM.](https://www.youtube.com/watch?v=Is4FZxKGqqk) At to 2:25 he talks about the benefits of the shadow DOM with css. 
I agree. Any abstraction between the programmer and the language itself might be nice (and fun) in the short term. But when it comes to brass tacks, you're just adding more maintenance.
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=927#Explanation) **Stats:** This comic has been referenced 993 times, representing 2.4882% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_clxuuyj)
"optimization 3 - substitute `i++` with `i = i + 1` or `i += 1` to avoid excessive trickiness" Really? "optimization 1 - cache the length of the array with the use of `max`" And I've run this test on multiple browsers and have not had any predictable results: http://jsperf.com/improved-really Really you should do what is most readable. Last I checked Safari ran the non-cached version 1% faster and Chrome ran the cached one 4% faster. But basically: not faster.
Pretty much it. I have what I feel is a little bit of a weird mental discordance because I like (and use) CSS preprocessors, but dislike the JavaScript "equivalents". But I rationalize it by thinking that the preprocessors give me more in CSS that make it worthwhile. I also feel it's different pre-processing a programming language vs. styling markup.
I just make sure to comment it with "Intentional fallthrough". It's handy if, say, one value involves doing everything another value does, plus a bit. 
Spending the day with my nose in Interactive Data Visualization, this is motivational, thanks.
1. Safe object navigation is a "nice to have", but it's no replacement for proper testing which would have caught a problem in your call chain in the first place. 2. Then why call it "*The* Next-Gen Programming Language for the Web"? That is a pretentious self-given title that implies that the author believes it's *more* than just a proposal. 3. Because sugar is part of the out-dated "opinionated programming", "convention over configuration" paradigm of the Ruby on Rails era. Today's architecture is moving towards service-oriented-architecture for complex problem domains, and the benefits of using the native language in your service and application layers far outweighs whatever "sugar of the day" there happens to be.
&gt; It is designed for developers who are experienced with other programming languages (C++ or even worst : Java) and who think that JavaScript is a light version of Java Is there anybody that actually still thinks that? I'm not sure that's been a common mistake since 1999.
Try using a src property on the video tag instead of the source element. If that doesn't work, maybe try removing the video element and creating a new one. 
But they used the word 'elegant'.
Not op?
The phrase "jQuery Design Patterns" should have been enough to save you the time of reading the article.
lodash's _.curry? (or any other curry implementation)
There is an introductory javascript workshop on nodeschool called [javascripting](http://nodeschool.io/#javascripting).
Replied to another, see http://www.reddit.com/r/javascript/comments/2lqfl1/in_what_ways_have_you_used_javascript_outside_of/clxxbrl
Now THAT is cool. Sorry for the repost / old idea, I didn't know that this already existed! It looks like they don't have a fixpoint combinator yet, do they? I'm just trying to keep goals in sight.
Pretty sure you're being sarcastic. I said better because it fits our needs perfectly. Definitely not suggesting what I made was objectively better than other options out there. 
I would only use the keyDown event, unless blur is doing more... The timing between the two events alone would be a nightmare to maintain. Can you be certain, keyDown is called before blur all the time? In situations like these, it's easier to funnel things into a single code path. Use the event that can encompass everything (i.e. the keyDown event). Also, if the keyDown is triggering 'blur', try e.preventDefault() within the keyDown handler. That may cancel the blur event. **Edit** Misread the problem...
Thanks for all your comments guys, @zubie_wanders nice catch there, what @skitch920 said is totally true, another interesting thing is why not control the text style in a class? I tryed to do that but it mess up the transition totally, you could try it to see it with your own eyes.
If you already have any previous programming experience and/or like learning through code examples: http://shichuan.github.io/javascript-patterns/
I gave up. I don't think spy-js is useful for node because everything in node is asynchronous. I LOVE the debug feature for node in webstorm. It makes me feel like we finally have the tools from 2006 again.
I actually didn't even see that when I was looking through it. Good catch
Im with you about that @vlatheimpaler, I will do that modification in honor to this comment, please check out the formula I used, I tryed different w/h/r and it's always in the middle in the y axis.
You think the first way feels like a hack but the second doesnt?
Why should things be grueling? If we can get a rough approximation of knowledge and experience necessary for a specific task without going through the same hardships, why shouldn't we take the faster and easier route? Should we force people to go back to punch cards, assembly, and C before learning JavaScript? This is a "In my day we..." response, but this isn't those days anymore. Then there's learning methods. Two big methods for learning are theoretical vs practical. Theoretical learning is like going to class to get a broad spectrum of knowledge that may or may not be applicable to what will be done in practice. It can give a good foundation of terms and practices, but what good will knowing how the merge sort algorithm works when the closest you ever get to it in your day to day job of, say, web development, is calling the JavaScript 'sort' method on an array? That was, relatively speaking, wasted time and effort. Practical learning is like deciding what you need to do and then figuring out how to do it. It means you'll only ever learn exactly what you need for the task at hand, but lacks a basis for where to even start and leaves a lot of gaps and missing common terms and processes to discuss with others about things. It can be a faster way of developing though there can also be more headache in trial-and-error. Neither of these two methods are 100% correct. The best methods are some degree of blending between the two to suit what works best for the student. Some people need more real-world examples to understand how or why something works, and others need more theoretical or abstract rules to apply. Learning just by theory means when a real-world problem crops up they try to hit a nail with a screwdriver. Learning just by practice is like trying to use a table knife on a screw. This brings me to my next point about learning progression. Where do we start? Where do we go? The answer for both of these is "It depends". What do you want or need to do? Are you a stay-at-home mom who just wants to add some animations to your website, moving some text around or hiding something until the user clicks on a 'read more' link? Start with those specific tutorials and search. As long as you can follow directions then you don't need to know what closures are or how object prototyping works. Just use the library/framework and get it done. Are you looking to make a web game with complicated rules on player interaction, or a business application for ordering custom pizzas from a local franchise? Learning more about programming basics (variables, functions, objects, methods, data types) makes sense. From there you can look at libraries and frameworks to ask why they do what they did and build from that. For someone who learns better from practical examples looking at existing code is the better learning tool. For someone who grasps abstract concepts better then learning the terms and processes is better. And sometimes vice versa depending on the situation. There is no 100% exclusively right method or progression. There's no reason why someone can't start from one side of the track and move over to the other, though. Telling someone that if they didn't start from the same place you did, or have the exact same knowledge you do, is artificially limiting, discouraging, and turns this into a "No True Scotsman" argument.
Thanks @alfredwaltz, I will give a look and see what I can learn and if I'm good enough to contribute :).
That is a really good way to look at it. Although the ES6 spec is starting to be implemented, it still isn't nearly as fast as the CSS3 spec updates in browsers. I do think that there are inherent limitations to CSS that make using something like Sass/Less/Stylus attractive and those same limitations don't exist in Javascript, in my mind. I think that is why I prefer the CSS preprocessors but not the JS ones.
Good read and nice directed graphs. Even the Table of Contents made me chuckle. But this article should really be called "**Prototypes** Considered Mildly Confusing". Pretty simple though, don't `var x = new Type()` and then reassign `x.prototype = ...` 
[What's the difference between Currying and Partial Application?](http://raganwald.com/2013/03/07/currying-and-partial-application.html)
I figured out that C#'s take on switch (you either have a code block with "break;", either no code in given "case") is quite reasonable and readable, while banning single most problematic thing, which is fallthrough when you actually omitted "break;" by mistake. As additional note, C# has a really neat feature - [goto in switch](http://stackoverflow.com/a/174223) when you really need a fallthrough ;) 
Awesome work! If you are OK with some constructive feedback: Consider putting related variables into an object. h,w,r, etc is a good example. It keeps things related in a container so that as projects get bigger, they make sense faster in context. Consider renaming variables to be more expressive. Example: h could become height, or even better containerHeight. If you do the above suggestion, container.height is also acceptable. is rScale variable unused? if so remove line 12 Move donutChart definition last. You are using functions before they're defined. Line 87. Arg newAngle. Pretty sure this is unused. It's late here, I might be wrong. All in all, good code.
Avoiding libraries and frameworks is a great way to fall victim to the "Not Invented Here" syndrome. This is a Very Bad thing in both the long and short run as it limits your ability to expand and speed of expansion. Trying to reinvent every wheel you find will slow you down tremendously. Instead focus on the wheels that you actually need to look at at any given time. Only reinvent the wheel once you understand most of the reasons the original wheel was made the way it was and why it's not working in your specific case, and only when you can prove with measurements that you have a better method. For example, one huge reason I see many people say they don't want to use a framework is because it's bloated and does more than they need. Instead they'll make their own framework that does a tenth of what the 'bloated' framework does, but then as the needs of their project expand so does their framework and before long they've reinvented most of the one they called bloated but without the benefit of experience and battle testing (performance, design, etc) so it's actually much worse.
Although there are some excellent patterns you can build yourself or borrow from libraries like this, don't overlook `Function.prototype..bind`, it performs left partial application: function plus (x, y) { return x + y; } plus(2, 3) //=&gt; 5 var plusTwo = plus.bind(null, 2); plusTwo(3) //=&gt; 5
http://eloquentjavascript.net
In this thread: People that think there can be only one language for every single purpose.
What are you using, Notepad? Check out Sublime Text and its various plugins or WebStorm (my personal favorite).
Try using VideoJS. It'll give you HTML5 video support, play, pause, volume, CSS styles that you can override, and error control. It's much easier than doing it yourself, unless you're wanting to learn how to implement it yourself. http://www.videojs.com/ If you need thumbnails you can add the [video-js-html5Thumbnails](https://github.com/ajbogh/video-js-html5Thumbnails) extension that I created for VideoJS
hmm, there's no open source way to generate [specificity graphs](http://csswizardry.com/2014/10/the-specificity-graph/) afaik :)
There's sorta a limit where technology can help out, and I think you're right there at the edge of it. More tech isn't really going to solve this, because it sounds like you straight up don't know where to put the brackets. Each set of brackets is like an indent level in python. To say "Why doesn't the IDE know where to put the brackets" in javascript is the same as having a python file with no indentation, and asking "Why doesn't the IDE know where to put the indentation?" Just indent like you would always do in python, and for every new indention level, just put function Foo() { //code goes here } That's the easiest 'work around', but it still kinda shows the lack of understanding of the point of the brackets.
Not sure if this counts as "ONE" since it links to a lot of other resources, but there's some good info http://superherojs.com/
[Here] (http://addyosmani.com/resources/essentialjsdesignpatterns/book/) this is an excellent resource for design patterns. Better than this list that was submitted.
I went through that.. I thought it was really boring and if i didn't already have a good command of the language I think i would have found it too terse/without much explanation. I really don't understand the audience it is meant for. Maybe for a very experience programmer who happens to never have seen Javascript? 
You got that the wrong way around. The IDE can do the indention based on the brackets. Whitespace is arbitrary, brackets are not. Many IDEs/editors will automatically insert (soft) quotes/parens/braces/brackets and also auto indent your code. So, when you write "if (", the closing ')' will be already there, but it will be overwritten with your ')' if you decide to type it yourself (it's a "soft" one). If you then type '{' and hit return, the next line will be indented and the closing '}' should be already in the line below it.
You can "re-indent" with Sublime Text. 
there are good answers here, but it would help to know if you have any other programming background. Have you programmed before? What languages? There is a big difference between "Learning how to program -- using javascript", and "Learning to program javascript" If you are learning to program, and want to start with JavaScript, go to CodeAcademy or KhanAchademy. Otherwise, use the other links listed here.
I was not sarcastic. Neither of these options I mentioned have tags for conversations. Threaded conversations is one of the most suggested features there, in fact. It's really impressive you did a functional chat that includes these features and that actually useable and useful to you. Would be great to see the source code. Since we got a conversion going, my latest home project was a pubbing tracking app for my friends. It's rather silly and would be better done in Excel but it let me play with FireBase and TypeScript.
[Convert](http://nbviewer.ipython.org/url/norvig.com/ipython/xkcd1313-part2.ipynb?create=1) or solve [xkcd1313](http://xkcd.com/1313/) for javascript.
[Image](http://imgs.xkcd.com/comics/regex_golf.png) **Title:** Regex Golf **Title-text:** /bu|[rn]t|[coy]e|[mtg]a|j|iso|n[hl]|[ae]d|lev|sh|[lnd]i|[po]o|ls/ matches the last names of elected US presidents but not their opponents. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=1313#Explanation) **Stats:** This comic has been referenced 28 times, representing 0.0701% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cly7qgv)
Ah my bad. Shouldn't have assumed - sorry about that. Thanks! It's actually all pretty easy when you don't have to worry about user restrictions/permissions and stuff like that. Every topic can be viewed by any user - there's no customisation in terms of what content is displayed. Greatly simplifies things on the backend. Pubbing tracking app is pretty cool. I almost made something like that with a friend of mine, as it happens. Firebase also looks very interesting. Hadn't seen that before.
String interpolation and lambdas shouldn't be your key features - I can use both of those today with jsnext/harmony. I'd love to see what you've called Safe-Object Navigation in the next version of JavaScript. It seems to be one of the most glaring low-hanging fruit in the language.
I'm currently working on a open source tool to take screenshots using Node-Webkit. My problem is that we constantly share screenshots as a team, and with our customers, and for personal that the solutions present today don't solve. Further to that point most of the screenshot solutions out there are riddled with ads, costly, or often flooded with backend problems. My hopes is that an open source solution will make it easier to handle. Here is the Github if you are interested: https://github.com/blazedd/node-screenshot
&gt; I've heard to avoid codeacademy I think there is a bias against Codecademy because it tops out at a low level. However, if you're a beginner with no programming experience in other languages, there is nothing wrong with starting out with their courses. When you're done you can move on to other resources. 
Why not fork it and try it. If it gains support then it is bettering the community at large.
THANK YOU! That just worked fine :)
That's the plan. :) I back up the database regularly. Even after just 9 months it has been nice to go back through all the messages with her. 
Thanks! I'd love to, but I'm afraid my github has my real identity linked to it, and I'd much rather my reddit account stay anonymous.
It seems strange to me that you consider learning the language itself to be impractical. In fact, I would go so far as to say that more people should focus on learning the language. There are too many people out there with only a passing, superficial understanding of what they are doing. Why don't you go implement a slider from scratch without help? Your implementation will not be perfect, but you'll already be a step ahead of your peers who didn't bother to build it themselves.
Here is another one http://conceptf1.blogspot.com/2013/11/best-resources-to-learn-javascript.html
Or you simply don't document them in class user documentation, and enforce their privacy with disciplinary actions (I suggest corporal punishment) in the team.
https://storify.com/YumaSoft/the-benefits-and-advantages-of-modern-javascript-f 
Soon we will all be using them in ES6 too. 
http://javascriptissexy.com/how-to-learn-javascript-properly/
U can use HTML5 History api (which is a real URL and crawlable)
This only seems to say do A (pattern) instead of B (anti pattern) without explaining why A is good and B is bad.
Closure - http://prettydiff.com/guide/closure_with_jsscope.xhtml DOM - http://prettydiff.com/guide/unrelated_dom.xhtml
When the IDE is not smart enough you need to just use an external beautifier: http://prettydiff.com/?m=beautify
i made http://dopeslingertycoon.com and I am planning on using it to build an application to help my girlfriend's academic work.
These are exactly the issues that "Functional Reactive Programming" libraries are designed to address. You might want to check out bacon.js, kefir.js, or Rx.js. 
MDN
Ctrl-Shift-J (;&gt;)
For me it's not so much about lack of tools as it is about existing tools sometimes not being good enough. Chrome Devtools lacking editing of formatted JS is one example. Inability to quickly view large data:url images in a browser (without crashing it) is another. As for JS libraries, it'd be tremendously useful to also solve existing issues. JSHint and JSCS are great but need improvement and could always use help (adding ES6 support, finer linting capabilities, etc.) Also take a look at https://www.bountysource.com for some of the more pressing existing issues.
www.codeacademy.com
PagerJS a routing libary for Javascript(knockout.js). Page.js a routing libary for Javascript. 
Stick a `_` in front of it. Don't document it [1]. Sounds like simplicity to me :) [1] Other than a single, prominent paragraph at the start of your API docs for people who aren't familiar with the convention, to tell them not to use or rely on `_` property they might find if they go digging into the source or debugging 
You might want to check out Server Sent Events as an alternative
Yes, but that project is only for css its not going to help you if you use sass or less.
I've started [shashin-server](https://github.com/maxkueng/shashin-server). There isn't much in the Readme yet but it's a server that takes screenshots and it comes with a web interface. It basically sever-izes [shashin](https://github.com/maxkueng/shashin). Though, yours seems to have a bit of a more ambitious requirements list. 
How does this read? I've read some of the meaps books and like those.
this. I am programming in Java for quite a while and was looking for a good source to get familiar with JavaScript. Even when this book literally starts with 0 (and 1 :P ), i really got the feeling not only to learn all fundamental aspects of JavaScript, but also becoming a better programmer in general.
If you follow this guide you will end up with one big messy file. I've been there and it's not good. Later I moved to CommonJS modules and browserify and the code is much better now.
I'm going through it right now. If you want to jump into using javascript on the web this isn't the book for you. This book is great for a thorough understanding of Javascript and teaching the basics of computer programming.
I was thinking it could look through a repo's history and generate a graph as well.
yes
Messy is the result of poor organization and is not associated with file size.
No. Just stop it. Stop making it what's it not.
It's best and useful for me. Thanks!
&gt; Because it's all run and compiled (in development, anyway), in the browser, there's much less tooling or set up required. There is hardly any setup required for browserify. You can bake two lines into your package.json scripts with a module generator (or yeoman script) and hardly ever think about it again. Adding es6 is just another flag. "dev": "beefy index.js --live", "build": "browserify index.js | uglifyjs -cm &gt; bundle.js" Not saying jspm is bad; but your post clearly shows it requires more config and setup than browserify.
Messes up what transition? I ask because I have made similar charts for work and keep all text CSS based. 
It goes slowly at first explaining quite extensively the very basic elements from how machines work and variables but then quite steeply starts covering functions modules etc. it is quite concise and doesn't really start to tell you practical things until chapter 12. But I feel I know now why you do things just as much as how to make things work. It may be a bit baffling for someone who has never programmed as you don't really get shown the environment you are working in very clearly and most of it is out of context code, you have to find out how to type and try things. It is good though as it focuses purely on javascript.
I understand what you're saying, I have spent several hours watching videos over the last few weeks about the language. I feel like I am a practical learner, so I need to actually do it, to fully understand it. 
Do you never have to debug the generated Javascript with that one? That's basically my point.
all this javascript...for something so simple
As of ES6 let brings block scope to JS, so saying that it doesn't exist In JS is flat out wrong. 
It is very convenient to think so but I don't think this is the case. Keeping a variable visible to many functions, as advised in the guide, is like making it global. The code can be very hard to maintain when many functions start changing this variable. On the other hand if you honor the principles of separation of concerns and loose coupling, and you put your code into separate modules, it will be easier to reason about the it and to change it.
Any experienced programmers out there who could help me out? Q : Is it better to learn javascript first then jump in to Jquery or learning Jquery first is a better idea? I am good with c++, and I have delved in to javascript for a while and I found that I knew most things syntax wise. Any advice would be appreciated :)
&gt; If you want to jump into using javascript on the web this isn't the book for you. This is important. This book will teach you next to nothing about how Javascript is used in modern web development. That said it does a fantastic job teaching how Javascript itself works so you can understand what's going on in the frameworks you're using and use them more effectively. My only gripe with it was that each chapter starts off simply but jumps quickly into much more complex material. It can be a little overwhelming for a first-timer.
Yeah. That gets really messy. I usually lean on sourcemaps and console statements. It is a tradeoff that I willingly make, though.
[CC'd this to my blog](http://togakangaroo.github.io/2014/11/10/dont-teach-oojs.html)
Lol.
It's just too convenient and effective, despite the minor issues, they really have done a great job at encompassing the essentials of web development in a single source.
I'm also 33. It's a shitty site people shouldn't use.
Eww, no
The breakdown is only shown in the console. They should really change that.
I'm not sure I see much use for this. Sorry to seem rude.
The fan in my chromebook didn't even kick in...I don't think this is "stressing" the system as much as you think it might be.
This question is equivalent to asking whether you can be a Boost expert without learning much C++.
Learn JavaScript first...and CSS selectors. JavaScript the Good Parts is a nice cheap book and a great introduction to Javascript. JQuery is pretty easy to learn. I give 1 hour classes on it that cover the basics of usage and people are generally off and running. Knowing JQuery only gets you halfway there. You will be pretty limited without a good understanding of Javascript as well.
jQuery is a really useful library of functional methods, but without learning actual JavaScript, you can't really be an 'expert'. jQuery only goes so far, and there's a lot of tricky concepts (e.g. the 'this' keyword) that no library can save you from if you don't understand them. jQuery's strongest suit is the Sizzle-based selector engine, and the backwards compatibility it provides to IE8/IE9. This page provides a pretty good overview of what the 'plain' JS looks like for a lot of the methods: http://youmightnotneedjquery.com/ Note that most of it is IE9+, but the code is roughly the same for both. Might as well learn it the plain way as it is almost always faster and lighter on the client.
Yeah I was drawing that parallel too. Thanks for the input. 
jQuery is a Javascript library, so learn JS. First thing first: Javascript !== the DOM. So if you're asking if you should interact with the DOM/browser with jQ or native JS methods, that depends. jQuery is great at selecting/manipulating/animating DOM elements, and making XHR/events sane cross-browser. There are also many plugins that Just Work™. As soon as you start moving beyond that and want to do things outside of that, learn Javascript. Anything described as a "web app" is just JS. Node.js is JS on the backend - no jQ in sight. The native DOM/browser methods are getting better x-browser support day by day. Find what you want to do in a browser and that will dictate what you should concentrate on.
I know ST and WebStorm both put auto closing brackets when you type { and hit enter/return. ST is prettier than WebStorm, but WebStorm is better for quickly recognizing errors. ST has a free version with a popup asking you if you want to buy it, but not enough to impede day-to-day use. WS has a 30 day free trial, check them both out. 
Me neither. I don't like it.
That is a completely faulty understanding of global conflicts. The reason why it is bad to pollute the global space is to prevent modules from clobbering each other. What that really means is to prevent a module from reassigning a reference to something completely different, and thus breaking your code. Side effects, particularly those that are intentional as a design of the application, are not accidents and are not harmful. Pushing an index into an array, for instance, is not clobbering a reference. Additionally, the problem as you have stated it is not solved by OOP either. Functions provide a separation of concerns. &gt; The code can be very hard to maintain when many functions start changing this variable. To me, personally, this indicates that you are new to JavaScript. I have been writing in this language for about 7 years and have never encountered this problem. I have never seen it in anything I have worked on or any other JavaScript application (including popular frameworks) I have ever examined. Would you be able to provide an example of this problem?
Noted. If you don't mind can I PM you for intermittent advice?
And here we have another slightly naïve build manager packager thing for people who think reconfigurability is complicated and scary and only make 1 page websites. &gt; The primary benefit over Browserify is that you do not need any form of build tool or task running all the time every time you change a file. Because it's all run and compiled (in development, anyway), in the browser, there's much less tooling or set up required. Compilation through Traceur for your ES6 files is all done for you. So what? That is like the first 5 minutes of using a proper build tool like Webpack. Everyone who goes this way will regret it as their project gets complicated and scratch their head why they went with a combined package manager AND build tool, Or why the hell they locked themselves into a (very short sighted) dead end.
https://github.com/kitcambridge/evil.js/blob/gh-pages/evil.js
I learned JQuery first and worked backwards to JavaScript. So my experience debunks all of the top-rated answers in this thread. To this day I have no idea how to do an AJAX request in plain JavaScript. Everyone learns differently. Examine them and see what works for you. Learning JavaScript is important if you are making performance-intensive web applications, but most simple web pages will work very well using only JQuery.
Nicholas Zakas' "Professional JavaScript for Web Developers" is a good choice if you already have some experience with a programming language, particularly C++ or Java.
How about an OOCSS compliance tester? It could rate the use of flat classes, avoidance of ID selectors and shallowness of selectors and give a stylesheet a compliance mark.
All functions in javascript are closures, so in that sense every time you use a function you are getting practical use from a closure. Though you might say you're not using the closure until you leverage the closed environment and not just local variables. In which case, every time you refer to a variable outside your function you're using a closure, including any time you refer to a global. You might further say that you're *really* not taking advantage of a closure until parent execution environments have finished executing, thus forcing those environments to stick around because they've been closed over. In which case, any time you return a function that refers to its outer environment you are using a closure, or often when you pass a function to another function. The use cases for each of these buckets are fairly vast. Your example is a commonly used pattern (falling into the last bucket above) so I think you're on the right track :) 
A help button explaining how to use, for example, a dashboard?
No problem! JS is a far different beast than HTML and CSS, so I'd suggest starting from the basics. There are plenty of wonderful resources on this sub (sidebar, current stickied post, etc) so you can't really go wrong starting with "vanilla".
Among others, I was just looking for a book about the this subject so... thanks!
Another day, another JavaScript library.
The object creation pattern you're using there is commonly referred to as the Module Pattern, and is one way of achieving private data. It's used extensively in the node.js environment and things like browserify.
- Score: 28085 (Chrome Version 38.0.2125 on Windows, i7+290X) Couldn't find VSync Option in about:flags
- Score: 6088 (Chrome 38 on ChromeOS, Acer c720)
I should have known! Random playback rate? Making all your AJAX calls synchronous... Nice! Inverting characters... this will be fun to play with.
One is constantly using closures in JS, especially if you're using callback functions. One common use is to access `this` in a callback: var self = this; element.addEventListener('click', function() { self.whatever = 5; self.doSomething(); }); (You could bind the callback to `this`, but it's my understanding that that's slower, and also uglier to look at.) Re: your example, that pattern is *only* really useful as a singleton. It's called the "module pattern" and is commonly used by JS libraries to control the visibility of library members: var MyLibrary = (function() { var foo = function() { ... }; var bar = function() { ... }; var baz = "some very important string"; var doStuff = function() { ... }; // Only these methods are exposed by the API; // the rest are for internal use only. return { foo: foo, bar: bar }; })(); 
Before you go into the interview know the technical expectations of the team, or the company. This is the most valuable advise about interviewing since the front-end development field is wide. Be confident, believe in yourself, and be as honest as possible. If you don't know the answer to a question then say you don't know. I hate it when people try to bullshit me. I give big points for honesty. If you can admit fault during the high pressure setting of an interview then you will probably be trust worthy to do the same on the job. Don't cram before an interview. You are either skilled and experienced or you aren't. If you need to study something before an interview give yourself a minimum of a week of actually studying and writing code no more than an hour a day. Brush up on some subjects and to feel comfortable about them, but don't exhaust yourself. If you really want to cram on something then cram on the company history and their business presence. Get to know all the things the company is involved in, what they care about, political limitations, and how they make money. Expectations on formal education vary by company culture. Formal computer science education, in my experience, is extremely focused on OOP concepts regardless of the languages taught. Large organizations like Google, Facebook, and Intuit appear to prefer to pluck young developers right out of school. I work for a massive design firm that prefers to hire older people who have been doing client-side web development for more than 10 years. Most people who have been doing this forever want nothing to do with OOP and prefer to work in companies that share this perspective. Having a personal friend recommend and pull you into a company is probably the surest way to be hired. UI developers are so hot right now that everything about being noticed and building social networks is absolutely irrelevant. When I was actively looking earlier this year I was getting 3 reputable local recruiters asking for my resume each month and 10+ out of state contractors want to place me somewhere each month. Nearly all of these guys, including a Google recruiter, found me on LinkedIn. This is frequently talk about age bias in getting hired. This is something real, but for some valid reasons. Young UI developers are typically far less experienced than old developers and so they will typically ask for substantially less money. The field is always changing rapidly and as you get older you find what works and don't bother fucking with new shit that doesn't work as well as your personally tested techniques. This introduces a lot of friction with under-confident young people who can't write two lines of JavaScript without a constructor and framework. There is a big push in corporate circles for older devs to fill higher paying roles that demand less coding, like architect, which is a completely different kind of stress. As a result it is much harder to enter this kind of work as an elder statesman, and does not even include age discrimination during the hiring process, which is very prevalent.
http://prettydiff.com/guide/closure_with_jsscope.xhtml
It makes me smile the way you jump to a conclusion that I'm new to JavaScript :) I was not referring my code but the code of the author of the guide. Check where the "summary" variable is used (the author gave this variable as an example). It is declared on line 54, assigned or referenced on lines: 3749, 4063, 4358, and there is no comment what this variable is used for. I personally avoid assigning global/module variables for the reason I gave above. And I don't shy away from OOP in situations where I need to encapsulate data. A moment for philosophy: Functions in JavaScript are objects and in some languages like MIT Scheme the environments are also first class citizens with defined operations over them. One can think of closures as a way of implicitly defining objects which can be accessed only in certain scopes. And one should not be quick to discard OOP as it may be the best tool in some situations.
The best thing to read is the famous stack overflow here - http://stackoverflow.com/questions/23199392/difference-between-mean-js-and-mean-io In essence both are great starting points - if you need a boilerplate and can continue alone from there - choose mean.js, If you need a framework and an ongoing package ecosystem (think rails or drupal) choose mean.io disclaimer - I'm one of the maintainers of mean.io . 
Correct, the idea is that you will not need to write your apps in AtScript. Either way the final version of the code will be ES5 js code anyway.
my bad... you're correct I fixed it
Agreed! It's like forget everything you know and start again lol. But hey if that means I get server-side rendering without crazy hacks, I'm game!
1. Wouldn't you essentially package node webkit into your distributed code in the end, in result taking the nw version out of the equation? Also I am outsourcing the actual screenshot part to a command line program for the various OS's I support. From there it's just math in a canvas to do the work of cropping. 2. I only send to the server after I crop, making this part of the problem non-existent. I do get a nasty flash when I open the crop window, but I'll focus on that later. I haven't had any quality issues with my images as they are created by canvas. If anything they will be too large, but I can always pngcrush serverside.
I'm not a pro or anything. I thought the best way to learn it was learning each part on its own and putting it together . Otherwise your learning, two frameworks and a database. Felt like a lot to me. 
&gt; Angular teams (dart I had no idea there was a Dart Angular team. Relevant XKCD: http://imgs.xkcd.com/comics/standards.png
Thanks! I'll check it out!
The screenshots I was taking needed to perfectly cropped, as high res as I could get, and work on 2 or 3 computers (I was not distributing to public). Locally I compared the latest v8, v10, and v11 releases, which each have a different version of chromium running, and I settled with v10. I ended up building something with a simple splash page. Considering nw needs to be open and on the screen to take a screenshot, it's hard to avoid a flash. The power of nodewebkit is so much greater than phatomjs, especially for screenshots. I would definitely recommend using nw for this, but it's not going to be as friendly in cli.
Has anyone installed the Developer Edition on Arch Linux?
4411 on an iPad Air 2 using iOS 8.1 using Chrome; site doesn't seem to recognize Safari. Note: I had a bazillion apps open when I did this and made no attempt to optimize its performance. 
This is a great book. I have referenced many times. Not all of the patterns are super useful, but it's a great way to help your JS design patterns.
&gt; I am fully aware of what the two are Evidently not...
This is actually the revealing module pattern and needs wrapped in more code to create a singleton. 
I've been to a few JS meetups, but a JavascRiot sounds fun! :)
Fast fingers and not checking my screen bites me again 
I don't think you understand the difference in what I'm talking about. I'm talking about an application to take screenshots of your desktop itself, not websites. I'm dealing with the desktop as the current state it's built as when the user hits their shortcut keys.
I don't know... It's the same as in regular Firefox? Care to prove me wrong? :)
I really appreciate this kind of feedback, I just rushed the variable names but yes, I totally agree with you that expressive variable names are best in almost (if not all) situation, about moving donutChart definition last, I like to put it first because if you notice methods call in the function are in order with the functions definition (I guess this comes from my Java background and Uncle Bob [Robert C Martin]) it is that bad to have it that way?, another thing is I'm using the instant annonymous function call to use variables instead of an object, what would be the advantage of have object.height over height directly (they are 'private' variables basically, anyway). Thanks for your feedback :).
Not if people like us keep calling them on their bullshit!
Is there a better, similar book but with the fat trimmed?
[Relevant FizzBuzz Enterprise Edition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition)
I too am a "clean coder" :) Javascript's Uncle Bob is a guy by the name of Douglas Crockford. He maintains JSLint. Since JS is *usually* interpreted, it's best to define it first. https://jslinterrors.com/a-was-used-before-it-was-defined To be clear, it will work without making the change, it's just preferred to be defined before used. object.height would only be for readability sake. When doing JS, I use WebStorm which handles refactoring, renaming, etc for you. And I was used to it from Android/Java programming with idea and android studio. Cheers.
[Javascript Allonge](https://leanpub.com/javascript-allonge/read) [Functional Javascript](http://www.amazon.com/Functional-JavaScript-Introducing-Programming-Underscore-js/dp/1449360726)
[MDN](https://developer.mozilla.org/en-US/), best reference resource there is for JS and CSS Easiest way to use it is by just searching google for "mdn js &lt;thing you want more info on&gt;", for exampe "mdn js array splice"
It looks so sexy on Ubuntu. 3D view is a little bit shaky though but that's probably just my drivers
&gt; Don't cram before an interview. You are either skilled and experienced or you aren't. I can't second this enough. I've taken a lot of heat in the past for telling candidates that they shouldn't be studying specific technical interview questions, but as you say, either you know your stuff or you don't. Jobs aren't like school, where you can get by with cramming for a test and then quickly forget it all afterwards; rather, the interview questions should [hopefully] be a reflection of the skills required for the day-to-day work that you'll be tasked with.
If you have got it narrowed down to two frameworks, [choosing between AngularJs and EmberJs](http://angularjs-emberjs-compare.bguiz.com/)
I haven't dug into 6 yet, but could you test against the transpiled code with a standard es5 testing framework? 
I think you can, but you need the traceur-runtime as a dependency. I'm not totally sure how `require` works at that point though...
If you're using karma, you can put a library in the config and it will be available global for your tests. I'm a little green though on some of this, just thinking out loud :)
There's ways around it, for sure. Here's a crude example: http://jsfiddle.net/one800higgins/8moez4j3/12/ Pretty much the only thing that you can't control in D3 with CSS is X and Y. Ideally, I'd have translate(0,0) to translate(-35,10) to keep the text centered as it grew, but thanks to that D3 restriction you can't do that. On that note, it's probably easier to maintain the transition in D3 since X and Y are required, rather than running 2 transitions at the same time. Anywho, just thought it was odd when you said the text transition got messed up with CSS.
Is there a question you are trying to ask?
Isn't this the same profiler in normal Firefox?
Firefox Developer AFAIK is based on Aurora with a new theme and some Plugins/Addons included by default.
Which features are you using? I've been using [node-jsx](https://github.com/petehunt/node-jsx) for my transpilation, and it covers everything I need. Inside each project, I have a file that looks like this: // init.js // Runs all app code through node-jsx, so we can use conveniences like fat-arrow lambdas require("node-jsx").install( { "extension": ".js", "harmony": true } ); module.exports = require("application/server.js"); There's a corresponding `"main": "init.js"` line in `package.json`. Now, every `.js` file in that project will be converted to ES5 before being interpreted by node. With that strategy, you should be able to use whatever testing tools you're already comfortable with, because as soon as they `require("my-app")`, all your code will be converted.
Will this also mean they will stop bundling developer stuff with the "normal" firefox? Because I would love that.
You can use debounce or throttle functions (http://underscorejs.org/#debounce or http://underscorejs.org/#throttle) almost always on those events that happens alot, i.e. resize, scroll, etc.. The idea behind is either defer the script execution and do stuff only when user stops interacting (i.e. user resizes window, but you want to do something only when he stopped doing that) in that case use debounce or when you want to limit some interaction over the time so you code will be executed only once per define time interval (i.e. user scroll content and you want to toggle navigation bar, you don't need to check every single scroll, what the value was, you can simply say that every 300ms you want to know the new values) so you use throttle
I use them as scratch space for functions that do a lot of computation (happens a lot with WebGL apps). Allocating new typed arrays and garbage collecting them later are both pretty costly, so I avoid that by allocating them only once and keeping them for the duration of the parent object: calcClippingPlanes: (function() { var worldToViewTransform = Mat4.create(); var sceneBoundingBox = BBox.create(); return function() { this.scene.getBoundingBox(sceneBoundingBox); this.getWorldToViewMatrix(worldToViewTransform); BBox.transform(sceneBoundingBox, worldToViewTransform, sceneBoundingBox); ... } })(); The advantage of this approach is that *worldToViewTransform* and *sceneBoundingBox* are only created once and are only visible to this function. And since they hold copies of the data (again, without the cost of allocating new space for those copies each time) I can do what I want with them without having to worry about side effects somewhere else.
I didn't find this book easy to comprehend at all. I read chapter 3 twice, still don't get it, and had to move on. Too complex for beginners. 
Why would you love that? What has it ever done to hurt you! 8) 
I thought the point of learning patterns is that they're language agnostic.
You forgot a few: Browserify and Assetgraph (and several others, but these interest me). So what do they do? npm is the node package manager. But with Browserify, you can use npm as a pre-build step in your front end flow. Assetgraph analyzes your assets and builds a graph for you to manipulate, which can be a sort of build process. npm can also be a build process, usin npm run script in your package.json ala shell commands. Grunt is a task runner, but honestly I am not convinced it has any advantage over npm run. Gulp is a stream-based file transformation tool, which is nice for all sorts of build related processes. So what do you use? As you can see, each tool does different but somewhat overlapping jobs. You might use npm run as a main build flow, running some linting, executing the gulp file transformation step, doing the Browserify step for js deps and bundling, then maybe more gulp for compression/concatenation, then running assetgraph for easy cache-busting revving. But that is just one possible configuration. You might run everything from gulp. You might just use Make. The point is, there is no one-size-fits-all everything tool. You have to learn the various tools, and use them as intended.
Pizza, Beer, Interesting topics, Case Studies *I predict a JavaScriot*
Pizza, beer, interesting topics, case studies, pole dancers
Pizza and beer are a given, thinking about topics I'm not sure if they should be a mix of basic JavaScript principles and the latest whatever.js lib that's come out. Also need to think about where Node comes into the mix. 
* Bower is written in JavaScript, and can be installed via node 'npm install bower' * Bower can be used to manage your client-side dependencies (so can npm, and there are other package managers that do the same thing) * With bower, you can do 'bower install jQuery', etc - you will still need to add a script tag loading up that dependency in your web page though. If you do 'bower install jQuery --save', it will add it to a bower.json file, that way if you check things into source control (btw: should not check in your bower_components directory), the next person to check it out just needs to do a 'bower install', and it will pull down all of your dependencies * Grunt and Gulp are task-runners - they aim to do the same thing, just in different ways (I prefer Gulp over Grunt) * Grunt and Gulp can also be installed with NPM -- basically, even if your project is not a node project, alot of the tools available now are written in JS and can be installed with NPM, so even if your not using node - your 'tool chain' can. * Both of these have various plugins to help automate tasks - linting, beautifying, running tests, minifying, etc. For example, in one project I have, my 'gulp build' will * run all unit tests - and abort if they fail * run jslint - and abort if it fails * Get all of my files under my src/ directory * Filter out some files * Concat all of them into one file * Wrap it in an IIFE * Strip out extra 'use strict' tags, and have just 1 * Generate an angular 'version' service that will pick up the current version from my bower.json * Beautify the file and make one 'package.js' file * Run ng-annotate (it's an angular project) to make things minsafe * Minify the files * save a package.min.js if I do 'gulp dev' - it will fire up a lightweight sever, serve up my files, auto-reload on save, and re-run tests on save. Can do the same things with grunt, just a different way of going about it - grunt tends to be more configuration heavy (and find it harder to understand, but other people find grunt easier and gulp harder), where gulp is more like coding with lego-blocks. gulp.task('build',function() { gulp.src('src/**/*.js) .pipe(concat()) .pipe(gulp.dest('dest')) .pipe(rename('myfile.min.js')) .pipe(ngAnnotate()) .pipe(uglify()) .pipe(gulp.dest('dest')) }
Nice book. But a word of caution about design patterns, as useful as patterns sometimes can be, their abuse can lead to "pattern-happy" code, unnecessary flexibility and obscurity http://taskinoor.wordpress.com/2011/09/21/the-abuse-of-design-patterns-in-writing-a-hello-world-program/ As a Java developer in the past at one point I had to support such code, with lots of factories, facades, commands, etc. and almost nothing specific happening. The authors of that code clearly read the GoF book, but it would have been much better if they did not do that :)
No, quite the opposite. Many are language specific, like Iterator, you would not normally need to implement this pattern in JavaScript, for example. Another example of a pattern needed in a language such as Java and not really needed in JavaScript is Visitor. The problem it tries to solve is not being able to add methods to existing classes, in JavaScript there is no such problem to begin with. Some people also view design patterns as workarounds for a particular language being not expressive enough for certain problems http://c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures
Awesome stuff! Thanks a lot for your work.
This is much better covered by the specs. Secondly, this has nothing to do with JavaScript. Thirdly, don't tell me what to do.
&gt;I'm a complete java noob Java and JavaScript (ECMAScript) are two completely different programming languages.
Listened to the recent JSJabber more of the focus was on running a conference some tips on meet ups tho. I think what I want out of the meet up is to meet like minded JS developers and hopefully learn something new/someone learn something from me. If I was going to talk about JavaScript as a Language then I would focus on the advanced topics such as design patterns or JS gotchas. The connection to Mongo Dublin and MS is interesting and could be useful. 
Sounds like a homework problem
It's "firefox-aurora" in the [AUR](https://aur.archlinux.org/packages/firefox-aurora/). It's the same. The Aurora channel is now the developer edition.
Install it from [AUR](https://aur.archlinux.org/packages/firefox-aurora/).
I disagree about the visitor pattern. Can be usefull in js. The command pattern is one which I just cannot imagine using in js, just pass a function and be done with it
The command pattern is useless in JS. an observer is super simple to implement, but if done in a more comlex manner which ties into your component lifecycle it can be super powerful and expose potential memory leaks to static analysis. of course the examlple in this book is overly verbose for what it should be trying to convey. As a side note, a test I often get interviewees to write is a simple observer pattern implementation.
I did interviewing for my last companies summer internship program(we hired 30 people that summer, so I personally interviewed ~60 candidates), and it is so damn easy to spot when the candidate just crammed. I know the text book definition of things, I'm not looking for that. When I ask you about recursion or polymorphism or whatever stupid questions I was forced to ask before I could ask my fun questions, I want to have a conversation, not a regurgitation. Generally speaking the better candidates for some odd reason were less confident in the beginning. But once we started talking tech, they opened up and it was great. The worse candidates loved talking about themselves and irrelevant projects they did in highschool that may have placed them into college, but fizz buzz blew their mind. 
Not really, JS isn't meant to access local filesystem. You could build a cloud based editor (as in files are stored in the cloud, not locally, although users could probably download zip of their files). Think like google docs, or cloud9 : http://c9.io
People in this sub are so rotten. Bleh
I see you saying "Not really", but then you immediately elaborate on ways that it is possible, and even provide an example of a company which has built its business model on the idea. Wouldn't you say it is feasible?
You don't have to tether yourself to a remote web server in order to run your app. Check out [Vagrant](https://www.vagrantup.com/). It allows you to set up virtual environments on your machine specific to your project. Also if you are not yet using Git, [learn it](https://try.github.io/levels/1/challenges/1). I couldn't live in a world without version control. Highly recommended for all projects, even if you're not on a team.
npm was originally created for use with NodeJS, although nowadays it spans a lot of environments and is being used for front-end web dev, as well as other environments like CocoonJS and Adobe After Effects ExtendScript. Most people use a tool called "browserify" to package npm modules for the browser, although there are other tools (webpack, jspm) that can also do this. There are a lot of ways to skin a cat in JS. Here's my suggestion: - use npm to manage your front-end dependencies - e.g. skim some of the code examples [here](http://mattdesl.github.io/frontend-npm-goodies/dist/) (I'll be adding more newb-friendly DOM examples soon) - use [beefy](https://github.com/chrisdickinson/beefy) to get things running quickly - use [browserify](https://github.com/substack/browserify-handbook) with [npm run](http://substack.net/task_automation_with_npm_run) when it comes time to distribute your app As your project grows in complexity, you may or may not need to evaluate some tools like Gulp, Grunt, Bower, Assetgraph, etc. 
&gt; Firefox Developer AFAIK is based on Aurora with a new theme and some Plugins/Addons included by default. 
Cool, I like it. Did you build this to solve any particular problem? Could you tell me more about it?
&gt;tell me more it's green! ^^[blacklist](http://www.reddit.com/message/compose?to=classhole_robot&amp;subject=racistfascistsnobs&amp;message=!blacklist)
 - [**XAMPP**](https://www.apachefriends.org/index.html) XAMPP is a cross-platform webserver bundle which includes Apache, PHP, MySQL, and more. It has a GUI for starting and stopping the server, changing config files and toggling PHP extension -- it's really quite noob friendly. Install a fresh copy of XAMPP on your machine, and use the GUI control panel to launch your server! You just place your website files in `xampp/htdocs/` (which is the web root), and you're ready to visit them via `http://localhost/`! I develop my projects from within the XAMPP web root, such that I can hit save on my CSS file, and hit reload in Chrome to see the changes :) I've been using XAMPP and several programs just like it for years now. XAMPP is my favorite by far, and is the most cross-platform option that I've seen.
Yea, forgot to mention Git. I do use it for all my projects and it is awesome. I use SourceTree for the UI. Also, we have a development server and a production server. I will build/test and then release when my changes are stable, etc.
I started using Ampps and I gotta say its even easier then xampp was. Have you ever tried it?
Some people use Vagrant to ensure that their development and production environments are identical, but I'd only do that if I was building an application that required an exactly particular web server deployment. I try hard to make my applications more robust than that. I try to make my applications server-agnostic enough that they will work on any common default installation. If I fail in my goal towards true robustness in that regard, then I fall back on Vagrant to save the day ;) I also love Git, but I don't use it on small projects where I work alone. The time spent in the overhead of tracking your own shit becomes meaningless and wasteful in my opinion -- Git becomes important when you need to do some serious teamwork and branching and stuff.
I co-organize the JavaScript meetup in Munich. So far, things are going well for us; a recent meetup had over 120 attendees in a nice location with good food. We try to make our meetups appealing to a wider audience by supporting diverse talk topics, speakers and food. E.g.: we always provide non-alcoholic beverages and vegetarian food as options.
Bower is redundant, but it hit the scene when npm was still used pretty much exclusively with backend-only packages that used Node-specific functionality. Now that npm is being used more commonly for frontend packages as well, Bower will probably go away soon.
Also: don’t forget to add your JavaScript meetups to the following website (via a pull request). http://communityjs.org/
&gt; *I started using Ampps and I gotta say its even easier then xampp was. Have you ever tried it?* I think it's just a newer and less-popular take on XAMPP. I've also used WAMP, MAMP, WampServer2, UniformServer, and some others. The biggest issue I had with XAMPP's competitors, was that their GUI interface usually sucked terribly or was glitchy to the point that I couldn't use it. XAMPP has the most stable system that doesn't glitch out or flicker or crash like the other ones do. I download me a fresh copy of XAMPP, throw in my projects, make a couple configuration tweaks if I want them -- and if I screw up the configuration, I just download a fresh XAMPP and throw all my projects in there. It's impossibly easy to start fresh with a tool like XAMPP, you'll have no worries about screwing up your configuration. Go nuts!
imo it's great that they focus on better development tools, but right now it isn't as useful as chrome(ium) devtools (like [profiler or timeline](https://i.imgur.com/choX3D9.png))
It's essentially firefox devtools with a color scheme and few extra features, all of which are not new ideas. The remote debugger only connects to other firefox browsers (including mobile versions of firefox), a totally redundant feature as the market share is almost non-existent and getting worse. Sadly, this is yet another step in the wrong direction for firefox and what a waste of time and resources. They should try and be the first to materialise a standardised remotedebug layer http://remotedebug.org/roadmap/ and start setting precidents instead of playing catch up all the time like internet explorer.
I've attended the JS meetup in my city a couple of times, I'd say that everyone goes for different reasons... I go there mostly to meet people, as I know that what interests me in the talks is not the same as other people. There tends to be tons of talks about the million frameworks out there, and I admit that I am not much intereseted in those, whereas most people seem to like them. I prefer talks about workflow, core Javascript, coming features, custom projects, etc. One thing, keep the talks short, 30min max including Q&amp;A. There is always someone that asks a lot of very specific questions at the end relating to their own needs, and it's not interesting to the crowd. You can see the eyes rolling... so, as an organizer, know when to put an end to it, as it is not the speaker's job.
* For programmers, free online: “[Speaking JavaScript](http://speakingjs.com/)” (disclaimer: I’m the author) * More free JavaScript books: [JSbooks](http://jsbooks.revolunet.com/)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Cargo cult programming**](https://en.wikipedia.org/wiki/Cargo%20cult%20programming): [](#sfw) --- &gt;__Cargo cult programming__ is a style of [computer programming](https://en.wikipedia.org/wiki/Computer_programming) characterized by the ritual inclusion of code or program structures that serve no real purpose. Cargo cult programming is typically symptomatic of a programmer not understanding either a bug they were attempting to solve or the apparent solution (compare [shotgun debugging](https://en.wikipedia.org/wiki/Shotgun_debugging), [deep magic](https://en.wikipedia.org/wiki/Deep_magic)). The term *cargo cult programmer* may apply when an unskilled or novice computer programmer (or one inexperienced with the problem at hand) [copies some program code](https://en.wikipedia.org/wiki/Copy_and_paste_programming) from one place and pastes it into another place, with little or no understanding of how the code works, or whether it is required in its new position. &gt;==== &gt;[**Image**](https://i.imgur.com/p9IHf7z.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:JohnFrumCrossTanna1967.jpg) --- ^Interesting: [^Cargo ^cult](https://en.wikipedia.org/wiki/Cargo_cult) ^| [^Copy ^and ^paste ^programming](https://en.wikipedia.org/wiki/Copy_and_paste_programming) ^| [^Magic ^\(programming)](https://en.wikipedia.org/wiki/Magic_\(programming\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+clzfsf8) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+clzfsf8)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
The command pattern can be useful even in languages with first class functions, because the command objects can store additional information that you can use to filter the commands or map them to something else. Functions are pretty opaque, so it's harder to do stuff like that with them.
First, practice talking! If you're confident, well spoken, and straight forward you'll have a tremendous advantage right off the bat in an interview - regardless of what the job is. Talk to yourself all day and try to formulate answers to random questions on the spot. You'll start to notice that your ability to convey answers gets easier and more fluid. Secondly you'll want to brush up on what you already know so it's fresh in your head. It's time better spent than memorizing a bunch of new stuff because you'll be able to present to the interviewer actual knowledge and opinion about the topic instead of some memorized definition of say "the event loop". The single most important thing to remember is *confidence*. You want a job that you're capable of doing, so you're going in to show your skills. Don't lie or try to bullshit answers because that will just make you look stupid. If you don't know an answer just tell them you don't know. 
and we wonder why there aren't more women in tech?
Are you crazy?! Bower is the bread and butter of a frontend developer's toolset.
Yea, so the exact same profiler as normal FF then... Except ofc this one is working on newer code if anything has changed between Stable and this (but the Stable would eventually get it.)
Wow, thank you for that. If this was Slashdot I'd give you a +1 insightful, but I guess you'll have to settle for an upvote. I never thought of patterns as language workarounds before. I guess you wouldn't need to implement the observer pattern in .net because it is natively event driven. This makes me think about the problems I've had with the Zend framework in the past and how heavy they are with design patterns. Maybe the framework is like that because php lacks many concepts needed. It's a nice excuse anyways... Lol.
I also like that tgriesser (the creator) is very active on StackOverflow for both Knex and Bookshelf. Almost all questions were answered by him.
Heh, it's only been popular for like a year. Anyway, developers don't need two loaves of bread and two sticks of butter. If npm keeps picking up steam for frontend libraries, Bower will start to dissolve.
Npm is like Java's Maven. Bower, gulp, grunt, etc. are nodejs programs. All of the task runners / dependency managers, including npm itself, run as node processes, so node needs to be installed to use them. Unless you're building a fairly large front end with JavaScript, there isn't much incentive to use these tools. Downloading 4/5 libraries, putting them in a folder, and including them in an html script isn't that hard. But, that's the 'old' way of programming the web. I rely on these tools for everything: 1) My js projects usually consist of ~30 pages and include ~30 dependencies. Instead of managing ~60 script tags in html, I use browserify to bundle / build my program, so I only need to include 1 script tag in the html. 2) The freedom to modularize your code and include dependencies at a whim (usually lightweight but still useful) really opens up new avenues for maintaining non-trivial js apps with a team of people. 3) sass, jsx, and all the other front end goodies that need to be precompiled before going into browsers can be managed by gulp / grunt. 4) and they watch your files as your coding. Save and it can recompile, reload the browser, and parse your code for errors, in a few hundred ms.
As far as I can see this is the standard FF Profiler: http://imgur.com/kyFijt8 It doesn't display FPS averages, and has far less clearer info on what contributes to the spikes on the profiles range. e.g. The screenshot of the Dev profiler I linked clearly shows a relation between the GC and major drop in frame rate, the standard FF profiler just shows solid black lines with no breakdown.
I just listened to a Javascript Jabber podcast which discussed this topic: http://www.stitcher.com/podcast/ruby-rogues/javascript-jabber/e/131-jsj-conferences-meetups-with-dave-nugent-35827701
It's a mess. Be careful out there. You need to learn javascript well until you find out if you can use some of those. You don't need any of them now. You may not need some, or any, of them ever. And most of them won't be around three years from now. Use them when you are in search of a solution. Don't use them cause you've heard of them on reddit.
as a male pole dancer, I find your comment offensive and sexist. this is why there aren't more male pole dancers in tech! 
MomentJS is one of those projects that make me realize how beautiful the OS movement can be. *Edit: spelling*
gulp is not a task runner, it's a build system
&gt;NPM also offers packages that work in the browser, making bower more or less obsolete That's not true, because npm's model doesn't work well with frontend libraries. There's more information [in a recent article on the npm blog about front-end packaging](http://blog.npmjs.org/post/101775448305/npm-and-front-end-packaging).
That's great, thanks. Anyone knows a simple tutorials on how to install plugins in sublime for noobs?
That is what StackOverflow is for.
I feel like this would not be all that useful. For example, Angular is extremely hot right now but was initially released in 2009.
There was a lot, I mean a LOT of money behind destroying JavaScript.
Check out https://sublime.wbond.net/installation for package control. Once you have it installed you can install packages from Sublime Text
Thanks
https://www.javascripting.com/ click new or trending and your category of interest! :) 
If anyone is in Boston, I'd meet up. We could chill and talk javascript or whatevs. I just moved here for a software dev job.
So would one write a js file with Node commands in it to replace the dependency "require" type functions of Bower?
Look into using hooks with your dvcs. I'm a mercurial user now but git hooks can cut the rsync part out of your workflow. In the .git directory there should be a hooks directory with scripts in there to change (ex: post commit) to your liking.
&gt; It doesn't matter too much if the first page takes a few seconds to load as long as the other actions that the user performs are quick. This is wrong. Load time is a significant factor in bounce rates, especially on mobile. You can easily see this in analytics if you run a report that shows bounce rate and load time in the same graph (if your report time is long enough, everybodies load time changes, unless you aren't modifying any code. In fact you usually don't even see the users that leave your site before your first page loads because JS based analytics load async... Which is where users leave when load time is above their threshold. Edit: [Here is a source](http://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html) 
What's the difference then?
so what do you do for version control on small projects? And how much time do you really spend on overhead by using Git? It's been a nearly seamless integration for me, and when working on small/personal projects there aren't any conflicts to deal with, so seems strange not to use it.
why would my comment give any suggestion on the level of women into tech? 
http://dontkry.com/posts/code/using-npm-on-the-client-side.html
We wrap console messages in a function, then output to the console only when in a development environment. It makes figuring out where issues are happening much easier. 
Saving/writing binary files may not be feasible directly but you can [get/post binary data](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data). If you want your users to be able to save in-progress data locally, you could save it as an [uncompressed PNG](http://weworkweplay.com/play/saving-html5-canvas-as-image/) whose payload isn't an image but the desired data. They could resume their work by uploading the PNG to your server. When they are done editing, your server could strip off the PNG "wrapper" then return the true target file format with the proper mime type.
[TriangleJS](http://www.meetup.com/Triangle-JavaScript/) in the Research Triangle area of North Carolina (Raleigh, Durham, Chapel Hill) is a very active and mature community. They cover just about anything related to JavaScript, and meet in a variety of locations. They've got a good thing going that would be a great example for anyone starting a tech meetup.
Very hard to admit you failed at your target goal. Java was supposed to be the 'language of the internet', and here comes some rinky dinky 20 days to production scripting language. And I am not hating on java it turned out to be a decent general purpose language.
That's a nice list but you should really get someone who knows English well to proofread it...
nice list! Thanks for sharing!
Honestly, the backlash is mostly undeserved. They're promising very cool things for 2.0, and they've also promised a migration plan. They've stated you don't need to use AtScript. There is going to be work migrating, no doubt. But switching to es6 will be work either way. I would still hands down recommend angular to anyone, learning or experienced. 
But will my Angular 1.x skills be of any value when 2.0 comes out? Is 2.0 going to be so different that it will be like starting from scratch in one's learning curve?
I'm of the impression that people are going to React if anywhere.
If you think your users are changing their behavior based on if they are going to a website or a Web app, then you are delusional. The vast majority of users don't even know the difference really. Don't take my word for it, just look at your own analytics to see. 
No, because both Angular 1.* and Ember are the same generation frameworks. Every problem the angular team decided to fix in a complete rewrite of angular also exist in current Ember (though in a different form). First generation reactive frameworks like angular, ember, knockout, react, were a pioneers in this area. The experience we got from using these frameworks clearly indicates that they are either too overcomplicated, or too limited. The second generation of reactive frameworks is coming, whether you like it or not. You will have to relearn things, no matter what framework you are using now. Brace yourself :)) 
I started with backbone and began using React after discovering browserify, never felt the need to use ember or angular. But React is pushing es6 (7?) features on us, especially after the 0.12 release, which isn't a bad thing, but it's hard to wrap my head around sometimes. And I think ember will also push for es6 standards (if they haven't started already).
Just learn the language, learn the philosophy and concepts behind the frameworks, and then you can sort yourself out with any framework really. Otherwise I think "you're doing it wrong" PS: we're about to move to Angular in the company I work with
Of course if we move all the transition to CSS it will work, if I'm using D3 I really prefer to keep transitions in D3, anyway thanks for the example :).
I really liked walkway.js for animating SVG drawing, this looks great too, will give it a whirl later. 
Yes they will. You'll be learning many things that will stay the same. You'll be growing as a developer too. Even learning angular now and switching frameworks later is growing you as a developer.
**npm:** package manager for the backend/developer machine. npm allows you to install tools made in js, like *bower*, *yeoman*, and *grunt*. In this way you have js tools and libraries *in your local machine* to develop your js project. You don't need yeoman or bower in production, but you need them to develop your code. **bower:** package manager for the front-end. Your site uses query, so you declare it as a dependency in bower. It will be downloaded and copy it in a folder accessible for the browser. If you install jquery using npm, then *your js tools* will have access to it, but it won't be copied in a folder meant to be uploaded to a webserver. **grunt:** As you said, they are task managers. What does it means? Well, let's say that instead of css you use less. So, you have to compile your less files to get your css. You create a task in grunt, and then you can compile all your less files with one command. Or you can program in coffescript instead of js and do the same. Or maybe you want to join and minify your files. Or you are defining a parser and you need to compile it to generate the js code. Or test your code, or deploy it... JS environment is confusing when you begin. I was lost just few months ago. It helped me a lot to use **yeoman**. Yeoman is a template manager that creates a folder with a sane structure for your project, with a `package.json` for nodejs, a `bower.json` for bower, a `Gruntfile.js` with default tasks, and so on. One of its templates uses HTML5 boilerplate and/or bootstrap, so you'll begin your project with the right structure and the right templates. Good luck. 
React isn't showing up much on dice.com job searches. Angular seems to have a bug lead over all other SPA frameworks. Not a very scientific observation, i know ...
&gt; RemoteDebug Luckily for you, those "few extra features" include [Valence](https://developer.mozilla.org/en-US/docs/Tools/Valence).
Thanks I will check them out 
Interesting, I'll check that out. Thanks for the tip.
just go to bocoup
I just started using ES6 to write libraries with and it has been an absolute pleasure. If you are using transforms, there really isn't much to it. Check this out : http://www.es6fiddle.net/
I think I'm on the same path when it comes to the timing and structure, as we only have the one javascript meet up I think covering a broad range of topics might be okay plus o want to learn more about mode and the rest 
His suggestion is not a client-side solution, which is what was asked. So no, still not feasible.
I feel that something like this would get out of control very fast, no real requirements for adding a library 
Mozilla even admit Valence is a waste of time: https://developer.mozilla.org/en-US/docs/Tools/Valence#Is_this_the_same_as_remotedebug.org.3F The hacks involved in actually getting valence to work are barely feature-worthy. Again, it's nothing new. Weinre already provides this solution and all you have to do is simple include a javascript file in the html. Works even for phonegap and node-webkit apps.
Start them off with some 2D canvas demos (as others suggest) and then hit them with WebGL. Kids are so used to ridiculous standards of 3D from movies, console games and even commercials that 2D canvas stuff can seem like Kindergarten to them. Here are some of my favorite examples from Mr. Doob, creator of three.js: * [Creature](http://threejs.org/examples/#webgl_loader_gltf) * [Blobs](http://threejs.org/examples/#webgl_marchingcubes) * [Ocean](http://threejs.org/examples/#webgl_shaders_ocean) But, the kicker is show them how you can modify something (size, color, anything) by changing a line of code and emphasize how they have everything they need to play with this kind of stuff already (just a text editor, like Notepad, and a browser, nothing else.) I think that's key to turning graphics "consumers" into "makers", by showing them that the tools are *right there* in reach.
There is very little return from this tho it's worth noting there is a return from using it, nice work 
Mostly Netbeans for coding (*but it's a rotten JS editor- Brackets or SublimeText for that*), Grunt runs concat + min + other tasks, test locally with IIS (or Vagrant box), git or sftp to server.
Both of them do the same thing, but [grossly generalising here]: with Gulp you write actual blocks of JS code to describe a particular task or pipeline of tasks, and those task/s are run in-memory (generally noticeably more quickly than Grunt), and your result pops out the end. With Grunt, you set up a number of configuration tasks via config options, and when run, Grunt writes files in sequence (which often means intermediates need to go into temporary folders, eg Sass-&gt;CSS-&gt;Autoprefixed CSS-&gt;Minified CSS). Gulp is good for simpler tasks, but can be a pain for complex builds, and it helps to understand a little bit about Node streams. Grunt is somewhat simpler, and can work a bit better for complex builds, but it can be slow and will often need more cleanup tasks to be manually set. YMMV, and as I say, grossly simplifying some of the subtleties.
Thanks for your thoughtful response, although I actually presented this last week :P Wasn't sure to do an update on this post or not but I essentially made a music graphic in canvas that responded to certain frequency bands. https://github.com/AKST/scorpion-move Was going to put it online, but wasn't sure how the whole music legality came into the picture.
Did you set up these Gulp tasks yourself, or how did you put them together?
I meant the difference between a task runner and a build system. Why would someone be so picky about the wording and then "grossly generalize".....
* I use Vagrant (and [PuPHPet](https://puphpet.com)) to set up a new environment. Using this method, I can keep all of my projects' environments separated. This also allows project contributors to keep an identical copy of the server environment. * Everything is kept under VC in a Github/Bitbucket repo. * My editor of choice changes all the time. Recently I've been using [Atom](https://atom.io/), but sometimes I'll switch into Vim. I prefer Atom over Sublime Text because it's free and open-source (and has [tons of packages available](https://atom.io/packages/list)). For bigger projects, I'll use [WebStorm](https://www.jetbrains.com/webstorm/) or [PhpStorm](https://www.jetbrains.com/phpstorm/). * [Grunt](http://gruntjs.com/) for minimization/lint/etc tasks, [Bower](http://bower.io/) for front-end dependencies. Sometimes I can just use [Yeoman](http://yeoman.io/) to scaffold a project quickly. * I know people like to specify their OS, but with my setup that's irrelevant. All of those tools are cross-platform, which is nice because I can move between OS' and develop without any friction. 
the task 'build' is something I built myself the various plugins being used, ie: concat, rename, annotate, uglify - are plugins developed by other people. For a lot of the common things that people need to do - there is probably already a plugin for it. It's up to you on how you want to chain them together. 
What version is the FF you screenshotted? If it isn't the aura channel then the extra stuff could just be pre-release code that hasn't gotten into a later channel yet.
Again, not really ;) The editor I'm talking about does run client side (in the browser), but the writing and storing of files is done server side. A website cannot write directly to the filesystem of a user accessing it. This is for security reasons.
You talk like someone who knows what they're doing but you don't. If you were half as intelligent as you thought you were, you wouldn't need to ask such a fucking stupid question. Spend two weeks actually learning/writing Javascript and you will come back and see how embarrassing this question is. This is the level of competence from a "college student well-versed in C++"? Oh man, I'm liking my job prospects for the foreseeable future... :)
Of course 'can' doesn't mean should. It's useful for pushing / checking out your code into a directory to be served from (if I'm understanding your workflow correctly). Of course this should be used in a development environment and keep the workflows separate. You could also push into another repo when you're happy with changes made in development. Good luck!
no, the dependencies are managed in package.json
Build system: takes 'raw' input, builds to desired final output. Should be reproducible; ie if the package of component parts are handed to something/someone else, it should build identical output every single time regardless. Task runner: automates running of tasks, not necessarily building anything - it could, say, just watch a directory and notify an interested observer of changes. It could also run a build system. Rake is a task runner, for example. Grossly generalising because there are many ways to skin a cat. 
RxJs? 
- All dev environments are a ubuntu virtual box controlled by vagrant, for consistency amongst devs. - We choose a ticket from our ticket management system. - We use capistrano on the vagrant box to setup a copy of the website for that ticket. It copies a 'master' version of the website stored on the box, does a pull from master to get it up to date, then switches to a branch named after the ticket's code. - We work on the project, and when done push changes to our remote repos on github. We then create a pull request to the master repos from which the remote was forked. This triggers a jenkins build of the branch. If it fails, merging is blocked and the ticket gets marked as blocked on our ticketing system. If it passes and the ticket passes multiple QA (BE/FE/Acceptance tests) then we merge the pull request, create a tag with the latest code and deploy it using capistrano. - Although all code runs on the virtual box, the code is all in a samba share so that it can be worked on like it's local in our IDEs. We have just added node / gulp to jenkins and our vagrant boxes. We will in the future use this to minify JS files, compile SASS, and write in the appropriate style / script tags to the head of the HTML files. I imagine this will be done based on some mapping. IE this script file will contain this list of sources. In the future we plan to integrate karma with the phantomjs browser runner into jenkins and our vagrant boxes for running unit tests. We all use PHPStorm. It really is the best IDE I've used by far and I've used all the big ones in my time. I've just got it working with karma and a PHPStorm chrome plugin so I can debug javascript in the IDE iteself when running unit tests. I know chrome and firefox developer edition already have tools to debug JS, but it's not as good as doing it direct in the IDE. Much easier to use. I hope to get the debugging working with node too, I just need to work out how to get the IDE to communicate with my vagrant virtual box to do this.
I don't see much overhead in using git. It would also make it easy to deploy smaller projects that don't need a whole build / deploy process / aren't load balanced. Just git pull on the server.
The q&amp;a panel from ng-Europe had them state exactly this, but the backlash started as a result of that same event. I think a large part is that people realized that they couldn't just upgrade a major revision and not touch the code. But that's kinda the point with major revisions. Watching that q&amp;a panel made it incredibly clear to me that they made tons of mistakes with angular 1 and 2 is them fixing that. And that's awesome, if you ask me.
Okay but if the data is stored in local storage, how can a user download it? AFAIK a download using an `&lt;a href&gt;` tag has to point to a URL, and thus it would need to be hosted on the server, no?
FFS. It doesn't *matter* if it's a joke - it's clearly a sexist comment. Just STOP already. It's this shit that fundamentally is the problem with our industry!
a command which stores info becomes a memento for me in many ways. http://en.wikipedia.org/wiki/Memento_pattern 
I didn't mention either sex in that comment. Your own mind inferred the sexist tone. Maybe that's something you need to look at, but either way, I think we can all move on here. 
Also I should note that I know OP personally which is why I answered with a sarcastic last option. I think we can all agree it'd be a weird thing to write to a stranger. 
You're absolutely right, you must have been talking about those g-rated pole dancers that are so in right now. Seriously, please consider cleaning that shit up - it's wholly unacceptable.
http://en.wikipedia.org/wiki/Chinese_pole Do your research
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Chinese pole**](https://en.wikipedia.org/wiki/Chinese%20pole): [](#sfw) --- &gt;__Chinese poles__ are vertical poles on which [circus performers](https://en.wikipedia.org/wiki/Circus_performer) climb, slide down and hold poses. The poles are generally between 3 and 9 metres (10 and 30 ft) in height and approximately 2 to 3 inches (5 to 8 cm) in diameter. Some poles have a slightly larger pole that rotates around the static central pole using [ball bearings](https://en.wikipedia.org/wiki/Ball_bearing). This rotating pole allows a performer to spin on the vertical axis, giving a performer the ability to incorporate rate of spin into what would otherwise be static moves. Bringing the body closer into the pole causes the performer to spin faster. A few Chinese pole tricks have been incorporated with [pole dancing](https://en.wikipedia.org/wiki/Pole_dance) techniques. &gt;==== &gt;[**Image**](https://i.imgur.com/ISDab4e.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Leosvel_et_Diosmani_-_4.jpg) - *Cuban acrobatic artists Leosvel and Diosmani on the Chinese pole.* --- ^Interesting: [^Northern ^Pole](https://en.wikipedia.org/wiki/Northern_Pole) ^| [^Guandao](https://en.wikipedia.org/wiki/Guandao) ^| [^Gao ^Shuying](https://en.wikipedia.org/wiki/Gao_Shuying) ^| [^Yang ^Yansheng](https://en.wikipedia.org/wiki/Yang_Yansheng) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+clzzb3a) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+clzzb3a)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I've done my research. Women don't want to be in tech because men make comments like yours. STOP DOING IT.
Nice succinct summary of the article /u/rauschma.
Ok, lets get down off that high horse. I did **NOT** mention women in my post! It was a sarcastic option, which the OP would know what I meant! If you want to take that comment as sexist, you go right ahead and take offense but you are getting the **WRONG** end of the stick! I don't subscribe to the male chauvinistic attitude, its bullshit. So how about we calm down and hug it out! 
Look, how many different ways can I say it? **YOU** are peddling this point! I've mentioned before that I haven't talked about women **YOU** brought the sexism up. I've mentioned my stance on the sexism in the workplace/chauvinism. But to reiterate it's wrong and bullshit! I've mentioned that I was replying to OP who I know personally, who for the record know's I have a circus background so at a push would know I meant something completely different to where your mind went to first. You are dragging this out. I've spelled out I didn't mean what you seem to think I meant AND that it was a sarcastic last option. Now lets put this to bed! 
This is fantastic! I can't stop playing with it in Codepen 
I think I saw this used here - http://district13.co.in/. Although I didnt see any code in common. Maybe one person copied the technique of the other but rewrote the code?
Maybe I'm doing something wrong with my SVG paths but is there any reason why this would work in Chrome but not in Firefox? 
Most definitely, especially at the enterprise/startup levels. I am aware of a couple that quickly moved to Ember and a couple that started looking at React.
Howdy. I run a [js meetup](http://okcjs.com/about/) in my city, [Oklahoma City](http://okcjs.com/), as well as a conference called [Thunder Plains](http://thunderplainsconf.com/) out of Oklahoma City. Both have been ongoing for many years now and are actively attended by many folks. I know you are mainly asking attendees what they look for in a meetup, but as an organizer and active community participant I'd be happy to answer any questions you had about usergroups. I would say there are some things to look for. 1. Is the group inclusive, or a country club for nerds? This is a big deal. You want a group that feels like there isn't shame in not knowing something, and the group actively encourages all sorts of folks to attend and learn. 2. Does the community participate? At our group we have lightning talks, and many speakers are members of the community. A good group is something folks want to be a part of. 3. Is there a code of conduct? Highly related to point 1. Organizers need to foster a safe environment that makes everyone feel welcome. No sexists remarks, religious proselytizing, drinking, etc. You're there to learn and have fellowship with other developers and those learning. 4. Where do they meet? We meet in a maker space in Oklahoma City. A maker space is logical, as is an educational institution or a library. I know some groups meet at bars. For a usergroup this is a terrible idea. Think of this: The inventor of socket.io and gulp.js were not drinking age when they invented those tools. Not to mention a place serving drinks sets the wrong tone entirely. What if a young person wants to come and watch a speaker? Don't pick a place that is exclusive, or promotes the wrong environment. 5. Who puts it on? Is the usergroup essentially ran by a large corporation or a recruiting firm; or is it community run and community led? Noone actually wants to basically attend an advertisement for a product masquerading as a community. Besides, do you want people attending in order to learn or instead to score free Corporate™ shirts, key-chains and usb sticks filled with bloatware? As for content, you might peruse our past events, on both the [OKC.js site](http://okcjs.com/about/) and the [Thunder Plains](http://thunderplainsconf.com/) site. There is always a constant dialog with community members about what is good to discuss and what topics are cool and relevant. Javascript is rather fecund tech stack and there is no shortage of good material to cover. Also, don't be afraid to explore what is traditionally considered "soft talks" geared towards community and culture. As we all know, software development, like other trades such as music, art or science is in many ways a lifestyle/life-choice. 
Honestly? Beer/alcohol is, in my opinion, something that shouldn't be served at general technology meetups. Exceptions are something like 'Nerd Beers', where the focus is the drinking. Read my response elsewhere in the thread. 
There's really no need to be an asshole. It was a legitimate question since JavaScript is a language you can implement without knowing much of. I personally know people who have mastered Jquery without learning JavaScript in detail. Thanks for showing me what kind of assholes I'll be working with in the future. Don't even bother replying because I won't be entertaining anything further. 
Ps the whole reason I asked the question was because I don't know. Defeats the whole purpose of your rant
Browserify is a CommonJS translator for the front-end. Typically, you write code like you would in Node (which uses `require` imports), and then Browserify it all up to get a single file that can work the same in a web page. It's typically useful if you have code that works both client and server, such as general purpose libraries like LoDash or Underscore or shared code. That being said, `require` is an extremely useful dependency management (somewhat injection) framework which is integrated into Node.js, something client side code typically lacks (although, angular.js can handle DI for you as well). An alternative to Browserify is Require.Js, which code is written the same, but they are fundamentally different on how they work. Instead of a single file, Require.Js will lazy-download dependencies only when needed. Although, Browserify doesn't have to be a single file, you can side-load modules as well by exposing globals to it's build process. Some people say Require is better, others Browserify, some neither. I mainly use Browserify (and es6ify) to handle my ES6 code and traceur transpiling. That way, I can use node with harmony flags, or generate ES5 for the browser (the latter actually being more supported). 
&gt; Yes, your Browserify/CJS workflow “just works” for you. I’m very happy that you found a great workflow with Browserify and that the tooling around it has matured to the point where you’re confident saying everyone should just get on board with CJS, stop using AMD or globals (which clearly suffers from pretty foundational flaws, let’s be honest!), so we can all live in the happy future of a common module format. Yes, I did know that, in fact, CJS can compile down to AMD, UMD, _and_ globals pretty easily. Yes, that’s really great for AMD users to have an excellent migration path to CJS or, heck, they can even keep using AMD if they want. Yeah, I also heard that Browserify's tooling author is a very smart guy, his talk on modules at the last NodeConf was great. We all learned a lot about static analysis and how CJS is going to really solve a lot of problems. I’m feeling pretty convinced that you’re right and Browserify has won. I like MadLibs.
Annoyingly, some things are available in bower and not npm and vice versa (Angular, looking at you—as much as I loathe you you're only available on bower or direct download). So really, you have to have both right now which is dumb. I really wish Bower didn't exist (not being mean to bower, it's just because npm was first and more common, bower dilutes it).
Is medium.com *just* a place to throw apocalyptic tantrums about web technology? Or are all these articles coincidence?
This can all be done client-side using the File API, which lets you grab files directly out of your &lt;input type="file"&gt; using `File` (https://developer.mozilla.org/en/docs/Web/API/File), and construct data URIs using `FileReader` (https://developer.mozilla.org/en-US/docs/Web/API/FileReader). The big downside to using a data URI is that it's not intended for giant files. Fiddling with it on my mac mini, it handles encoding ~5MB as data URIs pretty well, but once you're 10MB+ it starts to get sluggish to the point approaching unusable. So long as you're working with little files this approach should work. Data URIs were never meant for very big files; the FileWrite API was meant to address this and give us a way to quickly save big files from in-memory File objects, but that's recently been sunk by the w3 and almost no browsers support it: https://developer.mozilla.org/en-US/docs/Web/API/FileEntry . Here's a stripped-down example of me loading a file in memory, then building a link back to that file as a data URI. Obviously in practice you wouldn't just spit out a link directly back to the same file you just uploaded: you'd load the file during the input's `change` event, load your app's state based on the file, then build a blob to represent the state of your app after you've edited that file, then run the FileReader bit against that new blob. For now this should be enough to get your started: // change event gets fired when you select the file in the &lt;input&gt; document.getElementById('localFile').addEventListener('change', function () { var reader = new FileReader(); // This is a File object, easily pulled from our &lt;input&gt; var file = this.files[0]; // Grab a data URI of this file if (file) { reader.readAsDataURL(file); } // Once the blob is finished loading as a data uri, build a link to it reader.onloadend = function () { var a = document.createElement('a'); a.appendChild(document.createTextNode('Download this file')); a.href = reader.result; document.getElementById('output').appendChild(a); }; }); http://jsfiddle.net/jkoudys/48sfokb8/ edit: to address your point about binary, I'm not sure what you're looking for there exactly, but there is a FileReader.readAsBinaryString(), or more likely readAsArrayBuffer() if you want to access parts of your file by their offset.
&gt; Assetgraph I see that as as *Ass-to-graph* every damn time.
Serch which ecosystem is more prevalent in your job market: ruby, java or c#. If its java and c# then they are usually used with angular. Ruby is used with ember. Nothing would prevent the complete opposite from a technical standpoint. But ember was made hy ruby contributors so it got popular on that space. Also ask yourself do you want to do public websites then its ember. Enterprise webapps then angular. This distinction has nothing to do with technical possibilities, just where these technologies popped up and where they tend to get used the most.
I started using npm and Webpack to build an isomorphic app a few months ago. I've split it into about 8 different modules that all have common dependencies, and I've grown to learn that nested `node_modules` folders are the root of all evil. npm's `peerDependencies` is completely broken, and the only way to make it kind-of-OK is to flatten all your dependencies into the root's `node_modules` folder. The most fucked part of all of this is I need to keep my working copies of these dependencies inside said `node_modules` folder, because the only thing in `npm` more broken than `peerDependencies` is `npm link`.
Is that all it can do? Create dots and draw lines between them?
Good point, but if we want to add new methods to the object later why would we use *Object.freeze* in the first place? Besides *Object.freeze* is used quite rarely
Thank you, that looks promising! I have one question though. In your example you're using FileReader.readAsDataURL() to generate the URL, but after editing, I'd have the data as a string, not as a File. How would I convert this to a data URL?
Well, at least, unlike in some other languages, there are other mechanisms in JavaScript for doing the same thing as the Visitor pattern does, but if you still prefer it, it is also fine. Notice that Visitor is also omitted from the book
Take this to /r/LearnJavascript or /r/learnprogramming . 
There's actually not much *magic* in there. What it does, is open a long lived XHR request. Around it, the response is transformed into events. A couple of listeners subscribed to those events: one reloads the page, the other loads a new image. (There's also some unimportant `console.log`ging) `EventSource` manages the XHR, keeping it open, managing reconnections, parsing the response and firing the received events on the `EventTarget`. `EventTarget` is just that, something which fires events to which you can subscribe. (Note that, actually, prototypes are set up so that when you do a `new EventSource(...)`, then `EventTarget.prototype` is on your prototype chain) I don't know what more to tell you. It's a nice way to do it without using websockets, but nothing really new.
Nope lol. Nothing is except the theme. Everything else is the same devtools code. It also just has the remote debugging extension by default, but you can add that to normal ff without worry. This whole developer version is currently just one big PR stunt. If things diverge in some months with special stuff just in this then it may be really cool. Otherwise it is hype to try and get developers back from wherever they have gone to for tooling.
Great article, thanks!
I been using AngularJS for more than 2 years now and I've been watching Meteor until I got to the point I had to test it. After trying that I think that Meteor is amazing and it's getting stronger by the day! But I didn't want to give up AngularJS and it's huge ecosystem. So our team created angular-meteor: https://github.com/Urigo/angular-meteor http://angularjs.meteor.com/ And we have 2 production apps running on it, also using the great Cordova support Meteor has with Angular's Ionic Framework. Would love to hear your thoughts on that 
Guess so. Although in PHP a associative array is also the term for 2D arrays as in a array with an array for each value and that kind of sets it apart from what we call objects in js. 
You could try excluding the div from preventDefault by asking if the element firing the event has some attribute of your div, e.g. the id &gt; if(e.target.id != 'mydiv') {e.preventDefault()} 
They (Ember) seem to be highlighting their backwards compatibility, which right now is a solid strategy. I for one have been convinced to invest my free time in learning Ember, I will continue to use 1.3 at work but for my weekend projects Ember seems the way to go. Even if I find their mouse mascot annoying.
If I already know Grunt, is there a point to learning Gulp? What's the significant difference between them?
mdn, really
Javascript itself is too broken for it to be able to break the web.
http://todomvc.com/ is the best place to compare MV* frameworks
Gulp is faster, think that is the main difference. But I just don't like that Gulp syntax, but that is just my opinion.
Is it faster due to piping content between tasks? Less I/O?
this functionality can be acquired by using "grunt-concurrent". but I personally haven't used gulp - would like to try it out.
Looks like you've written a bad form of lisp.
Functions can be used for constructors, too. If you want to emulate classes behavior, then it's better to use functions. Objects on the other hand are great for namespacing.
Forgive my snark. Why not both? Functional objects homeboy. 
The main performance gain is due to the way you run your tasks in Gulp - you feed them to the pipeline and it all gets run, keeping all the content in RAM. In Grunt on the other hand you specify destination file(s) for each task, so it reads the files, processes them and then writes to the destination, which then can be used by other tasks. So there is much more I/O going on and this is why it's noticeably slower.
&gt; without all the actual code There would be some items inside the array
It looks like Pixi uses a global non functional object that allows you to create new instances of game components like stages and textures, along with some global modules. I'd probably go with that approach.
I would say that 90% of the time when new JavaScript developers have this problem, it's because your code is on the head element and not waiting for the page to finish loading. Try moving your scripts to the end of the document or bind some initialization function to [DOMContentLoaded]( https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded).
I find grunt files hard to understand - don't like the configuration heavy approach. I can almost instantly understand a gulp file and know whats going on.
* Put as much as you can in services * Don't rely on scope * Keep your controllers as thin as possible People are acting like the sky is falling, but Angular 2.0 is still a long ways out, there will still be support for 1.x after Angular 2.0 is out, and if you develop with some good practices in mind - you can help ease the migration path. $scope was a bad idea in the first place, the directive API was shit to begin with - good riddance to them. The main thing that is leaving me a bit 'ehh?' is the changes to the templating - although that's still up in the air, and there has been concerns raised over the proposed one and how it will work with SVG. "OMG! Angular 2.0 is a huge change, so we are going to re-write our app in Ember instead, but once 2.0 is out and we want to leverage the benefits of ES6 - we will want to re-write it again anyways!" I think Angular is throwing all of their bets in with ES6 - and are wanting to future-proof their framework a bit by going all-in with it. Even before the the shirt-storm of the 2.0 announcement, I've been moving towards trying to use controllers as little as possible with them just acting as a bit of glue to a service (my first apps were heavy controllers and everything slapped onto $scope -- those will be a bitch to migrate) 
It might not be under your control: a third party library whose API is locked down is possible, mainly for self-preservation.
Gulp is much faster, and gives you finer control over what happens in the pipeline – but it is much more finicky to control and configure.
&gt; but it is much more finicky to control and configure. Can you elaborate on that a bit?
My only complaints with gulp so far (I've been using it a lot the past year+) are: * Doing things synchronously requires jumping through a couple of hoops (have to load a [module that will let you specify tasks syncronously](https://www.npmjs.org/package/run-sequence)). But even that isn't a big deal, and it isn't often I *need* to do something synchronously. * Needing to do more than one thing at a time in a task also requires extra code (I use a [module that merges streams](https://www.npmjs.org/package/merge-stream) together). Overall though...its been great...and I've built some pretty complex/involved build systems using it.
grunt = config, gulp = code.
Just the constant status updates, adding, removing, committing, thinking of commit message, deciding whether to branch, deciding what branches to work in or merge... Don't get me wrong, I deeply love Git and find it indispensible for team projects. For small solo projects, I don't find the benefits outweighing the costs unless you have some particular need for version control (maybe the project is super important, and you always need to be able to rollback changes or whatever). When I make a personal website for myself, I just write code and don't worry about Git. I'm also not including any Git submodules or using anything like that, so if you are, there's a good reason to use Git for your small projects.
doesn't look fun at all, but il try it.
Look at the doc for `Blob` (https://developer.mozilla.org/en/docs/Web/API/Blob). I've split apart my example so the loading and creation of the link to save are in two separate steps. You'll probably want to build a proper array to represent the data for your blob, and not just stick `[]` around a big string, but it gets the job done for an example :) document.getElementById('localFile').addEventListener('change', function () { var readerLoad = new FileReader(); var readerSave = new FileReader(); var file = this.files[0]; if (file) { readerLoad.readAsBinaryString(file); } readerLoad.onloadend = function () { var p = document.createElement('p'); var binaryContents = this.result; var blob = new Blob([binaryContents]); p.appendChild(document.createTextNode(binaryContents)); document.getElementById('output').appendChild(p); // Let's save the new blob right here readerSave.readAsDataURL(blob); }; readerSave.onloadend = function () { var a = document.createElement('a'); a.appendChild(document.createTextNode('Download this file')); a.href = this.result; document.getElementById('output').appendChild(a); }; });
The biggest draw for me about Gulp is that it handles I/O of source and destination in a standardized way. I can never remember how one Grunt plugin takes its src/files/etc and dest/output/dist options.
You should really have a look at this book: http://addyosmani.com/resources/essentialjsdesignpatterns/book/ (Free at that source)
Maybe macros? https://addons.mozilla.org/pl/firefox/addon/imacros-for-firefox/
This is really cool and innovative! I'm looking forward to getting my hands dirty. :)
seems like the video is down :-(
Calling an array "obj" is pretty odd. If you aren't going to use it like an array, use an object instead. Get/set via index -&gt; array. Get/set via some string/property -&gt; object.
Weird. What is happening to you? What do you see when trying this direct link http://youtu.be/tWL648IHOwM ?
Very cool, thank you for this - seems to be just about my speed.
That site is total garbage on mobile. 
Fair play. It's being used regardless for some reason though on XKCD.
I don't think I would bother submitting numbers to them as the submitted numbers may end up getting you spammed further. There's a couple things wrong: Yellow flags: The domain is 1 year old. The site is wordpress based. Red flags: Heavy SEO focusing on excel, quickbooks, and sage 50 combined with locations. the removal page is **not** accessible from from the root page, or anywhere from the main website spidered from the root page. The site keeps timing out from light spidering, turning it all the way down to 1 concurrent request still results in timeouts. The website has 0 external urls (Not counting wordpress.org) Site uses generic and unoriginal clipart. No original photographs. [Even the people in the banner are used in hundreds of sites elsewhere](https://www.google.com/search?tbs=sbi:AMhZZit1I4mfCQEZzhxYO8sCtWxL1034K3NoxCT3zFMw58FLs0JUQ-Uu3f-aVKIIiUMOw39IpLAVW7wl79PObF6-qde1Bqwe1bDhgDPGU65QJ-54tAkn5_1NtGIq-0sztQFdi8wmDGIlus848nC2y-ducxku-ABZDZBMkt5dJHj4wSPuXOQM6txmHZjtNMCAOr61eDgeuJwPckGXB2PoG_1-cZJ4z8X6dpsVYlJqthwabe0n-9k8kXJJBk0dLlDUTr-Z3yZbfv77XzOg7So0NL_1WUUv7IVakYv5b4yJzKT_1dsML2CfZtHgxq6tNLbNwRq7geUl54dGi_1L2DdE8ptxo3dKtjXC3ewbOG2ahcgzyikXmWbNwe6EH26HNORvsBWknYxYP1D6qsC9fWoLBU2YnF08vR32e8S3wuIDf_1X95vZNylHSYcafW9KaOgu7QBeUsGVWGiLMCE5m1Z3-HTizK_1wIySOmUd6vbmeTUfbltuQRkVCCUpnCGmIioXv6J_1qjmz1VS4A0QSPk22wO9YlQl_1gc4k85Sz3wiaiiKp1yuMKebbeJ9vk5opY6X459CVnNL_166LqrWAQrRtu0A8hHz7auqOenLXh4FcnHy9JNk92xKtad7r_1ehOkHYF2JvfH2JHWwK9jEwE7hOoddABMI-hf9fRTwGGPGA9whqtwjJfDPrtKL8St9vuhRvQk0HCRrGM1GJq-lyKR3162jsVbTZZU0-EE2TzNmfiTBcrOBLM_1YbReEovriHn3zKDQgdDX7t9q5ny-WUBQ5NfKQL33WYMfbz8sshlLl9qxJR-iIQEJgHjplsK-ITjihAd8KV9Q0F475h6_1lWcflwQea43Dh3V2FXqMYwU70IAel-jNgeZL3pDW3joYMdya_1VlqE5T9_1RAbNHvpN-8-8s-k2A4w_1DmqTwDe0zNrMBFDEp0T_1QlNy1pECgbkBU_1SEivQSV1LIql9b0HdY9f-v9JMhiutoOMI2OOw6NbnRuugV-4p52ZmtOQSIrMQ8gR4-t4exjxeArnPSKZC70eX1ZK-Ev9U3LMHtHCq1E5qbZLyxJNnOq6Y6Nv_1hAzeicZUOBooobn_1I2-L21MZ2OoD6kL-o7Hcf1HnXiH402rEMr8mYal_11UMaNzUL7Z7SdRULHuhtHmmaRNQUOEXI_1i0Ra4U0Vw27LGfhq1A92_1xzUBp0Jojjv1bo7HUgMSxxEXJsfIR2pUjLpDMRPBDdGIuTDwB10XLgsATS6ylnF-aBpdFYTyfqtcwSTDwA_1pY2KbxdknDlbTQ_1D_1Y7OvEqBQqqZAWD1uslynsLPPtuGDuFiShwzcqX8b2ziF69r51fB-XusPujW3AZqeRMdmE440D2w_1iSZY-Nx-H4dl1gO_1hNt2zds2T6CQtthaEKz33HkY4Nhi8W_1qLEDsd9-RgwamGptOk). I think you should call your teleco, set up a block against the number and or report them for junk faxing.
I'm guessing bugs on available implementations.
Very cool! Looking forward. I'm developing a game in a similar spirit... an [elevator programming game](http://magwo.github.io/elevatorcrush/).
In my experience chrome's developer tools offer literally every feature a developer might want, so I'm not even shopping for a new browser for development. Sorry Fox.
Sure, sure, programming mumbo jumbo, I've heard some of these words before... But seriously, thanks for the recommendations - I'll look into them.
I think ultimately it depends on what Angular 2.0 looks like when it's released. I want to give them the benefit of the doubt and think that Angular was great, but could be better and they just couldn't achieve that without starting from scratch (it's not too uncommon). That being said, I'm also losing trust in them. What's to say 3.0 won't be just as different. I want consistency in my framework because, to me, it doesn't seem very rational to work on a product that you know is from the 'stone age'. That all being said, I love Angular 1.x, and think if you're going to learn a framework, it's a really good one. It isn't just the framework you're leaning. Learning the nooks and crannies of Angular teaches you things about JavaScript you may not already know, and forces you to think about web applications and UI optimization in a different way. I think at minimum it's an excellent mental exercise. Ember, on the other hand, kind of beats you senseless until you start to understand it. When I was picking it up, the documentation was abysmal, different pieces of knowledge hiding in random holes. I assume that's changed, but it took way more effort to understand than I'm comfortable admitting. I also didn't "learn" much from it since everything is custom to the framework, you learn very little actual JavaScript or skills you can apply elsewhere.
front end javascript frameworks at github https://github.com/showcases/front-end-javascript-frameworks And the trending https://github.com/trending?l=javascript
As i see it the main problem with underscore/lodash is that the method arguments are in the wrong order, making functional programming "impossible". The benefit from composition in a codebase really shines when it comes to testing. You could have a look at something like ramda, or even LiveScript if you feel more adventurous.
That is tasty work.
This article may finally get me off my ass and convert my gruntfile to gulp.
I'm not sure what message this guy is getting, but the video has been "restricted from play on certain websites" because has copyrighted material from SME or SMI or something. I'm assuming it's because of the music you're using.
It's restricted in Germany too.
Nice. Early access?
&gt; Doing things synchronously requires jumping through a couple of hoops Not really, you can do like so gulp.task('task1', function () { .... }); gulp.task('task2', ['task1'], function () { .... }); gulp.task('task3', ['task2'], function () { .... }); gulp.task('default', ['task3']); Or you can do like this gulp.task('default', ['task1'], function () { gulp.start('task2'); });
For the lazy, the two new features in this release are: “protected” access modifier and tuple type Plus they have a bunch of enhancements for Visual Studio.
Sure! Get back on November 20, there will be more info then.
That and each plugin doesn't need to know the src/dest like it does in grunt
Dunno about you, but that syntax qualifies as 'jumping through hoops' to me...and complex builds are still problematic with that approach (I know...tried it before coming to my solution). The module I mentioned above allows a more natural feeling syntax: var runSequence = require('run-sequence'); gulp.task('allTheThings', function(callback) { runSequence('firstThing', 'secondThing', 'thirdThing', callback); }); **Edit:** I remember why it was an issue for me, the method you mentioned essentially brings back the issue of 'pyramid of doom'...where you now have N-number of nested callbacks making the code difficult to read/modify.
Yeah, I didn't mention, I'm from the US. I suppose these restrictions can vary by country.
What's the name of the song in your promo video? I can't remember the name. 
Yes...I have a build system made with gulp that does just that.
Edvard Grieg, In the Hall of the Mountain King.
Ya its horrible. Edit: its fixed.
We've replaced the audio with another version, please try again, is it working now?
Honestly, I think once NPM supports the ES6 module format, a lot of things will start to get better. One of the main problems with ES6 modules is that it's just a syntax extension -- it offers no guidance on how to actually build a module loader. NPM will probably continue to do its thing with ES6, just with the newer syntax. `import foo from "./foo"` will just be an analog to `var foo = require("./foo")`. But the huge benefit is that modules can be loader-agnostic if imprting and exporting are done with a consistent syntax.
Works for me. :)
The main problem I see with these libraries is that I use &lt; 5% of the functionality, thus it's less overhead to have a util.js with a few helper functions.
I really don't see how it's a pyramid of doom, it's just setting dependencies to be run before the task starts. Whatever though, to each their own. The reason I like gulp so much is that it's code and you can make it do what you want. To be fair, the only time I've needed synchronous stuff, is when cleaning a folder before running my main task.
These aren't nested callbacks - one solution to the pyramid of doom is to extract each level into a named function and manage flow control between them externally. That's effectively what tasks are, and their dependency lists are equivalent to using [`async.auto()`](https://github.com/caolan/async#auto). Your solution won't allow independent tasks which another task is dependent on to run in parallel, e.g. this from one of my gulpfiles: /** Regenerate /dist from scratch */ gulp.task('dist-copy', ['clean-dist', 'build-app', 'build-deps'], function() { return gulp.src(['./build/app.' + jsExt, './build/deps.' + jsExt, './public/**']) .pipe(gulp.dest('./dist')) }) 
You should check out the comments from L-Dash's creator at the bottom of the article. He says a "correct" compose order function will be available in the next version of Lo-Dash
Might want to look into Lo-Dash's custom builds for this.
Make an array of your fax numbers, loop through, and create all the links in an html file with the target attribute=_blank: &lt;a href="http://crystal-training.net/scripts/FormHandler.php?_nof_param_file=FormInfo_LayoutRegion1FORM_2061346336_15394.XML&amp;FormsEditField2=111-111-1111" target="_blank"&gt;111-111-1111&lt;/a&gt; &lt;br&gt; &lt;a href="http://crystal-training.net/scripts/FormHandler.php?_nof_param_file=FormInfo_LayoutRegion1FORM_2061346336_15394.XML&amp;FormsEditField2=111-111-1112" target="_blank"&gt;111-111-1112&lt;/a&gt; &lt;br&gt; &lt;a href="http://crystal-training.net/scripts/FormHandler.php?_nof_param_file=FormInfo_LayoutRegion1FORM_2061346336_15394.XML&amp;FormsEditField2=111-111-1113" target="_blank"&gt;111-111-1113&lt;/a&gt; &lt;br&gt; Then just go through and click each link one by one. I am sure you don't have more than 100 or so numbers, do you? There is a better solution if you have more than 100 numbers.
This looks really, really interesting. I wonder how deep one could go with optimization? Judging by the video, animations need work. But that's okay.
Can you provide an example of where you are needing to propagate your exceptions when using promises?
Yes, Gulp has dependency in mind and you can set up a default task to run all your other tasks: gulp.task('default', ['MyApp1', 'MyApp2']); When you run gulp, it will find the gulpFile.js and run that default task. It currently has no code block associated, but it has dependencies that it runs (MyApp1, MyApp2). Before that, you simply define MyApp1 and MyApp2 to whatever you want... EG: gulp.task('App1Concat', function () { /* setup watcher/concat pipe here */ }); gulp.task('App1Server', function () { /* run server on whatever port you want here */ }); gulp.task('MyApp1', ['App1Concat', 'App1Server']); So now when you run gulp, it will run the default task, which executes the MyApp1 and MyApp2 tasks. These tasks have their own dependencies (MyApp1 depends on App1Concat and App1Server, so it will run those tasks.) Edit: If you want to run just MyApp1, you would run `gulp MyApp1`
Just any example really. Say I make a goof and try to call a function that doesn't exist inside a function that's inside a then: makeSomeRequest() .then(function() { var someVar = {}; someVar.oops(); }); Gosh I sure hope I didn't forget to call .done() on that so I can see why my program just silently fails. Obviously this is a really simple example, but as software gets really big, it can get tough to pay attention to many promises and where a promise chain ends and not forget to properly call catch (or done) so that you know when something screwed up. Basically I'm looking for someone to tell me to suck it up and that callbacks are much worse.
You just should catch the error somewhere in your promise chain. 
Vim is king
Also, I think bluebird notifies about uncatched exceptions. 
This looks freaking awesome, any chance you will allow us to pull in libraries like lodash/underscore/jquery? Maybe even clojurescript? Edit: I mean, preferably you could import any javascript file hosted somewhere on the internet which would also allow people to package up code and distribute it. This kind of functionality could also lead to things like sending reports to your personal web server through HTTP POSTs.
No, sir. :| Here's the webpage: http://static_cast.home.comcast.net/~static_cast/Nyero/CSP/ I figured something out, it was a tag within the unity embed object.
Any external JS code which is not using built-in NodeJS 'require' function is allowed. Lodash will be accessible by default for every player.
Really cool stuff here Kev. I would suggest adding the source code for each experiment to the index page.
Awesome, thanks
Notepad++
Was using SublimeText3 and still do for quick editing. But I've moved to Webstorm and it really is the best JS IDE I've used. Its code inspector picks up every last mistake or JSDoc mish-match. I've filled it with live templates which speeds up my coding no end and debugging in node is fantastic. 
Oh, didn't think people would want that, but all right. I'll probably add that functionality in this weekend.
Lo-Dash is 28KB, unlikely to be consequential on even a medium-sized website. Not to mention, both libraries are quite popular and thus likely to be cached if you use a CDN url. If you get to a point that you can demonstrate that lo-dash/underscore is a real bottleneck, run your code through google's closure compiler, stripping the unused functions. 
One of the features coming in lodash 3.0 is better support for a la carte functions, e.g. `npm install lodash.merge`. There are also custom builds.
Ok, so that sounds like a complete BC break then?
If you use webpack you can have this done automatically with encapsulation and other nice features, but if you want to load a script yourself all you have to do is get it somehow (xhr, websockets, webrtc) and evaluate it in the global scope. That's all there is to it.
I still managed to leave my email address. Looking forward to it
http://www.httrack.com
Ah, k. The title seemed to hint at frustration which usually implies there is a question in the post.
Thanks! I should probably add something like you see on glslsandbox to make it easier to view the code (it is commented and credited in the View Source).
Worst case i'll write the code in my editor then copy/paste.
We use Ace as our in-game editor (http://ace.c9.io), it's brilliant for javascript and JSON editing. However, you are free to edit your code wherever you want and just paste and commit it into the game.
IntelliJ has several plugins that gives you support for several JS frameworks I use it for almost everything, RoR, node.js, Python, Java, C++, heck i have even seen plugins for C# support, so basically anything. 
Yep works great, thanks.
ACE is a solid editor. Was that not written for use in [Cloud 9](http://c9.io) and then open sourced as a stand alone project?
`done` actually has the same function signature as `then`, so you can just use that in any case where you don't plan on further chaining/returning the promise. makeSomeRequest() .done(function() { var someVar = {}; someVar.oops(); }); Obviously you still have to remember to use `done` and `then` in the right places, but if you think of it as "then is for chaining and done is for the last link in the chain", it's not too bad.
To keep the actual dashboard project stateless, would I be able to use webpack at run time? Evaluating the requirements from a json document and loading the necessary scripts?
Visual Studio
Formerly WebStorm, which is a great "web" IDE. Currently mostly vim + browser dev tools + node-inspector, which feels much more lightweight, and keeps me closer to the command line.
Atom
From the video it seems you control your own units from a shell. Does the javascript code runs clientside? I guess that makes it possible to make things more interactive by incorporating keyboard and mouse more into the game. Also, does this also mean bots will be possible/supported? Anyway, looks mighty interesting! The mmo part also adds a whole new dimension, interesting on its own.
No it's an additional function, several actually related to this. See the comments in the article for more details.
This is cool! I've bookmarked your site :)
Why is vim better than Sublime?
ahh, i think its the wonderful german restriction, trying to get around with some proxies edit: saw you changed the video on the website, it's working now! thanks a lot :)
Brackets
Webstorm 9
I was a long-time user of LiveReload, but I recently discovered [BrowserSync](http://www.browsersync.io/) and it's fantastic.
Way cool. Do all bots get the same code or can you break it up by class?
No worries. Same here
Yep. This is my choice since I can use it for just about anything.
Surprised yours is the only Atom vote. Having a v8 console built-in is SUPER helpful for JS development.
I'll save you a lot of time. You'll get the same results as the last 17 times this same exact question was asked ... on reddit ... today ...
Step 1) Learn the difference between JavaScript and Java Step 2) Try and remember the reason you learned JavaScript in the first place and do that.
Webstorm 9
Phpstorm is fantastic.
I'd be all over this. Although, I wish the screebs had a little more.. character to them. Anything beyond just a dot would be nice.
I've switched because it is ~~*modular*~~ *modal*, that is, has many different *modes*. Instead of pressing arrow keys and clickity clicking I can quickly delete whole lines and edit very quickly.
interesting... gah how do you declare a variable outside of the function? cool idea!
Kickin! I had an idea like this a while back and I'm super stoked that someone's had the time to get it running! Great work dude!
Are you serious man? How is this a valid methodology at all? There will be no merit to a random survey on the internet.
I am still learning JavaScript but isn't there a reason why you decided to learn JS? It's still very early on for me but after getting some basics under my belt I've done small projects just to exercise and fortify what I've already learned. Once I become more confident in my skills though I intend to play around with making a game in Impact.js. Anyway, remember why you wanted to learn JS, be it for making a game or working on the front end of web development. Now try to dive into it and continue learning.
Bloat? Seriously? I think it's way better than a million try/catch blocks. 
Will this have any support for scripting in clojurescript in the future? I might try and see if I can get it working
use .catch. example here: https://github.com/beckyconning/reattempt-promise-function/blob/master/src/reattempt-promise-function.js
Gnu screen, node-dev, vim
Sublime has vim keybinding support. 
Im very interested in the means of code delivery too! 
goof = widf &lt; 905 ? 'S' : widf &gt; 1200 ? 'M' : 'D';
His point is that evidence points to them being scammers who are lying about removing your number from the list and that you may end up with more faxes if you put your numbers in there, because that will prove that someone is receiving at your number.
&gt;Does the javascript code runs clientside? The site says: &gt;You write real JavaScript which controls your units autonomously. Any time, everywhere, even while you are offline. [...] units of all players coexist in the same real-time world To me, the implication is that the code is run serverside, at a fixed rate, regardless of whether you currently have the site open in your browser.
Sounds interesting, I'll give it a try.
Gotta love people in here calling text editors an IDE
Why do we need an ide... why can't we just develop in chrome/firefox hookup local storage just develop in the browser. Why is there no way to hook up gulp and other javascript based preprocessors like less to the source window of chrome and be able to save locally. Developing directly in the browser just makes perfect sense to me since that's where all our debugging tools are anyway. I'm sad that I don't have a solution to do this.
I assumed that was an oversight of the OP, but: goof = widf &lt; 905 ? 'S' : widf &gt; 1200 ? 'M' : widf === 1200 || widf === 950 ? goof : 'D'; It's starting to look less sexy though.
Your title is lacking, please try and give a meaningful title to your post. For this type of question, you might mention "refactor", "code golf", etc.
hello, The link is working. http://pantuts.com/2014/09/21/quicknote-jquery-plugin/
I wouldn't use it for Java, but I don't write Java, so vim it is.
The effect is pretty cool... though prepare for the downvotes because you used jQuery. Wouldn't be too hard to turn that into vanillaJS so it isn't reliant on an external library
I find it totally bizarre that such a thing would be asked on any public board such as reddit where 80% of its members are kids under 18 who's only exposure to javascript is what they cut and paste from somewhere.
You mean like their developer toolbars? (mostly)
Haha wow... well then... hmm, has a nice theme!
Because not everyone uses those things and not everyone uses the same one and, potentially, none of them will exist a few years from now. However, you can edit and save files you changed in the browser locally in Chrome, at least. Don't recall if you can in Firefox.
Thanks for your help but this isn't working for me. I'll keep at it. It may just need some jQuery.
&gt; I think I am going to learn Vimscript Save yourself. Turn away before it's too late! Noooo.
emacs
They behave differently than vim and never feel right (plus they are incomplete).
You should take a look at [Chrome Workspaces](https://developer.chrome.com/devtools/docs/workspaces). It allows you to map resources to a local directory. So if you have a local server running, you can map those files that come from localhost/example To: C:\Users\freshtodev\sites\example\ Now any changes you make to any files are saved, and take effect. So you can do (certain) JavaScript changes without having to reload the page. This also works for CSS and HTML (that hasn't already been loaded). It's *so ace*.
Hit command+shift+i in Atom and you'll get a web inspector just like Chrome's or node-debug's. Great for trying out a [].filter().map() type sequence without the whole switch-app/reload/re-nav/switch-back sequence.
My apologies! I felt like I read the guidelines, maybe was dreaming. Edit: do u know how to change titles?
Vintageous feels better than Vim, to me. Note it's a different plugin then built in vintage/vintage-ex Paste especially... Vintageous does a very good job of figuring out what I mean.
You can't, you'll need to resubmit. As for the guidelines, using a proper (descriptive) title should be a given if you want to be taken seriously. Sorry about any confusion. 
This survey doesn't seem to be relevant to ES6+.
That website is terrible, I'm with /u/PING here, it's probably not going to remove your numbers.. but if you're looking a total overkill solution, use some automated web browser technology to automate the form filling and submission... google for PhantomJS
Sublime Text 2 user here, but I think it's about time to leave now and move to Webstorm though.
&gt; [blocked] The page at 'https://magwo.github.io/elevatorcrush/' was loaded over HTTPS, but ran insecure content from 'http://fonts.googleapis.com/css?family=Oswald:400,700,300': this content should also be loaded over HTTPS.
Not from a shell actually, but your write and commit your code which works on every game tick in a loop. Mouse will be incorporated also, but more for placing the spots, flags, and construction sites.
Poll: What's your religion?
[Firefox has for a couple of versions now]( https://developer.mozilla.org/en-US/docs/Tools/WebIDE)…
The new [Firefox Developer Edition](https://www.mozilla.org/en-US/firefox/developer/) has a built in WebIDE, and you can use it to test on multiple browsers with it's built in [Valence](https://developer.mozilla.org/en-US/docs/Tools/Valence) framework. Chrome has dev tools.
Meh, I don't like having to learn yet another language for templating like Ember forces you too. I don't care how "nice" it may be; I prefer a writing my UI using the full power of the host language like React allows.
I usually just fire up the node console, but that's pretty sweet. 
"Many found the dark side to be addictive, unable to resist its pull the more they were subjected to it."
Sublime 3 is great, but I do a lot of work on servers so I'm getting more comfortable with Vim and slowly making the transition as I craft my configuration. Firing up another tab and running node to test function returns is sweet. 
On this front... do everything you can on [node school](http://nodeschool.io) and on a somewhat unrelated note buy/download [this book](http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182)
The article is titled Ember is for Designers while covering 2 topics: 1) Being able to use else block when a collection is null or empty. 2) Automatically getting classes applied to navigation links for an active state. Really? This is considered content? Two extremely minor features that I would consider syntactic sugar at best. This has nothing to do with designers at all.
I have never seen this each-else construct before, but it is easy to guess how it works by looking at your example. It is also less verbose than a combination of 'if' and 'foreach', so what's the problem?
Your comment would go from worthless hate to useful if you linked to those 17 other threads.
And it doesn't seem to work properly in firefox 33.1 (linux) either. __________________________ TypeError: jQuery(...).html5lightbox is not a function html5lightbox.js:108 Use of getPreventDefault() is deprecated. Use defaultPrevented instead. jquery.min.js:5 "Error: html5Lightbox is not defined $rootScope.playVideo@http://screeps.com/js/main.js?2:136:9 db.prototype.functionCall/&lt;@http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0/angular.min.js:196:110 Ac[c]&lt;/&lt;.compile/&lt;/&lt;/f@http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0/angular.min.js:224:187 Ke/this.$get&lt;/h.prototype.$eval@http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0/angular.min.js:123:135 Ke/this.$get&lt;/h.prototype.$apply@http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0/angular.min.js:123:349 Ac[c]&lt;/&lt;.compile/&lt;/&lt;@http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0/angular.min.js:224:237 x.event.dispatch@http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js:5:14077 x.event.add/v.handle@http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js:5:10849 " ________________________
Dude... Once you try multiple cursors in Sublime Text, Notepad++ will seem like I was designed ten years ago. Oh, wait...
Alright, awesome! I'm interested how this will play out. Cool concept.
I used Webstorm for work but switched back to ST3 because it uses something like 23MB of memory while WS uses 700+. I can't spare up to 1GB of memory for an IDE when my computer only has 4GB and Windows 7 uses up to 2GB and Chrome or Firefox use the rest, not to mention Outlook, and other office-related applications, plus building the site with whatever spare memory I have left (usually 70MB when Webstorm is running).
Holy Webstorm hallowed be thy name Let me not fall into temptation with Netbean's free nature My sins with Notepad and Notepad++ be done And deliver me from vim/emacs evil
In addition to the other issues brought up by other redditors, some of the terminology you use isn't really that clear, or would be made significantly easier by having an example. For instance, the question about where you scope variables.
Webstorm. It comes with everything you need out of the box. My licence expires in a month so I've been trying other editors but I find myself configuring other editors for so long without coming close to the feature set Webstorm gives me.
Mostly SublimeText3. Fiddling a bit with Atom. Webstorm looks to have a nice feature set but their horribly retro use of the java swing api makes it look like crap on linux. Yes I've tried all the assorted tips and tricks to get it to look better but swing is something that should have been taken out back and shot back in the late 90s. It's pretty amazing that they're still clinging to it almost 15 years later.
Pretty much my workflow in a nutshell! Maybe throw in a Git/SVN commit or two for good measure.
&gt; An implicit if statement? What sensible programming language would even consider this? Python has for-else and while-else, but it works differently there. http://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops
&gt; thus it's less overhead to have a util.js with a few helper functions. Not for the guy who has to maintain your code
It's all about the Darcula theme 
Is there any difference between Intellij IDEAs and Webstorms Javascript editor?
Totally? It would be pretty easy to tell poorly filled surveys from high quality answers pretty quickly. And the amount of time and patience required to actually fill this out would probably turn most trolls away.
Ampersand is on my list of new wave frameworks that I want to give a fair shake. Having played with it a bit I'd say it's a cross of the intentionally large ecosystem of Ember and the modularity/approach to code of Backbone (in that you're expected to read and know the source code of Ampersand modules--at least, more than you are Ember's source). The trouble to me seems to be that just because it's technically not a 'frameworky framework' composed of truly independent sub-modules that doesn't mean it's not trying to solve every problem at once in one place, which is a real weakness of Angular and Ember. To see what I mean, look at their [Get Started](http://ampersandjs.com/learn/quick-start-guide/) guide: npm install ampersand -g This installs a _substantial_ global client for working with Ampersand that is intended to be a formal codification of The Ampersand Way: &gt;&gt;This app contains what is considered to be best practices for building ampersand apps. Sure, I _can_ browse the Ampersand module list independently. But I think it's fair to say that their approach to making their code module is more to Ampersand's benefit as a design stricture than it is a means of making Ampersand's components useful outside of Ampersand's assumptions. When I say that it's to Ampersand's benefit as a design stricture, what I mean is that their approach should make it really easy for them to take ideas from other libraries; they could, for instance, create an Ampersand implementation of a virtual DOM. And that design shines if you learn Ampersand's way and then just add modules to your application yourself; maybe that's why, at present, I couldn't find anything reactive in Ampersand's module listings. Still, Ampersand's approach to views seems dated. 
How is that not clear? function(){ var here; // stuff // more stuff var or_here; } 
Valid methodology? It's a survey... with some rather specific questions. I'm sure you can see how at least some use could come of this. The claims that the ESS cares are a little suspect though.
`let` will be in ES6. This survey won't have any effect on that. ES6 is feature-frozen anyways. `let` and `for-of` were the only ES6 features mentioned in that survey. It didn't contain any of the *maybe* ES7 stuff. I don't see how it could possibly affect the future of ECMAScript.
It's handy for bookmarklets. That's about it. You shouldn't put "javascript:" links into your markup. If you want `cursor: pointer`, you can just do that via CSS. Don't use the anchor tag for things which aren't actually links.
I got to challenge 17 by adding a '7' to the URL and pressing enter. I win! https://magwo.github.io/elevatorcrush/#challenge=17
How it is handy for bookmarklets? I didn't know that there was void operator. You just never see it. And now that I've read what it does, it seems to be completely pointless. 
I know, that I shouldn't do this. :) And it was not my point. :) Thank you for the bookmarklet-hint!
http://en.wikipedia.org/wiki/Bookmarklet You just put "void(0)" at the very end to prevent the browser from navigating away.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Bookmarklet**](https://en.wikipedia.org/wiki/Bookmarklet): [](#sfw) --- &gt; &gt;A __bookmarklet__ is a [bookmark](https://en.wikipedia.org/wiki/Internet_bookmark) stored in a [web browser](https://en.wikipedia.org/wiki/Web_browser) that contains [JavaScript](https://en.wikipedia.org/wiki/JavaScript) commands to extend the browser's functionality. &gt;Bookmarklets are [unobtrusive scripts](https://en.wikipedia.org/wiki/Unobtrusive_JavaScript) stored as the [URL](https://en.wikipedia.org/wiki/Uniform_Resource_Locator) of a [bookmark](https://en.wikipedia.org/wiki/Internet_bookmark) in a [web browser](https://en.wikipedia.org/wiki/Web_browser) or as a [hyperlink](https://en.wikipedia.org/wiki/Hyperlink) on a [web page](https://en.wikipedia.org/wiki/Web_page). The term is a [portmanteau](https://en.wikipedia.org/wiki/Portmanteau) of the terms *bookmark* and *applet*, however, an [applet](https://en.wikipedia.org/wiki/Applet) is not to be confused with a bookmarklet, just as script written in [JavaScript](https://en.wikipedia.org/wiki/JavaScript) is not to be confused with a script written in [Java](https://en.wikipedia.org/wiki/Java_(programming_language\)). Whether bookmarklet [utilities](https://en.wikipedia.org/wiki/Utility_software) are stored as bookmarks or hyperlinks, they are designed to add [one-click functionality](https://en.wikipedia.org/wiki/Bookmarklet#Usage) to a browser or web page. When clicked, a bookmarklet performs some function, one of a wide variety such as a search query or data extraction. Bookmarklets are usually [JavaScript](https://en.wikipedia.org/wiki/JavaScript) [programs](https://en.wikipedia.org/wiki/Computer_program). &gt;For instance, clicking on a bookmarklet after a [selection](https://en.wikipedia.org/wiki/Selection_(user_interface\)), might allow the user to be presented with a [search engine results page](https://en.wikipedia.org/wiki/Search_engine_results_page) for the search term. &gt;==== &gt;[**Image**](https://i.imgur.com/Jd5jxiS.png) [^(i)](https://commons.wikimedia.org/wiki/File:Word_count_bookmarklet.png) - *Demonstration of a bookmarklet that counts the number of words on the page. The browser shown is Firefox 3.0 with generic "abrowser" branding on Ubuntu.* --- ^Interesting: [^Open ^Access ^Button](https://en.wikipedia.org/wiki/Open_Access_Button) ^| [^Bookmark ^\(World ^Wide ^Web)](https://en.wikipedia.org/wiki/Bookmark_\(World_Wide_Web\)) ^| [^LastPass](https://en.wikipedia.org/wiki/LastPass) ^| [^CiteULike](https://en.wikipedia.org/wiki/CiteULike) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cm1889l) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cm1889l)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Setting href="javascript: void..." is NOT my use case. I just mentioned, that it can be found in many old tutorials about the value that the void operator provides. I was searching for other, modern use cases of void.
OK my silliness about jumping straight to challenge=17 in the URL aside, wow I'm having so much fun with your game. Love how it saves the code so when I return it's as I left it, and also love how it auto copies the code from a successful challenge over to the next challenge. I'll see if I can reach the end of the game and boost about it somewhere. BTW, are you able to reach the end yourself?
Axel Rauschmayer explains: http://www.2ality.com/2011/06/implementing-bookmarklets.html
Doesn't "return;" do the same thing? Or just "undefined;"? 
Not really. Webstorm comes with slightly better settings out of the box, but you can achieve the same things with IDEA as well. Might have to install some extra plugins that are integrated to Webstorm though. 
`return` only works if you're inside a function. You need something you can return to. `undefined` seems to work fine though. E.g. `javascript:2+2;undefined` works fine by the looks of it.
Just throwing this out there in case any of you are students and don't know yet: all of the jetBrains stuff is free for students. https://www.jetbrains.com/student/
Small nitpick, but the word you're looking is is modal, not modular. 
What's the difference from &lt;http://codecombat.com/&gt; ..? Sounds exciting.. :) I really like these kind of games, but I wonder what makes this game different..
Care to share some of the plugin that you use in vim for js? 
Codecombat is session-based, while Screeps is real-time MMO in sandbox world.
I have a feeling that JS engines are fairly accepting if you try to 'return' from the top level. Anyway, we are deep into trivia now. 
On my watch list too. Although, I haven't really tried it, the concept of everything is an npm module is really attractive. 
I use Webstorm.
But who can afford all the hardware resources?
Accepting? It's a SyntaxError. That's as bad as it gets with JavaScript.
I have just started looking at it this week and am extremely impressed so far.
node happily eats it. 
Just a shot in the dark but if you or any friends of yours are students, you can get a free academic license for all jetbrains products.
I've been using it in a large application that is still primarily a Backbone app. Ampersand is mostly backwards-compatible, but not completely so, so I would caution against mixing ampersand modules into an existing Backbone application. The biggest difference to me is the additional functionality Ampersand-state (and ampersand-model) has compared to Backbone.Model, like derived properties and more nuanced attributes. That said, this is a double-edged sword; I really don't need these features 95% of the time, and the other 5% of the time I see them used I just roll my eyes (such as derived properties being used to do very heavy computations). More features, more responsibility. I'm not convinced that Ampersand is a significant improvement over Backbone, but if I were starting a new app today I would ditch Backbone for Ampersand just because the tiny module approach agrees more with the rest of my codebase. If you're already invested in Backbone, I wouldn't bother migrating unless you're really into the tiny modules thing and have the time to refactor your application.
I like webstorm because nowadays it has a great node debugger. I dislike vim because that's how I was raised. 
It sounds a little like this game: http://javascriptbattle.com/ it's pretty basic though, this seems more massive.
A few examples (some might be helpful): - jscript.dll is unable to use sparse arrays: [,,,] - jscript.dll will throw an error on trailing commas within array and object literals: { test: 1, } - jscript.dll does not allow direct character referencing in strings: "test"[1] - jscript.dll fails to reset reused RegExp, so you'll have to set re.lastIndex = 0 yourself - Mozilla's SpiderMonkey already has support for asm.js: "use asm;" - Safari's SquirrelFish will return DOM queries as type function instead of object maybe http://caniuse.com will be a helpful resource for you.
The showModalDialog might be worth looking into, it was added by MS and then later supported by others. Now it's removed due ti it's blocking nature and many bugs. It's a good little story. Don't know if that was what you were looking for. https://developer.mozilla.org/en-US/docs/Web/API/Window.showModalDialog
IntelliJ IDEA contains all the *Storm products plus/minus some changes in plugins and settings.
For conformance to the spec you can look at this http://test262.ecmascript.org/ and run the tests against diferrent javascript engines you consider. The DOM APIs aren't exactly part of javascript. You can also look into different optimization strategies that js engines implement. They are not API differences but they do result in differences in performance for different pieces of code. So the way you right your code impacts the performance depending on the js engine that is running it. I think that is what your teacher is asking.
I really hope they do something cool with it. I think that doing a developer-specific browser implementation would be beneficial. But, for it to really be cared for by devs it needs to have something beyond just a matching theme on a pre-release channel. The tools somehow need to integrate better or get some UX benefit of being in a developer build. Currently, there isn't a real benefit.
Cool.. so it's one big game that goes on forever..? 
Webstorm, Visual Studio 2013 and am finding brackets, atom and light table interesting to watch
IIRC they recently switched to React for UI rendering so it's supposed to be much faster now. I'm happy with WebStorm so I haven't tried Atom, but might be worth another shot.
If you own personal license for webstorm the upgrade is around 29 bucks. And you get another year of upgrades.
IMO, it's a more meaningful "I don't care about the result of this function call" operator than (`!`|`+`|`-`|`~`|parens with leading `;` because that's the only other thing you need to know about semicolons|dog balls) when you just need to turn a function statement into an expression so it can be called immediately: void function() { // ... }() vs. !function() { // ... }() vs. ;(function() { // ... })() For bonus points, it may confuse the life out of Java/C/whathaveyou programmers who are brand new to JavaScript!
No it's not 'really'. That's the 'templates' they have and the focus is currently towards (I wouldn't be surprised if that scope broadened soon), but you can open whatever files you want. What do you think a Firefox OS app is? It's all HTML/CSS/JS… you know, like all website front-ends.
PhpED
I recently switched from Sublime Text to Brackets. I am not sure if I will stay with it or go back, but for now I like it. Coming from Java I never gave Webstorm a shot, because I hated the slow all in one IDEs (Eclipse, Netbeans), especially because I work half of the time on really shitty pcs. But I guess that's not fair because the IntelliJ products seem to be a lot faster/better, especially than the eclipse from four years ago.
I guess most people here know the difference, but since a lot (most) web developers only use text editors, including them in the pool makes sense.
I downloaded it because of your greatly received comment, and I'm really liking it so far. But what do you mea by filled with live templates?
Exactly.
Netbeans
I use PHPStorm which is the same thing. Being able to debug JS using karma from within the IDE is amazing.
Get more RAM?
&gt; I think it's a dynamic typed problem? Yes. I think it's hard for an IDE to reliably say what type a variable as, and as such to provide autocomplete when your language has weak dynamic typing like JS does. Using JSDoc annotations can help. Annotations work for PHP, but in JS because the base Object has so many vars / properties auto compete suggestions can be overwhelming. 
Maybe kangax's tables can give you a couple of interesting points: http://kangax.github.io/compat-table/es6/ http://kangax.github.io/compat-table/ http://kangax.github.io/compat-table/non-standard/
32bit OS. 4Gigs is the maximum it can handle unless you get the datacenter kernel hack. I've put in 16Gigs but Windows is still limited to 4Gigs max.
http://www.ecmascript.org/community.php seems a good starting point.
hi! are you using native promises or some promise library? if an error is thrown inside a function bound to the promise with .then and the error is not caught somehow (e.g. with a function bound to the promise with .catch ) then it should appear the console. could you give us some real examples of code you are trying to write as this doesn't sound quite right.
This is a strange sub sometimes. It's just a little UI helper. It's obvious when you might use it to add small explanatory text to something briefly without cluttering your interface.
They're when you map frequently used code snippets to key sequences. They allow you to really speed up your coding but you need to identify patterns that you use quite a lot. You can find out more at http://blog.jetbrains.com/webide/2012/10/high-speed-coding-with-custom-live-templates/
You're never at the top level in Node; you're in a function.
Webstorm is more geared towards Web development. They have a lot of tools for it, more so then IntelliJ.
the default type for &lt;button&gt; is "submit" so if its only IE that posts form its a bug in the other browsers (even thou im prety sure the all major default to submit) 
vim is love vim is life
IntelliJ / *Storm, since they are basically different flavors of the same editor.
I don't know if it's 'better' with respects to JS, but it's a more efficient text editor, and kind of addictive once you get past the initial mental block. Try it for a week, see how you get on. In terms of the application itself, VimScript is horrid compared to elisp (emacs) or Python (sublime), so in that regard it's not so nice. But I don't write plugins so it's no biggy
Webstorm 9 is the best for me, also like sublime text 
I didn't know you could do that. That's way more readable than parens for an IIFE (though parens are a well understood tell for an IIFE).
Why would you use that? And what the hell are dog balls?
Visual Studio with web essentials just flows perfectly for me. I like sublime text, but most of the Must Have plug-ins are already functional in visual studio.
http://www.amazon.ca/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;qid=1415894530&amp;sr=8-1&amp;keywords=javascript+the+good+parts This book was an amazing read, really shows proper JS practices, and why they're better than the other
Dat font.
I do the same thing, but use void null. It suggests it's null'ish, but with more void. 
Haven't tried Webstorm yet. I just use my plain old Sublime Text. :)
Guess this is why I don't use windows.
&gt; Don't use the anchor tag for things which aren't actually links. For accessibility purposes, if an item is clickable and not a form input (button, radio etc), anchors are preferred even if it isn't technically a link. This is due to the way screen readers work. A screen reader may not know that a div or other element is clickable because they don't interpret JavaScript and a screen reader will simply read over the text content. The anchor tag gives the reader a clue.
Minifiers also sometimes use it because `void 0` is shorter than `undefined`.
Moved from Webstorm to Sublime Text 2 ... probably not going back.
As others have stated, I also believe the future is react. The beauty of being able to mix and match your own libraries (router, models etc) feels much better to me than being stuck with a monolith do everything framework like Angular which gets deprecated a year later. Ember doesn't really have any advantage over the current iteration of Angular. In fact, I'd argue it's worse.
+1 for Ramda!
Notepad++ I want to use Vim for Javascript, but the default syntax highlighting screws up with comments, and the most widely used replacement also screws up (though a little less) and is such a cpu hog that the editor gets bogged down and my laptop fan starts running.
This is the best strategy. At work we added a "repeat email" input after our regular "email" input, then used CSS to hide it from the user. On the server we silently dropped any forms with this field filled out. Our spam went from dozens a day to zero.
http://www.reddit.com/r/techsupport
Thanks! How effective is this? Would setting the tabindex tip off the spambots that this is a honeypot?
That's what buttons are for
Why isn't it possible to stop an elevator in its track? If it goes up from zero to 4 and at floor 2 presses someone the up butten, while the elevator is still at floor 1, I want to collect this person.
You should use void! Its basically like undefined, but it has a benefit: it cannot be overridden, like undefined can. void returns a undefined value, always!
Anchors are also used for delineating sections inside the document. 
You mean fragment links? You can jump with those to any element which has an id. &lt;a href="#foo"&gt;foo&lt;/a&gt; ... &lt;h1 id="foo"&gt;Foo&lt;/h1&gt;
Note that if setTimeout did not return numbers, but rather new objects, this trick would be prevented but you could still do all the normal things. 
In general, it's pretty effective. However, it really depends on the source of spam; if they're specifically targeting your site, they'll see what you did and implement a work-around. Yet, if they're just blindly finding forms and submitting them all over the web (which IMO is the most likely case), then they probably won't notice (or care to spend the time to fix it).
Absolutely not! It is probably the most readable way to always get a correct undefined value. Useful in situations where you can't trust `undefined`. edit: also, `void` is an operator, not a function. Please do not use it with parens: `void 0`
Thanks! I've always underestimated the complexity of writing these. It's like another language in itself. 
vim
&gt; (function() { })() &gt;what the hell are dog balls? I think it's a Crockford-ism for auto executing functions.
Please delete your comment, read OP's post again, think about it for a couple days, read OP's post a second time, take a few more days to think about it, and THEN write a comment. What you just wrote is so stupid, you should be fucking embarrassed.
Vim, but that's not an ide
Brackets
Be sure to check for accented characters, as \w and \W don't count them in their range. Your regex would become: director = director.replace(/[^\w\u00C0-\u017F]/g, '')
&gt; what the hell are dog balls? Probably a reference to [this talk](http://www.youtube.com/watch?v=dkZFtimgAcM). ~~Don't remember the exact time code, though~~ Should be around 37 min.
Now that it's gaining some implementation (IE12 is the first!), I'm playing with it and my excitement is building even greater. Classical inheritance is just simpler than prototypal inheritance. The "new" keyword is already in JS, so might as well include the whole shebang. Plus, ES6 allows you to go full functional programming as well. JavaScript is just building on its own strengths of being a great do-what-you-like language.
You can also try this: http://en.wikipedia.org/wiki/Cross-site_request_forgery
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Cross-site request forgery**](https://en.wikipedia.org/wiki/Cross-site%20request%20forgery): [](#sfw) --- &gt; &gt;__Cross-site request forgery__, also known as a __one-click attack__ or __session riding__ and abbreviated as __CSRF__ (sometimes pronounced *sea-surf* ) or __XSRF__, is a type of malicious [exploit](https://en.wikipedia.org/wiki/Exploit_(computer_science\)) of a [website](https://en.wikipedia.org/wiki/Website) whereby unauthorized commands are transmitted from a [user](https://en.wikipedia.org/wiki/User_(computing\)) that the website trusts. Unlike [cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user's browser. &gt;==== &gt;[**Image**](https://i.imgur.com/BUpCPYQ.png) [^(i)](https://commons.wikimedia.org/wiki/File:NVD-CVE-2007-1332.png) --- ^Interesting: [^HTTP ^cookie](https://en.wikipedia.org/wiki/HTTP_cookie) ^| [^Cross-site ^scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) ^| [^JavaScript](https://en.wikipedia.org/wiki/JavaScript) ^| [^Cross-site ^cooking](https://en.wikipedia.org/wiki/Cross-site_cooking) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cm1m985) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cm1m985)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
That's not related to the question that was asked. 
OK.
Aren't you concerned people will expect this to work like classes in other languages? I just think JS has a different OOP paradigm and maybe it's best if we didn't try to conflate classical OOP and delegation oriented OOP.
Now explain your point. Pointing things alone never come to anything worthy and is easy to do. Constructive criticism would be a better way to help OP.
Would you not use $.get and define that returning data as randomshiz?
ahh okay now i understand what youre getting at, didnt know that thanks :) but using the fromtarget can achive the same, maybe IE just sets it to the first form it can find in the markup?
ignore this troll
Sublime
Sublime Text 2
Here's my workflow developing for Node.js apps: 1. Code in Sublime 2. Debug live using supervisor: `alias nodedev='supervisor -e html,css,js -n error'` 3. Test in Chrome (or Firefox) 4. Deploy in OpenShift using git (because it's free!)
Oh, come on. It can help to stop a really dump bots. Add to form something like a "&lt;input type="hidden" name="csrf-token" value="grj45ot34o53"&gt;", where that random blah is really random and created for an each site user. Also, save this token into the user's session. Submit form and compare token from the form data with a token from a session. Ta-dam!
Why not just use `ontouchstart` or `ontouchend`?
It's still useful when you "extends" prototype to get the real name of your class. [Example here](https://github.com/BinaryMuse/fluxxor/blob/master/lib/flux_mixin.js#L5)
Considering the OP is a JavaScript developer blogging about a nuanced feature in the language, I'd imagine he is. Are you aware that you cannot dynamically assign a function name inside a declaration? This is the reason for this post. Try and change your example to account for multiple modules being loaded and knowing which instance we're currently loading. Edit: the example above is a function expression for those who want to call me out on declaration.
You're right. There is definitely a use-case for this. I'm surprised the blogger didn't mention naming the function as an additional way to help with debugging.
Definitely do this. Another smaller optimization would be using ID instead of class selectors, since they're faster. Since it looks like you're targeting unique elements, it should be fine to use IDs.
Thanks a lot, massive help. This works perfectly fine: $.get( "/arduino/temperature", function( data ) { alert( "Temperature is: " + data ); } ); **edit:** how the heck can the above code work, but this just returns "Temperature is: 0" ??? var temp = 0; $.get( "/arduino/temperature", function( data ) { temp = data; } ); alert( "Temperature is: " + temp ); 
If you're trying to get a discussion going I recommend posting code samples.
Since the question is specifically what "IDE" and not what editor can I tweak to pretend to be one, I vote WebStorm. As others have pointed out you really could use any of the JetBrains tools (IntelliJ, WebStorm, PhpStorm, PyCharm, RubyMine) you just have to re-tweak them. The base is the same.
Thanks,... I knew you could do this but googling around the otherday didn't immediately find it for me. With this and firefox developer edition we are starting to see the foundation for what I want. Firefox looks super hackable and even uses code mirror. Soon I'm sure we will be able to just modify our IDE with javascript as we need and everything will be great. Get something like js-git in the mix and some node-dev and poof... perfect workflow.
That's because the get function is getting the data from the server and while it's doing this, your code just continues executing. So the alert gets called before callback sets the value of `temp`. To make sure the temp gets set to the data from the server, you can use jQuery's `then` function. `$.get` returns a promise, so you can go like this : $.get(url, function(data) {// do stuff with data}).then(function() {// do stuff with the result});
Awesome, this is the most simple solution that I ever read.
It's async. 1. In the future, when I get an answer from the server, set temp to data. 2. Print "temperature is 0" (it wasn't changed yet). If you put another alert in the callback, you'll see that it's executed after the one at the bottom. Do the work which has to be done in the callback.
No, I can not reach the end. The challenges need some balancing - I'm imagining that the last ones are impossible.
Because the 'function' is ran when the HTTP response is returned, which is not when you expect. (When you run the $.get the function is only "scheduled" to happen). This sounds a lot more complicated than it really is. Try peppering with console.log. You need to research: * single threaded * event loop * async callback (protip: "promises" are often used to deal with this problem).
Very valid request. I would have implemented it already if the internal elevator movement was suited to support it. It is probably the most serious feature missing, and it's preventing a lot of more advanced solutions. I hope to get to adding support for this and extending the elevator interface to support both re-queueing and inspection of the current travel queue.
even for Java I prefer using eclim than suffering eclipse's editor :)
"modern web development" "only stuff... 2010..." ITT: 2010 is old news in web development... that's cute
It is :p Btw, be sure to test your input with all crazy ñ's etc.
ST = Sublime Text? When do you use Sublime over Vim? I have edited only in Vim so far in my coding career. I tried Brackets for a day, and I liked that it visually matched the opening and closing html tags, but i was really slow moving around and editing things. 
You can extend a good editor to get very close to an IDE. 
Or when you want non-identifier display names, as the article does when it calls a function "Loaded module: {module_name}"
OK, this is a pretty cool post - thanks. Will be implementing.
&gt; I'm surprised the blogger didn't mention naming the function as an additional way to help with debugging. ? That's what the whole post is about.
If I never boot Eclipse again, I will be a happy man.
Thank you. Fixed.
Yes but this is slightly different from that. This is dynamically giving the function a display name that can contain important contextual information. A funtion will always have the same name, but different instances of it could have different display names using this API. The example is a good one, instead of `on_my_thing_loaded`, your stack trace can show `Loaded data from /some/url`.
Can someone more knowledgable sum up the pros and cons of this approach vs. (for example) node-webkit?
sooooo vi?
I use [Coda 2](http://panic.com/coda/) for mac. Looks nice, but lacks the features necessary for modern development :( It's a great text editor out of the box though.
Hehe, reminds me of the challenge on /r/webdevbattles a few months ago. [Here was my solution](https://www.reddit.com/r/webdevbattles/comments/2eduob/official_battle_1_win_three_months_of_reddit_gold/ck5tx3c), pretty ugly tho :P
If you're just looking to change the file's parent directory you can just look for it like that: `/(http://.+)\/([^\/\s]+)\/(.+\.jpg)/` this will give you the beginning of the url in $1, the file's parent directory in $2 and the filename in $3 (replace jpg with `\w{2,4}` if you can't count on a `.jpg` extension
why dont high school students get these perks :C
I geuss it's trickier than that, I'm trying to replace the a two character bit at the end of the parent directory because it's actually an image processor and how it accepts arguments. so where the key could be /WHAT/ it could also be /WHAT_X/ and if x isn't what i want programmatically i want to replace it with /WHAT_Y/ where "Y" is fed in by variable. url.replace(/GRIEF_KEY?_?[XY]/g,"GRIEF_KEY"+bit); i exactly want to find in the whole url: GRIEF_KEY, GRIEF_KEY_X, GRIEF_KEY_Y and replace it with var bit. I guess i could really just try /(GRIEF_KEY|GRIEF_KEY_X|GRIEF_KEY_Y)/ but that doesn't look very sexy. 
[Ext.js](http://www.sencha.com) does exactly that.
Nice
CRUD sounds like a good idea. 
Didn't know 9 was released...updating now.
WebStorm!
Webstorms 9 is worth every penny and is my favorite editor
you mean, something like [meteor](https://www.meteor.com/)?
&gt;:C That. Kidding aside, I would really try to make a good go at it with just a good text editor (Sublime/Notepad++/Textmate), IDE's are helpful but its important to be able to code without relying on one.
Well you just need to create the &lt;source&gt; elements below &lt;video&gt;, but do this dynamically. So your question is about how to create elements dynamically.
So if the hardware supports 16gb of memory, why do you have a 32bit OS installed? Why not install 64bit windows? Better yet why not install some linux flavour and enjoy a better dev experience?
Anchors have other properties that buttons do not, and sometimes an anchor works better (clickable blocks of text with wrapping etc). And sometimes a button is the proper thing. But clickable div tags are problematic for screen readers. If you take a look at the UI for reddit, you'll see the use of text links with the "javascript:void(0)" href. I think replacing those anchors with buttons would be more complex (styling a button to look like a link), and if I just want simple links they serve a nice purpose. I just don't want people to forget about the people who are sight challenged. 
See response to comment below.
I appreciate the legitimate feedback. You, as well as a few other participants, have made comments about the format/content of questions and they have all been taken into consideration. 
 reader.onload = function(e) { $('#result').val(md5(e.target.result)); }
Brackets!
Just name all your damned functions, people (with good self documenting names). yes, even callbacks, promise success handlers and the like. You can even still declare them inline. I know there are some *very* edge cases where that is not good enough (calling the same function in multiple spots might warrant some additional contextual information), but if you consistently avoid anonymous functions, and use well documented names, stack traces aren't a big problem. Similarly, using source maps during debugging, good error handling and a number of other tools you can extract even more useful information in a trace. But seriously. Every function gets a name. var something = function(){} //arg :( function something(){} //yes! 
I haven't actually used it for real yet myself, but after reading through the docs several times and skimming through some of the source, I'm pretty impressed. I've spent the last year and a half working on a rich client web app that started off as lots of jQuery callbacks. I came on later, and convinced the team to do a progressive refactoring and restructuring using Backbone. Backbone's been great, but in the process we hit a lot of its limitations. I pulled in a lot of Backbone plugins to try to deal with those: Marionette for better View behavior, Epoxy for computed properties and data binding, Subviews for child view creation and attachment, Courier for view hierarchy messages, Model.toggle, and several more. That's produced some confusion as to what plugin adds what behavior, and there's been some clashing between plugins at times. Overall, it's worked out well, but I've become very aware of Backbone's strengths and weaknesses. So having said that, Ampersand looks like it does a great job of providing a lot of things that standard Backbone doesn't. Ampersand-State includes computed properties, client-only values, and nested data support out of the box (and even a toggle function). Ampersand-View includes subview creation, an equivalent of Marionette's CollectionView, and mixes in State. There's a DOM bindings module that looks roughly equivalent to Epoxy's binding abilities. I've only got a couple concerns. One is that it might be incompatible with some other bits of the Backbone ecosystem, but in general the core API looks pretty similar. I believe I've seen comments that you can put Ampersand models into Backbone collections, and use Ampersand Views with Marionette. Also, I'm not 100% sold on declaring model data types ahead of time, but I'm not totally opposed to it either. Overall, I would totally choose Ampersand if I was starting a new Backbone-based project, and would seriously consider trying to progressively replace existing Backbone code with Ampersand if possible.
&gt; The point is to get a wide variety of JavaScript developers with a range of experience levels. Then, again, you've come to the wrong place, and presume too much. To an extent it will skew your data for the reason I gave and not what you pretend quote me as saying. You are also pretending these respondents are all developers and they will not be and most won't be doing any such thing three years from now.
using links to perform javascript actions is one of my pet peeves. (with e.preventDefault, or some similar mechanism). Links are for linking/transport to another place. They always have been. Use a button for time when you want to execute a behavior other than that!
Your submission was caught by the spam filter for using a URL-shortener, resubmit without that and it should go through.
One thing I've never seen done is a todo list app.
http://bit.ly/KI0Qss But seriously, you should at least attempt that for yourself. If you intend on doing any web dev at all in the future, you will need to know this. Here's a library that you can use http://parsleyjs.org/ Don't forget to repost the link when you've done it yourself and we can help you out with perfecting it but nobody is going to do your homework for you. 
+1. this needs to be higher up. If you name your functions, it's trivial to pass references to them in other functions that require callbacks, solving the stack trace problem as you mention. 
[It is](https://en.wikipedia.org/wiki/Regular_language). :-)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Regular language**](https://en.wikipedia.org/wiki/Regular%20language): [](#sfw) --- &gt; &gt;In [theoretical computer science](https://en.wikipedia.org/wiki/Theoretical_computer_science) and [formal language theory](https://en.wikipedia.org/wiki/Formal_language_theory), a __regular language__ (also called a __rational language__ ) is a [formal language](https://en.wikipedia.org/wiki/Formal_language) that can be expressed using a [regular expression](https://en.wikipedia.org/wiki/Regular_expression), in the strict sense of the latter notion used in theoretical computer science. (Many regular expressions engines provided by modern programming languages are [augmented with features](https://en.wikipedia.org/wiki/Regular_expression#Patterns_for_non-regular_languages) that allow recognition of languages that can not be expressed by a classic regular expression.) &gt;Alternatively, a regular language can be defined as a language recognized by a [finite automaton](https://en.wikipedia.org/wiki/Finite_automaton). The equivalence of regular expressions and finite automata is known as __[Kleene](https://en.wikipedia.org/wiki/Stephen_Cole_Kleene)'s theorem__. In the [Chomsky hierarchy](https://en.wikipedia.org/wiki/Chomsky_hierarchy), regular languages are defined to be the languages that are generated by Type-3 grammars ([regular grammars](https://en.wikipedia.org/wiki/Regular_grammar)). &gt;Regular languages are very useful in input [parsing](https://en.wikipedia.org/wiki/Parsing) and [programming language](https://en.wikipedia.org/wiki/Programming_language) design. &gt;==== &gt;[**Image**](https://i.imgur.com/tI4OShZ.png) [^(i)](https://commons.wikimedia.org/wiki/File:Chomsky-hierarchy.svg) --- ^Interesting: [^Regular ^expression](https://en.wikipedia.org/wiki/Regular_expression) ^| [^Omega-regular ^language](https://en.wikipedia.org/wiki/Omega-regular_language) ^| [^Pumping ^lemma ^for ^regular ^languages](https://en.wikipedia.org/wiki/Pumping_lemma_for_regular_languages) ^| [^Induction ^of ^regular ^languages](https://en.wikipedia.org/wiki/Induction_of_regular_languages) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cm21rgv) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cm21rgv)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
ok, I've looked at it and got it working. You're not far off... 1) take the html comments out of your script tag, &lt;!-- --&gt; does not belong in javascript. 2) Do you see anything wrong with this? onsubmit="onsubmit="return(validate());"" you're calling onsubmit twice... (also, you don't need to return here) try onsubmit="validate();" 3) People respond much better to asking for a push in the right direction than being asked to do something for you. 
You can use the document.getElementByTag
Don't forget that anchors have context menus when people right click on them . Things like "Open in a new Tab" will cause major issues with anchors. It's extremely easy to style buttons.
that gets the element, but then how would i replace it?
 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script&gt; function getElements() { var x=document.getElementsByTagName("h1"); alert(x.length); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;swag&lt;/h1&gt; &lt;p&gt;sweat&lt;/p&gt; &lt;input type="button" onclick="getElements()" value="How many input elements?"&gt; &lt;/body&gt; &lt;/html&gt; that's what i've got now, i'm not sure what to use to replace all the h1 elements with p though
Why don't you try it and find out?
There are many ways to do this... are you familiar with Regular Expressions? If not, have a google and read up on them (Don't take shortcuts!) Then have a look at the following link: http://stackoverflow.com/questions/388996/regex-for-javascript-to-allow-only-alphanumeric Then I've written a few lines of sample code so you can see it in action.. *DONT* copy and paste, play with it and figure out what's going on based on what the stack overflow answer states. http://jsfiddle.net/4hy3swL7/1/ Then figure out how to use this new found knowledge in your form validation. Learn the right way, you will thank yourself later. 
agreed, this won't help win any market share. Just run off and die quietly FF.
why?
No! How can this be? I will do a toto list app for you. Using Angular. And Express. And may be Bootstrap. With responsive design. Thanks for inspiring me.
Don't, the subject has been done to death. Do a book on JS that shows alternatives to inheritance patterns. Or offline sync. 
Yeah, it's either that or Element.outerHTML.
Don't want to spoiler so I just write a simple logic on this, you have to google around to find out how to do each steps, which will help you in learning. Get all the elements you want to change Iterate over these elements Store the old element's attributes and content Create a new element with the desired tagname Set the content and the attributes on the new element from the stored ones Replace the old element with the new one Side effect is that you lose event listeners attached to the replaced elements in the process
Some notes: * Please avoid showing 7 ways to do class inheritance (if you need to show people - do it in an appendix and keep to one in the book). It's one of the things I think is really bad about current documentation. * Please show traditional prorotypical oop and show how to really use it well. * Use promises (because they get rid of pyramid of doom with callbacks). 
With Fiddler you can record HTTP and HTTPS traffic and store it locally. Later you can tell fiddler to respond with the recorded traffic which should give you an exact copy in the browser. http://www.telerik.com/fiddler/web-traffic-recording
Author [addressed that on twitter](https://twitter.com/cramforce/status/533044981884153856) basically this is for more dynamic stuff then you'd get with regular function names, the fact that the article doesn't mention them means that if you aren't aware of named functional expressions and read the article you'd think that this is for just giving a name to an anonymous function when really it's for something a bit more specific.
Also given the name "Raven".
Could you explain this comment? I feel like I understand this to a degree, but not sure!
This is now possible.
Having used both pretty extensively I can say for certain, in the future I will only use Angular. First of KO is not a framework, it's more of a library. All the pieces are not there to build a full fledged web app. I learned it and waited patiently for them to come, but they never did. In KO the learning curve is very low, but guess what the way you learn at the bottom of the curve is not the way to build it correctly. If you were to learn KO, then learn ng, then go back and learn KO and implement the way ng does thing in there it might be useful, but you will be saying to yourself, "theres a better way to do this in angular." True ng is more complicated, true it may be harder to retrofit it into an existing project and true its opinionated but going back to fix a KO project is a nightmare. If you just need to do something quick, don't know either, and know the project wont be massive then fine learn KO. If you are in it for the long haul, invest the time and learn angular. If you are interested, this was my path to understanding over the course of about a year: Was assigned a project to build an app Tried to use angular Gave up Tried to learn KO, fell in love with it Built the project Project was a success and another team was brought in They changed the project to angular I struggled Continued to learn KO even better Started using KO for my own projects Got frustrated with KOs lack of features. When the code got ugly and I knew it was going to be unmaintainable I tried angular again This time I understood it clearly, because i knew the intent Started using angular for my own projects Learned it very well Taught a class on ng to people who never tried either, it was a fail. Laughed at my own hubris Finally understood.
Various comments here and the original article, present this more as a way to trace a particular state than as a way of identifying a certain function in the call stack display of the debugger. The proposed solution does in fact *abuse* the call stack to display stuff such as `"Loaded data from /some/url"` where the name of a function would actually be shown. If that is your goal, doing `console.log("Loaded data from ", url)` would make more sense. If what you want is making the call stack display actually display a function name instead of `(anonymous function)`, as others have already pointed, just name your functions.
This is not a fair comparison that even the author illustrates : "choice between a simple framework that has useful, but limited features, and a complex framework that can do it all". If you want to be fair, compare KO+Durandal against Angular. EDIT: Found a relevant post from John Papa: http://www.johnpapa.net/compare-durandal-to-angular-not-knockout-to-angular/
&gt; Its basically like undefined, but it has a benefit: it cannot be overridden, like undefined can. Only in old pre ES5 browsers. Do you also define your own versions of Infinity and NaN? Because in those browsers you were able to change those, too.
You are alerting before you know if the async request has completed. The temp retrieval could take 1 minute but the alert happens as soon as the get request is started. After temp=data put the alert within the success function. Then go read up on async processes in JavaScript.
Why would anyone still use RequireJS with CommonJS (Browserify or Webpack) standards being better and simpler in every way?
Probably, but you don't need to. All you have to do is retrieve the JavaScript file (via HTTP GET), then eval() its contents and use it. I would suggest to also wrap your plugin JavaScript files in AMD, Node, or CommonJS modules - this can solve some headaches.
Awesome library, I have used it on several projects.
I just asked this question myself. http://stackoverflow.com/questions/26869913/javascript-returning-object-htmlelement Go to the link that was put in the comments on the first answer 
Do you know what sub you're in?
Many places will do student discounts for high school students, but you'll have to contact them and most likely provide a combination of a scan of your student ID, transcript, etc.
yeah well... the guy that invented GIFs seems to think we should call them JIFs.. well fuck that guy. He is wrong and can take his peanut butter with him. I'm going to pronounce it GIF (aka, not jiff) and he can't stop me. Just like I'm going to pronounce JSON as "jay sawn"
Very much like "J-son." or "J(a)son". I once met Doug, he's more of a programmer and tinkerer than a linguist, but I nevertheless accept that he's got all right to name his child.
It is totally solid. I use it too for my charting work.
"Gee-so." The n is silent.
Wow, the most important difference -- how they each do data binding -- was completely ignored. Yes, Angular is a framework and Knockout is a databinding/templating library, and they have fundamentally different organizational styles and feature lists. But the fundamental *similarity* between the two is databinding and templating. They are implemented differently and that difference **means a lot**. It's the most important part of your decision between Angular or Knockout. All the rest is window dressing. * Knockout has an immediate-mode databinding model. Update a single data-bound field and the template will be immediately rebound before the next javascript statement is executed. * Angular has a "dirty-check" databinding model. Update a single data-bound field and the template will be rebound after all of the currently executing scope's statements are executed. These can have fundamental affects on performance and user experience, and they each have tradeoffs for certain scenarios. No discussion of Knockout vs Angular is complete without acknowledging this. 
Good idea, but how about unsubscribe to prevent memory leaks?
Probably not the best sub for this question, but I can tell you that you're thinking about this wrong. AJAX is not what you would be using if you're writing a desktop application, it'd just be HTTP requests with your language of implementation. Secondly, what you're hoping to achieve is only possible if the website also offers an API for interacting with their services. 
AJAX: Something browsers use to make web requests between full page reloads Java is not Javascript. What you're looking for is some type of API, which probably isn't there. The first step would be to examine the web requests to and from the server to see what kind of data you're working with. The problem is that the websites you are interfacing with are probably returning web content, which means you'd have to parse a web page to determine if your calls are doing what they are supposed to be doing, which may prove unreliable.
I use http://vanilla-js.com/
I'm using cjs/browserify atm but haven't settled on a data binding process (it's all manual right now) - any hints as to how to pick between React and Knockout? 
That's a bit of a bait, as someone who prefers cjs. Npm modules aren't there for the front end quite as well as other build systems.
thanks for this suggestion! 
A simple feedback: move the tests into a /tests folder and update the package.json test property to point to these tests. This way, you users can run the npm test command to test your library.
Yeaaa... one where people make programs from JavaScript? Did you even visit the link?
Not at all. Any javascript library worth anything will support CommonJS and AMD (if it supports either), and you don't have to use npm, plenty of bower packages support both as well. I have never seen a library that supports AMD but not CommonJS. This is all of the code it takes to make your library support both, taken from backbone.fetch.cache: if (typeof define === 'function' &amp;&amp; define.amd) { // AMD. Register as an anonymous module and set browser global define(['underscore', 'backbone', 'jquery'], function (_, Backbone, $) { return (root.Backbone = factory(_, Backbone, $)); }); } else if (typeof exports !== 'undefined') { module.exports = factory(require('underscore'), require('backbone'), require('jquery')); } else { // Browser globals root.Backbone = factory(root._, root.Backbone, root.jQuery); }
25 bytes? Way too big.
First off, meteor isn't a client side framework. It's a full stack isomorphic javascript framework. Now, the current big framework on the client side is [react](http://facebook.github.io/react/) by Facebook. It's bloody awesome imho. React coupled with the flux architecture that Facebook uses seems to be something that is hot right now. Along with this there is also Om for clojurescript (it uses react) which I dig. Oh and Elm is another which is more akin to what meteor gives the user ie a full stack framework. It's functional and reactive and it's a joy to work with. I am currently building a single page app in my company using react, react-router, subsequence-search, auto-curry, a bunch of homegrown helpers for flux architecture and browserify to package it all into one bundle. 
so what would you use to do it? doest have to be pretty, this is a project i picked and i just want to learn a language and then build my project, for "fun" lol
Ok so 1-3 I agree. I can't speak to the "voxtex" stack but if you can put together a full list of each component I will try to learn it. Isn't the real issue here that HTML is just not the language we need? We keep clinging to these technologies but really we have moved past needing simply a declarative language like 14 years ago.
I think the author should have couched the article as the decision based on the learn-ability of the language. If you are gonna bring performance into it though, you had better be prepared with some numbers.
Restaurant Emulator. Why? Promises and Observables, new features on their way that need a good book to illustrate them. A scenario where lots of asynchronous activities are taking place gives the chance to show these off. Make it a game maybe? SimDiner!
Ember is probably the latest one that's actually being used. Tons of huge companies use it, which can't be said for angular 
*j'son* -- I love it. I pronounce it with a soft "j".
Angular is still the most popular. Meteor seems awesome but only if you use MongoDb. React is the best "view layer", React+Flux is hyped to hell right now, utlra confusing.
Package pollution is a problem everywhere. But a problem with bower is how it doesn't properly define the files that are actually needed. Usually there is a main file so you can run some bundler (minifier, requirejs, webpack etc), but many times bower stuff depends on random json or image files so you are tempted to just deploy the whole bower_components folder. Component.io did have a cool system that declared used js, css and images, it was very bundler friendly.
Jayson (sounds identical to the name Jason) If you work with java and use Googles GSON library, pronounce that Jeeson 
yeah all of the smartest people I know love react, but I don't get it. 
I think Selenium would be a good place to start.
I've been thinking about Angular + React for my next project. Didn't realize Meteor was only considered good when paired with Mongo.
&gt; That's right - no code at all. Vanilla JS is so popular that browsers have been automatically loading it for over a decade. OMG they wrote it right there, you can minimize it to 0KB
Why combine them? What can React do that Angular cannot? (I'm genuinely interested)
That is a lot of fucking work to include jQuery on a page
&gt;If you are gonna bring performance into it though, you had better be prepared with some numbers. The point is the approach, not the raw numbers. Each is faster than the other and slower than the other in very specific scenarios. It's a tradeoff -- each has a niche in which it is the right choice, but also has niche in which it is the wrong choice. People need to be aware of those tradeoffs so they can make an informed decision as to which to use. Angular is faster if you want to make a lot of updates to your (view)model at the same time in response to some event. The more items you are updating in a single go, the more obvious the difference between the two is. *But* the more items you have bound the slower Angular is overall because it has to check everything it has databound for your changes one by one. Similarly, Knockout is more efficient if you have a large number of databound items, but quickly falls apart if you do more than a trivial number of changes in a single go. Recent changes to Knockout have attempted to assuage this with a delay timer, but tweaking that timer is a very tricky task. 
I pronounce it like the name Jason. It's just more natural. Hearing it pronounced j-sawn makes me cringe.
I'd just like to point out that you can execute React on the server as well to build an isomorphic app (same code on server and client). Then you can have server-side rendering as well (for perf, no-js, SEO, etc).
I would just save a reference element to memory, copy the contents of the original element, save the previous element to memory, create the new element, set its innerHTML to the old contents, remove the original element, append it after the reference element: var original = document.getElementById('original'); var content = original.innerHTML; var reference = original.previousSibling; var replacement = document.createElement('h1'); replacement.innerHTML = content; original.parentNode.removeChild(original); reference.parentNode.insertBefore(replacement, reference.nextSibling);
 eval("var constructor = function " + name + "(){};"); // Sorry not sorry Haha :D
If you're starting a project from scratch, I wouldn't recommend combining those two frameworks. I'd only recommend it as a way of transitioning from one to the other. The fundemental problem is that Angular is based on two-way binding between parent and child elements. React has a top-down unidirectional data flow. Trying to mix those two rendering flows doesn't really work. You'll end up handicapping both frameworks to a least-common-denominator rather than getting any gains.
I got used to pronouncing it "jay-sawn", after teaching a javascript course where one of my students was named "Jason", to avoid confusion. I don't think I've ever worked on a team without a Jason on it either, and if I pronounced it the 'right' way, the instructions "send me that, Jason", and "send me that JSON" are indistinguishable.
Which part of JSON sounds like Derulo to you?
Jaydashsun. Got it.
React does the view layer (the most important part) much better than Angular. The other stuff Angular does such as services and modules are poorly done and inferior to using node modules + webpack or similar. So yeah combining them is stupid, so is using AngularJS.
I'm a developer named Jason and I loathe XML.
I pronounff tem boff differently tan you, buff only because of my lisp.
Jay SONN
[paʁfɛ]
gif is pronounced jif, deal with it
Yup. The end is like the O in "on". I have yet to annoy anyone with the name Jason since adopting this pronunciation.
just like you say "jason"
Graphics Interchange Format. Hard G. Answers that. JSON = Javascript Object Notation. J for java, S for script, Ah = Object, N for notation. J-SAwN.
hahaha I literally laughed out loud at your comment
I hope you pronounce jpg as Jay-Phayg. Gotta be consistent, after all. 
or SCUBA as schuba or laser as 'lahseear'
I posit there is a 100% correlation between "jay-son" and "ess-q-ell". Jason and sequel be damned.
Haha, I'm hoping your joking, if you are then lol. Otherwise -_-.
i could at least *forgive* my gay son, as if there's anything wrong with being gay, but i couldn't forgive anybody who has to rely on JSON.
The example you gave was not in the actual survey, nor does it cover all four cases described in the survey! Maybe if it were, it would be easier to understand. Here is the text directly from the survey: - Declare all variables at the start of a function - Declare variables near where it is used but only in the function level block - Declare variables near where it is used, maybe inside a code block in the function - Don't care/ Don't have a specific plan The second and third variants are not immediately clear and would be able to benefit from examples. Another example which I had to think about was: *When you declare inner functions, do you declare them at the function block or nest them inside code blocks of a function?* - Declare only at the start of the container function - Declare only at the end of container function - Declare only at the top level of the container function - Declare inner functions inside a code block in the function - Don't care/ Don't have a specific style that I follow If it is clear for you at first glance without needing to think about it, then good for you. For me it wasn't. After a few unclear questions, I abandoned the survey. I may not be the only one, and therefore reported the issue. 
I'm a developer named Exemel, and I hate JSON.
You know your buddy Jason? Like that
Yay sun!
hay-peg
&gt; I pronounce it with a soft "j". so is that gay-son?
And gift is pronounced... oh wait.
Douglas Crockford didn't invent JSON. It was this guy named Jay. You see Jay loved this new syntax so much, that he stopped hanging out with his friends just to keep working on it. The joke eventually became that this new syntax was like his baby. So when it came time to pick a name, they naturally started calling it Jay's Son. And that folks, is how JSON got it's name.
Language evolves. If the person who coined a term got to determine how it was pronounced until the end of time we'd all be speaking mesopotamian.
Jay as in "blue jay", son as in "dickenson".
Yai-son or jotason, more locally
Yeah but it's only been like 20 years and this argument has been happening since the start. It's not evolution of language.
I like to imagine it with the Klingon pronounciation: j'Son
The dash be silent.
I did a casual survey a while back, and from what I remember most words starting with "gi" are pronounced like "gift" rather than "giant," and the former pronunciation is even more heavily weighted toward common words starting with "gi."
gibbon gibbous giddy gift gig giggle gild gill gimbal gimlet gimp gird girl girth give gizmo gizzard
The difference is that the "p" in "photographic" if only pronounced like "f" because it's followed by an "h." In ordinary language, a "p" will never be pronounced like "f" unless it's followed by an "h." The only reason the pronunciation of "GIF" is even debatable is that a "g" in that context can reasonably be pronounced either way, because of words like "gift" and "giant."
I don't get the SCUBA example. The "c" stands for "contained."
Why in the world would the creator of an image format get to determine how its name is pronounced? That makes no sense. If he claimed it was pronounced "flippityflap" I would call him silly and disregard his pronunciation suggestion.
Must be why Crockford insists in saying he merely "discovered" - not invent, JSON
I'm a developer and I hate soap
&gt; so whatever he says is definite and absolute truth dont ever let yourself blindly believe that someones words are definite and absolute truth.
Hey-son? ¿Dónde está la biblioteca?
We all do, my friend.
If I'm talking to someone, especially someone coming for a job and they say "Jay SOHN", I'll overlook that. But the "**S** - **Q** - **L**"; you better be a sql genius... EDIT: First, I couldn't give two shits about your downvotes: but more importantly, I have never met anyone who is a serious DBA say it like that. And while I'm not even about to come off like I'm some super SQL genius myself, if someone comes in on an interview with a resume that looks too good and drops an "**S** - **Q** - **L**", it raises an eyebrow the same way someone saying they have being developing in "C pound" would (now this one would stop the interview). 
that's a good use I guess, I don't mind going to the address sometimes, but I prefer to use wget than save as..
The only word that starts with "gif" is gift, ergo the pronunciation should follow the pronunciation of gift with a hard "g".
You are out of your mind. Angular is the king now.
MySQL: My ESS-QUE-ELL or MySEEQUEL? Sysop: sissop or seyesop? Laboratory... or labratory? ... vim or emacs? c# or java? amd or intel? osx or windows? android or iphone? sysv init scripts or systemd? yum or apt? linux or bsd? to node or not to node? kirk or picard? 
I'll take your comment as subjective and relative :)
Removed, please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Angular is everywhere these days. Everyone is hiring for it.
Right, so if OP switched, you would quit, and problem solved. 
My previous manager was named Jason, and I went out of my way to pronounce JSON correctly (which is "jason", btw). Apparently less than 5 minutes after walking out of the office on my last day, he told everyone he hated me. May or may not be related to my pronunciation.
Yes, but you could use that survey to demonstrate that "giant" should be pronounced "guy-ant" if you wanted to.
They don't think it be like that, but it do.
If he wanted to control how the alphabet worked, he should have invented that instead of the GIF.
Any reason why you included two different versions of JQuery? Lines 16 and 162
That was the joke, son. 
I say "J-S-ON". I'm waiting for "J-S-OFF" to be released. 
[According to Don Chamberlain, both pronunciations are probably acceptable.](http://patorjk.com/blog/2012/01/26/pronouncing-sql-s-q-l-or-sequel/)
Jay ESS oh en. I will not contribute to the destruction of this language by overloading words to mean other words. You want to make a silly word that sounds just like another? Fine, but I'm going to proununce it in the most consistent and silly way. If you want to wreck a language, go wreck an already wrecked language that is already inefficient for thinking in science. Like Ebonics or mandarin.
Pronounce it like croissant
L-a.
Huh. My buddy Yooemel and I haven't had this problem
Sure, but "giant" is a much older word with a much more widely accepted pronunciation.
jason
I'm a developer named Jason. I just tell people I'm serializable.
I just thought basically all (non .net) webdevs used mac or linux. That's just been my experience.
The correct answer is "who fucking cares, just get on with your life."
Jay-Sahn
Ooooohhhhhhhhhh...
So.. It will not work on mobile platforms (like [tint2](https://github.com/trueinteractions/tint2)), it can't produce a ~500kb standalone js executable (like [jslibs](http://code.google.com/p/jslibs/)), and it does not run foreign code in V8 process (like [Edge.js](https://github.com/tjanczuk/edge)), right? Then I guess for now it doesn't look too attractive for JS developers :)
I personally suggest dropping SOAP
with a thick French accent
Could have used this a month ago before knocking out my own pub/sub that's a lot like this for a work project.
I agree. The lack of flatMap like functionality in Elm makes it basically useless to me! They really need to implement this proposal: https://groups.google.com/forum/#!msg/elm-discuss/AQpYNAO5Y8g/pcKgx7vqz9gJ At the moment I'm using Kefir with Angular a lot but I've used React too and its very useful.
hehe.
that still requires you to write css and html
So...how do I make this work with johnny-5?
I say jay-sahn and sequel. 
jizz-on. How do you want this data? "Oh just jizz-on it and hand it over"
I was attempting to call the script in the div to see if made a difference i removed the line 16 one, still no result. 
jquery is fine your slider isnt working. I guess your DOM is incorrect for it. never include files more than once.
Any idea why the slider isnt working? It hasn't been modified from the source. It is the slick slider. 
Just two letters away from spelling my last name... (But that's how my family pronounces it (without the last two letters))
DOM? I don't even know how to change that 
DOM=HTML I dont know slick. Please try its documentation.
Then you are no developer.
 &lt;div class="your-class"&gt; &lt;div&gt;your content&lt;/div&gt; &lt;div&gt;your content&lt;/div&gt; &lt;div&gt;your content&lt;/div&gt; &lt;/div&gt; Is the example markup. As in a div with elements you want in the slider. I see you changed to some other slider. Have fun 
Gadzooks!
Jayass O'When
 dʒeɪsɑːn
I use Ember at work. Maybe a bit less fashionable than Angular, but it does what you need it to. I've enjoyed working with it, though I've only dabbled in Angular so I can't make a very informed comparison of the two. They both seem pretty good.
screw everything about you
No. The preferable move is to shoot Jason and get a lobotomy to rid yourself of the knowledge of xml. 
Just an examples I have worked on: AVG Zen-It is not a site, but a windows/mac app running angular inside chromium. Currently installed by hundreds of thousands of users all over the world. Also you could look at https://builtwith.angularjs.org/
I interviewed a guy who spelled it "Jason". Pronounced it " jay-sawn". Pick your own poison :)
The more correct version: *jay-sawwnnn* (Rhymes with 'its on!') the less correct version: *jay-sun* (Rhymes with I am dissapoint, son)
It's not a word, it's an acronym. It doesn't have pronunciation. It's J.S.O.N.. Say it like this: "Jay Ess O Enn"
I haven't changed anything. Also I am using this exact markup. 
precisely - the pronunciation i've heard most frequently is jason as in jay sun.
SCUBA = "Scuh-bah" in your world, then.
EDIT: wrong link mybad one moment. your script tags are wrong. move all external js to head. (script tags with src attributes) Use your own js in its own script tag. (e.g. the $('.round... stuff) Please look into HTML as a general to ensure you understand the tags that deal with js.
Mmmm... I love it when people are wrong *and* butthurt about this issue.
JASON
if anything I am reminded of adobe's brackets, but for standard editing, not code.
Jayessohenn
Interesting, I've always heard "jay sawn" used. It makes me wonder if the pronunciation is a regional difference. All of the conference talks I've watched, for instance, the speakers use "jay sawn", but then again, all of the speakers were American. 
Updated my reply :)
Ever play far cry 3?
Its French