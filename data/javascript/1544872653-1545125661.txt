Just edited OP with link! thanks :) 
&gt; Maybe you’ve never even heard the term “lexical scope” until you found this repo mentioning it Sure. But why link dozens of articles about the same topic, instead of just the best ones? Preferably with some comments on why it made into the list. Otherwise it just seems like a list of interesting topics (which is a good thing) pre-googled for me instead of curated (which is a bad thing). 
Overall: Use `let` and `const` instead of `var` whenever possible 3: even though semicolons are optional you should use them after each statement 20: why are there so many nested functions? you will not be able to properly test them in an isolated state 21: use `marksG.forEach(function(element, index))` instead of jQuery. 21: you are using a dependent variable that is outside of the function's scope, rewrite the function with parameters 30: what is the deal with calling `setMap(null)` when you also set the array to an empty array? 37: you don't need to use jQuery to clear an element. use `document.getElementById('results').innerHTML = '';` 53-76: you could make this a function to adhere to your previously shown style of programming 81: what is `input`? 83: you could move this anonymous callback into its own named function to increase testability 84: see 3. 88: use `===` whenever possible 111: see 21. 115: looks like a configuration, you could move that as a `const` on the top of this file 120: see 88. 134: you should not mix quotation style in the same file. 143: this looks like a `const` 155: there is no need to make a one-line if-else statement 158: this string could be better formatted as a template-string, this will eliminate string-concatenation 180: looks bad, but it's the fault of the API. 182: see 158. 207: see 158. I would suggest using eslint as a guideline for a better code-style.
Small documentation update for vue-glide [https://github.com/antonreshetov/vue-glide](https://github.com/antonreshetov/vue-glide)
Most of your "hacky" feeling probably comes from your massive functions. One example is \`detailsCallback\` on L119, which could really use some splitting up in smaller functions, such as L133-L141 and L141-L153. If there was one thing I could recommend to improve your code, it's that.
A web app that lets you query stock market data: [site](https://ll2nz.github.io/securities-app/#/). Not optimized for mobile. I used react &amp; redux. Currently, refactoring entire application to only use react’s new context api. After that, I’m gonna refactor the app to use mobX. I like coding &amp; especially refactoring since it allows me to learn so much from my mistakes. 
Looks interesting. But why use your own \`STIRNG\` and \`NUMBER\` classes when you could just use the native \`String\` and \`Number\` classes? I've had a quick look at the code, and I don't see a reason why. You're doing the same with \`Array\`, and IMHO it's better to use the native JS stuff over re-implementations, especially when they're not doing anything special.
That is pretty incredible. Congrats!
Hi people, I've updated the binder implementation of the plazarjs framework. Better alias handling and observable array updates. Check out the examples page on the documentation site and a GitHub link bellow. At the moment there is a grid example, but this page will grow. GitHub link: [github](https://github.com/ProticM/plazar-js) Examples link: [examples](http://www.plazarjs.com/examples) Best regards
Looks interesting. Inspired by Rust \`match\`?
Thank you, I'm really glad that it helped you!
ES6 has changed JS a lot and they may not be aware of it. I certainly wasn’t for a while.
This is called "Syndrome of Dan Abramov". We're always trying to be the next Dan Abramov. So when you face an open source project that's just a [README.md](https://README.md) file, you start judging it in the worst way. I made this project just to help people to learn and understand JavaScript, if you don't think that it will help you, no problem, keep doing your work and contributing to projects that you think that are valid.
First, I'm very proud that it helped 21.7k people till the moment. Second, I don't need to build the next Redux, or build a huge library with a ton of code to call it an open source project. If this helps people, they contribute it, and it's open source, it's an open source project.
The pay off was that I helped 21.7k of people.
Thank you!
Thank you!!
Thank you!!
Thank you I'm really glad that it helped you!
Thank you!!
Thank you!
Thank you!!!
Thank you!!!
Thank you!!!
Well, too bad that there is more to understand than you think.
`extends DmMacniel` Overall use `const` whenever possible. Use `let` only if you intent to change the reference. 3: it's fine, don't bother with semicolons because compiler will take care of them (by inserting them at the end of each line) 21: use native `.forEach` that's true, but if you don't use `this` inside `forEach`, then use arrow function like that `array.forEach((el, i) =&gt; { // your code })` 37: better yet store a reference to `#results` somewhere and when you need to e.g. clear an element you won't try to get it first like that `results.innerHTML = ''` (you can use the same approach with jQuery, really) 88: use `===` whenever possible because it tests not only the values itself but also their types (e.g. `1 == '1'` will return true, but `1 === '1'` will return false) I would suggest learning typescript right away. Even if your code appears to be questionable, at least everyone will understand what an `input` is, what functions use as their arguments, what they are returning, etc. Keep doing it, keep asking for the feedback, try contributing to other projects. Hard work and you will get there :)
It should be const. it’s not getting re-written, so const
Ok. I've been seeing a lot of example code showing otherwise. I thought that could actually be a security issue in addition to just bad taste or whatever. Thanks.
If you have several different actions with the same event type (say, clicks), you will resort to detecting what exactly has been clicked using event target, won't you?
Thanks for the explainatory extension.
API docs are somewhat useful. They tell you what can done using an API, but at a very granular level. I find idiomatic code examples of how one could use the API to achieve something to be far more useful. Most useful things you'll do with an API are not done in one step with one call to an API. It's almost always a coordinated series of steps. One really nice way of providing idiomatic code examples along with context is with automated functional tests. I only mention this because it's kind of rare in the wild to find automated tests used like this for documentation and I would like to see more. Unfortunately that might be in part because automated functional tests have moved away from Cucumber-like syntax and moved more towards tests written in code.
I'm on my phone right now so it's tough to parse this, but I'd be happy to help. Could you put the plain HTML output along with the CSS/JS into a jsfiddle or something so I can get a better idea of what's going on? 
Load the json into an object (JSON.parse() or fetch().then(results =&gt; results.json) or whatever), make adjustments, use JSON.stringify() to turn it back to json, then write or output.
A couple of issues: 1. Id is used when you know for sure that the element will be unique on the page. Read [here for more details](https://css-tricks.com/the-difference-between-id-and-class/). In your case, you should switch to hiding elements by classname. 2. [getElementById](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) is supposed to return just one element. If you want to select multiple items in one go, then there are better alternatives. See [getElementsByClassName](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName) and [querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector). Btw, when mixing PHP and html, you **fill php in html,** not the other way round. That makes the code much more readable and makes it easier to reason with. 
Initial thoughts are that you're only getting the *first* edit_button and doing your hide logic to that. You may want to give the edit button &lt;td&gt; a *classname* and use ```document.getElementsByClassName("example");``` Then in your javascript you can do something like ```const editButtons = document.getElementsByClassName("example");``` ```editButtons.forEach(button =&gt; {if (button.value === 'YES') btn.style.display = 'none';});``` I don't know how to multiline code example on reddit, but the core of it is that it looks like you're getting a reference to only one dom node, when if you have a list you'll want a reference to all edit_button nodes and manipulate each accordingly
Here's a repo with some curation content for node.js best practices, hope this helps... [https://github.com/i0natan/nodebestpractices](https://github.com/i0natan/nodebestpractices)
Thanks!
I've eventually managed to do it by manipulating the state in React: &amp;#x200B; setInterval( () =&gt; { let flyersNumber = this.flyersNumber(480,520); this.setState({flyers: flyersNumber}); }, 10000); &amp;#x200B;
An [exercise iOS app](https://itunes.apple.com/se/app/tummichi/id1446158488?mt=8) built with react native. Inspired by Tamagotchi, but instead of feeding it you have to exercise to get it into shape. So it will become healthier and happier the more you exercise. Uses apple health kit. Works best with an Apple Watch to get active calories but it works with a regular iPhone as well.
[removed]
The problem is that you're giving every input in the table the same ID. getElementById only matches one element (because IDs should be unique — having multiple elements with the same ID is invalid HTML), which is why it's only working for the first element. Instead of assigning getElementById to an element variable, use a class together with querySelectorAll to get an array of all of your inputs, and iterate through that array, like this: var elements = document.querySelectorAll('status'); for (var element of elements) { if (element.value === 'YES') { // do the thing } } Identifying the buttons by ID like that is also problematic for the same reason though. What you *really* want to do is put the class on a parent element (the tr would work), iterate through them like above, and then access their child input and btn elements with element.querySelector. Sorry for the brevity and incomplete explanation, I'm on my phone right now, but lmk if you have anymore trouble
```const int = inputNum &gt;=0 &amp;&amp; inputNum &lt;10 ? number : "wrong answer";``` You need to compare inputNum twice, it doesn't work with inputNum &gt;= 0 &amp;&amp; &lt; 10. That's happening in a few places in the pen, so you'll need to fix that elsewhere
I appreciate the effort that you are trying to teach me.. but i don't understand how javascript works at all.
Maybe even a review of each of the articles... I mean, literally anything beyond a list of links would be better. An introduction to the topic before the links? Anything.
Thank you so much!
this goes for most programming languages too, and I feel like everyone at some point has made this mistake, so it's always a good trick to remember :)
I find unit tests make great documentation for a function, showing both the available inputs and the expected outputs, as well as a wide range of use-cases.
I have been pushing hard to get my team to start using more automated functional tests for documentation purposes. We've got several layers of them: unit tests, single-app integration tests (an app instance connecting to a transient postgres DB instance), and multi app integration tests (spin up a bunch of apps and DBs and have them all talk to each other). All layers of testing here are performed for us in CI, so any level failing will fail the build and the bad code can not be deployed. Since implementing this myself, the time to develop features and fix bugs has gone down, and I have noticed less bugs going into pre-production and production. I think in JS it is really important to have this level of testing because so many problems end up being runtime errors. Having lots and lots of test automation really helps to cut down on manual QA efforts as well as unseen bugs going to prod. I've already started to reject PRs that don't add integration tests when applicable. After the holidays I am considering trying to convince the team to make it part of our working agreement... &gt; automated functional tests have moved away from Cucumber-like syntax and moved more towards tests written in code. To be honest I like it better this way. The flexibility of defining tests in code is very powerful, and as long as the tests themselves are reviewed for clarity, readability usually isn't an issue.
Could try loopback: https://loopback.io
I agree. Unit tests indeed provide a great way of documenting code. Sadly, many open source libraries, which doesn't have proper documentation, lack the good unit testing too.
Came here expecting something cool made with JavaScript, found something not so cool made with Markdown.
Does it look like an open source project to you? What about the projects that ARE open source and this stupid stuff takes its place.
I thought so, but I couldn't make it work because &amp;#x200B; "str" instanceof String =&gt; false 3 instanceof Number =&gt; false &amp;#x200B; while \[1,2,3\] instanceof Array =&gt; true &amp;#x200B; JavaScript is a weird language, hence I had to introduce STRING, and NUMBER. If you find a solution, tell me!
Looks neat! As someone who doesn't know too much about the js world, I'd like to see how this is integrated into a simple web app and with what build process
Pattern Matching is a common idea in functional programming languages, and a similar thing to Pampy was used in Lisps many years before. Rust is just another iteration of it.
Nice point, see the discussion here [https://github.com/santinic/pampy.js/pull/3](https://github.com/santinic/pampy.js/pull/3)
If you wasted your precious time here making a comment, then I really think that it's something cool made with JavaScript.
No worries, when I get a minute I'll try to write up a working solution for you. If you don't mind my asking though, how did you get this far without knowing JavaScript at all? Is this a throwaway class or something? 
Et well tek er jrbss!!
I found the javascript code from stackoverflow and edit it out for my project. Actually this is my first project building a website, and im still learning. Thank you though for helping me out 
`typeof "str" === "string"` `typeof 3 === "number"`
It's not likely to be a security issue. The examples you're seeing probably just date back to before const existed (or the author wanted to make sure the examples worked in old node versions, or they just have a bad habit of still using var).
**The usual disclaimers apply. You might not care about the following. It's ok. It's also not meant in any way to be about you or your abilities, only about the code reviewed. Remember: You did a thing! The thing works! Yay!** Also, in this occasion I'm only going to focus on one particular aspect of the code mainly related to structure. While there may be a number of other things that could be commented, I won't be commenting on those. ---- Instead of going through it line by line, let's try to draw some _blocks_ and focus on them. The biggest problem, of course, is that you have all your blocks nested one into the other. But, in any case, let's try to _outline it_: function initMap() { // Some Shared Variables // Some Helper functions: function clearMarkers() { } function resetMap() { } function loadingFunction() { }; // Create instance of google map var map = new google.maps.Map(document.getElementById('map'), mapOptions); // Set up the handler for places_changed: searchBox.addListener('places_changed', function () { }); // One huge function that does a ton of different things function getResults() { // Call geocode and... geocoder.geocode({ 'address': address }, function (results, status) { // Get Lat-Long // With Lat-Long: // 1. Place a marker // 2. Search places near the marker // With these places call displayResults }); } }; Now, I've pulled out `displayResults`. Let's outline it separately... function displayResults(data) { $.each(data, function (i, data) { // For each result received: // - Get details for that place // - With those details, call detailsCallback }); // Set some delayed action or whatever... setTimeout(function () { }, 1550); } Again, I've pulled out `detailsCallback`. Here's its outline: function detailsCallback(placeDetails, status) { // If some status... if (status == google.maps.places.PlacesServiceStatus.OK) { // Create a marker // configure a bunch of stuff... // create some HTML with the data collected... // Put that HTML onto the page, with a delay for some reason. setTimeout(function () { $("#results").append(html); }, 1500); // Add a listener to the marker... google.maps.event.addListener(marker, 'click', ...); // [*] // Save the marker into an array. markersG.push(marker); } } ---- Of course, by pulling those functions out, I've broken a number of references and the code now doesn't work. That's actually a **good** thing. Why? The goal, which I haven't mentioned yet, for doing this outline and for pulling stuff out is following one of the most important principles you need to follow when programming: &gt; Separate things that should be separated. Join things that should go together. This _principle_ gives way to a number of more specific principles that may be more familiar to you. Like "Separation of concerns" or "Single Responsibility". A second goal is understanding what the code actually **does**, which will allow us to follow the second important principle: &gt; Use good names. (Good names: a. don't lie, b. clearly express what things are and do, c. are consistent, and d. follow the appropriate level of abstraction/detail. But we won't need _all_ of this, here. We'll focus on just the first _two_ points, not lying and being clear and expressive) Ok, so, we have those blocks. At this moment they don't quite work, but they clearly represent different concerns, unrelated actions. That is, the block that draws one particular marker shouldn't care at all about, say, calling the service that gets results. And the block that calls the service should not care at all about, say, drawing the initial marker. Displaying some data should be separated from getting that data. With this in mind the idea would be to _actually_ separate these blocks and make them work independently. How would we do that? But before that I'll ask again: Why would we do this? Why is separating this things interesting? The answer is simple: Because it will make things easier to manage. If things are independent one from another, making changes in one part should not affect the other and will not break things elsewhere. It's also easier to track bugs. Anyway, how would you do it? 1. Pick one of the blocks. Say `getResults`. 2. Find what it _needs_ to function. Right now, `getResults` gets no arguments _but_ it does read some stuff that is up in the scope: `input.value`, the callback that is passed onto `geocoder.geocode` 3. Move those to arguments. So... function getResults(address, callback) { geocoder.geocode({ 'address': address }, callback); } Notice that I've extracted _the whole callback_ to an argument. You may want to do that, or you may _not_. It's probably not a bad idea to do something a bit more **like** this: function getResults(address, callback) { geocoder.geocode({ 'address': address }, function(results, status) { if (status !== 'OK') { console.log("Blabla, some error"); // or whatever return; } callback(results[0]); }); } And have the `callback` be a function that only receives the `results[0]` object. You could even go a bit further and make it **like** this: function getResults(address, callback) { geocoder.geocode({ 'address': address }, function(results, status) { if (status !== 'OK') { console.log("Blabla, some error"); // or whatever return; } let LatLong = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng(), }; callback(LatLong, results[0].name, results[0].geometry.location); }); } // And then the callback has this shape: function(LatLong, name, location) { ... } This way, the callback does _not_ need to care about the particular format of the response that comes back from the service. That is `getResults`'s responsibility. The callback only cares about doing whatever it wants to do with the name, location, and Lat+Long, which is all it should need to care about. Oh, and while we're at this, let's review another detail. Is `getResults` a _good name_? Well, before it was doing a bunch of other stuff besides _getting results_ because everything was nested together. But now _it doesn't lie_ too much. It more or less does what is says (gets some results), and nothing more. So for the first part, good. But then again... does it _clearly_ express what it does? `getResults` is _pretty generic_. What _results_ are we getting? It could be _anything_, really. A better name should express that this function is all about getting the geolocation for the address inputted. So _maybe_ we need a name that expresses this. Something _like_... Hmmm... say, `getStartingLocation` or `getUserLocation`... Something like that? I can't say for sure, but I understand that the `document.getElementById("mapsearch")` is meant for the user to write some address which is the starting point of his search, or maybe his current location or something like that? Maybe you can think of a better name. Without further knowledge I would choose something _like_ `getStartingGeolocation` or something similar. I would also change the name `callback` to something more expressive, probably. ---- Now, you can repeat this process for the rest of the blocks outlined. Do notice that, while I've only pulled out a few blocks -mainly those that were _already_ functions-, there are some other parts that would clearly benefit from being pulled out into their own functions. A couple of examples. All this part, [lines 122 to 155](https://github.com/joshmillgate/firstApp/blob/718426f8932df2330813145ae3f9c869b0485d7e/firstApp.js#L122-L155), could easily go into some `processRestaurant(data, details)` fucntion or something similar. And [all the part that builds the HTML and puts it into the DOM](https://github.com/joshmillgate/firstApp/blob/718426f8932df2330813145ae3f9c869b0485d7e/firstApp.js#L158-L178) could probably go into a `paintRestaurant(...)` function or something. In any case, these are just two examples. There may be some more places where you could extract some pieces of code into their own functions. This is, in part, the above principle being put into work. But it's also another interesting principle, that of creating different levels of abstraction or levels of detail. You extract some block of fairly detailed code, and encapsulate it into a function, say, `paintRestaurant`. Now, not only you have separated that specific concern from the rest, you have also encapsulated that detail. Code outside that function does not need to care or know about those details. What they need to care about it that `paintRestaurant` is called with this piece of data or that other piece of data. _How_ that data is actually painted... well, the other functions simply don't care about that "how"; it's not their thing. They see it from a "higher" POV, they don't care about the finer details. ---- Oh, **one small detail**. On [line 109](https://github.com/joshmillgate/firstApp/blob/718426f8932df2330813145ae3f9c869b0485d7e/firstApp.js#L105) you _probably_ meant to put those things in the `keyword` array inside quotes, as strings. Right now you're just sending an array full of undefineds.
Isn't `int` a reserved keyword?
I introduced docsify at work. Mostly because it requires no build step so it was an easier sell. I'm quite happy, but I ended up writing a little plugin that helps generating sidebars from titles.
Just don't. It's not worth your time.
Whoa! I'm just leaving the house so I haven't had the time to read through your response fully but I wanted to express my utmost gratitude for your time and energy on responding to me in such detail. You deserve only great things in life, thank you &lt;3
Well that's good to know 
Wouldn't that be bloody nice. App idea perhaps?
It's on GitHub, it's public, you can view and modify the source. Yes it's open source. What you're complaining about is that it's not software, or some sort of tooling or tool. That's potentially a legitimate criticism but if you're gonna raise that then you can easily do it without disparaging someone else's work. It's not the fault of the projects creator that GitHub decided to include non-software repos. It certainly isn't stupid just because it's not software. It's also clearly very popular, look at the stars it's got, also it was named one of the most popular projects of 2018! Telling someone they should be embarrassed for being proud of something they've created is an awful thing to say and something you should be ashamed of.
Why would someone want to create a linked list?
Well then why don't you go and open a PR or an issue to add those things. It's and open source project after all, you get to contribute. If you're not prepared to contribute then perhaps you should ask yourself why you're shitting on something that's obviously popular and useful to a lot of people. Even if it's not perfect it's more than you'll have done.
Sounds like a bunch of great ideas, go open a PR adding them. Or open some issues and contribute your time and knowledge to the project instead of spending that time complaining and achieving nothing.
3: is a matter of subjective preference for the most part. IMO I prefer explicitness over implicitness, and there are occasional cases where not providing semi colons leads to surprising behaviour.
I haven’t made any movies or written books, so I guess I’m not allow to criticize them either. Fuck you.
It's not JavaScript based but I'd recommend [Jekyll](https://jekyllrb.com/). It's widely used has [a lot of themes and plugins](https://jekyllrb.com/resources/). [Hugo](https://gohugo.io/) is also popular these days but I have not used it. 
You.
From an automated query, with no review on any it was rated that way aside from “it got a lot of stars in 28 days”. Ask yourself how it got those stars.
It’s literally equivalent to the result of a google search. The “award” was the result of a github query. Why people started this piece of garbage is beyond me.
Maybe next time have the guts to send me a comment instead of editing your comment and adding a bunch of garbage that I had to go back through my history to see. &gt; So now perhaps one of you could tell me what's been achieved by saying "oh I don't find just a bunch of links useful"? Perhaps you can tell me what is achieved by defending an award winning google search. Hopefully my comments saved people from wasting their time looking at this repo.
If you don't hate it, you haven't programmed in it enough. :)
with GA libraries already linked on every other site, seems more likely you’re increasing what has to be fetched on first load, no?
LOL. It was tough back in the late 90's/early 00's. I've been happy with ES6 and the new web APIs. I'll admit that I mostly use TypeScript though.
seems to me there’s a pretty high likelihood GA’s external libraries are already cached by most visitors, so aren’t you actually increasing the real-world first load?
I assume you are talking about IIFE case? Anyway if you use eslint standard style and you get to the point where you have an IIFE and you place a semicolon before it the eslint won't complain. Because that is an edge case. That's why I prefer not to use semicolons. When you need one, you place it for the reason.
Good to know :)
Looks good, how are you generating the graph? &amp;#x200B; I would look into tools like [TradingView](https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/) and [ECharts](https://ecomfe.github.io/echarts-doc/public/en/index.html) to generate graphs - they have a lot of options you can configure (candlesticks in TradingView for example would be awesome)
The big advantage of JS has never been its elegance, but rather how useful it is (web apps, shell scripting, Electron, hackable IDEs and editors, React Native, build tools, many libraries, etc.). With TypeScript, there is now even a decent way for people, who like static typing, to use JS.
Here: https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1 I could literally write a script to google all of the topics in someone else’s medium blog post and have it make a github project read me with the results, then run it on “.* fundamentals every .* should know”, and suddenly have 25 repos with content as good as this guys’. He didn’t even come up with the list of 33 things to use, it’s thinly veiled plagiarism in link farm format.
Strings are not mutable. All of the string methods you mentioned return new strings.
&gt;also it was named one of the most popular projects of 2018! Uh, that's kinda the reason we're having a discussion? Yet again, it's not a project. You should be embarrassed as well.
&gt;Yeah it's not code but so what? That kinda defeats the purpose of GitHub... Stop babying OP and encouraging him. You're a joke.
Hi friend, your library looks cool but I'd like to point out: javascript may be weird for other reasons but in this instance you are bending the language in a way it shouldn't be bent in order to mimic classical inheritance. I haven't really dug into the code, but it concerns me that you've created wrapper classes for primitives to take advantage of instanceof. At the very best, this isn't exactly idiomatic javascript, and at its worst you'll be taking perf hits (this may or may not be a concern for the use cases of your lib). You probably dont want to be checking the prototype chain, you most likely want to be checking the type. In the case of typeof [0,1,2] === 'object', If your transpiling, Array.isarray will suit you just fine. Or if you want to roll your own, there are tried and true methods. Here's some links in no particular order or importance https://jsperf.com/array-isarray-vs-instanceof-array http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ (old but I believe still relevant) http://web.mit.edu/jwalden/www/isArray.html 
&gt;typeof "str" === "string" &gt; &gt;typeof 3 === "number" &amp;#x200B; This doesn't apply here. &amp;#x200B; match(x, "str", 1) // this matches the string "str" match(x, STRING, 1) // this matches any string match(x, String, 1) // this should match any string but I cannot make it work
Plus one for Jekyll. Site can be hosted on github for free too.
Im curious on how to make tests more readable. Any advice?
Guys, you convinced me. I published version 0.0.5 that uses only String and Number instead of STRING/NUMBER &amp;#x200B; Thanks everyone!
It'd be cool if you could subscribe to feature updates with a query as understood by babel-preset-env's `targets` option.
I created \[mbunifu\]([https://github.com/doug-wade/mbunifu-library](https://github.com/doug-wade/mbunifu-library)), a set of tools for creating project generators in the npx age. Scaffold new projects easily \`\`\` $ npx @mbunifu/generator \`\`\` With no global installations or local installations to clean up later. The easiest way to get started is using \`@mbunifu/generator\` \`\`\` $ npx @mbunifu/generator \`\`\` The interactive wizard will walk you through setting up a new generator. Once you have a new generator, run \`npm run generate\` from its root to test generating a new project from the generated template. To start making changes, edit the files in \`/templates\`.
You’re gonna need to be more specific 
I like the name of your article. The article itself looks good as well. I feel the concepts of your new methodology flow naturally from well-established methodologies (like SOLID and the famous MVC pattern that you mention, too). I do have some little things to say: 1. "A lower layer provides getter-only access to it's state via interface to it's upper neighbor alone." I feel getter might be a bit particular here - perhaps read-only or immutable would be better-suited here? 2. Your point about multiple lower layers seems problematic. Imagine a layer with a lot of business logic. This layer has been deemed too complex and in violation of the single-responsibility principle. When decomposing such a layer, we can either decompose it by creating a new layer down, or decomposing it into multiple layers on the same level. If you decompose too many levels down, you end up causing a lot of indirection, making it difficult to read the code and to trace your error (one of the benefits of this model!). If you need me to go into detail, especially about point no 2., let me know. &amp;#x200B;
What editing environments are you comfortable with? There are ways to share a terminal session with GNU screen. I have used it for instructional sessions before.
Keep it all in your head, and then if you have to write a fairly short google doc with whatever you can remember. This is the way its done in 'Enterprise' environments and has never failed...
I [wrote a book](https://medium.com/@zacharybennett/i-wrote-a-book-about-angular-schematics-55c4945d7268) about Angular Schematics because I struggled to find clear and concise documentation/walk-throughs while attempting to learn it. &amp;#x200B; Please let me know what you think!
Well I'm trying to stay with VS code I just wanted to see if anyone could recommend another extension.
I guess I don’t understand what you have against taking advantage of event.target. You seem to be under the impression that it’s a “hack”, but it’s literally just a reference to whichever DOM element is the recipient of an event. Event delegation isn’t the right solution in every case, but in the case of handling events on a programmatically generated series of elements, it’s absolutely the way to go. 
I don't hate JS, I hate the structure of the ecosystem. I hate being required to use libraries to write maintainable code. I hate relying on fifty tools to do the job a single IDE does for any other language. I hate having to deal with inconsistent implementations. I hate having to compile an interpreted language to target the majority of browsers. JavaScript killed my interest in programming. It's a baby language. The web platform is 5 years behind where it could be simply because of all the awful decisions made early on, one of which being JS.
Developed and deployed my [first React project](https://conundrum.now.sh). Nothing crazy, it's just a simple riddle game. Source code on GitHub: [https://github.com/cedricium/conundrum](https://github.com/cedricium/conundrum)
If it's truly 1kb, you could argue it doesn't matter
My favorite hidden gem is running tests on jsperf and jsben.ch, and finding all those little weird performance differences between V8 and Spidermonkey. const usingToggle = function (event) { // if we don't need `this`, regular functions perform better in Spidermonkey const {target} = event; // Do less property access in the loop tabs = tabs.slice(); // Good ol' slice works a little faster than the spread operator for (let i = 0, len = tabs.length; i &lt; len; i++) { // Faster than forEach let tab = tabs[i]; // Access the index once tab.classList.toggle('active', tab === target); } } Of course, some of this could be abstracted away if maintainability is a concern, like using a forEach utility that wraps a for loop.
Quick little hackathon project: [Smartkeys.js](https://github.com/chriskiehl/smartkeys.js). It gives basic IDE style SmartKey behavior to ContentEditables or Textareas. So you can highlight text, and then surround it with parens, quotes, brackets or whatever! [Here's a little gif of it in action!](https://user-images.githubusercontent.com/1408720/50046778-de1e5880-005d-11e9-9e64-6c161ab32156.gif) 
So first off I really like using [jest](https://github.com/facebook/jest) for both unit and integration tests. It has a lot of built in things that improve the development experience. For example there is a test watcher which can run any tests for related changes automatically. So say you change 1 javascript file. The watcher will run only the tests which cover that file. Also I like using [jest-extended](https://github.com/jest-community/jest-extended) for a few matchers which are more concise and readable than pure jest stuff. For example `expect(someArray).toBeArrayOfSize(4)` vs expect(someArray).toBe(expect.any(Array)); expect(someArray.length).toEqual(4) Plus jest is the de-facto unit testing lib for use in react, and I like to keep tests as consistent as possible between the frontend and backend stuff. I find it important to test very small numbers of things at once. Like each test should only be testing as small a functional area as possible. Jest will run tests in parallel, so don't be afraid to add in many tests. You can organize many things into different describe blocks. For example: describe("normal user input is regexed OK", () =&gt; { it("extracts 'FOO' from 'FOOBAR'", () =&gt; { expect(ourFunction("FOOBAR")).toEqual("FOO"); } it("extracts 'FOO' from 'FOO'", () =&gt; { expect(ourFunction("FOO")).toEqual("FOO"); } }) describe("bad user input", () =&gt; { it("errors out for number input", () =&gt; { expect(ourFunction(2)).toThrow(SomeCustomErrorType); } it("errors out for empty input", () =&gt; { expect(ourFunction("")).toThrow(SomeCustomErrorType); } }) Also a thing I see a lot of people doing that makes it difficult to understand tests is abstracting out things too much. I should not have to go through some in house built testing framework just to understand what a test does. For example, I went through this one project where all of the integration tests were sharing the same underlying data provided by some helper modules. This made it difficult to extend it as edge cases were discovered. Nowadays I try to keep each test's data completely isolated. This means you generally have to do less context jumping. In the above example you could re-write the first block as such: describe("normal user input is regexed OK", () =&gt; { [ {in: "FOOBAR", out: "FOO"}, {in: "FOO", out: "FOO"}, ].map(testCase =&gt; it("extracts '${testCase.out}' from '${testCase.in}'", () =&gt; { expect(ourFunction(testCase.in)).toEqual(testCase.out); } }) Personally, I think the previous example was a little more readable, as you don't have to deconstruct the framework made here to understand what the test is doing. Now this example is trivial, but imagine that in/out object also is being used to deal with error cases, or doing many many validations. It can become unwieldy very quickly. That is why I would recommend just going ahead and paying the price of code duplication up front and refactoring out only if the exact case seems to warrant it. Finally with really complicated integration tests I prefer to keep it 1 test per file, with all data input it needs being defined within that same file. This means that as you read through it, the first thing you see is the data input, and as you read through the procedure, you should be getting a step by step of what is expected to happen along the way to some result. It is tempting to through lots of behavior tests in this 1 file, but I would recommend against that. Not only does it make maintaining the tests difficult (because the test for thing A is all meshed up with the test for thing B, etc.), but it doesn't really save that much outside of duplicated assertions... Nowadays paralleling tests is near trivial. I use circle CI to split up integration tests by file. So like for example I have this 1 integration test suite with 10 tests, each taking about 30 seconds to complete. These tests all are geared around answering the question: can this complicated microservice cluster ingest data correctly against some transient testing DBs for some exact data input scenario. Without parallelization, you would have to run those tests sequentially, as they all rely on a shared database. So these would take 300 seconds to run (5 minutes is a lot for a build nowadays ;) ). However if you make each of those tests in 1 file, you can setup CircleCI to do 10 jobs at once, each with their own DBs. This way that test suite only takes 30 seconds to run, which is a lot nicer of a dev experience. I realize now this is a huge wall of text about testing, so let me summarize a bit: * I find data duplication to be preferred to abstraction in tests. It makes each test more isolated, maintainable, and readable. Behavior duplication is another thing... * The syntax of jest is pretty easy to read, even for mildly non-technical people * Use `jest-extended` for its more readable assertions
I'm not sure I fully understand what you're saying but in order for your program to do anything with an asynchronous call, it's going to have to wait for the response. The benefit of the asynchronous call is that it doesn't tie up the process by making it wait for the asynchronous call to return, instead, the process can continue doing other things until the asynchronous call is complete. 
I am beginning to have it up to here with devs with backgrounds in other languages that come here and start whinging "whay is xyz in JS so awful?" What are we supposed to say? It is what it is. Can you put up with it? Great. Can you not? Then go back to whatever stack you like more. But don't waste our time with this bullshit.
&gt; tabs = Array.prototype.slice.call(tabs); // Good ol' slice works a little faster than the spread operator unnecessary since HTMLCollection can be iterated using for loops &gt; let tab = tabs[i]; // Access the index once You could improve it to `const tab = tabs[i];` // Access the index once ----- As for forEach, its just a function that uses a for loop function forEach(arr, callback) { for(var i=0; i &lt; arr.length; i++) { var element = arr[i]; callback(element, i, arr); } } So it makes sense that it is faster
Is it for progressional or educational use? If not professional i would suggest coder.com. Pretty neat website you can spin up containers, have terminal access and stuff, and collaborate with others. 
I'm experiencing the same issue. Basically you want to better understand event based programming. Promises are something to look into as well. Aside from that, I'm just as lost as you haha 
Ok that use of arrow function to cut 6 to 1 is not readibility improvement but no means. Less code !== more readibility
I was trying to make the code equivalent. Original example is converting the node list into an Array via spread inside literal notation. I should've added forEach has sped up in newer versions of V8, so I guess depending on the app being built it might make sense to go that route (e.g. electron), but I think for loops perform better in more cases.
Yup. Hugo (gohugo.io) is pretty cool. 
&gt; Their hate relies on old arguments against JS along with various faults that are thought to be JavaScript’s but do not realize are faults of popular standards that JavaScript follows (e.g. NaN issues, 0.1+0.2 !== 0.3, etc). To be fair not having any other numerical type except for IEEE-754 floats is a pretty large oversight for a general purpose language. Pretty much everything out there has some sort of an integer type.
I'll second this. Tests are always in sync with the actual code. If they weren't, they would fail. Hand written docs on the other hand are rarely maintained after being written, so they become worthless over time unless you spend the effort to maintain them. If you want a good exercise, automate the process of generating up to date API docs as part of your build pipeline. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
A simple example on how to set up video/audio chat in less than 200 lines of JS code: [https://github.com/ScottyFillups/node-rtc-signal](https://github.com/ScottyFillups/node-rtc-signal)
I’ve written a series of chapters about async programming: 1. [Asynchronous programming (background)](http://exploringjs.com/es6/ch_async.html) 2. [Promises for asynchronous programming](http://exploringjs.com/es6/ch_promises.html) 3. [Async functions](http://exploringjs.com/es2016-es2017/ch_async-functions.html) (1) and (2) are important to know, as a foundation. But (3) is what you really want to use most of the time.
I’m sorry to hear you’re hitting these issues! I’m on the Live Share team, and I’d love to understand a bit more about what you’re experiencing. Are the sync issues you’re referring to related to file edits? Were you and the other participant(s) working in the same file and at some point, got out of sync? That’s an area we’ve spent a lot of time on, so there shouldn’t be sync issues, but it’s immensely helpful to hear reports when it happens.
makes sense to show the best way to convert it then. i love the Array functions, and map is the biggest offender of slow down, hopefully it's faster in the best browsers
console.log takes a formatter function, and a number of spaces as second and third arguments respectively. If you JSON.stringify an object as the first argument, then pass undefined and 2 as the second and third, you get a beautifully formatted output in your console, rather than digging through it with the mouse.
Just what I was looking for, thanks so much!
Anyone know if named parameters are being considered? Something like `kwargs` in Python. I've wanted those in JS ever since I had to pick up Python for work.
`2` in that case is the number of spaces to use for each indentation level, so if you prefer more whitespace you can use `4` instead.
A common mistake JS programmers make is to forget the second "base" or "radix" parameter in `parseInt(someNumberString, radix);` (eg. `paseInt('54', 10)`. This can bite you if your string might be construed as another base, such as hexadecimal. For instance `parseInt('0x3A')` evaluates to `58`.
Done, it's under MIT.
No there aren’t any. Participate in the process. Communicate with the developers. They developed something really awesome and you get to use it for free. Give back. 
Yes please! We are _very_ dedicated to building a collaboration platform that works reliably for all developers. That said, we’re still in preview because we know we have kinks and edge cases to work out, and we appreciate any and all feedback 👍
https://github.com/getify/You-Dont-Know-JS/tree/master/async%20%26%20performance
For a simple top level view, it really does just copy a bunch of files to a folder on your hard drive, and run `npm install`. You can see the files it copies [here](https://github.com/facebook/create-react-app/tree/master/packages/react-scripts/template) and the script that does the copying [here](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/scripts/init.js). The "black magic" is a bunch of configuration that handles different setups, e.g. is the project using TypeScript? Is the user using git or Mercurial? Has git init already been run in this folder? You might like to check out [yeoman](https://yeoman.io/), which is a tool for creating empty projects ("scaffolding") by putting whatever files you want into your working folder. I keep meaning to build a P5 yeoman generator, but never get round to it. If you build it, please do let me know!
Awesome thank you
&gt; If you need me to go into detail, especially about point no 2., let me know. Please do! 
1. API docs via TypeDoc, EsDoc, JsDoc etc., 2. Tests 3. Usage examples 4. Self documenting practices (declarative &gt; imperative, descriptive &gt; obtuse, verbose &gt; terse) 
I’m using D3js with React. Here’s the repo where I saved my [react-d3 components](https://github.com/Ll2NZ/react-d3-ggplot). Thanks for the suggestions. Will definitely take a look at them when I get home. 
Dofi http://ishi.blog2.fc2.com/blog-entry-199.html?sp
Thanks
How did you even find this?
You might want to reply to his original reply so (s)he might see it.
Oh sorry. Im new
How did you even find this?
It's cool! Welcome aboard.
Thanks!
I googled it 😉
I googled it too. I just didnt see that. Thanks again
In case it helps in your quest, [this page](https://jayisgames.com/review/double-wires.php) mentioned their name and that they are a Japanese developer
In case it helps in your quest, [this page](https://jayisgames.com/review/double-wires.php) mentioned their name and that they are a Japanese developer
Thanks again. I really loved their game as a kid
I have recently become a huge fan of using generators and redux-saga to simplify my api calls/async functions. It has made my app easier to use. Here is [an example](https://github.com/Salinn/new_york_times/blob/saga-examples/src/sagas/Fetch.js) of how all of my requests work
It boils down to this: does your program need the result before the .then runs? Does code in the .then depend on values from the previous line? Then you aren’t really doing anything wrong. You are waiting on the thing you have to wait for.
I think that’s what I want to understand, how to leverage the power of these calls without forcing it into a synchronous pattern. Thanks 
I literally just made my first youtube video for people like you! [https://www.youtube.com/watch?v=NfM7t-tfkm8&amp;t=118s](https://www.youtube.com/watch?v=NfM7t-tfkm8&amp;t=118s)
Maybe you could share some pseudo code and we could offer opinions.
It’s more of a question about how can I design my code to not have to wait on the callbacks, maybe I’m overthinking it. Just feels like if I’m constantly waiting on the async call why have an async call at all? 
If you are not using redux you can try https://github.com/neurosnap/cofx which is redux saga without redux
Inb4 “Checkout how JavaScript coulda been done, with a language I created up called MyMilkBiscuit (mmb for short)
Those libraries still need to be parsed. So it would at least save CPU cycles.
Do you want to make like an NPM module for use (like against public API)? Or just something you can copy/paste/import throughout other areas of your product? Or just have all the APIs in a neat, orderly way to call them?
That's often called an SDK, even if that is a bit of a misnomer. There are plenty of tutorials on how to create a node package, [here's a relatively recent one](https://medium.com/@kelin2025/so-you-wanna-use-es6-modules-714f48b3a953) The general idea is to create a list of functions/classes/constants and export them from your new library. In your case the functions that interact with your api would be exported and the user would be able to import them from your newly created library like so: \`import { neatApiFunction } from 'my-new-library';\`
??? &amp;#x200B; are we not allowed to criticize languages without being implicated as some egomaniac who thinks they can singlehandedly solve all the problems of a language? Can you just go away, or downvote me, or whatever; anything besides clogging up my inbox with this meaningless shit? Thanks.
I've always done this because my linter tells me to. Never understood why. 
To give more precise details, a node module setup is actually incredibly simple, only needing two pieces really 1. a package.json with a `"main":` entry and a `"name":` entry 2. the corresponding file that your main entry points to, whatever that file exports people can import from your library. Currently it's best if that file is es5, not es6, if you want to use es6 you will need to transpile your source down into es5 before distributing your library. The link I posted the the parent of this comment talks about using rollup and babel to transpile your es6 code. Once you've got those two pieces you can publish the package on npm, it's as simple as making a npm account and executing `npm publish` from your terminal, when you want to publish new versions you can run `npm version patch` or `npm version minor` or `npm version major` before publishing depending on the type of update (read up on semver if you don't know what this means) Feel free to check out other people's libraries for additional guidance, I'm currently in the middle of creating a [state management library](https://github.com/wizebin/mutastate) that has implemented a lot of what I just wrote about.
I think it would be a cool project to make an npm module. The api is public already its just unorganized and kinda repetitive and would be nice if I organized it and made an easy way to make the calls.
Sweet thank you so much dude
I just want to do it the most basic way I mean my project only uses AJAX to make all the API calls. I really don't want some really intense way of doing something just basic exports for people to use
vscode is incredible, the live share is quite new and will get better as it matures. There is one alternative that may fit your needs, Ives van Hoorne's [codesandbox.io](https://codesandbox.io) has a new [live share feature](https://hackernoon.com/introducing-codesandbox-live-real-time-code-collaboration-in-the-browser-6d508cfc70c9) in beta I believe.
Go with the 0kb one
Python Kwargs is basically a worse version of ES6 object parameter destructuring
I've heard that before and I don't agree entirely. While I agree that pattern is quite nice, I think the Python way is just so much faster and straightforward to setup on any function, regardless of its existing signature.
...using typescript? ^/ducks
You need to wrap the conditional in parentheses.
I clicked on this thinking it would be a gif of one of those pencils writing some docs on that paper. So disappointed
As a new learner I’d rather be given pseudo code than the actual code so I can see the thought and organizational process more clearly. If I’m really stumped then give me the actual code. It may just be me but I just don’t feel the same sense of accomplishment if I download and play around with code than what I do when I write it from scratch. The hardest difficulty for me is not the actual coding, but rather how to think and come to the realization of what I need to do to get to a solution. 
the core for any of these scaffolding tools is nodejs. which allows you (among other things) to access the file system to create, delete, copy files. most of the generators use simple console.read statements to first get your desired settings, and then copy and create the necessary files for you. so the files already come with the generator, and the generator copies them then to your project location. to make this easier, some nice folks built templating for this process. so instead of having 5 different versions of the same file (webpack.conf.js for example), the generator comes with one version which has uses this template syntax. it wraps some configs (a special loader) for example in an IF statement, based on user input.
It’s just beating a dead horse. Everyone says everything is broken about JavaScript, but it’s broken because no one can’t agree on a solution. So instead of flaming the fire, you could be apart of the solution.
...........................ok
I understand you, I had the same problem! I watched videos on youtube how people are working on projects and I have a thought about integration with twitch so people could stream how they are building one of these pet projects and others could watch it. Also, I'm thinking about writing detailed step-by-step hints (without code) for every pet project so people with less practice could see them and understand how to build it. What do you think about it?
Personally, I find coming up with the idea, and thinking about the logic and design are practice themselves. Maybe you can provide options. Some might want ideas and designs only, others want boilerplates, while the rest want the whole thing.
Hi Peter, The best modern way is to build Babel plugin. If you want simple explicit way without much configuration the [https://github.com/kentcdodds/babel-plugin-macros](https://github.com/kentcdodds/babel-plugin-macros) is your choice. &amp;#x200B; Just write you babel macros and use it explicitly where your query code is provided. &amp;#x200B; It will looks like this &amp;#x200B; `import Q from 'your-lib/macro'` `...` `&lt;SomeComponent text={Q\`some complex query stuff\`}&gt;` `{Q({foo: 'bar'})}` `&lt;/SomeComponent&gt;` ... `Q(1, 2, 3)` &amp;#x200B; On compilation (!) stage all this syntactic sugar will be transpiled into the regurlar JavaScript code. Plugins writing is easy and funny all you need to know is how to work with JS AST tree.
This sounds like a pet project that I could get behind. I've got a RoR background trying to improve my JS skills.
Or I cannot provide pet projects with everything (idea + design + detailed explanation of how it should work) and people could just choose things that they need :)
Have you already started learning one of JS frameworks because I'm already working on the first pet project and maybe you will be interested in trying out to build it :) This project is a clone of [unsplash.com](https://unsplash.com) but with less functionality (without registration, login, likes, following, collection etc). I can DM you once it is ready :)
For a 3x maybe you should start learning Java as well
What about getting designs from Dribble and try to recreate them? You could build up a pretty nice portfolio with that.
Thx, I'll watch it later!!
That's actually how I usually create design for my projects :D But I didn't really get your point here. Could you, please, explain better? :)
I recently had several Javascript openings for my team and done dozens of interviews. It's incredible the amount of people that assume themselves as framework x developer instead of Javascript developers. Please help people really understand and improve on Javascript period. If you really understand the basis you will get into any framework without any issue and no time. 
Hmm...what do you think people need?
In reference to the original post, the definition of the toggle parameter is as follows: &gt; **force** (optional) &gt; &gt; Boolean that, if included, turns the toggle into a one way-only operation. If set to false, the token will only be removed but not added again. If set to true, the token will only be added but not removed again. So, is there any difference between DOMTokenList.toggle(className, true) and DOMTokenList.add(className)? (Or any difference between DOMTokenList.toggle(className, false) and DOMTokenList.remove(className)?) 
I'm pretty sure you mean `JSON.stringify` takes the formatter and number of spaces.
Passing style declarations to `console.log` and using the 3rd and 4th arguments on `Array.prototype.reduce` and friends.
I don't know much about Java, but if you have been only working on the frontend, then learning backend development is a whole different thing, and there are many things you'll have to learn and adopt. That is regardless of the backend language (May it be Java, Python or PHP). That is including (in a nutshell): * Security (first, OWASP is a good start) * Databases (SQL/NoSQL) * OOP principles * MVC principles * Difference between the request methods (GET, POST, PUT, etc) * API and endpoints handling * Session management * Caching In terms of language, the major difference would be that Java is type-driven language, so virtually every variable or parameter has to have a type declared first, so you can do the following in Javascript, but not in Java: // Javascript var a = 1; // Integer a = 'a'; // Acceptable // Java int a = 1; a = 'a'; // Will throw an error
I'd definitely recommend leveraging git in setting something like this up. Having starter templates that include guidance in comments that can be forked along with a "final result" target broken out into sequential project stages the user needs to build out themselves would be rather nifty. (Plus if you host on GitHub the project popularity in trending would be valuable marketing). Maybe even have a way to matchmake users to collaborate on project templates so they can get used to working in teams/code reviews/etc. Something like that would have been really, really nifty when I was first starting out, and for certain advanced topics I could see a project tutorial fork even now being more desirable than a video series. One of the challenges I see in general for this idea though is that if you intend to monetize the project templates, the code licensing for the starters will be a hangup. If instead you monetize associated services (such as mentoring sessions/matchup, portfolio hosting, etc) you could simply use a GPL license on the templates. Great concept though!! Definitely post an update if you put something together!
That's really a problem and I had it too when I was learning to react without having good skills of javascript. &amp;#x200B; But unfortunately, it is not the main goal of this project :( The main goal is to provide ready-to-build pet projects so developers could improve their skills on their own. It is not going to be some sort of educational portal, at least at the start. But I hope one day I will get to a certain point that solves this problem too. If you have thoughts how can that be done in the context of my project, please, share them :)
That's literally what I'm trying to find out here :D I know only what I would need at the start of my way and I already said it in the post: project idea, design, thought over functionality and logic of the project, also maybe the recommended stack and boilerplate :)
I've been using vue because it was the easiest to add to my rails projects. Sweet I'd love to try it out. 
I created a site for this, https://coderally.netlify.com. At first I was hand selecting JS projects and adding them. The hope was to have the community use it for more of a collaboration space like what you are talking about. If you have time to check it out let me know your feedback!
The problem of the API doc tools is that they are badly maintained, in the case of JSDoc not at all maintained. TypeDoc is an exception, but at in their early days many packages have enthusiastic unpaid volunteer owners/maintainers who after few years realize they spent a huge amount of work and get nothing in return. Plus, it is specifically for TypeScript. So let's see how that tool holds up over time. JSDoc3 has so many folks that Github can't even show the network graph any more ("too many forks"), because everybody had to create their own private fork and apply bug fixes. Esdoc too has lots of open issues. It would be nice a major firm would not just create a new framework, or in the case of Microsoft even the whole of TypeScript, but also a documentation tool. The last one to do that was Yahoo (YUIDoc).
The project and everything that it contains will be fully open-sourced. The client repository you can find [here](https://github.com/SilencerWeb/pet-projects-client). &amp;#x200B; I'm still thinking about starter templates but I'm not sure which one to use because, for example, I use project structure based on the atomic design in all my projects but I don't think it will be useful for people that don't really have a lot of experience because it will take time to find out how atomic design works and where to put what. What do you think about CRA + project structure as [here](https://github.com/SilencerWeb/aviasales) (it is one of my first projects and it has the easier structure ever) with all needed to build a project dependencies in the packge.json? &amp;#x200B; I had thoughts like that about monetizing this project (e.g. subscription for "premium" projects or getting code-review from mentors) but I want to build it very simply right now and free :) Sure, I will probably come back in a few days when first pet project is ready so I could find somebody for trying out to build it :D I can also DM you once the whole project is ready or at least the first pet project :)
Perfect, then I will DM you once the first pet project is ready :)
Oh man big fan of you guys' work; live share is absolutely amazing for our remote workflow. Can I ask if you guys are working on headless live share? Got this dream of moving all our development to remote servers and then have live share running on them; would be a complete game changer for us. I'm tracking a github issue related to headless live share but maybe it isn't a priority for you yet - hoping to get some insight if you can provide any :)
I see. Keep us updated if you finally build it. I’m interested too.
I'm learning slowly , I may be a minority but I like to see the practical real world implementation then the pseudo code explanation as I'm a practical learner. 
Hey! I have just checked it out and I didn't really understand the use. It seems like a list of open source project. Could you, please, explain your idea better? :)
I can DM you once the whole project or first pet project is ready if you want :)
If nothing else, I would monetize supplemental tutorial resources for anyone struggling with a project. Maybe videos of you building the project out and explain what you are doing as you go. I hate seeing good ideas burn out because there was insufficient return for the project creators, and I don't think people really have an issue with paying for "above and beyond" content nearly as much as they have a psychological barrier to paying for access to content in general. Also, it kind of ends up being extra incentive to work things out on your own. If you can't, for $5 the answers are available, but if you can, you save $5 (though people may still go back and want that content to see how what they did stacks up or if there were more clever was to solve the problem). As for templates, honestly I'd say that as long as you have a text file that explains the project layout, and the layouts remain consistent across projects, you shouldn't have an issue with it. For sure feel free to DM me when you have an initial something completed. I take forever to get to non-work related tasks, so don't be surprised if it takes a while, but I **will** get you feedback *eventually*. It's a neat idea and I wish you luck with it.
I'm thinking about providing a repository with a built project for each pet project but I haven't come up how to do it yet because I cannot do it by myself, the process of creating every pet project will take too much time. If there will be people who will build the project and share their repository with it, I would love to add the link to it on the project details page :)
Haha sure thing.
Haha sure thing.
[removed]
I was thinking about integration with twitch so people could stream how they are building these pet projects and others could watch it and also answer the questions. To be honest, I would pay too for getting access to the videos where the projects are building from scratch to the end because I already know how useful it is (some very generous guys do it for free, god bless them). Videos of me building the project out and explaining what I'm doing is a neat idea but it can't really be accomplished as long as my English skills are bad :D But if I have enough Russian audience, I will probably do it. &amp;#x200B; Thank you so much for your feedback! I will get back to you in a couple of days, probably or at the end of the next week :)
Haha yeah it’s essentially just a glorified list of open source projects. When I started contributing to open source I was lost surfing GitHub and had no idea where to start, so I started making a list of interesting projects to work on and made a site out of it. 
Yes, you're entirely correct, my bad. Typed this all on mobile and didn't check.
Hmm take this with a grain of salt since I don't really know the intricacies of mobile development, but here's a suggestion that may work: When your component mounts/your timer starts: \- Save the current local time \- Add a listener to window.onfocus (I have no idea what kind of support there is for this/whether it will work at all on mobile). The listener should compare the saved local time with the current local time to get how much time has passed and update the timer accordingly (you should probably use local time periodically anyway to get more accurate timekeeping since setInterval is not necessarily accurate, but this is nitpicking).
Instead of reducing your timer by 1 every one second, you can store the start time, seconds remaining. For each interval you can check the difference between current time and start time. Then let the remaining time that you store minus the difference to get the new value for timer. When you pause, calculate and update the start time and remaining time. Most Android game use timer mechanic to refresh your life use similar logic( that why people can cheat by update their phone's date time settings)
Aw, I see now :) You better to clarify this on the main page, something like "A list of open source projects you would be interested in contributing to, sorted by project difficulty (as for me, I would never contribute to react-native or react repository because both of them are hell enormous, I will spend like a few weeks to understand how it all works) and your interests". The idea is cool and I think it will be useful to developers that would like to start contributing to open source projects but I would work on UI to make it easier. And maybe it is better to use cards view instead of list view? Also, I would add difficult of rolling in the project, amount of commits, amount of issues, also a list of issues with label "first-good-issue" (or another issue that is good for the first contribution).
Awesome feedback, thanks!
https://github.com/samrith-s/concurrent-tasks
I made an NPM package which is a tiny task runner in JavaScript. Some usecases: - Loading a page as fragments - Fetching data from an API concurrently - Running a load test on your backend - Running jobs as a priority queue Check it out: https://concurrent-tasks.js.org It’s thoroughly documented with live examples. 
It was more a reaction of your statement that you couldn't provide all the projects with idea + design. But just thinking out loud here. What about mimicking real life scenarios? Most of the time you'll work with a designer, or worse you'll just get the design dropped in your mailbox and you should make it. You could try to work together with Dribble designers. Tell them they can see their work actually work in the browser if they provide their designs with some more info about what it all should do and then developers who want to learn can try to make it, then have for every projects a separate channel or something like stack overflow where developers can help each other of they're stuck and just provide solutions/ walkthroughs of their problematic parts. 
Inactive tabs have their activity throttled or suspended by design, especially on mobile devices. Not only is the minimum length of an interval limited, but Firefox and Chrome now implement CPU time budgeting. Budgeting means that after *x* seconds, a tab in the background is awarded *y* points per second (up to some limit), which it can spend points for CPU time. Firefox gives 10ms of CPU time per tab, up to a max of 50, with a floor of -150 (a tab can get into debt from long-running timer tasks). Timers will pause completely if there's not enough in the budget to run them. Rather than trying to force your code to keep running when the user isn't looking at the page (by using service workers, exploiting AudioContext, etc), it's better (when possible) to compute a new valid state when the page is re-opened. For a timer, that's easy. Store the timestamp at which the timer began. The document fires the `"visibilitychange"` event when a tab is moved to the background or foreground, and its `hidden` property tells you whether the user has it open. So listen for a visibility change, and in the handler, check if the tab has just been moved to the foreground and if so, compare the current time against the stored time from earlier, and set the countdown's new correct value. Like so: &lt;h1&gt;&lt;/h1&gt; &lt;script&gt; const h1 = document.querySelector("h1"); const startTime = new Date().getTime() / 1000; let elapsedSeconds = 0; setInterval(() =&gt; (h1.innerText = elapsedSeconds++), 1000); document.addEventListener("visibilitychange", () =&gt; { if (!document.hidden) { const now = new Date().getTime() / 1000; elapsedSeconds = parseInt(now - startTime); } }); &lt;/script&gt; 
I think a nice MVP can be a list of project ideas with filtering for complexity and required languages/skills. Sometimes all you need is an idea that is not boring like a to-do list or hackernews clone. 
Great idea
Great idea
That's how exactly MVP will look like :D Well, maybe only without filters because on the early stage the project will not have a lot of projects so there will be no need of them :)
Thanks :)
Good idea about collaborating with designing from Dribble and a slack channel, thanks, will think about them if the project will go somewhere :)
Nice app! There is currently a bug. When I login as Joe, visit the Shop page, click on Buy to any item once, my basket goes wild and starts adding that item over and over in a loop VERY quickly. I'm using Chrome, most recent version.
Let us know when you come up with something. DM me if you want to collaborate on this. This sounds like a great pet project. =)
Thanks for your feedback. I tried it but I had no problems. Desktop or mobile?
When I add a product it appears in the home page but not in the shop page. Mac latest firefox. &amp;#x200B;
Thanks for your feedback. This is the expected behaviour. It's because you cannot buy your own products. There is a warning message about it.
Sure :))
Desktop. Very interesting, just went back and tried again. Works fine now! Sorry about that? I should have taken a video at the time but it's probably something odd about my browser and has me wondering what I've done to my own browser now lol!
I'm also seeing var in nearly every JS snippet, even though myself haven't used it in years
Starting to build Webpage ~&gt; backend Sails.js and frontend ~&gt; Vue.js Wish me luck. Where do you handle routing? Sails or Vue? Thanks
Sails acts as just an API. It still needs routes but Vue handles the page rooting in browser.
Well... What's your experience?
Yes, I already started to learn the basics of back-end. I have done projects in node.js as a side projects so that would help me while learning all the above. Thanks for the insight 🙏
Truuuuu😂
Start with proper formatting, capitalisation and spelling on your 3 line begging post would be a good start 👍
Well I am sadly not going to SPA. I think that I will handle routing in backend. 
i'm new to web development i learn javascript,react,redux and bootstrap 
thnks robin &amp;#x200B;
Not javascript
I wouldn't expect it as a user though
&gt; I feel like I’m basically losing the power of the asynchronous call if I force my program to wait on the response. Is there a better way? You're not actually forcing your program to "wait", you're using an alternate syntax for the the code that runs after the async call is complete.
Learn Java...
Can you write correctly? Capital letters and good grammar? I can't tell if your English writing needs work or you're just rushing on a phone. If you feel you are ready for a job you should have a portfolio of projects to show. There are plenty of guides online that should guide you through the kinds of things an employer wants to see. 
Ok thanks i will take a look...
Hexo is quite nice.
Did you test with the same item? 
Returning two different type of value is prohibited in algorithms.
Been looking at the 3D graphics space recently so this will certainly be very helpful eventually. Thanks and I look forward to more!
Then what will Vue do?
Have you tried Vue with FeathersJs as your backend?
I've always been interested in webgl, this looks awesome. I'll totally check that out
When I first started doing full-stack JS it was on Sails.js. Haven't used it since but I enjoyed it at the time. Good work!
We use ThreeJS for our platform and it’s quite powerful. I haven’t tried the other though, but we’re pretty happy with Three. They have a very supportive slack group as well. 
Not sure if it will help you decide but the Coding Train has a ton of videos using p5.js so looking some of them over might help you gain some insight a little. It’s a great channel regardless! https://www.youtube.com/user/shiffman
I did. The site kept me logged in to the same profile and I tried adding 1 of each item to trigger the loop. Hasn't happened again so I have no clue what my browser was doing this morning :) Next time I'll know to catch a quick GIF at least even if just to show.
I generally go for what is going to make for the most clarity. A really long complex if statement is much easier to mentally parse if it’s broke down into multiple lines, something quick (if a != null &amp;&amp; a === 3, for example) is best just left as a single line. 
No probs u/tomjdickson. I got quite a few PMs with people asking for help - I'm glad I shared this one.
+1 for coding train. I've never used p5 but I've learned a ton of js from that channel. 
Small issue - if you change the language via the dropdown from English to Deutsh - the product cards still display in English 
Like https://javascript30.com/ on steroids, without the videos? That would be awesome
You mean the product description? I left it for now. Because product owners would have to be able to add product descriptions in multiple languages.
No, I'm more into pure Express.js now.
very dependent on the javascript engine(v8 for instance may cache compiled code) and state of the garbage collector, but in some cases yes. 
Haha, something like that but projects will be much harder and more complicated + orientation will be more on using javascript frameworks :)
P5.js is mainly optimised for 2D graphics, however it has 3D support. If you want to built something in three dimensions on the web, tree.js makes a lot more sense
Handling events in the capture phase vs. the bubble phase is something I love using when it makes sense. 
If it's a very short condition and expression I'll do it on one line, with brackets. If the condition is long, I'll split it into lines (usually &amp;&amp;s and ||s). If the expression is more than a single line I'll split that out.
Wow that’s a lot more content than I was expecting from a YouTube channel. Thanks so much for this, will definitely check it out!
Sounds great! Will definitely try it out on my own.
Try out eslint with [the plugin es5](https://www.npmjs.com/package/eslint-plugin-es5). It won't have everything, and you'll still want to keep a weather eye open for ES6+ library methods (e.g. [].prototype.includes), but it should help.
One of the biggest hurdles is architecture and knowing what technology to use. I bet you'd really help a *ton* of people out by just being a provider of architecture. I don't know how much time I wasted setting up AWS Cognito Sync only to find out I should be using App Sync, only to find out I *really* should have used AWS Amplify. A good architecture could have saved me hours of rereading limited and deprecated documentation and I could have used that time for *real* development and *real practice.* Now I'm just burned out and want to move the hell on to a different project.
Ahhh I see, good to know about their respective niches, thanks!
Yes product description ... OK so it's "by design" Thanks for the example
I assume just rendering the needed components per page. Or handle nested pages only
Yea, I had been thinking about providing a starter for each project that contains project structure + all dependencies that will be needed for development, now I see that this idea is more useful than I could even think :D
I think there is an important aspect that you are sweeping under the rug. Most JavaScript runs on a single thread on a single core of a single CPU. A lot (all?) of DOM rendering happens on that same thread. And even iframes. When you await you potentially allow millions of instructions to execute on that thread while things download from the server. That’s the main reason for async code: not to allow fancy multithreaded algorithms but simply to let other code (other algorithms) run in parallel with this code.
Coding train is awesome! He goes into really cool stuff about graphics but also machine learning and Node.js etc.. super awesome content for beginners and experienced programmers alike!
There's no specific course. Learn some JavaScript syntax with https://www.freecodecamp.org. After learning JavaScript, try your best to build a project with your newly found skills. Then, learn a framework (say, React). After that, build a project in React. See the cycle? https://medium.com/@aryanjabbari/learning-to-code-get-off-the-tutorial-treadmill-5a56a564bb04
They are fundamentally different, it takes time to become proficient. Also you have to get used to the anal-retentiveness of Java devs / architects, they many quirks and culture. But it can be done. The question is - do you like the idea? Java opens the door to more BE, enterprise environments, fintech, possibly Angular, and Android. Are you happy with the your career taking that direction?
I actually really like the idea. Right now I'm trying to come up with an architecture for a simple chat app with randomized anonymous URLs. I think socket.io is what I need, but not sure. A lot of googling required. The risk here is, if I choose the wrong thing, I'm gonna waste *a lot* of time. Your resource would be really cool. If this is gonna be opensource, I'd like to watch or maybe even contribute (if I can)
I'm quite fond of p5 but it is not as powerful as three. If you only need basic 3d support (some primitive shapes, no fancy lighting) that should be sufficient, and Imo the api is easier to use. Otherwise, use three
nice work!! how long have you been working on this and why?
I actually really like the idea. Right now I'm trying to come up with an architecture for a simple chat app with randomized anonymous URLs. I think socket.io is what I need, but not sure. A lot of googling required. The risk here is, if I choose the wrong thing, I'm gonna waste *a lot* of time. Your resource would be really cool. If this is gonna be opensource, I'd like to watch or maybe even contribute (if I can)
So when would I use this? Am I understanding correctly that this isn't true parallelism?
I use one line if statements (without curly braces) all the time. As for other one line if statements: I just let prettier decide and dont think about it.
Yes, it is going to be open source, here is the repository - [https://github.com/SilencerWeb/pet-projects-client](https://github.com/SilencerWeb/pet-projects-client)
You could use this to, for example, load fragments of data in a dashboard. Assume you have to load a 100 charts. You create an array of promises, each when it resolves, draws its respective chart. You can push that array into the task runner with a 10 concurrency so that, at the start, it’ll fetch 10 charts’ data. Once any one of those 10 charts data is fetched, it starts fetching the 11th chart’s data.... and so forth. You can check out the live examples for some idea. I’ll add more examples. What exactly do you mean by true parallelism? This task runner works within the confines of JavaScript. 
I personally don't like it. I think it's not consistent and always makes do a double take. I also don't like multiple conditions in one statements. Example: let isCorrectColor = true if (color.hue === 'green') { isCorrectColor = false } if (color.hue === 'red') { isCorrectColor = false } if (color.hue === 'yellow') { isCorrectColor = false } let isCorrectSaturation = color.saturation &lt; 10 &amp;&amp; color.saturation &gt; 1 if (!isCorrectSaturation) { isCorrectColor = false } &amp;#x200B;
Interesting. I meant multi processing by parallelism, but I know JS is single threaded. So that's off the table. So if I'm loading a dashboard, what's the benefit of using this library to load everything rather than your normal async/await code or with promises where I just start all the asynchronous "tasks" I want and let them complete as they will?
The best bit that I can think of, is it an auto-executing queue. Apart from the fact that you don’t have to manually call all the functions to load different graphs, the other benefit is: unlike a Promise.all, you don’t have to wait for all the 100 charts data to load, in order to display the charts. In advanced usages, you could also vary the concurrency depending on the user’s internet connection. So you could speed up/slow down the task runner programmatically. 
Sounds like a good use case. I'm sure it probably also makes what the code is doing more explicit. Thanks!
I would actually call this a kind of pseudo-parallelism. Each task does resolve at its own time and doesn’t depend on the other tasks’ completion. 
Yep, that’s also another merit! 😁
Now I am very familiar with how async/await works in c# separately from multi processing, and I know that JS borrows from that, but I don't know how exactly similar they are. I would call it concurrent just like the library title, but not parallel for sure since there is only ever one thread that bounces around between awaiting I/O's. Is that about right? Also, if I never put an asynchronous function into the queue, I assume that would execute synchronously.
&gt;I can't do that, when i try to add event listener to forge\_duration it tells me it's not a function.
[superhi.com](https://superhi.com) has some great information in my opinion for combining webdev and design. they have courses on html, css, js and some others
I think what you describe is concurrency, not parallelism. 
Ok, I think I actually managed to do it, sudden light bulb. But now.. When I have this set like this: var forge_duration_element = document.getElementById("forge_duration"); forge_duration_element.addEventListener("click", refreshTime) It works, new time shows when I click on the time, but when i change the event to "change" instead of "click" nothing happens.. Which event should I use so this refreshes automatically?
Okay, I would agree with you guys. I think it’s my bad as to have called it parallel. I shall be sure to mention it’s concurrent and NOT parallel!
Okay, I would agree with you guys. I think it’s my bad as to have called it parallel. I shall be sure to mention it’s concurrent and NOT parallel!
Do it where it makes sense, i.e. in the render method of a React component. Writing fewer lines of code isn’t always a good thing and it’s not a great judge of good code. You want your code to be explicit and easy to read, so when someone else has to work on your code they get it instantly. You should also bear in mind that `&amp;&amp;` is the logical AND operator, it is not alternative if statement syntax. It behaves differently and you may end up leaving values where you don’t mean to, say in strong interpolation.
What do you use for js backend now and why? Thanks
Man thank you so much for sharing this, I have just got my first job as React/JS developer and I wanted to learn and use WebGL since the time I heard that word in Microsoft and Apple Keynotes for their respective OS update conferences, Now is the time
Lol, cool!
This is a great point. At some level of implementation, you are just _looking at code_ and not _learning or writing_ it. Pseudocode not only will be more engaging to the learner, but it will be more encouraging to the contributor who does not have to invest as much time in each idea before sharing it.
First off, that's either a logical and or a ternary statement, not a "single line if". The first one is an extremely common pattern, and while it might confuse very new JS devs, understanding how `&amp;&amp;` and `||` works is something they should learn. Similarly, the `ternary` certainly won't be the first operator they learn, but anyone coding professionally should learn it pretty fast. 
Code with Mosh https://codewithmosh.com/
[Advanced JavaScript course](http://tylermcginnis.com/courses/advanced-javascript) Along with that, [JavaScript 30](https://javascript30.com/) and [JavaScript: Understanding the Weird Parts](https://www.udemy.com/understand-javascript/) are good as well.
Front end masters has the good stuff,
…i love debugging weird glitches. Same item, did you have multiple tabs open with the site in them? Reloading the page? Any weird chrome extensions?
Something simple and boring: Tic Tac To lol : [https://tictacto.netlify.com/](https://tictacto.netlify.com/) I wanted something easier after making a fallout terminal earlier ([https://falloutterminal.netlify.com/](https://falloutterminal.netlify.com/)). This time, there are no dependencies, no libraries, nothing but vanilla. I might do it again later in React, specifically, to learn React, which I'm also aware is the official react tutorial
If it's my own project? Express. But I've also worked on Hapi as well. It's just the BE side of Sails. That's all I need. I prefer to do FE in other frameworks.
So this is async.parallelLimit() from caolan’s async.js library.
It looks like your network layer is using the [explicit construction anti-pattern](https://stackoverflow.com/questions/23803743/what-is-the-explicit-promise-construction-antipattern-and-how-do-i-avoid-it). Returning the underlying promise and chaining off of it is recommended. 
I think this is a valid point but I also think that these tools don’t really need a tonne of active maintenance once they are stable. To be honest, they should follow the language spec and that’s it really. I used JsDoc for old ES5 projects and it was more than enough. EsDoc has been totally for new projects and even has a bit of React support via a plugin which is nice. The main thing is that you have some API reference that tells you what functions accept and what they return. As long as the docs can do this, they are already making your codebase a hundred times easier to navigate for other developers. 
Steve Colt
It reminds me a lot of bluebird's map's concurrency setting http://bluebirdjs.com/docs/api/promise.map.html
Just checked it out. I believe so, but Concurrent Tasks has a lot of helper methods in contrary to `parallelLimit`.
I think it's a very crowded market. You're not just competing directly with Redmine and such, but also with simpler online tools like Trello. Not saying it can't be successful if done well (like anything else), but just be aware that there's no lack of solutions right now.
I actually do use p5.js and it's amazing. The API is well documented and as others mentioned Daniel Shiffman from the Coding Train does a pretty good job at making it appealing.
[https://www.freecodecamp.org/](https://www.freecodecamp.org/) sort of bootcamp into web development + volunteering opportunity
Linters normally enforce this.
You're a dumbass.
You're still a dumbass.
Thank you for comments and useful ways.
We should not be using \`var
We should not be using \`var\` anyways...
Thanks for your feedback. Would you tell me the location where the anti-pattern is present?
This book is to me the best free resource for quickly getting up to speed in js: [https://eloquentjavascript.net/](https://eloquentjavascript.net/)
Three will be better for 3d than p5 but i'm just going to throw in my controversial opinion here that [babylonjs](https://www.babylonjs.com/) is better than three.js in most peoples use cases. 
There are a lot of enterprise projects with javascript on the front end and java on the backend. Picking up java microservices experience is very valuable
Neat. If you don't need bells and whistles, and you don't want to pull in a library, then here's a more minimal jsbin I threw together back in March: https://jsbin.com/joxuya/12/edit?js,console The gist of it: function concurrent (workers) { const queue = []; return fn =&gt; new Promise(r =&gt; { queue.push(async () =&gt; r(await fn())); work(); // wake up a worker in another "thread" }); async function work() { if (!workers) return; workers--; while (queue.length) await queue.shift()(); workers++; } }; const enqueue = concurrent(3); enqueue(logAfterFiveSeconds()); enqueue(logAfterSixSeconds()); enqueue(logAfterSevenSeconds()); enqueue(logAfterThreeSeconds()); emits: 5, 6, 7, 3
Frontend-&gt; src -&gt; state -&gt; * -&gt; actions Maybe more. I was just skimming through. 
This is pretty cool! I was considering wrapping a task in a Promise, but then decided against it as I wanted the user to control what each task did. But I’m actually keen to implement a version which uses `async await` sometime in the near future. Do feel free to raise a PR if you feel like contributing!
Definitely wouldn’t call freecodecamp ‘advanced javascript’
I built a proof of concept that is working, check it out [https://github.com/IuryPiva/p5js-quick-start](https://github.com/IuryPiva/p5js-quick-start) but I had to unpublish it because I left the version at 1.0.0 by mistake and now I have to wait 24hs to publish it again. I will start building it with yeoman! Such a great tool!
This should cover most of the problems that you guys have. The `moneyTotal` and `moneyInput` variables can be displayed in the dom using `element.innerHTML`. var moneyTotal = 0 var moneyInput = 0 function onMoneyInput(amount) { moneyInput += amount } function selectDrink(drink) { if (moneyInput &gt; drink.price) { VendingMachine.dispense(drink) moneyInpuy -= drink.price moneyTotal += drink.price refund() } } function refund() { VendingMachine.refund(moneyInput) moneyInput = 0 } &amp;#x200B;
If you're optimizing for speed on this level, I'm afraid using JavaScript was the wrong move. Developing software requires teamwork. You should optimize for code readability and maintainability instead of these mostly unnecessary speed micro-optimizations. 
Hi /u/vikingproblems, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/jgnodado18, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/SquirtleShells, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Whenever I play Pokemon I need 3 save spots, one for my Bulbasaur, one for my Charmander, and one for my second Bulbasaur.
Whenever I play Pokemon I need 3 save spots, one for my Charmander, one for my Squirtle, and one for my second Charmander.
Whenever I play Pokemon I need 3 save spots, one for my Squirtle, one for my Bulbasaur, and one for my second Squirtle.
Hi /u/surrealpepeagain, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/jadjoubran02, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dogcalas, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/heiner_schwein, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Thanks a lot :)
Hi /u/irlgarbodor, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Nice! Can I ask a question about this line... ``` const sketch = ( /** @type p5 */ p) =&gt; { ``` I get that `sketch` is a callback that takes in `p` which is the P5 object. What is the commented bit doing?
[You dont know JS](https://github.com/getify/You-Dont-Know-JS/) is a good deep understanding of how JavaScript works. This might help with advanced topics.
Don't understand it completely (yet), so I'm probably sounding stupid. :-) Does this help with dividing huge tasks in smaller ones to avoid blocking the main thread? I'm implementing a faceted search for filtering a collection of \~2500 items based on several criteria. UI needs to be responsive at all times. Right now I'm doing a single \`.filter()\` which filters the collection, puts the ID's of matching items in state and updates the DOM (virtualized table) all at once. Maybe this sounds crazy, but could I instead push an action / function to this task runner for each separate item that updates the state when a match occurs? Is this performant? Are there better, simpler options?
I'm not sure I fully understand that work flow. I don't think for filtering an array of items, you could use concurrency with it. But I'm not fully aware of your filtering. Maybe you could whip up an example on [CodeSandbox](https://codesandbox.com), and I could look into integrating Concurrent Tasks into it?
arry\[Math.random()\*100);
Udacity's Intro to JS is currently free and I am enjoying it as a beginner. It teaches you the basics. Then go to freeCodeCamp and start the JS part. I think a solid foundation of JS and algorithm skills are far more important than any current framework.
It is related to the `// @ts-check` on the first line of the script. It's declaring the type of the callback so you can use the vscode's suggestion in it. I am creating another template that will use the global version, as the objective is to make it fast to get started.
_Array[ Math.floor( Math.random( )*_Array.length )]
Excellent. Global version is how I much prefer to work. 
I mean, it's an open source solution, not just free or partially free. A tool that can be supplied locally and be independent
wait... how is this actually concurrent? isn't this just the event queue?
You need to look into service workers. Check out js-worker-search as a reference.
If your code is async but not using service workers then any expensive connotations will still block the thread when they execute. Maybe combining the tasks system with service workers could be interesting tho.
Promise chunks might have been a better name
I don’t think that’s what the title is implying, just that it’s a non ejected CRA. 
I love this! I always find myself wishing my whole experience with typing had “smart key” behaviour!
Lodash has [`sample`](https://lodash.com/docs/4.17.11#sample) if you're using it 
someArray[Math.floor(Math.random() * (someArray.length - 1))];
This is incorrect though. Say _Array length is 2 then your calculation for let’s say Math.random =&gt; 1 will try to access _Array at index 2 which is out of bounds. Use array.lenght - 1 instead. Correct me if I’m wrong.
Thanks!
Math.random can't return 1. It returns a number n where 0 &lt;= n &lt; 1
RemindMe! 6 days
This will never return the last item in the array, unless there is only one item. 
Look into generators, currying, and Promises for the more advanced stuff. JS is generally simple, though.
thank you all for the help!!!
I think you meant to reply to the above comment by u/mcdronkz? But I did look up service workers and I have it in mind to integrate it in some form to Concurrent Tasks to further leverage it. I don't know yet what or how I'm going to do it, but the goal is to learn it myself and improve this package as much as I can.
Concurrent, by definition, implies that this is capable of multithreading. Multiple things are never happening at the same time in this, correct?
But it's not really a Promise. Each task depends on the user. Concurrent Tasks doesn't wrap your task in a Promise, or anything.
[recreation of R in javascript](https://github.com/R-js)
Interestingly, `(errorCode &amp;&amp; expectErrorCode(res).to.eql(errorCode))` caused a semicolon insertion bug. Error being `Uncaught TypeError: expectWithError(...).to.have.status(...) is not a function`. I reverted it to a plain if statement. I suspect it has something to do with how Mocha manipulates the scope/context but not sure on that. I figured out I could fix it with `;(errorCode &amp;&amp; expectErrorCode(res).to.eql(errorCode))` and `;(err ? reject(err) : resolve(res))` but that was a bit too cryptic for my taste. I took a quick look at the Mocha source/Docs and nothing pops out to me. Although, I definitely want to do a read through of the Mocha source as it looks very interesting.
Yeah, just use yarn
Sorry, I wasn't more clear. I meant using bitwise and ternary to craft effectively a single line if statement. A true single line is against out coding standards as that would require dropping the brackets otherwise the code style will just expand a single line with brackets into 3 lines.
Multiple things ARE happening at the same time. For example, if you had 1000 API calls to make, you create a 1000 tasks to handle all of them and pass it to the task runner with a limit of 100. It fetches 100 calls at the same time. Not one after the other. It's not sequential.
npm ci. Didn’t know of it, thanks!
Avoid sails.js. It’s trash aside from throwing together a quick proof of concept. The performance of sails is horrible and it tends to require old npms that have potential security issues. Moved to Koa and haven’t looked back. 
Apologies if I'm the asshole here who's misinterpreting it, but the way I'm reading this, it doesn't seem like multiple things are happening at once. It appears like you're just dropping actions into the event loop. Yes, if you made service requests then that is being fulfilled by a server somewhere and not working on your thread, but once the response is ready, you're just dropping a callback invocation onto the event loop, which is not concurrent, and is indeed sequential. In all cases with promises, you may not get things back in the order for which you asked for then (unless you've chained them together). But that's how promises have always worked. I just can't help but question as to whether or not this does what you're claiming. Unless you're using service workers to invoke multiple theoretical threads, then you're not multithreading and thus, nothing is concurrent and everything is sequential at some level.
It isn't the simplest possible thing but it isn't particularly complicated. You need to learn how to style the page with CSS obviously. You will need to load in an image behind the existing one and then fade the current image out revelaing the new one. Then you need to remove the faded image from the page. You will need to set up some kind of timer to do this as well. The mouse effect is probably more difficult. You will need to look into mouse events, `mousemove` probably and then you will need to get the x/y coordinates of the mouse and you can use that in conjunction with your mouse trail (whatever that is). If you wanted to create an effect similar to the one in the gif for you mousetrail then that would be pretty difficult for a beginner. If you wated something similar then it wouldn't be too bad, i guess. WIthout knowing it is hard to say. It looks like that particular trail effect was done with [particle.js](https://vincentgarreau.com/particles.js/) which is a really fun library and might cool to experiment with.
No problem at all, I don’t mind answering any questions about it! A lot of times, answering questions help me figure stuff out as well. I’m in no way a JS wizard. 😅 I’m not sure what exactly do you mean by “dropping a callback invocation to the event loop”. The entire purpose of this is to simply call functions in its list and let each do its own task. I haven’t used service workers to spawn threads. This is a very very simplistic runner. You can actually use this package to fetch/do stuff in batches while each of them do their own thing, irrespective of whether the neighbouring tasks have completed or not. JS is single threaded. This works within the constraints of JS. Using service workers is something I’ve actually planned to integrate in future versions once I myself have delved deeper into it. 
Do you mean Colt Steele? If so, his courses seem geared more towards beginner to intermediate learners. 
Using parseMap produces the correct result, but this seems to throw a random NaN :/
Those are actually some really useful tips. Thanks! 
That is correct. There is only one event loop per script in a browser.
is the point of this that you just want to run promises in order? The above looks like a really convoluted way of writing: &amp;#x200B; \`\`\` const logAfterFiveSeconds = () =&gt; { return new Promise(resolve =&gt; { setTimeout(resolve(console.log('5')), 5000) }) } \`\`\` etc.... then \`\`\` \[logAfterThree, logAfterFive, logAfterOne\].map(async fn =&gt; { await fn(); }); \`\`\`
I switched to yarn a little while ago and am very happy with it.
I meant to reply to your comment to point out that if you were to cook something to try to help the other user, simply making it async wouldn't cut it. You actually need to move expensive computations (like searching through a lot of records) to a different thread.
Ah yes got it. I understand that. My main aim of replying to that comment was to just understand if this use case would fit Concurrent Tasks. :)
... This isn't even remotely close to everything someone needs to know to use Mongoose. That's rather, a very quick overview.
Wow, everything? Seriously?
Yea I was looking into was to re-create the effect, mainly just searching on YouTube, and found a couple videos that could create a similar effect. The only thing I haven't searched how to do is the mouse trail. Which does look pretty complex. At least I found a way to do the cross fade effect of the images which I'm not exactly sure if it would work, given the video was made in 2013 so the way certain things work might of changed since then, and I was looking at particle.js and it does indeed look like a fun library. I've always wanted to learn CSS &amp; JavaScript but I didn't know where to start, as in didn't know what to create and code, so I never really dove in. The only thing I've done in JavaScript so far is create a Discord bot for my server, code a Fracteral Tree using a slider, and create plugins for a game engine, following tutorials. Been trying to learn on SoloLearn but have been hearing mixed feelings about the site, some say it helps others say it isn't worth getting into it. Also the little hand print shown on the video is also a play/pause button &amp; the volume icons control the audio that is being played in the background. I'm not planning on recreating it as until I at least know some knowledge about CSS and JavaScript, but is that pretty complex as well?
Sometimes you have to use more powerful sounding titles you know 
Sometimes you have to use more powerful sounding titles you know
Needs more appreciation. 
&gt; Assume you have to load a 100 charts. You create an array of promises, each when it resolves, draws its respective chart. You can push that array into the task runner with a 10 concurrency so that, at the start, it’ll fetch 10 charts’ data. That array of promises is a chunk of promises to resolve. I guess that was just an example, but I'm assuming that you'd primarily use this for async tasks. I should probably look at the code, but what you're doing is not really running things in parallel so your description is a little confusing
Yes, if you like lying to people. 
Love, don't hate!
I actually kind of like this because I always manage a typo when I type 'console.log'. I get a lot of 'cosnole.log'. I think I'm much more consistent typing 'print'.
More like result: 3, 5, 6, 7
VS Code, Atom and the like usually have a snippet that autocompletes when you just type "log".
Thanks for this amazing software! It is working great here, but it would be better if when a guest invites someone and they join, then the guest automatically 'follows' the host. We did not know about the follow buttons and had to tell each other to manually go from file to file. Follow is great, but we had to actually read the manual to find it :)
you can go even further: `global.print = console.log` even though it's probably not the best idea to pollute your global ;-)
If I came across that shit at work, I'd `git blame` in a heartbeat and tell you to never do that again. But if you're doing it in personal projects, more power to you.
Here is the Java implementation for those who want to make their life harder const System = {out: {println: console.log}}; System.out.println("why?"); 
Way more consistent, but not infallible. I also like to incorporate: const pritn = console.log python: pritn = print ;) This is the secret to immortality.
How about fu---ck you in your a---s---s whole B-*+itch
&gt; Use `--save-exact` when installing a dependency I disagree with this idea - I think that `package-lock.json` is the right place for locking dependency versions. Version ranges in `package.json` are useful for communicating which upgrades should be safe. If a package uses a caret version range for all but one dependency, that is a clue that the exact version of that dependency is important. If you use exact versioning for everything you lose that information, and you put extra work on yourself when you do want to upgrade dependencies. There was a bad time from npm &gt;=5.1.0 to &lt;5.4.2 where npm did exactly the wrong thing with respect to `package-lock.json`. (See https://stackoverflow.com/a/45566871/103017). But my understanding is that `package-lock.json` will actually lock your package versions nowadays. &gt; Using npm install will tries to resolves the dependency graph, possibly installing different versions (because of ranges declared in dependencies, not yours even if you used --save-exact) and then updating the package-lock.json even if you did not want to. Again, AFAIK this is not true in npm &gt;=5.4.2. &gt; npx runs a package without installing it (but first, tries to find it locally in node_modules) This is handy, but I worry that npx is another potential source for reproducible build issues. When you use npx there is no guarantee that every contributor will run the same version of the package that is run, unless the package is listed in your `devDependencies` so that it gets an entry in `package-lock.json`. I do like the other tips! 
Sweet! Enabled by default on VS Code? Gets me closer to muscle memory of Lombok as a Java dev
That's why it's marked NSFW! 
This is garbage in shared projects. Just use snippets in your IDE
Lol now I get it
Concurrency and parallelism are not the same thing. It won't be parallel (tasks running at the same time) but it will be concurrent.
Don't take away my safe space
WebStorm has one also, you just append `.log` to the whole expression.
Almost like `npm isntall` is a default alias for `npm install`.
You could go to Menu -&gt; Preferences -&gt; User Snippets -&gt; JavaScript and add this to the file: ``` "Print to console": { "prefix": "print", "body": [ "console.log('$1');", "$2" ], "description": "Log output to console" } ``` And now every time you type "print" in a JS file it will autocomplete to "console.log()" with your cursor between the brackets. Safe space safely restored!
right, thanks, edited
This won't work. Or at least, it didn't used to work. I haven't tried it in a very long time. You'd need to do `print = console.log.bind(console)`.
...where is the global?
Yes officer, this post right here 
And this sub is full of fucking horrendous people apparently. It's not babying to say "hey how about were not complete dicks to each other"
Oh it works :0
What have you done to me... '.source.js': 'Print to console': 'prefix': 'print' 'body': "console.log($1);", 'Print typo': 'prefix': 'pritn' 'body': "console.log($1);", 'for in loops': 'prefix': 'foreachin' 'body': "for (let each in $1){ }", 'for of loops': 'prefix': 'foreachof' 'body': "for (let each of $1){ }", 'for enumerate': 'prefix': 'fornum' 'body': 'for (let i=0; i&lt;$1 ;i++){ }' ^(this is only the beginning)
In Node. Attach it to the window on the browser. 
What on earth are you defining as a project to not include this in that scope? Sure it's not software but it involved some work and effort.
Iirc that works in node.js like `window` works in the browser, in that it’s synonymous with the global scope.
[It works](https://imgur.com/a/hYTHc5q) I think you only need the `.bind` if `console.log` were to use `this` in its implementation
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/YMlhou8.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eby14h9) 
`for` loops are for dirty Python casuals. Over here in JavaScript we use [Array#forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach). (but sure, we use your `fornum` loop sometimes too)
Do what have you done? Point me at the PR and I'll happily apologize.
If you want to learn the basics of HTML and CSS, just do the first part of Free Code Camp, its free, has a huge community and generally comes highly recommended. Regarding audio and video, it's actually not that difficult to work with at all. you can pretty much just do stuff life `video.play()`, `video.pause()`. There is a bit of nuance to it but as long as you have a reference to the video or audio element, manipulating it is pretty straight forward. There are quite a few tutorials out there explaining how to create a custom video player with custom controls and when you see how you go about it, its actually quite simple. You might be better off breaking this project down, learn some HTML basics, learn about tracking mouse movements, create a custom video player. Then you'll have all of the foundations to build this thing (mostly). You'll learn a lot along the way and there is less chance of you becoming overwhelmed.
ew
I don't really care about "better link farms" and I'm not sure where you've got that idea from. What I've been pretty consistent about is not bad mouthing someone's work just because you don't find value in it 
 include com.half.your.ram.is.gone.for.no.reason;
Originally, I was actually a bit confused when I read the point in question. I feel like the point is still somewhat controversial - imagine how this'd work with something implementing a fan-out type operation, where you're coding against the interface (all receivers implement an interface, where your interface is the interface to the lower level). I feel like saying it's discouraged is perhaps a bit strong.
My word, you and everyone else here seem to fucking love spending their time hating shit. I'm here being pretty fuckin reasonable going "hey you don't have to hate on a thing just because you don't find it useful" I've also said "if you think it could be better go contribute" And all I've got is people being complete assholes back. You should be fucking ashamed of yourselves 
 my_array.forEach(item =&gt; { for (let thing in my_object){ print(item + thing) } }); Where is your god now
Cool, so go do that and you can be the star of the show instead of shitting on someone else's work.
Can you explain why?
Really you should be using something other than console log overall. At least that's most pros advice. 
You monster.
"the guts". My god this isn't something personal, it's not a slight on you or a damn fight. I edited it because the content wasn't anything related to your reply. I wasn't tryna sneak some shit behind your back or whatever the hell you think happened. The reason I was defending it is because frankly it was tiring and disgusting to watch people shit on someone else's work. Why do you think this repo is a waste of time? It's very clearly not and is obviously useful to quite a few people. What do you think you're saving people from? Learning something? 
too unsafe! (window || global).print = console ? console.log : () =&gt; {};
Yeah and you're an awful person. Real constructive feedback.
And you haven't and never will achieve anything of value in your lifetime. 
Because Math.random will not return 1.
It used to need the bind. That was a recent-ish change, IIRC.
Ah right!
 const print = console.log; let my_array = ["one","two"]; // Use const if you're not reassigning the array let my_obj = {"item":"hi","item2":"bye"}; // same here my_array.forEach(item =&gt; { for (let thing in my_object){ print(item + thing) } }); &gt; Submit comments for review
Clearly you can't comprehend what's already been said.
Still does on some javascript engines.
It won't work on all javascript engines, so be careful with it. I just ran into a bug with this recently at work; ported some code over to a smart tv that was doing something similar, and it threw an exception.
Shame
I did the same thing when I started learning react and found a nifty autocomplete vscode addon. I thought “wait, how are these snippets generated?” Somehow it never occurred to me that I could write boilerplate snippets for other languages until this point. Super handy way to cut down on typing and dumb mistakes.
Get over yourself. This kind of crap doesn't deserve to be top of 2018 when it barely took any effort and is the same work an 8th grader could do.
Relevant: https://twitter.com/joelatwar/status/1073702044068794368?s=09
Not sure about desktop but on mobile, your code is total chaos. Please create a gist or pastebin
[This article](https://www.coreycleary.me/why-should-your-node-js-application-not-handle-log-routing/) (that was recently posted to the Node sub) argues otherwise.
Math.random() returns a floating-point, pseudo-random number that is from 0 (inclusive) up to 1 (exclusive) ([0, 1)). So it can return 0, but not 1. Multiplying by n returns 0 to almost n. Applying floor() limits it to integers 0 to n-1.
Just run your app in electron, no need to write Java adapters just to fill your memory.
Man I hear you. I can honestly see like 40% of my JS code being turned into python code or pseudo code.
Here's a use-case: A browser has (let's say) 6 network connections available per host, any more than that and the ajax request will be delayed waiting for the previous to finish. So perhaps you want to make 20 ajax requests and you know they'll take a while to finish (like 300ms+). Rather than sending off all 20 requests at once and not having any control over network saturation, you could use that handy concurrency throttler thing to wait for a "worker" to open up.
Free Code Camp? I'll look into that, hopefully my college has some sort of course familiar with web development. &amp;#x200B; Alright I'll look into that once I become more familiar with the basics of HTML, CSS, &amp; JS. I don't plan on re-creating it right away since I'm still new. &amp;#x200B; Sorry if I'm asking a lot of questions but.. since this is doing a sort of image slideshow for wallpaper engine would I need to upload the images somewhere in order for other people to freely use it? [This](https://www.youtube.com/watch?v=b2IL5_L047I&amp;index=6&amp;list=PL6c7QqAZa9JyYGi0SqihB7qlwCGNrcZmI&amp;t=0s) is was I was looking at that came close to doing the cross fade effect of the images, the video that was made in 2013, so wondering would I need to upload the images somewhere if I wanted to share this to others using the wallpaper engine app from steam? and if I do what would I need to do differently compared to that video? If that video is still able to be used since it's so old.
You mean web worker?
Is there a lot of `console.log` in your code base? ಠ_ಠ
Maybe because you've spent the last eighteen years building trivial charting components?
Here's a global version that will output the correct line number in the console as well: (typeof global !== 'undefined' ? global : window)['print'] = (function() { return Function.prototype.bind.call(console.log, console); })();
Oh yea oops :) Thanks for catching that.
Don't worry about asking questions! If you want others to be able to view it, you will need to upload it somewhere. You will probably want to take a course or follow a series of tutorials to understand how that would work, there are a number of ways to get your content online (there really are a lot of options these days). That video is probably fine, it seems to be using a library that isn't as popular anymore and its best if you learn how to do this without relying on a library ('from scratch'). I found [this tutorial](https://cobwwweb.com/simple-looping-crossfade-image-slideshow) which uses modern javascript (no libraries) and css to achieve this effect. You are probably going to want to learn a bit more about javascript before you use this tutorial (it uses some features of the language which may be confusing at first). If you just want to make the slideshow and play around then the video you linked *should* work fine but there might be some slight changes you need to make as it probably uses an older version of the library (jQuery). 
It’s always safest to bind like this when “ripping out” a function. You never know when A Chrome update will start using `this`
shots fired
I made a dumby HTML file and it seems to grab the whole folder, so it should grab the required images and libs. I'll see if the video works without issue and if it needs some tweaks I'll look around to see what needs to be changed. JS &amp; CSS seems likea really fun language to learn and it seems pretty easy to pick up, at least from what I hear. &amp;#x200B; Yea thanks for the link I'll look into since my current college semester has ended and I'll have a couple weeks of break to try to learn this. Thanks a lot for the help. At first I thought this effect was created in after effects but then some there told me it was created using JS &amp; CSS so here I am haha.
If you use GJS (Gnome/GTK Spidermonkey engine) there is a print global function but no console.*. Unlike Python it also has a printerr function.
you need bind so the log function keeps the context of console. `const print = console.log.bind(console)`
Shouldn't that err? I think you need console.log.bind(console). On mobile, can't test. I just don't want to give Java'rs anymore ammunition
Why doesn't everybody \`npm i\` though?
Omg this is great.
Large corporation? [This](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) is only a slight exaggeration. 
 Java Apps Javascript apps 🤝 Using half your ram for no goddamn reason 
BEM is painful cognitive overhead that is not enforced by the dev tools, is usually not followed correctly in larger teams because someone doesn't understand it or hates it, and it increases the verbosity of the CSS. I hate it, it reminds me of hungarian notation and other failed attempts at enforcing rigor through 'coding standards" that are immediately ignored by half the team. That is not the way to improve things in practice. The need for these sort of cognitive hacks is a direct result of a failure in design of the underlying system or language. CSS Modules or Styled Components solve the problem BEM was trying and failing to solve. 
&gt;git blame &amp;#x200B;
Oh, [you're right, changes made in Chromium in 2016](https://chromium.googlesource.com/chromium/src.git/+/807ec9550e8a31517966636e6a5b506474ab4ea9)
Works in my browser console
for the win..
Resolved by finding some js to emulate a click. Thanks all!
In sublime I have console.log show up whenever I hit cmd+shift+c (and wraps anything I have highlighted) thanks to this snippet in sublime text =&gt; preferences =&gt; key bindings: ``` [ { "keys": ["command+shift+c"], "command": "insert_snippet", "args": { "contents": "console.log(${1:}$SELECTION);${0}" } }, { "keys": ["ctrl+keypad0"], "command": "reset_font_size" } ] ```
&gt; npm isntall That's right. Everyone knows npm is fat and bloated, not tall.
I used to do this coming from swift as my first language
Nice! forge\_duration\_element is an input element correct? change should work you can also do a 'keyup' listener which will fire every time a user types: forge\_duration\_element.addEventListener("keyup", refreshTime); [https://codepen.io/anon/pen/QzEpZQ](https://codepen.io/anon/pen/QzEpZQ) &amp;#x200B;
Use const in for loops you filthy animal
Was using VS Code to as my editor for our Python backend. VS Code kept using 10GB of memory ! Switched to PyCharm.
&gt; console.log(error) // eslint-disable-line no-console
The horror
Oddly enough, I don’t think I’ve ever had that problem with Code, but have had a few runaway memory sessions with ST3. 
Honestly, it's even better to just not do this in the first place. If you're gonna screw with it, might as well wrap it in a function. That also gives you some extra control, like having a variable for debug level and silently eating logs below the level you care about.
If you're interested, there is an ECMAScript proposal to add `globalThis` so the same variable can be used for both node and the browser (or whatever JS environment you're in). https://github.com/tc39/proposal-global
I second this. Working in Java makes me so thankful for the JS toolchain. Our feedback loop is so tight. I feel like molasses when working in Java. All that said, the ceiling for your salary is much higher. 
That nsfw tag, is that a joke?
Would you use this at work?
I am so much happier with yarn. From its speed even to just the way the CLI displays messages. All around better imo
Except, console doesn't care, afaik.
And with browsers' tendency of constantly updating... Who cares about old browsers? Especially since this is functionality for yourself, not for random visitors to your site.
 global = window;
nope, absolutely no need for binding
I think you mean vim. 
I don't come from Python... So, "no". But as this is for interactive debugging, I don't see ham in a shorthand. I'd even dare to use "p" or something equally short.
Could you explain why this would result in more RAM usage?
Why not take advantage of WebGl and use emscrupten?
Is it faster to just do for loop and push to a second array?
Definitely needs an illustration instead of the text blocks.
Who cares any more when there's babel-plugin-transform-remove-console
Best would be to say "suboptimal, but sometimes nesessary" imho. If you implement a state machine, it's 100% necessary. All the state implementations would be at the same level.
Genuine question: why is it bad to have ‘console.log’ in the code? Is it bad to generate logs in a Node app?
Oh yes, the title is totally my bad. I even wrote a comment. Unfortunately, I can’t edit it now. :( I recently did a commit where I removed all mention of parallelism to avoid this exact same confusion. 
This needs \`console.log.bind(console)\` though, doesn't it??
Should you really distribute your libraries in ES5? I think it's user's responsibility to transpile their code to ESwhichever-they-need. If someone tries to only depend on ES5 libraries to avoid transpilers, their project will become a huge mess over time. I've also seen some tools that generate 2 bundles: transpiled to ES5 and untouched, serving them to the older and newer browsers respectively. Pre-transpiled library completely defeats the purpose of such tools.
Gotcha, yeah the NSFW was mainly a joke. I agree on using something like p as well.
checks out username does
If the function is part of the object, clone and cloneDeep won't be able to copy it ([see documentation](https://lodash.com/docs/4.17.11#clone)). If the method is being put on the object separately from the cloning, then the value of `this` is going to depend on how you're calling the function (if this is a regular function) or where the function was defined (if this is an arrow function), so i'd probably need to see some more details of what you're trying to do to advise you what you need to change.
Console logs do not have a level associated with them, so you have no way to run your app with only error logs, or with debugging information. That makes it easy to not only write bad logs, but to get to a situation where you can't remove a bunch of related but distributed logs without some effort. Basically, logging without levels and organisation leads to bad code hygiene. 
Stupid me always wrapped console.log inside a new print function
Well this is exciting! See my edit
Thank you for checking. Just got to my computer to test and yes! No error! See my edit for why I am excited
&gt;u/JGM0 Probably should add the HTML and CSS too. 
He aliased a function and it is amply obvious what it does. What standard did he violate? 
Yes I like the idea. And I want to do this. 
Thus Math.floor
there was a bug a month or two ago in the Python Language Server which caused heavy memory leaks. Probably still has some issues.
Stop downvoting him, assholes. This didn't work without binding up until, if I'm not mistaken, Node.js 8.x. I don't remember it causing any errors, if I remember correctly it used to silently fail (i.e. not print anything because the log function would simply log to `global`). Then at some point `log()` didn't depend on `console` being it's `this`. I've never seen a single sentence of explanation why this was changed, I've never used this kind of aliasing in browser so I'm not even sure it's a Node.js `console` implementation bug or a V8 bug, nor how Firefox behaved before (doesn't need `bind()` now). So he *was* right.
Aw thanks for the defense! Ya I looked through the chromium and firefox bugs and it looks like these have been very quietly resolved within the past year and a half. But as I said in my edit, this is just one more thing on the "in my day" category now. For those of us using JavaScript since before jQuery, that category is quite huge and ever-growing. It's actually kind of delightful to be wrong in this way.
I'm no Samaritan tho, just extremely irritated by immature Reddit behavior of downvoting people out of own ignorance. Downvoting non-abuse is bad enough, but this really makes my blood boil sometimes.
why the fuck nsfw 
Why don't we walk together back to r/pcj friend, and blow off some steam. We can kick some rust crates over on the way.
[Here's a bunch of arguments about pretty much what you just said if you're interested in the discussion.](https://www.reddit.com/r/javascript/comments/9u4kis/basics_how_to_stop_using_consolelog_and_start/)
Yeah. /r/javascript is such a toxic place. Nobody truly embraced the Script here from what I see.
+1 on Tyler’s Advanced JS course. Wish it was available when I was learning JS. Loved the analogy of the event loop to the butler haha
As long as it's made clear that it fits within certain designs. It's a tool that can be applied, but mustn't be applied blindly.
A text meme. This is amazing
There's nothing wrong with learning JavaScript as a first language. The real problem you faced was getting stuck. If we can help you not get stuck next time, then we can fix the problem and you can keep learning and not feel like giving up. What kinds of things did you get stuck on?
Specifically on Function related topics
Well, a community such as this would be happy to help you with questions like that. Whenever you get stuck, just make a post here explaining what you don't understand or what you're trying to do, and some of the kind folks here will talk you through it. If you have specific questions now, I'd be happy to help in this very thread.
It’s a joke about Java/JVM being memory hungry I believe 
Bahahaha 🤦‍♂️
Aren't the 4 levels info, error, warn, (output to stderr), and log (output to stdout)?
It does, there was a stack overflow question about someone forgetting to bind
Thank you so much for your reply. I'll post the specific problem where i stuck next. Now kindly give some opinion of your own. 1) Is it right to choose JavaScript as a very first language without any previous language experience? 2) How can i invest my promised 6 months Effectively? 3) Which resources should i follow to learn? N.B-(I'm following Jonas's JavaScript Course on Udemy now) 4) Which roadmap should i follow to master the JavaScript programming? Is there any specific provided roadmap in online? I'll be much grateful to get these answers and a lot of love &lt;3 again 
I do. At one point I was so lazy that I even had `ni` alias for the same thing.
Reply after 4 months 😱
There's a dude at my work who did this in production code. self = this
Must install outdated JDK, to support libraries not updated since 2006 on SourceForge...
Delet this
This used to be super common when creating JavaScript libraries before modules and arrow functions; it was used to maintain a reference to the parent scope for use within a callback function 
[removed]
Npm isn't all. There's also yarn and pnpm.
It depends on the context. It also won’t throw an error but it won’t work in some cases either. Particularly if you pass console.log as a function to a tap in an observable pipe. 
functions are just values of properties, so when you clone you copy that value to the property on the new clone now it does depend on how you call that function if it were a regular function, but I suspect the function @kitchmas is talking about has `this` bounded, or it is an arrow function
Fair enough, I assumed it was coz he loves python
My browser tripled its memory usage by showing this piece of code.
Oh, JaVa iS BaD circlejerk.
I like the minimalistic design and use of space. Good job!
Yes but that’s not very versatile. A good logger usually has multiple channels, separate from levels so you can categorize logs on the process you’re actually trying to debug.
If you forget this line and just `print('something')` it opens the printer dialog. I sometimes do this by accident after coding in Python for hours and it's funny.
Such a thisish behavior! 
generally using forloop is a lot faster. map needs to call a function with 3 parameters every time it iterates, also it needs to check if the second parameter is defined and build the 'this' of that function to that parameter
I agree with the sentiment, but in practice it sucks to worry about transpiling specific libraries before bundling. This pain is incredibly evident when working with webpack, see [this issue on babel-loader](https://github.com/babel/babel-loader/issues/171) Honestly, I think that we as library creators/maintainers have a responsibility to make it as easy as possible for users to utilize the code we've created, users should have the ultimate power to decide how code is transpiled, sure, bug current tooling does not make that easy, current library creation needs to reflect the capabilities of the users. You're right we should rethink the way libraries are distributed, especially in light of [the recent event stream fiasco](https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident). For now, I believe it is best practice to transpile library code to es5 before distribution, but would love to be proven wrong.
It does - 
Object.assign and the spread opperator is not a deep copy is my understanding which means it isn't immutable, hence why libraries like immutablejs and such have been created. 
Good to know! Thanks for this :) 
Sure, the last part of the article talks about drawbacks of Object.assign and spread operator and why utility libraries exists.
Sorry must have missed that. 
Because if you commit this, me and other developers will come to your table and beat the shit out you.
I thought Babel would import that automatically
You forgot `eslint-disable-line semi` also
The problem is that you don't clear the canvas on which the rectangle is being drawn. One way of getting content from the rectangle is to identify the coordinates of the rectangle, as well as its width and height, and then using that data like this: `imageData = canvas.getImageData(x, y, width, height)` This returns an ImageData object, which can then be used in numerous ways, such as drawing it on another canvas etc.
Only if you run it through babel-node
&gt; I also think that these tools don’t really need a tonne of active maintenance once they are stable Sure - however, NO maintenance, as in JSDoc3's case - still the main tool everybody points to leads to a huge backlog of issues. These days, even with the best of effort and trying to use only as few and as standard a notation as possible, I often don't get any useful output from it any more. The huge number of forks of the repository speaks for itself.
eww. map ftw! Unless you want to run print, then forEach away!
They’re not exactly interchangeable 
Right!? It's so useful. I've got my most common stuff all made into snippets that are context sensitive (using some regex magic), so if I hit { inside an object it gives me \`: { }\`, in a function \`const = {}\`, in an array or parens {}. It's pretty sweet.
none, some people are just anal.
like console.group?
Why?
The fewer characters the better.
If you were the owner of the company would you allow it? :P
The proposal is well thought out, but I'd rather avoid adding new syntax for something that can be a three lines function: function pick(props, source) { let result = {}; props.forEach(p =&gt; {result[p] = source[p]} return result; } You may say that there is a precedent with the spread operator that is basically syntax for `Object.assign({}, ...)` `[].concat(...)`, but I'm not sure it is a good precedent.
I think it depends on your javascript engine version. http://www.reddit.com/r/javascript/comments/a6txtp/-/eby144i
Why is this even nsfw lol 
I think you may have some problems with Symbols. Anyway one of the strong points of the proposal is the ability to reuse the well know destructuring syntax for 100% flexibility.
That's single thread concurrency, which is not what you'd initially expect 
This is how you learn programming, you try something, get stuck, look up the problem and solutions online, learn from that and proceed to the next problem. Over time you will get better at finding solution, even experienced programmers still need to do that when they try to do new things they haven’t done before. Programming is a very big field, bigger than you think on the outside. That is why programmers are in high demand, if it was easy then everyone would do it. It is one of those things that the more you know, the more you realize you need to learn more. So keep trying, 
Yes, but what’s the problem with that?
Why did you create immutadot instead of using immutable.js, immer.js, monolite etc.?
They are all 403 errors, which means Forbidden. In other words, the server understood the request, but will not fulfill it, so it returns you a 403 code. Check if those files are accessible, or do you have the necessary permissions
They are blocked by uBlock or any other adblocker you have installed :).
&gt; I think you may have some problems with Symbols. [None that I can see](https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvEAXwvW10QICsEqdBk2J4hcYgAI4kgLySAygE8sAI1pQAFAEoAOmn3iptOZOD7Jk5HAC6iSQFYKFyRnsA2Z2kur7Adn1WfX0wAFc0amIIekkABwhqAGtNWIAnWli4CmlaUNTqGG0zF1gpVPhQqCl5YFYAbhc0jLh8MFpUgFEMakIUuQA+M3K4SuJkWJtTOFz8mHGbVj1vSXLiPO9h0Ya0IIMI+glJWgAmU3ikzWQAcgwr7Nts2iXDA40YfChaAHNNE+sbR7HfAYQH4VTaSggOAwWCRaJoBA8ACM7kQAGYAAxsDggTA4PD4ahwAQ0eiMZg8NgLIA). What problems are there (beside the missing paren on line 3)?
He's adding complexity with almost zero benefit. You have to look at the definition to see exactly what it does. Don't change the code for something like that. Change yourself. If it were something more complicated from another language that's complex then that's great. Don't do it for trivial shit like this. Someone else pointed out that not binding this may cause problems. So he possibly introduced bugs as well. Yeah it's a joke, but no, you should never do this.
``` window.onerror = window.close; ``` For that native feel.
This comment needs a lot more appreciation
Sorry I've misunderstood a little part. Yes there are no problems with Symbol, nice. 
Mhm thrice the money sounds very tempting, but it also depends on how you feel with doing frontend tasks? Are you happy where you are, or do you even want to go deeper and want to learn UX Design; or do you want to go into the dark corners where the heavy lifting is done without the human factor on the other side?
&gt;Functional programming’s goal is to allow us to think less and write more descriptive code. holy shit is that an actual quote? i can't believe anyone is advocating programmers think less. one of the biggest issues in our industry is people just start typing away instead of thinking through a problem before writing code.
What's npx check if not npm outdated?
We have a section in our README explaining why we made another immutability helper library [https://github.com/Zenika/immutadot#our-approach](https://github.com/Zenika/immutadot#our-approach) 🙂 TLDR; We aim to focus on meaning, interoperability and learning curve. Since we made an opinionated choice we have drawbacks like every other libraries. I guess that choosing an immutable utility library is mainly a matter of feeling.
Is this still true in every browser? I've noticed in Chrome that I can do `promise.then(console.log)`, and I'm pretty sure that didn't work a few years ago.
Sure this is a quote from this article [https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-immutability-4e9751ca005c](https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-immutability-4e9751ca005c) I guess this sentence means focusing on writing code with more meaning but maybe this is poorly formulated 😥
What about Fast Prototyping? You can't do that with any language that needs to be compiled. You can easily create semi functional mockup for UX and UI Studies.
I don't like it either. You can either use class properties instead of methods (e.g. this.doSomething = () =&gt; {}), or bind all the methods in the constructor. 
global || global = window;
foo.doSomething actually is Foo.prototype.doSomething. What you do inside another function is equivalent to Foo.prototype.doSomething(). You can see there is no value bound to this.
Yeah, don't hide the beauty of Javascript
My favourite “in my day” was [this IE6 bug](https://felipenmoura.com/articles/bug-on-ie-when-creating-elements-with-name-submitname/) that caused IE6 to lose the name attribute when manipulating form dom elements, they would never submit but would be visible in the developer toolbar. Trying to track this down pre-stackoverflow was a nightmare! 
Think about it this way: "doSomething" is just some function which is attached as property to "foo". What you are doing in your code is, you are unplugging the "doSomething" function from the "foo" instance and then passing it into "otherFn" as argument. To avoid the unplugging you need to bind "doSomething" to "foo". Does that make sense? ;)
Mmmm I didn't thought about binding it in the constructor, that would allow me to write a superclass that would bind `this` to all my methods right? Is it a bad idea? ``` class BetterClass { constructor () { const methods = Object.getOwnPropertyNames(Object.getPrototypeOf(this)).filter(fn =&gt; fn !== 'constructor') methods.forEach(method =&gt; { this[method] = this[method].bind(this) }) } } class Foo extends BetterClass... ``` https://jsfiddle.net/0djkwvfq/1/
Yes, classes require binding if you want to do what you.. want to do here but you can get "around" that by not using classes as they're a later addition to the language anyway. const foo = (text) =&gt; { return { doSomething: () =&gt; { console.log(text); } } } const instance = foo('hello, world'); const other = (fn) =&gt; { fn(); }; other(instance.doSomething);
Yes, classes require binding if you want to do what you.. want to do here but you can get "around" that by not using classes as they're a later addition to the language anyway. const foo = (text) =&gt; { return { doSomething: () =&gt; { console.log(text); } } } const instance = foo('hello, world'); const other = (fn) =&gt; { fn(); }; other(instance.doSomething);
Something like this? const obj = [ { weight: 70, reps: 5 }, { weight: 120, reps: 5 }, { weight: 150, reps: 5 }, { weight: 180, reps: 3 }, { weight: 200, reps: 3 }, { weight: 210 }, { reps: 3 }, { reps: 3 } ]; obj.reduce((result, item) =&gt; { const lastItem = result[result.length - 1]; result.push( !lastItem || (item.weight &amp;&amp; item.reps) ? item : { ...lastItem, ...item } ); return result; }, []);
I'm going to find the person who invented Java. I'm going to find him and he's going to wish he'd never been born.
So, which is it gonna be? The language itself? Or the runtime? I've seen the language itself be, well...never really that fast, but kinda OK. I mean once you get it up and going...(disclaimer: Have written much Java code, and once-upon-a-time liked it. I don't know what was wrong with me. Then I picked up As3, which is like Flash + Java. Again, I'm not right.). &amp;#x200B; To be fair though, I've had that same thought about Python...the indents. Don't get me started about way back in the day trying to work with a team that had all different editor setups, and then 3 people edit the same file in one day, and the whole server goes down. I just wanted to seize Guido every now and then and shake him and say "What the hell is wrong with you?". &amp;#x200B; &amp;#x200B;
Hi /u/WilhelmineWaters94, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/Ge0rge3, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/bennaughton113, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Did you know 30% of the United States population doesn't have a sense of humor?
Hi /u/bennaughton113, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
I did not know this! Fascinating! Did you know that nearly 99.928% of Reddit has no idea what what a sarcastic rebuttal even looks like, or understand the art of conversation and context? &amp;#x200B; I got my data by just reading Reddit. How'd you get yours?
The local storage can't be accessed or hijacked by another website/extension and thus is safe to use for storing session keys or access tokens. Of course a user can open the dev tools and read that token but that is not a security issue as he is the owner of that information anyways. A token does not have to be encrypted. What you should not store inside the local storage are e.g. passwords. For that you should simply use the credential management API that lets chrome store any credentials in its password storage for you. A chrome extension has no secure persistent storage which can't be read by any user having access to the device it is running on. Just do not store sensitive information in your extension and for credentials use the credential api.
I agree that it’s a very poorly worded quote. A better explanation would be that FP lets programmers think more about the problem and less about code. The quotes article describes hunting through files to find a var that is undefined. That’s completely “incidental complexity”. The person paying you to solve their problem literally does not care about vars or undefined. Every second programmers spend futzing with tools is time spent on something the customer does not care about. 
Why are not you using async/await feature ?
It’s not what most OO systems do, but there’s a good reason for it, it allows more flexible delegation to other objects that aren’t part of the prototype chain, but if the delegate then makes a further call to this.foo the original object will receive it. 
Why is this labeled NSFW? I thought we were going to see programmed porn.
What is wrong with your whole family line?
Lol
I'm all for funsies in `README`s but christ that dot in _"immutad●t"_ renders it nearly unreadable. Every time I reach on my eyes screen to a halt...
"Change yourself" I hate this attitude *so* much. Programming languages and compilers are there to work for us, not the other way around. 
How is this not safe for work?
I think they're just trying to define declarative programming, but it came out awkwardly
not trying to be that guy but it shouldn't it be log method instead of log function
You're adapting for other people, not languages or compilers. If you're working on a team you have to take this attitude. If not, you're more free to do what you want.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Thanks!! There's one little thing, I'm getting: [{weight: 70, reps: 5} {weight: 120, reps: 5} {weight: 150, reps: 5} {weight: 180, reps: 3} {weight: 200, reps: 3} {weight: 210, reps: 3} {weight: 210, reps: 3} {weight: 210, reps: 3}] But I need: [{weight: 70, reps: 5} {weight: 120, reps: 5} {weight: 150, reps: 5} {weight: 180, reps: 3} {weight: 200, reps: 3} {weight: 210, reps: 3} {weight: 210, reps: 3}] 
There are libraries for that. It's called autobinding. However, I've read that it's not a good idea performance-wise. 
&gt; State of immutability in JavaScript Ahhh the irony of that title
Do you mean differentiate what browser the code is running in. In that case it is pretty simple. [stack answer](https://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser/9851769) 
Hello everyone, I'm looking for someone who can help me make a roulette very similar to this roulette above on the homepage of my website, with the possibility for registered players on my site to play once a day . I'm using Wix to host my website and I know it's possible to host roulette on another site so it can make it easier for those who do not know Wix well (although it would be easier with the base of my registered users). I can pay for this mission if needed, thank you in advance for your help! 
You use ImmutableJS because it gives you persistent data structures (specifically persistent HAMTs) so that you don't need to deep copy
I feel like this is completely the wrong title &gt; Don't just learn frameworks Sounds more reasonable
I didn't really understand the logic behind how you want to merge and collapse, but it should be fairly trivial for you to tweak the code yourself to get the desired result.
It’s not only JS : values have to be calculated server side or your users will be able to cheat easily.
Print already works like console.log on firefox. 
My general opinion is that OOP is bad, and this example gets at why. You don’t have a simple function. You have a method which is attached to an object which is holding secret data your method needs to work properly. Granted some more OOP-focused languages will let you get away with this kind of thing more easily (i.e. without bind). But I don’t think that makes the pattern any better. As for JS specifically and `this`. Just remember that `this` is whatever is to the left of the dot _at call time_. If you have nothing to the left of the dot when you call the function, then `this` will be undefined (strict mode) or the global object (bad mode). This is true unless you explicitly set `this` with bind, call, apply, or `new`. 
No. I already know the browsers. I am looking for a build system that can parse a JS file and only output code for the target browser using [preprocessor directives](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/) or something similar.
Yes, there is a part dedicated to client side and backend side in Wix for the code. But I just don't know the code haha
As mentioned in the article, it goes for frameworks, libraries, and tools. Or in other words, all the trendy tech this subreddit fixates on. Conclusion: This subreddit, and the online community in general, is moostly a waste of time. I do not mean that ironically, either. It is.
aaaaand now I can't [print](https://developer.mozilla.org/en-US/docs/Web/API/Window/print) my page.
Sounds like me when typing clear in my terminal. After some time I just created aliases: - clear - celar - claer - clera - ... 
Clickbait title aside, this advice isn't just sound, it's *necessary*. *Programming* is a broad and important skill. It even goes deeper than "fundamentals" like design patterns as mentioned in the course of this article. Writing code that is the right balance of * easy to understand and follow * simple * resilient in the face of changing requirements * easy to test Is *vital*. Before you should concern yourself with anything else, you should really understand what it means to write reliable software that doesn't confuse you or another developer 3 days after you've written it. Sadly, one of the best teachers of this is to flail about in a mess of convoluted code enough times before you realize that you should be writing code so utterly simple it's almost condescending. 
Have a look at [ParticleJS](https://vincentgarreau.com/particles.js/). It makes this sort of thing really easy.
Lots of sarcasm but you don’t give any reasons. If you thought Reddit taught you how to think then I can only feel sorry for you.
I agree, it's silly. The easiest way I've found is to write methods as properties: ``` class Foo { bar = () =&gt; { ... } } ``` This is very useful in React. Also to everyone saying "OOP is bad": This question actually has nothing to do with OOP. Just because you are using an object does not mean you are doing object oriented programming. Encapsulating data within an object and exposing methods can be extremely useful ("foo".startsWith("f") wouldn't be possible otherwise). Similarly, just because you use `[].map` doesn't mean you're writing functional code. 
Keep interfaces close to where they're used. If it's a general type used all over then put in a common file with similarly common interfaces/enums. I tend to keep things close to the implementation though.
Depends on what you're using. For example for webpack you have: https://www.npmjs.com/package/webpack-preprocessor And I'm sure probably many others. It's not something built into the language, though. Anything you'd have would be something either part of, or an extension for some custom build system.
Here is the documentation on `fetch`: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful Here is the response object: https://developer.mozilla.org/en-US/docs/Web/API/Response Basically check if the `response.ok` is true, if not, throw the error using `response.statusText`. 
Well, an article about not wasting your time phrased in such a complicated way that it could be 90% shorter and not lose any content.
Pretty simple, for ES6 use `throw new Error(‘message’)`, if you use TS, i’d recommend creating a new error class that extends the default error class, that way you can have something like `throw new CustomError(url, statusCode)` which could print something like `url ‘https://reddit.com' failed with status code: 400` or something like that.
nah, that's in the base rules #fucksemicolons
I agree when it comes to frameworks that obscure the language away from you `jQuery` for example. But 'frameworks' is way too broad of a term to write them off completely. I can know the language without having to build every tool I use from the ground up. Furthermore, using a framework doesn't preclude you from needing to apply things like design patterns. &gt; This advice has changed my life. I removed all framework books from my bookshelf. The guilt pile shrank from 50 to 0 books. What a relief! Maybe the author has a different idea of what 'learning a framework' is compared to me, but the idea that you'd buy a book on ReactJS and read through it is so foreign to me. I learn a framework by creating something in the framework, and that allows me to focus on the parts of my code that are unique to my app, not creating all the boilerplate from the ground up. 
Well, what did you expect from an internet article in 2018.
The more technical a sub is, the more the reflexive downvote behavior is present. Especially in broad subs where I assume people are just full Dunning Krueger -ing it. 
With slice, you are passing in the index of the items. Indexes of array start on zero. So in your example your array with indexes would look like this: [0] =&gt; 'orange juice', [1] =&gt; 'bananas', [2] =&gt; 'coffee beans', [3] =&gt; 'brown rice', [4] =&gt; 'pasta', [5] =&gt; 'coconut oil', [6] =&gt; 'plantains', The output of slice will start at the element with the item with an index of 1 (`bananas`, 2nd element) and end with the item with an index of 3 (`brown rice`, 4th element.) 
Ok
Maybe you could use [webpack](https://webpack.js.org) along with [webpack-merge](https://github.com/survivejs/webpack-merge/blob/master/README.md) to have multiple configuration files that each have different entry points which bundle the scripts that are tied to their respective browsers. You would have to separate your code though. i.e. webpack.config.js — normal conf webpack.config.ie.chrome.js — set the [entry points](https://webpack.js.org/concepts/entry-points/) for this one to include scripts meant for chrome. webpack.config.firefox.js — set the entry points for the this one to include scripts meant for FF. You could have common files included in the entry of the common config file. 
I think the problem isn't "learning frameworks" it's "learning frameworks as though they're a tool in and of themselves". IMO, the second you've actually bought a physical book on a specific technology (whether that's a language, a framework, or a pattern), you've probably gone the wrong direction. Books are good if you need to get 30 years of experience condensed into a couple months ("I learned C in college, but how do I write effective C++ in 2018?"). Books are not good for keeping up with modern trends ("Ooh, a new framework. Tell me everything about it in 500 pages.")
Anyways, that's just my two cents I'm not a TC39 member. If this were to be implemented, this would be the way to go. I'm just not sure it should be implemented :-)
I have not used webpack before. I guess it is finally time. Thank you.
no
I have not used webpack before. I guess it is finally time. Thank you.
Yea I've been looking into it. all the particle.js videos I've seen has the particles move away from the mouse and when on click it adds more, I don't really want that so going to do some modification&gt;.&gt;. I'm absolutely new to HTML,CSS,&amp; JS so this might be far out of reach for me but worth looking into it.
React has been around for 5 years. Vue has been around for 4 years Angular has been around for 11 (!) years. I'm not even talking about jQuery, mithril, bootstrap and other technologies that are widely in use. And when it comes to *libraries*, learning them is seriously not a big deal. "New framework every week" is a myth
But he is right about transferrable skills. Learning them should take most of your study-time.
No problem, the way of using preprocessor directives sounds cool though. That would simplify a lot. 
If you're not using it now, it might be a little much just to get some preprocessor directives in there. I found this with a quick search which should work standalone: https://www.npmjs.com/package/preprocessor You can dig around further and see if there's something else out there that better suits your needs.
Are you using [ASP.NET](https://ASP.NET) Web Forms, or [ASP.NET](https://ASP.NET) MVC, or [ASP.NET](https://ASP.NET) Core? &amp;#x200B; The answer will be somewhat different depending on what you're using. 
What gives you that idea? 
&gt;What, this is undefined inside my object? Come on, I thought ES6 was solving all my Javascript lack of internal knowledge... It does, you just aren't using it. methodName() { } is not an arrow function, so `this` is not bound to it. methodName = () =&gt; {}; will solve your issue, because the function's context is not changed in use. class Foo { doSomething = () =&gt; { console.log(this.text); }; }
By extension, doSomething = () =&gt; { }; is the same as `this.doSomething = () =&gt; {}`, making it a property of the instance as opposed to the prototype. This is how you keep the `this` reference.
\&gt; **Stop Learning Frameworks** is actually more reasonable. &amp;#x200B; Frameworks exist because of historical gaps in the Web as an application platform. These gaps are rapidly being filled in now with Web Components, CSS variables, and CSS Shadow Parts. The browser is the framework that most developers should be learning now.
Your code might actually be shorter (at the very least easier to read) if you just bound each method manually. Not every method needs to be bound this way. If the calls to that method are only coming from within other bound methods, you do not need to bind them: the context never changes. With your current code, you need to check that the properties are functions. `this.text.bind(this)` will throw an error.
Thanks for the suggestion. &amp;nbsp; &gt; You can dig around further and see if there's something else out there that better suits your needs. &amp;nbsp; There are quite a number of loaders that can strip code marked by special comment tags. Should be able to try them once I learn how to configure webpack.
The great thing about avoiding the non-standard JSX (and using JS modules) is that you don't necessarily need a build process. A project should just work as completely un-built-files, and then you can compile and bundle as needed for testing and production.
&gt; My general opinion is that OOP is bad You really should drop this mentality earlier rather than later. OOP is more complicated, but it has a beneficial trade-off. It's not as important for small scale projects, but it is a necessity when dealing with enterprise-level projects, where your code has to be shared between teams and even organizations. I was on the anti-OOP train for many years as a junior, but it was primarily because I didn't see the benefits in my personal projects. It wasn't until I saw it in practice solving real-world problems that I realized how much time I'd wasted avoiding good habits.
The nice thing about using destructuring is that you wouldn't be using strings to refer to properties, so the source could still be minimized/compiled with renaming turned on.
Hmm, that makes sense I gueoooohhhh Vue CLI supports TypeScript 😍
As soon as an author resorts to typing out a tedious, hypothetical dialogue that is supposed to illustrate a point instead of just saying the point, it's clear they are more interested in hearing themselves speak then providing utility to their readers. In all these cases you can simply skip ahead to the next content paragraph after the dialog and not lose a beat, because the author is surely to deliver the actual point soon after.
Can I get a checks out on username?
https://medium.com/komenco/react-autobinding-2261a1092849 Here is a rundown of your autobinding choices and syntaxes. While in the context of React, it is pretty general.
There is a lot to agree with in this article, but what you are saying is nonsense. I could post a long retort to your utterly baseless and overgeneralized comment, but instead I ask, why are you here then? Are you not partaking in the subreddit and 'online community'? It seems to me like you're actively contributing to the extremity and lack of nuance that plagues the internet, including this developer community, as a whole. 
Clearly we're talking about advice aimed at junior devs who still need to learn fundamentals, so: how is a junior dev supposed to accomplish anything interesting without a framework to take care of the underpinnings? They need to learn the frameworks just as much as the other fundamentals, in order to be productive. When you give a kid a lego set, you want them to understand how the bricks fit together and ultimately to be able to design their own creations, but you still encourage them to start out by following the assembly instructions that come with the box, because it gets them over a hump they can't be expected to clear on their own. &gt;Before you should concern yourself with anything else, you should really understand what it means to write reliable software that doesn't confuse you or another developer 3 days after you've written it. I have to wholly disagree here. The \*first\* thing you should do is build something that you feel good about having built, that rewards you in some way, that does something cool or productive. Then, the second thing you build is something that is also cool/productive, but improves on your execution. You build up from there, each time doing something neat along the way. Frameworks are essential in getting the interesting results, otherwise a novice would be stuck trying to understand how to parse HTTP cookies, implement routing on their own, etc and would never get anywhere fun before being thoroughly discouraged.
https://developer.mozilla.org/en-US/docs/Web/Web_Components#Browser_compatibility I'm going to use what customers' browsers support for now
But learn react fam
I've just been hammering home javascript as I feel that is where I am weakest at. I can DOM manipulate like a pro, but really doing OOO I find tough and hasn't fully clicked yet. 
Well thats silly. You can create any kind of grouping with console.group and console.groupEnd() if thats whag you mean, otherwise you either mean separate files or prefixed messages. Which you can easily extend the console object to do, which you would extend by using one of the levels I mentioned. If you mean to separate files, that's by definition not what the *console* is for. Neither of which are a part of your original argument, so you're moving the goalposts here. But okay.
The browser isn’t “the framework”. It’s more appropriate to call it the standard library. And frameworks do not exist because of historical gaps in the web. If that were the case, no other language or platform would have frameworks, because they aren’t the web. Frameworks exist to abstract away the common bits of developing complex applications and inform application design.
"Rapidly" ... i am waiting for a proper component model since i've been a kid in the 90s, i'm old now and all they really have is a naked dom node wrapped into a shadow dom, without manageable means to update/diff/communicate/render ssr or native. No, you're supposed to use web components along with a framework again, every component you load will potentially contain one. The irony seems to escape those that run around with a straight face claiming that web components solve real world problems. Like so many, i've decided to write apps *now* and not in my next life. 
This article should be titled “Learn the Standard Library”, and it’s advice that’s transferable to any language or platform. Also learn popular frameworks because they help you get jobs and get things done.
This probably speaks to alot of programers on a spiritual level
I keep typing "functino" all the time. 
I barely made it through the unnecessarily long conversation with his boss before I closed it. Had that conversation been roughly 5 lines, the entirety of the article would have been encompassed in it, and I wouldn't have wasted my time. Because, after all, "Time is the most precious resource we have. Time is limited, nonrenewable and you cannot buy more of it."
That's the supersymmetric partner to the function
&gt; Time is the most precious resource we have. Time is limited, nonrenewable and you cannot buy more of it. *write unnecessarily long article that could just be shortened to "learn design patterns instead of framework-specific code*
Really cool. Thank you!
Maybe I'm missing it, but Vue and React seem to have a way to change the Rating, but Angular doesn't. I noticed because it seemed like the React component was a lot heavier than the Angular one.
I like it. The syntax feels like a natural extension of what already exists.
Except learning frameworks is going to get you a phone screen, which is going to get you an in-person, which is going to get you a job. It doesn't even have to be the same framework. You could be applying for a position that lists Vue, but you have React experience and someone else on the potential team has also worked in Vue and says "yeah, the transition will not be that difficult."
Why is your title in third person? It sounds stupid.
I once worked with someone who hadn't quite got over the change curve from Pascal to C, so he had a header file full of things like #define BEGIN { #define END } Unfortunately he was the boss, so this was what we were all expected to use.
Hey, I’m always open to being proven wrong, but I think the current trends in the programming world are all pointing towards less use of OOP, not more. Functional languages like Elm are the new hotness, and even non-functional languages are starting eschew OOP concepts, or omit them entirely like Rust. There are plenty of non-junior people, myself included, who think that OOP concepts make code more error-prone and harder to debug. That data and logic should be kept separate, not complected together like in OP’s relatively simple example above. I highly recommend [this talk by Rick Hickey](https://youtu.be/34_L7t7fD_U) (creator of Clojure). It was what convinced me that OOP was an anti-pattern we could all do with a lot less of. 
I completely agree that you need to learn fundamentals first, but frameworks are where it's at. I'm not talking about little experimental ones, I mean the big boys like React and Vue. I started to learn React before I completely understood Javascript, and it made it a lot harder on me. I eventually spent some time playing with vanilla JS and looking through MDN docs. Now I have no problem facing a new challenge. CSS on the other hand... Full Stack Engineering is hard, and I think front end is the hardest. 
Learn programming skills &gt; Learn JavaScript &gt; Learn Frameworks Don't only learn how to use frameworks. Don't skip out on frameworks just because it might become obsolete some day.
Ps: not using default exports and naming your files camelcased may help with vs code auto imports and refactors (ex: move function to file)
The problem is JS's flavor of OOP is bad. Not that OOP is bad in general. OOP in TypeScript is awesome. OOP in PHP is awesome. OOP in JS is not. I most definitely prefer functional programming in vanilla JS. But that said, FP vs OOP is a false dichotomy. I regularly use influences from both when I program, in just about any language.
If you use “closure classes” (lexical scope) you may avoid this kind of issue. Unfortunately it also has its downsides, like performance.
You created a hidden field and then what? Did you post the form to the server so it could retrieve the data?
thanks :D
Nope, you're not a bad dev for hating this. This is a MAJOR footgun with JS and it's absolutely silly that you have to manually re-bind back to the object you want the `this` context to work with. 99% of the time, you will do this: `foo.doSomething.bind(foo)` not `foo.doSomething.bind(someOtherThis)` Since JavaScript already has a strong closure mechanism that remembers the environment a method was created in, I find it rather silly that a method cannot remember the object it was attached to, especially since it's that object that you most conventionally think of `this` referring to. I can count on one hand the number of times I wrote code in such a way that I used `this` to refer to some context rather than just using an argument. IMO, dynamically binding different contexts to `this` leads to some really hard to grok code anyway. *"WTF IS `THIS` REFERRING TO HERE AND WHERE IS THIS CONTEXT BEING SET!?"* is cognitive overhead that I just don't fucking need in my life. 
True
When you work on long-running large projects in corporate environment, it's inevitable that after a while some kind of framework emerges. Might as well use a widely used industry-standard framework from the start. Later developers will thank you.
I've set it up as explained in Jest doc. I'm not importing `regenerator-runtime` anywhere. I've tried to do so in `jest.config.js` with `require('regenerator-runtime/runtime')` but it still fails. It takes more time to configure the test runner than writing all the tests 😂
Eh, the problem with OOP is not one language’s syntax or another’s. The problem is in tightly coupling data and logic in frequently mutated objects. While you can certainly borrow some ideas from both approaches, but the core concepts of FP and fundamentally incompatible with OOP. You cannot practice OOP in purely functional languages like Elm, Haskell, or Clojure. 
That's not what I'm confused aobut, I already understand all of this. I am not confused about how to use the slice method itself. It is just that codecademy and MDN documentation of where the slice the last item is different. In the MDN documentation in my post of animals, they had `console.log(animals.slice(2, 4))` index of 4 is the 5th item, elephant, but b/c like their description says "end not included" it cuts before index 4, and so we get duck, index 3/element 4, in the new array. &amp;#x200B; In codecedamy, if I am following per MDN documentation, it should have been (1,5). B/c the last index 5 is past and is not included then it cuts before that and we have index 4 or element 5 'brown rice' as our last item. 
Check out React... leave direct DOM manipulation behind. There is a more sane way to build UIs. Prototypical OOP is JS is bit weird... it kind of never clicked for anyone at all :) So they came out with 'class' syntax that just aims to make all that syntax 'prettier', but dont think for a minute you are doing OOP like in JAVA or elsewhere. Just use it for it's encapsulation facilities, but do not try and get into inheritance and such if you help it. KISS with OOP is JS is my mantra. Embrace the 'functional' world. Learn to use your map, filter, reduce, etc and your life will be nicer.
but i can earn extra 30k/year if i learn react. how?
&gt; The problem is in tightly coupling data and logic in frequently mutated objects That's not a problem, that's an advantage. It's only a problem when your classes are describing the wrong data and logic cohesion. Objects should strive for immutability whenever possible, and when mutation is required, they should expose *only* the behavior needed to properly encapsulate the business rules behind that mutation. No invalid operation should be allowed. Their underlying data should not be directly mutable. The object itself should govern its mutation rules. I'll grant you that doing proper OO design is not exactly easy, but neither is doing Haskell-level FP design and understanding category theory, and various FP patterns like monads, and currying. You can just as easily shoot yourself in the foot with bad FP abstractions as you can bad OO abstractions.
Even this advice is outdated. For JS, React Angular and Vue wont be replaced by anything for at least a decade. We're past browser wars. Even Microsoft gave up completely not long ago.
Thank you. I'll check. 
Framework first is the wrong way to go. You can't do well in React/Angular/Vue without knowing the fundamentals beneath them. How does JavaScript work? How does the DOM work? What does the cascade in Cascading Stylesheets mean? How does "this" change it's context and when? (Super important for state in React as well as event handlers in general) And so on and so forth. I always make sure to do a project now and then without libraries to refresh on the fundamentals.
You like OOP. I get it. Many people disagree with your approach. Even without going full FP, modern languages are deemphasizing classes and inheritance in favor of interfaces/protocols and composition. I really can’t recommend that Hickey talk highly enough. 
99% of the time people use inheritance incorrectly. I certainly don't use it unless I'm following the template method pattern and creating specialized implementations of an abstract parent to achieve some polymorphic behavior. I NEVER use inheritance to share behavior. I use composition for that - a concept that is agnostic to paradigm and that each paradigm offers its own mechanisms for achieving.
So like chrome Dev tools?
Narc
It should just be "Learn the basics befor learning frameworks"
¯\\\_(ツ)_/¯, we don’t disagree on inheritance. 
Will do. That is always what tripped me up. Like I always understood okay this is an object called teacher that has these attributes that can change like age and name. Then past that stuff just got more and more murky. 
Good thing we don't work together.
Looks more like a Node REPL gui. Supporting NPMs being the big difference between this and a browser console.
Yes, similar but you can do a few more things with this. Plus it supports TypeScript and Babel.
Leaving this here in case anyone stumbles on this. &amp;nbsp; After trying a few build systems, gulp is by far the best option, IMO. The docs are amazing and very easy to follow. &amp;nbsp; Packages (Installed as dev dependencies) * Gulp - https://www.npmjs.com/package/gulp * gulp-strip-code - https://www.npmjs.com/package/gulp-strip-code &amp;nbsp; After you have created your ***gulpfile.js***, you'll need to create a task. &gt; gulpfile.js const gulp = require('gulp'); const stripCode = require('gulp-strip-code'); gulp.task('firefox', function () { return gulp.src(['./test/*.js']) .pipe(stripCode({ start_comment: "is-chrome", end_comment: "end-is-chrome" })) .pipe(gulp.dest('dist/test/js')); }); &amp;nbsp; Run ***npx gulp firefox*** to start the task. &amp;nbsp; &gt; test/foo.js function foo() { /* is-chrome */ console.log("Chrome"); /* end-is-chrome */ /* is-firefox */ console.log("Firefox"); /* end-is-firefox */ } &amp;nbsp; &gt; Output: dist/test/foo.js function foo() { /* is-firefox */ console.log("Firefox"); /* end-is-firefox */ } &amp;nbsp; The output can also be minified using other gulp plugins. &amp;nbsp; Gulp allows you to watch a directory and run a task if a file changes.
Hey! When a guest joins, they are actually supposed to automatically follow the host. That was a change we made a while back based on customer feedback. Are you not seeing that behavior? If not, could you confirm whether you’re using VS or VS Code, and we’ll try to repro. One other thing to note: if you’re following someone, and you explicitly open another file, then the follow is disabled, under the assumption that you’re moving on to do something independent. Is it possible that this is what you’re experiencing? Otherwise, the guest should be following the host, any scrolls they do, and any file navigations they make. I’d love to make sure we understand more about the issue you ran into, since following is a critical experience that we need to make sure works well 👍 Thanns again for reporting this!
I clicked into this article thinking "I bet this is going to be another lecture on learning the basics first". I was totally right. How many of these same, rehashed articles are out there right now? Of course someone should learn the basics first, but are you suggesting junior devs build web apps from scratch instead of learning the skills needed to actually do this professionally? I'd argue the opposite and say that devs should pick up and learn as many things as they can until they're comfortable enough developing without a framework. Starting out, I can't tell you how many wasted hours I spent trying to write my own ORM in various different languages. Or how many times I said "screw that blogging framework, I'm going to build my own". All because I wasn't disciplined enough to sit down, and really learn how these systems worked. 
I said mostly. I skim through a couple times a week, to glean the occasional good piece. It's just an uncurated aggregator. What yout have to sift through is the neophile exuberance in trending technologies that do not solve any real problem, except to those who couldn't do the basic thing it does in the first place.
I said mostly. I skim through a couple times a week, to glean the occasional good piece. It's just an uncurated aggregator. What yout have to sift through is the neophile exuberance in trending technologies that do not solve any real problem, except to those who couldn't do the basic thing it does in the first place.
The problem is that bootcamps and the likes just shove react/whatever down their student's throat and then throw them out to the wild. These people don't actually know how to code, they know how to regurgitate what they learned on that ToDo app they made in the bootcamp.
A method is a function though 
This is the most vanilla, non-controversial, over-espoused opinion in the community. We get it, people need to know the basics and the language before they can be good developers. But the truth is, frameworks make a good portion of writing applications really easy. They allow you to see real results and make useful tools f*ast.* It's rewarding and excites new developers, inspiring them to continue and learn more about the language as they go. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
The browser is a platform with a standard API to program against. Frameworks are ways of programming within that API through standard conventions. If you are rolling your own JavaScript without the use of an open source framework, there’s a good chance patterns will emerge within your code and lead to an ad hoc framework, else your code will become spaghetti and hard to maintain. What you’re saying is equivalent to saying OpenGL is a framework and therefore why would you use something on top of it. Layers of abstraction assist in both dev time, testing, and security.
Interesting! 
Right, and use it mainly for that at first. One thing to note is that OOPS is different in *every* programming language. So, although there are some broad concepts common (encapsulation being the #1 benefit), the 'polymorphism' stuff is *always* different between languages, JS being in its own 'class-less' camp... until they added class syntax to calm everyone down. JS OOP is tricky and it takes time and you gotta review. If I would suggest the ONE tutorial about how JS objects *really* work, watch this lesson from Kyle https://frontendmasters.com/courses/javascript-foundations/ That is a pay course, but there are other free things about this topic from him. Honestly, the topic is harder than most people think. There are lots of gotchas.
I felt the same way earlier in my career - but now that I've been doing this for quite a while, I've come to feel that OOP isn't necessarily \*worse\* than functional programming for \*every\* task - they're two separate tools that are good at certain jobs, and not as good at others. And I think that so many of the problems we face in web and business programming are a better fit for functional programming, because they tend to be the types of problems where you take some data, transform it in some way, and then display the result. And as a result, I've found that writing these kinds of apps in Clojure or Ocaml or F# or Haskell can be immensely satisfying. Take the data, pipe ir though a series of functions to transform it, and then return or render the result. In contrast, I've found that OOP is a better fit for games specifically, and simulation in general - where I'm trying to simulate a physical world, with simulated physical objects existing in the world, and moving around in the world. That's not to say that you can program games in a purely functional language - you absolutely can, and I've tried to do it, but it just hasn't \*felt\* as natural as it does in an OOP language. &amp;#x200B; I get that it is subjective. Conceptually, I know that for every frame I can just treat the entire world as my input data, run it through function to transform it, and then render the result. I've done it, and just haven't been satisfied with the way the whole system has fit together. I either ended up spreading the data and code around in a way that felt a lot messier, or using closures as poor man's objects. Actually, in Haskell splitting things into modules and using typeclasses was actually pretty nice, but I'm not quite convinced that I didn't just re-invent my own half-assed OOP system when I did that. &amp;#x200B; It might just be a matter of familiarity, though. I don't get to write games professionally, so I don't get to spend all that much time doing it. And so perhaps I just haven't been able to find a good functional approach to game dev because I spend comparatively little time on it. 
It doesn't feel like there's middle ground. I can develop something pretty awesome but when it comes to new frameworks and environments (cough webpack) it feels like I was born yesterday and am also stupid
There is. Use create react app and you can do React without knowing anything about web pack. 
Yeah, games is always the use case that made the most sense to me for OOP. For what it’s worth though, my brother is a game dev and he says he mostly uses function composition ¯\\\_(ツ)_/¯. Your mileage will definitely vary, and OOP has the advantage of being pretty intuitive. I do think OP’s example though is a textbook case of how OOP can go wrong. 
Hi /u/ZhWei99, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I have no problem with pay courses so I will definitely check it out! Thanks!
This biggest downside about React, for me, is that it makes too much sense. I'm pretty much devving in React every single day, and I'm paranoid that I'm going to forget how to manually update elements, add even listeners, etc... 
Don't let the door hit your ass on the way out.
I already did
I don't understand theses advice.. They seems just nihilistic and un-oriented. Learn fundamentals... Sounds good but what is a new dev supposed to do? The field is huge and javascript especially is non opinionated and can take so many forms. Don't leave people in the wild telling them not what to do. If you learn React you learn a way of building UI. Make up your opinion about what you like within it and what you don't. Learn another one and compare the two. Stop learning framework is a terrible advice to anyone. Theses frameworks are solution to bigger problems one will face sooner or later and most of us won't re-invent the wheel. Most of us should not re-invent the wheel. Its perfectly alright to be a framework user and go with the flow. This is elitist non-sense to me. 
At some point, curated became "all I can find". 
Haha, shit. They do say that just because you're paranoid, it doesn't mean you're wrong. 
I prefer(ed) `_this = this`
For Mac only?
I always end up wanting to do something that veers off the beaten path. Since create react app and webpack are sort of like a magic black box to me I don't really know who to proceed when that happens
Swapping Spaghetti-code for Lasagna-code... all the layers and abstractions to know about, versus the tangled mess. Take your pick!!
I use symbols all the time. I know they're handy to prevent naming collisions, but it had not occurred to me that I could harmlessly modify existing types with symbols until I read this article. I don't know about your proposed traits syntax, but you definitely made say outloud "well of course. no shit." Well done!
I'm not sure what you mean or how much you know but if you want to be different you can look into other JS frameworks. But I would say we pack is an advanced topic and it's okay to go JS to React to Webpack in terms of learning. 
Well I don't think your going to forget completely but it makes it more difficult to build something in vanilla js even if its a simple S.P.A. It just feels so different because you have to grab elements etc. There was a video I saw on here where a guy created a virtual dom with vanilla js which was pretty interesting. Found it https://www.youtube.com/watch?v=85gJMUEcnkc&amp;index=3&amp;list=LLwRig6cM11wAXLfOVIR5YfA&amp;t=38s 
Are you trying to reinvent bash commands? Cause that's how you get bash commands?
&gt;Keeping up to date with Angular, React, Vue, Riot, Ember, Knockout is fun. Wut?
Currently yes, but if there’s interest I’ll release Windows and Linux versions too
How do you import npm dependencies? Does it only support globally installed dependency?
Interest!
Saved this post to revisit at a later time, hopefully people will see my question... In this example, what is the "closure"? Like if this was on a whiteboard, and an interviewer asked, "Tell us where the closure is" or "which part of this is a/the closure?" What would the correct answer be? I understand why calling `fn();` returns what it does, I understand the scope, I understand that the function `inner()` is what's being returned, but I have no idea what "closure" refers to in this context.
Yes! All my bash aliases are 1-3 chars abbrivations. I also made a nice aliases builder that takes a name and my last run command and sticks a new alias in my bash_aliases file. It's pretty sweet.
I'll just say: this advice is basically what kept me out for coding for too long. I kept hearing variations of "learn the fundamentals" and "don't just jump into complicated libraries because you'll make a message." And every time I tried to learn the basics, I made very clean simple things but nothing that seemed "real" and I couldn't really see how to get over the hump of everything looking and feeling like a student demo. I took a boot camp, and being shoved into React was the best thing to happen to me. I wrote sloppy, bad code. But I wound up with webapps that had a general look and feel of real modern apps and I could SEE the blueprint of the many steps needed for real professional code.
&gt; That data and logic should be kept separate, not complected together like in OP’s relatively simple example above. How would you structure OP's example instead?
Thanks for checking it out! I'll let the team know to take a look.
Formatting is a bit hard to read. It seems like you are using .catch() on an async/await Promise. You will need to wrap the await call around a try/catch block instead. 
In the ‘Action’ menu there’s an option called ‘Set working directory’ point it to any project with npm modules and you’ll be able to import them.
There is always interest
you are correct. So i can use catch() on a promise that will behave the way i wish but on asyn / await I need to try / catch ? thanks for your help
It refers to the concept whereby the inner function retains references to variables from its enclosing function.
It just depends on how you want to resolve your promise. My understanding is async/await needs a try/catch block. The other way to resolve a promise is to chain .then(function(){}).catch(function(){}) but you don’t need async/await for then/catch
You don't have to, but it helps in your situation. It sounds like you want the catch to return out of `getMonitor`, correct? Well using the `catch()` callback, you're only exiting `(err) =&gt; { ... }`, not `getMonitor`. If you use `try..catch` instead, when you return, you'll return out of `getMonitor` since you're still in the same function scope then (`getMonitor`'s) and not some callback.
It just depends on how you want to resolve your promise. Async/Await with a try/catch block or chaining then().catch() methods at the end of a promise. If you use then().catch() you don’t need async/await
I totally agree. A few years ago, I built an Angular app to throw together quick estimates for my day job. It had been years since I’d done anything with JavaScript, and I’d ever built anything like a web app. It wasn’t easy, and Angular (some 1.x version) did a lot under the hood that didn’t really make sense to me. But I followed tutorials, read docs, and ended up making something that I still use nearly every single day. Making something that was actually useful to me was invaluable to my growth as a wannabe developer, even though not a lot of what I learned with that particular project really helped me become better at JavaScript. But having the knowledge that “OK, even as a novice I can actually make some really useful stuff with code” was a major turning point for me. I started coding all kinds of utilities to help me out in my daily life. I started really diving into JavaScript. I started to digest other people’s code with relative ease. Concepts that seemed insurmountable at first glance slowly started to click. Code I’d written a few months prior started to look like absolute garbage, and I’d rewrite from scratch in a matter of hours something that once took me weeks to piece together. And before I knew it, I was writing tens of thousands of lines of code per year. The best way to get started with programming is to start building stuff today. What you start with isn’t all that important. What matters is that you’re putting in the practice and studying. It’s ok to work with a framework, even as a beginner. The fundamentals are crucial to excellence, but excellence comes with time and hard work. You have to start somewhere, and starting with a framework can enable you to accomplish some things that would be practically impossible to pull off at a beginner’s level in vanilla JS.
 const logText = ({ text }) =&gt; console.log(text); const foo = { text: ‘hello world’ }; logText(foo); Or maybe: const getPropLogger = propName =&gt; obj =&gt; console.log(obj[propName]); const logText = getPropLogger(‘text’); const getFoo = () =&gt; ({ text: ‘hello world’ }); const foo = getFoo(); logText(foo); Or even just: console.log(‘hello world’); The problem is, OP’s code is designed to demonstrate an issue he has with JS syntax, not to actually solve a problem. Without knowing the purpose of the code I can’t really tell you how I would implement it myself. 
Love these vanilla microlibraries coming out of the woodwork nowadays.
Just like 99,99% of the articles we've seen here lately, title should actually be : &gt; Use your common sense
For the attribute, you simply set it to null, since it is a single callback and not a queue.
A non-exhaustive list of reasons this would be a bad idea in the workplace: 1) These shenanigans will make your code illegible to other developers 1A) If you're only used to your own special syntax, it'll be harder for you to sight read other people's code. 2) What if you decide you want to use 'p' for something else? Why reserve such a common letter (or word, in the case of 'print')? 3) Most text editors will allow you to autocomplete to console.log in a keystroke or two anyway Never assume that you're going to be the only person working with or reading your code, even in "personal projects." You never know when you're going to want to reuse that code, get help, or how projects might expand. Also there's no reason to accustom yourself to bad practices or syntax you'll never encounter in the workplace.
Java is a snail in many ways
Assuming that you’ve already set up a variable called `button` that refers to that input element, you can simply do button.onmousedown = null; and button.onclick = null; to remove those listeners.
 // add addEventListener("click", onClick); // remove removeEventListener("click", onClick); // add button.onclick = onClick; // remove button.onclick = null; // add &lt;input type="button" onclick="onClick()"&gt; // or button.setAttribute('onclick', 'onClick()') // remove button.removeAttribute('onclick') // or button.onclick = null; Note that attribute handlers are used to define the properties so can also be removed by setting to `null`. But this also means you can't have to separate handlers through both the attribute and the callback; if you have an onclick attribute _and_ set the `onclick` callback, the callback will override the attribute. Also because the callback has precedence, you can't remove the callback with `removeAttribute`.
I miss you SO MUCH from the flash days...Do you miss the golden days of flash ? Thank you by the way. Thank you so much for all that you have taught me.
Clean Code ( video series on pluralsight ) and Refactoring 2nd edition are crucial to learning this right balance.
That is, if you're a consequential learner. I, and probably many other people, are totally fine going over higher concepts, getting deeper in parts, going back to higher things, then back to lower missing parts until the whole puzzle makes sense. Seriously, it really breaks the whole gratification-oriented process if you spend a long time going through extensive basics before getting something built. 
You're welcome :D And I do miss those days. At the same time, I'm also kind of relieved that they're behind us. I'm not sure if it's for the best. We're starting to move to a Chromium-dominated world now, and that's potentially dangerous, but we'll see how things turn out. 
That's fine and dandy until you work with a team. Then you adhere to a standard because you're not insane. 
Flash was eventually killed because it could too powerful...too dangerous...Do you think Javascript will one day be vilified too ? And before long everyone wants to kill off JavaScript because the new Tag line of the media will be JS is the problem and they will promote some other shit...until that new shit become powerful...and dangerous again. 
But we do know some purposes of OOP. Let's take inheritance for example. If someone wanted to extend OP's code, it's easy. NewClass extends Foo. How would they extend yours? Maybe they want to be able to setText. But they want to log text too, so your functions will all be passed in: someelsesCode(getFoo, logText) Wherein they can implement setText themselves. Is this how you would go about sharing your related functions so that others could extend upon that functionality? Or do you have a better solution?
I learned the basics with a framework. Got to build some nice things too while doing it. Do whats most fun for you.
This is nonsense.
Omg that is amazing
&gt; JavaScript’s automatic semicolon insertion is an error correction mechanism, designed to allow malformed code to still run That's a golden definition for automatic semi-colon insertion. I just now had to yet again correct an issue caused by this feature. A string concatenation operation was broken up into multiple lines -- for improved human readability -- and the last **plus sign** on the end of the second-to-last line had been accidentally omitted. This went unnoticed because the javascript engine assumed a semi-colon belonged where a plus should have been, and the orphaned line of string raised no errors because declaring a do-nothing string without assigning it to a variable or passing it to a function is syntactically acceptable (and that last bit of string being omitted caused no *critical* issues). For example, some_var = 'string group 1' 'string group 2'; which should have been some_var = 'string group 1' + 'string group 2'; This malfunction wasn't noticed and *properly* corrected until somebody ran that code in a *minified* environment, where the code became some_var = 'string group 1''string group 2'; The crap-for-brains who go around boasting how they *require* their teams to omit semi-colons would jump in at this point and say, "Well, the problem lies with your minfier since it didn't automatically insert a semi-colon." By that fallacious reasoning, the minified code would have ended up as some_var = 'string group 1';'string group 2'; which, while not syntactically incorrect, is *still* erroneously formed code. Without an actual error reported by the javascript engine, who knows how long this malformed code would have remained before being discovered?
You can make text searches by using this query: `{ $text: { $search: "x" } }` Read more here [https://docs.mongodb.com/manual/text-search/](https://docs.mongodb.com/manual/text-search/)
There’s no well-defined meaning to this term. It’s used when someone wants to exclude something from some discussion for whatever reason.
I always understood as it being "pure" JS. Like in "just the language itself". [http://vanilla-js.com/](http://vanilla-js.com/)
well, not exactly. You still can get questions about basic JavaScript stuff in those interviews. You gotta know all about Scope, Context, Hoisting, Bubbling, Events, Inheritance, etc, etc,
It depends on your background. To me who's been using JS for decades, it measn no external dependencies other than libraries you have written yourse. But in this sub, full of youngesters, I have been downvoted to oblivion for suggesting that jQuery is NOT vanilla-js. I guess to them jQuery is sooo old it sounds like vanilla-js. Bit doesn't.
Nothing. The parent said strings are mutable. That isn’t correct. I’m assuming some people are here to learn, so I was just correcting that one piece of misinformation.
Saying this as newbie, but I'm not going to say I have the basics down until I'm done with Kyle Simpson's corpus and actually understand what he wrote.
This. And i'd even go further and ask, why do beginners need to know the dom/web api, and for what exactly. Except for css, pwa apis and some html primitives for the most part there is no "web" any longer. The same component that runs on the web can drive a refrigerator, with its very own implementation specific backend. With that in mind i think is far more valuable to learn what a framework is and how it works (functional programming, etc.), than to learn api like node.insertBefore or all the pesky details on how to read/write in sequence, none of this stuff is relevant any longer. 
I would go even further and say to be realllly wary of learning any framework. Let's keep it real, the main goal of any library, framework or tool should be to save our time, to increase productivity and quality of end result. Time and time again I see newbies making the same mistake: learning a new framework because it's new and supported by company X only to then find out the project is now delayed because of XPTO specificity of the framework. They have no idea how to do it 'by hand' and it's a pain to go outside the framework. At the end of the day, the increased productivity is near zero or negative comparing to using some 'old' framework or something out of fashion like jQuery. In terms of productivity I also find lines of code as a really poor measure to evaluate anything: let's be real, programmers aren't stopped because they need to type more or less, at least if they use a good IDE that autocompletes most boilerplate for them. What we lose time is to think things through, distractions around us and FB/Instagram/gaming :) A framework that promises increased productivity because 'look' you only type 1 line instead of 3 is just plainly disregarded on my playbook :) Frameworks are good and needed for some kind of projects. The problem is that you need to really be around the block a lot to truly make a good choice on when to use X or Y. &amp;nbsp; And with the proliferation of google-programmers learning the fundamentals is more and more needed. Think about a building: learning how to calculate the foundations and all that stuff is hard, choosing the tiles is just a matter of looking through catalogs and learning what they have. &amp;nbsp; I also follow what I preach: I'll hire people that don't know the frameworks we use but that have experience in others or in good software development practices. I never knew someone good that couldn't pick up a framework and work with it quickly, it's much harder to teach good practices, good communication skills and good overall 'inteligence'. 
The problem is a little worse than the author makes out... you can't ignore ephemeral technology fads and focus on *the fundamentals* we don't really know what the fundamentals are. There are fads in things like programming methodologies also (one decade it's OOP, another its functional), you can bone up on "design patterns" and then only belatedly realize that they were pretty specific to C++, and the language you need to use now has half of them built-in, and the problem space you're working in now has a bunch of new "patterns" that apply to it.... 
It's silly to learn any other way honestly. Learn the basics until you get 'bored', build something cool while learning way more. Find out you missed a bunch of stuff, and since you're not bored anymore continue learning, then building, then learning.
Thank you, very helpful
this article gave me stomach ache. typical "theoretical/seasoned programmer wants to appear edgy" blabla. of course concepts are important to understand but you'll learn those by working with frameworks and software that make good use of these patterns and concepts.
ok, makes a lot more sense now. Thanks for your time!
Did you just try to suggest jQuery is not vanilla _again_? Oh boy, you know what this means for your karma, old man.
To me, something written in Vanilla JS is using only whatever is shipped in the JS runtime that you’re using, with no external dependencies. In the browser that would include all the Web APIs that the browser ships with (e.g DOM, service workers, etc). In node.js it would include all the modules that the version you’re using ships with (e.g. path, crypto, stream, etc). 
Use what makes you happy, but be fair with its limitations. Disadvantages such as performance are not vague - they are very real and unavoidable in many cases, due to the nature of the language.
Linux pls
Please tell me you are trolling...
 use traits * from require('lodash-traits'); // returning an object's values (numbers), sorted and without duplicates return object // { a:7, b:12, c:4, d:7, e:1 } .*values() // [7, 12, 4, 7, 1] This confuses me. What if I have two libraries with traits: use traits * from require('lodash-traits'); use traits2 * from require('someother-traits'); when I do: return object // { a:7, b:12, c:4, d:7, e:1 } .*values() // [7, 12, 4, 7, 1] will my `*values` come from `traits` or `traits2`?
[How many times do we have to teach you this lesson old man?!](https://www.youtube.com/watch?v=skCQISEUVXM)
You aren't seeing anything printed because you're using "return" instead of "console.log" on those strings. And the function doesn't work properly related to how i and shift interact.
No.
Could you explain more about the function? I'm not sure what you mean
 var katzDeliLine = ["Jane", "Harry", "Bob", "Dana" , "Ben"]; var linelength = katzDeliLine.length; for (var i = 0; i &lt; linelength; i++) { var k = i + 1 var output = "Welcome, " + katzDeliLine\[i\] + ". You are number " + k + " in line." console.log(output); }; function nowServing() { if (linelength === 0) { return "There is no one left to be served!" } else if (linelength != 0) { for (i = 0; i &lt; linelength; i++) { katzDeliLine.shift() return "Currently serving " + katzDeliLine[i] +"." } }; }; nowServing(); &amp;#x200B;
I think you should try to figure it out, and maybe ask a more specific question if you can't. Having the console.log working should help.
At the end of the day frameworks helps save time and time is a costly resource for any organization. Once we have a firm grasp of fundamentals it's natural to make use of frameworks for efficiency and time-saving.
jQuery, objectively, is not vanilla. I don't know how that can even be a matter of opinion. The definition of something being "vanilla" is: &gt;having no special or extra features; ordinary or standard So I agree with you. Ask them to find jQuery in the spec for you next time someone suggests jQuery is vanilla.
VanillaJS means that it's written in pure EcmaScript. NO external libraries to "enhance" the code, because that just means bloat. Yes, i'm talking about jQuery. And other syntax-sugary-libraries, like TypeScript is also another abstraction from vanillajs. Downvote me however you'd like. But if you are using a library to "enhance" your code and call it vanilla, think again.
"Don't learn _all_ frameworks." It shouldn't take more than a day of your time to evaluate a framework to see if it is relevant to your upcoming project. If you don't need it for any projects, don't learn it. Pretty simple.
I love the young people.
I can't figure it out that's why I'm asking you lol.
Don't tell me what to do...I'm gonna to do what's not fun for me.
That doesn't get as many clicks
&gt; Learning them should take most of your study-time Or not. Everyone's situation is different. If all you want to know is react, you could probably live in that world for the next decade if you wanted, make plenty of money and never touch anything else. Who cares?
This is how I would handle it a for loop would definitely work here but why not put some of those awesome Array methods to work? Here we can use [Array.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach). For the returned valued (console logged for sake of the example) we can use an awesome new featured called [Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) &amp;#x200B; `const katzDeliLine = ["Jane", "Harry", "Bob", "Dana" , "Ben"];` `const emptyLine = []` &amp;#x200B; `const handleLine = (line) =&gt; {` `//handle empty line` `if(!line.length){` `console.log(\`There is no one left to be served!\`)` `}` `//add 1 because unline arrays, lines start at 1` `line.forEach((person, index)=&gt; {` `console.log(\`Welcome, ${person}. You are number ${index +1} in line\`)` `});` `}` &amp;#x200B; `handleLine(katzDeliLine)`
&gt; you gotta know all about Scope, Context, Hoisting, Bubbling, Events, Inheritance, etc, etc, So you're saying there is a small chance you need to look up common interview question and learn to recite common answers?
Exactly.
so much yes on this one.
Never
But where can you use vanilla JS? In the browser, the DOM API is added. In Node, the Node API. Seems just about everywhere you go, there's something more than standard ECMAScript-spec'd JS. ...ergo, jQuery is vanilla! Get off our lawns, old men!
Hi man, first of all sorry about delayed answer, said that, thank you for your great input. &amp;#x200B; it's perfectly explained, and the example was great and is understandable even by noob programmers like me. &amp;#x200B; My goal is to be a enginneer some day, the thing is i dont like academic lifestyle, so i took the middle road between learning a low lvl languages and key concepts that you learn in university, and learning a framework(which seems to be the common nowadays). So i took the desition to learn the very fundamentals of javascript, and have all the most difficult concepts clear before jumping onto a framework. So some day i want to learn the concepts you described in your post to be developer of quality. &amp;#x200B; Thanks again!
If exactly one of the trait set you're using has a symbol named `values`, that one is used. Otherwise an error is thrown We're considering [adding a way to explicitely pick traits to use](https://straits.github.io/syntax/#use-specific-traits), so you'll be able to remove any ambiguity by doing: use traits values, keys, entries from require('lodash-traits'); use traits2 map, * from require('someother-traits');
Thank you, it definitely made the code function much more than before, however, it seems that it is not quite effective yet as it doesn't successfully "crawl" the pages and thus generate an output. I'm going to look into it a little more to find some more specific questions to ask, however, I really do appreciate your contribution. In the meantime, I hope you have a wonderful holiday season!
This seems like one of those optimizations that is suited for people who are just into that type of thing &amp;#x200B; To me, having 10 million items in an array is more likely the thing to be concerned about. I get the argument that a for loop is about 3 times as fast (for this example) but when that 300% slower option is native, easier to read, doesn't require me to maintain any extra code, and in the end only totals up to just over 1 second...I'm sorry but I just can't be bothered.
YES! Why does no one ever do this? If you can't explain what a closure is I know you did not prepare for the interview. So I have to assume that you probably don't study that hard on your own time. so, you're out. I do tend to ask the questions in different ways though, so you have to at least have a super simple basic understanding of what you read.
My company built our app with React Native (a JavaScript-based framework, for those unfamiliar) and launched on the App Store this week. It's an evidence-based personal trainer for your wellbeing and mental health. I'd love for you guys to check it out and share any feedback. We're constantly working to improve and community requests are prioritized. App Store: Enlighten—Wellbeing Simplified [https://itunes.apple.com/us/app/enlighten-wellbeing-simplified/id1356009866?mt=8](https://itunes.apple.com/us/app/enlighten-wellbeing-simplified/id1356009866?mt=8) Web: [http://www.enlightenlabs.com/](http://www.enlightenlabs.com/)
https://www.thecynicslantern.net/p/arbitrait
Stop with the click-bait titles
Same
unfortunate naming clash https://github.com/dixonandmoe/rellax
 const setText = (obj, text) =&gt; ({ ...obj, text }); Or maybe: const getPropSetter = propName =&gt; (obj, val) =&gt; ({ ...obj, [propName]: val }); const setText = getPropSetter(‘text’); Or even just: const updatedFoo = { ...foo, text: ‘new text’ }; Just because you aren’t familiar with the patterns for extending the functional code doesn’t mean it’s hard to do. And for the record inheritance is probably the worst feature of OOP. Leads to a lot of complex, difficult to debug code. Even if you stick with classes, ditch inheritance and switch to composition for most if not all use cases. 
it's prototype technically
Right... much better title. Follow up question: how do we jam in the click-bait?
Without async/await: somePromiseFunction() .then(res =&gt; { /* do something with res */ }) .catch(err =&gt; { /* handle error */ } With async/await: try { const res = await somePromiseFunction() /* do something with res */ } catch (err) { /* handle error */ } In your case, you'll probably want to put most of the logic of the function inside the `try` and handle errors in `catch`. i.e., if the query blows up and you go into the catch, `statusSensorFetch` will probably be `undefined` and peeking at `undefined.length` is a TypeError.
Nobody's talking about the APIs available *to* javascript - those are part of the runtime, not the javascript codebase. We're talking about the libraries (or absence thereof) included *inside* the javascript codebase.
That feels way too "magical" for me. This isn't Ruby on Rails ;)
I guarantee you this author learned a lot about JS programming from frameworks, only to go on and complain that others should follow a different path.
hahaha
Rallax != Rellax
Hi /u/WebDevSHORTS, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Should be titled "not learning frameworks, sure fire way to not a job."
The more you know, the less you know
If you have the fancy pants editor, just use the code block or inline code option. Otherwise, if using markdown, I believe indenting 4 spaces will give you a code block. &amp;#x200B; console.log(\`There is no one left to be served!\`) 
Holy fuck you're a whiney little bitch. That's all you do is go from thread to thread bitching. "I'm a self taught programer" "I fucking hate working within systems" Fucking dumbass.
&gt; If you can't explain what a closure is I know you did not prepare for the interview I'd rather use this as signal that the person isn't familiar enough with JavaScript to know what they are or why they are important.
Also that demo works on mobile
Yeah, you tend to also learn some decent patterns by looking at framework code. Just sayin'
I think it's for attention to make you click to be honest
`values` from lodash only works on objects and arrays. It doesn't work on other collections (e.g. `Set`): &gt; _.values({a:1, b:'x'}) [1, "x"] // ok &gt; _.values([1, 'y', 7]) [1, "y", 7] // ok &gt; _.values( new Set([2, 'z']) ) [] // oh :( How would you make it work with `Set` (and other types) as well? There are several possible solutions. I believe that the only correct ones are using `symbol` properties or a `WeakSet` - all the others I know of seem to have big problems.
Why not both?
That's pretty much how the development echo system works now. We're basically experts at utilizing other people's work and gluing it together with dozens of other things to make a product. 
Lol, indeed. It's one small part of the interview for me anyway. I like to give someone a simple project I created and have them add a couple features and submit a PR on their own time. I do a quick review and they make any requested changes. This tells me just about anything I need to know and it's actually what they will be doing for their job. I don't really care if they understand a closure so much that they can learn from a review (I've given up on hiring senior devs though) 
 array.sort((a,b)=&gt; a.a - b.a).filter(({b},index,arr)=&gt; index ? b !== arr[index-1].b : true) I am just guessing that you want to eliminate dupe objects
#deleteframeworks
A JavaScript scratchpad that isn't cross platform is kinda ironic haha 
Thanks in advance!
This is just such a gray area though and something like jQuery isn't comparable to TypeScript. jQuery is a library, and TypeScript is a whole different language that compiles to JavaScript. Is your compiled TypeScript code not Vanilla JS? All it is is some JS with additional bits that gets fed through a compiler. 
I like this
A problem with arbitrait, is that it stores types and their traits in an object ([source code link](https://github.com/thecynicslantern/arbitrait/blob/master/arbitrait.js#L62)). Take the following snippet: const trait = require("arbitrait"); const MyTrait = trait({ fn: 0, }); function f() { class MyClass { } MyTrait.implement( MyClass, { fn(){}, }); } Every time `f()` is called, a new class (and its functions) are permanently added to `MyTrait`. This causes a memory leak (which also degrades performance linearly, given how [`findFirst` is used and implemented](https://github.com/thecynicslantern/arbitrait/blob/master/arbitrait.js#L1)). It would be possible to fix the issue by using a [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) to store types and their traits. With straits I preferred to use property symbols, rather than a `WeakMap` because the ECMAScript 6 standard itself started using property symbols to add new extensible behavior to types (see the [well-known symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols)).
Calling TypeScript a "syntax sugar library" that causes "bloat" indicates to me that you really need to brush up on your technical knowledge before projecting such strong opinions.
&gt; ; You dropped this
Cool, but too much anxiety for me lol
Sorry for this noob question. I always see let in for loops so I thought that was the best so why const? 
This is such a cool article I’ve never thought of before But can someone explain Symbol.iterator to me really quick? Does for...of just dereference it and run that function?
LGTM
Yes, [for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) calls the `[Symbol.iterator]` property of its iterable object and uses the returned iterator to loop. The [iteration protocols doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) explains the whole thing and has a bunch of examples.
You're suggesting the equivalent of Java wild card imports (which has been considered bad practice there for well over a decade). Also, when you say that one wouldn't be able to do: object // { a:7, b:12, c:4, d:7, e:1 } .values() // [7, 12, 4, 7, 1] .sortBy() // [1, 4, 7, 7, 12] .uniq() This is predicated on the assumption that the library monkeypatches. This may be a tough sell because tooling may transpile symbols and the regenerator runtime code to support that ain't small. An alternative proposal that has been around for a while is the pipeline operator, which would look like: object |&gt; values |&gt; sortBy |&gt; uniq but involves no monkeypatching and transpiles to much more trivial/light code.
To me it means you get no abstraction from the DOM. If your code does not call document.write (or something else to put something immediately on the DOM) then it's not Vanilla. React/Vue/Angular are not "vanilla" because you can use them and have no clue how the words you type end up on the screen. 
Meh, print is dead.
``` Object.keys(tx).forEach(key =&gt; this[key] = tx[key]) ```
Object.assign(this, tx) is probably what you’re looking for?
Visual Studio Code has spoiled me
Yeah I went the same route almost exactly, learned React and some other useful tools (full-stack course). I felt like a programming genius with how quickly I could produce robust web applications that did cool things. Some of it was definitely ugly code, lol... but seriously, learned frameworks and standard libraries helped me get a solid grasp of web development as a whole. Then I started to see how a framework actually works, as in, “What are the major challenges of the underlying language/environment that this framework is trying to help us overcome?” In all honesty, learning React was a launch pad to help me understand Javascript and application design in a much deeper way. As for learning on my own, focusing on fundamentals? ... I could only get so far trying to piece together different Array methods to come up with a custom string concatenation function for my hacked-together file path parser, which would I might use... never, lol. I eventually learned a lot of stuff like that through every-day problem-solving. Learning a language from conceptual video tutorials was like going to the hardware store to learn how to construct a house from scratch. I needed to assemble a prefabricated house first, then figure out what the design hurdles actually are, and so on, and so on...
Desktop users only: &amp;#x200B; Inspired by Wes Bos's JavaScript 30, \[The Keyboard\]([https://thekeyboard.io](https://thekeyboard.io/)) is an interactive music web application that binds keys to a set of sounds. You can customize the theme of the app and the color of animations. I wanted to try my hand at creating a project using only vanilla JS to learn more of the core fundamentals of the language! (Please don't access the site if you're on mobile, it's quite bad right now)
The main point of the article is not introducing an alternative pipeline operator, but a way to add new polymorphic behavior to types (including existing and built-in ones). Lodash might have been a bad/misleading example. I didn't consider that, and at the time I thought it was a good idea showing off how the `.*` operator can help with pipelining functions.
&gt;And Id say React teaches you more about JS than you would learn by writing a webpage without it. I agree with this 100%. It helps you get above the trees to see the forest.
Yeah, and it’s honestly shocking how easy it is to learn a new framework if you just put in the effort to build something cool with it. You end up running into a few walls along the way, but that is probably the most efficient way to learn, because you’re cruising through the obvious stuff and spending the bulk of your mental energy learning what the actual hurdles are, and developing your own solutions (and that’s the real secret to learning: you can’t have the answer handed to you).
``` const range = n =&gt; [...Array(n)].map((_, i) =&gt; i); const rangeIn = dims =&gt; { if (!dims.length) return "PIECE"; return range(dims[0]).map(_ =&gt; rangeIn(dims.slice(1))); }; ```
Was easy and fast to write but runs like sh*t - more often than not is the real result.
Just because not all of them get any traction or live for any length of time does not mean there isn't a new one every week.
&gt; You're suggesting the equivalent of Java wild card imports (which has been considered bad practice there for well over a decade). This is a good point as well. I'm not sure I have a good answer. I took inspiration mostly from go and rust: there you just use/import something, and all the trait/interface functions are automatically available. I'm not aware of any criticism to this, although it does resemble a wildcard import. --- At the beginning of my prototyping with the straits syntax I didn't have the `use traits` statement, and `.*` would simply use symbols in the scope. I found it incredibly tedious: the scope was cluttered with symbols from imported trait sets (which led to further problems) and explicitly listing all the traits I'd use was a pain. One reason why wildcard-importing all the functions from a trait/interface is accepted in rust/go could be that the alternative is unpractical. --- I'm planning to [add a way to explicitly pick the traits you want to use](https://straits.github.io/syntax/#use-specific-traits) though, but the idea of removing the wildcard doesn't amuse me...
Your `.*` operator seem very similar to the function bind proposal https://github.com/tc39/proposal-bind-operator I haven't been following it, but last I heard, it was kind of dead because it overlapped so closely w/ pipeline operator and people did not like the limited composability of requiring a `this` binding.
Nah it's just that the field of known unknowns expands and doubt increases. 
Bind operator is exactly what insipired `.*`! I like it and am quite sad that it's not catching on... It doesn't let you customize behavior for different types though: `obj::fn()` always calls the same `fn` function regardless of what `obj` is. `obj.*fn()` instead calls a function named `fn` implemented for `obj` (or its prototype).
I like to follow a style I followed when I did C# and dot net ./ProjectName/MyClass/MyClass.ts - main class ./ProjectName/MyClass/IMyClass.ts - main interface ./ProjectName/MyClass/SomeClass.ts - some additional class, usually used in MyClass.ts ./ProjectName/MyClass/ISomeClass.ts - interface for it ./ProjectName/Components/MyComponent/MyComponent.tsx - usually components don't export interfaces Note: `ProjectName` may refer to a certain layer, e.g. `WebUIClient` or `WebUIServer` or `WebAPI`. You can also have lots of fun with dependency injection in TypeScript, and this structure really helps, in which case I also create `./ProjectName/MyClass/MyClassModule.ts` where I register MyClass and anything else that is used elsewhere in the app as dependencies.
Probably gonna be an unpopular opinion but the majority of today's webapps (including enterise ones that cost millions) are not written. They are literally "put together" from random open source bits and pieces by people who often had no clue how he basics work. They are inefficient (wasteful on resources), slow, crash prone, and when you start getting under the hood you realize no engineering was ever involved in this - it was all contractors using frameworks. Like "hackjob" actually became an industry standard, cause hey it kinda works, looks hip and we can just market the sh*t out of it and start selling. The difference between a house built with an architect involvement and a pillow fort made out of refrigerators. The latter "kinda works" and might even look like a cool upcycled hipster house but the difference will become very clear once you start living in it.
*spends 45 minutes thinking about which memes to add to article*
Sure, but that seems like reinforcing a really bad mentality that interviews are just regurgitation of cracking the code solutions and googling. I would hope they are more than that.
Sorry, but this not only looks pointless to me but also I have a pretty strong objection to "magic values" in JS. First, what's wrong with writing this? _.values(object) .sortBy() .uniq() My larger objection though is the magic syntax. You're introducing syntax that's bound to a previously undefined library and that can easily change from file to file, so the syntax has literally no meaning when you look at it in code without going through the imports to figure it out.
I feel this using React. It's like the whole "using it for templating" thing was ezpz, but i cant even begin to grasp anything beyond that. 
I’m going to make a library that secretly stops developers from messing with the browser scroll and instead sends them a strongly worded letter. 
yeah that's great. learn just enough to get hired, that's great advice if the goal is to get lots of bad job references on your resume. if you understand the language any framework is easy to pick up.
To me it’s ES6, because fuck IE
Best of luck! Just a small warning - if you don't like the clusterfuck that's the academic system, it's fine. But do take time (af least a year, probably 2) to learn ALL the basic and core CS and related math concepts, ranging from Linear Algebra/Differentials/Discrete Math/Probability to OOP/Operating Systems/Data Structures/Algorithms. And then the more advanced things you want to focus on. And throw some Computer Security basic course in there too. That's a minimum you need to be able to learn IMO in order to one day become a good engineer. ..also, regarding Uni, as much as I dislike that system, it does seem to be the (sadly) only system to offer you direct access to proffessors, who are experts in their fields, and might have andwers that'd save you 50% of the time it,d take you to understand a topic alone (which may be 10 hours+ easily), as well as some great insights in general. Whether that:s worth going to Uni is up to you. ..and finally, Uni provides direct and relatively accurate feedback to your understanding of the material. So you have to at least find Homework/Exams with solutions to the topics you self study, and only declare a topic complete when you can pass all HW/Exams with at least 55% (without looking at answers first, obviously). Anuhow, best of luck!
This looks really nice. Can’t wait to try it out.
Sure, which is fundamentally no different to the `let prop in tx` example I had. Personally I'd be more inclined to this: Object.entries(tx).forEach(([key, value]) =&gt; this[key] = value); But regardless, I was looking for a nicer way. 
This is why I love reddit, thank you so much this is beautiful and it works great
I agree with you, we need learn basic programming before learning frameworks
well put
I would probably just write a new function: const setText = (obj, text) =&gt; ({ ...obj, text }); Or maybe: const getPropSetter = propName =&gt; (obj, val) =&gt; ({ ...obj, [propName]: val }); const setText = getPropSetter(‘text’); Or even just: const updatedFoo = { ...foo, text: ‘new text’ }; Don't confuse shortness of syntax or familiarity with simplicity. The implications of inheritance on your code's behavior is unclear, and typically creates a rat's nest of issues for you to debug six months down the road. It's not entirely without use cases, but in general you should favor composition over inheritance regardless of whether you're writing OOP or FP. Your question itself speaks to a very OOP mindset. You want to "extend" other people's code. In other words, you want to reuse their code and build on it. So why couldn't their code just be modules of functions you import and use? Is that not extending their work?
Great solution. Spot on. I was sort of trying to do something like this = {...this, ...tx} but obviously you can't re-assign `this`. In my head I thought `Object.assign` would have the same issue, but I forgot you don't have to assign it to anything.
Also, may I ask how long that took you to write? It's very clever.
I love the little 'nsfw' tag on this post hahaha
If this is in a config file, you can do: ``` collectCoverageFrom: [ “src/**/*.js”, “!**/*.module.js”, ] ``` If you’re using it from CLI: `—collectCoverageFrom=“src/**/*.js” —collectCoverageFrom= “!**/*.module.js”`
Vanilla JS these days denotes a javascript project that does not rely on external libs or frameworks but in actuality vanilla js is a framework itself - http://vanilla-js.com. it has been essentially absorbed into the spec as most browsers now ship with Vanilla JS. "That's right - no code at all. Vanilla JS is so popular that browsers have been automatically loading it for over a decade."
Very cool!
I created an issue earlier today - awesome idea and I love the simplicity. It seems like a simple for loop was coming up with an error though. On phone so don't feel like typing out code here 😁
You can't stop me, angular, react and soon blazor, I'm mediocre in all of them! Mwahahaha.
I didn’t know this before I did
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor
yes but with loopback it's a bit different. Can't figure out what exactly though.
“You got some beef or caught us slippin on unit tests, send rants and 10mb gifs to moe@dixonandmoe.com” This is what really sold me. 
JavaScript which can be executed by browser without introducing external dependencies to your app.
JavaScript doesn't have classes in the sense of Java, only prototypes. Thus, the type of an object is always just “object”. You can access the prototype via `obj.prototype`. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
 unknownClass.constuctor.name Should do it. If you're supporting older browsers, I believe that ie 11 needs a polyfill.
totally linux
Good tip with the screen capture. I use an extension for that, this is way easier. 
For my two cents, I'd leave it exactly like it is. The code is fine, no need of cleanup. If you had 20 properties passed into this guy, I'd like to see each one documented as to wtf it is and why does it need to be there. Say you introduce applying any property in the provided argument to \`this\` - there's no telling what's really on that object, it moves the required datums to the caller and turns the class into a soup of uncertainty. Looking at it later, you'd have no idea what was actually on \`this\` expect to look at how it was invoked. With it like it is, you can search the entire code-base for given properties, if you need to do some refactoring later. If you're looking at this one, you have a sense of what has been applied so if you need to add a method, you won't need to look at the caller to find out if it was \`customerId\` or \`customer\_id\`. 
I though about the bind operator first as well... I think you should focus on the polymorphic benefits of traits more instead of chaining. The problem is, that the negatives of just using symbols don't really appear when you are not aiming for chaining. IMO the community should focus more on protocols (instead of adding the same map/flatMap/forEach method on nodeLists arrays, sets etc), but I don't think we need traits for that. 
Looks great. Any chance of adding auto closing brackets/parenthesis? I'm addicted..
I would argue that it would be better to set realistic small goals without framework instead of showing them they can do anything with framework. The problem with giving a framework to a junior is that they will never think that they have the level to understand how the framework works under the hood. If you go incrementally from a small goal, you can then explain them easily that someone may have done the same thing in lib and they could start using it and understanding how it works. You would never understand how cookie parsing or routing work if you've always use a framework.
If it's regex, then the `.` character means "any character". You need to prefix it with a backslash to get "the dot character". Try running `src/**/**\.!(\.module\.js)\.js` or similar
It is unfortunate I don't have a baby to take care, I would have tried this. 
Yes this would work in the case of a stopwatch style counter but what if I have a countdown? So I'll need to fire a function or something when the counter hits 0. What do I do in that case?
&gt;You could simplify by having the interval *always* compare the current time against the start time, but that wouldn't explain what your problem was and the approach to get around it in non-timer scenarios. Again, what about the case of countdowns? I would like to call a function when it hits 0. Using this approach, it might even go negative without notice. &amp;#x200B;
Ah, thanks!
Cheers, man. If the code doesn't do the thing it's meant to do, I'd recommend talking to the guy that wrote it. He's the most likely candidate for someone who knows how it works, after all...
Agreed!
JS is single-threaded and provides only asynchronous timers, so unless you spawn additional processes, you can't ever guarantee that a function will run in *x* seconds. `setTimeout` and `setInterval` only guarantee *minimum delays* before a function is invoked. `setTimeout(foo, 5000)` means that after 5000ms, `foo` is added to the list of things to do at the next available opportunity. But that opportunity might not come for a long time, it might never come, even without the throttling of background tabs.
I think they meant that TypeScript itself is not vanilla JavaScript. It might be vanilla TypeScript, though.
You can still make it, but instead of 13kb it'll just be 13k
Definitely a bit of clickbait going on there, unfortunately
lol.
i really like it! played with it before my standup :P
&gt; } else (linelength != 0) { Also, OP has an error there.
I see. That was something I was unaware of. But then what would be a solution to this problem I'm talking about? Using setInterval was my solution with limited knowledge and it seemingly fails in Mobile, and the recommended solution of subtracting Time wouldn't work in case if countdown timers...
Maybe silly question, but here it goes: doesn't writing your game in TS make the transpiled JS bigger than if you just used plain JS?
Read the article, it doesn't say to actually stop using them
Thanks. The code is being evaluated in 'strict mode' by default so all vars in for loops will need to be defined.
Yes, would like to add this in a future version.
Frameworks are going to die out if nobody's there to invest the time into learning them. Maybe not 100% of time, but perhaps 40%.
It depends on the "target" setting in tsconfig. If you're targeting the same framework or newer, it actually will be smaller (because of the absent types and interfaces). Then again, you can always "uglify" and minimize your transpiled code. 
Linux would be nice
Vanilla js means that in order to make a scaleable application you write the framework yourself. Usually in a haphazard way. Since the dom doesn't have a viable component model you'll write one yourself. Unless you use web components, which sadly, again, culminate in a naked dom. There is nothing that helps you diffing or updating views, you do that instead. But you'll also write your own state manager for reactive state as well as a read/write sync queue, since writing to the dom naively causes serious perf regression (layout thrashing), etc, etc, etc. TodoMVC "vanilla" is a good example: https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs/js 
That is not at all what they asked, which is very clearly for the constructor function not its prototype.
👍 purely for title! :)