Also he didn't explicitly say he wanted an interactive shell.
I have not experimented at all with diferent ways to do this, but I mention [Dust-Me Selectors](https://addons.mozilla.org/en-US/firefox/addon/dust-me-selectors/) in the README. Works for me :).
Slightly modified demo: [Here](http://liveweave.com/GfN2OU)
WTFFFF
Nice, will definitely use this.
I used Knockout for a project a while back and liked it. I've since started using Angular and there really is no comparison - Angular is a superior library.
the easiest way is to load jQuery in the userscript, then use jQuery to find and replace the content. If you don't have control over the site, this can be difficult, and you may need to be overly specific with your selectors
apples &amp; oranges. Knockout is a databinding library. Angular is a framework which also happens to include databinding
You could grab the elements, say there was only one &lt;b&gt; for ease of explanation. var a, b = document.querySelector('b'), c = b.parentNode; // Create its replacement a = document.createElement('a'); a.href = 'blah'; a.textContent = 'sandwiches'; // Insert the new element before the one we want to remove c.insertBefore(a, b); // Remove the &lt;b&gt; c.removeChild(b); Or use jQuery's [replaceWith](http://api.jquery.com/replaceWith/). 
What does it do? I can't figure it out.
And I've already spent too much time on [this](http://liveweave.com/IgEQIt)...
&gt;// Clicking the generate button generates WORKING Javascript code... It's 100% pseudorandom (as random as the Math.random() function). It's.. the worst thing I ever did. &gt;// The box displays generated JS code. &gt;// Fun fact: Statistically, it's possible that this code becomes skynet.
// Fun fact: Statistically, it's possible that this code becomes skynet. This should be put inside the eula on every software, you never know. 
Why? Not a troll just genuinely curious why I should use ember over the alternatives like angular or backbone or [insert flavour here].
what did you change?
This is pretty slick. Wonder if this would work well if coupled with HTML5's app cache manifest feature.
this is awesome!
https://developers.google.com/chrome-developer-tools/docs/authoring-development-workflow#snippets
That looks great! Thank!
My favorite? jQuery because it does things I know how to do very well. My least favorite? ThreeJS because it does things I don't know how to do at all. :P But for a serious answer, I do love angular very much, although as a Rails programmer, moving to building fullly-NG applications feels like throwing out years of experience and starting from scratch.
Publish them to [npm](https://npmjs.org/)! Instructions: * `npm useradd` (you only need to do this for your first module) * `npm init` to create a package.json for your project * `npm publish` Then you (or anybody else) can `npm install YOURPACKAGE` to install YOURPACKAGE. When you want to use your package in the browser, after you've installed it just `require('YOURPACKAGE')` and create a bundle with [browserify](http://browserify.org/).
Offline and related capabilities seem to be all the rage lately.
This is why we can't have nice things... JK. Pretty cool.
I was really ready to be mad at the official guides not being at the top, but then they were, so now I'm not mad.
As a jekyll user I fail to see the attraction... Posting/updating via git push is about as easy as it gets...
You can sort of use Windows Script Host. http://kavun.github.io/2013/06/08/run-javascript-in-command-prompt-with-wsh/ http://kobyk.wordpress.com/2007/09/14/a-jscript-interactive-interpreter-shell-for-the-windows-script-host/ But not really.
I really don't get the point of this. Use the frameworks and libraries that help you get your projects done faster. You can have a deep understanding of JavaScript without wanting to roll everything by hand.
Liger?
wheres your unit tests? :)
Knockout is *fucking slow*
This + fuckitjs would be magical https://github.com/mattdiamond/fuckitjs
Ember, to me, is a toolbox of equipment that I love for expressing complex behavior declaratively. The most frequent complaints people have is around trivial things like naming conventions which frankly betrays an unwillingness to invest in the learning process. Ember's conventions are absurdly convenient once you understand them and the scaffold for mapping out the structure of your program is extremely effective at getting you to break down your application into interlocking parts. Ember supports some excellent primitives for constructing deeply complex UIs (complete with narrow messaging protocols, optional bound data, and small APIs). Ember provides you a structure on which to hang the portions of behavior your application contains in a way that is reminiscient of, and consistent with the old web paradigm (tight coupling to URLs) while allowing you to leverage the speed and immediacy of driving your application's state changes w/ locally running code. Here is a talk I gave on Ember components that MIGHT be helpful for anyone wanting to learn more about Ember's pros and general philosophy. http://www.youtube.com/watch?v=zC7o1YkmkG0&amp;feature=youtu.be
You can load any and all data as you see fit. App.SortRoute = Ember.Route.extend({ model: function (params) { return Ember.RSVP.hash({ companys: App.Company.find(), persons: App.Person.find() }); }, setupController: function (controller, model) { controller.set("persons", model.persons); controller.set("companys", model.companys); } }); Above is an example of using Ember.RSVP (a thin wrapper around RSVP.js which is a promise lib) to load multiple promises (record arrays) and then send both to setupController for inclusion on the controller as parameters. Don't overthink this. The controller is an object that uses get/set semantics but is otherwise capable of hosting any arbitrary values/data structures just like a POJO. There is no need to take advantage of ObjectController's alias to content if it's not appropriate for your use case.
I like that it's fast, I hate waiting on people in real life games. I LOVE that we can enforce some time limits!
Any way to get the play against a computer or two after waiting a few seconds for other players to join? I can get pretty impatient. Obviously it wouldn't be as awesome as playing against real people, but it'd be great if I were given the option so I wouldn't have to stare at that load screen.
Chrome already crashed a lot, but that's because I created some while (true) loops which were a bit.. unstoppable.
sounds nice. got to look at it when I get off mobile
If it's slow its most likely because you are using it incorrectly. Don't try to bind thousands of things at once, don't loop through and add/remove lots of items from observable arrays individually, etc. 
I was actually more interested to find out about the jQuery one() method, which I never knew existed until now.
I can do that!
Define offline. Not being able to communicate with one server is different from not being able to communicate with anything online. So a website can be down while you are still connected to the Internet. Or the connection can be patchy and unstable, so while you are able to ping a server, you might not be able to download a large file. Or if if you are driving you might go in and out of 3g cells, so one minute you have connection while the next you don't. This might be enough to access a website but not enough to stream a YouTube video. My point is that the only way you can find out if the application has the Internet it needs is to try, and then fail gracefully. The best option would be to use something like pouchDB to save and load things from a local database and to sync it when you have a connection. Then you can indicate to the user how much data is unsynced, and automatically sync with the server whenever there is Internet. 
How is it different than https://github.com/aadsm/JavaScript-ID3-Reader
interesting. So if i were to create a dropdown in my form that displays all companies, select one, hit submit...how do i translate that selection into a model? And is that translation done in the controller? thanks for the help Edit* nevermind. just found the docs for a [select](http://emberjs.com/api/classes/Ember.Select.html) in ember. I didn't realize the useful documentation was in the api docs and not the guides!
I haven't read into that one much but it seems this is how mine differs: * ID3v1 and all versions of ID3v2 are supported (2.2, 2.3, 2.4), ~~it seems theirs may not support 2.2~~ (as the format changed slightly between 2.2 and 2.3) * Reading is supported by URL, local file or the HTML5 File API. So this library can be used within NodeJS (local files) or within browsers (AJAX and files selected by the user in a file input) * Unsychnronisation isn't yet fully supported, though it will be soon, **in both libraries** * They have an insane amount of bulky, overcomplicated code just for reading the bytes. This library uses ArrayBuffers and ArrayBufferViews to handle the data correctly and 'natively' so to speak * Tags are renamed to more human readable equivalents since people implementing it likely do not care for unnecessary code-like names
Besides jquery's one event, which is very useful, you can also accomplish the same goal using on and off. $("element").on("click.handleid", function(){ //do stuff $(this).off("click.handleid"); });
Do we have any independant implementations yet? Links? I'd like to play with this a bit. 
I see pizza.
This is very sweet! I'm most likely going to use it on my website. I had something like this before, but only Id3v1 format was supported (meaning that if the song title was longer than 30 characters it would cut it off, causing huge problems). This looks way more elegant.
A few pretty big problems here. Using arguments.callee is kind of a big no-no. Will throw a TypeError in strict mode. Since you're using a named function "handler" why not just refer to it by name? `e.target.removeEventListener(e.type, handler);` Your "onetime" function should execute the handler in the proper context. i.e. `return callback.apply(this, arguments);` 
Do you have experience building web sites without JavaScript? If not, and you just wanna get something running locally, install a web server like [xampp](http://www.apachefriends.org/en/xampp.html), write some HTML pages that contain the necessary JavaScript, drop them in the `www` folder of your server, fire it up, and presto! But really, your question is super vague. "An API" could mean just about anything. If it's some remote service, you might encounter cross origin scripting denial, etc. You'll need to learn about [AJAX](http://en.wikipedia.org/wiki/Ajax_\(programming\)), [callbacks](http://recurial.com/programming/understanding-callback-functions-in-javascript/), [JSON/XML](http://en.wikipedia.org/wiki/JSON), and [avoid general JavaScript quirks](http://www.youtube.com/watch?v=hQVTIJBZook) that may bite you in the long run.
Right on. But I would hesitate to say that somebody can truly pick up JavaScript in a few days. I don't think that's enough time to learn to build something substantial and robust.
I know Python and a few more old ones. I did javscript tutorials and it's the usual add numbers and console.log stuff which doesn't help me at all. Don't worry about what API and what data. I just wanna know how I get a json from a different computer and draw it on a table.
 function once(fn){ return function(){ fn.apply(this, arguments); fn = function(){}; }; } var test = once(function(arg){ alert(arg + " only once"); }); test("you will see this"); test("you won't see this"); myButton.onclick = once(function(){ alert(":D"); });
It is, if you run the test in a headless browser like zombie or phantomjs. In most cases, the test cases can also be run using a spec runner in the browser. Either way, there are options.
Sounds like a job you can do without any frameworks, if the JSON-data can be loaded at startup. Otherwise, try jQueries AJAX class to load your data and dynamically create your HTML based on the JSON. If the website is more complex, look into AngularJS. It takes some effort to get into it, but is makes developing dynamical websites like a second nature :).
The main issue that you're going to run into is that you can't "get a JSON from a different computer". This is because of the [same origin policy](http://en.wikipedia.org/wiki/Same-origin_policy). There are ways to do it, such as [JSONP](http://en.wikipedia.org/wiki/JSONP) and [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) If you have access to the server you're running, you can set up a reverse proxy (on Apache for examples) so that the request appears to be to your server, but in fact proxies to a different one. If you're more comfortable in Python it would probably be much easier for you to put together the page on the server side, because you won't have any same-domain restrictions there and you can put together the HTML there. I don't know if this will cover your needs, but an easy way to set up that kind of thing with popular services is [Yahoo Pipes](http://pipes.yahoo.com/pipes/)
wow that's big
This will definitely come in handy
He Spoke about it's uses in Pair programming and for system access. There is also a record button available, which records everything that is echoed onto the screen. Read only check-box for allowing the read-only access
Because, he is taking images from lorempizza http://lorempizza.com/
Well first you should probably make some dummy data and figure out how to display it in the tables you need. Then you need to figure out how to write ajax code to retrieve data from the API. Then you need to figure out how to convert the api data into the JSON format you need. Honestly, the best advice I can give you is to go to the [MDN](https://developer.mozilla.org/en-US/) and read through their [JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript). Once you have a good understanding of the language, you will have a better time getting the specific answers you need for this and other problems. You'll also have a better experience learning libraries and frameworks like jQuery, Angular, etc. I know this isn't the answer you want. It sounds like you're asking for a script, rather than guidance, but without know what API and data structure you need, no one can help you make a script.
First 3 sites that came to my mind. There's certainly more: http://codepen.io http://www.codecademy.com http://dribbble.com
I'm actually working on a book that targets exactly these 3 technologies. Unfortunately, it'll probably be a while (months) before it's ready for public consumption.
Javascript Patterns http://shop.oreilly.com/product/mobile/9780596806767.do I love this book, I just gave it to the new junior FED at work. Mozilla developer https://developer.mozilla.org/en-US/ #allTheThings And if you Google a problem you're having, only click on links from stackoverflow. Otherwise you'll end up on some kid's blog who may or may not know what they're talking about. 
mdn
Have you considered leanpub.com?
[Here](http://www.reddit.com/r/learnjavascript/comments/1oq3yg/the_next_78_week_session_of_learn_javascript/) is the new session of study group in /r/learnjavascript . Perhaps you are interested. 
I have to respectfully disagree with this one. I don't consider myself an expert in any of the above technologies, and don't know if I have a good answer to the original question, but here is my take on your suggestion: Dribbble is great for seeing what people are doing with design, and codepen/jsfiddle (is there an advantage to codepen?) are great for playing with them and throwing things together. I definitely wouldn't consider dribbble a good resource for *learning* however, and codecademy will teach you some basics of all 3, but it's heavy on the learning by doing, and doesn't really give you the background to understand why and how the state of the web got to where it is today, which helps understand why things are done the way they are. If you wanted to include codepen and codecademy, I would think you'd need a third to balance out the lack of depth from the other two. Personally, I am slowly working my way through Javascript Patterns, and Dive Into HTML5, both of which I really like. Codecademy is pretty good for understanding how CSS and HTML work together, and even how JS and JQuery manipulate the DOM. So again, I'm far from finishing the material on all 3 of those, but I think they work together well.
Not sure if it's the best, but the most gorgeous book about HTML and CSS is John Duckett's HTML &amp; CSS: Design and Build Websites (ISBN 978-1118008188).
[node.js](http://nodejs.org/)
One place that holds all the references you need: http://uptodate.frontendrescue.org/ news, people, blogs, podcasts...
Thanks! Is js and node a reliable way to build backend connections as well? 
Mozilla Developer Network.
I really feel that Sublime is the best editor for Mac. It sounds like you're looking for a plugin like [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter). You'll need to install it via [Package Control](https://sublime.wbond.net/installation#st2). Once you install Package Control, you can press Cmd-Shift-P and type 'Install Package', then type 'SublimeLinter'. This will automatically highlight code that might contain errors. It checks for errors in more than just JS, too. If you have any questions about Sublime feel free to send me a PM. Once you get used to it and figure out the package system it's really a great editor. One thing to remember is that JavaScript is not a compiled language. The best way to prevent errors is to use test driven development. Linting your code is a good way to make sure that there aren't (for example) syntactical errors - but it won't ensure that your code actually *works the way you intended*. The only way to ensure that is with proper automated testing. 
Yes, use node.js. You'll probably want to use a node framework - Express, Meteor, or Sails, for example.
This. I add "site:stackoverflow.com" to most of my googlings.
To be fair, Meteor itself is still not considered production-ready, and yet it's gaining a lot of traction. For example, there are major, code-breaking changes coming in its new templating engine, yet some devs are already using it in production. Though it should be mentioned that the code base is already tested using Meteor's special testing platform.
It sounds like you almost certainly want Webstorm. Sublime is also great but a little hard to get your head round. Webstorm is free for OSS and cheap if not (30 day free trial). It also does error checking/linting OOTB and lets you preview files on a static-server with no addition plugins. It's also super easy to use. I've encouraged all my team use it except those who were already using sublime or another editor. If you need any help getting set up PM me :) EDIT: Added link for Mac http://www.jetbrains.com/webstorm/download/#mac
Before I had a look at different editors, Webstorm is definitely the best for beginners. Brackets is also good in features but it's still in developement and it's possible to be buggy or slow, but it's open source and free. Sublime is also nice, but requires more set up to be like webstorm.
Thanks a bunch! 
I learnt using a variety of code academy , team treehouse and code school all great resources and also really like HTML &amp; CSS: Design and Build Web Sites by jon duckett
There is a JSHint plugin for Sublime. A linter can catch syntax errors, glaringly obvious errors, and convention violations. It certainly helps quite a lot, but it's not perfect. If you want more checks and better tooling, you can take a look at the Closure Compiler, TypeScript, and Dart.
It's just so sexy. 
+1 to leanpub. It is absolutely fantastic for "in progress" books: You can get feedback on your work, do some market research, and build a fan base. I have been very pleased with how it helped shape http://leanpub.com/javascript-allonge, and readers seem to like it too!
If your into watching courses. Check out http://pluralsight.com . I always have at least a few courses loaded onto their offline viewer. They just recently released an Angular.js fundamentals course as well. So their materials fairly up to date and the people running the courses are very knowledgeable.
WebStorm is also excellent with TypeScript and CoffeeScript.
I use Aptana Studio 3. Might be worth taking a look at.
If Webstorm is best for beginners which is best/better for professionals?
No link? https://developer.mozilla.org/en-US/docs/Web/JavaScript
If you aren't new to programming, I would suggest Javascript: The Good Parts, a lot of people like this book, I picked it up about a year ago when I was a noob programmer, but I was completely lost as it seems to relate what JS can and can't do compared to other languages, and it is very brief. If you are starting off new, I would recommend CodeAcademy to learn the fundamentals. It took me awhile to really have the fundamentals sink in, but if you really want to learn it, you will! If you are trying to go deeper into JS, I would recommend picking up an MVC framework, I prefer AngularJS so far, and for that I would recommend Egghead.io to learn that. I feel I learned the most in JS when I challenged myself... I barely understood client side MV* frameworks, so I dived into AngularJS (I somewhat understood MVC from working with Codeigniter) and picked up a lot along the way. There are a lot of techniques and such jammed into the frameworks which are really important to learn eventually. Stuff like dependency injection, modules, interacting with REST API's, classes, etc. JS is really really fun though, especially when you get into NodeJS development.
Here is a free book by Addy Osmani on the same topic as well: http://addyosmani.com/resources/essentialjsdesignpatterns/book/
Well, Ill bet that even that feature will suddenly give you the wrong color ;P
There are several floating around... here is one... Springy.js A force directed graph layout algorithm in JavaScript. http://getspringy.com/
I neglect to understand that this does.
I personally recommend http://www.codecademy.com/tracks/javascript , as I really liked it. Granted, I haven't tried much else.
[jsfiddle](http://jsfiddle.net/gavin19/6jZ7H/).
Find a local group of front-end developers to hang out with and learn secrets from.
I think this might explain it to you. The explanation is a little iffy but it will show you how to fix it at least. http://jslinterrors.com/dont-make-functions-within-a-loop/
Use a profiler. With vsync, 16msec per frame means 60fps and 17msec per frame means 30fps. &gt;as you dig down You didn't add any instructions. No idea how to "dig down".
You forgot A = left, D = right, and space = jump. Clicking on a tile doesn't seem to do anything.
Ah, the position of the frame was causing the mousex and y to act strangely, didn't anticipate that.
https://developer.mozilla.org/en-US/docs/Web/API/Element.getBoundingClientRect
Really? It's good but it isn't a bible.
Sure, but I also figured since books and tutorials are super easy to find, and i knew everyone else would be pointing to mdn, html5rocks, etc, etc, that I'd throw in some learning 'tools' that many people don't find out about for a long time and that would make utilizing the tutorials easier. At the end of the day, learning to program requires reading and writing code, not just tutorials.
or type mdn.io/YOUR_QUERY. Someone created a google feeling lucky route.
there are no absolute bests. there are only opinions.
Sure, but it is still from where I stand the best introductory book to what's underneath a often misunderstood copy-pasta-make-my-banner-blink programming language. It has its quirks, indeed, but The Good Parts shows that you can limit yourself to a subset of functionalities (no eval, no new, no whatever) and use the bits of the language that make it awesome (closures / call/apply / functional-like programming, etc...). It is really a great read to anyone wanting to be a JavaScript programmer.
damn it, i came here to reply with that but you beat me to the punch. telesc.pe is exactly what you're looking for though OP.
http://javascriptissexy.com/ for all things js. https://developer.mozilla.org/en-US/ also helped me a lot. i see some people listing the javascript patterns book by addy osmani. it's a pretty good book for people who know intermediate - advanced Javascript, but in my opinion, not for people who are just starting out. 
&gt; RIA applications &gt; Rich Internet Applications applications &gt; Applications applications ಠ_ಠ
gz?
From the 2nd sentence: "When data comes from server, this data could be GZipped, but this is not possible when the big amount of data comes from the browser to the server."
Title is very misleading. This is for compressing JSON data made in browser to be sent to the server, under the guise that the browser won't automatically negotiate compression. Which, now that I think about it, I've never really looking into wether an ajax call from client-&gt;server will gzip the post content. Hrm.
 (ﾉಥ益ಥ）ﾉ ┻━┻ 
It was fixed just for you: https://github.com/tcorral/JSONC/commit/bd73b72960aa3166cc602637ac75767e50be68b9
allTheThings ??
I think there may be a bit of misunderstanding here. As I read the description the author is referring to HTTP client to server communication using POST in which case the data transfer happens before Accept-Encoding negotiation and hence no compression can be used.
Meaning that they cover a lot if not all of Javascript and HTML5. Whereas a site like w3schools just covers the basics and not very in depth. 
I thought it was a website :)
View source a site you admire. I'm not joking, production code is most illuminating if it hasn't been minified. Second best would be to pour over the source of a project on GitHub, if it is an in-use well maintained project with version history and not someone's portfolio project. If you intend to write JavaScript professionally you should get used to reading and understanding other people's code from the get-go. This is an under appreciated skill IMO.
Though it is for client-side use, you are still correct. JavaScript implementations of the gzip and deflate algorithms already exist, you could quite easily pass the stringified version of your object through it and have the server-side application decompress it. Then the server-side can respond with a similarly compressed response as you said.
As others have pointed out, GZIP doesn't help with client-&gt;server. Also, GZIP doesn't help with websockets.
&gt;but it always returns the last one and I don't know why How are you accessing it? the variable "index" after the loop will refer to the last accessed item. Do this: for(var key in dh.attr ) { if(dh.attr.hasOwnProperty(key)) { console.log('item: ', dh.attr[key]); } } console.log('Out of loop', key); 
I am accessing it with dh.attr[index].name etc.
My problem is that I try to iterate over the whole Object and grab individual stuff. So I guess object.keys() would be impractical.
Within the loop you will access each item. Try my example. 
Tried it. Still the same issue. I updated the post so you can see the full function.
I have no control over sendChat because of [this](https://wiki.roll20.net/API:Chat). The code is basically run in a sandbox per campaign and I only have the sendChat function to roll dice.
See my updated comment. 
I did some research but can't really wrap my head around the _.bind. How do I use this in my code?
Most of the pages like those that I've seen are using Angular. I'd definitely start out with that one. Also, someone needs to let that guy with the resume know that HTML is not a scripting/programming language. ;)
I'm liking it so far, but I really with they'd have better examples. Kind of reminds me of the early days of Flex where Adobe would put something a library, put out a little bit of documentation, and the community had to put together examples for each other to learn from.
Ok I did something completly different. I just created a new function with the code from the loop and on of the arguments is basically the iterator. It works now. Thanks!
Lots of that is just fancy animations (see TweenLite or Transit) and sprite sheets combined with some [parallax logic](http://www.webdesign.org/how-to-create-a-parallax-scrolling-website.22336.html). The real juicy stuff these days is coming out of WebGL; check out ThreeJS (for 3D) or Pixi (for 2D). Or you could just use plain 2D canvas if you're targeting older browsers or using simple graphics.
Servlets are in Java not Java*script*. This is the wrong community for that, try /r/Java
Browsers don't automatically gzip from client to server because there's no way for the browser to know if the server is capable of accepting the compressed data. It's possible for server-&gt;client because the browser communicates to the server via the HTTP headers in the request that it supports gzip.
It isn't gzipped going from client to server, see my reply to the parent comment. It's the reason this library exists. :)
When Java (not Javascript) was first created it was for creating applets on your PC that ran in the browser. These applets would support better animations than existing html/Javascript. Then Java was extended to the server (where it eventually found its home) and initially they called the server code servlets. Later it was called Java Server Pages or JSP for short. As krues said, its nothing to do with Javascript (this is a completely different language than Java). 
I know that they are different I just didn't know that servlets were java as I saw the job posting said: "javascript, servlets, etc... " or something to that effect. Thanks for the info! :D I appreciate the lesson. 
Its a good idea to start with sublime. The author has certainly built a better mousetrap with this thing. Get started now and you'll pick up all the features as you go. 
Get sublime text and google sublime text javascript snippets to learn how to start saving and using them. 
What you really want is messagepack.
if you searched google for "servlet" and "nothing really descriptive came up" you should not be looking for jobs for anyone needing to use a computer, much less programming jobs!
Im not looking for a job in programming right now. Im learning right now and will eventually be looking. It popped up on my job search and I was curious. So I think I and the rest of the community that are just starting out would appreciate it if you didn't bash anybody looking for knowledge. Because that would be you know, the opposite of knowledge. kthnxbi
To elaborate on the code, it is essentially this: create div at -9999 in which to load images in the background creating single &lt;img&gt; in hidden div in which to change src to image being loaded load urls of images into array change src of image to reflect current url in array add listener to container div/or img to alert callback when fully loaded have callback go to next url until done with array, continue till done and call final callback for all images loaded 
If you want to fuzz JS more effectively, instead of allowed characters, make a list of allowed entities (declared variables, numbers, strings, comparisons, loops, functions, closures, recursions, keywords etc.).
This has never failed me: https://github.com/desandro/imagesloaded/
It's really not necessary to use jQuery for this. As /u/pinegenie mentioned earlier, just use *new Image()*: var img = new Image(); img.onload = function() { /* do stuff */ }; img.src = 'myimage.png'; Since the image is loaded only in memory, there's no need to do any manual cleanup.
Thanks so much looking into it now! 
Beginner question sorry but would the best option be to use node for backend and then javascript jquery etc for front? 
Less a *discussion*, more just a list of links on MEAN stacks.
This is more of a general purpose script-host and not a high concurrency server. Most IO in JSlibs is blocking and there is not a big focus on async handing with a event loop like in Node.js. Node can handle crazy amounts of concurrent connections while keeping response times low (as long as you don't block). The mapping to libraries are nice though. I could see this used as workers to do work using the various wrapped C modules and using a node.js front-end to route jobs. This also reminds me of SlimerJS (headless browser running Mozilla platform) and many similar alternate JS hosts (there are quite a few)
and of course, there already exist non emscripten ported gzip implementations 
Interesting - haven't heard of it before. Could be useful invoked via node as a worker process. I suppose the same goes for [Rhino](https://developer.mozilla.org/en/docs/Rhino) if there is a Java library you'd like to use.
probably better to just clean up the event handler in that example tho :)
no link to the webkit implementation that they created that I could find.
ATM Machine
Webstorm is also good for professionals, although the one that you can use the most efficiently and fits your workflow the best is the 'best' one. For JavaScript, I simply used Notepad++ for years, although recently started to pick up Sublime and I really like it. I haven't spent too much time with Webstorm, but could definitely see where it'd be useful with some things that are built in like refactoring, JS test running, VCS integration, debugger, etc. Some of these things you can get with packages in sublime also though.
DNS server 
In Chrome, Right click search box on mozilla developer network &gt; add search engine &gt; abbreviate with "mdn" &gt; now you can type mdn, &lt;tab&gt; in the address bar to search mdn directly. 
If you really want to optimize your server &gt; client, I find straight ajax of tab delimited data to client followed by client-side parsing is faster than downloading JSON formatted data which can sometimes be 20-30% bigger. But this is assuming your data is formatted in such a way that can be represented in tab delimited format.
I just meant like this. http://jsfiddle.net/qFA55/1/. Object.keys gives easy access to nice array methods for object iteration.
HTML (hypertext **markup language**) is exactly that - a markup language. You can't do any scripting or programming with just HTML.
Yeah, that's all he said... "HTML is not a scripting/programming language." He didn't say anything else bad about the resume.
Ah, I think it's because in the resume HTML is listed under "Scripting and Programming". Not because of some technical reason regarding the resume.
I never really thought about that, it seems so silly when you think about it. I would like to know why nobody have done something about this.
So I am not the only developer who finds Internal Complexity of Angular framework too much to grasp? Good to know.
That's a whole lot of compelling reasons to steer clear of Angular. I mean, it sounds like Angular's design is thrashing, which is pretty much what I expect of a comprehensive data-binding based solution. &gt;&gt;Directives - the blessed way of integrating to the DOM - have a lot of optional arguments that don't work well together, and others that break in subtle, hard-to-reason-about ways. For example, ngModelController.$render breaks once you add scope parameters. Transclusion also silently modifies the scope inheritance semantics if scope parameters are added. 
This is a great walk-through. Nice job on making it both informative and concise. On minor typo, Success has two c's; &gt; var sucessQueue = []; 
Yeah. I skimmed the about section and his name was there. Honestly, sometimes I think he's the only one who cares about SVG. 
Well, I do too, and so should everyone else :-)
Me neither. I was hoping someone knew where to get it.
&gt; The performance is also not too good... "Performance?" For what? In what cases? I have yet to encounter a "performance" problem in Angular.
Take this with a grain of salt. It's a little vague and mostly opinion. Some of it is even inaccurate: &gt; for one thing, there's no equivalent to jQuery's $.when `$q.all()` is precisely what he's looking for here. Seems maybe this is more of a case of just not understanding the framework. 
Their attitude towards performance is that 50ms is acceptable latency [1]. Describing touch interactions is really challenging and data binding can save a lot of time; however, in practice if it takes longer than 10ms per frame your gesture will feel super jank. Reason being: humans can perceive tiny delays when motion is involved. The reason that movies run at 30fps is because movie cameras capture motion blur, so digital displays need to run at 60fps to feel smooth (since there is no motion blur on a pixelated display). The reason I mentioned that your code needs to run in 10ms or less (rather than the intuitive 16.67ms for 60fps) is because the web runtime sucks pretty bad for real-time stuff so you need to give some extra time for GC and DOM manipulation overhead. [1] http://stackoverflow.com/questions/9682092/databinding-in-angularjs
I found $q.all() moments after I started looking for the equivalent to $.when--and that was with the old, badly laid out documentation. The docs are considerably better now.
&gt; compelling reasons Sure, if one guy's mildly fallacious editorial constitutes "compelling reasons" to steer clear of a popular and robust open source framework.
Python or Ruby are also great languages to base such system on. Reddit is written in Python, so that should fit. 
Awesome! And Meteor as wel... Going to try that one soon!
Again, I've _always_ found the Angular documentation to be pretty good, and I was using it almost a year ago, too. But I don't know why people think "My subjective experience with the documentation was positive" substantively redresses criticism of documentation. Sure, maybe $q.all() is easy to find (once you know where to look for it). The problem isn't finding _one thing_, the problem is when you experience repeated confusion, when you miss things that (apparently) should be obvious because the documentation is a mire. Put it this way: OP _didn't_ find $q.all until someone (you) pointed it out to him. Maybe OP searched for a "when" operator and didn't find $.all because the name of $.all is unconventional and (to my eye) unclear. 
After reading your article on Angular and having been working in Angular for a new project, for over a month now, your "cathedral on a volcano" is extremely appropriate. Despite that, I find it fairly good, but I can now fairly compare it to my own micro-framework and see the pros and cons to both.
Not sure why you were down voted but I agree. Either the documentation has to be superb or the source code should be approachable.
Good article. Though I don't agree with every point, I think constructive criticism is always in place. Personally I love Angular but I also love to read articles like this, rather than articles that just hype and praise.
From the link: &gt; slow — Anything faster than 50ms is imperceptible to humans and thus can be considered as "instant". So you think that since an Angular dev said that, then all of a sudden all Angular UI is going to take exactly 50ms? Your argument that Angular is "bad" is because you disagree with someone else's definition of "slow", and not on any actual performance metrics? Okay, then. &gt; however, in practice if it takes longer than 10ms per frame your gesture will feel super jank. ... if you say so. 
Forgot to spell check my variables :-( 
I agree with your point, but oranges taste better.
I'm going to throw my hat into the "Angular documentation could be better" ring. Compared to things like Durandal (which includes Knockout, which has excellent documentation) and Backbone, the docs simply have to be better for me to invest any real time in the framework. Granted, I'm not the kind of person that enjoys tinkering with an API to figure out how it works - a framework is a tool, and I expect to have a clear explanation of how it works. For me, Angular isn't there yet. EDIT: changed "sucks" to "could be better".
Maybe it's my existing knowledge of Q (which $q is based on), but this was obvious to me (my search was actually to ensure it existed, not to find what it was). I had to go digging around the jQuery docs the first time I was looking for the equivalent in jQuery.Deferred. That being said, the docs a year ago were kind of bad to learn from. I certainly didn't learn from them, and I lightly used them as reference. Perhaps this is the issue most people have--other projects' docs are "learn from" reference material, whereas Angular's docs (until quite recently) were strictly reference material.
um...you mean 24fps?
"An Angular dev" == the guy who designed it, built it, and sets the community standards and values.
Wait what?
What are you trying to do with it? I found things like angular ui-router make things 1000x easier. Using that instead of the default ng-view's and angular routing solved 80% of my confusion and made angular actually pretty straightforward to understand. I'm still working on crafting more elegant directives, but almost everything else (that I've found I needed to learn to make a single-page charting application at least. there of course could be a whole bag full of things I haven't even seen yet) took maybe 2 months to get a solid handle on, and I've never written a large javascript application before. But I can agree the documentation is utter shit. They do seem focused on improving it however. They recently updated the directives doc and its actually helpful instead of basically being "this is a directive. end"
I easily found the `$q` docs, but perhaps because I knew what I was looking for; specifically, I searched for either `"angular promise"` or `"angular deferred"` (can't remember which exactly), and the top result is for `$q`. OTOH, searching for something like `"angular jquery when"` yields nothing immediately useful. I'm not sure how much, if any, of that problem falls on Angular. While they should help to bridge the gap between non-Angular and Angular worlds, I don't think we necessarily need a 1:1 docs mapping to jQuery, et. al. If the best that a developer can describe the problem is _"the when() method from jQuery"_, then that dev is going to be woefully unprepared for _anything_ outside of jQuery.
nice, but i feel like these are things that aren't really misunderstood, but rather things that are different in other languages that will be taught in any intro to javascript syntax text. I think things like closures and how javascript compares falsey values deserve more focus.
^ this guy. Closures are a bit weird, but basically if you're ever defining a function within a loop, offload that function definition outside of the loop. 
I've also not had any major problems with the docs. Are they the best? No. Could they be organized a little better? Perhaps. Are they "terrible" or even just "bad"? I think they're pretty far from that... The API reference is very good: almost all of the API is documented with examples. The "how do I...?" type docs aren't as good, but IMO I don't consider that documentation -- or at least not in the same category as API docs. Tutorials and best-practices are a meta-level above API docs, and require quite a bit more effort to produce. Many projects don't even have these, such as jQuery; you get the API docs and that's it. There is no "How do I turn an HTML form into an AJAX form?" or similar. 
Angular seems to be a polarizing framework. The number of brain cells you need to invest in learning to use it effectively is high, so many devs balk at it. Those that do make the investment feel obligated to defend it. Bias both ways. Typical programming politics.
Ditto. We still have complex applications in Backbone.js around, and even develop some new ones for specific purposes. But certain things are solved beautifully in AngularJS, so much so that I miss the functionality in other languages and non-web environments I have to work in. Even though they involve a bit of voodoo behind the scenes. (E.g.: just using plain old objects, arrays, primitive types and letting the scoping mechanism work its magic. I *hate* having to deal with model classes now.)
You could embed it in an html file on your local disk and open it in chrome or firefox. Not sure if JS is the best first language. But if you really like it I'd check out node.js as well..
The article explicitly says "you probably taught yourself javascript". The people who teach themselves javascript will come from different language backgrounds. I think this is an awesome guide that does exactlt what it set out to do.
http://www.zerocut.com/tech/pulldown.html All of this depends on varying standards which I don't fully understand.
I have a hard time investing in a front end framework that "does it all". I'd much rather stick to a smaller more basic framework such as Backbone and extend my own View, Model, and Collection layer. I don't like having situations where I spend more time hunting bugs in the framework rather than my own code. I also don't like having specific logic in my html, I'd rather contain all functionality in JS and leave my templates as plain html. Maybe I am adverse to change, but I figure if it's not broke, is well tested, extensible, and easily understood by others on your team through documentation and a nice dependency layer(requirejs), why compromise it by moving to a new framework?
You realize that the answer was from Misko, right? He's the one who gives all of the big talks and designed it. I understand that there's a team driving the implementation, but it's my understanding he's still the flagbearer and driving the design and community.
Well I actually started with C. I'm only refreshing and working with javascript for a little while. So embedding in an html file would consist of linking the javascript file to the html and opening the html? 
&gt; You realize that the answer was from Misko, right? Yes. &gt; but it's my understanding he's still the flagbearer and driving the design and community. No, I don't think he's solely responsible for the design and/or the bearing of flags at this point. There is an entire team of highly skilled developers working on Angular "professionally" as of right now, not to mention the massive amount of discussion around issue and pull requests on Github. Either way, this doesn't have much to do with your point which was essentially "Misko thinks 50ms is too fast for human perception, and I disagree, therefor Angular sucks". ... which is illogical at best.
Yeah. For smaller things you probably just want to use jsfiddle. http://jsfiddle.net
Give Ember a shot. It's a really solid framework that can be flexible enough when you need it to be if you know how to use it. I understand that it can be very tempting to use something like Backbone where you can extend it on your own but you almost always (at least from what I've seen and experienced) end up building the same or very similar frameworks on top of Backbone. That and two way data binding being built in with logic-less templates is amazing and removes the pains of Backbone template hell.
Well, to cut him some slack, his JavaScript skill is only on "Expert", not "Master" The thread had quite a lot of up votes: http://www.reddit.com/r/javascript/comments/1ope8f/interactive_resume_that_hiroshi_yamauchi_would_be/ 
Drop this into my current project and it worked flawlessly.
I bet this would feel pretty mindblowing with a leapmotion controller.
a ton of upvotes from folks who didn't bother looking at any of the source.
&gt;I easily found the $q docs, but perhaps because I knew what I was looking for; Yeah, that makes sense (also re: lord2800 above). I know of Q but not having used it (and with the dollar sign) I wouldn't have made the connection to $q.all. &gt;While they should help to bridge the gap between non-Angular and Angular worlds, I don't think we necessarily need a 1:1 docs mapping to jQuery, et. al. That's actually a completely valid decision. Angular just needs to be aware of the fact that this is going to confuse jQuery developers looking at the documentation. I don't think the decision was made intently; it is an oversight rather than a deliberate trimming. 
&gt;Perhaps this is the issue most people have--other projects' docs are "learn from" reference material, whereas Angular's docs (until quite recently) were strictly reference material. This makes a lot of sense to me. When I studied Angular I used the tutorial to learn, the source code as a guide, and the documentation for strict reference. Maybe that's why Ember documentation is so frustrating for me; it tries to be educational, a guide, and strict reference all at once. Maybe that works for some people, but I found it unbearable. 
&gt; It's not my opinion that 50ms is perceptible by humans. It's an indisputable fact. [citation needed] &gt; . If you're happy with 50ms latency on core interactions then the web will always feel slow and native will continue to kill the web. Again, nowhere in Misko's post does he say "All interactions in angular will take &gt; 50ms to update the UI"... this is the primary fallacy of your entire line of thinking. &gt; $watch() makes it hard (impossible?) to do 60fps at scale today And yet, amazingly, under the worst circumstances, where I'm actually *animating* with Angular, which is totally stupid... **it runs at &gt; 60fps, no problem**... http://jsfiddle.net/EZxDF/ So you're wrong. Can we quit now? And don't get excited if you switch tabs and come back to a lower framerate, Chrome stops the script while you're not looking at. &gt; due to deep copy + O(n) comparisons. Not all $watches do "deep copy" comparisons. The majority, in fact, don't do this. In order to do this you have to explicitly tell it to do so.
I've written an angular testing helper that eliminates all boilerplate from testing code. Its really been a joy to use. I intend to publish it soon. specifically there is a helper for testing directives. quick example: s.directive( // markup to compile '&lt;capsule-info-window capsule="capsule"&gt;&lt;/capsule-info-window&gt;', // scope for that markup {capsule: capsule}, // testing function function(el, scope) { // do test on the element // and the inner scope of the directive here }); 
Why not just use browserify upfront if your end goal is to bundle everything up anyway? 
Looks really well-designed for a webdev book. Is it still up to date?
[Wow, Angular probably runs at 200fps all the time!](http://jsfiddle.net/Fyt87/)
Did you even think this through? Running this on my phone--that is, the _relevant context_ to floydophone's concerns--the example struggles to stay above 50fps and fluctuates wildly. 
iPad mini, 14fps and this is just a little example app
Worth noting that the docs ([directives in particular](http://docs.angularjs.org/guide/directive)) have been totally rewritten. If you're using Angular and you want to help with the docs, feel free to submit a PR.
60 fps steady on my Android. So... Yeah.
Thank you! This is exactly what I needed. I thank you for taking the time to help me out with something so basic. It's a really welcoming feeling!
This is the one feature the ObamaCare website was missing. 
This is very very beautiful, though not what I had in mind when I read 'AirBender'. Still, thanks!
i guess the thing is that there are some more usergroups than only developers. i love angular because it feels like getting back to the roots of javascript and at the same time enjoying high-tech stuff. a webdesigner guy probably doesn't care that much about javascript and is better off with something like ember or whatever proprietary framework
Does it work on AAC/MP4 audio files?
If I'm reading a tutorial, instead of the Documentation (or better yet, the source), then I've pretty much already opted for 'sissy 5 year old mode'. Don't get me wrong - I almost always opt for sissy 5 year old mode. But I think if I'm not reading the source or at least the official documentation, then I've forfeited the right to be treated like an adult. I'm okay with that.
It depends. I agree that tutorial in particular could have been written better but I find tutorials written in a more conversational and somewhat humorous manner work better for me. If it's written in an interesting way then I'll be able to remember it better, much in the same way that you remember a humorous conversation with a friend better than the exact wording of a dry paragraph out of a tech book. When you're teaching *hard* concepts then it's often better to use drier language to avoid confusion. But if you're working through a tutorial, that tells me that you're somewhere around the beginner and intermediate level of whatever the topic is so it doesn't matter if the verbiage isn't perfectly technically accurate.
Being that /u/fuzz3289 already gave you the straightforward answer, I'll point you somewhere that's better for beginner questions: /r/learnjavascript.
I figured the most upvoted comment would be the one discrediting the author. The groupthink around angular is borderline cultish at this point. Reminds me a lot of how everyone became extremely fervent and glossy eyed about ruby on rails back in 07'.
Nope, sorry!
To be fair its Domain Name System server.
OH! shit... i... i thought it was domain name server
Citation: http://jsfiddle.net/EcGYR/ Toggle the check box. This adds 50ms jank 20% of the time. Even if you only do 32ms (a single dropped frame) it's really, really noticeable. You can play with the parameters at the top to get a feel for it. I didn't say all interactions in Angular take &gt; 50ms, I'm saying that high-performance animations/direct touch manipulation using data binding is not something they have prioritized. Also everything I'm talking about is really about mobile since that's where all the growth is. On my iPhone 5 (a pretty modern device) your example barely hits 25 fps. I also changed it to use translate3d to try to isolate the DOM manipulation, still same result, indicating that the bottleneck is indeed Angular: http://jsfiddle.net/kUxeL/ I suppose it depends on how complex your app is whether $watch does a deep copy or not.
Because then you don't have to build every time you change a file 
The amount of braincells needed to learn it (for me) was less than the braincells needed to figure out how to accomplish the same things without out it. Something about Angular simply clicked with me. Not to say that it doesn't have it's faults, and a few things seem to be unnecessarily confusing at times - but the overall pay off for having taken the time to learn it has been pretty well worth it. That said, I'm also the kind of developer when I hit a wall of "how do I do this?", and it isn't immediately apparent - it just tends to make me more determined to figure it out instead of yelling 'this sucks!'. I think one of the main things that cause me pain at the start was not understanding transclusion, scope and the difference between ng-model="property" and ng-model="object.property" This caused me much pain once (like days worth of time) to figure out why when setting a value on a field with a date-picker and the changes didn't update as expected across the various things needing it. But once I finally figured it out, was sort of obvious - and it's been easy to not repeat that same mistake since. It's also the kind of then when a new developer joins my team I can quickly educate them on without much fuss so they don't repeat it. the tl;dr of all of the reasoning is "if you have a ng-model="something" without a '.', your doing it wrong." One of the other issues is a bit of 'old habits die hard', leaving template-rendering up to the client side causes some unease in people, things like 'ng-click=someFunction(item)' makes people wonder 'didn't we spend years railing against putting event handlers in markup? how is this any different?', and the general desire to fallback to their comfort zones of jQuery when it comes to needing to adjust the DOM to meet their needs. But usually, take a bit of time to figure out the 'angular-way' of approaching a few of these things - it might take a bit of extra time the first time or two, but quickly enough it becomes second nature. When I find myself needing to maintain an older application that isn't using Angular - just seems to feel so cumbersome. 
 $ npm install -g watchify $ watchify main.js -o static/bundle.js Now any changes you make automatically re-builds the bundle for you. Minus all of the silly overhead and configuration that using AMD forces on your project.
I think the only thing "jank" here is whatever you've been doing to your phone. [Nexus 2 released in ancient times, on the shitty BaconReader browser no less](http://i.imgur.com/DczM4Tj.png)
Very cool, thanks for sharing!
That is perhaps the silliest example code I've ever seen. So to add "latency" you're blocking the thread with a while loop? lol. Yeah, because anything Angular is doing is a 100% straight processed block of code with no asynchronicity for a full 50ms... Because... fuck the event loop, amirite? Because then it's *exactly* the same! [Here, I've commented the code for people that don't quite get why this example is junk](http://jsfiddle.net/j2dYj/) Here, I'll make you a dead accurate representation of the difference between 50ms and 16.666...ms (60fps). Complete with user interaction, and totally devoid of Angular: [Prepare for shock and awe at the massive "JANK" for 50ms](http://jsfiddle.net/f6yfV/) lol... I'm kidding of course, you can't tell the difference. Unless you're trying. I suppose I could do a blind trial where you had to guess which button had 50ms latency and which one was 16ms, but you'd just cheat to prove your point.
I think you're intentionally missing my point :/
No problem. Js fiddle is also really important for asking questions about your code. Always provide a fiddle of what you're trying to do and people can play with it and give you a fiddle back with the answer.
This is cool, but why don't use navigator. onLine and offine event if you don't have to care about compatibility
I agree. I like it when hard concepts are brought down to a level better suited for my understanding. As for tutorials, I don't care if the verbiage is technically accurate, but I think that some tutorials could benefit from sounding more "professional", especially if they are over-the-top in trying to dumb down the vocabulary. 
But that's still slower than just using separate files in development, and bundling them when you build. It also means you have to reload your whole code base for one minute file change, and makes debugging a pain, even with source maps. You can't do things like black boxing jQuery/Underscore. I also like how AMD gives you an implicit closure, and dependencies are all defined at the top of the module definition. 
What overhead do you speak of? 
Is your framework out in the public?
while this demo is hilarious, it's not an animation, just a one time appearance, and therefore is completely irrelevant.
OK let me try to make my point a different way. The desktop does not matter to me anymore for two reasons: 1. it's easy (there are great runtimes and powerful hardware) and 2. all of the growth has moved to mobile. Cannot emphasize this second point enough. Now we need to compete with native mobile apps. On two dimensions: 1. performance (try to never drop a frame at 60fps) and 2. richness of interaction (adjust the springiness of pull-to-refresh, etc). In order to get the rich interactions you need to use JS and requestAnimationFrame, not CSS animations. And these interactions are complex which is where it helps to use great tech like data binding. So that, coupled with the fact that humans can perceive hiccups as small as a single dropped frame is where I'm coming from. The demo I showed proved to you, beyond a doubt, that humans can perceive 50ms latency *with motion*. I don't dispute that if motion is involved it's difficult if not impossible to perceive. But since we live in a mobile world where we need flexible JS-driven animations, this is actually a really important factor.
Not really... No one "animates" with Angular. That would be stupid. Angular is not made to animate anything, nor does it try to animate anything. I even said with my animation example: &gt; where I'm actually animating with Angular, **which is totally stupid**... Interactions with Angular are for "User does X, then Y happens", not animation. So this is *precisely* the use case for Angular that mr floydophone is worried about.
In your deC function, you assign the innerHTML of the decoded element to the base64 decoding -- this appears to work well and the decoded value makes it's way into the element. But then you attempt to split the first character of the 'str' string on ";" -- I think what you intend to do here is split the decoded value on ";" -- you should create a variable for the decoded value &amp; split that. e.g.: var decoded = Base64.decode(str); document.getElementById("decoded").innerHTML = decoded; spl = decoded.split(";"); // etc. From there it should be pretty straight forward.
Psssh... set it to 0ms delay and witness 210+ fps. Also, thanks for helping prove my point, silly bear. $digest loops, not so slow, actually.
... You have _so thoroughly demonstrated floydophone's point_ that I'm surprised you can make that comment with a straight face. 1) The fact that your example runs at 200fps in a standard browser means it is not at all a good metric for a general use case. Floydophone said "at scale," not "at all." It's the equivalent of saying that your paper airplane can fly, so Angular must be a fighter jet. 2) Your paper airplane can't fly anyway. It doesn't run at 60fps on my phone and it runs at 14fps on bsdemon's iPad. It does not matter that somewhere, somehow, some browser can run some Angular code can animate squares at &gt;60fps. You're arguing against someone's concerns with performance in a mobile environment, who has stated so explicitly. 
iPads should win an award for shittiest browser on nicest hardware: [Here it is on an old Galaxy Nexus \(aka Nexus 2\) pushing 60fps in the shitty BaconReader browser.](http://i.imgur.com/DczM4Tj.png)
Sure, using words like "crazy dots" can be a little over the top but I tend to use outrageous words when I'm describing processes to people in person, often to the point of personifying code. For example, if I were teaching a friend about creating an event emitter, I might say something to the effect of "this guy (pointing to the event emitter object) is kind of like the mailman. He doesn't care what's in the package or where it's going. He just knows how to get it there." Obviously, you wouldn't want to follow that style of teaching in a written tutorial but you get the idea. I think it's less about professionalism and more about effective teaching. If the way you present the topic (much like in that tutorial you referenced) detracts from the subject itself then you're going over the top.
&gt;I just got fed up with this tutorial which referred to chaining as "crazy dots". It's the very last sentence. Anyhow, if you don't want to read dumbed-down tutorials, just read the API docs, specs, or whatever. No one forces you to google for *XYZ tutorial*.
I made the investment. I want my brain cells back.
Have you tried cheat sheets?
No demo...
Those are usually great. :)
jQuery is a library, AngularJS is an engine. jQuery wraps many DOM manipulation functions in a way that is cross browser, concise and easily chained. It simplifies 'javascript the language'/'javascript the DOM manipulator'. AngularJS is doing something different - it's in effect listening for ALL events and doing a real time processing of those events. It's a way to help write web pages that are as responsive to events as most native apps feel, while still essentially being a webpage/html. Learning Angular is like learning Unreal Engine or the Source Engine. Yes you COULD write your own engine from scratch using OpenGL (jQuery) or even go to the metal but Angular provides a pretty nice way to get realtime DOM manipulation that also allows for some controller logic and easy communication with a server backend. You have to learn how it works and it's particulars but it's overall quite easy to get and use. It's certainly faster than writing some of it's features from scratch.
So is your point that Angular has performance problems when animating things? Or that Angular doesn't have performance problems when animating things? 
Bower has a fantastic Sublime Plugin, which is worth mentioning. 
I will take a look at that thanks.
Speaking of tutorials, whats the best practical you have used? Excluding ones like codecademy
Evaluated angularjs for an internal use case: Setting up a somehwat large recursive structure based form for both information presentation and changing took like three seconds in Angular. Same structure in React in less than a second, even less when presented per CodeMirror-XML (would have liked to avoid teh XML). I'm aware that the use case is somewhat extreme for angular, but it pushes me into setting up all these data-bindings and all the watches which make it so slow, I guess, like others mentioned here. edit: recursive structure as XML file: 19k XML source containing 136 element and 116 attributes. edit2: downvotes for providing details. Nice community!
The code is gone I'm afraid.. Thought I had committed it to a branch, but apparently I have not kept it. It followed some recipe I found on a blog. Not sure which one it was now. It wasn't totally generic. It was supposed to be an editor for an established form of data-structures in our project. But I see where this is going. The user is the problem, anyone who goes beyond angular's very limited approach of what a webapp can be, he who reaches the performance limits is the problem. He does things he shouldn't, bad design, bad to test. all hail the angular! As I said before, the solution I implemented with react would have been viable from a performance point of view, but in the end I decided to go back to XML and pimp CodeMirror's XML auto completion to my needs, mostly because the interface I had in mind didn't work out. But not in terms of information limits, but rather in form of having to replicate all the niceties of a text-based editor for dubious gain. edit: for the record: I spent quite some time getting introduced to angular. Watched all vids on [egghead.io](http://egghead.io/), read the code of a few apps etc. I also have been doing this developing thing for some decades now, I'm a regular spring user, so I think I got the gist of it etc.
Same, nothing happened on keys.
I've got one, but alas they need native apps to run on.
One thing I don't understand about this thread is literally any other method you could use to make a "faster" app could be wrapped in a directive or service. Literally copied and pasted in most cases. I have rarely ever needed to do this, but it was easy when I did have to. 99.9% of anything I've needed to do in angular was more than fast enough performance wise... But like I said, it is well enough designed that you can encapsulate any other code and work it into your project without breaking anything.
If I want to hand-code stuff I wouldn't be looking for a high-level framework, would I? I can just as well use a combination of libraries that do what I want, which I prefer anyway over "one size fits all" libraries. Angular looked promising, didn't deliver for me.
this 1 tech/day thing is a really nice idea. 
http://esprima.org/
What about using the [JavaScript API](http://js.leapmotion.com/examples).
bower is built atop of npm.
This is actually pretty fun mechanics
Thank you very much! :)
&gt; If I want to hand-code **1% of the time** stuff I wouldn't be looking for a high-level framework, would I? FTFY. And good luck finding a high-level framework where you never have to "hand-code stuff". &gt; Angular looked promising, didn't deliver for me. I'm pretty sure you haven't used Angular at this point in the conversation.
My points are: 1. Angular isn't made to animate anything, and yet you can, even though you shouldn't, and it runs at &gt;60fps.. because the $digest just isn't that slow. 2. In typical "click a button, win a cookie" user interaction, no one can percieve a difference of 33.3ms. (50ms - 16.7ms for the mathematically challenged). 3. Since the $digest runs demonstratably faster than 60fps (point 1) in everything but corner cases, and given typical user interaction (point 2) this whole line of argument that it's "slow" is silly. 4. JANK is a horrible word and should never be used again.
It's not the disagreement. It's the lack of solid evidence of the alleged "3 seconds to update" project. Or even an exhibited general knowledge of the framework.
Those are not JS1.7+ though, but ES6 (aka Harmony). JS1.6, 1.7, 1.8 were all revisions of Mozilla's "JavaScript" (with its non-standard additions).
This is a great article, really well written for anyone new to bower. 
I added a link to falcon.js the sidebar of /r/knockoutjs The sub was just started, so it's not popular in the least, but time and effort will fix that.
For instance if you are running an upload site. E.g the admin panel in Wordpress could use this to indicate progress when uploading things, leaving you free to use another tab.
Yes, but it isn't well documented, aside from the code itself, but it was actually used in a product for a client that has been running for over 3 months. The biggest downside is that I'm not supporting anything under IE 9 and it is very limited in scope, but the benefit is that it's 9kb non-minified with comments and has performed quite well. You can check out the code at https://github.com/Akkuma/Rome. A quick rundown. * No classes, only mixins based upon Angus Croll's mixin post * Building reusable, pluggable mixins is really easy * Components are a form of controller + view * No built-in models * Minimal amount of selectors were required while writing code * Bring your own template system and routing system
Yes I will be covering Grunt and Yeoman as well. It is in list. Thanks :)
I'll admit I chuckled at #4. But you're not actually making any points here. You've developed your own facile methodology for measuring slowness and declared Angular fast, even when your _own examples_ run slowly on mobile devices. [This is the most meaningful post floydophone made](http://www.reddit.com/r/javascript/comments/1pdzbz/things_that_suck_in_angularjs/cd1izcj), and your response... you just _blew_ it, you demonstrated that you completely failed to grasp his argument. Couple that with your abuse of fforw below, and I give up. There's no need to continue arguing against an acolyte when it's pretty obvious Angular's momentum (heh) has stalled. 
I mean, wow. Whoosh. 
I use Sublime only for the funny colors. Makes me happy.
love this.
I could also see this for browser games that have recurring turns, will indicate when the next turn is coming up.
For anytime you want to show progress? Clearly someone had a need for it. With the vast diversity of what can be done in a browser I think why is a silly question in this case.
Maybe you need an array? var array = []; array[0] = "blah"; array[1] = "foo"; array.push("bar"); //adds to end alert( array[0] ); //alerts "blah"
why not?
Ahh that makes more sense than using an object. I'll probably use this instead! Thanks.
Thanks for your feedback! I see where you're coming from with regards to the site itself. This is really just the minimum viable product for now, and we're going to try to improve the documentation, as well as approach ways of changing how we present things so that the purpose of the site is understood better. Just so you know, the jQuery plugin essentially takes images that have a 'data-src' attribute instead of the 'src' attribute, calculate's the image's proper height and width, and then sends it to the backend app to properly size the image for the device that is accessing it. I probably need to do quite a bit of work explaining this better!
If board size is always 8x8 and all fields are numbered from 1 to 64 starting from left to right and from top to bottom, then assuming you have the number of the clicked square: top left square is (number-9) top square is (number-8) top right square is (number-7) left square is (number-1) right square is (number+1) bottom left square is (number+7) the last 2 you should figure out yourself You will also have to check if the number of adjacent square is not smaller than 1 or larger than 64 - then it's invalid (such square doesn't exist on the board) and your script should take this into account.
Gracias! thanks for the support, I'll be sure to follow along with /r/knockoutjs
another vote for esprima :)
hey, I'm stuck on IE 8. corporations, man...
Nice. Want to see source
Hmmm I did not know about that. Sweet!
Is this still active?
Last commit almost 2 years ago.
It looks like [the author has moved on](https://github.com/Gozala/selfish/issues/3#issuecomment-12509496) to [a different method](https://github.com/Gozala/method).
If you want to do some independent research, "adjacency lists" (arrays) is the terminology you're looking for. You can construct an adjacency matrix to use for determining nearby nodes. So each node is a row in the matrix, comprised of 1's and 0's. Each 1 means adjacent.
I see. Thanks for the trouble. Makes sense!
You should also subscribe to /r/learnjavascript
kinda boring. i don't know why it needed my camera permissions. i didn't see it do anything with it. 
Bleugh, blob style water physics, the most boring kind of water physics. [Here's a much prettier one](http://madebyevan.com/webgl-water/).
Cool but why does it generate particles something like 100px below where I'm actually clicking?
http://www.reddit.com/r/java Also, WHY????
Wait a minute. What do you mean it doesn't like to have numbers as attribute properties? Try typing this in: var obj = {}; obj[1] = 'Some value'; console.log(obj); You probably are better off using an array for this but it's 100% valid to use numbers as object keys.
Ooo pretty!
I had a C++ course in college that wanted us, as one weekly assignment, do something similar by printing to the console. These things aren't unheard of in training exercises.
yes, it's for a practice assignment. Also, sorry if it's the wrong subreddit!
"Java is to JavaScript as Car is to Carpet"
Telescope dev here, thanks for the link!
That's because you're mixing dot notation with bracket notation. // Good obj.property = true; // Also note that 'true' is all lowercase obj['property'] = true; // Bad obj.['property'] = true;
Short and sweet.
Oops, sorry. It wasn't that way in the original code I had posted or the code I tried to run. I just made a mistake in the comment above. 
i think everyone in programing has had this assignment at least once, lol. i wrote this code about 2 years ago for someone else and have shared it a few times. it should answer ur question. but if u need more help replay here or in [/r/java](http://www.reddit.com/r/java/comments/1pigx1/having_trouble_figuring_out_how_to_make_this/) and i will help u as much as i can. answer: [code](https://pastebin.com/sP5VERYR)
Looks cool, but too many open (old) issues makes me wonder if it's abandonedware https://github.com/lipka/piecon/issues
I'd like to suggest that you look into my postMessage project called [PM.js](https://github.com/ajbogh/PM.js). It simplifies the setup process for postMessage requests and has simple error messages. You can potentially pass back javascript as long as you convert the function to a string similar to this: return ''+function(){}; The receiving end will end up with a string that contains a function that you can evaluate with eval(stringFunction); var myfunc = new Function(stringFunction); eval is generally considered evil, but with the proper precautions (built into PM.js), you can get away with it. Also, what you're proposing is executing a function across domains anyway, so by intent you're eval'ing the returned function.
damm, mine didnt look so smooth: http://tamats.com/games/liquid/
yep, thats just ripples, although the rendering is amazing. But having lots of particles interacting is a little more complex.
The wonders of the internet: let's ask the maintainer and see! https://twitter.com/pimterry/status/395512719794663424
I would say not on everything but on anything that is big and will be hard to manage.
I was about to say, what makes this any better than handlebars, which already exists in my build workflow. That and it looks like a lot of data-binding, which may interact oddly with things like ember and knockout.
I just don't get why everyone has to use pure js for everything
yeah javascript is 100% machine code. good point!
i agree on that. but i doubt that 90% of the audience here did something that big in their career.
I can sympathize with people who don't use a framework. Having used Angular, it's fantastic, easily one of the best JS frameworks I've come across; but that doesn't mean every project needs it. I've worked on smaller projects where ~20 lines of vanilla JS did everything necessary. Remember that not everyone is working on massive, sprawling front ends. 
Id be up for reviewing
can't see the map, just the dots
You make a good point. And it's not just limited to Angular. I've seen 'developers' who call the entire jQuery library for a project that only really needed ~10 lines of vanilla JS. Obligatory StackOverflow humor: http://i.stack.imgur.com/ssRUr.gif
WAT！
Not with that attitude they're not.
How is this related to javascript? This is spam.
This is spam. Packtpub has been on a spam blitz.
404
Haha that's exactly what i'm building. i'll check it out, thanks!
Thanks, i basically went with a similar solution.
commenting so I can return later. ... also, I suspect have some kind of framework knowledge looks good on a résumé. ... probably. Edit: What's with the negativity in this thread? Some serious downvoting people here.
why reply to me ? maybe hes covering the javascript api to interegate the vsphere api ? a quick google shows me there something javascript related. http://blogs.vmware.com/vsphere/2013/02/project-silverlining-a-vcloud-director-5-1-sdk-for-javascript.html
Hyperbole went over your head. But here is an interesting post to read on the topic anyways. http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx
Small ≠ Manageable. Even a simple website frontend with say... 3, 200-line JavaScript files can be hard to look at after a while. Sticking with a framework gives you a community-tested structure for separation of business logic and presentation logic thus giving you better code reuse from project to project.
I wouldn't, that's just what I get asked when I tell people what I'm using - Whatever you are using, you'll always get asked "Why not XYZ?"
 function loadImage(url){ var deferred = new $.Deferred(), img = new Image(); var resolve = function(){ deferred.resolve(img) }; var reject = function(){ deferred.reject(img) }; if ('addEventListener' in img) { img.addEventListener('load', resolve, false) img.addEventListener('error', reject, false) } else { // only used in old browsers var attempts = 0, hasImageLoaded = setInterval(function(){ if (img.naturalWidth + img.naturalHeight) { clearInterval(hasImageLoaded) resolve() } else if (++attempts &gt;= 100) { clearInterval(hasImageLoaded) reject() } }, 200) } img.src = url; return deferred.promise() }
Because frameworks can make debugging a lot more difficult, and they don't always offer a better experience than if you 'rolled your own'. A shitty programmer is going to produce shitty code whether or not they use a framework, so using a framework is no guarantee of success. 
There're lots of good reasons for Node over rails, imho.
Put a slash ('/') at the end of the url... http://11heavens.com/everything-is-a-property-of-an-object-in-javascript/
Lots of good reasons for Rails over Node too, imho. Respect.
Node is just a JavaScript interpreter, Rails is a web framework, you can't really compare them.
Node itself is that, sure, but there are lots of frameworks for node that absolutely can be compared to rails.
As a Rails developer who also knows Node and Mongo well, it's just preference. I prefer Rails conventions and relational databases for the most part.
A framework will let a shitty programmer do a lot more than they could on their own, speaking from personal experience.
Dang, I've only got about an hour and this is 22 pages long. Can someone condense this to something more manageable?
Is this built on top of box2dweb?
I'll go ahead and make an absolute statement: 15 minutes of reading doesn't warrant adding it to your resume.
i like that my GPU fan immediately started running when the page loaded, and stopped pretty soon after i closed it.
certainly not, but finding resources, learning about something and applying it successfully does.
Then compare express (or the other frameworks for node) and rails, not node and rails.
Cool
This is the biggest fucking issue I have with web development. You have to be almost arrogant about your skill and scope to be able to decide upon a solution and not almost immediately suspect there is a better solution you should have used. I've been learning everything under the sun mostly so I can, with some confidence, decide on what is the best for any given project. Having said that, I don't really like Angular all that much for now, but I'm sure I'll find a place for it in my projects once I feel really comfortable with it.
Very clever idea. One thing that would be nice is the ability to display an icon next to all of your logs. It bothers me when an extension logs to the console, because it clutters everything up. But if that extension had a little logo next to all of the logs, that would help to visually separate it from the rest of the logs.
Gonna have to take that up w/ OP, the original comparison wasn't mine.
Good article, Angular.js is an easy framework to pick up, but it definitely needs more articles like this to cover an introduction. I've worked with Knockout and Backbone on past projects, and after working with Angular I think I've made up my mind on a favorite. Just a small point of contention on the last section of the article. MVVM is actually Model-View-ViewModel. The ViewModel acts as a middleman between the Model and the View, but doesn't necessarily control either. If you'd like a good example of a more pure MVVM implementation check out Knockout. It's also worth noting that MVC and MVVM aren't mutually exclusive. With Angular there are actually elements of both, so they tend to describe it as an MV* framework.
I'd be interesting to read these... Outside of the classic complaints about JavaScript, I can't think of a single reason to use Rails over Node. Maybe if I needed to do more number crunching, since JS really sucks at math... but then I'd probably offset that sort of work to Python, which excels in that arena... I dunno. As an employer, Node's advantages just in available talent pool alone are a huge deal.
I was just poeing around.
&gt;There're lots of good reasons for Node over rails, imho. Pretty sure you are OP of this little comment thread.
Does node really already have more developers than Rails?
the ultimate guide to learning angular in one day takes three days to read!
All of your original plans sounds great, don't get dissuaded by other frameworks and tools. If it works great for you now, then stick with it.
Eh, what? &gt; Node.js, why not rails? was posted by /u/regreddit, not me.
Why not just use typescript? - Doesn't throw JS exceptions - I don't have to use bandwidth/cpu power to do type checks on the client
Yeah, that's probably the better answer for production. This was written as an experiment, kicked off by the realization that function.toString() results in the source with comments. Also, somewhat interesting, is that you can use any predicate (password length, etc). Type checks are just the default ones.
Theres a couple of terms for it, in the same realm as buyer's remorse, the grass is greener, etc. It comes down to second guessing yourself when you make a BIG decision like what to base your entire company on. I don't let it bother me too much, I just get tired of hearing it.
Also, RES bookmarks stuff for you
you could certainly webworker out the physics, but because of the way webworkers work - namely that memory can't be shared - you would very quickly reach diminishing returns with regards to if you tried to use multiple web workers. honestly it just seems like a slow engine, box2d, its demos anyway, seem much snappier
Does this actually work? Nothing happens when I go there (latest chrome on osx).
I've been working with angular for almost a year and I didn't know that you could use the filter syntax for scope functions. 
the problem is you didn't do any "looking for knowledge" you came here looking to be spoon fed, good luck with your entitlement attitude it will get you far in your career! 
I've been 'following' them for a year maybe, while the vids look great, that's all it's been, just vids. I think they're on video 4 or 5 over a year. I'm just starting to think that it's vaporware.
The thousands of gems of functionality that rails has at its specific disposal, to vastly boost development time? The very strong testing methodology it tends to follow? I don't like Rails all that much, but I can appreciate some of the unique advantages it can bring to the table.
Both of those hold true for Node as well, I'm afraid.
I'd love to see tables or any respectful comparisons of different choices. There's frequently some overlap, but to get a vetran on framework X's opinions on the pro's and disadvantages would be nice.
Not in comparable maturity and functionality.
stdlib is for suckers!
My theory is that it's a reaction to the rise of frameworks from people who have devoted their careers to *that language*.
What's wrong with using angular on every app? Almost every web app will make use of it's functionality and you can use a cdn for hosting. Even if it's an app that receives numeric input and displays the sum as a result, Angular will still save you time by Sanitizing input and creating data bindings for you.
I'm very happy that people are passionate and willing to make cool stuff with JavaScript for free, but I can't be the only one who doesn't find yeoman that useful? Tried using it today to set up a simple stack that relied on Sammy.js and mustache, and it was just easier and quicker to use just bower. Ymmv, but I haven't seen any point to it.
Compilation in angular means something along the lines of "adding events and interaction to the HTML that is already in the document". If something goes wrong there, a js error will happen, yes, but it will happen for the reason of angular not being able to "compile". So it's both.
For such a specific use case, the ideal developer of said grunt task would be [you].
I'm not a fan of Bower, but Grunt is great. The generators are cool, but they usually come with someone else's opinions attached.
Each generator is different, but I've found the angular generator to be incredibly useful. I'd definitely agree there's some overhead to using one for your project (I hate how long it takes for a generator to scaffold out a new project). However I think it automates some really important things for having a high quality optimized build process, and encourages best practices. Running a generator and having it scaffold out all the boilerplate code, set up a test suite, and download dependencies eliminates a lot of the effort required for starting a new project. One of the grunt processes it sets up can save you a ton of work for building an optimized production version. For example, `grunt build` minifies your javascript, combines it into one javascript file, combines css all into one file, and compresses all your images, then updates your index.html to reflect the changes in script/css files. I can't imagine doing this any other way. 
Would love a compare v.s. [Bonsai.js](http://bonsaijs.org/).
And not a single thing orbited.
Nah, just my thoughts on something that has bothered me for a month or so, having to go back and forth between rails and meteor.
That's really neat! I like it
This does a pretty good job of explaining the high-level event loop process. I think co-routines to do async ops in es6 is going to make all of this even better in the short future.
First off, the buttons have their type set to "submit". Which is going to submit their parent form. To prevent the default action form occurring, we pass the click event into the handler, and call **preventDefault()** on it. The jQuery UI dialog accepts an **open** callback. If you pass a function, it will be called after the modal has been opened. In this case, I'm triggering a "submit" on the form. I've setup a [JSFidddle](http://jsfiddle.net/7GrFC/) to show a working example. &gt; $(".button").click(function(e) { &gt; &gt; // Prevent The Form From Submitting &gt; e.preventDefault(); &gt; &gt; // Open a dialog &gt; $("#dialog").dialog({ &gt; modal: true, &gt; open: function() { &gt; $("form").submit(); &gt; } &gt; }); &gt; &gt; }); **edit** add JSFidddle link 
The reason I did not use jsfiddle in my OP is that it somehow prevents this issue from happening, and I don't know how. When this page is served from a JSP servlet on the server at work, or locally as php on my computer, the form is not submitted. I have tried your code, if preventDefault() is called in the click handler, the form cannot be submitted, even from that open callback you wrote. Also, just a simple form.submit() is not enough, the server code must know which button was clicked. I see that my OP was incorrect on one thing though, the buttons have different names as well, the server code apparently checks for the buttons by looking at if their names are in the submitted form.
I should have also mentioned that you were including jQueryUI incorrectly. The method **dialog** is undefined, so it's going to blow up. 
Weird, the dialog is showing up for me if I open it from other places than in the click handler on the button. How should I correct the including?
View the updated [JSFiddle](http://jsfiddle.net/7GrFC/1/). In this version, we have a hidden input element. When the user clicks a button, we're going to set the hidden element to have the properties from the button.
Hey, thanks a lot for that idea! https://pastie.se/6bec8043 This code now works for me (I had to move the submission to a timeout callback because if the submission is called to close in time to the opening of the dialog, the form submission sometimes cancels its display in Safari on OS X)
Cheers! &gt; $("#dialog").dialog({ &gt; modal: true, &lt;!---- &gt; }); Make sure to remove that trailing comma!
cool! does it do real-time raytracing?
Even though I wouldn't use this in production, there's something nice about using functions instead of the type system that TypeScript has. Given the dynamic nature of Javascript, functions as guards feels like a more natural way to express types in JS. Something like it is even proposed for a future version of ECMAScript: [http://wiki.ecmascript.org/doku.php?id=strawman:guards](http://wiki.ecmascript.org/doku.php?id=strawman:guards)
Learn something new everyday :)
I really couldn't think of any other name :(
Angular also uses an internal $compile to bind it's two-way data binding and make the HTML/component bound to Angular. For instance a string external to Angular could be $compile'd and become bound to the framework for MVC stuff
I see "gravity" all over the place... ;)
'.NET because I work in a .NET shop and trying to introduce and entirely new technology stack and get my entire team trained an on board to use it + approval of my manager + approval of the levels above him is gunna be a huge task'. That said, I do recall a time of which I was explicitly told not to use JavaScript (several years ago), and I have recently and successfully made a push to adopt Angular for a major project almost a year ago.
at the end of the day. you shouldnt be naive and think that cdn solves everything. pure js will always perform better than angular (well its pure js as well :P) but you get my point i hope. and as programmer you should try to figure out better/faster/more simple way to solve the problem. if your attitude is "imma use framework for everything" and youre employed in some software company then its kinda sad imho and im kinda naive too :(
Node.js as a background run plugin name is [nohup](http://stackoverflow.com/a/4018223). 
Hmmm...There doesn't seem to be any mention of wanting reviewers for this book at the link provided. Having said that, i have a lot of respect for Stoyan Stefanov's work in general, and i am sure, that his book would reflect that but i don't think JavaScript the language, the ECMA Spec or the different implementations have changed all that much to warrent a new edition.
Perhaps if you gave each boid some initial momentum in random directions some of them might end up in orbit. Then you could also get away with fewer attractors/suns. The only reason why they don't all plunge straight into the nearest sun is because in some cases they experience some pull from other suns. I [forked your pen](http://cdpn.io/kLpad) and tried it by (a) reducing hosts to 1 and (b) giving each a random initial velocity. After running for a minute or two there are some boids which are clearly in orbit.
Build a similar thing a few months back. Never cared to share it. http://ephimetheus.github.io/planetary/ You can click on any entity (in the beginning there is only one sun). Hint: it gets funny if you make enough entities so that they collide. You can control color and mass of any object you place. I even managed to built an entire solar system with planets and moons in it. It doesnt have trails and performance is improvable (since it calculates the interactions between all entities), but it has a funky space background :)
yea I originally had them going off in random directions, but they were also moving a lot faster and everything had escape velocity or plunged into the host body. so then I started moving away from that, but I like your fork and I think I will go back to it but with a reduced velocity. Thanks! 
I can change the name of the pen, but I don't think I can change the title of the post at this point :P 
I like to review the book but where is the free e-copy to review on? I am currently diving quite deeply with writing some vanilla Javascript libraries for my company. Will be nice to review the book and see if I m missing some good practices.
Lots of demos only ever support one browser these days, kind of feels like the bad old days
It a technical sense yes, but with npm you get gem like capability built in, not as a separate framework. 
No kidding. I'm sure by the time WebGL is truly standard, there will be something else that is badly supported but really interesting. Anyway, we have to make due with what we got and that will always be the case. Standards take time to become accepted.
Benchmarks are always interesting but almost never conclusive, in this case as well. ab -n 10 -c 5 http://host:port/api/posts/?limit=10 Why only 10 requests? For better results I would do something like ab -n 1000 -c 20 The results vary so much that the tests really should be longer. 
The only real valid reason you gave was context switching and I don't really (personally of course) have that problem when working with Ember / Rails or Backbone / Rails.
How about comparing PyPy with Node.js? Node.js being quicker than an interpreter doesn't exactly come as a surprise.
it actually isn't webgl that is the cause often, mostly its to do with chrome's audio api. people like to use that, which is incompatible everywhere else. 
&gt; RES I should probably look into that. :) 
Where do I sign up?
The django example doesnt use prefetch_related and is run in DEBUG mode which does database query logging slowing it down a fair bit.
Yeah !
What don't you like about bower?
Me too. I'd like to review.
I haven't tested it myself but it may work, yes. You'll have to try and see :) The tag should be the same position and structure as it is only the format of the following media which has changed.
Uncaught error: too many vertex attributes :(
I know, I had no idea what to expect when I went to their presentation, but believe me, they are legit. They pretty much gave the middle finger to html5, css3, and are able to use the GPU directly in browser (not a small feat). I honestly think it could be game changing for the web when released. 
You're welcome, hope my feedback helped a little.
You don't need it to save threads. There's a 'Save' button right under the title.
right you are. I'm oblivious it seems. TIL
package management isn't a pain point for me. 
How can I be a reviewer?
Where are you referring to when you say use switch statements? I've been rather busy lately so rushed a few parts of this. I did plan on using such shaders but didn't get around to it yet :) I know pixel-by-pixel manipulation is a fairly slow and old-fashioned way to go about these things. On a side note, as far as I'm aware, gecko does not yet support such filters/shaders. Edit: sepia and negative now make use of the filter property in CSS. Other effects remain the same until further notice.
instead of $.inArray, you can use modulo, which will be faster (O(1) vs O(n)) and do less work: // Left - if key is in column 0 if (key % rows == 0) { neighbors[1] = null; neighbors[7] = null; neighbors[2] = null; } // Right - if key is in column (rows - 1) if ( (key + 1) % rows == 0) { neighbors[0] = null; neighbors[4] = null; neighbors[5] = null; }
It's still a very young project/tool, so all of the available generators might not fit your needs, and depending on your workflow/etc, might not be worth taking the time to write your own that does fit your needs. That said, the other day was working on a quick prototype - I had customized a few generators to meet my needs, and once I got into the swing of things being able to simply do 'yo generator-name mything:mystuff --various options' and have a whole bunch of boilerplate spit out with the naming conventions/etc, and put into the folders I want is pretty nice and time saving. The tool itself isn't very opinionated, but many of the current generators for it are. For one project I'm working on at work - I'm tempted to write up/customize my own generators - as new people join the project, they don't always adhere to some of the standards/conventions that we have when starting to build new stuff. Would be nice if they could simply type "yo generator-project:controller moduleName:controllerName" and have everything spit out with the naming conventions, folder locations, boilerplate, etc that we want. That said, bower and yeoman are solving different problems - one is code generation, the other is client package management, and they can compliment each other nicely in a workflow.
Direct link: http://serkanyersen.github.io/ifvisible.js/ Why link to webtoolsdepot.com? OP please stop blogspamming...
Problems: - Little movement. Humans would normally flee to regroup. - Uninfected don't reproduce. Humans would continue to reproduce, if not more than normal under stressful situations. - Infected don't chase uninfected. Relies on random chance. - Dead zombies don't disappear. Zombies don't travel beyond dead zone. - Uninfected don't fight back, relies on external intervention. It can be assumed that the infection rate would be exponential, where the uninfected could slow the growth by killing a few infected hosts. For each uninfected, they may be able to kill 3 zombies before getting overrun, more with practice.
This is neat but I hate password federation.
Maybe. I work on large web projects and it isn't really an issue.
the more dead from outside intervention, the higher chance of random zombie occurrence? or random death due to disease. With the piles of dead laying around I can't imagine how healthy that last survivor would be. 
Yes please if someone could tell me how to implement oauth in script only. But I guess that doesn't work for security reasons.
pretty broken in chrome. will not load levels at all. Uncaught Error: Cannot find module "collections/Bus" from "collections/LevelBus" vendor.js:66 Posted 1 error to errorception.com 51a79585ee207206390002a2.js:1 Uncaught TypeError: Object #&lt;Object&gt; has no method 'apply' app.js:1034 Posted 1 error to errorception.com 51a79585ee207206390002a2.js:1 Uncaught TypeError: Object #&lt;Object&gt; has no method 'apply' app.js:1034 Posted 1 error to errorception.com 
Also doesn't work at all in Safari. Oh the irony!
Can someone please explain to me how I prevent people from using my S3 bucket mischievously after only the briefest perusal of my JS source?
No. Fuck helping you cheat on a test. 
Ah, thanks for the reference to wrk! AB results don't seem to be reliable. What I want to know is not only one particular elements of the stack. I need to know how the full-stack performs. People tend to use NoSQL paired with Node.js platform so I went with that option. Also they're pretty comfortable with using built-in HTTP module of Node.js on production. But using Django WSGI server? Not so much.
Thanks for the tips, man!
I should really sell this better! The problem is, if you have a menu and you have it at left: -1000px and then you give it a toggle class, lets say 'is-active' -- you can get a nice transition for the intro. But what happens when you take away the is-active class? Do you get that transition? You'll get a transition, probably won't be smooth--and if you're relying on height to toggle the visibility of the element, it will just shrink down to 0 cropping the overflow the whole time. So, this solves that!
Oh, is PyPy ready to be used on production?
I did briefly peruse the article. I see how authentication for users works, but I don't see how authentication for the "app" itself works.
The browser security model doesn't separate the two. So, it your app can upload, so can anyone with the token. 
Just look at OP's username. That's why they linked to it.
My westell modem was even worse than this. Apparently there was some background preprocessing being inserted into the page before it was sent to the browser in order to manipulate the javascript, so you would always end up with weird polarized expressions (by this I mean always true or always false expressions) embedded into the page.
nice very similar to mine :) are you using webgl for rendering? any ideas why yours is not so smooth? 
congratulations, you just saved yourself time by not working for someone you'd have hated working for. move on. there are places DYING for real javascript developers and paying good money. if you're not finding them, you're not looking in the right places.
This is interesting, but a few levels in I'm really not seeing how this teaches JavaScript. You can cast "spells" by calling pre-defined functions on *this*. How is this game going to teach someone how prototype inheritance works? Or data types? Or event binding? Or really any concept beyond calling functions? If you really want to *learn* JavaScript, you're gonna have to take a class or read a guide. Something like this might get your feet wet, but actually learning a programming language isn't all fun and games :/
yep, I use WebGL to create the blob effect (accumulating the gaussian particles in a buffer and then cropping using a threshold). I did mine very fast so the computation of the particles motion is very silly (I didnt follow any article) so I guess my formula sux. On the other hand I compute the distance between all the particles, so when I added more particles it started to go very slow. Any good reading about it? Btw, if you press X in mine you can see the particles.
Yet another attempt at overcoming one of JavaScript's biggest flaws: the type system.
I get what you're saying, Js libraries are generally small and thus easy for a veteran to understand. But compare this to say, a vanilla PHP dev, and one that knows Zend/Drupal and the requirement becomes more obvious. It's a bit like the difference between someone who knows English vs someone who is well read in the works of a specific author. Do you feel that you could have used the framework with confidence?
Yes. I don't know about the latest one, but I worked for a while with previous SDKs and the examples provided in the documentation have always been awful.
I see Google doing the whole `href="javascript:void(0);"` thing a lot and it bugs the crap out of me. Is there ever a good reason for doing this?
Like the article says (and I am guilty of this as well), you use it when you want to have an inline link that highlights when the user hovers/focuses on it, but don't quite feel like putting in the effort to style it with CSS. Without a href, an anchor behaves much like a regular piece of text, except coloured blue (no pointer cursor, no underline effect).
Many Toolkits and Frameworks ease some tasks to the point when those using them don't have to know their stuff, which is a) good, because it lets beginners getting stuff done and b) bad, because it leads to an overall decay of programming/development skills. Still, not using 3rd-party-JS-libraries will always have one of the following reasons: NIH (not invented here, a.k.a. "I can do that better") or it doesn't do what I want the way I want it. You should always question those reasons.
Speed comparison with Angular?
From what I know Angular templating is slightly different from others and not so easy to make a comparison? Maybe you can give a shot and I'll merge it to the test suite. My wild guess is that it will be the slowest on the list.
Wow! Really nice tutorial. I haven't gone through it yet but scanning it gives me the warm fuzzies that some really cool things can happen with pouchdb and online cloud datastores
Well, some criticisms. The "Model" looks more like a ~~Controller~~ Presenter. It's about 90% methods and is emitting events. The "Presenter" looks like classic, untestable JQuery spaghetti. - Where is the Dependency Injection? - How am I supposed to unit test the Presenter? - Why does the model have so many methods on it? - Why does the model emit events? - Why is the presenter updating the model? MVP/MV* frameworks must be testable or there's really no point. **TL;DR: There's more to a good framework besides filesize and a few milliseconds of processing time saved.** **EDIT**: had MVC on the brain, you're saying this is MVP.
Interesting ideas! I would love to see some side by side comparisons for common use cases, such as how you would simulate an "ng-repeat" from Angular with Riot, etc.
Why shouldn't the model emit events?
I perfer to have most of the logic on the Model layer, since it is essentially your business logic and API and all parts can be tested on server side (riot is not yet implemented in node but will be on 1.0). Presenter reacts to the events and most of the code is inside the event handlers. These can be tested by emitting events (fake or real). Riot uses events as the fundamental building block for separating concerns. There is absolutely nothing wrong with sending events. This comment made me assume you are using MVVM pattern (Angular, Knockout etc..) which uses data-binding instead of events and it's a competely different way of separating concerns. 
Models are generally plain objects, as their purpose is to carry data to and from the view. Oberservers, Presenters or ViewModels generally handle the emission and/or consumption of events.
Fat models can sometimes be bad, and I think you know the reason.
&gt; I perfer to have most of the logic on the Model layer, since it is essentially your business logic In MVP.... the "P" should be dealing with that. MVP in a nutshell: The Presenter updates the Model and the View. The Model is just a contract to the data the View will display. 
I like this. But that's most likely because it looks like how I've been writing JS apps for the last 5 years or so, albeit formalized into a smart small library. Nice work!
I suppose it's intentionally a way of not having graceful degradation to a regular hyperlink, so it would be a way of effectively requiring JavaScript (and perhaps the user would see the link destination in their status bar and enable JavaScript if they didn't have it enabled). That's about the only thing I can think of, and it's a long shot.
&gt; most powerful client side framework for building large scale web applications Oh please. No it's not. *Edit after further reading:* OP is either trolling or is incredibly delusional.
Ya give stuff away for free and people kick the crap out of it. Sucks eh? I am on the other hand, intrigued by it. Thanks for sharing.
The point of angular is to bind data. So that if it changes it one place it's reflected throughout the entire project (client side). That way when the user makes a change, or new data is retrieved from the server all child and parent references are automatically updated. Sure you could roll your own, but if you did you would probably end up with something similar to angular, but probably without the test suite and all the edge cases considered.
The 1kb size is a little misleading if its dependent on jQuery (93kb ish). Knockout has no dependencies. 
I'm excited to try this out sometime, but the article you linked pushed me away as much as it pulled me in. There's a such thing as being overly positive when presenting a technology. It can't be the most powerful, the easiest to write, the smallest and the fastest. I'd expect at least one sentence in the entire article to give a respectful nod to the *downsides*. I'm 110% sure that riot.js can't come close to replacing Angular or Ember in a plethora of applications that depend on anything more that simple one-way templating. That said, I'll reserve my judgment until I've tried it. My guess is that it would be good for simple applications but fall short when I need a powerful framework to do heavy lifting.
What is it? Took me a while to realize that a 'slider' was that big thing on top. Looks really cool!
Being a good JavaScript developer means more than understanding the scoping of nested closures and understanding how to debug conflicts in the prototype chain on any browser. JavaScript, much more so than traditional languages like C++, does not exist in a void. You'll obviously be expected to know HTML/CSS, but you need to know other bits. If all you know is pure JavaScript, it's really only appropriate to say you're an ECMAScript 5 developer. For a lot of reasons, my day-to-day job requires writing a lot of pure JS (no libraries, frameworks, imports, etc), but I'd still be a laughingstock if I couldn't sit down and prototype a new app using Ember, jQuery, LESS and Backbone. It really isn't hard to learn the basics of most frameworks and libraries. If you know the main MV* frameworks it's easy to pick up whatever new fad is in-style for a team's next big project. tl;dr: You can't call yourself a JavaScript expert without also knowing the popular DOM manipulation, templating/binding frameworks, layout/styling includes, test frameworks, debugging tools, etc.
&gt; Riot views are as dummy as possible. No conditional statements, loops, or data binding. Great, except we actually need those, so no thanks.
Oh hey! Glad you like it. We've developed this over the last few months while building our companies app - it's really nice to use, and super easy to set up a model + rest controller and start querying from the client. Not sure if the docs really get that across yet, I'll drop a proper guide on there soon&amp;trade;.
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
I agree, Handlebars is already pretty extreme compared to most templates but having nothing is even worse. I'll pass. It's also pretty unfair to claim to be the fastest when there really isn't anything there.
Depends a lot on the the language/framework/library/... you are using. In the Java world "model" would imply logic, "DTO" perhaps not. Luckily Clojure, and some others, have sane abstractions such as data and functions.
I'm curious to see what the next blog will show us
Let me cut and paste one of your own comments: "There was really no need to be an ass with your response." 
Updated today with better interface, also updated the documentation to reflect those changes.
I think this is great! I was definitely confused using Chrome on my first try because the tutorial didn't start and I thought the ogre was my team. Upon loading it in Firefox, I'm very impressed! I'm working on my own learning game for advanced programmers-- it revolves around robot combat where the robots are programmed by yourself for path finding, shooting, and avoiding the enemies. This is a huge inspiration to continue my project.
Curvy models
I don't quite know why the size matters all that much. Sounds like fud.
Kind of cool but when you click the `?` to see examples of the setting, all of the code is mashed together. (Chrome 30)
Handlebars at least has getters (the "#if" statement). Mustache, however...
Some even call them obese.
I'm working on a grunt setup optimised for prototyping simple app using assemble.io More for clickable wire frames and interaction testing rather than a code prototype.
I'd call Active Record a pretty well-established pattern, and most implementations emit events (hooks, callbacks, whatever) at various points in the model's life cycle. The model is not "doing anything" during these events, it's just providing hook points for listeners. For example, the model is the only component that knows first hand when a record has been saved successfully, so I think it makes sense to emit an event there so the UI can pick it up.
#each as well.
This and the modals always show up at the top of the page for me.
Yeah that's essentially the only control structure in mustache that I know of. 
If you know javascript then just say you know the js as well as the libraries. If you know the fundamentals it just makes you a better developer. It also makes learning these libraries easier and you have a one up on someone who just knows basic jquery or angular. Thats like interviewing to be an illustrator and saying, I can draw cats, but only this cat. Frontend developement is all about learning and exploring which tool makes the job better. 
If you load jQuery from a popular CDN such as Google's, chances are it's already cached. 
is this contest still valid?
Documentation for library APIs is sooooo bad in the javascript ecosystem you end up spending all your time reading the source instead of getting something constructive done. Even popular frameworks like Angular have lousy documentation (and Angular's docs are great by comparison to almost everything else). Poor documentation defeats the point of modularizing code in the first place, leading people to implement yet another version of the same library. Due to the lack of time this extra work leaves, the new library is likewise poorly documented. The upshot of all of this is that if you do accumulate domain-specific knowledge about a library and an employer needs that expertise, you become more valuable. 
Yes, but how they are used/understood differs a lot. That is why we have thousands of JavaScript libraries claiming to do MVC right and languages that are claim to be more OO or FP than some other.
not really, but if your app is already in progress...
Possible in theory, if you used asm.js to compile a codec to js.
You can write anything in js. It probably won't be fast enough without asm.js.
Sounds great and it looks like its off to a good start.
Wow OP's post quality alone is light years better than /r/webdev's.
So kinda what /r/web_design have?
From their sidebar, web_design is for "Web Designers who..." fronend is for "frontend web developers who..." Please don't try to lump designers and developers together. Each discipline is important, but have very different viewpoints and objectives.
On one hand, I get what you are saying - on the other hand, if a company is heavily using one frame work or anything - having hands on experience with that is a big asset. For example, I work in a mostly .NET shop - ASP.NET, C#, some classic webform stuff, MVC, WCF Services, etc. While being a good C# developer is important, peoples hands-on experience with using ASP.NET MVC is going to put them above another candidate than someone who doesn't know MVC. I recently had to do some hiring for a project that I'm working on (well, some people for my project, some people for my team in general), and the new project that I'm working on is using Angular JS. One challenges while hiring for this was trying to get 'Good JavaScript' developers, not just 'good jQuery' developers since at the time, the pool of people who actually had hands-on experience with Angular was very low. That said, the one guy who did know Angular as he had built a few things with it (mostly personal/side projects) has been a huge asset to the team. Considering how new it was at the time - you could see how excited and passionate he was about learning something new, and it's translated well into a work setting. It was like "Yes, this thing I've only had time to play with as a personal project, I can now get paid to build real things with!" I do remember needing to reassure a few people though "Hey, it's cool that you don't know Angular - its your core JavaScript skills and willingness to learn something new on the job that I'm more interested in - actually knowing Angular is a bonus". A few people went out of their way to do JSFidlles/etc prior to the interview and send me a link/sample code (without it even being asked of them), "So, I heard you were using Angular here so I did up this quick demo as I learned it two days prior to this interview" which was kind of cool One of the problem with doing the whole job hunt process, and depending at what stages you are being interviewed - you often might need to play their 'buzzword bingo' game - the initial HR person or recruiter that is looking at a giant stack of resumes and is pretty much looking for reasons NOT to call someone. You have 1 position to fill, 300 resumes to sort through - the job description you got from HR says "jQuery, BackBone, etc" and you are not a technical person - your going to drop the people who don't make that one clear. But, if you get to the point of interviewing with the actual like, development lead / technical people and they are still being "oh, you don't know BackBone but know JavaScript? we don't want you...", then it's probably doing you a favor that you pass them over
/r/frontenders would be such a better name :(
for loop, because when you declare a for loop you specify the starting and stopping conditions which seems rather ideal for this situation, dont you think?
I'm down.
That definitely helps, but I still cant seem to get the numbers to sum up. so far I have this: &lt;script&gt; var firstvariable = parseInt(prompt("Please enter the first number", "3")); var secondvariable = parseInt(prompt("Please enter the second number" , "6")); var sumNumbers = firstvariable for(sumNumbers+1; sumNumbers &lt;= secondvariable; sumnumbers++) { document.write("The answer is " +sumNumbers) } &lt;/script&gt; 
Thank you!
Isn't this exactly what /r/webdev is for?
They're definitely related! I would argue that /r/webdev encompasses /r/frontend in scope, but takes a more full-stack approach running the gamut from front-end to back-end (PHP, MySQL, ASP.Net, etc.). I felt like I couldn't find a resource dedicated to the quickly-expanding front end dev world on reddit, so I decided to make one. So yeah, /r/webdev *can* be for front end, but /r/frontend is *only* for front end, which I hope will give people in the field more concentration in what they're looking for.
 var firstvariable = parseInt(prompt("Please enter the first number", "3")); var secondvariable = parseInt(prompt("Please enter the second number" , "6")); var sumNumbers = 0; for(var i = firstvariable; i &lt;= secondvariable; i++) { sumNumbers += i } document.write("The answer is " + sumNumbers);
It looks like you're adding 1 to firstVariable, before adding it to the sum, so when the loop starts firstVariable will be 4. You're using the parameters for the loop to do your math as well. The parameters are to set a starting and stopping point for the loop (in this case 3, and 6). The last parameter is going to indicate how much you want the starting point to move to finally reach the stopping point. Since you want to add every number in between the starting and stopping point that will be by 1. The code inside your loop is where you should be doing your math. You're honestly close, but probably got confused on how the for loop works. :)
How is this different from /r/web_design and /r/webdev?
Nice! I'm excited to see where this goes. 
/r/webdev is full of PHP noobs. /r/frontend will be full of JS noobs.
And /r/javascript will still be full of JS snobs who downvote everything. Post about a framework? Downvote. Post that so much as mentions Coffeescript, Livescript, Typescript, or Dart? Downvote. Post about a legitimate JavaScript question? Downvote. Post about things you've written in JavaScript? Downvote. God, this is probably one of the worst, snobbiest subreddits on this site.
I'll zip over there right quick and ask "what should I learn to be a front end developer?" That'll fix 'em.
Keep in mind that a "66% like it" score (e.g. +10, -5) is very common on Reddit. There are always some downvotes.
Based on the [proxy pattern](http://en.wikipedia.org/wiki/Proxy_pattern), i try to utilize the Angular $injector provider for creating dynamic proxy objects.
And yet on this sub there seems to be an abnormally high amount of "50% or less like it" posts.
For the lazy: http://www.reddit.com/user/wayspurrchen/submitted/
This should be pretty easy, have the value output into a form input (text box, text area, etc) and attach to its onchange event. Onchange update the background color, the only hard part is determining what the color should change to and what happens when the value drops below the minimum color value.
Don't code the transition in JavaScript - browsers already have built-in colour transition processing. All you need to do is set the colour yourself. Example: http://jsfiddle.net/g105b/jq8F3/
I see the line num 48 as: number = (parseInt(newnumber, 10) * parseI(number, 10)).toString(10); Are you sure its parseI, instead of parseInt?
Solved. http://jsfiddle.net/7FQGe/2/ This worked instead. They clearly stated that they wanted for loops, which threw me off.
You're setting numberofdecs = 0 right after the for loop that would have incremented it. It's also strange that to check for a decimal, you're checking if it's not a number, rather than if it is a decimal point. You're also not appending a decimal to the number if numberofdecs === 0 - you're calling click() on totaldiv, which isn't defined anywhere. 
I'm hoping it doesn't become a dumping ground of jquery modals and bootstrap themes.
Restart the server.
I usually also start with just using `done` but sometimes I have to do a few async calls to make assertions — that usually turns my code into a callback pyramid. The example of spec implemented with `mocha-fibers` which tests express API with supertest: it('allows creating a commit with parents', function() { var res = post('/git/commits/', { message: 'Me is commit', author: { name: 'Author', email: 'author@example.com', date: toUnixTimestamp(new Date('Fri Nov 01 2013 03:33:09 GMT+0400 (MSK)')) }, tree: 'fa2ab425dac5ac087df831bdf2c1db597238ce0f', parents: ['5fb3542084ca76a980bca4a3413ac3eb45312457'] }); deepEqual(res.body, { sha: 'bca38c69773b07ee04e616e49a51415c31683e0a' }); var commit = repo.sync.getCommit(res.body.sha); equal(commit.oid().sha(), res.body.sha); equal(commit.message(), 'Me is commit'); equal(commit.author().name(), 'Author'); equal(commit.sync.getTree().oid().sha(), 'fa2ab425dac5ac087df831bdf2c1db597238ce0f'); equal(commit.sync.getParents()[0].oid().sha(), '5fb3542084ca76a980bca4a3413ac3eb45312457'); }); Imagine now all calls with `sync` use callbacks instead.
&gt; W3Schools offers certifications whose value is highly debatable… No employers recognize or respect W3Schools certificates. Unlike Microsoft’s MCP or Cisco’s CCC, W3Schools has absolutely no authority over the technologies for which they claim to provide certification. Unlike CompTIA’s ANSI/ISO accredited certifications, W3Schools has no support from governing standards bodies. [w3fools](http://www.w3fools.com/)
Actually this is exactly what /r/web_design is for.
I agree but I was looking for something Certificate my knowledges where I can do in a hour and pay with Credit Card. Do you know one better?
Yes! Indeed! I think this make the difference (is already done something, I just need to refine for publish it).
Just for make clear, I don't do the test, thinking I will get a plus value, I just did it for fun and for see what was inside, I'm not intentioned to put this in my cv or even in my webpage and so far for use for find a job. But still I didn't find alternative for a cheaper Certificate with more quality.
This. Certificates (for programming) are largely worthless, especially if they are done in an hour online. The most valuable thing about certificates is they help identify the _employers_ who rely on them so I know which companies to avoid.
This looks nice. I've been using promises to flatten things out a bit, but that only goes so far. When I use phantomjs for test automation even reading simple properties is async, so using fibers even just for tests does have some appeal. One issue I run into with promises is that when there is a failure the error strack trace is worthless. What kind of stack trace do you get when using fibers? If that last equal() failed, would the stacktrace tell you which equal() call failed?
Stacktrace will be as you would expect with synchronous code, it will tell you exactly what failed and proper callstack, so it's even better than with callbacks.
Fixed it; cheers
Ever thought about reading books that don't teach JavaScript in a manner that just describes how the things are done, but special ways to use JS and why they are done the way they are done? Ever read "JavaScript: The Good Parts"? And excuse me, but the Codecademy course isn't going very deep. It perhaps covers hardly the first quarter of what my favorite introductory JavaScript-book teaches but way more in the manner "The things are done that way" and not really explaining why they done the way they are done. In view of that I would check if you really studied the right or better said enough sources. Btw, there are some more O'Reilly-books like about patterns and functional programming in JS that might help you get an other perspective. But at the and it won't help to read things until you start just to do things. Program some things discuss them on Stack Overflow, do mistakes, learn from them, so you will get experience. And perhaps it could be helpful not just to stay with JavaScript, but to learn and work with some other languages like C or Python too, to get some other perspectives. http://learnpythonthehardway.org/ would there be a nice entry point.
`?` Is syntactically important, so you can't use it in function names. The `isWhatever` idiom comes from Java, the closest syntactic neighbor JavaScript has. 
I should have at least tried what I was talking about, I feel a bit silly. But, at the same time, I'm curious to hear about some of the conventions or techniques you guys use to aid readability.
Learning javascript isn't a linear thing -- as a language, it borrows features and concepts from other languages that make a single angle of approach difficult. My advice is, since you have a basic handle on the language, is to start tearing apart libraries and frameworks to see how they work. Ember is huge and semi-magical, so probably not a good place to start. I learned a lot from breaking out jQuery functionality and reimplementing YUI3 modules. The only way to get better at a language is to use it to solve problems. If you want to be exposed to new concepts, I would recommend Functional Javascript by Fogus, or [Javascript Allongé](https://leanpub.com/javascript-allonge/read) to learn functional-styled JS programming.
Oh! That's cool. Just completed the invite katas. The first one took me a bit of thinking… and it's actually stuff like that which gives me the most trouble. But I got it, and actually understand *why*, so I guess I am learning a bit :)
Currently reading through [Effective JavaScript](http://effectivejs.com/) and it's much more in-depth than a "learn js" book, highly recommend.
Thanks. This and "The Good Parts" are going on my reading list.
Reading through *JavaScript Allongé* now. Thanks!
I realize they're telling you to use for-loops for this, but if your intended purpose is to determine if the number of decimals in a string is valid, this can be done in a 1-liner : return str.split(".").length &lt;= 2; 
I didn't say, that sidestepping would be a good idea for a novice. He calls himself kind of experienced and just in need of other perspectives. I told him how he can get some...
Learn a framework that interests you. Backbone, ember, angular, whatever. It's all the same in the end. After that, stop worrying about what framework you use and go make something beautiful. 
If I can add [this one](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752) to your list I think you'd find it helpful. If you already know design patterns well those parts may be review, but the chapter on functions is really good. I got much more out of that book than "The good parts," although I haven't read "Effective Javascript." Good luck!
Since `$()` essentially returns an array you can use [`Array.prototype`](http://mdn.io/array.prototype) methods on it. Something like this might work if you provide a function that sorts by `name` as an argument to [`sort`](http://mdn.io/sort) AddPostRenderCallback(ctx, function () { var groups = {}; $('.ao-srch-item').sort(function (a, b) { if (a.name &gt; b.name) return 1; if (a.name &lt; b.name) return -1; return 0; }).each(function (index, item) { groups[item.name] = groups[item.name] || $('&lt;div class="aoDeptGroup" id="' + item.name + '"&gt;&lt;div class="aoGroupHeader"&gt;' + item.name + '&lt;/div&gt;&lt;div class="aoItemHeader"&gt;&lt;div&gt;Site&lt;/div&gt;&lt;div&gt;Department&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;').appendTo('#aoDepartmentsCtrl'); groups[item.name].append(item); }); }); 
Fork this: https://github.com/rmurphey/js-assessment
Also I thought this was a good read: http://dailyjs.com/framework.html Because it took popular features from other frameworks, broke them down, and improved them as they built their "own" - certainly helped me with learning how to go past "oh ok, that worked - but how/why?"
Definitely added!
So… I've been messing with Codewars all day, now. I can't thank you enough for mentioning this. What I love is that I can do my own solution and once it works, I can see other solutions. Then, if I don't understand why the other solutions worked, I can go and research it. This is a really great site… Unfortunately, I'm afraid people may not see it as a learning site, but a "show off you skillz" site, and that is truly unfortunate. I feel like this is helping more than anything else I've tried so far.
Your solution looks much cleaner than mine, but won't it create a new div.aoDeptGroup for each item rather than actually grouping items in them? Assuming there are multiple items in each group.
Cool, I really like it too. I think things like this are much more constructive, b/c they are active vs. passive. You have to labor through figuring it out your own way, and then seeing possibly a better way is your reward. I think that is how people truly get good at things, struggle. Keep striving!
You know that punchline of "I didn't know they stack a pile of turds that high" ... well I don't mean any offence but check out that Distal logo
I'm not sure if I should vomit or applaud.
If I had gold to give you… I would :(
You're implying that those groups of folks are mutually exclusive
Vomit 
Now I can program like a wannabe british rapper
This is the book that will take you from intermediate to pro.
Troll harder.
Feel free to shoot me any questions you may have about Ember. My personal experience with it is that I feel like I'm a better developer for having learned it, and I hope you'll stick with it. You can learn a lot by looking at its source code as well. There's the top user-facing API, and if you look at the implementations, it's layers of nice APIs, until you get down to the bare metal JS, which is the ugly stuff. I learned JS around the same time, got sidetracked with server-side, databases, some game dev and iOS stuff, and have had a similar experience. Personally, I think you're best off sticking with a framework. There's value in learning the deep dark stuff in JS, for sure, but presumably you want to make things with it. JS is so flexible, and there are so many different ways that you can do things, embracing the confines of a framework, I think, yields tremendous value. It becomes easier to work with other people when you can just speak to your teammates in terms of higher level ideas that have been abstracted away for you as simple idiomatic use of the framework. One Ember project is a lot like any other Ember project, so you can swap Ember devs in and out with minimal friction, and I think that'll be huge going forward.
wow
You're right. Updated to support groups.
I know I am not a good programmer yet, but how can this be killing me? function multiply(a, b){ a * b; }
While clapping
Yeah… I'm really enjoying Ember. I've even started my first "real" app with it.
What the fuck is this?
That's damn funny :) 
I was desperately trying to find a module loader that would let you define dependencies using promises. I couldn't find anything and seeing as promises basically get your dependent management done for free I thought I'd see what I could hack together with whenjs. It's very much a sketch at the moment but I'm liking how it's shaping up. I'm still surprised that I can't find a module loader that works this way. Is there a project I've missed?
One thing I've started doing that I really like is, when a line needs multiple lines of explanation, I'll comment it with a trailing block comment. e.g. doSomethingVeryComplicated(); /* This very complicated thing was chosen for such and such reason, and you shouldn't use doSomethingVerySimple() because it won't properly deal with whatever case. */ For me, it makes it much clearer what the comment is addressing than putting a block comment above the line in question, or wherever else you might put it. I don't know anyone else who does this, though.
such usefull &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; how amaze &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wow 
One of the disadvantages of frameworks is bloating: there is functionality you don't use but that still is loaded, because it is part of the framework. Frameworks like jQuery and Mootools use relatively a lot of resources for what they do... They are right to say that VanillaJS should have the best performance, if used correctly. The catch is: if used correctly. For it is easy to make VanillaJS bloated because you have to rewrite a lot of functionality on your own. It is simply impossible to write them as good as a large community like jQuery does. If you get the job and you think the VanillaJS-style is just slowing you down, write some tests to compare between the Vanilla way and other implementations. A well written test might convince the project manager to switch to a more easy-to-use framework.
http://knowyourmeme.com/memes/doge
Nice! But wouldn't you run into that same trouble as the PHP equivalent does? http://www.php.net/manual/en/intro.rar.php *edit: if you really were to implement compression features as your TODO is stating right now
You've outdone yourself this time, I think. Awesome work, but brace yourself for the horde of neckbeards that are going to balk at your usage of "HTML5".
That depends very much on the application. If for example all DOM queries you ever use are by ID, you can do rather nicely without sizzle. document.getElementById(...) is not exactly a pseudo-framework. Yes, if you work with vanilla JS, you'll probably create some tools of your own, but those are mostly simple, small and do but one job each. If you work in a big team and speed is not too much of an issue, I would still advocate to use a toolkit like jQuery, especially for cross-browser-issues.
I think you're right that a good approach would be to extract well tested and, as you say, fast library code from an existing library. Very much depends on the constraints of the project.
You mean function multiply(a, b) { return(a * b); } Perhaps?
Better than coffeescript.
haha PoopStack Overflow
A lot of the Sizzle / jQuery benefits tend to focus around how many browsers you need to support and how old they are. If you're only focusing on modern browsers, then Sizzle is unnecessary for you just use -&gt;querySelectorAll
I don't think it's the best way of thinking - but depends on the scale/scope of the application an the level of talent they end up hiring. In the end, for anything reasonably complex - they will probably end up developing their own mini framework to accomplish what they need to get done, and depending on the skill level of the developers - it could end up being faster than an existing framework, or - it could end up being much worse. 
Yes, what maximinus said, you need to return the product. Otherwise, the function will multiply the two parameters, but it will only exist in the function's scope.
Something you might find useful is to write the summing part of the program as a self-contained function. function sumRange(x, y) { var result; // perform the necessary calculations on x and y return result; } Then, the rest of your code can go as follows: var firstvariable = parseInt(prompt("Please enter the first number", "3")); var secondvariable = parseInt(prompt("Please enter the second number" , "6")); var sumNumbers = sumRange(firstvariable, secondvariable); document.write("The answer is " + sumNumbers); This will give your code a much better structure, as you've separated out the core functionality from the business of asking the user for values, and of printing the result to the screen.
I should've really wrote *decompression*, sorry about that. Yes indeed, the RAR licensing prevents software from being created which can produce the format but allows software to read the format. The TODO means support of decompression, allowing for files within compressed RARs to be decompressed before reading. This is quite a large task as there are a couple of methods RAR uses for compression, so currently **only zero-compression archives are supported**.
That's one standard way to do it, except you should `return arr.map(...)` because map does not modify your original array. You can also use bind, which is a tiny bit more complicated, to pass in values as parameters to your map function.
any chance you could give me an example ? sorry if it's too much to ask !
&gt; Sequelize has transactions "on the roadmap" for 1.7.0. Sorry, I don't trust any ORM or database library that doesn't support transactions out of the box. Indicates a severe lack of understanding of ACID. Anyone who doesn't understand why transactions in a pooling system indicates a severe lack of understanding of ACID. Also, MySQL isn't always ACID-complaint :) Not trying to sound like a dick, but some computer programmer's egos are just way to high to grasp and understand the situation fully. I'd be more wary that Bookshelf so easily placed transacitons in with no concept of pooling.
Hacker news at least had a discussion over how this is an excellent non-trolling use of one's talents for no purpose. plz console.loge with ["cheer up","reddit"]
Vomplaud.
 function addOne(arr){ var one = 1; var mapped = arr.map(function(a){ return a+one; }); return mapped; } In this first example, your map callback knows about `one` because it's declared and defined in the `addOne` where your callback is created; and the callback doesn't have its own `var one`. In this second example. `.bind()` is pre-populating the `one` parameter with the value `1`. function addOne(arr){ var callback = (function(one, a){ return a+one; }).bind(this, 1); var mapped = arr.map(callback); return mapped; }
that sub is downright terrible.
The next version of Coffeescript.
Thank you very much that made it much more clear :D
wow
While querySelectorAll returns what you need, jQuery lets you easily do stuff with it. Otherwise you will need to iterate over the result manually.
[VanillaJS](http://vanilla-js.com/)
such brave
Why are you linking me to that?
I would have thought most of your issues would be around network latency? Either way, the vacancy then goes on to cite YUI experience as desirable...go figure
So far as I know, there is no VanillaJS framework, it only refers to plain JavaScript. The site I linked is a joke that presents VJS as though it were a framework.
Would appear to strongly answer your question.
If you would link the JSFiddle, we could take a look at the problem instead of wasting time on wild guesses.
Wow, I never *actually* read past the title and thought it was a real lightweight framework. Never caught the joke, kept reading "VanillaJS" and thinking it was something real. I guess I'm an idiot.
Yeah, I fail to see how writing a compiler is considered trolling.
I use straight up backbone, no fuss. I have a setup with grunt and require that helps me do a lot of things and program in a fashion that closely resembles how I would approach a language that is more refined than JavaScript. Coming from AS3 and CoffeeScript, the way angular works seems very unorthodox to me, therefore I avoid it.
Haha, sorry. In my defense, English is not my first language, and I found the "framework" before being familiar with the expression "vanilla something". I'm glad I didn't say something like "Duh, I just MENTIONED the framework". I decided to ask in case I was missing something.
&gt;'uss-js-fascade', 'uss-js-encrypt' If I understand correctly, it sounds like you just need to make those double quotes.
I haven't actually tried Angular neither, but it felt a bit like magic and I didn't like the syntax. I'd like to hear the opinion of someone that has used Angular in depth, though. How do you use Grunt in your workflow? What kind of tasks do you automatize? 
Let the caching of jQuery on Google's CDN wash your worries away. jQuery (and other good libraries) will never be your performance problem. Your concerns are correct, and the employer doesn't know what they are talking about. If they're adamant about crap like that -- you deserve better.
the syntax? it's plain javascript...
I go oldschool. HTML / CSS / Javascript
I tend to not use parens when returning. Am I wrong? It's just a style preference right?
escape the single quotes by prepending a backslash to them, like so: &lt;form id="uss-js-encrypt" style="display: inline;margin: 0;padding: 0;" target="_blank" action="http://www.url.com/interactive" method="get" onsubmit="return FormName.util.encryptForm(\'uss-js-fascade\', \'uss-js-encrypt\');"&gt;
I'm a big fan of knockout; lightweight, powerful, doesn't make many assumptions about your app or structure. At the same time it's not as powerful as the big boys (ember/angular/backbone), but *most* of the time you don't need all that anyway. Definitely worth a look if you're trying to build something that's not particularly huge.
I looked into it a few months ago when I started. I read here that complex UI were a bit difficult with KO: http://stackoverflow.com/questions/5112899/knockout-js-vs-backbone-js The app I did had (from my rooki point of view) a fairly complex UI, so I decided to go for Backbone.
Backbone. I wish the views system was better though -- even with Marionette managing views and creating views is a major pain. The benefit is the modularity, but the negative is restructuring anything takes a lot of time. I assume angular does better with its directives, but is weak with modeling. Since modeling is the best part of Backbone, I've been championing the creation of a new framework that mixes angular and Backbone. It shall be called Bangular and it will be awesome. 
I like Marionette's extensions to Backbone -- saves a lot of the boilerplate, especially in Views.
Awesome thanks! I find out interesting to see how different people will do different things :D 
doge loves hoge! [grunt-dogescript](https://github.com/Bartvds/grunt-dogescript)
why did I upvote this
Check out the DocBlockr plugin. It has tons of helpers for creating comments in JS. For example, if you type `/**&lt;TAB&gt;` above var method = function (foo, bar) {} it will expand to /** * [doSomething description] * @param {[type]} foo [description] * @param {[type]} bar [description] * @return {[type]} [description] */ var doSomething = function (foo, bar) {} with tab jumping betweem the bracketed sections.
That's pretty cool. One readability thing I picked up from reading QUAKE source code is making little flairs for every function like so: /* FUNCTION ONE */// function functionOne(){} /* FUNCTION TWO */// function functionTwo(){}
My biggest complaint about BB is the amount of boilerplate to get two-way binding which is something that comes OOB w/ AngularJS. I'm not saying one is better than the other (I really like BB models), just that I write a lot less code in ng. I never got a chance to try out Marionette - maybe I should give it a try.
There's [a pretty good question on Stack Overflow](http://stackoverflow.com/questions/770523/escaping-strings-in-javascript) that might help you. If you escape all the single and double quotes as \' and \" respectively, you won't need to worry about only using one type of quote within a quoted string. function addslashes( str ) { return (str + '').replace(/[\\"']/g, '\\$&amp;').replace(/\u0000/g, '\\0'); } I haven't tested it, but it looks good.
Honestly I think it really depends on what you're trying to accomplish. I am personally sick of all the back-and-forth between emberJS and ng people claiming 'we're better!' I have used Backbone, Angular, Knockout and a few others and wihle I personally prefer AngularJS at the moment, I can see how in certain situations I might want to use Knockout or BB. **tl;dr My favorite depends on the problem at hand.**
The title was the link.
javascript is turing complete so all applications will eventually be written in JS. According to the law. 
Looking at TideSDK, you've gotta ask one tough question: Why would anyone pay/donate for that? Donations are what they are, and they likely aren't going to keep anything afloat by themselves, even if that might annoy some of the dreamers out here. Now, as someone who likes to give back to the open-source community, there are two questions I'd ask myself before going into any project with the goal of making enough money to at least survive: - Could I provide _value_ to this project if it was fully open-source? (i.e. support, SaaS, implementing new features for a price, etc...) - If not, are there any components I can open-source, or open-source components I can use and give back to? I've been involved in a lot of different business models that have an OSS component. My colleagues create and support premium features for a sizeable OSS tool, and I've been writing OSS components which are part of a SaaS (Basically, the value isn't that much in the component themselves, but in the service that keeps them running smoothly.) In all that time, I haven't figured a way to spend all my time writing OSS and still getting a paycheck. Best I can do is compromise. If I could live off donations, I'd be doing it already :)
ok
I'm the author of Fabric.js — open-source javascript canvas library. I built it for use specifically on our e-commerce site (printio.ru) but made it open-source from the start. While entire site infrastructure is obviously closed, Fabric — being one of the (main) tools used on a site — is licensed under MIT. Why open-source? - Better code (modularity, testing, bug hunting) - Reduced development cost - Easier hiring and recruitment - Good cause
To me it is just hands down the best way to develop and maintain software. Makes you think twice about pushing that quick hack, a ton of free and inspiring amount of work and input, testing, and other collaboration. More eyes to spot bugs. best way to learn from other people.
and if not written in JS, then at least compiled to it.
Angular is the best of them all. Knockout is nice, but it is stranger to the DOM, not like Angular. Angular and DOM are the best of friends. Not to mention how very easy it is to test Angular apps. Backbone I hate-lack of databinding is big NO for me.
I work at a company that's a strong proponent for Open Source. Our open source community offers a lot more than code commits. The open source community gives us insight to where we need to push our Enterprise solutions to. Our open source product is perfect for thousands of companies, but often times those companies using the open source version outgrow it. Not only do these companies need more broader features, but they also need customizations and support. 
It's a style thing coming from a Lisp programmer.
Generally, a product partitions naturally into a set of packages. Most of these are not specific to your product domain, and if you release these to the community you can get the benefit of community support (and the use of of packages that others have released for the same reason.) The few pieces that do specifically relate to your product's domain remain proprietary.
What I like about using a block comment the same way I use curly brackets is that you can't just delete the line without breaking the code, so you force a little more deliberateness on the part of whoever's maintaining it. They have to read the comment, or I guess they're just really brazen, and they were going to destroy your codebase anyway. My brain is also used to the convention of indentation like this signifying something's dependent related to its parent.
Hey, so I used to work at Canonical, the producers of the popular open source linux distro Ubuntu. &gt; 1, why do you release open source software pretty simple, its a development model distinct from traditional development models, it allows others to contribute. most open source software is improved from itch scratching. that is other people like the software but need it to do slightly more, so they scratch their own itch and contribute back. it works wonders. &gt; 2, can you make money from open source? heeeellll yes, can you release a small js library and expect to make anything from it? god no. the code commits back are worth their weight in gold if you get any so appreciate them ;) making money from open source really isn't that difficult for a company to do though, you just have a different model than the traditional point of sale system. you aren't making money from giving people the software, you are making money via other means. support, paid improvements, large scale installations and support, the list of things you can do with open source is really only limited by your imagination. honestly in this day and age its probably harder to make money as a new piece of software from traditional software selling means. 
Serious question. Why does coffeescript get so much hate around here?
I am the lead developer at an early stage startup, and I have open sourced the framework we built on top of node.js + backbone + marionette as an exercise of engineering purity. We have various projects going on that require us to have a very high level of code-reuse, and building each individual component as a properly abstracted open source module with individual documentation, tests and dependency tracking is an absolutely critical part of how we get stuff done. It allows us to grow our team more easily, because it reduces the learning curve, and it works as a sort of marketing tool by putting stuff out there to attract other programmers. The single biggest reason to open source it though has been, that it __keeps us honest!__ We can no longer allow ourselves to make a quick project-specific hack to a module here and there, or to have edge cases be implemented inside one project and then be tripped over again and again. In my mind, everything is open source unless we have a good reason not to open source it. The business value in your company should really not hinge in what is delivered to the client anyway.
I've been using their JavaScript API to layout classified ad data via JSON from the web back end into the indesign document for the print edition of a local alt weekly since cs 5. Such a time saver!
I have been writing AngularJS for about 6+ months now, and I really like it. You can look at the HTML and get a pretty good understand of what it is doing without having to dig through tons of javascript. I worked on another project that used backbone and trying to find out how things were being setup / modified / event hooking took looking at a few files at the same time. When you start throwing in requireJS and templates it would make finding out where the HTML even came from somewhat hard. One dynamic page became hundreds of JS/coffescript/html templates... No framework is perfect, but AngularJS seems to have more pros than cons for me currently.
A few points: 1. JavaScript has optional semi-colons, and so does CoffeeScript (you can use them if you want, but leaving them out won't cause issues like they can in JS, such as assigning a variable as a function, followed by a closure) 2. Almost every JS dev knows to indent their code properly - if you do this then the semi-colons are essentially redundant. Your eyes follow the structure of your code by its indentation. There's nothing inherently "readable" about hundreds of lines of code that look like: }); }); } } 3. You can write unreadable code in any language. Period. The readability of your code depends on how you write it, and it's just as easy to write JS that is difficult to read. An experienced Coffee developer will not have any more trouble reading well written Coffee than a JS dev will have reading well written JS. The counterpoint to your argument is that Coffee adds some features that quite simply make code more readable. Compare the following: var item; for (var i = 0; i &lt; list.length; i++) { item = list[i] // do something } vs: for item in list # do something 3. Could you give some examples of unoptimized JS that came out of the Coffee compiler? CoffeeScript really doesn't do *that much*, just provides some shortcuts for common JS patterns. So if your code comes out unoptimized, it would have been unoptimized if you wrote it in JavaScript. The only exception I can think of is when you are unaware of functions automatically returning the last statement, which could occasionally cause an issue. This is not really a problem if you stay aware of what your functions are returning. 5. The outputted JS really isn't that hard to read. Could you provide some examples of this, too? 6. Your last point is really just a ridiculous slippery slope fallacy. There are other languages inspired by CoffeeScript, and they all compile directly to JavaScript. No one is going to make a serious effort at designing a language that compiles to CoffeeScript. The reason JavaScript is the compilation target of choice is that it is *the only language that can be run natively on virtually every device*.
I've written a few Backbone projects, including using Marionette and Require. I have been involved in an Angular project but I can't say I went into a ton of depth with it. After my brief experience with Angular, I was turned off by how it looked. I'm relatively motivated by the aesthetic of code-- I realize that would be a horrible reason to completely write it off, so I wont. I write Ember now, and have been for a few months. The learning curve was quite difficult because the api has changed over time, but now that it is past 1.0 and I've written relatively complex projects with it I can't imagine switching away. Strengths: - Structure - Convention. There is an ember way of doing things. Thus, learning curve is a bit steep. - Elegance - It looks good, and between the router and handlebars templates, it's not that hard to jump into a foreign codebase and know what is going on.
&gt; The business value in your company should really not hinge in what is delivered to the client anyway. I'm not sure how to internalize this. It seems some sort of contradiction in terms, ultimately it's the client who decides if your company has value... isn't it?
&gt; only limited by your imagination. I guess that's where I struggle, even if its not a small library but a larger more complex application built on JS/HTML, it seems unless you can think of a bundled service to pay for with it most people (especially developers) are not willing to pay for it. Large companies may be willing, but even those are starting to snub their noses at the idea of support contracts steadily (see redhat). I'm sure there's still money to be made targeting enterprise. I guess what I'm asking is if open source demands it to be free. Consider if you were to release the source code for an application, state it is under an explicit license that must be purchased, but you get the source code with it would that be considered "Open Source" ?
1. Semicolons are best practice in javascript because it is possible to have unexpected results when you leave them out. For example: var foo = function() { //... } (function() { //... })(); is equivalent to: var foo = function() { //... }(function() { //... })(); There are no cases like this in coffeescript - you only need semicolons if you are writing multiple statements on one line (and why are you doing that, if you care about readability?). Also, a proper JavaScript compressor should **not** break your JavaScript if you leave out unnecessary semicolons. 2. None of these things ever happen in my shop - we have Coffee devs using different editors on Mac, Windows, and Linux and we have 0 issues like the ones you describe. But I disagree that brackets are "easier to manage". Either way, you are going to be managing whitespace for any shared code (or at least your team members would appreciate if you did). There's nothing extra to manage in CoffeeScript. 3. No, I was not wrong, both of my examples loop through *arrays*, not objects. And your JavaScript for looping over an object is wrong. It should really be: var item; for (var key in list) { item = list[key]; //... } The equivalent CoffeeScript of this is: for key, item of list #... I don't know where you're getting the whole "native JS devs know more about JS than coffee devs" thing... For one, you should probably stop using for...in loops to loop through arrays. 4. This is simply a false comparison, because CoffeeScript does not really introduce any new constructs to the compiled JavaScript. You write Coffee using the same logic that you would write JS. The JavaScript outputted by CoffeeScript is just as efficient as hand written JavaScript, because at the core, you are still writing JavaScript. 5. The point of CoffeeScript is not so much to save time *writing* code as it is to save time *reading* code. The idea is that you spend a lot more time reading other people's code (or your own code months after writing it) than you spend actually writing code. The fact is you need to have a deep understanding of JS to write Coffee; the purpose isn't to avoid learning JS. But CoffeeScript, when written well, allows you to portray your program logic clearly and concisely. If you need even more readability, you can write in literate coffee, which is an executable markdown document. I'm sorry, but it shows that you've never actually used CoffeeScript, yet you're making assumptions about it that are simply **false**.
I like how the job description listed JQuery as a req, but stated no libraries will be used. Curious. 
 'foo \'bar\' baz' "foo \"bar\" baz" 'foo "bar" baz' "foo 'bar' baz" In single quoted strings, single quotes need to be escaped. In double quoted strings, double quotes need to be escaped. Otherwise you'd terminate the string at the first occurrence of the used quote character. Makes sense, right?
&gt;Semicolons are best practice in javascript because it is possible to have unexpected results when you leave them out. For example: ... There are no cases like this in coffeescript - you only need semicolons if you are writing multiple statements on one line (and why are you doing that, if you care about readability?). Also, a proper JavaScript compressor should not break your JavaScript if you leave out unnecessary semicolons. Yeah, like I said, there are some cases where semicolons are necessary, but that isn't a bad thing since you should be using them no matter what. I didn't say that *I* write multiple statements on one line, but if you were to come across that you would instantly know that there are two statements. Also, you talk like a lack of semicolons in coffeescript is a good thing.. it just shows lazyness and bad practice in my eyes. &gt;No, I was not wrong, both of my examples loop through arrays, not objects (isn't that obvious from the JS?). And your JavaScript for looping over an object is wrong. I think you meant: Whatever, like I said, I don't use coffeescript because I already know how to code in JS, so my interpretation of your coffeescript might be a little off, and I was mostly right anyways. Also, instead of declaring the item var in the for loop, you should be declaring all your variables at the first line of the current function.. perhaps this is one of the inefficiencies of using coffeescript. &gt;I don't know where you're getting the whole "native JS devs know more about JS than coffee devs" thing... While you are busy writing coffeescript all day JS devs are writing actual JS, so it follows that they would know a lot more about JS than you. I have better things to do than argue about something as useless as coffeescript, just read [one](http://oscargodson.com/posts/why-i-dont-use-coffeescript.html) of the [many](http://cholla.mmto.org/computers/web/rails/coffeescript.html) [articles](http://www.andrewluetgers.com/2011/09/07/coffeescript-fanboyism-rampant/) out [there](http://www.robeesworld.com/blog/68/coffeescript-and-typescript-are-stupid) if you still don't understand why people hate it.
Ever bought a loaf of bread at the store? Why? How to make bread, and all the ingredients, are widely available. You bought it from the store because they have you some additional value. Saved time, more variety, lower cost than doing it yourself, etc, etc, etc. Software can run on the same principle. I can give you the source code for a tool that will run on a server and do something for you, but if you pay me a nominal amount, I can give you an account on a server that is already running and is well managed and maintained.
&gt;And yet, as an "expert" in JS you couldn't recognize the difference between looping through an array and looping through an object? Yes, I corrected those vars (making the JavaScript examples even longer!), was tired and not thinking. Either way your example didn't make sense, referencing the keys as items. Quit acting like a butthurt little child, the example you gave in coffeescript was: for item in list # do something which, to someone who doesn't use coffeescript looks like you are trying to loop through an object (another point for coffeescript being less readable), in which case my JS example was correct. I even prefaced it with "if you want to loop over an **object** in JS the correct code would be:". Also, my for in loop example does make sense and will work for a normal array (you would know that if you actually knew anything about JS), because arrays are also objects in JavaScript; it just isn't advisable to do this with a regular array in case the Array prototype has been modified with extra properties. &gt;Those three articles reference a few things the nobody-authors don't like about the syntax, while failing to show anything wrong with CoffeeScript. It was four articles, but anyways - someone not being famous doesn't detract from a valid point; and you have yet to make an actual argument showing anything that is good in coffeescript or any real reason at all to use it instead of actual JS. &gt;I'm just saying maybe you should actually learn how coffeescript works before you go spouting nonsense, false statements about it. And I'm saying learning Coffeescript is a useless endeavour, one only undertaken by hipsters jumping on the next fad when there are no real benefits in doing so.
Well, for me it's because I made something that I want to share. The software I release is usually a by-product for a project I'm paid for (so it's usually smaller things like libraries or some specific functionality). In other words, someone pays me (handsomely) to achieve X, and while doing that I need Y and find that it doesn't exist yet. So I code it myself, and afterwards release it as open source in the hopes that someone else finds it useful. It's fun to see other people use your 'thing', and talk about it, write blog posts about it - etc. And for me, it's something I can do for almost free... I just need to wrap it up, write a README file, and put it on GitHub. Easy. It's no effort at all.
&gt; which, to someone who doesn't use coffeescript looks like you are trying to loop through an object Except the equivalent JavaScript example I gave was clearly an array loop... &gt;Also, my for in loop example does make sense and will work for a normal array (you would know that if you actually knew anything about JS), because arrays are also objects in JavaScript; it just isn't advisable to do this with a regular array in case the Array prototype has been modified with extra properties. Except for...in doesn't necessarily loop through the array keys in the correct order... Therefore it is a bad way to loop through any array where the order of the array is significant. &gt; It was four articles, but anyways - someone not being famous doesn't detract from a valid point; and you have yet to make an actual argument showing anything that is good in coffeescript or any real reason at all to use it instead of actual JS. Read the dropbox article I posted.
&gt;Except the equivalent JavaScript example I gave was clearly an array loop... I honestly didn't pay much attention to your JS loop, seeing as it was full of syntactical errors anyways (even after you fixed the var declaration, you still used commas where semicolons should be inbetween the for statements). &gt;Except for...in doesn't necessarily loop through the array keys in the correct order... Therefore it is a bad way to loop through an array if the order of your array is significant. Are you thick? You are arguing against a non-argument.. I already gave you a reason why it shouldn't be used for regular arrays.
I work at a company that produces Open Source software. We make money in two ways: 1. First and foremost we make money with feature development. Our target market is a group of people that need software like ours, but for the most part do not have the skills available to extend it or build upon it. There are plenty of people out there that can use our software and pay us nothing, and we are mighty fine with that. There are also some people out there who like our software but it only meets about 80-90% of their needs. They pay us to develop new features. Sometimes they pay us to fix bugs that annoy them, but are not as high on our priority list. 2. Support. Installation, general use, development, bug fixing, etc. If someone with a support contract reports a bug I will be much more motivated to fix it than if a stranger reports it. Of course it depends on the bug, but if it's low priority, but an easy fix, why not? We have a message board that anyone is welcome to ask questions on, but if you have a support contract we guarantee a response within 24 hours. This type of development doesn't really work with frameworks or libraries. It works best for products.
Out of curiosity, I would love to hear you elaborate on why you think it's a major pain to create and manage views. Edit: Here's a jsfiddle of how my code is usually structured while creating views, http://jsfiddle.net/za2nE/. How in your opinion could the workflow be improved? 
For a client, the value lies in addressing their needs efficiently and elegantly. For the developer, the value lies in building reusable solutions that will save dev time in the future. These two goals are not contradictory, they are orthogonal. For a client, it's a boon to be able to take the code and take it anywhere else, without vendor lock-in, be it legal or just practical. For a developer, it's a boon to be able to decouple your development (i.e. long term investment) from what pays the bills this month. What you need to accept is the humility of being seen as, essentially, a brick layer to most people. We all know that's not our job, but that's how non-techies will see us. We can either stomp our feet, desperately protect our "intellectual property" and try to avoid the inevitable.... or we can accept that what our customers want is for us to show up, be confident, and solve their problems, without them having to worry about it ever again. The latter is a much more valuable thing to offer than any number of proprietary libraries.
yep, way to cherry-pick words out of context. You would make a star reporter on Fox news.
For the record, you can probably remove the callback variable too. 
To put all my heart in a program it needs to be developed under open source license, but I strictly refer to *generic reusable components/utilities* which can be reused in very different products. I have no problem with fact that final product that I'm doing for company X is not open source. So why open source generic stuff then (in priority order): 1. When I leave current client I want to be able to reuse utilities I write. Either when doing work for next client or just for own projects. I can't imagine starting from scratch things I already solved. 2. Making it open sourced forces much higher quality standards. I double care then for quality of a code and documentation. 3. As pointed by @aeflash: "Bug fixing. If you open source your code, and other people start using it, they will uncover and fix bugs for you.". Product gets improved directly by others. 4. As 4 in above list. I treat it as my resume, and when you have interesting open sourced projects, this resume works extremely well. I'm currently happy to do the work for a client which accepts that most of the stuff I do is published as open source, and now I know I'll never switch to one that won't agree on that. 
I was actually talking about the client as the browser, in the physical sense... But it is probably still true in the deeper sense. The value you provide is in solving their problems, not the bag of bits you ship them.
Yep you can. Started to type it out and got distracted. This can easily be done in one line. 
I agree it looks good. The thing that was puttoing me off was the steep learning curve. Which resources/books would you recommend me to get me started?
Wow, I never realised it was as bad to this extent. Are there any general rule of thumbs that we should be aware of?
Looks cool but I will stick to free stuff.
Underscore's "isEqual" function works pretty much how you'd expect. It's annoying to use a function every time you need to compare two values, but probably necessary.
http://www.2ality.com/2011/06/javascript-equality.html
Hey, I added Express using MySQL to the test.
In Django you can just import things you need to use. Using Express in real-world projects we'll end up installing many packages anyway.
An understanding of type coercion gets rid of a lot of the mystery behind all of these.
It's all about coercion. [1] == 1 because [1] is coerced to 1 before it is evaluated. [1] starts out as an object but becomes a number because it only has the one value in it and it is being compared to a number. [1] != [1] because you are comparing an object to an object. They are already the same type so it doesn't have to coerce them. When you compare two objects, it's checking to see if they are the same object. So [1] != [1] because you are creating two different objects and then comparing them. var a = [1]; var b = a; a == b; // true Here you are comparing two variables that have the same object as their value.
Sure there is a general rule. http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf page 80 for Equality Operators, 75 for Additive, 73 for Multiplicative.
Chrome asks me to translate this page from haitian
Oh I should really improve this article. Really glad that it helped someone and your game is really polished. The spawn based on BPM is mandatory. I would think about taking it to android with cocoonJS now.
[Narcissus](https://en.wikipedia.org/wiki/Narcissus_(JavaScript_engine\)). There you go.
Bind keys to F1-F4 too so I can grab keyboard like this http://wiki.ubuntu.org.cn/images/9/98/FretsOnFire.jpg :)
That's a minor detail, since you can easily convert `NodeList` to an array with `Array.prototype.slice.call(NodeList)`. 
Thanks. Also -- you're missing a close-paren. =
Then you'd need to get some [proper attire](http://i.imgur.com/WzTPpfK.jpg) made.
I believe that's #5?
seriously this. you don't need a cheat sheet if you use ===
tooo hard. make it start out more simple. maybe have difficulty levels 
Is the source code on github or anything? I'd love to check it out. I'm a musician but somehow I'm absolutely terrible at this game and it's cracking me up.
The linked site is down currently, but a quick search gave me the [JS reference manual for CS5 (PDF)](http://www.adobe.com/content/dam/Adobe/en/devnet/photoshop/pdfs/photoshop_cs5_javascript_ref.pdf). I use Photoshop so infrequently that I hadn't realized this was a thing. Thanks for the tip! Edit: PDF warning
[leaflet](http://leafletjs.com) ftw!
For loops are basic. If you can't write a simple for loop on your own, I think you need to be shown how to write one because it's one of the "building blocks" when it comes to programming concepts. The biggest issue in his code was that he was using sumNumbers in the for loop, which means on each iteration it was changing sumNumbers, and therefore would reach the stopping condition quickly. He also was printing out sumNumbers each time, when in reality he only needs to do it after the for loop. So I showed him what he had to do in code. He got it half right - I dont have issues with giving people answers on their homework assignments. As someone who has gotten plenty of help myself from friends when programming in assembly and writing my first linked list, it takes a bit of "showing" someone the way before they can grasp certain concepts (e.g. basic for loop) 
Ah sorry, reddit formatting got me :/
Except it's missing aerial imagery. I love OSM, but sometimes I really need the aerial shots.
haha.. cute. add a miss key delay or something. I was just spamming all them and did pretty well. 
I like going in raw; just straight up Backbone. All of the architecture astronauts seem to have jumped onto the angular bandwagon lately, which had been interesting to watch.
I love the game! This seems like an early version, but allowing different keybinding would be nice. And also, if you repeatedly press all four keys you do very well.
I think your heart was in the right place. I wonder, though, if it would have been any help to post an almost-solution, e.g. a well-structured for-loop that counts from `1` to `secondVariable`, for OP to take and alter.
The fret notes don't seem to match up with the music? Also, qwer is a pretty terrible choice for keybinds. Use homerow or allow remaps.
I like it! I'm going to have to remap my buttons though. My brain is thoroughly trained by flash flash revolution to use an arrow key configuration.
This functionality is built into the browser for the most common use case of allowing a user to type a URL. For anyone who is thinking of using this in a client-side project to validate a user-provided URL, please just use `&lt;input type="url"&gt;` and `checkValidity()` / `:invalid`. [MDN: input tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input) [MDN: constraint validation](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation)
If you write a lot of boilerplate, that seems to indicate that you didn't properly refactor your code to reduce that boilerplate. Marionette's architecture is something you kind of automatically come up with when you write larger Backbone applications. You really have to build your own abstractions on top of Backbone, just using pure Backbone will indeed leave you with lots of duplicated code. Of course it's much nicer to just use Marionette and rely on abstractions that are battle-tested and community-maintained. 
Protocol needs to be more substantial than just https? and ftp. Infact, protocol segment of a url can be any word. file://, svn://, sms://, boing://, ts2://, vent://, other:// - all are valid. Whether the consumer of the url recognises them is a different matter. The rest of the pattern needs work as well. The "local" IP address exclusion seems just unnecessary for a URL validator. http://172.14.123.78/some/resource ***is*** a valid URL, afterall. **TL;DR**: I'm being picky as fuck - this isn't a URL validator, it's a somewhat specific to an undocumented-context web-link validator.
I actually prefer using Views bound to specific DOM nodes so that event bindings are based on selectors. That way you can for example make all links that have the class 'help' open a help popup. The designer will have a clearly defined selector interface that tells him how to wire up functionality instead of having to duplicate the 'ng-click' attribute, always with a function name that might easily change during refactoring. It just seems like a cleaner separation between presentation and app logic. I am also worried that Angular teaches antipatterns to people who are new to JS and start with Angular. I'm too much reminded of the classic 'onclick="evalfunctioninglobalscope()"', just with some magic that makes sure you're properly scoped. I just can't get used to writing that. And I don't believe this kind of logic belongs in the markup.
There's also [quite a few valid representations](http://www.csgnetwork.com/ipaddconv.html) of an IP, and that's not even including IPv6...
ill put the code to my github tomorrow. Sorry champions league tonight + got some stuff for uni!
thanks for the article at first! I had a previous version a year ago without the whole engine, and working with it wasn't the most pleasent thing, though there were less line of code, but also less structure. I didn't also have time to do it properly, just wanted to rewrite the whole stuff using the tutorial materials and experiment a bit. Spawning buttons on beats would be quite tricky + it would be also possible to do it on the fly, analyse the buffered song earlier and if a mean value from some channels reaches a certain level spawn a button. ---- PS. i think Ive seen you at the mount kimbie gig in warsaw but i was a bit too drunk to present myself ;)
yup. as i wrote earlier its from the first implementation, and i didn't have time to polish it so much, just wanted to play with the architecture!
Pretty nice! There's some UX fixes to be done so the whole thing is smoother, but I understood how it works and it works well. Good job! And thanks for a great tool :) Tip: You might want to offload scripts/styles to a CDN if things catch up. Keeping a single stylesheet and changing classes would be a good idea as well, and will allow customization on the user end more easily. 
Its the audiotrack so its quite essential :D sry didn't have time to test it on everything
&gt; Play on chrome (Sry FF, start allowing mp3!) ! Use Ogg Vorbis instead! Works on both Chrome and Firefox.
how yo gonna get the answer if you dont return that shit nigga?
I didn't even know you could bind the function keys in JS. Apparently you can: http://trickkr.com/item/53/javascript-keycodes-keynames (For the lazy, they're keycodes 112 to 123.)
I may be the only one, but this whole thing is really not a concern for me. I agree that `(0 == [0])` being true is surprising. But would its being false help me at all? That's not a comparison I expect to be making in the first place. Show me a practical example where it actually matters. function getreciprocal(x) { if (x == 0) throw "Can't take 1/0, dummy!"; return 1/x; } Is there a bug here? If I were to change `==` to `===`, would that be an improvement? Currently if someone takes `getreciprocal([0])` it throws an exception. If I change it to triple equals it will return `Infinity`. What's the right answer? Seems like neither. I should be throwing a different exception. It's closer to the correct behavior with `==` in this case, I guess. I think if you're making comparisons and you want to behave correctly even if someone sends you data of the wrong type, you need to do a type check. Choosing `===` over `==` solves nothing in these cases.
I think it's a very self-limiting line of reasoning. Essentially, you are saying because speed is your main concern, it shouldn't have additional dependencies. Those are two things that are just unrelated parts of the equation. Libraries help with: - Delegating issues to a third party - Quickly adding new features and bug fixes - Simplifying YOUR code by abstraction (most important) Now, that said, if speed is your concern, sometimes it is faster to implement ONLY what you need and prune the rest. Sometimes you want a Ferrari, but other times you need to pull things with a Truck or daily commute with a nice SUV. 
The only javascript equality quirk that has ever bitten me hard was that "" == false. I figured a string of any length would be like an object and be considered true.
Reminds me of https://en.wikipedia.org/wiki/Frets_on_Fire
It's fine for one view. But after you have your entire layout driven by views it gets more complicated to work with. If you have 80 views, and you have different views interacting with each other, managing views becomes pretty much what you spend most of your time doing in Backbone.
Those articles are awesome dude! 
CC-SA can be a dealbreaker, though.
ogg also allows for perfect timing, where mp3 does not. 
I'm using Firefox 27 (Aurora channel) and the audio works fine as far as I can tell.
Thank you so much for the feedback! I can't believe that I never thought about using classes to change the style sheet. That would be a thousand times better! I guess it's the little things that I over looked. I'm not planning on this blowing up but thank you for telling me about a CDN. I learned something new about their use. I hope you don't mind but i have a question: * What UX changes would you recommend? 
on opera next it just locks up at loading 75%
Yeah, no problem. Just weird (I think) that it works on chrome but not chromium. I have zero browsers that can run your game :'(
As a rhythm-game junkie since Amplitude, I absolutely love it. :D - It'd be nice to be able to switch hands and use U-I-O-P instead. - I think it would be more fun if you emulated Guitar Hero's two-handed playstyle; one hand for notes, other hand for timing/rhythm (I'm thinking tap spacebar to strum). Engages both hemispheres, and allows the timing of the notes to be more audible (similar to the "click" when strumming a GH guitar). Nice job!
they were supposed to put the mp3 for already a year so mayby finally... :)
i already see my laptop on the ground holding it like that ;)))
Interesting stuff. So you're using github gist as a transport for the backtick command metadata?
I'd have to hand it to Browserify at this point. It's also got sane ways of consuming stuff pulled in via bower, and can even pull in component modules, in addition to AMD modules. 
Not surprised you play league. QWER = home row
or..... just use === like you should. 
Basically changes to the copy and the way you get new icons. Tbh I didn't understand the concept of the plus icon, and when I did, a modal looked weird. IMO a check list sort of thing would be better there. Instructions for a static site can be removed, and instead, you could write something like 'just copy and paste and you're good to go' under the create section. Just think from the user's perspective :)
The only reason I got bit was because the codebase was playing fast-and-loose with the rules, and I was cleaning it up. We had some flag in JSON being evaluated like `if (object.flag) { /* do something */ }` and a lot of the JSON was written with object.flag = ""; Apparently it wasn't originally going to be an on/off flag but a string specifying the target. So if ("") doesn't execute, and my attempts to interpret this flag when automatically rewriting these files failed horribly.
To know more about why javascript does what it does read this: [JavaScript Coercion Demystified](http://webreflection.blogspot.com/2010/10/javascript-coercion-demystified.html)
I use knockout every day at work, and I absolutely love it. Even though I've only been doing web development for a year now, I can certainly say it's one of the coolest things I've ever worked with. It's also great to be able to create your own custom bindings if there isn't an existing one that meets your needs.
A lot of people are using React to implement their Backbone views. You might like it; here's a blog post about it http://joelburget.com/backbone-to-react/
Well it certainly makes it more easily understood. The coercion can be ambiguous, and it would make more sense to do something like checking if the object is a string or int, and if not throwing that error instead of just lumping together type errors with other errors. Usually implicit correcion should only be used by people who know why they're using that, and not just setting everything to "==="
Dope!
Chrome?
Yeah no, I did this with a site back in September the geocoding is god awful and off by blocks sometimes even miles. It worth sticking with Google that's my two cents.
opera next is based off of chromium, i think your game ONLY works on google chrome.
Kinda struggles with 20 jellyfish. I want more jellyfish!
wasn't aware of the timing thing. what about opus?
As someone who got into Google Maps using v3, I can say that I like it much much more than anything I've seen written for GM v2. V3 is much more concise. Dropping support for v2 is not a bad thing, in my opinion.
You can try using a binding library, like Knockout.js or Angular for this purpose. If it's just this simple replacement, look at a solution like [underscore templating](http://underscorejs.org/#template) or placing the word in a *span* and replacing the *innerHTML* of this *&lt;span&gt;* &lt;p&gt;this is &lt;span id='replaced'&gt;reworded&lt;/span&gt;&lt;/p&gt; document.getElementById('replaced').innerHTML = 'rephrased'; --edit: Also look at [Mustache!](https://github.com/janl/mustache.js/)
innerHTML doesn't work with all browsers. It'd be better to use jquery $(selector).html(val) or $(selector).text(val) for this purpose.
Yeah, it's great to have a separate provider sometimes. But whether or not this is truly a worthwhile upgrade over Google's Maps, I'm not sure. I guess we'll see.
Addressing each of your concerns: 1. Amount of code in this example: This is just an example explaining how to think about problems using functional composition - which React uses as its primary abstraction. The example demonstrates that with React, you may abstract with arbitrary granularly - something many other frameworks don't offer. You'll see that a lot of the little sugars of other frameworks like "magic attributes in templates" are simply special cases of what React can do more generally. In other words, you can use React components to implement many of the code-reducing features of other frameworks like &lt;ReactRepeat times={30} /&gt; - and *then* some. With React, you reduce code size by factoring common custom code into new components. The ease of which you can do this means a substantially sized project is significantly less code - but more importantly, because it's React, the complexity is usually much less. 2. "Separation of concerns". Please see this talk: http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html I don't think that you and I have the same definition of separation of concerns. You seem to be talking about separation of syntaxes (@jetshin mentioned this). 3. The IDs. You don't ever worry about the IDs. They are implementation details. One day React might use a different way of keeping track of the nodes. But they are there *precisely* so that React *doesn't* store data in the DOM (except for the one thing it needs to - the ID). This allows React to be rendered on the server, before any of your JS is downloaded on the client (https://github.com/facebook/react-page). 
You could use 'on click' or something similar to set a flag. If that flag is equal to true, minus the total price of the room. Also, for future reference it's worth putting up small, easy to read bits of code. That means people are more likely to help you out. Also, consider using stack overflow for problem such as this while also using this subreddit. 
Same, I have no idea why everyone wants to "fix" typeof null. I can declare an object in (Java, C#, etc) and assign it null =&gt; null is an object.
Just an FYI, http://www.stackoverflow.com will probably give you some better help.
There is the JS API that you use yourself, and there is the backend (providing map tiles, among other things). You can use a generic JS API which allows you to switch between Google maps &amp; OSM. There are [OpenLayers](http://openlayers.org/) and [Leaflet](http://leafletjs.com/)
This is because "NaN" means "in" in Haitian.
More precisely : `null` is the absence of an object, instead of the absence of we don't know even what. `typeof null` is kindof funny, but it totally makes sense, just like `typeof NaN`. 
I'd advise to avoid null so far as your language allows: "I call it my billion-dollar mistake. It was the invention of the null reference in 1965" http://en.wikipedia.org/wiki/Tony_Hoare
That youtube video just change my mind. Going to try that lib :)
read the description please
Ok. After reading the page to which you've linked, I realized I had innerText in mind when writing the previous comment. Well, (re)learned something today!
though almost correct! im playing dota, but never though about the buttons in this way ;)
https://github.com/mjanisz/Keyboard-Hero voila!
Starred!
I do it as: function doSometing(){} ...but that's because I am naturally a PHP programmer.
It's function expression and function declaration. Function Declaration will be loaded at parse time something(); // function runs function something() {} Function Expressions aren't loaded on startup something(); // TypeError - something is undefined var something = function() {}; But there's no difference in using if you use it properly I guess.
If you want typing you should really look into something like Typescript. Not only will this give you cleaner ways of doing this, but also pushes all the typing to a compiler, rather than having to have your client run through all this typing.
Works in "Safary" O_o ... the I key isn't even next to the Y key...
If you're unsure about style, the best approach is avoiding code in the global scope (check out "IIFE"), and regrouping all var declarations in a single var statement at the top of the current scope. (function(){ var myFunc = function(){alert("foo");} , myOtherFunc = function(){return "bar;"} ,myIntVariable = 18; myFunc(); })(); 
I would like to add that if you are fairly new to JavaScript, try only using the latter syntax. It's not only usually better practice, but it also helps you comprehend callbacks easier.
This practice is actually becoming less and less popular in PHP. It is now advised that you either store functions as class/object methods or use closures: $closure = function () { return 'something'; }; $something = $closure(); echo $something; // something
I try to use the Function Declaration for functions without side-effects, and the Function Expressions for local functions used as references (closures mostly). I also always put Function Declaration in the top of the file and not depend on hoisting rules, so they are grouped together nicely. Also try to keep them in top-level of the module and not nest them in further blocks. The idea is that a named-thing is unique, while a reference is one of many. And also IDE's will work nicely if you do this, Webstorm even understands the revealing module pattern: function sayHi() { } function sayYo() { } module.exports = { hi: sayHi yo: sayYo }; 
+1 for class/object methods. I still have a random "functions.php" file that contains some simple crap on my sites for shorthand.
There are many reasons to choose one over other. Function expressions can be passed as params where function declarations no. (I.e. pass arg for callbacks) Function expressions get hoisted due that they basically are function objects assigned to variables. So you wont be able to call a function expression before its defined. Why? Variables are initialized to undefined in the first stage, and hoisted. So calling a function expression before its defined will be equivalent to call undefined. There are other differences, google function expressions Vs function declarations you will find many useful articles. Regards
The Closure Compiler is another good choice, since that lets you stay in JS with just comments that will do the type inference for you when they hit the compiler. 
I'd personally love to switch to something like TypeScript or Dart for better static typing, but if you're already stuck in a production env. that is plain ole' JS, you may have to resort to something like this as a possible solution.
One interesting tidbit, albeit a bit useless unless doing some recursive stuff, about the different function formats is how JavaScript handles naming them. I pulled this segment from a book called JavaScript Allongé by Reginald Braithwaite. It's a great book and would recommend. Read for free here: https://leanpub.com/javascript-allonge/read#leanpub-auto-recipes-with-basic-functions ================ Naming Functions Let’s get right to it. This code does not name a function: var repeat = function (str) { return str + str }; It doesn’t name the function “repeat” for the same reason that var answer = 42 doesn’t name the number 42. That snippet of code binds an anonymous function to a name in an environment, but the function itself remains anonymous. JavaScript does have a syntax for naming a function, it looks like this: var bindingName = function actualName () { //... }; In this expression, bindingName is the name in the environment, but actualName is the function’s actual name. This is a named function expression. That may seem confusing, but think of the binding names as properties of the environment, not the function itself. And indeed the name is a property: bindingName.name //=&gt; 'actualName' ================== This segment continues on for a bit about how this can be used to your benefit.
Why not write unit tests to see how your code behaves with different data types then run before each build? If they fail, then the build halts.
Exactly. Also: If you find yourself doing a lot of reflecting on types in your code, it's probably poorly designed code to begin with, and/or you're not leveraging the dynamism JS has blessed you with.
Also the function foobar() {...} syntax assigns a name ("foobar") to the function. You can see this in the following example. var bar = function foo() {}; function foobar() {} var baz=function() {}; console.log(bar.toString()); console.log(foobar.toString()); console.log(baz.toString()); As you can see, the first and second functions have names but the third does not. 
op, thanks for the question, and responders, thanks for the answers. I've always wondered about this very question, and the answers below really provide a lot of clarity from different perspectives.
Based on that thread, i'm even more confused as to which direction I should be heading (AMD + requireJS vs CommonJS + browserify) Both camps have equally valid points; and both modularization solutions have their strengths and weaknesses. This has been a frustrating time for the JS ecosystem. I hope a useful consensus emerges out of this conversation.
Yes, Thanks to all. I ended up learning more than I expected and have some new topics to study.
From the article's last heading: &gt;And that's it Lol.
https://github.com/bower/bower/issues
&gt; The amount of code used to solve one particular problem is not a good way to compare frameworks I think it is a good example, isn't that the reason for http://todomvc.com/? Angular is so popular now because the boilerplate needed to write a simple app such as filtering is minimal.
Both if those solutions came out of different JavaScript sub communities, and the tradeoffs they have reflect their origins, Amd has dynamic code loading and easier debugging, but in return has ugly boilerplate and very complex setups. Browserify has cleaner syntax and access to orders of magnitude more modules, but has a mandatory build step. So what I ended up doing was trying them both out, and I found that for me browserify was a slam dunk, none of its trade offs were a problem for me, you might have a different cost benefit calculation 
Browserify seems to be pretty nice in a lot of ways, but there's no way to work around the "very complex setups" that arise as a natural result of javascript being so damn loose about everything. There are still a large amount of useful libraries that are written that just attach themselves to the global context. To consume those, you'd have to use browserify-shim. To consume AMD modules, you'd use the amdify transform. To inline your templates or other static assets into your js, you'd have to use the brfs transform. And so on... It's a little disingenous of browserify users to act like the primary use case for developing apps will be npm install {some_module} and then var some_module = require ({some_module}) in your code, just based on the fact that so much code isn't really written in a way that makes that easy. It doesn't "just work", and you'll need an extensive build script to be written against the browserify api regardless at some point. I still haven't seen anyone successfully even get a Backbone app up and running with browserify without some hackish solution like this: http://stackoverflow.com/questions/19528559/is-not-a-function-backbone-jquery-and-browserify 
 var answers = [ function(){ return 42; }, function(){ return Math.pow(2,Math.round(Math.random()*9)+1); }, function(){ return new Date(); }, function(){ return 'I don\'t know, I\'m so confused.'; } ]; var theAnswer = answers[Math.round(Math.random()*(answers.length-1))]; document.getElementById('out').innerHTML=theAnswer(); This is one of the reasons why function literals rock None of the functions have names, they are all just elements in an array. The variable theAnswer is just a variable that can have any number of the nameless functions as it's value, way cool. I feel that this method is more dynamic, so I use it all the time, even with variables that will just have one static constant function literal assigned to it.
[a backbone app of mine](https://github.com/codeforboston/ma-laws/blob/site/js/script.js) but more generally nobody is saying you can use anything out of npm, it's more that you can use most things out of npm that don't use fs. Overall things *tend* to be more likely to work with a browserify then an amd with less patching, for the record I did have to do a little bit of patching for that script earlier, the secret sauce for that script is in the [makefile](https://github.com/codeforboston/ma-laws/blob/site/Makefile)
Here's the original if you want to see the comments http://www.reddit.com/r/HTML/comments/1q1k97/html_change_dropdown_that_lists_files_to_open_to/
The price seems steep for a completely online conference. Has anybody done this in the past?
The big issue is that the compiler doesn't always work. And the interface system is just awful for complex applications. 
So the demo page seems to just be a bit of text and a few links...
I accidently overwrote the css with the homepage css, fixed now.
The fact that you're having to use a makefile to call shell commands should raise some red flags for you (and you needed to do this just to support the use of jQuery...*jQuery* for your clientside app) I'm not criticizing you here, i'm just trying to highlight some of the issues around shoehorning browserify into a front end application development workflow
You could receive something else just as bad -- a boolean when you're expecting an object, etc. -- so to be completely safe you would need to do a type check anyway.
Sure, unless you trust the source.
I've found that webpack is a pretty great win for this sort of thing since it supports everything under the sun http://webpack.github.io/#/home
I like the leading underscore. If you're working with an under-documented js framework it's good to know what the author considers public and private when you're inspecting objects. 
yeah I generally prefer this to the private-by-closure approach, which makes debugging difficult
You can pass function declarations as callbacks. It really helps for readability to when your callbacks are named. foo.on("something", function handleSomething() {...}); This works too: function handleSomething() { //... } foo.on("something", handleSomething);
The best article I have read on this (to date): http://kangax.github.io/nfe/
Am I the only one who likes prefix variables that hold jQuery objects with a $? 
Hungarian notation?
This had me confused at first too but I think what he is saying is that JavaScript doesn't have constants or macros so don't use all caps to try to mimic them. Instead, use all caps for global variables.
This is one of the more noticeable flaws of an otherwise brilliant programmer. Crockford can't seem to conceive that someone might hold a different opinion *and* also be competent. Case in point: Google's JavaScript style guide says to use underscores to indicate privacy (albeit trailing rather than leading underscores).
Personally, I don't like that in order to use the pattern that provides actual privacy (at least for class-like object types), we would have to abandon the "prototype chain" nature of JavaScript, because our methods would have to be defined on the instance object itself from within the constructor in order for them to be privileged. And we still haven't addressed the idea of protected members or package private members.
Sure, you can hide your privates in a closure, but then it makes them impossible to get at. I don't have a problem with somebody using a convention of prepending an underscore to their delicate properties, as a signifier for "Handle with care". When asked why Python does not have true private members, it has been said that Guido van Rossum replied "[Look, we're all consenting adults, here.](https://mail.python.org/pipermail/tutor/2003-October/025932.html)", meaning if you know you shouldn't touch something then don't touch it unless you really know what you're doing. This goes for any language, JS included. I largely feel that making too many properties and values inaccessible is a bad idea. Only do it if you have a very good reason to do so.
No, just for jquery objects only. They are special. 
I can confirm that you are not. See also backbone.js views and their `this.el` vs `this.$el`. 
Good thing I have three monitors so I can see all of this image at once.
Backbone does this explicitly with this.el and this.$el. Personally I think it's a good practice. 
Twitter's new flight.js uses that too, foo.$node and foo.node to get the jquery object vs the dom node respectively.
It isn't about making it easier to use others' code, it's about making it harder for others to misuse yours. I won't let you waste my time debugging my code on an issue you introduced by playing with my sensitive bits, so I'm going to hide anything not directly related to the public interfaces. Have fun in an enterprise environment with dozens of third party vendors competing to see who can cause the most problems in other vendors' products!
Use JavaScript's scoping rules to seal off variables that you want to be private. [David Walsh has a good introduction to the pattern](http://davidwalsh.name/javascript-private).
Sounds like a job for... an API maybe? Pretty glad I don't develop in an enterprise environment.
50% of everything Crockford opines is bullshit (Seriously, watch his YUIconf talks sometime). You are a master when you know which 50%. 
I half agree with you. We're all consenting adults, here. But I also agree with jlink005's reply. I guess it depends on what the project is, and who you trust. Most of the time I don't go out of my way to hide my privates. ^^that ^^wasn't ^^meant ^^to ^^be ^^innuendo, ^^promise!
Completely agree with it being good practise. My senior developer at my first job argued that you should just worry about looking at where the code came from and its context, not $ prefixes, but sometimes it's quicker and easier to see a $ and think "Ah, good, this should already be a jQuery object".
Makes sense, I suppose. But I like using the all-caps convention for mimicking constants because it's like I'm saying "See this data here? This should be read-only, please."
&gt; that wasn't meant to be innuendo, promise!
&gt; They are special. I have a feeling that's how hungarian notation started.
I agree. If it's not in the API and not documented, don't expect support for using it.
You're not often going to be dealing with a ``firstName`` that is not a string--so, it's silly to call something ``strFirstName``. You *are* often going to be dealing with an element that is wrapped by jQuery, and one that isn't, often the same element wrapped vs. unwrapped, often in the same function. ``element`` vs ``$element`` is a useful convention in that case to avoid having to do something like ``rawElement`` vs ``jQueryElement`` which would just mean the same thing.
Crockford also has the most amazing git commit messages that prove he is a competent developer with the power to use version control. [https://github.com/douglascrockford/JSON-js/commits/master](https://github.com/douglascrockford/JSON-js/commits/master). Some of the better messages. ".js", "s", "Hygiene", "name", "style". Even other repos he has have this issue.
Far from it. It's an often used convention.
what do you guys think? I've been working on this tool the past couple days, I think it could be useful for other's too. I'm interested in hearing feedback and suggestions any that reads this might have. One big todo is add support for source maps. 
Does it dance?
Necessary advice for most JavaScript coders IMHO.
My objection with this position (and it's one I held for a while) is that, unlike enterprise languages like C# and Java, Javascript is unsuited to that level of encapsulation. My objection is in three parts (in approximately declining order): 1. It's onerous or impossible to programmatically enforce contracts in javascript. So, in Java you have an interface construct that defines a contract across boundaries. With an interface, the concrete implementation you're using is usually immaterial. You don't have clear insight into what the state is, but you know that you have certain levers to interact with that state. You can do the same thing in javascript, but you're fighting the realities of the language: you'll need to write a lot more checking code, and waste a lot more cycles validating interfaces than a lighter weight approach. 2. Languages with high-levels of encapsulation also offer clear mechanisms for extension, so you can patch over behaviors you don't like, javascript does not. It's possible to override components that are behaving badly, or aren't meeting a particular need. It's difficult to write a module that *isn't* modular to some degree, and there's a long tradition in enterprise languages to write loosely-coupled modular code. For closure-scoped javascript libraries, I've seen no compelling patterns for extension. A great example in this regard are the widgets provided by jQuery UI: they're totally black-box, untestable, and buggy for non-happy-path use cases. There's no way to fix an issue without copy/pasting the widget and starting over. 3. Closure scoping components can have serious and nasty performance implications. If a scope is accessible from the global namespace or the event loop, whatever garbage you left in a closure may still be hanging around in memory with no easy way to free it. This isn't a good reason on its own, but combined with the previous two, it's a reasonable thing to consider. 
Crockford's the Jim Jones of the Javascript programmer's Cargo Cult. The background color of his site is called "watered-down-koolaid-red"
Tag! another. I also like to have my function arguments be _'s so I Can tell them apart easier from local vars. var $fake = $(a[href=#]); $fake.on('click', function(_e) { _e.preventDefault(); return false; }); I will also happily called a variable `_$el` for a jquery objecting being passed into a function.
&gt; although it is true it might make tricky for a template fiddler Mixing HTML and JS makes maintenance *awful* for a so-called "template fiddler". It makes it extremely difficult to keep track of what the structure of the DOM will be and how you will select elements to style them. The DOM ends up being a big steamy tag soup and the CSS grows and grows, because no one can ever tell which selectors are actually used, so they just keep adding more and more. Mixing HTML and JS is a bad idea.
It was late night when I wrote it, didn't even noticed that :)
Good points, goes to todo list. Thanks :)
Two things.... Java and Javascript are very different languages, despite sharing four letters. Your title may put off people from helping you. You say you are having trouble, but you don't say what part of the assignment is troubling you. People are willing to help if you are truly stuck, but they are usually unwilling to just do assignments for you.
If someone ignores the convention that a variable starting with _ is private, it's his problem, not the problem of the library author. A library author should not have to guard against extreme stupidity or deliberate and flagrant rule breaking.
So what about if I want prototypical inheritance and private functions/variables?
Don't use it if you don't understand it or can't explain it. Feel free to ask questions. In fact, please DO ask questions. I've seen many a people kicked out of Computer Academy for copy/pasting homework from the internet. function getGrade(score) { if (score &gt;= 90) { return "A"; } else if (score &gt;= 80) { return "B"; } else if (score &gt;= 70) { return "C"; } else if (score &gt;= 60) { return "D"; } else { return "F"; } } var assert = require("assert"); assert(getGrade(100), "A"); assert(getGrade(90), "A"); assert(getGrade(89), "B"); assert(getGrade(80), "B"); assert(getGrade(79), "C"); assert(getGrade(70), "C"); assert(getGrade(69), "D"); assert(getGrade(60), "D"); assert(getGrade(59), "F"); assert(getGrade(39), "F"); assert(getGrade(19), "F"); assert(getGrade(1), "F"); assert(getGrade(0), "F");
This is really excellent, good work! For further updates, I would suggest adding a 5th input to the HEX display for a decimal point. I would also suggest making the inputs/outputs a bit more complex once you get to it. In comparison to most of the known circuit programs, here's some factors to take into consideration: -Some modules are built to accept a range of inputs (not in the real life of course-- but when executed it's a fixed value). -Some are built to accept multiple, but only certain inputs. -Some, will change the amount of outputs (or available outputs) based on the selected inputs. I'll play around with this a bit-- see if I have time to contribute flip flops and such. :D Edit: Typo Edit2: Noticed you had multiple inputs in the TODO, nice!
All I want for Christmas is you! 
For any environment (client, server etc), CJS + npm gives all you need. For browsers or other envs that do not support CJS out of a box just use [Webmake](https://github.com/medikoo/modules-webmake) (I'm the author) or [Browserify](http://browserify.org/) if you prefer it. Such setup solves all the problems, it is most powerful, based on only serious package manager that JS has and it's additionally fastest for both development and production (see [CJS vs AMD benchmark](https://github.com/medikoo/cjs-vs-amd-benchmark#cjsamd-load-time-benchmark)) If people don't use it, it's because they don't understand it, or they're blocked by artificial problems (that do not exist) which they assume. 
Breaking down the process from scratch: * find something to edit code in - I would recommend sublime text 2 * create a simple HTML page that says 'hello world'. (Create new file, name it hello.html, edit it with sublime text, put "hello world in" and view it in your browser) * now learn you some basic HTML. Visit w3schools. Get comfortable with creating pages that have a HTML tag, a head tag with a title in it, a body tag. Put your "hello world" in the body. It won't look to different, but under the good it's HTML not plain text. * create a HTML page that has your 14 input elements, each having a pre-determined number in. Hint: look up input tags on w3 schools. * after you make changes, go refresh in your browser. Use chrome and find out how to get the Developer Tools up. If you make an error in your typing chrome will let you know what's going wrong in the console, with a line number. Super helpful. * Give each of your input boxes a class like "grade" * put some grade breakdown input boxes in, with grade letters next to them. Maybe put a button in that says 'calculate'. We're getting closer. * download jquery, and find out how to put a script tag in your head element which will bring that in. * before or after the script tag where you load jquery, make your own script tag and hit enter a bunch of times before closing the tag. * in your script tag do something like alert('hello world') and check it runs ok in the browser * find out how to run your alert on 'document.ready' i.e. to only run once your browser is ready to start running your script that's going to interact with the page * find the jquery docs and look up how to select your input boxes by class. (Something like var $gradeBoxes = ......) Do a check to see it's actually found it on the page: console.log($gradeBoxes.length). If it logs 14 you're set. * now you've selected your input boxes, find out how to do a jQuery 'each' loop on $gradeBoxes. * Before the loop define some variables like aScores, bScores, cScores etc. and set them to 0. Inside the loop do some if/else or switch logic to increment your score variables appropriately. * After the loop write some code to use jQuery to select your grade breakdown boxes, and then find out how to insert the appropriate values into them.
Well the fact is that underscores don't provide privacy. And Google's guide, aimed at a large audience, probably tries to balance the way things *should* be done with the way your average programmer will be able to do them. Probably something pragmatic like "they will use fake private members anyway, so we might as well try to establish a common way of naming them". But you can't expect a brilliant programmer to subscribe to thinking like that... they'll do it the proper way and get mad at people who don't.
And if you were in a language where you could mark something pruvate, then it will still be impossible to get at. Look, it's my machine and I want to try something out with the code, I'm an adult! Stop bein a petty little tyrant and dictating what is and is not locked away, let all your props hang out.
yeah the same basic idea as yours, just running continuously
Code encapsulation is not tyranny.
You have beautiful eyes. 
&gt; then it will still be impossible to get at Yes, that's the point. &gt;I want to try something out with the code You have the code. What's the problem? You can fork it.
Variables and object properties are totally different after you look past unrealistically simple toy examples. Variable is not in anyway same as private property would be. Leading underscore achieves the purpose of private when not used for security (communicate what is internal). And there is no guarantees about closure variables so you cannot use them for real security either - in future it might as well be possible to reflect on function's closure variables like it's possible in many other languages.
"every language" vs "almost any language" Right. So how do you reach into a closure in JavaScript? Show me.
Closure variables are not the same as private at all. What I meant that any language with access modifier private allows you to access it outside if needed. And the fact that there is no reflection in standard to reach into a closure is just a lack of a language feature, there have been extension to do that for example in SpiderMonkey. Even so, in Javascript the entire system can be changed under your feet yet you worry about something that is not there (enforced privacy) even in the strictest languages.
Done, demo and docs are updated
Seeing as there are all-caps constants on built in objects (see prototype of XmlHttpRequest) I will also use them for things that are supposed to be considered constants in my objects.
I don't do class-emulating objects quite like you, but I definitely do private the same way. Prototype is fine for some cases, but if you want to build a legit object hierarchy, some variant of this is the way to do it.
&gt; Well the fact is that underscores don't provide privacy. Indeed, because privacy is generally overrated. Underscores provide social clue that something shouldn't be relied on, but make it available for debugging or (if really necessary) use with conscious acceptance of risk.
I think one of the issues is that most DOM-related contexts could return either a jQuery object or a DOM object. So context doesn't help that much, and depending on the situation you may be manipulating a given node using both jQuery and raw DOM simultaneously.
&gt; JavaScript doesn't have constants defineProperty actually makes read-only constants possible, too. (Although, AFAIK, that's not 100% cross-browser yet.)
When you're in a proper OO language you find that it's common when architecting to change that private to a public or some other variety. Using closures makes this refactoring a huge pain in the ass. I avoid them for this reason only. Sure, it serves a purpose, but I don't like building in extra headaches down the line.
I love this, perfect description. Resig must be the Sun Myung Moon. Want the flowery ui, it will only cost you everything or something along those lines...
Nah. This is terrible advice in my opinion. Javascript developers *should* learn a naming convention and stick to it. Frankly, *any* competent naming convention will do (I'm looking at you tiny_mce or was it tinymce, maybe tinyMCE?) Developers should be comfortable writing and reading in most common styles. I typically enforce the [Google Javascript Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml) but before starting a project we open this particular area to discussion so that we can learn from our previous experiences. I disagree with Crockford's naming conventions entirely. But I'm aware of them. That doesn't make me a bad developer, it makes me one that hates his naming convention but can use it if I have to. Developers who can't easily transition or understand that each has their merits have no place in a professional environment.
I really don't think that's what he meant. Just seemed like a little joke to me, that's why I made a snarky reply.
Who is this guy?
&gt; Swift start is a website where you can learn almost any computer programing language. We offer online video lessons as well as private lesson from seasoned teachers and proffessors. I'm a little concerned they misspelled "professors". Also, "redditor for 3 hours" ?
Half of my commit messages are "typo" or "stupid cut &amp; paste". Granted, it's for a repository that only I commit to.
This adds methods to the instances instead of to the prototype, each time Foo and Bar are instantiated. That may be a problem in performance or memory critical code, right? 
New username. I was introduced to Reddit last March, actually, just using this one while at work. My other handle is /u/otterom.
I remember this being a myth or a very long debate without end.
It means it's a generator function (not iterator as stack overflow says, a generator function returns an iterator). It's part of ES6, and it's awesome.
There are some similarities between AS and JS. AS has been heavily influenced by JS. They are both object oriented, support higher-order functions and closures. AS 3.0 is based on an ECMA-script (JS) draft which was rejected. It features classical OO syntax (but retains prototypal underpinnings) and strict typing. The strict typing can be turned off. 
ActionScript is used in flash, but its usage has been declining last few years mainly because old browsers are starting to die out, so more and more features can be safely used / are added by browser vendors to JS, HTML. Flash is still installed on most of the machines and I don't think it will change anytime soon, but there is no flash on mobile devices. JS and ActionScript are similar: http://stackoverflow.com/questions/2268276/what-are-the-key-differences-between-javascript-and-actionscript-3
AS is still used wherever Flash is still used -- legacy flash apps, game UI's, video players, etc... As a language, it is directly between Java and Javascript -- you still have JS's prototypes, closures, and dynamism, but Java-style classes and interfaces and packages (as well as compiling down to bytecode). No Collections, but you still have JS-style untyped Objects and Arrays. AS also has a really nice drawing API. A lot of the Canvas2D stuff feels inspired by it.
This is useful, but more often you still have to resort to checking a keyup event. For example, to only submit when enter is pressed when the last input has the focus. By default every input will trigger a submission when enter is pressed. Which is a large cause of incomplete forms being submitted. I don't like the whole keyup enter check, but sometimes it is needed. thankfully, in angular you can write a simple directive for it to make it easier/clearer in the html.
It's a good suggestion, I'll have a look at how I will implement this.
Or you could just do form validation and let them submit from any input. Like say if I finish the form and go back to change a value and hit enter.
&gt;For Kyle https://github.com/douglascrockford/JSON-js/commit/40f3377a631eaedeec877379f9cb338046cac0e0
Oooh. That is a *great* idea. Time to refactor some current work ;)
http://static1.fjcdn.com/thumbnails/comments/This+irritates+me+specifically+because+I+watched+and+appreciated+both+_5befb80ab11ee4c36ce90e6b92a44a5b.jpg
Use typescript if you're looking for a sane way to do this
I do Hungarian notation (single letter, though: s - string, o - object, a - array) out of habit, but have recently been playing with the idea of prepending 'e' for selection constructs. My question, though, is there a use case where it would be beneficial to know that I made the selector from jQuery vs. another method?
I think I knew this at some point, which is why I've always avoided it. But habit and convention replaced actually *knowing* why I wasn't using it :)
Exactly. If you don't know the risk, don't touch.
In response to your comment in the r/java thread you started, you don't need to start from scratch. First fix the errors that i mentioned and then look at Jquery and learning how to use it. If you are needing to get this done quickly look at these two places; 1. Linking to Googles Jquery Library : http://stackoverflow.com/questions/441412/is-there-a-link-to-the-latest-jquery-library-on-google-apis 2. JQuery .change : http://api.jquery.com/change/
It's customary in static languages to try and equate "can" with "should". The tradition of dynamic languages is to try equating the "conceivable" with "possible". Abusing closures for "real privacy" is trying to turn JavaScript into Java. Which brings Michael Jackson to mind.
The Steve Yegge post on this subject gives the other perspective on this: http://steve-yegge.blogspot.com.au/2010/07/wikileaks-to-leak-5000-open-source-java.html
This works, but document.write is not allowed in jsfiddle: http://jsfiddle.net/YmjH3/ 1) added quotation marks around each case. 2) new onchange function: getSelectRegion(document.getElementById('Region').options[document.getElementById('Region').selectedIndex].value) 
There's no 1 answer because the general solution varies depending upon what your DOM elements are. it could be field1.text or field1.innerHMTL or something else. MY suggestion is to go to the DOM elements containing these items and add the following &lt;div ... onchange="need1Update" ...&gt; &lt;div ... onchange="filled1Update" ...&gt; that will allow your code to run when they change, it's a callback instead of a listener, but let's keep it simple. Then goto your script block and add the following var need1Value; var filled1Value; function need1Update(e){ // something something //need1Value = e.text; //maybe? look it up for your DOM element checkNeedFilled1(); } function filled1Update(e){ // something something //filled1Value = e.text; //maybe? look it up for your DOM element checkNeedFilled1(); } function checkNeedFilled1(){ if(need1Value === undefined || filled1Value === undefined){ return; } // something something //display.text = need1Value - filled1Value; //maybe? look it up for your dom element }
I feel that I should clarify here - (need1) and (filled1) will always be plain text. Remember, this is being done in a PDF file with fields that a user can simply enter numbers into. This will not be going into a website in any shape way or form.
&gt; When you're in a proper OO language you find that it's common when architecting to change that private to a public or some other variety. I can't recall ever having done that. The private stuff is internal machinery I can change on a whim. This is very different from the publicly exposed API.
I prefer Sails.js way of setting up a REST API automatically. It also handles ACLs easily.
I'll give you a basic idea of what I did in my Web Client-Side Programming course that I took almost 7 years ago (so it was pretty "cutting edge" to even have a school teach it). * Dynamically create elements on a page that were impacted by previous choices (a form with a few dropdowns/checkboxes and choices would create new/change elements) * Some SVG/JavaScript interaction * Slightly interactive page that would maintain state Today, taking a look at the syllabus they cover arrays in the first week of the course, so I'd say yes, it is not a worthwhile course.
&gt;Closure variables are not the same as private at all. It's how you make things private in JavaScript. It doesn't matter that there isn't a keyword for that. Selectively exposing stuff really isn't all that different from selectively hiding things. The end result is the same: Some things will be hidden. &gt;What I meant that any language with access modifier private allows you to access it outside if needed. Which isn't the case. Why else do you think Martin Fowler used the word "almost"? &gt;Even so, in Javascript the entire system can be changed under your feet [...] That's an odd way to argue. If the language is messy and unorganized, you should try even harder to keep things neat and tidy. So, for example, you shouldn't modify objects you don't own, because this would create some bizzaro world environment in which none of the other code ever ran before. Naturally, you should also try to blackbox your components. There are also a bunch of other handy things to keep in mind like the principle of least authority or the Law of Demeter.
can anybody in /r/javascript explain in one sentence what are teh advantages of using this instead of say backbone/marionette/angular/knockout/whatever/fancyname/...js there are way to many of these out there and i'm in the need of choosing one for a project right now
I came here to ask exactly this. I only know Angular currently and would love a small comparison on a more abstract level. I know these are extremely advanced implementations of javascript frameworks but perhaps somebody has the communication skills. :) I can definitely recommend Angular though - both me and my collegues absolutely love it. But we haven't tried the others so I'd like to keep an open mind and hear about those, too.
Supplement what you're learning with outside resources. Look what successive classes will offer. Not satisfied? Talk to your professors, talk to their bosses. I would be concerned myself, even on the first day of class looking at the syllabus. 
Very cool. I didn't know about Sails.js. Will definitely look into it.
One sentence isn't enough. This talk is very good though, to explain the progression of MVC, and the problems current frameworks are trying to solve, with kind of an Ember cap at the end (about half an hour): http://www.youtube.com/watch?v=s1dhXamEAKQ
Well I think its most comparable to angular as these are more complete frameworks in that they have their own routing and whatnot, where as something like backbone or knockout is mainly just templates and observable objects, and all the rest comes with other plugins that you kind of stick together (I may be wrong, Ive used them briefly long ago, however Ive used angular quite a lot). One of the main things I saw about angular over ember was angular was built on being testable, all the angular core code has unit tests, all the code you write is easily testable.(Assuming you follow the guidelines) Ember wasn't really built in the same way. Angular also has a lot more support out there than ember, there's a lot of videos and tutorials covering it by google engineers who work on angular. I did research this quite awhile back and angular seemed like a good one for me, and so far it's been great, but I encourage you to do some research of your own and try find what will work best for you.
This is why colleges are worthless these days. They are slow as fuck to teach you basic things and never get around to you building anything real. Gonna go ahead and say find another school. Learning arrays one month before the course is over? Absolute rubbish.
1. Learn Node.js, Express.js, and MongoDB. 2. Build a few open-source websites. 3. Get job. ^^ Better college than what you're getting. And probably faster into an actual developer position too.
Ember is a more comprehensive framework than backbone or knockout, but less comprehensive than angular. Like angular, it is more opinionated relative to backbone. It is a less mature framework (IMO) than either backbone or angular. Depending on your background, you may find ember more natural (like if you have RoR experience) or vic versa (knockout is an easy transition for wpf devs.)
With the browsers I have installed on Windows 8 64bit and some rather lame 2.2 GHz dual core CPU: browser | version | score | note :|:|-:|: Chrome | 32 | 7570| dev channel Firefox |25| 6527 | stable Opera |12.16| 2914 | last pre-Blink version IE |10| 2695 | IE11 is not available on Windows 8 Well, IE11 won't do much better than that. SunSpider is the only benchmark it's good at. See: https://news.ycombinator.com/item?id=6691411
&gt; but less comprehensive than angular I've learned both a bit and I would not say that. In what respect do you think that angular is more comprehensive than ember?
Ember is a full on framework in the same vein as Angular and the advantages of one over the other are somewhat academic in that they both do essentially the same job but in slightly different ways so pick the one that resonates more with you and have at it also backbone is relatively limited in features compared to these two, marionette is closer but requires backbone experience and knockout does not feature the same level of "framework completeness".
Pssst All programming colleges are a scam. If you want to learn programming, sign up for a proper, paid course. Or learn by yourself. Still better than what they would teach you in college.
But how are those related to comprehensiveness of the framework? Services and dependency injections are paradigms that the framework embraces. So saying that a framework is more comprehensive because it has them is like saying that say framework1 is better than framework2 because framework1 is MVC whereas framework2 is MVVM. 
MVC and MVVM are two patterns that solve similar problems. For example ember implements MVC while knockout uses MVVM for data binding. One pattern is not better or more comprehensive, its just a different way of solving the same problem. DI and service locators solve other problems. What is the equivalent IoC story in ember? Service locator? Testing framework? 
&gt; MVC and MVVM are two patterns that solve similar problems. For example ember implements MVC while knockout uses MVVM for data binding. One pattern is not better or more comprehensive, its just a different way of solving the same problem. That's exactly what I was saying. Just because something has DI does not imply that it is a more comprehensive framework. Applications written in each framework will be structured differently, therefore you may not need a DI or a service locator. As for testing, there's QUnit. 
i think the essense of this is "change listeners" vs "dirty checking" http://stackoverflow.com/questions/9682092/databinding-in-angularjs Ember uses change listeners.
The point ~~And I'm saying~~ is that the DI solution and service locator are simply missing. Its not like ember magically doesn't need them. And yes you can use qunit, a totally separate project, hence less comprehensive. 
How so? Or is that sarcasm?
With no explanation up front of what ember.js is, does, and why one would use it? That should be communications 101.
why node? why mongo? those suggestions could be replaced with any number of popular languages /frameworks and databases
Lol, AFAIK, they were all in /r/programmingcirclejerk.
Do you know what comprehensive means? It is not synonymous with superior. Maybe inclusive would be more clear?
Pretty sure the guy is trolling you, just let it go.
Well, then you're basically building a half-assed type system; why not just have a compiler enforce the types for you (ala TypeScript?) I don't understand the js community's allergy to sane levels of type safety.
* Backbone solves the problems of jquery after you've used jquery for a while * Angular solves the problems of backbone after you've been using backbone for a while * Ember solves the problems of backbone or angular depending on who you talk to Angular, ember, and knockout solve very similar problems in slightly different ways. * Backbone is easiest to get started with, but unless you're a pro or doing something small you're going to hang yourself with the rope it gives you. (marionette extends backbone and removes some of the rope) * Angular is a bit harder to get started with, and still gives you enough rope to hang yourself, but keeps you from hanging yourself in a lot of places. * Ember is a bit harder still (but I'd argue still not objectively hard), and definitely has the longest learning curve. But, in my evauluation they've got the best framework for development speed once you've mastered the framework, and the best framework for long term maintainability. I just made the decision, and I'm pretty happy with ember so far.
Ember has DI, Ember.Testing and one of those most ambitious client side ORMs in ember data. 
ember is a thick-client JavaScript mvc library built to make big and/or long term projects as easy as possible to scale code complexity linearly. Simple, right?
Oh cool. New challenge: write a generator function that yields each digit of PI
I'd love to see a proper mathematical function, this just uses the first 50 digits as provided by Math.PI : function PIDigit(){ for( let x=0; x&lt;50; x++ ) yield Math.PI.toPrecision(x+1).toString().charAt(x) }
Dems da shit. Dawg. 
What particular about the arrays? Is your class going over the theory behind stacks, queues, lists, and linked lists? Or is it "for the last three months we've talked about primitive types, now here's an array!" We just had a candidate in today that didn't seem to grasp the concept of arrays (or much else for that matter). Maybe we should refer him to your school. 
I second this comment
It's also much older. Initial release was in 2009. 1.0 release June 2012. I love that people give Ember a hard time because they had 8 1.0 release candidates. Angular had 12. Ember didn't hit 1.0 until 2 months ago.
Don't worry! :) I'm not trying to promote runtime type checking, just providing a faster type checking function for the situations when it's useful. My particular use case for this is an object prettyprinter. I do my type checking at compile time using closure.
the word simple was sarcasm.
I would expect it to take a full semester just to teach the behavior of the == operator, so your teacher seems to be going pretty fast.
Whoa now! I have my masters in music and am doing quite well at my job as devops. 
You accidentally left a "da" in there. Learn Vanilla JS - That will give you node, but more importantly will give you proper coding design that make sites something than a pile of random callbacks and scattered event handlers. Learn Postgres / Sqlite3 / MySql - Chances are very good you'll be using a relational database more often than a non-relational one, and frankly, you should never rely on a lossy datastore. If you absolutely must learn a key/value datastore, go with either memcached or redis. Both are very easy to set up and will give you some understanding about the limits and benefits of structured key stores. You are not going to be storing terabytes of data into tiered Cassandra clusters fresh out of college. Get an internship - Preferably at a place that gives you something interesting to work on. They're out there, you need to interview who you're going to be working for like they're going to interview you. 
One of the issues that I have teaching classes in college is that my classes have no prerequisites, so I have to teach my curriculum under the assumption that you've never seen a computer before in your life. For example, I once had to show someone where the ALT button was. I understand that this frustrates some of the more experienced students in class. And yet, despite all of their bitching, they still submit homework at the last minute, ditch class, and do the absolute minimum (or worse) for projects. So, ultimately, you're in control of your own education. If a class is too easy, then please... by all means... attempt to go above and beyond the curriculum and perhaps ask the professor if they can offer more challenging homework.
I'm still a bit green to js.. Could someone give me a practical example of how this could be applied? I'm just curious!
Don't jump ship quite yet. Ask your professors about the courses in the following semesters and what they cover. You may find this is the lull before the storm. From my experience, colleges provide a lackluster first semester in comp sci, but ramp up quickly into 80 hour per week workloads later on. You might want to use this time to read the textbooks, really learn the terminology, and dable in some other languages and advanced topics. You will need it!
Univesity is often not the right place to learn real-world languages and industry best-practices. [1] For instance I bet they're teaching you var foo = new Array(); rather than var foo = []; which is how everyone does it in the real world. And I bet they're not teaching you the [ES5 methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods) like forEach, map, etc That said, they might (hopefully) be focussing less on syntax and techniques *du jour* and more on solid software engineering principles like black box, defensive coding, efficiency, reusable modular code. That can be taught in any language, at any level of proficiency with the code itself. So basically my suspicion is that they're not trying to teach you to be a wonderful JavaScript coder, they're trying to teach you to be a wonderful coder. On the other hand, I wouldn't be surprised at all if they are not doing that either, and it's just a shit course. [1] source: BA in IT, MSc in Computer Science, and 8 years+ real world web dev experience.