Forgive me, it's been a while since I've done JS: var r = new XMLHttpRequest(); var url = document.URL; var user_id = &lt;%= current_user.id %&gt;; r.open( "GET", [ "http://getinstagrab.herokuapp.com/api_test?url=", encodeURIComponent(url), "&amp;user_id=", user_id ].join(""), true ); r.onreadystatechange = function () { if (r.readyState != 4 || r.status != 200) return; console.log('snatched'); }; r.send(); adapted from http://vanilla-js.com/
/r/java ***** [^report ^a ^**problem**](http://reddit.com/r/LinkFixerBotSnr) ^| [^delete ^comment](http://www.reddit.com/message/compose?to=LinkFixerBotSnr&amp;subject=Comment%20Deletion%20%28Parent%20Commenter%20Only%29&amp;message=%2Bdelete+cgdzs38) ^| [^source ^code](http://github.com/WinneonSword/LFB) ^| [^contact ^developer](http://reddit.com/user/WinneonSword)
This is so true, haha. I once found myself optimising some JS code to minimise heavy operations. I realised that I was wasting my time because I was only touching the DOM like 12 times anyway. :-P
Have you seen ki.js? It's rather similar, but comes also with a ie8-compatible-version.
Memorize every detail about a couple of recent projects. Last year I had a few interviews that asked about previous projects; how the data was modelled and why etc. They may not ask you specifically about previous work but if you can mention something it's s good way to show off your knowledge and troubleshooting skills.
*no jquery*
userscripts are pretty neat; you can use your own javascript to mod any webpage you visit. Since it's so little work, i often find myself adding (or removing) little things from sites i visit often.
It really is much simpler and more lightweight! Good job!
Is a templating engine really a killer feature?
Oh, will it kill me now?
If you're looking for a low barrier to entry websocket toolkit, I suggest socket.io from personal experience. Not sure how it scales but they make it really easy to get basic websockets up and running.
I do not completely understand the question, especially with your reference to CSS. If I'm correct you want to do the following: - Have a public part of the website, called which requires a guest login or doesn't require a login at all - Have a login form that requires the user to login - Have a part of the website that requires valid login credentials - Have a prt of the website that requires valid login credentials and an admin flag? Questions that come to mind: - Is it a Single Page Application? If so, what kind of libraries are you using for routing etc? If it's a SPA, I would write a wrapper around your routing where you specify which access level is needed to access functionality, ie: route('admin', requireAccessLevel(ADMIN, function() {}); - Is it a more traditional backend that serves HTML based on POSTs of forms etc? Let your Java backend serve pages and let it handle the authorization part. 
Wow. How did I miss that? Oh well.
Thanks. Not sure why this didn't work, but an answer below helped me a ton. Appreciate the support though!
Boom. Wow, perfect answer. Works really well. Thanks!
That's fair enough. I extracted it from another project I wrote mainly to use it in future in bigger applications and thought I'd share it!
Also, in the same example the text input is a bit dodgy and the cursor keeps jumping to the end of the input when I try to edit something in the middle. Probably the listener is very aggressive.
Mmm yes I've noticed that bug as well. I'm going to try and do something to fix it. Maybe listen on change instead of keyup.
As Windows user it always leaves a bad impression that every OSS project seems to need have at least some Linux/Mac devs that marginalise and dismiss Windows. If your framework breaks the cross-platform capability of the platform you are developing on then something is not right. I work on Windows and my shit works on Linux always: 99% of it is not that hard. edit: why downvotes? why not be inclusive instead?
Better listen for onBlur.
It depends. Sometimes it's really hard or not at all obvious. Windows breaks many conventions (path separators), has different compilers, etc. I've been trying to get native Windows support for https://github.com/nodegit/nodegit/pull/140 for over a year. Tried again recently even asking for help to fix the remaining link issues with no luck. So yeah, Windows support is a nice-to-have, but you could can drive yourself insane trying to make it a reality for every project.
I agree. I've worked on three large Angular applications in the past year and the DI is terrible. The first project I started and went with AMD, but the other two were existing apps and used the Angular automatic DI. The problem I have with injection like this, is that if offers zero clues on where the actual dependency lives. At least with CommonJS and AMD modules you have a resolve algorithm you can run through your head, or even just look at the require and see if it maps to the FS.
In my experience small stuff like path separators and line ends are all easily solvable. The gyp is problematic, I admit. Funny thing: I needed a git client for node a few months ago for a OSS application and looked at the project you link, but I went with something else because of this lack of windows support. But at least you tried! I see many devs who just dismiss it out of hand even for non-native code but just cant get over their ignorance of `path` module and addiction to `make`. Shitty thing about using `make` is that even if a windows dev would come by and is willing to fix+PR your path separators he can't just fork and run your test suite but has to make it complicated (and wonky!) with git-bash/cygwin/Vagrant. The crossplatform issues should be limited to just the windows technology problems, and not unwilling linux devs. note: this last bit is just a general statement, *not* specific for you (nor meteor as i didn't look to far into their problems).
Which website? You could potentially implement this as a chrome extension
superpages.com hides zipcodes and phone numbers and I want to be able to inject the code in the address bar so that they all auto show.
Windows isn't a UNIX system. Linux and Mac have this in common so they basically can share the same dev software. To get development things to work on windows is pretty difficult unless you're making it with windows specifically in mind, which is pointless when most windows devs just end up virtualizing Linux anyway. Putting an enormous amount of effort into supporting that is a waste if time.
Great, glad it worked for you. What you're doing is really simple and it would benefit you to learn how to do it in plain JS, as the other replies suggest, but I understand sometimes you just want to get things done.
If you can find a common CSS class for all of the elements you want to show then you can just write something like this: $('.classname').show() AFAIK you can only run JavaScript on a page if the website injects one of the HTTP params directly into the page, or by using the browser dev tools or by creating a browser extension/plugin. If they are following best practices, hopefully the developers aren't directly injecting their HTTP params into the page, so a browser extension will be your best route
Socket.io on node is the way to go for sure
I feel like i should definetly give this a try. I've been creating multi-user environement for a while using Flex and red5. This looks like a farily easy transition to js based "pushed and sync" solution. 
It really is a cool design, a couple of different projects are working on the same approach (a virtualized DOM which can generate minimal diffs on state-updates). It has a lot of value for rendering performance and hosting UI outside the DOM thread (eg in Workers or over the network). The performance-improving technique is hard to produce otherwise, because it involves walking through the DOM nodes and modifying individual attributes, or moving elements around, rather than setting innerHTML or destroying/creating new els. Not to take away from Meteor's work, but the guy building React/Om (a clojure dev) is using immutability guarantees with this technique to do things like zero-effort undo and redo. He gives a pretty cool talk about it [1] 1. https://www.youtube.com/watch?v=DMtwq3QtddY
Check out Pusher. I use where I work to make our site update it's content in realtime and it works like a charm. Really easy to set up and start using.
I completely disagree with the second paragraph. It does not match my experience. 99% of all node.js windows problems in the wild are just carelessness or disinterest. If you make sure you use `path` and support CRLF's then most things work fine. I know because I do PR's for this all the time. Node.js is trying to be cross-platform capable. Don't ruin that by trivial errors. Keep in mind it is more then a server runime, it is also a general purpose scripting host and gets used a lot for all kinds of automation and build systems. The only valid cases to not support Windows are problems with native code and plain bugs in Node.js (there are some still). Calling it "enormous amount of effort" out of hand is just spreading FUD (this is the bad dismissal I mentioned earlier).
Ahhh OK. Yeah just load the page then paste this into your URL bar: javascript:$('.phlnk').show();
Do people actually do any development on windows? Pretty sure that it's all done on OSX or Linux
If You are a MeteorJS developer / user / fan put yourself on the map http://weuse.meteor.com
Folks what do you think about performance in these torrent clients? Are they fast as native or getting better?
Is this something like [React.js](http://facebook.github.io/react/) that does efficient DOM rendering?
You are SURE? How is that? Don't be na√Øve. Plenty of shops use Windows. It is a perfectly valid OS. Last office I worked had 150 devs on Windows workstations, 75 on Mac, and nobody in production used Linux.
yes is comparable to it https://news.ycombinator.com/item?id=7485055
I've never used jqplot before but I didn't see any way of getting the data back out of it. It looks like its designed so you give it the data and it fills in a div with a canvas elemet containing the graph. var plot1 = $.jqplot ('chart1', [[3,7,9,1,4,6,8,2,5]]); So you'd either already have the data, or you might be able to get it out again from the object $.jqplot returns. I'd recommend asking on StackOverflow as you'd probably get more help there.
here's console.doge https://github.com/dettmar/console.doge
I would use a user script - in Firefox use the Greasemonkey extension. I have not tried user scripts in Chrome, but I know it is possible, and there is an extension (Tampermonkey) that supposedly makes installing scripts easier.
Eerrm, meteor isn't on windows. Seriously, people are downvoting because I'm disappointed Meteor isn't supported on Windows yet??
DAE hate windows??
Because it's a platform that I'm used to and I do pretty much everything on it. Most dev tools are available in Windows. I fail to see how it's a problem (except people hating on it for little to no reason). Plus we're in /r/javascript, I don't see how you can't be a JS dev on Windows. From node to normal front-end material, you can do it all! 
I've just never liked windows as a platform. Its resource heavy, bloated and inflexible. Its a shame it has such control over videogames, because otherwise I'd never touch it. I still find the easiest and fastest way to develop is with a few terminal windows and a decent vim setup.
it should give you a bad impression of your proprietary OS not of the open source software.
You can think what you want but let's not assume your limited experience and imagination are universally shared. 
I swear that /r/javascript is literally nothing but links to articles about currying Javascript functions.
Very good point! I haven't tried it, but possibly not too well. I'm unsure of how I would handle that
http://win.meteor.com but it isn't a priority in many js communities.. you should keep developing on Silverlight it works on 100% of Windows PC :D
&gt;a few terminal windows and a decent vim setup. That's where you have problems. Some of us don't only work as JS devs. We need to view what clients see, we need to have IE to get an idea of what's going on at their end too, we need to be flexible (which windows is brilliant at) and we also need to play some vidyas. My point is, while it's easier to circlejerk (i.e. DAE hate windows?), it's useful to remember that we are working to provide solutions to people who aren't tech-savy. I don't have to impress other devs, I need to impress those guys who pay me! PS: I develop on notepad++, I know it has it's fair share of hate but I'd rather have it than use VIM
I wish this worked on the Pi... but getting mongodb running on it is awful. I love this framework though
yea, it is a good effort: I appreciate the energy they put in that. there are legitimate problem on windows, like with native code, and I think it is reasonable these might not be first prio. but like I ranted here many issues are not those kind if real problem at all, but instead just come from some latent anti-windows circle jerk that has no place in serious dev (and I gladly stomp on it :)
Virtualise. Running an entire OS for a browser seems silly to me.
Doesn't answer the question though. Still, if you want to pay your Windows licences that's your choice. Just seems like a total waste of time and money.
Turn it into a bookmarklet. And here's the code you're looking for: javascript:$('.phlnk').show();$('.zipval').show();$('.ziplebl').hide();
Not true, there are also articles about how inheritance works in JS.
Javascript can not handle a string written in multiple lines. You usually see code like this if somebody wants to define a really long string: var str = 'this is some long string continued on ' + 'the next line'; But I assume that you actually want to have a linebreak in the html: about.innerHTML = '&lt;p&gt; this is an example on line 1&lt;br&gt;and i want to continue on line 2&lt;/p&gt;'; Less clutter: about.innerHTML = '&lt;p&gt; this is an example on line 1&lt;br&gt;' + 'and i want to continue on line 2&lt;/p&gt;';
Nice, but what problem this library solves? I can't imagine why anyone would ever need more than standard functionality, for example changing order of classNames doesn't affect anything, so why would you do that?! If you have to concatenate classNames, then why were they incorrect in the first place?
Extremely technical + Javascript probably means they really want you to know more modern idiomatic approaches in Javascript. Thus, I recommend you read this in its entirety: https://leanpub.com/javascript-allonge/read (see I told you (again) /u/homoiconic) 
&gt; Virtualise. Running an entire OS for a browser seems silly to me. Except running Linux will be doing exactly that! I love windows because I'm used to it (call it Stockholm Syndrome). I've tried Linux/OSX but nothing came close to windows. The joy of pressing ALT+Tab when playing a game to respond quickly to an email cant be replaced! It's simple, useful and bloody cheap (time wise)!
Command+Tab ?
http://imgur.com/rDbCJrN
I don't understand why yours and another comment that mentioned Windows support are getting downvoted. I've mostly used Linux over the past 6 years or so, and for the last 2 have used a Mac for work (Node.js job). Last month I left for a different job and built a new PC for that &amp; college with Windows 8.1 on it; free license from college, I wanted to get back into some gaming and most of my projects/work are Node.js or Java based, so I thought I'd give it a go without dual-booting for a while. It's been much less painful than I remember Windows being for development (even with node-gyp). Sure, I'd take a UNIX command-line and a tiling WM any day, but it's been a decent experience. Node.js is cross-platform. Writing code that can't be run or developed on cross-platform means you're ignoring best-practices and being lazy. "lol who develops on winblows!?", or even "...you should keep developing on Silverlight it works on 100% of Windows PC" is pretty ignorant and disappointing, and misrepresents the wider Node.js community (a great developer community in my experience).
It's open source for a reason. Go submit a fix if you need it to work for your particular needs. That's the strength of open source development. If you can't or don't have time to fix it, then you might step back and realize that the devs are probably in the same boat. 
I wish it supported postgresql. If I mention moving any production data into mongodb the DBAs start sharpening pointy sticks and get this strange look in their eyes. That said I'm still going to find some kind of stealth project so I can start to use meteor.
Again, your limited insight and experience do not reflect wider reality.
Sure, I fix low-hanging windows issues all the time. But only if I can run the build at all, not if I have to battle with a platform specific Makefile.
Firebase.com is a super low barrier to entry service for real-time JavaScript. It's definitely my choice over manually writing Socket.io code.
It really is annoying how the skinny jeans'ers cant be bothered to test on windows.
Ahreed. Even though i work on Linux, i think it isn't that hard to get Windows support. Even if the app one develops will never run in that platform, it is a sign of stability. That being said it might be hard to get some of the libraries that deeply run with unix together working on Windows. 
Thank you! This is exactly what I need! Edit: There are some zipcodes (examples: 46701, 49001, 49048) that all point to one PDF called something like "Division Pricing.pdf", how could I handle that?
Most people don't actually know that NPM can run tasks, good article. See also: [substack - task automation w/ npm run](http://substack.net/task_automation_with_npm_run)
The new hotness is Meteor -- https://www.meteor.com Watch their screencast. It is doing exactly what you are talking about doing, in an amazingly small number of lines of code. I haven't used it (yet), but have used Firebase. I like Firebase, but it is a proprietary solution and Meteor is open source. Plus Meteor looks even faster and easier to use.
It is crazy that they don't support an RDBMS.
I don't get this at all. Why not use commonJS modules for this, which have the huge added benefit of an entire ecosystem around them? I'm struggling to see what problem javascript DI frameworks solve that aren't already solved by mainstream module systems.
Great, another Node.js + MongoDB thing... why must we perpetuate this unholy combination of a terrible language with... *that* database
Learning :) I code / open-source stuff because it helps me learn. If that helps someone else along the way then awesome!
Urban Dictionary can help: http://www.urbandictionary.com/define.php?term=bro. I wouldn't be offended, but as a resident of the Internet I'm not sure I'm capable of such emotion any longer.
*Here's the Urban Dictionary definition of* [***bro***](http://www.urbandictionary.com/define.php?term=bro) : --- &gt;Obnoxious partying males who are often seen at college parties. When they aren‚Äôt making an ass of themselves they usually just stand around holding a red plastic cup waiting for something exciting to happen so they can scream something that demonstrates how much they enjoy partying. Nearly everyone in a fraternity is a bro but there are also many bros who are not in a fraternity. They often wear a rugby shirt and a baseball cap. It is not uncommon for them to have spiked hair with frosted tips. &gt;Bros actually chose this name for themselves as they often refer to each other as "bro" even though they are not related. --- _I couldn't go to sleep last night because some bros at the party next door kept screaming, "Whoooooo!!! YEAAHHHHH! Whooooooo!"_ --- [^(about)](http://www.reddit.com/r/autourbanbot/wiki/index) ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=/r/autourbanbot&amp;subject=bot%20glitch&amp;message=%0Acontext:http://www.reddit.com/r/javascript/comments/21m53s/yo_bro/cgeddqk) ^| ^(**Summon**: urbanbot, what is something?)
sweet, will add that to the links at the end
No, it's not offensive nor inappropriate. As an aside, my favorite offensive if you just look at the name library, but makes complete sense if you break it apart, is [DD_Roundies](http://www.dillerdesign.com/experiment/DD_roundies/) DD is for Drew Diller. DD is also a cup size of large breasts. Roundies is because it gives rounded corners (border-radius) in IE 6 and 7. Roundies are also ... well, you know... 
If you go by urbandictionary, every word and phrase in the English language is offensive or vulgar somehow.
Where is my head at, of course white space isn't ignored in strings.... The string concatenation is a perfect solution. Thank you very much!
B-) it is a rite of passage when you realise how flexible a language JavaScript actually is to start thinking about its possibilities. I guess currying is like stage 1 for a lot of people. I have noticed though that despite the great expressiveness it gives to your code I don't find it being used that much in the wild which is a shame.
seems like tree data structure.
Its all good! Im actually really busy with college- and frankly im still learning how to use github! Or need to learn i should say
I love that site. I use it all the time.
Thanks for this. Seeing the popularity of "Make as a frontend build tool" made me cringe a little. Some info on watch tasks might be nice to add; it's pretty important once browserify comes into the mix. I'm also curious if anyone's gotten LiveReload to work with a solution like this? Currently I'm using gulp and some plugins. 
Aren't there really only two node and mongo things? The MEAN stack and this? I believe most languages all have their faults and virtues. What's the least faulty language in your opinion?
Excellent, I really appreciate it. Edit: I even got it to search Google Maps if the zip isn't found! window.open("https://www.google.com/maps/search/zip+code+" + zip);
Seems a little weird just to put boobs in behind a chart.
added section on watchify, will add a thing on live reload latter, don't have time to actually test anything.
it is on the roadmap: https://trello.com/b/hjBDflxp/meteor-roadmap
I couldn't restart while using Firefox. I also didn't read the rules because I'm lazy as fuck I just kept clicking arrows, which was fun enough. Then some sevens appeared, turned gold, and I wasn't able to do anything else. Fluid design though I have to say the game is a success. *edit* couldn't restart after the game was finished, can however restart before it has begun. A game with a twist.. i like it.
Huh? I don't run Linux to use Firefox or chrome. I use it for stability, foss support, great package managers etc.
My point of using Alt+Tab when gaming is to emphasize that OSX isn't known for supporting most games. Plus I would rather use Linux than use OSX. I'm nothing but a poor developer
I see what you mean but each node only points to one more node 
Have you tried https://www.google.com/doubleclick/studio/swiffy/ ?
Fair enough. I can do all that with Windows. There's absolutely no need for me to switch. Meteor is merely a toying platform in my situation. I don't and won't be hired to work with it at any point in the near future. 
Okay I've tried it now, but it doesn't support the mouse interaction :(
True, which I think is more-or-less accurate :-P
CommonJS and AMD manage file dependencies; dependency injection systems (such as the one above) manage instance / constructor dependencies. This lets you decouple your code more easily than AMD / CommonJS alone can do. Furthermore, some advanced DI systems provide methods to differentiate between registering a constructor and injecting a new instance every time it's required, or registering an instance of something that should be injected as-is. Voijta's talk on Dependency Injection is probably the best explanation that I've seen or read in terms of being approachable. The first half is totally framework neutral, the second half is specific to traceur compiler. https://www.youtube.com/watch?v=_OGGsf1ZXMs
Which Firefox version? Hate to say it, but it works for me - in Firefox and Chrome. Btw, i'm using zepto.js for dom manipulation and events. Could it be source of the problem?
Ooh. That's along the lines of what I'm looking for. Thanks!
i'm really like npm but i can't see it being used as a build system, i mean its great with install hooks because you can do amazing stuff for installing the packages. But as a build system it kind of fails, i had to write a gulp task where it build sprites from a lot of images and it build vertical sprites which later merge into one horizontal sprite. i really don't see that happening with npm as build system..
When comparing objects, JS engines don't compare the toString values of the objects, they compare the memory references. Since those are technically two different objects (i.e. they occupy two different places in memory), the comparison is false.
That is correct. It may be more clear to consider the equivalent code: (new Object() === new Object()) === false
That is definitely more clear than my explanation, though I kindof avoided including it because it's a bad, bad, bad practice to write new Object()- Object is a member of the window property, and so it can be easily replaced with any other value, so your code is made more vulnerable to breaking by third party libraries. The {} syntax, however, will always create a new object. Consider: window.Object = 50; {}; // Object new Object(); // TypeError: number is not a function
so you have a task that is more or less the exact thing gulp was designed for, taking full advantage of streams and what not. So use gulp. On your packages where all you're doing is browserifing something, minifiying something, and running some tests, don't use gulp it's overkill. You need to [lagom](http://en.wikipedia.org/wiki/Lagom) tool, which I feel is often npm, but other times its gulp, sometimes it's grunt, occasionally it's make, and it's never a python script because this is fucking JavaScript.
The magic involved with DI frameworks quite honestly puts me off. The fact that your runtime dependency graph is now partially owned by the framework seems like an uncomfortable amount of control to handoff to a black box.
If you want to make it a bit more useful: * Make sure that only LinkedList is exposed globally, you shouldn't have to create a Node object * Let me add a node without creating a Node object manually. 
&gt; it's a bad, bad, bad practice to write new Object(). Object is a member of the window property, and so it can be easily replaced with any other value, so your code is made more vulnerable to breaking by third party libraries. This is also true outside of the browser: `Object` is a global variable and code can muck with it and/or its internals. That being said, you cannot to protect yourself against every insanity by avoiding all global variables. If you cannot trust `new Object()`, you likewise cannot trust any ES5 construct like `Object.create` or `Object.isPrototypeOf`. You also can't trust jQuery or wonderful(!) libraries like `allong.es`: Some other library might shit on their internals for lulz. A better way forward, IMO, is to write some tests. If you add a malicious library, you'll find out, and you can remove that library. Life is too short to try to code defensively just so that you get along with terminally insane JS programmers.
[Here's a real one](https://github.com/victorporof/Sublime-HTMLPrettify) for SublimeText, possibly one of the best text editors out there. 
Good ideas. I'll get to work now. Do you think it would be a good idea to leave the node object globally so it can be reused in other data structures?
Yes, but does it have cherubs? I highly doubt it.
I consider Eric to be fighting the good fight on how inheritance is supposed to be done in Javascript. He has some excellent talks on prototypal inheritance you can find on YouTube where he briefly discusses inheritance in the context of stampit that may more clearly express the benefits of a tool like stampit to you. The main point is that _.extend while useful, only gives you the concantenative inheritance mentioned in the article. Stampit gives you some nice syntactic sugar to allow this sort of inheritance while still supporting things like encapsulation which could otherwise only be done by combining a closure with _.extend. Eric is best qualified to show how you can use stampit to solve the issues and does a good job in the article but I'll edited this in a little bit with a counter example using underscore once I am off mobile. 
I'm glad it's not just me. I understand that people who, say, run an ad network that injects JS into arbitrary pages might be pretty paranoid. But the JavaScript you write for your own web app or server? No need for such paranoia. var undef; or (function(global, undef) { ... }(window)) Blech!
I think iterating to get the size is a bad idea, maybe store / maintain it instead?
Exactly! Thank you
Probably better as an attribute on the list itself which gets updated when a node is added/removed. Thats a great point
var function1 = function (){ var time = get_time(); console.log(time); } var get_time = function(){ var time = new Date(); return time; //this is the "magic" } function1(); //result : current time stamp
I don't think it's even an actual issue in the real world. How could you go through the process of developing an application, running it over and over in your dev environment, etc, etc and not noticed that someone obliterated Object ya know? Having a stock set of tests to run against the 'known' properties of the global objects isn't a bad idea however. Especially, with the way we are automating running the tests these days and since you could just always include them in your project. If this really *is* a valid concern I'd say more so in node (maybe you saw the article about how easy it'd be to write a module for atom.io to put the user in a bad situation if they installed it for example).This is simply because people are exposed to the modules in a different way than on the client side with npm. However, there are groups working to protect us in this area and I think overall community voting solves the problem (and again...how would people not notice this during dev, qa, UAT, etc?! Unless we are talking only about being concerned for the effects it could have in a dev environment). But still, couldn't hurt to have those tests. Now if people's concerns are about their co-workers doing this.....well I simply cannot offer you any assistance there except to say 'run'. 
Looks like it's been done with svg: https://developer.mozilla.org/en-US/demos/detail/whale/launch
you can do SS with phantomjs, Meteor.call is for the stuff which can't be a Mongo/Minimongo collection
Thanks, you guys are a great help!
I'm going to implement some more methods tomorrow, including an add method. I guess it would work with any object with a value/next value stored. I didn't use an array purely so I could really grasp how each node linked up if that makes sense? Plus I was told in the interview not too.
It was being used to calculate the size each time a new node was appended but based on advice from /u/tfforums the size was stored as a property of the list instead
&gt; if people's concerns are about their co-workers doing this.....well I simply cannot offer you any assistance there except to say 'run'. https://www.youtube.com/watch?v=NyjSnspLDrY
A few things stand out: 1. In `iterate`, you needlessly assign `this` to `self`. `while` does not establish a new context, and `this` will still refer to the LinkedList instance. 2. In `append`, there are two issues. First, there is an inconsistent return value; when the LinkedList is empty, it returns the instance, and `undefined` otherwise. Second, you duplicate `this.last = node;` and `this.size++`; and third, you do not assign `null` to `node.next` when the LinkedList is empty. A more concise implementation is: LinkedList.prototype.append = function(node) { if (this.size === 0) { this.first = node; } else { this.last.next = node; } node.next = null; this.last = node; this.size++; return this; } 3. Your Iterator's `hasNext` function will throw a TypeError when the LinkedList is empty, because `this.index` will be `null` I also agree with some other comments that exposing the internal Node class is not ideal, and the `append` function should really just take a value and create the Node itself.
Great game. Maybe the animations could be sped up just a little but apart from that it works really well. 
[lolwut](http://imgur.com/BJ4yQIo)
Which one has better performance? The libgdx version or javascript version?? Which one is easier to maintain? I'm currently torn between doing Java/Libgdx or pure javascript.
A few parts were a little rushed in the interview but I've corrected the mistakes you pointed out. I'll improve it more tomorrow. Thanks for your help /u/BlitzTech!
[This should clear it up.](https://www.destroyallsoftware.com/talks/wat)
The word "bro" in isolation is not inappropriate. But words have different connotations in different contexts, and there is a growing "brogrammer" subculture in the programming world which, in the minds of many people, doubles down on the exclusionary atmosphere of our profession.
Works well for me. 1662 score first game, 3 achievements, which feels good because I found the game hard. Nice design beyond a simple clone. I lost from a full top row when it was top's round. I couldn't tell if I lost just because the row was full, or because I rolled a number that wouldn't combine. I assume the latter, but I didn't recall seeing any number show--I could be wrong on that, sorry I wasn't more observant if you look into this. In case I'm right, it'd be nice to see more details of the board shown on a loss, so it's clearer, instead of the game's logic being brought into question. Nice job.
No, sorry, `[0] == 0` still makes no sense, and `[[]] != [[]]` is equally crazy. Nothing is as bad as `"php" == 0` in PHP, though. Actually, to expand on that: [] == false // true [[]] == false // true [0] == 0 // true [1] == 1 // true ["abc"] == "abc" // true [["abc"]] == ["abc"] // false [false] == false // false null == false // false [null] == false // true 
Thank you! That's what I find really interesting. I asked this question my friends and receive polar opinions. Based reddit's score you have most controversial answer too. I guess I will rename it to something less controversial. BTW yeoman solves search problem via keywords, and thus generators are very easy to find. Personally I hate long names for generators. The tool is supposed to reduce repetitive work, and typing long names is very repetitive.
It's not only likely, but the entire reason I looked into this in the first place. Client-side programming isn't always just a matter of looking for _a_ bottleneck. I had functions which needed to check/update 50,000+ elements, and these functions could be run by the user quite frequently. These would take about half a second to run, which from a UX perspective feels pretty clunky. Switching out the $ selector for a getElementsByClassName, which runs ~140x faster, and that noticeable delay becomes negligible, and my entire interface benefits. The thing about programming for performance, is that big programs are built from little pieces you can 'microbenchmark'. If you apply a consistent approach which includes performance considerations, you're in much better shape than should you build something while ignoring performance, and have to come back later and tune when your data/traffic has increased 100,000x.
What's wrong with using "Make as a frontend tool"? I have that working fairly well actually. I wrote a simple watch cli to watch my client side directory, and run make build on changes...
I get that, but I don't think that the choice in presentation clarifies anything; it just groups the "trues" together so that they look more connected, but the set of `true 1 "1" [1]` is a pretty weird combination, despite its being grouped together in this chart. To make the chart more meaningful, the various causes of the `==` weirdness need to be determined and the comparisons that are affected by those causes can be grouped together.
I'm all about this thread ^^
That's fair. [The chart posted in /programming's comments](http://i.imgur.com/rWoBHj4.png) is more informative in that respect. I might even print it out. 
I was looking at this a few years ago and there were a few projects around. Seems like there a ton more on Github now (eg. https://github.com/mauriciosantos/buckets) I personally like to play around with data structures in JS for fun, but I usually end up using Redis for most non-trivial data structure problems (server side). It is rare but always fun when you need to bust out something client side (a la Resig's post on tries in JS: http://ejohn.org/blog/dictionary-lookups-in-javascript/). 
Cool, you got it working with LiveReload? My main irks with make: - Cross-platform support. This is kind of a no-brainer in 2014. - Maintenance. A config or simple JS file is preferable to [insert any DSL here], especially if you are working in a team that changes over time (i.e. can't predict what kind of developers will be coming into the project). Ideally, you should approach _all_ of your open source projects like this, which is why IMHO make is not a good fit. - Logic and complexity for particular tasks. This is something that NPM scripts fails at as well. The main issue here is [the author](https://algorithms.rdio.com/post/make/) suggests "simply writing small scripts"... In other words, re-inventing the wheel by writing your own build plugins (exactly what grunt and gulp do). - Syntax/style. This is mostly personal preference, but stuff like `.PHONY` is vague and makes no sense for somebody unfamiliar with Make.
I think a better argument is just that === is sane and that people generally use that instead. The existence of a poorly-designed language feature that has a well-designed, easily-used, and common alternative doesn't matter a whole lot.
Queues are more suited to using arrays as the underlying representation because you're typically not modifying anything inside the structure, just at the ends (and in InfiniQueue's case, just at the start). If you were to try to insert something inside your queue, as is the typical use case for a linked list, you'd end up doing a load of shuffling and copies and it would likely have abysmal performance (as it should, since it's array backed and trying to resize an array from the inside out of expensive). I would use InfiniQueue for queuing, no question; but I would never want to use it where my normal operations would try to insert or remove items from the middle. Nearly all technical interview questions are contrived anyway, and mine is no different. Being able to implement a relatively simple data structure correctly is an easy, quick test to see if people can follow instructions and understand that different data structures have different use cases. Of the 20+ interviews in which I've asked this question, there have been only two answers: one where they implement it correctly, and one where they use an array, I explain exactly how to implement it without an array, and they still can't do it. In the latter case, there's usually enough of an indication they're too inexperienced and we end up passing. There hasn't really been a middle ground, and certainly none of them have brought up the limitations of JS execution environments like you did to justify alternative solutions.
#
Just because you or I are familiar with the nuance of "== vs ===" doesn't mean the Java turned JS coder before you was worrying about type safety at all. I find these charts quite useful because I see "==" all over legacy systems. 
Probably easier to just use === rather than consult a chart. But people should learn both, of course. 
http://es5.github.io/#x11.9.3 Everything is predictable if you read the spec.
&gt;Especially since now we have things like Node.js, and long running processes is there a need to study and implement data structures in JavaScript? wat
DerbyJS
[Well, there was a tool called 'Bro' released on HN a couple months back](https://news.ycombinator.com/item?id=7121268). It ended up with nearly *900 comments*. The entirety of which were focused on arguing about the name. First comment: &gt; ...The problem here, if this program is actually intended to be used, is that just typing in the command would be a constant reminder of an entire subculture that is widely seen as[2] putting up walls and doors that say "NO GI–ØLS ALOUD" around the programming profession, an attempt to preserve privilege. Those of you suggesting an alias are either being disingenuous or missing the point entirely.... Second comment: &gt; ...Absolutely, lets throw away our sense of humor and wordplay because there are theoretically people that might be offended (maybe, kindof. You know. In theory.).... You can imagine where it goes from there.
Wow, lot of garbage. I'm using phasor which uses pixi.js - and it uses canvas or webgl. Maybe your browser has problem with webgl? Does those examples work without problem? http://examples.phaser.io/
No, it's not weird. It baffles me why people are so compelled to write article after article about it. JS is not strongly typed. Big fucking deal. 
I't hard to compare performance, because java/libgdx version doesn't work in browser - gdx supports html by using gwt, but i wanted to make native js version. What platform are you targeting? If you want to make purerely browser game, maybe js is better solution.
You can't roll a number if it can't combine and there is no place for it. You lost because your top was blocked. I need to change game over description a bit. It may be confusing why it happened.
I completely agree. I can count on one hand the number of times I've gotten burned by javascript's type coercion, and most of them were caused by undefined being turned into "undefined" instead of an empty string. I don't know why people have such a hard time remembering what data is in their variables.
`[0] == 0` I'll concede as being confusing if you don't know how arrays get converted, but `[[]] != [[]]` should be obvious. Arrays are objects and objects always get compared against other objects by memory address. Every language I've worked with does the same thing, why would you expect it to behave differently?
Typescript is a thing. It offers all of this at compile time and goes down to JavaScript. 
The SVG support alone makes it (in my opinion) one of the most powerful and intuitive ways to manipulate SVG documents.
Meteor has supported ACL and validation without having to use custom server methods since 0.5.0 (October 2012). For reads, you can conditionally publish subsets of collections, including only publishing a subset of fields on documents. For updates/inserts/removes you can define allow/deny rules that are run by the server before client changes are written to the database. They can simply allow/deny proposed changes, or transform documents for changes that can be gracefully fixed. http://docs.meteor.com/#allow For client side validation, there are several meteorite packages, though it's pretty straightforward to implement a custom solution. Server side rendering is on the roadmap under consideration for 1.1, but isn't a top priority because there are more valuable things to work on.
Solved: The Raphael library supplied with the zip is 2.0.1, after upgrading to 2.0.2 it's all working. This only happened on the Mac, and chrome browser.
The first comment reads like it was written by someone with a persecution complex who is constantly on the lookout for things to be offended about. Who knew that calling a tool "bro" would be seen as "an attempt to preserve privilege"? FFS.
Oh wow. Thank you very much! This is exactly what I needed.
If a Java turned JavaScript coder can't be bothered to learn the nuances of a different language that they have no business coding in it. Do they still think JavaScript is like Java because it starts with the same 4 letters? It would seem so, even after nearly *20 years* of being told it isn't, judging by the constant stream of whining "it doesn't do this, it doesn't do that, why isn't it like this, that's just dumb". To which I say "fuck off". Because I'm tired of this shit. Would they say the same if they were writing Hungarian about sentence construction being different to English and therefore stupid? Fucking hipsters. Go die in a fire. To those who will downvote this: fuck you too. How'd you like it if you faced constant disparagement for your valid work by self-aggrandising people too fucking lazy to make the effort to understand what you do? Wouldn't you get a little annoyed?
while more useless than console.loge, still infinitely more useful than console.loge
This is fantastic. Is it going open source?
Running the tests in multiple browsers isn't necessarily difficult. What testing framework are you using?
I use Ghostery to block Facebook, Twitter and other social media crap. Uncaught ReferenceError: twttr is not defined Achievements.js:153
So when we get to the writing small scripts part of a build process then you may be better off switching to grunt or gulp, but main project where I call scripts from npm this is a major improvement from earlier where I was calling scripts from a grunt file. That being said certain things are much easier from bash then from js and those are where this kind of thing excels, things like working with git are a lot easier with bash, I'm going to edit this from another computer with a link to a publish script I know have in 3 packages for publishing to bower, component, and npm without building on the master branch. EDIT: [promised script](https://github.com/Leaflet/Leaflet/blob/master/build/publish.sh)
wat.
So I was looking all over for command line live-reload examples and then remembered the reason I didn't have any, all the projects I had that used live reload were combo backend/frontend projects so we just did livereload via express middleware.
I've already committed this overriding console.log for my fellow developers amusement
You're evil. I like that.
yes, but SS it isn't a so needed feature for a brand new isomorphic realtime js framework, anyway it will arrive in future. For basic validation you can use Collection2 package. 
I'm using mocha right now. But I'd be willing to change to another frameworks it that would work better. I know that running tests in multiple browsers is not a problem. The problem I see is having a variety of browsers with different plugins/versions on different platforms to really test the plugin detection code. I know there are some quite significant differences in how browsers deal with plugins.
What languages do this with their default comparison operator? Java? Ruby doesn't: irb(main):001:0&gt; [] == [] =&gt; true irb(main):002:0&gt; [[]] == [[]] =&gt; true Python doesn't: &gt;&gt;&gt; [] == [] True &gt;&gt;&gt; [[]] == [[]] True Clojure is similar: user&gt; (= [] []) true user&gt; (= [[]] [[]]) true The only language that I can find with similar semantics is racket (because `=` is only a numeric operator). In this language, `eq?` is similar to Javascript's `==`. &gt; (eq? '() '()) #t &gt; (eq? '(()) '(())) #f &gt; (equal? '(()) '(())) #t
cool I'll check it out, I've been tending towards tape and testem because mocha can be anoying to use both server side and client side
I was specifically thinking of C, C++, Objective-C, C#, Java, PHP, Lua, and all flavors of Visual Basic. You're right that I had forgotten about python.
I see you're very passionate about quality code, but sometimes it just doesn't happen. In my experience, a Java coder is thrown into a new Ajax framework that looks a lot like Java, but they never leaned JS or spent time figuring out the confusing parts of it. So they hack on the code until it works well enough. I'm not saying this is a good plan, or that I agree with it, but it happens at tons of small operations who don't have far reaching resources. 
Now that is a useful chart. 
... Also some good examples of appropriate responses. Rofl
You say it turns everything into strings, and then give examples of strings being turned into numbers.
That's just ridiculous. Pascal looks like Ada but they are different beasts. Why would a Java programmer think that similarity in syntax means similarity in execution? They wouldn't think the same about C#.
Do outsiders think JS devs deal with these issues daily? I guess it provides an excuse to write off front end web dev as "sucks too much" when, at least for me, it's the most delightful platform I've ever worked with.
They're all very goofy nonsensical brand names is the problem. "browserify" is nice because it actually hints at its purpose: make your modules usable in a browser. But how are the words "yeoman" and "angular" related to the purpose of "scaffolding" and "dhtml framework"?
&gt; typing long names is repetitive Aliases and autocomplete can help. You can also make a distinction between the whole name and the command, like "yeoman" vs "yo".
/r/learnjavascript /r/learnprogramming http://www.codecademy.com/courses/javascript-beginner-en-6LzGd/0/1
Sets and Maps along with WeakMaps are added in ES6
That's because I meant numbers, not strings. Sorry!
I love it x] i might start using something like this in place of error messages, even if only for my own amusement.
yeah i dont see the problem. two objects that look the same are still not the same object. i learned this a long time ago when dealing with asian people.
I think this is both the best and worst bot I've seen.
This is the nature and beauty of a cons cell.
I'm guessing they meant this: http://sett.ociweb.com/sett/settApr2014.html
This article!
http://getbootstrap.com/javascript/#carousel
Yeah another case of a confusing value for 'this' in JavaScript! ;)
Thanks I'll take a look at that.
Why is it always a TODO app?
Anyone have an opinion on using traceur for production code? It seems like, since the spec is still in flux, you may end up with "ES6" code that is essentially worthless down the road.
Dynamically managing large sets of catalog items so they could be quickly filtered and updated individually. There's a bit of a cart before the horse problem here - perhaps these things are only rare because the technology didn't used to support it. You can't set the direction of development based purely on only implementing things that have already been done.
window.article dammit, not again!
Common reference for comparison.
Nope. The only thing I'd consider is a getter for something that's calculated. Honestly, I just use public or private variables and pretend there's no such thing as protected.
I don't know if private or protected mean what you think they mean. A private variable is one that is not accessible to things outside of the object you are defining. A protected variable is a variable that is available to only the object you are defining and any other objects that inherit from it.
&gt; since the spec is still in flux It isn't. All the fancy new stuff still works the same as it did a year ago. &gt; you may end up with "ES6" code that is essentially worthless down the road. You can just fix minor issues. You don't have to throw your code away.
At the very least, I would make sure you're using a specific version of Traceur, so that changes in Traceur can't break you. Then you could, in theory, keeping using your not-quite-valid-ES6-but-Traceur-accepts-it code forever. But /u/x-skeww is right too: The spec is not really changing at this point so it's pretty safe. The code that Traceur generates is not particularly optimized though, so you might want to run it through a tool like Closure Compiler (disclaimer: I'm on the Closure Compiler team) to optimize the code so it runs fast. By the way, we are currently working on ES6 support in the Closure Compiler as well :)
Created an account just for this self-promotion and he didn't even include the link? FOR SHAME!
Private variables can be emulated using closures but it causes memory usage to grow. Every object have another closure.
Everything is always predictable if you read the spec, the computers we code for are fundamentally deterministic. That doesn't mean it's sane, though. If my language has a function called `abs` that returns the absolute value of a number except when the system's UNIX time is a multiple of 157, whereupon it returns NaN, and another function called `real_abs` that just returns the absolute value of a number, wouldn't it make sense for people to say "always use `real_abs`"?
The performance cost of a Javascript function invocation is likely much greater than a C++ function invocation in most implementations.
First of all, I didn't bother looking through all your code, but I'm pretty sure you're not registering any event listeners (well, except for the intervals). So as far as I'm concerned, your only animation is happening as a result of the `setInterval`s. Second, it's not *super* bad here, but you really shouldn't be passing strings to `setInterval`; it's the equivalent of using `eval`. Just pass in the function object. Finally, as long as the slide and toolbar switch have the same duration, couldn't you just use a single interval and "bundle" their function calls? setInterval(function(){ slideSwitch(); toolbarSwitch(); }, 5000); If that doesn't work, you're probably running into issues with blocking operations in your JS animation. You should try refactoring to use [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions) (which are [fairly well supported](http://caniuse.com/#feat=css-transitions)) if you can. Edit: Ok I couldn't help myself, so to see what was going on, I copied the code and arranged it into a working document. It seemed to work fine as is for me in Chrome. It also worked with my above alteration. There is an issue with it not loading a selection for the first five seconds. I fixed it by adding calls to `slideSwitch` and `toolbarSwitch` *outside* of `setInterval`. This broke everything. Adding a synchronous call made the code fail on the two jQuery CSS animation lines with `rgb(...)` in them. Unless you're using some other plugin, both of those `rgb` values should be placed in quotes (e.g., `{background: "rgb(31,29,30)"}`).
&gt;A private variable is one that is not **DIRECTLY** accessible to things outside of the object you are defining. You can, and often do in languages like Java and C#, make accessors for private variables so you can control HOW they are accessed.
rarely. the only time i do so is if i need lazily evaluated values/collections for performance reasons. In that instance I use the getter/setter builtin if its serverside, or normal get/set functions client side (to support stupid older browsers). as far as the whole "safety" thing goes, it's not really a concern for me. Being able to monkey-patch variables/functions in other libraries can be insanely useful sometimes. If someone intentionally monkey-patches my code and and breaks it, thats not my problem. 
You probably won't find many devs who do. With regards to hiding properties, a common convention is to prefix properties with an underscore to indicate that they're private. This preserves monkey patchability whereas hiding something with a closure makes it truly hidden.
Why not just bring OpenCL to JavaScript?
So do you not value [encapsulation](http://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming\)) at all?
I use lexical scope for the architecture of my code as much as possible. I generally avoid use of objects except for two limited cases. I never create methods of my own for use in algorithms or anything else remotely deep. This approach reduces code overhead as much as absolutely possible. This means the fewest lines of code possible without any performance limitations, and on some occasions it means performance improvements. It also generally means fewer references and no unnecessary code conventions. No unnecessary code conventions means nearly every line of code implies an assignment, a condition, loop, or containment. In other programming languages this technique would not be as appreciated, because it is not memory efficient. The two exceptions where I use object literals is to group static references for assignment to literals of similar use and to provide an API for many methods without polluting the global scope.
Everything in javascript is call by reference so no. Edit: but looking at the responses, I'm realizing you're talking about encapsulation, meaning the variable security and not the way it's accessed. Honestly I'm not sure I'm really clear on why people use accessors to begin with. What is lost by allowing an attribute of a class to be publicly accessible in other parts of the code?
You want to use d3.js Something like this: https://gist.github.com/anonymous/9867391#file-gistfile1-js 
Pretty sure that was implied.
How is this relevant to anything? Please ban this fucking stupid bot.
Oh, didn't know you were a mind reader.
Math.abs(guess - actual) &lt;= tolerance
this ^ abs = absolute value (i.e. distance from 0 irrelevant of sign)
Hm, not coming from a C++ background, I'm a little unclear. Would an appropriate answer to this question be that I use Backbone's [get()](http://backbonejs.org/#Model-get) and [set()](http://backbonejs.org/#Model-set)?
I think JavaScript is more flexible than you're giving it credit for: [Example](http://stackoverflow.com/a/13558044) There is at least one other way to do protected members by having the child constructor invoke the parent constructor rather than relying on a prototype chain. I believe Crockford mentioned this in "The Good Parts."
sorry was posting a PHP graphing utility. Nevermind. 
I don't see much value of technically-enforced information-hiding over and above encapsulation by convention (with the "_" prefix).
See also es6ify
thanks. what's the advantage of d3.js over something like amcharts?
To clarify: Math.abs(50) // 50 Math.abs(-50) // 50 Math.abs(25-50) // == Math.abs(-25) == 25
Don't die for encapsulation in JavaScript. Honestly, it is something overlooked and most of the times pointless. Also, many confuse encapsulation with abstraction. Abstraction is the only real thing that you should be worrying. Build abstraction levels, use a functional paradigm, write short, **pure functions** and avoid state. Those are the things that **actually** improve the quality of your programs. Get out of the C++ mentality! JS is particularly interesting for being a language with many defects, but some particular things done acceptably well - better than almost any other mainstream language - and those are exactly the things that matter more! For example, functions are much better treated in JS than in Python (and worlds better than in C++). Abuse that!
Check out [google charts](https://developers.google.com/chart/)
Function invocation with a direct getter is trivial compared to direct access. We might see a few ms over a billion iterations. If the function were dynamic, taking a string variable to produce the value of the object property, then the time is about 10x greater (in my test below). http://jsfiddle.net/uMzGA/2/ *I commented a couple times and deleted them because I had a bug and thought I was mistaken. This code is correct. Also, jsperf.com is down otherwise it would have been there.*
I'd never played with amcharts before but it looks a lot like High Charts which I have used. I don't know amcharts very well but google tells me that it's a lot like highchairs. The main advantage of d3 is that it gives you a nice framework for building visualizations off of data pretty easily. The big bonus is that you can build those visualizations from the ground up. With something like high-charts and (I think) amcharts, you're pretty much stuck with the charts they've built which is good if you just want to build a visualization fast but bad if you're looking to do something new. That and amcharts is $1400 which seems like a bit much if you're just doing something very simple.
Where's the code samples?
It's very late at night where I am, so maybe I made a mistake, but it looks to me like method invocations are pretty slow: http://jsfiddle.net/uMzGA/4/
[WebCL](http://www.khronos.org/webcl/) is on it's way. The specification is ready, but so far no browsers natively support it. A plugin exists for Firefox and you can get [source patches](https://github.com/amd/Chromium-WebCL) for Chromium.. Edit: [node module](https://github.com/Motorola-Mobility/node-webcl) also seems to exist.
[Here's](http://www.2ality.com/2013/12/simd-js.html) some very basic ones. It won't be super straightforward, but if/when you need it, it'll be pretty simple.
D3.js is the opposite of super simple.
Typical C++ OO involves coupling the model (the private member variables) with the controller (the public methods that manipulate them). In JS, it is often better to store your data in a separate object, and construct a controller for it. Whether to directly manipulate, use .setFoo() methods, or a single .set() method doesn't really matter directly, it only matters if you e.g. need to track changes on the model. I think traditional OO is wrong in teaching us to think about black boxes that encapsulate everything to do with an object. You should instead encapsulate an object's different aspects separately, and then glue them together functionally. If you're constructing e.g. a tree of things, each node will hold a reference to its parent and an array of children. You can have .add() / .remove() methods on the node object, but still allow others to read out .parent and .children directly. Think of it as an implied interface of read-only properties. But the data and/or behavior associated with each node can be attached with a separate model, in a new namespace that is type-specific. Objects with public properties only become unwieldy when they start to mix responsibilities. Accessing variables directly between friendly classes is entirely reasonable in small arrangements.
Sorry about that. It was just a quick throw-together to show the point. Thanks for the improvement.
Thanks!
I got bored, here you are: function Target(max, config) { max = parseInt(max) || 100; var value = 0; var ranges = [ { phrase: "Win", distance: 0 }, { phrase: "Hot", distance: Math.floor(max / 10)}, { phrase: "Cold", distance: Math.floor(max / 2)}, { phrase: "Freezing", distance: Infinity} ]; value = Math.floor(Math.random() * max); ranges = config &amp;&amp; config.ranges || ranges; this.guessValue = function(guess) { var distance = Math.abs(guess - value); return ranges.reduce(function(resp, el, ix, arr) { return !resp &amp;&amp; distance &lt;= el.distance ? el.phrase : resp; }, false); }; }
holy shit this is awesome. What inspired you to make this and how did you decide on the final equations?
I was just playing around with different primitives from some of my previous discoveries, evolving the sound incrementally with different approaches. I've been playing with using javascript algorithms to generate music for a few years and have had a bunch of different experiments. In one of the earliest incarnations I made a web server that other people could `curl -X PUT` at to upload javascript songs. I documented some of the basics on the [help page](http://studio.substack.net/-/help) and I gave a talk in Portland about this stuff last year [at node pdx](https://www.youtube.com/watch?v=2oz_SwhBixs&amp;list=PL818E3E69FFE55295) with the same kind of approach but a different stack. I made the web api this week for a class I taught for some teens at a public library here in Oakland. The [recent page](http://studio.substack.net/-/recent) is also good for seeing what other people have saved. All the songs [on my soundcloud](https://soundcloud.com/substack) link to gist files written in a similar way that should be easy to translate into the `return function (t) {}` signature.
You can define get() &amp; set() methods like in C++ using ES5 [Object.create](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create). It's not used a lot by front-end dev but it's useful if you are developing a library or a framework and don't want to leak internal properties. Also, using CommonJS or AMD modules, you can have local (privates) function and only export the API.
This is really good!
Do you think that version 4 is correct and if so do you agree that it shows that accessors are slow? http://jsfiddle.net/uMzGA/4/ 
Even though I'm from a C/C++ background as well and tend to write JS in a C-ish way, I don't attempt any kind of encapsulation. [What I'm currently working on](https://github.com/engijs/engi) doesn't need the overhead of additional function calls.
Personally i would prefer var localJquery = $, earth = {}, placemarkIds = [], points = [], validEvents = ["click".... ; instead of using a new var declaration for all variables. 
This is crazy, crazy good.
nvd3 would be the better choice. It's a wrapper around d3, gives you simple charts that are easy to setup. 
http://nvd3.org/ /*These lines are all chart setup. Pick and choose which chart features you want to utilize. */ nv.addGraph(function() { var chart = nv.models.lineChart() .margin({left: 100}) //Adjust chart margins to give the x-axis some breathing room. .useInteractiveGuideline(true) //We want nice looking tooltips and a guideline! .transitionDuration(350) //how fast do you want the lines to transition? .showLegend(true) //Show the legend, allowing users to turn on/off line series. .showYAxis(true) //Show the y-axis .showXAxis(true) //Show the x-axis ; chart.xAxis //Chart x-axis settings .axisLabel('Time (ms)') .tickFormat(d3.format(',r')); chart.yAxis //Chart y-axis settings .axisLabel('Voltage (v)') .tickFormat(d3.format('.02f')); /* Done setting the chart up? Time to render it!*/ var myData = sinAndCos(); //You need data... d3.select('#chart svg') //Select the &lt;svg&gt; element you want to render the chart in. .datum(myData) //Populate the &lt;svg&gt; element with chart data... .call(chart); //Finally, render the chart! If you're familiar with d3, that's not bad at all. 
I forgot the name, but there was a website that had a whole chat system built into the console with colours, emoticons and all that.
There are lots of libraries out there, but none are perfect, or maybe I'm too particular. * [Chart.js](http://www.chartjs.org/): looks nice but doesn't support events so I rarely use it. But if you don't need events it's probably the best one to go with. * [Google Charts](https://developers.google.com/chart/): fairly comprehensive but not as nice looking as some of the others (in my opinion). [Cannot be used offline either](https://developers.google.com/chart/interactive/faq#offline) if that matters. * [xCharts](http://tenxer.github.io/xcharts/): looks great, nice animations, supports events, extendable etc. but only supports a few chart types (basically just bars and lines). * [HighCharts](http://www.highcharts.com/): lots of functionality, but not free and looks fairly ugly if ask me (you can theme it, but never tried myself). * [amCharts](http://www.amcharts.com/javascript-charts/): looks really good and plenty of functionality. Probably the best library overall in my opinion, but it's not free (and fairly expensive at that). There are a millions others that I don't know much about: [C3](http://c3js.org/), [NVD3](http://nvd3.org/), [Polychart.js](https://www.polychart.com/js/) etc. From your description I'd recommend Chart.js. 
Personally I dig this and find it useful. Thank you
I can literary visualise dancing magic mushrooms and fairies smoking crack
brb working on 10th symphony
Could you clarify what you are saying a bit? If you're encapsulating variable declarations in a closure you are, generally speaking, guaranteeing the variables inside that scope which can be garbage collected once the function creating the closure has been fully executed (for example with the module pattern the object you return obviously will leave that object reference in the memory graph but any scalar or object variables you are 'hiding' inside the closure become leaf nodes and can be immediately gc'ed. Furthermore, (in v8 at least) the closure is a direct signal to the internal compiler that the locally defined variables can be placed in the young generation memory pool and will never become old generation iirc. Finally if you are talking about variables declared inside a "constructor function" a new closure is definitely not created at least if I am understanding. Essentially, except in odd cases, closures allow you to limit memory consumption and prevent memory leaks. There are scope chain issues with deeply nested closures but this is solved by caching locally and is more of an issue with lookup time (the scope object that is built up internally is similar to a normal object in Javascript... But again that is in v8. I assume something similar with the other engines). 
Would that solution involve preprocessing the files before serving them?
&gt; with the exception of open source projects on github, any kind of automated test, let alone unit and e2e testing are exceptionally rare in JS land. Yes, but writing tests is not like rewriting your code to use some wonderful new framework or paradigm. If you aren't already writing tests, you start. By all means use `{}` instead of `new Object()` if you like, but on the whole, if the proposition is that you need to write code that works reliably even in the presence of malicious code that redefines `Object`, I suggest that is a corner case in the JavaScript world, nor a mainstream practice.
As is par for the course I think the vast majority of comments are harming you here. Yes encapsulation is important as it always has been. The point is to do it in the natural ways of Javascript and unlearn the conventions from class based languages: namely using closures. As I mentioned in another reply, closures shouldn't be affecting memory consumption in a negative way unless you are doing it wrong. Use closures and check out Addy Osmanis book for some ways of recreating patterns in Javascript you've seen before (free to read online if you Google it but don't take OOP too far. There are almost always more natural fits using the functional paradigm/porotypal inheritance in js). Now as far as getters and setters: with simple objects you are probably just adding overhead you don't need. That is unless you need to reference a private var in a closure but then again you are probably doing it wrong. Just expose what you need. Another exception is when what you are returning is based on a calculation. That being said, there are good reasons why things like models in Backbone use setters and getters. What if I need to trigger an event when a value changes (this is js right?). What if I want my 'instance' of my 'class' to return an array or object that is a distinct object? You can't inherently do that in js. Every time you call new on a function object that has a reference type member you are getting the same object reference for that encapsulated object. Now with a getter. I can copy or more succinctly call Array . prototype. slice on the 'hidden' array and make sure each instance has its own unique array. The same can be said for an object member where your getter would call Object . create. The point is you shouldn't be trying to mold js into a class based language and the related paradigms, but it's ludicrous to have people tell you, you should be throwing out fundamental software engineering principles in __any__ language. This is one reason why languages like js and php have the reputations they do. Like suddenly 70 years of computer science don't matter because people don't want to fully grok closures (which are not anywhere near to unique to Javascript). 
Thanks!
We use require.js extensively for Player.me. I want to chime in and say that if I had to start over again, I would NOT use it again. For now, we kinda tamed the beast but... wow, that took some time. - A lot of hacks involved for "common scripts" and "page specific" pattern. See: https://github.com/requirejs/example-multipage-shim. TL:DR; it's ugly. I'm forced to make a dummy file that requires another file. 10 pages = 10 dummy files. - If you're planning on using jQuery + Bower, forget about it. It's a hit and miss. Even with "shim", once compiled, sometimes it works and sometimes it doesn't. You're forced to copy the plugin, and add the necessary requirejs header on top of it.. missing the point of Bower all together. - Cache invalidation. We solved it by generating a hashmap with grunt and feeding that. It's not a downside but it took a while to figure out how to do it (lack of examples) - Too many scenarios where it works locally, before compiling and uglifying, but doesn't work on production. jQuery plugins and shims are the cause. - Forced to use requirejs in the above scenario. Cannot use almond. Not a really big downside, its only a couple of kbs once uglified.. I think using requirejs is better than using no loader at all... but for my next project, I'll defo try out browserify. Plus, I didn't see the benefits of async loading in the browser. It works in theory but, if your aim is to minimize requests, then you'll have to go the common+page specific route. Anyways, I had to rant. :)
Great article! Cheers. 
The article seems mostly theoretical, and it doesn't bother to explore the practical alternatives to classes. Take a [Camera](https://github.com/mattdesl/cam3d/blob/master/lib/Camera.js) utility for 2D/3D graphics. It presents the base class, from which [OrthographicCamera](https://github.com/mattdesl/cam3d/blob/master/lib/PerspectiveCamera.js) and [PerspectiveCamera](https://github.com/mattdesl/cam3d/blob/master/lib/PerspectiveCamera.js) build on. We could use mixins for the common functions, but the code would hardly be any different and it would suffer from the same Fragile Base Class problems that the article discusses. And, a minor benefit of using `Object.create` over mixing methods into the prototype is that `instanceof` will work as expected (not that you should really use it). I agree that once you get into long hierarchies, you may need to rethink the design. But generally speaking classes and simple class hierarchies are not that bad. Hopefully the introduction of classes in ES6 will help unify JS coding practices.
I just don't think there's many situations where you're forced to not have a build process. If you can have a build process, why put all that complexity in your code that actually runs on the client side?
Alas, a complete discussion would force me to complete my book! But one thing that is interesting to observe from the RealWorld‚Ñ¢, is that class hierarchies tend to work well in libraries and frameworks, and not as well in application code. There is a lot of extrinsic pressure for libraries to maintain a stable architecture, while applications can iterate rapidly. So application developers are often very happy being able to choose the right library subclass, or make a subclass of their own. But that same application developer may be reticent to develop their own deep hierarchy.
I understand your rant and frustration since I had a similar experience. As a castaway from the Dojo Toolkit ‚Äì which forced me to adopt AMD ‚Äì I felt it was a good idea to use require.js, since it is very similar to the Dojo loader. I actually liked the AMD specs, but I also met the problems you describe. Too many hacks, too much time lost trying to integrate common libraries. Things went from very complex to a real disaster when we decided to use part of our code with node.js. So we've thrown away amd/requirejs and after playing a bit with browserify and webpack, I decided that webpack was the best solution.
&gt; And, a minor benefit of using `Object.create` over mixing methods into the prototype is that `instanceof` will work as expected (not that you should really use it). Can you elaborate on this?
Should be required reading for people trying to do classical OOP in JS exactly as they would in a classical language. JS is a different beast, and the classical way is often the slower and more awkward way.
Everyday when I'm doing frontend.. I'm telling myself that I should convert to browserify. It's one of the decisions that I'll have to live with :'(
You can implement this by having both camera implement a common interface, but take a transformation as an argument to the constructor. This is more flexible because all of the implementation of each class can change independently of the other if necessary, without breaking anything as long as the interface is maintained.
I'm not sure I understand what you mean. I'm complaining about the complexity of the build process. Before I entered RequireJS, I expected something that would work on dev without compiling, and work on production once compiled. With requirejs, it's not always the case. Another example that I forgot to put up there: When you add a new page, you have to create the dummy file like I said, the "real" logic file.. and it works on dev. But once compiled, it doesn't work, 'cause you also have to add it in the ``module`` part of requirejs. This is my gruntfile for requirejs right now.. requirejs: { compile: { options: { appDir: '&lt;%= globalConfig.dest %&gt;/js-orig', baseUrl: './', dir: '&lt;%= globalConfig.dest %&gt;/js-orig/build', mainConfigFile: '&lt;%= globalConfig.dest %&gt;/js-orig/common.js', skipDirOptimize: true, removeCombined: true, preserveLicenseComments: false, modules: [ // All the common fies should go in this bracket. // It's most likely jquery plugins that gets used through all // the site, like modals and dropdowns. { name: 'common', include: [ 'jquery', 'vendor/bootstrap/modal', 'vendor/bootstrap/dropdown', 'vendor/bootstrap/collapse', 'vendor/bootstrap/tab', 'vendor/bootstrap/tooltip', 'vendor/bootstrap/popover', 'vendor/bootstrap/button' ] }, { name: 'about', include: ['app/about'], exclude: ['common'] }, { name: 'blog', include: ['app/blog'], exclude: ['common'] }, { name: 'browse-games', include: ['app/browse-games'], exclude: ['common'] }, { name: 'browse-players', include: ['app/browse-players'], exclude: ['common'] }, { name: 'contact', include: ['app/contact'], exclude: ['common'] }, { name: 'error404', include: ['app/error404'], exclude: ['common'] }, { name: 'feed', include: ['app/feed'], exclude: ['common'] }, { name: 'feed-permalink', include: ['app/feed-permalink'], exclude: ['common'] }, { name: 'forgot', include: ['app/forgot'], exclude: ['common'] }, { name: 'game', include: ['app/game'], exclude: ['common'] }, { name: 'game-edit', include: ['app/game-edit'], exclude: ['common'] }, { name: 'home', include: ['app/home'], exclude: ['common'] }, { name: 'link', include: ['app/link'], exclude: ['common'] }, { name: 'login', include: ['app/login'], exclude: ['common'] }, { name: 'profile', include: ['app/profile'], exclude: ['common'] }, { name: 'profile-logged', include: ['app/profile-logged'], exclude: ['common'] }, { name: 'register', include: ['app/register'], exclude: ['common'] }, { name: 'reset', include: ['app/reset'], exclude: ['common'] }, { name: 'settings', include: ['app/settings'], exclude: ['common'] } ] } } }, As you see, this is pretty shitty.. and very easy to forget to add once you finished coding. As for the complexity part, http://player.me/coestar is an example profile page. As you can see, there's not much you can do in there.. but I really believe in code re-use and modularization, and that page alone has 67 files when not combined. The page is rendered server side (it's not even a SLA!). 
I'm surprised you didn't mention the OOP adage "favor containment over inheritance". Containment forces refinement of encapsulation, whereas class hierarchies represent a lazier path that is content to say these two things are related.
Nice article, nailed it with the introduction.
I prefer the word "delegation" to "inheritance," specifically because it doesn't drag along all sorts of baggage from other languages.
Yes, Google Chrome, or Mozilla Firefox. All you need is a browser.
Yeah but is there an application? So I could do it with no internet?
Use the absolute value! var distance = Math.abs(answer-guess); if(distance &gt;50){ //cold}
You can type JavaScript into the developer console in a browser without internet. Or edit a HTML file on your local computer and open it in the browser. 
That's great, thanks!
node repl
lol, 10/10.
To run with your camera example, if I required an isometric camera then I would probably go with the flow and implement a minimal IsometricCamera subclass - but I certainly wouldn't stick any application logic inside either it or further subclass. ie if I had an Observer object as part of my application, it would contain an IsometricCamera, not be an IsometricCamera. But that being said, that Camera utility isn't a particularly good counterexample. The subclasses are intertwined with the base class with no particular rhyme or reason with the separation of the View and Project transforms, and predominantly seem to exist as specialised factories - with the exception of the billboard code in the projection subclass. It would be a lot simpler to understand if the subclasses were dropped and the different types of cameras were incorporated as factory methods. That way my IsometricCamera could pick up the billboard code, for example.
install node. webstorm has a good debugger for node.
In the future, you'd probably get better responses by putting your code on jsfiddle and sharing the link. It provides an easy way to browse your code, and more importantly it allows people to fork it and show you the improvements they make.
It sounds like *you* need to reverse the transition when it's on that side. In other words you'll need two separate transitions that are the inverse of each other. That being said, it's pretty difficult to make any reasonable statement based on you just describing the problem. You clearly have the code that is giving you issues at hand... If you want people to be able to provide you any assistance on an issue like this you absolutely need to put it up on jsfiddle or codepen. Preferably, culling it down to something that exactly illustrates the issue and nothing else. 
I really really hope we see WebCL take off. But: SIMD allows the language and runtimes we have to issue vector instructions ("Single Instruction, Multi-Data.") WebCL requires programmatically creating a context, insuring your data is in the context, requires programmatically creating kernels, requires running kernels, requires listening for events: this implies overhead, both in the code you have to write (considerable) and in the work the system has to do to allocate resources (considerable). There's much less impedance when one is granted the ability to issue a direct matrix-multiply that the CPU already has an instruction for crunching.
I understand your frustration since AMD/RequireJS/R.js are by far not perfect and the configuration options can be confusing. Here's some feedback to your issues: * Integrating common files is a simple shim configuration and you'll hit the exact same issue and solution with Browserify. * I have no idea what this means since jQuery is absolutely AMD compatible and requires zero modifications to consume reliably. * urlArgs with cache bust query string? Not sure how cache busting relates or how you think Browserify can fix this. * I can't speak to your specific case, but it sounds to me like you're not fully understanding the implementation provided by RequireJS which is causes inconsistent behavior. Claiming it's jQuery plugins and shims may be true for your situation, but without context it's a blanket nonsense statement. * Join #requirejs on freenode and we'll help you out. Haven't seen something that isn't possible to optimize yet.
This would be really good for canvas. If the locations are above a single image though then obviously also &lt;map&gt; and &lt;area&gt; would be the old fashioned and fast approach, and that supports onmouseover too.
 function Smith(name) { var fullName = name + ' Smith'; this.hello = function(){console.log('My name is '+fullName)}; } var smithFamily = []; while(smithFamily.push(new Smith(smithFamily.length)) &lt; 30000); Memory usage: 11MB. function Jones(name) { this._fullName = name + ' Jones'; } Jones.prototype.hello = function(){console.log('My name is '+this._fullName)}; var jonesFamily = []; while(jonesFamily.push(new Jones(jonesFamily.length)) &lt; 30000); Memory usage: 9.1MB (20% lower).
I think this is what you're looking for: http://jsfiddle.net/
Thanks to the author for making it easy to dismiss the article. "Don't do that" is a great way to show your theoretical preferences and attempts to make others adopt your ideology for the sake of self comfort.
*The jsbn library is a fast, portable implementation of large-number math in pure JavaScript, enabling public-key crypto and other applications on desktop and mobile browsers.* - [https://github.com/andyperlitch/jsbn](https://github.com/andyperlitch/jsbn) Had to dig up this information on my own. Had no real idea what I was looking at when I landed on the link. And I'm pretty sure I've even used jsbn before, years back, but I suggest assuming less assumed knowledge.
You've just created a 'test' for the difference in memory consumption (and an extremely badly concocted one to boot) for the memory consumption used when appending to the prototype (one copy of the inner function which I'd remind you is also an object with its own internal representation) vs. recreating the same function object and appending it to the returned object __per instance__ (are you surprised by these 'results'???). This implies one of two things is at work here a) fundamental misunderstanding of closures and the topic at hand or b) blatant desire to cook the books in some bizarre way. Finally to put the conversation back somewhere in the same planet... You could actually append to the prototype created by this constructor function *inside* of this 'closure' in a multitude of different ways. Maybe that was the intention? I have no idea since this is 'proof' of a basic feature of the languages that doesn't require proof and wasn't what we were talking about afaik lol. tl;dr wat?????? 
By "extending" a base class (like Camera) with `Object.create(Camera.prototype)` you can use the `instanceof` operator to determine if some object "is a" Camera. Not that I would recommend doing this for any sort of application logic, though...
&gt; is that class hierarchies tend to work well in libraries and frameworks, and not as well in application code. Yeah, I can agree with this. I think it also depends on the use case. The animal kingdom may present some problems for hierarchal design, but if you're designing a narrow and specific set of utilities, then a simple hierarchy might not be such a bad thing.
The base class doesn't actually use the `update` method; I've only included it in Camera for the sake of clarity. So I don't see why it would be necessary to pass any functions to the constructor of the base class. Maybe I'm misunderstanding..
What's a better way to implement your example ontology of bank accounts?
A browser can run without internet. Just create the html file locally, include the javascript file, then tinker and refresh. When you are beyond the basics, you can consider virtual machines for running node environments. For now, you just need to learn basic client-side(browser) javascript.
I would concur. I come from Perl background, not JS. But Perl uses class hierarchy a lot as well, especially in public domain (CPAN). However my observation was similar that it works well for modules and frameworks, which usually have solid test coverage. But in business projects, where requirements can change often, it is usually not so good and you end up with lots of hack-ish solutions in child classes over time to augment the fragile base class. 
Ok, I understand what you're saying. Same goes for `Object.isPrototypeOf`.
A fair response - my comment was just on reading the linked article (which was rather short on detail), and on having read further this does seem to be a nice lightweight mechanism - which should allow rapid adoption. In particular it would appear to have a solid use case for automated code generation and pick up some free wins for emscripten. Also would appear to be a good candidate for the various matrix libraries turning up as part of WebGL taking off. But for things like Mandelbrot calculation which was the emphasised concept in the linked article, WebCL would be a dramatically better choice.
Because most primitives are of the type "object". It was an historic oversight that it was assigned "object" as its parent. It hasn't been corrected yet for obvious reasons (backward compatibility) That is actually a sort of bug that will likely be fixed in ES6, because null is truly the absence of data and is thus not a "type" in the strictest sense. To see the behavior you expect, run the same tests on "undefined"
I'm not sure you understand what implying means.
 window.onload=function(){ window.location="http://google.com"; }; Should work fine :)
how? the vertical carousel gets swiped left to right precisely so that it doesn't mess with native scrolling. which phone?
It will function back to ie8 at very least. CSS transistions fall back to transforms which fall back to "left"
The simplest way would be to use eval(). http://www.w3schools.com/jsref/jsref_eval.ASP But it's not exactly safe to run user input through it without sanitizing. You've been warned. 
Yes, but with HTML can you specify the page in which it redirects?
I've yet to dive in, but 'AngulaJS' on the homepage should be 'AngularJS'. ;)
Thought about doing music softsynths in JS. It is possible, but doesn't scale well IMHO thanks to no SSE. Waiting for Dart to take hold to do proper synths.
Clicking an image or arrow should "activate" the carousel so I can use the arrows keys.
Its good. you are learning javascript. however redirect on javascript is a security flaw in my opion
Eval would be the most straight forward. Could make your own parser, but that would be a bunch of functions. (I'm considering making my own calculation machine also). Or you could have followed the link in [this post](http://www.reddit.com/r/javascript/comments/21qxv7/pxereg_reversing_regular_expressions/) to [what we're looking for](http://peg.arcanis.fr/)
Examples shown posit global module installs. Instead, I'll often use regular devDependencies then run ./node_modules/mocha/bin/mocha or what not.
After reading, I am not even convinced that a better alternative to class hierarchies exist. For me, that was a waste of time to read. Yes there are some people who probably hadn't realized this. But without alternatives, they're gonna have to do it anyway.
It's cool, but now you have to give 9 useful replies &amp;/| submissions that aren't your own. I would suggest for you to post my project, but I've already done that for you ;)
I would expect to see recursive implementations as it fit so elegantly to linked lists, but as you mentioned "like Java" this works too
&gt; Integrating common files is a simple shim configuration and you'll hit the exact same issue and solution with Browserify. Doesn't seem like its the case http://webpack.github.io/docs/webpack-for-browserify-users.html#multiple-bundles &gt; I have no idea what this means since jQuery is absolutely AMD compatible and requires zero modifications to consume reliably. jQuery is fine. jQuery plugins no. Some have "smart amd loaders" .. most of them requires changes. &gt; urlArgs with cache bust query string? Not sure how cache busting relates or how you think Browserify can fix this. It's probably going to be fixed the same way as requirejs. that's why I said "not really a downside..." &gt; I can't speak to your specific case, but it sounds to me like you're not fully understanding the implementation provided by RequireJS which is causes inconsistent behavior. Claiming it's jQuery plugins and shims may be true for your situation, but without context it's a blanket nonsense statement. jQuery plugins problem. Page A uses Module Z and Y. Module Z requires a jquery plugin, so it has the correct require-js calls. Y suddenly needs the same thing... but upon testing in development, it seems like it's already there and it works. Once compiled, this breaks. Of course, the logical thing is that you have to require it everywhere you use it which is what we do, but sometimes we forget - and the kicker is that it works in dev but not in production. Something that works in dev but not in production is ridiculous. &gt; Join #requirejs on freenode and we'll help you out. Haven't seen something that isn't possible to optimize yet. All my answers has been answered, and the optimization with rjs is done. Like I said in my post, I'm just not happy, but thanks for the offer. 
I didn't experience this? iPhone 4S iOS 7.1 Chrome
First you should define functions in setup and not in real test: http://jsperf.com/promise-vs-callback/5 The real bottle-neck in that test is setTimeout delay, speed of both plain callback and Promise shouldn't be a factor, as clearly they perform much faster. Still, there's a big difference, why? It's hard to say, most likely related to some flawed JSPerf handling or V8 optimizations not taken into account. I remember that async testing for fast operations is totally not reliable in JSPerf, see e.g.: https://github.com/mathiasbynens/jsperf.com/issues/128
They do not, when you run a script from the package.json file npm adds ./node_modules/.bin to your path. All of these examples can be run with no global npm packages.
It's not just Chrome, in FF 31 Promises outpace callbacks to a massive degree. In fact Promises in FF 31 are blazing fast, based on that test. 200 vs 7,900!
The main thing is to adjust the way you think about it. e.g. you consider the location of the camera, facing and up direction of the camera to be properties of the Camera. What if you also considered the projection to just be another property of the Camera, rather than requiring a whole subclass for the different types of projection? i.e. this is the distinction between a Camera HasA projection, rather than a Camera IsA projection.
I demand nothing of you.
Indeed, I assumed too much. Thanks for the comment, it helped fix that.
Cake! It was my RL cakeda yesterday - Have some Doge! +/u/dogetipbot 25 doge
Sure the click rate is shitty, but carousels serve one very important function: to make those idiots at marketing shut their face and leave us devs alone to get some real work done.
Javascript objects are compared by reference, not value. // Not actual memory reference. // Just an example: var object = {}; // 0x014A var objectCopy = object; // 0x014A var anotherObject = {}; // 0x1C8B `object` is a reference for an empty object `objectCopy` is a copy of the reference of `object` to the same empty object. `anotherObject` is a reference for a new empty object (different from the previous) // actually compares 0x014A === 0x014A console.log(object === objectCopy); // true // actually compares 0x014A === 0x1C8B console.log(object === anotherObject); // false // actually compares 0x014A === 0x1C8B console.log(objectCopy === anotherObject) // false EDIT: I recommend you to read [**this question**](http://stackoverflow.com/questions/1068834/object-comparison-in-javascript) on StackOverflow. [**This question**](http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons/) also has great information
I'm using chromium under Linux and some parts of this page are totally messed, around the "Responsive Display" area.
It is funny until they start bickering about which pet-project gets the first position and end-up demanding a weighted randomiser for [40%, 30%, 20%, 10%] distribution.
Yeah I'd agree, feels like you should be doing this at the server level and not on the client side 
Screenshot: [http://i.imgur.com/GO7gMZq.png](http://i.imgur.com/GO7gMZq.png)
ahh. god damn vertical scrolling. on it. 
Not exactly sure how it *is* a security issue, myself. I do agree that redirects should happen on the server, if at all possible. If nothing else it'll be faster.
Not sure, but surely it would add a ton of weight and really decrease the flexibility
One of the aims behind classMaster is to provide a utility belt of methods for classList that gives the developer the same control as he has over an Array. Where is this useful? Well, it could be an engine for a series of CSS transitions. This name changing utility and the power and ease with which you can change classNames means you can seamlessly switch between many different transition options. I don't intend for this library to be the next jQuery, but if some people find it useful then I'm happy. :) Thanks for checking it out!
I think you're confusing horizontal and vertical 
(n)arrow minded.
My 2 cents: shims a necessary evil, due to browser inconsistencies. But library authors shouldn't include them automatically. Better to note the optional dependency in your documentation (e.g. some kind of browser compatibility matrix, with and without the shim) and let the programmer include them manually to avoid code bloat and duplicate/conflicting shims.
Vertical direction on a carousel means the slides slide upwards. If you map touchmove to that, sliding your finger upwards is the way you scroll. So if you have a full width slider, you cant scroll down the page. Even if its not full width, you would need to find a gutter to move on to be able to scroll. So, instead of mapping it to vertical sliding, I have the vertical slide controlled by a horizontal swipe. Hijacking the vertical swipe(ie: native scrolling) is bad UX
Well. Flexslider allows for min-items &amp; max-items. I allow for custom defined breakpoints, not just item counts, but all new settings objects at those breakpoints. I support addition,removal &amp; filtering of slides. It's also lighter than flexslider.
That's really only about marketing offer carousels, not every carousel. e.g. photos of a hotel's amenities so you can get a feeling for the place.
Classical OOP works perfectly fine in Javascript and performs orders of magnitude faster.
The 2.2 release of flexslider is very buggy (api issues). I can't believe it was released.
Security issue is a bit strong to be fair, but js seems like the wrong approach, it also might hit some browser security. I suggest if you care about it doing a redirect this way would be bad for SEO as you want to serve a 301 or something, also for accessibility as you can't assume the user will be able to run JS and redirect, which might leave them hanging
Can you show some code? The way you are describing it sounds like you're changing the end-user API, forcing the user to pass the transformation functions to a Camera constructor. Still not sure how you're going to get camera-specific methods (e.g. setToOrtho) without multiple classes inheriting from a common base.
Aside from eval, [PEGjs's sample grammar is (a simple version) of what you're asking for.](http://pegjs.majda.cz/online) Warning: the online editor has a tendency to get stuck in infinite loops, so save your work often.
Sounds good. I'll give it a try on the next project. 
Oh yeah? I haven't really had any problems with it.
Would be nice to have half item support.. i.e. show 4.5 items, a 'reveal' item.
So is Shonfinkeling just the clickbait term? Honestly, if you think you won't get clicks by calling it Currying, you probably shouldn't even share the article.
I am not an expert with flexslider so it's possible the issues were with my usage, but I do like the 2.0 release and find it easier to work with than Cycle2. The only issue I have with 2.0 is that swipe doesn't work for me on webkit based mobile browsers.
That's weird. I've never had any problems with swipe on any mobile platform. 
_Containment_? I'd always heard _"Composition over inheritance"_, but it sounds like the same principle.
I had some [similar thoughts](http://www.reddit.com/r/javascript/comments/1zsu7h/my_requirejs_itches_and_how_i_scratched_them/cfwrtx8) awhile back: &gt; Yeah, r.js is plain awesome....once you get it working....and if it never breaks. I'm pretty sure that if I get hit by a bus, my team is going to be SOL trying to maintain the r.js builds, no matter how much documentation I supply myself. &gt; But with that said, it does solve a lot of my problems, and makes things all-around better. I feel like it's working _good enough_ until true modules are widely supported, since it's just the build step that's a pain, though I'm always looking at alternatives. I don't know if anything else would be any better, but I do know the solution I have in place now is extremely brittle and exceedingly tough to debug and modify.
Could you link me to a broken jQuery plugin, one that can't be included directly? As for the module loading issue with plugins, relying on global state goes against the purpose of modules. I fell into this trap before as well and have learned to explicitly define per module. In the case you're describing where it works in development, but not production because you forgot to reference somewhere is a race condition. I'm surprised you haven't noticed the jQuery plugins randomly failing. I don't blame you for not being happy with this stuff. Its taken me a long time to get proficient and understand all the nuances, which are numerous. I've been working on a new optimizer for AMD projects, with a goal to greatly simplify the configuration. IMO AMD is still the most powerful and flexible convention for loading resources and it deserves better tooling that works elegantly.
I guess I'm feeling contrarian today. (sorry about that, I'm not trying to hurt your feeling or anything) Don't. First off, come to realize that your C++ background actually puts you at a bit of a disadvantage when learning JS. The issue is that JS syntax is such that it fools you into thinking it is just another C (with classes) language -- like C++, C#, Java, ObjectiveC, etc. The thinking is wrong. Javascript has more in common with LISP. More important in Javascript is to really learn about closures -- this is actually the most important concept in Javascript. Then variable scope (cause it aint like C++ at all), and finally the module pattern(s). TLDR: Javascript is a functional language, no an OO Language. Stop trying to make OO Happen, it isn't going to happen. Secondly, a book list: * Javascript The Good Parts * Tricks of the JavaScript Ninja * JavaScript: The Definitive Guide (praetoriansentry also mentioned this one, it is a good book to have) * JavaScript Enlightenment But also read code: * JQuery * Twitter Bootstrap * Angular/Ember (pick one) 
How about partial slide swipe? So if you have 8 items and 4 items per slide I should be able to swipe to any point in the slider (eg: 2-5, 3-6, 4-7).
For some reason resizing the renderer breaks. And i've accidently forward the red channel to the blue channel in the bitblt.. Oops.
I kept getting pissed off that the carousel was advancing while I was still reading, then I got to the last slide and had a [sensible chuckle](http://i.imgur.com/himZD0M.gif).
You mean like, have it land on the one that you passed?
http://luis-almeida.github.io/unveil/ Works perfectly in dev using shims. Once compiled, this goes in 'common.js', and it doesn't work. "fn" is not defined. Only works when you wrap it with define(function(require) { var $ = require('jquery'); Which nullify the whole points of bower :( I noticed it when we first tested the build. I had to copy ALL the jQuery plugins and wrap them in those. Absolutely frustrating. I'm good with it now, like I said in the original post, I tamed the beast... but I'm still not happy. Knowing !== liking. Let me know when you're done with the new optimizer, I'll be glad to test it out. 
http://www.jssor.com/ has a vanilla version along with jq but i'd always use jq where available personally. some implementations can't have jq but they're pretty rare.
JavaScript Patterns by Stoyan Stefanov does a good job of illustrating what you mean by the differences between the C++ approach and the JS approach.
If the carousel is going to be a big glaring red thumb on your website, you should be fighting marketing to get rid of it. Point to the pros like this website shouldIUseaCarousel. Point to the case studies on how useless they are. Yes you're doing marketing's job for them - but it's in *your* territory. You're the dev, you know what should and shouldn't go up on the website. You wouldn't go build a Shockwave app or Java Applet just because Marketing wants one, right? Why should you build a carousel then? It's not going to be used, it's going to be ignored. It's not going to generate clicks, it's going to push clicks away from that area. Educate those morons, otherwise they'll keep making the same mistakes and you'll keep making carousels.
Agreed. There are ways to approximate classical inheritance but they tend to detract from some of JavaScripts most powerful and compelling features. As was previously mentioned, the Module Pattern makes better use of JavaScript's toolset which, in turn, results in more flexible code. If inheritance is what you need, though, check out John Resig's Class Inheritance code. I also came from a OOP background so it was more comfortable for me to work w/ "classes" while I learned about JS. Now, I lean more toward the module pattern, though.
Source of interview question? I missed it and didn't see it in a quick overview of /r/javascript's front page.
I didn't know that! Very nice! I think of you as very meticulous and clean, a great writer; it seemed like such a glaring oversight (to have not mentioned my imagined need to global install): I should have considered that it may have been myself in error. 
Yes, probably, unless you can combine them all into a single XML file. There may be good reason not to do that if the combined file ends up being large. You should also consider caching files you've already loaded so you can access the data immediately. Check your cache to see if you already have that data before firing off an ajax call. If you have any opportunity to convert these files to JSON for the future it'd be worthwhile. Smaller files, easier parsing and caching.
Highcharts... they are simplest charts with the best documentation. www.highcharts.com 
This is literally the worst answer for this question. D3 is a super advanced charting framework, with a very high learning curve. /u/empT3 has no clue what he is talking about. 
Thank you!
Then that's probably a bug in Chrome and you shouldn't rely on that kind of behavior. Why the hell would you pass it an array anyway? That doesn't even make sense.
It requires jQuery. So no, you are wrong.
Flexslider also has accessibility support.
I do have another question regarding XML. We are trying to make images show up with XML and are unsure how to do so. This is our XML: &lt;first&gt;http://gardens.cwf-fcf.org/bird/01_01.png&lt;/first&gt; and below we are finding the xml with our ajax call: var image = $(this).find("first").text(); right now it is just coming back as text but we want it to show the image
Oh, you're gonna be THAT guy, huh?
I find myself buildings with a mix of inheritance and composition, and try to use what makes sense. John Resig's is pretty good for a lot of front end applications. We've been moving away from it though in MelonJS which is a 2d game framework.
Does anyone else find it ironic that webkit.js only works in Firefox?
next time read the documentation before posting a half-baked question
You need to generate an IMG element with that URL and insert it into the page somewhere. $('img').attr('src', image).appendTo('whatever');
Any good JS lib site will offer all versions. Developers have such varied build systems and content pipelines that good libraries offer as many versions as feasible. My own personal experience with managing JS/CSS dependencies in web apps is that you really need to manually maintain that shit. I've never made any UI heavy app that didn't require me to dive into third party code for debugging purposes, often also fixing issues in said code (most recently was select2's broken support for IE9).
Why replicate WebKit in a WebKit environment?
[Here](https://github.com/search?q=contact+import&amp;ref=cmdform) are some depending on your language of choice. 
Whether we agree or disagree with Jeremy Ashkenas' specific choices, I hope that things like CoffeeScript continue to spur interest in human factors design in programming languages. Do arrows help you think functionally? Does a hoisted JavaScript function make the code harder to read? Or easier because the "implementation" is hidden away in an appendix at the end?
It would actually be good if it ran in Trident.
Totally agree there, now that Chrome frame is no longer a thing.
I'm not sure why you'd replicate WebKit in Firefox either, but I think it's strange that you cannot run webkit.js inside WebKit. Seems like it would've been easier to get a javascript version of WebKit working inside WebKit than a different rendering engine. It's impressive none the less.
Can't read anything with that and the ribbon at the top
Has science gone too far?
I was about to report the following as a bug: &lt;html&gt;&lt;body&gt;Hello World! &lt;style&gt; body{ color: red; font-weight: bold; } &lt;/style&gt; &lt;/body&gt;&lt;/html&gt; (also, it renders part of the text on the far right of the viewport)
There's nothing wrong with reusing concepts when moving to a new language, but you should really take care here since C++ OO concepts do not map to similar features in JS at all. cwbrandsma says it all. I would recommend looking at nodejs literature for a taste of idiomatic javascript, with a complete programming model and a basic standard library for getting stuff done, all without the browser "distractions". But of course, it depends on where you want to go with your javascript usage!
Here is what we currently have and we can't get it to work: var info = '&lt;p&gt;#'+$(this).find("plantId").text()+' '+$(this).find("plantName").text()+', &lt;i&gt;'+$(this).find("latinName").text()+'&lt;/i&gt;, Type: '+$(this).find("plantType").text()+'&lt;/p&gt;'+$(this).find('first').attr('src', image)+''; what are we doing wrong?
 public static void main (String [] args) { int bankBalance = 0; String Withdraw = "w"; String Deposit = "d"; Scanner MyScanner = new Scanner(System.in); System.out.print("Enter your bank balance: "); bankBalance = MyScanner.nextInt(); System.out.print("Command(w to withdraw, d to deposit): "); String Command = MyScanner.next(); System.out.print("Enter an amount: "); int Amount = MyScanner.nextInt(); if (Command.equals("w")){ bankBalance = bankBalance - Amount } else { bankBalance = bankBalance + Amount } System.out.println("Your new balance is " + bankBalance + "."; }
Maybe I am confused but isn't it marketing's job to keep track of which types of marketing actually work? 
I assume you want this: var info = '&lt;p&gt;#' + $(this).find("plantId").text() + ' ' + $(this).find("plantName").text() + ', &lt;i&gt;' + $(this).find("latinName").text() + '&lt;/i&gt;, Type: ' + $(this).find("plantType").text() + '&lt;/p&gt;&lt;img src="' + $(this).find('first').text() + '"&gt;'; You may also want to avoid wrapping "this" into a jQuery object five separate times: var $this = $(this); var info = '&lt;p&gt;#' + $this.find("plantId").text() + ' ' + $this.find("plantName").text() + ', &lt;i&gt;' + $this.find("latinName").text() + '&lt;/i&gt;, Type: ' + $this.find("plantType").text() + '&lt;/p&gt;&lt;img src="' + $this.find('first').text() + '"&gt;';
Why use jQuery if you only need part of the code?
Does this mean I cannot run webkit.js inside webkit.js? : (
I use a large part of the code. jQuery includes a very important feature called event normalization. Without it, I would be spending half my day trying to keep up with browser differences and nuances. I much prefer delegating that task to jQuery and the folks who do that. 
Okay, now port it to C#.
You mean like with numbers? And be accountable for their failures with hard data? That would be the day. 
So where are the awesome parts? Also not sure when he is joking and when he is not. For example the 'super fast' part is a joke right? I also don't understand why people keep mentioning end to end tests in every introduction into angular as they are really hard to do well. Checking if an element is on a page when you navigate to a certain url is about as brittle as a test can get.
It works in chrome/safari (or any browser really) but there's a bug that causes most other browsers to do a very long hiccup for garbage collection.
Engineering? Yes. science? no.
It has nothing to do with the rendering engine. But the javascript engine. V8 stops the world to do garbage collection and for speed demon reasons emscripten allocates huge amounts of space then dumps it while rendering. This has little effect in spidermonkey as spidermonkey simply marks it as deleted, removes it from one table and lets its cleanup thread nuke it as needed. V8 on the other hand stops the entire thread, defragments memory, then continues. This causes some major hiccups (~30-90 second pauses). Luckily its just a compile setting in emscripten that should take care of the problem.
I like the fact that you can simply add data-persist="garlic" to a form tag and you're good to go!
Luckily ES6 will have both fat arrow functions with implicit return and traditional JS functions. I think using the arrow syntax for single expression mapping functions is a good idea, then using the full function syntax for subroutines with side effects.
Only use what you need. If you only use Array.prototype.reduce, just use [array-reduce](https://www.npmjs.org/package/array-reduce) from npm. If you only use Array.isArray, use [isarray](https://www.npmjs.org/package/isarray). These pieces are individually so tiny that you don't need to worry about the extra file size and somebody else already tested these cross-browser modules in all the browsers. What you should never do is use es5-shim from a library. It mutates global properties, which can get very weird when more than 1 library tries to apply shims and it results in unnecessarily large file sizes.
That's great to hear because you said you were "working on accessibility" only 5 days ago.
It appears #colours are #BBGGRR for some reason.
Awesome - thanks very much. I always forget Github has a search function. 
Is the WebGL caniuse report accurate for PathGL as well? http://caniuse.com/#search=webgl
It appears that &lt;style&gt;*{color:blue;}&lt;/style&gt; and color:red are swapped...
I've looked at the demo with multiple items per slide and, no matter how much you swipe, it takes you to the next slide. So you go from the 1-4 slide to the 5-8 slide. There is also an example with going from 1-4 to 2-5 to 3-6 and so on. Is there a way to detect the "strength of the swipe" and go from 1-4 to 3-6 in one swipe?
Sure, I'd change the hell out of the end-user API - it's not that the end-user API makes a great deal of sense at the moment anyway. e.g. PerspectiveCamera is configured in the constructor while OrthoCamera appears to require them to call setToOrtho at some point. My first steps would be to: * get rid of the subclasses; * move setToOrtho into the base class; * add new method setToPerspective into the base class; * rewrite the initialiser to take a config object that would allow initialising all the desired things in one go (also allowing setting of direction, up and position), and defaulting everything else; * maybe do some cleanup, ortho camera appears to have a zoom property it uses that doesn't have a setter - decide whether to complete implementation or drop. The main end result here is that the Camera can now be perspective or ortho - or can switch between the two. Throw a low level function "setProjection" that takes a mat4 and suddenly you have a Camera that can tween between perspective and ortho (or anything else). Then I would be in a position to start revisiting the API for the camera control which looks like it could use some filling out. e.g. you have relative xyz translation for camera position but a nice helper method would be something that translates n units along the camera's current direction. Actually I could cheerfully suggest a thousand handy extensions but it's your library. A better suggestion would be to study other engines camera objects and liberally steal ideas from them.
Ok I'll add that tonight/tomorrow
The bug I filed with Google managed to make an engineer go "Uhm, no, we're not doing that." Scary part was on Chrome you at least had a isolated tab fail due to memory heap protection. Android devices flat out dropped the entire OS (i'd be blown away if anyone was able to come up with rooting an android device with a javascript based stack smashing exploit).
Yeah, I think I got my color masks on the cairo/sdl surface backwards
Yeah, I think I got my color masks on the cairo/sdl surface backwards. It'll be fixed soon enough.
Sure make was never intended to pull git repos, fetch assets or compile javascript. Also, I'm no make expert and make_test.js's makefiles may be too simplistic or not idiomatic enough. But I think that make_test.js is a good introduction to make for most people writing web applications ... who never wrote or even read a Makefile. Now, tell me *what* I'm doing wrong, I'm eager to learn more.
Serious? Probably not. Most of webkit is C++, correct? If it were C#, that would limit a lot of development to Windows unless you were to run Mono. I think there are also a lot of limitations with what libraries are available in C# and .NET, to replace the ones webkit uses. I'd love if it were ported to C#, though. I could contribute back to it, and integration with some existing .NET libraries might be nice.
Huh, no idea why the company wouldn't just include the rendering core so people could make interfaces to their games with html/javascript... Seems fairly straight forward (minus licensing concerns, which is probably why they dont).
There's also the fact that Unity works in WebGL now. May have been a decision of where to focus their efforts. Port Unity3D to all platforms, or make it work with WebGL, which is already on all platforms?
Well I can't imagine a full port of all the C++ code to C#, but apple easily put together wrapper libraries for Objective-C, GTK did the same for C. Marshaling between C# and C++ is done all the time, you could probably just do a line by line port of QT's C++ WebView/Loader classes and have yourself a C# library..
Might be interesting to toy around with. I've never worked on anything of the sort.
This combined with server-side hotlink prevention/redirection makes for some fun times.
Effective JavaScript. Short but good book. 
I use xml2js for node. It converts XML to js variables 
code looks to do some great stuff. can we see this in action?
Ran OK on Firefox for Android 30 and [31](https://nightly.mozilla.org). Stock Android 4.4.
Well I'm fairly pleased with it. Whenever I write something like this people.filter(function (person) { return person.age &gt; 17; }); I wish I had a less clunky syntax for lambda functions, and that is what ES6 brings. people.filter(person =&gt; person.age &gt; 17); The lexically bound `this` will be useful too.
Noobie here. What is hot-linking, and why is it a bad thing? Aren't sites put in the Web in order that they can be linked to?
asm.js/WebGL never has the same performance as ~~native~~ the mono virtual machine, so that's not really an option for all developers. However, when you're running in WebGL, the whole thing isn't needed anyways. You can just display the html parts natively, since you can mix with WebGL freely (which doesn't work with Unity's current plugin-based solution).
Yeah, they've been working on their own UI framework for a few years now with nothing to show, while including webkit would be easy, obvious and much better than anything they've come up so far‚Ä¶ but I'm getting a bit offtopic here.
Assuming you were already using Lo-Dash, why not just use `var xs = _([1, 2, 3, 4])`? Or Underscore: `var xs = _.chain([1, 2, 3, 4])`?
I'm not sure I follow. This is what I'm referencing: https://blog.mozilla.org/blog/2014/03/18/mozilla-and-unity-bring-unity-game-engine-to-webgl/
What don't you like about the double arrow? I would agree that defining all functions with it would be very nasty, but for anonymous lambdas it's nice to read.
Yo dawg. I heard you like WebKit.
I've been soing some web development before. I've been part of starting a gaming community myself, and made the theme theme for our forums (http://forum.openredstone.org), and made quite a few modifications to the default worpress theme atthe main website (http://openredstone.org). I also wrote all of http://caponorge.com by hand (using PHP, and MyBB for the forums), same with my blog at http://mortie.org. I'll see if I can find some time tomorrow to have a look at how the website is structured. What you describe sounds like it shouldn't be too hard. Mind elaborating a bit on how the site was made? EDIT: my github page, in case you're interested: https://github.com/mortie?tab=repositories
Good discussion thank you; however, for this purpose it needed to be initiated on the client. Yes, I know .htaccess 301s would be the best bet. But for this simple little project I needed a client redirection via javascript or html(5). Once it's complete I will report back the intent. =)
You would be correct if this was 2008. The differences in browsers newer than IE8 are so nominal that this is not a very strong argument for using jQuery solely for event/dom standardization. You could just as well write 2-3 lines to handle attachEvent/addEventListener and .textContent where needed.
This is really cool. I had a similar idea, but went about it differently. I made a C# program that reads from an Excel spreadsheet (columns A-Z are the notes and the rows are the time and you just type anything in the cell to make it play). Then I generate keypresses and it is up to you to open the browser and let the keypresses make noise. It works really well and you can do long songs easily (3+ min) just by modifying a spreadsheet. Thinking about uploading this somewhere. I use a Timer thread AND a Stopwatch (C# jargon), so it stays time-accurate after minutes of playing.
I am trying to create a chrome/ff extension for April Fools, which would client side redirect.. surely there's always the host file but that's a dead give away.. I wanted to take it one step further =) { window.onload=function(){ if (window.location=="http://www.example.com" { window.location="http://abc.example2.com"; }}; } Didn't work... :\
thanks for the reply! I found this in wordpress on my functions.php page: $output.= "&lt;script class=\"secret-source\"&gt; jQuery(document).ready(function($) { $('.gallery').bjqs({ height : 391, width : 604, responsive : true, showmarkers : false, usecaptions : false, animtype : 'slide', randomstart : false }); and added the animspeed: 8000 part here. saved this but sadly it did not work. is this the correct piece of code or should i look for another page? 
Even sweeter would be simply 'data-persist'
Thanks for the input. As you can tell the library is in early stages, and there's a lot of room for change. :) I practically stole the Perspective/Ortho format from libraries like LibGDX, ThreeJS and Away3D. Maybe Unity's single camera class would be a better reference. 
Aha, interesting, I didn't realise that the commits had started to die down... Hmm, you're right though. It's sad that the project has started to die. Is anybody aware of any viable alternatives?
Since it sounds like this data basically never changes, can you store it locally in local storage, indexed dB, etc? This would allow you to make the request once, convert from xml to json once, and then only work with native js objects from then on out. If the data does change once in a while, app cache can help you out. Finally, this would make your app support offline as well. 
That's right, new lists are created as functions mapping to their elements, so if you slice a list, you don't create a new array in memory, you just get a mapping to the same underlying array. The benefit of this is that operations like slicing and concatenation can be performed in constant time and memory. I'd like to implement some more of the collection methods from lodash and underscore when I get some more time to work on it. Thanks for the feedback.
Doesn't Chrome do generational garbage collection which is inherently incremental instead of "stop the world"? It's ironic that Firefox works better in this memory handling scenario as they still do incremental mark and sweep. 
Well, i'm not very clear on the specifics of either, but I wouldn't say chrome but rather the latest V8 engine. Garbage Collection really comes down to either looking back through traces/scopes to see if anyone is still using it and reference counting. One hits when memory gets full and released, the other hits all the time with a very tiny small amount of penalty per memory operation. V8 leans to the traces/scopes approach, while Spider monkey leans to the ref counting approach (ironically Chrome uses almost purely reference counting within the accelerated rendering! oh what a world.). Obviously this isn't black and white you can tune in between those ranges and those gradients of gray have all sorts of names. Essentially, not just V8 but any garbage collector leaning heavier on trace's/scope's will choke hard on large memory/deep stack programs.
Nice article. One can also alias `npm run` to a shorter command. I personally like: alias npmx=npm run
A lot of people have stuff that they only want to be served in certain contexts, but don't want to implement an authentication system to enforce that.
Putting the numbers in one array and the operators in another is odd as far as any calculator system I've seen. Using an array and push/pop with all of the elements can be used to ensure order of precedence and verify a balanced expression with parenthesis, however. As others have said, eval is the most direct route but you'll need to proceed with caution. Finally (off the top of my head) you could use regex to parse out the numbers and operators and simply map your operators to a corresponding function that performs the operation but I still think the logic for operator precedence and parenthesis would get convoluted quickly without the well known stack algorithms for this. Could we get more detail on why it needs to be done this way/the specific use case? It seems like at least getting each key one at a time could simplify the thinking a bit. Are there any guarantees on the types of expressions you need to support, etc? 
There are way too many tutorials out there for you to buy a book... http://www.javascriptissexy.com
It seems to scale well enough for this application. You can make pretty sophisticated effects and play them back in realtime.
&gt; In object-oriented programming, there are three related notions of delegation. &gt; Most commonly, it refers to a programming language feature making use of the method lookup rules for dispatching so-called self-calls as defined by Lieberman in his 1986 paper "Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems". Delegation as a language feature supports the prototype-based programming model. --https://en.wikipedia.org/wiki/Delegation_(programming)
One thing I never understood about Array filter, et al. is that they set the scope to undefined instead of the item so you could do: people.filter( function() { return this.age &gt; 17; } ); Without the need to pass the second argument to filter.
&gt; this.update = function () { &gt; console.log('hi') &gt; this.__renderTarget__.update() &gt; }.bind(this) Nice.
Yes, that would be nice to have. I imagine performance is the reason for not doing it, as `.call` `.bind` and `.apply` tend to be quite slow.
what's this from?
Beautifully written. I'm not all that familiar with LISP, but this looks like a way to construct linked lists? Can you give us a little more context?
Just in-case you wanted to research further, there is a wikipedia entry on this subject: http://en.wikipedia.org/wiki/Inline_linking
Bahaha
HOLY CRAP CAPS LOCK.
How does the interator work? DFS? BFS? Index from 0 to n?
Hey! It's your cake day. So fuck off and eat it.
That's a nice idea to incorporate into a game, I'll let you know if I can think of a way to integrate that with my game! Also, code is now up on [GitHub](https://github.com/neuroflux/TextAdventureEngine)
Of course there is classical OOP, classes even get syntactic sugar in ES6.
This is the first time a web page scrolls choppy and slow on my G2. Would not trust web dev advice from said page. 
The main argument that I can see is when you have a class hierarchy the classical OO approach in JavaScript gets fuzzy about what to do with the base class constructor. If the subclass constructor calls the base class constructor, you may be tricked by the fact that the base class constructor was also invoked as part of setting up the prototype chain. i.e. the base constructor will be invoked n+1 times for n objects. If the subclass constructor doesn't call the base class constructor, you may be tricked by any objects set against the prototype object being shared. It's not something I get particularly troubled by (I practically never subclass), but that's one of the reasons.
They're both pretty average. Grunt seems to be basically a huge XML file of configuration and hoping that everything works out OK. Gulp seems to be a glorified Bash script. But these may be due to the inherent architecture of web applications, where there's only three languages that can't talk to each other.
most json data is hierarchical. how is this useful in that case?
Are there any performance implications for going functional rather than non-functional? I am under the impression (but pretty uneducated on it) that red black trees are one data structure where performance for a functional vs non-functional approach is roughly equivalent..
So, I've amended the system: * Commands are no longer case-sensitive * Commands that fail now give feedback * Map is still being worked on! Thanks for the feedback! I'll sort this in the dev version soon. The basic engine is now on [GitHub](https://github.com/neuroflux/TextAdventureEngine)!
Yeah, you're likely boned. If giantbomb is what you need, your options are server side AJAX to override the missing CORS headers (since only browser AJAX respects the CORS headers).
Needs more v8.js Then make it self hosting
The iterator does an inorder traversal, that is you get the elements of the set in ascending order.
You burn more memory, and you can't store next/prev pointers in the tree to speed up iteration. Other than that, inserts and deletes are roughly equivalent in terms of complexity, though the functional version obviously pays a bit more to do the memory allocation.
I work on a medium sized js project and we have no subclassing in our code base. If we get close to the need for a subclass, we can usually realign our architecture. In some cases we've used mixins to specialize an object instance, but even that is rare. 
Nailed it with this. I was thinking saying pretty much this but I assumed most folks would assumed by calling it a "constructor" with quotes meant "when it's called with the new operator"
The viable alternative to classical OO in JavaScript is to use the language as it was built and intended, which is lexical scope. If resource sharing for memory conservation is important the language has a solution for that, prototypes (which would be classes in classical OOP). This said there is no need to use *new*, *this*, or *Object.create()* to apply inheritance. Inheritance is available naturally, immediately, and free of convention in this language. It just takes scopes, which prior to ES6 means functions. Here is an example: var a = function () { var b = 10, c = function () { var d = 5; return b + d; }; return c(); }; a(); //returns 15; In the above code example the scope of **c** inherits access to its parent scope **function a**. I did not have to supply any instructions to make this inheritance a reality. It is already there and immediately available. This also addresses the needs of public/private access to resources. Resources in higher scopes are public to resources in lower scopes, while the resources of lower scopes are private to higher scopes. This is fundamentally different than conventions associated with classical OOP and likely explains why people moving from classical OOP find the web so very challenging. It is not just JavaScript, but also HTML/XML that are purely lexical as this is reflected by the relational properties instantiated in the DOM API. This is clearly a training failure that most organizations can be instantly solved by frameworks. Unfortunately, bandaids cannot solve problems intended for tourniquets. Frameworks on the web are continuously evolving to address more advanced data access needs. This evolution is costly for the users, the developers, and for maintenance. More than half the offerings of the most modern and advanced frameworks available today (I use Angular and may be moving to Dojo) can be solved with training your people on the underlying technologies.
You are right. This isn't better. Usually you want to to call the parents/super init function as well when creating a new object. So what you need here is to create a constructor function, that handles this for you.
AM I THE ONLY ONE WHO REALLY DESPISES ALL CAPS POSTS
[jsoneditoronline.org](http://jsoneditoronline.org/) is the best IMO, and is cross-browser.
My own criticisms have more to do with the way the language is constructed. Having a .prototype property of a function determine your prototype chain is weird and awkward conceptually. It seems correct to classical OOP guys because when you Uppercase a function and say "it's a constructor" and put some key/value pairs on an object things start looking pretty familiar. The thing is though, the function is still just a function and the object is still just an object. There's nothing going on there behind the scenes but a function being called `like.call(Object.create(like.prototype), "this")` and simple hash table that is completely dynamic. You can call them "constructors" or "classes" all you'd like and if that makes you feel better, then I say go for it! But it's not representative of the language and actually encourages people to think of classes as static entities when they are anything but. I don't really use classes at all but just a collection of objects that I can string together in the order I need, when I need, and if I need to modify a behavior, I do so. I may have 2 or 3 initialization function or "constructors" that I might use depending on who "who" is in your example above. And I have the flexibility in javascript to do so. tldr; Javascript is flexible. Classical languages are not. Javascript is not a classical language.
I take it this was the inspiration for today's gag?
Do you have any recommendations, that sounds interesting?
Your build system should really be concatenating and minifying assets as well
&gt; If there's node SDL bindings that already exist in the wild that would make things infinitely easier.. https://github.com/creationix/node-sdl
I'm not really seeing the benefit. I feel like the main argument against grunt is that it has weird syntax, but gulp is using this quasi-promise syntax in the form of pipe(), to me this is even more confusing and way less transparent than just objects. I'm not really against it, the main benefit I see is that you do write less boilerplate, but I don't really understand why everyone now is looking to jump ship off of the grunt bandwagon. Is the JS community really this fickle?
classes in ES6 are only syntactic sugar. They provide no new functionality that is not available today. http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes
Fuck coffeescript. Take this to /r/coffeescript.
The very first example, which didn't sell me at all
I think you said exactly what you should have and he was being pedantic. But we tend to do that lol. Thanks for posting this. We need *way* more focus on why Javascript is powerful as is, *if* you understand what you are doing. I've been wondering if it'd be against the rules to create a bot to scrape and post the number of articles per day about OOP vs. Prototypal inheritance on, say, a weekly basis. It'd be interesting to see how long it takes for the proper way to "win" over time. 
except getting it to work on windows is not always easy.
Look I'm not saying Never use the new operator and classical OOP sucks balls. I'm saying, Learn how the language works, learn what cases classical OOP is best suited for and go nuts (with the caveat that javascript isn't classical it's prototypal), learn what cases a functional approach is best suited for and go nuts, use event driven, use declarative, mix them all up, do whatever the fuck you want. Just stop trying to write Javascript like it was C++
I'm pretty sure you could do it with [this](https://jqueryui.com/tooltip/) with a bit of configuration.
It does on production mode.
And as soon as you need logic or complexity, you are pretty much back to Gulp/Grunt for its plugins...
A pure lexical scope is a great way to architect an application with only one exception. If something needs to be reused then move that thing higher in the scope chain to where it is needed. In the case of your code *A* and *B* are both global. B is available for use inside of A and A is available for use inside B immediately without need for *new*. You only need *new* to access the prototype methods, because they are only available on instances. The one exception where lexical scope as an architectural approach is not helpful is in the case of exposing an API for external access.
With my browser, Chrome 33.0.1750.152 on OS X 10.9.2, the only test that performed significantly better is: tryCatch(loop, error); I think this is a good *technique* to use for specific cases if you can live with the drawbacks. 
No idea, just a reaction gif I shamelessly stole from /r/reactiongifs.
Don't forget the special behaviour that if the function doesn't return anything, the newly constructed object is returned, but if it does return a value, that's what you get: function SimulateNewKeyword () { var constructor = arguments[0]; var args = [].slice.call(arguments, 1); var object = Object.create(constructor.prototype); var returnValue = constructor.apply(object, args); return typeof(returnValue) === 'undefined' ? object : returnValue; } function model (name) { this._name = name; } var model = SimulateNewKeyword(Model, 'redditor'); model //=&gt; { _name: 'redditor' } model instanceof Model //=&gt; true
`camus2` is rude and boorish above, but correct that the `super` keyword goes beyond simple syntactic sugar, because it is late bound rather than early bound. Whether this is a good thing or not depends on your opinion of class hierarchies and/or prototype chains. I obviously think they are the least useful and most harmful part of delegation. `camus2` obviously thinks otherwise.
Typically I scope things into a namespace. So something like: var app = {}; app.A = function() {} Just was keeping it simple :) The reason I typically use new is to create a copy of a prototype or object definition as it were, so i have access to a new copy of properties and can manipulate those properties without another piece of code messing with it. Doing a more traditional object: var A = { foo: function(v) { this.value = v; } }; No doubt the A.value would get changed everytime you invoke the foo method. So new is handy for building instances of an object definition. That's why I tend to use prototype. All that aside, I am tempted to try coding things in a more C-like fashion, where one uses simple objects for just data, and scoping functions to work with those objects. Just haven't really thought through it yet to apply it to something.
It's fairly easy getting it to run on Windows but there are a couple of things to keep in mind. I am a Windows guy myself. I usually use Cygwin to emulate a Linux environment but highly recommend not going this route with Gulp or any Node based program. I recommend using git bash since it uses the normal Windows directory structure but has the added power of bash and git support. I never use CMD or PowerShell myself. First install Node through the Windows installer if you have not already. Open up git bash and type npm install -g gulp. This will install gulp globally. Type it should say no gulpfile found this means its installed correctly. Now you just need to go to the directory you want to use gulp in and type npm install gulp. This will now install gulp locally for your project in the node_modules folder. Create your gulp file and you are good to go. There may be a couple of dependencies to install along the way but the command line message should tell you how to do this. I highly recommend taking the 2 hours to set this up on Windows. It may be annoying but will save you tons of time down the road. I added two links below for Node install and git bash. http://nodejs.org/download/ - Node http://msysgit.github.io/ - Git Bash
The main issue here is that they're trying to show prototypal inheritance working using things that are still classes. When you start to realize that objects are just containers for data and functionality you start to break away from the "this inherits that" way of thinking. Probably the best display of how prototypal inheritance should be used is $scope in AngularJS. The real alternative is to use more of a functional style with objects just being a way to group data. In fact the less "inheritance" the better. Object initialization is only a problem because it eludes to classical style inheritance when that is not what is really happening.
I feel like I've read more than 10 of the same article, they only get skin deep. Starting to think this is just spam.
By far my favorite thing in this is if (typeof jQuery == "function") { jQuery.ajaxSetup({ "async": false }); } It's so simple, and yet the effect would be so bafflingly frustrating.
Looks good. However the JSON Prettifier serves a different purpose IMO; I find it very handy when debugging APIs on websites I'm developing, as it automatically turns every .json URL you load in a new tab into an interactive viewer. This means I can load an API endpoint in a new tab and see what I'm getting.
Please stop spamming your shitty book. This is the second time you posted a "giveaway." And last time you removed my crtitcal comment from the site.
http://lmgtfy.com/?q=emscripten+tutorial
&gt;Object initialization is only a problem because it eludes to classical style inheritance when that is not what is really happening. I don't fully understand this, don't objects need to be initialized with data regardless of which camp you fall into? (classical OO vs prototypical)? 
 return suppress === false ? false : true; really?
Different tools for different use-cases it is, then! Thanks for the info.
Sorry I didn't realize i_ate_god was talking about make not Node. To be honest I do not have any experience with make although I have a little with Rake. More than anything I am happy to see people using these types of tools. The best tool is the tool that fits you and your teams needs. Gulp and Grunt are used mostly by the front end community. That makes sense because most front end developers are experienced with Javascript so either program is not super intimidating. Also most of the plugins are geared towards front end objectives. I use Gulp to help streamline the front end process of my projects. I am sure make, rake, ant, ect all have things that they do much better than Gulp or Grunt. If my projects were different I might be using them instead. I am all for anything that helps you automate repetitive tasks.
All I know is that I have had so, so many issues on windows with MAX_PATH and node_modules folders, especially with automation. I almost feel like it's pointless try and do some of this stuff in a Windows environment. Might as well spin up a Linux VM or something for building things w/ tooling. 
Notice, I didn't say you as a person are rude or a boor, that was a one-time statement about that particular comment ;-)
I suspect that is the point of the article, to refute classical inheritance in JS. Given that the author is a proponent of Functional Programming, it stands to reason that they would not try to offer an alternative means of implementing a pattern he deems problematic. 
You don't have an address in componentForm. You're looping through componentForm and looking at each index to see if it address, but you don't have an address index.
This was my original post, but I deleted it: http://cryptb.in/w0t#CSgOVNcWbHSNhYK1HH7M
That won't work. The **street_number** and **route** responses are not handled there.
This is a perfectly valid construct in languages where the truthiness or falsiness of an object is not limited to booleans or numbers, and you want to test against whether a result was explicitly `true` or `false`. Testing this way prevents returning `false` if the result of the function is falsey but not actually `false`, such as returning nothing (`undefined` or `void 0`), the number `0`, an empty string (`''`), or an empty array (`[]`). This also allows the default state to suppress the error, rather than the default state passing the error on. If you simply did `return suppress` or `return !!suppress`, then having a function without a return statement would not suppress the error, which is most likely not the expected behavior.
&gt; They provide no new functionality that is not available today. There is a lot of value in standardization. It will improve interoperability and tools will also get smarter. It's actually a pretty big deal.
&gt;I was particularly irked by yesterday's Class Hierarchies? Don't Do That! which, as you say, criticizes traditional patterns, but offers no alternative. The alternative is simply not using class hierarchies. Like, don't look for another of the many different ways in JS to do class hierarchies, just *don't do them*. Most of the time, having one "class" inherit from another "class" is superfluous at best and actively harmful to the maintainability of your code at worst. If you are tempted to make a subclass, [explore other options instead.](http://en.wikipedia.org/wiki/Composition_over_inheritance) There are a few exceptions to the rule of "subclassing is usually bad." When you're modeling a tree structure, it often makes sense to use a subclass hierarchy. But most developers most of the time are not going to be working on those sorts of problems.
I'm also bothered by the fact that `new` is a keyword rather than a method, and it has odd binding. // works as you'd expect require('lib-foo').createFoo(1,2,3); // creates a new instance of require new require('lib-foo').Foo(1,2,3); // works as you'd expect new (require('lib-foo').Foo)(1,2,3); And if you're using a factory method that takes a single argument, you can use that inside a call to `map`, while you could never do such a thing with a constructor function. function createLocation(zipcode) {...} locations = zipcodes.map(createLocation); //versus function Location(zipcode) {...} locations = zipcodes.map(function(zipcode) {return new Location(zipcode);});
I guess I meant Javascript. Anyway, you've been a great help and you helped me get it exactly like I needed.
IMO it's one of the least important. 'Let' variables are far more important and Object.observe is revolutionary. 
this isn't /r/webdev, maybe next time put a little effort in when you are trying to get help on your homework assignments.
Why not `return suppress !== false` then? The end result is identical.
The `map` issue is a specific case of the more general problem that because `new` expressions are their own thing, you can't re-use any of the tools we build for functions, like mapping, currying, partial application, decorating, combinators, `.apply`, none of it works with `new`. So you have to wrap it in a function to make it work with everything else. In that case, why not write a function that calls `Object.create` inside it?
A clearer description of your problem and full specifications are needed. Are you only supporting single digits? Only supporting addition and multiplication? From your example that's all we can glean. I'm going to go on the following assumptions: * you're dealing with floats * you're dealing with the four standard arithmetic operations * and importantly, you must respect the order of operations This is an interesting parsing problem. You need to take a linear string and turn it into a tree of operators and operands. In the example you gave, "2+9*4"... You need to end up with a tree of the form: + * / \ / \ 2 * NOT + 4 / \ / \ 9 4 2 9 But if instead you were given "2*9+4"... you need to end up with + * / \ / \ * 4 NOT 2 + / \ / \ 2 9 9 4 In other words, the tree of operations you come up with needs to be sensitive to the operators in the string, you cannot just go one-by-one through each token. I'd do it in four passes, one for each operator. Here's my pass at it: function solve(str) { var split; if ((split = str.indexOf('+')) &gt; -1) { return solve(str.substring(0, split)) + solve(str.substring(split + 1)); } else if ((split = str.indexOf('-')) &gt; -1) { return solve(str.substring(0, split)) - solve(str.substring(split + 1)); } else if ((split = str.indexOf('/')) &gt; -1) { return solve(str.substring(0, split)) / solve(str.substring(split + 1)); } else if ((split = str.indexOf('*')) &gt; -1) { return solve(str.substring(0, split)) * solve(str.substring(split + 1)); } else { return parseFloat(str); } } Limitations of this solution: no support for overriding the order of operations using parentheses. Would require a much more complicated parsing solution in that case because of potential nested parentheses. ALSO, just in case this was for a homework problem, probably don't submit that. A professor isn't likely to believe you came up with it. **Edit**: OK, solution. function previousMatchingParen(str, pos) { var level = 1; for (var i = pos - 1; i &gt;= 0; i--) { if (str.charAt(i) === ')') { level++; } if (str.charAt(i) === '(') { level--; } if (level === 0) { return i; } } return i; } function solve(str) { var split; if ((split = str.lastIndexOf('(')) &gt; -1) { var matchingOpen = previousMatchingParen(str, split); return solve(str.substring(0, matchingOpen) + solve(str.substring(matchingOpen + 1, split)) + str.substring(split + 1)); } else if ((split = str.lastIndexOf('+')) &gt; -1) { return solve(str.substring(0, split)) + solve(str.substring(split + 1)); } else if ((split = str.lastIndexOf('-')) &gt; -1) { return solve(str.substring(0, split)) - solve(str.substring(split + 1)); } else if ((split = str.lastIndexOf('/')) &gt; -1) { return solve(str.substring(0, split)) / solve(str.substring(split + 1)); } else if ((split = str.lastIndexOf('*')) &gt; -1) { return solve(str.substring(0, split)) * solve(str.substring(split + 1)); } else { return parseFloat(str); } } **Edit3**: Fixed to use `lastIndexOf`... we're supposed to solve left-to-right, so we need to decompose right-to-left since the solution will happen in opposite order.
Object.observe is from ES7.
&gt; What makes this construct unique is in the manner in which the catch block augments the scope chain. Rather than creating a new execution context and pushing it to the top of the execution stack, the catch block will actually create a new variable object and place it ahead of the activation object in the scope chain of the current execution context. This creates what is known as a dynamic scope, similar to the effect of the with statement, which lends to its bad reputation as well. No, catch blocks do not create dynamic scope. They are fully lexically scoped. In fact, lexical scope is a key aspect of their design. Also, this prose is describing the language semantics in the specification. Those semantics are for an abstract machine and exist only so a reader can understand how the language should behave. Actual implementations are free to do whatever they want as long as they preserve the same end-user visible behavior. &gt; This type of manipulation of the scope chain is the primary contributor to the performance hit. No, sorry. Like the article notes later, the performance hit is because JavaScript implementations haven't optimized for it. VM hackers optimize for the code they see in the wild. If people aren't writing performance critical JS that uses exceptions heavily, they don't optimize for it. This does create a spiral where developers avoid features because they're slow which means they don't get used, which means they don't get optimized. But there's nothing intrinsically slow about exceptions. Since the proposed alternative could be used to model the same behavior, that alternative must have the same performance problems. Otherwise, the optimizer could simply translate it to that form and be done with it.
No, they want to only return `false` if `suppress` is `false`. The issue is that, in Javascript, many completely different things get coerced to `false`: !!null //=&gt; false !!undefined //=&gt; false !!0 //=&gt; false !!"" //=&gt; false OP wants to return `true` if `suppress` is any of those values.
Most of the time my data comes from JSON.parse.
[super == Object.getPrototypeOf(Object.getPrototypeOf(this))](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-getsuperbase) It's still just syntactic sugar, sorry bro.
this is 100% the wrong way to go. Just as with the new operator, you're introducing another "keyword" that obscures how javascript actually works i.e. **with prototypes**. I mean if people really want to write in a classical language and hate prototypes so much, why not just write your code in Java/C++/.NET or something and transpile your code into JS?
I'm using a special library which converts them to AJAX or something. I'm not too familiar with it but the site says "SPServices is a jQuery library which abstracts SharePoint's Web Services and makes them easier to use." so hopefully that takes care of that. The application would only be used by 1 person at a time most likely. 
grunt is slowest build tool I've used. That's the show stopper.
Hmm, interesting. I guess it's kind of why we one should try to use threads over processes. Processes make a copy of a runtime, threads do not. Similar thing here. Why duplicate the object, when you can append values to an array, return the index it's stored or something. Really interesting, and I wonder how I can potentially apply this to games. Which is mainly what I'm using javascript for now.
He's likely overwriting the Imgur.Caption.Generator.getInstance() object through dev tools in whatever browser he's using. It's possible because Imgur does a lot of stuff client side to help minimize the scaling issues brought on with 120 some million* people using it.) *that's the number they state on the site; no idea if it's legit
Yes that's correct.
words, type words for me to read. not interested in watching a video thanks
I don't think that's true. Consider Class A that extends B that extends C. (We can do this with prototypes too, no difference.) We write: function callSuper function () { return super() }; B.prototype.foo = callSuper; C.prototype.foo = function () { return 'foo'; }; var o = new A(); o.foo(); You can't compile `super` easily. How does it know to call `C` when `this` is an object two prototypes down? How does it know to call `foo`? You need a bunch of contextual information about the name and the prototype where it is found when the method is called.
&gt;we have to hack in an ‚Äòinit‚Äô method at each level of the hierarchy (being careful that we don‚Äôt have name collisions in further derived objects) This is pronounced in Backbone environments, but if you look at how the class hierarchy works it shouldn't be. In fact, I don't really think Backbone _uses_ inheritance in any meaningful sense, but the OOP most of us seem to have pummeled into our heads along the way muddles things. Consider, the Events 'class' is really just a mixin; Backbone just provides four base classes. You can further _extend_ those base classes to form your domain-specific base classes if you want, but having Abstract classes or further inheritance beyond that would be bad practice. I think the alternative is recognizing that these are all tools for placing a list of functions in categories and not much more. Prototypical inheritance is more verbose and more, well, _prototypical_ of javascript, but no less confining than ordinary inheritance. Maybe instead of thinking of inheritance as passing _down_ code, it helps to view something like Backbone.extends as a _request_ for code? Then it's clear that when you request code from a class, you're being a bit explicit about also gathering whatever code that module, itself, has asked for in its definition. But that's just rephrasing a problem hoping it'll seem more polite, I think. --- To really answer your question, I don't think you're _supposed_ to like it. I certainly don't. My alternatives, however, all end up fantastical. 
I think it depends a lot on how large these requests are to pull in. I have worked on applications that made sense to load everything up front. It was relatively static data and could be cached into a single JSON string and pulled from the server. I have also had projects that needed to be separate calls because of the amount of data it would require. Ex: I can pull down a user's information, and some key details (number of comments, number of files)...but until I need to display that users comments or files, it's time consuming to load that data up front. Another thing to consider is the future of the project. If it is likely to grow...you want to preemptively separate services so you don't back yourself into a wall in the future. 
I found it right after I posted this. Isn't that how it always goes. It's called Chosen: http://harvesthq.github.io/chosen/
Maybe you are thinking of select2? http://ivaynberg.github.io/select2/
I found out why it was happening: http://stackoverflow.com/a/22759890/774086 It wasn't a V8 optimization, it was the fact that setTimeout when used recursively sets minimum delay to 4ms, which happened in the callback case. If not the minimum delay is 0.
didn't read the whole article it may have covered this... this might be a little out of date, but as of last summer, in v8 it had to do with how the two jit compilers work. code **directly** inside try/catch blocks cant be optimized to the extent most stuff can. the workaround is (was?) to always have your try/catch blocks contain nothing but a call to a function you defined elsewhere, as that function could be optimized normally. 
That can be valid, depending on context, though often there's arguably better ways to communicate intent. Specifically, this API requires `false` to be returned to do something specific -- suppress the error. Using `!!suppress`, your callback would _have_ to return a non-false value to prevent the error, when apparently the author's intention is that you _have_ to return `false` to invoke the error. It's a subtle difference, but requiring a strict `false` removes the requirement from the caller (you) from having to explicitly return a truthy value, which makes it easier to use. However, there are some circumstances where `!!` might be preferred; for instance, continuing the OP's example, let's hypothetically say that we want to show the error when a specific element is located in the DOM, otherwise suppress the error. That might look like: function callback() { return !!$('.err').length; } This way, if `.length` is non-zero (the element is in the DOM), you'll return `true`, otherwise it'll be `false`. I would argue this would be _better_ at communicating intent though: function callback() { return $('.err').length &gt; 0; }
&gt; failure of current implementations This is what I'd lean towards. Additionally, unless you have a very pressing need for the performance benefits, YAGNI. It's also a double-edged sword, because the minute you go and do something like this, Murphy's Law dictates that the implementations will drastically improve and now you will have a lot of very awkward code floating around your codebase that's now slower than the native features. And it seems like the amount of time it takes the implementations to improve is inversely proportional to the amount of effort it took to implement your own solution...
I don't like having 3 different locations to define my dependencies. We have bower.json, the script/link HTML tags and gruntfile/gulpfile - defining in which ORDER those things will be concatenated/uglyfied. I really like the problems Grunt/Gulp solves. But for "small" projects, with people designing bad Gruntfiles it starts to freak me out. Duplicated src's for concat/uglify task is a common issue. It should be possible to declare dependencies just once. One file, on the HTML. That's the reason why I've created lazzy-assets for. I've posted here on reddit days ago: http://www.reddit.com/r/javascript/comments/21wgmy/lazyassets_an_opinionated_and_simple_buildsystem/
It's in harmony which is es6. http://wiki.ecmascript.org/doku.php?id=harmony:observe
Also take a look at the comparison on [StackOverflow](http://stackoverflow.com/questions/13575531/what-are-the-differences-between-chosen-and-select2)
and how do you init your mixins on your prototypal instance? Or do you mean delegation. If using mixins, how can you be 100% certain that you are not overriding a function which another mixin supplies?
Ah, my bad then...you can set me straight in Barcelona, just booked my ticket! I assembled my misinterpretation from reading your more functional articles, plus your handle is homiconic!
Huh?
npm install your way to your own framework
... and then they went ahead and removed half the documentation from their homepage. I'm struggling with version 2.2.2 and on my next project I'm going to give this new script a chance.
And especially _this_ "article" has an unbelivable headlinepromise-2-contentnotthere-ratio....
So just do `!(suppress === false)`. This will only return false if suppress really is `false`, `true` otherwise.
Hey Karmamile, Which version of MS Dynamics CRM?
Actually I have implemented partial function application in a [module called "par"](http://pluma.github.io/par/) (works in Node and in browsers all the way back to IE6). The reason you don't see partial function application much in the wild is that `Function.prototype.bind` can usually be used interchangeably (although `bind` also messes with `this`, which may not be what you want). I actually use partial function application a lot these days because it makes working with promises a lot easier (it avoids having to write an additional function just because you want to pass in arguments from outside the promise chain). Real currying OTOH is generally not very useful in JS (it doesn't work with functions that don't have a finite arity and the syntax makes it easier to just pass multiple arguments at a time).
I think the point is, that the "real world" and evolution does not care about reusability.
Hi Karmamile, the problem with Dynamic CRM is that doesn't work with 'standart' JavaScript, so some of the directives you use maybe have to be changed. Depending on the version you are working with you should work with the crm library (CRM 4.0) or xrm (CRM 2011 and 2013). This library is really useful and makes your work easier http://xrmservicetoolkit.codeplex.com/ About the library, you are right, you have to create and attach the library to the form you want to work with. After that, you have to attach the method to the field, you can do it from the design view or you can attach then on the onLoad event with JavaScript sentence, I always do it on the second way. Hope this helps you.
It tells me Chrome on my Ubuntu laptop supports it. I wouldn't rely on it.
Clever, but it obscures the headline of the next "mat" until you scroll down (and at that point you might accidentally have scrolled past it). Bad UX there.
I used it in back-end code for a project until I decided I want to use the same code for the front-end and I had to support IE8.
I've heard good things about [morris.js](http://morrisjs.github.io/morris.js/) (free, gratis and permissive licensed).
... which is identical to `suppress !== false`.
Is this really splitting or just not showing half and waiting for the user to get past the preview?
Thank you for sharing your experience. As a front end developer, I know a little about JavaScript but I definitely want to learn as much I can about the raw language before I start using jquery or libraries. I understand and enjoy programming logic- where can we go to get a little bit more intermediate support?
 var XHR = root.XMLHttpRequest || ActiveXObject; var request = new XHR('MSXML2.XMLHTTP.3.0'); Now that's clever! Of course this won't work for cross-domain requests in IE&lt;9.
This is just silly. Does nothing special in a way too complicated manner and the result is less than impressive. The "..." is is also left in place. And the title... this has nothing to do with CSS3 or HTML5.
UPDATE: It seems I'm wrong, these semantics have been rejected for performance reasons! Therefore, `super` really is early-bound sugar. That's a huge benefit for 80% of the code that uses inheritance, but breaks down if you ever try to write code that writes code that uses `super`. It's a [leaky abstraction](https://en.wikipedia.org/wiki/Leaky_abstraction).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Leaky abstraction**](http://en.wikipedia.org/wiki/Leaky%20abstraction): [](#sfw) --- &gt; &gt;In [software development](http://en.wikipedia.org/wiki/Software_development), a __leaky abstraction__ is an implemented [abstraction](http://en.wikipedia.org/wiki/Abstraction_(computer_science\)) where details and limitations of the implementation leak through. &gt; --- ^Interesting: [^Abstraction ^inversion](http://en.wikipedia.org/wiki/Abstraction_inversion) ^| [^Abstraction](http://en.wikipedia.org/wiki/Abstraction) ^| [^Abstraction ^\(computer ^science)](http://en.wikipedia.org/wiki/Abstraction_\(computer_science\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgi4c00) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgi4c00)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
This is false, a function is not optimizable if it merely syntactically contains a try catch, e.g. function NotOptimizable() { return 3; try {} catch(e) {} } Even though the try catch statement cannot ever be even reached, V8 will not optimize any code that is contained inside NotOptimizable
I don't get it. Why would you hire a javascript guy to fix a sink? The next thing you're going to tell me is all javascript devs should wear glasses because they don't see sharp.
I thought cross domain requests didn't work at all, or can you tell the browser to allow it with crossdomain.xml? It's been a while since I had to rig up something like that.
OK, you got a laugh out of me!
what???? 
Never mind. Just viewed it on desktop instead of mobile.
cross domain requests DO work in older versions of IE, but they require the use of the piece of shit propriety object called XDR. It has severe restrictions placed on it for security. The return headers have to be plaintext for instance, and you cant add custom headers at all. There are others. This can all be worked around by way of an iframe+postmessage however.
Books. I get books. 
 var breakWords = function (node, showText) { var splitText = node.textContent.replace(/\s+/g, " ").split(" ").slice(0, showText); return "&lt;span&gt;" + splitText.join(" ") + "&lt;/span&gt;&lt;a href='#'&gt;&amp;raquo; read more&lt;/a&gt;"; }; breakWords(document.getElementById("textarea").getElementsByTagName("p")[0].firstChild, 50); That is the less pretty native way to do it. Verbose, but certainly not challenging.
Just curious, but how did you do web development for 24 months with Python, HTML, and CSS without learning JavaScript?
It's possible. Send everything back to the server when user hits commit. I did web dev for years in asp.net with very minimal js. 
Closed the tab immediately upon seeing a "SUBSCRIBE TO OUR NEWSLETTER!!!111" modal.
Not to mention the factual errors. Gruntfile.is is *not* JSON. It's javascript.
I think it's shameless self-advertisement. 
It's the node.js way!
:)
Surely it depends what you're building? All those server-side web frameworks which help take care of the boring bits involved in building forms 'n links webapps haven't gone away.
I'd say less what you're building and more about how you're building it. You can get away with static forms and whatnot but you'd be sacrificing usability.
 Same here. JavaScript was for very minimal things. We could get by just fine without JavaScript, it has reinvented itself to where it is a needed stack in current web development that wasn't really needed prior. Not saying it isn't a welcomed change, it sure is, but definitely takes time getting used to and seeing where it fits in compared to years ago.
That's the whole reason JavaScript is catching on and needing to be used, is easier user adoption through usability. The modularization and frameworks are making it easier focusing on usability, rather than worrying about it adding to complexity. Was a tradeoff years ago, that JavaScript lost the battle up until now. Of course it helps that JQuery came along to make the DOM easier, but it was a different world back then slightly. But I was able to make very heavy-traffic websites with very little JavaScipt, it just wasn't needed like it is today.
From personal experience, You can do an awful lot just hamstringing together jquery libraries from tutorials and some understanding of server code. It sucks but I'm not surprised.
I found Reddit to be the best, but definitely take on this JavaScript course and go into JQuery. Many say go opposite, but to me it took the magic away from JQuery and helped to understand the syntax of JQuery better.
Alright, this link is going to become your best friend, CRM-wise of course :) http://msdn.microsoft.com/en-us/library/gg309637(v=crm.6).aspx JavaScript basics: http://www.w3schools.com/js/DEFAULT.asp https://developer.mozilla.org/en/docs/Web/JavaScript A quick example of MSCRM6 Client API: if(!Xrm.Page.getAttribute("new_socialsecnum").getValue() &amp;&amp; Xrm.Page.getAttribute("statuscode").getValue() == 0) { Xrm.Utility.alertDialog("SSN cannot be empty when the Employee is active.", function () { // do something after the dialog has closed }); } Make sure to learn enough JavaScript to feel comfortable when customizing forms. Client-side API is flexible enough for most purposes. Remember that unsupported customizations (anything outside the client-side API, that is) are a no-go for Microsoft Support and compatibility with future versions / rollups.
Should've been dogecoin :) Good effort though, you guys really go for it.
I'd really love to do some Markov chain lyrics generation and wire it in there with a vocoder. https://twitter.com/anagramatron picks tweets from the firehose that happen to be anagrams; could do something similar with rhyming ones...
I'd recommend Chrome Canary (35) for Shadow DOM more stable than what's currently behind a flag.
It IS available in IE11 natively! Full disclosure: I worked on the implementation. I'm with you, they are awesome. The use case you mention is often called a "side table", where you're mapping some object to another object that holds "internal" or "private" state. There was actually a recent proposal to rename WeakMap to SideTable as it's more descriptive, and as Crockford says, no one likes weak things. It was shot down on account of WeakMap already being everywhere. 
I can see this being very useful to keep your DOM clean (making sure outerHTML won't change)... That said, it's hard to come up with practical examples where this is really essential. Any ideas?
1. It's good practice to throw errors when the arguments are _clearly_ wrong and indicative of programmer error (i.e. something that would cause a difficult-to-trace bug if left unchecked). Otherwise you should try to be loose with types; parameters might be Arrays or array-like objects, might be "truthy" or "falsy" rather than a `true` or `false` boolean, etc. Definitely don't do any "type checking" with instanceof or isPrototypeOf. 2. Nah, don't do that. Just write the guts with CommonJS (or AMD) and let tooling wrap it in closures, handle dependencies, etc. [Example with browserify](http://www.forbeslindesay.co.uk/post/46324645400/standalone-browserify-builds) 3. JS has come a long way in the last four years. Object namespaces (MYSITE.users.blah) are mostly an old-school thing. Definitely read up on tools like browserify, beefy, gulp, grunt, and NPM since it will really change the way you write JS. :) 
Yeah what the heck? I don't use their homepage at all for documentation. The github is more up to date. https://github.com/woothemes/flexslider
I'm wondering if gulp's typical workflow is x.pipe(a).pipe(b).pipe(c)... then why not implement something like x.pipe(a, b, c, ...) with varargs or array?
Microsoft doesn't even support standards, you think they're going to bother supporting IE?!
WinJS is a nightmare. Never again.
Look up variable hoisting in javascript. In short, all lines that start with var or function are moved to the very top of your local scope (in this case your script tag) before they are executed. This, for example, will cause your line 'var userAnswer = prompt("Left or Right"")' to be run far before you expect it to. Also in that same line notice that you have too many quotation marks. Using a code editor with proper coloring will make typos like these obvious. O yeah, and there is an excess closing brace on the last line. Welcome to javascript, good luck!
The only component that looks useful to me is the pivot control. Everything else has been done by other frameworks and built to be more flexible and less verbose. Also their presentation on that site honestly sucks -- why would I use their framework when the demos look like they were designed by an amature?
A lot of this looks like it would be *really awesome* if it was made by anyone other than microsoft. I see a lot of good ideas with poor implementation.
components.
Sure, will do. I'm actually looking to start doing some Angular quite soon. From what I've seen on their official site, it seems quite well documented. For Node tutorials, it might be worth it take a look on Beagle http://beta.coursebeagle.com/search/?q=node.js (full disclosure: I'm one of the founders)
Yeah I tend to agree. I used to mess around with several jQuery and JS libraries, but never really understood the why behind what I was doing. After the JS courses on code academy its already quite a difference. For more beginner courses, you might want to check http://beta.coursebeagle.com/search/?q=javascript+beginners (full disclosure: I'm one of the founders)
Check out www.webcomponentsshift.com for info about web components and how it relates to shadow dom. The site is a slideshow from a talk by Eric Bidelman who is on the Chrome Team at Google.
It just wasn't necessary. I often sticked to Django elements and used basic JS / jQuery libraries on top of that used an API like Bootstrap for example. Even used stuff like Highcharts but I just kept messing around until it worked. I'm not saying it's the way to go, but it just worked back then, which was good enough for me. 
Well said.
How so out of curiosity?
Can you elaborate on the "poor implementation"?
Style encapsulation.
"WinJS was designed with IE11 in mind..." Ok, so maybe they should state that somewhere - on the website, on GitHub... somewhere. I didn't see it anywhere, I could be wrong. 
http://css-tricks.com/snippets/css/multiple-columns/
A lot of the features have little "this only works in IE11 becaue of X" links next to them that link to github bugs.
IE and "most modern" are oxymorons.
Sure, there's a lot of stuff that they made "IE11 only" (using non standard css stuff) that could just be done in javascript and run everywhere. The whole engine is javascript heavy so having a broken grid system because "css grids are only available in IE11 (and no other browsers)" Is a shitty excuse. Don't get me wrong, I like a lot of the Windows 8 UI, but I think microsoft just isn't the right company (right now) for it. What will happen, is people will fork bits of the code, and make better (more robust) standalone parts of this.
as a guy very much into component frameworks, I would love to hear some elaboration!
Thank you for your wonderful contribution. I'm glad to see that the early 2000's are alive and kicking.
You've got to remember that this *was* designed for Windows 8. The rest of the web was an afterthought. Therefore, using things the CSS grids and brand-spanking new APIs is a perfectly valid excuse for it's current state. I will also point of that this is not just a JS library, but a component library. CSS is intrinsically a part of it so that JS isn't the one doing all that math. I don't see how the fact that it's Microsoft makes this any less valuable. Arguably it should make it more valuable since 20-30% of what they do is building platforms.
Yes, I see that it can be used. I was thinking of something 'new' it could do that isn't already possible without shadow dom. At the moment services like Disqus, Paypal and the like already let you add 'components' to your site. It seems shadow DOM doesn't enable a whole new feature but moreso makes it cleaner to extent/add HTML elements. Better separation is indeed a good addition to have though.
Just for anyone interested: http://caniuse.com/shadowdom
I've came across [Egghead](https://egghead.io/lessons) and it seems quite thorough and easy to follow. 
I personally like googles support matrix of "evergreen browsers". Doesn't quite fly at my office. But we have an ancient customer base. (I have to support ie6. Save me) Re es6 lib: I would expect some kind of polyfill for the missing functionality if you're intending to get any kind of mass adoption. 
http://metroui.org.ua/
So, just move all my variables/functions right after my &lt;script&gt; tag? Does JS need to read variables/functions before anything else? If I am not mistaken, do you mean something like this? var age = prompt("How old are you?"); var introduct = "After exploring the abandoned warehouse, you find yourself in a dark tunnel. You can barely see where you are going. There are two trails, which way will you take?"; console.log(introduct); Then everything else?
Looks ugly as hell
what's your budget? why'd you take on projects if you're not equipped to do them?
I'm the OP, as I stated in the article it assumes that you already know a little bit about Shadow DOM. The link you posted is their 101 article. Those are all excellent though, and should be read if this stuff interests you.
As others have said (and is demonstrated in the article), it allows you to encapsulation your styles which is a huge win. Also, many browser's native form controls themselves use shadow DOM. This means you'll be able to extend these controls in interesting ways; possibly ignoring their shadow tree and replacing it with your own (as the article shows, the last shadow tree is the one that renders) or possibly plucking out only bits you care about.
Many practical devs prefer to not require our contributors to jump through hoops to send in PR's. It is creating unnecessary threshold for contributions. If my module doesn't use C++ then what would they need c++ compiler for? Just because some dinosaurs refuse to move with the times and unnecessary stick to external platform specific tools in a cross platform capable ecosystem? I think not. it is a solved problem, move on.
Yeah, I understand that, but if they want people to start using it, and playing around with it, they should at least give an expectation of what they're planning on supporting. The AngularJS project recently did this when announcing plans for their 2.0 version. They plainly stated that they don't plan on supporting IE8/9. 
What are those? :)
M$ SUX, 31337 COMMUNICATOR ROXORZ
Interesting. I feel like github would be a tough one though unless you have a lot of public repos (which I do not!). I'll have to take a look at indeed!
I agree, not sure why Microsoft, who has infinite resources on demand, couldn't spruce it up before promoting.
Craigslist.
Current job: http://dice.se/jobs/ Also interviewed at a bunch of other places including Microsoft, Blizzard, Linden Labs, GlassDoor, etc. All of which by just browsing their career pages and applying. I've only had 1 successful head hunter in 6 years, out of the dozens that contact me every month through LinkedIn. Lately been getting a lot of exposure from my GitHub account as well.
Can I get a short explanation of what this is and why I should care? Serious question. 
Just like windows 8, not a coincidence.
Where X is "other versions of IE" or "the fact that we used non-standard CSS/HTML/JS".
This is amazing. Thank you.
If you enjoy programming logic, and want to learn more Javascript, look no further than [Eloquent JavaScript](http://eloquentjavascript.net/). It's not your run of the mill beginners book, there's some real mind bending problems to solve almost from the start, and the pages have a console built in. I guarantee that by chapter 5, your head will explode. 
wah, this thing can oso post in reddit huh? so nice.....
My point is, that everything that doesn't work is readily pointed out.
Assume whatever you want, don't bother people with it (because it stinks) It is about other people who use you modules. If a module does not contain or require native code then why break cross-platform with something as replaceable as make? It should be as easy as possible for people to use your stuff. Anything beyond `$ npm install` is just lazyness and braggy opinion.
let me know when the star in GitHub is 66297
let me know when the star in GitHub is 66297 https://github.com/winjs/winjs/
Who cares, XP is deprecated
"More important, however, is that you see how easy it is to experiment with emerging web technologies thanks to the awesome developer tools Chrome and Firefox provide us." Considering you can't tweak Shadow DOM styles through the Elements tab, I'd consider this statement false. It's incredibly *hard* to use modern developer tools to work with the Shadow DOM and if they aren't fixed, will be the bane of any designer.
So far it's primarily been through my network of contacts, but my first reaction to finding out I will need to find work is usually to start blogging. It's basically just part of building your professional brand, but lately I've been finding it's a good way to actually internalize what i've learnt. I'm actually going to try to switch to a 4-day week from now on to dedicate a day to writing something every week. It's obviously something I enjoy, but never seem to get time for during the usual startup workload.
thats really cool. if you did a blog post I would read the hell out of it.
My school's careers page. Started as the only intern in the office.
original comment was poorly phrased. but, this is good to go, or at least it was a while ago. var optimizable = function() {}; var handle = function() {}; (function() { try { optimizable(); } catch(e) { handle(); } })(); 
I linked to the (currently airing) talk by the language creator Anders Hejlsberg. Really useful language! I've been using it at work and it's come a long way in the last year. Blog post detailing the release here: http://blogs.msdn.com/b/typescript/archive/2014/04/02/announcing-typescript-1-0.aspx
This is not JavaScript, it's consulting. The fact that JavaScript is involved is nearly immaterial, there is nothing anybody can learn about JavaScript from reading a discussion around someone taking on work they can't do and shopping it around on the Internet looking for someone to work for $100 or whatever.
I had the same 'assumptions' about magical code, and recently i discovered the perfect vocabulary to express them. It found it in a presentation called "[simple made easy](http://www.infoq.com/presentations/Simple-Made-Easy)", by the creator of clojure. I couldn't just expect people to watch an hour long video to be table to talk to them about it in these terms, so I ended up [writing down some notes to refer people to](http://daemon.co.za/2014/03/simple-and-easy-vocabulary-to-describe-software-complexity) 
Javascript will move the statements to the top for you but it's good practice to do it yourself for clarity's sake. Variables only need to be declared at the top of your scope, they can be set later. For example: var age; var introduct = "Your text"; ... code ... age = prompt("How old are you?"); 
I like TypeScript, even though I don't think I'll ever use it. It makes me think that maybe Microsoft has learned to play nice. From the [blog post on the release](http://blogs.msdn.com/b/typescript/archive/2014/04/02/announcing-typescript-1-0.aspx): &gt;&gt;Today, we're announcing that we will begin taking pull requests for the TypeScript compiler and language service. Why is it that I get the feeling that this is a legitimately open maneuver, but, despite whatever overtures Dart makes towards open source ideals, I still find Dart abhorrent? Maybe it really is just that the manner of TypeScript's compilation to Javascript feels like a nod rather than an insult. 
Yeah, but that sucks for those of us who don't have a lot of free time to devote to side projects :/
Totally awesome! I want to explore the webkitaudio thingy! Thanks for sharing! 
To correct the point of "designed with IE11 in mind" - WinJS is not meant for a web browser - it's meant for Windows Store apps made using html/css/js targeting Windows 8+.
I didn't. They found me. I posted my resum√© on Craiglist and got a call the next day, went to an interview a few days after that and got hired the next day. Now, it started as a more design-oriented Front End Developer position, but I recently got promoted to Senior JavaScript Developer, so that's nice.
I'm not sure how to make a and b different, but c is easy. Date.now is a property of the Date (function) object. You can assign things to it. function Date(){ //magic function that works as a function and a constructor }; Date.now = function (){ //return current dates in miliseconds };
Look I'm not trying to be an ass. In fact, I *want* to help you. However, I don't think any. one can assist you whatsoever with you posting pictures of what you have vs. want. Hell, we can't even guess what language you've used to do this. Is it all Javascript and html? Is the display rendered out on a server? Shit, did you __draw__ this? I have absolutely no way of knowing. It *looks* like it's probably a pretty simple system and that you've implemented most of it. Therefore (if that is the case since I have no way of knowing), it should be simple to post the code in a jsfiddle or on codepen. I really think we should somehow start banning posts like this that don't post the code. We have great tools available to us for just this purpose. Using them would mean you could get help very quickly (or at least give you the *possibility* of getting help). 
So you're saying it'll never going to take off? (like metro..)
Oh... you know... it's like... fuck IE right! And Microsoft created that right? Guys? Who's with me? /s
I've edited what i've done. I even included the code and all
You're right, we should never make anything new because there are popular frameworks. 
I really like Gulp, but I am finding that it is taking a long time (sometimes 10 seconds+) for watch to pick up saved changes on my files. Sometimes it's instant, sometime's it sits there for a while before it does its work.
`if ($t.is(":contains('" + data[d].toLowerCase() + "')")) {`
I got my javascript job through my college internship program. I actually started out using something called OpenLaszlo, but then we decided to shift to the Dojo javascript toolkit. You can learn just about anything if you put your mind to it and are given enough time to figure it out!
Very cool
This isn't really meant to build web pages for, more like Windows and Windows Phone applications. You have the core libraries and SDKs written in JS so you can use HTML and JS for your apps, instead of the more popular C#. I think this is nifty.
Theoretically you could use this in combination with a library like PhoneGap or the like to take Windows &amp; WP apps to Android &amp; iOS.
$t.text().toLowerCase().indexOf(data[d].toLowerCase()) != -1 Updated the jsfiddle.
After doing a bit of reading... It's the javascript library currently in use in windows 8, open sourced. Thats why there's a bunch of IE specific junk and not much else at the moment. Most of the cross browser problems have open bugs. Slowly becoming a "bootstrap" of windows 8 web-apps.
Since he mentioned the specific technologies and you want to try to use their stack I'm thinking you want to show off your ability to create real world applications (on a small scale of course) and not something that shows off your algorithmic chops as much. You mentioned grunt so I assume you'll be using node. That being the case, why not do something relatively small but that isn't b.s.? Use a public api as your data source. You could do something like a tweet aggregator that maps out tweets using the static Google maps api in no time with node. The advantage here is that there are good existing modules out there that'd let you get things together quickly, you'd show you know about npm and how to make good decisions on the tools you use, etc while all the while being able to focus on what I'd consider the most important thing in a situation like this: the architecture. Obviously it doesn't have to be Twitter, off the top of my head you could even put together some recipe app or something like that since I've seen some good modules for the corresponding api's there. You could use grunt to periodically run tasks to aggregate data or something but if I were looking at hiring you, using the build tool would be the last thing I'd be worried about. In fact, in my book, you'd just get some extra bonus points for using the same frameworks that we do. These things can be learned in much shorter order than solid design principles (relatively speaking). So my point is, doing something small, but creative, where good modules already exist. That's why I think some sort of Mashup is a great option. Particularly if you can cater to the field the company is in (this doesn't mean the data has to come from that industry but if you take the maps example, this would be a great fit for a company that does logistic if you do it the right way. Just find a way to show you are capable of dealing with issues they deal with frequently, but again, on a fraction of the scale). Finally (and very importantly unless they made you think otherwise), provide them with a great test suite. If the candidate didn't finish the project but what they had done was well designed and thoroughly/properly tested I'd be far more likely to hire them than a candidate that got the job done in a short deadline but the code is full of smells and untested (the former is what I want on my team on a day to day basis as well). Edit: also even if I'm wrong about node I think the concepts are universal. C# has great libraries for Twitter and yelp, ruby has them for... Basically everything, etc, etc. 
Isn't this just the Windows 8 store JS framework that's been available in Visual Studio for the past couple years?
 var f = (function (window) { return function f () { if (this === window) { return "Some string"; } else { return {a: "value"}; } }; })(this); f.bar = function bar () { return "something else"; };
I think it is Microsoft trying to have something to show at the ECMAScript working group. It takes reference implementations before ideas are accepted in these groups.
&gt;GitHub issue 11: FlipView: Touch manipulation doesn't function on browsers other than IE wat.
 [Works for me?](http://i.imgur.com/lck993p.png)
What if those missing features are why it has grown so rapidly and why it can be run in so many different contexts. It's just pure language. The fact that the only thing that is relevant in the code is what is running reduces the overhead of coding it and thinking about how to manage it. It's awesome at MVP and expressive enough at every layer to scale up from there. This is why people ditched C++ for Java while c still survived and why people have ditched java for interpreted languages. The best languages only have the bells and whistles that increase brevity. Java is a more professional language but still people have ditched it. It seems "professional tool set" does not correlate with how useful programmers feel the language is.
I searched and applied on the LinkedIn job search. Easy process.
Maybe someone should open a GitHub issue for removing all the IE-specific stuff.
I agreed that all of your opinion.. 
It's a good question. I'd be interested to see numbers on how much difference it makes. I suspect modern JavaScript engines may spot this and optimize it to give near identical performance.
Or use the wonderful Object.create instead of the protypical "inheritance"
You say superior and I understand why that's the case but in practice it really doesn't make a difference. It comes down to personal preference. I wouldn't say one way is the right way. I prefer to use prototype because it makes sense to me, but I can see why some people find it more intuitive to attach methods to instances of objects with this. 
Most likely because the former allows you to use the constructor as a mixin, instead of as a class or inheritable base class. That, or the author is simply copying what they saw by someone who was doing it for that reason. That being said, the pattern used here: https://github.com/component/emitter is probably superior to both options, in that it conveniently supports both possible use-cases. EDIT: I should also point out that while there is a performance hit in the instantiation phase for the mixin style, the prototype style has a performance hit on access of the properties (which increases linearly as the prototype chain grows longer). So, overall the mixin approach is probably slightly faster computationally, but obviously much less efficient memory-wise.
Tabs and spaces make no difference. This demonstrates that the "this" method creates a new, duplicated, function every time it is set up. So you could have two instances of a class and a `===` on the same methods from each will return false. That just seems weird to me.
I wrote much of the official SI.com and Foursquare apps for Win8 using WinJS. The documentation is awful and trying to do anything custom with the listview is a nightmare, but for the most part, we found ways to deal with it and still make a quality app. 
Two more things: The performance hit isn't that much, and varies from browser to browser: http://jsperf.com/prototype-vs-closures/2 5-10 times slower in Chrome, equal (!!) in Firefox. Defaulting to prototypes is a premature optimization. The other thing is that calling the first example a class (`Library`) is a bit wrong. It's more of a factory function than an class. I'd call it `createLibrary` and build an explicit object, rather than relying on `this`. Call a spade a spade.
Even if you can spot a * b * c, it cannot be optimized into a+b+c because they do completely different things. 
I completely understand that it ensures complete encapsulation (which personally I think is unnecessary... just my opinion), and I do admit that it really doesn't matter with today's modern browsers (EDIT: in most cases I should point out). But I'm still stuck wondering how the latter approach was never popularised from the beginning. I mean, 5+ years ago this would most certainly have been an issue with browser memory usage, especially on early smart phones.
Now that's interesting. I would not have thought there'd be a space-time trade-off between both cases. I may be wrong but isn't that emitter pattern is just an event model? I'm not sure how that would work the same.
Of course it matters with "modern browsers", why wouldn't it? (I am assuming a type of app where perf matters in the first place, e.g .games and GUI editors). If you are implying that the first can somehow be optimized to be like the second then it cannot because it's nothing like the second and the fact is very observable and cannot be therefore optimized away.
It's easier, I guess? Saves you from writing Library.prototype over and over.
I'd assume this too works of the prototype.
I guess I should clarify that for most cases it's not really an issue. But I'm with you man!
It is weird, but how would that manifest as a problem in practice? A lot of things about JavaScript could be classified as weird and we don't stress too much about it. As I said, I'm aware that prototype is "the right" way to create class methods and that not using prototype creates new method per instance but I'm yet to really see big problems stemming from using one over the other and have accepted not everyone is as obsessed with "performance" and the right way of doing it to care.
Thank you
I wasn't referring to the emitter pattern so much as how it's implemented. Because of the way it's written, the caller can choose whether to construct it as a mixin or an instance object, depending on what's most appropriate for the given situation.
Another difference between the two approaches is that in the former, the publicMethod will work without explicit object context. For example: var lib = new Library( 1, 2 ); var method = lib.publicMethod; console.warn( method() ); With the closure approach, this will trace '3', but in the prototypical version it will trace 'NaN' because the method has no idea what 'this' is. Whether this is a good or a bad thing is largely a matter of opinion and the best fit for the job at hand. Personally, I've written libraries both ways and I'm glad I have the choice.
Ah! Yeah that makes sense. Seems like a reasonable implementation. I may just start following that approach.
Great point. Not something I would have thought of. On the other hand though it's not hard to make a wrapper function when you need it. var method = function() { return lib.publicMethod(); }; And with the prototype you get the ability to change it's context with the use of call() and apply(). But I agree, it's largely a case-by-case thing.
Another way would be: var method = lib.publicMethod.bind( lib ); I see changing of context as less important. If another object already has appropriate a &amp; b properties, it by all rights should have its own publicMethod.
Agreed this helps a lot. Pick a library or project you use a lot and start solving some of their issues and contributing.
This is a fascinating post and the discussion is great too. Are there any reading materials you guys would recommend for a novice JS programmer who wants to learn more about prototyping, class creation, etc?
Now, that's an interesting question. I'm not sure on this one, but I believe that well made JS interpreters and JIT-compilers are supposed to recognize a coding pattern in the first approach and actually not create a new inner method at each call of the outer method. Once again, I'm not an expert, but an intelligent interpreter may "compile" the inner method once as a separate function working on a sort of object corresponding to the closure (a and b), so that only the closure will be filled up at object creation time. More generally, I believe that's how a good functional language interpreter is supposed to handle closures. The only difference is eventually encapsulation (which is actually a benefit). If my hypothesis is correct, the only impact of the first approach is that one adds a slot into the object hashtable ("publicMethod" linked to the inner method) at creation time. Keep on asking good questions. I hate so much the [fallacy of premature optimization](http://ubiquity.acm.org/article.cfm?id=1513451). 
I second this
I suppose I may have jumped to conclusions with my post. My question isn't so much of why one would choose one approach over another, but rather why the first approach was ever popularised? Now don't get me wrong, I'm the first to shout premature optimisation, as evident in my comment history. But back in the early days of Javascript (and the early days of smart phones) I bet that the optimisations that the prototype gives would actually be noticeable. Not only that, but there isn't visually a whole lot of difference between the two approaches. They're both quite readable, around the same length and take the same effort to implement. It just seems weird to me that the first approach exists at all.
It's not straight up superior, there are trade-offs: Prototype uses more cpu (finding properties in the prototype chain), uses less memory (functions are not duplicated). This **does** make a difference when your prototype chain is very long and accesses start to take a while. And of course the different implementations also have different scopes, so you can use them for different things. The two ways are not identical.
http://javascript.crockford.com/private.html &lt;=== Copyright 2001 Douglas Crockford In the early days of Javascript, gurus like Crockford popularized the pattern as a way to get private members in objects. This [page](http://javascript.crockford.com/private.html) has been shared among JS programmers for years. &gt; in the early days of Javascript (and the early days of smart phones) I bet that the optimizations that the prototype gives would actually be noticeable. I think that efficient closure instantiating exists for a long time in browsers. Only few naive implementations -way before the very first smartphone- may have worked as you imagine. edit: as reported by other redditors, the article at http://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html tells a story about how closure-based method calls are not compiled as optimally as prototype-based method calls in V8. In other words, now that JIT-compilers know how to well optimize closure-free code, the difference between the 2 approachs is **much more notable and worth arguing today** than *in the early days*. 
I'm pretty sure Reddit recognizes when you do this and discards the votes. People discovered that you could do this years ago, and it turned into a real problem when people would start maliciously voting a person's entire comment history, so Reddit had to put an end to it. It's really not that hard to detect when someone submits a vote every 350ms and they all happen to be for the same user and they have a referrer of the person's profile page. 
http://reddit.com/r/LearnJavascript. The link is in the sidebar.
You have all sorts of flawed logic in here... First off, why are you using while loops? I think you'd be much better off using for loops. // We want to test 1-100, so we sent 100 as the maximum var count = 100; // Set the base number as 1, keep looping until base is //100, on each loop iteration increase base by 1 for (var base = 1; base &lt;= count; base++) { // Since we know 1 and 2 are prime, let's skip them if (base &gt; 2) { // A flag used to see if an integer has a perfect divisor var hasMultiple = false; // Set the divisor as the base minus 1, loop while // divisor is greater than 1, on each iteration // decrease divisor by 1 for (var divisor = (base-1); divisor &gt; 1; divisor--) { // If base modulus divisor is perfect, then its // not prime and we set the flag to true. if (base % divisor === 0) hasMultiple = true; } // Use flag to tell you if int is prime or not. if (hasMultiple) console.log(base + " is not a prime number."); else console.log(base + " is a prime number."); } else console.log(base + " is not a prime number."); } I'm going to make another comment in a minute explaining what was wrong with your original code, syntactically speaking.
You're creating a new closure per method per instantiation. This can lead to excess memory consumption, but is only likely to manifest in any real issues at a very large scale.
Easy way to get shadow banned.
I'm not in a position to benchmark this right now (why am I on reddit then?!), but I suspect prototype chains are efficiently JITed. Prototypes rarely change, and the lookups can be trivially cached or inlined with an out-of-line guard on the contents of the prototype.
Use JSON to serialize the data, and use [localStorage](http://diveintohtml5.info/storage.html) not a cookie. 
If it is a true library (static) then the first approach is fine as you don't want or need multiple instances of it. If it is something that can have multiple instances then it should use the second approach to put common methods in the prototype.
&gt; It can be human-ized though using a Math.rand() (for a range) offset. That would make it less detectable. The documented rate limit is [30 requests per minute](https://github.com/reddit/reddit/wiki/API). But regardless of the delay, it's still going to be plainly obvious what's going on when you see hundreds of votes in a row for items from the same user and with a referer of their user-page. &gt; am I not allowed to do that? Reddit's [user agreement](http://www.reddit.com/wiki/useragreement) says: &gt; You agree not to [...] attempt to manipulate votes or reddit‚Äôs systems Does writing a script to auto-upvote hundreds or thousands of comments qualify as "manipulating votes"? Maybe. I don't know. Like I said, this specific scenario has played out years ago and the result was that measures were put into place to stop it. And by "this specific scenario", I mean mass upvoting, because people would create "karma party" threads where everyone would write a comment and then run the script, upvoting everyone else. So it's not just downvoting that is banned.
That's either a rubbish engine or a ridiculously long chain to affect CPU to a noticeable degree...
http://ejohn.org/blog/simple-javascript-inheritance/
dude go to bed
You should prefer readability over writability: the latter will have one indentation level less, doesn't make the constructor property enumerable and doesn't lose the original prototype object so it's not exactly the same. As for writing Library.prototype over and over, why not make a snippet or a macro that automates it in your editor or IDE?
but you can never then extend those private functions. I used to do this all the time, but I'm moved to using _ to denote my private functions, in case I want to extend out that class more in the future
&gt; dart2js produces horrifically large .js files as a result of fundamental differences between the languages. So does Emscripten. While there is some size overhead, the generated code can be pretty fast. In some cases, dart2js' output outperforms handwritten JS. Do you also feel insulted by those ES6+ additions which make JS a better compile target? Math.imul (etc), the asm.js subset, SIMD, etc - do you hate that stuff with a passion, too? Brandon Eich surely doesn't. Why should you? &gt; Is Dart that good? No. Compared to JavaScript, the language has nicer semantics, not nearly as many quirks, more structure, and vastly improved tooling. Writing somewhat larger applications with more than one person is a lot easier with Dart. Interoperability with other Dart code is also really good, because things like importing libraries, classes/mixins, and Futures (~Promises) are part of the language. Furthermore, the SDK is shipped with a package manager and a tool for generating documentation. So, that stuff is standardized, too.
I noticed it while developing a game for mobile, running in a javascriptcore wrapper.
&gt; But I'm still stuck wondering how the latter approach was never popularised from the beginning. I think it was. I mostly stopped doing daily Javascript work 5 years ago, but before that, the examples I saw were all using `prototype`.
It's a very interesting discussion here, I think really it comes down to what problem you are solving. When working on games, I typically use a fair bit of prototype inheritance. We're trying to improve the engine a bit so it's much less deep, and can store references to objects rather than inheriting. But for this example, the latter is what I prefer to use. Restricting the amount of objects created, especially during the game loop is essential. The garbage collection process can definitely "pause" the game, so it's important to reduce how much you create, and to try to re-use as much as possible. One does have to be careful on how you build your prototypes as many other mentioned, as larger chains can really show performance problems as well.
I've never been comfortable with the "please don't touch" approach to private members.
Not really. WinJS is written exclusively for IE11+ - there's tons of stuff that doesn't work in other browsers, or even earlier IEs
That's how private works everywhere else, it's [not about enforcement but about communication.](http://martinfowler.com/bliki/AccessModifier.html#AccessControlDoesNotControlAccess)
Because for most serious coders, JavaScript is not their primary language. It's just a necessary evil if you work with the web. Their primary language will probably be a C++ style OO language (C# or Java) and prototypes are something rather foreign. They are much more comfortable with the constructor function version and real encapsulation.
C++, Java, C# All languages where private access is enforced by the compiler.
When you parse it using JSON.parse(), yes. 
Nice jab at Front End Devs... Of which there are MANY out there. 
beautiful stuff showing a physics-based curtain that can be pulled, torn, etc.
Outside of general purpose library code, resorting to reflection is the number one sign that you are writing bad code.
And writing code that accesses internals of other library clearly marked by underscore is not a sign of writing bad code?
Every single method call has a cost, unless it is optimized away in a JIT. Maybe not a big cost, but still noticeable if done enough times.
The main reason is because if you look up advice online, you get a lot of bad advice. Also several books cover the various ways of doing OOP and fail to mention that some ways are clearly superior.
Great little demo. I did a WebGL remake a while ago that's textured and lit: http://cdpn.io/yvomp
There is a [well known optimization](http://en.wikipedia.org/wiki/Inline_caching) for this that doesn't just exist in fantasies but in all current engines.
cheers dude, I'm still trying yo wrap my head around this stuff. this has helped a lot, i wish i looked back here earlier cause i changed my whole approach, now that doesnt even work.... fml 
To fix a-sync :) Maybe was reaching a little with that one heh
Anecdotally, I've observed sort of the opposite of this. The C++ programmers I work with (really including me, JS is a second language for me) have told me they have a much easier time understanding prototypes than uses of closure to achieve access control. They actually asked me to put more prototypes into my code, so they could understand it more easily. Certainly surprised me.
Well, currently it is. It's on their roadmap to expand compatibility though, as mentioned in other places.
JavaScript libraries hate him! Find out this one weird trick to getting it right.
Yep, this pattern drives me bonkers sometimes. Of course "premature optimization" is something to avoid, but as a game/interactive developer, libraries with excessive closures and object allocations are not desirable to me. I end up having to re-invent the wheel with cleaner code. GC stutters are a pretty real problem in 60FPS canvas games, especially on certain mobile devices. Here's a good write up on closures in V8 for those curious: http://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html On the other end of the spectrum, some libraries take performance so far that using it cripples your code's readability and maintainability. For example, gl-matrix. See my reasoning and benchmarks here: https://github.com/mattdesl/vecmath
Whenever you have one prototype object such as: function Library1() {} Library1.prototype = { constructor: Library1, publicMethod1: function() { return this.a + this.b; }, publicMethod2: function() { return this.a - this.b; } }; It gets uglified as this: function Library1(){}Library1.prototype={constructor:Library1,publicMethod1:function(){return this.a+this.b},publicMethod2:function(){return this.a-this.b}} When you keep repeating prototype such as: function Library2() {} Library2.prototype.publicMethod1 = function() { return this.a + this.b; }; Library2.prototype.publicMethod2 = function() { return this.a - this.b; }; It gets uglified as this: function Library2(){}Library2.prototype.publicMethod1=function(){return this.a+this.b},Library2.prototype.publicMethod2=function(){return this.a-this.b} Notice how uglify does not optimize this. You save much more space when you have more methods using the single prototype object. Saving more space means less time spent fetching the JS and less time parsing the JS. --- ### Edit ### And now this is where I eat my words: http://jsperf.com/ugly-prototype-assignment Please check my test-case and make another if mine has errors.
I do it like you too. But good point about the inheritance Actually, when I read my file I like seeing: xyz.prototype.&lt;M1&gt; = function () {} xyz.prototype.&lt;M2&gt; = function () {} Because now each is on their own, and I "know" they are extended via the prototype.
Thanks!
Thanks!
From a pure software engineering perspective, if there is a significant difference between the data structure you use to represent a page and an API standardised after your layout engine is written, it is most challenging to provide a watertight implementation which handles every corner case. From a political standpoint: browser wars.
Why do so many people not use google web toolkit, which helps them not give a fuck about javascript or its prototype bullshit.
http://jsperf.com/ugly-prototype-assignment
Yes. IE is still in the 2000s. One day it will either catch up or disappear for good. Any contribution by Microsoft is suspect and likely not a "contribution" at all.
&gt; And now this is where I eat my words: http://jsperf.com/ugly-prototype-assignment That's completely unexpected. I love how fast modern JS is, but it's really starting to get annoying when implementations that should be 100% equal end up being worlds apart at runtime. It makes me think that the optimizations are implemented as a bunch of one-offs for specific use-cases.
&gt;It's good practice to throw errors when the arguments are clearly wrong and indicative of programmer error (i.e. something that would cause a difficult-to-trace bug if left unchecked). Otherwise you should try to be loose with types; That almost makes sense to me, however, I am left a bit unclear. I guess I am over thinking my BDD approach and envisioning all the errors that may be thrown while keeping my complexity down for each function. &gt;Definitely don't do any "type checking" with instanceof or isPrototypeOf. I am not really doing too much of either, but I have only completed the low hanging fruit of this project. Meaning, I have ample opportunity to still try to use these. Why would you recommend against that? &gt;Nah, don't do that. Just write the guts with CommonJS (or AMD) and let tooling wrap it in closures, handle dependencies, etc. Example with browserify I've seen the example and I spent a couple weeks with AMD and commonJs like (browserify) methods. Neither really felt right, but maybe I wasn't grasping things right. the A in the AMD approach seemed intriguting when I was working with requireJS, but the configuration was a bit much for me. I also wasn't sure how beneficial the Aysncroncous part would be. I mean it was driven in my head for a long time to throw everything in one file, minimize requests, and cache the js. &gt;JS has come a long way in the last four years. Object namespaces (MYSITE.users.blah) are mostly an old-school thing. Yes, I am aware JS has, but I have been around long enough not to look my the new hottness. I have a global ns that I am attaching some MVC code too, that itself makes heavy use of prototypes. I don't really have a great reason to use something like angularJS, or backbone, etc. I see some benefits if we were to bring someone new to the team. But ultimately, these libraries will mature and who knows if the new version will be compatible with the old. A long time ago the company I am at wrote a web application using Struts 1.0. Well, Moving to Struts 2.0 wasn't straight forward, and now they have a legacy application that is stuck on struts 1.0 and tomcat 5. Yes, java....cue pitchforks. What I am asking has their been documented performance reasons to migrate away from the NS method. If I write pure JavaScript and a set of standards the code should be maintainable as long as the runtime is consistent. &gt;Definitely read up on tools like browserify, beefy, gulp, grunt, and NPM since it will really change the way you write JS. :) I have read up on most of them with the exception of beefy and npm. Though I do use npm. Is it more than a package manager? I am using grunt over gulp right now becuase of its more proven history. I see nice things about gulp. Mainly speed reason make me consider it, but shit, sometimes I just need to code and not change my workflow every week. Thanks for the thought out answer. 
`All`: there is [`Array.prototype.every`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)... Though you might be favoring browser compatibility since IE8 and below don't have that method. `Distinct`: your solution is clever but is O(n&amp;sup2;) so it wouldn't be appropriate for very large datasets. A more complicated but O(n) solution would be: var result = lastnames.reduce(function(ws, value) { if (!ws.set.hasOwnProperty(value)) { ws.set[value] = true; ws.values.push(value); } return ws; }, {set: {}, values: []}).values; Or, if maintaining the order of the results doesn't matter... var result = Object.keys( lastnames.reduce(function(set, value) { set[value] = true; return set; }, {}) ); `GroupBy`: I'd probably return an object instead of an array to be more idiomatic JS. An alternative to all of these is to use a library like [Underscore.js](http://underscorejs.org/) or [Lo-Dash](http://lodash.com/), and that's probably to be preferred over rolling your own. (These libraries are much more popular than the Linq-inspired ones you linked to.) As you say, you might not *need* a library, but there's very little reason not to use one.
They are not 100% equal - The former allocates a new object and adds an additional new property (the constructor) that doesn't even have the same descriptor (the default .constructor property is not enumerable).
Superior is your Opinion of the approach. I like your approach more out of the two, but to declare it superior is to be ignorant of the many programming styles employed by javascript developers. What if I'm not creating object instances ? What if I don't like prototypical inheritance (I don't personally) ? My point is there is not one golden hammer approach to creating objects in javascript. 
that's awesome
&gt; Most of the cross browser problems have open bugs MS is so clueless. 2005 was a good long while ago guys. 
I do see the closure scope used in a lot of classes that are designed to only be instantiated once. Let's say you've written a class that interacts with a database. That sort of library seems to be better written as prototype... unless you're trying to write a library that can interact with several different databases. In that case, you'd want to be able to create several unique instances of the same class and not have to worry about their variables overlapping. However, you can take closure and create a prototype, but you can't take a prototype and make a closure. In that sense I think what you're pointing out is absolutely true.
I like the sound of TypeScript, but not coming from a CS background and only really ever programming in JavaScript I feel I am lacking basic programming knowledge form An OO POV. If I don't resolve the basics first I feel the trying to learn this is just a waste, as it won't be remembered. So really my question would be what should I be looking at before I attempt to learn this (as well as other languages)? Is there a goto language that everyone tends to learn first (excuse the pun), or a list of recommended books around the fundamentals of programming? Any recommendations, must reads / must watch, must learns would be appreciated!
Agencies will find you. You just need to have a web presence and link them all up. Write a blog, put up some github projects, tweet, talk at meetups (also go to meet people in the same field) and conferences. Finding a job is pretty easy but usually the RIGHT job finds you - you just have to try and make it easier for them to find you. Oh, and linkedIn.
And how's this better than existing proven libraries?
I never said it was fast
window.localStorage['foo'] = JSON.stringify({}); JSON.parse(window.localStorage['foo']);
It's canvas and javascript. Check out the code.
Excellent, thank you!
Perfect! Thank you very much!
The script is not incomplete. If you copy and paste what I've copied above it will give you the page that I originally linked. I need help making the text boxes above in the second picture and make them link to the buttons so that when the buttons are pressed it displays above the boxes. 
Great post, this really sums up my objections to dart. I would add the point that if Dart were to be abandoned it would be pretty much impossible to switch back to JS and the code base might need to be rewritten in JS or TS. With TypeScript the JavaScript output is very readable and aims to be close hand written JavaScript. With the open effort, interoperability with JS, and the maintainability of the compiled JS it comforts any fears of TypeScript being abandoned. 
Depends on the data. It won't preserve Date, RegExp, DOM elements, primitive wrapper objects (Boolean, Number, etc.), functions, undefined, or reference identity (inc. circular data). I wrote a library, [ResurrectJS](https://github.com/skeeto/resurrect-js) to deal with exactly your situation: accurately storing an entire game's complex state in localStorage. I couldn't find any other library that could do it. 
Nothing starts as a standard. That's just how the web works. Everyone throws stuff at the wall to see what sticks. Standardization only follows if users and vendors show enough interest.
Just a tip... If you're going to offer basically no money, then just don't offer money. Lots of psychological research says people [will do things for free that they'll refuse to do for low pay](http://en.wikipedia.org/wiki/Overjustification_effect). Introducing money into the equation damages the intrinsic motivation that otherwise would have led them to volunteer.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Overjustification effect**](http://en.wikipedia.org/wiki/Overjustification%20effect): [](#sfw) --- &gt;The __overjustification effect__ occurs when an expected external [incentive](http://en.wikipedia.org//en.wiktionary.org/wiki/incentive) such as money or prizes decreases a person's [intrinsic motivation](http://en.wikipedia.org/wiki/Motivation#Intrinsic_and_extrinsic_motivation) to perform a task. According to [self-perception theory](http://en.wikipedia.org/wiki/Self-perception_theory), people pay more attention to the external reward for an activity than to the inherent enjoyment and satisfaction received from the activity itself. The overall effect of offering a reward for a previously unrewarded activity is a shift to extrinsic motivation and the undermining of pre-existing intrinsic motivation. Once rewards are no longer offered, interest in the activity is lost; prior intrinsic motivation does not return, and extrinsic rewards must be continuously offered as motivation to sustain the activity. &gt;==== &gt;[**Image**](http://i.imgur.com/GbkOxAP.jpg) [^(i)](http://en.wikipedia.org/wiki/File:Overjustification_Effect_Rewards_and_Motivation.jpg) --- ^Interesting: [^Motivation ^crowding ^theory](http://en.wikipedia.org/wiki/Motivation_crowding_theory) ^| [^Reinforcement](http://en.wikipedia.org/wiki/Reinforcement) ^| [^Self-perception ^theory](http://en.wikipedia.org/wiki/Self-perception_theory) ^| [^Motivation](http://en.wikipedia.org/wiki/Motivation) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgj69pa) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgj69pa)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Netscape and IE didn't differ from the rest because that was all there was back then. What happened was that both vendors saw the potential for a more interactive experience in the late 90s, and both vendors, more or less simultaneously (with IE4 and NS4 respectively) introduced their own "DHTML" browsers. Those browsers were the first to introduce any kind of advanced UI manipulation via JS alone. And as aliroc says, no one really understood what the web was about yet, and there was an urgency to be first to market and capture developer mind share and all that. So obviously these two competitors weren't about to cooperate on what the DOM should look like. Another thing that has really changed is also that W3C is much stronger (or at least, for an outsider, appears that way). W3C generates a sick amount of specs these years, and they're now far ahead of browser vendors, while in the 90s, it was usually the other way around. Presumably commercial interests have gone way up since, a tonne more web developers in the profession and Netscapes legacy in Mozilla has all done much to strengthen standards. But what really made it difficult was that the platform was new/split, tools/knowledge were immature (I remember cutting my teeth on CuteHTML, and jquery, fuck, I could have used that back then).
So, what's the best way to add in the private code, and the class-scoped non-exported variables?
Mmm, wasn't aware of array notation for accessing. Guess I'll be saving some get/setItem calls :D
ummm... they do? https://github.com/winjs/winjs/wiki/Roadmap
Netscape never charged for their browser, did they? They sold a proprietary webserver, that nobody used. Maybe there was some kind of licensing deal? But I was a webdev in 2000, I had a pretty staunchly anti-piracy viewpoint (which softened a little in ~2005), and I never paid for Navigator -- but I used it almost exclusively.
I've seen this pattern several times, in jQuery libraries and elsewhere. It makes a single "factory" with a lot of working code, instantiated once, and a method that exports thin objects with public interfaces: var MyClass = (function() { var a=0; //consider me class-static var b=5; function add() { return a+b; } function sub() { return a-b; } this.instance = function() { var someInstanceStuff=0; return { add : add, sub : sub }; }; }).(); var obj = MyClass.instance(); var x = obj.add(); That (possibly) cuts down drastically on per-object cost. 
You don't optimize the closure approach by translating it *directly* to the prototype approach, though. Normally a closure is represented by a pointer to code and a pointer to the free variables used by that code. There is only one version of the code. Similarly, you could keep a single prototype of every `{method: function, ...}` object you see in the code and pack the whole thing with the free variables. Not a JS prototype exactly, but something similar that isn't exposed to the user in any way. For as long as these objects are not written to, there is no reason to duplicate them, so you can simply set a copy-on-write policy. 
Charging for their web browser was their primary business model.
&gt; Meaning, I have ample opportunity to still try to use these. Why would you recommend against that? Generally `instanceof` is a sign of code smell, especially when it's used [like this](https://gist.github.com/mattdesl/f0c5eaa2bb2e1de97b46). In a loosely typed language like JS you shouldn't be enforcing types with instanceof or isPrototypeOf. &gt; I've seen the example and I spent a couple weeks with AMD and commonJs like (browserify) methods. Neither really felt right, but maybe I wasn't grasping things right. the A in the AMD approach seemed intriguting when I was working with requireJS, but the configuration was a bit much for me. I also wasn't sure how beneficial the Aysncroncous part would be. I mean it was driven in my head for a long time to throw everything in one file, minimize requests, and cache the js. I am also not a fan of AMD, but RequireJS as a dependency manager is much better than just concatenating files in a manually defined order. Browserify IMHO is the way forward for JS. &gt; What I am asking has their been documented performance reasons to migrate away from the NS method. Performance probably won't be of concern (although adding 30+ properties to an object causes it to be de-optimized in V8, and with long namespaces it could introduce performance issues in very rare and specific cases). Main reasons NPM/browserify is the way forward: - Unified package manager for automatically maintaining dependencies with [semantic versioning](http://semver.org/). - Consuming dependencies and publishing packages is extremely easy. `npm install`, `npm publish`, and `require('foobar')` - It encourages [small and re-usable code](http://codeofrob.com/entries/lots-of-small-things.html), rather than monolithic and un-maintainable codebases tied together in a name-space. - These small libraries are maintained separately. People can submit a PR and bugfix your "string-util" module without needing to know anything about the rest of the code you've been writing for your app/framework. - More in line with ES6 and the future of JS (modules, import/export) - You can rely on Node modules like events, path handling, etc. This makes your modules comatible with NodeJS if you choose to use it in the future - Source transforms: stuff like inlining .txt files into your bundled JS (useful for long chunks of text, WebGL shaders, etc), or es6ify Here is a very thorough comparison of different build tools compared to the old-school namespace pattern: http://www.aeflash.com/2013-03/javascript-module-systems.html
Why should you upvote everything that a user has submitted?
It's generally more pleasant to write code in Dart. Fewer quirks, nice standard library, good focus on tools. But if you're *using* a library written by someone else, you hope they didn't write it in Dart, because calling Dart from JS requires some FFI setup. It seems like a decent FFI, as FFIs go. But TypeScript avoids the FFI altogether, which has major practical advantages. A library written in Dart is great for people who use Dart. But a library written in TypeScript is usable by everybody.
Browser wars is basically the idea -- Netscape released a browser based on NCSA's Mosaic, and it was a significant step up from contemporary peers. You had to download it, though. Microsoft started shipping IE as part of Windows, so a large proportion of users no longer saw a need to download Netscape. Other browsers existed, but their market share was miniscule compared to those two. IE initially supported Javascript only badly; they had VBScript which was proprietary, exclusive to IE, and part of the VB web stack, making it really easy for Microsoft engineers to target IE browsers exclusively. Javascript support was there, but it wasn't a priority. As a working webdev during this period of time, my perspective was that Microsoft did not completely or correctly implement the standards that were being published. I guess in reality they still don't, though I have heard people refer to them more as "IE bugs" these days and not "Microsoft implementing things wrong"; I think at the time it was clear that Microsoft was trying to create incompatibilities, to pressure users into employing IE. That is, IE was such a big proportion of market share (simply due to it being "the default") that developers had to write code that would execute properly on IE. The conspiracy theory went, that by making things work differently in IE, Microsoft was trying to artificially make IE the better browser. Many devs would only test in IE; bugs that affect IE would affect a larger population and therefore be prioritized higher, etcetera. In essence, it would leverage its large market share to shut down the other browsers, not through innovation but through a vendor lock-in strategy. Part of this was that standards developed well behind implementations, and the early web experience was unglamorous enough that developers were extremely hungry for new features that added pizzazz, enhanced usability, and increased perceived performance. Netscape (then Mozilla) and Microsoft released features more or less in competition. Once a competitor announced a feature, the other would adopt it. But the adoption would almost always be slightly different. Here I perceived that Netscape (then Mozilla) pursued a standards-based approach to feature adoption, while Microsoft would often add features that were non-standard, and only after a few revisions bring those features into line with standards. Maybe Microsoft wasn't being quite that cynical, but it had, in the 80s and early 90s, executed a similar strategy of market gamesmanship to corner the operating system market. Only by giving software away for free has Linux managed to make inroads; commercial competitors to MS-DOS were crushed. We had reason to distrust Redmond. I feel like the old guy rambling now; I'm not sure I answered your question exactly but that's how I remember the late 90s and early-to-mid 00's playing out. I was developing on a largely open source stack, so my viewpoint may be jaundiced. But I didn't meet too many people that thought Microsoft was the white knight in this era.
Netscape Navigator was only free for non-commercial use. I don't recall when they switched to "free for all", but it was before you were a web dev in 2000 (and you're making me feel really old now, BTW). https://web.archive.org/web/20020810041611/http://wp.netscape.com/newsref/pr/newsrelease8.html &gt;Netscape Communications also announced today that it is setting the single-user price of its Netscape Navigator for commercial use at $39. The pricing -- which includes a 90-day warranty, 90-day online or phone support, and diskette or CD -- makes it readily affordable for commercial users, giving the largest potential number of users access to commercial strength, supported technology. Netscape Navigator 1.0 is available for free downloading on the Internet for academic and non-profit use, as well as for free evaluation purposes. It was one of the things that helped push people toward IE. Pay $40/seat for Navigator across your 100K PC company, or use the browser that came with Windows for free. Tough decision for the guys in Accounting.
ActiveX had almost nothing to do with the DOM, and I'm not sure I would even call it an API so much as an browser plug-in architecture that presented a plethora of security problems.
&gt; Microsoft started shipping IE as part of Windows, so a large proportion of users no longer saw a need to ~~download~~purchase Netscape. FTFY. IE's strongest selling point in the early days was that it was free (back when you still had to download it since it wasn't part of the default Windows install yet), while Netscape was charging $39 a pop. You could almost always find someone who had a copy of the Netscape installer kicking around. &gt;But I didn't meet too many people that thought Microsoft was the white knight in this era. I met zero. We all **hated** MS and IE.
I am still running away from code in the 90's that where adding methods to the object "object" and have not updated my rules in a long time. 
Interesting. Navigator was the only browser available on Linux when I got my first webmaster gig in '97, and I don't think I ever knew I was supposed to pay for it. Prior to that I'd used Mosaic and whatever OS/2's browser was called. I was in grad school at the time, so maybe I thought I was allowed to use it anyway? I don't know. Edit: I guess I'm skipping over Lynx but I don't think that really counts.
https://s7xts.dinahmoe.com/
That's nothing compared to [Unreal Engine 4 implemented in JavaScript](https://blog.mozilla.org/blog/2014/03/12/mozilla-and-epic-preview-unreal-engine-4-running-in-firefox/)
It's going to be a cookie. The question is however if your going to do it with javascript client side or php server side. If you do it with a javascript cookie you'll lose control over it. If the user deletes the cookie. The browser will forget them. You have more control over that redirect server side.
Fun, but it should specify that the quiz isn't multiple choice i.e. only one right answer. I got all 6 right, but 2 of them have multiple correct answers. 
Function identity can be observed in far more ways than adding properties, for example by comparing it to something, referencing a property or calling it (if it's a closure). Even if you implemented copy-on-write, you would have to add checks to almost every operation to see if something is a cow function which would cause a general slowdown, not to mention you would have to copy it eventually anyway since the identity is so easily observable.
thanks for the thoughtful response. Perhaps I should consider browserify again. Really, at first it looked great.`require()` was exactly what I was after, but found it wasn't jiving with how I was planning on initializing.
what your internal Objects expose and what your API exposes are two entirely different things. Once those two are decoupled and the difference between the two is understood the reasons to have *private* variables and methods are eliminated.
[I assure you it doesn't](http://jsperf.com/asdsadas) 
Interesting, guess I eat my words this time. But I have seen a similar benchmark with different results. Maybe something in this example didn't allow V8 to kick in this optimisation. I have to go out but I'll play with that when I'm back.
May have missed the band wagon on this one, I would say that it depends on the type of "class" you are creating, whether you are optimizing for speed, oop, or portability with other libraries, each style has its merits. Although this article is old (late 2012) there is a good section about cached functions in the module pattern http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/
Eh? I was there, and though there may have been a commercial version of Netscape around, you *always* could get a free version of Netscape, too.
Netscape was only free for **non-commercial** use. Use it at home? Fine, no charge (although you certainly *could* walk into CompUSA &amp; buy a boxed copy). But for 100K desktop PCs across your enterprise? You're cutting a **big** check to Netscape. Or you can use this other browser that Microsoft is giving you for free.
By 2000, Netscape was already over. I'm talking about '96-'98 here.
~2000 was the frame of the question, which is why I was addressing it.
I don't think it's as problematic as you make it out to be. Pretty much all operations already have to check for a dozen of things: null, undefined, boolean, string, number and whatnot. The only way an engine can be really fast is by being good at guessing (and at invalidating its guesses), and if it's good at guessing those things, it'll be good at guessing closures too. I don't think you'd run into big problems with identity. `===` on objects and functions ostensibly checks if they are the same reference, but as long as it reliably tells you what's *supposed* to be the case, it doesn't have to tell you what's *actually* the case. Tricking it into comparing different bindings equal when they are semantically identical should work just fine. I mean, sure, you have to be careful, but I don't think this kind of optimization is infeasible or would make things particularly inefficient. 
I would recommend mixins and composition over extending classes. ("has a" over "is a" relationships) Inheritance and polymorphism isn't that useful when you don't have a strong type system. Also, if you extend a class, you're not supposed to be able to use the private methods and properties. That what `protected` is for. You're supposed to hide the implementation details and provide a public interface -- even from your subclasses.
Try using intermediary indexes instead of nested loops. The nested loops will kill you. For example: var numbers = {}; var emails = {}; var names = {}; _.each(dataset, function (ix, item) { if (names[item[0] === undefined) { names[item[0]] = []; } names[item[0]].push(ix); if (numbers[item[1]] === undefined) { numbers[item[1]] = []; } numbers[item[1]].push(ix); if (emails[item[2]] === undefined) { emails[item[2]] = []; } emails[item[2]].push(ix); }); When this code runs to completion, you will have three objects (hashes) that map numbers/names/emails to arrays full of row numbers. If you're trying to create an in-memory object graph, you can rewrite this swatch of code so that each input line is put into an object, and you could insert those objects instead of the row numbers. Then all your edges are identified by the numbers/emails/names objects. I'm not sure how helpful this is; I'm not familiar enough with D3 to know how it expects its input.
... i need to learn more about javascript
For heavy interop, TypeScript is certainly the better option. My Dart projects do not interact with JavaScript and my JavaScript projects do not interact with Dart. I'd only interact with JS if I wanted to use something like Google Maps in my Dart application. Other than that, just using Dart libraries makes a lot more sense.
[ZingChart](http://www.zingchart.com), although lesser known, would certainly work for you. The trial is unlimited, it handles huge data sets with ease and there are multiple render options. They have a [candle stick chart](http://www.zingchart.com/docs/chart-types/stock/) that you can customize to your heart's content.
It's actually pretty simple to show that it is not only infeasible but impossible. function Constructor() { this.fn = function(){}; } var a = new Constructor(); var b = new Constructor(); var fn1 = a.fn; //cow function id=1 var fn2 = a.fn; //cow function id=1 var fn3 = b.fn; //cow function id=1 Now fn1, fn2 and fn3 all point to exactly the same object in memory, but according to javascript semantics `fn1 === fn2` must be true yet `fn1 === fn3` must be false.
Don't worry, in ECMA6 we get "class" which is sugar over prototype-based OO.
It's a bit of meaningful pedantry; I don't "feel insulted" by Dart, I view Dart as insulting in approach. But I don't think Dart has enough potential to be personally concerned with its attitude. You notice that _in this topic_ I'm interested and encouraging towards projects like TypeScript? You're arguing past me. 
&gt; I don't "feel insulted" by Dart, I view Dart as insulting in approach. I have no idea what you mean by that. &gt;You notice that in this topic I'm interested and encouraging towards projects like TypeScript? That's why I mentioned Emscripten. C/C++ also has completely different semantics.
&gt; Let users shoot themselves in the foot In a large codebase you want to prevent this as much as possible. [Give people enough rope, and they'll hang themselves](http://en.wikipedia.org/wiki/Wikipedia:Give_'em_enough_rope). The whole point of private members is that it allows you to change the internal implementation of the class without having to worry about whether it breaks client code. So long as the public interface remains the same, you're all good. Typically unit testing will only test the public interface too - since that is all that is accessible to the users of your class. *Consider the following:* Using any members prefixed with _ is considered a [code smell](http://en.wikipedia.org/wiki/Code_smell). However, some programmer in your team, perhaps through ignorance, stupidity, inexperience, etc..., still goes along and uses these members in their client code. You then come along and change the internal implementation of the class. Perhaps some performance improvement, or minor refactoring of the code. Your unit tests all pass because the public interface hasn't changed. Unfortunately you don't catch the instance where the other guy has used your private members. Perhaps the change is such that instead of a syntax error, it causes a logic bug - the output is different. The error goes unnoticed until it is in production. Scott Meyers has a famous [quote](http://programmer.97things.oreilly.com/wiki/index.php/Make_Interfaces_Easy_to_Use_Correctly_and_Hard_to_Use_Incorrectly) - *Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly* Having private members prefixed with a _ is very easy to use incorrectly - all you need to do is call them. Using closure to encapsulate private members is very very hard to use incorrectly - it's impossible to call them.
Having been a coder back during this period, it actually surprises me more that JavaScript grew and succeeded. It was a horribly clumsy and slow language at the time with tough syntax and was harder to debug than many other options available at the time. Once the libraries started to standardize is has jQuery, it started to become easier to use.
Iterating over 1k items should not freeze the browser. It's very difficult to give you any actual help unless you post the offending code. I suspect you have either constructed the algorithm very inefficiently or possibly are inserting into the Dom with each iteration? If you post the code it'll make it much easier to give pointers. 
Fantastic! Thanks for the reply, I will check them out!
Just want to point out that I have come across that exact problem many times. I work with a large JS codebase that uses hundreds of prototypal classes and it is a mess -- tons of access to methods and variables that really should be private. Tons of preventable bugs as a result -- a small change to anything could have far-reaching implications. We are slowly refactoring it to a modular system, rather than a class-based system.
Microsoft.
Fair enough, though if you don't have that (Composition) mindset toolkit in your toolbox, you don't have the ability to do anything different that class hierarchies.
Larissa sounds dreamy
Its called healthy competition :-) The real problem started with IE winning the browser war which stalled innovation for 10 years. Since Safari on IOS and Chrome entered the scene, the competition heated up again, leading to IE catching up to developed standards. So the gap is closing again, starting with IE9. 
The problem isn't that fn1, fn2 and fn3 all point to the exact same object in memory, because they can't: a.fn and b.fn close over different sets of free variables, or they would, if you had included any. If there is a problem here, it's that fn1, fn2 and fn3 will all be *different*. Essentially, what I'm proposing is to translate this: function F(x) { return {fn: function() { return x; }} } into something similar to this: proto = {fn: function(closure) { return closure.x; }} function F(x) { return ProtoClosure(proto, {x: x}) } In doing so, I would have to make the runtime aware of ProtoClosure so that (roughly speaking): * `p.f(...)` ==&gt; `p.proto.f(p.closure, ...)` * `p.f` either triggers the copy, or ==&gt; `Closure(p, p.proto.f, p.closure)` * `p.f = ...` triggers a copy We expect that most of the time we will find the first form (direct method calls), so it's not a major problem to take the hit of a copy on the plain accesses in the (rarer) second form. If we go for creating Closure objects, it's a bit more involved. First, all accesses on them would have to be rerouted through their parent. Second, we avoid the copy at the cost of returning fresh objects on every access. This would mean that in your example `fn1 !== fn2`, but we only need to add a special case for `Closure` in the implementation of `===` (which already special cases numbers, you'll notice: `NaN !== NaN`). 
Your opinion on encapsulation frustrates me a bit, especially because we're talking about writing libraries. Encapsulation is very important when writing libraries and frameworks because it ensures that the library can be refactored and extended without breaking code that depends on it. If you've ever been upset that your code no longer worked after upgrading to a new version of a dependency you'll understand how important a clean api and encapsulation are to modular development. All that said, there are exceptions to every guideline/rule. There are times where performance and resource optimization are the absolute top-driving consideration in development.
More like: "Look at all this crap you gotta learn to do javascript apps these days."
Cool site and fun quiz. But the beta invites are broken :-(
I've just tested this, and it is 100% functional. I'm storing quite a lot of information, and it's all saving/loading perfectly!
Just tested, and it's perfect! Thankyou very much! Now I just need to run compatibility checks and it'll be done!
I'm only working with integers, floats and strings, so all good!
No jQuery?
In any of the teams I work with using a `_`-prefixed member of other class would fail a code review, no exceptions. Integration tests are no less important than unit tests. Testing overall output of the system is exactly what prevents things from failing in production despite passing unit tests. Besides that, there are large Python codebases which happen to work despite not having any formal restrictions on member availability.
Competition restarted once Firefox came out. Remember that Netscape open sourced their code, started the Mozilla Foundation, then threw out their code and started on Gecko. The code was such a mess that there was nothing salvageable. It took several years before they had a releasable browser. Once Firefox came out, that restarted the browser wars.
If you find out let me know. As an employer in Kansas City we have had trouble getting people to even apply. It seems they all want to work through recruiters, who want to take a massive cut out of the worker's pay.
I see. I'm not so worried about the cookie being deleted. Can you point me somewhere online where I can read more about this or give me a good search query? Thanks!
You are free to use whatever you want. If you don't see the benefit of modern JavaScript then trying to learn new stuff is just time wasted.
True, but that takes us into composition by has-a and composition by forwards-to and composition by delegates-to and boom, you're writing a [book](http://leanpub.com/javascript-spessore) :-)
That's the difference between `&lt;input type="checkbox"&gt;` and `&lt;input type="radio"&gt;`.
Well. I edited it. I put the code in it for the boxes. The boxes are out of place though.
What you are asking is really the benefit of object literals vs. Function objects. That isn't really related to sharing across files and depends heavily on the context but the main question to ask is if you need a function to do some initialization step for you to create the object or if you need to keep certain variables private to a given scope. In those cases you need a function otherwise an object literal may be a good fit. It all depends on the context. As far as sharing across files you can look into require js or solutions like browserify which allow you to use the common js method of importing scripts you see in node, but it makes them available in the browser. Before these were options a lot of people would keep things in different files through namespacing where you'd put app = app || {} ; app.SomeClass =... To avoid polluting the global namespace. You'd get extra points for wrapping that entire declaration in an immediately executed function similar to your second example in each file. The issue with this is you have to manually manage your dependencies and which scripts are loaded when. This becomes an even bigger pain point when you want to minify and concatenate everything for production so people would write their own solution to walk the tree and do this as part of the build. These days we have tools like grunt or gulp that we can combine with browserify to do all of this for us. Simply put the common js method with browserify behaves the most like importing things in other language and has a very small learning curve so I prefer that but lots of people still are into require js and amd at the moment too. There are benefits and drawbacks to both approaches (although I should add based on the specs that syntax doesn't seem to be where we are heading for ECMAScript but we will see... Hopefully anyway). Luckily more and more modules and libraries are starting to support both approaches out of the box. I'd research these heavily and meet with your team and decide on one or the other. The manual approaches are just causing you to do work someone else has already done for you and that a community much bigger than your team has tested out for you. Ain't the Web great. 
I'm part of this community, and I think he needed to step down. You can be about free-speech and still demand consequences. He wasn't JAILED for his opinion, he was punished by an organization that recognized that their CEO is the face of the company and that his opinions were hurting them financially (donors were backing out). This was *NOT* a free speech issue, and to pretend like it was is simply ignorant.
Thanks, now I'm more confused :)
Pretending it's not a free speech issue is the definition of ignorance. This is without any reasonable doubt a case of someone being demonized for having a specific opinion. How could that possibly questioned by a reasonable man/woman? Being unable to handle hearing (in this case seeing after digging) opinions that are different than your own is called woeful ignorance. That is a fact. You can't have (and we wouldn't have) the open Web without dissenting opinion. Of course none of this had anything to do with the Web or his ability to lead Mozilla but I think his contributions to the Web as a platform stand on their own. The fact is no one who believes a person should lose their position in a corporation because they have a different opinion than them, has no valid place in a functioning society. Period. On a personal level, I'll be open and say my opinion on the matter differs entirely from mr. Eich but I'll be dammed if I wouldn't fight tooth and nail for his right to express them without fear of retribution for doing so. Particularly, demonizing him to the point of resignation in his tech sector job is flat out ignorant, immature and moving us backward. I'm not even going to get into how this could possibly be construed as something other than a free speech issue, especially in the context of Mozilla. That's asinine and really reaching to make yourself feel better to be frank.
It is a liberty (free speech) issue. Was he pulled out of the job for incompetence, technical qualities, poor leadership, or anything remotely related to his job? No. He lost because of differences in political opinions not even related to this industry. If you really need a name for it then perhaps you could call it homophobia-phobia.
Heh. Really look into browserify and just basic tutorials on how files are imported in node (the idea is exactly the same). It's extremely simple and common sense. You'll get up and running in less than an hour I'd guess. Very simple.
"Free speech" as it's almost always colloquially used refers to legality. The man wasn't jailed, so this isn't a "free speech" issue. He was free to say what he wanted to through his money --- the donors for Mozilla were free to say what THEY wanted to with their money --- the employees of Mozilla were free to say what they wanted to on Twitter. I agree that people should be able to have opinions even when they're unpopular, but to equate "free speech" to "no consequences for unpopular opinion" is bullshit. &gt; The fact is no one who believes a person should lose their position in a corporation because they have a different opinion than them, has no valid place in a functioning society. So wait --- Eich can have his opinion consequence free, but those that disagree with you don't belong in a functioning society? Look, the argument is simple --- Eich HURT MOZILLA because people are free to stop donating based on their opinions of the CEO. From a pure business perspective, he needed to go. &gt; I wouldn't fight tooth and nail for his right to express them without fear of retribution for doing so. I'm sorry, but this is simply naive. We can and should guarantee that the GOVERNMENT won't take action based on peoples' opinions ("free speech") but to restrict others from expressing THEIR opinions through their pocket books makes your position self contradictory. Donors expressed themselves ... are you suggesting they shouldn't be spending their money based on their opinions? This is a very very simple concept. Donors are free to express their opinions with their money. Mozilla survives off of donations (and Google money). They were losing donations, so Eich was hurting the business and all of the employees. He needed to go, and he did so. 
You do if you're overriding the default prototype object like I've done.
I would just do an object extend in those cases. But most of the time I alias the Library.prototype to a variable, or do what jQuery does and alias prototype to fn on the object.
&gt; Free speech has nothing to do with the law and is a human right, etc etc. Who's arguing that Eich shouldn't have the right to donate money to whatever hate group he wishes? He can donate his money to the KKK for all I care, I just reserve the right to avoid helping him do so in any way, shape, or form. That's MY right to free speech through MY pocket book. You can't have it both ways here! Are you failing to see the connection between my right to withhold donations and the continued success of the Mozilla Foundation as a not for profit? &gt; The fact is no one who believes a person should lose their position in a corporation because they have a different opinion than them, has no valid place in a functioning society. Period. Ok, please rephrase this statement then to make it more clear. I read it as: an employee that thinks the CEO should lose their position if said CEO has an opinion the employee disagrees with has no place in a functioning society. &gt; I'm not going to stoop down to this tbh. Mmmkay. I enjoy the implication that someone having a dissenting opinion in relation to yours means they're somehow down in the mud. Hypocrite much?
What stops you from tacking on to "lib" a new public method that will give you access to all internally defined variables?
Freedom of speech means that you're free to say whatever you want. However, it doesn't mean that it won't negatively affect the company's image, if you happen to the be face of said company. As a customer, you can boycott any company for any reason. As an employee, you can leave the company for any reason. As an unpaid contributor, you don't have any obligations whatsoever.
While it's certainly a reality, I don't see it as a tragic one at all. I see it as a natural consequence of accepting the ultimate leadership role in an organization. The CEO sets the tone and the culture for their company (typically) and so it seems relatively natural that folks look at their CEO as their avatar internally and externally. While the CTO is still a major representative of a company and its values, their perceived contribution in those areas pales in comparison to the CEO. There's no "blame Joe Biden," meme --- does that seem tragic to you? Being the CEO is a privilege, and it comes with a TON of benefits. Eich wasn't forced to step into the spotlight --- he accepted the opportunity to do so. I do think it's a bit weird how big of a difference there is between CEO and CTO, but it's not a surprise to me really. Check out glassdoor.com --- they don't ask people if they approve of the CTO, they ask about the CEO. It is what it is.
You can't have a functioning society in which people believe that it's OK to demonize someone out of their job because they have different opinions than them. How is that not clear? How is that in anyway stating that people should not have a place in society because of their opinions? That makes no sense. The problem with people is that many can't see someone having a different perspective than them as anything other than a personal affront and will ruin other people's entire lives for disagreeing with them (note that other people in this situation might not have all of the options he has after leaving Mozilla....). It's simple. We learn or are challenged by different opinions and we shouldn't censor them. If we do we are doomed to remain infantile and never grow as people. I only responded because I was able to hardly change the wording of what you quoted and made the same point so I really don't understand why you thought I said something that meant I have a problem disagreeing with him. That would be entirely irrational based on the entire point of my comment. I'm at a loss there. The other reason I respond is I had added an edit that somehow didn't show up that I feel I need to speak up on, on the discussion: by whet record are you drawing your information on donor loss?We are talking about a tiny amount of time here (no where in the realm of a financial quarter) and I've seen nothing on this outside of a random blogger or two speculating. If you have hard numbers to back up those claims I'd be very interested in seeing them. I could anecdotally tell you that I've read numerous articles and the proceeding comments, discussions on reddit, etc and it seems far more *users* are offended by Mozilla not standing up for free speech (a core value) but that's anecdotal. I could also say, yes, their employees are free to voice their opinion and only a tiny fraction of them voiced an opinion related to wanting him removed. What does that mean? Do you see why this is unfair rhetoric? Finally, I said it's OK for you to have your own opinions. I encourage you to. I'm just some guy on the internet. It's not ok to insert meaning into a very clearly stated sentence that are the exact opposite of what my entire response was about. I'm just not willing to take part in that anymore than I am willing to demonize someone for their opinions. It's not even really related to you, it's about me and my *opinion* is you should feel the same way in your personal dealings. It's a solid policy.
Uh. Even though I've railed against not using hard numbers in this thread I can without question guarantee you that the majority of the contributors you are referring to were not in support of this. That's not even close to what was at play here. 
Normal case: function Library(){} Library.prototype.method = function() {}; console.log(Library.prototype.constructor === Library); // true However in my case: function Library(){} Library.prototype = { method: function() {} }; console.log(Library.prototype.constructor === Library); // false
Say the file containing that module was in `library.js`. Then, you would just add `module.exports = LIB;` somewhere in your `library.js` file. To use `LIB` in a different file, you would just do: `var LIB = require('./path/to/library.js');`
Did you reply to the wrong comment?
You'd just type module.exports = and then your declaration in a file named lib.js. Then when you want to use the code in another file it just takes var Lib = require ('lib') to import it. You write all of your code like that and then run it through browserify which boils it all down into a single file and manages the dependencies making sure the contents of the files are put in the right order so you have what you need when you need it. However, I guess I've just realized you probably don't have experience with node so a lot of this is probably greek so im do Ing a poor job here. Just look up some really simple examples on node and npm and you'll see what I mean. Browserify allows you to write your client side code in exactly the same manner. I'll spend some time looking for some specific tutorials later on that focus on this aspect of it only when I am home.
Every programming language (including JavaScript) has a way of doing math operations. What a real-world use case you might have of using that really depends on what sort of application you want to make. For instance, a simple application that tracks your purchases based on your budget would definitely have a lot of arithmetic involved. How you use JavaScript to improve the user interface that your users see on the web will probably come up a bit later in your course, so just hang on. :)
I have experience with NodeJS. I think this makes sense. I'm going to try and convert all our existing files into a browserify system. Thanks for your help, it's much appreciated.
No, but was my assumption that you were referring to open source contributors in your comment a bad one? Lol. I strongly believe the majority there did not want this to happen but again I'm not going to be able to give hard numbers to back that up. That is my feeling based on what I've seen/heard from people. Apologies if that seemed put of context.
It is probably not as performant, but I wrote a similar library to generate figures in SVG: https://github.com/mikolalysenko/svg-3d-simplicial-complex Projecting and clipping a bunch of triangles is pretty easy to do in SVG, but with WebGL the deeper question these days is really why? It does make sense for static graphics and assets, but I am not really convinced that it is a great idea for animations. Still, it is a pretty fun demo and a pretty intriguing proof of concept.
Sure. I'm glad I could help. Feel free to pm me if you run into issues along the way.
I just want to recognize the positive impact Brendan has had on the open web and other technologies many of us care deeply about, and thank him for his contributions that have made our world better.
Worked for me just by typing in the console. weird.
&gt; You can't have a functioning society in which people believe that it's OK to demonize someone out of their job because they have different opinions than them. How is that not clear? How is that in anyway stating that people should not have a place in society because of their opinions? You're tap dancing. "To demonize someone" is essentially to have an opinion about a person. Saying: "I hate you" or "I hate you, you should go away" or "I hate you, and I'm not going to use your software" are all *opinions*. That's ALL of the power the employees and users had in this matter --- the power of their opinions about Eich, Mozilla, what they wanted to see happen, and whether they'd continue to support the Mozilla foundation with donations or use of their software. They have a place in society just as Eich does and just as **I** do despite it being my OPINION that Eich should have stepped down. &gt; by whet record are you drawing your information on donor loss?We are talking about a tiny amount of time here (no where in the realm of a financial quarter) and I've seen nothing on this outside of a random blogger or two speculating. We'll never have anything but anecdotal evidence of loss of donations as the donations to NFP are essentially anonymous... so here's another anecdote: I've donated to the Mozilla foundation, and I was willing to withhold future donations. Do I have no place in society because of my "demonization" of Eich/Mozilla? Are you not "demonizing" people that choose not to use FireFox because of their opinions of Eich? Even if we assume no donations were lost, actions like OkCupid's can't be ignored. Mozilla is negotiating with Google over how much they'll get paid to keep Google as the default search engine --- can you see loss of even more browser market share as a *good* thing for those negotiations? Can you see Google not wanting to associate with Eich and his newfound public image impacting those negotiations? That deal is the bulk of Mozilla's money! &gt; I'm just not willing to take part in that anymore than I am willing to demonize someone for their opinions. Are you willing to avoid Chik-fil-A so as not to put money in the pockets of a group that attempts to spend money influencing policies that impact you, your family, and your neighbors? Is it demonization if I choose not to shop at Hobby Lobby? Look, you're hero worship is blinding you to a simple reality --- people are free to vote with their pocket books and did so in this case. Nothing wrong with that --- it's capitalism and freedom of expression. 
I was talking about individuals. Individual customers, individual employees, and individual unpaid contributors. Each one decides for themselves. There is no vote. There aren't any numbers.
What you are saying throughout your entire response must be in reply to someone else or something. None of this makes sense in regards to what i am saying because its not why he quit.This didn't have anything to do with the users or donors. This happened directly after OK CUPID asked it's users to stop using Mozilla prodcuts. I'd say again I'm waiting for those numbers but I know they aren't there and I don't care. So I'm gonna make your day. I concede. You win. You win a one way debate on the internet. 