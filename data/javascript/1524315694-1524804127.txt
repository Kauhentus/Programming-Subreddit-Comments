There are software which I have not seen before and it is interesting.
This is not part of your question, but this code is extremely dated. The code you quoted used to be extremely common, but nowadays it is a sign of cargo-cult coding. I am almost certain that creating an xhr object in IE hasn't required ActiveX since IE7. Today things are so much simpler. Now, you just have to figure out if a system support fetch and provide an XMLHttpRequest fallback when they don't. :/
Vue is nice.
Promise-based APIs like axios or the built-in fetch are great too!
Based on what?
I bet in 2019, or latest in 2020, it will be Lisk.io 
Thanks! I might have to go fix my project now, haha.
GitHub stats, it looks like?
Github.
Thank you. That works! :) It takes two initial clicks to get the hidden text to display, though. Is there still something in the JS that needs to change? Updated JSFiddle: https://jsfiddle.net/55urjofL/5/
Because of JavaScript's dynamic nature and the fact that it had no syntactic sugar for classes for a very long time, lots of the design patterns in the GoF book don't get much love in the JS community. Instead, influenced by libraries like React and RxJS, the community became more oriented to functional reactive programming. Most of the best practices and design patterns that modern JS follows come from the functional paradigm \- pure functions, immutable data structures, higher\-order functions etc.
Just remember, nobody cries for the janitors on the death star
Yup, that's my mistake. Using the `&lt;style&gt;` will set the style of the element, but it won't be reflected in the `style` property in JS. It can be detected in the computed style, but it's easier to move the display none rule from the `&lt;style&gt;` to instead be an inline style in the element itself. These style attributes will be directly mapped to the `style` property. &lt;div id="myDIV" style="display: none;"&gt;
Extensions do not work for every project and every library. I Tried VS2017 as well. IDEs with built in support work probably better.
I guess you'll have a hard time finding a better alternative
Something like this should work fine var a = [[1,2],[3,4]] var b = 1 var c = 0 alert(a[b][c])
Hi /u/re-zero0, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
WebStorm.
If you just want to transpile es6 and would like to keep your gulp workflow you could just try gulp-babel.
I have updated my code, I mean in if condition.
Works perfect now. Again, thanks! I've not had much trouble with HTML, but JS is a whole different world.
what about angular?
Since neither the blog, the project website, nor the github repo explain what IoT.js is, I found a [slide deck](http://events17.linuxfoundation.org/sites/events/files/slides/openiot-summit-2016-iotjs.pdf) that describes it as "a lightweight version of Node.js" that "runs on top of JerryScript".
"not a student, just teaching myself" 
yeah but what's the difference between all those babel packages? Some just used 'babel', some 'babelify' or some 'gulp-babel'. Is there any 'the best' package or are they all quite the same?
Did you even read the title or post itself? WebStorm isn't free. 
I actually didn't create this this week, but didn't post this anywhere either. I created a tool to install node, npm, npx and yarn: nnny ([GitHub repo](https://github.com/mellamopablo/nnny)). I explain my need for it in the README, but essentially it will install the exact versions on your `package.json` engines field, guaranteeing deterministic builds. It is not meant as a replacement for `nvm` on desktops; but it is meant as a replacement on provisioning scripts. On the past, I've had a lot of trobule trying to provision a server with node using nvm. Plus nvm has no support for yarn either.
 npm uninstall -g gulp npm install -g webpack
In general, I agree that frameworks are bad simply because of the inversion-of-control aspect. It is very hard to inspect a lot of code that is not your own and very easy for the ground to shift from under you as changes happen in that framework. So if you want to use a framework, it would be really nice to pick one that is small, replaceable, and understandable. I use the [Raj framework](https://jew.ski/raj/) (I also made it); it fits in the size of a tweet. Ultimately if you don't have a framework, you will make your own in your code. That's not necessarily bad, but it is very unlikely it is going to be good if it is built as an ad-hoc after-thought. I did like the speaker's distinction of framework vs pattern vs library, and how the way of doing things doesn't get much attention compared to the concrete tools. With a framework as small as Raj, following the prescribed patterns is very much the larger part of working in the framework.
`'jQuery' is not defined no-undef` is not an exception, it's just ESLint warning. jQuery is a global, which means that ESLint doesn't see it's declaration. You can check [here](https://stackoverflow.com/questions/39510736/eslint-dollar-is-not-defined-no-undef) how to get rid of the warning.
VSCode, and by far at that.
Thought you tried to avoid the js word since Oracle owns it. Opened up and I see JerryScript
Lol, you all know this is true knock it off
thx
I'm still trying to figure out what the `eet` keyword does...
Gulp-babel is a gulp plugin that allows you to just pipe Babel into your gulp task. This means you basically have 2 lines of code in your gulpfile taking care of transpiling.
Good question - didn’t think about it when I wrote this. Probably could have. To be honest though - how would this ever be used in a way that it would incur any actual performance problems? It’s a library for one-off time constants, not hot path stuff.
maybe you need spectacles 
It will never really be an issue. I only mentioned it because the github claims 'blazing fast' when it could be made faster trivially. 
No it says `eet`
Bhai tujhe chasme chaiye tera specs se kaam ni chalega
Oooooh I see. Thanks for the info!
Oh btw I know JS is not the same as Java I just used the two interchangeably
First of all, Java is not related to Javascript. You might want to resubmit.
It also claims Y2K Compliant ;\-\) Thanks for the tip \- but yeah \- PR welcome!
Aight. 
Please don't - remember, Java is to JavaScript as Pain is to Painting, or Ham is to Hamster.
Especially when you’re working on a team, with a deadline, and management expecting results. Good luck selling everyone on vanilla javascript there
What's the connection between the names, then?
Hey! I just built this GLSL editor using StencilJS and THREE.js. I tend to build quite a lot of Shaders and use them in my Web development and game development projects. I've used ShaderToy, and a few other Web apps, but I find they don't quite do the job I need. This initially started off as a tool for myself to use, but after showing it to a few friends they were keen to have it too, so I've polished it up (a bit) and deployed it to Heroku. If there's interest, I'll keep developing it because I've got a ton of ideas for improvement. If you can think of any features you'd like, or any bugs you spot, please let me know! Cheers
My bad, licence file added :)
Any help would be greatly appreciated :) Would be interested to know why you couldn't use it with Jekyll?
Any feedback and examples of usage would be great.
Marketing.
Great information on abstract syntax trees. I had a small amount of knowledge on AST's beforehand but seeing examples of them really makes it easy to understand. 
I’m always interested in how programming works. I love knowing more about machine language and deeper things like logic gate. This is a good way to learn how everything in Computer works. Eg: how computer add numbers
I've been working on a[ platform for serial fiction] (http://serialized.herokuapp.com/users) (be sure to view in http for now, and[ here's the repo](https://github.com/paradoxinversion/serialized-api)) and wrote[ an article about setting up a barebones react app](https://medium.com/@JedaiSaboteur/creating-a-react-app-from-scratch-f3c693b84658). I'd love to know what ya'll think!
Just [polyfill](https://www.npmjs.com/package/whatwg-fetch) it
Because anyone can't really sue anyone over message board interpretations of the law. 
It's viable. You'll just end up writing your own framework.
 so you saying i should code it like this function reload(){ xmlhttp=new XMLHttpRequest(); xmlhttp.onreadystatechange=function(){ if(xmlhttp.readyState==4&amp;&amp;xmlhttp.status==200){ document.getElementById('adiv').innerHTML=xmlhttp.responseText; } } xmlhttp.open('GET','showmaincomment.php', true); xmlhttp.send(); }
For that matter, why not just do a straight forward function call: const i = tp('HALF AN HOUR'); The use of proxies seems less like good engineering and more like the you just learned a new feature and looking for an excuse to use it.
sure could! What's wrong with that learning and using new features though?
Javascript has real classes built on top of prototypes. Just use what makes sense in the situation. Use classes and objects to organize your data. Use methods and functions to interact with it. If you try to strictly follow a paradigm, you're gonna have a bad time. With the rise of declarative component oriented front-end frameworks, I'd recommend becoming familiar with some functional/reactive programming concepts, as they are used in a lot of real-world web apps. Just don't use classical inheritance too much. That shit turns into a mess real quick.
Is there a reason you can't use plugins/extensions, or am I misunderstanding that? If you can work with those, VSCode with the Javascript and Typescript Intellisense extension has worked very well for me.
&gt; and I have basically started to view the use of a class as suspicious My personal strategy is to ask myself "could I do this with a function" before I even consider using a class. Classes just add more state and a larger API surface, and both of those make code harder to reason about and debug.
What you're asking for is a larger scope of knowledge than you probably realize. You'll have to get Nginx running on a web server through whoever. I personally recommend AWS. Then you'll want to set up something like pm2 to ensure your service will continue running even if it crashes, as it will reboot. Then you set up Nginx to proxy calls to your domain to the port you're running the service on. There are other steps involving static IPs and security and such if this will be in production. 
I had this question last week. This is the solution I went with: https://youtu.be/kR06NoSzAXY
Is it a gem? Then it’s not immediately available to me yet but could be fixed
ASTs are definitely really cool, and it's awesome to see a breakdown like this for JS/Babel (I knew Babel (et. al.) used ASTs to accomplish a lot of what they due, but it was still mostly a black box to me so I really liked this article). If you're interested in seeing some other cool use of ASTs, I'd recommend just glancing through how a large part of metaprogramming in Elixir is done [through modifying the code's AST](https://elixir-lang.org/getting-started/meta/quote-and-unquote.html). Discovering that was what really made me realize how cool ASTs are and actually understand them more than just being able to parrot the definition of what an AST is. Definitely one of my favorite features of Elixir and I don't think many other languages have the kind of first class support for directly modifying a programs AST like that which is cool.
I know you've already had your question answered, but I think it's worth noting that using CSS classes to modify the appearance and using JS to manipulate the classes is a more "proper" way to achieve something like this: https://jsfiddle.net/0n1mg93t/3/ 
TIP: explore functional programming. It's way more natural in JS than it is in Python, so using it will make you notice 'the good parts' of JS, realizing that Python - as a language, not as a community - doesn't have that much to offer, making the transition smoother.
Thanks, checking this out now. Is there any case in your opinion where it would be better to use another approach? (For example, creating an object populated with several synths, and calling the next available one based on an "active" status boolean.)
yeah, I'd like to really give the mobile experience more love. It really works better on desktop.
As someone who has gone through multiple Oracle rectal exams / license audits - fuck them and fuck them going in dry. They don’t even enforce their so-called licensing in a consistent and across-the-board manner. They fluctuate based on the day or hour. This of course is why they’ve been sued endlessly for being so utterly shite about the process. Look for some of the legal cases brought by Mars Inc (who has a *nine-figure* annual support and licensing cost with Oracle) . Very interesting stuff. I would never use Oracle for ERP. I’d use Microsoft or SAP (yea I know) or roll my own before Oracle. 
We have different definitions of 'viable' then. I'd rather not reinvent React.
&gt; This is the idea behind functional programming! Get rid of classes and class methods and pass around pure functions instead. The two are not mutually exclusive. Class methods can be pure too.
Update that with a comment that more accurately describes what really happens! Anything after `//` will be ignored by the JavaScript engine.
Excellent explanation that even I understood. Thanks for the help and keeping it in layman’s terms
After some digging I found a solution, https://github.com/overviewer/Minecraft-Overviewer/issues/1308#issuecomment-228310624 Turns out I need to get an API key from Google, which is fortunately free and easy to grab. https://developers.google.com/maps/documentation/javascript/get-api-key After inserting that key into the html file, it worked! I am still not sure why a domain makes a difference but oh well.
It looks like that's exactly what a PolySynth does... to quote the readme... &gt;Tone.PolySynth will turn any of the synthesizers into a polyphonic synthesizer by producing multiple copies of a synth and then handling the triggering of attacks and releases on those synth voices. Tone.PolySynth is not a synth by itself, but just a vessel for constructing multiple voices of any of the other synthesizer types. The only advantage of handling it yourself is that you could use different waveforms, envelopes etc. for each voice. (An un-damped piano, for instance, has a longer sustain on the lower strings than the upper ones, so you could emulate effects like that.)
I have to admit that I clearly dont understand how to make this work (I've never learned how to code in javascript). How am I supposed to run your code ?
Agree, that font is called [Operator Mono](https://www.typography.com/fonts/operator/styles/), and I absolutely hate it.
try just doing display block/none and see if it works like you'd expect instead of fading. If it does, maybe try just toggling a class and using css transitions
I use both for work. If I could sum up the major conceptual difference between them I'd say Python is uniform and predictable, JavaScript is expressive and nimble. So going into JS don't expect a rigid "one way to do it" kind of scenario. This means you'll encounter code created by different people that might look like completely different languages. This is mostly superficial as the syntax of the language isn't inconsistent, it's just extremely versatile. So for JS more than other languages I think it's important to learn patterns. Just googling I found this: https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e and I'm sure there are many other resources online to help familiarize you with JS patterns. Although this may seem tedious at first, I guarantee by the time you've become comfortable with the diversity of expressive programming that you can achieve with JS you'll realize how powerful it makes it. This is why JS performs very well as a functional language building powerful UI with React or Angular and can easily jump to the server and build super powerful high concurrency back-ends for almost any application.
Thanks. This looks like a pretty elegant solution. I'll try both tomorrow and see which best fits my application.
This is my first attempt at writing something JS related. Hopefully, someone might find this just a bit useful. If there are any major issues please notify me and I'll edit the text ASAP. Thanks!
Check out Brad's videos on gulp those helped me alot with getting gulp working. https://youtu.be/1rw9MfIleEg https://youtu.be/rmXVmfx3rNo Once you understand how to set it up it's super easy to add things in like gulp-babel. In my opinion it's much easier to set up than webpack and better for smaller projects. That said I would still recommend webpack for big projects.
Hey, earthbound666, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Parcel is a joy to use when starting new projects— most of the time things just work™. That said, I've had to switch a few projects back from Parcel to Webpack (which has also gotten considerably simpler in the 4.0 release). For example, Parcel doesn't currently support the [latest version of Babel](https://github.com/parcel-bundler/parcel/issues/868) (7.0), nor [multiple entry points](https://github.com/parcel-bundler/parcel/issues/189). 
I started using it and really didn't like it at first then for some reason after an hour or so I started to love it. It grows on you I think. There's something more "readable" about playful fonts like Operator Mono and Monaco that make writing code more enjoyable
Nope. Let's fucking *stop* with the god damned churn for little tangible benefit. We're never going to get anywhere if we just spend all this fucking time rebuilding existing infrastructure instead of investing in making it better. Grow the fuck up JS community.
I wasn't suggesting you actually write your own framework in the sake of writing vanilla javascript. I was poking fun at the idea of using vanilla javascript because you end up with a buggy home brewed framework with no documentation (which most people wouldn't call "vanilla javascript").
Aha, awesome, thanks for clarifying! As perhaps you can tell, I'm a relatively new developer (a hobbyist). I'm finding the Tone docs a little perplexing - wondering if you have any suggestions about how to approach learning it.
Parcel, like Rollup, is only really fitting for projects that fit its exact use-case. They're definitely both awesome and really simple to work with if they're all you need, but webpack still destroys them when you need to add a lot of plugins, transpilers, etc.
WebStorm is free to anyone with a student email.
Without looking at any code, that error is usually the result of too much recursion. Either that or there's a significant memory leak in the program somewhere
I'm afraid this is the first time I've ever seen tone.js, but it looks damn comprehensive, and I'm sure the docs could seem a bit daunting, especially if you're new to the world of audio synthesis. I'd maybe suggest either looking around for a simpler library and playing around with that for a while before coming back to tone, or, if you really want to jump into the deep end, then there's plenty of example code there. Take those, read through carefully, hack them about a bit to do more of what you want, and once you've got a feel of how all the bits fit together, then the docs should make a bit more sense.
Rollup is nice for libraries, imo. Webpack is good for applications.
The files are IN the computer!
Hey, thanks for reading. For this, I used `AES-256-CBC`. My understanding of HMAC was that is not meant to increase the strength of the encryption but rather it was basically a hash of the cipher text that is sent along with it to ensure that the cipher text hasn't changed and that it was sent from the person you think it was. Do you have any recommended reading on this particular attack? Cryptography is a new hobby of mine, so any pointers would be much appreciated.
There's a reason that the large, opinionated frameworks are popular in the enterprise world. In that world, teams are largeprojects are long-lived, developer turnover happens, most of the lifetime of a project is spent on maintenance and fixes. The value proposition of big frameworks is that they make a lot of decisions for you, like what libraries to use to solve common problems and how to structure the project. In large projects with large team, each decisions made for you is a decision that won't get bogged down in bike-shedding and won't need to be communicated and justified to the rest of the team. The downside is overhead and bloat. It's a tradeoff. But in the enterprise world, the trade-off is often worth it. There's just no easy way to develop large projects with large teams.
Basically, yes. Just to show how crazy this all was: Microsoft actually introduced AJAX to its IE5 web browser in 1999. They allowed access to this "advanced" feature via an external library, which was loaded into the browser via an ActiveX extension; that's why you had to use `ActiveXObject()`. Netscape saw the utility in this and added it *natively* to their Navigator browser, via the global `XMLHttpRequest` object. Microsoft continued to update this feature, producing newer ActiveX object names, but never made it native. So it was very common to see this in common use: function getXHR() { var xhr = null; if (window.ActiveXObject) { try { xhr = new ActiveXObject('Msxml2.XMLHTTP'); } catch (err) { xhr = new ActiveXObject('Microsoft.XMLHTTP'); } } else if (window.XMLHttpRequest) { xhr = new XMLHttpRequest(); } return xhr; } xhr = getXHR(); if (xhr) { xhr.onreadystatechange = function () { /* response handler */ } xhr.open('GET', url); xhr.send(); } Again, this was very cargo-cultish code. But it was standard behaviour until IE7 was considered "dead"
Flottflott and Firacode make a nice alternative
Why should I use parcel over webpack?
Jquery does work just fine.
Can confirm. I use and enjoy Parcel.
Yes, but it doesn’t mean you can’t learn something new. 
But it's not like a simple webpack config is hard to set up. I guess I don't see the purpose of using some tool to save a 5 minute config setup.
what was the motivation for the serial fiction? 
self-hosted, Netflix-like React app made for streaming https://github.com/ridhwaans/homehost
Hi, this is a noob question: why we need a bundler?
Bundler? I hardly even know her!
How many dependencies do you need to manage to get webpack to work? I think when it’s possible to just use parcel, instead of 20 different loaders and other webpack related dependencies.
you don't. but it does allow for some more advanced techniques while developing front end applications * cross compile ES2017 to es5 - lets you use newer JS features (you don't need a bundler to do this but it's a nice thing to have) * combine multiple css files that are imported directly into each component that needs it - helps with maintenance of apps as you can easily find / edit or even delete related css (or whatever other related content you have) without needing to figure out what it is first * compile time checking - find lots of bugs automatically * never forget to minify css/js/images again. * automatically remove code that isn't being used - results in smaller file sizes.
What does that have to do with bundlers?
This is what i wish i knew. I want to add that most bundlers include a **live development server** which will automatically compile and update the DOM when you change a file that's in the watched directory. No need to save (and bundle) and refres
Yeah man. I think browserify provides a bunch of cool stuff, including the best polyfill for NodeJS crypto module.
Why is it that way?
I like the idea that 'this' is just a parameter. Would probably simplify a lot of learning for people. But 'this' is definitely more than that. For one, it can only be an object (or undefined too?). Secondly, it depends on the context a lot and it's quite easy to lose that parameter if you don't preserve the context sometimes. Not trying to defend the author, but you gotta admit it's a finicky kind of parameter.
They have different purposes... 
its in the article.
Tried it too , was great but indeed it lakes a few things 
'Strong opinions loosely held'.
Thanks for the feedback. Of course typescript is a lot more powerful but this comment-style approach is a nice way to slowly get into typescript!
Isn't parcel a webpack wrapper which bundles some default config under the hood as well? Also most wide spread frameworks already have configs/generators out of the box
https://watchandcode.com/p/practical-javascript I recommend starting there
That means that your selector was wrong - no such element exists at the time the event was triggered.
I do not understand, I new in js and I learn about stripe from this [https://www.youtube.com/watch?v=56GYV7Jj\-uk&amp;list=LL98P9YN\_9P\-ATVwohsekPFA&amp;index=17&amp;t=0s](https://www.youtube.com/watch?v=56GYV7Jj-uk&amp;list=LL98P9YN_9P-ATVwohsekPFA&amp;index=17&amp;t=0s)
That isn't true. Webpack does all the things Gulp was supposed to do. Both build bundles in one way or another. Webpack does it automatically by AST analysis, Gulp does it by concatenation. 
If you don't know Javascript, you'll have a hard time writing code in Javascript.
I understand, I want to learn it in the future but I wanted to implement this stripe 
If it were me, I would stay away from setting up a system that involves processing clients' money until I had at least some idea of what I'm doing. That's not the sort of thing you can afford to mess up on.
It looks like you have just named the pageURL as page? Try just naming it's pageURL see if it returns a response. 
Thanks men, exactly what I needed. New problem now (I guess its nearly nothing), I would like to set everything in a loop so I can get the URL of all articles of the blog. But I cant do it because of the "const", what can I use instead ? I thought about strings but I dont know how it works 
I had good luck doing the same with this Chrome extension the other day: https://github.com/tantalor/fb-photo-meta
@tomhooijenga We can use set object to implement this but I used Array instead of Set because array's give more feel of a table instead of Set
Content to fluff ratio of this comment: 0.0. The aim of this blog post was not to praise the technical merits of Parcel. Instead, it is about the dangerous, conservative mindset preventing you from even trying it out. *This blog post was not about Parcel*.
Oh.. Sorry for that.. Yes you can say that.
Mostly because I really like the format, and I haven't seen a platform dedicated specifically to serial fiction so I figured I'd take a crack at it.
What a useless argument. Literally everything just works if your use case fits its expectations. LMAO
Point stands that there is no deps to manage and configuration to be done when using a preset giving the same results as Parcel \(but giving a lot more flexibility if you'd need it in the future\).
Don't worry. You'll get there eventually.
Does this support deep nested form sections ( arrays of field sets for example?) 
Yeah. This implementation isn't good. If you view the demo on a phone I say there for 15 seconds looking at blurry images thinking the site broke because it was fetxhingassive numbers of images in the background. I don't know about you but I honestly thought an exception was thrown and something broke until all imges just popped in and there was no more lazy loading. They all were there even when I scrolled super fast so I don't think anything got lazyloaded.
&gt; For one, it can only be an object (or undefined too?). It can be anything. `call`, `apply`, each `bind` let you specify whatever you want to for context, object or primitive. In strict mode, primitive methods also don't box `this` into an object. &gt; it depends on the context a lot and it's quite easy to lose that parameter if you don't preserve the context sometimes The parameter isn't lost so much as set to something you might not want given the rules that define it's behavior. `this` is still there, and still exists as in input to the function, just like every other parameter (other parameters also dependent on how the function was called).
Asking real questions here
I sea what you did there!
It's useful for quick static sites but "zero-config" also restricts what you can do with it. I have used it on 3 projects so far (one had to be switched to webpack). It is a nice tool when appropriate.
I tried lot of IDE’s for different languages and my conclusion is, use IDE’s for compiled language (Java, C#, C++ etc...) and plugginable text editor’s for scripting languages. Webstorm is, from my experiences, far away behind VS code and Atom. Vs code is now really powerful and has a lot, like a looooot of plugins to satisfy your needs and I’m pretty sure that if you need specials plugins for your needs, webstorm won’t have it either
As a type system junkie forced into the JavaScript ecosystem, Parcel is a godsend. I can use TypeScript and npm without writing any config. I can definitely see the limitations but Parcel is joy to use for simpler websites.
I guess angular-cli fits the definition of a bundler but I never thought about it before. Do you know if there's any reason to use anything else while you have ng? 
Practical guidance if ever there was. Thanks!
Yes, but only if you use VS Code. I doubt that other IDEs provide this functionalities. Besides, if you'd like to define some interfaces and whatnot, I don't think that's possible just via comments, so you'll need to go full typescript there. But for some basic small things, it's perfect. I use it already and so far it provides just what I need.
I wish webpack would just come with sensible defaults
I mean if you’re ok with 20% larger production files than Webpack then by all means use parcel.js. Rollup.js reigns supreme in this saga imo. 
Nowadays you can produce a very sufficient app with Rollup.js. This stigma that it’s only good for libraries is very outdated. 
1.7 has official support.
&gt;Webpack: 762 KB &gt;Parcel: 876 KB Is 100 KB really not "a big deal"? I certainly wouldn't add 100 KB of Javascript to any of my projects just because I'm too lazy to set up a Webpack config. 
My I ask why down voted?
I'm guessing you've never built a web application to scale?
Thank you! It was kinda about Parcel, but I used it as an example for identifying the mindset. Sorry about the downvotes :P
Oh wow, thank you! This is awesome! I really appreciate it :)
&gt; scale You keep using that word, I do not think it means what you think it means.
For more complex types and interfaces you can create separate .d.ts files and reference those types with `/// &lt;reference path="./my-types.d.ts"/&gt;` comments in your js sources. A `jsconfig.json` file in your project can help configure how VSCode behaves. You can actually get pretty far without needing to compile anything.
One of the prettier blackjack implementations I've seen: https://kevinleedrum.github.io/vlackjack/
If you install the React dev tools, you’ll be amazed how many sites use React (a lot)
What's more damning about parcel to me is not the features I need that it lacks, but the features I don't need that it has. When my "zero-config" parcel project in fact does need configuration to work around a bug in a black-boxed capability that I never wanted, 30 lines of webpack config doesn't seem that difficult to maintain. "Turned off by default" &gt; "zero config"
Sweet, didn't know that. Is there a documentation for stuff like this?
I'm an atom user, and I know there is a typescript plugin. I'll try this out later to see if atom does it naturally.
Even better, install Wappalyzer and see what websites are using beyond React.
I’m not sure where else I used it.
You’re right. Sorry! I didn’t use the right word there 
In essence, this is what middleware is for: causing some side-effect due to an action!
That's right. But my question had to do with a middleware exporting its *own* actions instead of listening for actions defined elsewhere.
If by `exporting`, you mean `dispatching`, that is what `redux-observables` and most other `async` middleware for redux do!
By exporting, I mean having an es6 export (ie. `export const someAction`) in the file where the middleware is defined. The middleware then matches only this specific action.
I see that now. Ought not talk without drinking my coffee :/ I would say that it isn't better/worse than any other way of containing action creators. I don't do it because I don't reach into my middleware folders for actions and use the duck pattern but there isn't anything inherently wrong with it!
Yeah that's exactly what I used it for. Even does the exif data. 
I am just joking about how much that word is misused. 
https://www.theodinproject.com/ https://github.com/P1xt/p1xt-guides/blob/master/job-ready.md https://github.com/getify/You-Dont-Know-JS http://eloquentjavascript.net/ https://developer.mozilla.org/en-US/docs/Web/JavaScript https://www.youtube.com/user/TechGuyWeb (Traversy Media) https://www.youtube.com/watch?v=Bv_5Zv5c-Ts (Javascript the Weird Parts) https://www.youtube.com/playlist?list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET (The Net Ninja - Javascript tutorials for beginners)
You got me. I put this out here as a quick draft because it is something I've meant to bitch about for a long time, but my time was not on my side when I sat to start writing. My shameless post here to Reddit was also to see if I could unload some of my editing work onto the opinionated voices of the internet, as time is actually never really plentiful for me. The things you've addressed are great points for me to use in beefing the article up soon. I appreciate the input, friend.
I took it to be a bit more tongue in cheek than smug. It’s also pretty dated by the looks of it, from a time when Javascript had fewer responsibilities.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_kekadoya] [Noob here interested in learning Javascript](https://www.reddit.com/r/u_kekadoya/comments/8e4tes/noob_here_interested_in_learning_javascript/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Technically you're right, but I don't recommend it, for the other reasons I mentioned. If you are careful when using classes, there's no reason it couldn't work out well. But in practice, classes tend to get really large. And then you're left with this giant context of garbage that your function cares nothing about. In my opinion, you're better off passing in what you need and only what you need, as per Joe Armstrong's quote. But hey, to each his own!
[watchandcode.com](http://watchandcode.com) should be on the list. In fact, I suggest starting with this one first.
Sure. But if you do actual analysis, you'll see very complex, very large, very demanding sites such as Facebook, Twitter, Netflix, etc use React.
&gt; typically Always. I believe they **have** to hit until 17.
If you're a noob heroku is the easiest
Does that mean React is appropriate for your current project?
Because the range start at zero :) ``` _.range(3) --&gt; [0, 1, 2] --&gt; 3 numbers ```
If you look at all the job listings out there for front end devs, they all want React, Vue or angular. 
Babel is a compiler, not an interpreter. This is especially important considering OP asked if react uses a "special interpreter".
Thanks!!! Also, there is a lot missing from the implementation in this article: - doubling down - dealing from a shoe with multiple decks (mine is set to 6, which is most common) - splitting, and the secondary rules that go along with that such as only getting one hit on split aces - the deal order is wrong, but maybe that's not a big deal for a simulation that isn't actually playable - "penetration", which is how many of the cards are played before reshuffling occurs (marked with a cut card in casinos) 
Khan academy is my favorite for javascript. They use processing.js which helped me a ton because I am a visual learner. You can also pause the talk through videos and edit the code the teacher is typing . Its free.
The moment I remember to check all of my saved comments.
Does it do a better job then Rollup? I doubt it. 
Maybe that is true 
1) Nope, it's still can only be an object. For example, try this: function x() { console.log(typeof this); } x.call("haha got you"); When you pass a primitive, it turns it into a corresponding object. It would be the same as writing `new Object("haha got you")` 2) Yeah but taking away the context out of the equation is wrong, because it is a big part of 'this' keyword, while does not work the same way with parameters.
There's this guy on YouTube Brad Traversy (channel is Traversy Media) which has good tutorials for all sorts of web technologies. If you're truly a noob his udemy course Modern Javascript From the Beginning would be perfect for you. If you don't know udemy.com, check it out. Every few days almost every course goes on sale for about $10, making the site very affordable. Brad's course is *many* hours long, well worth $10. Getting a top-to-bottom series of lessons all from the same person creates a much more cohesive learning experience. One thing I will say about Brad's course is, while it's great for absolute beginners, he doesn't use all the modern goodies as frequently as some other people. After you've learned the basics, investigate the particular topics you're interested in from other people and you'll pick up some more tricks. If you want to go deep after learning the basics, there's another udemy course Javascript: Understanding the Weird Parts that will satisfy your curiosity. I don't think that a fat stack of web links is going to do anything but intimidate you into not learning. Find one source of information that works for you, stick with it until it clicks, then move on to the next thing. Godspeed.
Some places will have a soft-17 rule where a dealer will hit on a soft 17 (where an ace accounts for 11 of that sum); this is typically for single-deck tables.
r/FreeCodeCamp / freecodecamp.com That's where I started. They're not the be-all-end-all, but they are by far the best developer community I've seen, this comming from a guy who had no experience whatsoever in coding and now works full time at a dev shop
Double downed my first hand. Got a 20, opponent got 21.. God do I hate virtual blackjack, it honestly feels like cheating and/or the missing link of 'more random' implementation shines in a card game like this.
delete
I wrote the damn thing, and it crushes me all the time.
r/learnjavascript/
www.letsjavascript.com I'm giving the 1st 3 projects free, pm me if interested
I would recommend The New Boston on YouTube. Hes pretty good!
That's awesome! I also really like to make Reddit apps every once in a while, just to learn a new front end framework or because I'm bored. The fact that you've focused your app to the parts of Reddit for programmers makes it useful and was a neat idea. Well done! The one criticism I have is that you put your data fetching operation in your actions file. Even though you're using redux-thunk, I wouldn't pollute the actions file with operations that aren't action creators.
I know I'm a bit late, but I believe a couple of people mentioned using a for loop as the way to go about this, and I agree that's its the simplest tool to use given what you're trying to accomplish. ```function isUniform(arr) { var first = arr[0]; for (var i = 0; i &lt; arr.length; i++) { if (arr[i] !== first) { console.log("false"); } else { console.log("true"); } } }``` But I'm sure you've figured it out by now!
Oh man, I was working at gambling games company and I pushed the company to create some of the games in HTML5 for mobiles and we were first to bring such games to the market! Sweet memories of fighting with stupid Safari on iOS...
You might get more juice out of it by running locally https://www.npmjs.com/package/jsfuck --- I think it's unlikely that the output would be usable on very large files. Even if the file can be generated, you also need to be able to run the code which is a very large multiple of the length of the original.
I hope you get I'm just doing this for testing limits
That is a serious misuse of the word "stigma"
Thank you! And I've been learning my way through React-Redux patterns so I'm not best yet, I'll take your recommendation and try to improve!
Here's my list of favorite resources for learning JavaScript: https://codebushi.com/learning-javascript-and-react/ 
thank you so much!
thanks!
I really appreciate this! thank you
Thanks man, this is very helpful!
ok some friend suggested it, thank you so much!
sure, thank you!
Thanks a bunch!
wow thanks, this is very helpful! I've got my work cut out for me this spring/summer/fall.
Zero configuration? What? Why? I’m confused. 
I seem to have to manually click save for each picture. It certainly makes the process a lot easier though. Thank you for this.
I find the Mozilla site too in depth for just starting out.
wrong
The mdn is not course to learn programming indeed. Most of the "interested in learning js" thread on this sub should be redirected to /r/learnprogramming 
Take my advice if you want but instead on focusing on js it may be better for your learning process to start with the basics of programming regardless of the language. 
Can you post some code?
Google for "floating point javascript".
If you're speaking about w3school, it is not. MDN is better in every aspect. I'm not going to call you a shill but your recent comments here are speaking for themselves.
Because it's the easiest solution. Yes, if you *get* webpack you can get a repo spun up in mere minutes with webpack, but sometimes you just want to dick around with code and typing in `parcel src/index.js` is too easy to ignore.
MDN is much better to an experienced developer, however I do remember finding it quite verbose and hard to grep when I was a beginner.
Cool man I'm a noob too. I'm simultaneously using Khan Academy, reading a book called "Eloquent JavaScript", and using CodeAcademy. There's also these JavaScript courses on a site called "Udemy" that I've been thinking about purchasing because they look pretty legit and promising.
True, best way to use mdn is to type "mdn something" on google/ddg or using devdocs.io
Surprised no-one has mentioned The Grasshopper app just launched by Google: https://grasshopper.codes/ For the total beginner it’s really good at covering the basics of coding through JavaScript examples. Mobile too.
Better yet, Google "IEEE 754 floating point". That quirk has nothing special to do with Javascript. Any language that implements the IEEE 754 floating point standard has those same issues. People probably just see them more often since there isn't an Integer type in Javascript, and if they wrote the code in another language, they would have used and int instead of a float.
Google Earth engine tutorials are great if your focus is remote sensing
grasshopper aint so good tbh. it confused me more than anything. id stick with mdn, codewars, and a book or two. 
This, a thousand times this. I went through a few of the tutorials and it is really well done. Also, I was skeptical about coding on a phone but they do it in a way that isn't painful at all.
Chrome Dev Tools and Tampermonkey. Make your favorite websites work better for you.
I agree, and I’m a pretty experienced dev. w3schools gets to the point and gives a great quick overview, which is usually all I need. If I want/need an in-depth analysis of the code, then I’ll check mdn, but I usually just need a quick syntax reminder.
Well technically you can't double down on every value either but it's allowed in your demo.
In my opinion, learning JS goes good with some HTML and CSS to go along with that. I suggest the freeCodeCamp Front End Development Certification.
You are looking for : www.javascript.info
heres a direct link https://studio.code.org/projects/applab/9a6x93dGs_YngiNVYl9Ig8S2-1KiDGutVgPCYUWV_6E
Just tried out the plug-in/extension in Atom! Works fine so far with the examples you have provided in your article!
[There's an entire section devoted to complete beginners.](https://developer.mozilla.org/en-US/docs/Learn)
Go be a fireman instead .....it’s less dangerous 
Look at coding math by Keith peiters, it's a YouTube series and it will help you understand how some things that look really complicated can actually be achieved in a few lines of code. Also, it's really fun and incredibly visual so you feel and SEE the progress you are making. Cheers!
I'm on mobile right now, so linking isn't really efficient, but I've had great success with anything produced by Wes Bos. He has some awesome free courses, though I have not done any of his paid ones. He is great at explaining concepts and walking you through engaging examples. Highly recommend! I just recently brushed up on some JS basics to better my ability to work in Angular. Good luck and happy coding! 
unbookmark w3school. Actually, here's a chrome extension that removes it from googling: https://chrome.google.com/webstore/detail/remove-w3schools/gohnadkcefpdhblajddfnhapimpdjkje
Great way to learn javaScript. If you are looking for some good javaScript tutorials must give it a try! Concepts are cleared and all the topics are covered. I loved it!
I would highly recommend Udemy. I like it because all the courses force you to actually install necessary tools/software and write and run your code on your own computer. The teachers always guide you through the process. I always found that using sites that have in-browser editors don't usually walk you through getting everything running on your own computer which is probably the most important part, imo. 
W3Schools has cleaned up their stuff a *lot* in the last few years. I think they've graduated from "shit" to "not great", though they *do* have some good tutorials for absolute beginners. Even [W3Fools](https://www.w3fools.com/) has this to say: &gt;When W3Fools was launched in 2011, the state of documentation for developers was poor. This site documented many content errors and issues with the W3Schools website. The Mozilla Developer Network was around but it did not have much support at the time. &gt;Today, W3Schools has largely resolved these issues and addressed the majority of the undersigned developers' concerns. For many beginners, W3Schools has structured tutorials and playgrounds that offer a decent learning experience. Do keep in mind: a more complete education will certainly include MDN and other reputable resources.
Also get "DevDocs". It's an app that'll allow you to download and search in documentation. Docs are crucial for noobs. ;)
+1 for TraversyMedia, I got my first programming job doing CI after watching his CI videos. 
I also use the duck pattern, but needed a way to dispatch websocket events. So I have a `websocket` middleware, which exports an `emit` action. Whenever it matches this action, it emits through the socket. So instead of the middleware matching specific actions, I dispatch emit in thunks. I'm not sure if it's clear, but it works quite well and is really flexible.
Does the randomness come from JavaScript? Isn’t that one of the bad part of js because it relies on the browser implementation? Or does this guy generate randomness server side?
Can you give me a better example :)? Like real life scenario where this is used and how it should be used by forms.
Hi /u/elhawliali, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/BusinessTalker, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Julliper, For javascript help, please visit /r/LearnJavascript. Thank you!
The basic idea is that every number in Javascript has a 'floating point' component (values after the decimal). So, `28` is really `28.00000000`, etc. Sometimes, when doing match on these, due to a limitation with the computer's precision, the results get thrown off by a small amount. To get around this, usually rather than doing a strict equality comparison (eg, `if (getX() === 28 ) {...}`), you instead test if the two values are within an acceptable distance from each other (eg, `const alpha = 0.001; ...; if (Math.abs(getX() - 28) &lt; alpha) {... }`) It's an annoying limitation, but it's what we have to work with. In your case, you could write a function like this: ``` function isX(value) { var distance = Math.abs(getX() - value); return (distance &lt; 0.0001); } ``` Then in your code, replace lines like `(getX()==174)` with `isX(174)`
Oh good to know, thanks. 
I see. That makes sense. In that case, Sets with the same entries but different insertion order should be considered different, along with with Objects with identical key/value pairs but a different assignment order. Thank you!
Good bot.
I haven't looked at the source but I wouldn't think it would matter too much if the implementation just shuffles a virtual deck (or many in one) a few times.
I build *Video Hub App* http://videohubapp.com/ All Angular, wrapped with Electron (yay node!). Spent the whole week refactoring my node spaghetti code (wrote it before in a hurry with no regard for my future self). Going to release version 1.3.0 this week with 'find similar' and rename file functionality. Woot!
Hey there, I use TypeScript for my primary dev work. Was curious as to your reasons for hating it. What makes you not like it?
looks like it uses the deckofcards.com api with its back-end written in python. import random random.shuffle(deck.stack) [source](https://github.com/crobertsbmw/deckofcards/blob/68b558af19ec352e776bfed10acbb26e0624f45e/deck/views.py#L47) python random isn't cryptographically secure so take from that what you will.
Yup https://threejs.org/
three.js Yes
Three.js Shame there isn't more demand for this skill on the job market (at least where I am).
I've never before thought "I want to write Markdown inside of JavaScript inside of Markdown" before.
That's what I though initially, but I guess I'm still confused. Given a plain Object, does the order of the array returned by Object.entries ever change? It seems to be dependent on insertion order, so I'm confused as to why it's considered irrelevant. Isn't this the same order that is executed when using a for...in loop?
This looks like the php of markdown
I believe “unordered” means order of keys are not guaranteed at all times, just like with plain objects as the only ordered (guaranteed order) entity in JavaScript are arrays and all of its derivatives e.g. unit8array, buffers, strings, etc. (the latter are derivatives in a logical sense)
Threejs cuts out a lot of boilerplate, but presumably you lose some flexibility. https://webglfundamentals.org/ teaches how to do it at lower level, and you only really need to write/copy-paste it once. FWIW, used it to make https://filbs111.github.io/3sphere-explorer/
Okay, that makes sense. Since I've never seen it change I was under the impression that it was static. Thank you! I wasn't aware that `.forEach()` operated like that\- that is very interesting!
This is insane/amazing
Well made and widely used?
Uses `new AsyncFunction` so compiling a malicious readme can eff you up.
I've written doc sites that this would be useful in.
why?
I just meant the syntax to invoke it is like a templating engine
Are there any performance reasons to use maps and sets over arrays/objects?
Regardless of whether that's true or not, that's not productive to the discussion or the question, hence the downvotes.
That is actually what I am trying to do :)
Be careful though. I saw a demo of a three js game posted a few days ago on /r/webdev (https://www.reddit.com/r/webdev/comments/8dqiys/gamedev_with_threejs_on_the_modern_web/). The game is a like a 3D pilot/shooter type thing, but runs VERY slowly. It was basically unplayable because of how slow it ran, and the game wasn't even that complicated. Just because you can make a 3D game in a browser doesn't mean you should...
Ping request could not find host blog.openbloc.fr.
That's why I used "equivalent" instead of equal. But I gotchya
https://youtu.be/4tDniownNd4
Also known as "a Markdown enclave". 
yeah, you could use this to build really large markdown documents really quickly. kinda like components. i like it! i've always wondered why something like this didn't exist for HTML ...
Could this introduce a XSS vulnerability?
Personally, I’d use Unity to make a game for the web. It means it so you can switch to native easily later, or even add in VR (both for web and native). Downside of unity is the licensing if you charge for your game. https://docs.unity3d.com/Manual/webgl-gettingstarted.html
You know about frontmatter, do you?
I'm on mobile right now so I can't backup my claim but I remember reading that the spec defines the order of an object: first all number indices, then the string indices in insertion order. Even if this is not in the spec, you can very well rely on this, as it has been this way for a long time and changing this would break too many sites. 
That isn't an accurate benchmark of three.js though. You can use a well optimized native 3D library but deliver a slow product with it if it is put together with poorly optimized code. The OP even noted they planned to address their performance issues. You can make some [amazing stuff](https://tutorialzine.com/2013/09/20-impressive-examples-for-learning-webgl-with-three-js) with it and get great performance. I wouldn't judge it based off one example from someone learning how to use it.
This is everything that is wrong with JS right now... Fuckers trying to make JS more niche to either get better pay or create jobs that aren't needed... Idiots.
Is this true by specification or by implementation? I remember JS having some enforced ordering not specified in ES standards, meaning it could be subject to change in the future.
Thank you very much! There are a lot of great things done here, but still missing dynamically binding step target. I guess that will come later, because they are still developing it.
Hmm I stand corrected. That F-zero style racing game was pretty smooth.
It might use a *tiny* bit of iteration, but nowhere near as much as iterating the whole set. Sets are generally implemented as a hash table which means you can look up an item just by checking the memory at it's index. The way of generating this index is called a hash, suppose you had some numbers from 1-100000000000000, if you only have a few of them you could just store them in a table based on their last few bits (or digits or anything like that). e.g. You could store by using just the last 4 digits or something: ... 1002 -&gt; 24324231002 ... 3003 -&gt; 10000003003 ... 9845 -&gt; 24343249845 Now if I want to check if number 203432432423423 is in the set, I can just jump straight to memory address 3423 and check if it's there. Obviously this mechanism can have collisions (a good hash method will have less), if you wind up with collisions there's a bunch of different approaches but one of the simplest is to just put an array at each address. This is where the minor iteration might happen. e.g. If we had collisions with our previous: ... 2342 -&gt; 24923432422342, 3423432422342 ... 3243 -&gt; 32432423423243, 8958493853243 ... Now for types that aren't numbers we can generally just convert them to numbers when storing them in the set via some mechanism, for example for objects you can just use the memory address.
It's so ironic! You didn't even read the readme file of the library, it's just precompiles your md file, not actually running any code on other clients!
Markception...
&gt; It would probably be a lot of work to create something like that though. No shit!
Interesting. I'm unfamiliar with how memory is accessed in the system, but it makes sense that a key can be an immediate reference to a given point in memory. Thanks!
It would be pretty good for documentation. Your sample code would execute against your actual library so you get accurate results.
Not really on topic, but I really like that you can `console.table(myMap)` and see all the keys and values in the insertion order in a nice table
WebGL is, I believe, going to become very important in the near future. Browsers and graphics cards are just going to keep getting more capable and WebGL will be super useful for games, VR, modeling and rendering and lots of other random applications like mapping.
I've now updated my post on the feedback given. :)
Two options at least: - GitHub itself, if you're already publishing them somewhere. Any file on GitHub can be accessed with the correct content-type via rawgit.com - Now.sh is also useful as it natively and quickly allows you to publish files https://zeit.co/blog/unlimited-static 
FYI https://github.com/eleme/element-react
Not a student now but I do have that email. Not sure if I am allowed to use it for personal projects or I can install it on work computer.
Hakuna Matata Script
On that topic, see YDKJS, part "types &amp; grammar", ch2 "values" and go for the sub-title "Zeroes". Author probably did not have read that (must read) serie https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**ch2.md** (master → 6f51ed6)](https://github.com/getify/You-Dont-Know-JS/blob/6f51ed6746300f51bc6c930c080b8a7426b7629b/types%20%26%20grammar/ch2.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dxtjvxt.)
Oh nice! I'll give it a read and add the link to the article. :) Thanks!
Many reasons, but one would be that in order to use some object as a key in another object you have to somehow stringify it, which is not always negligible performance wise.
And where te malicious code could come from? 
If that’s what MDN says, then they are wrong. The order in which own properties are iterated is clearly specified: https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys
I mean: the order doesn’t influence the result of `.has()`.
You should not use jsx inside a normal js file, only the other way around.
Indeed! This is the spec link: https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys
Learn OpenGL concepts first. Hit http://learnopengl.org. It’s fantastic!
Great explanation! I had never used sagas before so I wasn’t sure where to start. My question is why would I use this rather than a thunk that dispatches actions asynchronously as I get data?
Sure, it's possible. You could use the https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API to do it. Or use one of the libraries listed on that page to do it easier. 
I have not used thunks, only sagas, but one of the best things is readability. Reading a saga makes the asynchronous code very easy to read (no callback nesting/hell) and intuitive. Also, the ability to use takeEvery vs takeLatest, for example, to cancel previous saga fired by the same action, or how easy it is to use call all([...]) to perform several async calls at once (this also has some complications, though). Again, I have not used thunks before so excuse me if part of what I've written is not relevant or correct.
Oracle does its job as a database pretty well, can’t say that it’s much better or worse than MS SQL, but it’s just flat out a dick towards developers. Incomprehensible error messages, unexplainable behaviors, and length limits on names from the previous century make me want to stay far away from it if I can. 
Wow, you know that frameworks, libraries and such or not something exclusive to webdev right ? If it's popular in all languages, it's maybe because it improves many thin ? 
[removed]
And let’s not even get started on how bad SQL Developer is
[Sounds like ObservableHQ](https://beta.observablehq.com/).
I'd recommend using Canvas.
...have you never heard of templating engines before
Here is a function I have recently written to send the results of ove observable through to another. I use this when I have a function that returns an observable, but inside it calls a callback function, and then gets a set of results from another observable function. ` let obs_through = (source, target) =&gt; { source.on('next', data =&gt; target.raise('next', data)); source.on('error', err =&gt; target.raise('error', err)); source.on('complete', () =&gt; target.raise('complete')); } ` Working with these different function calling mechanisms has led to me writing a few functions to do function conversions or carry out function calls in a variety of ways.
...how do you think e.g. Reddit comments are sent to the server? It's a cool project, yes, but I frankly can't and won't use it for any markdown I didn't write myself. Which kind of defeats the point, since markdown parsers are largely used in editors, etc that *other people* write in. But then again that just makes this a niche project, not necessarily a *bad* one :) 
Data sources: * https://www1.nyc.gov/site/doitt/initiatives/3d-building.page * https://www1.nyc.gov/site/planning/data-maps/open-data/dwn-pluto-mappluto.page Repo: * https://github.com/rolyatmax/nyc-buildings
I'd say mapping is more common than games as an application
It's definitely a niche project. But I just want to be sure everybody understood what this does: you write your markdown file, say: /src/Readme.md. You add a couple of code blocks that you want to interpret, eg. I wanna list the version of every dependency I have in the project but I don't want to change the Readme everytime I update. So I write a little piece of code that returns some markdown code. I launch mmarkdown, or better I add it to the other command I launch on deploy, and generate /Readme.md, which will be exactly like the /src/Readme.md files except for what is in those mmf fenced code blocks. You still write the md file and other people still work on that the same way. I mean, it's probably useless for most, but I imagine some use for it. I guess you don't :) Thank you for your comment! Appreciated :)
To make it so a function which returns an observable will optionally return all the results together in a callback, I use this code: if (callback) { let arr_all = []; obs_result.on('next', data =&gt; arr_all.push(data)); obs_result.on('error', err =&gt; callback(err)); obs_result.on('complete', callback(null, arr_all)); } else { return obs_result; } I could use this as the basis for a function that wraps an observable-only function, checks if the last parameter given is a function, if it is then it treats it as a callback and puts the results into an array to return once the observable is complete.
sometimes this feels like the vuejs subreddit 
You're welcome! Like I said, *niche* is not *bad*. Other people have mentioned it would probably be nice for docs sites and so on. Here's an idea - why don't you turn this into an Express view engine like EJS or ERB? The same way those allow you run and render code in an HTML template, you could have MMarkdown view templates that are preprocessed by your tool, compiled to HTML and then served to clients.
scroll needs to be reversed
Stop spamming this trash 
What if you're in Australia?
I think this was mainly to help reduce duplicate code. There are npm libraries for things like [is thirteen](https://github.com/jezen/is-thirteen), and this is considerably more useful in real world apps.
Do they have "Java Script" trademarked? Because that's what I see in a ton of resumes and from people asking for help with their website.
Do you have existing floor tile images?
Hi /u/PSanma, For javascript help, please visit /r/LearnJavascript. Thank you!
I don't necessarily see much immediate benefit if you're just doing simple AJAX calls. Where thunks really become powerful is the ability to start and advance async logic based on dispatched actions, and the "background thread"-like model of spinning off other sagas to do more work as needed. In my app, we use thunks for complex synchronous logic (checking the store state, determining if an action should be dispatched and what the contents should be) and simple async logic (one-shot AJAX calls with a basic response). We also use sagas for a variety of fairly complex async behaviors.
If that's the case, then the readme should make that a little more apparent at the top where the giant example is.
second looks perfect for me (Not Full JS dev)
Hmm, I can't get this to work in either node.js or the chromium dev console... Isn't this depreciated? I currently use `console.dir(collection, { depth: null, colors: true })` for all my output, but that would be cool if there was another way!
https://medium.com/prod-io/code-splitting-in-react-using-webpack-1aa1014da216
Well, you *should* be able to trust MDN! If you have the time, you may want to file a bug report or similar.
So long as you don't wear white after labor day.
The first one is more readable. The second one might be ok for this specific example, but you're starting to reach a level of cognitive overhead that interferes with comprehension. One you get past 3 nested expressions, it starts becoming a problem, especially when additional consideration is needed for precedence. Again, this example isn't too bad, but in one line you have an arrow function with a ternary with a method call with another arrow function and a subtraction operation. Its starting to get deep, but at least the method call groups the callback/subtraction together that helps separate them providing a clearer visual path for the ternary. The quality of developers you're dealing with can also play a role in your decision. More junior developers without the same level of visual code parsing acuity compared to the more experienced ones are going to have a harder time figuring out these more condensed one-liners. The more verbose versions will help them be able to more easily understand what's going on more quickly. It can also help encourage them not to try to cram everything into one line themselves.
Why did your previous CTO leave? 
check this out - https://medium.com/prod-io/code-splitting-in-react-using-webpack-1aa1014da216
You need to provide some source code for anyone to help you with this.
I like moment.js, but it is too large (64kb). Maybe I just need the common apis, so here comes Day.js.
Haha, very true. I personally never read that Object order was not guaranteed in the MDN, I was going off of what GeneralYouri was saying and had assumed that I just missed that part. What I didn't find there was a rule as to how they were ordered. But I definitely enjoy the explicative nature of the spec.
Lack of time (had his own development company)
I'd say it depends, to a certain point, on the particular case. To be honest, quite probably I wouldn't write this in any of those ways, but not for the style. I wouldn't because it feels weird to me to write a function where I pass a flag which says if the function should or shouldn't do its work. And, yes I understand that "it's just an example" but the point is relevant because if we omit that the second style is clearly quite reasonable, but if the logic was just one but more complex, then I might not like writing it that way. So, again, it depends on the particular case. What's more, if we accept the example as is, I would probably write it like... const fn = (items, isSortable) =&gt; { if (!isSortable) return items; // whatever process... }; Generally, such a clause would be written as a _guard clause_ to return early and only progress to the more elaborate case later.
Oh god it's THAT layout again. Deep breaths, I can deal with this. Just gonna scroll down and if there is any pop-up modal of any kind about "you're a complete thief if you don't register, you already stole X articles from us this decade" I will scream bloody murder at the first person I meet. 
Near duplicate of similar articles. But the fact is, it’s true.
Honestly, I would probably prefer something like: ``` function fn(items, isSortable) { if (isSortable) { return items.sort((a, b) =&gt; a - b); } return items; }; ``` I think having the `function` keyword is a nice visual indicator for top level functions that lets you know right away that what you're looking at is a function.
agreed, string based components trash 
https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem
If you make me scroll horizontally in my editor you're doing it wrong...
I hae been trying to understand the Flux/Redux technologies, and it seems like there are two main benifits. Unidirectional flow handled by a dispatcher helps prevent state de-synchronization problems when you have ayschronous actions changing one state. The 'time-travel' thing is a state machine that allows you to undo/redo changes to a complex state. The trouble is the real world scenario where I need those things. Are these problems more prevalent than I am recognizing? Why would a normal app need this stuff?
To take a different route, any reason you need either gulp or webpack? I would always approach a problem using the simplest solution. Maybe you could just do something like `npm run compile`, which manually runs babel. If you're looking for a watch solution, maybe that combined with [npm-watch](https://www.npmjs.com/package/npm-watch) will do the trick. If you really want gulp, it's not much different from using it in 2017, or maybe even 2016. The thing with gulp is that it's meant to not be a single-path solution, so that's why you'll see different tutorials producing different solutions. The basic pattern in gulp is something like 1. get source, 2. transform it, 3. set destination for transform. That's been how gulp works since it's inception, iirc.
Yep, works fine on Firefox!
Maybe I'm an idiot, but I don't see any real life use for JS generators. And yield usage confuses me with ruby yield... Can someone explain to me why to use JS generators? Sample code in the article is useless, sorry.
Because other languages are different ? I was doing java just yesterday , tried to uses an apache library for async http request ( which is not supported by java natively ) the documentation didn't even stated you needed 5 other manual dependancy... Maven , Pip and Composer have strictly the same issue. The biggest difference is that PHP , Python , Java have larger API surface while JS doesn't have something "isArray" built in . You end up dowloading 600 packages for one framework like Firebase . Also JS ecosystem has pretty much doubled every year for the past years the amount of libraries / framework we went through during the last years has nothing to be compared with the others languages due to build tools and the versatility of JS that runs of far more platform today than others.
It seems that your both using thunks and sagas. Did you encounter any problems mixing them?
There's also [date-fns](https://date-fns.org/) if you're looking for a more functional approach to working with dates in JS.
Array.isArray has existed for a decade. What are you talking about?
Why would they open their APIs when they can get kickbacks from Fandango?
TypeORM
Yes I know, I'll definitely set up constrains on my database first but I'd like to use data models to return error messages back to front end.
Shit that's all on one line is *not* "easy to read"
Looks really promising. I haven't written anything in TS yet. But this should work with regular ES just fine so I'm gonna stick to that and next time I'll use it as a good opportunity to try out TS.
Nexus has good support for an npm repo. I suggest you set up a scope so you can set up the custom registry only for these particular scoped packages.
Hi, you can use Objection.js: http://vincit.github.io/objection.js/#introduction
Nope, it's totally fine. We've got sagas being triggered from basic actions being dispatched, and on occasion, we've even got sagas `put()`-ing thunks.
Hey Mark, love the newsletter! I found that treating redux actions as a sort of event emitter and having an observable middleware (rxjs with redux-observable) really makes life easy for async stuff. Have you ever tried that out, and if you did, what did you find that it couldn't do?
Argh, I think I was bamboozled by the Reddit redesign where it lets you use Markdown now. [This](https://i.imgur.com/z6rh3Yh.png) is what it looks like for me, I guess it doesn't format it for people who aren't using the new design. I edited my comment above to use the old formatting stuff, I think it should look okay now.
I definitely haven't ever used redux-observable myself. I've done a _little_ bit of that with sagas, but not much. That said, I was talking with Ilya Gelman over the weekend (author of "The Complete Redux Book"), and he said they've been experimenting with putting _all_ app logic into middleware, and communicating with them via dispatched actions. Same kind of idea, just with purpose-built middleware instead.
I can nitpick too! I was professionally writing JavaScript in 2008. Ten years ago Array.isArray did not exist, it was added in the 5.1 standard in 2011. Even if it did exist in some browsers, you would need to pollyfill it to support IE6 that had about 15% market share at the time.
I have used redux saga in the past and can not recommend it at all: - bad testability (tests mirror code and not functionality) - generators are hard to read (I still love them but kiss) - Thunks are easier to combine / made me build clearer APIs 
Okay I thought it was introduced in ECMAScript 5 which would have been ratified around 2009. And I already commented on the polyfill having a valid use case with older apps. I could see why legacy codebases still pull that specific module. It still negates the notion that JavaScript doesn't have something as simple as array detection in 2018.
Using that dog in the burning house comic is so fucking unoriginal 
Sounds like someone complaining about things they have control over. If you don't want to use unnecessary packages, don't install them. Sure there are things out there that require a lot of dependencies, but what languages doesn't have that?
Sometimes I wonder if people realize that you can share code without publishing a library. Github Gists exist (and Codepen, and JSFiddle, and good old Pastebin) (The cynical side of me says that those methods don't give that sweet, sweet rush of looking at download metrics) 
Your menu variable is actually what's called a map or a dictionary. They're a very powerful datatype. Dictionaries are kind of like a row of locked mailboxes. You can add or remove mailboxes, but to access or modify certain mailboxes you need the key. The dot notation is just how your normal OOP objects work. An object is just something that stores information \(variables\) and can be modified upon \(methods\).
use brackets for accessing properties with a variable, dots otherwise `$store.state.users[userId]`
Yes, and what I'm saying is that this is at least more useful that isThirteen. There isn't a specific community guide on what is worthy of npm or not.
This list is skipping about 50 other must-use technologies. I remember when you weren't a serious professional unless you use Ember or Meteor? Whatever productivity you lose by not using those tools is more than saved by not having to waste time accommodating a trendy new platform every three months or so.
Very interesting! Do you have a background in linguistics, or just your interest? Are you using third-party APIs for all of the data (congregations etc), or does the app include giant files full of all this data?
I agree about using Array.isArray in 2018. I wasn't trying to make a technical point per se. I was hoping to show that nitpicking little technical details isn't really productive. People rarely have a positive response when they are told they are wrong, especially when the correction isn't totally correct.
[Devhints](https://devhints.io/) has a pretty big selection (ES6, React, testing suites). Hopefully that gets you headed in the right direction.
Of course it is. That's exactly what we like about it. 
Or for any key containing spaces, dashes, and such. `$store.state.menu['some-key']`
Another user (not the OP) asked in a private message for additional links or sources that show true composition, so I'm re-posting here the same reply that I sent to that person. ---- &gt; Do you have any additional links or sources that show true composition? The first and easiest is wikipedia. The [Composition\_over\_inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance) article describes composition as containing instances, and the [Has-a](https://en.wikipedia.org/wiki/Has-a) article describes it as having a member field of an object. The Python community [describes composition](https://web.archive.org/web/20170707220607/https://learnpythonthehardway.org/book/ex44.html) that same way. And the ActionScript community (ActionScript is an ECMAScript language) [describes composition](http://www.adobe.com/devnet/actionscript/learning/oop-concepts/composition-and-aggregation.html) that same way. And Herb Sutter (the #2 guy in the C++ community) [describes composition](http://www.artima.com/cppsource/codestandards3.html) that same way. And JavaScript-specific explanations that pre-date Eric Elliott's and MPJ's influence also [describes composition](https://stackoverflow.com/a/8696786/1698612) the same way. And most importantly, the GoF book -- where the rule favor composition over inheritance comes from -- describes object composition as "objects acquiring references to other objects," and their code samples match all the previous descriptions. [https://i.imgur.com/xDHUGYc.png](https://i.imgur.com/xDHUGYc.png) ---- /u/rkotze
Hi /u/Maynie726, For javascript help, please visit /r/LearnJavascript. Thank you!
It seems canvas will be the way after I manage to code the dungeon generator. I'll have to start studying. Thank you!
Thank you for the reply! While I understand the idea, I have no idea how to implement it yet due to my lack of experience with js, or any other language for that matter. It seems I'll have to start studying it soon now that I know it's possible with canvas, and hope whatever course I choose will teach me enough to apply this knowledge. Thanks again!
There is a fourth one: container.insertAdjacentHTML('beforeEnd', '&lt;div&gt;&lt;/div&gt;') which is my favorite replacement of innerHTML.
I certainly do. I have full rooms ready to be used and could break down the base floors to have well over 600 individual tiles with different levels of wear. Any ideas?
*Didn't have something like isArray until ES5 while others always had much larger API surface and often emulated. Because JS was intented for the browser. Ultimately this typo doesn't even matter at this point , you will still download those 400 npm packages in order to for polyfill and have code reusability for a any sort of popular framework like express or angular.
My apologies kenman, I have replied to the kind people who commented, but I will go ahead and post there instead. Cheers!
Yep, also in favor of the return-early style! You get all your checks done in the beginning, then whatever follows is what the function is actually about. Super clear. But if the logic is simple (and not nested) like in this case, I'm also perfectly fine with using operators like `&amp;&amp;`, `||` or `a ? a : b`.
isn't this the same guy that re-wrote the history of programming languages blog post but made it less funny? i recognize that avatar
hm, which engines allow composition via components? the two i’m most familiar with don’t seem to support that (pug and jinja)
Pug (like most template engines) has these little known features called "partials" and "mixins" :P Hell, it would probably be easier to list the (popular) templating engines that *don't* let you reuse static/dynamic snippets
Here's a simple way to think about it: 1. Property access uses square-brackets in JS. menu["burger"], menu["fries"], array[0], etc., are all examples of property access. 2. Dot notation is just a shortcut for square-bracket notation. 3. Prefer dot notation to square-bracket location when your property is a valid identifier and known statically (e.g. not computed or passed into a function). Per point 3, most of your code will use dot notation. The reason for this is that dot notation is easier to read and has better support in tooling (e.g. you get member completion in your editor).
My research is on automatic text summarization, so I have some background on linguistics \(not so much though, still learning\). No third\-party API's are used \(the data needed for conjugation is stored inside the file\) so the program can be used off\-line \(fully user\-side\). I tried to store the minimum data as possible, and using rules if applicable. For example, in English irregular verbs: Instead of using "acknow": \["acknew", "acknown"\], I use "acknow": \["acknew", "1n"\] \(1: means infinitive\) "choose": \["chose", "2n"\] instead of "choose": \["chose", "chosen"\] \(2: means past\) This will minimize the amount of data in the file \(eng.morpho.js is just 31.3 KB without minifying\). In French, mostly, they use pattern verbs conjugation \(some verbs with full conjugation, and a list of similar verbs\). I used rules instead \(found on Wikipedia\). Currently, There are Arabic which is my native language, French which is my first foreign language, English \(second\) and Japanese which I learn by myself.
Dot notation is just shorthand for putting brackets with quotes. .shorthand is [«shorthand»], a literal string. In brackets you can use any variable, like [X] 
A normal app does not need this. Flux is a pattern for building applications, but there are many other perfectly fine patterns that work in the same use case. Redux on its own only helps with understanding changes in state and making this information readily available, [but you don’t need it, and the creator agrees.](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367) The issues it helps with are much more prevalent in bigger applications that have to pass state within props to their children, issues that complicate the handling of state. [Here’s a nice little list of reasons to use redux.](https://medium.com/@fastphrase/when-to-use-redux-f0aa70b5b1e2) Redux just provides a nice way of implementing a Flux architecture without necessarily having to deal with its intricacies and formalities directly, and there [are alternatives](https://medium.com/@machnicki/why-redux-is-not-so-easy-some-alternatives-24816d5ad22d). Its just a mental model meant to help in understanding how data moves in your app. Complex apps presumably have much more data to handle, such as API calls from many different services and larger payloads. And the schemas for this data can also grow in complexity. As complexity grows, so does maintainability; the code becomes harder to read or change. Flux describes a pattern where this interaction between the server and your application follows a one-way path, where all forms of input can be processed and interpreted to form the end result of a view. It helps in developing code that you can now maintain and debug more easily, since the model provides a more clear understanding of how your data is processed, and there are clear bounds on where state is ever changing. But it is never necessary, it only serves as a tool. The cases where it’s useful are better understood once you run into them in the wild. If your state management is growing harder to trace and you dont know how data is being changed without extra digging, then Flux can help, and Redux is a nice way to get started. 
Hi /u/dyf360, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
 function getPrice(itemName, menu) { var itemPrice = menu[itemName]; return itemPrice; } If you rewrote this using dot notation, it would like `var itemPrice = menu.itemName;` Except that this is asking for the property with key "itemName" of the menu object. There isn't such a property. You use `menu[itemName]` because you don't know what `itemName` will be; it could be "burger", or "coke", etc... Bracket notation allows you to use a VARIABLE to look up object properties. Dot notation cannot do this. Try it for yourself.
Hi /u/neurofluxation, please refrain from personal attacks. Thanks.
There’s a time and a place for arrow functions especially when operating within a select scope. Typically I try and keep with: function func(someParam){} Instead of: var func = (someParam) =&gt; {} I believe as long as you maintain consistency it’s really up to what you’re comfortable with.
You can attach data to a Dom node using a data-* attribute, or output a global var in a script (not super recommended)
Can you give an example of what you're trying to do?
Yes, but moment.js and day.js' API is more friendly, and easy to read, I think.
Killed my Chrome with default settings.
&gt; I allow myself to mutate the model. But if you want to you can avoid it very easily. I’m not sure you understand what unidirectional data flow means. Also this post is a year and a half old?
IBM also enslaves their customers. "Buy our stuff, and then we'll sell you support for the clusterfuck forever!" I've now worked in 3 different huge corporations that have the whole damn enterprise sharing a DB2 instance for testing because it costs some ungodly amount of money to spin up another one. 50+ teams running automated tests and whatnot with no real collision strategy is just a nightmare. Literally thousands of tables, of course all with names like CLNTDTLS because... well, 30 years ago, we had to use 8 characters. Why change now?
ItemName is a variable. If you try to use dot notation, menu.itemName, it’s going to look for literally a menu item called “itemName” but it doesn’t exist. You need that variable to transform into “burger” so that it will look for menu.burger. It’s impossible to do with dot notation. You can’t get menu.itemName to turn into menu.burger. The only way to do it is by writing as menu[itemName] so that itemName turns into burger, and then it can actually find it.
`a.b` is `a['b']` not `a[b]`.
well *obviously*, we just turn our screens upside down ;) 
in this case, menu.burger would equal 10. as would menu['burger']. now say you use a variable: myVariable = burger; menu.myVariable would equal null, becuase menu.myVariable doesn't exist. but menu[myVariable] would equal 10. 
Wait. How do I type in “pile of poo”?
if you're on osx you can do `ctrl + opt + space`
Thank you
You can do it without a framework for something simple. I did a very cheesy driving game a couple of years ago just using CSS3 transforms and perspective, javascript to scroll the view. When the car hit a pothole it rolled over onto its roof :D. 
`[]`s let you refer to a property using a string. If the property name you want to access is stored in `itemName`, dot notation doesn't allow you to use `itemName` as a property reference. If you write `var itemName = 'burger'; log(menu.itemName)`, that'd refer to `menu.itemName` (which is undefined), not `menu.burger`. var myDocument = { title: "hello world", author: "Billy", url: "https://media.giphy.com/media/aBfSGPDRDSdqw/giphy.gif" }; console.log(myDocument.title); // hello world console.log(myDocument["title"]); // hello world // now why this is useful var field = "title"; console.log(myDocument[field]); // hello world // inside the [] isn't so much a *variable* as an expression, allowing some pretty advanced stuff: var fields = ["title", "author"]; console.log(fields.map(k =&gt; myDocument[k]).join(",")); // hello world,Billy 
i have a jsp that as the parameters Firstname , i would like to bring the content of firstname into a javascript from the jsp.
Here's a dead-simple example: var obj = { a: 1 }; var myKey = 'a'; obj.a; // 1 obj['a']; // 1 obj.myKey; // undefined obj.foo; // undefined obj[myKey]; // 1 We might use a variable for the key (`myKey`) sometimes. Here's an example where we would use bracket notation: var prices = { tomoato: 2, bread: 3 } var colors = { tomato: 'red', bread: 'brown' } var myFavoriteFood = 'tomato'; console.log('My favorite food is ' + myFavoriteFood); console.log('It costs $' + prices[myFavoriteFood]); // bracket notation console.log('It is the color ' + colors[myFavoriteFood]) // bracket notation
In inspector click on the computed tab. That should do it. 
Then just copy all of it in my own class ?
1. JS, last I saw -- I think 2. As far as I can tell there's no reason not to (assuming by "like Python" you mean less enterprisey, hard to be sure with only one example and no adjective -- perhaps you just mean *less popular* (still yes) :)) 3. I think language designers are more considerate of various programming styles than the decades after OOP blew up. I feel like OOP's popularity has waned a little bit with the merits of other styles being more widely circulated and understood (and perhaps to some degree, refined) but it still absolutely has its place 4. I don't think a language's evolution will *inevitably* lead to bloat (unless it needs backward-compatibility) 5. Case by case. Generally I'll use IntelliJ for non-trivial Rust, VS for C#, PHPStorm for larger PHP projects and VSCode for everything else 6. I don't know what Tiobe or Pypl are
Create a dinosaur that eats the peanuts out of my shit.....in react.
Just slice the last three characters and sort by their numeric differences?
in your console you can go: `window.getComputedStyle(document.querySelector('.top-matter'))`
Yup, it was a question.
Wht are you using a `fetch` with `await` and a `then` which returns it's returned variable. Also you're using a let variable, setting that variable to null, and putting it into another `let` (which isn't reassinged so u could use `const`). Can't you one line this code? ``` let articles = await fetch(url).then(response =&gt; response); let result = await articles.json(); articles = null; return result.articles; ``` ``` return await fetch(url) .then(response =&gt; response.json()) .articles; ```
&gt; I think it might help if I had a write up of this exact example in dot notation so I can visually see the difference. Well you can't do that. Let's say I have an object: var x = { a: 10, b: 15, c: 20 }; There's an input which the user will choose the value he wants to get, it can be either a, b or c. Suppose the input is 'a' var input = document.getElementById("#myInput").value; var value = x[input]; console.log(value); // prints 10 If you try to do x.input it will return undefined...because there is no "input" key in my object. To put it simply: x.a means x["a"] x.input means x["input"] x[input] would evaluate to whatever input is. In my case, input is 'a'. So it would be the same as x["a"]. 
Thank you for your answer. I was aware I could do that on github but our private repo is SVN and not every colleague has access to our code. On the other hand I didn't know about Now.sh. I'll give it a look.
Since it's for private use i seeing the limitations of my company I think I will give it a try to option 2. We have a VM (with no back ups, ironic yay!) and as you said I can automatically upload dist files there and serve them for my collegues through an Apache server. I know it isn't the best way to to this, but I think it's the best I can do with my current resources.
Imagine sagas like tiny services that communicate with each other through actions. You can have like a microservice architecture in your frontend.
&gt; You can't. That's why bracket notation is being used here. There's no dot equivalent because you don't know what to use as a dot. Incorrect. There is a dotted equivalent, but it's harder to read, less flexible, and probably bad taste in many instances: function getPrice(itemName, menu) { switch (itemName) { case 'burger': return menu.burger; case 'fries': return menu.fries; case 'colesaw': return menu.colesaw; case 'coke': return menu.coke; case 'beer': return menu.beer; default: return null; // No price for that item } } 
I didn't target anyone. 
VanillaJS is best JS framework. But I don't use it.
Vue.js is a pretty good alternative to jquery, and its much easier to learn than angular or react, and its pooularity has risen alot over the years
Hey, nxv\_1317, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
You should use a module system for scripts too large to reasonably understand their structure at a glance.
Looks like it's down for a week already http://www.isitdownrightnow.com/ecma-international.org.html
You should use a module system for scripts too large to reasonably understand their structure at a glance. `1209` and many other lines: use `.querySelector` instead of using a method that returns a collection and select the first element in the collection. Many lines: only use `let` when you need to reassign the variable, otherwise use `const` `733` Rather than lots of reassignment and `switch`, which is error-prone and verbose, consider using object lookup instead You should strongly prefer array methods over `for` loops. Loops fail to clearly signal the intention of your code, and as such should be avoided whenever possible (prefer higher-order functions, such as .map, .reduce, .filter, ...). See also: https://gist.github.com/robotlolita/7643014 Keep your code as DRY as possible: don't select `object.prop` over and over again when you can just select the prop once and assign it to a variable You might consider having `makeElem` returning a wrapper around the element so that you can chain your methods, eg, around 505: todosToday.forEach((todo) =&gt; { const { frmHr, frmMin, toHr, toMin, title } = todo; makeElem('span') .classList('toggle', 'col-hours') .textContent(`${frmHr}:${frmMin} - ${toHr}:${toMin}`); `511` Don't store state in your HTML
Highly recommend this one too from [Addy Osmani: Essential JS Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)
Thanks for sharing this. I'm reading this days about this topic, and I think that this is really helpful resource. 👍😊
Thanks.
&gt; if you get an Array, ArrayList and a HashTable Wait... There's no ArrayList and HashTable in javascript. Also, most of these patterns looks like java ones, and are not very applicable in the Javascript world. Also, the word "class", "superclass", "abstract" appears *way* too often to be about javascript. &gt; Note that it's very important to have basic knowledge about the object-oriented concepts like: abstraction, inheritance, polymorphism, encapsulation, interfaces, classes and abstract classes to understand design patterns better. I'm **sure** this article is about Java.
Es6 has all those things
Clickbait article
I completely agree! How can something like this even happen?
It seems like someone has created a repository to house code snippets for these patterns: https://github.com/fbeline/Design-Patterns-JS
If b === ‘b’ then also [b]
Bracket notation has one huge use case; keys with dots. For example, the CloudFlare API outputs JSON data where some of the keys are IP addresses (e.g. 100.101.102.123). Using dot notation simply isn't possible in this case, as so; { "visitors" : { "123.234.255.255" : { "UID" : "029339349", "Loc" : [ "/", "/robots.txt" ] }, "123.255.255.123": { "UID": "029339349", "Loc": [ "/", "/robots.txt" ] } } } In this example, it's not possible for me to use `visitors.123.234.255.255.UID`, and instead I must use `visitors['123.234.255.255'].UID`. Admittedly, dots in key names is fairly uncommon, but it's one of those times when you only have one option.
Those are simply OOP patterns, with the word "JavaScript" slapped needlessly on every heading. In fact, I suspect that this was copied from a Java book, and then someone just s/Java/JavaScript/g'ed the whole beast.
Yeah, this article is very weird/poor. Lot's of confusing terminology where you have no idea what is being talked about and no examples whatsoever to clear up misunderstandings. 
There are no snippets because this blog is mostly a copy paste of many other blogs summarizing the well known Design Patterns Book. [This wikipedia page](https://en.wikipedia.org/wiki/Design_Patterns) discusses this book, from 1994, and as you may guess from the date it wasn't written for Javascript. I know ES6 has classes now but just stamping the word Javascript all through a well known set of guidelines doesn't make many of these patterns idiomatic.
&gt; I'm sure this article is about Java. The book in question is actually two years older than Java, and is written for C++.
You can use [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) along with [array spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) to create an array of arrays. So 1. Create a function that takes the items and returns an array reduce. 2. In the reduce, first do an `if` check to see if the current item is the parent of any other items in the array, if it's not return the accumulator and the current item on its own. You can use the [some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) array method to check. 3. Else, return the accumulator and a new array with the current item and use [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) to grab other items in the array that have the current item as its parent.
Removed.
You’re probably best off looking for a stock market api that is designed to give that information in json format do you to process anyhow you desire. 
Bro your article was copy paste out of a Java book. Addy Osmani is actually a useful resource for JavaScript
Here's some snippets of design patterns... https://www.npmjs.com/package/design-pattern I didn't write it and only scanned a few, so YMMV.
Similar to my https://github.com/VinSpee/react-gcal-events-list/ - yours is more featured, but mine is more flexible. Nice work!
This is what this sub upvotes really? This article makes no sense from a JavaScript perspective and worse has not code examples
Does it really ? In my eyes the prototype-based nature of the language makes so felxible that it can mimic classes, traditional object oriented principles, etc, but in essence it is not needed 
Truly bizarre. Nearly all the comments are pointing out - quite correctly - that this is a copy/paste job, taken from a source that isn't even about Javascript... Yet there's 100 up-votes as I'm typing this reply. 
Snappy snippet chrome extension should do it
There is a major quality control issue with JavaScript community content. It’s like 90% junior devs trying to seem relevant.
And this isn't all the gotchas with choosing the correct camera on multi-camera devices. The device which is returned for `facingMode` is up to the specific device. Often times they choose... poorly... For example, take the Kyocera DuraForce PRO phone SKU KYOE6810N. It has 2 "environment" facing cameras, one "normal" and one "fisheye/wide-angle". The device decides to return the "fisheye" camera when you request "environment", and to make matters worse they just name them "camera 1" and "camera 2". The ONLY consistent way I've found to choose an environment-facing "normal" camera in 100% of cases is to call `enumerateDevices` and choose the LAST item. Now that is not coded into the spec at all, but in all of my testing (over almost 80 different devices) that is ALWAYS the environment-facing "normal" camera. As always your results may vary. Also, for iOS 11+ support, you need to make sure your `&lt;video&gt;` element has the attributes `autoplay`, `muted`, and `playsinline` or the video won't start. Audio won't work on iPod touch devices at all for some reason, and most importantly for iOS **NONE OF THIS WILL WORK IN A "*WebView"**. This includes a website that was "added to home screen" including from a PWA! Make sure if your web-app requires camera access, to detect when the app is added to the homescreen and warn the user as the call to `getUserMedia` still exists and trips up most tests out there, and the only way you know is a thrown `TypeError` when you call `getUserMedia`. Also, I've found that simple is always better here. MANY low-tier and mid-tier android devices behave very badly with regards to the whole `getUserMedia` APIs. From not ever resolving promises, to throwing `TypeError`'s when they should be throwing `OverconstrainedError`'s, to multiple issues where some devices will not let you do anything fancy like switch streams after the initial constraints. I've done a LOT of work with the `getUserMedia` APIs on mobile devices, and if anyone has questions or issues feel free to reach out to me, i'm almost always willing to help!
Without getting into a debate about using prototypes in ES as opposed to using classes, javascript does indeed allow the capability of some of the other principles and patterns. While the article itself might be bad copypasta, picking up a GoF book, or reading up on SOLID, or looking into enterprise architectural patterns and trying to implement them in ES land is not a bad idea.
Does that stock market have an API? If so you need to do a get request to their api (you can use javascript and host the website on github) and crunch the numbers client sided and then present them. Does the end result have to be a website? If not you can use IMPORTXML on google spreadsheets to scrape a stock market website of their numbers. You can actually use the spreadsheet as your backend and crunch the numbers their, and then use a free spreadsheet to api service which then you can plug into a website (same as above except now the crunching is on the 'backend')
Love this article, I had a similar problem in react https://medium.freecodecamp.org/how-to-use-react-and-react-sentinel-to-make-responsive-dumb-components-51a04c6279a3?source=linkShare-df63d56c1be5-1524574183
No it doesn't. The `class` keyword in ES6 is just a new keyword, not a new concept and does not introduce "classical" OOP inheritance. class foo(bar){ constructor(){ this.bar = bar; } baz(){ // Method code here. } } Is the same as: var Foo = (function () { function Foo(bar){ this.bar = bar; } Foo.prototype.baz = function(){ // Method code here. } return Foo; }());
And without even crediting the artist. 
Another interesting one: In our case we're using a rotatable device (Surface pro) with an external camera. In portrait mode, the media stream from the external camera is rotated as well (which is actually convenient for us), however the reported resolution is still landscape. Now this is for a kiosk where we control the hardware, so I'm hard-coding this assumption but I don't know what I'd do for the general case where you want to know the aspect ratio to display the video at.
To know in detail about the benefits of Angular and react, this article will help you https://blog.contus.com/angular-vs-react-for-building-web-applications
Oh yeah, that happens on quite a lot of devices. If you requested 1920x1080 you will get back 1080x1920 on android devices in a 9:16 aspect ratio, and everything would SEEM fine, but it would really mess up our rendering of the video. It has to do with the physical sensor on most devices, they are built to accept video in a specific aspect ratio, and if you rotate the device 90 degrees the aspect ratio will be off, and i guess at least chrome likes to respond with the "closest" thing being the reversed aspect ratio unless you ask for 16:9 explicitly. We solved it by using plain-old HTML! We just put our video-tag inside a container, then centered the video element in the middle of the container, and sized the container to be the size and shape we wanted, letting the extra height (if it exists) to overflow outside the container and get hidden. That also reminds me that when you rotate the device, at least one device would crash (throwing a `TypeError` because it would attempt to get impossible constraints. The solution was to just restart the whole `getUserMedia` stream from the top, but it took a few seconds.
You can use reduce to create a Object like that: { 9: [ {all comments child of 9 and the comment id 9} ] } With a object where the key is the id of a comment you dont need to traverse the array to check if a comment is a main or a child. Just check if your object has the property with the id, if not, associate to your object. After create the object, convert the object to array. If you dont understand reduce, see this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce Or see this two examples: No reduce: var array = [1,2,3] var sum = 0 for (var i=0; i&lt;array.length; i++) { sum += array[i]; } console.log(sum) // 6, because the for sum all values in the array with reduce: var array = [1,2,3] var sum = array.reduce((s, x) =&gt; s + x, 0) console.log(sum) // 6, the same result the parameter s is like the sum variable in the "no reduce" example, the x is each item in the array (like the array[i] in the "no reduce" example), and the last parameter of reduce is the start (the same as "var sum = 0" in the "no reduce" example")
You're link is showing the same thing I am above. It's not a new feature, it's a new syntax.
It's worth noting if you're using a framework like React/Vue/etc. you can still use your framework to do the rendering and use D3's scaling (linear, ordinal, logarithmic, etc.) and math functions to for example convert raw numbers of data to their relative pixel display heights/widths/positions. When you get right down to it you're just doing the same thing in D3 anyway with rendering SVG elements and D3's general update pattern, there's no reason you can't do the UI rendering in your own framework.
And smalltalk!
https://developers.google.com/apps-script/reference/url-fetch/url-fetch-app
&gt; Bracket notation allows you to use a VARIABLE to look up object properties. Dot notation cannot do this. Try it for yourself. This is what I believe is the correct answer for OP. Dot notation is simply easier to read and write, especially if you are traversing multiple levels of properties. When you DO need to use a variable to access a property name, then you have to use bracket notation. 
The article really seems to have multiple title disorder... From the article's header: &gt; Do you really know JS? From the article's page title: &gt; You Do Not Know Javascript? 
My bad, I forgot to renew the domain. Should be fixed by now.
You can read this post ;) https://itnext.io/how-not-to-suffer-with-apis-8aa75f890fe6
Hi /u/khazha88, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/redlegend18, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I get irrationally bothered by tutorials that tell you how much time it should take. There is 0% chance you can do this in 6 minutes unless you just copy paste everything...but what do you learn from that? It totally kills confidence in an amateur programmer when it takes them 10x longer to understand a tutorial than what it says. If I'm told I should be able to run a mile in 5 minutes but it takes me 12, I'm not gonna feel to great!
Yippeeee
You do realize you replied directly to the OP, who is the author of the project? This is not up for debate.
I don't think OP was the one who wrote the article. But whatever, fine. Discussion over.
In Javascript numbers are stored as double precision floating point numbers. However there is a guarantee that integer numbers will be represented exactly in the range -(2^53 - 1) to (2^53 - 1). It seems to me that rotations are causing loss of precision. It would be necessary for the framework to treat the rotations of 90, 180, 270 degrees as special cases to avoid loss of precision. Maybe if you use only integer numbers the framework will treat those rotations as special cases to avoid losing precision. 
Well, what do you expect from a company that's bold enough to name their product "stdlib" 
Thank you. I'm exactly trying to write a routine as the one in the first image. I'm so far that the client is tiying to refresh the token if the main request fails. What I haven't understood yet is how I call the doRequest\(\) again after I have the new token.
I honestly think the author of this has hired some bots to upvote this, you can even see the only comment which is praising the article is from a newer account, clearly the authors second account he uses to make it seem like his articles are worthwhile 
I'm sorry I gave you to little information, the client is a bot which should get a new token every time the old one expires. In general you are absolutely right.
Aren't that way too much requests? I try to be optimistic and use the token aslong it works. If it doensn't I have to get a new one for my client. 
All I could think of was this: https://youtu.be/qM79_itR0Nc?t=23 
I heard about security options with npm before, glad to hear it's now built in as standard. [Here is the podcast I heard about it](https://devchat.tv/js-jabber/jsj-294-node-security-adam-baldwin).
&gt;In that case, it shouldn't be too difficult to move the token request into its own method, and simply call it again as soon as the bot receives an invalid token message. Sure, that is what I try to implement. But how to call the API with the new token again without risking an endless recursion/loop \(in case of the token is always wrong\)? I'm sure I's pretty easy but I haven't found the solution yet.
Lovely 
JAVASCRIPT != JAVA
if the token is wrong he needs to relog if the token is expired but correct, sign a new token and send it over in the same request, and save the new token
How CI/CD differs from regular development environment and why npm install doesn't get the speed boost provided by npm ci?
It would be helpful to learn the native Javascript that replaced it, such as the "fetch" api, and the methods that predate it such as "getElementById", etc. But there's nothing that makes it truly obsolete. It still offers the same cross-browser syntax and worry-free usage that it always has.
Master ES6+. Don't worry about compatibility, with the way we are going, there is usually a transpiler that takes care of that for you. The problem with jQuery is that it does too much. E.g., `$.each` works on every single iterable type. Rather spend time on learning what you are currently working with -- Object, array, etc.
My guess is that the answer is: Google (or any large company) is not a monolithic entity. It's made up of thousands of teams in hundreds of department, and each of those are to some extent independent of the larger organization. Couple that with the fact that React is awesome, and that Google engineers (like any engineers) like using cool tech, and it makes perfect sense.
Typescript ;-)
You're absolutely right, but the problem is, I have no idea where to start. I'm able to create classes for simple objects such as a Book or something but when it comes to a Recipe, with several components, I have no clue. I was thinking maybe I'd need to make a class for Ingredients (name, amount) and a class for Method (step number, instruction) and then in the Recipe class it would be (time, ingredients, methods). But I'm not sure how to structure/code it so that ingredients and methods are linked to a specific recipe? I'm not necessarily looking for code, but just some advice as to how to design it. Thanks :)
It's not the same thing. CI uses the package-lock file and just downloads everything as specified in that file. Npm install will do a lot more like for instance check for common dependencies and produce the lockfile.
npm ci only consults package-lock.json, and does not reference package.json, unlike npm I. This accounts for the speed difference. 
`npm ci` assumes that you are installing from a clean slate based on the exact list of packages in `package-lock.json`. It looks like that version of the command can skip some steps, like attempting to update the lock file if dependencies declared in `package.json` do not match versions in `package-lock.json`. Details are here: https://docs.npmjs.com/cli/ci
what's this "instead of" stuff? jQuery is still incredibly useful. who's saying it's dead? that's non-sense. you should use it for what it's useful for. it has a lot of convenience methods that make DOM manipulation and AJAX requests simpler and cleaner. use it for that, where appropriate. there's a lot of newer Javascript libraries and even full-fledged frontend frameworks that are getting most of the attention these days but they really serve a different purpose than jQuery. 
Why npm install doesn't use package-lock file? 
Why npm install doesn't use package-lock file? 
I completely agree with you 
What's the point of package-lock file if it's autogenerated each time?
i'm not sure I follow. The token validity check only happens once -- on page load. You would *also* have to handle the case of an invalid token being supplied on *any* api request. In which case, the login form should be displayed again for the user, signifying their session timed out.
Why npm ci doesn't do that? I mean it's stupid not to generate the lock file if it's not present. Instead we get two commands.
When you want to install what’s locked in the package-lock you run npm ci then it will not be regenerated.
Create a For loop in which you generate a random number, and add it to an array. After that, check for each item in the array if it has the same value as another item in the array. If that is so, replace it until you have a number which isn't the same as another number in the array. Eventually you will have an array of random numbers which aren't the same.
As far as I know, it is not dead but in the the long process of dying. Many of the compatibility issues addressed by jQuery are fixed in all latest browser versions. Would recommend using vanilla JavaScript/ES6 for DOM manipulation and AJAX. We only use jQuery for animations and stuff that does greatly and doing it with JS is cumbersome.
Can I pm you with further details (ex. full source code)? I tried what you recommended but when I print to the console I get null.
What’s the other command?
Why lock-file require field is now generated according to your package.json versions? I thought lock-file supposed to hard lock installed package versions, without ^ and other stuff
Hey, llama\_toad, just a quick heads-up: **forseeable** is actually spelled **foreseeable**. You can remember it by **begins with fore-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Thanks ;)
Some programmers can only think in terms of OOP, and view any other paradigm as inferior or non existent. I deal with this crap everyday at work.
It’s not doing the same thing. npm install is installing everything from package.json and saves what it installed in a package-lock.json file. npm ci installs what’s defined in package-lock.json file to make sure that it uses packages versions that is known to work.
That's my point. Why npm install doesn't do both of those?
&gt; npm ci only consults package-lock.json, and does not reference package.json According to the docs `npm ci` does read `package.json` - but only to verify that versions there are compatible with versions in `package-lock.json`. &gt; Why npm install doesn't use package-lock file? `npm install` does install according to the versions listed in `package-lock.json`. But the design decision is that if dependency versions in `package.json` have changed so that they are not compatible with versions in the lock file then `npm install` should compute a new lock file before installing. `npm install` could have been designed three different ways. - Ignore `package.json` if a lock file exists, which would lead to unfortunate surprises for devs when packages installed end up not matching what they declared. - Exit with an error if version constraints in `package.json` are not compatible with versions in the lock file (which is what `npm ci` does), and instruct the dev to run another command to recompute the lock file. - Just do what the dev probably wants, which is to automatically recompute the lock file when necessary.
For the sake of reproducible builds it is important that npm adheres strictly to the lock file in CI, when deploying, and when building release artifacts. Changes to the lock file should be done with human supervision during development, and the lock file should be kept up-to-date in version control.
Perhaps to demonstrate a commitment to both using the right tools for the job and to keeping web components framework agnostic? Because web components and React are not mutually exclusive, and both now use ultimately the same underlying technologies: shadow Dom and JavaScript class backed elements. (Besides, HTML imports are weird) React is wonderful for state management, and there's a larger community of support and pre-written code. So probably faster to market,... though I'd expect them to eat their own dogfood. 
You've had some ideas there, but you haven't actually tried any of them. As a programmer, you're going to need to get over that fear of doing things inefficiently and just try things. If they don't work out, you'll have to do them again... But if you never try anything, you'll never get anywhere.
Hi /u/xxx-treme, For javascript help, please visit /r/LearnJavascript. Thank you!
&gt; Because web components and React are not mutually exclusive Material Design Components Web (awkward naming) has nothing to do with Webcomponents technology. Google Polymer is the one trying to push Webcomponents (yet another Google javascript project that you need to poke every now and then to see if it's still alive)
&gt; But the design decision is that if dependency versions in package.json have changed so that they are not compatible with versions in the lock file then npm install should compute a new lock file before installing. That could have been easily done on add/remove package without all that unnecessary overhead on each install. &gt; Ignore package.json if a lock file exists, which would lead to unfortunate surprises for devs when packages installed end up not matching what they declared. lol what? Only sticking to the exact versions will ensure reproducible builds. npm install currently does the opposite and you have to use *a different command* to have something you should be guaranteed to have. &gt; Exit with an error if version constraints in package.json are not compatible with versions in the lock file (which is what npm ci does), and instruct the dev to run another command to recompute the lock file. Why even care about package.json if there is already package-lock file? Requiring package.json in the process defies any advantage of package-lock file. &gt; Just do what the dev probably wants, which is to automatically recompute the lock file when necessary. Which, again, makes the lock file useless.
Why wouldn't React be the right tool for the job? Besides, for the Angular (which they also made) folks, their Material components are more coupled with the Angular framework itself, so they get their own codebase here: https://github.com/angular/material2 The web components you're mentioning are more framework agnostic.
It should do exactly the same thing in the development environment. Not only in CI. That's why it should be provided by npm install by default. All the changes to the lock file should happen on every package addition/removal, kept in the vcs and then be easily reproducible without using a different command. It shouldn't need any supervising. npm should track those changes automatically.
Did you? XD
Who could've thought that npm can get any more stupid?
`fs` with promises :o
The lock file and `package.json` are updated when packages are installed or removed. The npm devs thought it would be a good idea to check for consistency on install just in case someone edited `package.json` directly. `package.json` is the human-readable and -writable declaration of what the project needs. Version constraints in that file should be loose so that it is easy to keep the project up-to-date as dependencies evolve. For example, maybe I know that my project requires React 16 or later, but I expect that future versions of React will also work for the foreseeable future. So I specify the constraint `"react": "&gt;=16"`. When another dev comes to work on the project and wonders whether it would be ok to upgrade to React 17 they look at that constraint in `package.json` and see that upgrading is probably ok (as long as the tests pass.) Loose constraints make it possible to communicate the project's hard requirements. But to make sure that conditions are as consistent as possible you want to make sure that everyone is using the same dependency versions at any given time. Enter the lock file. Devs don't need to know or care much about what is in the lock file as long as it respects the hard requirements declared in `package.json`. If there were ever a scenario where the two files were in disagreement that would violate an important principle of the dependency management system. That is why it is worthwhile to check consistency on `npm install` and on `npm ci`.
Devs may edit `package.json` directly without going through `npm install` commands. The file is intended to be human-editable. Sometimes you just want to tweak a version constraint, and editing `package.json` directly is easier than waiting for npm install. Supporting that use case makes npm a little slower; I think that is an acceptable cost for supporting different development styles, and for double-checking correctness.
&gt; It looks like fn and data are being shared by every call to ajax. Incorrect. In the first snippet, the `fn` and `data` variables are re-created for each call of `ajax(..)`, meaning the internal closures are always over a single pair of variables per instance. If they were in the outer scope, there would only be one pair, and all the closures would share. &gt; Could you point out a few use cases in which it would be preferable to use a thunk over a Promise? Depends. 98% of the time, I bet Promises are what you want/need. But if you're building a promise library, thunks are invaluable. Moreover, if you're building an asynchronous abstraction, sometimes promises are overkill. If you have an internal mechanism inside of some tool that needs to resolve a binary race condition, and you aren't sharing that abstraction/value externally with any other code, then the "asynchronous" resolution step of a Promise, plus all its guarantees, are overhead that's slower and unnecessary. In that case, a thunk is preferable. But most importantly, a thunk is useful as it illustrates the point of promises: a time-independent wrapper around a value. Whether that's enough, or you want the more robust Promise API wrapped around that abstraction, depends on your various use-cases.
I read through this thread and I think nobody was able to explain the rationale for having npm i and npm ci. I'm sorry that you received so many downvotes as this is a good question! As far as I understood, the main reason, that npm i alters the lock file, is the update process of many devs: change the version in package.json and run npm i. Install checks the package.json and finds a mismatch between the updated library version and the outdated version in package.lock, so it regenerates package.lock. Every other developer will still get reproducible builds (because package.json and lock.json are no longer contradicting each other) so the benefits of the lock file can be accomplished, without changing the workflow of many devs (change Version in package.json and run npm i) 
Yes, diversity is helpful! However yarn works pretty much the same way. To get behavior similar to `npm ci` you can run yarn install --frozen-lockfile See https://github.com/yarnpkg/yarn/issues/4147
I never alter package.json deps versions manually so it never was an issue for me.
Copy the styles you need. A lot of that will be inherited styles and browser styles. 
The general consensus seems to be that jQuery is still _worth knowing_ for working on/understanding older code, but should be avoided for new projects. jQuery was around primarily to smooth the inconsistencies in the DOM API between browsers, but that's not really as much of a problem as it used to be, if at all. As an alternative to `$.getJSON`, look into the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)
There are fads in programming, just as anything else. Hating jQuery is a fad. You should probably know how to do the same things without it, but if it makes your life easier, just use it. 
jQuery isn't all bad \(some websites use it, so it's a plus if you know it\), but the problem is that people can become dependent on it. It's even worse if you're a beginner, because you don't know how to achieve the same results with vanilla JavaScript. getJSON is pretty much an AJAX request, so I'd recommend studying up on some of the APIs such as the XMLHttpRequest API. [https://developer.mozilla.org/en\-US/docs/Web/Guide/AJAX](https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX) Here's a quick and simple example using the XMLHttpRequest API. function getJSON (url, callback) { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 &amp;&amp; this.status == 200) { callback(this.response.data, this.response.status, this.response.success); } }; xhttp.open('get', url, true); xhttp.responseType = 'json'; xhttp.send(); return xhttp; }; then just make your request. getJSON(myURL, function (data, status, success) { console.log(data); }); Personally, I'd setup a more customizable AJAX helper function where you can set the response type, handle errors, and so on.. but this can help get the job done either way.
And that is why you use Yarn.
Most JS developers work within a framework like Angular, React or Vue. The DOM manipulation that jQuery sought to provide help for is now handled by these frameworks. So your question depends on how you build your project. If I'm making a splash site and I don't want to have to use a framework (they're quite large) I might just go Vanilla JS and jQuery. If I'm building anything more I'll likely want to use a framework. Generally speaking I'd stay away from it if for no other reason then the popularity of frameworks is driving the tools and libraries that are currently being used and developed. Meaning less long term support for jQuery and more tooling / better community support for frameworks. Look into some tutorials on building a To-do app with vanilla JS / jQuery / a framework. You'll begin to understand why people have switched over. 
Didn't read, but here's the [link](https://scrimba.com/g/gd3js) the Medium article takes you to. I'm starting to dislike Medium.
Good insights, thank you.
Right on, thank you for the tips.
We would want to run npm install if want to get updated versions of the packages.
It's largely preference or depending on whether or not you're dealing with a more imperative or more functional codebase. But you should at least be aware of the differences that go beyond style. Specifically, `for..in` will capture inherited keys whereas `Object.keys` sticks only to own properties. For example: var par = { prop1 : "some val" }; var obj = Object.create(par); obj.prop2 = "some other val"; for(key in obj){ console.log("Key: ", key) console.log("Value: ", obj[key]) } // ^ prop1 and prop2 Object.keys(obj).forEach((key)=&gt;{ console.log("For Each Key: ", key) console.log("For Each Value: ", obj[key]) }) // ^ prop2 only 
Because it can’t. How would it know if you want to install with locked file or unlocked file?
Personally I like React, I think there's benefits to each however. The biggest factor might just be what architecture makes sense to you. I can't harpe on the Todo app enough. I probably have built one 20 times across languages, frameworks, everything. You'll definitely struggle with your first framework, but after the learning curve you'll be able to get a intuitive feel for the others. React is probably the buzziest and it's backed by Facebook so it's not going anywhere. Vue is really cool, it's way lighter (in terms of dependencies) but is the newest so it's unclear where it's heading. From what I've read and from building in it, it's nice and clean. Angular is the OG, I think Amazon is still on Angular 2 (current version is 4?) So it's got a lot of love and use. 
Fetch API and look into async/await. It's easier to understand then the typical callback hell approach to resolving promises (which lead to jQuerys tooling). 
 :~&gt; npm i -g npm ... **added 223** packages from 47 contributors, **removed 76** packages and updated 83 packages in 17.538s 
No. It should be updated upon package installation/removal. I'm certainly not going to follow the work flow. I'd rather use yarn.
I doubt it's a fad (except the "hating it" part, there's no point in hating it it's not a bad library). But I think usage of jQuery is going to steadily decline for the simple reason that browsers are adding more and more APIs directly inspired from jQuery (such as new DOM methods with very very similar signatures, fetch). For new projects, installing and updating jQuery is starting to require more effort than using native APIs directly
I wouldn't bother with XMLHttpRequest anymore tbh, fetch is native and a much better replacement
I stick with **yarn**, thanks
https://lambdaschool.com/ looks really interesting. You don't pay until you get a job. They offer part time programs and you can do it online, but I can's see if it's US only.
You don't need jQuery for the first approach.
You have that option
I switched to yarn after their last fuck-up, which pretty much confirmed they have no qualities to be responsible for such an important part of the ecosystem. Have they finally gotten their shit together with this node security platform or whatever?
The biggest gripe is that I want to be able to tell the framework "I know you usually do it this way, but this time I really need to do it like this".
That should clearly then be renamed to `update` or `upgrade`.
Also: you can break the loop, not the `forEach`
Ah, yes, business as usual.
Newstflash: trivial programs don’t require non-trivial libraries. In other news: irony completely lost amid comparing lines of library code when using libraries itself includes thousands of lines, development dependencies, new paradigms to learn, and additional load time.
Yet another reason that it's not necessary to have done that site in not-React. ;)
All the security platform does is audit packages against known vulnerabilities, which is especially valuable when you do it recursively. So some dependency that you have that is 10 levels deep that has a vulnerability will be detected, and libraries can finally start being held accountable for using vulnerable dependencies. Having said that, the article does not even mention the clusterfuck that happened a few weeks back, leading me to believe that it is still business as usual over at npm. You can rest assured that they will continue following their own agenda and ignoring the actual concerns of their users until something serious happens. Basically, feel free to continue using Yarn.
That audit thing sounds like a cool feature though, is there any way to get some of that with yarn?
Take a look at https://medium.com/web-on-the-edge/tomorrows-es-modules-today-c53d29ac448c by the creator of lodash. &gt;A fast, production ready, zero-dependency ES module loader for Node 6+! My understanding is that you require the esm module and then you can use es6 modules in node w/o any transpiling. For the browser, I assume you'll be using a modern enough one that you don't need transpiling.
AFAIK, there's no way to apply custom CSS to a native dialog box. This means that you'll need to implement your dialog by hand, for example as a fixed-position div with your custom CSS applied to it. There are plenty of ways to handle the logic for the dialog box and posting the user response back to your DB. This might be a good use for jQuery if you just want something quick and dirty.
Another way to do it, if you can use the latest and greatest EcmaScript features that is, would be using `Object.entries` ``` for (const [k, v] of Object.entries(obj)) { console.log(k, v); } ``` But as [senocular](https://www.reddit.com/user/senocular) wrote, it's often a matter of preference 
It's the same in yarn as far as I understand https://github.com/yarnpkg/yarn/issues/4379
I've used https://snyk.io before but the paid version is expensive.
ty
Because the NPM developers have repeatedly and consistently demonstrated they are in way over their heads and have no idea what they're doing.
No prob!
Use `--frozen-lockfile`, and, ideally, `--offline`.
That's what the link says, which is what npm ci does.
I guess it uses the npm lockfile though, which means the reports might be unreliable unless you can somehow figure out how to keep the npm lockfile consistent with your yarn lockfile.
You don't get that a lot of things in this article are simply not relevant in js. For instance, the fact that all the return type of a factory method must derive from the same superclass is imposed by the compiler in java, whereas it's absolutely not necessary in js.
It's a [java class](https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html) :-) 
Oh yes, the original book about design patterns? I try to erase its very existence from my memory :-D
Nope... `a[{toString: () =&gt; 'b'}]` yet `({toString: () =&gt; 'b'}) !== 'b'` 
But the command has a better name. That's the main benefit of Yarn for me, sane naming.
...with a passed argument, the same way it knows all its other options. Really?? 
Because contrary to how some devs behave, the IT industry is not a football league where you must support your team no matter what 
Update and upgrade already exist, and their use is... somewhat fraught. 
Can I PM you with more details to get a better understanding of this?
Hi /u/halotacon80, For javascript help, please visit /r/LearnJavascript. Thank you!
Totally agree, ci is a bad name!
Past 1.x Angular is just Angular. It's on semver.
adding a wrapper around dot notation is still using dot notation
Where did I say "new feature"? You said that JS has no OO inheritance. I posted a link that is called "Class Inheritance". I like that you're inventing an argument for me, and then arguing against it. That's called a straw man.
Seriously. That’s not a lock file. That’s a specialized package.json file! We want a real lock file. 
That’s a tautology. Install should do what ci is doing. That’s the simplest expected behavior. If you want to change your lock file either delete it prior to install or use update/upgrade command. Since the prepublish-on-install fiasco I don’t trust npm to make any intuitive and sane decision. This is just more of the same. 
Hi /u/halotacon80, For javascript help, please visit /r/LearnJavascript. Thank you!
The fact that the package-lock file changes with every install means that it’s also an unlocked file. If I cannot add a package without it rebuilding my entire dependencies lock, the workflow is broken. Period. 
Did you mean `Object.entries(obj).map(/* callback */)`
No mention of ES modules going stable. Have they been pushed back to Node.js v11?
Why is npm an incorporation? Its the only pkg manager I know that is a company with no benefits. Sounds really strange to me...
Thanks for your observation, tbh thats how I wrote it the first time but I had some issue and I tried to debug the code, and thats why it looks this way, I'll update the code:)
`forEach` actually, since nothing is being mapped, but yeah, you're right, my mistake.
["jquery is not going anywhere"](https://trends.google.com/trends/explore?date=today%205-y&amp;q=jquery)
&gt; Es6 has all those things (classes and traditional object oriented principles) ES6 did not introduce traditional object oriented principles, it introduced a new syntax for defining prototypical inheritance chains.
Your reply came in on my phone after I edited, I did mean to use `forEach`. I usually get annoyed when `map` is used without mapping anything.
There are a few other companies that offer a similar service. Snyk is the one I use. I'm not sure how the pricing plans compare, I haven't read the article.
This is the main reason I trialled [yarn](https://yarnpkg.com/en/). Being able to reproducibly retrieve the same set of deps today as I did a year ago is an absolutely necessary property of a package manager. Package managers that get this right: * [Cargo](https://crates.io/) (Rust) * [Gem](https://rubygems.org) (Ruby) * [Composer](https://getcomposer.org) (PHP) * [NuGet](https://docs.microsoft.com/en-us/nuget/consume-packages/dependency-resolution) (C#) Package managers that get this wrong: * [Pip](https://pypi.org/project/pip/) (Python) * NPM Frankly, NPM is embarrassing :(
Glad I could help!
I love snyk, and it's free for open source projects. It's really nice if you have mixed-language codebases.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) - Previous text "MDN" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
No
Someone please correct me if I'm wrong but I thought `npm install` would use the package-lock.json unless you have manually changed the version in the package.json to something incompatible. So the only way to get a different version than what's in your package-lock.json is to manually edit the package.json. I'm not sure why this is a big issue tbh, it's not like your package.json file will just change itself for no reason. And if you're already changing source files then how is that different from breaking your build by changing the actual source or the package-lock.json even?
You should learn about both approaches.
I think it's important to have a comfortable grasp with both practices. We humans really like to find silver bullets and scapegoats. For a long time, people believed object oriented was a silver bullet and procedural was to blame for all our problems. Neither was true. Today, functional is the new silver bullet and object oriented is to blame for all our problems. But neither is true. Both -- and even procedural and imperative -- are useful. A blend of all styles, using each where they make sense, will get the best result. If you get religious about a single style and try to use it everywhere for everything, it's not going to turn out well. In fact that's what happened with object oriented. Folks got religious about it and tried to use it everywhere for everything... and that didn't turn out well either.
Good question, I pulled it from the article because I couldn't find it either. I'll do some research.
Simple solution, `filter` followed by `slice`.
The inciting incident that motivated me to finally try Yarn was a project that had a package.json &amp; package-lock.json file; neither had been changed in months but the lockfile was being completely ignored. I migrated that lockfile to a yarn.lock using [synp](https://github.com/imsnif/synp) (requiring quite a bit of manual fiddling due to issues with package hashes) and upon running yarn install I had the right packages at the right versions. I tested this project against a small handful of NPM versions seeing the same behaviour in all cases. I considered raising a bug but having had awful experiences in the past trying to use npm-shrinkwrap in the past and encountering similar issues I gave up. I've spent more time fighting NPM than I have fighting with every other package manger combined. And as I said above, so far Yarn just works.
&gt; for the simple reason that browsers are adding more and more APIs directly inspired from jQuery The fact that "developers" (I use the term *very* loosely) feel they don't have to support older browsers is an anathema to the Internet. Once upon a time, a long, long, time ago, the Internet was made great because it was a means of delivering information to the widest possible audience - that meant device-agnostic information flows. It's time to Make Internet Great Again (MIGA).
I've just been using the [nsp cli](https://www.npmjs.com/package/nsp) in a script for the longest time. Works great.
Fire base from Google?
Hi /u/benparisi, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Gaurav0, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I use Event Sourcing, which is Redux without Redux
Just tried, they're still behind a flag
I’m not sure I follow with respect to NuGet - it doesn’t generate a lock file as far as I know. 
&gt; React is awesome Ehhhhhhhh......
They make quite a bit of money supporting private packages and similar for big companies. Similar to Red Hat's or Suse's business models I think.
I don’t think you can reliably control Bluetooth from a webpage. [Web Bluetooth API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API) is non-standard and has basically no browser support. You will have more luck with a native app, of course, but that’s a very different beast. 
It's very popular among developers to believe that jQuery is dying and that (insert framework here) is rising to "replace it"... but statistics questions are of course best answered with statistics. React has less than 1/2 of 1% of the market. Angular has just over 1/2 of 1% of the market. They are both statistically insignificant when measuring by total number of websites. Contrary to the belief of many developers, the number of jQuery sites it's continuing to rise and it is still far and away the most used library on the web. jQuery is used by 96.2% of websites whose library we know. https://w3techs.com/technologies/details/js-jquery/all/all 
This article says the call stack is FIFO, but the article it references says FILO.
I would definitely recommend picking up modern react and redux on Udemy. It’s done by Stephen something. I think it’s really thorough and also covers react router. You can skip the first couple sections if you are comfortable with react already and jump right into the redux section. It’s like $10 usually. It goes on sale all the time like all of Udemys courses haha. 
TypeScript is actually really easy to incrementally adopt/approach. I took an existing project my team was working on and added a type definition file. The team loved the type checking and autocomplete (we are all on vs code). After that I started adding types in our js files. We ended up catching some bugs in the process. Finally I went ahead and converted files one by one to TypeScript. The experience has been great so far. Source: someone who used to be skeptical of TypeScript.
Same, planning to shift my automated hosting to use yarn out of the box. The moment yarn introduces `yarn publish` I'm switching for good 
for ... of Object.entries is slowwwwww. It allocated not just one needless array, but also a separate needless array for every property. Never iterate an object if performance matters. Use a Map instead if keys really are dynamic or use a prefab array of property names.
Will try this out, thank you!!
Basically, problem is I’m new to the language JavaScript so that’s why I asked for help. 
Seriously. Yarn basically fixed a cluster of crap that is NPM. Deterministic is the main selling point.
https://yarnpkg.com/lang/en/docs/cli/publish/ ?
From what I understand, you can add a new package without the lock being rebuilt (it's only going to add the new dependency) Thing is, if you modify a package.json manually, so there's a conflict of range in an existing package, the lock will be rebuilt.
bravo 👏👏 OP, I'm a little over a year in using js, and I would say yes, it is a good idea to be familiar with both styles as you will use/see both (often times somewhat mixed and not strictly one or the other). but definitely dig deeper into what interests you and be fine with using the best tool (in this case - style) for the job (as mentioned in post above) 
I’ve gotten in the habit of almost never iterating Object properties. I spend a lot of time on performance oriented JavaScript. Excerpts from what would be my style guide for hot code if I wrote such a thing: If you actually have dynamic keys and need to look up values by key quickly, use a Map. They’re faster for dynamic use and they don’t allocate a new array just to iterate over like Object.keys does. If your keys are just part of the data and you don’t really need quick lookup, use an array of objects that are either literals or all constructed in the same place. If there are a small number of combinations of keys that could occur, then you really have different types and you should probably have different code paths for each type. This advice does not apply unless you know performance matters and if you’re not sure then that usually means it doesn’t matter. But yeah never use a for loop if you can just be slow. Loops are like moving machine parts. They break and mangle fingers. The same analogy applies to `.forEach` since the only way to use it is with side effects.
I think they are saying they would want to break out after the first 5. Let's pretend there are a bajillion bajillion elements in the array. Doing the .filter() would iterate over all elements checking the condition. So yes, the filter and slice would get you the first 5 matching elements, but you aren't breaking out of the code execution after the first 5. 
Yes, that would be more logical.
You're totally right. I think I got confused when I was watching the video and it went from making the request at the time the thunk was supplied the callback. I had wrongly thought the intention was to still do that, and allow the thunk to be reused. I rewatched some of the talk, and I do understand it now. Basically a thunk is a function that takes a callback that will be supplied a result that might be immediate, or in the future. The implementation of the thunk in the example is inconsistent in how it behaves, it is possible to supply multiple callbacks after the thunk is done. Consider: function ajax(url) { var fn, data; setTimeout(() =&gt; onResponse('hello'), 100); // .. whatever function onResponse(v) { console.log('response'); if (fn) fn(v); else data = v; } return function thunk(cb){ if (data) cb(data); else fn = cb; }; } const log = from =&gt; (...args) =&gt; console.log(`${from}`, ...args); const thunk1 = ajax('blah'); const thunk2 = ajax('blah'); thunk1(log('thunk1 a')); thunk1(log('thunk1 b')); thunk1(log('thunk1 c')); setTimeout(() =&gt; { thunk2(log('thunk2 a')); thunk2(log('thunk2 b')); thunk2(log('thunk2 c')); }, 150) The output will be: ​​​​​thunk1 c hello ​​​​​thunk2 a hello ​​​​​thunk2 b [ 'hello' ]​​ ​​​​​thunk2 c [ 'hello' ]​​​​​ So before the thunk "resolves" it will just take the last callback, and if the thunk has resolved before you supply the callback, it can be used multiple times. If used incorrectly it might be hard to spot due to the inherent race condition it causes. I assume there are proper thunk libraries that take care of these inconsistencies and are unit tested to provide assurances that these sort of things are taken care of. I'm not sure if a thunk should be able to be reused in that way.
...eventually ^(^pipenv ^is ^still ^horribly ^slow)
Of course we do support older browsers, we just don't use jQuery to do it but instead use polyfills &amp; babel based on what the browser supports Also in terms of older browsers, that's becoming less and less of an issue as IE is slowly dying out. Currently the oldest browsers my clients usually require to support are IE11 and Chrome 49 (Windows XP), Sometimes IE10. And we always decide that based on their website's analytics not just because we don't feel like supporting old things
You should always know both. And depending on what push will come to shove, you will always use both paradigms on your work.
To be honest, most of what jQuery has offered in the past JavaScript now supports natively, there is very little reason to use jQuery nowadays -- as far as I know.
Vue is the only framework I know how to use (even only half decently). I can say the convenience Vue offers is absolutely mindblowing when doing everything manually on vanilla
Vue is pretty nice and clean, have it as my first and currently only framework. For others, *next time baby*.
Were you using a pre-5 version of npm? 
Full disclosure: self-submission.
Wow, sounds like you've had some painful experiences with this! Thanks for sharing some of your workarounds.
Do you mean the video? Can you clarify?
I’d be really curious why you don’t want a bundled/transpiler.
Use Yarn then
certainly the first, because it's very readable. at a single glance I see and understand what's going on in there. I can't say the same about the second one (sure, some people will find it easy to read, but easier than the first one? I doubt it)
The difference of opinion in this thread is mostly related to web application developers vs website developers.
Hey guys. If you are working with React Native, I believe you will find useful this small package on how to make your UI screens responsive \(no media queries needed\). It also supports orientation change if wanted. [https://github.com/marudy/react\-native\-responsive\-screen](https://github.com/marudy/react-native-responsive-screen)
Debuggins is not so simple due to babel defaults messing up generator/async function sourcemaps into unstoppable mess. More carefully created .babelrc allows skipping babel regenerator for development, and since node and modern browsers support generators/async natively.
Everybody can probably agree than you're more than welcome to self submit anything in /r/javascript ;)
Exactly. I would consider that adding Redux is adding a constraint on your code. You're no longer free to change the state wherever you want on a whim - it all needs to through a (bit too bureaucratic (,check `freezer-js` for an even lighter alternative)) pipeline. Functionally it doesn't change the app behaviour at all, but since all state changes follow a single pattern, adding code (as a middleware) to track all of your state changes, record them, replay them, etc becomes nearly trivial. Redux-saga allows one to take side effects into account too (http fetches, etc).
After I started using sagas, using thunks felt like breaking the redux pattern. Redux-thunk: an action is dispatched that contains an actual function, with it's own logic etc. Often that's something that you don't want to serialise over a network or store for replay. Redux-saga: an pure-object action is dispatched that executes a predefined function. Hot-reloading gets very complex though.
Not everything has to, can or should be composable. The for loop is also an order of magnitude faster, which may be relevant if you want to stay under the 100ms magic zone. Manual iteration and no abstraction are not problems. The plain old for loop is a powerful tool that shouldn't be dismissed in favor of your ideologues. That being said composability is very powerful and I recommend it highly.
The disclosure is appreciated, though. 
hmm.. this has been a feature with through2 for literal years already
Not this guy https://www.reddit.com/r/javascript/comments/8dnhpo/try_out_composition_over_classical_inheritance_in/dxosnyd/
There's no need for a disclosure. Self submission is 100% welcome.
I find a good understanding of both is ideal so you know when best to apply what you know, as most development is working with existing systems, or working with other developers who may not have such knowledge. That being said, an excellant FP resource for JS is: https://github.com/MostlyAdequate/mostly-adequate-guide
If the loop is the source of my performance woes, sure. Otherwise, nah. 
http://youmightnotneedjquery.com/ - This is a guide to modern ways of writing JS with a similar way that you would have written them in jQuery. It can help with the transition from jQuery to vanilla JS.
Current version of Angular is 5, 6 should be coming out very soon.
I was specifically answering /r/rauschma, who's famous enough, not any blog author.
As a follow up, this only seems to be the case in larger iterations anyways. Run the code from the perf test in your console and see what you get: var arr = []; for (var i = 0; i &lt; 1000; i++) { arr[i] = i; } function someFn(i) { return i * 3 * 8; } console.time('loop'); for (var i = 0, len = arr.length; i &lt; len; i++) { someFn(arr[i]); } console.timeEnd('loop'); console.time('foreach'); arr.forEach(function(item) { someFn(item); }); console.timeEnd('foreach'); Now try it a few more times with different array sizes, 100, 10000, 100000, etc... On my system, it's around the 100k mark where loops get ahead, and it gets worse from there until eventually we match what the perf test is showing. Point being, well, the same as my original point but aside from this often being a premature optimization, it might not an optimization at all until a certain point.
Now it doesn't require through2.
Ah, well that makes sense then. Should have thrown in some emphasis on *you're* ;). Of course, now that I pay attention I do recognize the name and picture in the article. 
Other frameworks, that's what often is a problem in team projects. jQuery in particular. People don't know Javascript, they know jQuery and build code or make mistakes you wouldn't do with a better knowledge of JS. Wrapping a selector result in another selector, diving head first into callback hell etc. 
Is it okay to ask what kind of css questions they asked?
Nope, the versions I tested were all 5.x releases. This was in December/January so I don't recall the exact version numbers.
I &lt;3 U
Oops, you're correct. I'd misunderstood the purpose of the package.lock.json file - looking into it this is actually an optimisation to make walking the dependency graph cheaper for NuGet.
This looks really interesting. It means I have to follow to courses at 3am till 6am. But that's something I'm willing to do :) I will contact them, thanks!
For a free resource try this - https://developer.mozilla.org/en-US/docs/Web/CSS I worked through some of it and it seemed extensive.
That's definitely better than nothing, but it really should be a core part of Pip :( Honestly, I have way bigger issues with Python dependency installation than this though; virtualenv is a perculiar solution to a problem that just doesn't exist in other languages/ecosystems (the assumption that packages are installed globally). It's like PHP's PEAR - it too assumed you'd only ever want one version of package X and that would work fine across all projects you're working on. Luckily the PHP community dropped PEAR when Composer was released. Obviously the scenario's are very different as Python depends much more on the distribution of libraries that require compilation of C / Fortran / etc code. This doesn't stop this from being a huge pain and barrier to entry to working with Python though - and given how tightly the language focuses on usability / newbie friendliness it's frustrating that this isn't mirrored in the ecosystem.
When I read about abstract concepts like this it can be hard to get my head around, could anyone give an example use case of asynchronous iterations to help understand why this is valuable? 
this is just like transform streams?
In at least the newer versions of Chrome/V8, they have optimized the `forEach` to be just as fast if not faster as a `for` for most cases. If you need some sources, I can find the V8 blog post that goes into it!
I agree that it's still widely used across websites, however the professional industry does tend to lag behind actual trends. When you've got a project in production using one technology stack, it's costly to replace it. This is the bane of my company's existence, we have clients who use versions of our product from 10 years ago, refuse to go through the costs of upgrading, and then ask us to help them fix issues in those old builds that don't exist in the newer ones. The crazy part is they seem to be willing to pay us for the support hours rather than pay to upgrade. Which... makes no sense, but that's my original point, upgrade inertia is just bad in the actual industry.
You could listen to a queue (sqs) using only a for loop
Just a guess, but I wonder if [onChange()](https://developers.google.com/apps-script/reference/script/spreadsheet-trigger-builder#onChange()) might be a better event?
Premature Micro-optimisation!
Don't take this the wrong way, but this is easily googled. For example: https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75 (literally the first result) There are tons of sites that give explanations for simple topics like this, so you might want to give things a quick search on google before asking on this subreddit.
http://wellpaidgeek.com/2017/08/02/javascript-var-const-let-whats-the-difference/
`var` is the original way to declare variables in javascript. Anything declared with var is scoped to the function it's declared in. For example: var a = 1; function myFunc() { var b = 2; if (true) { var c = 3; console.log(a); // works console.log(b); // works console.log(c); // works } console.log(a); // works console.log(b); // works console.log(c); // works } console.log(a); // works console.log(b); // doesn't work console.log(c); // doesn't work But most languages don't use function scope for their variables, so this can be rather confusing. Most languages use block scope instead. So `let` was introduced to the language with block scope. I recommend you always use let instead of var. let a = 1; function myFunc() { let b = 2; if (true) { let c = 3; console.log(a); // works console.log(b); // works console.log(c); // works } console.log(a); // works console.log(b); // works console.log(c); // DOESNT WORK WITH LET } console.log(a); // works console.log(b); // doesn't work console.log(c); // doesn't work And `const` is the same as `let`, except you can only set it once. Note that if you use this with an object or an array, that object or array will still be mutable (ie, you can change what's inside it), you just can't change the reference to something else. const a = { hello: 'world' }; a.hello = 'universe'; // works; a = { something : 'else' }; // doesn't work.
Lol laughed so hard reading this but i'll definitely look into it. I did read about animations from them and it actually was quite good. so maybe why not?
Because historically they've been a bad resource for information. Especially compared to the MDN instead.
I wonder how well this can be used in place of observables, and how big the perf hit will be
ohh ya!! the first thing my professor told me during my college days was and I qoute "w3schools is not affilated to w3c and never ever use that site. you are better off guessing what a function would do rather than reading from w3school"
I developed a program which listens to an MJPEG stream and processes them for motion. The code had to read the stream and determine where the beginning and end of each JPEG image was in the stream, and then take the next image frame for the comparison. In order to do this you need to read the stream and find the JPEG boundary. Once you have the boundary you need to yield the results to a processing function. The code ended up being complex, but with this method it might not have had to be.
Shell scripts: processing stdin, filtering, etc., as you would in a Unix shell.
Indeed. Until today, handling streams in Node.js was incredibly clumsy.
JS Script? Javascript Script?
What is the difference between this and an RXJS observable stream? My only issue with streams right now is that when they get updated (a value is added), it seems to completely reset the stream, instead of just pushing the new data through the function, and adding it to the result. 
Totally agree if you use native generators in development, Redux saga is awesome both in testing and debugging.
Hi /u/fw5devse, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/tenthirtynine, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/offtopic_lockwood40, For javascript help, please visit /r/LearnJavascript. Thank you!
Can you please tell me the reason?
Okay thanks 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Not my project, just found the proposal interesting.
Hi /u/Ragzzy-R, For javascript help, please visit /r/LearnJavascript. Thank you!
jQuery was also around because DOM API is crap, even without inconsistencies, and jQuery's API was pretty OK. But jQuery was concieved in times od older language standards (and no transpilers), so since it doesn't work nicely with new functionality like i.e. arrow functions, and newer web API's were released (like fetch), jQuery's API became much less attractive over time.
High level, you know how a promise returns one value for something done asynchronously? Async Iterators allow you to return multiple values.
NSP is great, I also use [RetireJS](https://github.com/retirejs/retire.js/) as part of our CI Pipelines for projects using JS. Unless this new `npm` functionality does something I'm missing that isn't already covered by `nsp` &amp; `retire`, I don't see any need to switch to it, and I'll continue happily using yarn.
On mobile, but from a quick glance you're loading the entire file into memory? Try to parse it in chunks using a stream
I'm getting kinda sick of backend developers telling frontend developers that they don't need a framework. I'm glad it worked out for you Adrian, but I dare you to spend a year at my job and tell me that JS frameworks are unnecessary.
You may find that it will be a lot faster to copy the data into a JavaScript array, work on it in memory and either write out the resulting data to a new file/worksheet or overwrite the original contents. If you are working with google sheets, they are extremely slow at any scripting and I suspect that it will recalculate the entire sheet after every change, so this should not be a surprise. A sheet of 15K rows won't consume that much memory and looping over it with that kind of logic should be quick, but you can further speed it up with typed arrays (if that's possible).
&gt;On mobile, but from a quick glance you're loading the entire file into memory? No, it's copying data one line at a time. The only thing it's grabbing all at once is a list of row numbers.
Hasn't this been posted numerous times already?
I'll give that a go, thanks!
Could you explain your issue further?
For beginner, or some one who know these things theoretically. It can very difficult to wrap head around these all new concepts and their implementation. So much to learn and people post about stuff I can't even imagine of doing. Can get bit overwhelming and discouraging when self learning anything. Like right now I am trying to learn full stack web development, I know html, css, basic of Javascript. But then there is bootstrap, there is material design. Then there is ES6, then maybe could move to Node.js, Sql, no sql. Then maybe React js. Also am I supposed to remember all the syntax, wrote notes of everything or just watch tutorials and follow along. There are so many tools like web pack, something for testing etc. Then should I make projects, or do something in open source which itself seems so difficult. But I do want to learn stuff and turn my ideas into projects but how. Could any one please give some advice please?
After reading the examples 10 times over and realizing what this is actually doing for us I think I’d really like this. Do you know if there’s a Babel plugin for this to mess around with it?
&gt; to their own registry
I got this running your code as is: forEach closures took 455ms forEach simple took 478ms for iteration took 74ms On latest version of Chrome. Judging by your 66ms for the loop your cpu seems solid, but you've something going on making a mess of those other operations. 
Hi /u/koehr, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Its at the bottom of the page
[DOM API vs jQuery](https://github.com/nefe/You-Dont-Need-jQuery). Other than 'parentsUntil' and 'closest', neither of which I've ever needed to do, I don't see any benefit to jQuery over DOM beyond reducing the character count. And there's a major cost in speed you pay for that.
Sorry for not being more specific. Using combineLatest with streams in RXJS, I imagine it should go a little like this: You have 100 people standing in line for a concert, you let them go in, and then eventually, 20 more people show up to stand in line. My thought would be that you would just add those new people to the current count of people attending the concert, instead of having to go through each person that is already in the concert, and have them get back in line and then let them back in. 
I love pattern matching so much. So clean. I did a quick tour of Elixir and it was one of the features that I was quite envious of. 
Fact is the V8 team spends all of their time optimizing this stuff so we don't have to worry about. Honestly, I would focus on getting stuff done, and readability, and when you notice things are slow you dive into the code. In my experience slowdown is always larger, more low hanging fruit than loops (unless you have lots of nested loops).
Hi /u/AshenLordOfCinder, For javascript help, please visit /r/LearnJavascript. Thank you!
not well, it is literally impossible now to merge 2 async iterable streams 
Omg, this works perfectly. You're amazing! Thank you!
Not the video. https://itnext.io/how-javascript-works-in-browser-and-node-ab7d0d09ac2f What we are interested in is stack. Stack is LIFO (last in, first out) data storage which store current function execution context of a program 
I’ve never had a coding job before. Hire me I’ll give you a hand 🤙🏼
I too am interested in this..
ok thanks
I could always use help converting new-hotness to declarative code that doesn't take ten reads to understand.
While I'm sure some people can provide good examples, I'm not too sure if they will be useful to you. I think that understanding architecture and domain modelling will come naturally when you are actually presented with the problem of modelling a huge domain and/or when you actually have to deal with a huge codebase for a long time.
The built-in `filter` goes over the whole array, but that's kind of an implementation detail, right? Nothing stops you from writing a `filter` with the breaking behavior of `for`: &gt; let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] &gt; let isOdd = (n) =&gt; { ... console.log(`is ${n} odd?`) ... return n % 2 ... } &gt; numbers.filter(isOdd).slice(0, 3) is 1 odd? is 2 odd? is 3 odd? is 4 odd? is 5 odd? is 6 odd? is 7 odd? is 8 odd? is 9 odd? is 10 odd? [ 1, 3, 5 ] &gt; let R = require('ramda') &gt; let firstThreeOdds = R.compose(R.filter(isOdd), R.take(3)) &gt; R.into([], firstThreeOdds, numbers) is 1 odd? is 2 odd? is 3 odd? is 4 odd? is 5 odd? [ 1, 3, 5 ]
Here's my best-effort as I'm trying to learn what that jargon means myself: **Presentation layer** is the UI of a specific _thing_. In my experience, it is the View layer ( so React, Vue, Angular templates/components ): const Tab = ({ text }) =&gt; &lt;h2&gt;{text}&lt;/h2&gt; **Business layer** is the _stuff_ that makes your business special/unique or this specific project different than another one. An example could be: const secretAlgorithms = { a: () =&gt; { ... }, b: () =&gt; {... } } **Data access layer** is the part of your code that describes how to get access to data. I like to keep this generic: const get = (url, args) =&gt; fetch(url, args).then(res =&gt; res.json()) **Service** is a _thing_ that represents a _thing_. So you might have a `User` service that encompasses the data access layer, view, and business logic of the `User` _thing_ and anyone that needs to use that _thing_ doesn't need to know about it, just the API that the _thing_ exposes: class UserService { view() { ... } logic() { ... } } **Domain** is a _thing_. It is like calling a forest a forest. The forest isn't really _a_ thing but more of what we call the grouping of trees. An example might be the `User` domain. It is kinda like an object/kinda not. Still not sure how to express this is code. **Domain Entities** are the trees in the forest example above. &gt; how these architectural concepts can be applied in a piece of software that has no direct effects on a UI or a database, like a library...still has a public API, might do some heavy and varied computations, store data You could do something like this: // data layer const getFromState = someApi =&gt; some answer const setToState = someApi =&gt; some answer // business logic const getUserName = state =&gt; name const getSomeOtherStuff = api =&gt; answer // Services const createUserService = api =&gt; UserService It is just a way to keep the different parts of your application separate, instead of having it all done in a single place. *please someone that knows more than me correct me so I can know too!* 
Have you tried using the scan operator?
This is how I tend to think architecture nomenclature translates to simple code: //// start application layer // model (aka data access, service) async function getData() { return 'hello'; } // view (aka presentation layer) function home() { return `&lt;button onclick="dispatch(greet)"&gt;Click me&lt;/button&gt;` } function greeting(data) { return `&lt;div&gt;${data}&lt;/div&gt;` } // business layer (i.e. how to glue model and view when the app is given a directive such as "run the greet() action") async function start() { return home() } async function greet() { return greeting(await getData()) } // entry point dispatch(start) //// end application layer //// start framework layer // controller async function dispatch(fn) { render(await fn()) } // view (implementation) function render(tpl) { document.body.innerHTML = tpl } //// end framework layer 
Chrome developer tool. You need to inspect the elements, see the plugin usage etc. 
In my experience (having studied Java and using C# for Kentico CMS); the languages will help you with syntax and structure of your code. They will not, however, help you get to grips with the finer workings of JavaScript. 
Finally released version 1.2.0 -- it can rename files from inside the app! http://videohubapp.com/blog.html
IMHO, it will help you to understand language itself, but the concepts behind node.js (server-side js programming) and browser/DOM API are the real things you'll have to dig into. Also, JavaScript (especially before ES6) has lots of concepts unfamiliar to other popular languages, e.g. event loop, prototype inheritance. Good luck!
I use lodash to iterate objects and arrays.
You can't master all these things from scratch. It's enough to know basics and solve problems step by step. If you want to do project, break things into small pieces and start from there. Also do TDD in javascript, if you add code to project all the time, code becomes very buggy.
&gt; I supposed to remember all the syntax No. Just keep writing code, and you'll get better.
 this is not what you think it is. It does NOT refer to the object that you are using, it refers to the execution context (i.e. the method that called the object that you are using)
Start small. Something like a static website where you only worry about styling until you feel comfortable enough with css to move forward. Next, add some small pieces of JavaScript that use raw DOM functionality for showing and hiding content, dynamically updating some text, etc. When you feel like you understand the DOM well enough to dive into programming more, do that next. Start with JavaScript: the Good Parts next. Once you've read the book, use your knowledge to make your website a bit shinier and more interactive. So now, you've got a static webpage with some nontrivial level of interactivity and a good understanding of how the underlying tech works and you can start learning Node. You already know JS, so Node won't be too hard. Follow any of a dozen express tutorials and make a simple web server that outputs hardcoded JSON. Consume that json with your webpage somehow. Next, add the opposite: send json to your server and have it returned back to you later. Now you've got all of the core pieces in how a modern website works and you can start investigating React or whatever. Don't worry about anything except the next step in front of you.
I got this all re-written and working and it went from taking over an hour to taking roughly 30 seconds. Thanks again for the help!
You'll get a long ways on your knowledge of C# &amp; Java. That said, JS is more different than it may at first seem. JS has Lisp \(&amp; thus a certain version of FP\) in its DNA; the syntactical similarities with C\-based languages often masks how different JS is \(or can be\). Some of the recent\-ish \(ES6\+\) additions to the language, especially classes, will mean the learning curve is less steep, and you'll be able to do more with the knowledge &amp; mental models you've developed in your work with OOP languages. But that knowledge and those mental models may also mask the specificity and weirdness of JS. That will probably lead to some gotchas down the road \(e.g. how \`this\` works, prototypical inheritance, closures, dynamic typing footguns\). It would also be a missed opportunity to learn about some really interesting programming concepts. So you'll get productive quickly, but keep your eye out for JS weirdness, and take the opportunity to learn some of the wonderful weirdness of the langauge. For the basics, you can't really do better than You Don't Know JS: [https://github.com/getify/You\-Dont\-Know\-JS](https://github.com/getify/You-Dont-Know-JS) And for the weirder, wonderful world of FP, check out The Mostly Adequate Guide to FP: [https://mostly\-adequate.gitbooks.io/mostly\-adequate\-guide/](https://mostly-adequate.gitbooks.io/mostly-adequate-guide/)
can you post your solution for us newbies to learn from, thanks in advance!
 $ nodejs --version v4.2.6 
I don't know much about node releases, but pretty sure that's the old legacy branch. Looking at the website, current build is 8.11.1 for the stable supported release, 10.0.0 for latest and greatest. Maybe give that an update and try again.
could someone do a side by side of this feature vs. what it would look like pre-Node 10? 
The readline module should really support this interface, instead of having to implement it yourself. https://github.com/nodejs/node/issues/18603
My guess from reading the article: pre-v10 const https = require('https'); const res = https.get('https//example.com/example.json') let data = '' res.on('data', chunk =&gt; data += chunk) post-v10 const https = require('https'); const res = https.get('https//example.com/example.json') let data = '' for await (const chunk of res) { chunk += data } This comes in handy so you don't have to resort to workarounds like
Sure, I'll agree with that, but I kind of doubt the person who said "filter and slice" wasn't talking about the built in functions, which is why I wanted to clarify that it would iterate over them all. I didn't know rambda could do it like that. That is pretty cool. 
Not just famous, *JS* famous
Maybe that's so but if you were writing a JavaScript library that may be run in many different environments isn't it important to know how it may perform using the default package in current operating systems?
What does this have to do with a slow system? The issue isn't that your system was slow overall, it's that you're using an old version of node lacking optimizations. You can update that on any old system, the hardware isn't the issue. If you want to intentionally use end of life software, that's your business, I was just explaining the source of your odd results. 
:( not rendering very well on my macbook chrome. the frogger doesn't seem aligned with the rest of the game and is randomly disappearing constantly
Unless of course it's bound or part of a class instance.
I already do this with \[ReactiveX\]\([http://reactivex.io/](http://reactivex.io/)\).
Same \- having issues on my Mac using the latest version of Chrome
I will admit that the first time I saw `virtualenv` it was a bit weird, but it's so much better than `go` and it's `GOPATH` situation
Just avoid this alltogether
It doesn't work on Firefox either :( 
My friend Matt was looking to automate several of his NPM modules, so I wrote this up for him, and anyone else who would find it helpful! Automate all the things!
use [some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) instead of map
This is just a new syntax for consuming iterables. RXJS is a full Observable library. [https://github.com/tc39/proposal\-observable](https://github.com/tc39/proposal-observable) is the Observable proposal. 
The point is that this is a native feature now.
Since you're just checking if it's present you could use [find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find). If there's a match it'll return the first match, if not it'll return undefined. obj.find(x =&gt; x.hasOwnProperty("start_date")) If you want it to return true or false you can do the following for example. typeof obj2.find(x =&gt; x.hasOwnProperty("start_date")) !== 'undefined' It's not necessary though, since undefined evaluates to false.
No just learn it
You gotta ease into it. Slowly introduce the new language features and make sure everyone understands what's happening in those first usages. Took us a minute at work for everyone to get comfortable with class properties and why they're powerful (cleaner binding methods of to the class by using class property fat arrow methods, for instance), but once everyone's on board, it's like we all level up a bit. Just gotta make sure no one is being left behind. That said, I'm seeing a _lot_ of proposals. Hope the ECMAscript peeps make good choices when picking what to add to the language. I'm excited for the bind and pipeline operators, personally.
He is trying to tell you that your Node version is 4 major versions behind LTS and 6 behind Current.
Your script is in your head, isn't it?
Awesome! Love this.
I've never seen anyone **write** a value into this window property before: window.devicePixelRatio = 1; Why do this? Wondering what effect this has on HiDPI/Retina screens. 
How are you including the script in the page? It works when I run it: https://jsfiddle.net/02hx65hh/, so I'm guessing that the JS isn't actually being loaded. If that's the case, you would probably see a "hidePopUp is not defined" entry in the browser console when you click the button - do you see anything there? (Also, you're missing the / after the second `&lt;center&gt;`, although I don't think that's whats causing the issue). For the reddit formatting, you have to indent everything with four spaces for it to be treated like code.
You might want to use /r/learnjavascript for this. I tried your code and it worked perfectly fine. Did I miss something? [https://jsbin.com/yuzudadomu/edit?html,output](https://jsbin.com/yuzudadomu/edit?html,output) you can check here.
Exciting times we live in for sure. It helps to have at least a basic understanding of the NodeJS Event loop to understand how this happens... https://www.stackchief.com/blog/The%20Node.js%20Event%20Loop
Originally I was linking to a JS page but I put it directly in the head as part of the problem-solving process. Since the page is pretty short, I'll just post the whole thing: HTML/JS: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;This World We Call Home&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="../ThisWorldHomeCSS.css"&gt; &lt;link rel="stylesheet" type="text/css" href="JackieCSS.css"&gt; &lt;link rel="shortcut icon" href="../favicon.ico"&gt; &lt;script&gt; function hidePopUp() { document.getElementById("controls").style.display = "none"; console.log("PopUp hidden."); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;Jackie - Level 1&lt;/h2&gt; &lt;div id="chooseChar"&gt; &lt;ul&gt; &lt;li id="currentChar" title="You are currently playing as this character."&gt;Jackie&lt;/li&gt; &lt;li&gt;&lt;a href="tyler.html"&gt;Tyler&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="emily.html"&gt;Emily&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="canvas" id="gameArea"&gt; &lt;span class="container" id="jackie"&gt;&lt;img src="JackieSprites/jackieFront2.png"&gt;&lt;/span&gt; &lt;div class="room" id="broRoom"&gt;&lt;/div&gt; &lt;div class="room" id="bathRoom"&gt;&lt;/div&gt; &lt;div class="room" id="jackieRoom"&gt;&lt;/div&gt; &lt;div class="room" id="parentsRoom"&gt;&lt;/div&gt; &lt;div class="room" id="libraryRoom"&gt;&lt;/div&gt; &lt;div class="room" id="livingRoom"&gt;&lt;/div&gt; &lt;div class="room" id="diningRoom"&gt;&lt;/div&gt; &lt;div class="room" id="kitchenRoom"&gt;&lt;/div&gt; &lt;div class="popUp" id="controls"&gt; &lt;pre&gt; W = up A = left S = down D = right Click objects to interact with them. &lt;/pre&gt; &lt;center&gt; &lt;button onclick="hidePopUp()"&gt;Okay!&lt;/button&gt; &lt;/center&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- gameArea div --&gt; &lt;/body&gt; &lt;/html&gt; CSS: #gameArea { outline: 2px solid black; position: relative; left: 100px; top: -72px; width: 1000px; height: 750px; background-color: dimgray; z-index: -10; } .room { border: 3px solid black; } #jackie { position: absolute; top: 75px; left: 469px; z-index: 10; } #broRoom { position: absolute; top: 100px; left: 50px; width: 200px; height: 250px; background-color: mediumvioletred; } #bathRoom, #jackieRoom, #parentsRoom, #libraryRoom, #livingRoom, #diningRoom, #kitchenRoom { /*same as broRoom but with different positioning/background colors; the only exception is that livingRoom has a z-index of -1 (already fucked with the z-index on the popUp div so I don't think that's it)*/ } .popUp { position: fixed; width: 300px; height: 150px; left: calc(50% - 150px); top: calc(50% - 75px); background-color: lightgray; border: 1px solid black; z-index: 100; } #controls { display: block; }
RemindMe! 1 day
I will be messaging you on [**2018-04-27 04:09:42 UTC**](http://www.wolframalpha.com/input/?i=2018-04-27 04:09:42 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/8exzz7/build_an_instagram_clone_with_react_native/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/8exzz7/build_an_instagram_clone_with_react_native/]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
RemindMe! 2 Days
RemindMe! 3 days
&gt; The issue isn't that your system was slow overall, it's that you're using an old version of node lacking optimizations. I'm using the default package provided with my operating system. A long-term release - and that's significant because many servers out there are running LTS releases of Ubuntu. &gt; If you want to intentionally use end of life software, that's your business If I'm going to write software that many other people are going to run then I best optimise it for their experience. Thus my experience in testing the various types of loops are significant. Now you can close your eyes to reality and pretend everything is like your bleeding-edge home environment - which is great if you're just writing software for your own personal use. But please don't use your own experiences as a basis for writing portable software for widespread use without thinking of potential backward-compatibility consequences.
you can pastebin somewhere else
Don’t RemindMe!
Not quite. You iterate over it, like an array, but wait for values one by one, like a promise. Another way to think of it is an event emitter that either emits a next or error event.
Oh, I see.
I agree with the other replies: start small. * Browsers: learn JS language basics, React, webpack (as little as possible, shouldn’t take long). That’s all. * Server: write a few shell scripts in Node.js to see how it works. Then maybe a simple server.
That’s what the article starts with.
RemindMe! 1 day
Wow this is over engineered, I get that you are using a simple example to show how everything works but articles like this is why junior developers try and add Redux to every React project.
!RemindMe 10 years
I was a bit surprised to see that arrow up didn´t work here? 
It is the same like saying we don't need async/await because the same may be done with Promises.
&gt; strengthen my knowledge in JS Yes. Syntax alone is only a small part of the language, in Javascript especially. You have quite a lot to learn first - try to get a decent grasp on how the language itself works first before moving on to libraries and frameworks.
RemindMe! 2 days
Learn about how ecommerce sites work, what technologies are used (paypal, woocommerce etc). Also learn to improve your general programming logic with javascript.
Thanks for the feedback :\) arrow up event is not added... will definitely add it :\)
Contributions welcome, especially anything that makes the demo look better.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://d3js.org/) - Previous text "d3" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://d3js.org/) - Previous text "D3" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Thanks, wasn't sure but you confirmed it :)
Thanks you for the source that confirm it, didn't read that one so I missed it. Obvious with that script :D
How is it a JS console if all it can do is calculating? var i = 1; i returns undefined in both cases
Hey guys, I have a better link for you: https://github.com/FrontendMasters/front-end-handbook-2018 You can download FrontEnd Handbooks 2018 not only in PDF, but also mobi &amp; ePub. Also no need to subscribe to a newsletter. Enjoy
Bummer. This was the #1 thing lacking in NuGet for me and I was hoping I had missed something!
I guess I should read more closely. Appreciate all your JS posts and books. They’re great. 
That wasn't the point, I know that var i = 1 =&gt; undefined, but i afterwards should return its value, 1 in this case, but doesn't.
Sir this does not happen even in chrome debugger.
Worth exploring! Keep up the good work
What is with the reminders?
Now that a nice link, thx.
you're being very pedagogic by pushing your audience to practice those skills [s/Javsa/Javas/g](https://regexpal.com) 
? Ofc, if I say let i = 1; i It should just say 1, but your page outputs undefined for me
going to pitch idea to vcs. insta for X.
So InstaSteem? Not sure if its catchy enough. Add more Uber.
I like https://regex101.com/ It provides a quick reference for many regular expression constructs and it explains how each expression in your regex matches what. By far my favourite.
Steemygram - Uber your Photos into the Blockchain 
Is it a product or platform? 
‘class‘ is es6 and perfectly declarative. 
pretty neat
Note: i am not an author, i just found this in the authors [original article](https://habr.com/company/jugru/blog/354014/). I would link it in the title instead, but it is in russian. Worth reading if you understand it throught!
RemindYou! Take out the trash
Talking about [these](https://github.com/tc39/proposal-class-fields/blob/master/README.md). I guess they're calling them fields now.
use google translate. it does the job. article is sick, dude did an interesting job. nice explanation.
Great! There was much needed some "competition" for FullCalendar! I'm just starting a project that needs something like this. I'll give it a try !
Yeah those are unintuitive and terrible.
Cool, thanks for the feedback. Yes I know the questions basically ask the same question, but there is a good reason for that 😜. 
The new version of Reddit uses React. Bootstrap is great but dated. Most of Bootstrap jQuery is about \~5 years old, meant for browser compatibility. I think jQuery will be the go\-to solution for devs who don't have a webpack/gulp set up in place or might not have experience with ES6.
I recommending building something, or simply anything. Find a small project you can do, like a web calculator using JS, and simply complete the project. From there, you can complete progressively larger projects, and focus on what you are struggling with. IMO programming is all about learning through failing many, many times until you understand the correct way to do it. Nothing will substitute for daily practice.
RemindMe! 2 days
Hard disagree there.
To some extent it’s also about learning underlying principles. Most of the abstractions we have today are built upon principles and patterns years ago. Being able to recognise these patterns quickly enables you to short circuit the learning process - this is, in my opinion, the key to learning how to learn.
I think the best way to learn would be to start a couple of personal projects that make use of JavaScript, and work on them as you study. For example, make a game, a simple tool, an interactive website, and so on.. It doesn't need to be anything super complex, just something simple so you can get a feel for how the language works. It might not be easy, but the struggle and "AHA!" moments you'll have in the process will help reinforce your memory. I have a few tips if you plan to start some personal projects though. 1. Don't be afraid to make mistakes; it's part of the learning process. 2. Having a reference on hand will make it easier to refresh your memory and know what you can use. I personally recommend [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference). 3. If something isn't working as it should, open up your console \(F12 or CTRL\+SHIFT\+I\) and look for any errors. There's usually a link to the far right of the error that will show you where the error occurred. 4. If all else fails and you're stumped, try googling for a solution, and if that fails you can always ask for help.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) - Previous text "MDN" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Thanks. I was worried I’d forget. 
the equal sign and semi-colon don't bother you? How do you explain this sudden convention shift in a way that someone can understand and remember when it's correct to write a class property this way?
First, let me say, what you are experiencing is totally normal. Coding has a learning cliff, not a curve. You need to build a large foundation before being able to do anything at all. I promise you that one day, out of nowhere, everything will click and it’ll be 2nd nature. And that is one hell of a satisfying feeling. Now, in my opinion, autodidacticism is the best learning style. You learn faster, it’s easier to stay motivated, and you don’t waste time on useless curriculum. However, it does have a few weaknesses. Case &amp; point, you don’t know what you don’t know. I would recommend finding a high quality complete online course. I liked the JavaScript essentials course on TylerMcGinnis.com. But, there are tons of them out there.
This is a really neat project. I was excited to see that I was able to move a few times before the game froze. If you're interested in Heroes of Might and Magic projects, check out this open source engine rebuild of HOMM3 https://vcmi.eu/
If you're planning to add more options, I'd suggest using bit flags instead of strings for them.
Solved it by doing some more separation of my code. All code regarding the API in it's own module, totally separate from the code managing the UI.
I think employers are going to care about your portfolio projects and skill level, not what online courses you did. Personally, I've been doing Udemy courses, $10 USD each. Probably any of these options would be okay if they help you build a solid portfolio and skills.
I have developed a tool for js testing called [BaseT](https://github.com/Igmat/baset) - it's still in progress (only ~40% of planned features are ready), but it already could be useful in some cases. There is also [an article](https://github.com/Igmat/baset/blob/master/docs/Is_TDD_wrong.md) that explains motivation and some ideas behind this tool. I would love to hear any kind of feedback:)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Igmat/baset/.../**Is_TDD_wrong.md** (master → 4fa2d24)](https://github.com/Igmat/baset/blob/4fa2d24e81adc42d5b15b8b904cf2533541e1b75/docs/Is_TDD_wrong.md) ---- 
Udemy is GREAT though I have not found any course with 1000lines of JS in a project.... 
Wow, I loved this game back in the day! So cool to play this again. 
&gt; the equal sign and semi-colon don't bother you? No, not at all. &gt; How do you explain this sudden convention shift in a way that someone can understand and remember when it's correct to write a class property this way? It looks like a variable declaration, just without the var/let/const keyword. Classes already have some pretty unique syntax with methods looking like the object method shorthand, but not being comma separated. I don't think this additional feature is going to throw people for a loop because it's unique to classes. Also, not necessarily the best argument but it's worth mentioning that the whole class syntax [heavily resembles Java](https://docs.oracle.com/javase/tutorial/java/concepts/class.html), which has class fields. It's not like the authors pulled this syntax out of thin air.
I can't figure out how to get to github from the npm site. Can't find any links. Could you make the gif show the results for more than 0.5s? I can't read enough to see what's happening before the gif restarts.
Do a fullstack MERN or MEAN course. They can get quite complex for newbs. I'm partial to Stephen Grider. Anyways, as far as I'm concerned, the courses should really just be references for using various technologies. You don't learn until you start attempting your own apps with those technologies, and then you start to have the opposite problem--"shit, how do I break up this 1000 line file?"
You probably need to ensure that you learn binary, some libraries and a bit about environment, and not just syntax. I recommend that you try a good book, and look up fundamental concepts of computer science online as it is necessary. The idea of getting help from a friend for learning a language as a beginner was even suggested in the book on C by Ritchie and Kernighan. I learned with *Javascript Pocket Reference* by David Flanagan, but I had some computer science experience already. The *You Don't Know JS* series might be good, but I've only been trying one of the books, and it's not entry-level. I don't mean to put you off from these books, but I just don't know how beginner-friendly they are.
I just use the git-flow methodology on all projects, and now only WIP feature branches are the only branched ever committed potentially broken for sharing with others.
This is amazing
Sure... got the problem now. Happened for with let not var. To be honest I don't know how to fix this :\)
I was on your spot, I had no idea how or what an argument is or what it actually does in a function, manipulating data between functions and well basically, I found the amount of knpwledge needed to get basic doothold was unpallatable at the time. But now the brightside, EVERYTHING cascades and falls into place, you just newd to be inquisitive, stop analyzing, just write and do console.log (); on everthing you do.
I hate that shirt so much. I love and I'm buying one, but it sucks and I hate it.
Lol I like it. What don’t you like about it?
Hi /u/TheWinterMirror, For javascript help, please visit /r/LearnJavascript. Thank you!
Interesting. I hadn't heard of this concern before. Hope I have some time to dig into this more soon!
If you're working in a team you should really just have CI set up for all of this. Hell, if you work by yourself you should have CI set up for all of this.
This one's also good: [https://regexr.com/](https://regexr.com/)
I think you're onto something here. Can it draw 7 red perpendicular lines in blue, green, balloon and kitten?
It shows the assertion errors. U can run couple iterations and then analyze the errors. 
Together with CKEditor 5 v10.0.0 we released plugins enabling real-time collaborative editing in CKEditor 5 :) Check out the demo on https://docs.ckeditor.com/ckeditor5/latest/features/collaboration/overview.html
Husky prevents unnecessary CI runs because it'll fail before commiting. So it even saves your ass and saves you the trouble of squashing commits just to fix linter.
You may want to consider react portal. We had a problem recently with nested modals displaying underneath other page content, react portal fixed our issue.
Just dropped a new version! Still uses proxies, but now you can use it as a tagged template literal as well :\)
&gt; @app.route("/charting", msonethods=["GET", "POST"]) change this to methods=["GET", "POST"]
It doesn't list a github link, normally that link would be in the right column. A competitor of GitHub could've been used, such as BitBucket, or the creator simply didn't share the github link.
[https://github.com/whtswrng/ohhimark](https://github.com/whtswrng/ohhimark) i will try to fix that
Haha kudos :) 
It's the first stable version of CKEditor 5. We needed to skip v1.0.0-v9.0.0 to avoid collisions with CKEditor 4 and previous versions. Sorry for the confusion.
Wish it was componentDidLift() { this.setState(({ gains, pump }) =&gt; ({ gains: gains + pump })) } 
Impressive ! Thank you so much for releasing this under MIT.
Yes, and now type a, it should give you its value
ah, I misunderstood the problem. Nevermind then, my bad. Thought you were saying it should immediately have printed the value of the variable rather than undefined, which doesn't make a ton of sense. 
Thanks for sharing with us. Sometimes we get lost in web site stuff and forget how powerful the web platform has become in the last few years. We need more examples like this.
Oh, no, indeed that would be weird behavior 
&gt; Goal Oriented Action Planning Thanks
Holy Mother of that's neat as fuck. 
Uset setTimeout and keep a reference to the value returned from setTimeout. If they click the button, call clearTimeout with that value you stored to make sure it doesn't fire after they click the button.
egghead.io
No, I mean use setTimeout. https://developer.mozilla.org/en-US/docs/Talk:DOM/window.setTimeout
This looks really good. Good job to all those involved.
Thanks for the inspiration :-)
Stephan and Max are great, that's why you got my upboat, but Brad Schiff and Andrew Meade are also fantastic and David Katz is putting in work to get on their level, not to mention God's gift to YouTube learners Brad Traversy .
I am curious myself. Looking it up on stack share did not seem to give any answers ether... https://stackshare.io/medium/medium-com
[This](https://jobs.lever.co/medium/005f4ea7-b20f-4ac0-bbff-ed4de2b69e8f) may be of interest. They say: &gt; and we’re now creating a stack for the future using modern tooling like React, Jest, and GraphQL. And they ask for experience with React and GraphQL.
loljs 
These are the best/worst issues. I love them, but man they can put a whole day into WTFery. 
Thanks for sharing, this might be one of the most obscure javascript-related "bugs" I've ever heard about.
I know it's too late, but it's documented. If you are reading plain old strings off `data-something` attributes in the DOM, and you want them to just be strings and not ever converted, use the method `.attr()` and not `.data()`. &gt; To retrieve the value's attribute as a string without any attempt to convert it, use the attr() method. -- http://api.jquery.com/data/ This is because the `.data()` method tries to convert the item as a JSON object so that `data-something='{"a":1, "b": "mouse"}'` or `data-something="3.4"` or `data-something='[1,2,3,"go"]'` all return data of the correct type. `Infinity` is a number. Note that in the case of strange values like `NaN` or `Infinity` it would have *still* worked if you convert to a string before doing further processing. It would just be the long way around and completely unnecessary.
/r/loljs
You can check out my little project I've managed to get working across the various unit to end-to-end levels: https://github.com/chooie/automatopia-nodejs I would recommend looking into this project: http://www.letscodejavascript.com/. James Shore is a great person to check out for this sort of stuff: https://github.com/jamesshore/lets_code_javascript https://github.com/jamesshore/automatopia
This is a really neat project. I'm guessing you had to do pretty much *all* the rendering code from scratch (buttons etc.) with `&lt;canvas&gt;`, or do you try and use HTML elements where possible?
Dude for real this is one of my favourite games of all times. I grew up with three siblings and we played this soooo much, especially during rainy winter weekends. Good times, will check out the source for sure, thanks for posting
More information: * PIXI.js for rendering * WebSocket for netcode * Node 9.x on the back end * https://github.com/Sinova/Collisions for collision detection * https://github.com/uNetworking/uWebSockets for backend socket management * The rest of the engine is custom JS using an ECS architecture This is something I've been working on as I learn JS (over the past 6 months or so), and wanted to share the functioning prototype and readable client file for any feedback. One day I aim to make revenue generating games that are cross-device and platform, and hope the rapid way JS is developing can broaden the webgame slice of the industry pie.
It might not be an option to ignore it.
Yep!
FreeCodeCamp.com is the superior choice.
Hi /u/Comradical_, For javascript help, please visit /r/LearnJavascript. Thank you!
This is a problem of a user not understanding a library's API. JS has its faults but this isn't one.
In similar news, I bet there are a lot of people with "Null" in their name. On SNL there's [Luke Null](https://www.youtube.com/watch?v=haM2Ll2ysY4) and everytime I see his name in the credits I think about the possible crap he's going through online. It probably doesn't affect JS, it's be more of a MySQL issue.
obligatory https://xkcd.com/327/
[Also related article about people named Null](https://www.wired.com/2015/11/null/)
Until some celebrity names one of their kids Infinity of course.
I hear they've been getting ready for battle. Some kind of Infinity War
So what if you'd modify the current logic to first convert to lowercase strings before reading the value?
Over 15 years ago when I started working at a place that worked with names and addresses, I would regularly copy the output from SQL Server into Excel, then find and replace NULL. It didn't take long before I learned Null was also a last name. Oops. 
I’ve built many front end tools and projects with a front end testing workflow using chai, mocha, and Sinon and to be honest I’ve yet to find a seamless and fast enough workflow. It’s kinda been hell testing on front end because in order to get a workflow similar to backend/cli testing you must rely on various tools (e.g. karma, selenium) that speak to browsers for test execution and reporting so that you’ll be able to run tests from CLI and in CIs and get proper coverage reporting. The problem is that these tools are very complex, rely on many dependencies, are not very stable, and mostly weakly documented so it’s very hard to get a seamless out-of-the-box experience. Your best and most stable bet would be to use karma + karma-electron as this does not rely on the [very buggy] selenium framework and is much faster than running on chrome or Firefox. You can take a look at a library I’m actively developing https://github.com/danielkalen/quickdom it’s not using my most up-to-date workflow but it can give you a rough idea
It depends on whose code you want to break. Why not just read it as a string using `.attr()` and save yourself the time of having jQuery try to interpret it in a way you definitely don't want?
Little Bobby Tables, we call him.
"After many discussions we decided to set the Open Source license of CKEditor 5 to GPL 2+ only." That's unfortunate :/
But the 5 itself also indicates a version, right? So can we read this as v5.10.0.0? And perhaps v5.1.0.0 through v5.9.0.0 were beta versions or release candidates or some sort?
Great way to learn! Haha
The little Bobby tables always makes me smile.
It's also the DOM which is not JS and is in fact implemented (I guess I'll hedge with "usually") C++, but the failures of the DOM are the failures of the DOM specification, not a language design. 
“It’s not a bug it’s a feature”
This one is a classic. https://stackoverflow.com/questions/4456438/how-to-pass-null-a-real-surname-to-a-soap-web-service-in-actionscript-3
And for the record, this "feature" is my fault. I pitched it to John Resig and he added it before we all realized the implicit casting is pretty whack. I'm sorry, everyone.
It was a different time, Paul. :) The "it does everything" APIs are great until you don't like one of the things it does. $.ajax has the same problem, too much magic that is controlled by dozens of options.
Yep, keep the "data-" in there so it looks just like the attribute on the tag.
it's not a bug and it's not related to javascript. why does this have 29 points. 
Are there people named 'Undefined'?
Cause not everyone is pedantic.
Random guess, perhaps the server has some anti-malware and your file is triggering a false positive.
This would be a great comment if it was about your own reply, since you're not even remotely close to being right. It is javascript related, since jQuery is a javascript library, and it was a bug, because OP didn't took that "Infinity" could be a name into consideration, thus having an error in the system. So yes, it is a javascript-related "bug". At no point did /u/mick0n said it was a bug in javascript, or anything like that. 
My name is my email address. Can't tell you how many websites have rejected my last name, which is hyphenated, or my email address, which contains my last name - even worse that I more commonly use .us because I go through gmail for that domain, and companies used to reject THAT for a long time. Fuck anyone who ignores minority cases and "edge" cases.
Nice piece of code. Like it :)
Every day is a learning day!
I had the same reaction to this news, but then I read that they do have commercial licenses available: &gt; There will always be the commercial license for CKEditor 5 available for you, if the GPL is not an option, which we understand may not be in most of the cases. &gt; So there’s no disaster with this change. It’s the same software, with the same quality. One would just have to pay for it and we believe that there’s no shame for being paid for the hard work we put into producing and maintaining the software. &gt; More information about the commercial license options can be found on the CKEditor website.
Not everyone are pedantic. Also, please use an apostrophe in Cause, if you must shorten “because”. Thank you for your effort.
/s?
That's pretty unreadable. Either indent all lines by 4 spaces, or post it somewhere like JSFiddle.
How is it a Dom failure? If you read the attribute via the Dom or via jquery's attr you get a string, always.
You're right. It's more jQuery/not understanding jQuery. But also it would have made sense to allow non-strings as attributes in the DOM. But yeah I was in the wrong mindset there. 
Just `bind` the current instantiation to the listener so that the calling context is as expected: this.selector.addEventListener("click", this.makeSound.bind(this)); Or use an arrow function: this.selector.addEventListener("click",() =&gt; this.makeSound()); Don't use `let _ = this`, that's an anti-pattern
It's OK, most of those people live on [Null Island](https://www.google.com/search?q=null+island).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjavascript] [Instantiating a user-defined object with "new".](https://www.reddit.com/r/learnjavascript/comments/8f8qud/instantiating_a_userdefined_object_with_new/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Whoever commented first, you are shadowbanned buddy.
Bitbucket repo links work from npmjs as well.
Same! I spent quite a few hours playing on this when I was a kid. 
You shouldn't be using angularJS for a greenfield project these days 
Are you schizophrenic?
I'm an Ember lover, I just wanted to say, Embers not MVVM or even MVC anymore. Also the companies that use Ember have expanded. Here's a few others: Microsoft Netflix Heroku Linkedin Square Zendesk BlueApron KickStarter CodeSchool Travis CI TED and Twitch
What
.................yak shaving??
Hmmm so in this case should I include the `new` keyword or not?
Thank you for sharing the summary.
God damn it, Paul!
Is it important to you that the object inherit MyComponent.prototype? If so, yes. If not, then either approach is fine.
My next kid's going to be named TypeError. 
Thanks. I think the limit was just a personal thing and I didnt think that through when publishing. I'll increase the limit (or may be get rid of it). I am wondering how I'd validate the property just as they are being set...and if validation returns false, how I'd notify the user. Idea is to keep it simple and besides, the most likely user being a JS dev, I suspect the current one is fine?
Literally. This behaviour is actually documented.