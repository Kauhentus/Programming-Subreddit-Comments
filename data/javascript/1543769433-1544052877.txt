Thank you for answering. 
I think it‚Äôs a great idea
He was answering your question, not asking you in particular
No problem! Also, I assumed you were talking about VScode, not sure if that works in Visual Studio. Remember, Cmd/Ctrl+Shift+P gives you the answer to pretty much any "where/how do I..." question in VSCode.
And you didn't frame it like that in your question here. Sure I'm being pedantic. But that's often what programmers do. Accuracy counts. Listen - I'm sure you frame the question better in an interview. I'm not trying to put you down. But it was certainly fair for me to call you on the way you phrased it here and to point out that it's actually not pointless to use "return await promise".
Because the English language has something call subject verb agreement. See https://en.oxforddictionaries.com/matching-subjects-and-verbs/ "String.prototype" is a singular noun, therefore uses singular verb "starts"
Yes, I'm talking. About VSCode. Sorry for not typing code after VS. English is not my 1st language. I find it redundant because my sentence would be "how do I use this code in vs code." also I didn't put what my OS is which is linux mint. It's my fault, no worries and the shortcut is the same as windows. 
Good to hear you're one of the confident ones. That's exactly how I hire. Unfortunately software engineering is filled with imposter syndrome along with extreme competitiveness tied to ego that makes it difficult to find interviewers and bosses who are like you. Perhaps the worst is the junior dev who has been thrown into interviewing people and has been given zero training or mentoring on how to interview. Far too common in our industry.
But padStart and padEnd, trimStart and trimEnd go without `s` right? slice, search and match go without `s` but includes doesn't. That's quite confusing!
I did try and have the conversation privately on October 20th. It got dismissed, shut down, and issues ignored until the open letter was posted. I've posted an update on what's transpired since the open letter was posted, and next steps -- if you're interested in following along. https://medium.com/protecting-storybooks-future/storybook-some-progress-next-steps-6f412232507c
Yes, it's certainly confusing. In startsWith, String is the subject, but in padStart, it is the object being padded. You are the one padding the start of the string, so it goes without an s.
Thanks!
I'd be glad that I dodged a bullet in that case. One of the worst types of managers to work with is one who thinks that they need to hire people and "train them up" on how to perform well within their software ecosystem, and doesn't consider the fact that the person they are interviewing might be significantly more skilled or experienced than them and bring new solutions to the table. When you say that the interviewer already thought of the solution, you are assuming the interviewer has more skill and knowledge than the interviewee right off the bat. The system could very well be badly designed but the people working on it are too "in the thick of it" to tell, and what they really need is a breath of fresh air from an expert with an outside perspective. This is similar to why new QA always find tons of new bugs as soon as they start. The other QA will be so used to saying that "oh, it just works like that, it's always loaded the menu items that slow." You should always be trying to hire someone who will raise the bar and one of the best ways to do that is someone who will point out where you have fundamental design problems. So what if they were wrong and that part can't be changed to run on the db? That's fine, no harm no foul. But if they actually just proposed the solution that was simple and solved your performance issues, that would be invaluable advice. 
Because anyone who didn't spell it right has either to find another job or bring an auto-correct interpreter, a.k.a. the IDE all along. By the way I see people who couldn't work without these interpreters but they're doing work just fine.
The 30 minutes will deter a lot of people, but this is a really, really awesome description of how the Stack is affected by Web APIs and how the Event Loop handles asynchronous calls. I was intimidated to look into this topic, but this video does an excellent job at explaining things to somebody like me who hasn't thought about this kind of stuff before.
* `str.startsWith('abc')` = ‚Äústr starts with 'abc'?‚Äù * `str.padStart()` = ‚ÄúPad str at the start!‚Äù If method names could end with question marks and exclamation marks, this would be clearer, I think.
Oh, i see it. Just wonder English can be simpler. Considering whether to add \`s\` or not stuck me around sometimes! :'(
Vert bas questions. Everybody williams serve you readymade Babel webpack gulp npm/yarn soup
That's dumb. You shouldn't have to setup a web server to be able to authenticate with an OAuth server
Alternatively, books.map(book =&gt; { book.author = writers.find(writer =&gt; writer.id === book.authorId); return book; }); This is easier to read but not as performant.
jQuery /s
Really solid breakdown. Thanks!
&gt; edit2: Wow downvotes are strong today. Care to comment where exactly you disagree? /r/downvotesreally 
Here's a sneak peek of /r/downvotesreally using the [top posts](https://np.reddit.com/r/downvotesreally/top/?sort=top&amp;t=year) of the year! \#1: [Is it okay to post a meme? I‚Äôm gonna post a meme.](https://i.redd.it/6qwb7q22cz511.jpg) | [9 comments](https://np.reddit.com/r/downvotesreally/comments/8tj4ac/is_it_okay_to_post_a_meme_im_gonna_post_a_meme/) \#2: [This edit I might actually agree with](https://i.redd.it/bmorfeh2pn511.jpg) | [5 comments](https://np.reddit.com/r/downvotesreally/comments/8t6nt3/this_edit_i_might_actually_agree_with/) \#3: [Ah. A self proclaimed Chad.](https://i.redd.it/d2czn5o2mlm11.jpg) | [2 comments](https://np.reddit.com/r/downvotesreally/comments/9gacuz/ah_a_self_proclaimed_chad/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
I indeed believe that's the quadratic O(n¬≤) solution, while the parent comment asked for a linear O(n) solution.
Trick question this is node 
[Yeah, right](https://github.com/jsdom/jsdom)
Yea i use that too actually lolol 
Why wouldn't \`str.doStartWith('abc')\` make sense then?
Questions on concepts like closure, event loop , hoisting, promises , callback hell.. One should know about these basic concepts.
Because as a native English speaker, "starts with" sounds much concise than "do start with" which honestly doesn't really make sense anyway. "String starts with?" Though broken, still sounds better than, "string does start with" or worse, "string do start with". Just my 2 cents.
Question from someone learning: Typically I have only used .map functions that set the index as the position in an array (i.e. 0, 1, 2... n). Your solution suggests its valid to set the index to an existing variable (in your case authorId, which will be taken from each book object passed). I guess my question is does that actually work? Will it set it to the existing authorId instead of the index in the array? I'm not doubting your solution, but I took a look at the documentation and did some searching and I just couldn't find anything similar. Just wondering if I truly understand whats happening. 
Note the brackets. This `{ ... }` notation is called [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring) and is a modern ES6 feature that allows you to unpack object properties. If I wanted the index, I'd write `({ title, authorId }, index)`.
Maybe my interview style is a little different but I spend very little time asking "what is _____?" I don't give quizzes and I don't want people to whiteboard code. I ask them to describe past experiences and talk about how they solved problems. I want people to talk about what they have actually done and then I ask specific questions about _how_ they did this. The reason I take this approach is honestly because of threads like this. Candidates know what you are gonna ask, they can study for it, they can give you great answers. They can read books about interview coding questions and not truly understand what they are doing. They can not fake their way through explaining an entire project they claim to have done. People have tried, and it is obvious after about 30 seconds.
Oh, didn‚Äôt see that üò•
As a senior choosing devs, I always want the best developer I can get. Their purpose is to help me achieve the goals my boss has laid out for me. The better they are, the less work I have to do fixing things, and the happier my bosses are. Now if you're saying you can't help but correct the interviewer in an obnoxious way that makes them think you're an asshole, I get that and you're right you probably wouldn't get that job. If you said something like: "Oh interesting, I've read some posts about that debate. There was a great post on Stack-overflow that changed my mind. It outlined a number of good use cases for using return await and it actually solved a pretty frustrating problem for me once where return await was the only way to make my application do X..." If you make a senior not want to hire you for being knowledgeable and expressing it respectfully, you don't want that job.
Hi, guys. I'm really struggling with [How to transfer image with JavaScript](https://stackoverflow.com/questions/53582045/how-to-transfer-image-with-javascript/53582475#53582475) (StackOwerflow). I'm just a beginner and in process of learning so I don't know much :(, but I'm trying really hard. I managed to put something together but I can't go any further. I would really appreciate any help. &amp;#x200B;
&gt;If you make a senior not want to hire you for being knowledgeable and expressing it respectfully, you don't want that job. Sometimes you gotta pay the bills. Which is why I suggested that in some cases you just give the answer the interviewer wants to hear and move on. In a perfect world, sure, you give a respectful answer and have a great discussion with your great future boss who doesn't feel threatened by you. Fortunately these days I'm the one who is doing the hiring, and I try my best to make the interview just like that. A friendly discussion between fellow devs.
Every time i look at these threads i feel like an idiot lmao
I think its how you come across with your answer, but either works. If you come across as an asshole or argumentative you're probably not getting the job. If you say, "i think you're getting at X for reason Y but interestingly theres exceptions, for example Z" i think its a great answer. 
It's more about firing off a snarky, possibly incorrect, answer without digging deeper. Nothing wrong with wanting developers who think all the way through before they decide a solution.
This option is already available - "Copy as HTML" in Signature preview
Well at least this galaxy doesn't explode 
My rule is that any concept that can be learned in a day is not going to disqualify anyone from a job. A teammate of mine was obsessed that interviewees must use const and let. I can't count how many times I've told him to just get over it; it doesn't matter. Neither of us knew const and let before starting the job. It wasn't hard to learn them. If it's not hard to learn, they can learn it on the job.
Asking if something "starts with?" is essentially a short form of asking "does it start with?" Simply stating "start with" is a command instructing the recipent to begin something with a given value. The "s" substantially changes the meaning of the question being asked. In another comment you mentioned trimStart. If this function included the "s" on the verb trim, it would implicitly ask if the string is trimmed rather than staying that it should be trimmed.
Ahh I see now. That makes it quite a clean solution. Thanks for answering!
SQL/relational is often the better choice because of the type of data you're using and the way you're planning to use it. NoSQL is the better option when you aren't using very structured data and don't have many relationships. Thinking like this leads to poor design decisions that yield sub-par apps and is definitely the mark of a junior dev.
I find the distinction between senior, mid, junior is so artificial. A junior can learn senior knowledge in a week easy. They just have to be shown. To me an interview should show: 1. Are they personally motivated and introspective (in many aspects) 2. Do they have experience dealing with similar systems 3. Are they friendly and reasonable? Get all three and you're on-board. To me a true senior is someone who has dealt with the ecosystem for so long, they have internal knowledge of many things, much lower level knowledge and so forth. Essentially they are beyond just a web dev or "full stack". There is no real name for this. They are just "full spectrum" software developers, who can deal with extremely high order code, or low level assembly or even further (circuitry). I just call myself a software developer, but I'm nearly at what I described as being "full spectrum".
English could be simpler, but it won't be. It's an unstructured mishmash of many different languages.
Ahhh so fun, I played around with this for too long!
Are you currently hiring?
You should be creating your obsChange Observable in the constructor once. Right now you're creating a new Observable every event therefore debounce doesn't work because it always sees it as the first and only input. This is very rough code as it has been a while, but should point you in the right direction: ``` constructor() { this.obsChange = Subscriber.create(); } textarea.on('change', () =&gt; { this.obsChange.next("some text inside textarea"); }) ```
I don‚Äôt think knowing electron is important at all in getting a node gig.
&gt;If you come across as an asshole or argumentative you're probably not getting the job. That's somewhat subjective isn't it? Which is why it is sometimes better to play it safe.
What are advanced concepts to you? Just curious.
Do**es** "foobar" start with "foo"? "Foobar" start**s** with "foo". It's simple present + third person singular (he, she, it). You have to add -(e)s in that case.
Wildly pedantic reason to eliminate a candidate. This is, at most, a pet peeve and has no bearing on anything of substance. People usually know what the correct usage is, they just colloquially refer to it the way they like typing it. &amp;#x200B; Elitism is a toxic kind of company culture. It will certainly negatively affect your company.
i hate to be cynical, but this is just a carbon copy of every other "how to set up your js environment" tutorial out there, except there are more images and emoji that break up the tutorial
For the singular `start`, it would be `str.doesStartWith(..)`, as in "str does start with ___." But that's not a natural question form. That's like: "The apple is red?" instead of "Is the apple red?" To be a more natural question form you'd likely to rearrange the words: "does str start with ___?" Dropping off the `does` and going plural looks much nicer (IMO), and fits the natural question form pattern better.
We ask simple problems and let them google if they don‚Äôt know stuff. For us it‚Äôs all about ‚Äúis this guy technical‚Äù and ‚Äúwould we like to work with him‚Äù. I hate nitpick interviews and so I don‚Äôt nitpick in mine. 
What the guy said is possible and is an option, I don't know why he's being downvoted
&gt; Don't ever trust an off the cuff estimate and don't ask for one. Don't give one. People will without a doubt ask and then treat your wild guess as a sure thing. 
Great, but your `npm install` command will fail because there is no package.json where dependencies are listed.
Oops, yeah, you're right. I forgot to copy it from my other repo, thanks for the heads up!
I help with interviews for my company and I've had good and bad experiences. I try to identify first who I'm looking for compared to someone, what my favorite developers have in common, can be a coworker, a famous writer, a friend. What they all have in common is a good understanding of programming principles, design patterns, OOP and agile. A developer that knows how to answer at least questions related to that and how they care about quality of the code they deliver, how to write code that is easy to modify and extend, how performance matters and so on, is always a good candidate. The programming language and frameworks of course matters but is a secondary thing and has to do with the experience he or she has. Since they are having the interview they must have experience with the skillset you are looking for, in your case nodeJs. 
Personally I'd just use a generic shared host, because then you can host not just the database but also a web application to put in front of it, a git repository for its code, etc. ... all for like $9/month. Dreamhost and WebFaction are two good ones, but there are many out there.
You don't have to do map for that, because you're mutating the elements. I'd either do books.forEach(book =&gt; { book.author = writers.find(writer =&gt; writer.id === book.authorId); }); // or const newBooks = books.map(book =&gt; ({ ...book, author: writers.find(writer =&gt; writer.id === book.authorId) }));
Sorry for messed up code, I'm trying to fix it.
Wow, I keep forgetting that I don't need to do `book.author = something;` then return it. Sexy ES6 syntax for the win
Oooh, I didn't know we had our own shevegen on r/javascript. How exciting!
It‚Äôs possible and an option, but IMO not a good option. If you do this, you have to run npm install, and if you don‚Äôt have your dependencies locked this can result in bumped versions, an easy mistake to make.
TBH using a let where a const would do is more of a style choice IMO. I personally make everything a const until I have to change it but I've also seen people only use the const word when they are defining something like a constant string. 
Nice work dude! The nebula and gas effects look incredible.
I'm used to using autocomplete all the times, so I might not be able to write certain things from memory perfectly, but that doesn't mean I don't know exactly what they do, and when I should use them.
That's right, too. What I love about this question is the amount of both practical and theoretical details involved. The only problem is with people who have no idea that you can measure the code performance more abstractly than in seconds ‚Äî when you ask them to write a faster version for larger arrays, they try to use a `for` loop and so on.
&gt; if they explain the difference Fair enough, I haven‚Äôt met any that knew the difference but used them randomly.
Ah, me too, but probably could do without using JQuery on node. Unless I'm using it as a dependency for something, I don't remember.
how are you and your friends going to update the database?
"Because all the tutorials use them." 
Yes it's possible to do it like you mentioned. Do you already the click event working? When you click, get the target and find the image source. It might even be easier to clone the node and when the user clicks on the board you place it there instead of creating an image element, etc. I'm on my phone so I can help you but you can find this easily on Google. Search for click event listener, cloneNode and how to append/replace element child. This is very basic and honestly you'll learn more if you have to figure it out. For example log the event object and see what's in there. Log the event target...what kind of object is it? Search on MDN for that kind of object and what properties/methods it has. Break down your problem into the smallest parts and solve each one individually. This sort of problem solving skill will be really important for you in the long run.
Where do senior developers come from? Do they grow off of trees? Or do they become senior and experienced by training them and letting them learn?
&gt; if they explain the difference Fair enough, I haven‚Äôt met any that knew the difference but used them randomly.
I plan eventually to do a little write-up and a Rust WASM performance comparison similar to my others: - - https://www.polaris64.net/blog/programming/2018/rust-webassembly-javascript-floyd-steinberg-dithering-performance - https://www.polaris64.net/blog/programming/2018/webassembly-wasm-rust-webgl-mandelbrot-performance-analysis Until I've done that though, here's the JS only version to play with!
Everybody's aware what's the good option and why this is bad. He just said it's an option. Get off your high horse, it's not rocket science here to be proud of pointing out that running one extra command is bad and downvoting someone to hell because you know of a better option.
Interesting 
There‚Äôs a difference between looking for senior developers and wanting to train mid level developers to be senior.
Maybe my company does a good job of screening but I find it a little hard to believe that you haven't met any candidates who knew the difference between a let and a const. It's just not that difficult of a question. I've interviewed a lot of people and have never seen someone write let on the whiteboard but not know what a const was. The concepts are always introduced at the same time and even if you don't know them it's easy to guess. The only times I've ever seen someone not know them was because they weren't familiar with ES6. &amp;#x200B; Maybe it appears they are using them randomly because they made a whiteboard mistake. Whiteboards make it much easier to overlook these kinds of mistakes. Maybe he planned to change it but never did. Or he didn't plan to change it and ended up changing it but forgot he defined it as constant. If you are nitpicking these types of things on a whiteboard you are going to have an incredible amount of false negatives. 
Sever4you.com/net A vps is just 5$
I didn‚Äôt say that I know nobody who could answer this question, I‚Äôm saying that none of the people that used them randomly were able to explain the differences, especially including var as well.
Thanks
Yeah it's called short sightedness and ignorance on the part of companies. If nobody is willing to hire junior/medior devs and only want seniors then it's their problem when they can't find anyone.
Really cool. I'll take a look into implementing this on my project: https://github.com/victorqribeiro/radio Is it ok?
You might consider putting the sqlite3 file in an S3 bucket on AWS, and giving each of your friends their own unique access keys to retrieve it and upload a new version. A benefit of this approach is that the costs will be very low, even if you keep multiple versions and/or periodically archive a snapshot in Glacier. A drawback is that the file has to be downloaded, updated, and uploaded each time, which introduces some complexity and some risk that two people try to update it at the same time and one set of changes is lost. The other way to look at this is that sqlite3 may no longer be the best option for you, and that a shared web hosting provider with a MySQL feature is the next logical step, as others have suggested. Depending on your needs, the AWS DynamoDB (key/value, not SQL) offering may be attractive.
Or it's not SQL...
That would be a wonderful answer, because it shows that you are more interested in current fads than actually making a working solution, and are not suitable for the job. Without knowing the domain and scope of the project you can't make a determination like this. 
Jesus, I didn‚Äôt downvote the original comment, nor was I saying that person was wrong or encouraging downvotes. When I said ‚Äúmaybe that was the point of the question‚Äù I was just trying to understand what you‚Äôd learn from that particular answer. I did not know about the automatic include to package.json, that seems like a smart improvement. If you took other meaning or attitude from my comments, that was not my intention. 
It's actually *three* characters with the space. *Downvoted!* :p
Small teams don't always have that luxury. Sometimes you need someone to join and hit the ground running. It's one thing to learn how to use Babel on the job. It's quite another to learn how prototypal inheritance works, when to use a hash instead of an array, and how to write clean code.
Even if it's unlikely, my general goal is to make my variable names more logic-based and universal, instead of being tied to the inconsistent rules of a spoken language, like English.
not disagreeing, but let's not forget the nonsense of gendered nouns [which also affect neighboring verb and adjective forms] in most other languages.
I see the python in you by semicolon usage ;)
Thanks a lot for reply. What's `Subscriber` in `Subscriber.create();` 
Settle the vi vs. emacs debate.
Bathe. :p
Promises are really not that hard. Juniors should be able to work with them within the context of node. Failing to do so really hampers performance. 
"Happy Codimg."
Not exactly sqlite3 but, the cheapest option would be to use free heroku postgres. It offers 10000 rows of free data.
I'd choose this too for a free option. I'm also sure Firebase might be an option but I'm not 100% sure on that. Paid option, my goto would be DigitalOcean.
Exactly. Never be the best musician in the band. You grow when you can learn from your teammates.
Wooosh
Cool project! The variable naming convention is pretty unconventional though. I‚Äôve heard of camelCase, snake_case, PascalCase, but never camel_Snake
&gt; "Oh interesting, I've read some posts about that debate. There was a great post on Stack-overflow that changed my mind. It outlined a number of good use cases for using return await and it actually solved a pretty frustrating problem for me once where return await was the only way to make my application do X..." You're hired!
If you frame your answer respectfully, you've dodged a bullet if they turn you down for being smart and respectful.
It sounds better in context. `if (str.startsWith('abc')) ...` reads as "If [the] string starts with 'abc'..."
&gt;I find the distinction between senior, mid, junior is so artificial. &gt; &gt;A junior can learn senior knowledge in a week easy. They just have to be shown. I agree to an extent. A jr dev can learn the concepts of a sr dev in a week. It's the *why* behind those concepts that takes some time. For example I'd say a jr dev is someone who knows and can apply best practices. A sr dev knows when it's appropriate to *break* best practices.
maybe if I show my git repo it would better explain [https://github.com/alkapwn3d/checkout-order-total/tree/master/test](https://github.com/alkapwn3d/checkout-order-total/tree/master/test) I tested \`scan\` before i made \`calc\`. in the calc test there is a line scan("apple") that adds a new object to \`cart =\[ \]\` and causes the previous tests to break. I'm kinda new to testing so im sure I did a bunch of other things wrong.
"Do you think you can learn Python in two weeks?" "Uhm ... yes?" "You got the job."
In no particular order: * Which is better, async/await or promises? * What language is NodeJS written in? * What does the 'N' in NodeJS stand for? * Which version of the JVM is best for NodeJS apps?
Lol
Well said!
Amazing work. Love it. You should turn this into an app. I have a couple little kids that love kids painting apps where you can put shapes and colours on screen. Pretty sure they'd love to paint galaxies on a tablet.
I see. I think what you‚Äôre running into is more about the architecture of the code and less about Mocha. From checking out the code a bit, it seems like your application has a single `cart` array in memory that is exported from a module. Without any way to reset that array between each test, you‚Äôll ‚Äúbleed‚Äù state between your tests, which is generally considered an anti-pattern. In your case here, I would consider building an abstraction around your `cart` array that would allow you to create a fresh cart with each test. That might look something like this: https://repl.it/@alexlafroscia/example-cart
If you just need to functions, merge and overlap, why not just use objects and write those two functions? overlaps is very simple, use a collision detection algorithm like so: export function datesOverlap(aLow, aHigh, bLow, bHigh) { if (isNaN(aLow) || isNaN(aHigh) || isNaN(bLow) || isNaN(bHigh)) return false; if (aHigh &lt; bLow || bHigh &lt; aLow) return false; return true; } What kind of merge are you talking about? Like find the lowest of the two and the highest of the two and put them into one range?
ok overlaps is quite easy, but I'm thinking about merge. I think that the merge could be implemented like so: if (p1.overlaps(p2)) { var start = Math.min(p1.start, p2.start); var end = Math.max(p1.end, p2.end); } return new Period(start, end) Am I correct? 
s3 is an excellent option if you are updating it infrequently, aws rds tends to be pretty expensive compared to other options, dynamodb would be fine you would probably fall well within free tier.
TIL I'm a Node.js developer because I understand let, const, and arrow functions.
logic-based would be how you would say it. Code can already be quite difficult to parse for a person. If it reads like english then at the very least understanding what each individual part does is simple. If you have a naming convention then now they need to learn the convention and it still won't be natural. They will be required to spend extra mental processing power to parse the code. I think things like this get way over thought and end up with a complicated solutions when a simpler one is usually better.
Doesn't tensorflow.js use webgl which uses the gpu?
There you go, look like you've already got it. In order to verify that things are the way you want them to be, you should write some unit tests using something like jest. Your unit tests will help you write your functions correctly. &amp;#x200B; To get you started, here's an example of one unit test with jest that would work with the date overlap code: describe('Date Range', () =&gt; { it('Identifies overlapping dates', () =&gt; { expect(datesOverlap( new Date('2018-11-12T00:00:00.000Z'), new Date('2018-11-12T01:00:00.000Z'), new Date('2018-11-12T00:59:59.999Z'), new Date('2018-11-12T01:00:00.001Z') )).toBeTruthy(); }); });
Electron app with Angular [https://github.com/tettusud/angular-electron](https://github.com/tettusud/angular-electron)
&gt;s3 is an excellent option if you are updating it infrequently In this case, this would be no different than sharing the file via dropbox / google drive
Oh my..
As I've said in another reply, sometimes you gotta pay the bills. In an ideal world, sure, you dodge all the bullets.
I'm not OP but just wanted to let your know you're a babe - thanks for the awesome contribution.
Every language could be simpler but they were hardly designed by way of rational thinking and consistent rules. They evolved naturally over time! Some languages have gendered nouns, some have 5 grammatical cases, some have downright nonsencial counting systems, some have alphabets 2000 letters long, etc. Every language has its quirks!
Precisely, or more accurately (which you can Google), the interrogative mood vs the imperative mood
What are you even trying to do? This isn't a test, this a test data. It's used to test their instagram verification process. 
Thank you for the kind words captain fucker
This helped me. Thank you! &amp;#x200B;
1. This is a script tag, the src property tells you what script the page is loading. 2. This is minified code, \`f,b,e,v,n,t,s\` are all parameters in a function that is being created 3. Yes, a js file
i really like this, and i was actually able to solve it pretty quickly. why does the super simple thing have a service worker for pwa, it doesnt even have a fully filled out manifest to work as an install-able app.
Just for installing. What is missing?
I'm keen to try this with other random types of images just to see what happens. How did training the network work? Looks like train.py uses Keras (which I haven't ever used before), I'm digging through it and can't see anything that's like... "sneaker" specific, so I assume it'd work on other stuff too? 
[the manifest json](https://github.com/victorqribeiro/bridge/blob/master/manifest.json) is missing a name and description. This name can be whatever and the short name has to be below 10 characters or something. I also noticed that the [favicon.png](https://github.com/victorqribeiro/bridge/blob/master/favicon.png) is blank. you also want to make sure the `start_url` is going to be at the right file, which might lead to some problems when you put it on your website you might have to change that to `/bridge` instead of `index.html` then there is probably some more steps that i dont know of to make it actually work (*oh well!*) but the idea of making the bridge problem (whatever it called) also work as a pwa is cool but probably not super practical
here's some more sadness: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat https://github.com/tc39/proposal-flatMap/pull/63
I have a script that create the template for me. I forgot to fill it. https://github.com/victorqribeiro/create 
That is pain :) 
[expects the usual post where all they talk about is a couple of array methods] [clicks] [it's the usual post where all they talk about is a couple of array methods] 
Nope.
More pie-in-the-sky dreaming. We already know how to fix most of these technical problems. The problem keeping them in medium posts instead of code, is figuring out how to pay for the solutions. 
Gosh do you really waste energy agonising over this? Just pick a convention and go for it. Sod's law dictates that whatever you choose, after a short while you'll find out the other would have been better :-p (...and that's why you have tests, so that you when that moment arrives you can feel confindent you can change the code without breaking stuff)
It's this coming week. I'll let you know, thanks!
Sure Mate, I will think about itüëç‚ù§
how many cocks do you suck on a daily basis?
Phone post incoming so sorry if the formatting is messed up. I‚Äôve hired a handful of people and when I‚Äôve done technical interviews for a node based role I‚Äôve done them like this: Step 1: I give them the requirements for a pretty basic web scraping script, tell them they can use the nodejs documentation and ask me questions, and help them work through it. They‚Äôre in the same room with me with their laptop plugged into the screen so I can see all their steps. I‚Äôll ask them questions about choices they make, and help them reach the answer when they ask me for information. I do this because it‚Äôs pretty close to what their actual work will be. Fulfilling requirements, researching the necessary tools, and communicating with coworkers. Step 2 is having them make a second feature of the script which is to basically add special exceptions based on text patterns, which requires them to use a lot of regex. I do this because very few people know regex off the top of their head, and many people avoid really understanding how it works. This shows me how they face a problem that they are not experienced with, and what their thought process and attitude is when they‚Äôre stuck. Once they can clearly define exactly what they want their regex to do, I help them write it out and then we see if it works, and where their statements might have been wrong. The candidate doesn‚Äôt touch a whiteboard unless they want to work out their program flow. If someone came in and had 0 node experience, but was able to work through these problems, I‚Äôd still give them the job, because I test for aptitude, not specific knowledge. That‚Äôs actually happened once, they mostly knew c++, but were able to understand and use the documentation incredibly well. He would say ‚Äúso in c I would do something like &lt;thing&gt;, so let me search for this in the docs. I hear about companies that hire based on libraries that the candidate knows, and that‚Äôs ridiculous. ‚ÄúOh you have 5 years of experience with angular? Sorry but we use React‚Äù it‚Äôs insane to me. I also hear many companies say ‚Äúwe‚Äôre looking for how you work, you don‚Äôt necessarily have to solve the problem to get an offer‚Äù but then if you ask how many times they‚Äôve offered a job to a candidate that failed, the answer is usually 0. I‚Äôve hired two people that didn‚Äôt get the final answer, but I could see that they were definitely able to solve it, and we‚Äôre probably just nervous about the interview. They still work at the company I left, so I assume it was the right call. I feel like the software hiring process is biased and broken so I do everything I can from within to try and fix that. Solving toy problems on a whiteboard just isn‚Äôt sufficient. 
I'm suffering from insomnia - it's 4 a.m. over here. So, I wrote an example. &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;style&gt; img { display: inline-block; width: 50px; height: 50px; margin: 5px; border: 2px solid black; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;img src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAIAAACRXR/mAAAAVUlEQVRYw +3WUQoAEBAEUOP+d14n4ItQb3439YrspKraPEkW03Nne3syWFhYWL+xsh 7f2gEuEQsLC2vPL6/Le1tYWFi6vC6PhYWFpcvr8lhYWFiPZQDaxSdXpaC 7pgAAAABJRU5ErkJggg==" onclick="sourceClicked(event)"&gt; &lt;img src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAIAAACRXR/mAAAAVklEQVRYw +3YMQ0AIRBFQSCowA9a0HRazg82lpaGllDMa7eZ5HebIyK9V0lPhoWFhX Wsng6zjzuC9n9GxMLCwsLCwsLCwsLCwsLCwtrKHuBYWFhYWLdbNs8JX2l 6MrcAAAAASUVORK5CYII=" onclick="sourceClicked(event)"&gt; &lt;br&gt; &lt;script&gt; let memSrc = null; for (let i = 0; i &lt; 10; i++) { let element = document.createElement("img"); element.addEventListener("click", targetClicked); document.querySelector("body").appendChild(element); } function sourceClicked(event) { memSrc = event.target.src; } function targetClicked(event) { if (memSrc !== null) { event.target.src = memSrc; } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
It‚Äôs not dumb dude, peeps are making a living selling software that does exactly this. Cross train your programming skills with marketing skills and start a business!
Or..just use webassembly
maybe not, but there are a lot of front end packages out there that are still using this set up and this helps modernise it somewhat as people move toward better solutions 
I could write a lightweight website that offers some utility functions that updates the db. But I was hoping there was an option somewhere out there that has a direct sql interface to the db. I don't know if that exists or not though.
Yeah DynamoDB may be the way to go here from what you're describing. I'm not 100% sure what the end use cases will be here, which is why I'm having a tough time choosing. While having to keep multiple db versions in sync is definitely a pain, it's entirely possible that all the work for updating the db will fall onto my shoulders anyway, in which case I could just do the dropbox solution.
I created an isomorphic GraphQL fetch-wrapper, called [jraph](https://github.com/ianfabs/jraph). It's available on npm under the same name! It allows you to make really sweet and simple calls to GraphQL APIs, it's pretty small, and it works in node or the browser!
I'll check that out, thanks.
&gt; This is a script tag, the src property tells you what script the page is loading. can I read the soruce code of those script? and how? 2)This is minified code, `f,b,e,v,n,t,s` are all parameters in a function that is being created Ok, but how do I know what these parametres mean? How do I know wat is ''a'', what is ''b'' and so on? 
bah, that shit is impossible to keep up with. First JS says they're absolutely good, then they're unnecessary, now they're a best practice again... Jesus, people
&gt; What are you even trying to do? This isn't a test, this a test data. It's used to test their instagram verification process. I would like to try to understand and learn javascript
Yeah - this could be solved with a different implementation though. Good call-out!
For the display, you want to think about using the modulo operator. Modulo basically tells you the remainder. So, what you want to do is calculate a display for the minutes and a display for the seconds. For the minutes, it's how many whole times (an integer) does 60 go into your seconds counter. For the seconds display, it's how many are remaining after there isn't a whole multiple left over from dividing. This is what some rough code would look like. var seconds = 70; function changeDisplay(seconds) { var minutesDisplay = parseInt(seconds / 60); var secondsDisplay = seconds % 60 if (secondsDisplay &lt; 10) { secondsDisplay = "0" + secondsDisplay; } document.getElementById('time').innerHTML = minutesDisplay + ':' + secondsDisplay; } function start(){ var time = setInterval(countdown, 1000); changeDisplay(seconds); } function countdown(){ if(seconds &gt; 0){ seconds--; changeDisplay(seconds); } else if(seconds &lt;= 0){ // not sure what you were going for here, cause this doesn't work // if it were me, i'd just reset seconds here to whatever you want it to start at clearInterval(time); return; } } function add(){ seconds++; changeDisplay(seconds); } function minus(){ seconds--; changeDisplay(seconds); }
Runescape has prepared me for this. 
Yeah, I see a lot of people telling me they saw it on runescape. Guess I missed it.
I believe moment.js would be the best library to handle these type of things.
True legend right here
So that is their fingerprinted common.js file, you can find it inside their scripts folder. This is probably not the best way to go about learning in my opinion. Everything you‚Äôre going to find will be minified and therefore not meant to be human readable. Have you thought about doing some tutorials instead? This will all make sense once you get some more basic understanding. Not trying to be harsh in the slightest, just don‚Äôt want you wasting your time. 
Oops ü§ï...what i meant by that is one could learn these concepts ...advanced or basic regardless.
this is a pretty open ended question and not really answerable in a comment. depends on whether youre using a particular framework or just plain JS &amp; what the form is for. short answer is to save your form state in an object and update that object as you move through the form - but that's pretty close to saying "you create it with Javascript". I would just Google your question title. tons of tutorials out there 
\`\_.shuffle\`
I'm not sure what you're trying to scrape but if you want stats it looks like they have a public API you can use. Someone also made a nodejs library you can use here [https://github.com/bttmly/nba](https://github.com/bttmly/nba).
date-fns also offers some features to this end. Is also quite a bit smaller than moment.js and works mostly with native Date objects.
I added Underscore and `_.shuffle(wrongAnswers)`, but no luck. 
Everything you just listed is completely inconsequential. Ask how they learn, what motivates them, examples of times they disagreed with a product or technical design and how they handled it, if they are more senior examples of how they‚Äôve mentored other engineers to be more successful in their careers, examples of strong product decisions they‚Äôve made and how they‚Äôve paid off, a time where a minor mistake became a learning opportunity they won‚Äôt forget again. Behavioral questions based on things they‚Äôve actually done. (You can tailor similar questions for junior engineers as well.) You should be caring about their total impact in the job. These questions will only tell you how much time they spent tinkering with app setup and config. That alone delivers no value to your company or product but how they whole person fits in does. 
ok so if you made this an adobe effect you would prolly make realm money of it.
Lodash didn't work either. I feel like I must be making a big mistake somewhere. I've tried a number of things with no luck.
I got it to work! I put '\_.shuffle(wrongAnswers)' inside a variable and it's finally shuffling. Thanks for pointing me in the right direction!
Oops ü§ï...what i meant by that is one could learn these concepts ...advanced or basic regardless.
 Below is the link of the information i'm trying to scape. I'll check out the API in a little bit but from a quick look on my phone i don't think that's what I need. [https://stats.nba.com/teams/traditional/?sort=PLUS\_MINUS&amp;dir=-1&amp;Season=2018-19&amp;SeasonType=Regular%20Season&amp;Location=Home](https://stats.nba.com/teams/traditional/?sort=PLUS_MINUS&amp;dir=-1&amp;Season=2018-19&amp;SeasonType=Regular%20Season&amp;Location=Home)
Why are you not returning the promises? Inside the then() functions, you should return the next promise call. Also, I recommend switching to async/await if you can. It'll make your code easier to understand.
It does, but there's some limitation/bug in their implementation of WebGL that doesn't work with this webapp. You can see my discussion on the Google board [here](https://groups.google.com/a/tensorflow.org/forum/#!topic/tfjs/DARdTdiZb8A). It's a bit disappointing.
Wow. I'm glad I'm not working in the design studio for a shoe company. They will be out of a job before long. This is crazy cool 
I'm not sure why people downvoted you, your comment doesn't seem malicious to me, it just seems like a funny jab :) And you're right about my semicolon usage haha
&gt; So that is their fingerprinted common.js file, you can find it inside their scripts folder. This is probably not the best way to go about learning in my opinion. Everything you‚Äôre going to find will be minified and therefore not meant to be human readable. Have you thought about doing some tutorials instead? This will all make sense once you get some more basic understanding. Not trying to be harsh in the slightest, just don‚Äôt want you wasting your time. thanks... I want to try to read javascript code of web application because of the bug researching purposes (black hat and legal hacker)... so if I am able to read code, this will improve my skills
Hi, thanks for the kind words. Yes, you're absolutely right. The train.py is an implementation for a DCGAN, you can train it on any sort of images. If you use it for other images though, there are some things you would need to change though. Firstly, since I'm trying to generate shoes all of roughly equal size and direction, I didn't do any preprocessing on the images like rotation, rescaling, flipping etc but you should do this if you can as the results will be much better. [Here's](https://keras.io/preprocessing/image/) the documentation on the Keras ImageDataGenerator class. Secondly, you'd need to update the layers of the Generator model to fit your image dimensions (if you change them from 256x256) Thirdly, you'd probably need to tweak some hyperparameters depending on your dataset. Please let me know if you'd like any help, I've done all this stuff before so I can help you much faster than it would take you to figure it out for yourself, especially if you haven't used Keras :)
Bringing back memories of sophomore year of college. For the full challenge, implement a "solver" as a button that a user can press if they give up/can't finish it but want to see the fastest way to solve the puzzle from their current state
Oh wow, really haha? Alas, I have no marketing skills though, so if anyone want's to run with it and make a business from it go ahead (just think of me when you become a millionaire) :) Also, the results probably aren't good enough to compete with the software that currently exists. Thanks for the kind words though!
In your browser go to the network tab and load that page you‚Äôll see the api call that is made to get the data on that page. In node just do a get request (I use axios library) with the url and you‚Äôll get json back that you can easily work with. 
Does that work with majority of sites lol? I never thought to even try that because I feel like that's just too easy lol. 
I‚Äôm not sure about other sites really. Nba doesn‚Äôt require any auth to use their endpoints. I‚Äôve just happened to play with their api a fair amount lately. 
Thanks! I'm not sure this project is going to put anyone out of business yet though, but I could see it maybe becoming a minor threat if a more skilled programmer made it with a much larger dataset. Thanks for the kind words :)
Yeah, it's much more clearer. However, it's quite obligated to think that `subject.exec()` is not the subject executes itself but it is us who executing that subject!
Cool idea. I'll try to do that this week
&gt;! The secret is that the wolf and the cabbage can be left alone together.
Thanks, I appreciate all the help! I'll hopefully get some time to play around with it this weekend, if I get anywhere I'll let you know :-)
Oh wow lol. Well thank you. 
god, react is such garbage compared to vue.
If you dont mind me asking, why did you use parseInt? but thank you for this!
Both are good. And you shouldn't expect framework things from React as it's a library.
and the "-" doesnt work still but I can try to fix that
You could try using [Puppeteer](https://github.com/GoogleChrome/puppeteer). It's a headless Chrome browser that you can automate from Node.js. NBA.com wouldn't be able to tell the difference between Puppeteer and a real user.
Omg stop this. You just regurgitate what everyone in the react community says. Guess what, ur being pedantic. If ur building any serious app your going to use a router and a store, and guess what, Vue itself doesn‚Äôt include either of those as well, just because there is one developed by the core team doesn‚Äôt mean you have to use it. 
Here you go: https://www.codecademy.com/learn/learn-javascript
Whoa, calm your tits there bud 
Sad that react fanboys are still implementing ‚ÄúshouldComponentUpdate‚Äù lol. Or worse yet, they don‚Äôt even realize they need to. Just switch to vue already. Writing CSS in JS is a hack, not a feature, same thing with JSX. I know this won‚Äôt convince anyone of anything, just needed to vent
Not so much a secret but an implied rule and you basically spoiled the logic puzzle.
Do you mind opening a issue in the repo? Do I don't forget.
Not so much a secret but an implied rule ~~and you basically spoiled the logic puzzle.~~ Spoiler tags don't work in the redesign :/ 
Those are great questions too. The OP asked specifically about node devs, hence my reply. 
Why are you so excited? Both are used to build serious applications. I'm pointing that the way that you build Vue templates and the way that you organize the code don't feels like JavaScript. Buddy, I use Vue when I need it. I love Vuex and prefer it over Redux (because it is unnecessarily complex, proven by Vuex). Vue-router and React-router-dom, in the end, are the same thing, as any router implementation. If don't look into something with an open mind, it will only be, as you said, trash, for you.
I agree with you, I just have gotten tired of the framework vs library debates, usually IRL. It adds nothing to the argument. Angular, Vue, and React are all JavaScript frameworks that revolve around component based architecture for the same problem domain (building SPAs, for the most part) who cares what label you put on it, cuz nobody uses these libs in isolation. 
That's why Facebook, Netflix, Uber, and Airbnb all use Vue for their massively scaled codebases. Oh wait nvm
This is wrong; you should leave the wolf. Why would you want a wolf? [Relevant xkcd](https://xkcd.com/1134/)
It keeps the goat from eating the cabbage.
Done. Also, I was checking my GitHub and totally forgot I posted this exact problem, but using logic gates! [https://github.com/JakeFDev/FWGClogism](https://github.com/JakeFDev/FWGClogism)
out of curiosity, what is the parallel of cDU in vue?
I had success doing this exact same thing a few months ago with Puppeteer. 
Your `lol`/sentence is off the charts ma man
I guess you didn't understand the sarcasm
Vue has an `updated` lifecycle hook, but I've never seen it used. It's not a part of any common pattern I'm aware of.
Nice!
Done.
Sweet! Nice job, worked well viewing on my iPhone too
Most for-of loops get compiled down to numeric-for-loop, which are way faster cause most compilers and CPUs have "loop optimizations" on those. (e.g. loop itself will have not heap variable and little to no round-trip to RAM) 
As general advice for next time: Saying _"It's not working"_ doesn't help at all; make an effort to describe what is actually happening that you didn't expect.
Might use some const and arrow functions and not only let? 
Point me a example where it would improve the code.
Most of them will imo learn you the same, when comes to syntax and language mechanics, YDKJS + an ES7+ book is really enough
some people might decide to read all of then and learn like nothing
You take my upvote for knowing RuneScape and be a programmer. 
Sorry was commuting and on the phone. &amp;#x200B; could be a const instead: [https://github.com/victorqribeiro/bridge/blob/master/js/Boat.js#L34](https://github.com/victorqribeiro/bridge/blob/master/js/Boat.js#L34) [https://github.com/victorqribeiro/bridge/blob/master/js/Passenger.js#L8](https://github.com/victorqribeiro/bridge/blob/master/js/Passenger.js#L8) [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L5](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L5) [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L1](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L1) (some of those at least) &amp;#x200B; needs type-safe comparison (=== /// !==): [https://github.com/victorqribeiro/bridge/blob/master/js/Passenger.js#L28](https://github.com/victorqribeiro/bridge/blob/master/js/Passenger.js#L28) and following [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L101](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L101) and following [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L151](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L151) &amp;#x200B; could use arrow functions: [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L46](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L46) as in \[boat, farmer, wolf, goat, gabbage\].forEach(el =&gt; elements.push(el)); [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L4](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L4) init could be const init = () =&gt; ... [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L83](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L83) same [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L100](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L100) same [https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L130](https://github.com/victorqribeiro/bridge/blob/master/js/main.js#L130) same
Wrote a blogpost about working with Specifications and Service Workers [https://blog.elpassion.com/https-blog-elpassion-com-the-magic-behind-service-workers-6b856026c37c](https://blog.elpassion.com/https-blog-elpassion-com-the-magic-behind-service-workers-6b856026c37c)
You haven't seen the Logic program implementation of this executed in JavaScript: https://lps.js.org/sandbox
Thank You. Glad you liked itüòç‚ù§
Yeah, Keep going mateüòÄüëç
Glad You Liked it‚ù§üòÄ
Yeah, thank you just corrected üòÄüëç
üòÇüòÇ
Thank you for the suggestion mateüëçüòÄ‚ù§
Under the hood, how JavaScript see a function compared to a const? I know a const is a immutable variable, but, would JavaScript reserve less memory for it, or something? Arrow functions are ok, I guess, but I don't like to use them very often. I think the code looks more readable with function (){ }. I don't know.
You're welcome, didn't mean to seem so short!
If I didn't know better I'd actually believe that a few of the shoes I saw were real
Wow, thank you!
I knew a CTO with a special disregard for technical interviews. I see his point ‚Äî he had little experience with the technologies he was hiring for. So, the logic was *if this guy built a rocket, he can build microservices, too*. However, we did end up with a bunch of people who had no idea what they were doing.
lol
Thanks!
A good part yes, but most will have restrictions of some kind or at least no accessible documentation
While it's normally a good thing to avoid dependencies for trivial stuff, date and time handling is overall not one of those things - see [this](https://www.youtube.com/watch?v=-5wpm-gesOY) for an explanation. That said, you are looking for moment.js and the [moment-range](https://github.com/rotaready/moment-range) plugin. It has explicit support for overlaps, and should trivially allow you to create your p3.
what do you mean by "direct sql interface"? in the case of sqlite, that would mean ssh'ing into the server and running sql queries via the CLI? &gt;I could write a lightweight website could you? (I ask because you're asking a slightly strange question, in a strange place to ask that question). 
You can use setAttribute() method to set the src of the html element.
I'm very new to all this, could you give an example of how?
Thanks. 
I don't think that is the best solution, but you can always check the length of the array. 
The words of someone who clearly has no idea what they're talking about.
Something like this: &amp;#x200B; &lt;audio autoplay controls&gt;&lt;source id="lyd" src="lydfiler/lalala.mp3"&gt;&lt;/audio&gt; &amp;#x200B; &lt;p&gt;Click the button to get the URL of the audio.&lt;/p&gt; &amp;#x200B; &lt;button onclick="myFunction()"&gt;Try it&lt;/button&gt; &amp;#x200B; &lt;p id="demo"&gt;&lt;/p&gt; &amp;#x200B; &lt;script&gt; function myFunction() { var y = document.getElementById("lyd"); // we select the element y.setAttribute("src", "foo/bar.mp3"); // we change the element's src attribute var z = document.getElementById("lyd").src; // we select the element's src attribute for demonstration purposes. document.getElementById("demo").innerHTML = z; //demonstrate it to see if its working } &lt;/script&gt; &amp;#x200B; Here is the fiddle to check: [https://jsfiddle.net/2dpeaLbr/](https://jsfiddle.net/2dpeaLbr/) &amp;#x200B;
You can just mock the external service. What testing framework are you using? 
When I threw this in a repl the minus worked. Could be some other issue. Not sure...good luck!
Yea, see that's the catch. You don't need to know more than the person you are interviewing but you do need to know enough to ask the right questions.
Im not 100% sure what you are trying to do, but if you want to add an object to the first position of the array IF its empty, and in next itinerations change his value for "new object", this should do the trick. function test_arr_includes() { console.log(typeof testArr[0]) if (typeof testArr[0] === "undefined") { testArr[0] = {}; } else { testArr[0] = "new object"; } } [1,2].forEach(() =&gt; { test_arr_includes(); console.log(testArr) })```
Let's say I have 150 seconds on the clock and I did "150 / 60." That would give me 2.5. Which is the same way on your clock as as saying "2:30" since it's going to be 2 minutes and 30 seconds. So I'm only interested in parseInt(150/60) because for displaying the minutes, I only care about the integer. The decimal (e.g. how many seconds are leftover after I've taken out the minutes) will get picked up by the modulo operation for the seconds display. In some other languages, the divide operation would always return an integer, unless you specified that one of the numbers was a float (90 / 60 == 1 but 90.0/60.0 == 1.5).
i thought about what you said about that not being the best solution and kinda came up with a work around using map and filter. now the test i was trying to pass works. ill check out your solution though. ive never seen toSource before
toSource() throws the source code of object. Wouldn't recommend to a object which has a lot of attributes, or even 2, but if your object is empty it will throw "({})"
# This site can‚Äôt be reached **tldrblog.com** took too long to respond. I was curious though :( 
Sorry I should have specified that it was the technical interview and the applicant is tasked with fixing some problem with a web application. One of the problems is that mysql doesnt have the proper permissions but to change the permissions the applicant needs root access.
How do you mean they block you? Are you just getting the cors issue?
Farmer ? The only version I know is about wolf, goat and cabbage only. 
If you're using Express / body-parser, you can use the [cors middleware](https://expressjs.com/en/resources/middleware/cors.html), otherwise you can use something like a [cors-anywhere](https://cors-anywhere.herokuapp.com/) thing
If I were doing interviews I would set a trap by starting with common question, complimenting the guy if he passes them then moving chatting casually about the experience and how he works, how he codes etc... This last part being the real test.
I'm planning to use cypress.
/u/gaearon (Dan Abramov) posts on /r/reactjs
I mean that's just not correct. They have two different names for a reason. That's like saying Bootstrap is the same thing as Flex or Grid. They're simply not. Bootstrap comes with tools out of the box for styling and building pages on top of its grid system, therefor it is a **framework**. Flex and Grid are no more than a way to lay out HTML elements with no other additional utilizes for, making fancy looking buttons or forms, therefore it is a **library.** Calling Flex or Grid a framework would be absurd, because it is not. Similarly, calling Bootstrap a library would be wrong, because it is much more than that. The terminology does matter, and saying they are the same thing is ignorant. React is a library, and Angular/Vue are frameworks.
Does anyone know what syntax scheme he is using on that site called? 
&gt;Took [~~@~~**sarah\_edo**](https://twitter.com/sarah_edo)‚Äôs Night Owl and replaced emerald with pink [https://twitter.com/dan\_abramov/status/1069536350792241152](https://twitter.com/dan_abramov/status/1069536350792241152)
I don‚Äôt think there is any reason that you couldn‚Äôt use async/await instead of sagas. There are a few fundamental differences between the two approaches, but I honestly don‚Äôt think that you gain enough from redux-saga to justify the increased complexity. The biggest gain for using Redux saga IMHO is the ability to trigger sagas from actions, which I think is a bit of an anti pattern to begin with. Simpler is almost always better, and async/await thunks are really simple.
Using an API is recommended because it's approved and easy to work with, but sometimes you need data that's not available through an API, or the API is run entirely in the back-end with server-side rendering employed. Scraping sites effectively requires knowing the methods employed to prevent it. These can include; **Trying to execute a simple JS expression (since many scrapers don't handle JS) before loading page content** You can often bypass this by removing the script element from the DOM, or injecting the correct result. **Checking user-agent (easy to fake, less used these days)** You can often set your user-agent when doing server-side scraping. **Having the content itself fed in via JS** More common with web apps and single page applications, but that data has to come from somewhere, so checking what network calls are made and emulating them will often give you the information you want. **Using iframes and restricting the origin they can be accessed from (not used often because iframes have fallen out of favour for most sites)** More difficult to defeat, but this is when Puppeteer and such come into their own as Cheerio simply doesn't have any effective method of bypassing this, but an actual headless browser will render the content and allow full reading. Sometimes you'll find a combination of these employed and it becomes a bit of a case of coming up with almost-hacky solutions. At some point, you'll probably find that you're temporarily (or permanently) banned from accessing the website if you scrape too frequently or too much data.
The bundle does not perform as well for 2 reasons: The filesize is larger and therefore takes longer to download \*and\* parse, and the code isn't as efficient to run. That doesn't answer if it's worth serving it separately, especially since you could mistakenly send the wrong version, but that's going to be up to how much performance you need and how much different you actually end up with. At my company, we just serve the 1 bundle, optimized with webpack for the browsers we support.
Do you mean the ES6 code is larger? The bundle should be minified so it should be smaller than the original ES6 code
It probably varies by application. The only way to get an idea if it makes any sense is to test it. Then you can apply what ever definition of "make sense" you are using.
An alternative is to create two bundles and deliver ES6 via `&lt;script type=module&gt;` and ES5 via `&lt;script nomodule&gt;`: https://jakearchibald.com/2017/es-modules-in-browsers/
Oh that's neat
lol 
I know this won't be much of a popular opinion, but so far I find it underwhelming and even somewhat _banal_. No offence meant; just my opinion.
It depends on what functionality of redux saga you are using. If you're only using it to perform async function calls with `call`, I think you're better of without redux saga. In my opinion, redux saga lost most of its charm after async/await, but it still has very useful functionality.
Yeah I'm just messing around :)
It's just a joke
Is there anything this man can't do? In Dan We Trust. 
For what it's worth, your particular problem [is here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) (`includes` uses this same comparison): &gt; Object.is({}, {}); &lt; false Or in other words, one `{}` and _another_ `{}` are not the same value; they are different objects.
Thank you! What are the functionalities you cannot cover with async/await?
Yo, that's really cool!
I meant functionality, which is not related to performing async function calls. Redux saga has a very extensive api
yeah me too.. i just hit the solve button over and over.
All you did is explain what the difference is between a lib and a framework. But I‚Äôm asking what features or capabilities of Vue make it so we need that distinction. I think the two are more similar than realized. 
I'll be honest, the only way I'm going to know this obscure implementation detail of how promise.all works is to go read the implementation details or try and discern it by just running it. Turns out promise.all at least in node performs a copy of the array so adding to it won't impact the details, this is verified by looking at the results of promise.all. But let me be frank, this is bad code that should never see the light of production, and would get flagged by any web developer worth their grain of salt in a pull request. I would never ask this in an interview. I don't want developers thinking this is how I write code or the company I work for writes code. 
you can also do server side checks, but getting fancy with multiple builds isn't without its risks/costs.
I really like that this is actually an old-fashioned blog. No medium article inundated with memes, unsplash pictures and emojis, no friggin' screencast series, no newsletter.
I don't think that `Promise.all` actually copies the array. Instead it most likely just attaches `.then` handlers to each input value. In this context it makes sense that the new `Promise`s will not be taken into account.
Perhaps it's not targeted to your level of expertise.
‚ù§Ô∏è Dan Abramov. Such a genius. 
That may be the case, of course. But I'm mostly talking about the subjects chosen themselves. Not so much their complexity or whatever, but the fact that it's stuff that has already been widely written about elsewhere. I mean, the feeling is one of "yet another blog on...". Of course, this is about what little content is there so far. I'm not extrapolating to whatever he may write in the future.
The es6-&gt;es5 transpiled bundle, minified, will be larger than the es6 minified.
&gt; Is there anything this man can't do? Make mistakes.
Well played sir.
Got me there!
I like to live life on the edge by saying "lol" as many times as I can. 
&gt; could you? Yes I could. The reason I'm asking here is that this subreddit is a small community and I figured I'd get some decent responses here. And sqlite has a desktop tool in which you can view table rows, write up a query and run it against the db, edit the table settings, etc. I was looking for that, but hosted on a web interface. 
Obscure, yes, but it has implications for the following structure: 1. Promise.all() on an array of Promises to send a message. 2. Upon any failure to send the message, add a retry attempt in to the array managed by Promise.all(), then resolve the original Promise attempt with the state "will retry". It's something that I investigated as a solution to a rather specific problem I had involving interaction between Promise.all, a Promise queue which needs to allow retries at the back of the queue whilst not blocking the front of the queue with failed attempts, and recursively retrying Promises. Because Promise.all works on the original elements in the input array of Promises rather than the up-to-date ones, I was unable to consider this as a potential solution.
Hi /u/danishrezavi, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/BennyDelSur, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/qkimchee, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/FetusGod, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Yator19, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Hentry_Martin, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/FAKEASSHROUD69, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Vanskyl, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
its /r/gaearon now
Still sounds like trying to use the wrong structures to fix your problem. Wrap your request in a higher order promise. Retry as necessary inside that HOP and resolve/throw the HOP as necessary. Make the responsibility of retrying isolated to the request, not to the array of requests. Then you can promise.all the array of the HOPs, and that will resolve nicely with retries when necessary - with the added functionality of maintaining the original order. If you *really* need to control it at a collection level, then you should implement an actual queue, and make a "queue.resolve" function that would wrap around all these promises, where you keep creating new arrays of promises to be retried every time a promise.all fails. But Promise.all is an all-or-nothing operation, so youd still need to have control at an individual level.
\- function x() {} will be hoisted whilst const x = () =&gt; {} won't be, so order matters in that regard \- function x() can be overwritten by var x = 0 where const x can't be overwritten \- function x() has access to *this* inside the function whereas const x = function() has, but const x = () hasn't (well, it technically has, but *this* refers to *window*) concerning memory usage, I personally have no clue, someone more advanced in JS has to answer that - I'd assume they are identical.
OK. Didn't see anything about that in the guidelines and there's "help" flair so I thought it was acceptable. 
You would need to look at the source to see if the array is copied. In the source I found it is, something modifying the array would have no effect. This may not be how promise is implemented for you, idk. But have a look. Source is almost always the best way to answer questions like these. https://github.com/then/promise/blob/master/src/es6-extensions.js
Newer features generally don't have better performance. They are usually made for better development practice. For loops and callbacks are still faster than their alternatives
Yes, someone from the react team writing about react internals is *exactly* like everything else written on the subject.
done &amp; deployed. [https://aditya-r-m.github.io/twisty-polyhedra/](https://aditya-r-m.github.io/twisty-polyhedra/) Note that the heaviest dodecahedra are quite computationally intensive to emulate :D
Oops, that's a typo. I meant "protocol" obviously.
I did look through Vue, React and Angular. But not really certain which one suits my needs regarding frameworks. I'll be running the logic through PHP. 
&gt; Source is almost always the best way to answer questions like these. As someone who makes test suites for standards certification: The one source of truth is the specs. Don't assume that the implementer has fulfilled the spec faithfully unless there's a spec suite for it and it passes. If there is a spec suite and it doesn't delve into this level of detail, then it's fair game ‚Äì but then nobody is technically 'right', even if there's a general consensus.
concern troll
Medium is so bad
 let validators = { 'user': validateUser, 'product': validateProduct, 'supplier': validateSupplier // ... }; data.forEach(obj =&gt; validators[obj.type](obj)); But you should probably check that there is in fact a `validators[obj.type]` before trying to call it, of course.
You could "bundle" logic for validation with specific type of data in one object, then delegate to those validations in your loop: // lightweight constructor, you might want to consider using `class` if // your object creation logic turns out to be more complicated const User = (data) =&gt; ({ type: "user", data, validate: function() { return validateUser(this); // or inline the definition of `validateUser` here } }); const Product = (data) =&gt; ({ type: "product", data, validate: function() { return validateProduct(this); } }); const Supplier = (data) =&gt; ({ type: "product", data, validate: function() { return validateSupplier(this); } }); data.forEach(obj =&gt; obj.validate()) Related: [Expression Problem](http://wiki.c2.com/?ExpressionProblem) 
Without even looking at the implementation, I would be willing to bet the promise added later would not be included in the ‚Äòall‚Äô console log callback. Regardless, you shouldn‚Äôt be writing code like this, it leads to hard to debug problems and weird race conditions down the road. 
\[And he uses Gatsby for this blog. Just perfect :)\]([https://i.imgur.com/a5GfbZi.png](https://i.imgur.com/a5GfbZi.png))
I agree with /u/kaltsoon . If you're just doing AJAX calls, you _don't_ need sagas for that. Thunks are more than sufficient. Where sagas are really useful is logic that needs to respond to dispatched actions, or complex async behavior that involves timeouts, "background threads", and so on. That's something you can't easily do with async/await. See the [new Redux FAQ entry on choosing an async middleware](https://redux.js.org/faq/actions#what-async-middleware-should-i-use-how-do-you-decide-between-thunks-sagas-observables-or-something-else) for more details. Also, while I know this is an example, that `mapDispatch` usage looks wrong. It's written as a function, but it's ignoring the `dispatch` argument and just passing back an unbound version of `incrementAsync`. I recommend using [the "object shorthand" form of `mapDispatch`](https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object) in almost all cases.
Really nice UI, looks like a lot of work/attention to detail was put into it. I see that you plan to open source it, which will be great. I wouldn't mind submitting a PR to translate it to French or Spanish (if internationalization is on the Roadmap). Keep up the good work
The array isn't an alive object that the Promise.all is looking at, it takes the array when first called and executes the promises. 
&gt; Because Promise.all works on the original elements in the input array of Promises rather than the up-to-date ones, I was unable to consider this as a potential solution. Frankly, I find it strange to even consider it could be otherwise. Knowing how the tasks get queued on the event loop / microtask queue, if `Promise.all` worked on "newly inserted elements", it would mean it would need to be able to _de-queue_ tasks and do so with the highest priority. Not really something anybody would want at all.
It was okay at first i thought, but now it's a steaming pile of shit :/
Ok. If the question is ‚Äúwhat should it do‚Äù you are right. If it‚Äôs ‚Äúwhat will it do‚Äù the source is the truth. :)
This is really odd. probably the right way would be to not resolve the original promise until it has retried, or collect a new array of retries and Promise.all that new array.
I dunno, I just clicked on the article someone else linked above that he wrote about how react tells if a component is a function or a class and I haven‚Äôt seen anything written on that subject before specifically. Sure all the `prototype` and `new` knowledge is nothing new, but it was still very interesting and approached it as a solution for a very specific problem.
Yes, We made mongoosejs soft delete super easy and customised. This project is made opensource so any feature request, issue and PR are most welcome. Github Link: [https://github.com/passionInfinite/mongoosejs-soft-delete](https://github.com/passionInfinite/mongoosejs-soft-delete) It is also published on NPM and YARN [https://www.npmjs.com/package/mongoosejs-soft-delete](https://www.npmjs.com/package/mongoosejs-soft-delete) &amp;#x200B;
This will get down-voted, but I really don‚Äôt understand why there is this cult of personality around Dan Abramov. I‚Äôve seen couple of his presentations and read dozen of texts he wrote ‚Äî everything high quality, but why the hype?
Actually could help creatives come up with new ideas for shoes, very cool!
I don't think there's reason to downvote Your comment;) It's Your opinion. I think he has a great skill on explaining in-deep mechanics for newbies who don't really need it at the momment, but it can help them get hyped and motivate for learning more. Seriously, if You just started learning react, You probably won't use hooks but still his presentation makes You hyped for them:)
Also he's the guy who basically came up with Redux as well as one of the guys behind CRA and probably quite a few other things. 
I can‚Äôt find the source for this blog. Anyone found it, or the theme
&gt; This will get down-voted, but I really don‚Äôt understand why there is this cult of personality around Dan Abramov. I‚Äôve seen couple of his presentations and read dozen of texts he wrote ‚Äî everything high quality, but why the hype? this comment sounds like you think Dan Abramov‚Äôs best known as a teacher/instructor, which is not the case.
its really a question of where you are in terms of knowledge and the learning curve you're willing to take on. any of the frameworks you mentioned would suit your needs but assuming you're not familiar with any and more of less a beginner in JS (judging by the question) I would say React would be a bit too steep (unless you wanna build a form &amp; learn React in the process). Vue carries an easier learning curve. Angular 2+ is also a bit steep. Personally, I would build such a form in AngularJS (1.x) since the two-way data binding would make things pretty simple but I don't recommend you go this route since it's kind of a deprecated framework. My advice would be to build it in plain JS / ES6. Would be a fairly quick learning curve &amp; you can use this project to build a good foundation for learning one of the popular frameworks. As I mentioned in the previous comment just create an object to store the form state &amp; another to store the values, then build some functions to update those objects according to the logic needed as you move through the form. feel free to DM me if youd like more help
Doctor it hurts when I do this. Don‚Äôt do that. 
Maybe he can code for me so I can get a new username
https://github.com/gaearon/overreacted.io
https://github.com/gaearon/overreacted.io
One thing I really like about Dan Abramov is realist and never preaches something as the absolute truth as opposed to some SOLID evangelists you often see at tech conferences. I think the distinction is Dan Abramov actually works on production code that deals with real world problems while the evangelical types just do talks and ‚Äúconsulting‚Äù.
Hi /u/pamblam-1, please refrain from personal attacks. Thanks.
That's fine if you don't like it! 90% of the article isn't about React ‚Äî it's about how `new`, prototypal inheritance, and classes work in JavaScript. How you find those parts useful if you decide to read them.
Maybe you can learn from the man and earn it yourself.
Redux-saga is the most arduously asinine web technology I have ever used. I would not recommend using it ever.
I would expect Promise flow to be ~5000, like for _any_ other function call.
&gt;But you should probably check that there is in fact a validators\[obj.type\] before trying to call it, of course. You could accomplish this with an &amp;&amp; operator let validators = { 'user': validateUser, 'product': validateProduct, 'supplier': validateSupplier // ... }; data.forEach(obj =&gt; validators[obj.type] &amp;&amp; validators[obj.type](obj)); &amp;#x200B;
Thanks dude, that worked!
[removed]
yup, all bad patterns we did 15 years ago but these react fanboys don't know any better.
 Vue automatically knows when it‚Äôs components should update, so there is no need for a ‚ÄúshouldComponentUpdate‚Äù method. I gather it‚Äôs because you define your component vars up front (via the data func) but that‚Äôs just a guess
Chinese python. Chinese basic. brainfuck. whitespace. 
&gt; Chinese python. Chinese basic. Both of these are translations of python/basic respectively which are natively English programming languages. &gt; brainfuck. whitespace. These aren't major languages. &amp;tbsp; Trying to embarrass yourself in multiple threads I see.
oh did I embarrass you? I'm sorry friend. maybe dont post stupid bullshit and you won't get embarrassed. there's literally tones of languages not based on English. you took the time to google whitespace and brainfuck why not google for non English languages while you're at it.
Seems like your display results function needs to get the current page from the results and display a next button with the next page value based on that
&gt; yourself ug ug reading hard. reading hurt pamblam0 head. &gt; there's literally tones of languages not based on English. No major ones. &gt; you took the time to google whitespace and brainfuck No need to project your stupidity. I'm already familiar with many gag languages. They're fun to mess with on occasion.
I agree. Both when it comes to Abramov and Redux. Redux is a boilerplate-spewing monster.
poor guy. if your head hurts you dont have to keep replying. you just keep getting embarrassed anyway, right? chinese basic is a major language in China. it is it's own language. you can try to talk your way around that fact but you'll probably just get embarrassed again.
&gt; poor guy. if your head hurts you dont have to keep replying. you just keep getting embarrassed anyway, right? You have the reading comprehension of a 6 year old lmao. &gt; it is it's own language. &gt; What is ChinesePython ? ChinesePython is a sort of translation work of the Python language into chinese. Taken right from their website. &gt; you can try to talk your way around that fact but you'll probably just get embarrassed again. I don't have to do any work here. I can just quote their website.
dont you have to be 18 to make a reddit account. what are you doing here if you're only six? lol I just kinda feel bad for you now. go outside and play, kid.
what the actual fuck does it being a translation have to do with anything. it is still it's own major language tard bagel. (I won't call you any real names since you're only six)
Lmao buddy purposefully misreading what I'm saying isn't helping you. If anything you said was true then it would be true that you're getting your ass verbally handed to you by a six year old. Also the legal age for Reddit is 13, but I wouldn't expect you to know. 
I just disable JS on medium and it's tolerable. No pop ups, no telling me that their tos changed, no asking me to sign in, no tracking what text I select on the article (that weirds me out the most).
Couldn't a nefarious library simply remove the event listeners associated with 'load' to avoid this? I can't think of many times where I've specifically implemented something to listen to load events on the window so I don't think there'd be many people that would notice the removal of those listeners. Could be wrong though.
you're the one willingly allowing yourself to be trolled by someone who is obviously so much smarter and more handsome than you.
Lmao its only trolling now that you've been completely shut down. Gotta save your pathetic fragile ego somehow!
what you doing later? wanna hit up the titty bar? 
It being a translation makes it not native. I said major AND native. See how that works? I guess not. I wouldn't expect a programmer of your caliber to understand something as simple and easy as an `and` condition. 
No, I have better things to do. Aren't you supposed to be pretending to be under the delusion that I'm 6? Yikes! Can't even do that right.
Honestly, I wouldn‚Äôt worry about it. Doing that could get extremely complicated and I‚Äôve never noticed any significant performance difference. Focus on developing an easy to understand, consistent build workflow instead of shiny tricks that you‚Äôll have to maintain. 
native? wtf are u talking about? native to what? maybe you should check a dictionary and then restate your position. 
oh I thought the trolling was over because of.. like, my pathetic fragile ego or something. I didnt realize I was supposed to keep going. shame on you for trying to go to the titty bar. you're way too little for the bar .
You can go for as long as you want little guy. All I was pointing out is that you can't even be consistent. I'm going to have to give you a D- on your defensive trolling. You can do better than that.
so what about that titty bar then? you been talking to me for the last couple hours.. we both know you do t got anything better going on.
&gt; so what about that titty bar then? &gt; No, I have better things to do.
oh, ok. so reddit fights and masturbating? sounds like a pretty solid night man.
Since you're using async XHR, you need to use a callback. Pass a callback function to soil_data, and then call it with the results of the API call. 
&gt; night It's the middle of my work day, friend. 
oh I used to work nights too. bummer. dont beat off at work too much tho, you might get caught.
&gt; nights &amp;nbsp; &gt; day Don't hurt yourself thinking too hard lmao 
that's good advice. thanks man.
Anything for the special needs.
Sure, but don't just lay the blame on them. There are some rather normal articles and layouts on there, you're not exactly forced to have a full-height splash screen and Confession Bear.
what special needs do you want?
Oh sorry! There I go assuming you have any sort of intelligence. "special needs" is another way of saying "retarded".
no special needs means disabled. you said you'd do anything for special needs (in other words, youd do anything to have a disability) - I'm just wondering what kind of disability you're tryna cop. 
"disabled" is another word for "retarded" you retard. &gt; you said you'd do anything for special needs (in other words, youd do anything to have a disability) No, that's just how you've misread it... again. You can't contend with the actual ideas so you've been purposefully misreading them and then playing dumb. 
no. retarded is a subset of disabled. dont call people names that's mean.
Or use RxJS. Replays and retries are a part of RcJS spec. 
How well I worked under the desk. #MeToo
&gt; retarded is a subset of disabled Not colloquially &gt; retarded is a subset of disabled The worlds mean. Don't worry about it. You'll get used to it when you grow up.
True, but then you get a ton of people that use embedded github gists to show source code, which completely sucks on mobile
Yes I though so to, but apparently you can only remove eventlisteners if you have a reference to the listener that was registered. See [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener) &amp;#x200B;
Promise.all iterates over the entire collection immediately. Any additional promises added to the array given won't be available to the method, and you'll need to run it again.
Thanks for pointing this out. Medium has become a nuisance. As someone who doesn't blog I'm assuming so many people use it because it is that much "easier" than setting up your own? And maybe they aid in marketing your content too?
Wouldn't you use CSP for this?
Is there an RSS feed?
Doesn‚Äôt it require Java to be installed? I think this is a no go, especially as a default choice for webpack. 
Not any more! [https://github.com/google/closure-compiler/wiki/Releases](https://github.com/google/closure-compiler/wiki/Releases) July 16, 2018 (v20180716) ... The npm distribution now includes native binaries for MacOS and Linux. Native binaries offer faster compile times without requiring a JVM. &amp;#x200B;
Def not bulletproof. Stubbing service worker registration with a resolved promise would prevent the service worker from registering. Just need the stub to execute before the service worker registration. navigator.serviceWorker.register = () =&gt; Promise.resolve()
Yep - I think this is the correct answer. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src
Please do the needful and design the facebook while explaining why man holes are round. 15 minutes begins now.
how to do callback function ? &amp;#x200B;
This here is another solution: ```JavaScript const validators = { user: (item) =&gt; true, product: (item) =&gt; true, supplier: (item) =&gt; true }; function validate(data) { return data.map((item) =&gt; ({ ...item, isValid: validators[item.type](item) })); } ```
Hmm yes that seems right. I thought it was only for loading scripts files, but it seems to be covering everything... Will look into this! Thanks.
Basically because he is approachable and communicates with people while being a good engineer working for a 'prestigious' company. It is incredibly rare. I don't agree with the cult of personality but I can understand why people like him. I like Dan because he is nice. 
Found a great link https://developers.google.com/web/fundamentals/primers/modules It's kinda complicated, so I guess I'll just stick to bundling
This sets the variable `Item` to the mongoose model and then sets `module.exports` to the `Item` variable so that you can `require()` it from other files.
Is it not possible with the method listed here? https://stackoverflow.com/questions/26845535/removeeventlistener-without-knowing-the-function
I saw Crockford give a presentation on the book before it was released. It looked very strong and I am ordering It now. Didn‚Äôt realize it had come out. 
Its shorthand for Item = mongoose.model('item', ItemSchema) module.exports = Item
I understand why it has such syntax but it still looks #bad for me 
I came across this recently after editing my browserlist for a project to exclude IE. Babel therefore output ES6 code, and Uglify naturally threw a fit. Terser dropped in quite nicely as a replacement. &amp;#x200B; I guess once the vast majority of browsers are evergreen it will be hard to sleepwalk into this situation again. The current assumption that a minifier will only have to deal with ES5 has not been a problem because it is almost always true - and Uglify is bulletproof at dealing with ES5. But I am guessing that a few years from now that even the baseline capabilities of the browsers we target will be changing on a much more rapid basis.
Eh, we all know what you just said is BS. Of course a new technology is less-widely adopted. If you're gonna sling mud, at least remove the rocks.
No way. Terser is run by some of the same people as UglifyJS, who refuse to make a changelog: https://github.com/terser-js/terser/issues/167 And saying "just use git log" is no help when the git log is often brief and unclear. Support projects which support their users.
I actually used to use closure compiler for Mithril (until the current maintainers decided to change it[1]). I even used the online service to avoid downloading an extra dependency. The only complaint I had with it was that it didn't allow you to specify options as granularly as with the CLI tool, but other than that it was pretty reasonable. [1] https://github.com/MithrilJS/mithril.js/commit/843d7ad45431b86953ec36dd36f4b2cc18659e32
ahh okay , thanks guys for the help (:
Very interesting question indeed! Off the top of my head: - First party ecosystem. You have a great first party Router, first party State Management, an awesome CLI tool (entirely different league than CRA imo) and a lot of other stuff that is supported by the same team building Vue, guaranteed to stay up-to-date and sort of standard so everyone knows it. Also means a lot of projects are structured similarly, so if you get a Vue dev he'll get familiar with your project very quickly (easy onboarding). - The Reactivity system. If you're all-in on immutability you might think of this as a downside, but simply updating state and Vue automatically knowing what depends on it and what needs to re-render can be super intuitive and nice. Vuex (state management) is also using exactly this under the hood. But then again you can also use Redux and alike with Vue, it's just that most don't want/need to. - Styling! Native, easy-to-use support for "normal" CSS, scoped CSS, CSS modules, dynamically updating inline styles and toggling classes, all very flexible and intuitive using String, Object or Array syntax depending on use case. And [Animations/FLIP transitions](https://vuejs.org/v2/guide/transitions.html#List-Move-Transitions) built in! - Some bundle size and performance advantages (although in most cases, both React &amp; Vue should be small &amp; fast enough and if you have problems with performance or bundle size, your issue probably is not the framework itself but elsewhere) - Not built by a giant corporation (that also happens to be Facebook) but "truly open source", backed and developed by the community. You can just as reasonably see this as a negative though, depending on your point of view! So basically, no matter whether you're using templates or JSX or Pug or whatever, it saves you from a lot of time spent on tinkering and finding your way around the vast JS ecosystem while also providing a lot of little helpers that improve DX and are simply pleasant to use. (like the built-in transitions) But, React definitely has a larger 3rd party ecosystem. If your project is actually large-scale enough that spending quite some time on evaluating different styling solutions, routing solutions, ways to structure your project and so on and so on is required because at that scale every minor variance might make a huge difference, there's basically no difference between Vue and React. And React might be the better pick then for it's larger ecosystem, better TypeScript support (that'll probably change with Vue 3 though) and greater focus on immutability. But for most projects‚Ñ¢Ô∏è, Vue increases productivity and is a joy to use.
Hi /u/DerNalia, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Author here: 1. The original is ES5-only, i.e. pre-ES6. 2. The "six" edition is ES6+-only. 3. The "six" edition covers more ground than the original. It's more than just a "translation," there is also a lot more about classes in the "six" edition. There are two reasons there is more in the "six" edition. First, and most importantly, before I released the "six" edition, I wrote an entire book about metaprogramming classes in ES5, "JavaScript Spessore." When I wrote the "six" edition of JavaScript Allong√©, I ended up incorporating most of Spessore directly into it, after removing things that weren't necessary in ES6 and so on. Secondly, I added a few new ideas after workshopping them as blog posts.
Wow that guy was being a huge dick to you. Sorry about that. 
1 reason: you didn't know what they were for or how to use them
What? Vue is 4 years old. React is only 1 year older than it
React got to a state you'd actually want to use very quickly because it had the team around it. Vue was just Evan for the first two years and it took Vue until 2.0 before the community started saying it was ready and bringing people in. It's not a fair comparison. The best analogy I can make for Vue is CD Projekt Red. Not many people cared about Witcher 1. Small company, small team, dark plot, good and neat but no blockbuster. By the time Witcher 3 comes out, international blockbuster success. Where React is more like the Sims. One of the biggest companies in the world funded it so it was great more or less right away.
very nice!
I don't care much for React but I enjoyed the class vs function deep dive, the why behind the what.
I care
https://overreacted.io/rss.xml
I like that it's just Gatsby base theme.
To be fair though, uglifyjs2 is \*maintained\*, but they've stated they won't be adding support for ES6+ any time soon, and the commits surely have slowed.... I'd describe it as effectively sunset. It has seen greener days for sure. I remember years ago seeing \`mishoo\` comment on one of the uglify issue tickets that the project had, up to that point, just been a one-man hack show and that was probably not the best in terms of long-term health of the project. I suppose he lost interest at some point 
Says it‚Äôs no longer available?
Uglify-es was a fork - it's what is no longer maintained. 
The browser tends to (usually) give you APIs to match HTML attributes so you can avoid the clunkiness of setAttribute. You can just do "audio.src = "mynewsrc.mp3" (instead of audio.setAttribute(...)).
3 posts in I already want to say best blog ever. 
&gt;Really nice UI, looks like a lot of work/attention to detail was put into it. I see that you plan to open source it, which will be great. I wouldn't mind submitting a PR to translate it to French or Spanish (if internationalization is on the Roadmap). Keep up the good work Thanks for the good words and also for the offer to participate in the development of the application. As soon as the project is uploaded to the open source, I think it will be possible to return to your proposal.
A couple suggestions. 1. Don't mutate state, instead keep things pure by passing in your state as an argument, and return a copy of it. This will make your code much easier to reason about. 2. Don't mutate arguments. This causes a lot of bugs in practice. 3. Since you're referencing everything by id, just use an object rather than an array. Here's how I might write your scanner module. // rename to createItem since this isn't "scanning", just creating a new object const createItem = (id, count) =&gt; ({id, count}); // adds/updates scanObj const update = (scanObj, item) =&gt; ({ ...scanObj, [item.id] : { ...item, count : (scanObj[item.id] ? scanObj[item.id].count : 0) + (item.lbs || 1) } }); // remove items from scanObj const remove = (scanObj, item, num = 1) =&gt; ({ ...scanObj, [item.id] : (scanObj[item.id] &amp;&amp; scanObj[item.id].count - num &gt; 0) ? { ...scanObj[item.id], count : scanObj[item.id].count - num } : null }); // exports module.exports = {createItem, update, remove}; let res = createItem("eggplant", 3); console.log(res); // -&gt; { id: 'eggplant', count: 3 } res = update({"eggplant": res}, createItem("eggplant")); console.log(res); // -&gt; { eggplant: { id: 'eggplant', count: 4 } } res = remove(res, createItem("eggplant"), 2); console.log(res); // -&gt; { eggplant: { id: 'eggplant', count: 2 } } res = remove(res, createItem("eggplant"), 2); console.log(res); // -&gt; { eggplant: null } res = remove({}, createItem("eggplant"), 2); console.log(res); // -&gt; { eggplant: null } 
&gt; I even used the online service to avoid downloading an extra dependency this is just silly. you replace a dependency which you can at least have some control over with a service that in turn uses that dependency? you just added 2 dependencies (one more fragile than the other) in an effort to avoid one! Closure minifies very well, but does not offer as much control as Uglify, so frequently you end up with slower code because of its aggressive in-lining and bloating function size as a side effect. they do have a `/** @noinline */` annotation now, but good luck chasing all the places where it has a perf impact. i try to maintain a single-file js version of Closure anyway, in case i ever want to switch back: https://github.com/domvm/closure-compiler-js-prebuilt
How the hell a changelog is considered a burden? That thing is crucial for an enterprise project for example. Look on /r/Apple. Even the non-technical persons are asking for concise changelogs. The problem with this type of people is that they demotivate. You as a potential user, you as a potential maintainer and even other people wanting to develop the same thing but abandoning since ‚Äúthere are alternatives with 1.2 million downloads weekly‚Äù. I do understand that a dev should be respected, but he shouldn‚Äôt bitch about elementary things like a changelog. If he doesn‚Äôt have time to actively develop a repo just pass it to someone trustworthy. That guy didn‚Äôt listen to uncle Ben‚Äôs advice: ‚ÄúWith great power comes great responsability‚Äù.
Could be an ad service? (https://www.prnewswire.com/news-releases/liqwid-releases-the-adinject-library-enabling-digital-publishers-for-a-complete-automation-of-advertising-inventory-based-on-viewable-only-ads-transacted-through-a-real-time-dutch-auction-300488900.html)
What do you hate or dislike about it?
Because Udemy-based developers cannot understand what Crockford and Flanagan. It‚Äôs like elementary math explained to kids vs high school math explained to the same kids.
Hmm didn't know that one. In the comments it says it is not part of the spec. I tried it in Firefox but the method doesn't exist. Chrome seems to support it though.
I had some unpleasant discussions with this person as well ([https://github.com/webpack/webpack/issues/8350#issuecomment-438265506](https://github.com/webpack/webpack/issues/8350#issuecomment-438265506)). From what I've seen, this is the kind of maintainer who makes sure there's no community around the project. &amp;#x200B; However, kzc won't be working on Terser anymore ([https://github.com/terser-js/terser/issues/174#issuecomment-440418083](https://github.com/terser-js/terser/issues/174#issuecomment-440418083)). That's why I keep being involved myself.
Holy hell is this ever fast! Willing to bet this is Gatsby.js or some similar magic
Thank you for your contributing! From what I understood, with async/await instead of executing a function on a dispatch of an action you just call the async function. If you think to replace the dispatch on an action that triggers complex async behaviour with a simple function call seems you'll have the same result. To make something a little bit complex than a simple delay: async function login({ payload }) { try { store.dispatch(loginActions.LOGIN()); const res = await Api.login(payload) if (res.step !== STEPS.EMAIL_CONFIRMED){ await Api.sendEmailAlert(); store.dispatch(loginActions.EMAIL_NOT_CONFIRMED()); return; } const user = await loginSuccessFlow(); store.dispatch(loginActions.LOGIN_SUCCESS({...user, ...res })); browserHistory.push('/'); } catch (error) { store.dispatch(authActions.LOGIN_ERROR(sagaErrorResponse)); } } async function loginSuccessFlow() { const { common } = store.getState(); const { user } = Api.setUserData({ lang: common.lang }) return user; } The example is just to show that with async await we can behaviour that includes different flows. I think that changes the way of doing behavioural functions because you don't need to think about (async)redux actions in this case. I'm not sure that async/await can cover 100% of the use case of redux-saga (because of course, I didn't use it on production) It would be great if you can show me a different example :) Yes, you are right, the usage of mapDispatch isn't the best on this particular approach.
[UglifyJS](https://www.npmjs.com/package/uglify-js) had a couple of releases this year. I guess it's so stable that it may just not require more at this point. However, with no ES6+ support, it's effectively not suitable for many projects. I'm working on CKEditor 5 which is ES6 and works only in browsers which support ES6 as well anyway (basically, we don't support IE11 at the moment and that's not because of the language but a super quirky DOM/contentEditable implementation). We've been doing tests that if we transpile this codebase to ES5, it grows up to 40% (IIRC). Since we don't support older browsers anyway and since ES6 is so more compact, we need an ES6+ capable minifier. I guess this is true for more and more projects. Anyway, I've been following what's happening UglifyJS and then uglify-es and that's why I started asking Terser's maintainers if they consider trying to find funding. Maybe I'm naive, but for me, where's money, there's a bigger chance for developers and less chance of burn out. I've been criticised for that and there's not that much feedback from the community anyway (it looks like very few people care), but I keep trying. 
And after someone donated their time to make a changelog for them, it sits ignored: https://github.com/mishoo/UglifyJS2/pull/3262
It‚Äôs horrible isn‚Äôt it!
That's a great news :) Thanks! I hope that if Terser will repeat the history of its predecessors, then webpack will reconsider which minifier to use. Right now, they switched from uglify-es to Terser because it was a drop in replacement. At the moment, webpack is used by most frameworks as their default build tool. That effectively means that what's used by webpack becomes the default choice for (perhaps) a majority of web developers today. Anyway, having a stable history, GCC sure looks very good. IMO, projects that are crucial for the web community should have stable funding (which usually requires some sort of support from bigger players or a big community and popular maintainers). If Webpack/Parcell/React/Angular guys make a decision regarding a dependency of this sort, IMO, they should consider stability (both, of the code and the project and its maintainers) as one of the most important factors. Unfortunately, the JS/web community loves fresh, shiny things written in latest ES\* by a single hacker overnight. Anything more than that is "old" or "commercialised" or whatever. This isn't healthy for this ecosystem. While most projects can shift their dependencies like socks, for some this is PITA. For instance, I work on CKEditor 5 (an open source project) and now I need to explain in our docs that webpack switched from uglify-es to Terser and show them how they need to change their webpack configs (in long term, we want people to use the defaults) because many of the developers using CKEditor 5 don't come from web dev and will be confused. That's why I thought ‚Äì ok, Terser's the 3rd major minifier over the last couple of years. This has to stop. I started pinging its maintainers whether they are funded somehow (I thought initially, that webpack switched to Terser because it's some bigger community effort this time; it turned out not). Then whether they would consider opening OpenCollective. Finally, since Terser's main maintainer opened [https://www.patreon.com/fabiosantoscode/overview](https://www.patreon.com/fabiosantoscode/overview) I try to rise people awareness of the problem. Maybe I'm naive, but for me, where's money, there's a bigger chance for developers and less chance of burn out. Unfortunately, I don't see a lot of feedback. But let's see... :) At least I tried.
It's default Gatsby :)
It looks weird. Does anyone know why they didn't use \`private\` tag for these things instead of \`#\`?
hello jack this ain't frame work it just a way to demonstrate how you can build your node js back end code ,in the repository i follow object oriented approach and some coding standard ,the main point is in the Base Controller. so you can clone the project and start building any logic on top of it and if you needed any help tell me .
Does [https://gun.eco/](https://gun.eco/) work for your use case? Genuinely wondering since it says the database runs on every client
When you add a social media icon you can't then remove it. You have to start over. That's something you should look at :)
It sounds as if he knew how the community will react when they found it. Overreacted. Pun intended. 
Honestly, you should know one design pattern. It's called "common sense" and it includes using Google and StackOverflow to get to the right answer. Like the rest of us, you can't know everything, and the best answer changes over time. In any case, Addy Osmani wrote a great book about it: https://addyosmani.com/resources/essentialjsdesignpatterns/book/ It's important to know what each of those design patterns means, the problems they solve and why. You don't need to know exactly how to implement them. Please copy/paste the code from a reputed source, don't create avoidable bugs.
More important then memorizing the patterns is learning how / when to apply them to refactor code, that's what they're used for. It's not like when people code they directly code a design pattern, no they write code and then refactor using a pattern. If i had to list the ones i use most often: - module - revealing module - decorator - facade - observer Also be sure you understand scope / closures and concurrency / async.
You can remove, just press the trash icon opposite of the input field
I don‚Äôt agree with this. Learning different software design patterns helps you in the long run not just for JS. No one is asking a new software eng to learn all of them at once. Slowly picking them up and learning when to use them is very valuable as they‚Äôre language agnostic. And don‚Äôt just blindly copy and paste code.
or rather have the dollar sign tbh it could break most codebases tho.
I love it.
\&gt;me, in software design methods course right now at college, exam is in January. First i thought this will be a tough one, but since i understood that those principles are good not only in Java but any language, i got into it. Diving deeper into every one of them. The important thing my teacher said: You never apply every single one, over time you gather your favorite patterns and form your own style of coding. Some make more sense to you, some may not. There are always more ways of solving the problem. Like in a discussion with a friend of mine, whether we are using the state pattern or a finite state machine for a game we develop. Its up to you how you get things done. &amp;#x200B; I can suggest knowing the singleton, facade, state, strategy, observer pattern. Since you can do nearly anything with RxJS Observables and a singleton service in the web. That is also something angular enhances and i like the service thing angular provides. Some people tend to like the redux state approach way more. btw, that article doesn't mention SOLID anywhere.
We don't do homework or job interview requests, I'm sorry.
Well, it looks like more trouble to investigate than just coming out with another solution.
&gt; "So let's assume JS doesn't have a `map` function. How would you write it?" So I went out of my way to just use modern ES6 functional programming to add a `map` function to JS. I couldn't use Google but they told me about the parameters. I succeeded. But they told me I failed, because: "lol you could have just used `reduce` and be done sooner". Obviously, technically, they were correct. I was just expecting to be tested for programming skills. My advice would be: ask TOO MANY questions. Always. Don't assume anything. Sometimes the person interviewing you is a total dimwit. For example: &gt; "Tell us how you would check if the props were the right type in React?" I said: "Well, you have `propTypes` built in that I would use. They didn't know about it and told me "that's not true", I had to look it up for them. They almost denied my application because they thought I lied. They just didn't know what they were doing.
Well, your dots have angle and speed properties which determine their position, so if you wish to change their position, modify their angle and speed ¬Ø\\\_(„ÉÑ)_/¬Ø "Pushing" implies that a dot's speed should be increased in the opposite direction from the cursor, and to figure that out, you'll first need to figure out the angle towards the cursor; var deltaX = particleX - mouseX; var deltaY = particleY - mouseY; var angle = Math.atan2(deltaY, deltaX); // In radians After that it's just a matter of finding the opposite angle (add œÄ) and modifying the particle's actual angle and speed based on a "rate-of-change" factor.
Is there anyone outside TC39 who likes that syntax? And I mean "like" not just "tolerate".
I think it's good to understand the problems that design patterns solve. You don't need to understand how they solve it - you don't need to understand the patterns themselves. You just need to know the problems. Then, when you encounter the problem, you'll be like "Oh yeah, this sounds familiar. Wasn't there a design pattern for this?" and then you learn that pattern and see if it's appropriate for your situation.
It's about backwards compatibility.
It should be mandatory for repos to include screenshots
I absolutely agree. The worst of the bunch to me are 'microservice' tech talkies. The amount of 'no true scotsman' you hear in that area is mindblowing.
Why didn't I learn this in college... üòê
some good idea in this article. the adapter pattern is not really a design pattern though, it's more of a quick-patch-to-keep-things-working-after-a-breaking-change-has-been-made-in-the-api pattern. this type of pattern should probably only be used temporarily as it only serves to add an extra layer of abstraction. some of these are redundant and some are more or less useless. i wouldn't bother trying to memorize these, but i can definitely see how it would be beneficial to read through and try to understand how each one works, that way you can use the features you need as that need arises. there's some really good ideas in this article, it would be helpful if author grouped these into types to make it more of a reference article.
Not any request, but only on the requests you need to send (for protected endpoints). And on your backend, your request handler should check if the token is valid on protected endpoints.
Theres a link to a demo in the first paragraph. &amp;#x200B; [Click here to see this page rendered using github-readme](https://olian04.github.io/github-readme)
While design patterns can be invaluable tools in any developer's toolbox, I would warn you that unless you have a strong grip on JavaScript fundamentals that reaching for one might be the wrong idea. Applying a design pattern where it's not needed will absolutely complicate your code, and may even impact performance. I would advocate writing code without worrying about design patterns and, once you encounter certain situations where you think "wow this piece of code was really difficult to write / exceptionally cumbersome / bug prone", it might be that finding a design pattern for that issue might alleviate those problems.
So if someone has two separate tabs open with my application, opens some form on one tab, switches to second tab -&gt; accesses some protected endpoint -&gt; backend returns new token, now switches back to first tab and sends this aforementioned form with the most recent token - which was generated for the first tab and backend accepts this is it secure then? 
I tend to use the state and event queue patterns myself an awful lot, just to add!
The bast mayority of design patterns (un JS) are bullocks. They are copy-pasted from Java/C++ to JS. But due to the nature of the language they don't even make sense. So... Don't worry.
You shouldn't learn any of it, what you should do is get better at searching google. All "senior" devs do it.
Learning it can help but only if you also spend the time learning when it's best to implement each pattern. The worst repos I've worked on have been ones where developers had Patternitis (the incurable desire to implement patterns for the sake of implementing patterns rather than because it enhanced the readability or maintainability and instead had the opposite effect) This resource might be of interest along with others mentioned in this thread https://github.com/fbeline/Design-Patterns-JS 
But you can only access protected endpoints with tokens, and if that endpoints returns some kind of token, it shouldn't overwrite the token you used to access it, unless you want to refresh the token (well, you shouldn't refresh, but you can)
But answering your question, if the endpoint needs a different kind of token for the form submit, no, because the backend should negate the request. If the token you return is the same kind the needed for the form submit, yes, it is secure.
Blank page for me
github-readme is a custom element, are you sure your browser supports custom elements? See: \[Can i use it "Custom elements v1"\]([https://caniuse.com/#feat=custom-elementsv1](https://caniuse.com/#feat=custom-elementsv1)) If you want to use github-readme in your own project i would recommend including a \[polyfill\]([https://github.com/webcomponents/custom-elements](https://github.com/webcomponents/custom-elements)). 
Hmmm, iOS safari has a caveat
For me, it's mostly the GIANT header _and_ footer. First thing I do is inspect element =&gt; delete them. There also are often multiple pop ups. I'm sure people have other gripes about Medium
Note also that GoF patterns don't necessarily apply to all languages/frameworks/paradigms. It was written in a different time, for a different environment. That being said, they are the classics that inform a lot of what we do today, so it's good to read through them but there's no need to memorize them.
He's an extremely good communicator who effectively serves as the "face" of React. Several years ago, when the front-end landscape was more chaotic, Dan was a consistent voice of wise pragmatism. It was his presence back then that helped establish him as a "thought leader".
Aw man, I wish the art of rss-feeds wasn't as dead as a doorknob... 
Blank page here... running Firefox, Linux.
Anyone who actually understands these also knows that most of them do not apply in javascript. A singleton in javascript for instance is any global variable. A factory is any function that returns stuff. A command pattern is a function that you can pass around (which is any function). Most of these patterns were invented to try to wallpaper over deficiencies in java and c++ that javascript doesn't have. It's really quite ridiculous. You will get very little from learning these compared to the amount of work (mostly memorization) involved. People just like to pretend that they're very serious programmers by dragging these out. They're not though.
Possibly because there's a difference between computer science and software engineering.
You don't need to _memorize_ patterns any more than you need to _memorize_ math. The idea is that you should learn them _conceptually_. Why are they good? What problems do they solve? How do they solve it? Then, the next time that problem arises, your brain knows the answer. You don't have to have the name memorized, or even the pattern. You just know what the solution is _because it makes sense_. When you learned multiplication, you had to count it out. "5 times A is A + A + A + A + A." You probbaly had to hold a finger for each A to make sure you got to 5. Now, you just do it, _because it makes sense_. You no longer have to memorize that 5 times A means A + A + A + A + A. Conceptually, you know that it means you have five A's. Design patterns are the same way. You don't have to memorize how they are implemented. You don't even have to know what they are called. Knowing what they are called is relatively important, but only for communicating ideas to teammates. What's most important is that when you see that problem, you know what the solution is; not from memorization, but from conceptual sense. Read through each design pattern, _comprehend_ what the problem being solved is, and you're good. With time, you can learn them better -- by name, by memory -- but the absolute 100% most important thing is to be able to solve the problems that they address.
That book mostly went over my head when I bought it when I only had a couple of years experience. Several years later I was doing some Java programming and apparently implemented the "template method" design pattern without realizing I was doing so, I think I first validated my design against some source code from the Struts framework. Then I was off to the races with my understanding of design patterns. Fast forward to a little over a year ago I used the template method pattern in some Javascript code and got chided by manager (also a programmer) for it being "too complicated" :(
It could be because I studied computer engineering and they didn't think it would be important.. ü§î Then again I can't say I really learned anything at college that I use for my job that I didn't know before college
What do you think about it?
Yup, on mobile these are insufferable.
Basically when I read codes our team developed in the last 1-2 years I feel I sometimes barely recognize them and would think they are written by elementary school students. Then I realize that in JS 6 month means a new generation and 2 years old codes are similar to books written during your grandpa or great grandpa‚Äôs time.
[removed]
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
This one makes the most sense to me! thanks!
Probably would go with this way if it were a more complex project. And thanks for the link! 
Thanks bot, added.
One of the primary arguments for rollup in this article is tree shaking. Tree shaking has been added to webpack v4...
Hey fucker, this is awesome. Will be using this all the time, thanks.
*than
&gt;And don‚Äôt just blindly copy and paste code. you're seriously affecting my bitcoin mining git repos with this advice :) &amp;#x200B;
Also getting a blank page on Firefox 63 which according to caniuse should support custom elements. The error being given is "SyntaxError: invalid regexp group" and it's pointing to [this line](https://github.com/Olian04/github-readme/blob/master/github-readme.js#L148). Perhaps it's the named capture groups? Not sure if Firefox supports those yet.
Those types of expressions get evaluated from right to left, so read it that way
This is awesome! I hate setting this up every time and I'm glad how lightweight and simple this is. Note that it doesn't come with any rules enabled (except for the 3 related to Prettier). For the lowest-effort people like me, all you need to do is add 'eslint:recommended' in the `extends` list.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Are there any practical uses for something like this? Only time I‚Äôve ever need to code a palindrome checker is during an interview. 
They're left out because they're pretty clearly linear
You can use a linked list especially if you need contant time O(1) when inserting/deleting items. Check out this discussion for more details: [https://stackoverflow.com/questions/30949981/would-you-ever-implement-a-linked-list-in-javascript](https://stackoverflow.com/questions/30949981/would-you-ever-implement-a-linked-list-in-javascript)
Could you rephrase that in English please?
There's always that one person
It's hard to say the exact universal complexity bounds because JS specification intentionally leaves out implementation details ‚Äî each JS engine is free to use whatever algorithm they deem fit for the task as long as it conforms to the spec, e.g. V8 recently [changed underlying sort algo](https://twitter.com/mathias/status/1036626116654637057). You would need to dig into different engines to figure out what algos they use and what their complexities are. Moreover, since most (all?) JS engines these days use JIT you really need to profile your code in the exact conditions it will be running to get the real performance numbers.
What possible application could you have where you are concerned with optimization, verbosity, and also working with a hard coded array? 
The most common patterns I've seen are listed first: * Constructor * Factory * Singleton The others I consider more obscure, and can be learned naturally as you organize your code. And nothing flashes newbie developer, like spouting off the name of patterns when talking about code. I have a colleague whom I know is a much less experienced developer than myself and he'll often talk about how his current code uses some weird pattern name. When in actuality, when i look at his code it blows.
I'll tell you something, and it'll probably get downvoted on this sub (after all, this is /r/javascript), but let me tell you those things: **skip the following for the TL;DR, or for a direct answer to your question** ____________ **Why the question is not even the right question** I was wondering whether you are a cs grad, because most cs grads would not ask this question. Judging by your submission history, it seems like you are trying to self learn programming. This is not, by itself, bad, but you have to understand - generally, the syllabus of a University CS program is filled 40-60% with useless shit, but even the remaining half contains a **TON** of paramount concepts. There is nothing bad about learning it yourself - hell, in my time in Uni all but the last most advanced 10% of my classes listening to the lecturer was actually a waste of time compared to reading the class material from the books (and any class I'd consider useful had such books). But the thing is - you still **should** learn those concept. I could make a huge list, but you can also go see any (good) University CS program syllabus available online, and you'll see: - The usual basic CS+Math courses at the bottom. - The more advanced Math, core CS concepts (like OOP, OS, Compilers etc), and closely related (like basic Logic/Hardware) courses in the middle. - An array of specialization courses in specific areas, like Image Processing, Machine Learning, Security, Approximation Algorithms (in a specific field or just general), Databases, Distributed Computation, and much more. In order to become a **developer**, you don't need to learn all this. It will suffice to learn just a few very basic Math levels, learn a specific language (like JS), and memorize a bunch of "patterns", then try to apply them to whatever problem you face until something sticks. You can see tons of those people sprouted by Bootcamps, and even self teaching that way. But doing that, you will never be a **software engineer**. Every time you face a truly difficult problem, you'll be throwing solutions at it without actually having any idea what you're doing. At best, you'll fail and the next guy who tries will actually know what he's doing, and properly solve the problem. At worst, one of your half-baked solutions will succeed for a time, and by the time the spaghetti web has unraveled, and the time comes to face the consequences of that horrible solution, it will be deeply integrated into whatever project it was part of. To avoid the above, you should study **all** of the core concepts mentioned above, up to and including at least the mid level courses. And by study, I also mean "understand". There are usually tests available online for self-testing. Or you can ignore what I wrote, memorize patterns like a mindless parrot, and throw them at problems when you face them until something sticks. But let me warn you - the market for sub-par developers (miscategorized by some as "entry level market") is in fact saturated, the jobs for such positions are becoming harder to get and the pay isn't that great (much less than proper SWE positions). ____________ **To answer your question directly** No, you don't actually need to blindly memorize those patterns. You don't even need to learn them at all, if you aren't doing presentations of your code to other developers (in which case, those pattern names may serve as a communication tool). There are some guiding principles in writing code, such as: **modularity**, **efficiency**, **consistency**, **scalability** and a few others (some of which stem from the once above). If you follow the above principles, not only will your code be high quality, but you'll notice it follows many of the "patterns" naturally, as it's the patterns that stemmed from the above principles, not the other way around. **For example**, lets say you have a bunch of **functions**^^(methods) in your code that do something with sounds. All those functions always require a specific input (say, the URL of the sound they currently work on, like 'wav/sound1.wav'). They also usually follow each other and are called multiple times in the same code block, with the same URL. So, for the sake of both **modularity** and **efficiency**, you create a class, lets call it SoundManager, that saves the URL as a state (when you construct a class object, you write $soundManager = new SoundManager('wav/sound1.wav'), aka pass it the URL ). Now, you notice that in every file in the system, you really only use one SoundManager at a time, with one URL. So for the sake of **efficiency** (not to waste resources creating a new class every time), you define a global variable SoundManager, and just reuse it in each file, setting a different URL as per your needs. The above situation is exactly what the [Singleton](https://en.wikipedia.org/wiki/Singleton_pattern) pattern describes. The point is, again, that the patterns are just descriptions for solutions that are easily reachable when following a few core principles and common sense. ____________ **TL;DR** You can memorize patterns, but that wont do you much good. Instead, you should properly study **all** the underlying principles of CS, up to a point where understanding those patterns is redundant. You can take shortcuts, but the results will reflect that.
I can't believe this was upvoted. Yes, every developer should have great Google skills and be able to find resources that help them solve a problem. No, you should absolutely not be "copy/paste code from a reputed source". Not to mention, how do you even copy and paste a design pattern?! You absolutely can't know everything, but you should at least know the basics of good software development. This blind copy and pasting of code is how you get a horrifically mangled codebase.
The runtime depends on the function you provide, but each method runs your provided function on each item on the array. So it's O(n ‚Ä¢ &lt;provided function&gt;). Big O runtime is generally only provided on functions that have more complex business logic and are non-obvious, not functions that are just a bit of syntactic sugar over your own code.
&gt; You absolutely can't know everything, but you should at least know the basics of good software development. This blind copy and pasting of code is how you get a horrifically mangled codebase. And I just call it common sense. I'm not advocating blind copy/pasting code, you're the second dimwit who can't read who suggests that.
was hard to get over the lack of semicolons in the example code. you're playing with fire by not including them when you build and minify your js.
&gt; I don‚Äôt agree with this. Learning different software design patterns helps you in the long run not just for JS. Agreed. &gt; No one is asking a new software eng to learn all of them at once. Exactly. &gt; Slowly picking them up and learning when to use them is very valuable as they‚Äôre language agnostic. Bingo. &gt; And don‚Äôt just blindly copy and paste code. *I never said anyone should.*
Well, I wrote that article and I can tell you is not.
lint is the worst shit ever, it gives errors for fucking spacing in javascript and it drives me nuts.
Thanks, I'll have a look at it. 
Maybe just write it well the first time round? Javascript projects with no standards look like ass, they're hard to read and therefore unnecessarily hard to work with. Throw it through prettier and have done.
bind a key to eslint auto fix
There are lots of good answers here and I hope I can give you a slightly different way of looking at it. Patterns are really just agreed upon ways of solving basic but somewhat common problems in one language or paradigm (object oriented for example). What works or is necessary in one paradigm (object oriented) would be wrong or not needed in another (functional). See more details at this [Stackoverflow discussion](https://stackoverflow.com/questions/327955/does-functional-programming-replace-gof-design-patterns?rq=1). I have found that trying to understand and remember all the patterns out there doesn't give me a good return on time spent. A much looser term for patterns is *idiomatic code*. Which means "the way most of us do things in this language". I would encourage you to just pay more attention to real code and keep your eye out for code that looks similar. It wouldn't hurt to review patterns from time to time to refresh your memory and then see if you can find those patterns in the wild. But your time would best be spent volunteering for a variety of open source projects and learning what gets used in the real world. Or if not open source, then at work with what you see from senior devs. When you start noticing some code that looks similar across multiple projects, at that point it would make sense to try to identify the pattern. It will sink in way better if you notice the patterns in code first, and then name them. Again, I'm not saying to ignore the literature. But just give it a quick skim and get back to coding, which is where you'll really learn. One final reason I like this approach: there are some well-intentioned patterns that have either later been identified as *possibly* being harmful ([I'm talking to you singleton](https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons)), or I've just never seen them used in the wild. What matters the most when it comes to patterns is how often they are used. So just by coding a lot with other people who are better than you, you will automatically see the majority of the important ones. I hope this approach gives you another option to consider. Happy coding! tl;dr; don't worry, just code with other people and look for patterns in actual code. When you notice a pattern, try to name it at that point. &amp;#x200B;
Exactly, the only place I‚Äôve ever needed these patterns is interviews and in general if they give too much importance to this point I cannot but start thinking they are very pedantic programmers and like to overcomplicate things for the sake of overcomplicating them. In most of the cases a simple solution is much better than one that is abstract and general and can be ‚Äúeasily extended‚Äù to other cases, but will probably never be extended and will be hard to understand for other devs.
Thanks for replying! Would you be willing to clear up a bit more? Like, are the following correct? &amp;#x200B; push(), pop() - O(1) shift(), unshift() - O(n) concat() - O(n) slice(), splice() - O(n) for, for...of, for...in, forEach(), map(), filter(), reduce() - O(n) sort() - O(n log n) &amp;#x200B; What about these? &amp;#x200B; find() - includes() - indexOf() - join() - keys() - values() - some() - 
Thanks for sharing! üôè
[https://www.theverge.com/2018/12/4/18125238/microsoft-chrome-browser-windows-10-edge-chromium](https://www.theverge.com/2018/12/4/18125238/microsoft-chrome-browser-windows-10-edge-chromium)
You are just used to them.
Please tell me do you need me to edit the short content 
that logo give me *nausea* ...the author should look at this.
So don't put useless spaces everywhere?
+1, adding huskier + lint-staged + prettier with a git commit hook is something that might help (automatically formats code) https://prettier.io/docs/en/precommit.html option 1 
‚ÄúPatternitis‚Äù :) ‚ÄúLast week I implemented two patterns and a half‚Äù said the junior dev that wrote six classes to read a file and write another one. ‚ÄúThe advantage is you can reuse this code to calculate the trajectory of a moon landing, possibly‚Äù. Great work, Jerome.
Well meaning add a new line at the bottom of your document? Give me a fucking break
If you don't study CS you usually learn it at work. The software lead/architect will decide design patterns. Ideally they'll explain them well enough that over time you'll learn to make your own decisions. In addition most frameworks tend to have preferred patterns, so let's say you specialize in React, you'll probably make decisions based on React documentation and community patterns. 
How would you have written it differently? I've tried to help other developers to understand what these tools are useful for.
I would do it like this. ```js validators = { foo: data =&gt; true, bar: data =&gt; true, biz: data =&gt; true, } const isValid = dataArray .filter(data =&gt; !validators[data.type](data)) .length === 0; ```
patterns are meant to solve common problems. don't focus on memorizing the details of the pattern, per se. Learn why you would use the pattern. What is it solving. With that, understanding hte implementation of the pattern isn't a big deal bc you know why you're using it. There are lots of patterns in every language. Its impossible to know them all. Focus on the ones that solve the problems you encounter, add more when you encounter them :)
I answered this in /r/node You never created/defined a function that you are using, called "callback". You probably want to pass it in as an argument to your module. Modify the second line to be this: var geocodeAddress = (address, callback) =&gt; { And then wherever you call your function, add a callback function as the second argument. const { geocodeAddress } = require("./geocodeAddress.js") const callback = (err, res) =&gt; console.log("Error: ", err, "Result: ", res) geocodeAddress("someAddress", callback)
Honestly having looked at all of the patterns listed the only one I have found useful is the observer pattern, mainly since observables are great for events. But IMO the best code rarely uses classes, just use pure functions to import into your module and keep state in one place, only manipulate data on a copy of the original. This way your code is transparent, easy to reason with (since how state is configured doesn‚Äôt matter) and way way easier to refactor. All of the patterns listed in that article are from ideas popularized in the 90s and early 00s and has resulted in horrible brittle legacy systems that are a pain to work with.
I agree completely and I can give you an example. The observer pattern is not necessary in javascript because it is an event-based language. Also, most of the patterns adhere to dogmatic encapsulation which is great for OOP languages. Class variables are public in javascript and can be changed further using getters and setters.
Brilliant idea, good work!! The sooner we leave legacy cruft behind the better. I think a new logo would be a good idea, it is a bit off-putting. Also, maybe loose the emoji in Reddit headings?
The great thing about prettier is that it makes discussion irrelevant. If you don't care how your code looks, you lose nothing from using prettier. If people care how code looks, they save themselves development energy by letting prettier do handle the formatting for them, and they no longer have to persuade others on nitty gritty format details - because prettier makes sure everyone is using the same standard.
Ok so if I were doing ssr then I understand it perfectly, but how would you do it in a spa app? Because I'm still confused about this subject. Could you possibly show me some good/simplified example on github?
We're not making any headway here.
"prettier makes sure everyone is using the same standard" totally agree, i just told lint made me crazy since i wasnt using prettier
So can i remove the content or what can i do. Please suggestion me it will helpful me.
[removed]
Vultur and DigitalOcean are two good VPS hosts that I can recommend after using them. DigitalOcean is probably the best when it comes to documentation on hosted services. Let me know if you have any questions. 
Design Patterns came to solve problems to, as it says, patterns. There's some patterns on everyone code. With JS we all needed to do things like ajax (not ajax per se, but fetching data), field validator and more. As everybody said, you don't need to memorize all of patterns that are shown on article or books but better than that, understand and remember when coding that one time you saw somewhere on webs or book that someone wrote a better, more readable, understandable and perhaps testable form than that code you were writing at moment and if another person reads your code and have the same knowledge about design pattern as you, will understand your code as a pattern and knows what it does. That way, your code stays more cleaner and easier to maintain.
Thank you so much. I rarely come across such truly deep insights as a self learner. Its buried so deep in this thread, I'm so lucky that I even stumbled over it. Would it be bad practice to share it as new thread?
Needs more context.
Feel free to give it context. I'm wondering on a general case.
Thanks for the thoughtful response! Agreed on all the above, including the emojis :)
With any language that implements a garbage collector, you generally shouldn't try to "outsmart" it, so no. That being said, there are cases where you can optimize, but it's unlikely that you'll encounter it without doing something extremely heavy.
Article about it: http://bit.ly/wdyr1 Sandbox: http://bit.ly/wdyr-sb
&gt; Please copy/paste the code from a reputed source That sounds like advocating copy/pasting to me.
Your string together words but they mean nothing.
I prefer prettier plugins like the one for VSCode so it transforms my code every time I save. I know a lot of people fight against prettier because it doesn't style how they would style...as a team lead and manager, to those I say: get over it. There is a lot of benefit you don't realize by being able to not give a shit about formatting your code correctly and have it handled for you (and the rest of your team) in a consistent way. You will get used to the styling, just give it time.
&gt; this is just silly Is it though? Consider that the PR to replace closure compiler w/ uglifyjs justified itself by saying it's more "reliable", but then a while later was itself replaced w/ terser due to... minification bugs of all things. People choose services over dependencies all the time (think Auth0, OneLogin, Stripe, Twilio, etc), and trust is a big part of the decision. Google's customer support may be abysmal, but if you have kept track of closure compiler progress, you can see it has not stagnated. In fact, even though their priorities may not necessarily align with many people's, they were quite upfront about them, and the trade-offs were acceptable for my case. When you compare w/ the UglifyJS/uglify-es/terser state of affairs, I tend to agree with u/armonicAscendant about who I ought to be trusting more: a simplistic service that wraps over a library maintained by googlers or a library that has been half-in-limbo for the past 2 or 3 years.
I'll give it as much context as I'm given: Don't reuse.
Lint is the only way to keep you and your code sane. 
*But muh brackets belong there and there! * No they fucking don't, there are style guides for a reason and linters exist for the same reason as typescript. To reduce time spent reading and understanding code of someone else and channel it towards your productivity. 
*But muh brackets belong there and there! * No they fucking don't, there are style guides for a reason and linters exist for the same reason as typescript. To reduce time spent reading and understanding code of someone else and channel it towards your productivity. 
This is fantastic. Thanks.
This is Reddit. People repost anything, so go right ahead if you want.
I was hoping for an example when you should resuse and when to not. There's your context 
wat
I'm a designer and I have to agree. That is awful. I see what they were going for but this is poison to the eyes. 
&gt; The point is, again, that the patterns are just descriptions for solutions that are easily reachable when following a few core principles and common sense. I'd say that knowing and understanding design patterns is itself a core concept of software engineering and architecture. Design Patterns themselves are not turnkey solutions, they are accepted best practice to common requirements of a program. Understanding when and why to use a pattern helps engineers avoid inefficient solutions. Design Patterns were a core requirement for both my pre and post grad CS programs. 
Object pooling (https://en.wikipedia.org/wiki/Object_pool_pattern) is doing exactly this. But it's not something you would implement frequently for general purpose object usage. It's something to consider when the impact of construction/destruction is great enough to where it makes sense (generally for performance). In JavaScript, I think I've only ever used pooling once, and even then it probably wasn't necessary.
This was very helpful, thank you!
i wasn't questioning your choice of Closure instead of Uglify, but your use of a service in order to avoid a dependency download - a dev dependency of all things. i too suffer from NIH, but you take it to a new level. i'm surprised Mithril didnt include its own custom minifier, considering that it maintains its own bundler, testing shims, promise polyfill (at one point), etc? while i trust that google will continue to maintain Closure, i absolutely dont trust them to maintain Closure-as-a-service. if it doesn't serve ads, then it will eventually be dropped. this has played out so many times with highly-used/liked Google services, that it might as well be a meme.
Never ever, ever use `document.write`, unless you know what you are doing, which obviously you aren't. :) Using `document.write` after the page has loaded, overwrites the whole page, including any JavaScript in it. So your event handler can't trigger another time, because there is nothing there anymore that could be triggered.
&gt; this is poison to the eyes That's not even a metaphor, it's really painful to look at.
EYE POISON! THE WORST KIND OF POISON!!! &amp;#x200B; Fixed the logo, 3D glasses no longer needed. Sorry about that everyone!
In my all the CS (not SWE) of which programs I know the syllabus of (at least in my country), which are among the most advanced programs globally, there is usually at most one elective on Design Patterns - sometimes, about general Software Engineering with things like Project Management and Design Patterns bundled in. &gt;Understanding when and why to use a pattern helps engineers avoid **inefficient** solutions. This is true, but only because actually understanding when/why to use them already encapsulates understanding the core principles I talked about earlier - notice **efficiency** is one of such principles. &gt; they are accepted best practice Phrases like this is probably why Design Patterns are not a core course of any program I know. They are a fine tool for communicating intent, but they seem to encourage thoughtless attempts at applying a solution from an existing set rather thank coming up with the actual optional solution for each (architectural, design or other) problem. Also, I could hardly care less about "accepted" anything, and neither should most good engineer. "Patterns" become "anti-patterns", and then "acceptable practices" again on the whim of communities that are typically arrogant, and overly hyped for every new and shiny shit. If you claim something is "accepted", then show me the proof that it's the optimal solution for a specific problem. Then, prove that the advantages of using it outweigh the drawbacks. Most of the time, when I ask somebody to prove it, they refer me to some shitty old blog post, where the pattern isn't even applied in the relevant context. **Not that design patterns are bad**, by the way. They just encourage close minded people to put them on a pedestal, like you did in your post, and often prevent others from coming up with solutions that could actually be optimal.
Fixed! Thanks for reporting, for some reason it didn't bother me at all
Thank you so much, it's a tough step to get out there and fully configure something. Will they help with node and mongo configs? If any connection issues arise?
[removed]
Maybe I misunderstood your last point but you did suggest OP to copy from a reputable source. 
Some of the GoF C++ patterns translate 1-to-1 to JavaScript, but I don't think singleton is one of them. If you want a singleton in JavaScript, for example, folks are more likely to just write an object literal, or return an object from a module. That singleton is an anti-pattern is the cherry on top of why this post may not be getting a warm welcome.
Finally! 
*you're wrong "Then" is the correct spelling here... refering to timE/ordEr (thEn ), not compAring (than).
Guess my lowly state schools just aren't up to snuff with dedicated theory classes for Software and System Architecture that always include design patterns. &gt;typically overly arrogant the irony &gt;They just encourage close minded people to put them on a pedestal, like you did in your post You honestly need to get off the high horse, and realize that I'm saying that design patterns only work if you actually understand why you'd want to use them and how they actually solve a problem. If you honestly don't think "understanding when and why" to use a design pattern doesn't encapsulate a deeper understanding of core CS concepts, overall system architecture and software design, I honestly don't know what to tell you. I just know I wouldn't want to work on any system you've built. Especially since you seem like the type of engineer that builds nearly unmaintainable systems in an effort to prove themselves smarter than "the industry". 
Hi, and thanks for the feedback! While I know that singletons aren't really popular, I still, like I stated in the text, think it's worth knowing something about then, even to know what to avoid.
&gt; If you honestly don't think "understanding when and why" to use a design pattern doesn't encapsulate a deeper understanding of core CS concepts [...] So you actually claim design they don't? List 2-3 design patterns, your choice.
&gt; More important then memorizing the patterns is learning how / when to apply them to refactor code than is the correct one in this sentence. Then makes no sense.
Or: You just keep doing what you are easy with, by enjoying the numerous built-in browser native api's and css, which alone are enough to pump the sexiest apps for the next 30 years, **without external libs**. And you stop learning programming on reddit!
So I've been playing with it some more and I believe I've gotten a solution to what I was trying to accomplish. I have written a function, createUser() which calls my generatePassword() function and inserts the salt and hash, along with other user account info (which would be provided from a POST request in the complete API). This function would sit at the controllers layer in the API. I have decided to rewrite the API using node-postgres and raw SQL as the DB rather than Mongo/mongoose as the DB/ORM. Here is a [link to a gist with the new function](https://gist.github.com/jawine/b740f3ea16e3f70e0c426c1d54e8c6ac), and a [link to the repo for anyone interested](https://github.com/jawine/node-scratchpad). async function createUserInDB(username, email, password){ if (username &amp;&amp; email &amp;&amp; password) { // check out a client connection (one per transaction) // if client connection is unsuccessful, it will be undefined const client = await pool.connect() try { // insertion values need to be populated // username, email, and password are provided from HTTP POST request body, // need to run async method to get the salt and hash of the provided password const authInfo = await generatePassword(password) // populate array of values to be inserted const insertUserValues = [username, email] insertUserValues[2] = authInfo.salt insertUserValues[3] = authInfo.hash // new user creation needs to be atomic, so it should run in a single transaction // (we can't create a user missing an email, username, or salt and hash of password) await client.query('BEGIN') // we will want to return the id of the new user to the calling function const insertUserText = 'INSERT INTO users (username, email, salt, hash)\ VALUES($1, $2, $3, $4) RETURNING user_id' // insert the new user and store their new ID in a variable const { rows } = await client.query(insertUserText, insertUserValues) await client.query('COMMIT') return rows[0] } catch (err) { // rollback the entire transaction if any part of it encounters an error await client.query('ROLLBACK') throw err } finally { // release the client back to the pool no matter what client.release() } } else { // throw an error if the function is called without username, email, and password throw new Error('username, email, and password are required!') } } I'm pretty happy with this function and feel comfortable now expanding the patterns to other parts of the API. Big thanks to @nossie1 for confirming my generatePassword() function was built as it should be.
Fab idea! I look forward to using it :)
More discussion here: [https://twitter.com/FredKSchott/status/1069979546026369024](https://twitter.com/FredKSchott/status/1069979546026369024)
That's awesome to hear! Don't forget to star the repository :)
Difficulty: finding jobs that never used the flavor-of-the-week frameworks/libraries.
&gt;So you actually claim they don't? Quite obviously I do. Architectural design patterns: -MVC -MVVM -PAC Software design patterns: -singleton (weird that you already described a useful scenario for that) -Factory Method -Abstract Factory -Mediator -Adapter -Decorator You're turn: provide an explanation on why any one of those patterns shouldn't be used for their given "accepted use".
Using tools that have been tried and tested allows you to have a more productive development experience and a more stable product. Using transpilers for modern language features with polyfills ensures that your code is written with forward thinking in mind. It also takes the guess work and human error out of chunking, gzipping etc. Using established, documented design patterns ensures that your work is more predictable and easier for new developers to get up to speed. Yes there is definitely a lot of bloat and fad in Front-End right now. But that does not mean you should ignore the fundamental trends of where the web is headed.
Tnx
&gt; Not that design patterns are bad, by the way. They just encourage close minded people to put them on a pedestal, like you did in your post, and often prevent others from coming up with solutions that could actually be optimal. The only thing they do is provide people with cookiecutter solutions to problems they hopefully understand. Design Patterns aren't magic, they are patterns found by people finding virtually the same solution over and over again through hard work, abstracted, labelled, packaged and shipped for the youngsters to skip the hard work and experience that it requires before being able to come up all by yourself with those patterns. The same can be said about clean code principles: it's people with a lot of experience who found that those principles aren't magical, but are a pragmatic approach to dealing with real life's problems, then abstracted, labelled and sold.
Yeah. Except those same functionallies you're after were implemented by someone better than yourself/myself. So use their implementations instead of reinventing the wheel.
I think you might be getting a bit hung up on the fact that I was using the service. Honestly, none of the options were all that great at the time and the cost of switching wasn't very high anyways. There's this out-of-date stigma that closure compiler is hard and scary, so I was just adding a bit of anecdata that it was a viable option that was being used for a non-trivial project without any real hiccups, even if you factor in all the doomsday scenarios one could conjure up. These days, there's the js port and all, so I'd even expect the DX of closure compiler to be better than where it was at a few years ago. I might actually do a minifier at some point, but these days I don't have the time required for such a large project, so I've only been developing auxiliary tools gradually for now. 
Which is exactly my point. There is a reason we learn (and as homework, rediscover) countless proofs for Math formulas in Calculus/Linear Algebra/Etc, despite being able to "just use the formula" in many cases. Memorizing "The 25 Design Patterns That Will Land You A Job!^^^^^click ^^^^^share " provides exactly the same benefit as memorizing the above mentioned math formulas. The correct way to do it is to study all the **underlying principles** to said patterns, then when they need arises (e.g you have a project coming up and don't know how to design it), open short article, read about a few relevant patterns, and apply them. Sort of like **Lazy Initiation** (is this basic concept a pattern? Honestly people call anything "a pattern" those days).
Well that's egg on my face Lol. My bad, I thought they were correcting the second use of "then"... &gt;...no they write code and then refactor using a pattern.... I didn't even register the first sentence.
Yeah in the second sentence "then" is correct :P
Still with that guy - if you don't have a concrete reason to re-use, never re-use. And in JS there's basically only one of those concrete reasons: GC thrashing under high load.
If you only want to know if there are some invalid items in the array or not then you could further improve that solution by using Array.some: ``` const validators = { foo: data =&gt; true, bar: data =&gt; true, biz: data =&gt; true, }; const isValid = !dataArray.some(data =&gt; !validators[data.type](data)); ``` Array.some will stop iterating over the array as soon as the condition is met. 
[removed]
Yup, everything here is correct (with the caveat I pointed out in my other comment that many of these depend on the runtime of your input function). Here's a quick test to see if something has to be linear; does it look at every item in the array? If so, it is at least linear (ex. shift/unshift decrements/increments the indexes of every object, push/pop does not). If the operation being performed on each element in the array is constant time (like all of these except sort), then it is linear, otherwise it's O(n \* &lt;runtime&gt;)
You shouldn't be downvoted for that comment. Knowing vanilla is an essential skill and so much people go learn Vue or React without even knowing how to use JavaScript properly, let alone use the browser APIs.
I strongly disagree on the more productive development experience. But this is linked to our level in programming. Modern browsers capabilities are extremly huge, and made on the way you describe. Long term perspective must be made! 
I was indeed referring to the first sentence. No worries.
It makes practical sense (and I think our eyes will get used to it): * Private fields are a completely different mechanism than properties. Hence, it is important to distinguishing them clearly. * A prefixed underscore is already a popular naming convention for private properties. Using private fields therefore just means replacing underscores with hashes. * The hash symbol is one of the few ASCII characters that isn‚Äôt already used by JavaScript.
Cool. I've never had to do something like this before. But that rather handy!
Hey OP, this sounds great but it doesn't work for me(Firefox 63, windows 10, blank page) Quick look into dev tools shows SyntaxError: invalid regexp group github-readme.js:148:27 
I think most are seeing webdev as money only, which is both sad and extremely comfy to me ;)
I'm getting an error when attempting to run Webpack in the project they guide you through in this link: `‚ûú dinosaurs ./node_modules/.bin/webpack` `Error: Cannot find module '@babel/preset-presets-env' from '/Users/*********/Workspace/dinosaurs'` How do I go about resolving this?
We can write a ¬´wheel¬ª at our exact need faster than searching for it, nowaday.
I'm aware of this issue, I'll be looking into it tomorrow. Thank you for showing interest :) 
&gt;'@babel/preset-presets-env' yo dawg...
A Java dev discovers JS.
It's okay, now you can use Babel to remove the syntax you don't like in other people JS code.
That's not at all what you said, maybe you should work on your communication skills instead of advising new developers to copy/paste code.
Eh, what if you use Google Closure Compiler? We can't spit out ESM modules for consumption via "module" field in pkg json yet (or at least I haven't found a pain-free way to do so with advanced mode). ESM isn't always strictly better than CommonJS/whatever. Statements like &gt; ESM packages are more compact are not always true.
Why not just make a class with static methods that just reference an object via a closure? 
Pretty silly remark, considering Vue, angular and react all have been around for 5 years or more
What feature of ESLint do you find particularly useful? I found what it said irrelevant, and ended up turning it off.
Oh look an unpopular opinion, let's all down-vote !111
what do you mean?..
Why would reusing an object result in thrashing? I'd think the opposite 
That `callback` must be a function which is already defined elsewhere. Preferably, before calling `request()`.
This is a matter of resource usage. Both rebuilding/reinitializing an instance, and destroying then creating a new instance, will create garbage. The difference is that if less than half of the instance properties need to be reinitialized, destroying then creating a new instance will make the whole old instance to become garbage. By rebuilding/reinitializing the instance, only half of the garbage is produced.
You‚Äôd still need different way of accessing private fields, because they are not properties: http://2ality.com/2017/07/class-fields.html#why-the-why-not-declare-private-fields-via-private
Thank you Pebkac for taking the time to post a detailed response like this, I'll try my best to pay your kindness forward! ;)
&gt; I'm not advocating blind copy/pasting code This reminds me all the strange console commands I've just blindly run when trying to fix server issues where I just fully trust random internet strangers. 
This was a very good summary, and an easy read, well done! But I still think JS development is a clumsy beast. One aspect I didn‚Äôt see covered: unit testing. I was working on a side project, a library, and was very proud of not having to use Babel , because my library would only work in modern browsers anyway, so I was happy to use only ES6 features. I had to take a step back when incorporating unit tests with mocha and Nyc - mocha does not work with ES6 modules, so I had to use a library to transpile my code to an ‚Äúolder‚Äù way of doing things, so that I can unit test the code that is written in the modern way. I mean, this is not what a mature development workflow looks like. 
Anytime I see people struggling with this it comes down to the fact that its really really hard to wrap your head around solutions to problems you don't have. 
Ever needed data binding? Have fun doing it in an optimized way.
This! And since you are using document.write() only for debugging, I'd recommend using console.log() instead. Your problem should then go away.
Open the folder and type `npm install`
No
Regarding your second question: "Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device." https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/absolute 
That's how Reddit works lol. Not even that, but you have to follow the convention otherwise you're getting downvoted/fired. :)
Thanks for sharing this! I've done many impromptu hacky versions of this while trying to optimize performance, so this will 100% save me time next time I'm in that situation
If [these](https://eslint.org/docs/rules) rules make you crazy, you just might be a bad programmer.
I think you sound like someone who never learned to use frameworks and work on a team. As a lead and manager of a team, you are the type of person we avoid. Just so you know.
Where is the proof that this is efficient?
Many of these: https://eslint.org/docs/rules/ `strict` for example, but there are hundreds useful ones
I cannot overstate how helpful this was to me. This helped in realizing just how outdated some practices are and how this process alleviates many frustrations I've found. A small team in corporate life, it's been hard to break away from their old methods. More importantly, this history lesson gave a throughline from then to now in a way that I can contextualize some of the 'newer' tools and put them to use more easily. There seems to be a lot of knowledge assumed as a given when starting new projects and utilizing upcoming technology that it's been hard to get started with any one thing. Now that I've read through the article, I'm gonna take a stab at it! Thanks for sharing this.
Unless you are dealing with super expensive external resources (e.g. DOM, DB connection) never reuse. The major cost of reuse is maintainability -- which equates to Dev time, which is the most expensive resource in projects. Reuse variables/states/objects makes it difficult to debug/instrument/reason about code. (E.g. whether you cleanup previous version fully or initialized newer version correctly)
Im not sure i entirely understand why it is so different from properties? Sure it could create some confusion around lookup from inside the class like the 2ality article describes but I fail to understand hoe this is different from `static`. Personally `private` syntax is a bit more familiar but i don't mind the hashtag too much...
I use tsc to check (but not emit) code, so it catches stuff to do with nulls, undefined etc. I've seen that list, 95% of them seem useless to me. Disclaimer - I don't write javascript on a large team.
Nice! This article does a great job at clearly describing all of the moving parts that seem mysterious or intimidating to newcomers
&gt; tsc `tsc` usually only checks for compile errors/warnings. Lints have more options, somewhere in between `tsc` and `prettier` domain-wise. Really useful for teams writing javascript on a large team. Disclaimer - I write javascript on a large team.
Thanks for the feedback! The statement was meant to mean "all other things being equal", taken mostly from the claims in this deep dive: [http://2ality.com/2014/09/es6-modules-final.html#ecmascript-6-modules](http://2ality.com/2014/09/es6-modules-final.html#ecmascript-6-modules). Let me look into how I could make that distinction more clear.
if (this.value === n ) { return this; } if (this.next != null) { return this.next.find(n) } else { return null }
As someone who has been developing on the web as long as the author, I highly recommend getting in on modern frontend development. The learning curve is high, but it makes development fun again. I wouldn't dream of starting a new project the old way. I would say that it does make debugging sometimes difficult, but that is also getting better. 
JS does not really impose any particular development workflow, if you are not satisfied with your workflow you should probably change it. I get the spirit of what you‚Äôre saying, but I disagree that it‚Äôs an issue of maturity, JS has a pretty unique set of criteria that have led to the situation we find ourselves in
Re read my post.
So you want to filter by category?
I agree with this. Design patterns exist to make code easier to write and understand. You definitely don't want to introduce a pattern without knowing what problem it is solving, only to find that you have to refactor later because it added unnecessary complexity. 
It scratches the surface on a lot of areas, but it would be fairly easy to overwhelm the intended audience. There is a lot to understand there without getting into linting, state management, testing, frameworks, etc.
&gt; Disclaimer - I write javascript on a large team. :D I added the disclaimer because when discussing tech choices this stuff matters a lot IMO. I commonly see tiny companies going through a world of pain because they want to copy what big companies are doing. (ESLint wasn't a world of pain, just mildly annoying. I think about trying it out again but I'd be going through the options like a fine tooth comb).
Yeah, I have made each category a class. I just need to find a script to make the site change depending on what select option is selected.
I'm saying that I don't know what thrashing is
Is this Java? If so, Java and JavaScript are wildly different languages. You might want a Java sub.
My comment was a bit pedantic. I just have beef with selling ESM as the be-all and end-all of module definitions (for the time being) and fear npm modules that do not have serve up code via a "module" field would be shamed with something like this. Otherwise very cool project!
No `.` after `table`. Go straight from the keyword to `[`, just like its being done for `standings` (for every case but `table.length` - that one is correct).
Can't believe I didn't notice that! Thanks!
This sounds really cool! Did you also cover cases where it rerenders without any prop changes? Like parent got reconstructed or something? 
WhatTheFuck.gif
Man you really shouldn't be advising on the difference between const let and var.
https://www.npmjs.com/package/eslint-config-airbnb-base I'm using this together with typescript and minimal adjustments (line length for example). 
Thank you! This helps a lot. I'm one of 'em dinosaurs.
Um. Don't really get what's the point. I mean, I guess it makes sense if you writing a small library. But again, why would you install a small library you can write in 3 mins yourself, it just exposes you to risk you have less control of and that saves you.. what, 5 minutes? really, is it that worth it? Next problem, I think we should really be done with ES5 as standard distribution and use ES6. ES5 can be served targeting specific old browsers which cannot run ES6. People think so much about supporting old browsers, that they forget that majority of their users produce lower conversion rates due to slower loading content (es5 is way more verbose), depending on your targeted audience, producing net loss. And no, build tools aren't all that difficult. You can understand pretty much core of it in few days. Given that they also provide you with ability to write code in a way that's more efficient (syntax), it results in net benefit even having all the build times, HMR in mind, not just initial configuration. &amp;#x200B;
It's not so much an unpopular opinion as it is an entirely nonsensical complaint.
"Webdev" is literally "money only" - unless you like working for free and begging for food. Gloating about how good you are because you build all your shit bespoke, is just as narrow minded as saying "I use build all my shit in React, so fuck you I don't need to learn about writing decent functions in ES5.". In today's world you should be both knowledgeable in the popular tools that make life easy, but also have enough skills in regular programming to improvise something when it's needed. 
I avoid these types too, sadly they're crawling all over the freelance job sites :(
Great article. Shame it‚Äôs on Medium.
Have fun writing, testing, debugging, refactoring, and eventually abandoning your outdated wheel.
Hi /u/cz_46, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/Kealan94, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/Cybort, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/AntonioErdeljac, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/zeptobook, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
That's hilarious
DigitalOcean has so many tutorials and a great community so it may be the best for you. For example they have articles similar to [https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-18-04](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-18-04) and many more.
In that case, you might want to take a look at ```document.getElementsByClassName``` And look into how to apply css styles through javascript (summary: either use ```element.style``` or toggle a class on your elements)
There was another excellent article a while back on [why we evolved into using bundlers like Webpack](http://tinselcity.net/whys/packers). You might find that explanation helpful as well.
what's wrong with medium?
Not being open to frameworks is obviously not beneficial for dev development, as is refusing to use libraries that do massive things like React or THREE. However, I think there's value to developing your own little libraries for smaller things, and learning new things along the way, is good for personal progress. Being a dev who writes glue code to stick third party libraries together doesn't sound fun to me. 
Used or thought about? The former would probably be modulus, the latter would be log (Big-O).
I have written a few frameworks/etc on my own time in the past and it was a great learning experience. But when it comes to production code and working on my team...I have no patience for NIHS (not-invented-here-snydrome) developers. 9.9/10 times...using and/or extending existing frameworks or libraries is the *right thing to do*. For interoperability reasons, for maintainability reasons, for working with other people reasons, etc, etc...you almost never should roll your own solution on things like your base framework (which is what is being discussed here, we aren't talking about a `&lt;Button /&gt;` component).
Good points. Wouldn't be surprised if I'm a NIHS person, and I guess it's a need to feel in control of the code. Actually knowing what it does and how it works. Probably not a great thing in the big world, and as of now I've only worked on teams where I'm the sole front end guy, so I haven't really touched that area.
It's important to understand, these are not 'JavaScript' design patterns. They are design patterns from a very popular book called "[**Design Patterns: Elements Of Reusable Object-Oriented Software**](https://en.wikipedia.org/wiki/Design_Patterns)", as mentioned in the article, and they are primarily oriented towards addressing design problems that crop up in class-based languages, many of which do not exist in JavaScript. (which is prototype-based) I'll say that again: there are no such thing as classes in JavaScript. This may be confusing when you see the 'class' keyword so many times in that article, but that keyword was introduced largely to make classical developers who are used to languages like Java more comfortable in JS. For an example, if you look at the Singleton pattern in the article, it may appear complicated. Here is another example of the singleton pattern: `const singleton = {};` Yep, that's how simple it can be. In other languages, you need a lot of machinery in order to instantiate a new object of a particular class, but in JavaScript, you can create a new object with whatever properties you want very easily. Do yourself a favor and forget about design patterns for now. You really want to focus more on Computer Science fundamentals (data structures, algorithms, concepts like recursion, etc) as well as JavaScript fundamentals (understanding prototypal inheritance, how types work, ES6 changes). Come back to design patterns if you decide to learn C++/Java and you want to better understand software architecture in those languages. Some of the ideas behind these patterns are useful in JS, but they are going to go way over your head right now as a beginner and just serve to confuse you. You have enough to learn without trying to memorize this unnecessary stuff. &amp;#x200B;
Please, just Keep It Simple, new doesn't necessarily means better, particularly, I don't see many advantages neither reasons that could make someone to develop applications based using these tools (angular and node are a pain in the ass on the modern web development world), I know that the html, css and js "old school" method is considered as outdated by many, but have you ever asked yourself, why? Is it really necessary to make everything even more complicated? Is it really better to use node, npm, webpack, angular, gulp and a bunch other tools, and wait 10 minutes just waiting for react to create a new application, or type a command everytime I need to create a angular component? It's really hard for those who don't have bleeding edge hardware capable of running chrome, vscode, react-server and other tools simultaneously
Subtraction
It's a state of mind that I think all developers go through and eventually grow out of given enough time (and assuming progression/growth as a developer). Being non-NIHS to me is a sign of a certain maturity from a development methodology perspective. It shows being able to work with outside frameworks and libraries as well as other developers. If you haven't got one now, I would suggest finding a job that does proper code sprints with peer programming and reviews, enabling you to work along side other people and in a team environment where it isn't just you working on 'your code'. It's an important skill...being able to work on a team. And if you can nurture that ability it makes you a much more valuable prospect and marketable as a developer.
GC thrashing, generally, is when the garbage collector can‚Äôt keep up with the number of objects being created in memory. This results in yucky things like running out of memory or stop-the-world GC pauses. *but* you only see it on services running really heavy workloads (think like tens of thousands request per second and up). Unless you‚Äôre having these issues, re-using objects should be avoided. 
Can I choose or offer you Ionic? 
Yeah, I've only had one very basic code review, and that was two years ago when I had just started getting into JS, before which I had done Java for another two. I've been searching for feedback loops but as of now haven't really found anything. For me the most daunting thing with third party software is not feeling fully in control. I've done React and some Vue, and some jQuery out of necessity, and using them has not proven particularly difficult. So I'm not sure where I lie on the maturity scale because I'm not sure where the aforementioned attitude puts me if the problem isn't actually using the software but not feeling connected with it.
This helps to wrap my head around it all, it‚Äôs definitely something I am pushing to start implementing into our workflows. Thank you very much!
&gt; My question is. What was the first project you started on your own using JS language? Simple web page stuff (animations / forms / etc), though this would be back in 2008/9 well before nodeJS was supported cross platform. &gt; What was the hardest concepts to learn? Because i'd already learned other languages (python, php, C#, bash, etc) i essentially had to relearn OOP because the prototypal model + scopes / closures (ES5) is quite a bit different from what's in those. ES6 has some syntax sugar and brings JS more in line with the other langs (e.g. block level variables, class keyword, etc) so i don't think it'd be as much of a problem anymore. Also relearning how to think about order of events / concurrency (JS being only single threaded) was a little weird but not impossible given that i'd already dealt with the quirks of python. &gt; I never took calculus. Will this affect my understanding of certain things? No? Javscript or indeed any programming language isn't about math, it's about logic. Basic algebra is all that's necessary. Admittedly though there are some things that are advantagous in understanding code e.g. Big-O notation, discrete math, etc. Calculus only becomes relevant if you're trying to deal with rates of change / areas under curves. &gt; How long did it take until you felt comfortable pulling out your laptop to code on your own? 6-12 months, though when there's stackoverflow technically you're never on your own. &gt; Lastly, do you consider JavaScript a longevity language? Do i consider it will remain fashionable? For some things yes.
from another oldtimer: keep your wits about you. i think we've moved forward as an industry, but we've traded code complexity for tool / environment complexity, which many engineers are less equipped to deal with. where we used to deal with DOM state management issues with jquery, now we deal with configuration issues, badly pinned dependency versions, huge bundles of code that are opaque and for machines not humans, and a general feeling of "this is too big for one person to grok in any reasonable amount of time." our code is definitely more organized, but i think we've traded organization and functional code for a huge amount of process and tool fatigue
so you tried mocha, an ancient testing framework and it didn't work out so you concluded javascript isn't mature? did you try any other libraries? there are a ton of problems with javascript's development, but this is pretty much on you.
Actually I am developing a client library to support having a full stack reactive from a Spring 5 reactive back end. It will function as firebase and provide real time updates via RxJs. So it wont be too small of a library. The reason I am making it a library is so that others can use it. It will be a copyleft open source project. Ok I will look into webpack and bundling then for ES6. I already use it for all of my Angular projects via the CLI but that abstracts me from having to know anything about Webpack. So I am fairly ignorant about it. Perhaps its time to learn. 
&gt; You shouldn't be downvoted for that comment. yes they should. it's poorly thought out comment written by someone who comes off as very immature. javascript has come a long long way in the past few years and it's much more enjoyable to use now than it was 3, 5, 8 and 15 years ago. does that mean you should just ego trip on vanilla javascript. this comment is akin to someone standing on the street in the early 1900s shouting "you people are fools for getting that motorized coach. horses are fine and any decent horeseman can ride a horse just as far as car." it's incredibly short sighted and silly.
&gt; javascript has come a long long way in the past few years and it's much more enjoyable to use now than it was 3, 5, 8 and 15 years ago How is that related to anything? &gt; you people are fools for getting that motorized coach. horses are fine and any decent horeseman can ride a horse just as far as car Not really. React or Vue are not more advanced JavaScript. Libraries and frameworks come and go, the language will remain. Remember jQuery, Backbone, Angular 1, Knockout, etc? In 10 years React and Vue will most likely be gone too. I'm not saying I agree with the idea that you shouldn't use libraries, but downvoting someone because of an opinion is actually what's "shortsighted and silly".
&gt;mocha does not work with ES6 modules, so I had to use a library to transpile my code to an ‚Äúolder‚Äù way of doing things Sounds like mocha's not the right tool for your project at this point in time. Look at jasmine and karma (which is what angular uses) or any one of the hundreds of other unit testing frameworks written for JS. One library not meeting your use case isn't indicative of an issue with JS as a whole. It means you picked the wrong tool, try a different one. If the tool you need doesn't exist yet take a stab at writing your own, or forking mocha. Even if your code isn't the best your ideas might inspire someone else. At the very least submit an issue (or +1) on github. JS is growing, which means that you can shape the tools, libraries and community. All you need to do is participate. The fact that some lib doesn't fit your use case (yet) isn't a problem with JS. It just means you (me and everyone else) have some work to do.
Just took prettier out of my project. Too opinionated with not configurability. Devs have ignored tons of requests for configuration features. We just set up our linter a little better, works fine without messing up our whitespace.
"It's so difficult to sink this screw with my hammer, hammers suck!"
Mocha was great. It was how I can learned unit testing in JavaScript. But I have to say jest is a joy to use. And it works well with es6. No transpilation needed. I've written thousands of lines of es6 code in the last few months and it's all unit tested with almost 100% coverage. Jest makes it pretty easy. Can't speak for other test libraries but I can say mocha has aged poorly :/
You think using other people's tools is growing as a developer? You got it wrong mate. We use libraries and frameworks because we need to industrialize the production of software which is the opposite of growing. Ever heard of Django? Here, check this video by its creator: https://www.youtube.com/watch?v=k7n2xnOiWI8 
React Native with TypeScript. Only because I don‚Äôt wanna learn Native shit. Get the basics set up and let it rip: https://facebook.github.io/react-native/blog/2018/05/07/using-typescript-with-react-native
Some trig to animate an element around in an ellipse.
How to calculate Degrees and/or Radials. 
Yes to all of this
There's an RSS feed; it's just not advertised. https://overreacted.io/rss.xml
At the very least you need a bundler/transpiler. Writing everything in one file would be cumbersome. Using global scope to obtain references to other code is not a good idea. And not minifying/uglifying means larger payloads. You can take on as little or as much as you want, but the why is a combination of very important concerns and convenience in workflow.
The thing that makes prettier so brilliant is that it formats the interpreters ast, not the original source text. This solves the biggest problem of all difference of opinion! Now you can commit something akin to the ast and every developer can read and write in whatever style they think is best and the comitted code remains neutral for everyone 
[removed]
Vector math. 
Singleton pattern relies on the constructor return value. You can have the same functionality using different methods. 
I dk if this is just a bug that occurs on my browser/os or if it's a missing feature but the fact that scrolling backwards continued to advance the slides made me put this down immediately. It is still pre v1 so there's still hope I suppose.
Percentages.
Have you tried checking the listed line and column?
I actually figured it out. When I deployed to the server it was blocking my external CSS bootstrap link. Which ultimately caused this error but still not entirely sure why that's the error. 
Give it a try! What you'll probably find is that the bundle sizes won't be too massively different. As of right now there doesn't seem to be a huge advantage to serving js with es6 modules. Hopefully in the future that will change and we can all start serving modern JavaScript.
Thats quite fun :) I love how you change the SVG of the dino after each whack. Good job!
Do yourself a favor and stay with ES6 wherever you can. 
Have you seen the latest Flutter videos?
Totally true - but is it worth the trade-off? Where do you see this general development headed?
Thank You for the support bud. Keep in touchüòÄ‚ù§
One click installs?
Read [this](https://medium.com/@nikitonsky/medium-is-a-poor-choice-for-blogging-bb0048d19133) (yes I know it's on medium) and never use medium again.
Read [this](https://medium.com/@nikitonsky/medium-is-a-poor-choice-for-blogging-bb0048d19133) (yes I know it's on medium) and never use medium again.
Need a bundler, don't need a transpiler (otherwise known as a... you guessed it, _compiler_). Using the latest language features "because new" is not really a good reason. If you're compiling, might as well use TypeScript and get some real value from the additional step.
It looks a bit scary at first. But it's not that difficult as it may appear at first glance, at least for setting up something basic like Angular CLI level of set up. I'm always quite atonished that some people use those set ups for production. Can't really see them anything else than sandboxes for experimenting and fooling around. And given that we have codesandbox.io, I simply fail to see the point of them entirely.
Best use of Dinosaur Comics ever.
FYI, Java and JavaScript are two very different languages.
It is misleading for old timers working on the code that have been maintained for more than six years. It does not explain the problems that can be caused with dependencies in npm package. Anyone remember gulp-utils npm package and its deprecation in the console? Many argue that you can always find alternative to gulp like grunt or webpack. Does it worth to write a same thing multiple times with zero changes on actual site requirements just for shake of changing the bundler ? Making a thing worst there are some npm modules which depends on another modules which has only one line code. The serial dependencies makes it worse when you have to check whole application for updating one package. It is madness.
You might want to look at `map` instead, to turn the original array into a new one. `map` is great for translating each element in an array to a new one. Because you need the previous elements in the array to keep a running total, I would approach this with an additional variable to hold that state. The code would look something like this let total = 0; const sumsArray = dataArray.map(element =&gt; { total += element; return total }); Having a side effect in the `map` callback is a bit of an anti-pattern but it does the trick. I made a little example that you can play with here: https://repl.it/@alexlafroscia/reduce-and-push 
A) Java != JavaScript B) What is this post? A job posting? You need help understanding what each requirement means? You‚Äôre hiring? 
Thank you so much for the help! The example link you gave was great!
Glad to help! I updated that link with an additional implementation too, using `reduce`. You can see that the result is the same, but it's a **lot** more code, and the runtime is worse because for each array element, we have to add up all the previous array elements, making the runtime something like `O(N^2)` or something
Yeah, using `map` was much easier to wrap my head around once I saw how you used it. 
&gt; Is it really necessary to make everything even more complicated? I remember saying that about OOP in 2003 too. I also thought all this webpack/typescript/transpiling/npm/react/vue stuff was a crazy amount of complexity about a year ago too. Now that I've taken the time to learn the basics of most it, I won't be going back to building things with hammer and chisel. The only definitive answer to: "is it worth it?" ... is: "it depends". And a large portion of the "depends" bit is whether you know how the new stuff works or not. Of course it's all going to seem too hard before you know it. But the people that do seem to be sticking with it. 
Instead of pushing the result of the reduce into the sumsArray, push the result of accumulator + currentValue to it whilst inside the reduce
If your wheel requirements are super simply and [this will do](https://previews.123rf.com/images/marigranula/marigranula1304/marigranula130400392/19245243-first-stone-wheel.jpg) ... cool go ahead. Some of us are building more complex wheels though.
Other than map, maybe you could also use an array as a starter value for reduce‚Äôs accumulator. Then add the previous value in the accumulator array to the current value and push. I‚Äôm on mobile so it‚Äôs hard to type but maybe something like const reducer = (acc, cur, i) =&gt; { let prev; if (i === 0) prev = 0; else prev = acc[i- 1]; acc.push(prev + cur); return acc; } const sumArr = [1, 5, 10, 100].reduce(reducer, []); 
Func1. Make a function for counting time a window is open. Var1. Returns value of Func1. Func2. Make a function for removing the child of an element by id and make sure the child is that line of code you mentioned. Func 3. Make a function for adding a child of an element by id and it‚Äôll be that same code. If statement: when Var1 = 120000ms: End Func1 Var1 = 0ms Start Func2 Start Func3 Start Func1 Sorry for the pseudo code and format. Am on mobile. I‚Äôm also a JS noob but this is how I would go about figuring it out. 
Seems you could benefit from https://github.com/ashubham/bot-context for maintaining the conversational context.
Really good summary thanks!
I always thought a compiler translated interpreted or human-readable code into minified machine code. Doesn‚Äôt a transpiler just translate into a modified version of still-human-readable (if minified), interpreted code? ‚ÄúBecause new‚Äù has never been my reason, at least. Getting arrow functions (with different implicit scope), template strings, and better imports are all conveniences worth using, IMHO.
Ouch.
That's ok thank you for informing me. I only realised it's in the wrong part now. Can i redirect my question to r/JAVA? &amp;#x200B;
Here's a sneak peek of /r/java using the [top posts](https://np.reddit.com/r/java/top/?sort=top&amp;t=year) of the year! \#1: [The 3rd edition of ‚ÄúEffective Java‚Äù was published today](https://np.reddit.com/r/java/comments/7mncsz/the_3rd_edition_of_effective_java_was_published/) \#2: [Multiplayer FPS Engine in Java](https://np.reddit.com/r/java/comments/9oy4ai/multiplayer_fps_engine_in_java/) \#3: [Why I Moved Back from Gradle to Maven](https://blog.philipphauer.de/moving-back-from-gradle-to-maven/) | [134 comments](https://np.reddit.com/r/java/comments/89adwf/why_i_moved_back_from_gradle_to_maven/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
You using multiple files is kind of ahead of where I am in my lesson, so I stuck with let total = 0; const sumsArray = dataArray.map(element =&gt; { total += element; return total }); is there some reason I cannot do something like: `let dupe = sumsArray.find((k,i) =&gt; sumsArray.indexOf(k) !==i);` `console.log(dupe);` results in undefined
Oops
&gt; You using multiple files is kind of ahead of where I am in my lesson Makes sense! I just pulled them apart to make it a little easier to navigate and see each implementation &gt; is there some reason I cannot do something like What are you trying to accomplish?
I am trying to take the new array and find the first duplicate that appears in the new array.
The code snippet you provided looks like it should work, to me https://repl.it/@alexlafroscia/find-a-dupe Maybe you have an error elsewhere?
Heya! I post almost the same reduce version right after you commented this! I think if the reference to \`acc\` is maintained each reduce loop (using acc.push(v) &amp; return acc instead of concat or \[...acc, v\]) the complexity should be same as using map.
Yeah, that's a good point about the difference between acc.push(v); return acc; and return [...acc, v]; I personally find the latter version easier to read, so I tend to lean that way. In my experience, the difference is negligible between things like this and it's hard to really know how things might be optimized by the engine without doing research or benchmarks.
Please excuse my inability to import data from another file. https://repl.it/@CaptainCainer/AngelicNearObjectdatabase
It seems like the array just doesn't have any duplicates in it https://repl.it/@alexlafroscia/AngelicNearObjectdatabase The original array and the same array with all duplicate elements removed are equal
Yeah, the destructuring syntax is beautiful.
I agree, and I honestly think it's more clear conceptually. Plus, it avoids methods that cause mutation, which is often a good habit to be in.
interesting, maybe I made a mistake when copying and pasting the data. I will double check my work and see what is going on. I am working on day 1 part 2 if you're interested in messing around with some puzzles. 
Happy to help! Feel free to ping me with questions in the future, here or on Twitter. Same username there as here.
This is the source data btw: https://adventofcode.com/2018/day/1/input
I will definitely ping you here if I am stumped. I have been banging my head on the table for a few hours before I decided to reach out for help. I appreciate it, cheers~
Great article for someone who jumped from old school HTML,CSS,JS to Angular (which utilizes many things you mentioned) this was very useful to fill the gaps.
This is just a prototype. I might implement multiple answers with probability, for the same question; and I've been think about context as you said and also remembering things, like your name. But I'll take a look in the link. Thanks
React Native without a doubt. It's more widely supported and has better performance. Besides, I prefer React greatly over Vue/Angular.
It‚Äôs a good idea, and there is also a fallback technique for when JS is not available. I wish they would also implement a flif-like format so we could get rid of src-set and picture, and instead simply specify what percentage or how many bytes to load of an image, given the pixel density and displayed size. A single image for all resolutions and pixel densities without sending the full size image to every request.
&gt; Transpiling code means converting the code in one language to code in another similar language. I'm being pedantic, but the definition of a transpiler doesn't require converting between *similar* languages, just from one language to another. The distinction between a compiler and a transpiler is that a compiler generally turns source code into machine code (or something similar), as opposed to code in another (human-readable) language.
Is this the right link?
Not agreeing with the parent commenter's generalisation, but there is definitely a proliferation of terrible articles on Medium, posted by inexperienced devs who pedal advice ranging from the nonsensical to the downright harmful. That's not to say there aren't good articles on Medium, but they are swimming in a cesspool, unfortunately.
I've not been able to find any reference to this is an web standards, so is it just going to be a chrome thing?
&gt; Can we use native lazy load now? No, it is not production ready, it‚Äôs only Chrome and it‚Äôs hidden behind flag. IntersectionObserver can be used, but it is not supported by Safari and IE. Superb article! /s
I'm talking about the ability to determine when it's good to incorporate libraries and tools. It isn't simply about using tools. It takes maturity and experience to develop that ability as a developer...that is my point. Also, I heard of Django years and years ago *mate*...
two nested for loops, one for y, one for x, then in the loop create the cell, and give it the id of "cell_{x}_{y}"
That depends on what you want to do. For a small, simple prototype you probably don't need most of this stuff. But can you write an enterprise level application using vanilla HTML-JS-CSS that is readable and maintainable even at thousands of lines of code while also being backwards compatible with older browsers? With this hypothetical codebase, at some point you also start to hurt the user experience: your bundle becomes incredibly large even when minified and since you didn't use any tool to help you, splitting your JS into chunks becomes cumbersome You also probably developed some framework of your own while writing this codebase, but only YOUR team knows how it works and how to maintain it, and it's probably not as polished as other frameworks out there, so you have tons of legacy code that you can't hire anyone to help you maintain. So no, it's not necessary, but there is a lot of value in using such tools
My man!
Oh.. Sorry. [https://naver.github.io/egjs-infinitegrid/](https://naver.github.io/egjs-infinitegrid/)
JsConf EU WeAreDevelopersWorldCongress QCon Devoxx
You can also see pluralsight for e-learning [Pluralsight](https://www.pluralsight.com) 
Thanks,i will look them up
Maybe something like: dataArray.reduce((k,v)=&gt; { k.push(v+(k[k.length-1]||0)); return k; },[]);
I agree, I have spent way too much time in "configuration hell" for small projects where you could simply add 3 scripts and be done with.
It‚Äôs full of shitty popups. Why anyone would put their articles on there instead of making their own blog is beyond me. 
 Definitely Google Analytics for tracking traffic. But for actual user behavior, it‚Äôs better to have something more ‚Äúqualitative‚Äù with heatmaps and/or user recordings. Try [Hotjar](https://www.hotjar.com/) for web or [Appsee](https://www.appsee.com/?cpnid=7010N000000hdsE) for mobile. 
Nevermind. Both implementations works, but the Set one is just way faster... That's good to know, \`array.includes()\` is slow when dealing with a large number of values, due to its complexity.
What is a lazy load image?
Aspect Ratios
You should absolutely learn the basics that came before es6. However, you should also learn the latest changes because they are very, very useful. Reading and learning from that book will do you no harm whatsoever. It's a great book and I'm sure it continues to give great advice. After you finish it, you should look up books on the es6 changes and learn that as well.
Hi there. Total opinion here: Regarding the .net framework, I doubt it. Both Node and .Net can serve similar purposes but .Net is still widely used for a number of things: desktop apps, web apps, services, games, corporate software, even IoT. IMO, node still has a bit of time before it can set it's foot down as a strong and viable choice across all of development. Don't get me wrong, it's making it's way (electron, js based gaming engines, obviously services and apps). But, those capabilities still have limitations against a managed language like C# (electron is a memory hog, for example). Additionally, with .net core being cross platform and a much better development experience (basic intellisense, native type safety, simple debugging, a solid core framework and set of standard libraries). As far as V8 in Windows, I don't see why not? They already included the Linux subsystem, which gives weight to the idea that they are open to other engines and systems running natively in the windows environment. Again, all of this is opinion based on my number of development years of experience using both .net and node in a corporate and professional light.
This article is pretty old.
 [Manning production ready serverless](https://www.manning.com/livevideo/production-ready-serverless) is pretty slick and a good example of current node best practices Typescript is a harder one to find good examples of in the node community. Angular sites probably have the best introduction. 
React is 95 percent declarative vanilla JavaScript. 
Good work!
There is no harm to read any book. Learn the core concepts and move forward.
I think it's because anything at 90 would also be -90 in a different value of alpha and beta.
Edge has been notoriously insecure so this is a plus for users.
I agree with you but I think ppl aren't turned off by dotnet for what it can do and how well it can do it but cus it's C#. Also I feel asp.NET is harder to learn esp when you're doing a Spa and not the traditional MVC. The routing in node is so easy cus the spa fallback is literally a middleware at the end. Cors is the same thing. Also the extra json conversion stuff you gotta do. Ugh. After many projects dotnets many settings and abstractions will help but first stepping into it it seems there are so many things just getting in my way. 
look at the debug console
document.getElementById(‚Äúmy_id‚Äù).onclick = function() { .... } I think youre missing the parentheses on your anonymous function
You are missing the `()` after `function`.
Thanks anw!Any conference or talk recommendation?
You had 2 errors: 1. Your functions need to have a pair of parentheses after the `function` and before the opening `{`. 2. You need to add either a semicolon, a new line, or both after the closing `}` of the first function. You can see a working example of your code [here!](https://jsbin.com/himotarama/edit?html,output) In the future, try using the developer tools of whatever browser you like to use to see the error messages. They can really help you debug your code and figure out what went wrong.
what a silly mistake from me. thanks guys. bless y'all
thanks. fixed
awesome. fixed. thanks
you're Genius
cheers. fixed.
It's an honest mistake. C-style syntax isn't the easiest to get accustomed to when you're new to programming and we've all been new at some point. Mistakes like this are all part of the learning process.
Algorithmic complexity ain‚Äôt just a technical detail :) (Set/hashmap lookup is O(1), array lookup is O(n))
If windows will bundle a V8 then you'll trade smaller app sizes for dependency, updates and versioning problems. 
Have you used ASP.NET core? While I agree that full framework can turn into a web.config shitshow nightmare, core seems to have followed nodes footsteps with configuration as code
[removed]
Edge is not moving to Chromium, a Microsoft employee pushed 9 commits related to ARM and it's being spun out of control.
[removed]
Because there's a ton of vulnerabilities that one person can't cover, as I've been told; also, I've been told, there's always a better, more secure hashing algorithm than mine.
Hi Croolsby, thanks a lot for your input. Great addition to the discussion. I really like your example with the database refactors. It is often case when we version projects. After database schema updates the GraphQL schema needs to be updated as well. This changes need to be propagated also on the frontend. I found it really useful as well to use static typing as these type mismatches are usually caught. This is basically preventing errors that may occur by not updating every case, which is affected by db schema update. I agree with you that it improves the work for refactoring these updates. We can look at it from the point of refactoring type mismatches or from the point of preventing uncaught errors from mismatching types. I had experiences, where we forgot to update all the parts of the affected frontend and we pushed it into staging and with this we are able to prevent that before committing. 
The commits happened after the [codename "Anaheim" project](https://www.windowscentral.com/microsoft-building-chromium-powered-web-browser-windows-10) rumours appeared.
Thanks for the response! I'm using Node.is with SQLite presently. I've been recommended bcrypt2 to take care of the hashing. I've got a question here (sorry): Why should I use express? Am I not fine without it? Other than eliminating complex &amp; detailed code with a lower efficiency per word, what does Express give me? Once again, nothing against Express. I am simply because I *can't* see why I've to use Express. I've been pondering this for a *long* while now. Thanks!
The commits are from last month so no they didn't
I was going to comment how none of us open the links we comment on, but that TechCrunch article OP posted is soooo misleading. Even if you DID read it you still wouldn't know what's actually happening...
Because they can get easier exposure? Medium, while it certainly has it's problems, is actually a good platform. 
All the articles are. Follow all the sources and it boils down to 2 facts - Some [commits](https://chromium-review.googlesource.com/q/owner:jkunkee%2540microsoft.com) were made on Chromium - Something called 'Anaheim' was leaked by name only
Who rotates their phone to an angle of -180 around the y-axis? https://w3c.github.io/deviceorientation/#use-cases The spec clearly defines three use cases: Game control, navigation with a map application and gestures. All these things involve a phone or a tablet in your hands. The range of motion you can do with your hand while you're looking at your phone comfortably, let alone your tablet screen, is quite restricted.
This is a cool read, thanks for sharing! 
I'm going to assume you have a decent # of games installed and are on windows. Now go into `Add/remove programs` or your equivalent in your version of windows. Scroll down to the pages of `Microsoft Visual C++ YYYY Redistributable`. Now you know what version hell looks like, and why the OS is unlikely to bundle yet another versioned thing. Great in theory, in practice the ability to share it between programs is questionable at best.
Es6?
https://www.w3.org/TR/resource-priorities/#attr-lazyload https://bugzilla.mozilla.org/show_bug.cgi?id=947427
This is lovely. Works good on mobile too. 
Glad you liked it budüòÄ‚ù§
Tree shaking for code bundling only keeps the code from packages you actually need for your code to work. Used to manage gorilla and the banana problem
it an image that is loaded later, when you really need/want to see it, not on page load 
It's basically just a bad error message. The function is a function, at least `func.call.apply` is, but because of the inputs (or lack thereof), the function `call` is trying to call is not a function. You need to provide a context through `apply` for it to not cause an error func.call.apply(func) Now `call` has `func` to call - which is a function - so the error shouldn't occur.
.NET is a runtime and extremely large standarized framework supported by a single company. Node is a js runtime without stdlib. The only way it could ever compete is if the TC39 and the node community took on the massive task of defining an stdlib. And even then it would require a ton of money, years of development and multiple iterations of standardisation before it could even think about coming close to the .NET framework. 
That's great news!
Sweet! I was planning on building a modern lightweight general purpose task runner but now that I see this there‚Äôs no need for that :) Btw I see there is typescript support, but what if I want to write the foyfile in coffeescrjpt? Is there a way to inject the coffee script compiler in foy during runtime?
Could be bad documentation? What was the package / framework?
Interesting why there is a ‚Äúbad error‚Äù in the first place and why it‚Äôs complaining about apply when clearly the error is occurring at call? This sheds some light on how internal error reporting works
I was looking at the express-sessions inside NPMJS [This one](https://www.npmjs.com/package/express-session)
Yeah say no more pal, although I'm sure it's great when it works -- I have never got it to work. The docs definitely don't help either
Which part is giving you the most trouble? Are you able to use those code samples in an app to test it and play around with it? Are you familiar with cookies and how they work?
I figured out why there was no duplicates, there was another piece to the puzzle. The frequencies may have to repeat twice or even a hundred times to finally produce a duplicate. I am gonna work on it later, but I just wanted to double back and once again thank you for your help as my code was correct, I just have more work to do.
The part that trips me up I guess is that i don't know how to properly use it. * I've required it * app.use 'd it * created a variable that = req.session.myStoredSessionVar Then from there I"m lost. I just don't get what to do with it. &amp;#x200B;
Good to know I'm not alone. 
As an alternative you could use jsonwebtoken and a header
Even if this were true, it's completely irrelevant to the point at hand.
It sounds like you don‚Äôt understand what sessions are? What exactly are you trying to achieve? I assume that you want myStoredSessionVar to be available on the next request?
Modern JS / ECMAScript 6 / [https://github.com/lukehoban/es6features](https://github.com/lukehoban/es6features)
Mocha does work with ES6 modules if you install [https://github.com/standard-things/esm](https://github.com/standard-things/esm) and use: mocha --require esm
"Because of this, I'm told that Microsoft is throwing in the towel with EdgeHTML and is instead building a new web browser powered by Chromium" Author refers to somebody, not just the commits.
I'm creating an SMS app with Twilio. In order to make the individual received message seem like an actual conversation as supposed to segmented messages it's to have context from previous conversations. The only way to store data from the previous-received messages (i assume) is by cookies/sessions. &amp;#x200B;
I'm assuming the error is set up to copy the source at the call site, assuming that is the reference to the problem value. And that probably works 99.9% of the time. This is an edge case because `call` and `apply` are both involved working on each other in weird ways. 
I think the reason I agonize over it is that I know if I don't come up with a clear set of rules for naming, it's going to continue to bother me because it's hard for your brain to remember and parse arbitrary code. 
It sounds like you‚Äôre missing the right background to understand the documentation. You should read about what sessions are on the web, what cookies are, and what they are used for. A session is not the only way to store previous messages and, if you want those messages to persist, is likely the wrong way to store these messages. You‚Äôll want a database of some kind. If you want to relate messages into a single conversation then you‚Äôll want to add `conversation` as a concept in your system. Many similar services attach some sort of conversation ID to each message in order to link them together.
&gt;y similar services attach some sort of conversation ID to eac Will do. but Twilio actually recommends sessions as the way to solve this problem
But things you're talking about aren't bundled.
I feel ya on this. I remember struggling with documentation. Still do sometimes... Apollo's documentation for just using the barebones client still seems lacking. I wonder if its on purpose as they are trying to drive people to use one of their framework implementations. One thing I've learned to do is look at a repo's tests. There you can see how they consume their own API often with plain english explanations.
Hi! I'm one of the engineers on this project! We made this tool when we realized that Postman and other API testing tools didn't support modern protocols such as Server Sent Events, WebSocket, and HTTP2. It's still in beta but you can find us on GitHub here: [https://github.com/getswell/getswell](https://github.com/getswell/getswell) Thanks for your time! We'd appreciate any feedback.
Nice! Thanks for sharing :)
`const dataArray = [1, 5, 2, 10, 100];` `const sumsArr = dataArr.reduce((acc, el) =&gt;` `[...acc, (el + acc[acc.length-1] || el)], [])`
Glad you liked it mateüòÄ‚ù§
I definitely see your point. But I have to disagree. I started programming when I was in high school over a dozen years ago, but stopped for various reasons. I came back to it more recently to try it as a career. My goodness, has web development changed since then!! Fortunately I took the route of taking a bootcamp course over a few months to learn the new tools. It helped me a lot, and now I can see the value in all these new tools. I was pretty decent using old-school HTML/CSS/JS, but after learning tools like React and Angular, it honestly shocked me how much more productive I could be. It was like stepping out of my trusty old Ford pickup and into a Formula 1 race car. Yes, I have to use *even more* new tools for testing/debugging, but it‚Äôs worth it. I suppose I could have learned all the JS concepts behind what makes React so powerful, and implemented those principles (e.g. using a ‚Äòvirtual DOM‚Äô) in my own ES-6 JS code, but why reinvent the wheel?
No one cares about 50mb but you.
amusingly, all of what you're requesting has been true of IE and Edge for like 20 years now
Hi people, Recently, I've been working on a framework/library called PlazarJS. I think I've come a long way, and the next step would be to write typings for it. It is Object-Oriented and it has a set of built in methods to help you construct the component and its children. Something like ExtJS. We can also compare it with Vue.js since they have the most similarities. You can integrate it with the portion of the html page or control the entire view layer. Here is the GitHub [link](https://github.com/ProticM/plazar-js) Best regards.
Awesome work Jason and friends! You should look into supporting mqtt.
what does the `...acc` do? does `...` do something in particular? I haven't seen it used in my lessons so far.
Hi /u/gregsometimes, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/gregsometimes, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/areknawo, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Not worth.
Seriously, don't worry, as long as it's consistent you'll get used to whatever you choose. And if after a while you find it jarring you know for your next project you should use the other approach.
They are shared though. But because of versioning it still ends up a huge mess. Which shows WHY they aren't bundled. Which was the point of my post.
Whether it's true or not, it would be a good move from Microsoft. Nowadays, Edge is a bit better version of IE which is not that pain in the ass as IE used to be but it still has less modern features than Firefox or Chrome. Chrome consumes a lot of RAM and that is something which Edge could do better. If Microsoft makes a browser with all the Chromium features which doesn't need 1GB of RAM to display few texts, I can imagine moving to Edge but now there is no way I'd use it as a default browser neither for development nor using.
**Windows Performance Update** * Removes node_modules and reinstalls
Awesome.
Yeah, I was just going to say this. Core provides all the benefits of Middleware and simple setup like Express, with the benefits of working in a C# environment. &amp;#x200B; I would argue that setting up a new core service is easier than setting up an node/express service and has less dependency nonsense at the start. I'd be curious on the learning curve comment because C# is probably the simplest language I've worked with: you're type safe, it just works, you can debug quite easily, intellisense, a plethora of packages and support, verbose documentation and examples, and clearly defined patterns for architecture.
This should be fixed now :)
This should be fixed now :)
Hmm, what caveat? I don't have an iphone, so i cant really test it.
Very interesting... always wondered why there aren't more streaming apis.
`...` is a spread operator, a feature added in ES6 . It essentially acts as `Array.prototype.slice()` when an array is the context (a shallow copy). As the name implies, it "spreads" out the input. Try out console.log(...[1,2,3,4,5]); and see what is logged. It is not the same as `Array.prototype.join()`, which returns a string in contrast. &amp;#x200B; With the arrow function, I'm doing an implicit return since the logic of the code is small and the result can be returned using one line. &amp;#x200B; So what's happening is that my reduce function takes two parameters: the accumulator and the current element that is being processed. I assigned the accumulator to be an empty array on line 4. &amp;#x200B; Every return (line 3) will be the accumulator (the previous result; `acc` in this case) **concatenated** with the result (either `(el + acc[acc.length-1])` or `el`) to be added. The `or` conditional operator says to take the first argument which evaluates to boolean `true` after type coercion. This will only probably be the case for the first element because the array is empty, and there is no such syntax `Array[-1]` in JavaScript and will return you `undefined` if it is attempted. You can replace the inline `or` conditional with an `if` statement block if that will be easier to read for you. &amp;#x200B; TLDR: const dataArray = [1, 5, 2, 10, 100]; const sumsArr = dataArray.reduce((acc, el) =&gt; acc.length ? acc.concat([el + acc[acc.length-1]]) : [el], [] ); console.log(sumsArr); // [1, 6, 8, 18, 118] == const dataArray = [1, 5, 2, 10, 100]; const sumsArr = dataArray.reduce((acc, el) =&gt; { if (acc.length) { const last = acc[acc.length-1]; return acc.concat([el + last]); } return [el]; }, []); &amp;#x200B;
Thank you so much for explaining this to me! 
Yes
"Mistakes like this are part of the learning process." Indeed. I have always learned more from my mistakes than the stuff that I got right or easily understood. 
&gt; "Because of this, I'm told that Microsoft is Author refers to someone remarking on the commits. It could have been some rando on reddit....
Told by who? He could have been told by his dog in a acid-fueled trip and the quote would still be correct.
A tldr for most new tech in the web
Thank you mateüëçüòÄ
Wow jason and friends, this is very forward thinking. you have a bright future ahead of you
You can add your own try catch which catches the error then re-throws it outside of that call stack. function outOfMyControl (yourFunc) { try { yourFunc() } catch (err) { // caught and ignored } } function myNormalFunc () { throw new Error('something bad') } outOfMyControl(myNormalFunc) // Nothing function myUnhandledFunc () { try { throw new Error('something bad') } catch (err) { setTimeout(() =&gt; { throw err }, 0) } } outOfMyControl(myUnhandledFunc) // Error!
Well it works but seems too much to stop an try-catch from that outOfMyControl function. I always hoped try..catch worked only in the context they are implemented, not forever from that point on (I just checked where the try..catch is, and it is inside a previous function, not even on a parent!)
Blockchain. Machine Learning. Engines like game engines. Thats what I seen that can be done.
If you haven't already and you find few opportunities locally, consider looking for remote work. GitLab is growing, and they have people all around the world.
I get 25 fps in my note 8 gj.
Sure... I'll just go on a Yan Cui binge and say check out his talks. If you are coming from a Java perspective, you'll want to think of node in terms of smaller services. In conjunction with something like AWS, that's where it shines: ehem. Developer Conference [https://www.youtube.com/watch?v=sZQGf\_A7stw](https://www.youtube.com/watch?v=sZQGf_A7stw) London NodeJS Meetup - https://www.youtube.com/watch?v=DvnHcMhRn_I
Using PKG, you can make and package up command line applications.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Even if Microsoft is ditching EdgeHTML (unconfirmed rumor), I think it's unlikely they're ditching chakracore. We'll see a blink + chakracore browser, not another blink + V8 browser.
I fully agree, that, before anything else, minimizing external dependencies to a few well-contained pieces of functionality is a must for any sane developer. stop importing a package to sort an array.
Not to get a girlfriend that's for sure
In a node environment? 
Best reply of all. 
Very helpful, thanks for posting this!
No problem! Let me know if you have any questions.
What I did to become more proficient at reading documentation was look at the docs for a function that I already knew how to use, and see how they're referencing arguments to get a better understanding of how they describe usage.
You can use Javascript to develop standalone desktop &amp; mobile applications
&gt; every developer can *read* and write in whatever style they think is best I don't follow. My experience with prettier is that everything gets formatted in the way of prettier. So that's what I have to read too.
I just read r/javascript guidelines, and for personal projects, I had to explain the source code. So I wrote [this other tutorial](http://www.javascriptteacher.com/how-to-make-flex-layout-designer-in-javascript.html) that walks through the code one step at a time: 
I just read r/javascript guidelines, and for personal projects, I had to explain the source code. I have already written an article that walks through the code one step at a time, here it is, if anyone is interested. Basically, the Flex instance runs entirely on a single JavaScript class (Flex). Then each stripe is instantiated with a set of arguments unique to justify-content property.
Firstly, thank you for great book and making it free. When reading it at work, I've decided to read a chapter of ES6 version and then skim the original to see what es5 syntax would be. Didn't know about JavaScript Spessore, ganna add it to my read list.
Lol Fair enough. but that‚Äôs the point, ancient in JavaScript is what, 5 years?
Thanks, I appreciate the feedback! 
üòÇ point taken 
I have to admit I could‚Äôve have done more research on the test library. I will check jest!
&gt;Need a bundler, don't need a transpiler (otherwise known as a... you guessed it, *compiler*). Starting with snarky responses is never a good way to start. Nonetheless, I'll respond to your argument in good faith. While there may some ambiguity in terminology, the consensus is that a transpiler is a type of compiler that compiles code from one form to another at a *similar level of abstraction*. Generally, when speaking of a compiler, we are speaking of converting code from a *higher level of abstraction* to a *lower level of abstraction*. &amp;#x200B; These are colloquial terms, though, so if you want to be completely pedantic, using a code formatter is compiling code, since it converts it from one form to another. Likewise, git changing line endings on check in/out is compiling your code. These aren't useful distinctions to make, though. At the end of the day, an engineer/developer will know that transpiling code means you are converting it from one form to another at a similar level of abstraction, while compiling code means you are converting it to a lower level of abstraction (say, bytecode or machine code). &amp;#x200B; &gt;Using the latest language features "because new" is not really a good reason. If you're compiling, might as well use TypeScript and get some real value from the additional step. While agree "because new" isn't a good reason, you are assuming that no new features will be useful. I personally find the class abstraction to be useful. Arrow functions are concise, help readability, and help me avoid having to bind *this* when it is helpful. Enhanced object literals are pretty useful to avoid repeating myself when signatures and keys are identical. Let me provide an example of a feature that I use because it is fairly clear and concise. { const foo = \[1, 2, 3\]; const bar = \[4, 5, 6\]; const baz = \[\]; // ES5 Array.prototype.push.apply(baz, foo); Array.prototype.push.apply(baz, bar); // ES2015 const bax = \[...foo, ...bar\]; } If you think the different syntax is just "because new", we'll just have to disagree on what is a useful abstraction. &amp;#x200B; I personally quite like TypeScript, but it involves extra overhead, as well. Saying that using new features of a language doesn't provide real value is myopic at best.
Thank you!
[removed]
[https://mongoose-os.com/](https://mongoose-os.com/) [https://www.espruino.com/](https://www.espruino.com/) [http://johnny-five.io/](http://johnny-five.io/)
\&gt; Node is a js runtime with pretty much no stdlib The whole point of node is it's a JS runtime (v8) shipped with an event loop and a defined API for file I/O, network I/O, integration with the OS, etc - that is a "standard library". It's fairly comparable to the stdlib of many other languages. You are correct that the JS language spec does not really define a stdlib, and there are of course some languages or platforms that ship with a much larger standard library.
Perlin Noise.
Amen
trumbowyg, jodit, froala (commercial)
ERM I'll take npm and it's thousands of packages over a stdlib
Great tip
&gt;keep it simple that is one of the most important things about this &gt;just look things up as you need them thats a very good tip. im making a web game and i wanted to use some 3d stuff, so i decided to try to figure out if i can use unity. im not going to learn how to use the whole thing, just enough to make this simple game. and also, i use stack overflow to find answers to simple problems every day &amp;#x200B; i think what would be interesting to see later is "how to finish your very first portfolio project". what im doing currently is a little bad and its just listing them on my website which just exists out in the web, but thats good enough for me.
"I cant figure out how to refer to the base rgb value of the background color" are you trying to get the value before you set it then? &amp; is using a while loop required (I'm pretty sure this would just immediately switch the background color since the while loop will be evaluated before the page rerenders)?
I explained badly, the while is in an onkeyup function, so it constantly updates as the amount of faults multiply.
Sweet baby jesus, Loops and string interpolation will be your friend here. I was going to try and refactor this, but im assuming you left some stuff out? 
Get value-&gt;increment-&gt;set value?
I'm not sure what you mean, I just want to refer to the websites RGB value at that given time, as it progressivly changes. So that I +10 the websites given R value.
Firefox gives a more helpful: TypeError: Function.prototype.call called on incompatible undefined With a [link to this](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type)
getComputedStyle is what you want then, here's a simple function to get RGB colors i just made: function getBackgroundRGB(el){ let colorString = window.getComputedStyle(el).backgroundColor; let match = colorString.match(/rgba?\((\d+),\s*(\d+),\s* (\d+)/i); return [match[1], match[2], match[3]] } 
- External JavaScript - Link. A JS file using the &lt;script&gt; tag. - conditional statement Must contain a conditional statement such as an if, else - variable text Must change some text depending on variable. Let‚Äôs say you get the time and day using new Date() and depending on the time display ‚Äúgood morning‚Äù , ‚Äúgood afternoon‚Äù, or ‚Äúgood evening‚Äù 
I cannot recommend \`node-fetch\`. We got bitten by this bug: &amp;#x200B; [https://github.com/bitinn/node-fetch/issues/533](https://github.com/bitinn/node-fetch/issues/533) &amp;#x200B; We did use the suggested alternative, but it's just plain odd that you can only call an output function a single time only. &amp;#x200B; We're actually moving away from it.
Thanks dude, but as a complete moron I'm kinda lost at how to implement this. Heres the whole onkeyup function if that helps; window.onkeyup = function (event){ if (i === 12) { i++; if (score &lt; 12) { bilde = document.getElementById("bilde").src = "bildefiler/kim.jpg"; spm.innerHTML = "Det var alle sp√∏rsm√•lene, du fikk " + score + " riktig og " + f + " feil"; svarA.innerHTML = "Helt"; svarB.innerHTML = "Elendig"; svarC.innerHTML = "Jobbet"; svarD.innerHTML = "Skjerp deg"; lyd.setAttribute("src", "lydfiler/carti.mp3"); } else if (score === 12){ bilde = document.getElementById("bilde").src = "bildefiler/kim.jpg"; spm.innerHTML = "Du fikk alt riktig!"; svarA.innerHTML = "Gucci"; svarB.innerHTML = "Gang"; svarC.innerHTML = "Gucci"; svarD.innerHTML = "Gang"; lyd.setAttribute("src", "lydfiler/carti.mp3"); } } const boks = document.querySelector(`div[data-code=${event.code}]`); boks.classList.remove("spiller"); boks.classList.remove("spiller2"); let colorString = window.getComputedStyle().backgroundColor; let match = colorString.match(/rgba?\((\d+),\s*(\d+),\s* (\d+)/gi); return [match[1], match[2], match[3]]; while (g &lt; f) { g++; let r = 173+10; let t = 216-20; let y = 230-20; document.body.style.backgroundColor = "rgb("+r+"," +t+"," +y+")"; } while (h &lt; score){ h++; let r = 173+10; let t = 216-20; let y = 230-20; document.body.style.backgroundColor = "rgb("+r+"," +t+"," +y+")"; } }; I'm gonna keep trying to figure out how to implement it on my own, can't really expect you to do THAT much. But thanks :)
its just a `TodoApp&lt;T&gt;`, where `T` is the type of task you want to track..., I doubt it would stand out on a portfolio.
This post is was perfect for me, I've been planning on making a portfolio in React for a few days and reading this was very helpful! I'll take you up on your offer and ask questions I might have in the future.
Yeah that one's much better :)
Thank you so much finally got it to work! Upvoted! &amp;#x200B;
Give it a few more days, and they'll link to an article that links to Reddit where someone claimed that the author of the first article "usually is in the know" with MS details because "he knows a guy." And the cycle continues. 
I don't know how familiar you are with Javascript, but basically the match[i] is giving you your RGB values. You don't want to be returning them, you probably want to be using them later on in your function.
So would I just set let r = match[1]+10? And when I fed this into webstorm this part (/rgba?\((\d+),\s*(\d+),\s* (\d+)/gi) was marked. Also how would I activate the function, place it in the onkeyup?
Windows has had a javascript engine built-in for 20 years
Can you remove caching? Postman is pain in the as regarding removing cache when doing some fast development.
Bookmarked so fast
That is what I got, but the prompt is not well worded.
I'm still relatively new to developing but am I in the wrong for being a tiny bit peeved when an actual, unforeseeable code interaction is considered the devs to be "fine" and "just change your code"? If you encountered the issue by doing normal things, that means someone else will. I think they should fix it.
Don't underestimate your ideas! Look at Trello or other Kanban boards. They are basically todo lists that allow you to move tasks from one list to another. But you bet those guys are making millions of dollars!
Sounds good! The more questions you ask the better.
Yep, that's the whole point. Once you've got the bigger picture you can focus on mastering specific areas. However, it's important to first understand what you're doing. Many people feel stuck - think not knowing how the different pieces fit together is a big reason why.
`$value = $value.replace(/^[^0-9a-fA-F]+$/,'');` try this
Thank you!
I got webpack set up with Typescript, but for some reason my main typescript file won't compile because webpack gives me this error: ERROR in ./src/pubon.ts Module not found: Error: Can't resolve './httpCaller' in '/home/peter/Documents/workspace/pubonjs/src' @ ./src/pubon.ts 3:19-42 &amp;#x200B; Here is my main typescript file: import { Subscription } from 'rxjs'; import { HttpCaller } from './httpCaller'; export class Greeting { dataSub: Subscription; constructor() { } greeting(greeting: string) { const caller = new HttpCaller("http://example.com/movies.json"); // let this.dataSub = caller.getResponseListener() .subscribe((response: string) =&gt; { document.getElementById("code").innerHTML = response; console.log('Hello from Typescript'); }); console.log(greeting); } } &amp;#x200B; Webpack config: const path = require("path"); module.exports = { entry: { main: "./src/pubon.ts" }, mode: "development", output: { filename: "pubon-bundle.js", path: path.resolve(\_\_dirname, "../dist"), publicPath: "/" }, devServer: { contentBase: "dist", overlay: true, stats: { colors: true } }, devtool: "source-map", module: { rules: \[ { test: /\\.ts$/, exclude: /node\_modules/, use: \[ { loader: "awesome-typescript-loader" } \] } \] } }
thanks, this actually led to me to the right answer, this worked for me $value = $value.replace(/[^0-9a-fA-F]+$/,''); looks like I had the carrot in the wrong place
Both are correct the first `^` is the start of the string and the second one negates the characters in the brackets.
ah, thanks for explaining
This is gold 
Anywhere you want, but it's usually not the best choice. 
So that part in between the /'s is a regular expression (Regex), and your string (i.e. the value of backgroundColor) is passed through this and returns an array of things that matched the regular expression. In this case, you've got 3 results that correspond to the R, G and B values. Now you just need to take those values and add whatever integer you want to them, and then use the document.body.style.backgroundColor property to set the colour of the page. 
You can do desktop development with electron and similair framework. You can use johnny five and similiar frameworks and do microcontroller hobby work. You can develop apps with react native or other frameworks You can generate cloud formation templates using AWS CDK You can build apis whether it's with node or serverless technology You can do large file processing work or even JSON file processing. You can do some interesting ETL jobs using JS and Postgres and JSONB insertions You can look at ML and AI libraries You can develop extensions for Microsoft Excel You can literally just explore the entire Node ecosystem and pretty much find out JS can do about everything else other programming languages can do just not as fast as compiled languages because there are a lot of developers who use JS and want to resuse their skills in just about every field. &amp;#x200B;
TypeScript I also think CI solutions (like Travis CI) are underrated and should be used in even small personal projects to run tests and generate docs pages.
I think they are referring to the fact that Todo apps are the product of so many tutorials and bootcamps that it won't be regarded much higher than Hello World. They are good for learning but not a portfolio unless it does something more interesting.
&gt;Event the source of the TC article is reporting misleading information! &gt; &gt;Reply It's moving to Chromium.
Thanks! I will take this to stackoverflow and see if someone wants to try it.
There is an option in most browser debugger now to break on all exceptions, you can turn that on. It will stop on exceptions that are caught
Perhaps, but no one is really getting hired based on whether your app ideas are revolutionary or not, at least not for the vast majority of the hireable pool. It's vastly more important to show how well you execute a given idea or at least what your thought process was while doing so. Plus, OP gave another 6 other pretty compelling reasons which all synergize well together with the aim with the goal of getting hired, so the point is mute regardless.
Fetch is dirt simple to use. Xhr wasn't all that bad. I've never understood why people need jQuery or Angular (yes, I've seen people include Angular just to use $http) or Axios or anything else to make http requests.