Outside of JS `-&gt;` is called a skinny arrow and `=&gt;` is called a fat arrow. Obviously `-&gt;` has no meaning in JS so calling arrow functions fat is redundant, but that's just what I'm used to calling them.¯\\_(ツ)_/¯ &gt; It seems like Prettier is by far the most popular style guide / code formatter these days, and it defaults to using semicolons. ...and there was a vocal enough % of the community that it's one of the very few things that's configurable in it. I've seen plenty of projects that turn semicolons off - it's awful. &gt; Not sure what you're getting at with removing parens either. Maybe parens in single-arg arrow functions? Yes. Also removing return statements. `render: h =&gt; h(App)` &lt;- trivial example, but I especially hate when people do lambdas like this. Also, this is all just my opinion. I find there are a set of developers out there that get off on writing code as terse and unreadable as possible whereas I'm the exact opposite. I'm typing `function` all over the place, doing explicit returns, etc. It's more typing, but I feel it makes a huge difference in the maintainability of a complex codebase. Whenever I take over someone's code, I'm constantly breaking up "clever" one-liners. This happens in all languages, but I feel it's especially bad in ES6.
Try debugging any application written heavily in lodash or Ramda. Don't even need to do anything particularly intense to completely lose all ability to reason about your code. Good luck!
LOL?... Except when you hear about https://www.swoole.co.uk/ Their benchmarks are out of this world.
&gt; Well, they transpile to JS. That's what they do by definition. The point was that you do not write your application in JS. E.g. Dart can be AOT-compiled to native code, you can run it as-is on the Dart VM, you can compile it to JS, or you can compile it to separate ES6 modules.
Yep definitely just an opinion thing. I would much rather read: const doubles = list.map(x =&gt; x * 2); over: const doubles = list.map(function(x) { return x * 2; }); This just brings JavaScript in line with other languages with very similar lambda syntaxes (C#, Python, Ruby, etc)
I can also recommend learning Rust. Once you realize the power of using Rust (neon bindings) for native stuff, and JS for high-level logic, you really are as efficient as it can get nowadays.
upvoted you because people in this sub are being pretty damn lame and downvoting you for no reason
I'm not the person that downvoted, but I've run across this argument a few times and it's all a matter of comfort level. I can easily read some heavy functional constructs, so getting into those codebases I consider pretty easy. Just like anything though (even jQuery) developers can make a total mess out of anything.
If you're getting stuck in callback hell in 2017 you're a few years behind...
I still havent had a nice experience with good IDE typing support. There is always somewhere an object without a class from which I need to remember if property was {property} or {_property} or some shit like this. If you use React with flux and some library that maps your actions to stores you need to define the name of the action in `Action` file but implement it with "on" in front with capital starting letter. While you do this you remove the dispacher, but you cannot get any type hints while writting code. I have used Webstorm which fails to do this, VS code as well and Brackets.io There isnt big enterprise framework for back end like Symfony, Laravel, SpringMVC or ASP.NET. In all of these I can create new project with implemented user login and register, I can easily create databases from the console and Entities/Models. I can even generate views and everything. Node is just too young. Give it time. As of now - I its good, but not good enough
Best what? What are you talking about?
The same can be argued for SQL. Had one of the guys here complaining that his NULL columns were not coming back for a check that was "column != 'something'".
I don't get the comments about c# being verbose. I us js and c# extensively and I find I don't write much more code in c#, especially when using LINQ. Then again I'm not really a flag waver for any particular language. They all have good and bad points, as long as I get the job done.
Wat
**JAVASCRIPT IS ACTUALLY A JOY TO USE** *** **YOU CAN FIND ENOUGH ARTICLES LIKE 'STATE OF THE ECOSYSTEM....' ABOUT HOW THERE IS SO MUCH CHURN IN THE JS/NODE WORLD, HOW ITS SO EASY TO WRITE BAD CODE, HOW ITS UNTYPED, HOW FAST ITS GROWN, HOW TOOL SUPPORT WILL ALWAYS BE BEHIND, HOW ITS HARD TO MAINTAIN LARGE PROJECTS ETC ETC.** **AND ALL OF THOSE HAVE SOME MEASURE OF TRUTH. BUT JS CONTINUES TO GROW. NPM IS ARGUABLY THE LARGEST PACKAGE ECOSYSTEM EVEN IF YOU REMOVE ALL THE FLUFF. FRONTEND HAS TONS OF GREAT LIBS AS WELL. THE FUNNY THING IS THE PARTS OF JS WHICH WERE SLOW/MISSING HAVE BY NECESSITY BEEN IMPROVED AND OPTIMIZED BECAUSE OF HOW OMNIPRESENT IT HAS BECOME.** **BUT EVEN WITHOUT ANY OF THIS, JS IS A GREAT LANGUAGE IN ITSELF. WHEN I FIND MYSELF CODING IN OTHER LANGUAGES LIKE C#, PYTHON, OR GOD FORBID JAVA, I FIND YOU HAVE TO TYPE 2-3X TIMES AS MUCH, AND THE CODE LOSES ITS TERSENESS/EXPRESSIVENESS. I'M TRYING TO LEARN MORE MODERN LANGUAGES LIKE GO/DART/ELM/CLOJURE ETC BUT NONE OF THEM SEEM TO BETTER ENOUGH TO WARRANT SWITCHING (THOUGH I LIKE SOME THINGS LIKE CHANNELS). ES6 WAS REALLY A GAME CHANGER.**
Oh. 
The single param thing always bothered me so I always put them in anyway. I don't understand why one param is so special. You need them for no, 2, or more parameters. I just keep it consistently there.
Nginx is the best option. If you want to serve the app with node, you could create a systemctl service to restart your server automatically
Holy shit tell me about it. I was programming all summer in javascript but switched back to java when I got back to so school.. Ended up making monstrosities like this: HashMap &lt; String, ArrayList &lt; String[] &gt; &gt; 
&gt; If you want to serve the app with node, you could create a systemctl service to restart your server automatically That would only be efficient if your server has a single CPU. Otherwise, you'll want to use a solution like PM2 cluster mode to take advantage of all your compute resources.
What applications are you writing in JS, OP? I ask because I write backends and APIs and I was a diehard Laravel fanboy until I discovered Golang. I’m writing something in Electron/Node for a client and it’s a pain in the ass. Perhaps I need to look at Typescript or ES6 more? I love Go because of its type handling and it forces you to write code that will compile, and writing tests is fantastic. Once I’ve closed off the current Electron project I’m working on I’m booked for the next 8 months with Golang work, and I would imagine I am going to come across another JS contract at some point, so I can’t discredit it completely.
Without real types and pattern matching against them, there's not really any benefit to FP in JS other than terseness, the mortal enemy of readability.
I'm not sure I follow some of the other concerns either... superfluous punctuation? Thanks to a sensible dev environment, I haven't typed a semicolon or a trailing comma for a long time
At least lodash and ramda are extremely well documented...
Your girlfriend sounds petty.
NaN != NaN isn't even a javascript things, it's an IEEE floating point thing. python: &gt;&gt;&gt;float('nan') == float('nan') False ghci: Prelude&gt; 0.0/0.0 == 0.0/0.0 False jshell: -&gt; 0.0/0.0 == 0.0/0.0 | Expression value is: false | assigned to temporary variable $1 of type boolean scala: scala&gt;0.0/0.0 == 0.0/0.0 res0 : Boolean = False ...etc
Out of interest... have you had to work on/debug someone else's JavaScript code? C#/Java are verbose for a reason and they're fantastic languages. I use C# and JavaScript everyday and to compare the two is silly. Frankly, most of the time comparing language X to Y is a waste of time. Pick the right tool for the job and don't get emotional about the stack you use, as it will likely change at some point
I used to think Php was awful, then I discovered it was just wordpress.
&gt; WASM is now supported without DOM manipulation, sure. I'm as excited about WASM as the next dev, but it's a bit premature to start celebrating the breakup of the JS monopoly over browser environments.
JS is nice but it's not the best at everything it does. You can't write Java-style OOP or Haskell-style functional programming in it. It's fast compared to other dynamic languages, but it's not competing with c++ levels fast. It's also dynaically typed which is good in some ways and bad in some ways, but sometimes you want static types and typescript is a poor substitute.
&gt; superfluous punctuation it looks like this } }); } });
That's not true. Pure functions and immutable state are a huge benefit when reasoning about your code. Sure it is not enforced by a compiler but your team can adhere to some rules and harvest the benefits. 
OK; I figured as much. I knew they had some script that loaded to wire up all those links. But I found something else that helps me in this endeavor. I don't NEED youtube's links/wiring. Their player has an api I can use to manipulate playback. https://stackoverflow.com/questions/39974928/how-do-i-interact-with-the-youtube-player-on-youtube-com-not-the-iframe-api I tried this out myself. var p = document.getElementById("movie_player"); p.seekTo(20); p.playVideo(); The first line will initialize the player in javascript, and the second will jump to the desired time and play the video. Hoping I can leverage this for my extension; this seems to be very good news.
&gt; (I mean, I was trying to generating some code in the component.ts but I couldnt use the method outside angular and you can't use script in angular, so... you use its bindings or it wont be easy The mention of `script` seems to imply you're trying to import code. These days that is done with `require` or `import` statements and relies on a module bundler to "actually import the code". That is unless you're writing a bleeding edge app that only supports the latest modern browsers, as they do have import/module support. If my suspicion is correct, then you have some catching up to do, but I think you know that.
I guess it depends on how it's written. The two C# codebases I work on are probably not shining examples, but they seem to require a lot more code to do basic things. Type juggling requires more code to do conversions, value objects and interfaces all over the place which add significance to data shapes that I would argue just don't merit that kind of significance in your domain. Then again, I'm not a C# dev, so I can't recognize clunky or clean C# as well as I can JS.
Lead Java dev at my last job was asking me about the roadmap to learning react. He's an older guy and goes, yeah I'm just going to be a trucker. Reason why, the react shop only needed an JSON endpoint, everything else could be done with JavaScript. Just a couple years ago they had JSPs heavily integrated into the front end.
And Joomla. It is to "object oriented" PHP what WordPress is to procedural PHP. It tries its best to do routing and some kind of MVC thing, but it butchers them both so horribly that you swear someone was deliberately trying to make a simple concept as complicated and semantically retarded as possible.
No problem with that, in my mind, as long as you are consistent. I believe the syntax is that way to work the same way as lambda expressions in C# (which has almost identical lambda syntax to JS) and Java. Similarity to other languages is not necessarily a *great* reason for the syntax to be the way it is in JS, but I find it odd that I never see anyone complain about the paren-less form in C# (where it is used extensively in official documentation) or in Java.
&gt; Am I even on a plausible track to at least develop the structure drawing implementation using JS? Sounds like it's going well to me.
The whole point of gravity is to hold us down, have you ever jumped? Live life a little.
No no, I'm aware of these things (require, import, the language really, I played already contributing to a vscode extension). The problem was that I didnt want to get stucked with the mat-table and I threw in the datatables (plugin) in the app. I could render, make it work (doing some configs in the tsconfig and angular-cliconfig or something) and I was trying to create the delete button inside the method that creates the datatable (there's a lot of options). And it looked like 'button delete (click)=delete(id)'. But since this wasnt in the template, the page is rendered ok, but the (click) thing doesnt work cause it wasnt compiled or something. Then I went to learn how to expose an angular method so I could do it inline 'onclick=delete..' but after reading (and trying a bit) I just decided it wasnt worth the hassle really, too complicated. I know I could make it so the button appears in the edit page, but I'ld like to have it in the table.
Ermmm... What the hell were you trying to do that meant you had to do that?
If they are suggestions and not enforced requirements they can't be relied on, particularly in a pass by reference language.
I can't comprehend how people become regex wizards, It's incredbily hard for me to remember lol.
I had to parse through a configuration file that sometimes had multiple paired values for the same key, but sometimes not, and I didn't know how many paired values there would be, either. for example: ServerRoot "/Users/username/workspace/server/" DocumentRoot "/Users/username/Desktop/Workspace/projectRoot" Listen 8096 LogFile "/Users/username/Desktop/Workspace/projectRoot/logs/log.txt" ScriptAlias /cgi-bin/ "/Users/username/workspace/server/public_html/cgi-bin/" Alias /ab/ "/Users/username/workspace/server/public_html/ab1/ab2/" Alias /~traciely/ "/Users/username/workspace/server/public_html/" DirectoryIndex "public_html/public_html/index.html" Our lecturer didn't give us the exact details for the testing specs so I just made it as dynamic as possible. 
Ron Howard’s voice - “It isn’t.”
&gt; I just decided it wasnt worth the hassle really, too complicated. Yeah, I totally agree. Honestly I would try to get `mat-table` to work. Failing that, then yeah, checkout React. I've only been using it for a couple months, but I feel like it would play better with jQuery than Angular will. 
I know what you’re referring to now but I agree with the other person that with modern practices that kind of nesting can be avoided without much hassle 
Yeah, I took a quick look in the mat-table, but after playing with angular... I dont know, I felt like I couldnt use the things I was doing outside of it and I kind lost a bit of interest in it. Yeah, I was playing with react and it's possible to achieve more things without much of the work needed in angular, it's just that I seem to have a lot more files for a page haha. I think angular is making a lot of assumptions for the developer "without consent", if that makes sense.
You could use a webpack to bundle all of them to one file and then just link that file to the page. 
Not sure what you mean by "written heavily in lodash". Lodash is a utility library. If anything, it improves readability and prevents people from having to reinvent the exact same helpers themselves (poorly).
Hangs outs is actually pretty great, and when it came out it was absolutely amazing. Free video chat wasn’t really much of a thing for me at work before it. It’s likely that the existence of hangouts alone has pushed webRTC forward. 
I'm missing a discussion about geography under #4 (the first one, about salaries). Libraries popular in the US or other high-salary countries would likely be at a great advantage.
I'm working on the communication layer as we speak. First Firebase then if I can figure it out a true peer-2-peer system through WebRTC so there's really truly no central authority.
If you have heavily nested callbacks, sure. If you are using Promises (even without async/await syntax) you really shouldn't have deeply nested punctuation like that.
That verbosity is for the next person who works on it, and to ensure minimal correctness checking before you run the code and it crashes.
Oh, don't get me wrong, I'd love strong Haskell like types but you deal with what you do. The solutions available right now feel too heavy.
This is a really useful bot. I'll give it a try tomorrow. My gf will definitely apreciate it. 
that's wonderful for new code and greenfield projects. the vast majority of code out there is legacy code. we work with what we have to, not what would be ideal. refactoring old bad code is an important part of paying down tech debt but there's only so much budget for that.
That's not an issue with JavaScript then. It's an issue with a legacy project that was written in an old version of JavaScript.
its her only joy in life
Vue being more popular than Angular(2+) seems incredible to me.
I know judging other people's relationships based on almost nothing is practically a reddit trope at this point, but man, I'm glad this is one problem I'm not in need of a solution for.
&gt; Updating legacy Python 2 projects that use Python 2 dependencies to Python 3 isn't exactly fun either, but I wouldn't blame Python as a language for that. really? I would. I'm a huge fan of Python but they really fucked up the transition there. I don't think you can sensibly speak about a language if you ignore it's past. I'm not sure why the discussion of legacy code is suddenly out-of-bounds for you here. Working with legacy code is BY FAR most of the work that gets done on a daily basis. 
true, but it's development has been a steady procession of removing features and options while adding some of the most egregious app-breaking bugs I've ever seen. By the time I left hangouts for discord there was only 1 person left on that platform I still actively chatted with. 
This. I mean if this is not enough that mean that you're checking something more than a reference which mean a dedicated logic is needed not a catch all solution.
Guess the daily "Angular vs React vs Vue" medium article is not enough after all ...
The article seems to really be hugging VSCode a little harder than normal . . . like it wants to be more than friends. Rightfully so. In the past year or so, VSCode went from "hey it's a nice little text editor" to almost indispensable JS code editor. I'm not sure what MSs hook is here to get me to spend money on MS products, but TBPH it doesn't matter. They haven't fucked it up, and it doesn't look like they're going to. If you haven't tried it you should.
This is exactly why understanding the minimal theory, and using cheat sheets are helpful. 
I would be immensely interested in this. I'm pretty sure there is dedicated subreddits for most of the most popular framework let /r/javascript be about javascript. At the very least a flair would be usefull.
This is hilarious!
You don't need to learn to code to setup a website, look for simple solutions like wix, squarespace, wordpress, etc. Since it's a non-commercial initiative, you can look for developers charity / community to help you setup your website.
&gt; Working with legacy code is BY FAR most of the work that gets done on a daily basis. This depends on where you work and what you are doing. At my work we write new code far more than we refactor old code. When we do refactor old code, it's usually jQuery that tends to be the source of callback hell. Even still, there are pretty much always ways the code could have been written to avoid most of the callback hell, but the jQuery documentation pretty much encouraged developers to use deeply nested callbacks all over the place rather than focus on reusable functions with single responsibilities. I guess I just feel it's not language's fault that the most popular library didn't teach its users how to write good code.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
Thanks for the tip.
amazing. About to put some of my own skills to the test and make it so it randomly comments great pic under them or something haha
That's a good point, people are quick to shit over languages they have to touch occasionally... usually from working on code that is also not written by someone with a deep understanding either. Mediocre code exists not because of the language but a lack of understanding by those who write it. I should probably add my js is okay, which is why I sub here.
VSCode and typescript have changed my life. Legit made Javascript work 2x as enjoyable.
Huh. Never heard of Reason before, but I'm going to check it out.
I really enjoy [Aurelia](http://aurelia.io/) because it, to me, gets out of the way the best. You may want to look into it.
I understand where you're coming from but I think there are a few of reasons why folders win out: * Much smaller lists to read through. * Smaller file names. * Less code, file paths shouldn't be too long if just the right depth is used, and if you use an index.js and `import/export` your files from there you can turn many lines of code into a single import: Using a flat folder structure: import draft from './draft-reservation' import complete from './complete-reservation' import cancelled from './cancelled-reservation' Using indexes: import { draft, complete, cancelled } from './reservations' That alone is reason enough for me to use the descriptive folder method. Also, as a project grows your app/ folder will grow massively. On large projects even using my method, including grouping subcomponents in their respective component's folders, you still have huge lists of files to read and it makes visually finding the file you want unnecessarily annoying.
AFAIK there is no such thing as "safe nodejs vm sandbox". You should run code in a node process launched by "systemd-nspawn".
Sometimes it’s more about preventing a problem
If you're not building something for production (or if you don't have to support IE) you should use [modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import).
Is this a reference to [Instagram Husband](https://www.youtube.com/watch?v=fFzKi-o4rHw)? LOL
lmao that is amazing!
vanilla or any framework?
Not entirely on the client-side, usually data is sent back to server for analysis. There are people doing it, mostly for data collection. Also detection is not 100% - there are both false positives and false negatives. Ref: * https://caddyserver.com/docs/mitm-detection * https://www.scmagazine.com/researchers-detect-ssl-mitm-attacks-method-implemented-by-facebook/article/538136/ 
I agree but Promise isn't at all good for streams. Better to use [streams](https://github.com/whatwg/streams) for that. Maybe you could shim an implementation of streams with this?
We all know North JS is the Best JS. 
Dangerous, what if she posts a picture of something sad?
Can you imagine if you broke up and forgot to uninstall? That would get really awkward.
this is really pathetic
Hi r/javascript, I stumbled on this pattern while working with async/await, I'm not sure if it's good practice or not, but I just found it interesting that you could map async functions in this way. Feedback is welcomed. 
Dude, it's just a joke
I have played with Instagram API a lot back then, but how do I get user_id from Instagram Developer API (as written in the README)? Is it from the /users/self/follows endpoint? Or there is an easier way? Thanks!
I wish it were. I recently ended a relationship where this was a recurring theme. I don't hardly visit instagram or facebook, I especially don't lurk them... she was a big social media user. When she first mentioned that I don't like her posts or comments on my own posts I thought she was joking and laughed in her face. It got to the point that I had to say "listen, social media doesn't matter to me... I don't want to have this conversation again, this is insanely childish". We dated for over 3 years, she was mostly put together but this was a recurring theme in our relationship. I'm in my mid-30's, she was older than me... edit: it was a happy, healthy, and great relationship... we ended it because babies... I ain't trying to have no babies right now.
O what... Maybe I'm wrong about the post being a joke
even better!
Hi, wanted to share my module which makes it quick &amp; easy to write EJS in plain HTML. It's essentially a wrapper/extension for the native [EJS module](http://ejs.co). EJS Element let's you, in your HTML, define a custom element with EJS inside of it; you then need simply init the module in your JS with said custom element and voila your EJS is rendered. &lt;ejs-elem&gt; &lt;h2&gt;Everything is &lt;?= status ?&gt;&lt;/h2&gt; &lt;/ejs-elem&gt; I use EJS in basically every web/app I build and so this module comes from a need to get to using EJS as fast and painless as possible. For some additional background on the thought process including code examples - you can also check my [blog post](https://nerdbusiness.com/blog/ejs-element) announcing the module today. And any feedback or Q's, feel free to share here ! For example, my parsing logic is rather keyboardmashy; it ain't pretty - so am hopeful there can be some insight as to a better technique for doing that. Oh and rendering just trashes the DOM too so am curious about better ways to do that as well. 
Simpler fix would be to change the Gf but thats none of my business.
Then you reply with a eggplant emoji
You're right, Python doesn't belong in there. And I agree with your other points as well. JS has to be written carefully.
Funny idea. Even Funnier looking code. 
I use C# as well and love it. A lot of things like lambdas, async/await came to C# first, but it never had first class functions. And the VS IDE is incomparable.
Rust is one of the languages I never had time to learn but mean to.
The whole point of passwords is to keep your data and system secure, have you ever removed yours? Live life a little. If it was your site with a CAPTCHA you wouldn't want people accessing it with an automated tool. It's most certainly against the TOS of the service and people have been taken to court over it (they plead guilty, so there's no legal decision as to whether it's illegal). But seriously, CAPTCHA cracking is shady business and I would certainly recommend against it.
jQuery still has a use case
https://stackoverflow.com/questions/37593025/instagram-api-get-the-userid
that's awesome, thanks man! TIL
&lt;posts picture of her grandfather holding her as a child&gt; "Just got a call from my parents, My heart is broken..." &lt;Like&gt;
As an alternative to webpack I might also suggest [Browserify](http://browserify.org)
Haha I love it. For your code however, you should try to be more consistent. I'm seeing arrow functions in some places and other places not. Braces on the same line and some that are not. Vars in some places and then let in another etc..
Hmm, I don’t see how these things were not already true with promises
No, this is maintaining a constant state of conflict avoidance. Eventually the problem will grow, the conflict will become inevitable, and severe consequences actualized.
Awesome! Now I can be the first to give your gf the attention you haven't, but with none of the work!
async/await can be used to map one promise to another. I'm not sure how that would be done to the same effect using just promises... but an example would be welcomed
Output a comment depending on the tags.
Step 1 : get a gf
Just like her post, dick. Geez.
yes, this is a cool concept, but the code is a mess
Why not simply note that u/hackwaly found the way Promise should have been written and put into the compiler?
There are plenty of people who have social media accounts but don't check it every day, or even every week. Requesting that they check it constantly throughout the day so that they are first to like your post, is kind of childish. It is not a small request either. I would not judge the other gentleman harshly for this. I mean there could always be a second side to the story, but based on the one we have it seems like fair stance to take.
That scenario is not what he described. There is also a big difference between explaining why you can't do something and laughing in someone's face and calling them childish.
That's the thing, I'm not on there... I occasionally post... I don't follow shit, I don't check shit... it would actually require me to actively track/check to be able to like and comment on stuff, which I don't do. Just like this thread, I read a couple comments, I posted a comment... if she is in here posting stuff or saying something I have no idea... Which brings me to my next point... we're both on Reddit and you haven't upvoted anything I've posted or commented on... we need to have a talk... do you really care about me? 
Loling @ the idea that the dude with 50k comment karma who responded to a total stranger on Reddit within minutes doesn't check social media
A simple discord bot https://github.com/cyberinferno/discord-chum
Reddit is my curated new source, it's actually mostly where I waste my time instead of looking at pictures of sandwiches.
my face hurts from laughing now.
Hi /u/asterhrittraining, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
Hahaha I had planned of using Google Cloud vision API to detect mood and comment accordingly
/r/watchpeopledieinside
Here's a sneak peek of /r/WatchPeopleDieInside using the [top posts](https://np.reddit.com/r/WatchPeopleDieInside/top/?sort=top&amp;t=all) of all time! \#1: [Roy Moore spokesman finds out you don't have to swear on a Bible to become an elected official](https://youtu.be/WFYRkzznsc0) | [3224 comments](https://np.reddit.com/r/WatchPeopleDieInside/comments/7jl9m6/roy_moore_spokesman_finds_out_you_dont_have_to/) \#2: [Pick One](https://gfycat.com/AbandonedAliveAsianlion) | [374 comments](https://np.reddit.com/r/WatchPeopleDieInside/comments/7bfkrb/pick_one/) \#3: [Wedding officiant loses the ring. Everybody dies.](https://gfycat.com/GenuineShortInvisiblerail) | [1270 comments](https://np.reddit.com/r/WatchPeopleDieInside/comments/7i6baw/wedding_officiant_loses_the_ring_everybody_dies/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Interesting article. Your definition of lift &gt; Lifting is the conversion of data from one form to another. is new to me. Lifting to means something else: &gt; Lifting is when you take a value and put it into an object like a functor. See [Functional Programming Jargon](https://github.com/hemanth/functional-programming-jargon#lift)
All these points are "Insert something about x library". Literally all this says is that JS developers don't know how to do their job without libraries and also think that it should also run on backend, your toaster, your hamster and your grandma.
Yes I know. I plan to clean it up I wrote this when I started learning JS.
...which is why I mentioned that reading trough the file-list does not have to happen at all given that all proper IDEs and even text-editors have a fuzzy search. By naming grouped things similarly (having the same prefix), they will stay together when you list your files. The human eye can easily notice a large chunk of stuff that begins the same: it doesn't take you more than a glance to figure out where the group begins and ends in my flat example. The only thing you have to do is scroll mroe (or hold the arrow longer), but you're mentally you're doing much more work. As for your `import` argument, the thing is that you should mosty let that be handled by your IDE. My imports are always collapsed and I just let the IDE import them. Wether it's your first or second example, I don't care: with proper naming, I won't have clashes.
How does this inter-operate with Promise? Since application code doesn't exist in a vacuum, you would need to consume Promise and return Promise to inter-operate with other code. 
If all users closed their browsers at once, I guess all would be lost? It is still brilliant. It’s something every cryptokid can start in their browser and learn from.
Point to the github repo for that please.
I use Docker. Once you packaged your app into a Docker container, you can deploy it on any machine with Docker without worrying about Node version or whatever. Other DevOps tools should work too though IMO Docker is easier for personal use (e.g. Vagrant, Chef, Ansible, Puppet, Salt)
 Yes, it need to be considered. it shouldn't be difficult.
Passive aggressive ex. Just disable the slack hook and have fun.
Was
And someday she will realize that it was a bot all this time along. It's so perfect.
Cherow will always stay up to date with Test262. And this parser have 41 000 unit tests just to make sure Cherow is 100% Ecmascript spec compat.
Did you mean the "definitive guide"?
Haha oops. Yes. Yes that's what I meant. #secondlanguage
what about those who don't have a Gf ? :sad:
You don't need no course, especially if you want to master JS as fast as you can. Do a project, or multiple projects in quick succession and learn from real-world problems. JS is particularly apt for little projects, from a simple website with nodejs server to a simple electron desktop app. Do it the Nike way.
Just do a git pull
I don't know anything!
That's a symptom than a root cause. Deep down she's thinking you don't care about her enough to make time for her. But hey it's ok, everything in life is learning. Read "The Way of the Superior Man" by David Deida, when a woman is angry at you not doing the dishes, the problem is not the dishes themselves but something deeper. 
Wow
If you want to execute Js code over any webpage locally, just use tampermonkey or greasemonkey, there's already a bunch of scripts for cookie clicker https://greasyfork.org/en/scripts?utf8=%E2%9C%93&amp;q=cookie
Yeah, I thought about that, but I wanted a fun project to try add features easily without modifications. I'm hoping I can escape save file loading and run code through it.
I think what they mean is that reddit is also social media, so technically your statement "social media is bullshit" doesn't work. It's pedantic, I know
Or if she posted while you were obviously with her and not on your phone or on a flight or something.
Wouldn't it be better to have it notify you on slack first then have the slack bot like the post? What if you're with her and your phone is dead or you're on a flight or playing sports. She'll know you've botted.
lol Particularly if you broke up with her!
It's that you haven't bought her a dish washing machine.
Did she change her profile picture on facebook/twitter/whatsapp/etc more than you change underwear? I know one of those as well, it fucking rediculous the amount of new pictures you see popup and this is a lady in her mid 30-s as well. 
true, women are like software. On the surface it just says fucked, and you're like what the fuck is wrong this time? You're disecting all the different layers to see where the problem is and eventually you figure out it was minor thing.
https://javascript.info/ https://www.reddit.com/r/learnjavascript/
tldr: jQuery UI/Mobile is dying. The state of their site's css is representative of the project itself
MFW I'm talking about women in a programming sub and not in r\seduction If you want to make the software analogy, the surface fucked error always has some problem rooted in the code that is the energy. It is never the minor thing but always some bug deep within the code of the relationship
I'm picky though, I tend to cherry-pick
@faded_filth, @ugwe43to874nf4 thanks for the repost, and yes I did (and do) have an unusual amount of fun writing this :) @PineappleBombs, hmm lizard .. that's a first .. my programming style is dense and definitely takes some getting used to but on the upside you don't need to scroll and memorize to get an overview. (and considering the complex nature of the performed task, its actually still quite readable. - for example lines 18 to 23 where the dimensionality and canonical basis is generated is about 300 lines of code in a popular c++ GA framework. - 129 to 135 is a fully compliant javascript tokeniser - also keep in mind that the code in ganja.js is a generator, that produces the code (with math operations, parser and graphing) for a specific algebra.)
http://exploringjs.com/ https://javascript.info/ Two excellent sites to learn from. I'm self taught and I can honestly recommend those as one of the best I've read. But for starters all you need to do is code, code and read Mozilla Developers Documentations (! built-in objects and methods !). Learn what JS offers and what it lacks. So, summing up most important is to: - code a lot, test new features, - read docs if something is unclear, If you're interested in something, use JS to do something related to it. For ex if you like to solve challenges see Codility. If you play some browser game, try to make key bindings, bot :) 
Wow. I didn't know about `steps` parameter. https://designmodo.com/steps-css-animations/
You can start with Code Academy which is free. That gives you a starting point for learning :)
Please post this for us none technical people!
“That like was just for support baby!”
Just so you know, it's actually called Codecademy.
https://pastebin.com/WGNGqBqf There you go, If you need explanation just ask
I laughed out loud when I loaded this on my mobile phone.
Ok Jeffrey Epstein...
jQuery powers the Internet and without it arguably we wouldn't have had a frontend revolution making authoring websites anorder of magnitude easier. Unfortunately these days everyone loves to hate on it because it isn't 'cool'.
GF: Pots picture of something awful with "look what just happened to me". Partner: Like! GF: Someone isn't getting any tonight! Partner: Like! GF: Make that all week... Partner: Like! GF: Sod it, he dumped, I'll go out with John from accounts instead. Ex-partner: Like! I would suggest that just notifying you so you can like things more selectively might be safer.
jQuery was one of the first libraries that combined a lot of utility features with guaranteed cross browser compatibility. Just like a lot of libraries are still doing now. We would most certainly have had the frontend revolution just like we are having it now. jQuery co-existed with a lot of the early frameworks that have either risen or fallen. And now it belongs to the fallen ones. It has fallen out of style because a lot of the things it provided are now better managed with modern 'native' js api's, new language features, transpilers or more modular libraries and package managers.
That's what happens when you forget to format the code you copy pasted from stack overflow...
The site showed up as a thin column of text on my phone
If you have absolutely no programming or other technical experience then probably not unless you are some sort of savant. Otherwise, a month is plenty of time to learn the basics and a bit beyond, though perhaps don't expect to get a highly paid job that quickly! And as others have said: there are plenty of free resources that as as good as most basic courses, unless you are someone who needs the structure provided by a more interactive taught course to learn efficiently (but an interative taught course will set you back more than $20).
Hahaha I plan to integrate cloud vision api check before liking to avoid such embarrassment
What is your starting point in programming? Years of experience with other languages and what languages?
I highly recommend https://www.freecodecamp.org/. It is free, as the name claims. They have loads of javascript excercises you can do directly in your browser on the site, and javascript is one of the core areas of their Frontend Development Certificate. The exercises usually only take a few minutes so you can even learn when you just have a little spare time. It is one of the [most popular repositories](https://gitstar-ranking.com/) on github and is constantly being maintained and improved by hundreds of open source contributors. What happens if you get stuck? There is a big community of other students who help each other out in online chat. Instructions on how to sign up for the community are on in the freeCodeCamp intro on the main site. I had been coding javascript for years and took the course just to see how my skills were and I definitely learned a few things. It is very thorough.
Won't such posts would be about anti-framework, and not contain any code at all?
How bout retired?
If you have a hot girlfriend whose personality you don’t care for, it’s all about keeping it going as long as you can while minimizing your effort. Surely she’s getting something from you to like your job status so whatever. 
There were a lot of competing frameworks like sencha, ext, prototype, off the top of my head, none of them were as easy to dive into as jQuery. There's a reason it became the standard, much like React is well on its way to be one now. Its easy to say in hindsight that if x didn't exist, y would come along. But that isn't always true, and in no way diminishes x.
Do you got a jquery plugin for that?
Lol its more about being able to make something. You could easily take this code and learn from it to make something you think is worthwhile, OP probably just did it to see if he could or for the fun of it. 
But obviously you also use those sites, right? If you didn't use them at all you wouldn't be posting things there.
For real; it only takes a few refactors before you find yourself satisfied with the choice to use it.
Who hurt you? It was Angular, wasn't it?
Sorry? Why would I download literal aids on my machine?
Hi /u/mburakerman, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
This is not prevention. This is ignoring the problem
This particular post might be, but I have seen this exact "joke" being discussed so many times already that I am starting to think its not just a joke in some cases.
Sorry if this is tangential, Are you intending only to change it to text?? If you want to add HTML to the elements you cannot use innerText. it will strip the html from the text and display as raw text. Example: https://stackoverflow.com/questions/19030742/difference-between-innertext-and-innerhtml
Or if she posted and you haven’t responded to her text in hours 
Easy solution: always use your phone, even when hanging out with her. (Most people seem to do this anyway, so this is more of a sad commentary than a joke.)
Jquery is still useful, you need it to run other frameworks, like Bootstrap.
It’s interesting to think about the state of jQuery and the projects that were built on it. There are tons of jQuery plugins that people downloaded and shoved into their project’s source code, similar to how people install npm packages today. The key differences with npm is that you would be hard pressed to edit the source of a dependency, unlike jQuery. Also, jQuery plug-ins make working with webpack and unit tests hell on earth. I for one welcome our new npm overlords.
By not just open a PR to contribute to Jest?
It’s funny on the surface, but ultimately a really great way to lay the foundation for a disingenuous relationship, and kinda sad. 
Do you know how to build a page with HTML/CSS?
https://i.imgur.com/bJ2DeQk.jpg Yeah.... not a great look. 
It's very unlikely the savestates will be loaded via `eval` if that's what you're thinking. The undefined error you're getting is probably the game's code attempting to read a property of the object returned by `JSON.parse(savestate)`, which is returning `undefined` because your addition is corrupting the JSON data.
To be able to tell what is going on, we’d need to see more of the source. I imagine it’s returning a function which is immediately being invoked. Similar to curried functions.
&gt;ESM was apparently finalised 3 years ago and yet it still feels no progress has been made to try and standardize the way all these things work. The specification doesn't leave anything missing per se. The problem is that the syntax you're using is Node-specific, and not valid according to the standard; you have to provide a valid URI (which means it has to start with `/` or `./` depending on wheter it's absolute or relative) and you have to provide an extension name. By writing `'bootstrap-vue/es/components'` you're implicitly instructing Node to look in your node_modules folder for the module. To solve your issue, you would have to use a build tool to process your files and resolve the dependencies first, or rewrite your URIs to be valid.
The code most likely went through Babel transpilation. See this StackOverflow answer: https://stackoverflow.com/a/32275207
-You said you were going to bed. What are you doing in Instagram? Who is she? 
This project is really jasmine-expect 4.0 but in the form of a TypeScript rewrite and under a new name, it's been running since before Jest was created. I'd be open to any being included in Jest if the owners wanted them, but I wouldn't expect that they would want them all.
hah this is funny. idk if i’ll bot my gf’s account but i definitely want to use that code for something, if not just to learn JS 
Um, wrong? JavaScript powers the internet. jQuery is getting hated on hard today because a ton of developers learned jQuery and not vanilla JavaScript. A while ago that was totally understandable. Today it is not. Vanilla JavaScript is just as easy, if not easier, than jQuery now. Today, using jQuery is like an adult riding a bike with training wheels because they say it's easier. You're a dev. Learn vanilla JavaScript. Use Babel for browser compatibility. jQuery causes issues by fragmenting the JavaScript language. You now have two different languages instead of one, and for what reason?
til
Why I didn't find this? It's late she just broke me up. 😰
This has been around forever, not just ES6. Anything wrapped in parens is evaluated as an expression. You can wrap multiple expressions in a single set of parens by separating them with commas. By design, the last evaluated expression is returned. For instance: const foo = (1, 2, 3, 4); // 4 In your example, `0` is being evaluated as an expression (in this case, it's useless), then returning `_utilsIsMomentRange2['default']`, which is a function, and calling it with `(value)` as its argument. The result of that is being assigned to `something` There are better ways to write the code you've shown, but my guess is a transpiler generated it, which is why it's so cryptic.
Importing will work in some evergreen browsers but you're leaving open a gaping hole as many browsers don't do it (yet) and some never will. The standard will probably need some years to propagate and even then, in its current state it is far off from what bundlers offer. There's no solution right now for module loaders, effortless splitting, efficient compression, tree shaking, etc., without which it probably wouldn't make sense to make your hands dirty and annoy your users. Also, given that imports are practically part of javascript for years, with semantics similar as above and more (like importing non js resources), it's rather that the tc39 spec has to prove its worth first in that it has to match real-world needs. If developers don't feel like regressing for nothing or adhering to new semantics, the spec will die or be altered until it fits.
&gt; I think angular is making a lot of assumptions for the developer "without consent", if that makes sense. Well, Angular is a full featured framework and that implies an [inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control), so that most definitely does make sense. [Vue](https://vuejs.org/) is hot right now too, so if you're shopping around then you might want to check it out as well. 
Bootstrap core does not depend on jquery. The js plugins do but most frameworks have bootstrap components libraries. Tbh bootstrap itself is has been going out of style rapidly.
Now jQuery knows what it’s like to be mooTools. 
I'm not saying it wasn't good for the time, but to argue that we wouldn't have had this frontend revolution without jquery is quite bold. Jquery was a tool that helped satisfy a need. The frontend revolution is another iteration of us dealing with those needs. The need for fluent web based interfaces is the thing that ultimately drives web development forward, not the existence of any particular tool.
lol thanks for the high school recommendation.
I mean, it’s mobile, it all fits on the screen what else do you want?! /s
Not at all, coolness has nothing to do with it. Ease of development and tooling does.
&gt; Yes, it need to be considered. it shouldn't be difficult. Dangerous words.
&gt;Tbh bootstrap itself is has been going out of style rapidly. Citation needed. It's the most used framework out there. Bootstrap 4 just had it's second beta release. I swear you guys just get bored and spend more time learning the trendy new framework than actually working. Even Jquery is still used everywhere, it's going to be just like IE8 support, in that it will be another decade before we finally see Jquery going away.
idk i've been using bootstrap 4 lately &amp; it's exactly what i want out of a css framework
(inb4 bulma.css or css-in-js)
It's a trick to dereference a reference. For the complete answer you have to read the actual ECMAScript spec, MDN (and other) sites are not enough, or just read this blog post: "Why is (0,obj.prop)() not a method call?" http://2ality.com/2015/12/references.html
https://www.youtube.com/results?search_query=modern+javascript+tutorial
[You Don't Know Javascript](https://github.com/getify/You-Dont-Know-JS) (series)...excellent learning resource, however, there might be a few times where you have to Google some of the terminology. Purely concenctrates on JS, it's engine, gets into detail about general and specific concepts...etc. 
That's awesome! That definitely looks like you hit gold.
Such as? If you're not worried about supporting browsers like IE8, jQuery can either be replaced by vanilla JS, a framework, or much smaller libraries.
Some of these are really beautiful!
I disagree, with NPM it's pretty easy to edit the source, just fork the repo and point your `package.json` at your repo. It gets harder with some projects that have more esoteric build systems that require dependencies outside of their package.json, but that's going to be the same with any jquery plugins that are large enough (don't try to make custom mods to datatables!)
Why doesn't that happen with Skype? Because someone (in this case me, for Skype it's MS) is nice enough to always keep a node running. For me that'd be a Firebase backing instance so I don't have to do much.
Code cleaned up thanks for the feedback
This x100
That is a good point, I guess I rarely if ever end up forking something on npm because it makes it harder as time goes on to keep that maintained with the origin.
Yeah... It helps if you create a new branch off your fork and keep `master` the same as upstream, then it's easy to pull from upstream and merge master -&gt; your branch
you answered your own question
If that's the only use case then why would you have asked "what instead?" in your original post?
If you come up with the right contrived example you can make any browser look faster or slower than the others.
crone job
This, but ignore the async coverage. Also read Secrets of JS Ninja 2nd Ed. by John Resig et. al.. 
What do you find wrong with the async coverage? Still going through it, and haven't gotten to that part yet. 
You should use Canvas for that. Would be one or even two orders of magnitude faster. You typically don't have 32,400 divs on screen. This kind of benchmark isn't meaningful. Benchmarking browsers is really hard in general, because once you up the numbers far enough to create measurable differences, you created scenarios which aren't anything like the current web. As such, the results are completely bogus.
Ah, so calling the method without having `this` point to the object. Clever.
Hi /u/m3dyz4, For javascript help, please visit /r/LearnJavascript. Thank you!
props to you for ONLY posting this link, i see it didnt get much attention 2 years ago. that is dedication.
&gt; JavaScript is just as easy, if not easier, than jQuery now. Slow down just a second. I am not sure I can think of one example where vanilla JS is *easier* than jQuery. Also, you lost most jQuery developers the second you mentioned babel.
From comparing jQuery to vanilla js, I've seen several cases where vanilla has shorter syntax. I can't remember specifically, but I think it was using querySelectorAll or just querySelector? Not sure. Why? Do jQuery people prefer sacrificing performance so that jQuery handles browser support at runtime? I'd think using Babel for vanilla js that works everywhere would be something jQuery devs would like since they're definitely not into jQuery just because learning new things makes them uncomfortable.
These look very similar to what Google officially produced for their 'Live Cases' Maps-based phone cases. Check it out: https://store.google.com/us/product/places_live_case?hl=en-US Great job! Love how a lot of your's came out.
Inspiring stuff, really cool
Also ignore the [class coverage](https://www.reddit.com/r/javascript/comments/5m6tkz/should_i_use_es6_classes_or_not_js_beginner/dc1dw3y/). I personally recommend The [Rauschmayer books](http://exploringjs.com/) [MDN Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) /u/shhhpiderman /u/NilsRooijmans
Is this a static array of pre-generated outputs? Or is it generating requests on the fly? All the shots have land --seems like there should be a vast amount of results that are just water
Thanks, I'll check these out! 
all the ones in this list: https://www.macworld.com/article/3207526/browsers/its-official-safari-11-is-the-fastest-web-browser-for-the-mac.html
http://www.shaunutter.com/ "There are 20 different elements on each map, such as highways, arterial roads, and parks. Each of those elements is set to a random color, is randomly turned on or off, and the zoom level is set to a random number. The geographic location is randomly chosen from a list of 33 predetermined cities."
&gt; The problem is that the syntax you're using is Node-specific, and not valid according to the standard The syntax is valid and standard JS per https://tc39.github.io/ecma262/#prod-ModuleSpecifier The standard you are mentioning is the HTML standard, not the JS standard per https://html.spec.whatwg.org/multipage/webappapis.html#resolve-a-module-specifier
for the same reason you decided to make a comment of why not to use jQuery
Ah, thanks for clarifying. The divide between the standards is a bit confusing sometimes. :)
Thanks!
Personally I am very excited for this update. I find that Apollo uses a very similar data flow to redux, but the organization of cache/resolvers is easier to read and reason about than state/reducers/actions/action creators. Plus it takes slightly less boilerplate while maintaining redux-level flexibility, unlike many other redux alternatives. For those of us already using apollo for graphql, it's amazing to be able to unify state under one paradigm without having to juggle redux and apollo like I was doing before. 
I used to work in GIS software and this triggers me.
It's not THAT contrived. What if I was building a spreadsheet app? The interesting part isn't the example itself, it's that Safari is better at this than both Chrome and Firefox. I wish I knew why because it doesn't make sense to me why there would be such a huge difference. Where is it even coming from?
I definitely should have used canvas. But I didn't build this as a benchmark at first. I built it to solve an AdventOfCode puzzle and I thought to myself *"I know! I'll use React because I don't feel like figuring out how to do canvas well"* Honestly I'm kinda surprised it worked at all. This idea would be completely undoable a few years ago.
Looks like this has had the Hug of Death already
Needs a way to output the settings if you see one you like.
So if am correct this part: function changeTextContentOfArr (query, text) { getElems(query).forEach(elem =&gt; { elem.textContent(text); }); } changes the text of the element But what about this part? : function getElems (query) { return [...document.querySelectorAll(query)]; ---------------- I think this searches through all the elements to find the text
And after I have found the element with the text how to I change it?
Hi /u/AmNotHacking, For javascript help, please visit /r/LearnJavascript. Thank you!
"something went wrong" "this page didn't load google maps correctly" :(
Probably too much traffic from reddit
I refer to Programming Javascript Applications sometimes, but I have very few js books. 
They exceeded the daily request quota for the Google Maps API
"Oops! Something went wrong." Fucking beautiful stuff man.
Ofcourse, async/await is sugar for Promises so you can do all the same things. However there is still one potentially interesting tidbit in the article. In his last example it won't be immediately clear to most people that code after an `await` keyword runs in a different scope due to running async. In a promise version this is terribly obvious, as the code would be inside of a `.then()` callback function, which obviously introduces its own scope.
It's amazing, but I think it's too advanced for starters.
 You have exceeded your daily request quota for this API. To request more than 25,000 map loads per day, you must use an API key and enable billing: https://developers.google.com/maps/documentation/javascript/get-api-key
You are not sacrificing performance, in the rare case where that list bit of perf is even an issue. You gain a much more powerful framework, easier learning curve, powerful selectors etc etc. People forget there was a time before ES6, promises etc e.g. when Deferred was the preferred way. You are deluded if you think adding Babel to your toolchain and then coding in vanilla is easier than including JQ from cdn and write what you need with no other steps and get smaller, cleaner and more powerful code. There is literally no advantage.
Start with [W3Schools](https://www.w3schools.com/js/default.asp). It's outdated, but it's still a great source for learning, and fast learning at that. When you know what you're doing, learn the new ES6 features. For one month I think that's enough.
Agree with that, too. No clue why he prefers the more laborious prototype syntax. 
What do you even mean "powerful selectors"? Something easier and better than querySelector?
Kek
Same, they're taking a pretty refreshing approach to this.
Pangea?
You could package one version that includes the JSON inlined into your bundle for offline. Both versions test to see if the data exists, and if it doesn't, fetch it. Whether the JSON is inlined or not could be a flag you set in your build script.
Thanks a lot, this looks good. I'll try implementing webpack. Would you mind if I pm you with any follow up questions?
&gt; Alternatively, you could package one version that includes the JSON inlined into your bundle for offline. Both versions test to see if the data exists, and if it doesn't, fetch it. Whether the JSON is inlined or not could be a flag you set in your build script. Actually, I think I'll do this, since it sounds easier. Lol.
I'm kind of a moron, not an expert. Just barfed out the first thing that came to mind, but it may not be the ideal solution. Personally, I use roll-up, because I'm a snowflake, but roll-up doesn't have code-splitting. I don't know webpack very well. Also, personally, I wouldn't use code splitting. I'd have two different versions, and build a little script that inlines the data for the offline version.
Yep, it's super easy. I'm doing something like that myself with a goofy five line javascript run by node after roll-up gets done compiling my bullshit.
Pfft Im way worse, i still dont even really grok node.js. Npm install? Gruntfiles? What voodoo is this? Im coming from flash/as3 and this is my first project in js. Cheers mate. 
 /* Hide Karma */ .score.unvoted, .score.likes, .score.dislikes, .userk arma, .karma-breakdown, span.karma, .linkinfo{ display: none !important; } 
 
Where do I put snippets? All of this is confusing 
JSONP works locally, but that's only interesting if it's way too much data for inlining. JSONP is basically like dynamically including a script which calls a user-supplied global function with the data as argument. That's how you get around the same-origin restriction. In this kind of scenario, the name of the function would be predetermined. Anyhow, I'd just inline it. Even if it were 10 MB or something.
Function getElems return AN array of elements that fits specified CSS query (See document querySelector on mdn) Then we use that Function to get elements we want to edit, and using array data structure we iterare over all of them. Changing their textContent 
If you want it as an executable electron sounds like a perfect match? It's for instance what slack, discord and Vs code uses.
You can also do a separate build that bundles it. I've done this with shaders in some cases, with rollup plugin. It loads .frag and .very files compile time string and stores it in a variable. 
I’ve used up my free tier API calls while testing a simple app more than once, it vanishes in no time. 
I have no experience
No
 const problemExists = '', between = '', keyboardAndChair = ''; Seems to work for me.
Its a con. Con I tell ya !!
There is nothing stopping you from loading js asynchronously. 
How would i do that?
Defining multiple variables in one statement breaks a lot of companies and teams linting rules (Airbnb styleguide for instance), so it doesn’t bother me.
https://stackoverflow.com/questions/7718935/load-scripts-asynchronously See the `loadScript` function of the first answer. 
Time to use 6 space indenting
Just finished the latest episode of programming in JavaScript on my blog http://www.softwaresamurai.org/2017/12/23/360-degree-image-web-app/ and the Video on YouTube https://www.youtube.com/watch?v=IWCWsbPs3VU 
I was expecting something like this https://jsfiddle.net/ufxygmm1/
It's even uglier than 6 space indent -_-"
 let omg; let so; let aligned; const where; const is; const yourGod; const now; There you go. Now everything is aligned. On top of that, if you decide to add another variable to the bottom or the top of the list or move the last or first variable somewhere else your commit diff will only show a change on the new line and not on your existing line because you didn't have to replace the semicolon with a comma. You'll have cleaner commits where it's easier to see what's actually changed. For the very same reason I also add a comma to the last item in an array or an object. const yolo = { my: 'stuff', is: 3, }; const things = [ 'apples', 'beans', 'broccoli', ];
I think that L.Google plugin hasn't been updated for Leaflet &gt; 1.0. May want to try this one (listed on the official Leaflet docs) https://gitlab.com/IvanSanchez/Leaflet.GridLayer.GoogleMutant Also word of advice, be careful using Google Maps outside of the Google API, esp if this is for any commercial work. Just because a plugin exists doesn't mean it conforms to Google's licensing terms.
Run them on different ports.
Is there any difference from the following? var method = _utilsIsMomentRange2['default']; method(value);
Huh. This is actually the first time I’ve seen someone else do a proper tutorial on anything I’ve written. Bizarre and awesome. Thanks for making the video, it’s a great introduction!
Thank you for the reply. I had been thinking it were concerning L.Google but didn't understand how it worked, I'll keep looking into that. Playing with GoogleMutant now, thanks! I'm just looking to map some ancestor farmsteads in the UK, nothing to publish online or anything. Just prefer this map for Leaflet and the Pegman together.
The codepen demo appears not to work on chrome for Android for me.
It's only apple devices by default. Set 'appleDevicesOnly' to false
Hm tried adding a config object with that setting to the pen but nothing's changed. Will test it on my computer later.
My guess is that Safari on is highly optimized for Mac hardware. Chrome probably lacks similar optimization for cross platform support.
*val* would have been nice, but it would have broken too much existing code. *const* was already a reserved word. Edit: as a rule, you should declare your constants and variables near where each one as used instead of all at once. 
Same here 🤷
Doesn't exactly qualify as '*this week*'. 100% **javascript** and i would hope a similar percentage **cool** : [http://jr.enki.ws](http://jr.enki.ws) Web-based automatic rigging, animation and live motion capture tool. (there's videos and test content on the site) Also, free. (but .. for now google chrome only) 
Except if you use var, that should go at the top of the function because hoisting
True, never use *var*
Maybe Chrome on Android doesn't fire a wheel event?
I don't mean to be rude but what? You used Angular for this? Why? And A5 has to be pre-installed locally? As a learning project it's very cool and nicely done btw. But for anything else, these seem like pretty crazy dev decisions.
Basically, unless you have to because you customers use ancient browsers...
nice post, what kind of scenarios would i need proxies apart from accessing properties not defined on an object ?
It could be seen as an anti-pattern but it makes it easy to add side effects to getting or setting a property. For example, you could log every property access. Another thought is creating a KVO computed property system like the one in Ember.js pretty easily through proxies. There are also lots of interesting things you could build into libraries to make debugging easier through proxies that are only active in development. Unfortunately, their performance makes it hard to commit to them.
It's pretty good for implementing observables. Your custom handler for get can fire off an event to notify all the observers when a property changed. 
No difference at all. People in the other comments say the original code was a clever way to call a method without the parent object being the _this_ context, but what you've just typed accomplishes the same thing
It is a slightly different approach but a big feature of [Service Workers is enabling offline support](https://developers.google.com/web/fundamentals/codelabs/offline/) for web applications. Right now Service Workers are only in Chrome and Firefox but they'll be in the next version of [Safari and Edge](https://caniuse.com/#feat=serviceworkers).
I solved it :)
This is probably a better link - https://arc.codes/
Copy it and paste it in your browser's console. 
KVO?
One scenario where I used proxies is in an application where the translations were separated in it's own file where they were stored as an object kind of like this: const translations = { "en" : { buy: 'Buy', sell: 'Sell', ... }, "fr" : { buy: 'FrenchWorForBuy', sell: 'FrenchWordForSell' } } This object was imported in each component that used translations. Like this: import translations[LANG_CODE] from translations.js; Then I implemented a proxy that first checks if the key is available and if it's not outputs an error that explains the translation is not implemented yet.
Thanks!
Key-Value observer
I’ve been using Proxy objects to create localStorage proxies so that when an object’s properties change, the object is automatically serialized to storage. Makes it so you don’t have to remember to update values in localStorage.
I have no idea what this language is, but I'm pretty sure that this error means you can't use TABLEAU variable inside your new Runnable() call, unless you SOMEHOW make it final.
 const how, can, you, use, these, they, are, _undefined and, cant, be, reassigned;
You want /r/java
That's what i tried to do , i inted everything with final but didn't work in the end :/
I will try thanks for the suggestion!
Option A: One Bundle Simplest solution: create a module that returns a promise. The promise resolves into JSON. The function tries to fetch the JSON, if it doesn't succeed, it falls back to whatever hard-coded or cached JSON. Option B: Two Bundles At work, we're currently using multiple entry points to deliver to different environments. https://webpack.js.org/concepts/entry-points/ 
&gt; Such as it is, my app arbitrarily stops running after a certain amount of time. Why does that happen? --- If you just want the process to live forever, and it's being killed by you leaving the shell: Use [nohup (nohangup)](https://en.wikipedia.org/wiki/Nohup) `nohup serve -s build &amp;` Or, you could use [disown](https://en.wikipedia.org/wiki/Disown_\(Unix\)), `serve -s build &amp; disown` Either would keep the process running indefinitely if the parent shell closes.
In addition to the other benefits listed, this formalizes and streamlines the writing of a [monkey patch](https://www.google.ca/amp/s/davidwalsh.name/monkey-patching/amp).
This. To expand, in Ember at least, you can create a computed property that is only evaluated the first time it is used, and then re-computed only when dependent properties change. To know when to bust this cache and trigger changes, you need setting a property to have additional logic to tell the system something happened. Ember currently does this with a custom getter/setter function but could implement it with a proxy instead. However, does to the performance issues, I don’t think they will — there is a decorator library that can do something similar without the major performance cost. 
Are these better than Object.defineProperty() with additional code in the getters/setters? That's what I've been using for years now as a way to introduce side effects. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty Are proxies faster maybe? Can they make a property sealed or innumerable or read/write only? function Archiver() { var temperature = null; var archive = []; Object.defineProperty(this, 'temperature', { get: function() { console.log('get!'); return temperature; }, set: function(value) { temperature = value; archive.push({ val: temperature }); } }); this.getArchive = function() { return archive; }; } var arc = new Archiver(); arc.temperature; // 'get!' arc.temperature = 11; arc.temperature = 13; arc.getArchive(); // [{ val: 11 }, { val: 13 }] 
This is a first-class feature in C#. It actually ends up being rather problematic as naive programmers tend to put lots of logic in the way. This makes programs unexpectedly slow in weird ways.
I think you mean for set
Really? Do you have an example? I haven't used them yet.
From my understanding, there's unfortunately one minor downside for that use case. In order for it to work, you must access the Proxy object, not the original target object. There are ways of working around this, particularly in how you structure your code. But it would have been nice if you could have just applied the Proxy functionality to an existing object and still work with that object directly. This would be nice for frontend libraries like Vue which observe data objects.
I've gone to use them a couple of times before and realised there was a better way. Anything that makes your code confusing and obscured is generally a bad idea. I'm sure there are some great use cases but I expect most would be better served by a more explicit pattern.
You know what, you may be right. I totally forgot I did some FCC before...
This old video about MongoDB makes me laugh - NSFW - https://youtu.be/b2F-DItXtZs
I'd go with that in cases where you know the property name (e.g. if you're making a cube object and want to make its volume property be based on its size property). You can't use that at all for unknown properties, though. Having trouble coming up with a good example of that off the top of my head, but I know it's something I've wished I could do in the past. It's also handy if you just want some blanket code to cover all the properties, e.g. to log every time the object's accessed or something like that.
Reddit usually has stuff first.
What issue does bootstrap still solve? The widgets are useless without jquery and the grid system is no longer needed with css grid layout. No citations, I'll remind you in 3 years that I predicted bootstrap to move into irrelevance. RemindMe! 3 years "bootstrap is dead by now" 
You're welcome!
IIRC this is the basis for Vue 3.0 and is already being implemented 
I guess they gonna take a big performance hit...I tried duck punching vs proxies and latter are 10 folds slower
[JavaScript Weekly](http://javascriptweekly.com) have an RSS feed you can subscribe to get a weekly digest of blogs and release news. Other than that I mostly get my news from Hacker News and reddit.
Really hope i don't start learning another framework in 2018. It would be great to learn something else than a framework in 2018
Hi all, I hope this would be useful for other javascripters as well as I've found it useful for me - I wasn't satisfied by the standard github's trends algorithm which was always showing nothing but vuejs/reactjs at the top, so I decided to come up with something on my own. This tool is still using github trends to avoid missing something extremely trending, but also scans fresh repositories which became super popular in a short period of time. I hope that this will help everybody to catch trends in time and pick up interesting ideas!
That's it, yep, awesome and thank you. Having the ability to do that with every property is great.
Reimplementing scroll is never a good idea :(
As a follow up, is it possible to setup the P2P connection without a signalling server? There seems to be mixed answers regarding this online. Thanks!
Needs more aimer and Chelly :x /references 
Check out PeerJS: http://peerjs.com They also have a free broker server for up to 50 concurrent connections in case you need it for dev.
Yes, kind of, as you can manually input the parameters if known to the requestee, but then you are technically acting as a server. Client must somehow be able to get the information who to connect to in order to join the network, right? So they need to know some fixed point from where to start. Think torrent trackers. Edit: If you can establish a conventional TCP connection between the two nodes without a mediator, you are actually already there. Like a HTTP connection can be upgraded to WebSocket, WebRTC is just a protocol layer which can be implemented over UDP/TCP. 
IDK, I've recently started to drift away from having all my configuration stuff in `package.json` and have started to prefer dotfiles. I think it keeps things better organized and if I have to look at something specific, it's just easier (for me) to go to a `.babelrc` or `.prettierrc` file rather than having to look for the specific field in a big `package.json` file. Edit: My mistake, it seems that the author mentioned having a config folder and putting the `.babelrc` there and then referencing it in the `package.json` which I actually would agree in being a pretty good way to organize it.
Duck punching what exactly? 
Be aware that proxies are yet to be polyfilled. So it's not universal across older browser versions.
Just this subreddit or more?
It could be useful in a library or a transpiled language in order to implement the concept of public and private 
Maybe the programming reddit too. Occasionally the WDRL gets js stuff not on reddit, but it's email, not rss: https://wdrl.info/
Css grid layout does not work on all browsers. 
I can recommend the JS-related videos in the [funfunfunction](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q) youtube channel. Most videos are explaining underlying concepts and the _why_ behind their usages and their patterns.
Thanks! Didn’t know about WDLR. (FYI, it does have [an RSS feed](https://wdrl.info/feed))
I'm really enjoying Traversy Media's Udemy course [Modern Javascript from the beggining](https://www.udemy.com/modern-javascript-from-the-beginning).I like that it starts out with es6 instead of introducing it later and that the entire course is vanilla javascript. It seems like it's exactly what you're looking for . (The promo code PCWORLDOCT2017 can be used to get any Udemy course for $10 until the end of January.) 
Lol, yeah, every framework is going to be irrelevant in 3 years. Are you new to tech or something? I don't disagree. But right NOW it's the most used framework. What you did here is called "moving the goal post".
I recommend reading http://exploringjs.com. Touches almost everything is important in the language. It has a free to read online version.
I agree with that, but the purpose of this was to add the native-feeling elastic scrolling to scrollable elements, not change the feel of scrolling. That's why it's only for Apple devices since they use the elastic effect. Because on macOS currently, the abrupt stop feels quite bad. I tried to get it close to the native implementation.
 class Original { constructor () { return new Proxy(this, handler); } }
I've used proxies at work to get and set in localstorage so to the user you get and set like normal properties but really they are being saved and retrieved from localstorage. I'm sure you can apply that to other types of storage and even ajax/promises.
i don't think proxies can be effectively polyfilled. they provide metaprogramming functionality you can't replicate.
Yeah they can be easily as it's a class that gets invoked, just depends on the traps that are supported. https://github.com/GoogleChrome/proxy-polyfill/blob/master/README.md
I appreciate the reference , but it doesn’t really work with TypeScript. I think if I was using Babel I would have considerably less issues.
That's one of the ways you can work around it. You could also pass an object literal to some code, and have that code return a Proxy, targeting that literal as a reference, to interact with. However, as your code demonstrates, you have to do more work than simply providing an object literal to some code. You have to at least translate an original object into a Proxy, and require the user to use that Proxy instead of the original, or require them to provide their own Proxy. This is the 'minor downside'. It would be nice if this extra work were unnecessary, with direct access to a target object being observed by a Proxy. Unfortunately, this is not the case.
Are you already obfuscating and minifying?
It’s actually using redux under the hood. That’s why you can pass the Apollo provider your own store to work with.
Any time you want to integrate payments with a website, the answer is probably Stripe. 
I will be messaging you on [**2020-12-23 23:39:56 UTC**](http://www.wolframalpha.com/input/?i=2020-12-23 23:39:56 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/7lfr9u/the_future_of_jquery_ui_and_jquery_mobile/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/7lfr9u/the_future_of_jquery_ui_and_jquery_mobile/]%0A%0ARemindMe! 3 years ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! droh3gl) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Braintree 
Why are you doing anything in the client without verification on the server. Your problem is unfixable
If someone can modify your JS (which anyone can), they can remove any protections you might have to prevent someone from modifying your JS. There's no way around that. Client code can never be trusted.
You should also do some research into PCI compliance via telecom channels. It's different than it is with websites.
Same idea in Lua: metatables are a huge part of the language, and poorly implemented metatables can be horrible. Though any reasonably complex Lua program requires such heavy use of metatables that you essentially have to learn how to use them. 
I can see this. Lua has metamethods, which are functionally equivalent (albeit not identical) to JS traps. The only times I've used them and been unable to figure out a better (more readable/efficient/logical) method was when using them to: A) Create a Read Only table (really really tricky in Lua, actually, tons of fringe cases, generally not worth it). B) Implementing inheritance (Lua has no built in inheritance like classes or prototypes, though prototypes can be approximated with minimal code). Though, the string related metamethods are generally hard to misuse and/or abuse. 
Are the eyes done with canvas? 
An awesome use case I came up with was an orm that did this: let name = user.name let profile = await user.profile If the key on the object was a relationship and wasn't loaded, it would instead return a promise that queried the relation. I know there's other ways to do it but this was a cool reason to try proxies :)
This was the original Mythbuster - written by a few top engineers, including someone involved with JSPerf, I believe https://docs.google.com/presentation/d/1VjWKk2E3216D0hFCzi7YFmzV9HT6amILkYujx_9Wusg/present#slide=id.i0 Note how they provide links to tests _proving their assertions_ The guy who wrote this does no such thing. It's just his opinions based on god knows what - ironically, at least some of it are actually myths, like the try/catch thing (I have seen a video by V8 engineers saying that that was the case at some stage, but is no longer so)
Not anymore. Iirc they're removing that dependency
&gt; _undefined this guy javascripts
Forgot the comma though
No, not possible.
That was version 1.0, no longer true in version 2.0.
That one time, I wrote a generic bridge between Flash and JavaScript. Flash had ActionScript 3, which was more or less Ecmascript 4, and came with Proxies and WeakMaps (not the watered down weakmaps of ES6 either, the good stuff, with ways to enumerate keys and everything.) Combining both made it super easy to build facades in flash for Javascript objects, DOM or otherwise, and have them be nicely memory managed through a weakmap without needing to count references. In contrast, the Javascript side that encapsulated Flash objects was full of terrible terrible hacks, required some fancy preallocated lazy getters to somewhat mimic proxies, and likely leaked memory like crazy, unless I accidentally happened to get all the reference counting stuff exactly right. the flash&lt;-&gt;js communication mechanism was synchronous, which allowed proxied accesses to be fully resolved synchronously. that typically wouldn't be the case in most other scenarios, so I'm not sure how well this use case could get generalized, but it was fantastic to have Proxies around for this. 
You can't trust client side verification, ever. If game integrity is important, you need to run the game server-side, while your client is merely a shell that relays the game state and displays it. 
 ##javascript on freenode
For what it’s worth, this UX behaviour is patented by Apple. That’s why Android has the stiff stop at the end of scrolling. ([Patent declared valid](https://www.macworld.com/article/2042023/apples-crucial-overscroll-bounce-patent-claim-is-valid-us-patent-office-says.html) ) 
[Here is one killer use case](https://github.com/kube/monolite) for Typescript.
Todd's been writing some great posts lately on Redux and NgRX. Very well written material! If anyone's interested, I also recommend a similar post called [Build Yourself a Redux](https://zapier.com/engineering/how-to-build-redux/). It not only covers the core Redux store, but middleware and the React-Redux `connect` function as well. Beyond that, I recently put up a post with [my list of suggested resources for learning Redux](https://github.com/markerikson/react-redux-links), and my [React/Redux links list](http://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-redux/) points to many additional tutorials and articles on Redux.
webrtc is woefully incomplete. i believe the reason is it requires STUN servers to figure out network traversal due to firewalla and NAT. i tried to get the basic packages working and they simply didn't seem to work locally
Well, you're just proving his point with this example. For someone who is not comfortable with this part of a codebase it would be super puzzling to find this line. I also don't think it adds much value to use a pattern like this one other than being slightly cleaner looking.
/r/webdev /r/Frontend 
Here's a sneak peek of /r/webdev using the [top posts](https://np.reddit.com/r/webdev/top/?sort=top&amp;t=year) of the year! \#1: [Have you ever felt this??](https://i.redd.it/apcs1kvrpy4z.jpg) | [283 comments](https://np.reddit.com/r/webdev/comments/6iklbl/have_you_ever_felt_this/) \#2: [The FCC is killing Net Neutrality - Help spread the word in your own websites](https://np.reddit.com/r/webdev/comments/7emfo5/the_fcc_is_killing_net_neutrality_help_spread_the/) \#3: [An animated loading icon I made for my side project mydevportfol.io. Supposed to convey that the app is coding the user a website. Happy with how it turned out, feedback appreciated though.](https://i.redd.it/qftx8zcngnjz.gif) | [200 comments](https://np.reddit.com/r/webdev/comments/6xsl3l/an_animated_loading_icon_i_made_for_my_side/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Ruby on Rails models very much look like the code above, where your class' field names directly map into table column names in database. In my experience this kind of stuff is ok when your code base is small, but it's very hard to work with when new people come onboard or you want to refactor stuff.
Can you link to your JavaScript, and the 3rd party plugin? I mean everyone's right in saying that you can't trust the client, you can't verify the code you run, and so on... ...but that's theory, and it's like saying that anti-piracy software can't work perfectly (which it can't), so everyone is right but if you set your sights lower then you can achieve some of what I believe you want. You have a specific adversary who publishes code so you can monitor updates and adapt your code in trivial ways to break theirs. If they're publishing for users then they will want a consistent name and you can find it just as easily. There are obvious things like making your JavaScript less modifiable by wrapping your entire JavaScript in an IIFE. Ensure that you don't access any globals which could be overridden. E.g. rather than accessing window.XMLHttpRequest you should have your own reference to it, and you should try to assess whether it's their shim or not. You could have the server API available at two endpoints (same API just different prefixes or something like that), and have your clientside code switch at a certain UTC time, and then delete the old endpoint. You could figure out if their 3rd-party changes are things you can identify, and then POST any user information to your server. You could then penalize those users. There are many strategies to make it harder, even though everyone says that it can't work permanently that's not really the goal is it? It's an arms race, and you just to be ahead for a brief period of time.
thats replacing everything not just the m
FrenchWorForBuy: Acheter FrenchWordForSell: Vendre :)
Nice.
I was in the same position and I end up using [simple-peer](https://github.com/feross/simple-peer). You still need a signaling server but it is really simple to do with socket.io.
I've yet to have a use-case for Redux where it wasn't overkill compared to, say, MobX. Granted I haven't worked on *huge* projects, but relatively small ones, so maybe that is why. 
It'd be a known feature of the framework, and it's actually a pretty common feature. Especially if on the model the key is a relationship.
Without a signaling server, how do two peers know that the other wants to connect? If the peers do have this information, than, by definition, you have a 'signaling server'
Nope, no goalposts were moved. All I said is that it is going out of style, not that it is not used anymore atm. But the trend is clearly there, css in js, web components/framework components, css grid, flexbox, ...
Author here - Uppy in a nutshell: no jQuery, JS-generated UI, easy uploads to S3 or the app, progress bar, resumable file uploads via tus.io, aware of encoding backends, react/redux support, form encapsulation, modular architecture, import from webcam/instagram/google drive support.
It's a really clever lib, I recently started using it and I must say functional is the way to go when it comes to animation. I particularly like the fact it does not try to enforce the actual element movement logic, which is exactly what I needed - just calculate numbers for me, I'll do the rest myself. 
Post the solution for posterity
Is this maybe what you are looking for? https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline.html
I just can say JS MythBusters is a high quality resource to learn some quick tips to make micro optimizations to your javascript code. Top.
I forgot npm publish 😱
variables can be reassigned and in your example would point to an anonymous function, function declarations are hoisted and result in a named function.
Yes!
Solution - First of all clearing cache plays role in this. Sometime , try clearing your cache and things might work. Right now, this is my middleware.json "files": { "loopback#static": [ { "name": "publicPath", "paths": ["/"], "params": "$!../client" }, { "name": "reactRouter", "paths": ["*"], "params": "$!../client/index.html", "optional":true } ] }, Its in documentation that root.js is not needed. So, I just changed its name to root_something.js . After this If i visit localhost:3000/ . . I see whole react website If i visit localhost:3000/explorer - I see loopback explorer If i go localhost:3000/api/projects ( I see data coming from explorer) 
The funny thing is... ```javascript function kek() { } // kek is function kek = 2; // kek is 2 ```
You've just opened Pandora's box.
Dear god
Hoisting. When a JS script is run, the interpreter looks through the file for variable and function declarations, and hoists them up to the top of the queue, i.e. it runs them first. To use your example `function myFunc() {}`: Wherever this function declaration appears in the code, it will be loaded into memory _first_. This means that you can call `myFunc` _before_ its declaration appears in code. If you do `var myFunc = function() {}` then the only thing that gets hoisted is `var myFunc;`. The variable is _declared_, but not _assigned_. Variable assignments are not hoisted, only declarations are. So if you called `myFunc` before the `var myFunc = `... line, you'd get an error, `myFunc is not a function` or something. The solution, of course, is to declare and assign your functions before you use them. If you assign `var myFunc = function() {}` before you use it, then you will not notice the difference between the two styles, and your code will work. Which is nice. FWIW, I prefer the `function myFunc() {}` style, simply because Atom autocompletes it when you start typing `fun`. 
The main difference is scoping. You can find more details by looking up the difference between function *declarations* and function *expressions*. The function *declaration* (your second example) will be hoisted to the top of the function where it is declared. In other words, this is perfectly fine and you'll sometimes see people foo(); // "Hello" function foo() { console.log("Hello"); } Your first example is a function *expression* which is being assign to a variable. The variable's declaration is also hoisted but not its value. bar === undefined; // true, bar is declared but undefined here bar(); // TypeError: bar is not a function var bar = function foo() { console.log("Hello"); } bar(); // "Hello" BTW const and let behave in a different manner. They are subject to so-called [Temporal Dead Zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_Dead_Zone_and_errors_with_let) (TDZ) which means their declarations are not hoisted. bar(); // ReferenceError: can't access lexical declaration `bar' before initialization let bar = function foo() { console.log("Hello"); }
What is dynamic typing?
Hilarious. Wasn’t my idea to use NoSQL on this project. :-D
Can we see the code?
I haven't done the JavaScript yet but this is my Html and CSS code for the navigation bar. https://pastebin.com/PYF9CrWJ
it's when you run out of toilet paper
IMO Redux in big projects can be real burden (too much accidental complexity, doing complex projects become ever more complex with Redux because of these entangled Redux-related code) 
You don’t need JavaScript for that. You just need to point your href to the right file. “#” would be the same page you are on now. Maybe you have an “index.html”, “about.html” Read up on anchor tags and paths for them.
IMO redux isn’t complex in large projects, it’s the state itself that is complex. Redux is simple.
People have mentioned hoisting. Another difference is that assigning a function like in the first example has it as an anonymous function, whereas in the second example it is a named function. Named functions can potentially greatly increase stack retracability as compared to unnamed functions.
There is another difference apart from hoising. function doSomething will create *named* function (try console.log(doSomethng)) and var declaration will create anonymous function without the name.
&gt; Copy this into your url No thanks.
This is awesome thanks!
Thanks for the help. I've done it. Never know it was that simple :)
The one with var needs to be declared before you use it.
Fetch, it is or will be the built in standard
Worth noting that you can still name your functions that you store in variables.
Simple for beginners to understand about api calls and those stuffs rather than trying to-do list. Appreciate the work ! 
I prefer using `const` for my functions so the compiler will choke on any accidental collisions.
Clearly explained. Thanks ! 
TIL,ty!
Hi /u/sanchitraina, For javascript help, please visit /r/LearnJavascript. Thank you!
Thank you for pointing me in the right direction, or should I say subreddit. 😊
Hi /u/Kingzzon, For javascript help, please visit /r/LearnJavascript. Thank you!
You can have two functions with the same name in the same scope? That's disgusting.
Just search for JavaScript and all it. 
This needs to be a jeopardy question
I agree that Redux is simple. That's why I wrote "Redux-related code". Despite the Redux as a library is simple, code written to handle Redux actions, reducers etc. (not to mention 3rd party additions like thunks or sagas) is often too complicated and too verbose. *99 lines of code without sanity checks https://twitter.com/dan_abramov/status/646299844487872512 
god bless linting.
People have already answered your question, so I'm just going to recommend You Don't Know JS if you want to read about this and JavaScript the Weird Parts if you prefer a video course.
Yeah its a little gross but you could also restate it like: "Javascript lets you rewrite/replace any function in any scope and makes it easily to isolate your functions for testing"
One is a function declaration, the other is a function expression
I looked into Stripes text payment system, and I don't think it is exactly what we're looking for. Users text our Twilio # and receive a list of items they can purchase, we're missing the final payment section of the app :x. I'm totally up for having a online cart as well since it's another platform we'd be able to make sales from though but this is mainly a texting app.
Great stuff, seems to be the direction we'd like to head after getting a v1 out.
Few months back I’d written a blog on this and related concepts. Check it out. [Named functions in JavaScript ](http://tarunbatra.com/blog/javascript/why-you-should-use-named-functions-in-javascript/) 
It's also good practise to name functions, it helps in call stacks and errors when debugging.
Something like this won't work for you? https://blog.sendsonar.com/2015/06/24/sonar-stripe-for-an-amazing-sms-based-customer-experience/
+ https://nodeweekly.com/
Yea, linters and TS' compiler complain about redeclarations. It's not really an issue in practice.
Thanks for compiling these. Finally have working knowledge of ngrx but would like to really know what it's doing underneath.
I use https://stackshare.io/news
It makes sense when you stop thinking of functions as functions and start thinking about them as what they are - objects with one defined method. Because an object is a variable and variables can be reassigned.
Both cases have the same weakness - state is a singleton. You aren't able to make more than more `state` object in your application. The better approach would be making some kind of factory e.g. ``` state = createState() ``` (this doesn't have to be named `createState`. The point is to just allow for creating multiple independent `state` objects instead of forcing singleton. 
Its sounds like hell to get setup properly. Also I don't really know what a STUN server does so I'm afraid that I'll set myself up for hacks.
yeah, I googled it a few times, and whatever it is, it seems to be mostly pixie dust. the tldr: it helps your traverse NATs which obscure IPs and such. But man, it's bad memories. I know it can work, but it's clearly not simple enough that there's useful non-commercial tied offerings. When you look into it, you'll see the good packages are all tied to some commercial offering, because it requires at a minimum a 3rd server to coordinate.
Besides I wrote before (about singleton vs. creating state dynamically) I like first "syntax" more, it's less opinionated. Second "syntax" disallow `$` to be used in state e.g. ``` // I just want to have property with dollar sign state.$foo = 123; ``` First "syntax" would allow for creating properties named `$foo` or `$bar`. So more freedom to the user. Besides - if you want to put some metadata in objects I would think about using Symbol keys (not string ones), e.g. ``` const HISTORY = Symbol(); console.log(state[HISTORY]); ``` instead of `__history` https://www.keithcirkel.co.uk/metaprogramming-in-es6-symbols/ Another option would be using e.g. WeakMaps. 
I am still kind of new as a webdeveloper, but I would solve this with php and a database. It's not hard to get into mysql to make such a basic function, so I would recommend looking into it.
Yup, you are in the clear unless you need to support IE: https://caniuse.com/#feat=fetch
&gt; The solution, of course, is to declare and assign your functions before you use them. Although this doesn't work if your functions are mutually recursive, because they can't both be assigned first. Two hoisted functions does work, however.
So how does it work? The function - being a declaration is hoisted and put into memory. The purpose of the function is to declare a global variable. Is this global variable then then assigned or just initiated? Or what?
Great explanation. Thank you.
I'd use a database and php to create a form to add cars. It'll probably take a bit of reworking the entire thing, and input sanitization
Does hoisting vars have any benefit? Why does JS operate this way?
I'm concerned about how you are currently doing authentication on your password protected page without any backend technology. If you are relying on frontend JS to check the password, you should know that is not secure in the slightest.
Polyfill!
I would prefer the former. That way I can import `listen` or `history` without needing to import `state`. Also, just a heads up, it's a common pattern to treat properties whose name starts with underscore as private properties, so it would feel super weird to me to use, for example, `state.__history`.
I've looked at this, the real usefulness comes from finding some generic css that makes its page not suck when printed.
While we're on the topic of supporting older browsers, it's important to note that axios won't work with IE either since it's promise-based, so you need a promise polyfill if you are going to support IE no matter what your choice is. 
That was a great explanation! Thank You very much!
You can't really do that without some kind of back end for your website. Be really careful with the password bit as well. You could do it with PHP but tbh for a small website stick with a off the shelf solution. For your your usage you will be able to use the free tier as well! ᕕ( ᐛ )ᕗ Take a look at, prismic.io or https://firebase.google.com or https://www.mongodb.com/cloud/stitch That way you will ensure it is reliable and you can focus on making the website great.
How do they become different between using const (instead of var) and function declaration? 
MODS DELETE THIS.
For completeness sake: since ES2015 “named functions” expanded beyond their traditional limitations with the formalization of .name. In current JS VMs patterns like ‘const fn = function () {}’ *will* create a named function that will appear in stack traces as ‘fn’.
Yes I know I am planning on using something more secure with php, i have a placeholder for now with js
I fucking LOVE to buttfuck!
You can redefine the same thing as many times as you want with `var` and `function` keywords whereas invoking `const` against the same string will throw runtime errors if your linter doesn't catch it first.
Updated two of my libraries * [rfc-open-path](https://github.com/fcostarodrigo/rfc-open-path) * [rfc-walk](https://github.com/fcostarodrigo/rfc-walk) I added TypeScript declaration files, TravisCI, code coverage, integration tests, commit hooks, and badges.
Can someone explain to me the code for unsubscribing? ```subscribe(fn) { this.subscribers = [...this.subscribers, fn]; fn(this.value); return () =&gt; { this.subscribers = this.subscribers.filter(sub =&gt; sub !== fn); };``` The way I'm reading its: 1. Addadding the fn to the array of subscriptions. Got it. 2. Calling the function with the current state. Got it. 3. And then it seems its setting the array of subscribers to be equal to the array without the function. I get how that unsubscribes it but doesn't that essentially get called every time a subscription is made?
Why not use fat arrow functions instead? Am I missing something?
Unfortunately, not many websites implement a print stylesheet. We use PhantomJS to convert html invoice into pdf invoice for our clients.
Is there any reason you'd use PhantomJS instead of headless Chrome these days?
The "Hint" provided is just this: Select all of the &lt;input&gt; and &lt;select&gt; elements. For each one, we want to give it an id attribute. Assigning THIS (whichever one we're working on) an id that's the same as THIS one's name attribute should work just fine!
That code returns a new function that once called unsubscribes. It doesn't run when subscribe does.
incorrect - axios ships with its own promise polyfill: https://github.com/axios/axios/blob/d7f021b8d4cc50bfa0653011bc02452d234d1255/package.json#L36
I used PhantomJS because I had previous experience working with the PhantomJS API. I explored Google Chrome Headless and it didn't support custom header and footer until now (https://github.com/GoogleChrome/puppeteer/issues/373 - 5 days ago).
I think you got the wrong subreddit man. But it's nice to know.
No, correct. es6-promise is a dev dependency. it's not included in the shipped code for axios, check the code yourself or any of the issues on the tracker. Including the polyfill in axios itself would be unnecessary bloat for the majority of people using it, so it's up to you to include it. As the Readme says "axios depends on a native ES6 Promise implementation to be supported. If your environment doesn't support ES6 Promises, you can polyfill."
Try $('input select').each (function (){$(this).attr ('id', $(this).attr('name'));}); Good luck, hope you understad whats going on here...
Have you attempted anything yet? This feels like a homework problem that you're trying to get a quick answer for.
Also `const` is block scoped and is not hoisted. So you can define two different functions under the same name inside an if-else statement for example. 
Interesting. Actually, I have no idea what I'm looking at.
Attractiveness is more important that functionality ... wait what lol
Oh right, good point.
Do you store the historical prices yourself or do you get them from the API?
It's more complicated than that... Their declarations _are_ hoisted, but are set up such that accessing them before the `let`, `const` or `class` is reached throws a `ReferenceError`. This is mostly irrelevant for the JS programmer but can bite you if you try to do a shadowing declaration; e.g. `const foo = { bar: 'baz' }; if(foo.bar) { const foo = foo.bar }` will throw. This is a common pattern in Swift, but Swift has a more concise syntax for this anyway.
Whatever you do don't go live with the front-end only version. The previous poster isn't joking when he says it's insecure - it's like "could be cracked wide open by a bored thirteen year-old" insecure.
As it looks like you are just getting started you might consider working your way through [the odin project](https://www.theodinproject.com/). 
Babel 7 also just started taking advantage of this to be able to lazily-initialize transpiled async functions and generators, since they require calling helpers. Instead of written as a var, they're now written as a hoisted function that, when first called, reassigns itself with the transpiled function then forwards its arguments. Further calls just directly call the transpiled function.
I too would like to know if there is any benefit to either approach. 
The code is there to read. Feel free to check it. Nothing malicious :) 
If your dad is serious about his dealership's online presence you really should be using Reynolds and Reynolds instead of creating your own website. 
You should read this: http://javascript.info/function-expressions-arrows
Code organization and clarity. You can have a nice, clean module with imports and exports clearly defined. Functions once declared, can be used anywhere, so you can write modules that contain separate, discrete functions and not worry about the order in which they appear in the file. Function declarations written at the "leftmost indent", e.g. not scoped within other functions, are easy to keep separate and pure (or pure-er at least). You don't have to worry about scope if each function doesn't know about the others. I really really don't understand the hate against hoisting. Nor do I understand the need to ensure you don't redeclare functions. With a little bit of forethought, clean code doesn't suffer from these problems. 
yeah, arrow functions works too, but someone who do not prefers to use arrow function in component this should help.
&gt; ah.. im not sure how i didn't see how that worked earlier. Totally makes perfect sense. So calling subscribe both initializes the subscription and gets you a handle to unsubscribe 
I’d rather use a language construct than a plugin for a transpiler
[XMLHttpRequest](https://developer.mozilla.org/fr/docs/Web/API/XMLHttpRequest) is still working fine, but I agree with /u/nullified- Fetch is the new or soon to be standard.
TIL Tinder has a web app, man I am so out of the game these days.
I literally saw it mentioned in my email and thought hello there. 😂 
Sure that a js snippet is easier to use than [this](https://www.youtube.com/watch?v=snDeLy8cu24)
Why do we write plugin to help people write bad code. This right here is why we have soo many shit developers out there...
Asking an entire team to change a tool just because “it works on your machine” is perhaps the silliest thing you could offer as a solution. Just use git to see which commit introduced the change and revert it. You can probably automate this using git bisect.
Will this bind every method? How are you determining whether or not a method should be bound? You may not be aware but binding a function actually returns a brand new function and if you have a class with many methods it's going to be slow, especially if that class is used many times. Out of curiosity why do you dislike arrow functions? They're clean, concise, and provide a way to solve problems like this without adding tons of lines to your codebase...
&gt; The obvious solution would be for everyone to switch to yarn and use my lock file No, the obvious solution would to not be That Guy and to work within your team’s conventions. 
&gt;I really really don't understand the hate against hoisting. Nor do I understand the need to ensure you don't redeclare functions. With a little bit of forethought, clean code doesn't suffer from these problems. Totally agree. It always seemed to me that some aspects of linting are overkill and useful only for the messiest and most disorganized of programmers. Enforcing semicolon use is another example of something I could really live without. ASI is actually pretty awesome. 
On your local, using the latest npm, run “npm shrinkwrap” This will build a shrinkwrap file based on your node modules folder. It’s the same contents as the package lock. Then your colleagues should be able to diff their lock files against yours and see what is different 
Just FYI, your current webpage isn't "less secure." It just isn't secure at all. You can easily see everything. There is zero security.
What you're talking about is a CMS (Content Management System). Generally, it's an interface over a server-side database. For example, if you were using Firebase as your database, then you could use https://flamelink.io/ to build a CMS. You are roll your own CMS, but there's a lot of security issues and other pitfalls. Honestly, I would highly suggest just using a preexisting solution. &gt; have a page that is password protected but I am not sure of how to edit files in the websites directory with javascript What you need to do is have the javascript invoke something on the server side, like a PHP script or node script.
To answer the question of why: It's because JS code goes through multiple compilation steps before it runs. "Hoisting" is actually just an illusion. The compiler processes a file's Left-hand References (i.e. the left side of an equals sign) earlier than the Right-hand references. Functions get processed with the Left-hand Refs. So they "appear" to get moved up in the code, when all the compiler is doing is processing them in an earlier pass.
You should probably look into [WebRTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API).
... and that's why nobody does it (and it's also why why many of us use const declarations). I think that most linters will call you out on it, though.
HOLY Molly how long did this take to make? Also if you look up it looks like you flying to the sky but the snow is just flying to you!
Note- I think let and const too are hoisted within the block
Not sure what you are talking about. When you submit 4 it multiplies 1x2x3x4 the returns it. 
Ah sorry, i think I must be missing something and will review. That's exactly what its suppose to do but I don't see what forces it to multiple multiple times like that instead of counting to 4 then multiplying just once
If you’re really that interested look up some examples of assembly code. One of my classes last semester covered the Intel 8080 microprocessor as a specific example. It’s instruction set was simple enough for learning purposes. Honestly there’s a lot more going on in modern programming languages but that gives you more of an example of how things work on the lower levels.
Oh man, you're using Loop Back? That POS gives me nightmares, it's like Rails, except it doesn't work, is littered with bugs and undocumented. The framework is essentially a trap set up for consulting fees. It's the software equivalent of an auto repair shop digging pot holes and tire spikes on the surrounding roads near by 
Are you asking about for loops? For loops allow for techniques in iteration. At each step in the iteration, whatever code lies in the curly brackets will be executed. I suggest you try to iterate over values instead of just integers, though. For example, const array = new Array(1, 2, 3, 4); for (let element of array) { console.log(element); } Which I think more clearly displays the point of iteration. Also `base *= i` is just shorthand for `base = base * i`. You could write something similar to your code: let base = 1; const multiplications = [2, 4, 6, 8]; for (let mult of multiplications) { base = base * mult; }
Angular has left me with plenty of scars #MeToo 
!!!!! Yes !! I think that is it. After reading about for loops more I believe that is what’s doing what I’m confused about. Time to buy some java books thank you so much for this amazing reply to this random post man I do appreciate it
Doesn't getElementsByTagName return an array? You should rename element to elements and loop over it, but I'd have to hit the docs to figure out any more than that.
If you've already started learning JS, you shouldn't need to read a book on Java. JavaScript is fine for learning. (Just don't get discouraged by the complexity of the DOM. I think all JavaScript developers struggle with getting it straight in their mind.) Happy coding!
Ah you have a recommended source? I’m learning because iv taken a web development course on uldemy in my free time and ever since it’s gotten to java script I ben having a really fun time and so interesting in it. Feels much more deep than html/css but his course is obviously not Java focused only it’s just a small part to come together for web decvelopment but I’m having so much fun with the java
I just wonder how many companies that have a SPA also need a mobile app. It might be a very low number.
Have any learning resource recommendations? Iv stumbles upon it and started learning because I started a uldemy web development class in my free time and ever since it’s gotten to java script I ben having a absolute BALL. I love it 10X so far than html/css 
Consider r/LearnJavascript for this kind of question :)
Oh wow didn’t know there was one 
This is a great post with great answers. Thanks everyone!
I really liked doing things like [Advent of Code](https://adventofcode.com/). Which oftentimes have questions that are very hard to do not knowing a feature of the language, but become incredibly easy after finding that feature. These forced me to learn features of a language, but also gave fun challenges to focus my brain on. Otherwise, read blog posts. Good programmers love blogging, and there's more to programming than just knowing the language.
`getElementsByTagName` returns an HTMLDocument list. When you are calling the `parentNode` method on the element, what you are really doing to calling the method on the list - which doesn't really make sense. Try getting the first element of the list by indexing. Example -&gt; `getElementsByTagname('p')[0]`. Hope that helps.
Following
Wrong sub for this question
What are you trying to remove? All "p" tags? 
Using WebRTC straight out the box involves having to set up stun and turn servers, so (assuming you don't have Dev Ops experience), I'd advise using a service like https://simplewebrtc.com
You have to realize the body of the forloop gets executed every iteration. Revisit for loops! If the i&lt;=num test passes then the body of the For loop gets executed (base*=i) thereafter i gets increments by one. Then the test happens again so we repeat the process until the test condition fails. 
Also check out socket.io super easy to use! 
About two days :-) You can compile your Angular application with ngworld as well https://github.com/mgechev/ngworld.
Thanks. All it really needed was was an index number. 
One thing to note about [`HTMLCollection`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection), which is what that method returns, is that it is a LIVE collection - this means as the document changes so does the collection. If, say, you wanted to remove all `&lt;p&gt;` elements on the page and used `getElementsByTagName` to get the initial list, you'd need to iterate over it backwards - going forwards using a for loop wouldn't work because once you remove an element the list is re-ordered and the 1st element becomes the 0th element which was already iterated. You can get around this by using something like [`Array.from`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) - this creates a new array with the contents of a collection-like object (such as HTMLCollection) which won't be updated to reflect the current state of the dom tree.
I agree and as I said earlier I very much like arrow functions, and I have specified that in readme as well. I created this especially for react component for the users not using arrow functions. Also yes this will bind every class methods unless it's a react lifecycle method. Which I guess is okay to some extent because in every method you need to access `this` keyword. If there is some method in a react class which doesn't need access that should be extracted out of the class and should be a pure function instead(IMO), this way testing that function would be easy too. But again nothing is perfect and certainly this plugin in not. Again this is my first npm module and was more for a learning purpose.
If that's the reason you use const, I would suggest defaulting to let instead. Const shines in situations when you don't want it to be altered later.
This is an interesting math problem. In the JS world, I think the best way to do this would be through a canvas. The real trick would be how the picture is made up - and how the user can paint the area. If you have both of these overlays as a series of points, or geometry let's call them it, it should be possible with some maths to figure out the percentage drawn properly. Like I say, an interesting math problem. I can't help you with that :)
ew. this is, for my two cents, where jQuery starts to fall flat. No fewer than 3 `$` invocations. I'd much rather see, const name = this.getAttribute('name') this.setAttribute('id', name) But that's my two cents.... if the class specifically asks for jQuery yours is most definitely the correct way - but if I'm a teacher grading that I give better marks for proper use of DOM apis.
I had no intention for promoting bad code. Everything has a pros and cons. Maybe someone binds the methods in render function, we can't prevent someone from writing bad code unless we are reviewer of that code. Again as I said earlier, this was more of a learning exercise for me and this is not a perfect plugin. more here https://www.reddit.com/r/javascript/comments/7lvn9n/babel_plugin_to_auto_bind_you_react/drqgcnv/
I’m storing them now every second but until yesterday I was just calling them 
Yes, but in oder for people to write better code, we need to stop magically fixing it for them, it needs to break, the mistake needs to happen. That's not something that needs a code review, it's needs a working pair of brain cells, if you submitted that code for review all it really means is you are lazy and did not test your code, as if you had things would not have worked as expected and either you would have realised you forgot to bind or you would have asked someone and they would have pointed it out. At the same time not everything always needs to be bound, so this is likely to cause as many or even more problems that it should not be trying to solve in the first place
This is insanely useful when comes to old projects where there is no src dir and you need quickly to add something by writing jsx and quickly inserting ready-to-go js
I’ve had some luck using PeerJs, have a look at that
I can't find any indication of that in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let. Also it's not even possible to 'hoist' `const` statements because you can't separate the declaration and initialisation like you can with `var`. `const` must be declared with a value and cannot be re-assigned. Although you may be right when it comes to transpiling down to ES5 with Babel; there may be some hoisting going on when all your declarations become `var`
Do you have a visual explanation link for that?
I'd recommend Udacity's Intro to Javascript for the JS basics, and Mozilla JavaScript docs.
You can do this with JavaScript, but you need to run this on the server then. Check out nodejs. For password protection, just use caddy in front of your server and activate HTTP basic auth. That's most likely far more secure than what you'd manage to implement with limited knowledge.
&gt; Doesn't getElementsByTagName return an array? It returns a live HTMLCollection. It's array-like. It has a "length" property and items can be accessed via integer keys. It doesn't have array methods like map, filter, etc, though.
I'm trying to figure out the easiest way to do this and I'm astonished that it's that complicated :P For example Photoshop has enough functionality to do this (I think), simply by determining the color of closest pixels (using Wand). From here there should be a way to calculate it.. But I'm not going to use photoshop in JS :P Thank you for your comment, but I hope someon has some great idea for that matter :D (Fortunately I think I imagine how can I change my idea to something far less complicated, but still it's hillarious that a simple coloring book with scores is so hard to do)
That's right 
Thanks for all the answers ;) Unfortunately I can't answer to each one of them ^^'
Following
There is one on github, it is opensource and it is pretty solid. https://github.com/cezerin/cezerin https://store.cezerin.com/ This is the demo page
I'm in my phone :( JPEG? 
https://i.imgur.com/gTN9QT1.png
My bad, you're correct. I didn't look properly. Forgive the holiday absentmindedness :) I still think there is value in using axios over fetch however, for many reasons. The first reason is that fetch is actually officially stated as lower-level than XMLHttpRequest. It does not support progress events and cancellation, whereas node's HTTP module and XMLHttpRequest does. Axios supports this out of the box. The second reason is that fetch only rejects the promise on a network error like a missing connection - HTTP errors are valid results. This is more "correct" in theory, but in business practice its far too much boilerplate. The third reason is that you can easily have many instances of axios using this snippet: const randomUser = axios.create({ baseUrl: 'https://randomeuser.me/api' }); randomUser.get('/?gender=female') .then(...); Doing that with a number of different API hostnames is considerably easier in Axios than it is with fetch. In fact its likely libraries like Axios will eventually be written on top of `fetch` when there's no need to worry about older browsers, especially in enterprise systems. If you advocate using fetch over axios, you're basically advocating reinventing wheels. Just because WebAssembly is standard doesn't mean I'm going to go and reinvent NectarJS... 
https://imgur.com/a/JASBI
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/TFadVu0.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20drqnjv3) 
Do you alter your `function` definitions often?
[Try this blog post.](https://john-dugan.com/hoisting-in-javascript/) Most of my understanding of Javascript's lexical scope comes from Kyle Simpson (author of the *You Don't Know JS* series).
I just got to say that I really appreciate your efforts, /u/egoistian. poi is truly a great project.
I would recomend looking into Postman. It's an application for testing http requests. Give it a Google!
JSON itself is a string. To turn your object into JSON you simply need to call a JSON.stringify(obj). Make sure you url-encode the string as well with encodeURI() before appending it to a link
Downloading it right now! UPDATE: solved my problem thanks!
Thats true . I also felt lot of times to ditch it and go back to simple express.js . But, My requirements are simple. The biggest issue with loopback.js is lack of support. The support really sucks.
&amp;name=jack
You actually want encodeURIComponent otherwise slashes won't be escaped (but that's probably not a big issue for a query parameter).
turned out to be ?name=Jack
For all subsequent params use an ampersand, you’re right the first one should be a question mark
I don't think you can put it in the URL. That's for query parameters which isn't formatted like json. If you need it to be json data you should add it as data to the request body.
Try to think how recursion could be used.
Well, you're right. Turned out I misinterpreted the question anyway, since he implied parsing an object
Basically you'll need some kind of back-end system that will be hosting the HTML itself. Php should work fine as well though I can't speak to it since I've never really used it. I've done this before with nodejs and mongodb, which are nice because you can just interact with them in javascript and don't have to pick up a new language. On the front end you just make a call to your back end to update the hosted HTML
There's a nice small NPM package for exactly this use case. https://www.npmjs.com/package/querystring
Hey that looks really cool! I made something very similar (a lodash clone focused on being small in TS) myself, feel free to include some of the other methods from it! https://github.com/FelixRilling/lightdash
There is also Babel live (it converts not only JSX but ES6 overally): https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;code_lz=DwEwlgbgBAxgNgQwM5IHIILYFMC8AiOAezjBkIDs8A-AKCimAAsBGKgCSziKgHVCAnOCADeAJigBqKKIC-AQmAB6FrSXgIVIA&amp;debug=false&amp;circleciRepo=&amp;evaluate=false&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=6.26.0
Thank you, it makes sense to me now!
Okay I will try it! thanks
Personally, the only advantage I've seen with Redux is that it "forces" a pattern on you. With MobX you can accomplish the same thing in wildly different ways. So for a corporate or large-team project, I would choose Redux, because the code will tend to look more uniform.
Okay, thank you for the links!
Alright thanks!
They are rated one star and their website isn't designed to be responsive for mobile .
Okay, will do.
I'd be very careful with security, especially if you have no experience with databases or back end
[removed]
[removed]
I don't have the time to go over exact details, but instead of copying the first row's HTML and inserting it, I would start by creating a function that returns a "template" for a row with variables for the No. column and row id so that you can easily target anything created later on and your numbers will auto increment easily Additionally, you might start troubleshooting your existing non-working duplicate rows by correcting the location of your closing tag for `&lt;/select&gt;` on row 31 of HTML. It should go after the last option in row 27.
Did you print the source or the output? 
So absolutely nothing to do with JSON then.
Hi /u/badass4102, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/fulleylove, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
I'll have to try this out. I will need to learn React due to my minimal knowledge of it but this looks like something I'd research further into. Thanks! 
Cool
It's B2B website, I don't see why it would be made responsive for mobile. I used to work with some of the largest dealers in the Northeast (Prestige, Ray Catena, Healey, etc) and Reynolds and Reynolds is by far the best. It's no surprise I'm getting downvoted in this sub, but if your dad wants to manage the website himself, I would not take the responsibility of building an entire DMS yourself. 
Yes, well there is no "magic wand" as it were. Canvas is very low-level to the point where you need to draw each shape and line yourself. This is how most graphics programming is... it's incredibly complicated and requires a lot of math to do properly.
don't put data in the request body for GETs
[removed]
Ah, you are correct. Forgot this was in reference to a GET request.
yeah it can be a big mess - some servers go off spec and will respect it but its never a guarantee and lead to some massive headaches down the road
The idea is exactly to avoid functions to be altered, for that `const` would work
You can assign named functions to variables as well!
the source so that they manually had to type it in to see the output ;)
People have covered this already in so many words, but to lay it all out in one post... Probably what you want it just a series of name value pairs. If necessary you could map them back into an object on the other side: ?name=Jack&amp;age=32 If for some reason you explicitly need JSON formatted data, there is nothing stopping you from putting it in the query string: ?data={"name":"Jack","age":32} But you should run it through `window.encodeURI` first to percent-encode unsafe characters: ?data= %7B%22name%22:%22Jack%22,%22age%22:32%7D
I'll probably get shot, but if it isn't as simple as putting it in the query string why don't you make it a post? If this if for functionally such as a search... Think of it as creating a search rather than reading a resource. 
React has won because it's better. Simple and plain. It adds value to your skills as a developer, it teaches you new concepts. It introduces you (if you didn't know about it already) to the world of functional programming and yes it has an amazing ecosystem behind it. There has been a huge amount of valuable innovation that has happened because of it. Literally the only reason I see people choosing Vue is because it's somehow perceived as "easier" when in fact it's just some weird DSL template language with mutations happening all over the place. No thanks.
They're just waiting till you spend the big bucks. 
basically your object is encoded as URL parameters for any GET request. so lets say your object is { "hello": 1, "world": 44, "another": 3 } then you have your base URL `http://example/com` which then appends the object with the `?` character at which point all of the object members are added to the URL: `hello=1` and separated by the `&amp;` char... `world=44&amp;another=3`. in summary, `http://example.com?hello=1&amp;world=44&amp;another=3`. like someone else in the thread mentioned, you will have to encode your data. for example, if param `hello` was set to `=`, your URL would look weird and not parse right (`http://example.com?hello==&amp;world=44&amp;another=3`). To combat this, you encode the `=` char as something else using the JS `encodeURI()` function. You shouldn't have to manually build the string when you're making these calls, you can find a library that does this for you. It is built into jQuery if that's your kinda thing. https://api.jquery.com/jquery.get/. Also, I second Postman it's great for testing! $.ajax({ url: url, data: data, success: success, dataType: dataType });
"Jimmy|RIG is an advanced browser application, in its current incarnation, it requires features only provided by google's Chrome browser. Please use Chrome to open this page." WHAT?
I've released a demo version of this Excel-killer WIP: https://github.com/fiatjaf/thing-store
Array.prototype.forEach.call(list, fn).
If you need IE you can polyfill or use Array.prototype.forEach.call(list, fn) 
It would be nice if people learn a bit of CS theory: long lasting concepts instead of frivolous tools. I'm seeing many horribly designed apps lately.
This or: [...collection].forEach((el, index, coll) =&gt; { /* ... */ }); ~~Or even:~~ for (const el of collection) { /* ... */ } edit: last one does not work, as it is still live. First one is converted into an array ~~Both work as `Symbol.iterator` is implemented for *HTMLCollection*s.~~
I understand. This is encouraging people to write code using features that will *never* become standard JavaScript, though. Do you not think that dangerous? Edit: I'm not trying to shit on you or your work :)
&gt;JS developers don't know how to do their job without libraries These days, most really don't.
For-of works if you use querySelectorAll instead.
Ahhhhh yes. 
Oh, yes! That's because it returns a NodeList which isn't live.
I was reading a javascript file that was passing a JSON object to a URL and trying to figure out how to do it with just URL parameters I didn't know I could do it without JSON
you're right I was approaching it the wrong way
All about components but no mention of web components.
As someone who works with both on a daily basis - not sure I agree with your over simplified generalization. I agree, in the work that I do, that react has helped tremendously with teaching our developers greater skills more so than Vue - but do you mind elaborating on “weird templating language with mutations all over the place?” You know state management can be separated with something like VueX, including mutations? 
The article is about UI frameworks and libraries, and web components are not that.
 $.post('/when-i-want-to-send-data', { data: dataToSend }, (res) =&gt; { if(!res.ok) console.log(res.err) console.log(res) }) $.get('/when-i-just-want-data', (res) =&gt; { if(!res.ok) console.log(res.err) console.log(res) }) This is really quick and easy. But if you will be doing a lot of back &amp; forth client server tennis then socket.io would be my next tool on the shelf to grab. Another alternative though is to bring in [async.js](https://github.com/caolan/async) which will get you some more mileage with callbacks (ie- $.get $.post ) without pyramiding to doom. 
This should be titled "How React, Vue and Angular handle components in a similar manner". 
If you are already using import statements and a bundler, then you can just do `import throttle from 'lodash.throttle';` to import single lodash components, which makes this kind of obsolete. However, if you are using a &lt;script&gt; tag to load the whole library, but only using a small part of it, then this will be an improvement for sure. 
base64 encode your JSON string
Thanks for the link! I was surprised to see someone else post this. (Author of Micro-dash here.)
It is certainly not obsolete. Each function shows the minimum bundle size contribution to expect if that is the only function you import, and you can see some extreme differences. The largest is [`remove()`](https://simontonsoftware.github.io/micro-dash/typedoc/index.html#remove), which will get you `14,645 bytes` from Lodash, but only `89 bytes` from Micro-dash. Those numbers are calculated by creating [tiny](https://github.com/simontonsoftware/micro-dash/blob/master/sizes/src/array/remove.lodash.ts) [apps](https://github.com/simontonsoftware/micro-dash/blob/master/sizes/src/array/remove.microdash.ts) that use only the given function, packaged using `rollup` and `uglify`, and inspected using [`source-map-explorer`](https://github.com/danvk/source-map-explorer). You can see the [tiny](https://github.com/simontonsoftware/micro-dash/blob/master/sizes/src/array/remove.lodash.ts) app for `remove` uses `import remove from 'lodash-es/remove'`, yet it still sucks in more than 14K into the minified bundle. (Any Lodash function that uses the "iteratee shorthand" will pull in that same 14K.)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [simontonsoftware/micro-dash/.../**remove.lodash.ts** (master → 6b78fea)](https://github.com/simontonsoftware/micro-dash/blob/6b78fea7d5a5aabd77f2188449ac37a1010ceded/sizes/src/array/remove.lodash.ts) * [simontonsoftware/micro-dash/.../**remove.microdash.ts** (master → 6b78fea)](https://github.com/simontonsoftware/micro-dash/blob/6b78fea7d5a5aabd77f2188449ac37a1010ceded/sizes/src/array/remove.microdash.ts) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply drrligv.)^.
Hey nice doc formatting! Looks like you are running `jsdoc` on transpiled source. I will have to look into that more to improve it for Micro-dash.
is that jquery? nostalgic!
Right, I verified in a browser. Also documents say that a variable is in a 'temporal dead zone' before it's declaration, That means something like var x=10; { console.log(x); let x; } will throw a Reference Error.
When the guy doesn't give you what you *asked*, but what you *need*.
I have created a utility to extract meta information about a link. [https://github.com/arpitbbhayani/linkie](https://github.com/arpitbbhayani/linkie)
&lt; bad joke was here &gt;
GET is a non modifying request, POST and PUT are modifying requests per http specification...
there isn't but you can use freelancer.com to help you
Does postman internally stringify JSON and encode the URL? Any idea on that? I've been using postman for quite a time but just need to know how it's done
The article does not even mention HMR
Yeah HMR and PWA is not something that is connected... dunno what he is talking about
May be wrong but I think they are trying to make an incredibly bad sex joke.
Aha didn’t think of the Tinder connection
This is why you need Tinder.
lol, than I will change everything to simple express.js . 
Disagree strongly. VueJS' integrated pieces, like Vuex, vue-router, etc... work together so smoothly and pain free... Also, it *is* simpler, which is a great thing. 
Not OP but I think they meant the Vue templates. JSX = html in js, Vue = js in html Either way js and html have to mix. I prefer jsx, but I know most of my coworkers that are designers prefer js in html. I feel with jsx I have more control over _exactly_ what's happening (and also I can use any js idioms I want), whereas with templates, you're limited by what the templates allow, but it's easier to understand since you don't need to know js to write a template. 
When Flow was first created, TypeScript had very little type inference, there was no `// @ts-check`for incremental adoption etc, so I would say it had a good reason to be created. But yeah, it's been some time since then and they've become quite similar to each other nowadays. TypeScript has a larger community, more library definitions, and better tooling. Flow integrates with the `babel` ecosystem really well (you just need to install a single preset and you're good to go), and has some pretty cool first class React support like [strictly typing children](https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627#6dfc). Either choice is good, there are editor plugins for both, etc. I personally prefer Flow, but TypeScript definitely has a lead when it comes to the amount of type definitions available as well as better detailed error messages, so keep that in mind when considering which one to use.
Someone thought oocml was really cool.
Great case study write up. Kudos to the author and anyone else who worked on it (also Tinder PWA team).
&gt; but TypeScript definitely has a lead when it comes to the amount of type definitions available Which is kindof the whole point of using a type checker.
Not sure if TS is still this way, but it used to have its own 'compiler,' enforce the .ts file extension, and not include some es6 features (like map, set). TS also technically has an unsound type system, while flow has a sound one. Flow plays nice with all the existing tools and pragmas, but the support for flow is less developed thus far. If you look at their documentations, they are also philosophically opposite. TS is all "let's make JS look like C#!" And Flow is more "this is how you can strong type all the JS patterns you use."
Well most of the popular or well known libraries have library definitions for Flow, but if you're working with something smaller or more obscure I suppose that may be an issue where you would need to write the defs yourself.
I tried using flow for a few weeks about a year ago. Couldn't find type definitions for most things. Typescript had them for everything. That sold TS, to me. Plus Anders. :)
Source? I know flow is implemented in ocaml, but that’s not the same thing as saying flow exists because someone thought ocaml was cool. 
Looks like sort-of a light jQuery library?
worked at FB and can verify this. It was literally a hackathon project with some people that just wanted to do something in ocaml.
That's very clever.
You mean just an object. It's only JSON if it's a string.
It has similar method names mostly. The main difference between Zam and jQuery is that Zam has no 'jQuery object' equivalent.
[Here's a good comparison](https://github.com/niieani/typescript-vs-flowtype). 
Privet! I will send you my telegram nickname through pm. I speak Russian fluently👍
Some libdefs are missing, but it’s very easy to write one yourself, so I don’t see that as a real problem. Do you know if there are some performance differences between Flow and TypeScript?
Thank you, I'll look into that.
The output format you're going for is a little wonky. You'll wind up with an array of objects that consist of a string and an array: [{ 'player name string', [ 'player', 'scores' ] }] So there's not a super direct way to do that. But here's how I'd do it: var series = buildSeries(); console.log(series); // [ // {"Player 1",[100,103,105]}, // {"Player 2",[101,110,112]} // ] //// function buildSeries() { var players = [{ "Player 1",100 }, { "Player 1",103 }, { "Player 1",105 }, { "Player 2",101 }, { "Player 2",110 }, { "Player 2",112 }]; var seriesObj = buildSeriesObj({}, players); return buildSeriesArr(seriesObj, [], Object.keys(seriesObj)); } function buildSeriesObj(seriesObj, [player, ...players]) { var playerName = player[0]; var playerScore = player[1]; if (!seriesObj[key]) { seriesObj[key] = [] } seriesObj[key].push(player); return players.length ? buildSeries(seriesObj, players) : seriesObj; } function buildSeriesArr(players, seriesArr, [playerName, ...playerNames]) { var playerScores = players[playerName]; seriesArr.push({ playerName, playerScores }); return playerNames.length ? buildSeriesArr(players, seriesArr, playerNames) : seriesArr; } 
How else would MS get influence over a community that intentionally broke away from it
Don't you want colons instead of commas between your object keys and properties, like {"Player 1": 103} ?
How is this a good comparison? It's inaccurate and completely biased towards TypeScript. &gt; sketchy, must save file to run type-check; some IDEs have workarounds to run real-time. This is completely untrue. &gt; autocomplete feels sluggish (often a second or more of delay) Also untrue. He hasn't provided any specs on what pc/editor/plugin he's using which is what makes this even more ridiculous. &gt; incomplete, often vague docs This is ridiculous, the [flow docs](https://flow.org/en/docs/) are great. Also the unique features for Flow are missing a bunch of stuff like special React support.
&gt; but it’s very easy to write one yourself It's also very easy to use Typescript where they're already written. This is a highly subjective statement ... I simply felt like Typescript was more useful, to me, than Flow was. When I tried Flow, I felt like I was spending so much time trying to keep Flow happy. TS stays mostly out of the way and is an extreme benefit.
How does the data need to be searched? If these are rounds that you are keeping track of I would set it up as [{'Player1':[{1:100},{2:103}]}, {'Player2':[...]...}...] That way you can easily look up a player by round if needed 'series[player][round]'. If you don't care about the order of the values then you can do, [{'Player1':[100, 103...]},...] Then you would get back an array of values for 'series[player]'. As for how to do it, you'll have to parse and build the new data model yourself. Try to keep your for loops to a minimum for performance.
It’s the one and only winner in the web frontend industry because it’s the only language that works across all browsers. That, I’m turn, is because it was unilaterally created by a major browser at a time of extreme competition. As soon as one browser supported it the others had to in order to remain competitive. Another language was never successful because the first mover advantage in this space is so enormous: it would need to be implemented by all major browsers and would need to be better than what already exists. That said, many languages now transpile to JavaScript including TypeScript, PureScript, and Python so now it might not be complete to say it’s “the only winner in this industry”.
I love JavaScript and especially I love TypeScript, but basically you're describing not a feature but more like "well, there were times when we had no king, so this goblin became king. Well, now we have Goblin the 2017th as king so we kinda like him at this point and we have special glasses that shows him as a role model and not an ugly stupid goblin which makes mistakes"
Yep, as /u/djslakor said, Flow has WAY less definitions for libraries than TypeScript
Broke away from it?
Hi /u/13378, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/Yellowsun123, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/kentonw223, For javascript help, please visit /r/LearnJavascript. Thank you!
That’s a pretty accurate assessment. I like JavaScript, it’s one of my favorite languages but many of its warts come from the old language, pre-ES3. It was a wild west back then and the intended audience is not the audience for the language today.
yeah man node/angular was a great alternative to the glut of dotnet. now typescript has made javascript just as verbose and painful to develop for.
I mentioned that as well :p
I believe so. The other comments on the post covers it well, read them and I think you'll have your awenser.
 var objArr = [ {"Player 1": 100}, {"Player 1": 103}, {"Player 1": 105}, {"Player 2": 101}, {"Player 2": 110}, {"Player 2": 112} ]; var seriesObj = objArr.reduce((acc, each) =&gt; { const key = Reflect.ownKeys(each)[0]; if (Reflect.has(acc, key)) acc[key].push(each[key]) else acc[key] = [each[key]] return acc; }, {}); // -&gt; {Player 1: [100, 103, 105], Player 2: [101, 110, 112]} var series = Reflect.ownKeys(seriesObj).reduce((acc, each) =&gt; { acc.push({[each]: seriesObj[each]}); return acc; }, []); // -&gt; [{"Player 1": [100, 103, 105]}, {"Player 2": [101, 110, 112]}]
Well, not quiet. You mentioned about only specific and obscure. I'm talking in general. Both popular and not popular. TS has way more definitions.
JSONP is rarely used. What you want to look into is CORs which involves white listing domains allowed to make cross origin calls.
 &lt;form action="http://mysite.com"&gt; 
http://shop.oreilly.com/product/9780596517748.do
It's just ok. Can use improvements. - Nobody downloads js libs in zip files these days. Put the npm instructions on doc site. Maybe also a CDN (I'd say unpkg fits well) - Branding is confusing. Is it zam, node-z (npm), z (in graphs)? Pick one. - Document the global variable (`Zam`, `Z`, whatever the official variable name is) - Why not put examples together with API docs? - jQuery-like API feels outdated, is not very straightforward to test, etc. - speaking of which, no tests? - `new Zam().ajax()` seems weird compared to jQuery. Why not static? - `func` arg in `.off` is leaking the inconvenience of the underlying API. If that's by design, I'd rather just use the raw `addEventListener` since it also exposes `useCapture` - What's up with `.a()`, `.b()`, `.c()`, etc? - [this is not how a library should do error handling](https://github.com/roecrew/zam/blob/2057eb43f42b5b96dc4d5693d41167402b6c71bc/zam.js#L217); at a minimum expose a callback. - [https://github.com/roecrew/zam/releases](Project looks crazy unstable. I'd recommend using the 0.x rules of semvem. Also, change-log your majors)
Without knowing the context too much. Might I suggest an alternative representation —dictionary. const data={ player1: [100,200,300], player2: [300,400,0] } You can then get player one values via data.player1 etc. 
Thank you for the reply!
This is what gzip is for :)
But you still can gzip the resulting .js file. Is it less effective, than gzipping initial css, so that resulting sizes would be appr. equal?
js won not due to its features, more because it's the only game in town. (crockford not withstanding. There was Java, but js is far simpler that web designers can learn, and that's the reason it took over java in the early days) then in late 2000s, cellphone phone becomes popular, and node.js was born. html, got fresh life (html5), Flash got killed by Apple. And with rumor that desktop is going to be dead, no more "download this software". People got used to do whatever just using the web. (google began it with gmail, then google spreadsheet, calender, etc.) So, js is the only game in town. And from that point, it just snowballed. js the language, is truly suckest language. (crockford not withstanding) Yes, it has functional programing features, but all things considered, including ES2015, it is still suckest among today's 'scripting' languages (say, compared to python, ruby, golang)
The other problem with writing a custom js-based decompressor is that for the vast majority of cases, you won't be able to write a decompressor small enough to offset its own benefits. There's even an [old challenge](http://patrickcraig.co.uk/other/compression.php) that hinges on this principle. The other reason has to do with the browser's asset pipeline. Normally, CSS is downloaded with higher priority than JS, and in addition, JS blocks DOM construction.
Of course! I created/r/bprogramming especially for this purpose to help authors who are not up on the hype curve yet. And I try to cross post stuff that I especially like to relevant sub Reddit’s.
Here's a sneak peek of /r/bprogramming using the [top posts](https://np.reddit.com/r/bprogramming/top/?sort=top&amp;t=all) of all time! \#1: [IOTA: A Tangled Mess](https://codesuppository.blogspot.com/2017/12/iota-tangled-mess.html) | [0 comments](https://np.reddit.com/r/bprogramming/comments/7k9cz9/iota_a_tangled_mess/) \#2: [Kids in 'Netflix Only' Homes Are Being Saved from 230 Hrs of Commercials a Year](http://exstreamist.com/report-kids-in-netflix-only-homes-are-being-saved-from-230-hours-of-commercials-a-year/) | [0 comments](https://np.reddit.com/r/bprogramming/comments/7lk8kp/kids_in_netflix_only_homes_are_being_saved_from/) \#3: [How to Write Your Own C++ Game Engine](http://preshing.com/20171218/how-to-write-your-own-cpp-game-engine/) | [0 comments](https://np.reddit.com/r/bprogramming/comments/7klsdm/how_to_write_your_own_c_game_engine/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
All css in js solutions do this already. Once uglyfy runs over the bundle function names will shrink into the smallest possible denominator.
awesome answer!
If Flow had a community as big as TS there would only be one: Flow. It's modular, doesn't screw up your build system, does one thing and does it extremely well, easy to set up. TS is the polar opposite of it, non modular, takes over the build system (which in 99% of all cases results in dropping babel), tries to do transpiling as well but it's not half as good as babel, tougher to set up - BUT it has the largest eco system for type definitions.
Thanks for this post. 
That’s interesting. I also felt like I was spending too much time trying to keep Flow happy, I thought that’s just part of the learning curve. I’ll try TS and see for myself, thanks for the comment.
Would this work in IE?
Reddit is not the optimal place for code support :/ Just use stackoverflow.com 
How does the PWA app handle notifications? Do PWA apps have access to the notification system and network access when not in use? 
&gt; Reflect.ownKeys Probably not, maybe with a polyfill. `Reflect` was introduced in ES2015 if I'm reading the bottom correctly: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect
It turns out Javascript wasn't the only game in town back in the day. IE had VBScript support (and IE was _THE_ browser for a long time), and you could also write Java applets. Later Flash also became very popular. The problem for VBScript was obviously its lack of cross-browser support. Even though other browsers were not anywhere near as popular as IE, writing a fallback for VBScript meant writing JS, so people just wrote JS instead. The thing JS had going for it was that Java was being heavily marketed as a "write-once, run everywhere" solution, and JS enjoyed some free publicity due to its syntactical similarities. Java and Flash were, for the longest time, technically superior to JS and were often used for graphic intensive applications such as 3D because JS simply could not handle it. I think Java went out of vogue because Flash's APIs were far more oriented towards graphic intensive work. Even though Java was pretty much the only technology that could reasonably be used at the time to implement a complex client-side application like Runescape, Adobe had positioned itself very well with a variety of tools to cater to the exploding web design market (with Dreamweaver, Flash, Photoshop, Illustrator, Director, etc). For many years, you could make good money working exclusively with Flash without ever touching the open standards. What kept JS alive was probably Google, or more specifically, the semantic web. Whereas Flash content had to live in a black-box binary file that search engines did not have the ability to understand, JS-enriched pages could be crawled and ranked. Whereas Flash pages ballooned into huge slow dinosaurs, JS survived by hiding behind subtle rollovers in content sites. What made JS viable as a full-blown application platform was the popularization of the XMLHttpRequest API (aka AJAX). Now, suddenly, it became possible to design thick-client interfaces that didn't involve throwing away local state on every server action. TL:DR; JS got some early muscle behind it because it was designed to be syntactically similar to Java, it complements other open standards, and it eventually gained APIs that enabled it to power full-blown architectures.
Hi, a quick look at http://devdocs.io/javascript/global_objects/reflect says Reflection API is not supported in IE. If you want to run this in IE, replace: * `Reflect.ownKeys` with `Object.keys` * `Reflect.has` with `objName.hasOwnProperty`
apologies!
console.log(window[variableName]);
There are APIs for push notifications. https://developer.mozilla.org/en-US/docs/Web/API/Push_API
It works via service worker. It will push notifications even after you've closed the user agent. MDN has great documentation on the push api
The value of "variableName" is "variableOne". Can you try to rephrase your question?
So I'm trying to get the value of the variable which is the value of variableName. Like I said I'm struggling to explain it!
Awesome thanks. Can I check what this is referred to as? All my google searches are coming up with the window object.
When you console.log(variableName) should it log out a string value which is "variableOne" rather than the value held in variableOne?
Yep it should definitely log the string value "variableOne" if you use it like that. I'm trying to find out how you'd simplify this - switch (variableName) { case "variableOne": console.log(variableOne) case "variableTwo": console.log(variableTwo) case "variableThree": console.log(variableThree) } 
https://stackoverflow.com/questions/11148997/window-variablename
You could also put the three variables in an object and replace window with the name of the new object variable
`window[variableName]` only works if the variable is declared in the global scope. A more robust option is [`eval(variableName)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval). 
In JavaScript member/property access is done via either dot notation (so `anObject.aProperty`) or bracket notation (`anObject['aProperty']`). So if you have the name of a variable (its key) you can programmatically access it in its object. The example in this case uses `window` because all top-level variables are attached to the window object (in the browser).
I agree on the point about the docs, but the first two points you've mentioned have been true for me, regardless of the machine. In comparison to TypeScript, anyway. However, as the page says: &gt; This might be incomplete and/or contain mistakes. I'm open to contributions and comments. So feel free to make a contribution if you feel it's inaccurate.
Using eval opens you up to the possibility of XSS. 
nice, thanks. 
Perhaps make an array of the variables and loop through to call each one?
Perhaps make an array of the variables and loop through to call each one?
If you want to look up values by strings, I suggest you put the values in an object with string keys (aka a dictionary).
This only works if the code is in the global scope, which isn't a good strategy.
This is why I think maybe people should spend a little more time learning how the web/browsers work _before_ jumping into web dev (Also HTML, CSS and JS all block DOM construction)
&gt; tries to do transpiling as well but it's not half as good as babel Could you name any particular examples of this? I've personally never had a problem with TS' transpilation.
I'm not aware of any CSS in JS solution that does what OP is proposing (shrinking the CSS rules themselves, not selectors)
Yes, the link explains that and alternatives half way down the page. When I said "robust" I meant "the advice doesn't randomly break inside a function")
Here's a way to do it in a single iteration: var objArr = [ {"Player 1": 100}, {"Player 1": 103}, {"Player 1": 105}, {"Player 2": 101}, {"Player 2": 110}, {"Player 2": 112} ]; var series = objArr.reduce((acc, current) =&gt; { const key = Object.keys(current)[0]; const value = current[key]; const matchingItem = acc.find((item) =&gt; Object.keys(item)[0] === key); if (matchingItem) { matchingItem[key].push(value); } else { acc.push({ [key]: value }); } return acc; }, []); 
Oh you're right! Confused selectors with functions having played around with [this](https://twitter.com/threepointone/status/943531109966602241) recently, that's reason, though. 
No problems, just years waiting until TS picks up drafts, and being cut off from babels eco system in general. We do use TS though, but it does sting.
&gt; but it used to have its own 'compiler,' It does, though Babel 7 has a transform that allows you to take the compiler out of the equation entirely. However, it doesn't support all of TS' features, such as namespaces and `export =`, but those shouldn't be in modern code anyway. &gt; enforce the .ts file extension Kind of true. Nowadays you can use js files and include `// @ts-check` at the top of files, just like flow. However, you're limited to using JSDoc syntax for type checks, which are more verbose and limited than full TS syntax. Though this also gives the benefit of being able to go without a transpiler, but I suppose that's hardly useful in any modern tech stack. Maybe if you're using node, but eh. &gt; and not include some es6 features (like map, set) Those are included in the type definitions, and have been for a while. Including them at runtime isn't the job of the transpiler to begin with. If you mean _syntax features_, then yes, TS only supports features that've made it to stage 3, with the exception of decorators. So you can't use stuff like the `::` bind syntax, pipes, the elvis operator, and so on. Arguably though, using unstable syntax features is kind of a dangerous idea anyway, especially in production code, so I respect their decision in this regard. &gt; TS also technically has an unsound type system, while flow has a sound one. It's not that black and white. It's true that TS' type system might not be _as_ sound as Flow's, but calling it unsound is inaccurate, especially with the advent of `strict` mode. Neither are fully sound, neither are fully unsound. I'd also argue that unsoundness isn't much of an issue if you write your code in a way that's friendlier to static analysis, a philosophy that apples just as validly to Flow.
of all the apps that are PWA, why Tinder in particular? any sweet memories ?
the ability to develop server side code too to run in a chrome v8 container, plus the community.
thank you for contributing.
&gt; just years waiting until TS picks up drafts, I mentioned somewhere else in the thread that TS picks up features that made it to stage 3, minus decorators. I think it's a reasonable compromise, since relying on stage 2 features is not really the best idea. The wait for said features to actually get implemented, I can understand, but something I'm personally fine dealing with. &gt; and being cut off from babels eco system in general Actually, not entirely true. Some build pipelines (including my own) make use of some babel plugins applied to the output of TS. [This one for example.](https://github.com/lodash/babel-plugin-lodash) Of course, which plugins work depends on what syntax features are actually supported by TS, but I find a lot of plugins can be integrated perfectly fine.
You should store the variables in an object instead of on the global namespace: var theVariables = { variableOne: 1, variableTwo: 2 }; // You can add more variables to the object or change existing ones: theVariables.variableThree = 3; theVariables.variableOne = 'one'; // You can then access the variables via bracket notation var variableName = 'variableOne'; console.log(theVariables[variableName]); // 'one' console.log(theVariables['variableThree']); // 3
&gt; HTML, CSS and JS all block DOM construction Haha. Yep, that's technically true. What I meant to say is that when doing css-in-js, your JS becomes a hard bottleneck (whereas with plain CSS, the browser can parallelize some of the work via techniques like speculative parsing). Also, JS is much slower than native code in mobile, so it's orders of magnitude better for a native gzip library to block the main thread than it is for JS to do it.
Either way, it's your choice. The whole web was on spread already when TS finally had it. Same with async/await. What they pick and what not isn't strictly stage-3 anyway. Babel on the other hand clearly tracks stages and you could simply pick one and it gets updated once drafts are stable. &gt; Actually, not entirely true In practice chaining TS and Babel is not a good idea, even if it theoretically works. Better wait for babel 7, which has a official typescript plugin made by Microsoft. That truly solves all issues. Using it myself on a few projects.
I think that the best way to handle this would be to use and object to store your properties. You can do something like this which might be better all though this can be simplified using the code you provided this is one way to accomplish passing a string as a variable name. var variableOne = 1; var variableTwo = 2; var variableThree = 3; var allVariables = { variableOne: variableOne, variableTwo: variableTwo, variableThree: variableThree, } var variableSelector = function(inputVariable) { // This takes the object allVariables and takes a string as input value // and will return the correct value based off or what gets passed in. return allVariables[inputVariable]; } console.log(variableSelector('variableOne'))
The best and most common way to achieve what you have asked in the Javascript world is by using object. An Object can be defined in Javascript using the culy braces {} By assigning your variable within the object literals and they will be the object "properties". Property can be accessed either by using the "." (dot) notation ( there you will not be able to use "dynamic" name that is what you want to do, or by using the square brackets in which you can either pass a string variable or ever build a string. Just to give you a word of warning it is not suggested to purposely use variable that will be create or used dynamically, because very hard to "unit test" and hard to follow, and search. In some cases it is useful ( for example if the object is dynamically created or if when there is a space in the object properties). I have posted a few example below for you to understand the usage to fulfil your requirement. eg. var myObj = {}; //define the object myObj.variableOne = "nameOfSecondVariable" myObj.nameOfSecondVariable = "value of string" //declare tho variables or var myObj = { variableOne : "nameOfSecondVariable" nameOfSecondVariable : "value of string" } You can do this myObj.nameOfSecondVariable //this will output "value of string" myObj["nameOfSecondVariable"] //this will output "value of string" myObj["nameOfSecond" + "Variable"] //this will output "value of string" myObj[variableOne ] //this will output "value of string" 
DAHHH...that was a typo. Yes, this is supposed to be an objects.
Such a baity title.
&gt;promotes vanilla JS Is a library. 
Have you taken a look at the code? :)
Maybe typestyle works similarly
object literals functional programming performance node, express, npm
As others said you are probably meaning to write the syntax like this (objects use the "`:`" to separate keys and values): --- Is there an easy way to condense an array of objects var objArr = [ {"Player 1": 100}, {"Player 1": 103}, {"Player 1": 105}, {"Player 2": 101}, {"Player 2": 110}, {"Player 2": 112} ] Into this... var series = [ {"Player 1": [100,103,105]}, {"Player 2": [101,110,112]} ] --- Secondly, are you sure you want an array of objects as the output? Rather than an output like this? var seriesAsObject = { {"Player 1": [100,103,105]}, {"Player 2": [101,110,112]} }; It depends on your ultimate goal on what you are going to be doing with the output, but if your goal is to get a list of values for a player then having your output as an object is better to work with. E.g. to get the values for player one you would just use `seriesAsObject["Player 1"]` to grab them. If that's the case then you could use this code: var objArr = [ {"Player 1": 100}, {"Player 1": 103}, {"Player 1": 105}, {"Player 2": 101}, {"Player 2": 110}, {"Player 2": 112} ]; var series = objArr.reduce((series, obj) =&gt; { var key = Object.keys(obj)[0]; if (!series[key]) { series[key] = []; } series[key].push(obj[key]); return series; }, {}); console.log(series); 
A sample data set would help.
When they saw PWA do they just mean "webapp", because as I understood it the P part of it means it should be similar to or outperform the native app on mobile. What are the metrics of the app as used on mobile vs native?
arr.values();
Here you go! https://imgur.com/a/YroUb
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/bqi4DCq.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20drsjkq4) 
PWA is a loose standard that includes push notifications, working offline, allows saving a shortcut to the home screen, splash screen, full screen
The ES8 `Object.values()` does what you're looking for based on your sample data
 var series = objArr.reduce((obj, row) =&gt; { let [key, value] = Object.entries( row )[ 0 ]; if ( ! (key in obj )) { obj[ key ] = []; } obj[ key ].push( value); return obj; }, {});
styled-components
Right, and the point of all of that is to make it competitive on mobile right?
How do you do this on iOS though?
That seems to be returning an object, not an array. If you want something of the shape `[{id, name, credits}]`, do `Object.keys(data).map(k =&gt; data[k])` (or `Object.values(data)` if you don't mind polyfilling it)
Maybe I missed it, but no mention of SSR?
Hi /u/jfishersolutions, I skipped through the video and didn't see anything about javascript; am I missing something?
I always thought the goal of prettier is no config at all. Why would anyone switch from eslint otherwise?
Hey, the slider animation on the page is done with javascript. I don't walk through the JS code in this video, but will in the next. I can delete the post if you don't think it is relevant enough, but thought it could be useful to demonstrate.
&gt; This is why I think maybe people should spend a little more time learning how the web/browsers work before jumping into web dev. This. I mean seeing some threads on this sub, some people doesn't fully understand the client-server model and ask if they should use angular or react ... Maybe we should improve the [faq](https://www.reddit.com/r/javascript/wiki/faq) visibility and add few entries about the basics of web dev.
Yes, good point. 
Why would one use 2 spaces? 4 or go home
That's ok, I've already removed it since it didn't look to contain any JS.
https://en.m.wikipedia.org/wiki/Same-origin_policy
Okay, I'll make sure any more posts of mine here contain more JS. My apologies. 
The first version had minimal config, and as its grown in popularity it's added more. The purpose was never "no config", since that'd be like using eslint with a single _preset_. Its purpose was the formatting of code, which eslint does not always do so well. Ideally, you'd use both eslint and prettier.
Ocaml is pretty cool. Shame it's not more popular than it should be. I'm cautiously optimistic about the ReasonML project for this reason. 
I'm not sure if there are auto formatting features which prettier implements better than eslint.
Seperation of concerns.
Can eslint wrap on columns like Prettier?
You triggered the wrong people, buddy!
Read the brief and your link in a bit more detail. Only applies to java script, and not relevant to post requests if you own both servers. 
Can prettier wrap on columns in the way I want it to be wrapped? What I mean is that these auto formatting features of prettier are useless, as they can't follow the custom config. Something primitive like trailing commas, indentation symbols, extra spaces/tabs can be fixed by eslint.
IMHO, JS should be seen as an enhancement rather then a requirement. I know many people who will browse the web with JS disabled (myself included). Far fewer people disable css so for those people, at least basic styling should be available without JS
As someone who’s spent a lot of time with TS: Flow exists because typescript sucks. TS exists because it has first mover advantage and people somehow ignore all the time they waste getting typescript to work with their build system.
People like you are why I always use tabs. You obviously prefer your indentation to be bigger, and that's fine if it helps you. I see as much reason to force you to use 2-wide as I see a reason to hard-code the syntax highlighting and your editor's color scheme for you. TL;DR: Discussing 2-wide vs 4-wide is irrelevant with the tab masterrace.
so you want an array of arrays with just the values, instead of an array of objects with keys and values? lets say the original array you get back is called data const newData = []; data.forEach((el) =&gt; { const arrayTheObjectBecomes = []; Object.keys(el).forEach((elKey) =&gt; { arrayTheObjectBecomes.push(el[elKey]); }) newData.push(arrayTheObjectBecomes); }) the newData array will be what you want. you can rewrite this using map if you like.
it's up to Apple to support it. chrome on iOS is supposedly just a re-skinned safari.
Check my original comment 
It's not stupid, there are good libraries that do this. It's just a bit of work to make your own, and have it support the full range of css selectors (pseudo-classes, media queries, keyframes, etc). Maybe you mean that you'd just literally move the string over from the JS file without doing any parsing on it? In that case, I guess you lose syntax highlighting and linting, and it would make it harder to use things like Stylus/SASS/Less.
I think CSS-in-js is actually the future. Personally, I don't encode it in a string, but use an object notation. My code looks like: ``` DIV width: 30 height: 50 "Hello there!" ``` A preprocessor converts this to: ``` DIV({style: {width: 30, height: 50}}, "Hello there!") ``` Which then becomes this DOM: `&lt;div style="width: 30px; height: 50px"&gt;Hello there!&lt;/div&gt;`. This is just one approach to CSS-in-js. There are many others being developed in the React and Vue communities. Read the last two paragraphs of [this section](http://varun.ca/convergence/#passing-data-into-a-component) (the ones that start with "More often though, scoped CSS in React is achieved using CSS-in-JS based solutions such as...").
can a non-native speaker pass?
If you load CSS with javascript then it still needs to be, then, parsed into the CSSOM which will then style the elements. Javascript adds an additional step which also needs to be interpreted beforehand. None of this makes any sense at all.
Question: as someone who just finished a class where the instructor demanded that we use 4 spaces, why 4 over 3 or 3 over 2? 
Indentation makes code easier to read and understand. And 4 makes it the best. Proper distance so blocks are best distinguishable and even number which enters best
How do you do anything online with JS disabled or what sites do you browse that work without it? 
This is the correct answer. You should rethink your code and build an object rather than using window/global scope. This is much less likely to bite you in the ass later. 
Doubtful, CPU is the currently limitation brought on by JS parse and compiling into byte code. Essentially, using css in js adds an additional step before the css can be read as byte code and sent as commands from the Browser Software to the GPU.
If you own the second site you could add CORS header to server responses, but even without that you could make simple request to it and save data, just make a request to second site (by xhr/fetch as we're in r/javascript), where you've got eg. PHP server with something like &lt;? If(!empty($_POST['comment'])) file_put_contents(microtime(true).'.txt', $_POST['comment']); /* additional encapsulation are welcome ofc
They should have put "trailing comma" to es5 as default.
TL;DR - Adds additional work for the CPU which is a current bottleneck.
ie9 has a feature where if a file has more than 4095 styles in a file then it ignores all proceeding styles. So say you have 20 JS files all adding styles to index.html those all count as one file. If you loaded from multiple CSS files you wouldn't have that issue. (This came up recently at my company. I'm going to have to reconfigure our build system.)
&gt; - CSS: Tinder also removed critical CSS from their core bundles (as they had shifted to server-side rendering and delivered this CSS anyway) I believe that's the only mention.
&gt; Another dependency in the critical path is a 200KB Facebook SDK script. Ahh yes, the script I so far refuse to use. Good write up, will be a nice reference in the future.
FYI, the challenge is for *arbitrary* data. For predictable data, it is possible to write a decompressor that is smaller than the expanded data. For example, if the data follows the format of "0 or more characters, repeated n times" I can send you a for loop that creates the uncompressed data that is much smaller than it.
Learn TypeScript.
The answers are good, but the bigger point should be that the structure of the data is bad. You shouldn't be using a singleton object to represent player=&gt;score. It should be something like [{ "playerNumber": 1, "score": 100 }, ...]` instead, which would make the transformation much easier. Alternatively, this could also be represented better as a tuple: `[[1 100], [2, 101]]`. This generally has the disadvantage of being less readable, esp. in dynamically typed languages, but has the advantage of being easier to destructure / transform.
Not sure why you got downvoted,... this kind of question naturally leads to a discussion of meta-programming, in which `eval` is an obvious and powerful tool... `window` is just a project for context / environment. Except... we don't always have access to lexical scope, so it's not a valid answer. It would be cool if we could do something like this: ``` function foo() { var letter1 = 'a'; var letter2 = 'z'; return __scope__['letter' + flip() ? 1 : 2] } ``` but we can't. The solution would almost certainly involve something like `eval`.
I almost picked up that ‘JavaScript’ book the other day.
Yes! That's the only setting I change. Not sure what the reasoning would be for omitting that default.
4 is overly excessive and leads to long unnecessary indent blocks. 
Huh? CSS has to be parsed too. You're just not used to thinking about how long it takes to parse CSS. Run some benchmarks. It's no faster to parse `div.foo {width: 30px}` than it is to parse `DIV({width: 30})`.
You will need to implement login with social media sites, so you will end up using one if you intend to have that
The best way to learn about `this` is to never use it. I know this is completely counter-intuitive, but it exposes you to how the language is actually organized, which in turn makes understanding `this` incredibly simple.
Have been trying to get this to work for so long. Just something so simple ... I just don't understand at all.
You rule the world
Definitely possible. Then your style moves in the direction of functional programming. But I find that with automatic (implicit) strict mode (via ES modules, either transpiled or native) and the simple rule of “never use `function` (only arrow functions and method definitions)”! `this` tends to just work the way you’d expect it to.
Why does everyone use spaces vs tabs?? You just need to configure your editor once and its much easier and preserves indentation easier. I also use single quotes when possible. In fact prettier should have an option to convert all quotes to ES6 backquotes.
If your dad is serious about maintaining the website himself I highly recommend learning php and implementing a Wordpress backend. This will allow him to easily log in and edit content himself without having to fiddle with code.
I assume you have an un-ordered list containing list items with anchor tags inside them. Something like the below would work for future reference. &lt;ul&gt; &lt;li&gt;&lt;a href="linkToPageHere"&gt;Page Name&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; [W3 Schools](https://www.w3schools.com/html/) has some fantastic explanations which I really found helpful when learning web development. Goodluck friend.
Trade crypto currency and stop working
Hi u/elgoogled! Your issue is that you're running the javascript before the body is loaded. In other words, the code is looking for an element that doesn't exist yet and it's erroring out. You can see this error if you open up your console (On mac/chrome, cmd-option-j. Not sure what is for Windows but something you can google.) You can easily fix this by moving the script below the the main content in the body. &lt;html&gt; &lt;head&gt; &lt;style&gt; #title_text {} #title_button { margin-left: 735px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="title_text"&gt; &lt;h1&gt;&lt;center&gt;welcome to website.com&lt;/center&gt;&lt;/h1&gt; &lt;button id="title_button"&gt;- CLICK HERE -&lt;/button&gt; &lt;/div&gt; &lt;script&gt; function changeRed() { document.getElementById("title_text").style.color = "red"; } document.getElementById("title_button").addEventListener("click", function() { changeRed();}); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; I tried not to change your code so it's straightforward for you to see the difference. There's some other things we can do here to clean the code up but let's just start there to get it working. Also, for the future, you can copy and paste your code into something like https://jsfiddle.net which will make it easier to help you out.
Don't think this is is still the case, but the fact that Flow depended on OCaml definitely limited its adoption early on. Last company I worked for, we couldn't get Flow to run on the CI due to OCaml. It entirely defeated the point of having Flow in a CI workflow, since developers can check-in poorly annotated code, which was a problem we already have in documentations. 
Is `this` really that complicated? it's very comparable in 99% of use cases to `self` in python, `this` in java, c++ and various other languages, and so on. The only time `this` in JS can be confusing is within callbacks and, given all the complicated things devs have probably learnt before hitting this, it's not a big leap to use an arrow function or `.bind`. I'm ranting a little here, but it feels like many people are creating tutorials/blog posts specifically for "understanding `this` in JS" as if it's some major issue when it's not... am I alone here?
Make ICO sites and scam people
Until the bubble bursts and you have to work again.
The post is about a different way to explain it.
Now get a brain surgery, rid of js knowledge part from your brain and learn a real programming language. And don't repeat your mistake ofcourse. 
People write blog posts to "prove" to potential employers that they "understand something". 
The goal was always to have a flexible formatter with reasonable defaults. Plus, I don't believe eslint formats all the other "flavors" and DSLs in JavaScript such as typescript and graphql query strings.
Why is everyone shitting on JS? Genuinely asking... I'm self learning and JS is what I've started with 
I can imagine that from a "I want to try technology X what shall I build" perspective this would be a nice thing to build. But seriously it's a flattened JavaScript object with 14 properties so a configurator seems overkill. If you're looking to add something, a preview of the selected config would be nice.
I learned the value of prettier as my dev team grew, all with different coding styles and many who just don't care what their code looks like. The output of prettier isn't always to my taste, but it is at least consistent.
Says the guy subbed to a subreddit just to shitpost.
Was only joking :/ 
JavaScript was originally developed in a little over a week, and has had a history of having haphazard updates and adaptations that would leave its userbase frustrated. On top of that, there's a high volume of frameworks being released on a frequent basis. However, from when I started dabbling in web development as a hobbyist, JavaScript has definitely made strides in the right direction to be a formidable language, as the article has stated. I've definitely felt more comfortable using the language, and am glad that is the case since it is required for front end development.
 function foo() { var letters = ['a', 'z']; return letters[flip() ? 0 : 1]; } I know it's _just an example_, but while `eval` may have it's uses, this _kind_ of example doesn't really _need_ it.
Good work Addy!
It's just a good habit. Prettier sometimes makes mistake.
&gt; Run some benchmarks. It's no faster to parse div.foo {width: 30px} than it is to parse DIV({width: 30}). Interesting. Has this benchmark been run on anything longer than a single selector and rule? Does it account for the fact that CSS is prioritized over JS in the browser asset pipeline, that JS blocks the main thread when it's being interpreted, or that JS engines on mobile are generally several times slower than native code? P.S. it's Just-In-Time _compilation_
This (pardon the pun) makes no sense. How can you learn about something by literally not using it? What part of ignoring this leads to understanding how it works?
In one sentence, this is the global object unless you're inside a method of an object, in which case it's that object.
Yeah, ofcs. I just wanna speak bro ;)
Amazon is a good example. It can function very well indeed
You shouldn't switch from eslint to prettier, as they do two different things. Use eslint for linting, use prettier for prettify.
I'd highly recommend looking at [vanilla JS](http://vanilla-js.com/) If you click on a couple of the dependancies you'll see how super small it is. 25b gzipped! 
Many developers have large egos but low self esteem and feel the need to prove themselves constantly. Hence on your journey into this micro cosmos you will encounter many wars where prestige is at its peak. Some are about programming languages, other are about implementations, yet more about frameworks and libraries and conventions. Some people need to keep on reminding others about their own excellence and argue that their personal preferences should be law. Don't get caught up in it and don't let it get to you either. Focus on bettering instead of bolstering yourself and you'll do much better in software development and likely in personal development as well. 
console.log("write code, I guess.");
Now try grammar.
It's strange that the way it binds is so dependent on the _syntax_ of the way it was called. E.g. this.someFunc() vs method = this.someFunc; method(); In Python, the second would be a _bound method_, and this would be set exactly the way it was in the first; but in Javascript, only the first is called with `this` bound. I find that extremely confusing still, you'd expect those two lines to do the same thing in most languages.
That just hides the complexity in the definition of "method of an object".
Sure, what's your one-sentence explanation?
I don't think it can be adequately explained in one sentence. It's not incredibly complicated, but there's more to explain than what fits into one readable sentence.
Use both and sync their configs? Sounds cool.
Use https://github.com/prettier/eslint-config-prettier Don’t sync anything. Don’t replace eslint with prettier. Use eslint. Optionally use prettier.
For some reasons I have custom config in eslint, with numerous rules which can not be autoformatted. How should I use prettier in this way?
Okay thanks 
There are some sites I use JS with but to be honest, most sites I need to visit work without. I know that I am not alone I this. I'm afraid I can't remember where I read it but a recentish (within the last year or two) I read that estimates between 3-5% of site visits don't run JS. Take that with a pinch of salt as tracking non-JS users is harder but I definitely think that it is too many people to ignore. I am a web developer who uses JS so I'm not saying you shouldn't use it, I just don't think it should be a requirement for a functional site. 
Autoformatting = Do you mean fixing your code automatically? Use eslint for linting, not for formatting. I don’t understand how a custom eslint config is preventing you to use prettier.
Prettier will not be able to autoformat the code according to eslint config. Did you get it? All our pull requests are validated by eslint on ci side. Prettier formatted code will not pass ci validation. It actually can pass the ci eslint check in case of very simple eslint rules, but in this case what the meaning of eslint+prettier at all?
How is that any different than last time though ?
I think you're looking for the word "permutations" They come in different forms but this looks very similair
I'm sure this has been said but maybe you shouldn't put it up to your client to do all the work to load the style for themselves. Maybe the style should be immediately there and ready for them to interpret... 🤨🙃
Short answer: shit meme repeated by students who don’t know what they’re talking about. Long answer: JS used to be quirky as heck but is now a lot better. There were legitimate grievances with it. You wouldn’t have wanted to use it in half the ways it’s used now. This spawned some negative hype, fast forward a few years and people who can’t think for themselves still shit on it. 95% of the time it’s in good humour though so don’t let it bother you :) there are also legitimate reasons you may want to learn on a strictly typed language, since generally you’ll learn a lot more about what’s going on under the hood than you otherwise would with JS.
Immediately begin writing for Medium.
I don't think the goal of a PWA is to outperform the native apps, because that would be nearly impossible. One of the biggest benefits is that you don't need to go through the app store and download a potentially huge file. You just come across it like a regular web app, add to the homescreen, and off you go.
LOL, I doubt Axel Rauschmayer has anything to prove to anyone...
&gt; The only time this in JS can be confusing is within callbacks I think you overestimate your understanding of `this` ... var scope = 'global'; var simple_cake = { scope: 'cake' }; var simple_pie = { scope: 'pie', overestimate: function() { console.log(this.scope); }, over: function () { var estimate = () =&gt; console.log(this.scope); return estimate(); }, estimate: () =&gt; console.log(this.scope) }; (simple_cake.overestimate = simple_pie.overestimate)(); // ??? simple_pie.estimate(); // ??? simple_pie.over(); // ??? Without checking, do you know with 100% certainty with the above will do? And even if you do, do you think most devs would?
Unusual to you, on the other hand perfecly normal to a "native" js dev
The real repo for this is here: https://github.com/marijnh/Eloquent-JavaScript
It's not so sumple, and you forgot arrow functions, .call, .apply. 
Haha, i really like that :)
Didn't forget, that wouldn fit into a single sentence. In other words, this is a handy way for a method to reference its object. Among other things.
I'm replying to the argument that it's very similar to other languages, including "it's very comparable in 99% of use cases to self in python". Well this part of it is very surprising compared to other languages. Of course it's perfectly normal to a JS dev, but then what language feature of any language isn't perfectly normal to a "native" dev of that language?
&gt; dditional work for the CPU which is a can you elaborate? is css not a load on the cpu if its in a css file, but is if its written in js?
Totally agreed. `this` should not be used.
It's complicated because it's pretty much an automatic variable that JavaScript declares and defines differently sometimes. It is also very poorly named because of this. If I were your teammate and wrote some code with a variable named `thing` or something, would you be cool with that? `this` obviously is intended to mean "this object" but that idea of what the object is changes. It makes things hard to reason about compared to when you simply don't use it at all, which in my and others' opinions, is better.
JavaScript
This article forgets the most important rule: spaces is better than tabs.
https://www.humblebundle.com/books/be-a-coder-books Referral free link
Because Javascript is the new PHP. PHP was the easiest server-side language to start on, because it's loosely-typed, so there was A LOT of garbage PHP code, which meant that people assumed ALL PHP code was garbage. Now, Javascript is the easiest every-side language, and there is A LOT of garbage Javascript code, so people are now assuming ALL Javascript code is garbage. With great power comes great responsibility.
https://www.humblebundle.com/books/be-a-coder-books Referral free link
Thank you. I currently work as a QA/BA and I've ran into egotistical developers before. I realize now that, that sense of supremacy also extends upon one's tools and method. &gt; Focus on bettering instead of bolstering yourself and you'll do much better in software development and likely in personal development as well. This is an awesome LPT
Ah I see, in terms of framework... is Node for backend and Angular for front end?
Wow didn't realize it was developed in such haste. But it's kind of funny as I chose JS because of its popularity and that certain technologies are based off of it. Such as blockchain and SalesForce's VisualForce (front end language for SF). 
A solution off the top of my head using recursion. It is not close to ideal. 1. The first digit will always be part of the set. 1. Check the last element of the current set with the head of the remaining digits to see if it's a valid letter (&lt;= 26) 1. Then continue processing both paths: single digit and double digit. Here is a jsFiddle you can play around with: [fiddle](https://jsfiddle.net/g1Lxcrxg/) var arr = Array.from("125127"); var process = (currentSet, [head, ...tail]) =&gt; { if (typeof head === "undefined") { printAlpha(currentSet); return currentSet; } var last = currentSet.pop(); var next = last + head; if (+next &lt;= 26) process(currentSet.concat([next]), tail); process(currentSet.concat([last, head]), tail); }; process(arr.slice(0, 1), arr.slice(1)); var CHAR_CODE_OFFSET = 64; var printAlpha = (a) =&gt; console.log(a.map(i =&gt; String.fromCharCode(+i + CHAR_CODE_OFFSET)).join()); // prints L,E,L,G L,E,A,B,G A,Y,L,G A,Y,A,B,G A,B,E,L,G A,B,E,A,B,G 
It's a form of cyclic permutation which can be accomplished quite neatly with recursion. Just like with anything else you'll want to break it down into small bite sized steps. First thing I like to look at are the edge cases to try and get a sense of the shape of the problem. Trying to box it in and make it more tangible. For example there's only one 5 letter word, i.e., ABEAG, when each number corresponds to a letter. And the minimum letters in a word is three because a letter can be made up of a *maximum of two digits*. Some combinations or captures of digits, like `51` will overflow, i.e., be larger than `26` AKA `Z`. We'll make a note of this and ignore it for now. We can divide the problem into three parts. There's multiple ways of doing this, but here's one: 1. Capture all combination of digits. 2. Transform each combination. 3. Remove garbage. Here's a jsbin with a working sample: https://jsbin.com/woqoquzebe/edit?js,console
I don't know who that is but it doesn't make it any less true for other blog posts!
If JS is your first language, truly mastering it will allow you to make the jump from coding on the side to coding for a living. Then, you get paid to continue learning!
i'm a native js dev, and this is weird. i would expect instance methods to be bound. it's not like you're aliasing a method/function off the prototype.
60KB minified. Ouch.
Node is a JS runtime that makes it possible for JS to be used on the backend. Yeah, Angular is a frontend JS framework.
Use https://github.com/prettier/eslint-config-prettier
I agree that refactoring is the right way to go, but that's avoiding the problem rather than solving it.
Not bad for a crossbrowser compatible api. Not everyone had a modern browser. 
Gotcha, thank you. 
I'm just trying to imagine building a website or web app that doesn't rely on Javascript for something. All form submissions will require a redirect with another full page load. I mean, really, all interactivity will require server calls, redirects, and page loads. I guess it works, just seems really cumbersome. I can easily ignore 3 - 5% of websites. I mean, I would like to know how many of those sites are relevant or popular? 3 - 5% could easily just be old sites that were built in the mid 90s and are still being hosted. I guess it goes back to the &lt; IE10 debates about whether the net profits to be made off targeting that niche offsets the costs of implementation.
Howler is about 30KB I believe.
Don't laugh. Some people are stuck with jQuery.
It's been awhile, but I think that if you work the list from back to front, you have a pretty clean Dynamic Programming problem.
That's because JS doesn't really have "instances" and "methods". People keep trying to treat it as a classical OOP language (i.e., Java) and it isn't. All it has is objects with their properties. Some of which can be functions, but they can be passed around, deleted, reassigned, etc. These functions don't exist "in" the object. It all depends on _where_ they are being called.
It's 7KB when gzipped.
TBH it's probably a poor idea to ask a community dedicated to the programming language this kind of question, if they weren't going to respond "they're all assholes who have no idea what they are talking about" they wouldn't be here in the first place.
&gt; Not sure why you got downvoted Probably people that read that a famous person said it's evil, and took that at face value without giving much critical thought. As for valid uses for eval: it's literally the `E` in `REPL`, so if you ever typed any code in the browser console, you've used it. It's also an extremely powerful tool when working with code-generating code. IIRC, Ext.js' selector engine used to compile js strings and evaluate them for the sake of performance. Heck, the [grandfather of uglifyjs](http://dean.edwards.name/packer/) used eval.
Ok, but you have to take into account parse size, not just gzipped size. Network speed is generally not the bottleneck these days.
I asked only because of the overwhelming responses bashing JS on an subreddit based on it. It was just baffling because I thought perhaps I missed something, as I'm new to the programming world. But based on the responses I've received, it's just that JS had a bad rep in the past and many programmers are holding grudges to its' past rather than looking at its contributions. 
&gt; There is a running joke where you can see the “Definitive Guide to JavaScript” book next to Douglas Crockford’s “JavaScript — the good parts”. The latter is much, much smaller. &gt; This doesn’t mean that JavaScript is bad. It means that the versatility of JavaScript can be its own undoing. That is comparing a single apples to a fruit-salad for the whole resaurant though. The Definitive Guide includes a lot of reference material concerting the DOM and such where The Good Parts conentrates on th ecore language. Of course it is going to be smaller: its focus is much more coinstrained.
Sorry for the confusion. I meant 3-5% of users, not websites. Form Submissions would need a (re)load but if JS is enabled it is trivial to overide that behavior. If you give it a go you will probably find that you don't have to change the way you work as much as you might think.
first, i understand all of this. &gt; That's because JS doesn't really have "instances" and "methods". the "not an OOP language" claim is a hard pill to swallow when many OOP-isms have been part of the ES standard since day 1. js has `new` and it has "methods" defined on the prototype, and pre-bound `this` context (based on a specific `&lt;instance&gt;.method()` calling convention). the only thing it didn't have until ES6 classes was an elegant way to do classical inheritance. 
Not related to your issue and I know you're a beginner and all, but before you get used to using it, `&lt;center&gt;` is [obsolete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center) and shouldn't be used anymore. It's also a good indicator that whatever source you're learning from is probably outdated.
Absolutely. Was just pointing out what the gzipped size is. That's all.
&gt;based on the responses I've received, it's just that JS had a bad rep in the past and many programmers are holding grudges to its' past rather than looking at its contributions. According to the programmers in /r/javascript still using JavaScript;). My point is you can't walk into a synagogue to ask why everyone is bashing on Jerusalem and expect to walk away with the full story; you probably want to find somewhere more neutral to gather info. If I was to comment on JavaScript nowadays I would I'd say I use JavaScript weekly but it's not the be all end all great language with less faults/limitations than others though it is usually convenient and not outrageously broken anymore. People are still trying to solve problems not well covered by JavaScript even in it's original web use case which is why Mozilla, Google, Microsoft, and Apple have just finished initial work on WebAssembly.
&gt; instructor demanded that we use 4 spaces, why Because some people like to push their preferences down other people's throat. To be fair to the instructor, instructors frequently deal with students that can't even be bothered to indent code properly and it helps them grade code in a timely manner if he can align incentives (your marks) to metrics that benefit him (code that is readable to him).
I mean, if you're using a Javascript framework for your application, it's essentially broken/unusable. I see what you're saying, though. Might challenge myself with a small project to see what it would take to build a modern website or web application without using Javascript. I can't imagine it would be a very user friendly experience given all the full page reloads along with page elements not having any interactivity or so many of the subtle animations that give users feedback so they know something is loading/processing in the background and that the page just isn't locked or taking a long time to load/reload. 
Oh, I know. My current position exists, because the front-end was JSF (Java's Stupid Frontend) and jQuery. If you're unfamiliar with JSF, let me tell you it's a thousand times worse than jQuery. The html template files? They're .xhtml, which means they're parsed as XML, meaning you can't use things like `&amp;&amp;` or `!!` in them without it throwing an error. Even `&amp;nbsp` throws an error. They've finally decided to make a back end and a front end, but now all the BA's are fucking confused and trying to give me Java tickets, and I'm like, "God dammit, you don't even know what I do!"
Yeah, that's fair. CSS is definitely more predictable than randomness. Still, very hard to beat having the decompressor ship with the browser though :)
&gt; I would say I use JavaScript weekly but it's not the be all end all great language with less faults/limitations than others... though it is usually convenient and not outrageously broken anymore. *People are still trying to solve problems not well covered by JavaScript even in it's original web use* case which is why Mozilla, Google, Microsoft, and Apple have just finished initial work on WebAssembly. This answers my initial query quite well thank you! I think as I continue to traverse down my path and discover additional languages that certain things may be better in JS while others can languages are better at resolving issue *x*. 
This post hits too close to home as I have gone through the same experience. Typescript doesn't fit well with Redux and it definitely doesn't work with Immutable.js. My first proposal is to drop Immutable, instead use ramda or lodash for immutable updates. To ease the pain of using redux with typescript I suggest not type-checking action types, only the store and the action creators. I don't think the huge amounts of boilerplate is worth it, just my opinion.
TL;DR: New package names have all punctuation stripped from them and are compared to existing package names. Package names that are equal will be disallowed NPM encourages you to use scopes if the above scenario happens. If you use a scope, make sure to publish with the --access=public flag as scopes are private by default. I think this is a step in the right direction. 
Punctuation should have just been ignored from the beginning - `react-native` and `reactnative` should have just always resolved to the same package. Similar to how you can add dots anywhere to any gmail address and it will resolve to the same mailbox.
&gt; Turns off all rules that are unnecessary or might conflict with Prettier. Ok, I see, you didn't get it :)
That's a surprise, I work at gskinner the company behind this library. If there's any questions or comments I'll try to answer them or pass it along to the developers maintaining the library.
What does gskinner do? 
Agreed. Btw, are you the creator of Mithril?? I recognize your username. I love that framework, I used it in a big project at my last job!
My two cents, both as an author of one those frameworks, and as someone who works on a team that built a [large-scale app specifically targeted at slow network mobile markets](https://eng.uber.com/m-uber/): Stephan Krauser's benchmarks are largely measuring micro-optimizations at this point; a difference between 1.26 score (react) vs 1.22 (preact) won't really be that big of a deal. Virtual dom library performance doesn't scale. As soon as you have an infinite scrolly thing or a somewhat long list, the virtual dom system will start to choke and you'll have to implement a custom solution, no matter how fast the library looks in the benchmark. Performance is lot more nuanced than just picking a library that does well in some specific benchmark. If you really truly care about perf, you'll have to do a lot manual tuning, both using the library's APIs and in various other areas (for us that included aggressive removal of just about every piece of code we could from the browser, including rolling custom babel polyfills) If you don't really care that much about perf, there's still a lot of things that can easily give you more bang for the buck than using an obscure library. Compression is by far the number one overlooked thing: image compression is super easy to add, and brotli can give you some real savings if your user base is heavily on Chrome. Font loading is another aspect that most people don't think about but that can easily get messed up when people don't understand the browser asset pipeline and do-everything-including-css-in-js.
I got it right, but honestly if I ever encountered new code that looked like that I'd take away the author's git privileges. Why would you call the result of an assignment ever? And unless you are seriously green, why would you use `this` in an object literal method? At my work, our rule is pretty simple - only use `this` inside class methods. If you need to reference `this` from within a callback within a class method, use an arrow function for the callback. The problem with developer understanding of `this` is mainly that jQuery which was so ubiquitous at one point completely butchered the meaning of `this`. They used the keyword in such horrible ways that people just started to believe that `this` is pretty much completely unpredictable in JavaScript. The reality is that if you use `this` as a reference to a class instance from within class methods, and understand dot notation and binding, it's not as awful as it seems.
I think we'll have to disagree on this. Having 'new' doesn't make JS an OOP language any more than having lambdas makes Java a functional language. I don't know what "prebound this" is supposed to mean, but this is dynamically scoped (except for arrow functions and the Function constructor). And "super" in ES6 only works in the constructor, so that's another example of non-OOP-ness of JS. For what it's worth, Eich, the creator of JS, fought NOT to have classes in ES6 - but sadly there are people who find OOP reassuring
&gt; At my work, our rule is pretty simple - only use this inside class methods. You are also, like many others, straightjacking JS into an OOP paradigm
wow i didn't know that gmail thing
So what's another good use case for `this`? Can't say I've ever seen a reason to use `this` in functional code.
Yep, that would be me :)
Yes, thank you. Previews are a great idea that I definitely hadn't thought of. This is actually the start to a much larger project. Eventually, I want to have a suite of configuration managers. The ultimate goal being a platform for building UIs for configuration files. The holy grail being a comprehensive UI for infrastructure as code like AWS CloudFormation.
How did this turn into an argument about space vs. tabs?!?! Programmers are so funny
How did this turn into an argument about space vs. tabs?!?! Programmers are so funny!
&gt; Having 'new' doesn't make JS an OOP language any more than having lambdas makes Java a functional language. having `new` create an object/instance from a prototype (or class) with pre-scoped methods where an implicit `this` within the methods points to that instance is a fundamental part of OOP, AFAIK. that's kinda what i mean by pre-bound `this`. &gt; And "super" in ES6 only works in the constructor actually, no: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super &gt; For what it's worth, Eich, the creator of JS, fought NOT to have classes in ES6 that's fairly irrelevant. facades to mimic super/inheritance (a la OOP) over JS prototypes have existed since basically forever. it was not such a huge leap forward to build this sugar into the language since `new` &amp; `this` were already out of the barn.
If you’re streaming audio, you’re probably not gonna notice the 60k lib. 