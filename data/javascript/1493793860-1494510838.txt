It looks okay, and in Chrome it runs fairly smooth. I probably wouldn't noticed much of a difference up front. However, I'm noticing a silly bug. When I hover over the menu items on the left sidebar, the scroll bar for the main content area disappears, and shifts the content over slightly. When I move my mouse out of the left sidebar, the main content area shifts back as the scrollbar reappears. At first I thought it was one of my extensions messing with it. I have an extension that gives YouTube a dark theme. Nope, not the culprit. Does the same thing in incognito, and in FireFox. It also runs *very* slow in FireFox.
&gt;what? what features related to ID objects does it not support? One difference is it not following the standard in cases where multiple elements have the same ID. &gt;the url fragment links (#) are broken on that page The page is just gigantic, and the browser needs time to parse all the HTML before it jumps to the hashtag link.
&gt; Polymer uses several polyfills to run on anything ~~that's not based on Blink~~ that didn't implement Web Components v1 Fixed that for you.
Without building, compiling and then inspecting the lib for myself, I can't tell you if 1.2kb is particularly well optimized. I can, however, tell you that you should never be justified in avoiding a technology just because it is seen as large or bloated. Premature optimization is the root of all evil. In defense of react, it provides a principled, but powerful component API that enforces all the things you wish were enforced when your codebase no longer fits in a single developers brain.
Await / Async makes knowledge about Promises even more important Knowing about Promises will specially help to use and debug Await/Async functions because they "hide" the promises, not replace them
Like I said, this has nothing to do with that. Watch literally any component example like polymer shop demo if you don't believe my word (https://shop.polymer-project.org/ or https://news.polymer-project.org/list/top_stories). It doesn't have any of that crap in Firefox. It's something specific just to yt app. The polyfills are small, here we are seeing yt resources embedded incorrectly in source html. Normally the code you write is the same for all browsers, regardless of their capabilities. Webcomponents-lite.js handles the rest for you. And it's 20kb total, here we see additional 100kb HTML out of nowhere based on user agent.
a man can dream :,)
Vinnl - not really - check https://news.polymer-project.org/list/top_stories or https://shop.polymer-project.org/ under firefox this works great. This has nothing to do with polyfills - I checked the source and it seems YT backend does some agent sniffing and it serves three times more html markup to firefox than to chrome. Indeed this is not firefox that should be blamed, but also not polymer or polyfills - this is something stricly related to YT application. The code also seems machine generated, like GWT/gmail stuff.
Sorry you got things a bit incorrectly - lots of guesses in this thread, but unfortunately some of them are mistaken. Polymer is a small library that you can use to create components. Material design is NOT part of it - it is implemented as actual components (higher level stuff) and is completely optional. Same with shadow dom - you don't need to use it if you don't want to. Yes, you have to polyfill some stuff if native browsers don't support it (currently blink and webkit based browsers support it) - this is correct - but the size of polyfills is 20kb - which makes polymer with polyfills smaller compared to other popular solutions. 
Actually the ui performance is OKish (at best) for me on firefox, but something is really messed up there compared to chrome - for starters it gets completely different HTML document.
A yeah, the infamous 0.5.x - that stuff was certainly not ready for production. I started using it 1.4.x onward and it worked great - It even works on IE10 for components I created - although this browser is unsupported oficially.
If you want to use the debugger in VSCode, I think you need to have a package.json file in your project describing the entry-point to your program. There may be a more convenient way do it in a single file context, but I've only used it for projects. So add a file called `package.json` in your workspace (open the *directory* with VSCode, either by right-clicking the directory in explorer/finder, or writing `code .` on the command line) Put this inside the file `{ "scripts": { "start": "node helloworld.js" } }` Now when you (re)start the debugger, it will run your program with Node. The problem is, your program doesn't actually output anything or wait for anything, it will just exit immediately after finishing and give you nothing. You can call your function at the end of the file and see the log, but that's it. If you want to access parts of it *as it's running*, you can put in *breakpoints*. These tell Node to pause right there and show you information about the current state of the program. Click the last line number in your `helloworld.js` file and a red circle should appear to indicate a breakpoint. Now as you restart the debugger, you can see all the variables, but also manually call your function with `helloWorld()` in the debug console as long as you are paused. You can add these breakpoints around to inspect your program in various stages and press F6 or the green play button to resume it (until it's finished or next breakpoint is encountered).
I have just wasted a couple of hours on this too. Running: npm install pwa-manifest-webpack-plugin@1.0.4 Seemed to work for me
Yep, they do not have the viewport set, and unfortunately I could not view the page in the chrome browser on android mobile. I am not sure if we could call the site responsive if it displays only on desktops :) http://imgur.com/WRXwaMg As for the desktops, on chrome it works like a charm!
Go to the menu View &gt; Integrated Terminal (Ctrl + '). That brings up the console you're looking for, aka terminal in VSCode as others already pointed out. 
&gt; the component problem already got solved within JS You obviously have no idea what web standards are about.
I think part of the goal is to show that there are many ways to skin a cat. 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
If I am understanding you are wanting to replace specific text foreach item within array1 with specific text from array2? I think we need more information. 
It's a library that lets you use web components before they're available in browsers that don't support the technology yet, by adding polyfills as needed. Web components are the W3C version of custom elements/React/Angular (just so you understand what I'm talking about).
&gt; Whom'st'd've
&gt; Normally the code you write is the same for all browsers That's the goal. It should be the goal of the use of Javascript based solutions, including this Polymer. If you're going to make browser dependent code, there is no reason to do it client side. You can just as well generate clean html on the server. It would definitely run faster. 
Because, in addition to the Polyfills, all browsers but Chrome get a 5 times more bloated version.
YouTube is from Google. Chrome is from Google. Hmmmm
It's impressive that YouTube doesn't manage to get 1000 items to scroll fluidly on any modern browser on any somewhat modern computer.
&gt; where multiple elements have the same ID. that would cause errors in any case. 
who the fuck cares? Both are basically obsolete at this point
Yeah I think you're right, this specifically might not be due to polyfills. And in fact, in my Firefox it actually feels pretty OK. I wonder what it's like on mobile Safari.
Even better, thanks :)
As discovered following the rabbit hole that starts here: https://medium.freecodecamp.com/how-i-learned-to-code-and-earned-a-job-in-silicon-valley-changing-my-life-along-the-way-a3af854855fa
You could do that with flexbox in half that, but see my response to MondayMo nkey1 😔
I'm all for the delay. Better to set yourself up for the long run than have to make concessions for the whole 3 year support cycle.
Oh heh, you're right, in fact. Interesting.
yes this current version works fine, however when i try to mimick the code in order to create a multiplayer version i always get errors, so wondering how i could go about making it multiplayer
Are you referring to local multiplayer on the same keyboard? Networked multiplayer? What were your attempts in doing so?
Could be the security settings somewhere deep in Internet Options. Could be compatibility / quirks mode. You want &lt;!DOCTYPE html&gt; at the top of your page and &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; somewhere in the head.
Since it is iframe related, adding both the parent domain and the child domain to trusted sites may help.
"Productivity— By adding types and type checking in your editor, you can feel more confident about the code you write working the first time, catch more errors before having to refresh thus improving your productivity. Yes, its a pain but it will pay off orders of magnitudes in the end." Sorry, I still don't get this one. So I get to choose whether to spend significantly longer writing and annotating the code, or to refresh and check for errors a bit more often? Give me the second one. TS spouts 'developer productivity' but as a long time front-end engineer, I see the opposite result.
hmm i thought about that but in time id like to make a website where people can play is and i can set up an sqlite database to hold login details and highscores. but i think it would be too difficult at the moment to make it multiplayer across computers so just want to make it on the same keyboard. the first snake uses WASD so the next can use UPLEFTDOWNRIGHT keys 
Google Docs/Spreadsheet
I'm happy to take a look at your multiplayer code to see what's not working. Try it again and let me know if you run into any issues.
Polymer is from Google too.
I just dealt with a similar problem. I could see some errors logged, but my Win7 IE11 vm showed nothing. Downloaded a Win8 IE11 vm and there they were...
Google maps/earth
Reddit
Thanks! I actually completed it last night. I used your framework as the setup (hope u don't mind) with very minor changes and then added to it. Overall I liked setting up up that way (the MVC Way). http://codepen.io/msmith1114/pen/qmNevg (it's not entirely done, I still need to fire off the "you win/you lose/ stuff better". And it's a bit ugly. and i haven't checked for tie's yet...but it's mostly done"...and im sure if u see the code it's probably a gigantic embarrassment. I will probably go back and clean it up though. My biggest problem came into when I started adding things I hadn't thought of...so then it felt like I was "tacking" on logic in the controller (Such as Win conditions and so forth) and I wasn't sure if that would be in the controller normally or outside? It feels like anything involving logic in the board would be involved in the controller, but maybe logic that involves the "Game" would be in a separate controller or my "game loop" (as separate functions). Does that sound about right? But yeah...i can see where the OO stuff starts to become more difficult if you don't plan things out, as things came up (that I forgot) I was like "oh shit where does this go"...and that made it a lot more messy. I guess it'll just take practice. It prolly helps to write down the structure beforehand, that was something I never did....but always need to learn to do! I do appreciate your help it's been great :)
So what was your solution? Did you have to refactor code? I was hoping to avoid modifying decade old JS, but it may come to that since we haven't decommissioned the thing.
If I set it higher than IE5 the app doesn't render correctly due to janky CSS.
That is not exactly true. You can use polyfills on your own - you don't need Polymer for that. In fact other solutions like x-tags, bosonic, switzerland or svelte will probably use exactly same polyfills without single line of polymer code. Polymer adds bindings, utility functions not unlike jQuery did for pure dom manipulation - you can see the API on the project website, it's small.
https://playcanvas.com 
For me it used to be emulators; things like [this](https://www.youtube.com/watch?v=1VihD4iaOJM). A real game running *in a browser*!? Then I actually learned JavaScript and realized that it's actually not a big deal. There's Canvas/WebGL. JavaScript is just a programming language. You can make anything with it and display it. After making a throwaway (and incomplete) GameBoy emulator myself in C#, and then porting it to JS, I realize that there's really nothing special about it, aside from maybe surviving the JavaScript debugging experience and the hassle of dealing with binary data directly. Now I'll need to agree it's probably SoundCloud. I don't actually use the service very often, but each time I do I'm sort of taken aback by how seemless it is. You can click to play anything nearly instantly, and the player keeps going no matter where on the SoundCloud site you go. You can even use the browser navigation buttons and the music keeps playing through your playlist. The site is also above the level of visual appeal and functional aesthetic with pure in-browser tech than any site reached even using plugins.
&gt; I'm also a big fan of webpackbin.com How come?
The scalability of Reddit is impressive alone
Slack
Looks quite promising, though I'd like to see some examples of how it can replace redux-saga. Not gonna switch to it just yet but hope this catches on and the ecosystem around it evolves so I can get rid of all my redux boilerplate :)
It looks really interesting. I'll try it for my next little project !
Types are most useful when the code base grows to a size such that you cannot keep it all in your head at once. Types help programmers maintain an understanding of the code. Console logging an various objects hundreds of times a day to figure out what it contains doesn't work. Obviously, this isn't an issue if you are working on a small code base. However, what if your code base contains more than 1000 different types of objects? In that case, types are invaluable. Of course, 1000 or 10,000 different types of objects doesn't happen everyday to a front end code base. For the instances where it does (e.g. Google Sheets), the team unanimously complains that the lack of type annotations in JavaScript is a huge detriment. Also, types are a godsend for refactoring. On a large and mature code base, you will spend a surprising amount of time refactoring. Generally, re-writes are frowned upon. It's just a different world I suppose. A world where JavaScript is everywhere is going to cause major culture clash.
I don't see an element with the ID of "banner". 
Ah yes, because people are much more likely to go on an app than a website. If you have to support corporate users on IE11, they're not allowed to install other browsers much less other programs. If you have to support consumers, they're obviously not going to use an electron app unless it's some sort of regularly used application that's usually in a separate app anyways, and even then you'll still probably see rates drop off. 
The comments section of the linked article needs some hazard tape.
Just remember: &gt;Important: This parser is still in the very early stages and is considered experimental. There are likely a lot of bugs. You should not rely on this in a production environment yet. Might not apply but it's good to know 
Yeah, but then they take that exact code and wrap it in some sort of giant memory-hogging wrapper (Electron?) that feels like a clone of Chrome and uses up half your system resources to make the desktop app :(
&gt;Now I'll need to agree it's probably SoundCloud. I don't actually use the service very often, but each time I do I'm sort of taken aback by how seamless it is. Don't forget multi-tab play/pause. If you're playing a song in one tab and hit play on a different song in another tab it will pause the first and play the second. Soundcloud really is amazing.
I don't actually understand. Can I use it for my api that has only swagger for api? What's the difference between // With attaching api url before superagent.get("/users") and swaddle("http://my-api.com").users ? I guess we're writing the same amount of code, not?
Yup, seems totally reasonable to me, I think shipping an unsupported version for 3 years would be catastrophically bad.
Polyfills doesn't mean they are slow. In fact, native promises in Javascript are actually slower than bluebird promise library by a lot. 
You're comparing one implementation with another, however here the case is lack of implementation vs full blown implementation. Your code is now shipping stuff which should have existed in browser to begin with. Hence they would always be slow compared to no polyfills. (Firefox vs Chrome in this case).
That depends on what you define as impressive.
The original Google Maps back in 2005. This arguably showed us what web apps are capable of and started the trend for rich, highly interactive web apps. Similarly, the new Google Earth that showed me what is possible today.
toggle button is a good idea, i'll add it. also will fix share dropdown:) thanks! 
Check this link: http://stackoverflow.com/a/27716590 
Not exactly a web app, but I think something like atom editor or visual code.
That exact code running in Electron takes *less* resources than it does running in an actual Chrome tab.
Presumably the browser field that you are concatenating to the selected URL should be going into some query string somewhere? location = response + "&amp;browser=" + encodeURIComponent(browser) Also, consider using window.location.href = instead of just overwriting location. 
Can you provide screenshots?
http://imgur.com/a/J3onM
http://imgur.com/a/J3onM
&gt; Computations that can be done at compile-time instead of run-time get eliminated cool
It must be that 180 secs load for the mobile version of the site...
A webpack plugin https://github.com/gajus/prepack-webpack-plugin.
So the thinking here is ahead of time optimization to make JIT or other runtimes compile faster? How does V8 perf compare with "normal" js vs this optimize prepack js? How hard is it to debug production code with this turned on? Any way to support sourcemaps?
oh ok, at first you sounded like on of the "js fatigue" guys, couldn't spot the sarcasm :) fair enough
It's not performing any code generation, it's done with Proxies, which allow you to define a handler and a set of traps for attribute access and function invocation :) You can try it from your console: mkdir test cd test npm install swaddle request node // from node repl... let swaddle = require('swaddle') let github = swaddle('https://api.github.com', {camelCase: true}) github.users.get('octocat', (err, user) =&gt; { console.log('----- User data:', user) }) 
Pretty niche, but &lt;https://online-go.com/&gt; is a great way to play go with only a browser.
Unfortunately looks like it only support es6 imports? edit: I guess you can use: const PrepackWebpackPlugin = require('prepack-webpack-plugin'); plugins: [ new PrepackWebpackPlugin.default(configuration) ]
Yea, in this case it's true. Just to be clear, I'm not trying to be a pedant. I've seen a lot of dismissive comments in this thread like 'polyfill = slower' which would be a simplification which could confuse people who don't know that. They could later make comments like 'we shouldn't use any polyfills ever because polyfills are always slow'. I've heard people say that where I work, so I don't want others to have that inflicted upon them. 
Yes, that will work, i.e. when using commonjs, make sure to import `.default` (added a note to the documentation).
Seems like a nice optimization for presentation only components; I'd be curious to see if it would break anything internally in-terms of identifying components within a vDOM's structure. For example, modules like enzyme can return a mounted vDOM for testing and I'd be curious if this concept would break some assumptions made by various libraries. In particular, you would lose track of which components were rendered in a parent/etc with this implementation and thus certain utilities may break - this is of course only really an issue in work-related environments/etc where many libraries/tools are wrapped around each company's stack.
Yea, it's essentially a function that accepts params and returns JSX at this point, which absolutely does not need to be written as a component.
https://www.reddit.com/r/programming/comments/64oqaq/electron_is_flash_for_the_desktop/
I never said it did. All I'm saying is if they're going to reuse that impressive web app on the desktop I wish they'd at least use something like React Native to wrap it instead of the resource-sucking hog that they're currently using.
That's one dirty trick
 for(var i = 0; i &lt; 500; i++) for the record, this is one of dumbest disagreements you could have.
I prefer var condition = Math.random() &gt;= 0.5; if (condition) { for(var i = 0; i &lt; 500; i++){ //do stuff } } Both of your examples suffer from nonlocality. To find it what the value `i` is, I have to backtrack in your code until I find `i`'s declaration. Declaring `i` close to its usage site makes it much more obvious that (1) `i` is used just for the `for` loop, and (2) `i` is initialized to `0`. Leave hoisting to the compiler - it generally hurts readability for humans.
Meh.. you found the hot water, erm? Yea, definitely, that's cool trick, but it drops the need of JSX (almost) totally. If we are going to write in a way that "not breaks javascript" and turn every `&lt;Avatar url={avatarUrl} /&gt;` to plain oldschool javascript call... So.. anyway. Welcome back to javascript and the basics.
Hoisting would (and has done so for us) save confusion in scenarios where you might have duplicate variable names in the scope chain, and declarations are made not-at-the-top. var i = 0; (function(){ console.log(i); // what is i? undefined - but that's not as clear as if I had declared i at the top of the function scope. var i = 1; })();
cool, another solution to a problem I didn't even know I had...
 Unfortunately that is literally the entire JS part of the code they gave us, I just copy and pasted it. They want us to finish the switch statement and fill in the code between "switch(calcValue) {" and "case "equate":" I'm thinking something along the lines of, "case 1: *do something*" "case 2: *do something*" etc. var calcu = function (calcValue) { switch (calcValue) { case "equate": calc.output.value = math.eval(calc.output.value); break; } }; 
Hmm... I appreciate the advice although I think it's ironic that I learned about hoisting from using a linter. http://eslint.org/docs/rules/one-var
It depends on how you're computing it. Try to think your condition through logically, 1 step at a time. Substituting in numbers can help (eg. "if `snakebody[0].x` is 10 and `food1.x` is 20, will that give the result I want?").
http://eslint.org/docs/rules/no-use-before-define :)
for example, coming from south to north the snake will add multiple score such as 2/6 yet when it goes through either west to east or east to west it will as one, and if the opposite end from where the x is goes through it adds 0 and north to south the same: :?
Sounds like you need to rethink the entire game loop. If it is sometimes being incremented multiple times for a single piece of food you are probably not removing the food when you should. And not incrementing at all in another case sounds like your removing the food before ever touching the score. You need to consider your logic and make it more deterministic. As in a single pass through the game loop should probably do something like: UpdatePlayerPosition(); CheckCollisions(); UpdateScores(); UpdateBoardState();
Ah nice, thank you Can you help me understand the voting system?
Adding more cases sounds like a great first step. Do that and when you run into specific problems ask about those. The way your original question sounds and with the amount of code provided you sounded like you were asking someone to do all the work for you. You'll never learn anything like that. And people will be more likely to help someone who is obviously trying but has a specific problem over somebody who just seems to be asking others to do the work for them.
Definitely neither. let result = Math.random() &gt;= 0.5 ? _.range(0, 500).map(doStuff) : [] Hopefully no side effects involved!
Great tutorial! I'm a huge fan of async/await. Thank you!
 let result = _.range(0, (Math.random() &gt;= 0.5) * 500).map(doStuff); http://i.imgur.com/TlKjY2N.jpg
Glad you liked it, thanks for watching! :)
This is the answer, the vue-cli seems to be a but lacking compared to the bigger frameworks. 
I wonder if people have combined web components with modules. A use case where all you need to do is include a module to support the custom tag of choice seems like it would be useful. Like addons for webpages.
I recall this video from some while ago: https://www.youtube.com/watch?v=65-RbBwZQdU So, given that engines are already doing what this is doing (in varying ways), what benefits are you given by including this tool in your workflow?
This is a problem that generally stems from a lacking code structure. Eamples include functions, classes, or even just files being entirely too large, doing too many things at once. So you can start by avoiding such situations, and that alone decreases the likelihood of variable name collisions by a lot. Then continue cleanup of your personal coding style by using better variable names. Variables, as any other piece of code, should generally be self-documenting. USe full words, and multiple words if needed, to create a variable name. The length is not an issue - IDEs provide autocompletion, and minifiers can compress the length for you. Finally, embrace ES2015 and beyond. This is one of the use cases that caused the creation of `let`. As such, use it for what it was made. Add a transpiler to easily let you use this type of feature without worrying about browser compatibility. --- I also wanted to point out how neither of your solutions is any better, as they come with their own issues. First of all, both solutions suffer from non-locality. There's no telling how much code will end up being written inbetween the initial `var i` and its actual usage in the `for` loop. If you were to ever have to rewrite this `for` loop, or move it, then you'd have to edit two entirely separate places in your code. Secondly, by explicitly declaring your variables at the top like this, you're not even preventing name collisions. You merely make it possible to reuse variable names with fewer potential issues, but reusing variable names is a no-no to begin with. This goes back to what I said about variable naming - using proper names avoids name reuse itself, and thus solves the actual problem instead of simply shifting it over somewhere else. And finally, to address your OP edit, if I had to choose either of your two samples, then sample one is the better one. The reason is that sample 2 suffers from all the same problems that sample 1 suffers from, plus one more. As I said you don't know what `i` is being used for in the code between the declaration and its usage in the `for` loop, so what if it's left at a value of 1000 somewhere along the way? Your `for` loop would not run. Even worse, what if it's set to an entirely different type altogether, such as `true`? Then `i++` will actually *throw an error*.
I'm well aware. People said all the same things about the JVM when it came out. Folks can "la la la" with fingers in their ears all they want...the rest of us will keep building apps that people actually use even if the frameworks aren't perfect.
It wasn't meant to be serious (:
I'm not sure we're seeing the whole picture. What your describing looks like the difference between comparing `pickup` to `pickup.show()`. Nothing about the promises, at least as you have written them, should affect the result, changing it from "Truck" to "Object" ("Truck" is expected in both cases).
Mine throws up. /Users/mark/Sites/tg4/node_modules/prepack-webpack-plugin/dist/prepackCode.js:36 throw new Error('Unexpected state.'); 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [yannickcr/eslint-plugin-react/.../**prefer-stateless-function.md** (master → 4d5faee)](https://github.com/yannickcr/eslint-plugin-react/blob/4d5faeedbeb08369476265b4fb949dab3cedb8ae/docs/rules/prefer-stateless-function.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh3nv7s.)^.
I may be out of the loop, which trend would that be?
That google writes google products using google created technologies Not really shocking 
Radio Garden looks awesome!!!
&gt; And that breaks my tests since a Truck won't equal an Object. What do you mean by that and what is your test exactly? Your pickup is an object and also instance of Truck no matter what But my two cents are, with your refactored version, you are *never* resolving your promise: Promise(function(resolve, reject) { fetch(url) .then(response =&gt; Promise.resolve(pickup)) } I'm also assuming you are using `new Promise` instead of `Promise`. You're creating a resolved promise after the fetch that's never going to do anything, because the main promise that you probably want (the one you are creating) is the one wrapping up fetch, and it's never going be resolved unless you manually resolve/reject it. Your code before the refactor looks correct. `Promise.resolve()` just *returns* a resolved a promise, but it has no way of resolving your outer promise if that makes any sense
Looks like this was already posted a year ago but as with everything on the internet, [people re-discover old stuff all the time](https://xkcd.com/1053/) so I thought I'd share this. IMO kind of horrific to see it in actual code but I thought it was pretty cool that after using the language professionally for so many years, there are still things I can learn about it that are apparently very old.
**Here's a sneak peek of [/r/help](https://np.reddit.com/r/help) using the [top posts](https://np.reddit.com/r/help/top/?sort=top&amp;t=year) of the year!** \#1: [Is Reddit Having Search Problems?](https://np.reddit.com/r/help/comments/61vri1/is_reddit_having_search_problems/) \#2: [Can someone explain why there is such a substantial discrepancy in subscribers between what is shown in the side panel and what advertisers see?](https://np.reddit.com/r/help/comments/62naj4/can_someone_explain_why_there_is_such_a/) \#3: [Defaulting to mobile site on iPad, switching back with the preferences does not permanently fix it](https://np.reddit.com/r/help/comments/5q5ihg/defaulting_to_mobile_site_on_ipad_switching_back/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
How many of these do you typically have in a codebase though? 
Like 3 or 4
Probably with 'use strict';
There's an even more obscure feature of labels: they work with switch statements. They're useful when you have nested switch statements because you can just `break topLevelSwitch` and thus avoid accidental fallthroughs. top: switch (foo) { case 1: switch (bar) { case "a": doStuff() break top case "b": doOtherStuff() break top default: handleError() break top } //forgot to break here? No problemo default: handleError() } continueDoingStuff()
+1 you made me spray coke all over my screen.
Wasn't that true for the JVM as well? I avoid both.
Read about context (how is `this` keyword handled) and closures. Then how prototypes working on a low level. Basically it's all you need to know to be a good javascript developer (besides APIs, but you can just google it at any time when you need it). p.s. Ah and remember that all Object are pass-by-reference, while primitives always pass-by-value. p.p.s. a `function` is also an Object p.p.p.s. `==` vs. `===` difference p.p.p.p.s. `'use strict'`;
anyone care to ELI5 for a relative noob? 
i thought about using it but turned to Angular and considered polymer. The only reason (at this the only one i can remember) I went with Angular is simply that more developers are familiar with it so faster launch time. 
Sorry, but hypotheticals like this are not a good reason to eschew good programming principles and performance improvements. If someone changes some fundamental part of your application architecture and you don't have a good test suite to catch regressions it might cause, *that's* the actual problem, not someone returning simple markup from a plain function instead of a component.
I am assuming that the original is inside of a filter function or similar, and $(holdImg) has a single image in it. Otherwise, jQuery's .attr will return the value of the attribute of the first image in the set. In your code, you are extracting captionText as a string from the alt of the image. AFAICT it won't have a parentNode property, and so the TypeError happens. You'll have to find imgContainer another way, but having done that it looks like it should work.
Thanks for your help. I actually figured it out and posted my code in the update above.
Also it should be possible to recreate Duff's device!
2nded
That's not the same thing as what the article is talking about. 
I have not, and the migration path seems unclear and the benefits don't seem to justify the cost in our app :/
&gt; eschew good programming principles These are not good programming principles, that's what I was trying to point out. Avatar is a React component and the consumer is making assumptions about how it's implemented -- this is fundamentally breaking the abstraction layers built into the React component model. If the implementation of Avatar changes it would potentially require changing everywhere Avatar was used. The article seems to imply that functional components and functions which return components are interchangeable -- they are not. The real point to be made is that avoiding constructing/mounting new components when possible is good for performance. To keep this example idiomatic there should instead be a utility function, something like renderAvatar(props), which acts as a wrapper around Avatar's actual implementation and makes it clear that it's a function which returns a component.
[MDN Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) The [Rauschmayer books](http://exploringjs.com/) Also here's a brief C++/JavaScript "rosetta stone" post I made a while ago. https://www.reddit.com/r/learnjavascript/comments/4zh1lp/where_should_i_start_learning_javascript_if_i/d6vs9t2/
&gt; I'm guessing many developers will remember Closure's release and being confused as hell that it wasn't Closure Compiler. What exactly was confusing? Seems odd any would conflate the two considering the Closure Tools were released at the same time and contain more than those two anyways, apart from the naming being pretty obvious (Closure Library vs Closure Compiler).
Then maybe you should make your state more expected. 
What's new in 8.0?
[Xkcd has a comic specifically about labels too.](https://xkcd.com/292/) This feature exists in many languages, including C/C++, C#, PHP etc. Java had it initially but then it was removed. Labels/goto are widely considered to be a bad programming practice.
Your forgetting that we don't want this to happen at runtime.
wow, [their code is open source](https://github.com/online-go/online-go.com) &amp; it's really good! i'm surprised they wrote it in typescript/react/node as opposed to, idk, *go*
Sorry, should have said functions which return elements are not the same as functional components. There's a huge difference. Avatar is a component and when you call `Avatar(props)` you're relying on a specific implementation of the Avatar component. What happens when someone refactors Avatar to be a stateful component? `renderAvatar(props)` is idiomatically correct for two reasons: it signals that it's a function which returns a JSX element and you can't use it as a JSX tag. Now it doesn't matter how `Avatar` is implemented and code which uses `renderAvatar` is unaffected. It's basic encapsulation.
GOTOs are the most disgusting syntax element ever. No matter if they called `goto`, `label`, `jump mark` or whatever.
Exactly, though I think this could easily be a babel transformation which could drop the React.createElement around functional pure components.
I say fuck it and let a babel plugin figure it out.
This happens when something wrong goes with prepack. Whats the code that you've used to produce the error?
Same boat. Our routes file is so simple and the SSR is already configured. To migrate we have to change everything around its implementation. Only problem is updating NPM deps will probably require getting to V4 at some point =(
What you recommend ? Can I use vue-cli or something different ? 
Codefights, built with meteor and quite nice to use!!
https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement#Get_information_about_the_selected_option
I wonder if you remove "by Facebook", will it attract as much attention? Can we judge a library without big names?
Flash was only used to decode the audio though, not for the UI.
That's probably by design. Faster to read a static array than compute one. Though filesize may become an issue. 
Does anyone know why there is no shadow-root in the elements? I suppose this should not be polyfilled in chrome.
I use CodeRunner 2 on osx. Supports many languages and it just works. https://coderunnerapp.com
OTOH, replacing "var" with "let" in the for-loop works as expected. Replacing "var" with "let" when creating the initial array causes no output to be emitted, but assigning the array to the window object works pretty much perfectly. e: assuming what you want is a pre-initialised 5,000 element array, but I guess that's always the big question with compile-time optimisations. e2: The largest array I can get in the online mode is 8543 elements, beyond that it just times out. I don't know if there's a maximum size it'll output, then, but I suspect not. Also, the online repl weirdly outputs a whole load of whitespace at the end of the line when it creates the array. 
That's how I've been using React for about 2 years now. The rest is only needed if you need it acting as training wheels for apps lacking architecture. If you already have an architecture, all you need is functions producing JSX and ReactDOM.render().
I really like Discord. It's simple, it works great and there's a ton of little things that are well thoughts. 
So ... you want help for what exactly ? 
thank you for asking, i need a solution, example or an api dat i include directly and customize it, a name of a technologie, acctualy anywhere i start from, cause i m lost
Frankly, you don't even need a good, comprehensive test suite for that, even a few snapshot tests or a smoke test would do. It's quite impressive to see how much effort was put into making testing easier in JS (Jest takes literally 3 min to set up with yarn) and how often we still can't be bothered, since TDD implies "feature-unrelated" work. 
Websocket is probably the best way to go. I'm shure there's an implementation for Spring.
I may mess with it later. My Webpack is a friggin Jenga tower, and I touch one thing wrong and the whole thing falls apart. Some quick debugging looked like it couldn't find some filename that commonchunks was supposed to spit out. Who knows. I should start all over with webpack, with specific goals of keeping the generated bundle size down. They're enormous. 
But why would I want to do a thing like that? I chose not to choose JavaScript: I chose something else. And the reasons? There are no reasons. Who needs reasons when you've got DHTML and ActiveX?
that's right i add an example to the description
So when you say "but i get it in a string and i need it as array, so as separate keywords or something like that" I assume the output you are getting looks like var output= "airmax yxz - shoe abc - modelname 123"; if that is true then just split them on the dashes var newArr = output.split("-"); newArr = ["nike airmax yxz","puma shoe abc","modelname adidas 123"]; 
There is no goto. This just lets you define a code block in which you can use break/continue. I still wouldn't use it, but it's not quite the same thing. 
For the first input, you should split the string on hyphens and then trim spaces from each of the sections. You can use [.split("-")](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) to get an array of those strings. You can then use [.map(...)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to and [.trim()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim) to remove spaces. If you do this properly, you would end up with an array from the first input like this: ["adidas", "nike", "puma"] For the second input you have groups of 3 words separated by hyphens, and words within those groups separated by spaces. You can again use .split() and .map() to split the groups, and then split each of the words in the groups. This would give you an array of arrays like this: [["nike", "airmax", "yxz"], ["puma", "shoe", "abc"], ["modelname", "adidas", "123"]] Finally, you can use [.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) on each of the group arrays to filter out words that appear in the array from input 1, and [.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) to join it all back together with spaces and hyphens, accordingly.
You say "inverse" but by your example I assume you mean "reverse": https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse
Is this an algorithmic problem or a javascript features one ? Cause `[1,3,5,7,9].reverse()`
I do realize that, thanks a lot !! will check
2/10 title
Anything that doesn't involve user input or an API response could theoretically be done this way. The more functional your code is, the more it can be pre-computed like this. The real benefit is something that's been done in the Ruby community for a while - you can write your code to be clearer to the reader by abstracting things to well named functions. Doing it without the performance hit is great.
G'NIGHT, EVERYBODY!
If you need a function: function bla(setA = []) { return setA.reverse(); } Or simpler: const bla = (setA) =&gt; setA.reverse(); Or just: yourInputArray.reverse(); Or do you need to manually create a `reverse` function? In that case: run.
Which packages rely on RR? I think I only have one which Im comfortable locking down indefinitely.
[removed]
Haha yeah, fuck people who are trying to learn stuff, what losers!
right, i htink i gathered a bit more as I kept reading. is it similar to memoization or chaching - it's basically running some functions at compile time and saving the results so when they are called at run time it can just look up fibonacci(23) is 28657 instead of running the program. right?
Because the point of this is obviously the todo app, and not at all the experience of using a few libraries and trying to work out how they function in a semi-real product. Ever heard of todomvc? EDIT: wow, nevermind, this guy's post history is basically entirely negative, probably a troll
Hi /u/root_cisco, if you have a specific question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your work/homework for you.
yes exacly, i mean if i can draw one row i could do it but im not really good at drawing lines to lines(on javasript), with 1 row i could just put 1 under the other but and make it work i think
You could reuse an SVG circle and just change the fill color per row. http://tutorials.jenkov.com/svg/circle-element.html
You do? Twitter, Google, Facebook, Foursquare, Tumblr, Square, eBay, Groupon, Uber, Spotify, Yelp, Okta, Slack, Zillow, Netflix, TripAdvisor, Postmates, Fitbit and literally millions of other companies use the JVM. That's a lot of avoiding to do.
https://github.com/gajus
First grok the fundamental difference between classical OO languages like C++ and a prototypal OO language like Javascript. The OO paradigms are *not* the same. Everything else is details.
It's largely for "big" websites with codebases large enough for them to have to worry about Javascript execution time. Makes sense that Facebook would be working with this type of tool. Last year, the then-new m.imgur.com got dinged for this problem: https://github.com/perfs/audits/issues/1 
The JS Lodash library
I was trying to use d3.js for a bit and got super frustrated. All the tutorials I could find were either not up to date (not v4), were using a different data source, or didn't explain how to change to a js array (I have 3 arrays, one for x values, and 2x y-value). I had to switch to google charts api, which was simple and quick to use. Unfortunately google charts doesn't have a radar chart, so I'm back to d3... Do you have any ideas on where to start that meets the criteria above?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [jashkenas/backbone/.../**backbone.js** (master → 09cb887)](https://github.com/jashkenas/backbone/blob/09cb8871d81b6f627c1edef46de97d7c2e8e2078/backbone.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh4g6dm.)^.
Use create-react-app. Saves a lot of time! Webpack is a bitch to setup.
Wouldn't doing `npm install ../path/to/your/npm/packagename-version` be the same thing, bypassing the packing?
I don't know the Weather Underground API, so I need more information. Where do you host the php code? Is it on a server or - it seems like it is embedded in your html?
Getting a similar error with a bit more context. This operation is not yet supported on abstract value Date.now() __IntrospectionError 
I suggest you go to stackoverflow.com and ask your question there - with the form and javascript code you have thus far.
Thanks I will check out this recommendation.
I too was impressed with Maximilian Schwarzmüller's Udemy course (as somebody doing a JS/Angular/Node for a few years.) 
A lot of the newer tuts combine d3.js with either React or Angular. 
Here's an idea. Release better versions as soon as we are able to produce them, and don’t hold off weeks and months so that odd and even numbers mean something. Node.js, and any project with an LTS cycle is driving with the handbrakes on. I hate the concept of LTS, it's so archaic. If some corporation want’s the benefits of a newer version of something the community has produced they should spend the effort to upgrade to it, which is pretty minimal. It’s mind boggling they expect multiple outdated versions to be painstakingly updated for THREE YEARS in parallel. Think about the tools you were using and the code you were writing THREE YEARS ago.
Probably why I was having such difficulty. 
A friend of mine works at IBM. She had to build a carousel on iOS from scratch instead of just using a library because it takes so long for third-party software to be approved. It's a mixture of both security and legal bureaucracy.
I would like to think I have some well built open source JS projects. I think I might convert them to Typescript in the future though. https://github.com/anim8js/anim8js/tree/master/src https://github.com/ClickerMonkey/storkjs/tree/master/src/lib 
&gt; Dan Abramov himself, creator of Redux, published [You Might Not Need Redux](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367), a blog post that I can only imagine has been largely ignored by everyone and their dog, because everyone and their dog are using Redux for even the most simple applications. You might not *need* it, but you use it anway because that's what you like. Why waste time thinking about what kind of state management would be optimal for the small thing, if you can just take something you know is going to work, no matter how large it's going to become. Also, you might have a skeleton project with redux + react + whatever your standard dependencies are, so you just clone that repo and done: new project setup.
&gt; I’m guessing that the upcoming React Fiber is largely [Inferno author's] work It was actually 0% his work at the time they hired him. But when it hits final release perhaps it will have some of his input incorporated.
I'm kind of stuck trying to expose my "Router" class to the global window object. I want to be able to do new App(options); but I keep getting App is not a constructor. 
&gt; But maybe there's a better solution? Solutions that are not Zero install are out from the beginning. All plugin-solutions so far have sucked badly, were proprietary islands isolated from the rest of the website, looked strange. So far Javascript has buried them all. Maybe WebAssembly can change that, but/because it's just the same thing, faster.
Vue is ES6, not really fair comparison - its much newer project :-)
I agree that it's not a fair fight BUT op did ask for JS/web application projects that are open source, not specifically ES5. Edit: And they could have used AMD modules to avoid having one huge source file
No comment section on the post, but looks like the author is the submitter, so I'll comment here. It's a well-written post, but I want to respond to a few points in there that I disagree with or think are at least somewhat misunderstandings. First, part of React's big concept is that components are isolated and reusable. Sometimes that means putting all the logic, and UI output, and styling, all together. Sometimes that means keeping the logic and data fetching in one component, and the presentational output in another component. This varies depending on use case, so it's not just that "decades of architectural learnings are casually dismissed". Second: yes, Redux does get over-used a bit (and I say that as a maintainer of Redux). Dan's two main purposes for writing "You Might Not Need Redux" were to point out that you indeed don't _have_ to use it to write a React app, but also to clarify what the intended tradeoffs are (in answer to the frequent complaints about "too much boilerplate"). I'm also kind of confused by your comment that "I have a suspicion most people who use Redux don't use it for the state container, but rather for `Provider` and `connect`". Those are somewhat separate aspects. Redux has a few main selling points. It encourages you to write your update logic in a predictable and testable manner; if you follow the requested constraints, you get time-travel debugging and advanced persistence capabilities as a benefit; and if you use it in a React app, you get hot reloading as a benefit, and can simplify the process of accessing that data throughout the component tree. So, arguing that people use Redux just because of the last benefit seems over-fixated on just one aspect. Third, you argue that the Virtual DOM is an abstraction over a complex underlying system, and that this is somehow a bad thing. I would absolutely disagree here. I also think your complaint about the "game loop" comparison is over-blown. Yes, "Virtual DOM"-style rendering does generally allow more efficient UI updates. However, even more important than that is the simplicity that it gives you in regards to understanding what is being rendered at any given moment. A component's render method is simply `(props, state) =&gt; newUI`. You don't have to inspect DOM nodes to see what classes they have, or figure out how to transition from one UI state to another. Your code simply says "here's how I _want_ the UI to look right now", which makes it much simpler to write and understand. The "game loop" comparison was meant in that respect - part of the loop takes care of updating your game's physics and shuffling around 3D model coordinates, but then the actual UI rendering "just" takes all those inputs and renders them. It was not meant as a literal "React will update your UI at 60 FPS because ITZ A GAME LOOOOOPPP!!!!". Again, pretty well-written post overall, and I can understand and sympathize that jumping into modern JS application development is a pretty big leap for someone who's been mostly involved with backend work over the years, but I do think some of the conclusions are off-target. FWIW, I keep a big list of links to high-quality tutorials and articles on React, Redux, and related topics, at https://github.com/markerikson/react-redux-links . Specifically intended to be a great starting point for anyone trying to learn the ecosystem, as well as a solid source of good info on more advanced topics. It includes links for learning core Javascript (ES5), modern Javascript (ES6+), React, and much more. I also published an "Intro to React (and Redux)" presentation at http://blog.isquaredsoftware.com/2017/02/presentation-react-redux-intro/ , which is a good overview of the basic concepts for both React and Redux. Finally, the Reactiflux chat channels on Discord are a great place to hang out, ask questions, and learn. The invite link is at https://www.reactiflux.com . I'm usually on there evenings US time, and I'm always happy to discuss and answer questions. Would love to have you drop by and chat for a while!
The paradigm is irrelevant. Backbone is well written, simple, clean, well commented. being in one single file is not great mind you, but even if that code was split up into one class per file, it'd still retain its cleanliness.
I just want to toot my own horn with my small NPM package that I think works as a pleasant template for TS-based NPM packages. https://github.com/ihsw/toxiproxy-node-client It's a Node-based HTTP client for [Toxiproxy](https://github.com/shopify/toxiproxy).
So Avatar became a plain JavaScript function returning react element. And get used as function. Making your code simpler and even faster. How is it breaking the abstraction layer?
Websockets will do the trick also
Ah, good to know. Thanks!
&gt; BookMarkLets What the hell is with that capitalisation? They're not three separate words...
&gt;Sometimes that means keeping the logic and data fetching in one component, and the presentational output in another component. OK so this is actually my biggest personal problem with react. So Facebook goes out and writes a view library with a very small surface area that is basically nothing but components. So far so good. But then, and I don't mean to sound like I'm blaming or attacking any individuals here, developers who use react seem to fall into the "when you only have a hammer" trap. Since the only thing react supplies is components everything is attempted to be shoe horned in as a component when clearly it isn't. Things that are in charge of fetching and serving data sound like controllers to me. Components should be actual ui things that you see in the final view. I really can't get over how much the react ecosystem seems to abuse the idea of a component since it is the only tool react provides. And again since react is a view library that's fine that all it supplies is components. But not everything *is* a component in an app. So as someone who clearly knows a lot about react what do you think about my observation?
Is the course up to date with Vue 2? Never mind: Right there in the title.
Thanks, this is more of what I was asking for!
60 lines is a good rule of thumb. A teacher of mine used to say "no more than a printed page, preferably only as large as your palm" 
Thanks for the reply. I've never used AJAX before. I've been trying a few tutorials to post the input form data through to the php in a seperate file but it just doesn't seem to be working.
Hey, [API documentation is here](https://www.wunderground.com/weather/api/d/docs) and the PHP is currently embedded in the html. As far as I can see from tutorials, the php needs to be on its own file and AJAX needs to be used with the URL set to the PHP file but I can't seem to get it working 
I like [Leaflet](http://leafletjs.com/).
You sound a bit pretentious, but you do have many Github stars.
AJAX bro
Only if you only use it as a function everywhere and _never_ as a component -- in which case it shouldn't be called Avatar anyways because the name implies it's a component.
I appreciate the response but I feel like you are just confirming what I said. Oh well.
&gt; React is easy to get started with, but it's equally easy to make a huge mess of your app's rendering cycle by mismanaging state. It took me a few months of using the library, while working on a sufficiently complicated app to figure this out. This right here is pretty much the point I'm trying to make. React and similar libraries attempt to make reasoning about your app design simpler than dealing with the DOM directly, but they don't always make it _simpler_, they just make it _different_, shifting complexity from one spot to another. Yes, expressing your _view_ is much simpler with React than with directly modifying the DOM, but now you have to think about when it will rerender, you have to think about making components "pure", you have to think about immutable data structures, and so on. Don't get me wrong, I'm not saying any of this is _bad_. I'm just saying that it's wrong to assume that React makes building web applications inherently easier than it was without it.
Let me put it another way. There's clearly logic you don't need or don't want to have directly in components. For example, the logic for actually executing an AJAX call doesn't need to live in the component, it can live in a function that is given to the component as a prop. Ditto with, say, analytics in a Redux app - that probably should belong as middleware. On the other hand, if you're wanting to execute logic when a certain chunk of UI is displayed, like a route handler, it's absolutely reasonable to put the responsibility for executing that logic inside a component. Render a component when you hit a route, call a function from its `componentDidMount` lifecycle method, and you now have a straightforward way of handling that behavior.
Well technically nothing executes in jsx; it's all obviously transpiled down to JS in this case, which yes is then decorated with all the traditional methods to create elements, append to DOM, etc.
I'm not self-promoting myself, as I don't claim to have the cleanest code as it's all subjective. However whilst we're on the topic I wanted to raise a question about the *perception* of clean code. Since learning Haskell I've started to appreciate how the code is [often elegantly indented](https://en.wikibooks.org/wiki/Haskell/Indentation) so that **everything** lines up. I used to do this in JS back in my junior days &amp;mdash; although I used to do all sorts of crazy things, such as [Hungarian notation](https://en.wikipedia.org/wiki/Hungarian_notation) &amp;mdash; but now indenting to align *looks* a whole lot cleaner to me, in fact [I have recently started](https://github.com/Wildhoney/ReactShadow/blob/master/src/react-shadow.js) to during a refactor of one of my modules. I especially like the indentation of the `import` statements at the top. I'm somewhat envious of Python in having the `from "Mod" import b` syntax, as the module names then all align, whereas in JS we have it in reverse which means the module names don't align &amp;ndash; albeit the imported items align. In Haskell they also align the module names during import with `import Mod (x)`. import First (a, b, c, d, e, f, g) import Second (x, y) vs. import { a, b, c, d, e, f, g } from 'First'; import { x, y } from 'Second'; What do others think to indenting like this with JavaScript? Of course it's goes against the grain, as I don't believe a single set of default ESLint rules would consider this passable.
I would say that being able to write your rendering logic in a simpler way and then worry about perf as needed is going to be generally easier to deal with than trying to write complicated state transitions (and possibly perf down the road). Dan Abramov has pointed out that React is not the fastest UI lib out there, but it _is_ sufficient for most cases, and the component tree approach makes it fairly straightforward to figure out where perf optimizations are needed. I have a whole section on [React/Redux performance](https://github.com/markerikson/react-redux-links/blob/master/react-performance.md) in my links list. So, ideally most of the time you _don't_ "have" to think about when it will re-render or whether a component should be pure - you write your components, implement your app, then benchmark and perform perf optimizations if needed.
Laravel is good, but thats not a JS project :)
Heh, indeed. Didn't even notice the subreddit. 
As a PHP developer, I always recommend https://github.com/Sylius/Sylius/tree/master/src/Sylius , a symfony based e-commerce platform. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [Sylius/Sylius/.../**Sylius** (master → 763062e)](https://github.com/Sylius/Sylius/tree/763062e735d3d19578302715675d205029f286c7/src/Sylius) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh4vr06.)^.
Take a step back and think about what it's asking, and think of what you need to do to get the answer. Let's look at the max function for example. You're provided a list of numbers (an array), and your job is to go through the list (for loop) and find the largest number (is currentNumber &gt; currentMax then currentMax = currentNumber). If you were to do this on paper, you would go through the list one by one comparing the numbers. Your brain stores a variable with the current highest number value. You analyze whether the next number is larger than the one you have stored. If it is you replace it or move on. Once you've reached the end of the list you know the value you've stored is the max. Look at programming as if you're instructing yourself how to do something manually. Like a math problem on paper, there is a process to get the answer. 
I'm going to nitpick about the ending part of your post, if you allow. &gt; And this shows; there is so much stuff! No matter what you’re looking for, you will likely be able to find a package for it on NPM. Probably more than one! Of course there is! You've been doing Ruby for the last 12 years! If I were to switch to RoR now I would probably be overwhelmed by the magnitude of packages! &gt; This often leads to situations where you google for a specific tool, find something that looks just like what you need, start using it, and then you eventually find out that it has been put into maintenance mode (if at all) and there is now a successor project that you should be using instead. And to top things off, very often this successor project is an over-engineered, incomplete mess. Ouch. Fair enough, though this is a community problem, not a language one. There are ways that library authors are working to fix this - either by providing notices in github repos or by adding approperiate message to `npm install` logs. The rule of thumb "check last commit date" still applies. &gt; Even if you find something that’s great and actively maintained, it’s possible that by the time you get familiar with it, there will be a new hotness everybody is expected to adopt. That's something that *you* should be immune to. As someone who also been in the game for a long time (~15 years) we know better than to just blindly jump onto the next shiny thing and start rewriting your codebase. A new version of lib X came out? Cool, let it rest, iron out the bugs etc. You have (you do have, right?) a npm-shrinkwrap.json so your dependencies wont update by itself, you continue to deliver while everyone is rewriting back to the previous, tried, less shiny thing. &gt; I’m very late to the party, and some of my preferences will be at odds with the community at large, so maybe I can label myself as a rogue JavaScript developer? Is that a thing? Pretty please? You're not. ES6 is still becoming a thing, it's not really everywhere yet. You just have a lot to learn. Isn't that the exciting part? Create things, do mistakes, learn from them, refactor things, blog about them.
Huh I'll check out Ghost &gt; Emojis in readme &gt; Emojis in commit messages Christ, guess I won't
Is that really an issue for you? Technically speaking, it's ASCII (:rocket: not some UTF8 madness). *shrug*. That's a sort of "GET OFF MY LAWN" attitude ya got there friend :P
[removed]
You might have anger issues, just sayin'.
i have a static website albeit with jquery. i am assuming we need the html-meta tags because they are used by search-engines / SEO? since Google's indexing does run client side js -- does that mean that we could use client side js to set meta tags dynamically?
[removed]
Vue was the first framework I learned after learning the basics because the quick overviews of React and Angular made no sense at the time while Vue did. Now I'm learning React as well (mainly because almost every job in my area is asking for it) and a lot of the concepts I learned in Vue allowed me to make sense of React. And that's not to say it isn't as good as React, it's just a lot more approachable as a first modern framework. 
great -- i was not sure if FB &amp; TW still expected their tags to be delivered statically in the source html. now you have confirmed that status quo -- thanks!
Yup, Hopefully things will get better soon.
symfony.com 
One of the coolest lodash features in my opinion is lodash/fp. One of the nicest functional programming libraries out there. 
I agree, its an open issue on the project too. But I would also add that that is such a minor thing
Have a look to SonarQube. It's just excellent. 
Yeah I understand life cycle methods and having event callbacks and all that. That's not what I'm talking about though really. Again I'm not trying to sling insults around or anything but most react code bases I've seen end up with multiple "components" that are just used to pass data around and other house keeping type functions. The kind of functionality that I would expect to see from what most frameworks differentiate as services or something similar. Like if I take my own recent projects as an example my methods for calling apis and then transforming data are handled by services that are injected into components. Components *always* map to actual visual elements on the screen. Of course the components also handle events and life cycle methods. But they do so by calling out to services. I just don't like the idea of conflating the idea of a component with the idea of a service.
I'm going to be dragged to hell with you but....You're right. 
Aligning indents like that is horrible in my opinion, it's just maintenance. Fine you might have a macro, but does the other people who modify your code. I did it in the past. Now hate.
I get what he's saying, especially when it comes to the pain of uncontrolled components. But it frustrates me that he describes no alternatives.
sigh. i've answered this question so many times i don't even bother any more. having written a pretty fast [1] virtual dom lib [2], let's just say i'm not simply talking out of my ass. the TLDR is that it depends on how you use the DOM, how much it costs the browser to reflow your changes, and how much imperative, repetitive code you're willing to write to get consistent testable results. by the time you have tons of DOM manip code that's metastasized throughout your data/logic, you've basically baked in a non-reusable and highly specific view layer. rinse and repeat for each app you have to write. if you're not writing data/state-driven apps, then you're writing a ton of extra code or jquery spagetti that ensures your dom is always consistent. there *are* cases where this if just fine, but they're usually either very simple, or must have a requirement to be *extremely* low overhead at the expense of much worse maintainability. [1] https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts/table.html [2] https://github.com/leeoniya/domvm
Your benchmarks, which I have seen before, indicate the standard DOM methods are the fastest means of access. bobril, inferno, and mithril are close, but nothing else is even in the same neighborhood. This indicates **your** abstraction is slow... not the DOM. Framework/abstraction stupidity aside the DOM is slow compared to what? It is the fastest API provided to JavaScript.
ok, your point is that all vdom frameworks manipulate the dom and additionally introduce overhead to do it. sure, so i suppose i should rephrase the statement. 1. the way that the vast majority of people will use the DOM within their apps will be extremely sub-optimal. 2. where it *is* optimal, the code will often need to be awkward, non-uniform and non-reusable for the sake of extracting maximum performance. 3. if the dom ever gets new APIs, your apps cannot simply benefit as a result of updating a well-maintained view layer lib. 4. with vdom libs, you get both optimal dom manip (the most expensive part of UI) and much more maintainable code for laughably low additional overhead. 5. with some vdom libs, you get free access to alternative rendering targets which are not the DOM, and are in fact faster. Like React Native. perhaps there are webgl, canvas and svg targets as well. it takes a certain kind of masochism to insist on avoiding these tiny, low overhead libs to bake your own view layer for anything but trivial applications. as i mentioned, there *are* cases when raw dom is the way to go, but 99.95% of cases benefit immeasurably more from code clarity and structure than an extra 3% perf (assuming an ideal implementation of spaghetti code - and it's *never* ideal). even the benchmark author's vanillajs impl was much slower before than it is today. the reason it is this fast today is because *dozens* of highly skilled devs have contributed to squeezing out every bit of perf from this DOM impl over many months. how confident are devs that they will be able to both, write optimal dom code tightly integrated within their app/business code that is also maintainable (these two things are basically mutually exclusive).
Agreed &amp;mdash; there are definite limitations. I definitely appreciate the Python and Haskell approach to `import`s. It also makes sense from an autocomplete perspective where you type `from Mod` and an IDE would know which items `Mod` exports.
Are you seriously still using var?
You have to manually make one
You have to manually reverse it or it would have been easier
Are you sure? That's what I do, and it seems to reflect what the published package looks like perfectly fine.
You may want to try https://npms.io/ for searching for libraries and such things, but not for boilerplates (probably, dont know). I don't believe anything more than that is needed, actually. Most of us know who what code write, who is pro and who is not, who provides quality, stable and well-tested packages and who not. Don't know, I personally don't need a search - I have thousands of packages in my head and I always know what to use. And these thousands of packages are from very few devs, that you can trust in 99% of the cases if not 100%, so you can always be sure that if something is wrong it is mostly because of you, not because the others. :)
It needs to be completely immutable I think. It's still super useful but I hate the gotchas when dealing with some mutable and some immutable libraries. I believe they are making an immutable version though.
thanks for the link! i hadnt come across npms before! always in favor of better search. Since you sound reasonably pro let me ask one followup: what is your process for putting together the stack when you start a new project? I find it hard to believe that pros really cobble together all the parts every time the start a new project. That is the point of a boilerplate - you start with something reasonably close to what you are looking to do, then you modify from there, instead of custom-building from a blank slate every single time. I'm not a Rails or Django dev but isn't that the ultimate end state experience of every dev? I have tried Meteor, and Meteor is the closest to "Node on Rails" I have come across.
Hi /u/vegan_meme_machine, please keep it civil.
Maybe worth mentioning that I don't do so React-ish stuff and such things so much. But yea, i have boilerplate and self-made project scaffolder, then just add the deps. Actually, mostly don't touch anything, instantly going to coding the idea. You may find it useful: [charlike](https://github.com/tunnckoCore/charlike) and [charlike-cli](https://github.com/tunnckoCore/charlike-cli). Pretty small and customizable, pretty enough for me in any case. No matter that I'm building React-like or non React thing, private or non-private, I can use it. The npm scripts that I use and the current tool chain that I use are just brilliant, worth noting and looking.
Probably some "preset" for https://github.com/start-runner/start would work too. It's pretty fantastic task runner, built in 20 lines on top of Promises.
Redeemed, thanks!
TypeScript PM here. You could potentially assign to an intermediate variable with an explicit type annotation and then re-assign to `module.exports`. For example: /** * @type {Hapi.IRouteConfiguration} */ var routeConfigs = [ { method: 'GET', path: '/', config: { auth: false, }, handler: (request, reply) =&gt; { reply('Hey now... stop trying to be sneaky!') } } ]; module.exports = routeConfigs; That's provided that you've imported `Hapi` somehow, but that might not be the case, and unfortunately there's no way of doing a type import in JSDoc yet.
Well, people are moving away from boilerplate to go down the road of meta package such as create-react-app. It is usually a better tradeoff.
Ramda is even nicer for FP 
Any particular details what makes it amazing?
Same with http://backbonejs.org/docs/backbone.html Sad to see this tradition going away.
According to [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access), bracket notation for string was introduced in ES5.
Given the nature of Lodash, I'm sure all these questions have come up over time and it's been tweaked over and over again, either for performance or reusability. But finding out why things are written this way is one weird scavenger hunt. 292 was chosen because of this [bug](https://github.com/lodash/lodash/issues/2354#issuecomment-220357644). The [.internal/createRound history](https://github.com/lodash/lodash/commits/master/.internal/createRound.js) only goes back to January of this year, so finding anything about it before that is either a Github issues search or searching the repo at an earlier point. There are some great libraries out there, but I feel like a lot of them suffer this "maintainability" problem. [D3 is another example](https://github.com/d3/d3-selection/blob/master/src/selection/selectAll.js#L4). Liked by many, really understood by only a few.
Nice source on indentation, except this one that I disagree with (at least for JS): foo x = let { s = sin x; c = cos x; } in 2 * s * c
How many of us work on an application where using this would matter? I worked on a pretty big e-commerce application that served a decent number of users and we relied on this a LOT. Our app performed great.
Hi there! Sorry - I'm still new to this. :) I am finishing up my Web Design and Development Certificate. Everything (graphics) needs to be made by me - sounds I can find and credit. I am fairly apt at graphics though enjoy cartoon-ey like styles. Due date is next Sunday. Have most days to work on it all day. The exact specifications are below: - Obtain the user's name at the beginning of game. - Utilize movie clip hit detection. - Present the user's score in a message, that includes the user's name, once the game is finished. - Be fun to play (well, at least a little bit). - Provide the user with a chance to "play again". - Include media cues (e.g., audio, animation) where appropriate. - If your game is based on one you've seen or played provide a reference (via e-mail when you submit) acknowledging your source. (Remember: Simply providing a reference does not permit you to infringe on a copyrighted work.) It may sound quite simple but it's my first one. :') I'd rather a short and perfectly executed one rather than one out of my scope and not perfect. I've only had about 2 months of experience with Animate so... :') Trying my best to come up with something good but vanilla-ish! lol
Good points. I wouldn't have know about the bug. Would have been helpful to mention in comments.
That's exactly the problem. I would expect something named with PascalCase it to be a component or a class -- definitely not a function. You're misunderstanding the issue. Functional components are awesome but they should _never_ be called as functions. Doing so is braking basic encapsulation: you're making assumptions about how the component is implemented. If you need a function that returns JSX elements write a function that returns JSX elements. Do not repurpose React components which incidentally happen to be implemented as functional components.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [angular/angular.js/.../**compile.js** (master → 2a8a29a)](https://github.com/angular/angular.js/blob/2a8a29ac43361fe6d6d1fa6ef3cf8113d5359e2f/src/ng/compile.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh5eeas.)^.
 const reduce = (iterable, reducer, seed) =&gt; { Why not data last as common in FP? 
Webpack is incredibly simple to setup? If you struggle with that you may have other problems.
So that it strongly resembles the existing `.reduce` method of JavaScript arrays. FWIW, in my writing I usually call the methods that are data-last and self-currying `somethingWith`, e.g. `map(list, fn)`, `mapWith(fn, list)` or `mapWith(fn)(list)`. But by the time we get a `transduce` function, it’s data-last, have no fear.
I am speaking at NDC Olso and NDC Sydney this year. They are great, well-run conferences, but big and multi-track. If you’d like something more intimate, go for single-track conferences. Everyone sees the same presentations, so it’s easier to strike up a conversation with someone, or join a group talking about something you find interesting.
Me too. It's incredibly easy to use, so: extra points for the API.
I wouldn't even call that "Javascript". 
I have. I think we may have differing purposes and usability. Not really a select dropdown.
Fair
Even in Haskell it looks confusing.
&gt; So that it strongly resembles the existing .reduce method of JavaScript arrays. The fluent a.method(b, c) corresponds to FP method(b, c, a) http://ramdajs.com/docs/#reduce
 const arrayOf = (acc, val) =&gt; { acc.push(val); return acc; }; Mutating the arguments? Is it necessary? ;) 
I am familiar with this style and with the Rambda library. In fact, the Ramda authors and I corresponded about this subject in the library’s early days. You’ll find functions written like this all through JavaScript Allongé. Nevertheless, I chose a more traditional formulation for the`reduce` function in this post. The article is not about how to write `reduce`, and quite honestly no matter which way you write it, somebody argues that it ought to be written the other way. If I wasn’t exchanging comments with you about why it doesn’t match Ramda, I’d be exchanging comments with somebody else about why it doesn’t match Underscore. What I will say is that if I did/ever do chose to rewrite the examples to be collection-last, I’d rename the function `reduceWith`, because that is my personal house style: If it doesn’t have `With`, it’s collection-first. If it does have `With`, it’s collection-last. I never, ever write `reduce` or `map` or whatever to be collection-last. --- To summarise: I like Ramda, I like writing functions like this to take the “verb” first and the “noun” last, I chose a different route for this particular function for reasons to do with the exposition rather than as a suggestion for how `reduce` ought to be used as a function. I suspect we agree on all the important points about functions like this in general.
 acc == '' ? val : `${acc}${separator}${val}`; or :) acc == acc ? val : acc + separator + val 
Recently released: https://github.com/ladda-js/ladda I know that the people behind this caching library put a lot of effort into documentation, clean code, API design and test coverage with over 99%. It is a small library where it should not take a lot of time to read through the source code. The code is concisely written under the constraints of functional programming in JS.
&gt; Reducers are binary functions. You mean ternary?
http://webdriver.io
&gt; A so-called "functional component" also creates an object -- a virtual element. In that respect it is no different than factory. This is where you're wrong -- behind the hood the functional component is converted into a mounted React component. Let's walk through an example: Say I need an Avatar component, so I write one. It has no state, so I write it as a functional component. // src/components/Avatar.js export default ({url}) =&gt; &lt;img src={url} /&gt; // src/components/MyComponent.js import Avatar from './Avatar' ReactDOM.render(&lt;Avatar url='img.png' /&gt;, document.body) My coworker Jimbo writes some code using the Avatar component. However, for perf reasons he does what this article suggests. // src/components/JimboComponent.js export default ({user}) =&gt; ( &lt;div&gt; Your Avatar: {Avatar(user.avatarUrl)} &lt;/div&gt; ) Now, I need to add some state to Avatar, so I refactor it. // src/components/Avatar.js export default class Avatar extends React.Component { ... } My code works as expected without any changes -- because I was using Avatar as a component. However Jimbo's code is now broken because he was doing dirty little tricks. I can't speak for everyone but if I ever saw this code in a code review I would immediately reject it for this reason. React's component model is intentionally built so that components are reusable and you don't have to worry about how it is implemented (i.e. whether it uses a function, React.Component, or React.createClass).
Completely blew past that when originally looking on that page; thank you!
Vue's code is good but these lines leave me puzzled where the `VNodeData` is defined: https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js#L5 Possibly it is here or maybe not? https://github.com/vuejs/vue/blob/dev/types/vnode.d.ts#L36
`.concat` creates a new array while leaving the original unmodified. Thus, if we copy an array with ten elements, it is going to create (and discard) arrays with one, two, three, four, five, six, seven, eight, and nine elements. It then creates and returns an array with ten elements. Whereas, if it uses `.push`, it modifies the seed array in place. This has some costs to do with reallocations as it grows, but is certainly faster than creating a new array on every iteration. The downside of this is that careless use of `.push` can create problems. For example, if we have: const squares = reducer =&gt; (acc, val) =&gt; reducer(acc, val * val); for (const i of [1, 2, 3]) { console.log(transduce(squares, arrayOf, [], [1, 2, 3])) } //=&gt; [1, 4, 9] [1, 4, 9] [1, 4, 9] Every time we invoke the inner `transduce`, `[]` creates a new, empty array that we can mutate with `.push`. But if we carelessly refactor to: const EMPTY = []; const squares = reducer =&gt; (acc, val) =&gt; reducer(acc, val * val); for (const i of [1, 2, 3]) { console.log(transduce(squares, arrayOf, EMPTY, [1, 2, 3])) } //=&gt; [1, 4, 9] [1, 4, 9, 1, 4, 9] [1, 4, 9, 1, 4, 9, 1, 4, 9] Now, every time we invoke the inner `transduce`, we refer to the exact same array bound to `EMPTY`, so we keep pushing elements onto it! That would not happen with `.concat`.
Thanks for the tip on assigning an intermediate variable before exporting, it worked nicely. That's unfortunate about not being able to import types in the jsdoc, but I have no doubt that is a very hard problem to solve. This is a great release of TS! 
True, I don't have to worry about that as our API paginates data past a certain point. 100k entries? Sounds rough.
Haha I guess so? But you could easily fix this with a definition prior, using `_.set()` or just a normal definition. It would be a plus.
I haven't checked benchmarks, as our API paginates past a given quantity so it's not an issue for us... I've tested it with 80 items in an array/collection and the difference wasn't noticeable for a human.
I think it'll be possible, but yes, it'll take some designing and collaboration. Thanks for the kind words!
Timezones are a pain. If every system you deal with uses UTC it's not *as* bad, until of course you need to render a date server-side and send it to the user. You may be save at a specific moment in time saved in your db, let's say 2017-05-05T04:21:07.209Z. Turn that into a formatted date using something like `moment('2017-05-05T04:21:07.209Z').format('LLLL')` and render in your HTML, you'll get different results based on the timezone the server is set to. Let's say you have some rando bare-bones distro to run your node app, well it's probably using UTC.... so while that date should be considered 9:22PM on the 4th to someone in PST and 12:33 the 5th in EST... both users will get 4:22 AM on the 5th. You basically need to ask the user for their timezone and perform the appropriate translation always, unless you just pass the JSON for the date and get the user to render it themselves. That's just rendering. Let's say you deal with some legacy DB where the designers weren't thinking outside their own timezone so they set the DB time to PST and store all the dates as TIMESTAMP without timezone.... database is riddled with `GETDATE` calls .... you are now officially in a world of pain. Oh, and don't even get me started on daylight savings time. In general, it's just stupidly annoying thing to deal with and if it's not done right you'll be eternally plagued by users getting wrong dates, things being an hour out and any number of other problems.
Leaflet.js. Literally the cleanest and easiest to use mapping libraries for javascript available. 
Redeemed. Cheers :)
What if `val` is an array?
There's definitely a performance cost. Thats why redux is often paired with a library for immutable data structures. It's the shallow comparisons between objects that is free. 
Thanks!
ThreeJS https://github.com/mrdoob/three.js/tree/dev/src
i'll kill u
In most browsers at least since [2011](http://stackoverflow.com/questions/5943726/string-charatx-or-stringx). (Though according to the [accepted answer](http://stackoverflow.com/a/5943760/19966), the implementation was ["incomplete"](http://blog.vjeux.com/2009/javascript/dangerous-bracket-notation-for-strings.html), i.e. read-only, in 2009.)
Thank you!
Thank you!
Thanks Reg :). I'd been keen to see (or write) a careful explanation of transducers that used JavaScript since watching Rich's talk[1] several years back. 1. https://www.youtube.com/watch?v=6mTbuzafcII
Where there can make some difference in the specific example used in that comparison, the way it is done there, it may be negligible in your well-structured application. You probably would not iterate a list of 1000 items in your user's browser. However, it is indeed not the point, but unfortunately distracts from it and somehow surprising to see in the FP context, which is about code structure, not optimisation details.
Awesome! I'll send it to my manager. Hopefully there will be for 2017 and hopefully she approves it.
I can see complexity dealing with it yourself but it is a shame if there is no package to address it. Yes, you need both the server and client timezones and convert time from one to another. While it is a pain to implement from scratch, there is perhaps something already written to do it?
Luckily we don't need it anymore :)
Yep, it's useful plugin, but you still have to deal with timezones :p
Thank you. Will leave a review so udemy starts marketing your course.
The less influence the web part has over the application the better, and that's slowly happening. No CSS, no HTML, just Javascript. When making React applications, it's easy to do things that aren't easily done in native systems like Qt, Gtk, Sl or XAML, but everything that's hard has to do with the dom or the parts that cater to it, like if there's still a conflict somewhere. This doesn't play a role in react-native and for the better of it. 
Well, I think talking about lock-in is totally warranted considering Google's history of shutting down services, but I'm sure many have already made that point before me. However unlikely it is that Google will suddenly shut things down, Firebase would be _perfect_ if there was an open-source community edition that you could self-host (on your own servers or in the cloud.) I wouldn't even _want_ to use it -- I'm perfectly fine with throwing money at Google for hosting stuff for me -- but it would be a good escape hatch guarantee to have in the case Google changes their mind about the product. But yeah, I'm aware I'm not pointing out anything new here. Let's just enjoy Firebase for what it is. \o/
you can get your object keys using Object class like this: var keys = Object.keys(object); var variable = keys[0]; [source](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)
To give you the terminology that you're looking for here : `objectVariable = { keyOne: valueOne, keyTwo: valueTwo } ` So, doing `objectVariable.keyOne` will give you the *value*. What you need to use is [Object.keys](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys). To continue with my example, this would be : var objectKeys = Object.keys(objectVariable); var objectKeyOne = objectKeys[0]; //keyOne var objectKeyTwo = objectKeys[1]; //keyTwo Hope that helps! Keep at it! -P
http://exploringjs.com/es6/ch_modules.html 
Read the AOSA book (Architecture of Open Source Applications): http://aosabook.org/en/index.html Rather than trying to find one good codebase, it might be more practical to find good/well-written parts of multiple codebases.
Aside from what /u/tswaters mentions, this must give some indication of complexity: moment.js - 3737 SLOC moment-timezone.js - 496 SLOC moment-timezone-data-latest.json - 600 SLOC
But what would r/javascript be without stuff like: * Why you should use framework/toolset X? * How you can do XYZ in the world's most trendy framework... * I finished tutorial Y.... what do I do now? * JavaScript isn't my first language... how do I use classes or MVC to make it look like something that isn't JavaScript? Then there are the broken promises and faulty assumptions: * You cannot write code in JavaScript without the world's most favorite framework X * The DOM is slow, you can do this to make it faster... * You cannot write any application greater than 5 lines without heavy doses of OOP.
It's harder to reason because it's a React app which has a known convention for pure function components. The function looks like a pure function definition of a component but exists outside the normal component lifecycle due to it's implementation. Calling the component via Avatar({ url: avatarUrl }) just returns JSX, not a component that is managed by the react life cycle, it is not explicit. I guarantee this will cause confusion for other devs who may need to change the Avatar function. I use functions to return JSX, but I do not call it a component. I write a function that is explicit about what is does e.g. 'renderListOfProducts' and the arguments would not be generic such as props. As I said, I don't believe there is a problem of using functions to return JSX. There is a problem when you write a function that looks like a component definition and then don't use it as a component by Reacts definition. There is nothing wrong programatically but there is something wrong conceptually, and it will cause issues for other develops if this adopted widely in a large application.
/r/gameideas Sort by top of all time, there's some really good stuff. Good luck! 
Look into pop. Not going to give code because this sounds like a homework question. 
It is still read-only to this day, JS strings are immutable. Setting a character using bracket notation is silently ignored.
Underscore and Lodash have a function called `_.each()` which can be used to replace `for` loops.
All the web based Ms office apps are pretty impressive
[removed]
Forwarding POST data from a domain to another could raise security issues, it's unlikely you'll find something that behaves like that in the URL-shorteners world and the POST data is probably discarded.
I had a problem the other day where I needed a function that could take an integer and return a unique point some distance away from the center the map (0, 0). When the number got bigger I would get farther away, but at the same point I did not want to leave holes in the scan. This is what I came up with with the help of one of my coworkers.
Use unshift
is that only for server-side... do people use elm for client code at all?
Everything by Sindre Sorhus https://github.com/sindresorhus
Hint 1: if you swap the 1st element with the last, then the 2nd with the next to last and so on, until the middle of the array, you'll have reversed it. In your example: position 0 1 2 3 4 value 1 3 5 7 9 if you swap position 0 and 4, then 3 and 1, you'll get: position 0 1 2 3 4 value 9 7 5 3 1 ...which is what you want. 
There is a built copy hosted [here.](http://swadgescode.xyz/test/index.html). I cannot get it to support Mac OSX sadly. If anybody had any ideas or suggestions, I'm open to pull requests and issues.
Please tell me this is satire. Moment *does* split out the big, optional parts - locales and timezones. The part that isn't "modular" is only 16 KB. To split it up farther would be a big mistake, hurting performance, usability, and the community.
As a Redux maintainer and author of the Redux FAQ and "Structuring Reducers" docs sections, I approve of this comment and wish I could upvote it repeatedly :) Also, I have a bunch of articles on [React and Redux performance](https://github.com/markerikson/react-redux-links/blob/master/react-performance.md) in my [React/Redux links list](https://github.com/markerikson/react-redux-links), which cover topics like immutable data performance, use of `shouldComponentUpdate`, and more.
Fire up a Java web server to which you will send the JS array encoded as JSON. 
Check this out: https://github.com/WhoopInc/frozen-moment This is a nice addition to the moment itself if immutability is a concern for you.
Thank you.
I'll try to learn both since it's hard to ignore React popularity xD
Thanks!!
Pretty sure Safari will error in strict mode.
the in operator is different from the for..in loop. If `in` is being used in the loop, it has different meaning. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in vs https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in
Ah, but it's not just a function, right? It's a "Component" which has special meaning in the React universe. Jimbo broke the Component API by making assumptions about a particular Component's implementation and that's why Jimbo's code is broken. It's basic encapsulation.
&gt; JavaScript is a language with first-class functions, but it’s not a functional programming language JavaScript may not be purely functional, but pure functions are certainly easier to reason about. &gt; you aren’t really writing production JavaScript if you don’t perform some basic optimisation. Unless the array is arbitrarily large, the performance gains of doing things "in place" are usually non-perceptible. I generally agree with you, but this sounds like the mantra of premature optimization to me.
I think those are great ideas. Ill work on making those adjustments. Thanks for the feedback!
I didn't feel the need to but I suppose if enough people ask for it. It's something I can add in
TIL that it ever didn't work 
 5 = 4; console.log(5 + 5); // 8
Fluent is good at going over the latest trends and peaking at some things coming down the line. For someone with less experience look at local or targeted conferences towards your framework of choice.
Look at card shuffling algorithm, generate a hidden playlist with this and then just drop the user into that playlist.
So you don't actually know?
Why not write it with the same syntax you did for the ramda example? _.get({'a.b': {c:4}}, ['a.b', 'c']); 4
One thing to consider is that there is a big difference between optimizing some code we are writing for one feature of an app, and optimizing some code that goes into a library or other broadly used function. If I'm writing a one-off, optimization is the last thing on my mind. But if I was writing a reducer function that was going to be used by programmers across the app, performance expectations would be part of the "interface," as would be safety considerations. So, I might or might not make a fast but unsafe version. I might make two versions so that programmers can choose for themselves. But I certainly would think about it, and I believe that we should think about these things. Thinking about these things is not the same thing as prematurely optimizing these things, and context matters. --- All that being said, the real reason I mentioned this in the post has nothing to do with the above considerations. The real reason is that the post talks about using transducers to avoid excessive copying of the data set when processing potentially large data sets, so... It might have been embarrassing if the "gains" from transducers were thrown away on excessive copying in the reducer ;-)
I'd love to see brush force tied to the mouse cursor speed/acceleration.
transducers in a way they are ported from clojure may be easily replaced with generators, solved absolutely everything clojure transducers can solve, with newer async generators even transducing of some infinite request streams. And their composition is just a function composition. There are more details in https://effectful.js.org/posts/simple-transducers-javascript.html 
[MDN Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) The [Rauschmayer books](http://exploringjs.com/)
I feel like maybe you're getting too hung up on what you want a component to be rather than what a component actually can be? Maybe you could articulate an argument for why components must be "visual elements on the screen" to help others understand where you're coming from? Components are often used to represent distinct UI areas, but I'm not sure it's useful to restrict them to that use only.
yea im just saying i just took it for granted, never really thought it was a tough problem which it is
Well they're you're using a primitive as a variable... a more realistic example would be (5).valueOf = () =&gt; 4; Thankfully, it still doesn't work
Mobile support isn't great, but I believe that's true for pretty much all select libraries :) For mobile I either use the native select element or a full-screen selection solution. It doesn't require any other libraries, but it has optional bindings for either jQuery or React.
💯 I've also written about using composeable generators. Most recently in the post preceding the OP: http://raganwald.com/2017/04/19/incremental.html#III But also going back a few years in posts like this: http://raganwald.com/2015/02/17/lazy-iteratables-in-javascript.html Note the misspelling in the slug ;-)
I guess you mean well, but don't help him spam his company's website.
Your question is so terribly vague you won't be getting any real answers. Try giving a little more details.
The Sieve is a process which yields prime numbers. Without any sort of animation, this isn't a visualization of the Sieve, it's a visualization of prime numbers. See the [Wikipedia article](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) for a great visualization of it.
thanks, but the may question still is why does anyone need clojure transducers in JS considering it has generators?
what program are you using to write your code?
next iteration: 1. onPageLoad(), generate a new random number "shuffleStart" between 1 and 1/2 list size (inclusive); compute value "shuffleStepSize" = listSize / 4; 2. modify my next() function to work with an "N" for a number of "steps" to make in order to find the next track; 3. onTrackPlay(): play track in the grid &amp; set shuffleStart = 0; 4. onPlay(), onPlayNext and onAutoPlay: if shuffle-is-ON then next(getShuffleStep()); else next(1); getShuffleStep(){ if shuffleStart != 0 return shuffleStepSize else return shuffleStep } since the list a ranking chart; and the tracks on the "bottom" are not-as-good or they are newer, or they are older (LOL); doing this kind of 1/4 size stepping will ensure that we get a mixture of tracks from the top and the bottom of the list, withing 4 or so track played.
Selectivity looks quite neat and the api is nice too. Does it support RTL, touch devices, screen readers with aria-live regions, and full WCAG AAA requirements? For example, in the "Select a city by timezone" example, there is no way to keyboard-navigate through the timezone dropdown (parent).
Apart from the benefit of learning the whole toolset, why not use vue-cli?
But paoolino was right. I am ashamed that something so basic I missed.
There is no good solution here, iFrames can't communicate between sites for good reason; it can be used maliciously. Imagine if you could load facebook, twitter or worse banking sites in a hidden frame and extract personal information from the rendered DOM (assuming the user is already logged in or has saved credentials). Sounds like an issue with your customers' content, not your system or implementation of it. Now, there may be alternative solution, but it's impossible to know without seeing why the page is jumping around.
oh right I see it now, I was looking at it wrong
Here is a [screenshot of Firefox 1.0](http://imgur.com/a/PwonR) showing it was already implemented (in SpiderMonkey) in 2004.
It still works, but its looking at keys, not values ;) var arr = ['a', 'b', 'c'] 'a' in arr // false 'c' in arr // false '0' in arr // true arr[0] // 'a' '2' in arr // true arr[2] // 'c' '3' in arr // false arr[3] // undefined
Sometimes it's a misunderstanding of how open source/licensing works, sometimes it's misguided security practices (but it's still possible to set up npm from behind a firewall)
Not a particularly efficient or semantic solution. https://repl.it/HjI2 Feel free to copy for your homework and lose out on the learning experience though.
Maybe is hard to follow this approach, you need to control every index state, i prefer the "LIFO algorithm way", that why i say to see to array_reduce method. https://www.computerhope.com/jargon/f/fifolifo.jpg
Reversing an array is hard?
yeah so it's useless
Thanks!
 5 = 4 VM2256:1 Uncaught ReferenceError: Invalid left-hand side in assignment
Well for one it doesn't depend on jQuery... (hence "No Dependency")
There is nothing malicious here. Also, while Obfuscation is often used to attempt to hide malicious code, there are many other reasons someone may want to use it. So just because something looks scrambled or shortened, doesn't mean it's bad. var Q = '' + (window.getSelection ? window.getSelection() : document.getSelection ? document.getSelection() : document.selection.createRange().text); if (!Q) Q = prompt('Enter search terms'); if (Q != null) Q = Q.replace(/\r\n|\r|\n/g, ' ').replace(/^\s+|\s+$/g, '').replace(/\s\s+/g, ' '); if (Q != null) (function(n, g, q, c, f) { var s = document, l = s.onclick, h = "ws_cmbm-" + f, b = s.getElementById(h), d = "ws_cmbms-" + f, p = s.getElementById(d), e = null, o, a = { tl: { left: "1px", top: "1px" }, tr: { right: "1px", top: "1px" }, bl: { left: "1px", bottom: "1px" }, br: { right: "1px", bottom: "1px" } }, k, m = ".ws_cmbmc{position:fixed;z-index:1001;width:110px;display:block;visibility:hidden;border:1px solid #b0b0b0;background:#fff;padding:1px%200%201px%201px;text-align:left;border-radius:1px;-moz-border-radius:1px;-webkit-border-radius:1px;box-shadow:2px%202px%201px%20#777;-moz-box-shadow:2px%202px%201px%20#777;-webkit-box-shadow:2px%202px%201px%20#777;}.ws_cmbmc%20a{display:block;float:left;margin:0;width:105px;border:none;padding:3px%200%203px%206px;background:#fff;color:black;text-decoration:none;font:normal%20normal%20normal%2012px/100%%20Verdana,sans-serif;letter-spacing:normal;word-spacing:normal;}.ws_cmbmc%20a:hover{background:#498BF4;color:white;border:none;text-decoration:none;font:normal%20normal%20normal%2012px/100%%20Verdana,sans-serif;letter-spacing:normal;word-spacing:normal;}"; function r() { b.style.visibility = "hidden" } function j() { b.style.visibility = "visible" } if (b) { if (b.style.visibility == "visible") { r() } else { j() } return } if (!p) { m = m.replace(/.ws_cmbmc/g, "#" + h); p = s.createElement("style"); p.type = "text/css"; p.id = d; p.appendChild(s.createTextNode(m)); s.getElementsByTagName("head")[0].appendChild(p) } b = s.createElement("div"); b.setAttribute("id", h); b.className = "ws_cmbmc"; for (o = 0; o &lt; n.length; o++) { e = s.createElement("a"); e.appendChild(s.createTextNode(n[o].title)); e.setAttribute("href", n[o].url); e.setAttribute("target", "_blank"); e.onclick = (function(i) { if (q) { r() } }); b.appendChild(e) } s.getElementsByTagName("body")[0].appendChild(b); if (a.hasOwnProperty(g)) { for (k in a[g]) { b.style[k] = a[g][k] } } else { if (g == "c") { b.style.left = Math.round((window.innerWidth - b.offsetWidth) / 2) + "px"; b.style.top = Math.round((window.innerHeight - b.offsetHeight) / 2) + "px" } } if (c) { s.onclick = (function() { r(); if (typeof l == "function") { l() } }); b.onclick = (function(i) { i.stopPropagation() }) } j() })([{ title: "Acronym", url: "http://www.acronymfinder.com/~/search/af.aspx?pid=osearch&amp;string=exact&amp;acronym=" + encodeURIComponent(Q) + "" }, { title: "Dictionary", url: "http://www.google.com/search?q=define+" + encodeURIComponent(Q) }, { title: "IMDB", url: "http://www.imdb.com/find?q=" + encodeURIComponent(Q) + "&amp;s=all" }, { title: "Quote", url: 'http://www.google.com/search?q=' + '"' + encodeURIComponent(Q) + '"' }, { title: "Symbolhound", url: "http://symbolhound.com/?q=" + encodeURIComponent(Q) }, { title: "Thesaurus", url: "http://thesaurus.com/search?q=" + encodeURIComponent(Q) }, { title: "Translate", url: "http://translate.google.com/?text=" + encodeURIComponent(Q) + "&amp;hl=en&amp;langpair=auto|es&amp;tbb=1&amp;ie='+e" }, { title: "Tvtropes", url: "http://tvtropes.org/pmwiki/search_result.php?cx=partner-pub-6610802604051523%3Aamzitfn8e7v&amp;cof=FORID%3A10&amp;ie=ISO-8859-1&amp;q=" + encodeURIComponent(Q) }, { title: "Urbandictionary", url: "http://www.urbandictionary.com/define.php?term=" + encodeURIComponent(Q) }, { title: "Wikipedia", url: "http://www.wikipedia.org/search-redirect.php?family=wikipedia&amp;search=" + encodeURIComponent(Q) + "&amp;language=en&amp;go=++%E2%86%92++&amp;go=Go" }], "tl", false, true, Math.floor(Math.random() * (999999 - 10000 + 1)) + 10000); void(0);
Do you have a good way of debugging the cpp code?
I recently worked on an old site of mine that used 1.3.2 (circa 2009). Upgraded to 1.12, then directly to 3.2. No sweat, hardly had to change any code.
Thanks a lot! &gt; So just because something looks scrambled or shortened, doesn't mean it's bad. I know but since I didn't know what was underneath all that I couldn't help feeling uneasy every time I clicked it. Thanks again.
Angular is a beautiful framework stop moving to other crap frameworks.
So I want to say upfront that I haven't read this (or the others), and I know that puts me in the wrong... But I did laugh at "simple beginners guide" and "part 5" haha
date-fns is quite new compared to Moment, I don't think the idea of importing individual functions from a library was all that common when Moment was first introduced. And at this point since it depends on their non-native Moment object it would probably require a full rewrite for a lot of the functionality to work as individual functions. I just did something similar with my own [relatively tiny date library](https://github.com/patrickfatrick/gregorian), and it did entail basically rewriting large portions of it. And that was a much smaller undertaking than what would likely be required for something like Moment.
No risk, but the longer you leave it, the more tricky it might become. Going from 1.3 to 3.2 is already a 2-step process involving 2 jQuery versions and 2 jQuery Migrate plugins. When v4 comes out that's an extra step too. Then again, who cares? Few people maintain 10-year-old javascript when it's so cheap to write something newer and cleaner.
- No complexity exposed. - Every month you get a new release for free with new features. You only do "yarn update" and you get 15 new features for free. - You reduce your dependency on the underlying packages, as you have a limited API exposed. - You have an extensive documentation on what is possible and how to do it. (boilerplate could potentially do the same) - It makes sense to contribute to a metapackage more than a boilerplate, as all your projects can get your features.
Redeemed. Thank you!
Not necessarily with jQuery, but security does play a factor in old, vulnerable JS dependencies: https://snyk.io/vuln?type=npm This is actually a really interesting area to explore as it's possible to combine the HTTP Archive database with the Snyk vulnerability database to get a sense of how bad the problem is across the web. The sentiment is more about relying on unnecessary code. Consider that jQuery 1.x was written for compatibility with dinosaurs like IE 6. So anything you wanted to do in jQuery like complex query selectors, you needed to ship polyfills to the user, even if they were on the latest Chrome or Firefox. It's not exactly the fastest or most streamlined experience.
Ooh, I've actually been looking for something like this! Unfortunately the series is incomplete. I acquired a copy of Build Your Own Angular and holy shit it's long and involved. 
You use when you need it or when your code is going to be way more readable because of it. As an example, I never felt the need to use lodash, with the ES5/ES6 methods manipulating arrays and objects is quite easy. However, when I needed to deal with webcam (and multi browser support), I used webcamjs. When I needed to deal with dates and timezones I used momentjs. When you see a generic problem that would take a considerable time for you to solve and/or your solution could be "hacky", it's time to search for an existing module. 
That completely depends on the value of the variable `Zahl1` -- what is the value of `Zahl1`?
Thanks man, you solved my problem :) Everything working just fine !:) 
&gt; Poor UX is surprising UX. Re-fetching the page after a cache timeout (even if 0) would not be surprising since, as mentioned, it's how the browser natively works. It's unrealistic to expect users to know about browser cache let alone cache timeouts. Users simply expect recently visited pages to load instantly and anything outside of that behaviour is surprising - ie bad UX. In terms of reasoning, my main goal with the post was to explore different ways of avoiding cache staleness. Having a multi page application is one way of doing just that (while also giving us others benefits).
&gt; It's unrealistic to expect users to know about browser cache let alone cache timeouts did i say that?
When you're dealing with a rube goldberg machine with many interacting systems, there's no magic bullet library you can use to magically fix all your dates to be correct. You need to design for it and think of each system interaction and how they deal with dates. Like I say, it's not bad if everyone is UTC - or even just the same timezone, whatever it may be.... once just one of those systems uses something else, you are in a world of pain. That and the necessity to know the user's timezone if you intend to render dates for them. And yea, with javascript anyway there is a pretty good package in moment-timezone, that's my go-to. It works incredibly well.
Clicked on the link to React's source code and saw this line: https://github.com/facebook/react/blob/master/src/isomorphic/React.js#L76
I thought flatMap was for mapping over nested arrays (_flattening_ before iterating). It's actually a lot more useful than that it looks like! Good article.
If you're interested, I have some similar "build a mini-React" articles and discussions of the current implementation in my links list: [React Implementation and Concepts](https://github.com/markerikson/react-redux-links/blob/master/react-implementation.md).
What part, exactly, is hyperbole? I don't see a single claim I can't prove. The 16 KB number is directly from Moment's homepage, which is minified+gzipped, but that's what everybody quotes. It does hurt performance, I've seen code bases where something like 20% of execution time was just resolving `require` calls in hyper-modularized code, there was a reddit post measuring it a while back too. It does hurt usability, you're making it take longer to install, introducing potential for error, and (depending on your modularization strategy) introducing extra manual steps to install. It does hurt the community by de-centralizing effort and understanding, look at the split-out parts of Browserify, literally nobody but the core team contributes to them. I don't know what you're talking about with Moment Timezone's "tons of stuff even in itself", because Moment Timezone is 2.6 KB. You can add only the timezone data you care about, or, for convenience, you can download a build with all timezone data, or with the 2012-2022 subset. What more do you want?
Redeemed, thank you. 
Awesome stuff, thanks a bunch!
Welcome to Webpack
It is a homework question and I just tarted out so it's very complicated for me
Yes I know how to do the above but your hints helped, never knew you could have an empty array
Care to give some reasoning?
reasoningProviderFactory()
Hilarious and painful for those of us maintaining 1.x apps
Ah i see what your doing, basically initalize in the controller....so only the controller needs to be called cool idea
I can also recommend Eloquent JavaScript, you can read it online or buy a paperback: http://eloquentjavascript.net/
Getting `Uncaught SyntaxError: Unexpected token import` on my end (latest Chrome)
Especially since he argues for making a multi page app instead which would do just that, fetch it from the server.
&gt; Is there a way to resize the document to letter size I doubt that PDF.js would support that because PDF files have their own page sizes. PDFs can't reflow the text or anything clever like that, so the only way to 'resize' them to US letter size would be to scale the whole page to fit, probably leaving whitespace around the edges. If you want to do that you could serialize each page to a `&lt;canvas&gt;` (or [SVG](https://github.com/mozilla/pdf.js/tree/master/examples/svgviewer), maybe) and then modify the resulting image to make it greyscale, and then build another PDF at US Letter sizes with (eg) [jsPDF](https://github.com/MrRio/jsPDF).
I guess? Maybe they could have accomplished that without shifting the content over. It really bugs me, and I'm confident I'm not alone. 
wtf is that?
The Java Stream variant does exactly what you think; takes a list of Streams and merges them into one Stream. Scala also has an implementation that works on Seq which does the same, although, many things in Scala are a Seq, such as String (Seq[Char]). I'm actually kind of surprised this wasn't added to ES6, given the addition Array.from, Array.includes, etc.
Luckily I never got to the point where I needed to step through the code to debug. Emscripten has some info in their docs for if you need to debug [here.](https://kripken.github.io/emscripten-site/docs/porting/Debugging.html)
Hello, I have a question. What happens when a component re-renders ? Does it fire a new request everytime ?
We can't use async/await in enterprise software today? Why? Babel is verboten?
Currently yes, but I understand that is something that varies for each use case. So, hopefully there will be an API to control the behaviour. Edit: Forgot to mention re-rendering without prop change won't trigger a request, preventing duplicate request 🙂 Edit: typo Thanks
Thanks!
I released version 2.0 of [fake-indexeddb](https://github.com/dumbmatter/fakeIndexedDB). It's an implementation of IndexedDB that runs in-memory on Node.js, which is useful for testing. Changes since the last release: * Fully implements the [IndexedDB 2.0 API](https://hacks.mozilla.org/2016/10/whats-new-in-indexeddb-2-0/) (which technically still is a draft, but is probably not going to substantially change). * Ported to TypeScript, which hopefully means less bugs. * Dynamically runs [the W3C web-platform-tests](https://github.com/w3c/web-platform-tests/tree/master/IndexedDB) rather than using manually ported tests. This means it's easy to run new tests, and the tests written since the original release of fake-indexeddb turned up several minor bugs which have now been fixed.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [w3c/web-platform-tests/.../**IndexedDB** (master → 7ec8d53)](https://github.com/w3c/web-platform-tests/tree/7ec8d530f76ccd3dc66c2bc2d0e33fb64f7295ce/IndexedDB) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh7ea9i.)^.
Anymore libraries like that that use native ES modules? 
Can you have multiple Request.Start (or other) children? Say for example I have two loading areas? What if I need to chain requests (I.e fetch the user data and then fetch their friends and then fetch data from each of their friends)? I think the biggest trouble I have with this is doing API requests directly in your view mark up. Seems really foreign to me and I'm not sure what problem or solves. I'd love to have your thoughts on why you built it. 
I think the "request" aspect of this project could be abstracted out (also why I suggested a HOC in my other comment). At the base level this just seems like a smart switch statement to toggle a fork in your component tree using the state of some promise chain.
The response data **should** ultimately be in some state container outside these components. I think this tool is mainly for someone who doesn't care about tracking the status of a request in their state. I may not want to store network error messages either. I might just want to specify the components to render for a set of response codes and provide a callback to handle successful responses. 
thanks mate. I appreciate the support.
I agree, data has to be stored, but only the one you care about. All the other states are transient and it makes sense to abstract that out. You are right on point. I saw many tutorials, which led my team in different direction, and they were using redux for even showing a loader, which freaked me out, and hence the library. Also since it's declarative you know which component is dependent on what request, which I think is a common pattern and can easily be abstracted out. 
X-Post referenced from [/r/programmerhumor](http://np.reddit.com/r/programmerhumor) by /u/DJviolin [@nested_loops opening JSConf EU 2017](http://np.reddit.com/r/ProgrammerHumor/comments/69lq9s/nested_loops_opening_jsconf_eu_2017/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Reputation and community adoption are great heuristics for picking good libraries. LoDash is so popular and well-supported that you can safely include it in your project without worrying about it going out of date or being super-buggy. Freedom of choice is great, but at the end of the day, it's often safer to be using the same stuff as everyone else so that you know it'll be maintained and have good docs. Opting into bigger modules can save you time and effort because you kill several birds with one stone, even if those birds don't exist yet. Using LoDash as an example, say you only use a single LoDash function. That's fine. Learn it; use it; forget the rest. But if you ever need any of LoDash's other functions, great! No need to research other modules; you already have LoDash, and you already know it's high quality.
thanks :) got sourcemaps from it but was not able to break point it. Might now be fully supported for WASM yet. I tried making your application run at 144hz (to my screen refreshrate), but it seems you use fixed timestep and things only was more or less speed up instead of nicely interpolated. Is this intended? :) looks cool otherwise! especially when increrasing the timeout. 
it installs but when I run it, I cannot type to the other user. No errors in console log either.
Would you happen to know what the second edition has over the first ? I believe I read the 1st edition a few years ago 
Wow, that is fantastic! Working in Firefox (Nightly) too with `dom.moduleScripts.enabled` set in about:config. What is required to allow scripts to be used like this? I can't just import any-old-thing from `https://raw.githubusercontent.com/` that exports, can I? [edit: tested, nope I can't] 
Why is jquery included in this project? 
Your tone was snarky and entitled. I imagine that's why it was closed. It's called open source software. Mistakes happen; you are owed nothing. 
Testers &amp; Feedback Much Appreciated!
I've been playing around with Angular2 and I wrote this [chord generator](http://maa-chord.netlify.com)
The developer did not break semver rules, you can just not update if UglifyJS@2.x works for you. Ultimately you're using the software he writes for free, you're not entitled to anything; it would have been nice for him to provide a changelog for the release but that's completely up to his discretion since it's his project... this is the kind of attitude that prompts developers to walk away from projects.
wrap your jquery code in ``` $(function() { $('#para').click(function() { $('para').hide(); }) }); ```
I tested your line out and nothing changed. +No console errors
but isn't the .click supposed to be a method of the para if i'm wrong where exactly would I put the #?
https://xkcd.com/1425/
https://jsfiddle.net/Lwqbenc2/
Why not just use Array.prototype.map?
Does it have to be excel documents? If not, CSV is a lot nicer to work with.
Also I was able to get it working when a server hosted my index.html but just loading index.html straight through chrome canary didn't work. Anyone have any clue why that may be?
You shouldn't be doing that anyhow. Hosting off of file:// protocol triggers extra security mechanisms. You're going to ha e a bad time if you go that route. Just python -m SimpleHTTPServer or any of the others.
I mean all the apps I build are going to be hosted by a server so it's not a big deal I just was more so curious as to understand why I wasn't able to host off file:// protocol.
This is due to CORS restrictions - it's as if you were loading code off some random domain, which doesn't work unless that server sets the right CORS header. Having said that, Safari loads modules from file:// fine. So I feel like this is probably a bug in Chrome's implementation, but as others say, in prod you'd be serving from a real server anyway.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [facebookincubator/create-react-app/.../**package.json#L23** (master → 5a7d8e8)](https://github.com/facebookincubator/create-react-app/blob/5a7d8e899ef0f99d362f1195851ee832ccabfd86/packages/react-scripts/package.json#L23) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh8ehpy.)^.
Thanks! 
you can try `body.onload`, but I'm not sure why `window.onload` isn't working for you. &gt;hit enter with the full URL, it disconnects and loads again. I mean, javascript isn't persistent after a page refresh or change. That'd be a pretty major security issue if it did. Whatever script is running is terminated when the page changes or is refreshed. maybe I'm misunderstanding your question/statement. If you're waiting for a specific part of the page to load (and r/javascript will hate how hacky this is) you can add an img element with `src` set to 'null' and attach a function to `onerror`. [more syntactic info on w3schools](https://www.w3schools.com/jsref/event_onerror.asp). It's not a great solution but it might help you debug, if you're having trouble locking down when page elements are rendered. 
Better to ask in r/computervision.
[MDN Tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API) on the Web Audio API is a good start.
windows.onload *definitely* shouldn't be firing prior to the page being loaded. I'm not familiar enough with websockets to help much, but you might consider having websockets send your server the date/time, so you know if it's a cached connection/function or a new one. 
It's not a one size fits all thing but I love it. It csn be can transpiled it as well.
You might have some luck with https://aws.amazon.com/rekognition/
It looks like the script is getting executed before the "imgl" element has been created, move the script import to the bottom of the html body, or add a ["$( document ).ready()"](https://learn.jquery.com/using-jquery-core/document-ready/) to the script to delay its execution until the DOM is fully formed.
There are lists of filter terms configured somewhere in the ABP settings.
They're in two separate files. One is the HTML file the other is JavaScript file.
Ask the user.
Tried that and it still doesn't work. 
Google and stackoverflow are your best allies. One of the main differences between junior and senior devs is the ability to put the right keywords in google, and find the best result in the least possible time. So, don't try to remember all the structures, arquitectures, APIs, methods etc etc at once, just keep the needed documentations at hand and don't doubt to google anything else. Also, if you are stucked on something for a definite amount of time (let's say 1 or 2 hours) and you know you've looked everywhere you were able to, just ask any other dev, even one of your same level. Chances are that he/she will think of a new term to search, or even better, already had a similar problem in the past. Last point (related with the previous one), learn how to explain your problem concisely, but at the same time trying to include all the needed information (it takes time to learn what's useful and what not, and trying to solve the problems of other devs may help you realize what info you should share) EDIT: ask me anything you want, either technical or about the work itself :) 
(Oops sorry about that but here is the full information) -When I load in the page I want the image to load in and once that happens I want an alert to pop up saying the image loaded onto the page. -The error: Uncaught TypeError: a.indexOf is not a function at r.fn.init.r.fn.load 
[Here's the list of class names and IDs ABP uses to filter ads. ](https://easylist-downloads.adblockplus.org/easylist.txt) Funnily enough .advert is NOT included as I recently discovered. 
I linked the file before putting in the image- &lt;html&gt; &lt;head&gt; &lt;title&gt; working with jquery &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p id="para"&gt; Hi are you working, JQ?&lt;/p&gt; &lt;script type="text/javascript" src="js/jquery.js"&gt; &lt;/script&gt; &lt;script type="text/javascript" src="js/script.js"&gt; &lt;/script&gt; &lt;img id="img1" src="http://www.villagehatshop.com/photos/product/standard/4511390S61417/mens-hats/mj-panama-straw-outback-hat.jpg"/&gt; &lt;/body&gt; &lt;/html&gt;
-still doesn't work
Hello, Thanks for your reply, What the issue i am facing is here is 1) We have created one website that need to be inside iframe 2) When our client use my website in their website like using &lt;iframe src="https://www.my-website.com"&gt;. iFrame loads but with the focus down the page issue so to fix this issue i use window.parent directly but having cross-domain issue. 
Those social things are very annoying on mobile. 
If you want to determine their sex, you'll need a photo of their genitals. You can't determine gender from a photo any more than you can determine their sexuality or favorite food/color.
&gt; curiousdannii commented 13 hours ago • edited &gt; &gt; You've just pushed out a new semver major release to thousands of people with no indication of what is new or backwards incompatible. There's no changelog, no descriptions in the releases page, no blog post at http://lisperator.net, all there is is the list of commits, none of which seem to be marked as semver major that I can see. &gt; &gt; Unless I've missed something, this is a very unhelpful release process. &gt; &gt; The new rapid development pace is great, but unless changes are communicated, I'm not sure I can continue to recommend UglifyJS. I've been in and around OSS for a long time and IME, a question filled with such angry/annoyed tones and veiled threats/ultimatums almost never end well. I've personally even had someone take my words out of context and try to start up a Reddit brigade (very much like this one) because my response wasn't satisfactory. So given all that, my policy as an OSS maintainer on questions like these are: * If I can tell the tone from the title alone, then I shall ignore or close it without response * If I wasted my time reading the whole question and it's bad enough to annoy me, then delete it without response From a PR POV it doesn't look so good, but from my POV it's top marks to the maintainer for the non-engagement any day of the week. 
array.map(toUpperCase) is nice I suppose. 
That's a fairly dumb comment, of course you can. Women don't have giant bushy beards for one, something even the most basic facial recognition software should be able to detect. Estrogen yields softer rounder cheeks, higher cheekbones, etc there are subtle facial features that our brains are hardwired to interpret. Of course it's non trivial to implement, or train a neural network with high success rate for it but comparing anatomy to abstract concepts like favorite color is just fucking ridiculous. 
Forget functions. The concepts of declaration and definition apply to all references. * **declaration** - The creation of a reference in a scope. This can be a formal declaration with *var*, *let*, *const*, or a named function. It can also be function arguments. Finally it can be implied globals, which are references created on the fly (often by accident and errors in strict mode). Declaration, this mere creation of a reference, implies no value or data type. Unless the reference is assigned a value it is *undefined* by default. * **definition** - This is an ambiguous term that could refer to documentation of an expected data type and field of values for a reference or it could refer to an assigned value. This depends on how the interviewer asks the question. More specific terms would be *assignment*, *value*, *instance*, *configuration*, or *type*. Consider these scenarios: b; //undeclared and undefined b = 1; //undeclared and defined var a; //declared and undefined var a = 1; //declared and defined
* Don't worry about memorizing the standard methods or their APIs. You will get this with sufficient practice. In the mean time MDN is your best friend - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype?v=example * Learn scope first. This concept is instrumental in how the language works and how references are resolved. If you don't learn this you are completely guessing at this language. This is not something that can be mitigated. Hoping you can fallback on Java styled OOP won't help you and will make your code very clumsy and subject to failure in simple ways you don't understand. * Once you understand scope concepts like closures are immediately simple. * Inheritance is optional in this language. You can use it if you wish, or not. You can write large elegant applications with deep structures and organized paths of flow control without ever using inheritance or OOP in this language. * functions are first class citizens. This means functions can be used and passed in exactly the same way primitive types are used in the language. * keyword *this* simply refers to the that which called the most locally containing function. For methods it is always the containing object. For event handlers it is typically the DOM node or artifact on which the event executed. * Common methods *bind*, *call*, and *apply* are hacks to define a function's *this* keyword. If you are absolutely reliant upon these keywords to make your code work then your understanding of the language and your code's organization are sub-optimal.
Help me learn: what should I have written instead?
It should be [github.com/mishoo/UglifyJS3](https://github.com/mishoo/UglifyJS3) \^_\^
clean. nice one!
Hey, thanks! So basically my friend and I started working on this website (Forrest) a few months ago. The reason we started was this: Whenever I wanted to learn something new, I'd essentially start with a google search. And then open all the top 10 links in tabs and start reading them one by one. As I read these articles, the number of tabs would keep on increasing. I'd see one author suggest four more articles to read, so I'd open all of them. Or they'll suggest a video course to do, so I'll check it out. I would end up wasting a lot of time filtering out the quality resources from the mediocre fluff and after the whole exercise, I usually ended up with a subset of 5-6 links that I really liked. And, apart from putting it on my blog or dumping them in a github repo, there really wasn't a way to share this curated list with others. So we decided to build a site where people could share programming resources that they swear-by, organized in easy-to-follow paths. We think it's much faster than link hopping on search engines. Because what you're doing is using the expertise of other developers to expedite your learning process. Right now, it's just a few of the good developers we know making paths. But we've got a [form](http://www.projectforrest.com/access) set up for anyone else who'd like to contribute as well!
This is pretty cool. I do something similar but with a [big interactive mind map](https://github.com/nikitavoloboev/knowledge-map) that all can follow and contribute content to. 
I guess, although it's a shortcut that's not much shorter than the actual way to do it. array = array.map(s =&gt; s.toUpperCase());
Have you ever been to Thailand? Even the best are bested.
Can tutorial videos help or would just learning through reading be more efficient in terms of understanding? because i have been looking at some youtube videos and they seem to be extremely long and not that informative sometimes.
Wow, thanks a lot!
I think you might want an api based on Observables. Observables can represent something like a stream or emitter, which can send messages again and again, and there are many combinator type methods for deriving streams from streams and splicing them together, as you're looking for. What's interesting about your syntax is that each time server emits a connection event, for example, it spawns a new async task for the event loop to fork the current closure context and start executing in the middle, just after the line with the split. (Whew, that was a mouthful.) It's highly unusual, in the context of the long held assumptions it breaks, but so are generators; the latter asks us to accept that execution of code in a single function can pause and resume later, and the former asks us to accept that execution can pause and then resume many times from the same spot. I honestly can't tell, this early in the morning with my brain still off, whether it could be done effectively (performantly + with tangible benefit to the developers reading and writing the code).
There isn't really enough info, but usually an access token would be given on a successful login / signup, then you can refresh it as needed if when the user makes a request for more data. So when a user opens a browser and comes to your site, you can check to see if they have a token, and if they do, you can automatically go to a login route to see if the token is still valid. This loginWithToken route won't really go to the /token url, but it'll call the same function that you wrote for that url, refreshing the token if it makes sense. Then on any other requests for data, you can also call that refresh function and send the new token back with the data. You shouldn't be refreshing a token on a slow poll - thats kind of the idea of a token. If I leave the page open in my browser for too long, eventually my session should expire. Then if the user clicks on a log out button you call the invalidateToken function.
I think function arguments are easily the best use-case for destructuring.
Why do you have to choose a id at all? Since it does have to be unique, you shouldn't let the user decide the id. Other than that, it looks really clean - unless the alerts, would be nice to have something different, guess i am going to fork it :D edit: ah well thought there was a full app. anyways good job, good as a boiler plate
Thanks! You might be interested in /r/toolbox, which provides a Chrome extension that makes it easy to [identify and report spammers](http://i.imgur.com/AH392On.png) (though reporting is of dubious value, but it probably doesn't hurt). You won't have access to all of the features unless you're a mod, but it's still useful.
I guess you could provide defaults for every thing in the chain. It's probably pretty hard to read for anyone not used to destructuring. Is it better than `if foo &amp;&amp; foo.bar &amp;&amp; foo.bar.baz`...? who knows var o = { foo: { bar: "baz", qux: [1, 2, 3] } }; var { foo: { qux: [a = 0] = [] } = {} } = o; At least it shows what you expect each property to be
&gt;At first I hated it. It definitely is less readable. But over time I grew to appreciate how compact it would make parts of the code. For me total lines of code doesn't matter, there are people who can write crazy 1 liners that most people write in 3-4 lines, but I'm fine with 4 lines if I a can parse it in a couple of seconds and be like "yep, got it", whereas with the one liner I usually have to stare at it for a while before you get that "ah ha, ok" moment. Destructuring, isn't quite on that level, but like you said it's definitely less readable, you have to take note of what is now what. I guess it depends on what you like, I prefer seeing explicitly where the value I'm using came from without having to read some extra code to see its new alias. Meh. 
The history button works for me in every subreddit (this is the only real one I mod).
Yes it works anywhere, but only _if_ one is a mod in any single sub. I was tempted to fork the extension just to remove this functionality :) Or I could just create a dummy subreddit and be a moderator of it. But meh, too much hassle :)
Oh I see, lol that's lame. Oh well, cheers :)
Glad to hear. I'm constantly fishing for feed back so if you had any pain points or success stories I'd love to hear them :D.
go spam somewhere else
[mpj also has a pretty great video on destructuring](https://www.youtube.com/watch?v=PB_d3uBkQPs)
Honestly, when working with the streams I find an observable method works best. Then you can just react to changes. The idea is nice, but is actually already implemented with await. Since await uses promises await will return a promise. You sockets shouldn't try to connect until the server inits so you shouldn't have to worry about the connectivity. Then you could just await a function that observes a socket event and sends the data to another function. The function can use a switch statement to check event types and then you can apply different functional methods for different events. Then since await returns a promise you can can just chain your function. Honestly a big fan using observables and await together. You can create a lot of interesting helper libs this way to cut down on a lot of code and maintenance. So basically, what you're asking for exists, it just takes a little bit to implement. I would like to see your implementation of this proposed method. 
I'm building my simplified version of React: Didact https://github.com/hexacta/didact And explaining the code on [medium](https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5)
As others have said, you have hit on a good idea. What you described is basically the reason I recommend "good" programming books, in that they organise useful content in a way that is easy to digest - so that you don't have to sift through lots of content of unknown quality. Your site basically addresses the self-learning-on-the-internet issue of source curation. Best of luck to you!
https://www.youtube.com/watch?v=WPMDCJrRpT8
&gt;[**I sexually identify as an Attack Tyronecopter. [0:48]**](http://youtu.be/WPMDCJrRpT8) &gt;&gt;Money well spent. Give Tyrone work! &gt; [*^andyvich*](https://www.youtube.com/channel/UCJkOSZMpN69NyQF8R-vTbhA) ^in ^Gaming &gt;*^1,514,015 ^views ^since ^Jan ^2015* [^bot ^info](/r/youtubefactsbot/wiki/index)
&gt; If you want to determine their sex, you'll need a photo of their genitals. Apologies, my comment *is* lacking and presumptuous. I'm sure your neural network could pick up on tiny facial features to perhaps determine oestrogen/testosterone levels and potentially the reproductive organs someone *may* have been born with. Amazon Rekognition looks pretty interesting and capable! What I mean to say is, you can't calculate someones *gender identity* from an image any more than you can their sexuality. Just be careful what you assume with your data: https://twitter.com/jackyalcine/status/615331869266157568/photo/1
Had a file called `metrics.js` blocked by ad blockers.
Good effort! I've also tried my hand at a Web Components library with [Switzerland](https://github.com/Wildhoney/Switzerland). Interestingly I've seen decorators used less and less in JS since it was very fashionable late last year. What made you choose decorators? Nevertheless for me, one of the most difficult parts of WC was knowing when a tree of components were ready to be *rendered* (displayed) to the user, as they're loaded asynchronously. For example, it's fairly trivial to know when `x-one` has had its CSS loaded, but it's more difficult to know when all its descendants have loaded their CSS &amp;mdash; `x-two`, `x-three`, etc... As quite often it's **far** better to load a root component atomically, rather than asynchronously rendering one component, and then asynchronously rendering its descendants, and their descendants, etc... which would cause a **lot** of DOM repainting, and in general be a terrible eye-sore.
i've seen some forms of .social or #social get filtered by adblocker
Dude that website is beautiful. I've just started to learn JS, this looks promising! Maybe something like this I can make myself one day. Keep it up dude 
I recently used the Affectiva SDK to get users emotions, but it can also recognize gender and age. It's free to use until your all makes a revenue of 250.000$ I think, so take a look!
thanks
it definetly does not negatively impact readability...
Came here to say this as well.
[A really small modification to your pen](https://codepen.io/anon/pen/qmVvZq?editors=0010) What has been added? 1. A `rainXPosition` variable, that is initialized to 0; 2. When drawing the _blue dots_ we add that variable to the _x_ position (`rect(rainXPosition + i*rain, ...)`). 3. After each time drawing (i.e. at the end of the `draw` function) we update `rainXPosition` so that the next redraw happens at a different position. This is basically [how you do animation on P5](https://p5js.org/examples/hello-p5-animation.html).
Doing this with a small handful of modules isn't that helpful. Do it with 50+ modules of varying depth of requirements and then we'll talk.
Not to mention that shrinkwrap is utter garbage compared to yarn's lock files
Yeah. I'd actually like to see a range of packages. Give me the data for 10, 25, 50, 100. I like to see if there are short term optimizations that won't scale. 
change "type" to "src" and uncomment the code
Thank you!
Thank You! 
jquery every day on a legacy backbone app that the client doesn't want to update because 'javascript frameworks change every day so there's no use to'
I've also written quite efficient article about [destructuring in JavaScript with real-life examples](http://blog.piotrnalepa.pl/2017/04/29/js-4-sposoby-na-dostep-do-wartosci-obiektow-i-tablic-destructuring-w-javascript/). I really hope it will help anyone.
Try http://element.eleme.io - is that what you are looking for?
Deterministic builds was yarn's top priority. Not sure if pnpm has this. 
Yep, I can't think of a single argument for "compact code" in this day and age that holds water. The ultimate goal should be "expressive" code. If that can be done elegantly on one line, then so be it, if it takes 5 lines that's fine too. The only caveat is that *all* code is unreadable at first, so when new stuff is introduced it makes sense to put in a bit of extra effort to be objective.
awesome!
-x
http://jonnyreeves.co.uk/2016/npm-shrinkwrap-sucks/
What happens if two projects use different versions of the same package?
What if I have more than one file? Seems like this only transpiles index.js
data-driven UIs that use dom diffing/patching are here to stay. while frameworks may change, they all provide the same huge benefit over manually keeping the DOM in sync. also, it's highly unlikely that React, Angular and Vue are going away any time soon.
I know some customers just aren't easy to convince, we have some of those as well. They often think of frameworks as things that come and go, but it depends on the paradigms they're bound to. MVC template oriented frameworks are still the wild west, probably always will be. Functional/declarative frameworks are stable, have been for years. Perhaps a minor deprecation here, or some tiny part made modular. They're actually becoming exchangeable and in some areas even platform agnostic, so that components work across the board. I'd be more afraid of the next Jquery major than updating frameworks of such type.
Nice stuff, do you have an rss feed of this?
I do all my DOM manipulation by myself. Since it's nothing complicated that justifies using a full-featured framework for it I see no point in using one for small projects. 
Oh, and in case anyone is curious; here's the source code: https://github.com/TheHappyKoala/Gravity-Playground It's a mess, but in a few days I'm going to upload upload a refactored version of the code base!
It’d be nice if there was a link from this page to a list of the blogs/URLs that are included.
Deleting the sun is kind of fun. :) Nice job!
You can use transform-fast-async, which is a better and faster implementation.
It seems both React and Vue are unquestionably more favored than AngularJS, but the marginal benefit between React and Vue seems to be a lot smaller. Both communities seem to really love their tool. So it boils down to documentation, ecosystem, longevity, and other non-technical criteria. I do sortof wonder what the landscape will look like a year from now. On the one hand, Vue is seeing a ton of interest and activity on github, but React powers 30,000+ components alone at Facebook. It will be interesting to see which pulls ahead as the go to front end framework. Vue definitely seems to be gaining on React! I personally used AngularJS for about a year, and React since. I can't say my world was radically turned upside down or anything. I could achieve pretty much anything I wanted with either framework. React is more performant, but as far as ease of use, I never thought AngularJS was a turd or anything ... it was pretty easy.
Hi /u/tasubo, this post has been removed. Please resubmit as a link post, and then if you wish to add additional comments, leave a comment. Thank you.
I'm amazed: it's a CLI [written in Go](https://github.com/MintyOwl/jsMinCC/blob/master/main.go) which uses [MintyOwl/closureCompiler](https://github.com/MintyOwl/closureCompiler) which calls https://closure-compiler.appspot.com which internally calls [the original CLI](https://github.com/google/closure-compiler) of Closure Compiler, written in Java.
Thank you :)! 
Pricing on the website seems to say that free version is limited?
function doYear(year) { request(process.env["API_" + year], function (error, response, body) { console.log(body); let obj = {}; obj["report" + year] = body; let c = new Crime(obj).save(function (error) { console.log("Saved Successfully"); if (error) { console.error(error); } }); }); }
Great job! I have a question for you about the "view orbits" feature - are you just drawing them after they happen, or are you pre-calculating them? If so, how do you calculate an orbit from an object? Recently for the Ludum Dare game jam competition I made a [small game where you try to launch an astronaut around the moon](https://mrspeaker.github.io/ld38/). The "win" state is achieving a stable orbit. With only a few hours left in the competition I realized I had no idea how to compute an orbit from a given object with mass/velocity! I ended up applying some real science: If you don't touch the keyboard for 10 seconds, and you're still alive - then you must be orbiting ;) 
Hi everybody, I did some collecting of websites and blogs related to Javascript in this community, and I've put the best quality stuff I've found here: http://link.feedpresso.com/reddit-javascript-bundle If you see, that there are some sources missing, please let me know. It helps me a lot to keep myself updated (and hopefully you :) ). Cheers! EDIT: Resubmitted as per mod request.
I know things now are mostly selector-based, but as sites implement real randomness, the ad blockers will adapt. Consider Instapaper's heuristics to find the actual content of a page and strip away everything else. I know of at least one instance of a very unintrusive, text-only ad that was served locally from the site. It got blocked within a couple days.
Not for my hobby projects, no.
Done, sent the js array encoded as json to java, how can i save it in a normal string array in the java file now?
You are looking for someone to program that for you?
Yeah... It'd be less work to grab the actual compiler and run it locally. And then you're not handing your code over to Google.
I prefer http://bulma.io/ :) Check https://github.com/vue-bulma for a vuejs implementation.
I think it pays off when you destructure more than one property because that is one less line of code. Then again, I usually preach to break up destructured objects into a new line for each destructured property, e.g. ``` const { foo, bar } = baz; ``` So maybe not that much savings. Destructuring is also nice because you can alias your properties, a la `const {first_name: firstName} = user;`
because npm has everything in ./node_modules. pnpm hardlinks. So, if Project A wants `node_modules/module@1.0` and Project B wants `node_modules/module@2.0`, Project A will likely wind up using @2.0. 
Depends. Regardless of the complexity of the problem, the way it has been solved can increase the difficulty of understanding the algorithm. I did not say that reverting an array is difficult. I said that following the instructions you suggested may be more difficult than other approaches.
search on codepen? how about this https://codepen.io/Xand0r/pen/Ccbwq
If there's an error in the build process you won't know immediately and will have to wait until the file is requested. You're not really removing the build step so much as just hiding it away in a way that could cause you more work. Another issue I see is in production (or any environment) where you probably want to serve your static files through Nginx or Apache and leave Node to handle just the API requests. You can't do that if you're relying on Node to build and cache the assets.
Me neither! Out of curiosity, do you have the initial state vectors for the Rosette? I've tried finding state vectors for those special n-body cases, but thus far I haven't been able to find any. Doubt my code could handle those cases, but nevertheless it would be fun to give it a shot :).
&gt; I noticed when developing that code starts to become a little bit messy First of all you're not using promises properly. For example at [L19](https://github.com/krzysztofzuraw/all-roads-lead-to/blob/master/script.js#L19) you have three nested promises when you could simply return each and chain them together. See [Promise Chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then#Chaining). Secondly, you could avoid the promises and use [async / await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) if you like that syntax better.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [krzysztofzuraw/all-roads-lead-to/.../**script.js#L19** (master → fdfacb2)](https://github.com/krzysztofzuraw/all-roads-lead-to/blob/fdfacb2b5f676a8026a4579a7d607b3a801588d1/script.js#L19) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhafk9z.)^.
I guess it depends on what you're used to seeing. I find function flip(arr) { var last = arr.length-1; if (last &lt; 1) { return arr }; for(var i=0; i&lt;(last/2); i++) { var tmp = arr[i]; arr[i] = arr[last-i]; arr[last-i] = tmp; } return arr; } ...simpler to understand than .reduce((xs, x) =&gt; [x].concat(xs), []) which requires you to be somewhat familiar with the conventions of functional programming. The "flip()" function is longer but entirely explicit. The .reduce requires you to know what ".reduce()" does, what "xs" and "x" will represent during execution, what .concat() does (seems self-evident, but "concatenation" is not a common word outside of programming...) and why there's and empty array at the end. 
Thank you very much :)! The reason for why all the masses zip past each other is that their velocities are too high for them to form new systems. Without the Sun, the barycenter of the inner solar system is within Jupiter, but Jupiter is only 1 / 1000 as massive as the sun, which is not massive enough to capture the asteroids and planets as they rush off in the absence of the Sun. And the farther out they get, the greater the distance between any two given masses, which means that in the absence of a "great attractor", they would just continue travelling in straight lines (not perfectly straight, though, as they still perturb each other's paths through space, but those perturbations would be very small and decrease over time). Your suggestion had me think it would be a good idea to implement buttons that allow you to scale up or down the simulation, though, so as soon as the weekend is upon us, I'm gonna add that functionality :). 
&gt; I noticed when developing that code starts to become a little bit messy [...] what do you think? Clean up that nesting mess. ); }); }); }); }); } Maybe it is newschool so call me oldschool then, but nesting deeper than 3 levels should be avoided completely.
I understand, I even agree with you. In the end it will depend on who is reading the code. But the difference between the two deployments is: Array_reduce uses a standard method. Once understood how it works, wherever it is replicated will be no mystery. The flip function may be more explicit in the example mentioned, but I still ask. Explicit for whom? Imperative code has a strong tendency to be explicit to only those who have implemented and for a limited time. But as I said at the beginning, after all, it's a matter of preference... With the reduce I can do things like this, which makes it more visible that it is a lifo: [1,2,3,4,5].reduce((xs, x) =&gt; [x, ...xs], []) I know that xs is the accumulated array of the new array I am producing, and x represents the current iteration index of my original array. Explicitly I'm saying puts the current item in front of everything that has accumulated starting with empty array. And when I said it's maybe harder to follow what you suggested. I did not question the way of implementation, but the solution. It is easier to start an empty array and add each item using the LIFO philosophy. That is, the last one to enter, goes to the top of the list. Here's another implementation: function reverse(arr) { var result = []; for (var i=0; i&lt;arr.length; i++) { result.unshift(arr[i]); } return result; } Sorry for the indentation, I could not fix it ...
?
Hi /u/SnakesForDivine, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Modern view libraries (such as react) take a data driven approach and abstracts the DOM away, you should try it.
You certainly have to use a JavaScript engine; which node has &amp; actively develops/iterates on (it's one of the most popular/common implementations). There are other implementations though; https://en.wikipedia.org/wiki/Server-side_JavaScript_implementations.
True, but i expect most people would not expect NPM to be that much faster than it did. Also if i look at the original repo (of which this is forked) it has some different numbers too, but not more packages. Though it would not be hard to simply list the 100 most used packages and see how it does. 
Cookies can only be read or written from code operating on the same domain as the cookie. This is called the [same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).
Ahhh, gotcha. Your abstraction isn't pretending to be a DOM library. I have used React before and it is nice. I prefer the vanilla approach in my personal code as I find the code and maintenance associated with the DOM to be trivial and not worth the cargo that comes with large libraries.
You are playing as God. Winning 
Hijacking to share my results with pnpm added to this benchmark https://github.com/siddharthkp/npm-cache-benchmark/pull/2
Cool, that explains and thanks!
This is pretty awesome, probably one of the better visualizations to go along with a gravity simulation I have seen in JS. For some constructive criticism on the minor issues I found: - In 3D view when a planet goes behind the sun the sun will dim like it had transited in front. - In orbit view anything greater than a 1080p viewport causes the image tiling to become apparent. For enhancements that would be cool: - 3D orbit view. Bit harder to implement as you have to save a list of previous positions and paint that rather than repaint to the same buffer. - Name on hover (3D view) - Click object to change camera focus (3D view) - Zoom to move camera in and out (3D view)
It doesn't surprise me at all that Hackernews hates NoSQL, but under the right circumstances it is absolutely awesome. It's definitely not appropriate for all cases.
Yeah if the problem is OP doesnt know how to work with CSS, something like bulma will be the equivalent of the bootstrap layer. Too bad tho, I think Vue's singe component system (which you need webpack to use unfortunately) makes writing CSS scoped to components absolutely beautiful.
how were you planning on adding this to your page? are you going to write some javascript? not sure what you're looking for here
Glad someone said it, sorry for the down votes.
Really? Maybe, I need to rethink the structure of this article
The premise that React requires a lot of setup is wrong. It's definitely how a lot of people get introduced to it, but it's not necessary. The rest of article fails for me because of that.
Not a criticism!
&gt; read or written But it can be passed through right? So even if SPA domain can't actually access the cookie set and sent by API, it can still store it and send it back and sessions, in this case, node-client-sessions, that sets the cookie still works? 
This seems to render `Unexpected template string` where the `report${year}` is. Any ideas? 
Great work developers! Although, I can't upvote anything with Comcast all over it though. Comcast fighting Net Neutrality could make all of our jobs as devs more difficult or impossible. I hope you understand.
I work with Vue.js and other frameworks quite a bit and measuring one's effectiveness over another is... Well, kinda silly given the number of different cases you could encounter. They all have pros and cons that shift as often as the open-source ecosystem they're part of.
Oh yeah, you'll need that in square brackets... Crime.save({ [`report${year}`]: body })
You could always use something like circle CI or wercker for the gh-deploy step, you could even do it on push which gives you the same thing as the netlify flow. But the SSL cert.... Personally I use AWS S3 for hosting, distributed through cloudfront using ACM for a free SSL cert, costs roughly $1 / m depending on traffic (is scalable too)
What does anyone else get out of it? Are you paying?
This is clearly too much responsibility for us
It's basically a very thin wrapper for `localStorage` + `JSON`
Assuming CORS is handled correctly, this would allow node-client-sessions to handle sessions out of the box, since it's based on cookies, and then could use something like session storage for a token?
Nah.
Closure compiler is already available as an npm package [for the Java version](https://www.npmjs.com/package/google-closure-compiler) and [a JavaScript-only package](https://www.npmjs.com/package/google-closure-compiler-js). Closure continues to be a pretty solid compiler and has provided dead code elimination in Advanced Mode for quite some time. I'm not currently using it for work, but I do try to write cc-compatible jsdoc entries to allow it to best optimize the code. It is sometimes better than Uglify. One of my projects compresses 2.62KB to 634 bytes with Closure Compiler, and 691 bytes with UglifyJS. 
That is completely true, for now. The main purpose was to make localStorage more organized by having collections. I hope to add more features in the future!
Yeah I was responding to the &gt; code operating on the same domain as the cookie
You've got a 500kb hit on every page load to fetch your data. That's a bit brutal and the delay before you see any results is quite noticeable (and I'm at home with high speed and a desktop). Try it on a 3G connection, or worse, and you'll be there all day before it loads. You might want to look into lazy loading things, wait until the users scrolls rather than loading up all 100(?) items before anything is shown. Other than that I like it, but my first impression stuck on how delayed the load was. 
Hahaha, LocalStorageDB was taken.
All you need to run JS code on the server is JS runtime. Node.js is just one of many. I've seen examples of the SSR being done in Java using the Nashorn JS engine for JVM.
Oh finally! Another retarded vue vs react blog post.. Just use your preferred framework and shut the fuck up about it!
What is the ultimate implication of Google Trends? How about number of job posted and number of big companies who are using each the technology. You know which kind of stat matters more.
Yup, I think two way binding in any framework is not that great. It works but meh... Right now you get only one-way binding unless you explictly change that or use elements that notify.
It won't affect you at all - even in walled gardens you have to do same work ;-) I think it will affect US customer wallets though.
I don't quite know what you're referring to, but in case you are wondering about the syntax `{ run }`, it=s usually called a shorthand property and is the same as saying `{ run: run }`.
See what I did there...
I personally know nothing about the development or history of JavaScript and it has never affected me in anything I've done. So it might be interesting to add, but I don't think it's necessary.
Libraries used: JavaScript ES6 + Babel Back-end: Node, Express, MongoDB, EJS (templates), PassportJS (authentication) Front-End: JQuery, Bootstrap, Handlebars, and my own implementation for managing routes Currently, I'm considering use VueJS Build system based on RollupJS
Don't forget to not only post it here but also inform the developers about any issues. This is the very reason for the open testing phase.
This looks like an attempt to curry ..but the implementation would be: function (args1){ return function(args2){} } Of course you could return the inner function as a json..even better a json of functions..this would create you a map of functions which are curried and have all access to args1
looks great to me..they could have a flag to enforce also json and array check to have exact number of items, keys
Looks good. A few questions/opinions. - Why did you decide to base it on jQuery? What is the use-case? Kind of lacking a pitch for this library :) - Would have been nice if the bindings were happening in the template instead of the configure function. - Is it possible to create components and nest them? - Any thoughts on props and state? - How does it compare with other frameworks on performance, considering it's manipulating the dom directly.
That's extremely naive
I don't know anything but I would not have assumed he was being recalcitrant and said: A new major release was just pushed out with no release notes that I can see. Is this a mistake and/or are you planning to add one?
so if args1 is a function, like run, then it's considered a curried mapping? usage might be like: start.run(args)
What do you mean by _pattern_? What's the _pattern_ there? What do you mean by "returning the function inside the object" (because all I see there is returning the _passed argument_ inside an object)? Ah, and "returning an object" is not really the "Revealing Module Pattern".
If I could spell "Revealing Module Pattern" out, do you really think I didn't know this? I have google just as much as you do kind sir.
You're not answering my questions, really. So, you have a function to which you pass a function `f` and it returns `{ run: f }`. Ok. But, again, what is this supposed to achieve? Why would you do this? How would you use it? Just having a function that does something is not a pattern. You _need_ to explain what the goal is supposed to be. If the goal is simply "putting the passed function inside an object", then it is no pattern.
It's supposed to achieve lazy composition. How would you use it? https://glebbahmutov.com/blog/di-vs-io-monad-example/#mock-dependency-injection-solution here, you can learn about the IO monad. It's a mix of dependency injection &amp; revealing module pattern. That's all i'm going to entertain you with.
&gt; FWIW, I don't mind your curiosity. But I had to shut down your contempt. Oh, FWIW, _I_ didn't come here asking for help. I just asked for clarification of your problem, but your horse looks quite high from down here, I guess :)
One simple thing to consider is that you should avoid concatenating into a piece of raw HTML string. It is probe to break and often become a vulnerability 
Nice write up of possible optimisations. I wrote a crude colour Mandlebrot set plotter in BASIC, ran pretty fast on my 486 DX50 desktop back in the day. :D 
Thanks. That definitely can be improved.
[removed]
In our middle scale project built with Vue.js and REST API with C# we use expiring JWT token with refresh token and it seems to work just great for both sides. As for front end, we just send an access token with our requests, instead of any additional information about the user and back end is able to validate it and get all user relevant data from it. So it not just provides security to communication with an API, but makes it simpler. There is a bit of creativity needed (and will depend on what framework/library you use) on how to intercept requests and when token is not valid anymore, to request new one from refresh token endpoint and resend the actual first request again. Though, once it is done, it becomes a pleasure to use.
The two main, obvious choices are either JWT and OAuth, but I find JWT is just as secure and much easier to reason about. OAuth has more 'features', but you'll find you don't really need them for most use cases. I.e authenticating a users and passing back their information securely. 
You spelled "how it's seen in the real world" wrong.
SPA's? I always use simple sessions to the server and manage any oAuth or JWT tokens transparently in the backend- that backend then communicates with the real API.
How I wish I'd studied either physics or maths, but no, I have a background in economics and natural resource management, haha. Always had a strong interest in physics and astronomy, though, and motivation alonside the feynman lectures on physics (this chapter in particular: http://www.feynmanlectures.caltech.edu/I_09.html) go a long way if you want to build a gravity simulator :):). It was a side project that made learning JavaScript a true pleasure, and I doubt I would have persevered hadn't been for this project. 
Last week I was talking with my collegue work about to Web Components, I thought that is over because I dont see more projects the using Polymer or others frameworks. It is interesting to look that a the big company's using to Web Components in the your projects. 
wat.. in what way is a session ID better than a JWT signed with a up to date algorithm? 
When you say it is easier to reason about, what do you mean? Does it mean making things clearer to the developer or something?
much better! I forgot the syntax suggar
couldn't move the car with arrow keys but very neat http://imgur.com/g7L1udO console
I've never used fuckoff.js, should try that sometime. But I know how you feel, there's so much to choose from. I would say look into the most popular ones, and try to find one that suits your needs. Also look at which ones have the best or most documentation/online community. (also AngularJS is now just Angular, it was completely rewritten and uses Typescript now instead of JS)
Be nice if the author suggested to use something in their place.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [c2huc2hu/orbital_mechanics/.../**complex%20orbits.py** (master → 40670cb)](https://github.com/c2huc2hu/orbital_mechanics/blob/40670cb39baf86ebfdde924df283ea03d3066f71/complex%20orbits.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhbr3ww.)^.
Hi /u/hsribei, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
It can be a bit overwhelming - so I'll just make the decision for you. Learn these: *Front End* - Webpack - React - React-Router - Redux - Sass or something like it. *Backend* - Express - MongoDB That will set you in good stead for most work you want to do, and the patterns are pretty transferable. Caveat: Angular 2 is gaining a lot of traction - but personally I think it's got some idiosyncrasies that make the things you learn incompatible with other frameworks. I'd learn it - but probably only for work. Never used Ember or Aurelia - doubt I will unless I have to. Backbone is arguably dead. Vue.js looks like fun - but again, I don't really need to use it - maybe for a side project. Downvote as required. 
You can put whatever data you want into a token. One thing you can do, is add a date, let's call it `expiresAt`. On the server side, after verifying / unpacking the token, you can add a check to see if the token is expired in your validation steps.
JWT is just a tamper evident storage mechanism. OAuth is more of a framework, one major feature is what it allows 3rd parties to have limited access to a service. Really it depends on your needs, but it's hard to compare the two since they're so different.
Welp, you are correct about the expiration being built in, it's in the spec: https://tools.ietf.org/html/rfc7519#section-4.1.4 As for the client refresh part, I'm not sure what you mean. 
I didn't see any connection to javascript.
Returning an object is not the *Revealing Module Pattern*. You're missing the forest for the trees. There is no "pattern" in your example. A pattern implies a meta intent. RMP is used to help us define *public* and *private* members of a *module* - a module being a collection of data and/or functions that pertain to a specific domain or concern. In JavaScript, we use a closure for this. What you have shown here has nothing to do with the RMP; it's just a function returning an object. Likewise, returning an argument of the function inside of the object does not imply any meta intent either. Without the greater context of the program and what this piece of code is trying to accomplish, there is no design pattern being displayed. Hope that makes sense!
&gt; but personally I think it's got some idiosyncrasies that make the things you learn incompatible with other frameworks For me, those would be things like: * overwhelming overhead * steep learning curve * lack of consistent CSS guidelines * ambiguous boundaries between templates and code (eg: directives and filters aka pipes) * Typescript apprehension * ambiguous testing/TDD lifecycle I could go on. I loved Angular 1 and I'm hoping to get more experience with @Angular, but for my personal projects you just can't beat the raw speed and power for react/redux.
On login, generate 2 tokens: The first being the access token, a JWT with a short lived ttl (say 10-15 minutes) using the "exp" claim and any other non sensitive data(think user id, roles, etc) required for auth. This token should be passed by the client for every request that requires authentication/authorization. The second is the refresh token, an opaque token that is persisted by the server and tied to the user/session with a longer ttl (say 24 hours or longer). When the user's access token expires, they must request a new one by sending the refresh token to a token refresh endpoint. The primary difference between the two is that the access token does not require a call to persistent storage to verify, is transparent (meaning anything that is given the token is able to read the claims), and is non-revocable. That last point is key. The refresh token on the other hand requires a call to the persistence layer (slower), is opaque (random and contains no meaningful data inherently), and is revocable. This arrangement has many benefits including that the vast majority of network calls now require no network/database call for authentication/authorization but still give the server the ability to revoke the token or change the claims of the access token every x minutes.
Can you give me a little more information on this? Why the browser will keep and pass cookies that have the wrong domain, but then if the domain was correct you would have access to them. You'd think the browser would just reject the cookie entirely right? (Though I did test and this is the behavior)
Yeah, i just slammed this out quick :D
From what I understand, the two are apples and organges. OAuth2 is an authorization mechanism and that too a general framework or set of guidelines on how it should be done. OAuth2 does not handle authentication at all. For authentication, OpenID Connect is usually recommended. And JWT as I understand is just an implementation of OpenID Connect. In other words, you use JWT (or OpenID Connect) along with following OAuth protocol guidelines to properly implement an authentication+authorization solution for your app.
Because JWT can contain data that allows it to identify a user across different servers in your setup with the servers needing to talk to each other for every request. Also the majority, if not all, session based frameworks stores the ID in a cookie, which creates all kind of security pitfalls. 
Pretty fascinating! 
I love this answer. I've interviewed a lot of candidates for JavaScript positions and often times they only know how to do things in the one library or framework they learned, and that approach doesn't necessarily translate to another framework / library. A general knowledge of the language would allow you to shift between different JavaScript settings more easily. If you learn the ins-and-outs of vanilla JavaScript and your environment (browser / node / electron / etc...) you'll have skills you can apply in any JavaScript stack.
not sure how up to date this is, but a friend started a repo to try and keep track of this stuff https://github.com/teesloane/Auth-Boss
JWTs are not coupled to OpenID Connect (they have their own standard and everything), but they're used by OIDC alright.
This may be a little off topic, but I use Prettier with Sublime Text via the JsPrettier plugin. Does anyone else have issues with the plugin "losing" the path to the Prettier package? Or the console not providing adequate errors when a bug is found (and Prettier hadn't run)? Often times this happens after a reboot of my computer or just ST. I really enjoy the tool, but it's becoming more of a headache to figure out what's going wrong when I haven't changed anything relating to ST or the package itself.
Our current implementation seems to be fairly secure. We use digest authentication which has a tendency in infuriate the UX guys because the browser's own little popup login modal keeps getting used and working around that just so the UX guys can say we have a nice looking login form is really not worth the effort. It turns out our customers actually care about the areas of the UI where real work takes place and they don't consider logging in to be real work. In any case, digest auth works with a variety of tokens and once all those are validated we have to generate a session ID. To do this, we generate an sha512 hash of the digest nonce, the entire entry in the db table for the user account exported as pipeline-delimited text (and the password is already a salty hash, where the salt is itself a hash of 1mb of data from /dev/urandom), the login date, as well as a salt. The salt value itself is placed into the resulting session id in a somewhat unique way. I don't remember the terminology to describe it, but this is an example: var session_hash = 'abcdefghijklmnop'; var salt = '12345'; var session_id = 'a1bc2def3ghij4klmno5p'; So we can extract the salt of the hash, then recalculate the session id, to ensure it's all valid and we do this every time a request is made. For extra security, we disable all forms of caching, so that the browser must try to download our static assets each time, but each asset also requires a valid session hash. This helps ensure that people don't steal our static assets. Thankfully the JS is just one 10mb blob and the CSS is also just a single blob (I think it's closer to 8mb), and the images are mostly svg so effectively plain text, no big deal. Now I'm sure by now you might be stressing out at the idea of forcing a browser to load 20mb worth of stuff, on every single visit. But thankfully it's a single page app on the corporate intranet. So it's not a problem. The end user has to wait, tops, half a minute, for everything to load. And while all that session id calculations might pose a problem, it's ok because it's easy to fake performance to a user as long as the UI indicates that work is being done. Users don't care as much about how long it takes to complete a task, but rather they care how long it takes to get a response from a request, even if that response is a kind of "please wait while I process your request". To be honest, I've never heard any complaints, but I also don't deal with my customers (internal or otherwise) directly because we're an Agile team and so customers are forced to refer to our product manager and/or director. In fact, I can proudly say that the dev team never looks at customer-opened bugs because we're good at the agile thing. We only ever look at bugs and user stories reported by the PM as it should be. So I have to trust that everyone is happy with the current setup. Hope this helps.
That you even have to think about what algorithm jwt might be signed with(or that there might be none at all) just to get in most cases a simple authenticated token is a good clue.
&gt; #Why not keep the experimental.strict_call_arity flag? &gt; This is a pretty core change. If we kept both behaviors, we’d have to test that everything works with and without this change. As we add more flags, the number of combinations grows exponentially, and Flow’s behavior gets harder to reason about. For this reason, we’re choosing only one behavior: strict checking of function call arity. I think I disagree with this choice, personally. This definitely seems like something the user should be able to configure; having the option for less strict checking can be really important, either for migration, or just depending on code style. Plus, doesn't this hose people who use Flow + ES5, since their answer to `arguments` is "just use rest parameters instead"? Sure, most people who use flow use babel to strip out the annotations (AFAIK), but the comment-only annotations are an option, too, and those people might not be able to add ES6 syntax to their project, if they support older IE versions. And that all is if flow were a brand new tool; given that it's already got a lot of users, potentially with large codebases, giving the users only two updates in order to fix all the new errors that this will create (or else having them be tied to an old version of flow) seems like not a great choice. --- By comparison, Typescript has `--strictNullChecks`, `--noImplicitAny` and `--noImplicitThis` options for fine-tuning the strictness, and I've never found those options to make the Typescript compiler particularly difficult to reason about. (And they were a godsend for iteratively migrating to TS) 
I use long-lived JSON web tokens signed by both a global and a per-user secret. This way I can invalidate tokens both globally and per user without messing around with refresh tokens. I still read from the database for roles and permissions. Note that I only use JWTs for authentication, not storing session data; I put actual session data in localStorage.
Why not just get rid of the refresh tokens and sign the access tokens with a per-user secret?
Why should a PHP dev go for Vue specifically?
There are many types of webservers out there (PHP, Rails, Node, ASP.NET MVC, etc) and they all are capable of serving up javascript, which is all you need to do to run an Angular (or Aurelia?) app. &gt; isomorphic app Oh, ok, important part left off until the end! Yeah, you'll need a server-side js engine then. [If you want to use V8 your choices are a bit limited; Node is an easy choice there.](https://en.wikipedia.org/wiki/Server-side_JavaScript_implementations)
in asia, doesn't really work at all. 8000ms latency. probably not your target though
Yeah 8000ms is a bit much. I could maybe set up a server in Asia. I've never tested beyond 600ms RTT. 
WTF okay you obviously dont understand how security works... Nothing is ever 100% secure, it's secure *enough*. You wont find a single standard, protocol or project that never need patches and updates to stay secure and something as vital and heavily used as SSL/TLS/HTTPS will always be under constant fuckery . The guys on the JWT even tells you when serious vulnerabilities have been found in thier recommend libs, of you don't actually update them regularly. The simple point that you random blog post you posted else where in this thread is missing.
Isn't it included in symfony/drupal?
Oh that's rich, keep on digging buddy
 let motherName = childObject.map(event =&gt; event.mother) // returns an Array of each Child's Mother's Names let motherObject = ancestry.filter(event =&gt; event.name === motherName) Here you're comparing an Object's `name` property String with an Array of all names, which will always be false.
This sounds like something you could solve with a regex. 
It is incredibly overwhelming. What I do, and it's not a perfect system, is I just look at them as they come out and file them away if I think they're interesting. I'd be interested though if anyone could suggest some js library rss feeds. 
Oh no... I could not even understand regex. Any tutorial or documentation. Will it return `true` or `false`?
Examples being: // lower /[a-z]/.test('a') //-&gt;true /[a-z]/.test('A') //-&gt;false /[a-z]/.test('1') //-&gt;false // upper /[A-Z]/.test('a') //-&gt;false /[A-Z]/.test('A') //-&gt;true /[A-Z]/.test('1') //-&gt;false // numeric /[0-9]/.test('a') //-&gt;false /[0-9]/.test('A') //-&gt;false /[0-9]/.test('1') //-&gt;true // combinations /[a-z0-9]/.test('a') //-&gt;true /[a-z0-9]/.test('A') //-&gt;false /[a-z0-9]/.test('1') //-&gt;true
The access tokens are short lived. This means your access might be "revoked" in a few minutes. That means you need a way to generate a new token for the client. The refresh token is to allow you to fully revoke all access after the last generated access token expires. This helps if someone steals an access token they only have x minutes to use it before it is no longer useful as the refresh token was revoked and won't generate new access tokens.
To slow for me to use :(
Why not use Sinon? Far less setup
Awesome, this is exactly the type of recommendation I was looking for! I've never heard of these; I'll check them all out ASAP! Thanks for your comment!
I haven't heard any dislike for Express (maybe just a little for MongoDB), but would you mind recommending popular backend services to replace them?
Putting session data into localStorage seems dangerous when anyone can read from localStorage, including extensions. The global and per-user key is good, but don't you lose one of the big benefits of JWT, which was supposed to avoid the DB on each request?
Wow there's hundreds of people joining. I need to throttle this :)
just trying not to overload the OP. if you bring in postCSS and inline styles it might be too much 
That's a phrase that web developers seem to love to use, but never expand on what it actually means in a particular instance. Ridiculous phrase, in my opinion.
Is anyone actually using Reason? I'm not sure if it was just a fad.
Doesn't open in Firefox, tried it in Chrome with a small window and [this is was what came up.](http://i.imgur.com/jxwoPO5.gifv) It seems the camera itself is hooked into the network updates and as a result just looks super janky. I think you should consider setting up multiple lobbies or load-balancing servers if you want to make this an effective demo. At this point it's probably more of a hindrance to exposing your lib.
thanks many of those cars were "orphan connections". I actually do have multiple lobbies and a matchmaker in there. I fixed this for now by reducing the "idle timeout limit" to 20 seconds I think you should be able to play now. Please give it a try if you get a chance.
I don't know that it's a fad per se. I just think it's a bit too young at this point. It's getting better daily, but it's a little rough around the edges (in my experience). I'd be very hesitant before using it in production. With that being said it's a lot of fun to play around with.
ES2015 is the specification of Javascript hackerrank uses node.js v6.9.1 which supports 99% of es2015 features: http://node.green/ https://www.hackerrank.com/environment
Ah cool, thanks! 
 function isCap(char) { var charcode = char.charCodeAt(0); if (charcode &gt; 64 &amp;&amp; charcode &lt; 91) { return true; } return false; } You can select other ascii ranges to check for lower case or digits.
Yes, your are correct. Object.create is more better way. But, here my intention was to explain prototypes in as simple way as I can.
this is pretty impressive, how many of you worked on it and how long did it take to build? Obviously not judging you for the latency / server overload problems. 
&gt; SignalR Sorry, I am not able to answer that, since I am on the front end side of our project.
Extensions are installed by the user. You can't hide anything from the user of the browser anyway. You just need to hide the tokens from other websites, which localStorage succeeds in doing. (Unless you load a malicious script on your website due to an XSS vulnerability or something.) You're right about the DB access. But, the thing is, if you're doing anything that requires authentication/authorization, you're probably writing/reading to/from the DB anyways. A quick read from the users table/collection is the least of your worries, especially since the read can be performed on a replica.
We use Reason pretty heavily in production on messenger.com.
Gatsby is a React-based static site generator written in javascript. But I understand that the post itself didn't contain any piece of javascript code, so I'll make sure to pay attention to that next time. Thanks for the feedback!
This is quite taxing on the system and requires a strong GPU, it can also happen due to lag. Try to shrink your window (even to credit-card size if necessary) and see if that helps 
I'd love to love elm, but any time I encounter a json that has more than 10 fields it is such a pain. SUCH A PAIN. 
The refresh token is kept server side for this reason. 
Doesn't the refresh token approach break statelesness? 
your analysis of the background shorthand overwrite has led to the [solution](https://ibb.co/cksWbQ), thank you! all that was needed was for `background:` to become `background-color:` as you suspected it did cause an issue with white showing up [elsewhere](https://ibb.co/da4f35) further questions: how would i specialize per domain, and how long can i make the bookmarklet before i run out of space? (i suppose the natural site URL would add to this length depending on where i'm browsing) also in regards to the invisible URLs, i don't quite understand what you mean by the page title link overlapping the URL, please excuse my ignorance in this matter :p i will take your suggestion to heart and x-post for help from the /r/CSS crowd, thank you
You are correct! And I forgot to add the .prototype to my create(). I should fix that...
I understand, but having recently deep-dived in JS inheritance myself, the problem is that there's 20 years of JS articles out there, and it's not clear when learning which is the "correct" way of doing things and why. An example at the beginning using new SuperType() would be fine, but then a quick explanation of its downsides, and the use of Object.create() for the rest of the article would be more helpful to newbies.
Doesn't work on special characters, I propose const isLowerCase = value =&gt; value === value.toLowerCase() and so on. 
It worked! 5/5. Thou because of lag I overturned every time so trying to even get near that big ball was hard. But very nice demo / proof of concept. 
Reason syntax is much easier to learn coming from JS. Other than that there aren't many glaring differences which would guide me to choose one over the other. (Reason is essentially OCaml)
So one problem I see with a lot of languages that compile to JavaScript is using 3rd party JS libraries inside of the compiled language. Does Reason have a nice and easy solution?
Basically, yes. We mean that there is less stuff going on behind the scenes (or that it's hidden so well that you never need to care), or fewer edge cases/"gotchas". I don't know if that applies here since I have limited experience with both technologies, but that's how I use the term.
Awesome! How did you find working with A-Frame? Tempted to make a first person VR mode for mobile? :D
Done a sick dribble and scored 11/10 
The token itself, which is stored somewhere on the front end, contains the date where he was created, and server side you verify its' date with current
Well the standard is to use JWT tokens, they are also RESTful (which means, nothing really needs to be stored server side). Them being refreshable or not is your choice. As for where to store on the front end: if you store it inside localStorage or somewhere else among your js, you're vulnerable to XSS attacks (that's still okay if your app is secure and you're not evaluating or DOM rendering user-generated input, you should take this into consideration depending on how serious your app is). You could also store it as a HTTP-Only cookie, this prevents XSS but cookies aren't 100% restful (mobile's don't use cookies), and you could be vulnerable to CSRF (in which case you can add [anti-CSRF tokens](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_\(CSRF\)_Prevention_Cheat_Sheet#Double_Submit_Cookie)) [This video is the best fucking video ever on the matter and made me understand everything](https://www.youtube.com/watch?v=yvviEA1pOXw)
Look up the Stylish browser extension, and you can find dark mode stylesheets for lots of sites at userstyles.org
Literally unplayable :D Go team blue!!! (its actually quite impressive) 
I am using Auth0 for authentication for a SPA and also a hybrid app (written in Ionic) It works quite well, and provided you use their 'lock' tool it is reasonably quick to implement. 
maybe this is the case,on laptop it is sooo painfully slow even when I resize Chrome to smallest window,
Like I said, it is always a trade off. Using localStorage has the XSS risk, while Http-only cookie has the CSRF risk and isn't 100% restful (a RESTful web app should be accessible by requests, which doesn't specify cookies, even if it isn't from a web browser). By the way, CSRF is less of liability than XSS. CSRF is a way to abuse the token, XSS is a way of **getting** the token. That said, tokens with small expiration times is way of fighting both (kinda). Let's say it's a browser-only webapp, and you don't really care for people trying to authenticate via other things like a desktop or mobile app. Then I'd say using Http-Only cookies with an anti-CSRF token system is **slight** more secure, because XSS vulnerabilities can come from some other libs you use... That said, if you know what you're doing, have control of your app's libraries, and apply anti-XSS techniques to your server...XSS shouldn't be really an issue. It's fine to store it with localStorage. In the end of the day, matter of taste. No one is going to tell that your system has bad security just because of what you choose. Both ways are legit and used on big companies
I'm on PC and the arrow keys are doing nothing for me either, but maybe because my car (at least I think it's my car) hadn't fallen to the ground yet.
I challenge the advice that all frameworks with a following are equal. IMHO it is a mistake for a someone entering the industry now not to start with React; React developers are more employable. Libraries that fall outside of the ecosystem are not doing as well and are beginning to borrow a lot of ideas from React. Next.js is better than create-react-app, as it is useful for actually building out SSR apps. It makes it very easy to get started with practical things such as routing, and the examples make it easy to integrate most relevant libraries. It is fast becoming a de-facto standard setup.
This is the better approach for all the checks including isAlpha. For isAlpha all you need to do is to check that the character has an upper or lower case form (though I'm not sure if this holds for every language).
Really cool journey, although I feel that it doesn't look like the snow covered peaks are actually high areas?
Like I said, (a) same URL pattern, (b) same markup, (c) randomized order. Your example hits one of the three, you need to hit all three. Last I checked, Instapaper and the like make mistakes on almost every page.
Nice write up. It'd be interesting to try this in SVG with filters.
I've heard of smaller companies not, but I've never personally experienced it. It's pretty standard, but why do you ask?
Socket.io is such a lifesaver.
Very true, thanks for pointing out. The method I'm talking about would certainly not work for delegating access to a third system.
I used to use AngularJS but have recently moved onto Angular (the newest version) with TypeScript. I don't have experience with Ionic or express but I've found the Angular w/ TypeScript setup very enjoyable to use. The newest Angular is quite different from AngularJS, but I was able to learn it quite quickly and I think its a huge improvement over the original version. As far as the back-end part of the stack you should be able to use whatever you're comfortable with and it'll be fine.
I usually just buy all my books and udemy courses. And i eat the bullet. I buy 1-3 books a month and close to a course every other month. I always feel bad about trying to get money from them. The time i spend on the books and courses i add to my timesheet, so when i work 40hrs and learn 10-15 hrs a week, i come and go as i please and i take days off without it taking into my vacation time, work from home 2-3 days a week. I add it all to my resume. I feel like they benefit from me learning, but i will benefit more. I make 70k a yr... but my next job will probably be 100k. So who cares if i spend a grand or more on learning. There is never an excuse to not spend money and time in learning, even if company cant afford it. Keep in mind i was making 31k a yr ago. I self taught and jumped in salary.
Take a look at Ember and Vue Glimmer is pretty powerful in Ember for component building.
/u/boostphase is beyond this... They already know Angular 1, why do they need to back up to vanilla?
I was feeling the same when I started learning React. But eventually, I have started becoming more comfortable. I feel it asks for patience, practice and more practice to get confident with JavaScript frameworks!
ahh a mac, there's your problem.
Hi, do you have a github for your simple app? Or what do the app do? I'm looking for a simple app too to test Vuejs and React
I would suggest skipping all frameworks / libs and try to implement what you need from the libraries yourself. It's a great way to learn what to look for when choosing libraries and you'll probably learn a lot along the way.
ES6 classes use prototypes. 
I don't think this is a good answer. Even though it may be the same behind the curtains, es6 classes is a totally different syntax which is much more readable.
If he's already proficient with Angular 1, Ionic 1 and Express, he's probably already way past that point.
If you are worried about long-term maintenance and continued development, I would try to pick a stack that didn't lock me into a specific library/framework long-term. With this in mind, I think the React ecosystem is the safest choice. Not just because it is the most popular option (and thus most likely to remain relevant), but because it is comprised of multiple single-purpose libraries. This means you would retain the option of migrating off each one individually should one of them become obsolete, or simply if something better comes along. For example, if React gets out-of-fashion, you could easily migrate away piece-wise while retaining your Redux infrastructure. On the other hand, if you decide to go with Angular, you might find yourself pretty much locked in and you might regret it if any of the pieces of the Angular framework fall out of favour. For example, if you go with Angular, you're indeed pretty much forced into the use of TypeScript and even a specific TypeScript configuration at that. One of the great features in newer versions of TypeScript is the ability to use nullable types, but you'll be prohibited from using it because Angular doesn't support that (yet). But if you choose React, you can freely choose to use either TypeScript (with or without nullable types), Flow, just plain JavaScript, or something more experimental like ReasonML. From a technical perspective, it might be relevant to ask yourself if you want the option to use server-side rendering. If you do, you should almost surely choose React over Angular. Also, if you want to create mobile applications with a native look and feel (since you mention Ionic), you should know that React Native is far more advanced and will allow you to create truly native mobile applications (rather than an HTML-based approximation which will feel off to users). It comes at a price though, which is that development for React Native does require more effort. Finally, both React and Redux have quite a good track-record for handling migrations to newer versions (though there are some libraries in the React ecosystem for which this isn't true). Compare this to Angular 2, which is about the poster child of how *not* to handle any new major version release. And you might be interested to know that Angular 2 is outdated now; Angular 4 is what it's at now.
Yeah, I think I'm using too bright of a white colour, here's a picture with a slightly darker white colour (and a super sneak preview of my river generation, lucky you!) http://imgur.com/a/2YsJc Definitely areas that I could improve in to be fair, but for what I made this for it works great :) Thanks for the feedback
Plus class extension is what prototyping should have been from the start. I think the only reason to use prototypes is if you're very paranoid about browser support. 
A-Frame is really neat! Actually we are planning to add a VR mode to the demo, which is relatively easy with A-Frame. The idea was to use it more as a spectator rather than a player, mostly because VR controls would be quite challenging. Do you have suggestions as to how could mobile controls work with VR (where you can't touch the screen, because it's mounted on your head?)
LOL holy pile up batman Thanks for helping us stress test! We didn't plan out on the Reddit Death Ray of Traffic but it really helps us find issues and iron them out, which will ultimately lead to a better open-source library for all JS multiplayer game devs
Well put.
It's easier to understand and it's easier to use generally I find, having used both fairly extensively. 
Also, I found it easy to start bare-bones. I learned React without JSX or anything. No import/require. No build step. Everything in one file. It's really the build step where shit gets thick.
Ah yeah that would be difficult! I guess left/right would be simple. Maybe you'd have to have accelerate set automatically and look down slightly to brake? I imagine it would be trippy af 
This is something I've seen a lot over the years. It goes something like this. 1. Person, usually in their early 20s, wants to be a developer. 2. They learn the big, hip thing, because it's the fad of the moment. Some "dinosaurs" will say that [new framework] isn't as good as [old framework]. After all, the dinos have learned [old framework] and it solves all of their immediate needs or they were clever and figured out work-arounds within the framework. 3. You decide to learn [new framework] because there are jobs for it. After all, few people really knows [new framework] well at this point, so you can find a job after only a few classes. 4. You become a senior developer and start posting on forums how [your framework] is amazing. It does what it needs to do. You don't need any of these new fangled frameworks that abstract the complexity you learned or the challenges you worked around. The [emerging frameworks] also have their own problems. 4. You work in this job a few years, maybe have a family, maybe get to your late 20s or early 30s before you need to start looking for more work. 5. You realize that [emerging framework] is the [new framework], and [old framework] is what you used to think was [new framework]. You now have to learn [new framework] to compete in the current market with all of the 20 somethings learning [new framework] for the first time. 6. That's when you move to another industry because you can't compete with the salary of a 20 something who is picking this up in a few weeks, or you start over. Such is life of the front-end programmer with few barriers of entry. It allows for rapid iteration, some of which is truly revolutionary, but a lot of which is redundant. People look out for their own best interests, and as you age you want to capitalize on the unique thing you bring to the table (experience) to offset your increased costs (family, health, etc..). When experience isn't valued because everything is always new, that's difficult to do. It's also what makes front-end programming difficult to turn into a life-long career. It can be done, sure, but it's a lot harder than say medicine or even some of the back-end systems which don't jump from fad to fad as frequently. For this very reason, I also don't recommend learning a framework if someone is just starting out as a developer. Learn a language. Learn multiple languages if you have the time, and then learn the frameworks that make those languages easier to work with. That'll make it easier for you to keep up with the changes. It's harder initially, but it's better long-term. 
Thanks! I might do a write up on them next, it's no erosion model, it's really not fancy but they work for what I need. :)
Fuck man you must be smart. Why else would you write this much wall-o-text on reddit.
Less setup since you don't need to compile it maybe 
Awesome! Lakes and rivers really add to it. I think my feedback is that it doesn't look "3D" with a bump map showing the respective heights, it looks like a flat 2D map printed on bumpy cartridge paper... I think you need to work out a light source and do colouring/shadows based on height. I imagine the island is a pyramid shape with snow-capped peaked centre, but currently it looks flat.
nice pen! For the past week I've been searching on how drag and drop work by using only vanilla javascript not jQuery. This is perfect.
Why is a python project posted in the JavaScript subreddit?
http://imgur.com/9bE6AeH I had a little bit of a go at messing with my shading code to see what I could do with this, overall I'm not too fussed about making it look hyper realistic because I really don't need it to be, but since you mentioned it I figured I'd have a go
Excellent reply. For one, I agree with you about the homework. I'll ask for a github account, but I've told people to kiss off that ask me to write a sample app. At this point in my career, 8 hours is at least 800 bucks. You want me to do that before we even talk, you're nuts. I've been doing js since I was 14, so 20 years. Not a huge fan of react or redux. Redux can be useful, but I angular just hooks together the way I think a ui framework should. Ask me to code in react, I'll look like an idiot. Hell, I'd rather use polymer, although I'm not as in love with that either. One of the best parts of js is you can make it functional on the high level, OO on the lower level. I refer to mix on the situation, so you're completely on target with criticizing only focusing on OO. 
Knowing a framework isn't indication of competence outside that framework. I have seen this several times in my experience. If they are equally competent (confident) outside Angular they likely wouldn't be writing this thread in the first place.
Knowing a framework isn't indication of competence outside that framework. I have seen this several times in my experience. If they are equally competent (confident) outside Angular they likely wouldn't be writing this thread in the first place.
That's just untrue, though. There are plenty of reasons to be wondering what framework to use even if you're very confident in the fundamentals. 
I think the difference is the amount of times you have to hit the DB. With the refresh token approach the happy path would only hit the DB every time the auth token expires (e.g., every 15 minutes which afterwards needs to require a new auth token via the refresh token). By using the client secret approach you need to hit the database on every request. I'm not an expert but I think that's what the advantage is.
With the 2013 era express and angular, you used grunt to replace the script tags in the build step. But you still wrote the script tags including angular.min.js, moment.min.js, etc. And you would not make a bundle on file save. Back then, node_modules was only for server side stuff. Coming from that mindset, you get exposed to four things at once: - The component-based way of doing things, - ES6, - The idiosyncrasies of the framework you decided to pick up, - The build process. To reduce the impact, I would suggest learning each separately. Respectively, and in this order: - Download Angular 1.6 and write an app the new component-based way. Use lifecycle hooks, props, etc. Understand the data flow. For example, use the `$onChanges` hook instead of `$watch`. - Learn about ES6 classes and imports. Rewrite every component to be a class. (Your app will still work, all modern browsers already support classes). Don't use imports yet, but pay special attention to them over other aspects of ES6. [Understand the difference between `import something` and `import { something }`](http://stackoverflow.com/questions/36795819/when-should-i-use-curly-braces-for-es6-import/36796281#36796281). - Now put aside your app and learn the mannerisms of your new framework. Mentally work out how you would write your classes inside the structures of the new framework. Look for parallelisms in the lifecycle hooks and the view code. In Angular 1.6, your component requests data in `$onInit`. In React, `componentDidMount`. In Vue, `created`. ng-repeat ≈ map within JSX ≈ v-for ≈ ngFor. In general, link what you know to the new stuff. - Finally, ditch your old app and start another app from scratch. Don't try to adapt your old one, you'll get lost in errors that aren't educational. Do a fresh start. Use the framework's recommended setup, be it create-react-app, vue-cli, angular-cli, whatever. Use your knowledge from the previous steps. -- Regarding specific choices, in my opinion as someone also coming from Angular 1.x, learning Angular 2 isn't easier than learning React or Vue. It's not more similar to what you know than the other 2, so it shouldn't be an important factor in your decision. Unfortunately I can't comment on Ionic.
Use [mutation observer](https://developer.mozilla.org/en/docs/Web/API/MutationObserver), look at `addedNodes`, call `getBoundingClientRect` on the added node, if that rect is the size of the window, it's (probably) the popup you're talking about, which you can remove. There's a few Chrome extensions that do this—things like 'Modal Remover'.
Have you checked out the `webtorrent` project? It does P2P over WebRTC. https://github.com/webtorrent/webtorrent I don't know enough about it to tell you if there's a signaling server, but from what I've heard the author say in interviews, it's purely P2P.
Is there a particular project that is putting you under some kind of time constraint? If not, take a step back, give your brain a second to come to rest and just start picking things up in your free time. This is what I do. I spent ~3 nights writing an Angular (2) app using vanilla JS because I didn't want to have to focus on TS. After I felt like I got what I needed out of that exercise, I spent a few days coding in Angular (2) + TS. There're two ways to look at this problem: "Ahhhh! This is dizzying! I can't make sense of this! I give up!" or "Oooooh! Look at all these neat toys to play with!" You sound like someone who is bright and curious. Make yourself happy and take the latter approach.
Links don't have children so innerHTML wouldn't make any sense in that regard. What are you trying to do?
Some mentioned "right tool for the job". Well, between React and Vue, they are the same tool for the same job. I think JS experts will tend to stick with React, because React sells a "put everything in JS and feel free to do anything with it you'd like" kind of approach, whereas Vue offers a more template based system. This means those not so deeply rooted in JavaScript can also understand relatively quickly how to build and/ or add interesting behavior to a UI. To me, React is sort of like PHP from the early 2000's in a way. You can certainly have all the power of PHP within your HTML, but PHP developers have also long recognized that this is actually really bad, because too many "concerns" like business logic can be mixed into the HTML. Thus, you would have beginners doing really bad things like calling databases from within their HTML. It is one reason why in PHP-Land we have templating systems, despite PHP being a templating language itself, in a sense. In that same sense, being able to do "everything" by mixing JS and HTML, like with React, puts a lot of responsibility in the hands of the developer, which is fine, when used properly. Vue just makes a better split of these concerns. And, before anyone says, HTML and JavaScript aren't two different concerns and thus there is no need to separate them, we'll have to agree to disagree. Because, and in fact, that is exactly what makes Vue so cool! I believe, because of this separation, the components you create with Vue are very easy to reason about, which I personally would say, is not always the case with JSX and React components. That is my personal opinion though and to be honest, I am not a deep rooted JavaScript developer either. To those saying Vue isn't for big projects. I would say, that simply isn't true. You can run very large projects with Vue, just like with React (look at Facebook!!!). It's all a matter of how you build it up, the addition of a type system (which is possible) and the tools you use to maintain it, just like with any other framework. The nice thing is though, you don't need all of the "big stuff" additions to use Vue, which is another win for it! 
I fix this by making `a_cool_svg_element` initiated as object.
Hmmm no.
I'm still convinced a *discussion* where you ask about the candidate's opinions on a variety of technologies and techniques is the single best way to get an idea about their level of experience. And weight on the opinion, because people can recite descriptions they read prior to the interview, but being able to give solid reasoning for an opinion takes experience, or at least extensive knowledge. If you can tell me *why* X is your favourite CI tool, why you think Scrum kinda sucks, why you think Redux is cool, what makes you choose Koa, what you think makes a great code review, why functional programming is interesting to you, why you think 100% unit test coverage is BS, what you think is good plan for E2E testing, what people screw up with version control and so on, I get a real sense of you as a developer. Doesn't matter if you disagree with me or aren't familiar with some concept and ask me about it instead. Keep talking about all the day-to-day software development stuff from version control to time management and code itself for a good 30-60 minutes with me and I'm convinced I can tell if you've got enough real experience (social skills included) to be a good hire I can stand behind. No homework, no whiteboard, no computer, just a conversation with an assortment of relevant topics. I'd even be pretty comfortable doing it with zero knowledge of your actual work experience, education or GitHub page.
It's possible to do without a signaling server but it's a bit of a pain in the ass. Basically what happens with the signaling is a set of data is exchanged between the clients, relayed by the signaling server, which establishes the connection. If you want to establish a connection without the use of a signaling server, you need to pass that data from peer to peer in some other fashion. This can even be done by displaying the data on the page, and copy-pasting it to the other user (f.ex. via email or chat) But as far as I can tell, the WebRTC handshake data always needs to be exchanged between clients in order to establish the connection. (fwiw, it seems webtorrent uses some variation of the bittorrent DHT protocol to achieve the same result, but this would still require some point where the initial hash table is received from) If you're interested in how this would work in practice, here's an article I wrote discussing [using WebRTC with React](https://codeutopia.net/blog/2016/02/08/using-webrtc-and-react-to-build-a-basic-chat-server/). You'll notice the article shows the implementation of both a signaling server and the basic WebRTC client. Within the client code, the WebSocket connection is used for signaling. If you were to replace that WebSocket with some other method (such as a textbox where the user pastes the signal data), then the connection can still be established.
I'm curious as to what JS you were doing in '97 at 14
For me, it is easier for a VanillaJS dev to simply 'read' a .vue file than it is to read React code. So if I was making a simple web app with a bunch of JR/new-to-web devs, I'd go with Vue. But React has a better ecosystem. VueJS has some, more if you can read Chinese.
Yes, vue-custom-element is the 'Polymer' wrapper for VueJS (hope that helps someone.
This is why I feel like learning vanilla js and getting a solid understanding of the fundamentals is the most important. That makes it easier to pick up new frameworks and understand why you would use one over another in a given project. You still have a lot to go though to keep up, but it gets easier over time.
A couple of issues. * I am not aware of any DOM property or method called `contents`. If this were a text node the appropriate property would be `textContent`. Otherwise you can use other DOM methods to get to child and descendant nodes (if any) or `getAttributes` to get attributes by name or `attributes` to get a node list of attribute nodes on the given element. * Instead of `contents` you could try using `outerHTML` which parses the actual element and all descendant nodes as text. Try those and see if they help.
&gt; How do you implement dependency injection in JavaScript This is very Angular specific. Although DI is a real thing, I don't see this type of pattern being used outside Angular. &gt; What is all the fuss about Redux/Flux? This sounds biased &gt; What problem do observables solve This sounds again library specific, RxJS comes to mind. 
Hi /u/mogcai, if you have a specific question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your work/homework for you.
There are a couple of reasons why JavaScript emerged as dominate compared to the most institutionally taught languages: C++/Java/C#. * Like Lisp lexical scope is a native feature of the language. Very few languages can make this claim and instead supply lexical scope capabilities as an addon through conventions supplied in later revisions to these other languages. Lexical scope allows expressiveness that approaches a degree of homoiconicity that OOP and inheritance are incapable of providing. * JavaScript has a fast compile target. This changes how people perceive code absolutely more than anything else. If you have to wait 30 minutes for code to compile you will write and experiment far differently than if you have to wait half a second for a similarly sized large application written in JavaScript. If you can iterate 10 faster than another developer you can fail 9 times more frequently and still achieve greater productivity. * Inheritance is optional in JavaScript. This allows Java developers to write code in this language (to a point) using conventions and patterns they are familiar with while avoiding learning how the language actually works. For those of us that know better we aren't forcefully bound by these legacy conventions. 
👍
Browsers already implement caching for REST calls. You need to add the Cache-Control header to your calls and then the browser will handle caching
I'd say that's perfectly fine. Unless there's a reason to expect records to change constantly, not caching would actually be bad design. You could probably store way more than 10 records without problems. Most modern web app stacks rely on something like this. When you constantly update small parts of the DOM, you can't fetch data from a server every time. 
Thanks, I will check out Cache-Control for sure.
Angular, JSX makes my skin crawl because it violates the principle of not marrying behavior, appearance, and/or structure. Also Reacts license makes it unusable for my endeavors.
Please say more about the licensing issues. 
No problem. The idea is that you should have attempted the problem (and be able to prove so) before asking for help.
We use DI to pass in appropriate services in lots of places in our code. This makes passing in the mocked implementations pretty easy for testing. We also aren't using Angular. I think discussing decoupling and things along those lines might naturally lead to DI, but DI shouldn't be the focus.
&gt; JSX makes my skin crawl because it violates the principle of not marrying behavior, appearance, and/or structure. \*yawn\* Have you ever actually done a project with React? You can write garbage code in any framework -- it's silly to think this is the norm in React when the entire community pushes stateless components as the primary paradigm. Stateless components are definitionally a strategic separation of behavior, appearance, and/or structure. 
&gt; OO didn't come til later What do you mean by this? Even back in 1997 with ES1 it was still the same at it's core, with a prototype based implementation of OOP. I don't think it's really fair to say that because it's not a *static class based* implementation that it's not OOP. Basically everything in JS in an object and even primitives are wrapped in objects automatically most of the time. 
It's not an issue, there has been tons written about this. It's only an issue for the paranoid who don't understand patent law or if you are working on a product and have intentions of suing Facebook.
You have a syntax error: $('div').mouseleave(){ $('div').fadeTo('fast', 0.5) }); Should be: `$('div').mouseleave(function() {`. You can also use `.hover()`: $('div').hover(function() { $('div').fadeTo('fast',1); }, function() { $('div').fadeTo('fast', 0.5) });
Facebook was caught mining Youtube, if I build something especially large related to video and advertisements which I intend to and they mine it causing me to loose profits I cant sue them. Facebook has very close to a monopoly and this is one way of maintaining it. Im not saying its a shady thing, Im just saying that for my situation it makes the choice very clear.
Haha thanks. 
As other comments have already mentioned, under the hood ES6 uses prototypes. Apart from that, it's always good to know how things work internally instead of just learning the syntax. Also, still people have not completely adopted ES6 and prototypes are used by many developers.
Hey, no time to answer here but if you sign up to our mailing list you will find out why soon. By the way ... "Despite its popularity, few know that JavaScript is a very nice dynamic object-oriented general-purpose programming language. How can this be a secret? Why is this language so misunderstood?" - Douglas Crockford http://javascript.crockford.com/javascript.html
Not really, but it's an easy and valid migration from Angular to something newer. On the other hand it's neither as easy to learn or use as React nor as elegant. It's between the two worlds: templates and functional, though it brings lots of weight and restriction from the former while never really knowing what to do with the latter. It is clear by now that the overall move goes to functional and even Vue, underneath all the thick abstraction and template-syntax coating, is in essence React. That is to say it sits on the same principles. But to React Vue is an obvious regression. Someone wrote this on Teleriks site and it matches our experience (we use both React and Vue in production): &gt; Vue is frankly a blast from the past - similar in feel to Knockout.JS and Angular 1. The view is defined in HTML extended with its own vocabulary of directives. So I suspect it is attracting Angular 1 refugees. It seems unlikely to pursade many React users however, because of the huge advantage React derives from its "everything is JavaScript" approach. No need for HTML directives for looping/logic. And templating integrates with modern JavaScript's modular name spacing and TypeScript's static checking and intelligence. React's approach creates a virtuous circle of mutually supportive elements. 
Here, my intention was to explain the concept of prototype. Soon, I will add Object.create part in my article. :)
very cool
ES6 is really OO, but good luck getting full ES6 support without a transpiler. 
You make the assumption that JSX is HTML. It is not. It doesn't violate anything. One could argue that templates on the other hand violate HTML and Javascript. Angular breaks regular XHTML and fights against the language by replicating conditions and loops with non-standard syntax. It also creates very awkward connections between logic and view, [it is MVC after all](http://iweave.com/assets/blog/mvc_v_flux.png). I recommend [eggheads course](https://egghead.io/courses/react-fundamentals), you'll quickly realize that you're probably misjudging it.
That is pretty crazy. I've interviewed 0 people who could explain it in-depth and a handful who had a general idea about it. At the end of the day, it doesn't impact most code written as understanding how to avoid slow code is more important. You can unintentionally write something that is poor performing and node might suffer more than other languages, but ultimately you need to fix that slow code. The bigger issue would be understanding how to potentially solve CPU intensive problems if you refuse to use anything other than node.
React is just a view rendering agent... it's not a framework. Redux is state management, but it's an atomic one. I'm not a huge fan, but it has it's place. I honestly only really use Angular for the view layer at this point. Most of my dependencies are managed via webpack and es6. I have my own http layer (bmoor-comm if you're bored), and bmoor-cache helps me with state. I'm been thinking angular is over kill for me at this point, but I love how components are defined and how the controller pulls things together. It separates concerns, and just gives me the OO structure I like. 
This sounds great, but it also sounds like it's missing something I would *really* love from a feature like this: Being able to define which features/plugins I want to use and then produce *two* configs: one optimized for development with hot-module-replacement and whatnot, and one optimized for production, including hashing bundles, etc.. But I admit I haven't tried it yet, so maybe I'm missing something obvious :)
Why don't you use css? With :hover and :active you can style the states and use css transitions for the fading. Working with background-color or opacity will grant you the desired effect 
&gt; RESTful API I'm willing to bet it's not. Please stop throwing this term around without knowing what it means. It's becoming meaningless.
Nice, but I'll be impressed when you can plot as many points as Dygraphs.
&gt; The prototypal OO concepts are carried in from smalltalk and the functional aspects are carried in from scheme. A minor clarification: * Prototypes come from Self. https://en.wikipedia.org/wiki/Prototype-based_programming * The functional nature of JavaScript largely comes from native lexical scope and functions as first-class citizens. Lexical scope largely comes from Lisp and somewhat from Scheme https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping while first-class functions largely comes from Scheme https://en.wikipedia.org/wiki/First-class_function
I agree with the principles of React, but I can write code like that without react and it be closer to a 1:1 ratio to what appears on screen.
I know this is /r/javascript, but... why are you using jquery with something that can be done 100% in CSS? Add this to your CSS: div:hover { opacity: 1; } And add `transisiton: opacity .25s ease-in-out;` to the div (and appropriate engine specific tags as well)
I really don't think you need to use the spread operator for conditionals in object literals, i think the undefined method is fine: const test = { a: condition ? value : undefined, b: someValue } Keys with undefined values don't make it into the object. Edit: I am wrong 
Read the rest of this thread. It's full of good advice and you're a bitter, vile person. Anyone reading this check out the dudes history. Sure it's not "the done thing" but this person is an awful one who does nothing but spout shite. Ignore and down vote. 
It's very opinionated about your code and your code's dependencies, and adds a lot of unnecessary complication that a lot of projects don't need. So not that the latter point is a fault of webpack, but so many people just assume "new project, that means I need webpack" and that's just naive.
I don't think he's even a troll. Just a sad old man. His is about the only username I actually recognise on Reddit, which is something I guess, but I only recognise it because every comment is either stupid or him being a dick. It's either really sad, or amazing how dedicated he is. I can't decide. 
I still you you're too quick to judge it. And you won't be able to wait this out anyway. This pattern is a major paradigm shift, much like MVC was to layout-inflating and this does the same to MVC. Hence it affects everything now: native desktop and mobile currently employ the same patterns, Microsoft will swap out UWP for it, there's Litho and ComponentKit for mobile, along with React-native which brings it to every system that has visuals. It actually unifies frameworks and even platforms, probably the closest thing to universal we've had. Functional viewlayers can share code and even components. And with little effort most if not all could partake. You can swap React with as much as an alias. This isn't the crazy framework wild west you're used to, also invalidates your license concern btw.
Neat ! I will give it a try!
Isn't it time to put some links on the sidebar? We get this kind of posts every other day...
angular and react are going to be around and popular for at least two / three years, so it's safe to learn either of them. Not sure about ionic, but hey.
I did try some stuff with "inspect element" and tried to accomplish this, but nothing has brought me a solution so far.
https://medium.com/@housecor/browserify-vs-webpack-b3d7ca08a0a9 https://gist.github.com/substack/68f8d502be42d5cd4942 https://mattdesl.svbtle.com/browserify-vs-webpack some reading for you
Sorry if I'm late here, I've found a cumbersome approach to use normal flow for runtime validations, which I'm using for validation REST responses. the idea is that I insert a code like `(validate(__filename, __line, apiResponse) : ApiResponseType)` to ensure that an apiResponse , which is a json object, matches the previously described via flow `ApiResponseType` At first, preprocessor extracts the filename and linenumber. Then, when the code is executed, that is passed to the `validate` function which, actually, passes filename, linenumber and the value to the server. Then, the most strange part, the server reads the source code of a given file and especially a given line number, and extrats the 'ApiResponseType' as a type which should be checked. So the copy of a source file is made, and in that copy a line with `(JSON.stringify(value,null,4) : ApiResponseType)` is inserted after the specified line number, i.e. the json representation is saved to the javascript source file together with a desired type to check. After that I run the flow on a server and capture its output and then delete the temporary file. Finally, results of flow check are returned back to the client, and, if there is an error, the red overlay screen is displayed with a list of errors. example of usage : 1) validating in the code https://github.com/ZeusTheTrueGod/WindsurfingNetwork-client/blob/master/src/routes/Posts/modules/api.js#L13 2) the `validate` function on a client side https://github.com/ZeusTheTrueGod/WindsurfingNetwork-client/blob/master/src/utils/validator.js 3) the server side implementation https://github.com/ZeusTheTrueGod/WindsurfingNetwork-client/blob/master/server/validator.js The great advantage of that approach is that actual flow is used to validate the given json object, i.e. to check that this json matches the specified type. Obviously, it makes sense only in the development mode.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [ZeusTheTrueGod/WindsurfingNetwork-client/.../**validator.js** (master → 3683cda)](https://github.com/ZeusTheTrueGod/WindsurfingNetwork-client/blob/3683cda5733f6846677ef5764dc390041b3d9fc0/src/utils/validator.js) * [ZeusTheTrueGod/WindsurfingNetwork-client/.../**api.js#L13** (master → 3683cda)](https://github.com/ZeusTheTrueGod/WindsurfingNetwork-client/blob/3683cda5733f6846677ef5764dc390041b3d9fc0/src/routes/Posts/modules/api.js#L13) * [ZeusTheTrueGod/WindsurfingNetwork-client/.../**validator.js** (master → 3683cda)](https://github.com/ZeusTheTrueGod/WindsurfingNetwork-client/blob/3683cda5733f6846677ef5764dc390041b3d9fc0/server/validator.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhdzcnn.)^.
What is `$.json`?
Try passing those variables in via a closure.
Definitely use ES6.
In my opinion, ES6 is what turns js from a shitty hack into one of the best, if not the best, scripting language. Use ES6 and don't look back. 
Align your expectations with the amount of experience they have. If I see someone with 2 years experience, I wouldn't expect good architecture skills, but programming around established frameworks, patterns, etc. within your company they should be able to accomplish. You also want to focus on how they learn &amp; grow and if they have been doing that since they started.
Here, have an upvote. The enterprise application I work on at work, my team, we opted out of using Angular and we are the only one not having deep issues. Which means we've had the time to dive into angular 1, and 2 projects by the other teams. The angular 1 code was less anger inducing to work on, but I still wouldn't use it for anything. It only appeared as semi-useless boiler plating. "we should fix the memory leak in angular, else switch to react" is now the inside joke of the office.
This is where you do what I call a deep dive on the subject. For instance, why are promises better than callbacks, what is different between async/await and promises, etc.. The idea is to confirm they know it and aren't just sort of reading blogs with just a rudimentary knowledge that allows them to repeat what they read. I've met several people who don't even realize `x =&gt; y` binds the context for you and only know it for the shorthand it provides.
They do make it into the object: &gt; 'foo' in { foo: undefined } true 
I remember people saying the same thing about backbone, jquery, mootools,... I think react is an amazing lib and tool for us, but its just not my cup of tea. It still has some opinions in its execution that dont sit well with me. BUT! its very close to what I would consider perfect for its space. That said I really like Redux and handlebars. I'll keep doing research and watching the space my opinion my change but for the moment Im slightly offput by it based on my experiences as a developer.
Wow, a serious thank you for the notice. Didn’t know about these guidelines
I still like to see them at work / tackling a task. Pure knowledge is just one part of the equation.
For me personally, it was a key feature was promised and technically never properly delivered and was a key reason I pushed to use v2 in a greenfield project. If I knew the feature wasn't going to work as advertised, a year after I expected it to work, I would have gone with rollup. Additionally, IIRC, the feature was on the roadmap for release and was pushed rather far back instead after they realized at the 0 hour how much work was going to be involved to do it properly. They then also spent time futzing around with a forced config migration and seem to have backtracked to support a simple migration from v1 to v2 without causing your old config to outright break v2. webpack is a great tool overall though and the guys definitely work hard on it. I do hope they took away some valuable things moving forward.
That in itself isn't so bad IMO (though not great), especially since it's his own post. Also, we try to give at least one warning before we issue a ban when it comes to self-promotion, because [often they're unaware of the guidelines](https://www.reddit.com/r/javascript/comments/6adbbk/webpack_for_real_tasks_decreasing_frontend_size/dhe12d5/) (not fully excusable, but understandable). Please feel free to report any future issues though!
Yes as long as 1) You have a plan to polyfill for older browsers (or using a compiler) 2) You plan on using classes. Otherwise ES5 is fine
You are absolutely right. I'm so used to making object copies with React and redux that I didn't realise this. The actual fact is that undefined keys are not copied so they won't make it in to the new object when you use obj.assign or the spread to make a new object from it. 
This looks pretty amazing
Can I come interview with you I mean I have a job and all but you know
Transpiler* Just wanted to be **that guy** :] Kind regards
So this isn't exactly the solution your prolly looking for but the Angular CLI and many like it build e2e testing scripts into the application which is a great way to get examples of best practice.
Nice article with good example and graphs. Next step is to explain call and object create in the same comprehensive way ! I m still a bit confuse about javascript prototype inheritance and the scope of this. I'd love to level up on this subject! Nice one btw 
It's not focused on JavaScript, but as far as learning the topic of testing in general, I found [Test-Driven Development with Python](http://chimera.labs.oreilly.com/books/1234000000754) to be very well written and helpful.
thanks for sharing!
TDD really serves to get you thinking about the design of your code before you write it. It gets you to outline exactly what functionalities your class should have, and the parameters/context with which it should be able to execute those functionalities. It's easy to get carried away writing monolith classes that end up being hard to read and maintain.
Yup, `.prototype` is basically a dynamic `.vtable`, but if I tell that to a prototype fanatic I'll get a load about how the future belongs to prototypes and it's fundamentally incompatible with the inferior classes.
Maybe this should be titled: &gt; How to Not Interview Senior JS Devs Given the feedback everyone seems to have...
IMHO to implement classes in es5 can lead to unexpected bugs if you aren't aware of how you are implementing your OOP class. It has a very simplified API and its much clearer to read. Stuff like const/let is a win (on the memory level even); but I am a huge fan of a proper class API :)
Thanks, will do.
I have been doing this long enough to completely disagree with you. The web was a big deal for more than a decade before JavaScript got fast or popular.
the amount that this resonates with me is horrible... 
&gt; This is very Angular specific. Although DI is a real thing, I don't see this type of pattern being used outside Angular. How on earth do you mock things then? How do you swap dependencies if everything is already baked in?
I prefer to structure my code in one of two ways: * A functional structure... literally a structure of functions. This is the preferred method for large applications that carry a huge amount of instructions and most of the logic is inward facing. I subdivide functions into child functions as necessary to reduce complexity, increase separation of concerns, and apply reuse at the lowest needed level in the given structure. * A list of methods. This approach is rare for me and I only use it when I am organizing code around an API. The biggest criticism I get from this approach is that the files tend to be really big. Big files scares the shit out of people are intimidated by reading code. That is why god gave us code editors with code folding.
It's an industry trend. Developers used to treat the client like an afterthought. Not so anymore, given the complexity of client-side code these days.
I think my main questions with testing MVC apps are regarding the fact that everything is time dependent. Between my controllers, models, and views, they all depend on some data being marshalled... but that data may or may not be available at some 'time' (e.g. database is 'down'). So you provided mocked data... then what exactly are we really testing?? I understand unit tests for utility functions (like a date formatter with specific inputs and outputs), but rarely am I writing that stuff from scratch, rather using an already tested lib. I do find value in e2e testing for general 'sanity' that the app still basically works. Any tips for what we should be unit testing for MVC apps or a concrete example???
I'm not sure if it really is being required more or less.. What I will say is that in dynamically typed languages like JS it is a lot more important than in type safe languages. JS is becoming a lot more popular, so it may be that as people switch to JS for their applications that will be a natural companion requirement.
Well, you should be able to test if your UI renders correctly based on your model.. Or if your calls to the controller update the model as expected etc. You are describing however a large dependency on state. Depending on who you ask may be considered as harmful in itself, and perhaps the difficulty in testing is actually highlighting a problem with your architecture/design/code
I'm dev for 17 years. I know Javascript/NodeJS, Python etc. But you know PHP is mature and does classes and shit. 
That's what I don't like about TDD. I usually iterate on the design several times. 1. Make it work. 2. Make it elegant . 3. Make it efficient. TDD doesn't lend itself to this approach.
I would think if you really wanted a quality senior dev, you should be prepared to answer her/his questions, not asking how much they know about jquery(flashback analogy with little relevance today)
At least you just tested way better than anyone before the max length of reddit posts :). Before cucumber etc, just appreciate spending time using the apps/sites/programs you build. Try to break it before release. Then figure out when it breaks after release what ind of tests could have been put in place to compensate that. Finally, after a couple of months of this daily exercise, learn the testing tools to perform the same tasks better and faster :) 
Yes, so much is depended on state, and not just app state. I don't see how writing any unit tests for things that rely on database connectivity can be correct. The tests should be testing well defined inputs/outputs, not the integrity of some given network. EDIT: Also, testing whether your 'UI renders correctly...', that seems to fall under e2e tests, not unit tests. I'm not going to unit test the output of my templating engine at the code level.
On the other hand, if you're following TDD, then your initial code may be more elegant/efficient since you're not making it up as you go along, and you don't have to spend as much time refactoring after the fact.
*grab popcorn, sit back in chair*
This might be the dumbest blog post I've ever read.
why didn't you mesured nodejs performance with node cluster enabled?
 var arr = (cond ? ['a'] : []).concat('b') no need for babel/bubel
Testing could be divided into parts depending on how your code is structured. Hopefully most parts can be unit tested and the "glue" code can be tested in integration or e2e tests. This should let the unit tests handle the edge cases and the higher level tests just check the business logic. IMO mocks are the way to go most of the time. You do get less assurance that everything is working but also less noise. Mocks can also be generated with a tool if you require a lot of them and refreshing your mocks could be as easy as running your tests with a command line flag.
i am not sure but at least you can say you tried everything :] i will do the following: * increase number of max open files to 8-16k * tune sysctl.conf (consider this https://easyengine.io/tutorials/linux/sysctl-conf/) * run node in cluster mode * start node with --max_old_space_size=4096 then start your tests again. p.s. i agree about async hell :]
You'll need a delimiter after each key/value pair. You might be able to use the newline character as a delimiter. And yes, string.split() is useful for this. Note that in js a string can be treated as an array of characters. theString = "hello"; theString[1]=="e" (true)
&amp; Good way to find evens is: if(num%2==0){num is even}
Or just have the loop structured like this: for(var i = 0; i &lt; arr.length; i += 2)
&gt;Fascinated by OOP lmao
I was thinking of doing an initial find and replace to make all the delimiters the same. So replace all "\n" with ":" and then split by ":" or something along those lines.
Oh good, so you have control of the text file? If it's not being returned from an api or something and you can edit it. I'd recommend formatting it as json. Try key:value,key:value, then split by commas, or wrap the whole thing in {} and you've got an object you can call json methods on. Stuff = {key:val, key:val} data = json.parse(Stuff) For (i = 0; i &lt; data.length; i ++){console.log(data[i])} Or more fun: for ( i in data)... 
I might be reading the problem incorrectly but I believe they are basically looking for frequency &gt; 2 values inside the array? This could probably be tweaked, like I believe a regular for loop is still faster than a forEach but without trying to optimize it I would just do something like this: function distribute(candyArray) { var candyMap = {}; candyArray.forEach((candy)=&gt;candyMap[candy]++); var count = 0; for(candy in candyMap) { if(candyMap.hasOwnProperty(candy) &amp;&amp; candyMap[candy] &gt;= 2) { count++; } } return count; } edit: whoops the map isn't an array... edit: oh, and has own propety, blech whatever As for why includes doesn't work my guess would be that whatever runtime they are using doesn't support it as it is a new feature in javascript. So it's probably throwing an error internally when the script is run.
The first article is in favour of Webpack though? There's got to be more criticism to Webpack than 2 artcles that are 2+ years old.
I didn't post the articles to tell you to use one or the other. Somebody asked a question about the opinionated nature of webpack, I responded with links describing it. You can be an adult and make your own decisions :P
That's very cool, thanks for the post!
No, they are copied! &gt; 'foo' in Object.assign({}, { foo: undefined }) true &gt; 'foo' in {...{foo:undefined}} true 
You could also use VueJS. This will give you the structure without having to go all in with a SPA
Check out books by Chris Hartjes. He's on Leanpub. Specifically Minimum Viable Testing. It overs the minimum amount of stuff you want to test, what is worth testing and what is not. If you're looking for sceeencasts, Adam Waltham has one called Test Driven Laravel, where he builds a whole app from scratch using TDD, it's really good. 
When testing? I use mockery, it can stub a "require" if this is what you mean
I've previously worked as a QA manager and software development manager, and I've a lot of experience in QA/automation as well as software engineering. You can be miles ahead of your colleagues if you simply manually test your work before handing it to QA or merging to the development branch. There are two things you can do: 1. Go through each point in the functional spec (there is a functional spec, right?) to ensure it has been implemented. 2. When testing, you don't want to prove it works; you want to prove it doesn't work. So the mentality has to be destructive rather than passive. Unit tests, etc., are great, but you can cover most problems with simple manual testing, as this is closest to how your customers use your product. Finally I'd like to say that quality comes from every step of the process. If your company is chaotic, it's going to be very difficult to produce stable, maintainable software. Make sure your company is following a proper software development process. Agile doesn't mean no process! Edit: One other thing I'd like to say is your unit tests need to be effective. There's no point writing them if they aren't solving a problem.
Find an app that has tests in it and write another feature
Yeah, I know that. But telling somebody to dick around for a couple months and try things will always be slower than being taught methodologies from the start. I'm not saying "ignore methodologies, just learn the shiny new tools". You can do both at the same time.
I'd like to know too. I'm thinking of making a realtime markdown editor that shows you the rendered output in the text field as you type instead of in another element. But I'm just trying to get familiar with react, not doing this for my portfolio.
This is basically how the interview for my current job went. They also tacked on a 2 hour pair-programming session with one of the developers I'd be working with. Very low pressure and I was actually able to program like I normally do.
Thanks. I have also written article for prototype inheritance and 'this' in JavaScript. I will be writing articles for call and object.create in some time. :)
[removed]
[removed]
That is a valid criticism(too large of a file) depending on your context, but almost rarely are large files preferred by anyone. While the usual arguments are degrees of cohesion vs coupling, I like to argue that the understandability of a file by someone else is it's true worth. It seems generally accepted in cognitive sciences/psychology that humans have the ability to store 7(+/-2) 'concepts' in short term memory so I try to use that as a limit to the number of methods in a class, files in a folders, lines in a function, etc. Except for function arguments, those should always be 1-3. But reality can get messy and files can get huge no matter what because legacy code and deadlines are big constraints
You've pretty much covered everything I would look for when evaluating a potential dependency: 1. Is this actually the thing I'm looking for, i.e. is there short, to-the-point description and appropriate license? 1. How would I use this thing, i.e. are there good API docs and examples? Does API and/or examples look good? 1. How's the code quality: * is public API tested? How thoroughly? * is code internally consistent and sane? * is performance an important factor, and, if yes, are there perf docs/tests? * are there too many and/or unnecessary dependencies? 1. How's the project health: * how many maintainers/developers are there? If only one, how likely he'll stop working on this project? * is this project feature-complete or still in development? * if it's feature-complete: does this project require constant maintenance and is there a good track record of it being carried out? * if it's still in development: * is the project being very actively developed? * if yes: is there a good track record of not breaking backwards compatibility and versioning convention? * if no: does this project miss any critical functionality for my use case? * does maintainer and/or community respond to new issues and how quickly? * are there outstanding unresolved issues? 1. If all that looks good, how do I actually include this thing into my project So if I were looking for a middleware for redirecting requests in Express, I would definitely consider using your project. &amp;nbsp; As a sidenote, not exactly related to your project and one might consider more of a personal opinion: I noticed you [stub out errors](https://github.com/jamespegg/express-request-redirect/blob/a53e1b23672ef6a025972fa7273d8db148aa69c3/spec/module.spec.js#L75) from [your dependencies](https://github.com/jamespegg/express-request-redirect/blob/a53e1b23672ef6a025972fa7273d8db148aa69c3/spec/module.spec.js#L85) — I understand that you want to keep tests isolated, but your actual code probably still depends on that public contract from those packages (i.e. that errors will be thrown and that exactly these errors will be thrown), so you end up with assumption about internal workings of the code you don't own. Maybe introduce actual fixture files with those characteristics and expect those errors in tests, so you at least know if your dependencies start throwing different errors that might break your code?
Right, if you want to use software patents offensively to sue Facebook, it's a bad idea to use React. Software patents are dumb. Don't work for a company that is a patent troll, and you'll be fine!
thanks ,this course will help me with that! 
Wait, what? This is utterly and meaninglessly pedantic. A transpiler *is* a compiler. There is nothing incorrect about calling, e.g., Babel a compiler. Transpilation is a sub-set of compilation.
I've done Angular 1, Angular 2, and React, but plain old javascript is the only thing that is making me happy lately.
Well, I would start with a project that caters to what you actually learned in the bootcamp. If you learned Rails, build a gem. If you learned Python, do something in Python. It doesnt have to be a React/Redux thing. Ok, so if you want to build something in React or Redux, that is simple. What do you like? What are your interests? These libs are primarily used for building UI components and managing Application state. Just about every web app can leverage these tools. So, the real question is... What do you want to build? Once you answer that... you can opt to use react and/or redux. 
Hi there! Thanks magenta_placenta for the entry! I am happy to answer any question you may have about Britecharts! A bit more about the project: Britecharts is a client-side reusable Charting Library based on D3.js v4 that allows an easy and intuitive use of charts and components that can be composed, creating beautiful visualizations. I have also written a blog post introducing it: https://www.eventbrite.com/engineering/introducing-britecharts/ Thanks a lot and again, feel free to reach me with any questions!
I just had this conversation tonight and was basically told 'you just need to sneak some in'. I'm like wtf.
Everyone else seems to be complaining and here is an awesome answer.
Cool, would be nice if ES6 would be properly minified any time soon without a babel step. I'm not sure if speed is my main priority, when I'm at the point to do `npm run build` its time for some foosball anyway, but I guess it doesn't hurt. 
Why not something like this? const parts = text.split('\n').map(x =&gt; x.split(':')) parts.forEach(([key, value]) =&gt; ...) Apologies if formatting is trash, on mobile
If you associate test-driven development (TDD) with learning better code design, it might help fill in any gaps you feel you have. Best to have an understanding of SOLID principles, DRY, and KISS. Red Green refactor is a good starting point. http://www.jamesshore.com/Blog/Red-Green-Refactor.html Though its not JS specific, anything by Sandi Metz is awesome, highly recommend her 99 Bottles book. https://www.sandimetz.com/99bottles Uncle Bob's Clean code is a great resource as well. https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882
You could wrap the string in curly brackets {} and use JSON.parse on it. That way you will be able to manipulate the data more easily.
God damn this hits home.
Move fast, leave only infrequently occurring bugs.
... lol ... of course , doesnt mean i have to like macs
Take a look at the accepted answer: http://stackoverflow.com/questions/11704267/in-javascript-how-to-conditionally-add-a-member-to-an-object
This is actually pretty easy. Just get yourself a markdown render library and use that. 
The problem is you can't show styled text in input fields and `contentEditable` is bad. I am using `marked` for rendering markdown.
Gotta love the mindset of "it's a waste to spend time on tests, but not to fix bugs that get to production." I really don't understand the thought process... Is the expectation that the software will just magically work?
Compiler has become an overloaded/overused term in the JavaScript world. Transpiler, source to source. Compiler, source to lower level/machine code. If your target is JavaScript that's the former not the latter.
I'm not a big fan of portfolio projects as they tend to have very little real use which makes them a lot harder to complete (for me at least). The alternative is to pick up a fun side project, something your passionate about or (at the very least) something that generate some real value (outside of the portfolio). My last attempt (which has been running for about two years now) is a twitter competition bot which automatically finds RT competitions and enters them. It's not hard to build (about 1-2 weeks and you've got it fully working) and the results are quite fun (the office will appreciate the 30kg of ice cream you shipped randomly one day). The alternative is to go to a hackathon, start something fun over the weekend and then carry it forward after the hackathon is done. I've done that a few times with a few fun side projects
Webpack will be dead in less than 2 years.
Nice! The following code works, but it’s about undefined (or null) parameters, not undefined keys: Object.assign(a, conditionB ? { b: 1 } : null, conditionC ? { c: 2 } : null, conditionD ? { d: 3 } : null); 
https://www.udacity.com/course/software-testing--cs258 – a quite cool course about testing. It uses python as a language. But it's not about tools – it's about more generic stuff: what to test, how to test, what kind of input should you provide If you need the solid understanding of "testing" it's a good investment
Is Rich Harris an Urban Legend like TJ ? x)
These are brilliant.
`Promise.all` immediately starts all tasks, and rejects as soon as one of them rejected. However, it can only inform your code that one of them failed. It cannot cancel the other tasks that have been started. - If you want to execute your task array sequentially, `Promise.all` is not the right tool (it can only execute them in parallel). You probably want do to this manually. The `async` library also offers some tools. - If you want to cancel your tasks as soon as one of them failed, you need to implement this logic manually, by checking yourself from inside your tasks if the promise returned by `Promise.all` has been rejected or not.
You could potentially try a promise library that supports cancelable promises, and then when you get a rejection, cancel all of them. But that would depend on your promises being based on something that is cancelable, like XHR or setTimeout. It wouldn't work if you're using, e.g. fetch() which returns a native promise that can't be cancelled.
Consider a generator or async/await and looping through them, or chaining them..
Yeah, fuck this human being !
I feel like that's what happens when you take a Walmart department manager and ask him to run a dev team. After setup, mandatory testing hasn't ever really slowed down our team's velocity, and has actually led to a net increase as the techdebt% dropped during a given sprint. When running a team that doesn't test, I don't throw them in headfirst, but I always expect a slow increase until test coverage is in the 80s... then I stop (&gt;90% is usually a waste of time) ...but to make some on-topic statements. It's not going to entirely be about "learning to test" as much as "learning to write code well-encapsulated enough to test". In javascript, I use these 4 libraries in my testing: * mocha - actual test framework * chai - assertion library * mockery - replacing libraries with injected fake objects to better control your units * sinon - better fake objects, and some stuff that mockery can't do All 4 have awesome docs. Check em out and give it a try (even if on your spare time). Testing is most efficient when done parallel. Efficiently adding tests to a large codebase without tests is actually quite difficult.
One thing I think that's missing is regression-catching. When I worked with a QA team, the biggest frustration they'd have was doing a full 2-week manual regression tests every 3 months. They wished they could do it more often (but obviously couldn't) The "ineffective" half of unit and integration tests are often there to make sure to catch regression issues. I hate writing those noop tests, too, and speak against them sometimes... but I can admit I've got at least a dozen cases in my past where one fired, tipping me off to a bigger issue that the "effective" tests missed.
From my experience code is code. It doesn't matter how big it is, where you put it, or what it does. It either does its job efficiently or not as in boilerplate and vanity conventions. Subdividing code between various files will not make the code smaller. When searching for the a particular location to make a code change at maintenance time you are generally find the correct location among the entire application whether it has big files or many smaller files in various directories. When performing string searches many editors allow searching by path or across the entire project in addition to search the local file. The only technical advantage of numerous smaller files is there are fewer opportunities for merge conflicts. This issue is merely a concern of human behavior. It isn't even a factor of competency, at least not directly. It is absolutely an emotional quality. There are those people who are willing to traverse an application to perform the required changes and there are those people who are afraid of code. The size of code isn't going to make somebody more or less afraid of reading code. This same issue is relevant in teaching small children to read. Children intimidated by reading are more afraid of larger books. Children not intimidated by reading don't care that a book might appear larger so long as the language is on their reading level. When it comes to maintaining open source software people who are afraid of reading code (lower confidence) have less business modifying it.
Excactly but it's a trade off. Instead of managing the server headaches you're now tied to the AWS platform and if you want to move you have to rewrite the app. 
Big +1 for less merge conflicts, that becomes useful at crunch time. But code is code until clients find bugs or use it in unexpected ways. Then you are faced with a few possibilities- giving the task to someone whos been on the project for a while or someone newer or who has never touched that section of code. I'm not talking open source and voluntary work, I'm talking compensated work on a team of people of various skill levels. By making files huge you are increasing the barrier of entry to that file by requiring high cognitive load on the maintainer to read through it and find problems. We don't teach children to read a book as one big word document. We make covers that are appealing with (hopefully) meaningful titles, then we teach to read page after page. We also don't teach them that they can go into the book and just start replacing words, so children reading books very much is not the same as code. Either way, I believe large files are left that way because no one bothered to make it more digestive to another human and break problems into their related parts. This is because they didn't care or don't know how to break their problem down. One is absence of discipline, the other an absence of skill or relevant domain knowledge. I've never started an oss project but I've read, used, and edited enough for my needs to see how others code. Some code is good, some is bad. Big files are bad code. They are awkward to test, the local scope is inflated. I prefer oss at work that has tests and small modular files. It allows me to easily switch out parts. Your experience with code is correct, it's just code. But it's the humans who have to generate it, and in a timely fashion and with enough ability to see where bugs lie before they make it to production. Grep and type inference will only go so far with modifications to existing code. When it comes time to create or extend, do you append it to massive files or make another one?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [getify/You-Dont-Know-JS/.../**README.md#you-dont-know-js-book-series** (master → 6109cfe)](https://github.com/getify/You-Dont-Know-JS/blob/6109cfe89e307a8a08e4906784cb7292f3fcb152/README.md#you-dont-know-js-book-series) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhf150m.)^.
After using that combo for the last year and half, my recommendation is "Just use Jest" all of the same features, none of the headache, none of the configuration. And it isn't slow as shit like Mockery. 
&gt; I often read about Javascript as a messy, confused mishmash of paradigms which at times can be a bit disheartening because it's my first language, and likely to be the backbone of my work for some time. Take notice of who writes such opinions. JavaScript is hard for people who are formally educated in C++, Java, or C# because it works differently. If Lisp or Scheme were formally taught we probably wouldn't be having this conversation. JavaScript is multi-paradigm. It has inheritance and OOP. In fact the standard data types and methods are defined using inheritance. Otherwise, inheritance is optional in this language. It isn't forced upon you and you can willfully choose to ignore it in writing your own code. JavaScript is also functional. It is natively lexically scoped and its functions are first-class citizens. This means scope nesting is available to you, and unlike inheritance it cannot be avoided. Functions are first-class citizens means functions be used, returned, and passed no differently than primitive types. This scares the shit out of developers who have never been exposed to it. Java, for example, didn't get complete lexical scope until Java 8 in April 2014 and it is locked behind a convention, lambda expressions. In Java inheritance is forced upon you without choice and functions are not first-class citizens. All this means that there are fewer options to express your code in Java which means less diversity in the code making the code easier to read and understand if you have never seen it before. On top of that inheritance, while structurally similar to inheritance in other languages, works differently in JavaScript. Languages like C++/Java/C# are class-based languages where classes are a native feature. JavaScript uses prototypes for its inheritance and classes are not a native feature. JavaScript has classes now, as of ES6, but they are a vanity convention that wraps internal prototype logic. I personally prefer coding in JavaScript due to the functional aspects of the language. You can do more with less code.
That's so ridiculous to me, when I was hired for JS dev I was hired to work on a node, mongo, ember stack, I had never used any of them before taking the job. The interview was about general software development and knowledge. The idea of hiring for a specific technology is really stupid to me. Every new job brings it's slew of hardships but learning the stack has never been one of them. Hire polygots
Sorry?
Yeah, that's important. You're taking fixed data with a predictable mathematical result and getting a wrong answer. Wrong is wrong in something like that. Anyways, I found the problem, your 'pr' variable. let pr = 0 /* Other stuff */ pr++ arrayOdMajkaGodini[pr] = motherDateWhChBr You increment pr before you insert, so your first position is empty I'd expect. Try removing that variable entirely and just do this: arrayOdMajkaGodini.push(motherDateWhChBr) Changed the result to 31.764 for me. 
Code is available here https://github.com/aronallen/cycle-sandbox
Woah... This is an awesome tip! Thank you for sharing.
Absolutely you can write an abstraction layer and for any mission critical app it would probably be wise to do so, but therein lies part of the trade-off. Now instead of managing servers or containers or whatever, you're managing an extraction layer. If you want to move platforms you still have to code your extraction layer to work with the new one. My point isn't that serverless architecture is bad and shouldn't be done, just that there are real considerations that should be made before determining if server or serverless is right for your organization/project. While I hardly disagree that half the internet is running on AWS from experience I can tell you that usually works out great for AWS and not so great for the consumer of AWS.
Hi, thanks for sharing! How would you compare Britecharts to C3.js?
A better way to create a promise chain using reduce: const promises = [promise1Func, promise2Func, ...]; const promiseChain = promises.reduce((promise, callback) =&gt; { return promise.then(callback); }, Promise.resolve());
I don't see what advantage it has, generally all javascript behave with dynamic objects from the dom or the server. Please explain me maybe i didn't catch the real purpose Edit: spelling