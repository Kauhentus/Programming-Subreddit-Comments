I use graphQL but I'm baffled it has come this far when a free-text SQL-esque solution for the front-end would have made life so much easier.
I meant that technically speaking, we might consider it a bug that we don't automatically recognize element accesses in classes as property declarations, though there may be technical limitations there. Maybe I've misunderstood, but if it actually does work, then maybe there is no bug to file.
&gt; We really do need to consider scalability. i don't believe you, not regarding angular vs react &gt; We’ve had no problems with developers using angular in the past, it’s been quite good using angular. exactly, see — you've never experienced any scalability problems — you are simply afraid of the unknown, and you're starting to [build a bamboo air traffic control tower](https://en.wikipedia.org/wiki/Cargo_cult_programming) as it turns out, scalability is not a problem that react or angular have scalability is a problem that bad application architects don't understand once you understand application architecture (read redux for an introduction), you'll finally stop considering worrying about empty discussions such as "angular versus react" — and you'll definitely drop angular, hahah
Thanks!
As I previously said, I’m not asking for an angular vs React debate. I’m asking for insights from people who’ve worked on large production apps using React. I don’t particularly like the way you’re coming across, it feels oddly confrontational for what is simply a question of how people have found React. Regardless, thanks for trying to answer my question.
Yes, I recently completed this - just an amazing tour of the language. Totally recommend.
It may not be minified, but it sure is uglified.
 &gt; +(![]+[]) == NaN (not too sure why, the plus causes it but I forget why) ![]+[] is the string "false" (![] is the boolean value false, boolean + object coersion is to string). Unary plus is designed to basically just force a value to be a number, so on any non numeric string it gives NaN: `+"lol"`&gt; NaN, `+"123"` &gt; 123 
Please tell me there's a generator for this.
As easily a most languages. Easier than many. 
alright alright, i'll try to be more helpful, here's my anecdotal experience: last year i was tasked to architect a new production application for a large company we chose react this time, especially considering that all of the company's previous projects were written in angular, were aging badly, and developers were rather sick of it working with react was a total piece of cake — maybe even sublime, i might say let me tell you, all of the complexity was in the application architecture itself (not react) we experimented with the redux principals, which really actually educated us on the basic principals of application architecture — definitely study redux, it's a genuine step forward in the industry — a drastic enough step that it shattered angular 1 (the whole world suddenly learned that one-way data-binding is the only path to sanity) redux is really exhausting though, and if we continued down that road, i think it would have bitten us in the ass — learning redux, and designing an application architecture, is unbelievably time consuming, and is ultimately very tedious to maintain, and only like one or two of your developers are in deep enough to conduct that maintenance instead of redux, we decided on mobx as the state system for the application, which is a vastly superior developer experience over redux, yet maintains the positive benefits of unidirectional data flow etc mobx and hides away the horrible complexity into a beautiful system of observables and es7 decorators, delicious! coming from angular, you'll surely really like mobx i'd say "redux made application architecture better", and "mobx made better application architecture easy" typescript, preact, and mobx — pretty slick combo, it's the best web developer experience i've known as a final note about angular and react, i believe a "fully featured framework" like angular is appropriate when you're dealing with larger numbers of less experienced developers — angular promises to hold your hand, whereas react says "i only do this one job, you have to know everything else", something like that
More like that on code golf [https://codegolf.stackexchange.com/questions/55422/hello-world](https://codegolf.stackexchange.com/questions/55422/hello-world) A funny one: [https://codegolf.stackexchange.com/questions/307/obfuscated-hello-world](https://codegolf.stackexchange.com/questions/307/obfuscated-hello-world) This is from where all that come from. 
Thank you, that’s some helpful stuff! I definitely think we need to strongly consider the learning curve with React but from what I’ve seen so far it looks like it would be a worthwhile investment. I’ve briefly heard about Mobx before, it’s interesting that you’ve found redux to be a pain in maintenance. Having read quite a few articles on React, I always thought redux was a done deal and you basically had to include it in any large project. You’ve definitely given me some stuff to think about here, thanks again 
Actually no because you can **jsunfuck!** [http://codertab.com/JsUnFuck](http://codertab.com/JsUnFuck)
Affiliate advertising. 
In some browsers it is not possible to read values that have been autocompleted on page load. I am not aware of a workaround.
&gt; I know someone might try to throw a "testability" argument at me, but there's a diminishing return on function abstraction in a production environment, especially when it's as blatantly inefficient as OP's example. It is not testability argument – it is about maintainability. Performing at most one data transformation at a time isolates the surface of potential logical mistakes. /u/__romx example is what I would write for a quick and dirty job, but would not use or approve in a production code. Performance is completely irrelevant if it comes at a cost of maintainability; just put more hardware at it.
Challenge: Use 6 characters to create an object that returns an object that returns all keys that you attempt to access. const key = object[math.random()] console.assert(typeof key === 'string') #beingADouchebag
I've had some moderate success with running focus() on form elements before validating. It seems to make the DOM pick up the autoinput. 
Oeh, I like the website layout. I can't really read the menu though, it being too thin (on a Macbook Pro Retina screen). I like the app icon, I like the loading animation inside the App, well done. I don't like that the {name} field at the top of each post looks like a placeholder, as if the code forgot to replace it. And one big question; while looking at the App I was wondering what makes it different to what a site like reddit already does? The core being sharing information and talking about it with others... But either way, great job man! You can see effort and detail in the things you made.
I like how the highlight syntax of jsFiddle just gives up half way through
I built and launched a webapp that aggregates user activity on the Brandmeister amateur radio DMR network to show which talkgroups and users are most active. https://app.brandmeisteractivity.live/ It's a simple React app using a websocket to stream Brandmeister session data. This is the first app that I built and deployed 100% cloud-native. It uses Travis for CI/CD and gets deployed to AWS S3 and served through AWS CloudFront. It's also open source: https://github.com/alexgladd/bm-hotgroups
**Turn your smartphone into a 3D controller** (think Wii remote) with just a web app: https://github.com/konaraddio/web-riimote/ No mobile or desktop app needed. Technologies Used: Vue, Node, Socket.io
[@jotform's latest tweet](https://i.imgur.com/ZQ0s4UY.jpg) [@jotform on Twitter](https://twitter.com/jotform) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
TLDR; fuck IE and open that damn beer you've been postponing for hours now.
Some dude motherfucker wrote a whole book with just the alphabet.
The main idea behind graphql is that it saves your backers developers from having to create a million endpoints for various CRUD features. You describe the shape of your data and how to mutate it and the rest is magic. The frontend developers then really benefit from this because the shape of the response is always the same shape as the request, and because graphql enables introspection bthey can also query for data about what data they can access.
I actually get aroused when I read “death” and “IE” in the same sentence. That’s how shitty it is 
you sick bastard
I've been working lately on a project building flashcard decks to help me remember some of the harder topics around web development and JavaScript in particular. I thought I would share some of the results. The app is a pure ReactJS app built using `create-react-app` (super handy) with data provided from Airtable's API (also super handy). If you like the project you can easily fork and create your own with the source code here: https://github.com/nlaz/flashcards-for-developers After some feedback I've created decks for more advanced topics like accessibility, NodeJS, and HTTP requests. I would love to hear more about what topics I should focus on.
The real question here is....why are you still using tables in 2018? 
Awesome! I like the clean design too. 
This hits way too close to home. 
&gt;Performance is completely irrelevant if it comes at a cost of maintainability; just put more hardware at it This vastly understates the complexity of system scalability.
LOL
This, and the fact it would take you a lifetime to find all the ways that all the different browsers manage to somehow execute javascript in some random piece of HTML. To avoid XSS, never mix user input with markup, period. Send it to the browser completely separately and apply with element.textContent (or use frameworks that do this under the hood).
Ah, [jsfuck](http://www.jsfuck.com/), a beautiful dialect.
[jsfuck](http://www.jsfuck.com/)
GraphQL
At my job I never test for IE until a client complains, but if I tried to actually formalize that into policy I’d probably get a stern talking to. It’s funny because IE11 isn’t nearly as bad as the others before it, but it is still miserable. I remember having to debug for IE6. That shit was a nightmare.
Super cool! Only recommendation is to not use acronyms or abbreviations in questions. Like in the interview question flash cards, you use SPA in the question without saying it means single page app. As someone that will use these to learn, it just makes it easier to understand the question, especially since noobs probably aren’t super familiar with common acronyms. It’d be fine if you word it like “single page applications (SPAs)” Another one I saw is HOC in the react set
Is this serious? Who learns HTTP codes and airbnb style guide by heart, this is ridiculous.
I don't know, maybe because I need literal table with, like, you know, rows and columns?
[@ngrx's latest tweet](https://i.imgur.com/IsRUlB0.jpg) [@ngrx on Twitter](https://twitter.com/ngrx) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Just disable right click and you're golden 😉👌🏼
I'm scared from what I just saw 
That's only the beginning. These two lines also both accomplish the same objective: ``` eval(atob`Zm9yKGMud2lkdGg9MTkyMCxpPTk7aS0tOyl4LmZpbGxSZWN0KDQwMCtpKjEwMCtTKHQpKjMwMCw0MDAsNTAsMjAwKS8vThisDweetIsEncodedInBase64==`) ``` ``` eval("㟦ᑲᝣ㓷㩤㹨㒽Ჽ㒻ᚭᒻ᝸㓦㙬㋒㩣ᨨᠰ㒫ᢪᠰ⦫㨨ᔩᠳᘰᠴᘰᠵ᤬ᠰᶩ".replace(/./g,c=&gt;String.fromCharCode((c=c.charCodeAt())&amp;127,c&gt;&gt;7))) ```
JavaScript never ceases to surprise 
Great content! Deck on DS and algorithms would add lot of value! 
I've been thinking about this some more, and come up with a far more involved example. While the solution in [my other comment](https://www.reddit.com/r/javascript/comments/8wldy8/what_is_the_best_way_to_handle_ajax_calls_for/e1xehr4/) is good for small websites/apps, sometimes a more sophisticated approach is necessary. A good autosuggest feature will: * Ensure it's input is either more than 1 character long, or equal to exactly 1 character which is not a space. This ensures that no empty search terms are sent to the API. * Eagerly send a request as quickly as it can without sending many at a time, if the input text is short (less than 5 characters for e.g.), or if the input text ends with a space (a word break like a space is a good indicator of when the term might be complete, and helps avoid sending broken text to the API) (throttle). This gives the user immediate feedback as soon as they start typing. * Only send a request when the user has stopped typing if the text is long (&gt; 5 characters) (debounce). * Trim it's input of any surrounding whitespace so it is easier to compare to previous searches. * Only send a request if the current input is not the same as the immediate previous input. * Ensure that an in-progress request is aborted when making a new request. * Cache responses for search terms so that subsequent searches for the same term are not requested again (a user might hit backspace, which would result in unnecessary requests). * Ensure that the search term associated with a response matches the most current input, in case responses arrive in the wrong order due to network slowness or whatever reason. The first, second and third bullet points indicate that we need to inspect the input on each `keyup` event in order to determine how our request-making function is throttled. This is an untested code sample, but all of the above principles combined would look something like this in vanilla JavaScript: function throttle(fn, wait) { var lastFunc; var lastRan; return function () { var context = this; var args = arguments; if (!lastRan) { fn.apply(context, args); lastRan = Date.now(); } else { clearTimeout(lastFunc); lastFunc = setTimeout(function () { if ((Date.now() - lastRan) &gt;= wait) { fn.apply(context, args); lastRan = Date.now(); } }, wait - (Date.now() - lastRan)); } }; }; function debounce(fn, wait) { var timeout; return function () { var args = arguments; var context = this; clearTimeout(timeout); timeout = setTimeout(function () { fn.apply(context, args); }, wait); }; }; document.querySelector('#search').addEventListener('keyup', (function () { var currentSearch; var previousSearch; var cache = {}; var request; function handleResponse(searchTerm, searchResults) { // ensure we're dealing with the latest search term so that // we don't mistakenly update our suggestions element in the wrong order if (currentSearch === searchTerm) { // do something with search results here for e.g. document.querySelector('#suggestions').innerHTML = searchResults; } }; function handleSearch(input) { // store the current search term, trimmed currentSearch = input.trim(); // ensure this is a new search if (currentSearch !== previousSearch) { // update previous search previousSearch = currentSearch; // check if there is a propery in the cache for this search if (currentSearch in cache) { handleResponse(currentSearch, cache[currentSearch]); } else { // check if there is an in-flight request, if so, abort it if (request) { request.abort(); } // start a new http request for auto suggest results request = new XMLHttpRequest(); request.open('GET', 'https://api.host.com/v1/autosuggest?q=' + currentSearch, true); request.onreadystatechange = function () { if (request.readyState === 4) { if (request.status === 200) { // if we get a result back, set the cache cache[currentSearch] = request.responseText; handleResponse(currentSearch, request.responseText); } // clear the request variable request = null; } }; // send the request request.send(); } } }; var throttledSearch = throttle(handleSearch, 500); var debouncedSearch = debounce(handleSearch, 500); return function (event) { var input = event.target.value; // if this is a valid input to trigger a search... // (at least 1 character or equal to 1 character which isn't whitespace) if (input.length &gt; 1 || input.length === 1 &amp;&amp; /\S/.test(input)) { // if the input is short or ends with a space if (input.length &lt; 5 || / $/.test(input)) { // throttle - display the results eagerly throttledSearch(input); } else { // debounce - display the resuts when user stops typing debouncedSearch(input); } } }; })());
xkcd bot slippin 
I think I get it. For some of them they're using character codes, but when applicable they pull from operator names. For instance you can get f, a, l, s, and e from false using string concatenation. What's really confusing me is how x works and why they didn't concatenate from regexp instead. `(+[]+RegExp)[14]`
Ah thanks! I tried to keep it simple
Ah you are totally right. Those issues should be fixed now. I'll remember to check for acronyms and abbreviations in future cards. Thanks!
Ah that's a great suggestion. I have a couple on Big-O but general terms would be great to add.
Yup, I have looked into! Questions are great for beginners but more tricker will be useful for others as well. But, good effort!
Touching specifically on what you said about the frontend having knowledge of the database -- I definitely enjoy my team knowing that. The company I work for is migrating a monolithic java application into microservices, with new APIs being put in place and old ones deprecated. We work with the backend to curate the api so we can more easily define our state shape on the frontend from the get go (multi page app utilizing react). So for us it makes a lot of sense 
Nice. Nice. Nice.
If I have to use latest features, I'll do it and simply display a message to update the browser if necessary. 2 mins spent on updating would save the devs a buttload of time and coffee.
[Stuff like this](https://github.com/whatwg/dom/issues/319#issuecomment-296345763).
Sounds like you'd enjoy [Brainfuck](https://youtu.be/-3C200nCwpk)!
Remembers me of that ransomware incident where tons of companies still had windows XP on their computers. Those are our true enemies.
Hahaha were just now moving to IE11 at work.
https://news.ycombinator.com/item?id=15259428 TL;DR A change in the CSS selector spec, and another in the DOM spec, are not reflected in Acid3, making it not 100% accurate anymore. Would be nice to see Acid3 updated to reflect these changes. I remember when it was really popular, and would still like to consider it as one of those holy grails of browser testing.
Completely agree. Great for separation for concerns and so as to allow more competition between tools.
I wrote a Javascript console for ie6 at best buy that you could get to with a special url argument. Saved so many WTFs in production. 
Banks are supporting IE all over the world. I guess their 3% revenue is much greater than 97% of other businesses. Hence long live IE :D
I wish there were a lifeunfuck :/
There are some UNHOLY things that exist in this world... this is, by far, one of the worst.
&gt; I was taught to write it this way "Here, I have some more samples on this floppy disk."
It's great and covers a lot of topics. Well done! Future ideas might include some online references at the end of a deck, and a way to provide feedback for a particular question. However, the clean and simple ui are really good and effective so take care to keep that. I will be showing these to my students.
Same here, with the addition that unless it's trivial to fix, that feature is made unavailable for IE users :) 
Thanks
Thanks 
I tried fcc as well 
Knowing how to fix almost every shit in IE6 back in the days, gave me well paid job just after finishing my education. Still hate them, IE6 and that job.
Starbucks? Srsly, i was there as a store manager in 2014 and they were using ie6 *to fucking process payroll.*
If you want to learn ES6 why ignore modules? That would have made this much more usable for others and removed the need to copy+paste functions. 
I would argue this library has nothing to do with games everything to do with 3D graphics. You could potentially widen your audience if you don't restrict yourself to games in titles and descriptions.
Javascript isn't the only language people have tried: [https://codegolf.stackexchange.com/questions/11690/encode-a-program-with-the-fewest-distinct-characters-possible](https://codegolf.stackexchange.com/questions/11690/encode-a-program-with-the-fewest-distinct-characters-possible)
Wish my company would roll back from IE11 get a constant download bar but the buttons won’t work, and the OT Department of one of the worlds biggest aviation companies can seem to grasp IE11 is just shit.
Doesn't angular have a huge memory leak issue with ie11? I wonder why they didn't patch it, it's been open on github for almost two years
one of my favorite tech podcasts thank you!
System scalability does not come from reducing several iteration cycles; system scalability comes from horizontal distribution of tasks. _If_ data processing is a bottleneck in your architecture, then JavaScript is a wrong language to be doing data processing at that level. Q, R, C and similar languages are built for that purpose.
Let me guess, Starbucks were using Micros/Oracle. Most of the big fast food groups have the same root problem as far as IE support.
I always thought the tilde operator was a horrible idea.. what good use cases have you found for it?
1. reducer - the function you give to Array.prototype.reduce() 2. you are the only one talking about Redux
Misleading title. The article is literally saying that IE 11 cannot be eliminated.
There is one, but it is a definitive and very mysterious item. 
Gosh... I was working for a bank, developing an internal analysis tool ment to centralize almost every data they had into a dashboard app. ng4 + ngrx + d3 + ie11 was the reason I left. Literally i was tired debugging stuff like: click a button, enjoy having a page with no interaction (every browser event was detached from the page - literally you had to refresh the page). 
Absolutely love the clean, brutal design. Makes it so easy and a joy to use. I've bookmarked and will definitely use this. 
I used this librabry last time it was posted and had a lot of trouble with node on windows 10 getting the "santa" character to work in the console. When I started looking into a fix it was more time consuming that it was worth to me at the time. Any thoughts? Other than that I was really excited about this solution...
Great stuff, really love the minimalistic UI. One thing I noticed is that a "loading indicator" was missing. I was on mobile data, didn't know it was loading and clicked on the "Request a Deck" link. So I would say add a loading indicator and don't show the "Request a Deck" link until every card has been loaded. 
Good to know! However - relational db is a no-go in my case. Does it support MongoDB?
I don't remember any time when IE was loved as this article claims. IE got to it's dominant position through monopolistic practices not through actually being good.
How do you defend a carpet when compared to a car? 
I'd remind myself that languages are not sports teams and no citizens are harmed in the criticizing of one or another language's warts If you "absolutely love js" and can't think of how to "defend" it then...consider that the person has a point and/or you don't know it well enough? (In your specific examples, there are tools/language features now to mitigate those things, but the technical debt they've caused to be acquired still exists)
Just created the function Event on friday if it isn't defined as a function... yeah IE11 support...
https://docs.spring.io/spring/docs/2.5.x/javadoc-api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html
&gt; you absolutely love js Don't *absolutely* love programming languages. They all have flaws. Don't be a fanboy who refuses to acknowledge any of them. Perfection doesn't exist in the real world. There is always room for improvements.
1. Javascript has a richer community than Java. This means that if you want help with Javascript, it's easier to find it. This doesn't mean that Java doesn't have a rich community - it does, but Javascript is bigger. 1. Because Javascript is among the most used languages (probably the single most used language, actually), it has a rich ecosystem of libraries. Anything you want, someone probably wrote it and it's in NPM. 1. Javascript is far more expressive than Java. You can use anonymous functions and higher order functions in JavaScript, while you couldn't in Java until the later editions, which is probably not widely adopted yet. Javascript's list and object declaration, for example, is as easy as: // NOTE: No import required let myList = [1,2,3]; let myDictionary = {a: 1, b: 2}; while in Java it is: import java.util.ArrayList; // Yes, lists have to be imported import java.util.HashMap; // Dictionaries too ArrayList&lt;Integer&gt; myList = new ArrayList&lt;&gt;(); // Java has no list literal syntax so you have to do this the object-oriented way myList.add(1); myList.add(2); myList.add(3); HashMap&lt;String, Integer&gt; myDictionary = new HashMap&lt;String, Integer&gt;; // No dictionary literals either myDictionary.add("a", 1); myDictionary.add("b", 2); 1. Javascript runs on the browser. There are no other languages that do this, and to run another language (Scala, for example) in the browser, you'd have to convert it to Javascript, adding a step in the build process.
I love the other comments saying “don’t think about it in terms of sides to pick.” But if it’s not a (pointless) fight and the “opponent” really tries to understand why someone could like JavaScript, I’d tell them: it’s (comparatively) lightweight and flexible and it’s incredibly useful. Plus, you can upgrade to static types if you want to. For example, JavaScript’s build tools (gulp, webpack, …) being configured in the language itself wouldn’t work as well in Java.
I can't say much about Angular because I don't work with it but I have worked with React in a few projects. In fact, I've been one of the advocates for React in our projects because we've found React to be a really solid tool that we can depend on for great applications. Before React, I've worked with jQuery projects and server-side rendered projects. jQuery promotes spaghetti code. Server-side rendering doesn't really promote rich applications. Besides, the biggest disadvantage of client side rendering is Search Engine Optimization, which is trivial when you're building internal information systems.
So angular2 completely fails when it comes to IE11?
The primary benefit of enqueing scripts is so that you can dynamically include them when needed, as well as WP making sure any notes dependencies get included first. It also keep duplicates of dependencies from different plugins from appearing more than once, calling versioned names for code, and allows easily sorting between footer and header. If you’re working on a temporary, get-it-done project you can just hardwire it, but it’s not hard once you get used to it. You can also register and enqueue inline scripts. 
Is it one of those flying carpets you can sit on and use for transportation? 
It didn’t hurt that Netscape was already garbage by the time the web was really starting to take off. In many ways, IE 6 was the best browser available at the time of its release.
I wrote a generative art program: http://anemy.github.io/concentric Try the ‘randomize’ button. The algorithm makes svgs (looks best on chrome). Code at http://github.com/Anemy/concentric
What's the situation where you need to "defend" JavaScript against Java?
Will try it as soon as I get the chance
The article is correct in that the greater community needs to abandon IE, and fix up the critical IE-only apps that are stopping the depreciation of IE. I happen to be quite familiar with migrating legacy IE only apps to be fully cross browser. If anyone reading this needs to migrate an internal app... or even just get an assessment/quote on the LOE to convert one feel free to DM me.
Yeah, let's say it was
Web development is this super strange industry of people shooting collectively shooting themselves in the foot. Deep down everyone knows that if enough people just stopped supporting a browser, people would be forced to find an alternative. Yet they all buy in to this irrational fear that a handful of people acting in bad faith with steal all of their business. Despite being architects of their own pain and suffering, they'll point fingers at everyone else to assign blame. I stopped being afraid to expire things long ago. Any business that would have been possibly gained by supporting browsers like IE11 is a sunk cost fallacy at play. I put all that prospective development time back into making improvements to site functionality so that the experience is better for everyone else not stuck in the past. I am personally convinced this has a bigger effect on my conversions. If you continue to develop for browsers like IE11, you are the problem. If it's mandated by higher ups in your company it's your job to convince them otherwise or find a different job that's looking to future. Stop blaming everyone else. 
I created a SQL benchmarking tool in Electron/React/Redux called SQLitmus: [https://github.com/Aaronong/SQLitmus](https://github.com/Aaronong/SQLitmus) It does the following: \- Generate mock data for your SQL database. \- Run queries against your SQL database. \- Analyze your SQL database's performance as data grows.
Java trash
NumberObject.toString(radix)
Something like this might do the trick? The function takes an positiv integer and an arbitrary "alphabet" and converts the number to that "alphabet". function toBase(number, baseAlphabet) { const base = baseAlphabet.length; const res = []; let num = number; do { res.push(baseAlphabet[num % base]); num -= num % base; num /= base; } while (num &gt; 0); return res.reverse().join(''); } const binary = [0, 1]; console.log('binaryTest', toBase(10, binary)); // binaryTest 1010 const hex = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']; console.log('hexTest', toBase(10, hex)); // hexTest a console.log('hexTest', toBase(15, hex)); // hexTest f console.log('hexTest', toBase(16, hex)); // hexText 10 Just provide your own alphabet and you should be good. :) 
The primary reason is managing dependency. To cite an example, I recently created a child theme of `twentyeleven` and had to include my own dark theme (`dark.css`) on top of the parent theme's `dark.css`. As a result, this is what I had to do in my child theme's `function.php`: //add dark theme if applicable if ('dark' == $color_scheme) { wp_enqueue_style('dark-child', get_stylesheet_directory_uri() . '/colors/dark.css', array("dark"), wp_get_theme()-&gt;get('Version') ); //child-style } As you can see, the third parameter to `wp_enqueue_style` i.e. `(array("dark"))` creates the dependency. Wordpress will know to load the parent theme's dark.css (who's id is `dark`) before mine (who's id is `dark-child`).
We would love to do some of this. While 3% may be the number of IE11 users globally, our particular customer base still uses it at a 35% rate. And since our customer base has a choice of a variety of similar apps, we cannot risk alienating them. It is costly for us to support it. But it would be even more costly for us to not support it. We do try to nudge users over to other browsers. But often they are locked in to using IE because their companies don’t load anything else on their computers or they are not tech savvy enough to load other browsers themselves.
Show me a tutorial that demonstrates this.
Put up a blog post (or whatever) demonstrating this.
You claim that toString doesn't work, but you haven't told us why you think that it doesn't work. Because, so far as I can tell, it does. And then, as you say, it'd be a matter of changing the digits to your custom set.
This would convert it to what OP calls "true base 27", e.g 0-9 + a-q. Whereas what it seems like OP wants is a custom mapping using the whole alphabet a-z and 0 = 9. E.g the "shifting" the whole alphabet 9 steps.
From what I understood OP wants a custom mapping, and not the "true base 27". So I imagine its the mapping after converting to "true base 27" which fails, not `toString` in itself.
&gt; And then, as you say, it'd be a matter of changing the digits to your custom set. 
Ah that's a good catch. I'll can fix that quickly.
Ah so glad you've bookmarked it. I'll keep adding decks to it. Any specific topics you would like to see?
In addition to of keeping dependencies in order, letting Wordpress know what script you're using also allow plugins to hook into the script delivery process. They can then do postprocessing steps (for example, bundling, versioning, or hashing for subresource integrity) which helps the blog run faster (at least until we all switch to HTTP/2).
Ah that's a great idea. I'm still trying to think about how to best support additional references like you suggested. I have a way to "report" an issue with a card at the bottom of the card screen but I'm sure it could use work too. So glad to hear you will show these to your students. Let me know if there are any ways I could make it more useful to them.
Ah I see. I could definitely dig deeper into those topics. I'll see what I can do. Thanks!
Unless you understand what the other person means, you don't defend it. Assuming you want to defend JS, this is what I do, maybe it will be helpful to you: 1. Admit you don't understand what they mean. Nothing wrong with this. Being willing to learn shows that you aren't defensive and come from a position of strength. Ask them to explain what they mean by "coercion double equals the this variable problem callback hell". And for them to give concrete code examples of what happens and what problems it causes. At this point about 90% of these types of debates end because the other person is usually regurgitating something they heard from someone else and they actually can't explain what that means. 1. In the rare case they aren't trying to BS, actually learn from them what they are talking about. And once you know what category that feature falls into, do your research on the pros on cons. Let's say someone is complaining about dynamic typing vs. static typing. If you don't already know the pros and cons of both, how could you possibly defend your position? You need to hit the books, talk to other devs, and maybe even give both a try in real life to be able to come back with a reasonable defense. 1. Be honest when JS really does have a wart. No language is perfect. You'll hurt your own credibility if you want to insist that type coercion + boolean evaluation in JS doens't have some surprises. A language is the sum of its pros and cons. JS has so many pros we can easily live with the cons. Not to mention that with a tool like ESLint (e.g. https://eslint.org/docs/rules/eqeqeq) you can easily avoid the large majority of the warts in JS without even being an expert in what those warts are. 
Correct 
Peeps got wayyyyyy too much time on their hands.
As others have said every language has it's quirks. I happen to like JavaScript's loose type system but I understand that coming from a statically typed language it seems weird and backward. The biggest difference for me (and I work in both fairly regularly) isn't a language feature but how tight the feedback loop in JavaScript is thanks to modern tools. I can develop so much faster in JavaScript than in Java and it isn't even close.
Oh is that all.
It's a different language, you can't shoehorn one languages ideals onto anothers. Learn the differences.
Yarn is safer and faster than NPM and the people behind it aren't looney tune crazy toxic marxists.
I created a very lightweight playlist manager for youtube. Basically it was very slow to create a playlist that I don't usually want to keep around! * It has basic play controls (play, pause, prev and next) plus all of the options of youtube's embedded player * Single click to clear the queue * Drog, paste or read directly from your clipboard to add a link * Remove elements and play any elements from the list [https://playlist-manager.now.sh/](https://playlist-manager.now.sh/)
Gradle is configured in a JVM language tho
No, it's just that you will need to convert to ES5 and be careful with what you're using since ie11 doesn't support most of the new features
Logging in production usually involves transforming and piping to some other central system of record and (using third party software) for viewing later. Not sure of the merit or hype behind a solution that’s seemingly designed for “fun” local use and not much else
Supports "Multiple configurable writable streams", dont misinform people with your ignorance for "fun" fss
Right, so the simplest thing to do is just change the characters afterwards. 
It’s a best practice to handle this outside of your app. Especially in containerized instances. Log to stdout, use fluentd/logstash to transform and pipe to final destination. You can easily do it with process.stdout.write and delimit with newline. Easy to consume during development, production compatible when it need to be, and no muddying of your application/BL boundaries. No emojis needed. Signale looks fun but ultimately hipstery overkill
React makes me sad but React with redux is fine 
You can turn off what u dont need, what u described is pretty standard and faces no limitations by the module's API. I think the emojis are not included though by default, no sign of them at the source code.
TeX is at least bug free.
Try/catch?
The performance is awful. You have to be extremely careful with the number of nodes your app has, especially in IE11. Also, you will have to move a lot of processing outside of the zone. Literally it was a pain. Bare in mind that we were developing especially for IE11. That was the only thing in the acceptance criteria when it came to browsers.
 let el = driver.findElement(By.xpath("//span[.='" + agentArray[i] + "']/../../td/span/label")); if (el) { el.click(); }
Not that I know. But if all you want is arbitrary json, postgresql does it and postgraphile will return it.
Not everyone is developing public facing sites though. For example, I build a lot of web apps, tools, and dashboards for internal use of our main client. They want extensive browser support because they have a "bring your own device" policy. So we provide it, because they provide us a LOT of money. I can't just tell them we aren't going to do IE because "tech nerds are trying to push down IE use". I mean, if they wanted Flash stuff, we'd tell them that's dumb, but still we'd build it.
This is awesome - I would love to see some more entry-level content as well. Foundational stuff that someone would want just before the current stuff. 
it never makes it past the error :(
I wonder what the compression would be for a fully fledged application converted to this format.
alternatively to try/catch, it looks like you could also do exactly the same as you suggest in python, ie use `findElements` instead of `findElement` and see if the resulting array has length 0 or not.
Could you put together a JS fiddle?
Thanks you for your honest and valuable opinion! So the curly braces is “design” choice and I can understand how one wont like it. The other thing is, the app is indeed very similar to the new Reddit feature “News” . I haven’t tried it yet , although they released it right when I finished my project. Anyway, the idea here is you cant repost, if you try to upload link the existing already, it wont let you but instead ,?it will push the link to your view so you can talk about it. The second thing is, my main thought was the Israeli market where Reddit isnt used that much but need a similar product. And this was my idea and first project ever so.. I fugue , why not?(: 
Unfortunately not since the app has to consume login credentials of my company's platform. I undertstand it's hard to help me like that, but I do have a repo: https://github.com/skramzy/filerec-automation-tool
I've tried try/catch with a few different variations of the logic, but it never gets past the error.
&gt; Doesn't GraphQL break the paradigm of loose coupling? Should a frontend developer even have intimate knowlege of the database schema? I think in a perfect world your GraphQL schema is just as abstracted away from your DB schema as any REST API. With GraphQL, you say "These are the available properties on a User". The back-end is tasked with figuring out _how_ a value gets to be there but on the front-end we just care that there _is_ a value there. Just like I can have a REST endpoint of `/top`, which queries 10 tables and gets me the aggregate of those 10 tables, GraphQL isn't tied directly to any specific DB or resolution, at least not from the query-er side.
Internal apps like that are essentially software development that just happened to use web technologies. This is different case than what I was aiming for but obviously still contributing to the problem keeping this browser alive. Lots of justifications can and will be made by developers. My point was that if you super it for whatever reason. Those who do, don't really get to question its longevity or blame others for the frustrations dealing with it. It becomes self inflicted pain. 
Then use `findElements`. Or post what you're doing with try/catch 
I've seen it stick around from enterprise grade software that uses Java, but was crashing on Edge. I think it had to do with a newer way permissions were being handled, but the software is so complex/matured that there's no way the owning company is going to put money into fixes for Edge unless they have to. Certainly not a rebuild for Chrome/Firefox. I attribute the situation to market factors though, not what people could be doing like the article implies. IE11 will die for corporate use, along with any other software that employees run only because factors out of their control require them to. When, though, may as well be reading tea leaves. There are still old technologies that are way past mass usefulness, but one can almost always find an edge case usage that justifies it, so they zombie on... finally, a natural process stops the zombie virus, killing it, or someone that can takes the poor creature out. ;P
So cool, definitely saved. By the way, some of the longer card content needs to wrap to the next line on mobile! Git diff flash card was where I saw that. 
Great idea. Firstly I'd hide the i was right, i was wrong until you press the button (If that was the intention, it isn't working in FF mobile) Secondly, Some of the answers are a bit "meh" I clicked on Ajax and they were ok answers, but I'd need to expand, so I'd provide a source for your answers Thanks!
Very bad. This method has to go around the world just to write a number or call a function.
The only place the word "reducer" is used as jargon is Redux. The callback to Array::reduce doesn't have a specific name. If you're trying to say the replace callback is like the reduce callback, except for some arbitrary distinction, ok I guess, but again, completely beside the point.
JavaScript is an amazing language. It had first class lambdas / closures from the start, something Java had to wait for ages to get. Together with unrestricted, freeform records it makes for an incredibly expressive feature set - most JS code can be written using only those two features! Prototypical inheritance is strictly more powerful than classical one. You can implement lexical scope using prototype inheritance, because it works pretty much exactly like that. If later you decide you need types, welcome to the super expressive world of TypeScript. Besides getting rid of that pesky double equality problem, it also lies less than Java. For example you can set it up to not claim that something is of type InterfaceX when it can have the value null (null clearly has no methods described in InterfaceX, so its a lie to accept it as a value of that type) with \`strictNullChecks\`. You will also get powerful features like mapped and conditional types, sufficient to describe and type check all that free-form record type flexibility you've enjoyed before. The true weaknesses of JS lie elsewhere: in its lack of multi-threading support and lack of big integer types. However, newest V8 is getting BigInts, which will soon be in node. Additionally, node just merged [worker threads support](https://nodejs.org/dist/latest-v10.x/docs/api/worker_threads.html), which adds some of that multi-threaded goodness without the race conditiony flaws that normal multithreading has. In short, JS is catching up and fast.
You need to share your code for someone to tell you what's wrong with it...
If try/catch in the obvious place doesn't work, I'd be very suspucious that the exception is being thrown by some other block of code entirely. Can you get a stack trace of the exception (and/or get a debugger to breakpoint on the exception)?
I think you need a null check before accessing the .count property. var elements = driver.findElements(By.ID(‘abc’)); if(elements &amp;&amp; elements.Count &gt; 0) { // do something } else { // do something else }
While i whole-heartedly agree with most of this, there's just one point here: \&gt;If you suddenly "replace" it mid-chain, what's the point of it being in your chain? It sounds like you're burying a completely different dataset inside a chain. Consider map filter reduce. That also changes the dataset somewhat. It's up to a developer's finesse and care to avoid such situations, otherwise apply clean code principles and common sense. .replace, without it's actual context, as a chain method would be "okay". Otherwise, spot on.
In my perspective, that operator has no place in a language like Javascript. If you want to use that operator, use that specific language that supports it. Not everything has to have everything else. Chaining is very expressive.
I'm strictly talking about the potential compression since the patterns are repeating and consist of the same six characters. Performance wise it is a nightmare for sure.
This is a great little tool. Nice job. This question: "Explain why the following doesn't work as an IIFE: function foo(){ }(); . What needs to be changed to properly make it an IIFE?" You need to add what needs to change to make it an IIFE
Check if the element exists first: function selectAndSendWelcome() { for (var i = 0; i &lt; agentArray.length; i++) { var locator = By.xpath("//span[.='" + agentArray[i] + "']/../../td/span/label"); if (driver.isElementPresent(locator)) { driver.findElement(locator).click(); } } }
Hopefully this isn't considered too much self-promotion. We worked really hard to build this free tutorial and share it with all of you. Enjoy!
Pretty neat. Some features you could add would be shuffling all the cards together and a similar spaced-repetition algorithm like Anki.
THIS IS AWESOME! Thanks for making it! 
Reduce is similar in that you're explicitly constructing something new, which _could_ be an array. You can put another array method after it the same as you could on a `find` if that happens to return another array. Like you've said, it's up to the dev to "avoid" this (and comment to make the intent clear otherwise)), which is why it's ridiculous to create a new method to deliberately not avoid it. 
Thanks for your kind words :)
It is 5 years into the future, and nodejs and React are now listed in the Encyclopedia of Embarassing Trends, alongside Planking, the Ice Bucket Challenge, and the Harlem Shake.
Cant view in chrome mobile. Other than that, do we need more block chained backed things?
If you're the only one touching the code - you can honestly do whatever you want. You won't break anything just injecting your own javascript at the bottom of the template like that. Keep in mind, if anyone else is going to have to touch it, you should do it the WordPress way. Enqueuing encapsulates several parts of dependency management for you: 1.) Version control / Cache Busting - The functions let you pass version numbers to the scripts which are appended as cache busters, making it very easy to force through new code on users next visit. 2.) Targeted Usage - You can better control where the scripts are loaded. If you're doing a custom template probably not a big deal since it will already only load when that template is used (when doing it your way). If you're trying to enqueue scripts on a default wordpress page or the dashboard, having it loaded globally could lead to compatibility issues or interference with/from other scripts. 3.) Dependency Management - Handles loading scripts in the proper order 4.) Extensible - By staying in the WordPress framework you can allow other plugins / themes / child-themes more flexibility in working with your code. For example, a plugin might want to unenqueue your script because it conflicts with something its doing, and then load an alternative. Or a theme might want to use yours as a dependency to make sure it loads afterwards.
Yup, that's as designed. Since this is a tutorial where you need to write code in the browser it's difficult to make a mobile-friendly version. I invite you to come check it out on a computer! :) For the blockchain question, regardless of how one feels about the current state of the ecosystem and the projects built on top of it, blockchain is itself a technological breakthrough. This is a free tutorial to teach developers how blockchain works at a low level, which I believe is important knowledge to have.
luckily, I didn't use it as a jargon
named - it has a name by which it can be identified
Awesome concept, and I really enjoy he design.
This resolved my issue instantly. Thank you very much. Would this indicate I should familiarize myself with Promises better?
&gt;If you continue to develop for browsers like IE11, you are the problem Eh, that's too narrow and overly activist-like. Reminds of GPL groupies saying stuff like "if you don't release your OSS under the GPL, you are the problem." As if there's no conceivable morality in releasing under Apache or MIT if you "really care about OSS" etc. IMO you need to allow and respect each business's need to make its own technology decisions based on its particular product, audience, etc. I run a site that has about 4&amp;#37; of users on IE11. Supporting IE 11 is not actually hard, the main pain point is not being able to use CSS Grids. I'm not going to turn off support and upset those paying users because you or some other activist thinks its "the right thing to do." At the same time, I'm developing a new product right now for a different audience that has hardly any IE representation, and I am gladly going to drop IE support. I'll be the first to say IE is a shithole, mind you. And I'm staunchly pissed off at MS for treating the webdev community so badly, dragging us through "IE hell" because of their market dominance. Now they want us to like them (GitHub, Edge, VS Code) but haven't apologized or acknowledged the shit way they treated us for years and years. But opinions and ideals aside, the facts on the groud are unique for each business and the decision is properly theirs to make regarding what tech to support.
I wholeheartedly recommend it. MDN has a [pretty solid article on promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises), like they do for almost everything JavaScript. JavaScript is really callback oriented and promises are a great way to manage the complexity of callbacks.
What "keeps the browser alive" is squarely and surely, Microsoft.
I’ve been waiting for IE to die for about 13 years... Young devs today don’t understand the struggle of building a website twice for browser compatibility. 
A _secure_ blockchain is a breakthrough. But this is a nice learning exercise.
Yup! Couldn't agree with you more. The plan is to take the code that was written during this exercise and start you off there when we go into more in-depth challenges. Be sure to save your progress :)
That's really bad practice. Also, why can I not just read it anyway?
I stopped supporting IE completely a while ago. When someone complaines I tell them we don't support IE as if I had the authority to make that decision. The lack of challenge from anyone on it almost does give me the authority. Like no one wanted to make the decision to officially continue to support it, so when I said we don't everyone just goes along.
You can still love a programming language while being fully aware of its flaws. I love JS and I am well aware (sometimes painfully so) of its flaws. I still love it.
Hey there! The tutorial is a series of coding challenges that involves writing JavaScript in an editor. It's kind of like an in-browser IDE, and I've never seen an IDE on mobile. Would you program on your mobile device? Certainly if that's something people are looking for we'll dedicate the time to find a solution. 
There is a lack of information in your question that would make it easier for someone to help you. Don't just say something is wrong with an apostrophe. That's unhelpful. * What is being displayed vs what is expected? Is it something expected like `Cote D'ivoire` being displayed like `Cote D&amp;#39;ivoire`? Or is something more "exotic" or is it not displaying at all? * What is your code that is handling the rendering if the text * Are there errors in the JS console? * Do you see the correct value being returned in the HTTP request?
Hi /u/spxthrowawayyy, For javascript help, please visit /r/LearnJavascript. Thank you!
Great web app ! I'm very into flashcards since few weeks (with Anki). I like the minimal style of your app, and the decks are good quality. It's bookmarked and i'll definitively use it ! (i'm a back developer trying to improve my frontend skills). Congrats !
You're not wrong! However, IE 5 and 5.5 ( and even IE6) were pretty well received when initially released. The clusterfuck failure of Netscape (see below) is what allowed MS to really push the IE dominance and get into Mac, etc. The monopolistic practices revolved around being unable to uninstall IE and the browser being a mandatory piece of software in Windows. In 2003, when Phoenix / Firefox was introduced and started to gain ground quickly was when IE6 became the villain of web development. IE didn't budge for 3+ years while Firefox was quickly making improvements with standards and performance. IE6 -&gt; 7 was 5 years (2001-2006) and that's when Prototype.js and jQuery spawned into existence to solve the cross-browser puzzle and it's still something that persisted after IE7 and beyond for a few years because of Ballmer's tenure. u/DarleneWilhoit \- I remember those days and I was a Netscape fan regardless. MS got a lot of flack for trying to make up their own standards by force (among other things), but Netscape did similar things as well. Remember JavaScript Style sheets and how if you turned off JS you lost all of your styles? Yeah, that was great. Netscape was already dying / dead and no amount of money from AOL was going to be able to save it from itself at that point. They had branding problems and NN6 was just not well received - thought I remember it being pretty good.
It appears from the downvotes that this is an unpopular opinion. Wasn't trying to be sarcastic in my reply. I'm excited to explore creative solutions and am genuinely curious as to what the expected interface would be. I suppose I should have put "not mobile-friendly" in the title ;)
It takes two to tango. Microsoft can do all they want but if a developer has any common sense they won't support IE and help put a stop to this nonsense.
I would recommend using GLSL shaders to achieve the kind of animation you’re describing. Using GSAP to animate particles is, as you mentioned, very inefficient. Nothing wrong with using GSAP with Three.js generally, but for computationally expensive particle animations like these you want to stick to using Shaders and *only* changing your uniforms in the render loop.
About how long is the tutorial designed to take?
Great question. It can definitely vary based on your JavaScript proficiency and whether you're trying to speed through it or not. If you take your time and you're fairly proficient we estimate about 45 minutes. 
Nice! Thank you. 
Nice! Thank you for the quick reply. 
It really isn’t bad practice at all if desktop is your intended audience which obviously this is
Thanks for creating this. As somebody who learns by doing, this tutorial is a great way to really understand how a blockchain works.
I'm curious what the down-voters are thinking about. I know the OP said criticism - and I suppose everyone assumed constructive criticism - but in my experience, most JS criticism I've gotten my way has not been constructive at all - either shallow (implicit conversions of operators) or out of date (callback hell) Don't you think that JS deserves to be supported and argued for a little bit? Do you think that all the people who constantly make fun of the language or of JS developers are right? How else are they going to find out if some of their opinions are no longer correct if we don't step up to defend the language and point out new features and developments that they might not know about?
While I actually prefer javascript to Java for many reasons, the one's you listed aren't super valid, in my opinion. 1. This isn't really true. The Java community is absolutely gigantic. Just because one might be slightly _more_ gigantic doesn't mean it's better. StackOverflow will help for both for simple questions, and for more niche questions, you're going to run into difficulty either way. 2. Java also has a huge ecosystem of libraries in Maven, but more than that, many of the commonly used libraries in JS (lodash and other manipulators) are built into the language itself in Java. 3. I agree partially with this one though, verbosity is a very real complaint (saying "it didn't exist until later" isn't, however, because it does exist, and you could say the same about a lot of very basic features of JS that didn't exist until ES6). The `var` keyword in Java10 really helps, but Java does have a huge verbosity problem. 4. True, but this will soon be a moot point once WebAssembly is fully adopted. 
Thanks for the feedback, I changed the variable name :+1
Yeah, I'm trying to expose a lib ready to use without having to add any extra functionality.
&gt;https://github.com/d3fc/d3fc-technical-indicator#moving-average Thanks, I'll take a look!
I agree
A carpet has never killed anyone 
Completely ignoring any performance implications in your code under the notion that you can just "throw more hardware at it" is misguided. It doesn't make the problem go away, it just shifts the responsibility onto the sysadmins and the company pocketbook. Horizontal scaling is an incredibly deep field of study with a whole host of challenges. I'm all about abstracting away logic and keeping things isolated, but as I said before, there is a diminishing return in terms of performance and maintainability. I draw my line in the sand in a different place than you do.
Very nice, we need more tutorials for this great tech! 
We don't see it often, but many Unicode chars are valid js entities. See; [https://mothereff.in/js-variables](https://mothereff.in/js-variables) or this pen I made: [https://codepen.io/Nico\_KraZhtest/pen/mEjBdj](https://codepen.io/Nico_KraZhtest/pen/mEjBdj) 
IE 11 was great when it came out because it supported more standards than previous versions. Great for an IE anyway... Made my life easier at least.
(!!!!true)
Fizzy you linked to yourself...
This was great up until the point where it required watching a video to get the ASCII content for the unit test. Video is about the worst way of disseminating programming information. I can't continue past page one with this information being required and a blocker without it.
Definitely clean, dunno about brutal though haha
Hey there Mr-Yellow! Sorry for the trouble. We recognize that many people dislike videos in general (and sometimes actually can't watch them) so we focus on making sure the challenge can be completed without them first. They're really more for supplemental information and we're still experimenting to see if they enhance the experience for some people. So, as far as the content, it sounds like we may need to update the task/details on that first stage to be a little more clear about what's being expected. Does that sound about right? 
By apostrophe, do you actually mean apostrophe or straight quotes? There's a difference.
Why make this? So blockchain can become even more slow and unusable? 
Oops, thanks for pointing it out! I'll delete this one.
I don't think it really does take two to tango in this case. For years and years, IE was the dominant or at least a massive share, and developers \*had\* to support it if they wanted to keep their job. Should we have said no and been jobless? It's only now after IE is finally a tiny market share we can even \*have\* this conversation about tango or no tango. MS is clearly the party at fault for the shit situation (commonly referred to as "IE hell") that we've faced as webdevs for years, because they had market dominance and simply didn't need to care about us, because we are developers and developers serve business interests and business interests has been to support IE. Only now are considering taking some "big" step to free ourselves, as if it implies some kind of freedom on our parts to control the situation.
Hey there! Totally hear you on the usability/speed issues for most live blockchain implementations. What I wanted to focus on here was the blockchain technology at it's core, which actually has some really interesting characteristics that I believe all developers would benefit from understanding. On a separate note I do believe that blockchain has significant potential beneath all the noise in the space right now, but expanding on that turns into a bit of a political discussion that's probably best saved for another medium :)
Thanks, can't wait to try it out!
 **(**function foo(){ }**)**(); 
Interestingly enough I was playing with Gatsby and Strapi integrations today. Gatsby seems like a really powerful static site generator, if I could get Github Pages hosting with it, I'd probably switch off of Jekyll.
(function foo(){ })(); Paren before f in function and after close curly brace }
Nice work! My suggestions: 1. Keep the design clean (resist urge to monetize) 2. Social - enable users to add new decks/cards, vote them up/down 3. Type code into field as answer to simple syntax questions would be cool 4. Deck on coding best practices might be interesting
You floor a positive float for only 2 characters of code. It’s also the quickest to type since they are the same key
It doesn't read/display the name at all and I am expecting a green overlay [here](https://i.imgur.com/m5ptLBr.png) But when I hover over the region on the GUI, it doesn't show anything. Also no errors in the console. And I am rendering the text like this. function drawRegionsMap() { var data = google.visualization.arrayToDataTable([ ['Region', 'something'], ['some'hing he're', 1534700] var chart = new google.visualization.GeoChart(document.getElementById('geochart-colors')); chart.draw(data, options); }; 
straight quotes I guess, seems apostrophes don't work either though 
`['some'hing he're', 1534700]` \- is this data from google or code that you are hardcoding yourself? If this is something hardcoding yourself is there a reason to use single quotes? Why not use double quotes? `["some'hing he're", 1534700]`
I honestly only have good things to say about Gatsby, it's been a treat to work with and the community is great. As far as GitHub pages hosting goes, you can deploy it in seconds with the gh-pages package. With that said, I've not used it with Strapi so that may complicate things, however basic Gatsby can definitely be deployed to GH pages.
It's data from Google, all the regions seem to automatically apply when you type in their name in this syntax. And yeah, I've tried double quotes and template literals etc Here it is on jsfiddle if you want to have a look, the only one not working is the one in pink 'Hawke's Bay' https://jsfiddle.net/gjvdmL7r/28/
Didn't know about the gh-pages package! I'm a Ruby dev and Node noob. Thanks for the heads up!
Yeah idk I tend to value readability over brevity and clever tricks..
I think the important thing to realize is that a Block chain is a fancy linked list with referencial integrity. It's has become a standard data type, albeit with a little more complexity than a typical linked list. Once you start thinking about it as a basic data type and not some crypto money scheme, you can find things all over the place where it could be useful. In fact, I wouldn't be surprised to see some languages standardize around certain implementations and drop them into their standard libraries before long.
Not a problem! They have some great docs for it [here](https://www.gatsbyjs.org/docs/deploy-gatsby/#github-pages).
You’re close! Your code is ready doing steps in sequence. Just push the same principle to the console command. You could write a function showconsole(variable) that just logs data in the console. Then call that function after the previous one finishes.
Right! So I can get that to work, but then how to I access my weather array outside of the fetch call? Does that make sense?
Nice to see that you're using monaco editor. Its pretty great.
Blockchain is not something that is slow, the consensus algorithm is. An actual blockchain is just a linked list like you're used to, but allows for some clever tricks to decentralize the data itself.
Use [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await). Though if you are not at ease with asynchronous code already it might be a bad idea to sidestep the "problem" by just await-ing all the things and not actually dealing with the asynchronous nature of what you are trying to do.
It depends on what you mean by outside of the fetch call. Let’s say you are doing a sequence of tasks, then you’ve basically understood the logic. However, if you are talking about events requiring the use of weather, you’re looking at this: $(“#buttonid”).on(‘click’, function (e){ Console.log(weather); }); But... you now have a problem with your variable scope. Try switching const to var if you are going to do calls like this. PS. I do more php than javascript, so any javascript “specialist” willing to confirm would be appreciated
Good catch! Yes we're very excited about the editor too. Looking forward to customizing it even further :)
You're not going to like the answer: In the end I think it's a bug with the label. When using `displayOptions: 'text'` the map shows "Hawke's Bay" just as you would expect it. I've escaped the single quote every which way to no avail. (If it's any consolation, I've had my fair share of oddities over the years with Google APIs like this especially with their maps) Compare what you have with Google's Example for Africa: [https://developers.google.com/chart/interactive/docs/gallery/geochart#coloring-your-chart](https://developers.google.com/chart/interactive/docs/gallery/geochart#coloring-your-chart) You actually see `['Cote d\'Ivoire', 6]` And it's working correctly. The only way I can get your version working with with the Region Mode Format. However that doesn't solve your problem because the label is now "NZ-HKB" and not "Hawke's Bay" [https://developers.google.com/chart/interactive/docs/gallery/geochart#regions-mode-format](https://developers.google.com/chart/interactive/docs/gallery/geochart#regions-mode-format) Here's a working version with Region Mode: [https://jsfiddle.net/gjvdmL7r/48/](https://jsfiddle.net/gjvdmL7r/48/)
How about a Map?
Wow, thanks a lot for putting in this effort. I really appreciate it. But yeah, I did end up concluding that is most likely a bug and I reported it to google via their issue tracker. I guess having the label spelt NZ-HKB and showing the data is better than showing nothing at all, that will have to do until they fix it. Thanks again. 
for `has()` couldn't you just do has(email){ if(this.items[email] === undefined) return false; return true; } 
You should make humans wanting to develop or interested in the block chain your intended audience, instead of a desktop. 
People from other languages like to point out the funny inconsistencies in js, but don’t take time to appreciate the good parts. I found this video, hope it helps https://m.youtube.com/watch?v=seX7jYI96GE
Bought likes. Blockchain is useless garbage.
I love javascript, flaws and all
Not familiar with WordPress, but I know that when dynamically adding scripts, one difficult problem to solve is race condition, where one script, like a jquery plugin, needs another script to load before being initialized. That would explain why they suggest enqueing
If you want to do stuff with the weather, you could do it in the ‘then’ function .then( data =&gt; { weather.push(data); /*do stuff with weather here*/})
1. Can your app implement blockchain? Yes! 2. Should your app implement blockchain? Probably not. 
But why though? I already have blockchain canned beans, isn't that enough?
1) watchandcode.com - Practical Javascript Course (Free) - Best course to take as a beginner in Javascript. Hands down 2) The Modern Javascript Bootcamp - Andrew Mead (Udemy Course $10.00-$11.99 ) I really am enjoying his course as he breaks everything down thoroughly and reinforces everything with exercises you have to complete on your own. 3) Javascript: Understanding the Weird Parts - Anthony Alicea (Udemy Course $10.00-$11.99) Hands down the best javascript course that i have ever taken. He literally takes you under the hood of the javascript language and breaks down how it works. Its full of so many eye opening moments.
Thank you! 
I learned from start to finish on [http://freecodecamp.org](http://freecodecamp.org) In my experience, it's the best free platform for learning javascript, and has a nice community!
There’s a lot of good stuff! It really depends on what sort of stuff you want to learn, both in your current position and wherever you find you might want to go, as is often said, JS runs like everywhere these days. It also depends on how you learn the best, there’s that much good stuff out there! I feel like I do well with a text primer and then video to clarify the paradigm, so the w3schools JS text/interactive and then Simon Allardice’s JS Fundamentals got me going pretty well. JS runs everywhere from the browser to apps to servers to VR, and there are various frameworks and major libraries that facilitate this, Let us know as much as you can about where you are and want to go and how, to reiterate I guess, and we’ll do our best! How did you find Python by the way? I took “Python the Hard Way” and that was definitely and enlightening experience, haha! Anyway, resource dump of Wes Bos, Scott Tolinski, React, React Native, Spencer Carli, Nader Dabit, Toolsday, and Reactiflux!
*As a note: I'm generally going to use field and column as synonymous.* What's important is that those values need to be mapped to the corresponding fields in the SharePoint list. For example, assume that the **name** field is called 'Name' in the SharePoint list and the **age** field is called 'Age,' given the global scope of your value1 and value2 variables, your JSON for item would look something like this: var item = { "__metadata": { "type": itemType }, "Title": newItemTitle, "Name": value1, "Age": value2 }; There are some caveats, however. _______________________________________________ CAVEAT 1: Make sure the data type matches The type of the data you pass in has to match the type of the field in SharePoint. If **age** is a number in SharePoint, you need to make sure that **value2** is a number. Also, the type of the column might impact the structure of the data you need to pass in -- this applies mostly to lookup fields and people pickers. _______________________________________________ CAVEAT 2: What you think is the field's name, might not actually be the field's name. Don't assume that the label you assigned to a field when you created it is the name that SharePoint expects through REST. Long field names get truncated and special characters are encoded (ex. "Due Date" becomes "Due_x0020_Date"). To make matters worse, SharePoint doesn't always stop you from adding a custom field that has the same label as a default field. I see this most often with fields called "Name." In this case, SharePoint will add an integer to the end of the field name. So, when you look at your list on the site, the label might say name, but the SharePoint internal name of the field might be "Name0". On top of that, if you change the label on the field, it won't change the internal name of the field. So, if you create with the label "Age" and SharePoint assigns it the internal name of "Age," if you come back tomorrow and re-label the field "User Age," SharePoint's internal name for the field is still "Age".
Thank you for responding. I'll try to give a more detailed reply. Currently here is my code, taking into account the suggestion you gave: var value1 = document.getElementById("recipient_dropdown").value; var value2 = document.getElementById("name_textbox").value; var webUrl = "https://sharepoint.ap.sample.com/phl/SIL-BA/BAC/Lists/Feedback1"; // occurs when a user clicks the create button function CreateNew() { var listName = "Feedback"; var newItemTitle = "New Title Item"; CreateListItemWithDetails(listName, _spPageContextInfo.webAbsoluteUrl, newItemTitle, function () { alert("New Item has been created successfully."); }, function () { alert("Ooops, an error occured. Please try again."); }); } function CreateListItemWithDetails(listName, webUrl, newItemTitle, success, failure) { var itemType = GetItemTypeForListName(listName); var item = { "__metadata": { "type": itemType }, "Title": newItemTitle, "Addressed_x0020_To": value1, "Individual_x0020_Name": value2 }; $.ajax({ url: _spPageContextInfo.siteAbsoluteUrl + "/_api/web/lists/getbytitle('" + listName + "')/items", method: "POST", contentType: "application/json;odata=verbose", data: JSON.stringify(item), headers: { "Accept": "application/json;odata=verbose", "X-RequestDigest": $("#__REQUESTDIGEST").val() }, success: function (data) { alert(data); }, error: function (data) { alert(data); } }); } // Get List Item Type metadata function GetItemTypeForListName(name) { return "SP.Data." + name.charAt(0).toUpperCase() + name.split(" ").join("").slice(1) + "ListItem"; } And i have a survey form like this: https://imgur.com/a/TIGk9GF In my code i am trying to get the values from the first 2 fields (value1= addressed to dropdown and value2 = Enter name textbox. Then i tried to follow your suggestion about the column name, the 2 columns in my list have a name like this in its URL: https://imgur.com/a/xeKiBQb As for the list name, it's name is Feedback but in its URL it looks like this: https://imgur.com/a/UuQyFf0 I tried editing the code and testing it but still no success. I even tried putting the specific URL of the list. 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/abpaW62.png** **https://i.imgur.com/izEx2n5.png** **https://i.imgur.com/3oafpHs.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Depends on what you mean by "no success." If you're getting the error alert, then you need to open the developer console in your browser and see what error SharePoint is returning. If you're not getting the alert, then you just need to do some googling on how to properly retrieve values from the type of field you're using (I'm pretty sure you're not capturing the dropdown box value correctly).
Yes, there was no alert for either (success or failed). Okay, i'll just google it. But how about the overall codes, is it fine?
and think that the code is aysnc : you have to think different, structure your code with this constraint. If you,re not aware with async concept i suggest to learn about it before doing stuff 
Just return the check itself &gt; &gt; has(email){ &gt; return this.items[email] !== undefined: &gt; } &gt; &gt; 
The docs say that Primitive or object references work with a Set in Javascript. The Set object lets you store unique values of any type, whether primitive values or object references. I don't know what your data looks like, but if it is really an email - emailId, then the built in Set should be just fine. 
I cant tell for every framework but I know some that does. I think its because they would parse the body even if you dont need it, that way you can control what is going on. if you need it in every request im sure you can achieve that overriding or extending the class youre using
So javascript is single threaded, it can only do one thing at a time. When we know we have to perform a task that takes time, like a network request, we want to send off that request but continue executing our code. So we use an asynchronous function like fetch. .then will get called after that is done, but until then the browser keeps interpreting the code after that. Your next command is to console log weather, but it hasn't been filled yet. As others have mentioned, you should call the function where you want to play inside the second .then. the eventual goal will surely be to display something on the page, so you will do that at the end of your function, and the page will be updated. Until it runs .then, and your playground function, the page will be blank or show your previous content(loading...).
Security is probably the main reason. The idea being you should only parse the body if you need to. 
I made my JS Shell Automation Tool (basho) more effective, with better stdin handling. https://github.com/jeswin/basho # Count number of typescript (.ts) files in directory: find . | basho -f 'x.endsWith(".ts")' # Who wrote Harry Potter and the Philosopher's stone? basho -i node-fetch fetch 'fetch("https://www.googleapis.com/books/v1/volumes?q=isbn:0747532699")' -j 'x.json()' -j 'x.items[0].volumeInfo.authors'
/r/LearnJavascript is a sub that exists just fir that reason.
I am getting an error at this part: https://imgur.com/a/o6LBTgH
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/7bDHdze.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
An HTTP request can contain any sort of content in the body. It can be a JSON, is than be a URL-encoded Multipart, it can be an Octet Stream, an image, a binary blob representing a gRPC request, you get the idea. Most frameworks choose not to bundle-in support for all those body types, instead providing you with an easy way to integrate the plugins which serve you best by parsing the body. For the example, I might want to handle an upload request by streaming the content directly to another place (say an S3 bucket), whereas you might prefer to have it saved to a temporary file so you can work with it immediately. We would then use two different plugins to get the job done.
Also note that even with `fetch`, you still need to explicitly parse the body as JSON: ``` fetch('/something.json') .then(res =&gt; res.json()); ``` So even if Fetch comes bundled with capabilities to handle a JSON body, you still need to explicitly invoke the parser. The library won't ever make any assumption of what you wish to do with the response body.
Some people are better at learning while watching so as for video course, best two places are [egghead.io](https://egghead.io) and frontendmasters.com
Maybe you can answer a question I have about adding/editting images. I'm not an expert, but I'm pretty good with react. I tried gatsby out a couple weeks ago and just cloned someone's template to play around with it and see how gatsby worked. I tried adding my own images. Doesn't work. Ok, I need to delete the ones in /public/static and delete /.chache. Still doesn't work. Ok, let me clone the project directory to make some changes without worry of fucking anything up. cd gatsby Copy, npm start. Doesn't load. Well, it does load, but only the background color, which I think is weirder than loading nothing. Ok, maybe it has to do with the cache, delete that. Still nothing. The only way I got the images to work was to re-clone the repository and replace the images with my own images, and then npm start so it compiles them. After that I didn't bother reading any more documentation or trying anything else because I had other stuff to do. So after that long thing, what stupid thing was I doing wrong? What's the right way to replace images? And why didn't copy-pasting the directory work?
Start using classes in js and everything will be fine
The example your gave is redundant and no one actually does that. However, I see why you would give such an example. Many times there is a reason someone *similar* might be done. For now, don't worry about the confusing parts of JS. When the time comes, you'll understand why it's done that way.
[removed]
If you don't want to change your way of thinking, you are going to be in trouble for the rest of your life. Every programming language requires you to change your way of thinking. Allowing yourself to change and really learning that other way of thinking enriches what you can do in the languages you thought you knew already.
I've switched platforms a few times in my career - started on c#, transitioned to ruby and now I'm a js developer. I wasted quite a lot of time during transitions by ignoring the idioms of what I was transitioning to. I tried to code c# in ruby, or ruby in js. So, page 1, disregard any advice about using es6 classes because that'll keep you from progressing. In answer to your specific question, people use functions in js because it's a way of utilising the event loop for async operations. Js has a non-blocking paradigm meaning that whilst you only have one js thread running at once, it doesn't get blocked by long running operations. practical example: if you send a web request or ask for info from a db, you can continue running code without having to wait for your response to come back. This means you can provide ui feedback or serve other user requests super fast. Other platforms achieve the same thing by spinning up multiple threads, an expensive overhead and one of the reasons js is so much faster when it comes to io.
Thanks a lot!
Aside from a few vendor libraries (requirejs, jquery-pep, a11y.js and, in some pages, underscore), most of it is custom code.
No idea where you got the example from, but maybe it was part of a partial application example? E.g. const greet = (with) =&gt; { function say(name) { console.log(what + " " + name + " how are you?") } return sayHello }; and then you can do const greetWithHello = greet("Hello"); greetWithHello("User"); // "Hello User how are you" const greetWithHi = greet("Hi"); greetWithHi("User"); // "Hi User how are you" 
&gt; Add in provisions that their data cannot be securely stored if they use IE 11, as you cannot ensure that IE 11 meets the current Security Standards. Adding in bullshit provisions based on FUD does not help anyone. How the data is stored on the server is not in any way impacted by what browser was used by the user.
Based on Groovy, right? If I’m not mistaken, that language is quite a bit like JavaScript.
Those things are unfortunately normal part of life and work. I’ve seen a lot people come to the industry feeling entitled and getting super frustrated by the reality of work life. Then they go on a spree of changing jobs, until years later they finally accept that things are the same everywhere and the only thing they can change is their attitude. That said, I’ve changed jobs many times and I’m 100x happier in my current project than some of my past. There are good and there are bad projects, but you are occasionally frustrated in the good ones as well.
...it's a JVM language and as such is (almost) perfectly interoperable with Java. The world isn't exactly divided into "languages like Java" and "languages like JavaScript". And that's beside the fact that you can write Gradle plugins and tasks in Groovy, Java, Kotlin, etc
If you want to dive deep, I'd recommend having a look at JavaScript Allonge. It's a great book that's all about higher order functions and functional patterns in JS. It's available for free.
https://github.com/getify/You-Dont-Know-JS : This is one of the best series on JS according to me. It talks about JS itself and not some library or framework. The book on Asynchronous JS has really helped me write a lot of quality code. After going through this you can easily pick up any library or framework through the docs.
Silly me, of course! Thank you
I rarely write javascript this way. If you're using functional programming, you generally don't need it (personal opinion) - [contrary opinion here](https://softwareengineering.stackexchange.com/questions/285941/why-would-a-program-use-a-closure#answer-286973) If you just need a private variable I would suggest you prefix the variable with a _, this makes it easier for testing. Otherwise for storing private values you can use closures, or you could also look into using [class fields](https://github.com/tc39/proposal-class-fields).
I just noticed that there are multiple tabs for different files (at first I was like "should I overwrite the blockchain o.O??"). Tip: Start from the test and look "what is expected". I hoping my self that this will improve my test driven skills since somehow everyone knows that TDD is the right way, but nearly everyone ignoring it :D
Awesome! :)
There's always a body parser, because something has to interpret this stream of bytes in the request body as some kind of structured data. Without a parser, it's just a stream of bytes. You're asking why doesn't your library parse automatically, well, some do that, some ask you to be more explicit, because having the library guess your intent can backfire at times. Imagine someone is sending you a JSON request, but with the wrong MIME type. You know it's a JSON request, but without the MIME type, the library can only guess by looking at the content, which is a bad idea. But if you can explicitly tell it "parse it as JSON" your intent is now explicit.
This is more than enough to defend any language against Java :-P
thanks! very cool!
&gt;Lets say some one comes and critisizes JS like its confusing coercion double equals the this variable problem callback hell but still you absolutely love js How will you defend it against a language like java Java is dead, more more time ago.
The A* algorithm isn't particularly complex - wikipedia has a pseudocode version that's only 58 lines, that you should easily be able to adapt yourself: https://en.wikipedia.org/wiki/A*_search_algorithm
So what are all the use cases where this would be useful?
We are looking for beta testers. Beta users will be provided with the service for free, and we will appreciate any kind of feedback.
1) It's absolutely better to learn vanilla.js before React and you should expect it to take longer than 2 months, there's A LOT to learn. I'd recommend a learning resource that starts you out with ES6, but if you ever work on a preexisting code base, it's likely that it was written in ES5 or jQuery, so it's important to understand the differences. 2) If you learn better from books, use books, if you learn better from videos, then use videos. If you are a video learner it's tremendously helpful to have a second monitor. 3) The most jobs are for React right now, but React will likely eventually be replaced by something, that's why it's important to have a good understanding of vanilla.js. One difference though is that vanilla.js tends to follow the object orientated paradigm while React follows the functional paradigm, understanding the difference would help you a lot when it does become time to learn React. VSC is the best text editor. It would take months to learn Node, but only about an hour to learn NPM and that includes installation. 4) Javascript is as fast as it needs to be, it has several tricks to deal with being single threaded and outside of web assembly it's the only language that can be run in the browser. You would need very specific use cases for the speed difference to matter, in most cases the speed difference could be compared to Kid Flash vs the Flash, Kid Flash is a little faster, but they're both really darn fast. 
Yes, because React is more of a pure javascript pattern anyway, and that makes it adapt well to the transformations the language goes through every year. People will use es-current but also es-next in their React apps, because they can. If you're new to language React can look downright cryptic, and we've seen people confuse React with es-next before, Brad Frost recently for instance. To use React to its fullest and to be able to understand examples in the wild, it would be beneficial to understand es6 and up ([Babels overview could be a good start for instance](https://babeljs.io/docs/en/learn/)).
This is great! I think I have an error: &gt;What type of scope does Javascript have? &gt; &gt;JavaScript has a function scope where each function has its own local scope and variables declared outside of a function belongs to the global scope. \&gt;&gt; What about block scope added in es6?
ES6+ \_is\_ vanilla JavaScript :) Really it's a 3-years old update to JavaScript. Now we have ES7, ES8 and ES9 on the way. Why would you learn callbacks and promises when async/await is a much better paradigm? Why learning the weirdness of \`var\` instead of using \`const\` and \`let\`? Why using regular functions when arrow functions are better in most cases? You'll need to unlearn lots of stuff, which you don't need to if you start with modern JS in the first place. Don't worry about scale or speed, it's fast enough for almost everyone. Personal opinion here, everyone will tell you different things: go with React or Vue, use VSCode.
React is Javascript with a little syntactic sugar on top. Unless you're planning some time travel, ES6+ is what javascript will be from now on. Just start with ES6/React.
Sorry to bother, but what is considered "to know javascript"? Is it when you hit wall trying to do something in vannila JS, or after you have worked with core libraries or at what point you can move on?
ES6 is just a version of JavaScript, so it is vanilla JS. Don’t make a distinction between learning ES5 and ES6, just learn the latest version of JavaScript. For libraries like React, definitely don’t start learning them until you’re comfortable with the language itself.
I think that's bad advice. Sure, we learned all those things in that order, but just because they can be confused is not a good reason to avoid just learning the current state of things. Beginners are confused a lot about all kinds of things.
Why? You are working with javascript when you use React, you might as well learn and understand it, as its your main tool in the belt.
React is not a pattern, it’s a library. Very big difference between the two. https://en.m.wikipedia.org/wiki/Software_design_pattern
Prototypes, Classes, functions, composition, references, the updates that came in 2015, etc. etc. etc. React isn't a framework, it's a small view layer that revolves around basic functionalities like classes and functional composition. A good grasp of the host language is recommended plain and simple.
The pattern you posted is called a factory function. It’s also used in Java and C++, as well as early every language. The example you posted is pointless in the real world, but the principle still applies.
React is Javascript, so just learn it while you do it.
**res.body** does not exist if you don't actually parse it. That's basically what a parser do. If you only need a server with GET request, a parser is not needed, as a GET request doesn't have a body.
Wow, thanks. Yes, I can't read that yet :D
Well, that's fine, though i don't get you at all since you just said: &gt; but just because they can be confused is not a good reason to avoid just learning the current state of things It's not dogmatic advice i gave, simply a recommendation to get to know more deeply because it definitively helps getting into React. "Learning javascript" can mean looking over a small overview of all the new features you maybe haven't used yet or whatever. 
Two cents: * the regex in lintcss example is wrong, it seems to be targeting js files instead of css files * please add support for "dynamic" configs (.js, not .json) To me, the article doesn't explain why should I choose Zerber and not Travis or any other competitor for my CI needs. Running build steps in parallel is hardly a popular need, and inability to run shell scripts is a disadvantage for a CI server, in my opinion.
Oh, one more thing. Objects in JS do not have a guaranteed key order, so using an object to describe a sequence of steps sounds to me like a potential source of problems. Why not arrays?
@n1313 thank you for pointing out. Fixed code snippet. Could you please describe a use case for dynamic configs? As for parallel builds — you will definitely need them as soon as developers team grows up and you are start to have significant queue of builds which blocks changes to be merged into main branch.
Take a look at [You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS), it's very well written and explains every detail of JavaScript. I used it to learn i, 'cause I don't really like Udemy courses. Knowledge should be free, not commercial. 
The article you linked talks about running *build steps* in parallel. This is not the same as running *builds* in parallel.
Yeah, you are right, I used wrong phrase :) Steps in the build must run in parallel. Our builds already run in parallel. Each one by single worker process.
The option to use a more flexible format than JSON is always useful. Maybe someone will need to run something that needs a current timestamp or current package version as an argument. 
Fka is a great dude btw, I recommend following his articles
So we define a constant A and assign a [fat arrow](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) function. cons A = ( ... ) =&gt; ... The first parameter of the fat arrow is using a [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) ({ color, children, rest} =&gt; ... Since this is a [stateless function react component](https://reactjs.org/docs/components-and-props.html), let's call the argument `props`, so above is equivalent to props =&gt; { let color = props.color, children = props.children, rest = ... `rest` is using a [special spread rest syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) which in the end makes it receive all properties of our `props` object that have not are not `color` or `children`. The fat arrow then returns a react element that outputs the color variable as style (boo!, bad naming), the rest object as individual props of the &lt;div/&gt; and the children as child elements of the div. 
Could you please give me an example of a build process, where it would be beneficial to run some steps in parallel? I am used to very linear builds, like checkout -&gt; install -&gt; lint -&gt; tests -&gt; build -&gt; publish -&gt; notify, and obviously this wouldn't work if these steps were not run in sequence. 
You can always have kind of a wrapper script which does exactly what you have described. I don't think it is a good idea to overload config file with such things. It is also convenient to store some sort of build specific data in env vars.
For me it's all about finding a set of features that is a good balance between being conservative and not introducing too many new features into your code base and maximizing the expressivity or avoiding bad code patterns. So in the end, that's ES6+ react components (with additional class properties, because fuck react constructors).
You should run linter and and tests in parallel. They must be fully independent. You can also add type checker (flow or typescript) for example, which also must be independent from linter and tests.
Of course, there is always a way around an inflexible system. The point I'm trying to make is that usually inflexibility is not a selling point. 
No need to install a mobile or desktop app. Just visit the web app on a smartphone (your controller) and a laptop/desktop (your main display). Works best on Chrome! Here's a YouTube video showing it in action: https://www.youtube.com/watch?v=O2r1-lR6Xq8 Built with Vue.js and Node.js
Linters are usually orders of magnitude faster than tests, and there is no reason to run tests if your linting phase failed, despite them being independent from each other.
There is a scope difference between var and let. Also, arrow fuctions don't bind 'this'. There is lot to it and it's really important that one understands that before moving on to ES6 /ES7
It is always good to know the full picture of what is wrong with the build. Linters are fast until your codebase grows up more than 100k loc and your linter rules list includes dozens of definitions :)
Tests are still going to be *slower*, no?
Yes, of course.
As someone who teaches ecma, I don't know why so many other teachers and tutorial writers insist on teaching es5 or older syntax first, then introducing es6+ as a "new" thing. So much of it only exists because it's significantly less complicated and easier to learn, and just because we had to suffer through var and all its hoisting doesn't mean that's a good way to learn the language. Understanding `function ()` requires learning so much about `this`, which is probably the hardest thing for a new dev, while `() =&gt;` is straightforward. Async is definitely the worst offender though - the whole point is making it easier to reason about concurrency, so why force someone to experience callback hell first before learning promises, then learning async/await? They'll want to learn about those eventually (as they're all applicable concepts), but why start with things that are both harder to understand and less useful, purely because they're older? The problem is, that OP can be completely forgiven for their view on this, because it's 100% the fault of the people teaching this stuff. 
The body in the back-end is a string, as that is how the data is transmitted from the front-end to the back-end server.
We expect that in most cases the order will not be important. So, objects are just more conscise. Git checkout and npm install are performed automatically behind the scene.
&gt; what are ***all*** the use cases I'm not going to be able to give you ***all***. That's a bit unrealistic. Like data structures in general there will never be a one size fits all and two different data structures may be used for the same use case. That being said I think many of the crypto currencies have shown blockchain is great for public ledger data. Now there are drawbacks when attempting to use *a single* blockchain as a global ledger for every transaction for a currency but there are a lot of possibilities in this type of area for smaller, more specific ledgers. It might be able to simplify auditing for small businesses as well. Outside of crypto / finance blockchain may be handy for scarce items such as event tickets to ensure only X amount are ever sold, tracked, etc. Database transaction logs are another interesting idea I think and I'm trying to play with this in a side project though you can't use a single blockchain for the whole DB as it would be too slow for a busy application. I don't want to come up with a contrived list though and any of the items above could be represented in different ways as well. But like any data structure in computer science, you pick the best one for the job. Blockchain isn't going to be the best one in the majority of cases but I would expect it to fit here and there, just like any other data structure.
The goal of Zerber is not a flexibility. It works only with javascript and it's goal is to be ready in a minute for typical javascript project. If you need flexibility then use CircleCI and Travis. They have tons of interesting and useful docs ;)
The first example you give is not a globally scoped variable. Nothing that uses const, let, var to create a variable would be considered a property of any object including the global window object. A global variable as defined by the blog post would be something like: `alex = "Alexander Luthor";` When a variable is created like this, it becomes a part of the global scope / window object and thus can be deleted.
Are you trying to reference the images in the markdown to be built statically or are you trying to reference them in regular React component code? If you have a link to the repo I don't mind taking a look.
so why am I getting output "Alexander Luthor" when running window.alex ?
&gt; That being said I think many of the crypto currencies have shown blockchain is great for public ledger data. Not really, we are almost a decade in and struggling to find use cases. Crypto Currencies are just public databases so when you remove the need for them to be public a database becomes better. &gt; ...blockchain may be handy for scarce items such as event tickets to ensure only X amount are ever sold, tracked, etc. This is a problem that we have already solved in many ways, why is a blockchain better than the existing solutions? it's not exactly hard to control the ceiling on items sold or track things. &gt; Database transaction logs are another interesting idea I think and I'm trying to play with this in a side project though you can't use a single blockchain for the whole DB as it would be too slow for a busy application. Why not just a linked list? why do you need to create a blockchain? &gt; I don't want to come up with a contrived list though and any of the items above could be represented in different ways as well. And that was really my point, there's not actually all that many use cases where a blockchain is better than existing solutions.
The biggest mistake of people who come from Java is thinking that every other language is/should be OOP just like Java. JavaScript is NOT Java. Java style is very "**class**-oriented" programming, while JavaScript is "**object**-oriented" programming AND **functional**. The two examples you gave are not the same - they don't do the same thing. The first example is a function that returns a function that logs "hello", the second example is a function that logs "hello". The first example you'd have to use like this: const sayHello = () =&gt; { function sayHello() { console.log("hello") } return sayHello } sayHello()(); While the second one you'd use like this: const sayHello = () =&gt; { console.log("hello") } sayHello(); It's a stupid example, yes, but it shows you something you'd rarely (or never) see in Java: **factory functions** and functions treated as "first-class citizens". How about this? Does it look more familiar? class Greeter { sayHello: () =&gt; { console.log("hello"); } } Greeter().sayHello(); The idea is the same: you instantiate a container which gives you a function that logs "hello". The only difference is that instead of getting back an object with the method "sayHello", you get the function directly. Now you may think "why not just do like Java and use a class intead?". Well, why doesn't Java just do like JavaScript and use a function instead? The fist thing Java programmers do when they start writing JavaScript is to create a class for every single thing they need - this is NOT a pattern in JavaScript. I work in a codebase with over 500,000 lines and we have exactly 0 classes. Three things you NEED to learn when writing JavaScript: 1- Learn how to pass functions around. It is done all the time, and it is a cornerstone of *functional programming*: function sayHello { console.log("Hello!"); } function runAnything(func) { console.log("Running a function!"); func(); } runAnything(sayHello); // Prints: // Running a function! // Hello! 2- Learn about *factory functions*. Many people (myself included) and projects use this pattern instead of creating classes: function makePerson(name, age) { return { name, age, sayHello: () =&gt; console.log(`Hi! My name is ${name} and I am ${age} years old!`), }; } const person = makePerson('Bob', 30); person.sayHello(); // Hi! My name is Bob and I am 30 years old 3- Closures make functions that return functions (that return functions...) extremely powerful and flexible, for example: function makeLogger(area) { return function (message) { console.log(`${area} | ${message}`); } } const log = makeLogger('Api'); // Now you can pass "logger" (a function that logs a message) anywhere you want, for example: a factory/constructor // of an Api object. If an error happens there, we can call it like this: log('An error happened here!'); // Api | An error happened here!
This shows how long it's been since I've done something like this :) In your first example you are trying to delete the variable itself. Try: `var alex = "Alexander Luthor"; delete window.alex; //Outputs: "Alexander Luthor" console.log(alex);`
When a variable is created using a variable declaration (i.e. using var) then it is created with its deleteable flag set to false. When a variable is created implicitly by assignment without being declared, its deleteable flag is set to true. It is a peculiarity of the global execution context that variables are also made properties of the global object (this doesn't happen in function or eval code). So when you do: var a; Then a is a variable and also a property of the global (window in a browser) object and has its deleteable flag set to false. But: a = 'foo'; creates a as a global variable without a declaration, so its deleteable flag is set to true. The result is that you can delete global variables created implicitly, but not those created by declarations (including function declarations).
&gt; "The delete operator will not delete ordinary variables. However, it will delete 'global variables,' since they are actually properties of the global object". What on Earth does this even mean? It means whoever wrote that didn't know how `delete` works. Not everything you read on a blog is correct, I'm afraid. If you declare it with `var`, `let` or `const` you can't use `delete` on it, period. [Source](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete): &gt; Any property declared with var cannot be deleted from the global scope or from a function's scope.
hmmmm that doesn't work either. I'm going to stop commenting now as I am also stumped... I know it's because it's being declared with var... This may help [https://stackoverflow.com/questions/16652589/why-is-delete-not-allowed-in-javascript5-strict-mode](https://stackoverflow.com/questions/16652589/why-is-delete-not-allowed-in-javascript5-strict-mode)
It's a property on window, but if you declare it (var/let/const) you can't delete it. If you just start using it without declaring it, like people did in the 90s, then you can delete it.
You've found a quirk (or bug?) with the special `window` object. [I'm observing the same behaviour on Chrome.](https://i.imgur.com/9oxfgtU.jpg) Creating a "local" variable in the global scope using `var`, seems to create an undeletable property of `window`: var aaa = 1; window.aaa; // 1 delete aaa; // returns false; fails to delete delete window.aaa; // returns false; fails to delete window.aaa; // 1 - hasn't been deleted Apparently, variables set in this way have their "deletable" flag set to `false` - https://stackoverflow.com/a/22317789 ----- But to answer your question, using `var alex = "Alexander Luthor";` and `alex = "Alexander Luthor";` are indeed different. The first (`var alex =`) declares a variable local only to the current scope (so, if done in the global scope, it becomes an *undeleteable* property of `window`). The second (`alex =`) is a shortcut (or "syntactic sugar") for doing `window.alex =`, in which it creates a *deleteable* property of `window`. Hope this clears it up. That quirk with `window` is what is making this rather confusing.
Thanks man. I know little bit of C and it was easy for me to understand. I thought JavaScript would be easier. I was wrong.
Javascript has its quirks. But once you pass the initial resistance phase and start getting a hang of it.. You'll fall in love with this..
While ES6 should be learned, in no way can you safely claim "don't make a distinction, just learn the latest" when talking about ES5 and ES6, just like many people didn't years ago when going ES3 to ES5. There are a lot of shims, shams, polyfills, and more to convert ES6 to ES5, and make browsers compatible with more ES5 features. While ES6 may be new, there is no reference implementation of the engine (ex, like Python's is CPython), which leads to every browser / server engine being different in what features they do and do not support, and like I said, this unfortunately goes for ES5 as well. You need to have a good grasp of ES5 when your bundler concerts ES6 to ES5 and something you expect to work doesn't because you are assuming the bundler is always correct. Hell, sometimes it's not even the bundler that's wrong but the minifier you use with it, which is even worse.
The question is, did you open your blockchain canned beans with a blockchain can opener? 
Because there is [no proper reference implementation and this causes friction on engine vendors](https://www.reddit.com/r/javascript/comments/8x7d39/_/e220d4g)
lol shams, I got a sensible chuckle out of that 
Or use a while loop so that your code makes sense, rather than 'abusing' the language 
good format (quick to read) and some not-so-well-known useful info on what could easily just become "just-another-basic-js-article" well done
Of course there just has to be uncalled Vue propaganda at the end.
HTTP responses have a content type header. Frameworks should parse based on the content type. It isn't rocket science.
The only viable one I've seen is using smart contracts to verify things like goods moving through a supply chain and possibly releasing funds only when the good reaches the next point in the chain. I'm sure there are other uses but I think on the whole thinking about it as a distributed database is a non starter. We already have those and they work pretty well. What we didn't have before is a "trustless" system. Depending on the smart contracts used it's also completely verifiable. That being said it'll take a while for laws and the tech to catch up so for the time being current contracts work just fine. 
Interesting, I didn't know that nashorn was being deprecated. What a short shelf life. Taking a look at this I have no idea why I'd want to use Graal over [j2v8](https://github.com/eclipsesource/J2V8), which is free and available on all platforms. Are there any benefits to graal over j2v8?
Using exec leaves a lot more space for making a developer-mistake, though, e.g. forgetting to reset RegExp object.
Absolutely, I agree completely. Unfortunately, due to the hype, people add a blockchain layer for the wrong reasons. As with any technology there needs to be serious consideration to the tradeoffs. We should be aware that it is more costly, slow and complex to run calculations that are finalized on the blockchain. For the majority of web applications that are focused on becoming faster, cheaper and simpler, adding a blockchain layer is going in the wrong direction completely. The goal for a blockchain application is decentralization. If the application benefits strongly from having no middleman on the financial/governance layer and it outweighs the costs then blockchain is an interesting thing to look into. 
&gt; The only viable one I've seen is using smart contracts to verify things like goods moving through a supply chain and possibly releasing funds only when the good reaches the next point in the chain. We already have systems for this though, and since in both cases you still need external trust block chains and smart contracts don't do this better. The only use cases where this works is where everything is within the trustless system which excludes anything where we need to interop with physical goods(ie a supply chain). 
Wow, this is really awesome. Is this the first time something like this has been done? I could imagine this being used with web sockets to make a pretty sweet multi-player game that lets anyone with a phone join in
Thanks for sharing your thoughts! Definitely can see how the multiple tabs can be confusing. I'm glad you figured it out and happy you enjoyed working from the tests backwards! I think this is a powerful way to be looking at validating these challenges and sharing how that validation is occurring. :)
&gt; Is this the first time something like this has been done? Yes, it's the first time it's been done with just a web app! (at least to my knowledge) The most similar project I could find was the [2016 Android Experiments Winner](https://experiments.withgoogle.com/3d-controller). The winner turned your smartphone into a 3D controller using Chromecast and an Android app. But `web-riimote` demonstrates it's possible to do the same with only a web app. &gt; I could imagine this being used with web sockets to make a pretty sweet multi-player game that lets anyone with a phone join in Absolutely! 
It seems like you are just getting started and need some good direction. --- Definitely get comfortable with ES6 first. React is just one of many JS frameworks you can learn (there is no best). There are a lot of job postings for it today, but things change, and React will be replaced by something else. Build some things like pop-up menus and wire up buttons to do stuff using vanilla JS (no framework). Make a personal website for yourself and try doing some fun stuff with JS on it. That's the best way to start learning JS. It will be easier to appreciate all the rthings a framework handles once you've done it yourself. --- On the topic of job postings: If you want to learn React for job prospects, no one is going to hire a React developer who isn't comfortable with vanilla JS, as well. Learn vanilla JS, know some main differences between ES5 and ES6, but focus on the newer stuff. Some of the newer syntax won't work in older browsers, but you'll figure that out as you go. Don't pressure yourself to learn too much too fast. On the topic of frameworks: Once you are comfortable with JS, check out the [VueJS](https://vuejs.org/) framework. I think it is a great place to start learning from. React is very popular right now, but it has a very complex ecosystem. VueJS has a little more structure than React does, which will help you learn how to organize your code. p.s. We don't really use the term "CSS3" anymore. Here's a bit of history: https://rachelandrew.co.uk/archives/2016/09/13/why-there-is-no-css4-explaining-css-levels/
Generally I’ve seen delete used to remove attributes from objects, like: delete character.name I think this is just a quirk of global variables technically being part of the global object so it works like that coincidentally.
Trends? Don’t you mean Ponzi scheme since node and React developers have equal or greater salary than you?
Yeah, many of the weird behaviors of JavaScript that people get hung up on are things we try to avoid. They are good things to be aware of so you don't accidentally get yourself into trouble, but they are often not practical features that we use day-to-day. Even the weird parts that are considered useful are not things a beginner **must** know, and in many cases there are better alternative approaches (ie. prototypal inheritance).
The date constructor in JS has screwed with me more times than I care to admit
Of course, but it's also a lot more clear as to what's going on
Curious user, that /u/clipclop21. Account created 2 days ago. Made their first ever comment (the one you replied to here) very shorty after you posted the parent comment. Deleted account sometime after.
Something definitely feels off, I count 5 different accounts who've never posted in /r/javascript before, suddenly chiming in with their praises for OP on this post.
I'm not sure I follow the bit about vanilla JS following OOP, are you saying that large applications written in plain JS tend to follow that paradigm? The language itself does't make that decision for you, but if you mean to say that many projects have historically taken that route, I could see that.
\&gt; do ppl really write javascript like this I do every day! My favorites/most used ones are: const prop = key =&gt; { function getKeyFromObject(obj) { return obj\[key\] } return getKeyFromObject } or how I actually write it: \`const prop = key =&gt; obj =&gt; obj\[key\]\` which can be used as: const getName = prop('name') /\* some time later \*/ getName({ name: 'cirsca' }) // 'cirsca' \&gt; const sayHello = () =&gt; { console.log("hello") } Because that does not do the same thing as the first example. The first example \_returns some function\_ that has some \_closure\_ attached to it.
I think it depends on learning style. Some people are quite happy jumping into the deep end and learning as they encounter unfamiliar things, without getting hung up on knowing every detail. Others need to understand every part of the problem before tackling it. Ask yourself "am I comfortable with being uncomfortable". If you answer yes, you might be fine to just start trying to build something and learn as you go. If not, you may need to spend more time learning all of these concepts first. At the end of the day, none of it is going to stick until you start using it. Like learning a second language, it's much easier if you go to a country that speaks that language so you can apply what you've learned, otherwise you will forget it.
Yes I hear what you're saying. Hopefully clipclop's still out there somewhere. Let's organize a search party for clipclop! Seriously though, I was surprised a new user signed up just to comment on this as well. Kind of dismayed because I enjoyed the comment and deleting the account afterwards kinda takes away from that =/
You are drastically overestimating a beginner's capacity to absorb a plethora of concepts. A person who starts their JavaScript journey by learning ES6 and React in tandem will end up confusing the two, I guarantee it. \&gt; React is a javascript pattern What does this *even mean*? That it uses functions rather than a DSL? Does that make Backbone a 'JavaScript pattern' too? Angular doesn't use eval any more so I guess that's a pattern now? This is just the typical Reactist propaganda playbook: lay a stake to being a standard, appeal to 'naturalness', and disseminate FUD about every other option. Just stop it. Your library is useful but your cultist devotion to it is getting creepy.
`global variable` in JavaScript means a variable stored on the global object. For browsers the global object is `window`. All global variables are properties of `window` in a browser.
I don't really like the authors suggestion to use momentjs. I prefer https://date-fns.org/ but I've also heard good things from moment's Luxon https://moment.github.io/luxon/
Ain't nothing simple about Javascript dates. // let's make a date for Jan 31 var date = new Date("Jan 31 2018"); // cool, now let's change it to the next day, Feb 1 date.setMonth(1); // months are 0-indexed, so Feb = 1 date.setDate(1); // but days are 1-indexed, b/c js Dates date.toString(); "Thu Mar 01 2018 00:00:00 GMT-0500 (Eastern Standard Time)" // March 1? WTF? 
Oh yeah, and this: &gt; new Date("01-01-2018") &lt;- Mon Jan 01 2018 00:00:00 GMT-0500 (Eastern Standard Time) &gt; new Date("2018-01-01") &lt;- Sun Dec 31 2017 19:00:00 GMT-0500 (Eastern Standard Time)
The husky repo is more informative and has the correct syntax: https://github.com/typicode/husky The article doesn't really serve any purpose 
Click on the triangle next to that to see what the actual error is. Though it's truncated in the image, it looks like a bad request which I can almost guarantee is an incorrect datatype.
*Beep boop* I am a bot that sniffs out spammers, and this smells like spam. At least 95.24% out of the 21 submissions from /u/UnitedHeron1 appear to be for Udemy affiliate links. Don't let spam take over Reddit! Throw it out! *Bee bop*
Why don’t you like the suggestion? I’ve found moment to be a wonderful replacement for js dates. 
To paraphrase Crockford: strongly prefer code clarity over cleverness.
It's considered too large of library when all you usually only need access to a couple functions. date-fns allows you to import individual functions to keep things light.
Like the other poster said, it's quite large and you'll need to configure your setup to remove unneeded languages. https://github.com/jmblog/how-to-optimize-momentjs-with-webpack I also prefer libs that don't mutate data.
You can certainly use functional programming with vanilla Javascript, but I'd bet that most large applications are using the OOP approach, at least I'm lead to believe that based on viewing a lot of Javascript learning resources. The real kick in the knickers is that most of the good learning resources for functional programming with vanilla Javascript predate ES6, though I'd imagine that if you were to the point of even knowing there was difference or caring about it, you've probably learned enough about JS already for it to not really be a big deal and already understand how ES6 affects scope.
Amen to this. If I could upvote you a thousand times, I would.
Yeah, I don't know how JS screwed the pooch so hard with dates.
Interesting. I'll have to take a look at it, I've been a moment.js evangelist since I discovered it. Prior to that, I was always writing tons of boilerplate code to deal with dates, and moment saved me from that.
I would also like to know this. I've never even heard of j2v8 before, so I'll have to take a look at it. My company will be needing a Nashorn replacement for some features in our Java app.
only works if you are adding the same object reference, and not creating a new one const s = new Set(); const o = {email:'b',id:2}; s.add({email:'a',id:1}) s.add({email:'a',id:1}) console.log(s) //Set(2) {{…}, {…}} // [[Entries]]:Array(2) // 0:value:{email: "a", id: 1} // 1:value:{email: "a", id: 1} // length:2 console.log(s.has({email:'a',id:1})) // false s.add(o); console.log(s.length); // 3 s.add(o); console.log(s.length); // 3 console.log(s.has(o)); // true;
Wtf... So, what i understand Set a new date in 31/01/2018 Add a month so 31/02/2018 (since feb don't have 31 days the exceding go to March ) = 03/03/2018 And you set the day to 01 = 01/03/2018 Fack this. 
The var keyword doesn't have anything to do with this and is confusing to bring up. It has everything to do with scope which you can't access at the function/block level, but can access at the global level. So if you define a global variable with 'var', you can still delete it just fine.
Probably because you expected a logical approach to something as elemental as time and dates. Something prone to annoyances on its own with no needed assistance, such as dealing with timezones. But Javascript thought you needed an extra challenge, maybe have some indices that start with 1 here, and some that start with 0 there, sprinkled with obtuse methods to do basic manipulation. I'm usually a defender of a lot of language choices, it's subjective. But, floating point complications and that god forsaken Date object are the devil's playground. It's almost objectively bad.
Ah thanks for the feedback. I'll work on improving the quality and try to think of a solution to best include additional resources/references.
`Object.setPrototypeOf` sets fakeDate's "prototype" to the Date prototype. This causes things like method calls and property accesses to "fall through" to the prototype when fakeDate doesn't have them defined. This is kind of like setting fakeDate's "parent class" to Date, but if you don't know anything about JavaScript prototypes you should read https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain As a side note, it's considered bad practice to use Object.setPrototypeOf, as remarked upon here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf
Ah good catch. Should be fixed now! Thanks for letting me know :)
Ah thanks for the suggestions. I think they are quite helpful. I've got some decks on coding practices in the works :)
Thanks for the suggestion. Any specific topics I should focus on for entry-level developers?
Thanks! Great catch. I'll fix that quickly.
So that example you gave, maybe it's a factory function but yeah, no one writes code like that. Ever. JavaScript is different. So is python, bash, SQL, etc. The key is to start small and learn how the language behaves. Basic things, like iteration, conditions, etc, that'll almost always be the same across all languages, but the core features will vary significantly. That being said, JavaScript is hardly unintuitive. I'm a professional Java developer first and foremost and I had no problems learning JavaScript. Just accept that things are different, because they always will be. PS. A function is just a piece of code that executes behavior. Think of it like a method in Java, except it doesn't have to be attached to an object. PPS. A closure is how a function retains references to variables that are declared outside of the function body but used inside the function body.
I would love that. I'm thinking about how to best incorporate more advanced features like that. Stay tuned :)
Thanks /r/julien_dev! I appreciate those comments. I'll keep adding frontend topics. Are there any topics around backend development that would be good for me to add?
Link to [race](http://horse-racing-originals.com)
Respectfully disagree. I’ve been using Babel for 3 years and not had a single issue with a bad or non-spec compliant transform that was actually in the standard, can even say the only one that springs to mind which I once avoided was class decorators and that was a stage 2 feature, so hadn’t even made it into ES yet. If you can’t assume bundlers are correct, then you cannot include them in production. My company, the largest media publisher in the UK, uses bundlers, so does every other company I’ve worked at. A poorly-configured bundle is not the problem of the bundler - it’s the problem of the developer. Build tools like Webpack and Babel are thoroughly tested and it’s safe to assume they’re doing the job properly, just pay attention to which plugins you use. As for learning ES5 before ES6, all that’s going to do is engrain bad habits. I would never tell one of my juniors or graduates to learn ES5 before ES6 for that reason, plus it’s completely redundant. Why make them use a more painful version of the language when every modern browser has 99.9% of ES6+ features implemented already AND when you’re using a bundlers that transpiles the code down to some compatible with your oldest-supported browser.
Ah good point! This question was based on text from Javascript the Good Parts. I did include a question about `let` and `const` and block scope in ES6 but this question is still confusing so I'll clear it up. Thanks!
To add to this, its generally not a good idea to extend builtin objects (like Date) this way because they'll often not work as you expect. ES6 has improved support for this in some cases when using the `class` syntax. I know you can extend `Array` now, which you really couldn't do very well before. I'm not sure about `Date`, but I know `Date` is sketchy in its own right. 
Moment was absolutely the way to go but date-fns does things in far more elegant manner, it's stable and definitely should be used today. 
Nice tutorial! Are there examples of the proper implementation? I just hacked my way through it getting the tests to pass, but I'd like to see other / better solutions.
Parent is correct. It has to do with the var keyword. Try it yourself. var a = 1 b = 2 console.log(Object.getOwnPropertyDescriptor(window, 'a')) // {value: 1, writable: true, enumerable: true, configurable: false} console.log(Object.getOwnPropertyDescriptor(window, 'b')) // {value: 2, writable: true, enumerable: true, configurable: true} console.log(delete a) // false console.log(delete b) // true console.log(window.a) // 1 console.log(window.b) // undefined
Use of `var` in the global scope will still create a global property (as do function declarations). `const` and `let` do not; those variables are scoped to the script scope.
Your response makes me think that maybe it could be just this person's project in particular, and it's not how gatsby behaves normally. I just checked out other similar projects and the dir structure isn't similar. I'll try some other gatsby projects out before wasting your time :) Thanks for the offer. 
That's really cool! Funnily enough I'm doing something similar but more like a quiz: [https://www.valentinog.com/quiz/](https://www.valentinog.com/quiz/) Hope you don't mind if I borrow something :-) Nice project!
Your original post seems to have only been posted so you could nit pick any possible ideas I listed even though you requested them. But like I explicitly point out, it's just a data structure and you might or might not find uses for it. You *don't have to* find uses for it like any other data structure. I was sure to include plenty of "may", "might" and "am currently playing with" in my post. You're approaching blockchain from the wrong direction. Treat it as any other data type. It's just a little more complex so the use case are going to be far more sparse.
Oh you're coming from C! Don't even think about the delete keyword, its almost not used at all in JS production code and not at all related to C++'s delete and not as important :)
What would you expect / want it to do when adding a month to 1/31? What should be the resulting day?
You are 100% right, I intentionally called you out because you claim there are many uses but the truth is you couldn't even come up with examples. It solves a single problem that occurs so infrequently it feels almost contrived
Think we’ll ever get a new way to do dates in JS? The API is terrible and outdated and so obtuse. 
+1 for Date Fns. It’s like Moment but built in a modular fashion so you can import only what you need. Love it!
2/28 or 2/28, depending on if it's a leak year. I'm not adding 31 days. I'm adding 1 month.
True. But one month is not an absolute amount of time. What if you added two months? 31/3 seems obvious. But if you then started by adding one month, and from that result another month, you would end up with 3/28. And that would be truly absurd, because it implies that `1 + 1 != 2`. There may be more or less intuitive ways to handle it, but there is no strictly correct way.
TL;Dr the date type sucks use a framework
thank you :)
&gt; I intentionally called you out because you claim there are many uses but the truth is you couldn't even come up with examples. At this point you just seem to be trolling. Any developer knows you choose the right data structure for the job and, typically, you'll be able to use *many* different ones for each problem. So trying to find a thing in which *no other data structure can be used* doesn't really make any sense. I came up with examples, you said they can be done otherwise. Welcome to programming 🤷‍♀️ You're approaching this from the wrong end, trying to prove blockchain as useless when that's never the direction development organically takes. Enforcing integrity between the links allows you to store and handle them differently than a classic linked list. You can ensure the integrity of the data you're passing around. Sometimes that's useful. Most of the time probably not. If you were genuinely interested in this topic you could go through the whitepaper or do some google searching for use cases. But you do not seem sincere. &gt; It solves a single problem that occurs so infrequently Welcome to programming with higher level concepts.
Come on, you are assuming that date.setDate(1) is applying to your original value, but you have mutated it already. This is basic. If you want to increment the date by one, increment it by one. date.setDate(date.getDate() + 1) 
Try setting the headers, like this example here https://github.com/typicode/jsonplaceholder#creating-a-resource
&gt; At this point you just seem to be trolling. No, I'm disagreeing with your misleading statement, you claimed blockchains are useful and yet can't even provide examples. &gt; Any developer knows you choose the right data structure for the job and, typically, you'll be able to use many different ones for each problem. So trying to find a thing in which no other data structure can be used doesn't really make any sense. I came up with examples, you said they can be done otherwise. Welcome to programming 🤷‍♀️ No I said they can be done better, not all data structures are created equally and blockchains are just linked lists with less use cases. &gt; You're approaching this from the wrong end, trying to prove blockchain as useless when that's never the direction development organically takes. It's the opposite, I'm asking you to prove they are useful, you haven't done so. You claimed that you had 'many' use cases yet you really have one. &gt; Enforcing integrity between the links allows you to store and handle them differently than a classic linked list. You can ensure the integrity of the data you're passing around. Sometimes that's useful. Most of the time probably not. So let's hear some real world uses that make this better than current solutions? &gt; If you were genuinely interested in this topic you could go through the whitepaper or do some google searching for use cases. But you do not seem sincere. Here's the thing, I've mined Bitcoin since 2012. I actually do understand. Once you understand that crypto has a single use that doesn't really come up or matter in the real world you will understand. But of course you have so many examples of utility right? &gt; Welcome to programming with higher level concepts. I think you mean programming with contrived examples since you can't even show how this is useful in the real world. Don't confuse unnecessary complexity with usefulness 
Not a problem! Usually adding images with Gatsby is straightforward, you either pull it in via React if it's in a component or reference it in the markdown with the regular syntax "![alt for image](link for image)". If that's not as straightforward as it is currently, than you're probably right in that the current project is making it unnecessarily complicated.
The example code does 100% the opposite of what is intended.
I like React. Fairly straightforward to start. Biggest drawback is probably navigating the ecosystem, but more people tend to overthink that too, eg "should I use redux, mobx or new-thing-x" without considering the tools the library provides (setState and Context) 
To be honest your first pattern is more widely seen in Java aka factory language.
I think you've misunderstood. The problem isn't to do with mutating an original value and assuming it applies to the unmutated value? I think the assumption is that setDate should simply set the month to whatever you give it and essentially ignore if the number of days is too large. Or to put you at the end of the provided month. Your method actually creates a different problem, you now end up at March 4th. Which is also somewhat unintuitive. `var date = new Date('Jan 31 2018')` `date.setMonth(date.getMonth() + 1)` `date.setDate(date.getDate() + 1)` `console.log(date)` `"Sun Mar 04 2018 00:00:00 GMT+0000 (Greenwich Mean Time)"` 
Well, mostly agreed but in my experience, FP is popular across the board right now, not just with teams using React. Obviously JS is not a purely functional language like Haskell or Lisp but it's easy enough to implement and maintain those patterns. I just went through a pretty intense job hunt interviewing with large tech companies and every last one of them wanted FP experience, or at least an understanding of why it's valuable. It's much harder to write tests for an impure function, and if it has side effects that's even harder. So I'd agree that historically, a lot of JavaScript projects have been OOP-based. However there is a huge push towards FP principles now, because it's so much easier to reason about what is happening, debug, test, and maintain. Also, pretty much no project in production is ever going to be only one of the two. As soon as you touch the DOM, that's a side effect.
Ok, yeah that makes way more sense. I'm looking at other projects now. I really loved the idea of Gatsby but that road block really weirded me out. Now I see that it is just that project. Needing to clear the cache and delete and move shit around just to add some photos definitely seemed wrong to me haha. Thanks for your help! Also, the stuff on your github is awesome by the way. I just read through some of your stuff and looking through those projects have been really helpful and getting a better idea of gatsby.
in the line `console.log(determineWinner(getUserChoice, getComputerChoice));`, you're not *calling* the functions, `getUserChoice`, `getComputerChoice`; you're only passing in references to the functions. The values therefore never equal 'paper', etc., and yes fall out of your if statements at the bottom as `undefined`. Change that line to something like `console.log(determineWinner(getUserChoice('paper') /* call the function and pass the user choice in */, getComputerChoice() /* get the random computer choice */)` 
Java did it with Java 8. One can hope JS would follow path, but it's a bit harder in JS land. It would have to be a new type, not changing implementation of the current Date type.
Okay that makes sense, and I’ll try it tomorrow. Appreciate the help. 
I've heard a lot about redux. Is it good?
I think that makes sense than the current behavior of it ending up at 4/03.
The code is: // let's make a date for Jan 31 var date = new Date("Jan 31 2018"); // cool, now let's change it to the next day, Feb 1 date.setDate(date.getDate() + 1); date.toString(); 
While a good answer. I think it's somewhat tangential to the point that 'setMonth' doesn't quite do what it says on the tin. Or at least, it's not particularly intuitive.
It's fine, but adopted too often. Sometimes it's unnecessary. I'd try to get as far as you can with `setState` and `Context` before reaching for redux. You'll know when you need help managing state. 
There's nothing available for that. You'll have to use something like [pdf.js](https://mozilla.github.io/pdf.js/) to parse the PDF and extract the CAD model, then write code to convert that model into a format a JS 3D library can use (like Three.js), then render it in a canvas.
yep, exactly.
Ok. I'll complete React first. Thanks 😀
Very true. Not only that but I guess all the browsers and Node would need to adopt it too. Could take years. Sad times!
There's a few things weird with that example that make it make no sense. The first is mixing function and lambda syntax, if I were to write that fiction I'd write it as this: const sayHello = () =&gt; () =&gt; console.log("Hello") But that's still weird. The extra lambda gives nothing. The only reason for something like this would be to delay execution of the inner lambda. A more realistic example would probably be: const say = word =&gt; () =&gt; console.log(word) const sayHello = say("hello") Here we're creating a sudo curried function that can be used to create new "say" functions. Still a contrived example but at least it sort of makes sense now. The classic basic example of currying / partial application is probably: const add = a =&gt; b =&gt; a + b const numbers = [1,2,3,4,5] const biggerNumbers = numbers.map(add(2)) console.log(biggerNumbers) // [3,4,5,6,7] Again, slightly contrived but hopefully you can start to see the power of these techniques. 
Unlikely, I think the language authors expect things like this, at this point, to just be offloaded to community libraries like `date-fns` and `Moment`. There is a degree of good reason to that.
Vue is okay but TypeScript isn't used much in its community (class based Vue components). I only found like 4 maybe 5 good examples so that is a no no for me. I love my strong typed JS. Vue is also fairly opinionated because of it's HTML directives. I picked this framework up in 1 week, it's really easy to use but I ended up dropping it because it reminded me a little of why I dropped Angular; it's more of the same. I have worked with Angular (v4 and v5) for half a year and it was fun. It's extremely opinionated and hard to learn if you don't bother checking the docs, but after the initial pain it is really easy to write PWAs that utilize server side rendering and lazy loading. I ended up dropping it because it got boring, I didn't feel like I was learning new things anymore. React I can't tell you much about. I haven't touched it yet (but I will soon!). It has a healthy TypeScript community if that's your thing and it's also the fastest of the 3. As I said; I have no experience with React but: Easiest to pick up: Vue Most performant: React Easiest to set up: Angular (use the Angular CLI) Biggest community: React Also, forget about jQuery. You don't mix jQuery with one of these frameworks because things will get messy.
Nice overview and examples, but it has nothing to do with the master branch?
MomentJS is quite big and date fns is functional and provides great ability to tree shake when combined with something like webpack
&gt; There are a lot of shims, shams, polyfills, and more to convert ES6 to ES5, and make browsers compatible with more ES5 features. Learning doesn't need to be done in a production environment. Just use a modern browser. Problem solved. 
Thank you! 
Wow, so what I was thinking is that \`delete window.a\` and then \`console.log(window.a)\` would be \`undefined\`. Which in turn would make \`a\` undefined. Pretty mind blowing that by using the keyword you make it effectively immutable in the global scope. I never remember reading this in any best-practice guides back in the day for libraries. I wonder if it's a relatively new adjustment or if it's been that way since ES3?
You are not adding one month. You are setting the month to an arbitrary value. It gives you 31 days after start of February which in this case is March 3. You would need an "add" method that handles edge cases if you wanted to actually perform an addition without flipping to the next month.
Thanks! I’ve saved this comment. Going to follow this. I’ve already completed watch and code. It’s really good. Everything is sticking really well. I’ll follow up on 2 and 3 and then do JavaScript 30. I think that should keep me preoccupied then I’ll crack onto framework in Q4. 
No. I do not.
FWIW, I tried this in IE 8 and the \`var\` keyword had no impact and I could delete the global fine with \`delete a\`. When I tried this in Chrome 15, it had the error, which leads me to believe this has always been the behavior in modern browsers and I've just held on to legacy understandings!
Glad to help and thank you! I honestly can't recommend the Gatsby docs enough as a way to learn it, they have tons of examples and it seems improve daily. 
There is a proposal aimed at adding proper date/time handling to JavaScript: https://github.com/tc39/proposal-temporal Unfortunately it's lost some traction lately, but it looks promising.
Thanks for the reply, I have already tried that but it gives the same error message. 
And then when you're out in the field and the scientist from antartica using their nintendo 3ds as a last means of completing their research gets fucked because you didn't take precautions.
Start from React, and from here: [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html#prerequisites). Unlike other libraries, when you learn React you'll learn a lot of "vanilla" Javascript as well. This will be more fun because you'll be able to build real things while you are learning. As the tutorial says in the "Prerequisites" section, you may want to read [https://developer.mozilla.org/en-US/docs/Web/JavaScript/A\_re-introduction\_to\_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) first. 
For clarity, I would personally prefer something like this: const input = ` foo (12): bar, bar (13): baz, qux (14): quux `; const tasks = []; input.split(/\n/).forEach( line =&gt; { if (line.match(/(\w+)\s+\((\d+)\)\:\s+(\w+)/)) tasks.push({ name: RegExp.$1, id: RegExp.$2, task: RegExp.$3 }); } ); console.log(tasks); 
Totally. Maybe it was a mistake to learn `javascript` *and* `es6` with a production build of "research 3ds", but I'll be dammed if I was going to make an exploratory project. Run a script in node? no way! A simple site opened with chrome? Laughable idea. 
&gt;good format (quick to read) and some not-so-well-known useful info on what could easily become "just-another-basic-js-article"well done thank you! 
Thanks for the suggestion, I didn't know about that! Also looked in to Luxon but I found Moment more popular, so more worth covering - will check out those other 2 as well
I think if you have something to "addMonth" its right, but in case you try "set" a invalid date, it should return "invalid date".
\`MM-DD-YYYY\` is almost exclusively a format used in the United States, so it's assumed to be the local timezone and is set to local midnight. \`YYYY-MM-DD\` is the ISO-8601 standard for dates, so it's more natural to use UTC (and hence midnight UTC). Yes it is a common local format as well, but programmers are going to want the technical standard \_somewhere\_. I think allowing the string constructor is the real problem here, because it makes the parsing process seem more absolute than it is.
Why would we need articles about such a simple thing?
Nice will try this out tonight. 
Something not exactly the same but similar concept was done here in a web app: https://experiments.withgoogle.com/super-sync-sports 
That's a nice looking game but it doesn't use the device's orientation or motion. `web-riimote` shows that a user can control objects on a display by shaking, tilting, or pointing around with their smartphone.
What backend technologies do you like working with? I came from C# and found that angular 2+ felt very familiar. It probably helps that they chose typescript as their prefered “language” as it was created by the guy behind C# :) I think all I viable options. React seems like an obvious choice if you also want to work with app’s. 
I'm pretty sure this behavior has always been spec'd, but when I guess it comes to IE I guess that doesn't really matter ;)
FWIW, this technique isn't really obscure. It was popularized by John Resig (jQuery author) nearly 10 years ago: https://johnresig.com/blog/search-and-dont-replace/
That logic would make sense, except, again, we're talking about javascript Dates, where nothing makes sense. Try `new Date("2018-01-01T00:00")`. It's back to local time. ES5.1 spec said that `YYYY-MM-DD` was UTC. Then ES6 said it was local. Then that broke lots of apps, so post-ES6 the spec changed back to UTC. Spec discussion is here: https://github.com/tc39/ecma262/issues/87 . Chrome bug is here: https://bugs.chromium.org/p/chromium/issues/detail?id=543320 .
There is this stage 1 [Temporal proposal](https://github.com/tc39/proposal-temporal)
Try [Mithril](https://mithril.js.org/). Probably the easiest of all to get started with. I use it for just about everything I build these days.
React is only the "view" part of MVC which makes it super simple to learn. I was up and coding within a few hours. The [official React tutorial](https://reactjs.org/tutorial/tutorial.html) is excellent. This [React developer roadmap](https://github.com/adam-golab/react-developer-roadmap) is also fun, but don't let it overwhelm you. You don't need to learn anything on that list except React, HTML, CSS, and JS. For quickly creating your own apps and experiments, take a look at [create-react-app](https://github.com/facebook/create-react-app). It does much of the stuff in that roadmap for you so you can just focus on learning React.
Haha, that's totally fair -- I wasn't aware of those changes/historical info! Don't take my examples as a defense of the Date built-in -- I totally despise it! -- I just want to point out when some complexity seems reasonable, since these threads often get full of folks who haven't considered how hard the underlying problem can be. I guess I'll have to take that example off the list though...
I'll make note that strict mode (put `'use strict' at the top of your file before any other code) prevents the use of global variables without explicitly declaring them with `var someVaraibleName =` or adding them to window directly with `window.someVariable =`. The reason for strict mode is to remove a bunch of confusing/error prone and impossible to optimize features. In this case it disallows `classicFlash = "Jay Garrick"` (unless it was already declared with `var classicFlash`/`window.classicFlash = `). Additionally strict mode also just flat out prevents `delete globalProperty` and instead forces you to use `delete window.globalProperty` which I think makes it a lot clearer as to what's happening. So actually both of those examples would be `SyntaxError`s in strict mode.
During NPM's earlier iterations in v5, it was unstable enough to cause me to switch to Yarn. I'd get mismatched hashes when installing. It was also late to the game when it came to lockfiles, a needed feature when developing reliable software. In general I don't see a lot of hate directed towards NPM, the CLI application. If anything, the distaste is towards NPM, the company/central repository. It can be understood that people get concerned when a singular, private company effectively owns as many packages as NPM does. The ecosystem is inherently centralized and even the creator of NodeJS laments on the fact that he went with NPM.
To play devil's advocate, this effectively allows individual functions to be version controlled. One issue with some of the more monolithic libraries is updating to get a new feature could potentially break things, especially if it crosses a major version. With individually versioned functions, you only need to update that specific function. Individually versioned functions/classes isn't new, in fact, many monolithic libraries version their sub-modules/functions too.
I think, after looking at your code again, we may have been getting "sending data via a post body" and "sending get parameters vi the URL string" mixed up. https://stackoverflow.com/questions/5876809/do-http-post-methods-send-data-as-a-querystring If your backend end point requires that you pass the data in the URL, then you don't need to pass anything to the fetchs `body` argument. Tho this does make this a very odd and unique endpoint. In other words and more to the point, its a mistake to think that the Fetch API takes your `JSON.stringify(data)` and turns it into a URL parameter string. That's why the 2nd example works, and the 1st does not.
That's interesting. Can this be used with the Dolphin emulator?
The NPM registry has a really low barrier to entry, which makes it hit-or-miss when it comes to code quality. The big popular packages are usually fine, but there are a lot of buggy and unmaintained packages on there too. I'm sure this problem affects other language ecosystems as well, but it's especially noticeable for NPM. Maybe having a higher barrier to entry means only motivated people end up publishing packages. NPM also contains a lot of really small packages that only provide a single function. This is nice in an interpreted language where even unused code has a cost. I have published a few libraries like this myself. On the other hand, it looks silly when a one-line library like [left-pad](https://www.npmjs.com/package/left-pad) has a million weekly downloads. It looks even more silly when that library has a problem, and that problem shuts down half the ecosystem.
No, this doesn't work with anything Wii related. This project shows that we can build interactive experiences where users can wave/tilt/rotate/shake their smartphone to control objects on a second display *without* having to install or purchase anything.
Netlify*
Hey, I just tried it, and it seems like it's not working at all. Maybe my phone doesn't have the necessary features? It has Android 6.0, and I tried enabling location too, but it still does nothing. I opened the site on chrome on both my computer, and the smartphone, pointed it at the screen, and entered the room number, and nothing happens.
Yeah I have used this myself in the past, I just think that it shouldn't necessarily be advertised as a fix for match not being global. 
Unfortunately a few users haven't gotten it to work either. Here's a few reasons why that could be: * The device doesn't support it * The device's sensors are backwards or broken * My code is bad * Too many people using the app right now * A combination of the above It's hard to determine why it doesn't work for a few users because there's multiple variables at play and too few known samples which makes it hard to find a correlation. I can only suggest trying on another device.
I have [one contribution](https://i.imgur.com/Bc6YFCj.png) in 2010 that is obliterating my chart.
Shrug. Personally, I avoid while + exec because it relies on regexp mutability, whereas the search-and-don't-replace pattern doesn't. A long long time ago, I got stumped by an issue where a seemingly minor refactor in some code I hadn't written was causing the browser to lock up. "Surprise, you can't inline regexps in this one weird case!" Ugh. :( Also, as it turns out, a pretty big chunk of the regexp mutability API is, historically, a ghetto. Only now there's an effort to actually spec it properly: https://github.com/tc39/proposal-regexp-legacy-features
Another way to think about it is that delete is usually used to delete properties off of objects. ie let obj = {foo:"one", bar:"two", baz:"three"} delete obj.foo // obj == {bar:"two", baz:"three"} Window is your global scope, so any unscoped variables that are defined are automatically added as properties of window. so in your second example classicFlash ="Jay Garrick" is the same thing as saying window.classicFlash = "Jay Garrick" and since window is an object you can delete it's properties with the delete function
You will need some backend components such as login and user roles, as well as some backend apis to do the administration. Then you can create a page that is protected by the authentication system. I can't give you much more than that without specific details of what platform you're running on.
You can't even map them cleanly to a `datetime-local` input field without some dumb hackery.
Open source software is also copyright protected, unless it is made public domain. Also, copyright is transferred, not waived.
i'm a javascript dev and tried to find something in my Java backend today, everything is a class extending another class or an interface of an implementation i could not figure out where the work was actually being done. we need to learn the new paradigm to understand it. 
😀
You risk starting a flame war. :) In all seriousness, I prefer Vue and I think it's pretty easy to pick up. You can't go wrong with React either! Personally, I haven't had much success with Angular, but I haven't used it a few years.
theres nothing bound to the resize event, so its using the same old values from before the resize.
Sure, I'll also try some of those things and let you know. Let me know if you think of anything else that could be the problem.
It's not a video but I found that LambdaCast is a good intro for people https://soundcloud.com/lambda-cast 
&gt; I think you've misunderstood. You're the one who has misunderstood.
Maybe you're right, I was looking in the chrome inspector and was seeing the values updating but it was like it was using the old one.
`InvalidDateError`
Pretty cool, the rotate and shake is dead on but the pointer is pretty buggy for me.
For 1, could you do something like this? store = { users: { 1: { id: 1, type: 'remote', name: 'remoteUser', }, 2: { id: 2, type: 'local', name: 'localUser', } } } Without knowing anything else about your app, that's the basic state shape I would go with. 
For all the hate it gets (and yes it does have some problems), npm is an incredible tool that opens people up to a whole host of free software. I'm willing to bet the majority of your favourite web apps wouldn't exist if it wasn't for npm.
Matthias Petter Johansson's youtube channel [Fun Fun Function](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q) is an awesome resource for learning FP. 
Why do you still have `requestType` in the URL for your POST example?
1) You can re-normalize your redux state, however it is, with selectors. See [reselect](https://github.com/reduxjs/reselect) 2) It's entirely possible you're over-engineering your stateful components. If there already exists a way to get your WebSocket state outside of redux, you should write a component that exposes that state and delivers it to child components. You can consume parent component props in redux by using the `ownprops` argument in your `mapToState` function. See: https://redux.js.org/advanced/usage-with-react-router#reading-from-the-url. 
You might try Typescript to get static type checking. It is quite unlike Java's type checking - but in some respects it is more flexible and more thorough. For example if you run Typescript in strict mode it can catch cases where you need to add a `null` check. It is typical for JS projects to include a transpilation step via Babel, or Typescript, or both; and I have been seeing a lot of projects publishing Typescript type definitions lately. As for npm I think that criticism is more about perception than actual problems. Npm changed its package retention policy after the leftpad incident, which has prevented similar incidents. There are some high quality packages, and a lot of unmaintained packages. You can look at signals like the date of the latest release, and number of downloads per week to help select good packages. And you can use [npm audit](https://docs.npmjs.com/cli/audit) to keep an eye out for security problems. Like others I use yarn instead of the npm client. But you can use yarn to install, and npm to audit.
&gt; Also, I heard that when coding you just need a lot of coffee and only have to shower twice a week. You need some pizza too.
Stack overflow. Seriously there are a ton of online resources. Coursera, code academy, YouTube, Stack overflow. You want to learn the fundamentals of CS first. Basic logic, conditional statements, loops, arrays, data structures, algorithms, methods, classes, etc. Then keep building. You will soon figure out JavaScript is a little different than traditional programming languages. (Loosely typed) Just do your research and start coding! [node.js](https://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js) this is a good place to start in JavaScript. Also drank two cups of coffee today, can confirm does help. Not sure about the shower part. ಠ_ಠ
I'll vouch for Javascript: Understanding the Weird Parts, if you're planning on spending money on any resources, try this. 
You need a roles engine and library of some kind.
Start a github account now and familiarize yourself with git and what version control is. As young as you are, you'll have so much time to build a dope github profile with lots of projects to show future employers. It'll also make you feel like you're progressing a ton when you look back at code you wrote years ago.
Not a book but if you're willing to go over the Mozilla documentation, that should help give you a good place to start. https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics As for a book, here is a great one that was recommended to me https://github.com/getify/You-Dont-Know-JS
Gotcha. That makes sense. 
This has definitely been done a few times over the years (I've made one myself for quiz style games even). But they mostly aren't usable for that much since the latency is a real problem with it going up over the net.
Agreed. Few are more entertaining for this topic than this guy. Link for convenience: [https://www.youtube.com/watch?v=BMUiFMZr7vk](https://www.youtube.com/watch?v=BMUiFMZr7vk)
It's possible that this is the correct answer, yet: I'm trying to learn whats the optimized approach for organizing such data - is it normal to organize the data in the store in a similar way to how I will use a DB (where users is my 'users' table) or in the way that my DOM is represented? For example, I have 2 components - one &lt;LocalUser&gt; and one for &lt;RemoteUsers&gt;, where/how should I query my users store to fetch this information? and if a user was removed from the array, should I re-draw the whole application? Just to expend on my application, imagine a webinar where it's possible that 50 people will be present in the same conference call. Some stream, some dont, some join/leave the room. If I bind the &lt;LocalUser&gt; and &lt;RemoteUsers&gt; components to the same source, every time a user joins I will have to re-draw the view (think removing/adding &lt;Video&gt; elements) - which is very pricey.
Thanks, appreciate the response! 1. I never used Redux Selectors, will try to read more about it. If you have a recommendation for a blog post or guide, that will be wonderful. 2. I'm totally over engineering this - because I'm not use to the frontend mindset. It's ok, I'm trying to learn. Lets start with something easy: The state in the WebSocket represent how the app look and behave - for example: "Connected" or "Disconnected". I can fetch that from the socket, but shouldn't this be copied to the Store as well? The issue is not that there is a way to read it, the issue is it's a stateful connection and its data may change at any time - therefor I'm forced to copy it to the store, so my child component will be notify of the change, which creates this duplication of data - which I wonder if there is a better way to handle... ?
Access VBA. Didn't stop my previous company from trying, though.
More like React weekly digest. Am disappoint. 
&gt; I'm trying to learn whats the optimized approach for organizing such data - is it normal to organize the data in the store in a similar way to how I will use a DB (where users is my 'users' table) or in the way that my DOM is represented? I've seen it done both ways. I prefer to normalize my data as I would in the DB, and then pull out what I need using selectors. I find that this approach is the most robust to changes to requirements that happen over time. If adding/removing video elements is a performance bottleneck, you should optimize your architecture to avoid rerendering those components when possible. How you do this will depend on the specifics of your application. You could structure your components/props so video elements are only fed the props they absolutely require and are pure components that only rerender when those props change. You could also memoize your selectors in your redux connected components to minimize rerenders. 
Just to clarify because I'm sure there will be some confusion: npm incorporated (the company) joined ECMA International and TC39. This has nothing to do with npm itself. npm incorporated still retains complete control over npm (ECMA International and TC39 will have no control over npm). npm incorporated joined ECMA International and TC39 so that they can have a greater influence on the future of the JS language. 
&gt; The state in the WebSocket represent how the app look and behave - for example: "Connected" or "Disconnected". My approach here would be to set up listeners on my web sockets that dispatch redux actions based on the data coming in. So on connection, fire dispatch({type: 'APP::CONNECTED'}) and on disconnection fire dispatch({type: 'APP::DISCONNECTED'}). The action would then be handled in your reducers as normal. As long as you're not doing anything else with the data in the listeners I wouldn't really consider this a duplication of data. 
This is pretty much how I handle web sockets. Since a socket is just an event emitter, it maps to actions pretty easily. I'm not sure how OP is caching socket messages outside of redux, but the technique I linked works for querystrings, cookies, localStorage, etc... because ultimately, if the state exists _somewhere_, you can expose it via a component then mix it into your connected components via `ownprops`.
I've mostly worked on PHP and Go.
There’s a great old nodeschool workshopper on the topic: https://github.com/timoxley/functional-javascript-workshop Aside from the basics, which it sounds like you’ve already got a grasp of, you might want to skip ahead to a framework that enforces FP to a certain degree. This will help you translate concepts like composition and statelessness to a higher-level application design. On the front end, I’m talking about React/Redux. Backend, maybe something like Serverless or another FaaS framework.
Before npm, it was more of a library approach. You liked something you checked out the source code and the license, and you downloaded it and added it to your project. There it stayed. If there were any dependencies, you had to know about them and grab them, but people didn't throw around dependencies like crazy back then, because it was considered bad practice. And if you were going to add 400K of code to your project, you had to know why you were doing it. Now, with npm, you add something to your project, you are probably adding a shit ton of dependencies with it. It is an open secret / joke in the javascript world that most people do not actually track down the dependencies and dependencies of dependencies that get installed when they add various npm libraries. Most people do not actually read the source code of these dependencies. That's how you can get to a place where you can have a node_modules dir that is hundreds of MB, even for a relatively uncomplicated project that could have been done in POJS. npm, imo, is more comparable to the ruby gems ecosystem. A lot of bloat and dependencies issues that everyone just kind of ignores b/c it's convenient. 
Maybe we’ll get the JavaScript standard library?
Useful resources: [http://javascript.info/](http://javascript.info/) [https://watchandcode.com/p/practical-javascript](https://watchandcode.com/p/practical-javascript)
I was referring to using a web app so users can shake/tilt/wave/rotate their smartphone as a controller
They only recently fixed lock files so you can have repeatable builds. That was my main gripe. Security isn't good. See leftpad issue, malicious transitive dependancies could be and probably are in peoples projects without them knowing. If they would add package signing I'd feel better, because right now someone just has to guess your NPM credentials to publish a new version of your packages.
Keep on dreaming. [It won't happen any time soon](https://www.infoworld.com/article/3048833/open-source-tools/brendan-eich-javascript-standard-library-will-stay-small.html).
Nice write-up. Not really applicable to anything I'm working on, but a good walk through the concepts.
[https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript](https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript) If the voice doesn't drive you insane here is a video series produced by the author of the mostly adequate guide. 
So: npm will be a part of governing JS. ECMA will not be doing anything to npm. Yes?
Yes
I like it i like it
That sounds great, is it free?
Hahah thanks man i will check these out.
When you assign a "global" without a var const or let declaration, it is treated as if you added it as a property to window. Object properties can be deleted, variables can not. 
It’s hard to normalize your data when it gets significantly more complex than the provided examples. At some point we plan to open source our react/redux app so that may shed some light on how we have handled the balance of redux data. In short we key data with unique ids and separate stores by the resource in the api. I’m not sure if that’s helpful in your case but it helped keep our store manageable and independent from our views
Welcome to the club! Podcast listener here, I think CodeNewbie is a good podcast for beginners :) 
Thanks!
Their ubiquity is partly because there isn’t a good standard library. If anything, npm has a vested interest in keeping things out of vanilla JS.
Coming from a Java background myself, I really miss only one thing that maven did: multi-module projects and transitive dependencies. It's also something they just don't seem to get. 
Eich is not a BDFL. If everyone agrees on it but him, and he has no technical objections, it will happen.
In my experience j2v8 is amazing. I use in in a spring stack to SSR react pages. I tried with nashorn at first, but nashorn was way too slow. J2v8, on the other hand, is faster than some of the java view resolvers we use.
It has been done before, many times.. even by Google. They did a Chrome experiment called 'Lightsaber Escape' for Star Wars: The Force Awakens ( It isn't up anymore) where you can use your smart phone as a controller (by navigating to companion web page) for your lightsaber. I also remember there being one for table tennis where you had to do something similar. The only problem with these implementations is the latency issue. [https://www.youtube.com/watch?v=NXg-hyESMWU](https://www.youtube.com/watch?v=NXg-hyESMWU) (gameplay video for Lightsaber Escape)
That's where I started. Am fulltime fullstack dev now. I'd suggest taking everything with a grain of salt, and look upon those videos more as a "history" than a guide/bible. Take note of his passion. You can really respect modern JS after hearing him express his pain with some of its "bad parts" (which are mostly fixed now). Most of all - enjoy them! He's actually quite entertaining, and JS is _supreme_.
I don't think I have. The same problem applies if you want to get from say Jan 31st to Feb 8th. In that, "setMonth" is not quite doing what it says on the tin. I'm open to being wrong tho if you want to explain where I've misunderstood.
Is there anybody that thought otherwise?
What do you miss from JS standard library?
Great article. Thanks. 
The JavaScript community is a weird one sometimes
Are you sure it’s JavaScript? When I was in high school the CS courses were in Java and a lot of people new to programming don’t realize they are not the same thing!
All I want from the Date object is to allow me to disregard system timezone.
&gt;Here's my main assertion: &gt;With shallow rendering, I can refactor my component's implementation and my tests break. With shallow rendering, I can break my application and my tests say everything's still working. And then I stopped reading. You don't start a blog with 2 bad premises and still deserve my attention. &gt;I can refactor my component's implementation and my tests break Well yes, isn't that the purpose of unit tests? Refactor, check if tests break. That's a feature not a bug. &gt;With shallow rendering, I can break my application and my tests say everything's still working. You can achieve this in any test framework with any test methodologie if you're writing bad tests. The trick is to understand what you're doing and it's limitations. If your concenred shallow tests are... shallow. Maybe you should compliment your suite with integration or snapshot tests instead of blaming one tool.
&gt; npm incorporated joined ECMA International and TC39 so that they can have a greater influence on the future of the JS language God help us all...
Looking at this screen, right now, hit F12. Unless you're using some mankey browser outta 1942, you should see the developer tools pop up. From there, the world is your oyster. Or you can make your own oyster. Just don't call it Steve - Steve's my oyster. Go to the `console` tab and you've got a full JS rendering engine at your beck and call. Abuse it. Type random stuff and look at what it tells you. Try typing some things you've seen coders type.. like `var x = 21;`. Then type `x` and see what gets printed back at you. That console can see everything that's on the page too, and it'll give you hints! Try typing `document.getElemen` and, before you stop typing it should pop up with a list of cool things you play with. Have FUN!
For starters, I don't quite see the huge need for embedding your console with funny and beautiful emojis. The purpose of a console is to display *application output*, don't stretch it too much like a rubber band!.
Essentially every function in lodash.
The conflict of opinion between you and OP clearly illustrates why unit testing is not intended for user interface. If you test for details, the tests break on working UI. If you don't test details, the tests work on broken UI. The best approach IMHO is to minimize UI code (by removing any business logic from it away to a separtely testable API), and then use your QA team run it through a test script (script as in: a list of bullet points they read and test manually with their hands and eyes).
Mostly adequate guide to FP (in javascript) is a good e-book https://github.com/MostlyAdequate/mostly-adequate-guide
But map is already in the standard JS library.
I love Vue, but my answer is anything that isn't React with Redux and Typescript. 
I actually completely agree with you. I have advocated actual user testing of UI's on here in the past. If you're working on a product some requirements, i.e. making sure responsive design actually looks good on all devices, are impossible to define and maintain in formal tests. However I do see value in shallow rendering of react components because I don't think you can abstract all logic away from the UI. If I'm building a UI library for example and I want to implement a dropdown module, I consider testing the dropdown logic (testing the state transitions, seeing if all types of children are being rendered, ...) extremely useful.
just use moment.js if you don't have to worry about js size :)
Agree. Videos are informative and entertaining but most of the ones I could find are pre es6 so bear that in mind. The one on functions is good. He is extremely opinionated 
Can i Use it in my YouTube videos?
Yes, if you make a reference to www.ShapesMania.com
If you shallow render and decide to move out some part of your component into a new component, functionally nothing has changed, so everything is working as normal. But your tests will break. Good tests should not be fragile, testing implementation makes for a fragile test suite. If your tests break when you change implementation but not function, then you're testing implementation details. This is just making work for yourself and isn't really giving you the same confidence. If you test the 'public API', which in the case of a UI component is what is rendered to the screen, then that gives you more confidence that the component is actually doing what you want it to. Testing is expensive, getting the greatest value from your tests important. Testing implementation for it to simply fail every time you change something arbitrary is pointless unless that detail is critical to the functionality. I agree with Kent's approach to testing but I don't think they are true unit tests, real unit tests are of questionable value for UI components. 
if u don't get some points don't panic just keep going. i also recommend good parts of js.
Lodash/Fp ❤️
Only for array. You cannot map properties of an object.... 
Maybe you could use `hover`and `pointer` css properties to detect which kind of click has been performed. The support on browsers is not complete yet, though. Check this link for some additional information https://css-tricks.com/touch-devices-not-judged-size/
\`.entries\`, \`.keys\`, and \`.values\`. Take your pick.
1. See my post [Idiomatic Redux: Using Reselect Selectors for Encapsulation and Performance](https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/). 2. Per the Redux FAQ, [the right place for sockets is in a middleware](https://redux.js.org/faq/code-structure#where-should-websockets-and-other-persistent-connections-live). From there, I'd dispatch actions like `"SOCKET_CONNECTED"` and `"SOCKET_DISCONNECTED"` as the state of the socket connection changes, track that value in the store, and read that value in connected components as needed to update the UI. Similarly, other updates received from the socket should also result in actions being dispatched.
Ping me when you do that, please - I'd be interested in seeing it.
Yes, as your client-side cached data gets more complex, we do recommend [normalizing the data in the Redux store](https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape), and then referring to normalized items by their ID. So, you might have 50 user entries in an object serving as a lookup table, then have an array of user IDs to track some subset of those users.
Seems interesting! Count me in.
&gt;If you shallow render and decide to move out some part of your component into a new component, functionally nothing has changed, so everything is working as normal. Let me try to rephrase this to a more classical testing scenario. &gt;if you instantiate a class and decide to move out some method of that class into a new class, functionally nothing has changed, so everything is working as normal. I disagree, functionally that class has changed because it obviously has less responsibilities. It will only work normally because the wiring will also be changed, it will delegate that responsibility to another class and probably get that new class injected. In classical testing you won't notice it because you've usually got a DI solution doing this for you. However, make no mistake, you are now testing 2 classes in integration. In react/js we don't have this DI magic and we have to rely on manually wiring and so we'll have to change the testcase to either test the two components separately or test them in integration, which won't be shallow. I see that this may be unhandy if you're used to testing composite classes and getting all that wiring for free. And if you take issues with it, for all means do deep rendering and testing the composite component. Shallow rendering is just one part of the toolbox and I do find it useful for testing the smallest pieces of code just because it is so easy to setup at the component level. You can create tests in a minute without having to construct the jungle holding the gorilla to test the banana. 
Commercial banana plants are reproduced by using banana pups. The mature banana plant forms rhizomes that grow into little plants known as pups that can be removed and planted elsewhere. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Unsubscribe**](https://np.reddit.com/message/compose?to=BananaFactBot&amp;subject=I%20hate%20potassium&amp;message=If%20you%20would%20like%20to%20unsubscribe%20from%20banana%20facts%2C%20send%20this%20private%20message%20with%20the%20subject%20%27I%20hate%20potassium%27.%20)&amp;#32;|&amp;#32;[🍌](https://np.reddit.com/r/BananaFactBot/comments/8acmq6/banana/?st=jfof9k8d&amp;sh=acd80944)
Excellent speakers and topic! Going to watch
That's cool! 
I'm a little bit uneasy about the power that NPM Incorporated wields in the JavaScript and Node ecosystem. NPM has become something resembling an integral component of the ecosystem. It's the most widely used package manager and repository. It also has a privileged position in Node itself, because from the early days of the runtime the NPM way of doing things was incorporated into the design of the Node module system. However, despite its importance, it's not maintained by a community project, but rather a private for-profit corporation. To be honest, I'm a little bit surprised that the Node Foundation has not attempted to provide its own community-driven and wholly free incarnation of NPM. Or, [perhaps like Deno](https://github.com/ry/deno), attempted to move away from a centralised module system. It seems to me that some move like these would be healthy for the long-term future of the ecosystem.
A Poetry Editor — https://github.com/gdad-s-river/poetry-editor https://poetry-editor.now.sh. A small (and my first) node module to create twitter threads' strings from a long string — http://npm.im/create-twitter-thread
Woah that's pretty cool, thanks for sharing! I've made an edit to my other comment
Not sure what the people at NPM can uniquely contribute to language design, outside of providing stuff like usage stats, but ok. &gt; All kinds of sophisticated things are happening behind the scenes to show you streaming video, give you drag-and-droppable interfaces, and enable you to collaborate with teammates across the office and across the globe. &gt; &gt; These innovations exist because JavaScript has improved significantly and browser implementers have gotten serious about implementing the TC39 standard. But that doesn't have a whole lot to do with TC39 directly right? More to do with the WHATWG (/W3C?).
Awsome! I'm in \\o/
great topic!
It's free as long as you don't want private repositories. A repository is basically your code base for each project, essentially meaning everything you make is open source. This is generally a good thing and even if you want to build private projects, I wouldn't worry about that when you're starting out. 
I dind't know about `Object.entries`. Thanks. But, still, for someone who is used to work with other languages, `Object.entries(things).map((thing) =&gt; \`key: ${thing[0]}, value: ${thing[1]}\`)`
OP (Kent) is saying you generally don't want to unit test react components, instead you want to do integration testing. He also puts forward mocking instead of shallow rendering for the times you actually want to do unit testing. Perhaps I missed it but I didn't any particularly killer reason for this, except that it allows him not provide getters for an element's props/state/instance in order to stop what he sees as a testing anti-pattern (instead he tests what the mocked implementation has been called with). 
OK,THX.
Seems that I find something to do on Thursday! 
Can do this I believe: `Object.entries(things).map(([key, value]) =&gt; `key: ${key}, value: ${value}`)
&gt; that god forsaken Date object ... and the lack of proper support for date/time values in the JSON format.
&gt;Not sure what the people at NPM can uniquely contribute to language design, outside of providing stuff like usage stats, but ok. `Number.prototype.isOdd`
Yes, that's right. Thanks! (BTW, string interpolation is not easy on reddit. :))
Am I missing a reference here? You don't need to be a TC39 member to submit a proposal btw.
Even on NPM 6+ we still had a lot of issues with package-lock constantly changing (even with explicit versions set in package.json) and everyone was on the same version of Node. So we switched to yarn as well just a few weeks ago and the problem sorted itself out.
No such thing as a thread, it still operates within the UI event-loop. From [https://github.com/redux-saga/redux-saga/issues/1373](https://github.com/redux-saga/redux-saga/issues/1373) : "From the library's (redux-saga) point of view async/await is to generators like a younger, dummy brother 😉 You can do much, much more with generators than with async/await."
Web Speech: [https://developer.mozilla.org/en-US/docs/Web/API/Web\_Speech\_API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API) Note that those don't really have much to do with JS other than there are APIs in JS to use them. Websockets, WebRTC etc... are language independent.
Any good articles comparing the two? 
You beat me to it!
NPM does not have a good history of having foresight with their technical decisions. There is no groupId.artifactId. Now some of the big name packages stand out enough on their own. But there are dozens of examples of similarly named packages not tied to a specific vendor. This also leads to naming collisions and corporate fuckery (see leftpad). Lack of a centralized local repo. Unlike `~/.m2` or `~/.gradle`, `node_modules` is often a clusterfuck of repeatedly downloaded dependencies. Say you had 5 projects that all used Guava v23.0. Well, now you have 5 copies of Guava. Now imagine another 7 libraries have a Guava dependency on v23.0. You now have 12 copies of the same damn library. You have two different branches that have differing versions of React or Angular. Well each time you build it's re-downloading whatever version you need instead of just grabbing it locally. It's insane. &gt;I tend to view NPM as an analogue of Java's maven Yes, if take everything that is good about Maven Central and decide to ignore it.
https://derickbailey.com/2017/04/19/with-es7-and-beyond-do-you-need-to-know-es6-generators/ https://medium.com/dailyjs/async-generators-as-an-alternative-to-state-management-f9871390ffca 
I see. I'll check how it would work.
How does it know when the phone is pointing at the screen?
Everyone agreeing on it *is* the biggest hurdle, not Eich.
The irony of a webinar on captchas being promoted by spam bots (every other post in this thread is spam at time of writing)
I don't care much for what kind of test I'm performing, unit or integration. I care about getting value from my tests, having a robust suite I can rely upon, and performance. If full rendering causes performance issues then I'll deal with that then. I don't know of many testing methodologies that prefer testing implementation over function. Unit tests belong to a class of tests called functional tests. The whole point of testing is to test the function of the software, sure sometimes you need to dig into implementation to make a meaningful assertion but you should always prefer to test some kind of public API when possible. If you're just testing implementation all the time then I'm not sure what you're a really testing for. Tests are there for confidence, I want to know the software functions as it should. I don't care about the implementation. Sometimes that means we need a complex solution but often it doesn't. React components are often simple and simple solutions like the above are quick and give the same confidence as shallow unit tests with less fragility. If that means it isn't a unit test but a small integration test (which is probably more accurate) then I don't really care. It works really well with a tdd approach, I'm not constantly refactoring tests when I make a functionally neutral implementation change and I'm not constantly testing stuff that doesn't really do anything. You can still get 100% coverage this way if you want to as well. I just dont see why a more fragile approach would be preferable. 
I agree. To me, ideally, it should allow packages to be published to and installed from any number of registries. Fully decentralised. I'm sure the community would naturally gravitate to one or two primary ones, but if those fell behind or got taken over by a single entity it'd be easy to move away. I wrote a thing about this and a potential future ideal ecosystem and posted it in /r/javascript the other day. And yeah, Deno looks really interesting.
It uses the [DeviceOrientation API](https://developers.google.com/web/fundamentals/native-hardware/device-orientation/) to obtain rotation data in Euler angles and determine where it's pointing [Checkout the README for more on how it works!](https://github.com/konaraddio/web-riimote/blob/master/README.md#how-it-works)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [konaraddio/web-riimote/.../**README.md#how-it-works** (master → a336af3)](https://github.com/konaraddio/web-riimote/blob/a336af377b2b4d7e70c24fe1cecb23ca9259090f/README.md#how-it-works) ---- 
Yes, but it still needs an initial point of reference to the screen or that angle is meaningless. I assume "towards the screen" is defined as the direction the phone is pointing when the page is loaded then?
For a beginner level, I woul definitely recommend watching some tutorials for basic understanding and then learn on [Javascript](https://www.bitdegree.org/course/javascript-course) course on bitdegree
I always wondered how to do this without getting hooked up into a service that costs an arm and a leg. Really nice write-up. I guess the same can be done using Google Analytics. Will be useful in the future. Thanks!
Maybe this would work: sound.play() setTimeout(() =&gt; {sound.stop()}, milliseconds)
Hate it.
Nice game man! 9 balls 82 seconds is my highscore so far :p
if spam bots are promoting this is beyond me, i was just trying to share something that might be of interest to this community
I honestly don't like NPM, they have made of Node a complete mess that is now way out of their control, something like cancer?
Out of curiosity, what are you trying to accomplish? The delete keyword is not always a good idea and rarely encouraged.
The hardest thing is just the whole app structure. You have like an application module that loads up components, you got imports all over the place, exports, all the weird decorators, dependency injection, things that have to be instantiated in the constructor, ngOnInit, frankly, I have been using Angular for a long time, and I feel like I cannot even make fun of its complexity without sounding stupid.
Https://drive.google.com
How would you fight malicious code for been sneaked into node_modules hell? Sometimes the dependencies of the dependencies have dependencies, which ends downloading code from a package I wasn't even aware of, leaving horrible vulnerabilities holes.
Look in to service workers. They let you do exactly that
The overall structure of an application feels kinda complex and abstracted. I figured it out once, but forgot it again, its so hard to remember. Even though I think the trade off for having data-bound HTML templates is worth it, I wish there were a good conceptual diagram or mnemonic so I could remember how it all works. I still get lost and get errors that I cannot simply debug my way out of.
You can add a layer of abstraction to your http requests by wrapping whatever http library you are using in your own function (or better yet, make a class that has methods that wrap the different http request methods). You can also make your custom function can take config options. For example, you could create a class that has a ‘get’ function that accepts a url and an object representing query parameters as arguments (your function would concatenate the parameters onto the end of the given url). Inside that function is where you could modify the response before returning it. Then you could simply use your custom ‘get’ function wherever you wanted the response data to be transformed.
I built a Random Number Generator with logarithmic time state generation. [https://github.com/Aaronong/rng.js](https://github.com/Aaronong/rng.js)
In addition to what was said already, The main difference you need to understand between Maven and NPM is the Java classpath. Because of the classpath you can't have multiple versions of the same package/class coexists in the JVM at the same time. As you may already know, this translates in managing the versions of your dependencies closely when using Maven. And sometimes 2 of your dependencies may rely on different versions of the same dependency, which leads to a build failure, aka Maven Hell. In NPM you don't really care as each dependency will get its own dependencies installed locally in its node_modules. Thus multiple dependencies can have different versions of the same dependency without impacting each others, which comes very handy. HOWEVER, this means the size of your dependency can get incrementally big, as you sometimes end up fetching the same dependency in multiple versions several times.
Thanks a lot, but it didn't. I think my only choice is to use Web Audio api. That will probably make it easier for connecting to other stuff, like visualisers in future too.
Introducing the latest Javascript primitive type: pronouns! 
Most people add node_modules to their .gitignore. That way, everything can be installed correctly when you deploy on your platform. That’s why postinstall scripts exist. In that case, only what is in your package.json will be installed. 
Your project would define the registries it trusts, and nth-order dependencies would have to be on one of those. And each registry would also itself define which, if any, other registries packages published to it can refer to. The [blog post I wrote](http://gelatindesign.co.uk/coding/javascript-ecosystem) also describes how all other dependencies could be listed up front so you wouldn't have any you aren't aware of.
So this is the equivalent of Maven joining the JCP.
So if the dependancy array and the vendor are empty no matter what is in tje node modules it wont be installed.
It's the first question that came to mind when I read the title.
I thought this video gave a good description of how the event loop works. https://youtu.be/8aGhZQkoFbQ
Correct. Check out this page on Heroku: https://devcenter.heroku.com/articles/nodejs-support Specifically, the postinstall steps. Basically, all this does is run “npm install &amp;&amp; npm run build” on the server side. (Note: the heroku docs example uses bower and grunt.)
Rip my day trying to figure out why is lodash installing everywhere and it now i know i dosnt matter.
This is why I love Mobx. It'just s a better fit for the problem. Beware though. Cyclic state gets confusing fast. store.activate(thing) is better than thing.activate(). Also use Provider/inject to provide/inject stores. Redux is to me legacy code unless it's an especially good fit for the problem domain. I found the problem you described to be very true. The way I solved it was to assign a part of the store to a part of the app. It was messy though.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
what went wrong? 
For example: const reducer = combineReducers({ dashboard: combineReducers(...), editor: combineReducers(...), ... }) For multiple equal parts of the state, you'd need multiple reducers.
Hmmm, I'm not so sure I like this news. I think it is Kat who represents npm at TC39. Last time I saw a tweet from Kat about specs, it was not nice nor productive: https://twitter.com/maybekatz/status/1014270528209555456 There is truth in what she said but the words she picks are clearly the wrong ones, hurtful, direspectful, arrogant and impulsive. She was also part of the fork ayo.js a year ago. I hope she adjusts her communication style and tune down her impulsiveness.
It’s not that. It’s the fact that they’ve proven on multiple occasions that running a production system that relies on npm is risky. Yeah if you’re not careful your project can go messy, with all the one liners in the registry and what not, but having a package manager wipe out your system or mess with permissions it’s not supposed to mess with is a big no-no. If they can fuck up this badly being the leading package manager provider for a huge language, I don’t think they’re trustworthy enough to work on the standards.
I only know the wrong way to learn, which is skipping around several different learning resources and coding along with hours and hours of videos and not coding very many of my own projects. Things I've picked up that are probably better ways to learn are making your own projects, and using the [Feynman Technique] (https://collegeinfogeek.com/feynman-technique/).
I watched his series on Frontend Masters where he described the history of Javascript in scope of the history of programming. Very informative and very entertaining
&gt;If you're just testing implementation all the time then I'm not sure what you're a really testing for. [Safety critical testing](https://en.m.wikipedia.org/wiki/DO-178B) attempts to mathematically verify the implementation. That sort of testing is well outside the bounds of standard commercial software. It's ridiculously expensive and slow. For testing your standard JavaScript spa or similar I agree that generally integration tests are plenty. I'd only bother with unit tests if I had a specific case for a specific subsection of the code.
I would recommend pork rinds and Mio orange drink. I suppose popcorn could work too though. har har. ;) 
To be fair, that wasn't a production release IIRC. People installed a non-production version of npm on live servers without any testing and that's why they got screwed. It's not much different to people who used to put "*" in a package.json. Their public presence e.g on Twitter is hit and miss a lot of the time. 
Npm is a hodgepodge of poor decisions and kludges to get around them instead of just fixing them, going back years now. There’s *still* no built-in way to properly do local development of modules and a dependant that behaves the same way as installing from the central repository, nor is there an easy way to just publish to local disc and use that. The CDN is broken and doesn’t consistently check hashes, it just goes on and on. And that’s before you even have to deal with the quality of the average module you’ll find on it. 
So *that's* why job postings started asking for this
Do not re-define `XMLHttpRequest`. Over-writing any native code is a kind of big no-no. If you do want to create your own, just name it something else. That being said, the service worker is the better idea. It's native, and it's becoming more and more prevalent, so it will be good to get experience writing them. 
To be extra fair, it was a [bug in NPM](https://github.com/npm/npm/issues/19888) that installed the non-production version in the first place. 
&gt; import { test } from "https://unpkg.com/deno_testing@0.0.5/testing.ts" O_o So the only way to know what dependencies are in use is to look at source code files? How would you setup a private repository in this way so that your dependencies are cached within the corporate network shielding you from third party servers going down? How would you share a list of common dependencies between different projects? To add dependencies, I would need to know a complete URL to the dependency instead of just typing `yarn add deno_testing@0.0.5` ? I really don't see how this is simpler then having a real dependency manager. If your issue is too many dependencies, well that's partly the fault of JS not having a meaningful standard library, and partly the fault of the community's obsession with making everything into tiny little modules. One of my projects has eight Babel dependencies and thirteen webpack dependencies. I fail to see the benefits of this approach at all. Why can't I just add webpack and babel and be done with it? This issue has nothing to do with a dependency manager though. It's not NPM's fault. &gt; However, despite its importance, it's not maintained by a community project, but rather a private for-profit corporation. I agree this is a problem. I disagree with decentralisation. I can't imagine how hellish it would be to manage dependencies when my 21 babel/webpack dependencies all come from different locations. Instead, we should make it straightforward to add new repositories, just like maven and apt (I don't know how easy that would be with pip/pypi or composer or gems). Both package managers make it easy to add additional repositories. Those repositories are checked first in order of configuration to find a package and eventually falls back to the central repo. This gives the best of both worlds. For 99% of your needs, it's easy. For the 1%, just add a new source of packages and that's that. But since a "repository" as a concept would be well defined, it means you can create a central repository ontop of all this (like Nexus, sinopia, etc) on your private network so that if the central repo or third party repo goes down, your builds don't ever fail. It means your projects have a centralised description of what it needs to run and build. 
*This is my opinion.*There is no perfect way of doing things in JavaScript. JavaScript has many ways of doing the same thing. So I think a better question might be how do I learn the correct way of doing JavaScript. My answer is you don’t at least not right away. Let me explain. My recommendation is that you first learn how JavaScript works. Understand exactly what is going on with JavaScript before you even touch code. Learn why JavaScript does what it does. Go look at an open source project and see if you can identify what is happening. Next thing you do is start coding. The most important thing is that you are typing out every line. Do not copy and paste! If you don’t know where to start and feel more comfortable starting with a tutorial then that’s fine. Code along with the Instructor and take in everything and do your best to understand the code you are typing. Tutorials will give you a false sense of confidence. So after learning a concept in your tutorial try to replicate what the instructor did but on your own. For instance let’s say you just learned how to make an API request to display some data. You followed along in your tutorial and you feel on top of the world because you just learned something new in JavaScript. Well did you actually learn it? Go ahead and test your knowledge. Do it yourself and see how far you get. You will quickly start to differentiate between what you think you know and what you actually know. Right now it’s not worth it to worry too much about the best absolute solution in JavaScript. What is more important is just to start coding break everything and fail till you don’t. Hope this helps! Here are a few resources to help you out more on your JS journey. [JavaScript understanding the weird parts ](https://www.udemy.com/understand-javascript/) [Eloquent JavaScript ](https://eloquentjavascript.net/)
What I really don't like is that npm is really mixed in Node's core, and since early versions they bundled it in the main package, making it impossible for other alternatives to compete with that. If someone comes with a npm-killer that would mean doing a big rewrite to Node or making something similar to npm...
Interesting. It's definitely more forgivable now given that bug. That behavior was pretty broken based on that issue. It's always best to do "npm i -g thing@knownworkingversion" vs trusting "npm update" in a production environment, same goes for any tooling really. Easier said than done under pressure of course. In an ideal world we'd all use containers and be protected from this! 
What sort of problem is *this* the solution for?
So I tried that, and I thought it worked at first, but now the third line of the output just seems completely random. For example, one time the output said: Scissors Scissors Tie Then I tried it again and it read: Scissors Scissors You win! Which is obviously not I what I want it to do. I really can’t figure out where I went wrong. 
If you are doing anything with audio more advanced than playing a single track once you should use the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API). Working with the audio in buffer form is so much easier than trying to sync [`&lt;audio&gt;` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio).
They’re pretty bad at [handling copyright issues](https://www.google.pl/amp/s/qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/amp/), too. There was another ridiculous bug way before the permissions bug as well, but I forgot. Either way, I made the switch to yarn and never looked back.
Javascript Standard Library: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects Python 2 Standard Library: https://docs.python.org/2/library/index.html Java Standard Library: https://docs.oracle.com/javase/8/docs/api/index.html PHP Library: http://php.net/manual/en/funcref.php - though this is a little hazy since a lot of this functionality, while officially part of PHP are exposed through plugins. Maybe not a great example. Ruby Standard Library: https://ruby-doc.org/stdlib-2.5.1/ I will say this, in some cases, the standard libraries of these languages leaves a lot to be desired. Python's urllib is convoluted and PHP's standard library is notoriously inconsistent with itself. So answering this question should be based solely on functionality, as opposed to quality ;) 
Opinion ahead: I think a *good way* of learning is to just pick a small project and do it. Don't expect to do it optimally. Don't expect to do it well. Just hack your way through it until you get stuck, then look things up and apply the solutions until it works. Simultaneously, marry that development with some reading on the side, inspired by interesting things you want to know more of - but keep the reading and the development separate; schedule your time. After you've read a lot and started to understand more fundamentals and good practices, you can go back and refactor large pieces of your code all at once (or maybe even rewrite it if you think that would be better). Avoid going down rabbit holes and getting into small recursive refactoring that never pushes you forward. Actively push yourself to just get stuff working and done. The question then becomes: Which project do you choose? Well for just learning JavaScript (and not front-end Web Technologies), I'd recommend grabbing Node.js and doing something like a chat bot (you could use IRC). But if you're already into web technologies and you get a sense of gratification when you see your programs doing something visual, definitely go for a front-end project with*out* frameworks - perhaps a little game (snake? tetris? minesweeper? pong? sokoban? etc).
Writer of the post here. Thanks for the upvotes. I'd be happy to answer any questions you have about the technique. If you happen to be in the marketing for a snippet organizer, check out Cacher at: [www.cacher.io](https://www.cacher.io)
It isn't do anything wrong; it's that your computerChoice is random *every time the function is called.* So you have the line `console.log(getComputerChoice());` which is console.logging _a_ computer choice, but when you call the `determineWinner` it's getting a new computer choice - and just reporting back if you won or not. (So, in your most recent post, you're logging the choice of `Scissors`, and then subsequently calling determineWinner with the computer choosing `Paper` - it's just not logged. So you could save them in variables, and it should be cool: ``` let userChoice = getUserChoice('scissors') let computerChoice = getComputerChoice() console.log(userChoice, computerChoice) console.log(determineWinner(userChoice, computerChoice)) // using the values you saved ``` Your `playGame` function has a typo also - it should be a capital `User` in `getuserChoice`. 
Do you have the demo running any where?
Ah well it’s all gone to shit now. 
How could she turn down her tone? She's a "Professional Mantagonizer" according to her Twitter bio!
1. Your post on using reselect is where I discovered reselect :) 2. I'm finding that writing middleware (especially in typescript) to be more effort than its worth and have resorted injecting dispatch into a structure that listens to my websocket and invokes dispatch for me. I feel like this is an anti-pattern, but in nearly two years of react/redux development, I haven't seen the middleware implementation improved to the point that it's my go-to. What do you think?
I've got some feedback for you, and hopefully it doesn't come off too badly. * These days, most js developers use npm, so maybe consider grabbing node and npm? This paves the way to my next point; * unit test this. You have a bunch of mostly small methods, and is ideal for testing. * Name your methods better. You have a bunch of `_helper1`, `_helper2`, etc., with comments mentioning what they do. For instance: This could be renamed to: function factorial(num) { And now you don't need the comment. * Split up the code into smaller chunks. One file, 9219 lines, that's a little rough. You've definitely written the functions in groups, and maybe those groups each deserve their own files? --- To address some of your points: &gt; I decided to go without build tools I don't see anything in there that _needs_ a build tool. But if you went a multiple-module route, then any is good. I think rollup has pretty little config - webpack would be way over-powered for this. &gt; My current target now is keep adding new functions and optimize until no more I can find or I felt like it's enough Cool, this is a perfect opportunity for testing - when you have a reliable test, you can refactor and know that you didn't mess up any math! &gt; And of course because I have to install many tools that took up a lots of space and there is no way to organize them (install VM machine is kind of overkill, not sure about this) Not sure I follow. --- Overall, I think this is cool, but if you want to publish, this is going to need a lot of polish, review, and tests, otherwise no one will be able to guarantee that any of these functions do the things they are supposed to.
No
Yes
Love it. Everyone who knows Angular can get right into coding, not really the case with unopinionated frameworks.
No
Yes
No its just your preference. Its okay for small api with single developer. If you have more people who'll work on it then prefer a framework. Framework gives solid structure to app which is easy to follow. 
Thx for some feedback, but I wonder about this: some code I found (Ex: polyk.js) doesn't have any testing... How should I address this problem?
Maybe
It's probably a good exercise to really understand what's going on under the hood, but not even using express seems pretty rough.
Maybe
Thanks for your opinion.
I meant only front-end frameworks like React or Vue. I have already used express so that's ok.
Have a look at pointer events in JS. Edge and Chrome have them natively and they might propagate things like angle, pressure and buttons for pens and styluses. However I have no way to verify that, I only gave mouse and touch available on my devices.
What support in JSON format would you like, in an ideal world of course?
If you wanna test your knowledge, then vanilla is nice. But keep in mind that frameworks have nice components that do what you would lose a lot of time coding and debugging...it's just not what you'd want in a tight schedule.
If you don't mind using a 3rd party lib for AJAX calls, Axios provides the ability to intercept both requests and responses. https://github.com/axios/axios#interceptors
Not quite sure I understand what you're saying in regards to middleware there. Can you clarify or give an example?
That's a great idea, maybe we can allow people to volunteer their solutions after they've completed the challenge! Thank you for the compliment and for hacking your way through :)
Ruby gems are not nearly so insane about transitive dependencies though. Gems have far fewer dependencies typically, and you can re-use your installed versions of a gem on multiple projects. Libraries have to all agree on using the same version of a dependency in your project; they can't bring in their own and balloon the vendor directory. It's a lot more manageable.
Yes
Sure, you can do everything with vanila JS. There are some advantages from an educational perspective, you'll gain an excellent insight into how things work under the hood. However, the overall process will be much harder and more time consuming to implement. If you've never done front end development before, then use vanila JS and learn some cool things with it. If you know front end development somewhat well, but just haven't used a framework, then just pick one and get started.
I'm currently using howler.js
I've found it quite difficult to get started with Web Audio, I am learning it, but adding it into my existing program is challenging.
They both create new arrays. Neither one will mutate the base array they are called on. The reason you're seeing the different behavior is that deleteUserTweet is assigning that newly created array from filter() to user.tweets, overwriting the original array.
Yeah, that's what I typed in the text when asking this question ;-). I managed to get one button in not a nice way but the only way so far. I adjsuted it's settings in drivers to make it act as a left mouse button (context menu) but that's a bit weird considering there is mouse as well (though I might be able to differentiate them depending on pressure I need to check if there is any difference and what it might be). The problem is if I don't set the button this way it's not registered by events but it is registered by the system. I'll need to look into this more after I get some good night sleep :0. Thx.
Agreed on all points.
Pretty neat. gj
came to say the same thing, it was hilarious watching some of the reactions between him and the audience members
Personally I've just started learning also. About 3 days ago. But I recently started doing codecademy, along with building simple discord bots, and so far I've been learning at a steady and good speed. I like to learn hands on, so maybe that's why.
Funny game. Code wise you need to learn about private scope :P I changed the \`collision\` function to remove the radius condition so that Id never die! heh
I do understand IIFE but can you elaborate in how it'll significantly (or not) change the way my game work and how would you do it? Thanks!
&gt; you can re-use your system installed versions of a gem on multiple projects to save HD space true
Is `polyk.js` the same as [this PolyK library](https://github.com/MartyWallace/PolyK)? If so, there are some tests in there :) Otherwise, there's no problem if some other library doesn't have testing, but it's my experience and disposition that I tend to ignore pulling in third party code that doesn't have tests, because then my debug steps now have to include third-party code, when I really just want to debug my own code. In terms of a public email address for npm, I just used my personal account, and I don't think I've gotten any spam via the npm site, but I also have spam filters. If you're more paranoid, yeah, just make a new account, email is free for the most part. For testing, since you're just doing math, I'd recommend [mocha](https://mochajs.org/). Jasmine can be a little heavy for just a bunch of math functions, and Jest is also a little over powered for that; mocha is a little more light weight than those. I'd always recommend using an actual test framework, since it means other people are going to be more familiar with the syntax if they choose to read through it. Don't be too scared, though, a mocha test file will generally look like this: describe('factorial', () =&gt; { it('returns 1 when given 0', () =&gt; { expect(factorial(0)).toEqual(1); }); }); Not too scary, eh?
If you are doing this for learning, as it seems from the nature of features, I will in fact recommend you to create apps with plain javascript first and add package-manager, modularity, third-party components (e.g. for API request management) yourself as the project grows. This will help you in two ways: 1. Realizing the strengths and needs of individual components of Software Engineering practices 2. You will be much more mindful while using some actual framework
Well you just dont want to expose your game functions open to the world. I can open devtools right now and type in window.collision = undefined and break the whole game for example. You can protect at least the internal functions by wrapping them in an IIFE which effectively makes it so the functions cannot be overridden. e.g, If you wrapped the entire game in just (function (){}()) I wouldnt have been able to change those functions as they wouldnt be on the window object. 
Angular. 
The original one is here I guess, since I didn't see any test cases on that site... ([p2.js](https://github.com/schteppe/p2.js) used it) http://polyk.ivank.net And thx for answering my question :) 
Besides what /u/Droid2Win already explained, there's an additional consideration. In the first case you're doing: const f = (obj) =&gt; obj = ...something-something...; f(someObject); While in the second, you're doing: const g = (obj) =&gt; obj.prop = ...something-something...; g(someObject); So, the first, `f`, assigns a new object to `obj`. This is ok, but it only affects the `obj` reference. It has no effect on the original reference that is passed (i.e. `someObject` still refers to the original object). Meanwhile, in the second, `g`, what you're doing is get whatever `obj` refers to and then modify its `prop` property. As `obj` and `someObject` refer to the same thing, you're indeed modifying the object that they both refer to. **Note**: You should go to /r/LearnJavascript for this type of question. That is the appropriate subreddit.
I think everyone should do this at least once, it makes you appreciate the frameworks more and allows you to truly differentiate between what the framework is doing for you and what you are doing with the framework.
This looks awesome
I know people love to hate on Angular, but I talked with a really good respected independent recruiter, and she told me demand for Angular devs was growing. 
Yep, it is for learning purporses and also it will be another project which I will be able to show to my future employer and therefore prove my skills. :)
I had similar thoughts when I first read about Deno's module system. I haven't evaluated the matter in sufficient detail to judge it. I included it as a matter of completeness, as to the options available, rather than as a judgement as to which approach is best. Personally, I probably would favour a centralised repository run by the Node Foundation. Unfortunately, I haven't heard of any strong moves by the Foundation in any direction in this matter.
Also known as Tic Tac Toe.
There is a ton of decision making logic that can be perfectly tested. 
That's not really a replacement for `map`, since the result is an array not an object. Writing the equivalent of a `map` in pure JS right now would require something like: const map = (fn, obj) =&gt; Object.entries(obj) .reduce((acc, [key, value]) =&gt; ({ ...acc, [key]: fn(value) }), {}); 
lol
For webpack and Babel at least (and a lot of other projects), this comes downs to their fundamental design I believe, which is a plug-in based architecture. That said, you could probably create a meta package to bundle common dependencies which is common for internal tools, and can also been seen in [react-scripts](https://www.npmjs.com/package/react-scripts). Not saying it’s good or bad per se, but one tooling specifically going in the other direction is [Parcel](https://parceljs.org/), which is “zero config” module bundler.
As far as the market is concerned in my country, there are two types of employer I broadly see: 1. (large scale) Which cares about fundamental CS courses knowledge and focus on one subject, say algo 2. (small scale ) Which cares about the familiarity with frameworks so that you can quickly get the work done in their software I can tell you better ways to impress a serious future employer. After you complete this project, you will gain a decent amount of knowledge. Then, find a small paid/unpaid project in production for some company from your seniors/professors who need help and can give you certification or do it in some hackathon or some online competitions or perform some significant contribution in reputed open-source js project. There are tons of such stuff these days for showcasing your abilities. Be clear with your goals, if it is self-learning or showcasing what you can do? If this is for your self-learning and you are at a beginner's level, it seems fine. Also, if your going serious with JS for your future employment, start reading books like: * "You don't know JS" * "Javascript Design patterns" * "npm docs" Also refer refer "MDN Docs" whenever necessary.
I think you are right, the backend endpoint reads the data in the URL. 
Yeah, ok. Don't let the door hit you on the way out, /u/apcanario.
Banned 6 users in this one thread, that's got to be a personal record!
Look up funfunfunction on YouTube. He has short videos on each one of those items. Being able to give a one sentence explanation of what they mean won’t help you if you get hit with a coding test
Fair point. I'll do that right away sir. Thank you.
I was drawing comparison more to Lodash's map, which still returns am array, even if you supply an object as the input.
Hi /u/throwawayacc000x5, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Ssjkr7, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/GM_Oliver, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Schneider_fra, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Kopikoblack, For javascript help, please visit /r/LearnJavascript. Thank you!
And your point is what exactly?
Oh right, that's true. I would say that `_.map` is just the map function over arrays though, and `_.mapValues` is the map function for objects. It's just that `_.map` also takes objects as a convenience. If it were standardized in JS then you'd have `Object.prototype.map` which would work like `_.mapValues`. So in that sense we're definititely still missing a map that works on objects.
How does she not know the creator of one of the latest up-and-coming module packagers, parcel.js? Yikes.
should I return the new array and assign it outside of function ? like this: const deleteTweetsById = (tweets, id) =&gt; tweets.reduce((prev, tweet) =&gt; (tweet.id === parseInt(id) ? prev : [...prev, tweet]), []); tweets = deleteTweetById(tweets, 2);
To be fair, it could be single player and the other player is the computer.
The caption element only works in a table tag. If you changed it to a div it should work.
Have you tried stackoverflow.com?
lol this diversity hire can't handle "randos" making spec proposals when her entire career is based on skimming off the top of talented "randos" independently creating software that built the entire ecosystem that made it profitable enough for whatever garbage HR department to put her ugly ass in her probably overpaid position. Sometimes I think about going west then I just remember that I will probably be working with these goblin creatures and their empty demands for tribute. Fuck you.
Yes that's better.
It has no touch support and is pretty much useless for mobile.
I think everyone should definitely make at least one medium sized website using HTML/CSS/JS. No Bootstrap or SCSS (and definitely no jQuery, which no one really should be using at this point). As for creating a registration and commenting system with vanilla (Node) JS, you will probably end up creating your own Express-like functions to do stuff anyways, so I don't really see the point in it other than personal challenge. I prefer to tackle a complex algorithm challenge a few times a week to keep my vanilla JS sharp.
Rxjs is so unnecessarily complex. It added an order of magnitude of complexity to our app with questionable benefits
Hi, all. I wrote a zero-config linter/formatter, similiar to Standard and XO but based on Prettier and `eslint-config-airbnb` with out of the box React and Flow support! Would love some feedback and suggestions. 
Thanks, this makes a lot of sense - I do know that it would be very easy to cheat on this - and I was not intending to hide anything from the users. And funnily the original code was actually wrapped in IIFE - but it came to a point where too many things were calling for collision and I found it simpler to unwrap it.
Thanks!
You need to specify an array index: `this.expenses[0].amount`
My understanding is you want to sum all of the amounts in the expenses array? You can do this with \`.reduce\`. const account = { name: 'Andres Mena', expenses: [{ description: 'Water', amount: 3 }] }; const addExpense = (account, description, amount) =&gt; { account.expenses.push({ description, amount }); }); const getAccountSummary = (account) =&gt; { return account.expenses.reduce((total, expense) =&gt; { return total + expense.amount; }, 0); };
thanks, that was it. 
As of right now, I'm leaning towards fiddling with zeit, but they have a max file size? is that for all files? i'm assuming you could maybe break up a big bundle? would appreciate any input from anyone who enjoys using zeit!
thanks that is it!
ahh thanks. I used a for each but reduce does seem easier
Just do https://neocities.org/
They're not the same thing. Generators are synchronous. Async/await/promises are asynchronous. Generators can be used to easily implement iterators while async etc. are just for waiting for promises in what looks to be synchronous code. It's possible to mimic the behavior of async etc. with generators, but there's no need to do that now that we have async. And that's also not the only use of generators.
PS: If you are using VS Code, adding `// @ts-check` at the top of the file might help
I have been using the firebase hosting for a Hugo-generated site for my wife's home baking business. May be a good option: https://firebase.google.com/docs/hosting/
You can do that, yes.
 - Without express, your routing would become a bunch of if statements; - You have to manually parse request bodies and fight with streams - Static serving is really not worth the trouble of writing from zero. While you can just serve static files with few lines, you'd be losing on many implementation details like http headers, caching... - Doing HTTP requests on node.js's API is a but painful. Wouldnt be hard. If you use express you will loose details on the node.js API. If you use the node.js API you would lose on middleware and other express patterns (which are common webserver patterns found in a ton of software around).
Tetris with keyboard and touch controls https://robbiebrandrick.github.io/Tetris.html
I was shocked by that too. Even if some random unknown developer tweeted this, it still wouldn’t justify her negative responsive response though. Also, if your idea is that much better than someone else’s, you shouldn’t have to resort to such language as “this sucks” to critique it effectively.
If you click the link they have a live demo before the tutorial
Should I delete this?
https://github.com/bitwiseshiftleft/sjcl
Yes John, It doesn't provide more support for mobile, but for web apps I don't find the open source grid which provides same Spreadsheet experience. And here the Handsontable providing all that feature same as excel in web app. And also it is easy to use.
[Netlify](https://www.netlify.com) has been nothing short of excellent in my experience. Should cover all your static needs. They also offer integrated form collection, an easy gateway to AWS lambda among other things. All this is available on their free tier (from last I checked)
How does a decentralized package system work? How does pip and gem do it?
i do mine in github pages or s3, then front them with cloudfront
I agree they aren't the same thing, but I'm not sure I'd say that generators are synchronous. I suppose they _sort of_ are, but the block you `yield` to can include asynchronous code. Either way, I would bet most people are using generators without realizing it, including OP. Things like spreads, `for..of`, etc.
Which languages did you learn in that 3 months? Did you use a website such as indeed.com to find the job? 
No that's ok, it was removed.
I've used them a couple times to implement async functions that can be cancelled. In both cases I was building apps that required sequences of sounds/animations. I needed generators to make stopping the sequence in the middle (without throwing or having to check a flag between each call). Something like this: ``` const animation = cancellable(function*() { console.log('Starting animation'); yield () =&gt; play('first'); yield () =&gt; play('second'); yield () =&gt; play('third'); console.log('Done!'); }); const promise = animation(); setTimeout(() =&gt; promise.cancel(), 4000); function play(sound) { return new Promise(resolve =&gt; { console.log('Started', sound); setTimeout(resolve, 3000); }).then(() =&gt; console.log('Finished', sound)); } function cancellable(gen) { return (...args) =&gt; { let cancelled = false; const promise = Promise.resolve().then(async () =&gt; { for(let value of gen(...args)) { if(typeof value === 'function') await value(); if(cancelled) break; } }); promise.cancel = () =&gt; cancelled = true; return promise; }; } ```
Continue on this trajectory of building from scratch. Migrate to frameworks once you're comfortable with the base language of choice, because frameworks merely add syntactic sugar which obfuscates the inner workings, meaning that you'll have no freaking idea what's happening under the hood. Once you know what you're doing you'll be ready to "not reinvent the wheel" and your productivity will sky rocket by making smart choices in the frameworks you choose (in time you'll find that it's important to have less dependencies in a project, and the ones you choose will solve very specific problems eloquently without the additional bloat). This all comes with practice. Good luck
Angular is a more opinionated framework than React or Vue. React is more of a view library than a framework, and Vue prides itself on its simplicity and ability to scale down. As such, those projects let you pick whichever asynchronous operators you want. Angular takes a different stance. It has strong opinions about your project and which libraries you should use. One of those opinions is using rxjs streams to do asynchronous operations.
[deno](https://github.com/ry/deno/)
Netlify for sure: [https://www.netlify.com/](https://www.netlify.com/) CDN caching built in, env variables, serverless functions and even have an admin addon for your site for basic content entry.
redux-sagas are the bees knees
I still can't understand generators...
Man i remember learning php and doing everything myself like forms, validation injection protection...then i tried out symfony and bootstrap. The lazy mans way
If all you need is static hosting with CDN fronting, [Github Pages](https://pages.github.com/) is easy and free.
In what way?
I read many articles about them and I still have no idea what they do or how to use them.
They are functions that let you "return" more than once. (In essence) 
Ok do you have an understanding of iterators? Perhaps as they are used in JS or other languages like Python or Java?
Why is this being framed in the article (and in these comments) as unit testing vs integration testing? Do both. Shallow render in your unit tests. Fully render your app for integration testing but mock i/o. And test all the way through for ETE testing.
I think of them as pausable functions. 
Like what the dude below said, generators are functions which let you return more than once. For example look at the two code snippets below: ``` function normal() { var i = 0; while(true) { return i++ } } ``` It should be clear to you that the above function only ever returns the number 0, no matter how many times you call it. Contrast that with the generator below: ``` function* generator() { var i = 0; while(true) { yield i++ } } ``` In order to invoke this generator, you first call generator() and assign it to a variable. That creates a new instance of the generator in essence. Then, by calling instance.next(), the code will run until it hits the yield statement, which is essentially a return statement which can happen at any time. The first time next() is called, the returned (or more accurately yielded) value will be 0. Now for every subsequent call to next() the code resumes from where it was yielded, as if the generator never "returned" at all and capturing the values (namely i) of the variables in its scope. So in this case, after the first call to next, if next is called again on the generator instance the while loop will rerun (because while(true) runs infinitely) and it'll yield again, this time with the value of 1. In this way, the generator essentially generates values infinitely. Hopefully this will illustrate what I mean: ``` var instance = generator (); instance.next(); // 0 instance.next(); // 1 instance.next(); // 2 ... ``` Hope this helps!
cancelation, async functions don't have it yet, plus they can be used in many other things not related to async programming and iteration
Have you read much about coroutines? That is more of a useful application of them.
generators are more generic, but basically, they are the same - Coroutines. Nothing prevents you from calling `Promise#then` in `next` of its iterator and make it asynchronous
"Pausable functions" is a nice explanation. Yield is kind of a pause statement that interrupts at this point, but allows you to continue where you've left atva later time. I like to use generators to distribute tasks over multiple frames. For example, if you have a large scenegraph that takes 50 ms to traverse, but you've only got 10ms per frame to keep rendering fast and smooth, just yield/pause after every 10ms.
Maybe not
I like to use generators to distribute tasks over multiple frames in 3d renderers. In one App, I have a function to extract part of 3d models within a clip region. This tasks can take up to 1 second, but I don't want it to block the renderer, or even slow it down. Generators help here because they allow you to easily distribut the task over multiple frames. Inside the generator, I check if, for example, 10ms have passed and if yes, the generator yields for the remindeenof this frame, and will resume work in the next frame.
Just use async and await. We use it in our backend in node and works perfectly.
Maybe it’s using a Confirm box. ```const r = confirm("Click the OK button now!"); if (r) { alert("You pressed OK!"); } else { alert("You pressed Cancel!"); }```
This is better than the article, thanks. 🙂
Could you also use requestAnimationFrame for this?
requestAnimationFrame does something very different and I use generators in addition to requestAnimationFrame. Generators keep track of the state of the currently executed function, so that you can continue inside this function at the exact place where you've left before. requestAnimationFrame, on the other hand, does a regular function call that starts from the beginning. So, requestAnimationFrame executes an update/render callback, and that update/render callback invokes the generator, which will do some stuff for at most 10ms, since we've only got 16ms to render a frame in real-time.
That seems to be a gif/video. I think GP is asking for an interactive demo.
libsodium is generally the best choice for that kind of thing these days, and it has a JavaScript/WebAssembly version [here](https://github.com/jedisct1/libsodium.js).
MPJ has a really good series on them here https://youtu.be/QOnUcU8U_XE it starts a video of two before though with iterators so I'd check that out too.
While your question may be relevant to you, it's not particularly relevant to the rest of the subreddit and honestly belongs much better in /r/LearnJavascript.
Now I get it. Thanks!
But why would I do this?
To read about redux state read about state machines. But to take a try to explain this shortly - state itself is not a new concept, nor a javascript thing. In terms of redux it's an object which stores objects you provide and history of changes. Store (states holder) itself is immutable (you cannot change it directly, you can create new state though). This allows you to posess single source of truth. As for 'internal state of promise' you should read upon creating private variables in function. In easiest way - its function inside function that isn't exposed. Therefore you cannot access it and it's variables. But - you might access the parent function and make things depending on child function state (values of variables that change for example with each execution). Don't know how exactly promise is implemented but I hope it clears things a lil up for you
State is another word for "all the variables in a given context." The object { x: 3 } has state in the form of a variable called x. State can change over time. x today is 3, but later it might be 4. The quote about promises is just saying that promises maintain some state (information that has potential to change throughout your application lifetime). State management libraries provide methods for dealing with the complexities of state (changing the state of the application and responding to changes in the application state). Check out the redux documentation if you want more insight into the philosophy of state management libraries.
I know about the existence of 'state machines' in computer science literature. But could not relate that to here. Thanks 
&gt;(information that has potential to change throughout your application lifetime). This cleared things up for me. &gt;Check out the redux documentation It is up next in my reading list. Thanks :)
I moved from Github Pages to Netlify. Can't recommend enough!
&gt; "Pausable functions" is a nice explanation. Yield is kind of a pause statement that interrupts at this point, but allows you to continue where you've left at a later time. First explanation that makes sense to me. I'm actually writing a point and click adventure game (and thus doesn't need precise real time control), so being able to alternate between logic and drawing would be a massive bonus.
My example was contrived, but the above is a \*primitive\* serial number generator. Of course the logic of the generator could be much more complex. The cool thing about generators is that they encapsulate the state and logic for the generation. You could use classes for this too of course...it's really up to you!
Lol Ruby and Java's stdlibs leave JS's firmly in the trash Not to mention that I wouldn't really count stuff from the DOM as part of JS' standard library
Use the Babel target to do that! targets: { browsers: '&gt; 1%', uglify: true }, 
State is every variable you can access, within or outside of a class for instance, some of it may be global, local or private (inaccessible to the outside). A state manager solves a different problem, it makes state reactive. For instance, if you have a variable `let something = 1` and you have a component display that `&lt;div&gt;{something}&lt;/div&gt;`, how would your component know if you do `something = 2` in order to render the new state? With redux and all the other alternatives when you change state, components that explicitly bind or connect to a portion of state they're interested in will render when they detect that they should.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Is there a name for { const stuff = "thing" } expressions?
A good example of what can be done with generators would be the IxJS library [https://github.com/ReactiveX/IxJS](https://github.com/ReactiveX/IxJS) Where RxJS uses push model, IxJS uses pull. Both of them allow you to work on the arrays item by item instead of array by array - these functions are called transducers. Here's another example of transducers which use generators [https://github.com/jrdrg/generator-transducers](https://github.com/jrdrg/generator-transducers) So, I'd argue, you \*do\* need to learn generators, they can be extremely powerful, especially when combined with promises. You can for example yield rows from database and then iterate through each and every one somewhere else, without having to deal with opening / closing the connection, batching, retries, .. as they can be handled in async generators.
You might want to check with your city hall. They always know what to do. Maybe talk to the garbage man on trash day. Do you want me to bake you some cookies? Love, Grandma
"Constant declaration" or "declaring a constant". Like a variable (as declared with var or let) but the value will not change once set, which both helps the compiler (it can apply certain optimisations that would otherwise be unsafe) and you (it may save you from otherwise silent errors if you accidentally assign to something that should not change). Significant (but hopefully obvious) caveat with objects though: only the reference stored in the constant is invariant, the properties of the object can be manipulated as normal (so the constant will always refer to the same object, but that object and anything it references can be mutated). One further difference between const/let and var: const and let are _block scoped_ where var is _function scoped_ - so if you example were literal no code would ever see "stuff" because it is declared in its own little block.
_Some_ support, essentially, so a date object can be carried in the format and unpickled without manually unpacking and calling the date() generator. I'm not sure how it would fit in the format. Perhaps something like "dateprop": date(YYYY-MM-DDThh:mm:ss.0000) or "dateprop": date(&lt;ms-since-epoc&gt;).
It's worth pointing out that Ix should also be the mathematical dual of Rx.
It may be confusing as this incorporates closures without addressing that concept. 
I can’t read the word iterative without hearing his voice in my head. Fluffykins
Sorry :( I was referring to the curly braces enclosing the const declaration.
Block statement. Look at the “syntax” section: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block
You can [try out a preview](https://ably-tictactoe.herokuapp.com/), To play against yourself, open a second instance in a different browser, or in an incognito/private browser window. Have fun! :-) 
[block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)? as an alternative to IIFE
I believe they are called "explicit block" declarations and are used to take advantage of the block scoped variables.
State is just state. A car has state in that it can be running, parked, or crashed. A burrito has state in that it can be hot, cold, half-eaten or over seasoned. A promise has state because it can be in different... states. The implementation is irrelevant. State is just state.
this is great, what is the cost doing this?
I love async/await, and use it everywhere, but I'm still of the opinion that coroutines (especially a built-in `Promise.coroutine` function) would have been a better approach. I learned about coroutines after I already learned async/await, and I'm not really seeing a major advantage to also having async syntax adding complexity to the language. You absolutely must learn what Promises are to use async/await effectively, so why not simply yield Promises into a coroutine function? I guess you could combine a generator that's also async, but that's a pretty rare edge case that is easily handled using `Promise#then`. As for reasons to learn generators, I actually like them a lot for including a `Symbol.iterator` method on legacy libraries that use their own methods for iteration. This way, I can `Array.from` or `[...spread]` from it, and use what was a heavily procedural-friendly lib in a more functional way. e.g. if I had a lib that had a collection you said `getCount()` on to get the number of elements, and `valueAt(idx)` to retrieve a value, that'd be a pain to remember and not something I could use directly with array methods. But if I went: Collection.prototype[Symbol.iterator] = function* () { for (let i = 0; i &lt; this.getCount(); i++) { yield this.valueAt(i); } } Then that's the last for loop I'd ever write for using these things. 
Just to clarify, internal state which can't be accessed or altered directly in case of a plain old object probably means a closure over some variable, most likely local to this object's constructor.
Yes, garbage collection will handle circular references. GC works by starting at roots (i.e. your variables) and then recursively following any new references to see what objects are still live. If an object can't be reached from one of the roots, it will be collected. 
Algorithms to live by is a good start, here's my summary of it, hope it helps! [https://soundcloud.com/factor29/25-superforecasting-get-ahead-by-anticipating-the-future](https://soundcloud.com/factor29/25-superforecasting-get-ahead-by-anticipating-the-future)
Pre npm 5 you could use local paths for dependencies. E.g. `file://../myoyhermodule`. With npm 5 they changed it so that it's symlinked instead. This broke bundling the local dependencies (npm package with the local modules as bundled dependencies). During installation, even though the modules are in the bundle, npm looks outside the package for the dependencies, so installation fails. It's been an open issue since npm 5 was released and never addressed. We had a large project setup with several modules this way. With the Advent of npm5 we had to completely rewrite and reorganize our project as it no longer installed. There are a lot of issues like this with npm; things that broke in their rush to compete with yarn that they have never addressed. Imo npm is just sloppy. They grew too big for their resources. 
Might be useful! It could be shortened up a little: const resolve = promises =&gt; Object.entries(promises).reduce( async (acc, [key, value]) =&gt; ({ ...(await acc), [key]: await value }), Promise.resolve() )
The first example will completely block a program. The second example you can continue running your programming. If you're not familiar with the concept of things like `take` and `takeUntil` you could take the first 10 results and the program continues executing. The first function you cannot do that with.
I've used generators to make request throttlers using promises and setInterval. Make an array of request parameters, use setInterval and a generator to go through them one at a time at the speed of the setInterval delay value and send a request, and then use Promise.all to signal when the throttler is done with all the requests and execute a callback if you want.
Tough call, you'd have to add the complexity of logic/functions to JSON in this way, no? Having it be data-only makes it universally easy on parsers. High trade-off imo.
I'd argue it's not unnecessarily complex, it's just unfamiliar to you. The problem is that many of the concepts build on other concepts so to understand the design decisions you would have to dive into function programming/category theory 'what is a monad' type knowledge. Just look at how this started. .NET 3.0 included linq which was the product of some hardcore category theorists and haskell developers. It provided a standard API for collections that allowed people to chain map/filter/reduce type operations lazily. It was initially thought too confusing and complex but now it's just part of day to day life in c# and ends up being simpler to use in most cases with minimal mental overhead. In .Net 4.0 we got Reactive Extensions(Rx) which is just the mathematical dual of LINQ. again you will find people complaining that it's too confusing and too hard yet here we are 7+ years later and not only has this been ported to most languages and we have multiple large libraries in Javascript that leverage it. 
the last section sounds really interesting ``` Generators + Promises Now we can talk for a moment about how Generators and Promises form the foundation for the async/await expression. Imagine for a moment that instead of yielding values the Generator yielded Promise functions. You could then wrap the generator in a function that could wait for the Promise to resolve and return the Promise value to the Generator in the .next() method as we just demonstrated. There is a popular library called coroutines that does just that. Really simply, something like this: ``` does anyone have a good example of this?
Hello, thanks for the contrustive reply. The reason I was asking this is because my source of learning materials were from MDN, and in the Memory Management page, it is stated that: "Limitation: cycles There is a limitation when it comes to cycles. In the following example, two objects are created and reference one another, thus creating a cycle. They will go out of scope after the function call, so they are effectively useless and could be freed. However, the reference-counting algorithm considers that since each of the two objects is referenced at least once, neither can be garbage-collected." And I am in doubt if I let the engine do the garbage collection or if I am the one handling the liberation.
All major JS platforms use a mark-and-sweep collector which handles cycles. I think our of major language impls only Python and maybe Perl still uses reference counting as their only strategy. 
While I love so much about es6+, I have felt like our language is getting a bit polluted, and was all ready to hate on the bind operator. Seeing it in action, though, I now wish we had it even sooner. We would probably have been less driven to make so many libraries and pass other language changes if we had something this convenient. I might be getting the syntax wrong since I just learned about these things 3 minutes ago, but this seems like a very cool way to simply bind Array methods to run on other collection types. Combine it with destructuring at the top right below my `import`s, and this could be amazingly simple. const { reduce } = Array.prototype const sectionTitles = document.querySelectorAll('h2')::reduce( (a, { id, textContent }) =&gt; ({ ...a, [id]: textContent }), {}, ) Much nicer than an `Array.from` or spread, since I'm saying "do this thing because it's enough like an array for it to work", instead of "turn it into an array first so I can do array methods with it". This could make `Map` and `Set` way cleaner too. My mind is racing with the possibilities for how this could clean up my code for my most `this`-reliant modules -- React code. 
thanks. thats a great tip!
My website ([yoseph.tech](http://yoseph.tech)) uses github pages. I have used S3 with cloud front in the past, but for my low visitor number and ease of use, github pages can't be beat.
GitLab allow hosting of static sites via their "Pages" functionality. You also get proper versioning with this.
You need to keep reading further down that page. Then you'll hit the section titled *Cycles are not a problem anymore*
might bring some false errors too, but in overall its positive ;)
&gt; It’s clear that the proposed syntax is more readable in these situations, so let’s hope it moves up the stage ladder soon! Good luck with that. It's been at stage 0 for years.
Cost is mostly insignificantly small. Just don't check time too frequently, e.g. if you have a loop that runs 1 million times per second, check the elapsed time every 1000th time.
I love the way this author explain things. I understand javascript and when someone creates a partial example of generators without generators, the code itself serves as an explanation. However I wished he had explained the method `next` better, it left me confused. How does javascript know where to put my parameter? Why is that variable `reply` constant when it changes?
The article gives an example right after the text you quoted. And the link "coroutines" in that text takes you to the implementation.
The best part of this shitty ad is your company name is so generic I can't even figure out which terrible company this actually is. Maybe learn SEO before claiming you are 'leading' anything
Yes if you’re using redux-saga, you’re using Generators. Have had sagas in production for a little over a year and a bit. They are fantastic. 
I don't agree with the way she communicates at all, but a lot of what you mentioned is just plain ignorant. If you use the \`npm\` CLI at all, a lot of its features were created by her. She's also the author of the popular \[pattern matching proposal\]([https://github.com/tc39/proposal-pattern-matching](https://github.com/tc39/proposal-pattern-matching)). So to dismiss her as a "diversity hire" doesn't really make sense.
`Generator` is such a terrible name for this functionality, `yield` is just creating a type of iteration. Adding `async` functions into the mix just complicates initial understanding of the entire concept. But if we are going with the function example, just think of it as a collection of functions that execute when iterated over. I honestly think C# explained this same functionality better just by focusing on the `yield` keyword: https://stackoverflow.com/questions/39476/what-is-the-yield-keyword-used-for-in-c MDN also has some good, straight forward examples that don't confuse the subject by trying to pack in too much functionality into the initial explanation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators 
Generators are simple, what is confusing is the way they got caught up in the bizarre world of state management. It is not their intended purpose.
Generator functions are deceptively simple, if you learn them outside of any context. It's the way they always seem to get used, in arcane state machine gizmos that seem needless, that is the confusing part.
&gt; you'd have to add the complexity of logic/functions I'm not meaning that it would be a function at all, so maybe that syntax is a bad idea. I was just meaning that wrapping in date() would be the way dates are identified, much like [] identifies an array and {} a dictionary. Perhaps wrapping the date in #s like VB did (still does?) to identify a date literal would be a better choice. Something like: { "surname": "Smith" , "forename": "John" , "middlenames": ["Edward", "Archibold", "Mayweather"] , "dob": #1999-12-31# } 
Hi /u/niceguyincoming, For javascript help, please visit /r/LearnJavascript. Thank you!
Yeah that's using a framework 
I never thought of generators like this, but this is probably the coolest use case I've seen ever, cool as heck
Hi, I'm kinda confused about why calling next isn't yielding i++ in your example. Here is what I have in the console of chrome: let gen = function* generator() { var i = 0; while(true) { yield i++ } }; gen().next(); // returns {value: 0, done: false} gen().next(); // still returns {value: 0, done: false} Am I misunderstanding your explanation? Shouldn't the second gen().next() yield 1?
There's also [requestIdleCallback](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback).
Aaron Abramov, one of the core contributors to Jest, gave a talk that touches on this - https://www.youtube.com/watch?v=_pnW-JjmyXE When accounting for opportunity cost and marginal return on time-investment, there's a sweet spot for how many tests you write. Writing every test would be way past the "sweet spot"
It's great but it's missing the stopwatch showing the time you have survived. (I mean before you die)
Have you run `npm install babel-preset-env --save-dev`?
Yes. I've followed the guide on https://babeljs.io/setup#installation for WebStorm.
Nice, we had similar code pasted around our project until we started using the `awaity` library. `awaity.props` is essentially what you have there. super useful!
A tip - Reddit markdown doesn't support the ``` code syntax, you have to indent the entire thing by 4 spaces, and have a newline before it - like this: const animation = cancellable(function*() { console.log('Starting animation'); yield () =&gt; play('first'); yield () =&gt; play('second'); yield () =&gt; play('third'); console.log('Done!'); }); const promise = animation(); setTimeout(() =&gt; promise.cancel(), 4000); function play(sound) { return new Promise(resolve =&gt; { console.log('Started', sound); setTimeout(resolve, 3000); }).then(() =&gt; console.log('Finished', sound)); } function cancellable(gen) { return (...args) =&gt; { let cancelled = false; const promise = Promise.resolve().then(async () =&gt; { for(let value of gen(...args)) { if(typeof value === 'function') await value(); if(cancelled) break; } }); promise.cancel = () =&gt; cancelled = true; return promise; }; }
You're creating a new instance of the generator with each `gen()` call. You need to create one instance, assign it to a variable, and request a value from that instance: ``` let gen = function* () { var i = 0; while(true) { yield i++ } }; let instance = gen(); instance.next(); instance.next(); // etc... ```
I'm pretty new to generators myself, but as far as I can tell, each time you are using "gen()" it is instantiating (or whatever the applicable term is for generators) a new generator, which will start at 0. To make use of the generator functionality, you can do the following: // Define the generator let gen = function* () { var i = 0; while(true) { yield i++ } }; // Create an instance of our generator let myGenerator = gen(); myGenerator.next(); // returns {value: 0, done: false} myGenerator.next(); // returns {value: 1, done: false} // etc...
Is the `.babelrc` file in the directory that contains `node_modules`? Are you running your commands from that directory as well?
```gen()``` is basically a factory method that returns a new instance of the generator, with its own state. So every time you call ```gen()```, you're creating a brand-new instance of your generator without assigning it to a variable that you might otherwise use to keep track of it. Each one is initializing i to 0, and your ```yield i++``` statement is returning the value as it appears before the increment operation. Here's an example I wrote that might help with both understanding and an actual plausible purpose *(oscillator signal generation in DSP for digital audio synths)*: function* SawtoothWaveGenerator(maxAmplitude) { var sampleAmplitude = 0; while(true) { if(sampleAmplitude &lt; maxAmplitude) { sampleAmplitude++; } else { sampleAmplitude = 0; } yield sampleAmplitude; } } var osc1 = SawtoothWaveGenerator(5); var osc2 = SawtoothWaveGenerator(10); for(let i = 0; i &lt; 100; i++) { console.log("OSC1:", osc1.next().value); console.log("OSC2:", osc2.next().value); }
That’s part of the explanation of “reference-counting.” No browser uses reference-counting garbage collection for the JavaScript heap. Way back in the day, in Internet Explorer 6, it was used for DOM objects and led to some memory leaks, but that’s it. You don’t have to worry about cycles. You can’t explicitly free memory in JavaScript anyway!
Bluebird already has something similar (http://bluebirdjs.com/docs/api/promise.props.html), but it's nice to see it as a standalone tool! One thing that makes this an even nicer pattern is destructuring. Your example can become: const promises = { "weather": promiseWeather, "user_info_db": promiseUser } concurrency(promises).then(({ weather, user_info_db }) =&gt; { // no obj needed })
The `.babelrc` is only in the project folder, I'm running commands from `node_modukes\.bin\babel.cmd`.
And nowadays if you set up a custom domains with them they'll also do all the HTTPS certificate automatically set up for you too (via Let's Encrypt): https://www.netlify.com/blog/2018/06/19/buy-and-secure-a-custom-domain-through-netlify/. I've had great experiences with all their stuff, Netlify 100%.
Good to mention for completeness, but I also expect wouldn't work in this case. The main thread is spending 6ms per frame in webgl calls, and must do that 60fps. There won't be idle time to update the scene graph.
Run commands from the project folder rather than from within `node_modules\.bin` as this is how Babel expects to be called.
Guys, it works. But however I do not know why it is marked red.
It probably doesn’t matter much, but that’s a lot less efficient than reusing the same object over each iteration.
I pioneered async/await with generators in JavaScript 1.7 in my [async.js library](https://github.com/eligrey/async.js) from 2009.
Yeah, I really think we need to stop talking solely in terms of generators as stepping stones to async/await, and more in terms of generators as powerful iteration and stream primitives in their own right. Even sync generators can be powerful if you're working with data that is inherently in the form of a series of elements (the most obvious example being pretty much any array). Being able to write your data transformation function as a generator rather than something that either mutates an array, or creates a new array, makes it much easier to use functional techniques to write much cleaner and more understandable code.
But I have no .cmd in the project folder so how I can run the commands?
 concurrency(promises).then(({ weather, user_info_db }) =&gt; { // no obj needed }) That's pretty cool, I did not think of that. Thanks!
Strange. My comment looks find when I view it from the thread ([here](https://www.reddit.com/r/javascript/comments/8xuw0g/anyone_using_es6_generators_in_production/e26yx50/?context=3&amp;utm_content=context&amp;utm_medium=message&amp;utm_source=reddit&amp;utm_name=frontpage)), but in my profile the code block is broken.
Generators are just one of those language features I never have cause to use.
&gt; http://bluebirdjs.com/docs/api/promise.props.html May I know if that could work with ES6 native promises? 
I see, that makes perfect sense. Thanks for the clarification.
could you upload a screenshot of the marked area?
I think the "new reddit" supports ``` syntax, but the "old reddit" doesn't. Interesting that it works on new reddit but not your profile page.
This is the command which I run: `cmd.exe /D /C call C:\Users\TOMAS\node_modules\.bin\babel.cmd main.js --out-dir dist --source-maps --presets @babel/env`
oh my bad, thanks for letting me know!
Thanks! 
I would love *concrete* examples of any real benefits of immutability that make the extra work worth it.
Can’t see on mobile (or at least in reddit app).
Maybe you're just too scared to do it perfectly right from the start? If so, don't. A rule to learning to code is: Code fearlessly. Just create files, make them do things, you might expect them to do. If it doesn't work like you wanted it, rebuild it, try it again. And again. And again. Until it somewhat works. That's basically the only good way to get into it for real.
Okay, I think I understand better now. Does that mean you can't have a self invoking generator because a generator function actually returns an iterator object?
Works for me on Android mobile app. 
When you get stuck — even with something like a todo list, go back and scan through projects like the JavaScript 30 code you wrote, and look for things that might apply to what you’re trying to do. stack overflow is your friend. Make sure you break whatever you’re trying to build down into the smallest steps possible. A simple function for example, could have 5 small steps you write yourself to follow while you write it. Breaking things down like that always helps me. Don’t be afraid to google shit. You’ll spend more time doing that than writing actual code. 
[http://lyricsify.mowglimecha.com](http://lyricsify.mowglimecha.com) It will display Spotify lyrics if your Spotify is active or playing. if somehow it displays "You are logged in as \_\_\_\_\_" just visit the link again . it will redirect you.
You can break programming up into 2 parts: syntax and problem solving. The problem solving aspect of programming is the most important part to learn and it's 100&amp;#37; language agnostic. Syntax is your means of translating your solution into working code. The problem with video tutorials is that it focuses almost entirely on syntax. Sure there is problem solving going on with the tutorial but not by you. The teacher has already done all of the thinking for you and is simply guiding you through the solution. So what I am gathering from your post is that you need to work on your problem solving. Take a step back from trying to get basic todo apps going and focus on your problem solving. Google for a progressively harder list of logic challenges such as ( [https://adriann.github.io/programming\_problems.html](https://adriann.github.io/programming_problems.html) ) and start working through them. Sure some might seem basic but as you move up, you'll start to incorporate more of the syntax you've already learned. The most important aspect of any of this is do it on your own. Don't let somebody else do the thinking for you because that's the most important part of the exercise and what will help you improve the most.
This question does not make sense and can therefore not be answered.
Redux linearizes all actions that mutate global state that multiple components depend on. You would not use it for component-specific state like `sidebar.opened`, but for data like results from a server or the higher level state of user interaction. Look into Flux architecture, Redux is basically an extremely functional implementation of it. The reason Redux is better fit for larger applications is that it becomes more difficult to avoid interleaving state updates in a way that leaves the overall application state inconsistent. Having a central dispatcher makes bugs easier to fix since you get a log of exactly what actions acted on the state, with what parameters, and in what order. You can drop a debugger at any time and see exactly what the application state is in a single object, and what when it becomes inconsistent. This is much harder to do with mutable state scattered around the application, interacting in unexpected ways. 
I think this is normal and not something to be discouraged by. It takes time a bit of time to get past the stage where you feel blocked by not knowing how to “attack” a project. Some tips off the top of my head that I might offer: * Yes, just keep sticking with JS30 and CodeWars for practice. I think JS30 is a great resource, but you can probably also make it a better learning tool if you make think of an extra assignment for you to do after each of the 30 projects that is similar but slightly different. For example, I recall one of the early projects was building a clock with moving hands. Maybe after doing that, build a stopwatch app with moving hands with a stop/start button and reset button. It’s similar enough where you might not get as blocked, but still exercises that part of your brain that helps you build something new from scratch. * Think about tackling your projects incrementally. Sometimes feeling blocked comes from being overwhelmed by all the different moving parts of an application, but when you take it as a step by step approach it feels a lot more doable. For example, if you build a todo app. As a first step, only think about displaying an array of text as a unordered or ordered list of unstyled html elements. Just keep adding complexity bit by bit. * Understand that it’s a process that takes time and that everyone who attempts to learn this stuff has struggled with what you are struggling with. It just takes persistence. At times it can be frustrating, but just try and have fun with it! Good luck! 
Never heard of them.
How is using a generator better than simply using lexical scopes: function makeIterator(start=0, step=1) { let iter = 0; return function next() { let val = start + iter*step; step += 1; return val; }; }
This is the best explanation of the concept I ever read. I'd give you gold for it but I am a 15 year old with very little money, so i'll use the !redditsilver instead.
!redditsilver kerbalspaceanus
And like with probably every profession - more you know then more you realize how little you know.
To preface: Some of the arguments you made were for centralized state management which does not require Redux/immutability. But they are correct. You do not want scattered state all throughout the application except for component specific stuff that no other component will use. Sidebars are often at the root of the app and many different components often interact with it. So yes, it belongs in the store and not in a component. It might even contain dynamic dropdown lists that use data from the server. These might have to be updated or deleted from other parts of the app. Any centralized store management without immutability does this without issues. And like my article said, developers should expect these values to mutate. &gt; You can drop a debugger at any time and see exactly what the application state is in a single object, and what when it becomes inconsistent. `console.log`? You also say inconsistent state a couple times, but what do you mean by that? &gt; This is much harder to do with mutable state scattered around the application, interacting in unexpected ways. Yes, centralized mutable state management takes care of this problem.
Same thing using lexical scopes: function makeSerialGenerator(prefix) { let iter = 1; return function next() { return `${prefix}${(iter++).toString().padStart(5, '0')}`; }; } const serialGenerator = makeSerialGenerator('company_'); serialGenerator(); // company_00001 ...
Very useful in switch statements!
Apologies for my butter fingers. Title is meant to be **The Cost Of JavaScript**
IMHO generators were mostly useful as a basis for adding the async/await syntax, which is amazing. ..but that's only my opinion! :)
That was a great library when it was needed! Kudos!
Cool game! My one request is, could you add a couple of buttons that allow you to control or mute the game's audio?
Colt Steele's course is very outdated at this point, skips a lot of important things and teaches you some bad practices because of those. Anyone who recommends that course is doing a disservice to an aspiring web developer. A lot of people (myself included) have arrived at a lot of aha! moments from doing https://watchandcode.com/p/practical-javascript (which will nicely teach you how to make a simple todo list in JS) I don't know of any Javascript learning resource that ever even mentions the super basics/fundamentals of programming, which are taking a problem or making a project, asking questions to best determine the specifics then breaking the project/problem down to it's smallest parts then solving the small parts using the syntax of the language you will be using. (keep this in mind while watching Practical Javascript, it does a good job demonstrating this, but never actually mentions it). 
Never said it was, just different
I've received that request from 2 people - I bet many more wanted it too - I'll work on this later this week when I'm not as busy - and hopefully release it here again with a score board! haha
Gotcha
&gt; Sidebars are often at the root of the app and many different components often interact with it. So yes, it belongs in the store and not in a component Unless components outside of the sidebar care about it being open or not, you should not put it in the global state. The sidebar itself is usually the only one that cares, and it will render its children appropriately. &gt; JS does not suffer from race conditions. It is single-threaded. Completely false. Here's a race condition: user clicks on a button, triggering a fetch, and then proceeds to interact with another part of the interface triggering a state update before the fetch returns. Could cause unexpected behavior when the fetch returns. If you develop a centralized state management library that linearizes updates, you just have redux again. The reason immutability is a part of redux is more because of how React handles component updates. If none of the object references change, then it assumes nothing changed and therefore nothing needs to update. Even those state updates that you claim are mutable are not. If you do a `setState` and carelessly mutate the prior state, then your components will not rerender. 
Awesome, thanks!
Meta TLDR: .host TLD is quite nice !
I blame people teaching functional concepts to beginners.
I'll give a very specific example from my app. I have an editor for a writing app and I have a button on it that says "Distraction Free Mode" which toggles the sidebar on and off. Btw, if you can't edit open the sidebar from anywhere else, where do you put the button to open it? &gt; Completely false. Here's a race condition: user clicks on a button, triggering a fetch, and then proceeds to interact with another part of the interface triggering a state update before the fetch returns. Could cause unexpected behavior when the fetch returns. Does immutability stop that? &gt; If you develop a centralized state management library that linearizes updates, you just have redux again. You will have Redux without forced immutability (MobX, VueX, a standard POJO). &gt; If you develop a centralized state management library that linearizes updates, you just have redux again. The reason immutability is a part of redux is more because of how React handles component updates. If none of the object references change, then it assumes nothing changed and therefore nothing needs to update. Well shit, that sucks. So you're stuck with Redux then?
Can't read it. It won't let my vpn through. So I won't read it.
Start with the simplest solution then add features. E.g. I need a list...so an array? Okay, I need to render that so create Dom elements for each one... You could go about this in any number of ways, even listing features you want first or mocking it up visually. It doesn't have to be perfect it's actually really good practice to rebuilt things using different methods and techniques. Try different methods till you find what works for you.
A lot of people are thinking of AngularJS when they see Angular. AngularJS sucks. Angular is great.
Hey nice app! One thing I noticed is that the iOS version is 42.2 MBs. I'm currently in the process of making my first RN app, and I've yet to get to the publishing step. Why is the app so heavy? From screenshots it looks like just a bunch of color UI without images. Does RN need lots of assets to run internally?
TLDR; opaque responses 
Hi, I'm a Redux maintainer. Let me clarify a few things. The primary reasons why immutability matters in Redux are: - UI update performance. Reference comparisons are the fastest way to see if data has changed, but that requires immutable updates so that there's new references. - Pure functions are easiest to test, because it's simply pass in parameters, check output (ie, functional programming concepts) - Time traveling. If a reducer mutates its state, then altering the history will behave inconsistently and unpredictably. I agree that writing immutable update logic can be annoying, especially if your state is deeply nested. That's why we recommend patterns like normalizing your state, or layering and composing reducers to make each reducer function responsible for a smaller piece. However, there's also plenty of [immutable update libraries](https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md) out there, with your choice of syntax (keypath lookups, Mongo-style update declarations, etc). There's also Immutable.js. Personally, I recommend https://github.com/mweststrate/immer , which uses ES6 proxies to let you write normal mutative code ( `state.someArray[5].someField = 123` ), and properly generates the resulting state update immutably. Time travel debugging is awesome, in so many ways. Simply being able to see a descriptive log of what actions were dispatched can tell you a fair amount about what's going on in the app. Being able to see the contents of an action and the resulting diff in the state is great too. But, beyond that, the actual "time travel" part is valuable for fast iteration on tracking down bugs and helping verify that your changes are correct. As a simple example, if your dispatched action was correct but the reducer logic is wrong, you can undo the action, fix the reducer logic and swap it in via hot-module reloading, then re-apply the action to see if the new result is correct. Always needed for all problems? Of course not. But, when you do need it, it's incredibly valuable. Per your question about team size: I haven't worked with larger teams myself, but I'd say that it's beneficial because it's easier for anyone on a team to see what updates are going on in the system, as well as the predictable code patterns that a typical Redux app should have. Ultimately, Redux provides tools that make it easier for you to trace when, where, why, and how your state has updated, _if_ you follow the requested constraints. If you never have a need to see what's going on inside your app, then you probably don't need Redux. For everything else, though, Redux has plenty of potential benefits.
&gt; When you create a car object with state variables and you want to increase the gas property, naturally you would increase the value of the existing property, right? With Redux, you would be creating a clone of the car with an increased amount of gas. Which method seems more intuitive to you? Actually no. That's not how immutable or shallow copies work. In your example it would result in the same car with an increased amount of gas, but physically has no pointer references so it doesn't make much sense. const A = { id: 1, data: { weather: 'stormy', day: 'monday', year: 2018 } } const B = { ...A, id: 2 } A.id === B.id // false A.data === B.data == true This is how Redux can detect changes in the first place, it can use bare reference equality. A component that only renders when state.data changes for instance can diff with a single ref-eq check, which is lightening fast. The "cloning" in the reducer stage is also no more than a pointer swap.
Hey, thank you for your contribution to the open source community. I should start off by saying I should apologize, I feel like I'm attacking something you are your team worked very hard on. But my belief is that the concept of immutability was forced. I will give just one more argument and I will leave it at that. What are videos games, if not massive state machines? You have the world map, the players, the NPC's, the weapons, and so much more. Each one of those is a state object. If applications as with states as complex as video games do not use or endorse immutability, why would it be any better for a relatively much simpler web application?
I don't want to read the article because of the click bait title. Is it worth it?
TL;DR: All three frameworks are perfectly suitable for writing TodoMVC in.
Thanks! Yes, I guess during the export it saves some extra data from the framework itself. To be fair, I haven't tried to optimize it, so it's basically standard right now. I do have some unused files I could get rid of, but that's just some unused code. I don't use any image assets in my app, just html/css styling and a font for all icons, so especially for that, it's very bulky indeed. I'm glad though, it's below 50 MBs. Not sure if React Native does it more efficiently than Ionic. I hope so :) But I bet, both have some options in place to slim the app further down. Perhaps I'll look into it at some point. But good notice!
You're absorbing a lot all at once. The first language is always the hardest, because you don't even know most of the core concepts. It's ok to feel overwhelmed. Just honestly think of an idea and start working on it. Here's an idea: do you know how browser dev tools work? Use them to inspect the HTML of a random website, then use JavaScript to change the content of random elements on the page. I literally do this myself sometimes when I'm very, very bored haha. Point is, it's a simple task, it uses very, VERY little javascript, and it's a cute way to get some more practice on your own.
You mean, that things like [https://patrickhlauke.github.io/touch/pen-tracker/](https://patrickhlauke.github.io/touch/pen-tracker/) do not work for you? You might not be getting a click event out of that but some others maybe yes? I have unfortunately no way to test it (no stylus), but that spec should deal specificaly with different input methods, pen/stylus included.
Agreed, and also it's important to actually define your requirements. If you are making a TODO list, is that list supposed to be stored in a database, or on the server, or in localStorage, or just go away when you refresh the page? That question will drastically change how the code is written, and figuring out the answers to those types of questions up front will help you figure out exactly what problem you're trying to solve. For an absolute beginner, it might be helpful to say "Create a TODO list which is just an ordered list (of simple strings) that exists in localStorage"
Mutation usually isn't a good idea, esp. mutating an input variable. The above simply rebuilds the object with resolved values, i don't think performance issues would ever come into play here.
Very well said.
LOL apologies for me just talking like this thread was about RN. I've been so tunnel vision lately I assumed wrong. 
Haha, np. It’s very similar anyways :P
What? First of all, it's a 3.5-4x performance difference: [see the comparison here](http://jsben.ch/VCdCo). You're making a new object every single iteration. Second of all, mutation inside of a function is fine, as long as you're passing a copy of the variable in: function performWork(input) { const newInput = [...input]; newInput[input.length - 1] = false; return newInput; } Yes, in the above, you are mutating `newInput`, but the function is still pure.
&gt; If you plan to maintain a project for over 2 years… Well, first off, good luck to you maintaining 2-year old code on the current JS ecosystem that changes so rapidly without rewriting it, as dependencies change and code gets deprecated. Someone is in for a shock when they actually hit the workforce. 
Thanks for the article!
https://gist.github.com/JaredCE/9beb2ece5ebb3bd160c018e1c8ff6221 I've been playing around with AOP in JavaScript to create a Logger that I can attach to classes and output what is going on (mainly instantiation, calling of functions and the results from functions). I've done this by creating a static class (static method in a class) that essentially is a factory that uses a proxy to trap the instantiation of a class (or just a function) and applies another proxy to the instantiated class to capture function calls on that class. I've had to tell it that it shouldn't try and apply itself, due to it being a static class and my not wanting to instantiate itself. you use it like this: const Logger = require('./Logger'); const Publisher = require('./Publisher'); const publisher = new Publisher(); const SimpleClass = Logger.ClassHandler(publisher, require('./SimpleClass')); const simpleClass = new SimpleClass(); simpleClass.shoutOut(); Where publisher has a publish function.
Wowo it works perfectly more or less. Thanks I'll look into it.
You can try to create browser extension. It uses only HTML/CSS and JavaScript. Then you will have feedback from users and you will constantly need to improve it while learning new things. Also, you can try to learn new language that is similar to JavaScript. For example, Solidity. That is language used by Ethereum virtual machine (EVM). It is similar to JavaScript, but you will need to learn few new concepts. More new thing and languages you learn, more experience you will get as you will be able to work with different technologies. Soon Opera browser for Android will start supporting Ethereum dApps. I started with Python and then I decided to learn JavaScript. It is most important to know possibilities of programing language. If you know what JavaScript can do, you will be able to find how to do it. As I mentioned before, try to create Chrome extension, that helped me a lot.
I also started with python and moved towards javascript. Much like OP I found I learned pyhton syntax well but struggled making anything meaningful. I started learning django to make webapp versions of scripts I wrote but picked up javascript instead. Learning a second language I found has helped me understand some of the more complex ideologies in programming such as OOP and using algorithms. I don't know why but seeing the same logic in a different language has helped crystallize some of the ideas 
I have written a Firefox extension that will automatically convert foreign currencies (not that many supported yet) to the local one (set in options): https://github.com/tehw0lf/currentcy This is achieved by tree walking the DOM using regular expressions to detect prices in text nodes and subsequently updating the original node with the converted value: "$ 11.00" --&gt; "$ 11.00 (EUR 10,00)" as an example with Euro as local currency. This was my first JS project, thus there surely is room for improvement. What I am curious about is whether there are pitfalls/bad practices in the code that I don't see due to lack of experience and such. My main language is Python, btw.
Vue also supports functional components, you did not mention it. Example: const TodoItem = { functional: true, render: (h, { props }) =&gt; ( &lt;li class={{ done: props.done }} onClick={() =&gt; { props.toggle(props.id) }}&gt; {props.value} &lt;/li&gt; ) } 
try pairing with someone if you can; sometimes it helps to explain where you’re blocked, defs going with someone through the end to end journey is a good learning experience; and there are usually code dojos / other meetups that you can attend. Would suggest you’re either super open to build what the other person has in mind or have a clear idea of an mvp. another thing you can do is just think w/o coding at the things you need to build and try to divide them into smaller bits; that you have a slight idea of how to start solving. settle for the most basic things you can do and go from there. 
Maybe you forgot to set the touch-action CSS property? Without that there are no pointer events. Unlike touch events by Apple or mouse events. People tend to forget that property.
All the good ones are taken. I checked.
I wrote a [Reddit-specific example](https://www.reddit.com/r/ChoosingBeggars/comments/8y0opt/rchoosingbeggars_but_in_javascript/) *(a simple circlejerk generator)* in /r/ChoosingBeggars.
https://github.com/CharlesStover/mssql-query-builder - There are probably alternatives, but I made this anyway. It's a Microsoft SQL Server query builder. Documentation hopefully explains it well enough.
I find it disappointing that people put so much focus on _code length_ differences that are, sincerely, ridiculous. It is _sad_ to read an explanation about how one piece of code requires fewer lines (1 or 3 fewer) but that some other code user fewer characters. It seems silly to point out such small differences. But more than silly, it reflects a lack of understanding about what is _good code_ and what it means for some code to be more or less _readable_ or _clear_.
It seems like a lot of the documentation on the crossorigin attribute (at least for images) doesn't talk about this. They mainly talk about how if you put an image from another website into a canvas without the attribute, the canvas becomes tainted. Why can't the service worker store images without the crossorigin attribute? Is it because the service worker is ultimately using fetch and you can access the blob information from the service worker? If anyone has more knowledge on this I would be really interested to know.
That is really friggin cool. I can think of a dozen projects I could use that on.
Ah, now that's appealing. With some simple and basic syntax rules to maximize use cases an minimize implementation woes. That would be awesome.
I initially forgot it but later I changed it to none to make sure it worked correctly. I'll study the git after I get some sleep to see where is the difference :-).
I notice you use `var`, but also `let`. you should be using `let` for variables that can be assigned to different references, and `const` for variables whose references won't change. Never use `var`. 