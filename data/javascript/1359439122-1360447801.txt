Have a look at Knockout.js - the data syntax binding takes some getting used to, but it'd have to be one of the best documented projects out there.
&gt;If AngularJS goes 10 "dirty checking cycles" in a row without stabilizing, it it throws that error and stops so you're UI isn't busy waiting forever. That's real interesting. Is that why [the stackoverflow thread I linked](http://stackoverflow.com/questions/14430655/recursion-in-angular-directives) is written this way, instead of [this example which is much simpler](http://jsfiddle.net/brendanowen/uXbn6/8/)? &gt;the great part about Angular is you only have to write this directive once. Then you can use it all over your application with different data. You realize that this is essentially what programming is, right? Write modules to be reliably reused? 
The article has some good info. However, I didn't get the part that was tailored to those that use backbone. The title may be slightly misleading. Maybe implement the same example with backbone so you can compare the two approaches. 
I find this an interesting position. Closure has had several of the concepts they use, under different names however. The template language stays the same, what is referred to as a decorator in the webcomponent spec is partially a decorator partially a renderer in the closure world. Let me explain. Decorators in closure work through two paths, one I can register a css class against the constructor of a component, allowing you to pick up the correct component implementation from pre-rendered html. The renderer is a singleton which all components share, but you can easily give a component a different renderer if the look and feel of one component is vastly different from another from another component of the same type. This makes it pretty flexible since you abstract your html structure away from your actual component implementation Closure also has a livecycle as described in the spec: * created -&gt; createDom * inserted -&gt; enterDocument * removed -&gt; exitDocument the one missing here being attributeChanged - something which would be nice. 
Right you are, sir: http://www.reddit.com/r/javascript/comments/17h22w/an_introduction_to_angular_for_backbone_developers/
Something like this? http://jsbin.com/udepul/1/edit
I imagine Angular + Meteor to work great together. Everything js then. (nodejs, mongodb) Meteor delivers the assets and has a "real-time" binding to persistent data in its supplied MongoDB light. Angular structures the app on the client side, does the routing and presentation. But this could be so bleeding edge that it will make you suffer.
&gt; Source maps are meant to show the original code by providing a mapping file that contains the original variable names, comments, whitespace (anything else?) That's incorrect. Source maps provide a mapping between the compiled/uglified/minified JS and original sources. In order for Chrome to show you the code, it needs to actually find the original source, and the source map tells it where to find it. There is no perfect way to reverse minification.
I think pretty code is more along the lines of using that bitwise NOT, or using float | 0, when you mean Math.floor. Math.floor isn't pretty or sexy, but its intent is obvious, and it's future-proof, because they're guaranteed to update the internal implementation of it if number encoding changes, or to put it another way, it's platform agnostic. Library calls will generally also have some type safety checks, and warn you when you're calling them inappropriately. Personally, I recommend avoiding any kind of bit operator shorthand (save them for when you really need to work with bits), and really just focusing on making your code as easy to understand as possible. The half second you spend typing now could save someone down the line hours of frustration, and it could be you.
Good article. I like that the more performant way is still perfectly readable and easy to maintain.
Nice. I thought about building something like this some tim ago. Will you keep it hosted on github?
HTML tags exhibit very little similarity. As such, I can't really be bothered; but if anyone's interested, what follows is the work I've already done to try to find common elements: [abipqus] # a, b, i, p, q, u, s h([1-6r]|tml) # h1, ..., h6, hr, html d[dlt] # dd, dl, dt t[dhrt](ack)? # td, th, tr, tt, track [uo]l # ul, ol r[pt] # rp, rt em(bed)? # em, embed bd[io] # bdi, bdo (h|opt|col)(group)? # hgroup, optgroup, col, colgroup (no)?script # noscript, script li(nk)? # li, link (fig)?(ure|(sec|cap|op)tion)? # figure, figcaption, section, caption, option (ab|w)?br # abbr, wbr, br t?head(er)? # head, thead, header su[bp] # sub, sup t?body # body, tbody t?foot(er)? # footer, tfoot (text)?area # area, textarea co(de|mmand) # code, command me(nu|ta|ter) # menu, meta, meter pr(e|ogress) # pre, progress de(l|tails) # del, details in(s|put) # ins, input ma(p|rk) # map, mark time # time a(cronym|ddress|pplet|udio) # acronym, address, applet, audio b(ase|lockquote|utton) # base, blockquote, button canvas # canvas [ac]s?i[dt]e # cite, aside d(atalist|fn|iv) # datalist, dfn, div f(ieldset|orm) # fieldset, form i(frame|mg) # iframe, img k(bd|eygen) # kbd, keygen l(abel|egend) # label, legend nav # nav (sty|tab|artic|tit)le # style, table, article, title o(bject|utput) # object, output [vp]ar(am)? # var, param ruby # ruby s(amp|elect|mall|ource|pan|trong|ummary) # samp, select, small, source, span, strong, summary video # video Most are strict, but some will match negatives (e.g., `[ac]s?i[dt]e` will match `asite`, etc.).
What have you entered?
For most of my one page home projects the HTML is 2 lines. &amp;lt; body/&gt; and a line to get my main script file. Everything is then generated from there. A lot tidier IMO. Edit: Just to clarify these are sites just for me, usually for experimental or educational purposes. I am not suggesting this is a proper way to develop a site (I don't know enough about that to have an opinion one way or the other). 
How are you supposed to both match and not match: "acronym", "applet", "q" and "tt".
That is a valid question...
No bug mate, its cool, just flashing lights induced a stroke and I cant feel the left side of my face
Pretty much any server-side stack should work well. I'm currently using ASP.NET MVC 3 with Angular. For client-side, Angular seems jQuery oriented. [Zepto.js](http://zeptojs.com/) and similar others should also work if they are based on jQuery.
It does seem to work on Firefox; you just need to input the coordinates manually, rather than clicking and dragging.
OH GOD NOT THE BEES
I had this issue in chrome as well with the same solution.
| I just had a seizure FTFY 
Common causes to these kinds of bugs. ;) http://en.wikipedia.org/wiki/Stroke#Causes
thanks
Wow that's some good patterns, good work! Oh, and if that's your first program with js, that's one fine code too.
I fully support the technical content of the article, but the author does themselves a disservice by trying to interject the played-out meme. It's old, it's unfunny, and it's not even really applicable; in short, the gimmick detracts from the overall quality of the the post.
I keep hearing the argument that the _type_ of app you are making has some bearing on whether you should use Backbone or Angular; could you please elaborate on what the type of app that suits Angular best is and why it would be better than Backbone?
My best take-away from using jQuery is the pattern of treating everything like a collection, where operations act on each item of the collection but can be called from the abstracted collection interface (so that you can leverage patterns such as the implicit iteration). I don't want to write: "query for some items, and then iterate each item, and during each iteration call function foo() on the item". Instead, this is so much easier to conceptualize: "query for some items and apply function foo() to each item".
Interesting to hear from someone else that's using a MS stack for the server. I'm currently developing using Angular + ASP.NET MVC 4 (WebAPI), it's not my personal preference; I'd much rather be using nodejs, but other developers aren't up to speed with their JS!
Can you give me the website name so I can google it? Ow, nvm. No personal attack intended, rather a funny comment still showing the point was intended.
What type of app benefits "heavily" from data-binding? Why is Angular better suited for this than Backbone? Would any of the data-binding plugins for Backbone (stickit comes to mind first) not put it on equal footing?
Yes. the high-traffic / professional sites other than Yahoo that come to mind are nfl.com, zillow.com, and smugmug.com. 
Agreed, and good work - keep this up. I haven't implemented Web Audio API stuff (yet?), but am keeping an eye on it. It's definitely the way to go for games when you may need low latency, high-performance playback, truly-seamless looping, and low-level data access.
Example that we can actually look at?
Cool, the 2D demo works right as soon as I open the browser and my console. It would be nice if the touch emulation worked without having to open the console, but I suppose that's a limitation in Chrome. Nice work! :)
I'll try to give you a mile high overview. JS is: * garbage collected * dynamically typed * weakly typed * based on prototype inheritance, which is quite a confusing concept You can slap some JS inline on the page using a script tag or include a separate .JS file. The browser will run any JS it finds as soon as it finds it. Its typical use is to manipulate the DOM (document object model) which is a representation of your HTML page. So with JS you can add, remove or modify HTML elements. You can also handle events generated by these elements like mouse clicks and stuff. That's the basis of interactivity on the web. A game changer for JS was when it became able to send and receive HTTP requests: you could then communicate with the web server without reloading the entire page. And through DOM manipulation you could just update the page with the new data from the server. Since Google triggered the second browsers war when they launched Chrome, the pace of innovation has increased so now you can do all kinds of stuff in JS such as 2d and 3d graphics (canvas), lower level networking (websockets), audio, etc... But the available features are still very much dependent on the web browser so anything too advanced will not be available to all. I don't have a book to suggest but there are tons of tutorials around. The cool thing about JS is to get started you just need a text editor and write a simple HTML file, you can open it locally in your web browser and see your stuff right away. Just go around reading some tutorials, give yourself a small project to accomplish and go on your merry way.
Duh. Fixed: - acronym, applet and tt should all fail. They aren't supported any more. - q should match.
This, and for the person downvoting me, explain yourself first?
False. Google's spiders now run JavaScript to accommodate pages that are generated using JavaScript. edit: http://searchengineland.com/google-can-now-execute-ajax-javascript-for-indexing-99518
No it isn't, he mentioned it. My first js code was so spaggheti you could almost eat it :P
i've just started https://leanpub.com/javascript-allonge the javascript allonge ebook. It's a better intro to javascript from a prototype perspective than what i've read before. The way javascript uses functions and "classes" is significantly different than my original C++ background. Also nodejs uses a reactor pattern for not blocking on I/O. There is a good library in python for this called twisted. If you want some C++ reactor pattern you can grab you some boost Asio and a strong cup of coffee.
Yo dawg, I herd you like adding numbers - so I made it possible with your precious jQuery http://rezoner.net/labs/calculate/
You are 100% correct and bring up an interesting point of migrating your code to a new version of the language. I guess I still see myself as an ametur programmer (even though I've been doing it 15 years) so I'm always looking for the "tricks" that the pros use. Problem with this is, like any language, there are many different routes to accomplishing something. (There's got to be a more elegant way of saying that)
I'm gonna take a wild guess that this is not their first rodeo.
FYI - does work on IE10. Also, now I'm seeing flashing lights all over the place. Help!
Super fun! Kudos
http://mlkshk.com/r/2KNX
Not sure why I got downvoted; The other big JS audio libraries I can think of (SoundManager2 and jPlayer) both have flash fallbacks. I can understand Howler focusing on a better experience for devs that only want to deal with modern browsers (Flash audio *will* suck your life away), but most web devs still need to consider older browsers...
Sweet Jezebel that animation is priceless.
It's more realistic for Flash to do "basic" playback of audio. While Flash 10 does have a lower-level audio API, I suspect that as a fallback it would not perform to a level expected by game developers due to the JS/Flash bridge, among other things.
Sure - at work but i'll see if I can link to dropbox files from my phone. https://www.dropbox.com/s/f1xkhim7nvwgwu0/index.html https://www.dropbox.com/s/7qygisubv7a734r/main.js I have basically these files saved down a little bit more evolved now as a project skeleton that I just copy out when I want to try out something new. 
Yeah it's more just for when I'm messing around with new ideas and trying to prototype quickly. 
Unfortunately I've got nothing online but if you scroll down I've linked an old example with my first experiment in minimising HTML. 
Thanks for the info, might as well fix it now :) Another thing with firefox is that it seems to show text fields where webkit show's sliders. I wanted sliders to have immediate feedback on the settings, but oh well..
Yeah.. This bug is related to the user hardware. I tried to report it, but the developer never replies to my messages :/
Nice! &gt;Chrome and upscaled, sharp canvas pixels (nearest neighbor interpolation). Possible? Or do I have to make a webgl framgment shader? Chrome supports the CSS `image-rendering: -webkit-optimize-contrast` rule but apparently only on OSX. ( [Bug106662](https://code.google.com/p/chromium/issues/detail?id=106662) ) There's some [details on MDN](https://developer.mozilla.org/en-US/docs/CSS/image-rendering), with a canvas-based example workaround posted at the bottom. As for planning, I just read about ["when to write bad code"](http://www.brandonsavage.net/when-to-odabad-code) earlier today, so linking to that seems appropriate to your question.
Syntax for one. I can never seem to figure out how to properly dec variables and create objects in the usual syntactic sugar style. It also is confusing for me to figure out how the flow of the script runs. With languages like Java and C there's a main method. I've never really nailed down the proper style for the entry point of a script. Plus, what the hell is a DOM?
&gt;That's called pre-optimization The term you're looking for is "premature optimization" and using architectural patterns isn't such a thing. &gt;Actually, I think fad chasing hipsters are really the reason MV* frameworks are popular. No, it really just helps writing more complex applications. If the DOM is your "source of truth" things get really weird very quickly. It also creates very tight coupling and it's impossible to test. &gt;[get off my lawn] Look, if you only want to include jQuery, a few jQuery plugins, and then glue it all together with 20-100 lines of code, you won't need any of that. For some websites, that's all you need. However, things start to look very differently with 1000 lines, 5k, 10k, or even more than that. You have to find ways to keep this manageable. You need clear separations and a way to communicate this with your team in a crystal clear way. Architectural patterns happen to help with those things. Also, do you think it's feasible to load 50 separate files and then two dozen uncompiled templates? It's not. It's very slow. [Again, this isn't premature since everyone has benchmarked this kind of thing before. We know exactly what kind of impact this optimization (or the lack thereof) has.] Besides, do you really think it's a big deal to include more build steps if you're already using a build script? It's not. Automation is a wonderful thing.
I'd say prototypical inheritance isn't a confusing concept at all. It is just a concept that is hard to grasp coming from class based inheritance. The best way to learn it is to forget everything you know about classical inheritance.
Give codecademy.com a shot.
You might want to make note of it in your description? Not safe if Epileptic* or something?
This is what I've got: /^([abipqsu]|a(bbr|ddress|rea|rticle|side|udio)|base|b(d[io]|lockquote|ody|r|utton)|c(a(nvas|ption)|ite|o(de|l(group)?|mmand))|d(atalist|d|el|etails|fn|iv|l|t)|em(bed)?|fi(eldset|gcaption|gure)|footer|form|h(ead(er)?|group|r|tml|[1-6])|i(frame|mg|n(put|s))|kbd|keygen|label|legend|li(nk)?|ma(p|rk)|me(nu|ta|ter)|nav|(no)?script|o(bject|l|pt(ion|group)|utput)|param|pr(e|ogress)|r[pt]|ruby|s(amp|e(ction|lect)|mall|ource|pan|trong|tyle|u(b|mmary|p))|t(able|body|d|r|rack|extarea|foot|h|head|i(me|tle))|ul|var|video|wbr)$/i|i(me|tle))|ul|var|video|wbr)$/i Its 521 characters and i don't see any way to make it smaller without loosing the perfect tag match. I don't really think this was a good challenge, it doesn't seem like there would be any use for this and its not very interesting Regex that comes out of this.
This is a good introduction on promises, except for its characterization of non-promise-style callbacks. They usually look like this: myCall(arg1, arg2, function(error, result) { if(error) { // Handle error } else { // Handle result } });
Any apps that have a good amount of UI and state that need to be frequently synchronized. Yes, you can do this with backbone, but on average, it tends to take about 10 times the code. I'd submit that most apps can make use of data-binding, but if you're doing a game or something that involves a lot of video or custom components, data-binding might not be especially helpful. I haven't seen any data binding utils in Backbone that are implemented as well as Angular in terms of ease of use, speed, and integration. But I'd love to be proven wrong, and will be sure to take a look at stickit.
This is the most useful thing I've read today.
I've seen it done both ways. jQuery.ajax is one example that uses separate callbacks for success and failure: http://api.jquery.com/jQuery.ajax/
Agreed. It's hard to un-learn classical OO concepts but once you do, it's freeing. Additionally, I recommend that beginners try not to concern yourself with design patterns if you're still learning javascript. Many attempts to implement classical patterns in javascript just plain suck. Until one can compose objects comfortably and sensibly, patterns should be ignored.
&gt; when you hover over the image, you **also** activate the hover state of the title. He wants both activated, which is exactly what my code does.
Yes. The code example under the "Performance Implications" heading is the best illustration: when you're applying CSS changes serially, rather than all at once, then that can indeed be a code bottleneck. It's not simply the extra loop that's the problem; it's that you're doing something to DOM nodes in each loop, and there's an overhead each time you make a change to a DOM node. Best to pay that cost only once rather than multiple times.
But Node.js popularized the one I described, so there are far more libraries using that pattern.
I'm of the opinion that [everyone should just follow Promises/A+](https://github.com/promises-aplus/promises-spec).
That blacklisting function is already going to get some use later today.
works in opera except the trail disappearing
It never was "open source", the source was public. The github repository is private currently, but all customer get access. So if it's that access to source code is required, that's still there. I'm not aware that yFiles HTML allows any source access, though I could be corrected.
Another great read that puts it all into perspective: https://gist.github.com/3889970
The [Mozilla Developer Network](https://developer.mozilla.org/en/docs/JavaScript) is a good place to start reading. Since you come from a strong programming background, you would probably find it useful to distinguish between JavaScript-the-language and JavaScript as it is used in web browsers. To get a feel for the language syntax, try looking at [Node.js](http://nodejs.org/) (a server-side JavaScript framework) and [Rhino](https://developer.mozilla.org/en-US/docs/Rhino) (a command-line JavaScript interpreter). You'll find that the language is a bit like LISP, with its nested environments and first-class functions, disguised in Java-like syntax, but with a prototype-based rather than class-based object system. When JavaScript executes in a browser, you have an API to code to. Almost everything of interest in the API will be in an object called ''[window](https://developer.mozilla.org/en-US/docs/DOM/window)''. Some interesting bits of the API to peruse are ''[window.document](https://developer.mozilla.org/en-US/docs/DOM/window.document)'' (which lets you inspect and manipulate the currently loaded content using the Document Object Model, or DOM, API), ''[window.location](https://developer.mozilla.org/en-US/docs/DOM/window.location)'' (the browser's current URL), and ''[window.navigator](https://developer.mozilla.org/en-US/docs/DOM/window.navigator)'' (information about the browser itself). The browser executes JavaScript code when it sees it while loading the page. Once the page is loaded, however, you also receive callbacks on certain [events](https://developer.mozilla.org/en-US/docs/DOM/event), such as ''onload'', ''onresize'', ''onclick'', ''onkeypress''. The old style of defining callbacks looks like &gt; window.onload = function() { alert("Loaded!"); } (By the way, ''alert'' is short for ''window.alert'' — this works because your code is executing in a [scope chain](http://dmitrysoshnikov.com/ecmascript/chapter-4-scope-chain/) in which ''alert'' resolves to ''window.alert''.) Unfortunately, with JavaScript, you'll often see an old way and a new way of doing things, because the old way was developed during the chaotic early days of the web without much planning. The new preferred way of defining callbacks would be &gt; window.addEventListener('load', function() {alert("Loaded");}, false); The trade-off is that the new approach is not supported by crappy ancient browsers. Therefore, you'll likely want to learn a higher-level library such as [jQuery](http://jquery.org/), which presents a nicer API and masks the differences between browsers. In jQuery [that example would be](http://api.jquery.com/load-event/), &gt; $(window).load(function() { alert("Loaded"); });
The way Node.js works is it uses the V8 JavaScript engine developed by Google where they bound a ton of C++/C (maybe java not sure) functions which allows you to use JavaScript as you would use for example LUA? in game making. Its basically the same with the browser just a different wrapping.
That and there isn't that much call for it.
I just wish someone would standardize JSON3 and include support for dates...
&gt; on average, it tends to take about 10 times the code Baloney &amp; hogwash ;) Data-binding has been around for a long time, and part of the big idea with working on high-performance JavaScript applications is that you don't want "too much" of it. Imagine a rich JavaScript application with a lot of UI that needs to be frequently synchronized. A fully data-bound version, with each HTML element, attribute and style being wired-up to the corresponding attribute (real or computed) in the model, will have a ton of code configuring the bindings, and tends to suffer from performance problems in so far as changes to the model cause a ton of small computations and incremental UI updates. Now imagine the version of the application that has decomposed its UI into coarser-grained logical components. Instead of having comprehensive data-binding, you favor re-rendering atomic chunks when necessary. Instead of touching the DOM a hundred times during an update, you only need to touch it once, and are doing much less computation to determine what needs to be altered in the first place. That's the method that Backbone tries to encourage. TL;DR, instead of (in pseudocode): &lt;tag ng-type="widget"&gt; &lt;tag ng-attr="widget.title"&gt;&lt;/tag&gt; &lt;tag ng-attr="capitalize widget.author"&gt;&lt;/tag&gt; &lt;tag ng-attr="sanitize widget.item.description"&gt;&lt;/tag&gt; &lt;tag ng-attr="sanitize widget.item.content"&gt;&lt;/tag&gt; &lt;tag ng-attr="list widget.tags"&gt;&lt;/tag&gt; ... and so on ... &lt;/tag&gt; ... where each of those bits needs to be tracked, computed, and updated in order to get your next frame of UI, instead you start with: widget.on 'change', render ... and if you want to get more granular than that in the future, you can, as needed.
Just for the record, I agree with everything you said, and the get off my lawn synopsis made me LOL. That said, I think Javascript is entering a phase like Java did in the early 2000s where the 'experts' promote a certain way of coding (EJBs, UML, miles of XML, etc.), and the fadsters repeat it dogmatically to the detriment of the entire community. Not every web app needs to be designed to scale immediately, even mobile browsers can request a dozen 3k files in seconds. When you get to 1000+ lines of code, then you can refactor - but then the LoC should almost always go *down* not up.
Just remember to run your own race. I think in the programming world in particular, there are basically two buckets of people: * People who suffer from [impostor syndrome](http://en.wikipedia.org/wiki/Impostor_syndrome) * People who suffer from the [Dunning-Kruger effect](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect) But if you don't already think you're great, what tends to happen is that every year, you'll look back at code you wrote from the year before and think it's total crap, and it's because you're improving. If you're reaching out for advice, you're probably improving faster than usual. But clever shorthand isn't what you're looking for. It's a professional hindrance. Coding professionalism is about working in teams. Communicating clearly, via source code comments, good function and variable name choices, clean style that makes your code easy to scan and read. Writing the code you mean, instead of using clever operators that coincidentally land on what you want right now. Writing tests, catching errors, making sure that nothing fails silently. That's my biggest problem with those bit operator shortcuts. They'll fail on weird input, and it won't be clear what happened. And you have to think about them a lot when you see them in code. And what did the author gain out of it? Probably just got to feel cool for a second. Anyway, if you want to save time coding, what you really want to look into are ways to always be making progress. Things like improving your tooling, getting rid of any tedious pain points in your workflow. Look at things like [Bower](http://twitter.github.com/bower/) package management, and [Grunt](http://gruntjs.com/) task automation. Look at [Yeoman](http://yeoman.io/), which provides a simpler interface to both of those, and a bunch of scaffolding generators. Get good with a good text editor or IDE, and make snippets/macros for things you do a lot. I can't even imagine how much time I'm saving these days using [Sublime Text](http://www.sublimetext.com/) with [real time linting](https://github.com/SublimeLinter/SublimeLinter). Get good with source control and testing frameworks. It's like when you see rock climbers put in those anchors for protection. Source control provides protection from falling all the way. You commit all the time, and you can go to whatever stable point you want, whenever you want, so you're free to experiment and break stuff, because you're safe. Unit tests help keep your orientation, so when you do need to make a drastic change, and you see exactly what you're breaking, if anything, and it'll help you triangulate where something was probably coded poorly. That all said, the behavior of the || and &amp;&amp; operators allows for some handy shortcuts sometimes. It's something that only requires that you know the language (the return behavior of the operators, and the truthiness of the operands), rather than the language, and bit encodings. https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Expressions_and_Operators#Logical_operators edit: added some links to tools
&gt;Baloney &amp; hogwash ;) Here are some examples showing this. [JavaScript Sonic Boom](http://koglerjs.com/verbiage/mma) and [TodoMVC](http://addyosmani.github.com/todomvc/). The "sonic boom" article is able to implement a comparable 1000+ LOC backbone app in Angular in less than 100 LOC. In TodoMVC, the comparison is Angular's 287 LOC to Backbone's 1998 LOC. The ratio is about 1:7. If you don't believe me, try it yourself. &gt; and tends to suffer from performance problems in so far as changes to the model cause a ton of small computations and incremental UI updates. Your intuitions about performance a bit naive. Data-binding can also break components into chunks to improve performance. Data-binding can also group together DOM writes. In fact, Angular does both of these things. ~~Here's one benchmark showing that [Angular beats out backbone in most cases](http://jsperf.com/angular-vs-knockout-vs-extjs-vs-backbone).~~ If you don't believe me or disagree, write your own benchmark.
holy hell, dude, put it in a jsbin or a jsfiddle or something. And be more consistent with your event handlers: you've got one `.on("mouseover")` followed direc `.mouseout()`. Also, you don't *really* need jQuery for so simple of a task. It just makes it quicker to write.
I'd love to look at your benchmark ... but you do realize that in the JSPerf you linked, the "Backbone" benchmarks are actually calling `SetKO`, right? There's no Backbone code on that page.
Woops, thanks for pointing that out. Let me go find/write a better one.
There's a few things misleading about referencing the Sonic Boom article (though I'm honored you remembered it). First: There's additional functionality in my implementation: * Multiple templates, which adds quite a bit provided you included them. * The search string is applied to the URL in order to maintain my mapping of model/collection to URL string * App modularity--the phone tutorial and email tutorial are sharing the same index.html Second, my implementations were pretty heavily commented. That said, I do regard Backbone's render boilerplate as a problem to be solved. My reddit front-end is on the horizon ;) You've made me curious about the exact LoC count in my phone tutorial. Brb. --- Ok, so **only the phone code** without my paragraphs of comments comes to roughly 300 lines of code--this is in phones.js. index.js is mostly mock API code, if you're curious. Then there's 100 lines of dumb templates. So, 400 LoC against 50 lines (by my count, stepping through [this index.html](angular.github.com/angular-phonecat/step-11/app/#/phones)) in Angular. I'm pretty sure I can beat the pants off of that TodoMVC implementation. 
Yeah, I like passing the object better myself too
Memes are not for everyone and yes this one has been around for a while. I tend to be behind with the times... so for me this is about right ;) I've mostly had a good reaction to the meme, but I do appreciate your feedback. I'm glad you liked the content and could look through the other stuff. Have a great week
Thank you ;)
Yup, nicely said!
Well, as I said elsewhere, I am going to 'complete' this Introduction in another article where I make a Backbone reddit front-end for a full side-to-side comparison. I hope you don't feel I've shied away from giving Angular a fair chance. I concede my phones tutorial is more verbose. But at the end of the day people have to decide which framework to use. (In particular, _I_ have to decide which framework to use to build my next major project.) And I've got opinions and recommendations. I do believe AML is inadvertently its own programming language. Also, I'm tired of "You should try Angular!" in every other topic with "Backbone" in the title :P I've enjoyed talking with you and hope we get a chance to continue sharing ideas. 
&gt;&lt;tag ng-attr="capitalize widget.author"&gt;&lt;/tag&gt; Ack they're all AML library function calls masquerading as html attributes! 'Smart' templates mean coupling between template code and javascript code. Fire and forget renders are less developer strain. --- I haven't been able to examine Angular's or Backbone's benchmark performance. I have this slight sensation of lag on Angular's part from clicking around the Angular docs, but that might be biased imagination. _Does_ Angular touch the DOM once per attribute if every field changes? I'd bet against that, every time I've asked a question like that Angular's had it cleanly covered. 
Krogler, I think your conclusion (that you philosophically disagree with AngularJS's template system) is totally reasonable. I take it in good faith that you gave Angular a shot. My frustration was more so with people who make vague or generalized claims of "slowness" or "bloat" without actually building anything. I'm looking forward to the rest of your article, and I'm curious to see how you implement the recursive views in Backbone. I'm not sure that's something I've seen before. &gt; Also, I'm tired of "You should try Angular!" in every other topic with "Backbone" in the title :P I can see how that's annoying, but I think the appropriate response is to ignore it rather than instigate Yet Another of These Threads. Assuming people have good intentions, I don't think it's troublesome for people to say "check out AngularJS" when talking about Backbone. There are a lot of cases where people doing things in Backbone might be able to do them more quickly with Angular. You really won't know until you try though. There are always tradeoffs, which is why I'm big on "try as much as you can, see what fits." Likewise, I've enjoyed this discussion. I just don't want to be having it in every thread. :P
To build off of this, if you have: `var err = new Error('Oh noes, ERROR');` `JSON.stringify(err) === '{}'` Probably the most annoying bug I've come across recently.
The ^ character is a regular expression anchor symbol which matches the beginning of a string. So, `class ^= "q"` matches elements with class names that begin with 'q'. `e.type` is the type of event that occurred. `boolean ? something : something` is called the ternary operator. It's essentially a compressed if statement. It starts with a boolean, and if it's true, it evaluates whats on the left of the `:`, otherwise, it evaluates whats on the right. The code is basically listening for a hover event on all elements that have a class that starts with 'q'. When this event fires, it grabs the class of the element that was hovered over (ie. q1, q2, etc). It then sets the background color on all elements with this class (ie. itself and matching words), depending on whether or not a `mouseenter` event occurred (hover consists of `mouseenter` and `mouseleave`). 
not without selling the farm, it's true. Here's what I've found: * yfiles: it can do everything but it's extraordinarily convoluted and complex^4 - trying to stuff heavy handed java OOP into javascript; extremely poorly. But it has all the features; if you can swim through the docs. * jsplumb: very KISS which is great. It also has wonderful integration with html content (as in I can use backbone with moustache templates with it without effort) and really fits well without trying to be The Single Application Framework. Unfortunately, it lacks layout engines, undo stacks, and various other "hard" things. mxgraph (your stuff) - it is * not convoluted * has source I can read without effort * has an undo stack However, here's some things I've had issues with: * Automatic or at least relative layout of nodes.^1 * Highly custom edges.^2 * Nodes growing automatically based on HTML content inside it.^3 I've been toying around with it more the past two days and I'm starting to drift away from it ... but I may come back if yFiles is too much of a monster. ----- ^1 so [here](http://www.yworks.com/products/yfileshtml/demos/Complete/demo.yfiles.graph.collapse/index.html) ... look at how the layout engine effortlessly makes room for the nodes as they expand and contract ... automatic layout is really where they shine: http://docs.yworks.com/yfileshtml/dguide/yFilesDGLayout/layout.html ^2 I don't know if there is an (easy) way to do this. Basically, I need to be able to have edges that have vertexes and follow a number of geometric and transformation constraints; and then some how leverage the built-in layout systems to be ok with that. Right, I know it sounds impossible. ^3 I realize that this means that things would have to be vertically, or horizontally re-ordered in some annoying dynamic way ... and that's really hard. But yeah, that's why I want to pay for a library to do it for me. ^4 Here's a line of code from the demo: // Create a SimpleNode which provides the sourceport for the edge but won't be drawn itself var /*yfiles.graph.SimpleNode*/ newSimpleNode = new yfiles.graph.SimpleNode.WithLabelsLayoutAndPorts(yfiles.support.EmptyListEnumerable.INSTANCE, yfiles.geometry.ImmutableRectangle.EMPTY, yfiles.support.EmptyListEnumerable.INSTANCE); I wish that was cherry picked. They all look like this; no demo is under 500 lines of kludge. PS: It's worth noting one thing that yfiles can't do for some totally invalid reason: http://live.yworks.com/yfiles-for-html/demos/Style/demo.yfiles.ui.htmllabel/index.html that (in IE)... totally silly; JSPlumb has no issues with it ... but that's because it moves around absolutely positioned divs and tosses svgs in where they need to be (which is really slick) yworks inability to architect their library like that may be a death blow to yfiles if I can't get around it. In fact, I have great suspicion that much of the code was auto-generated using some language converting tool; I see a bunch of indicators in my basic reverse engineering. (I can't have something be convoluted, complex, kludgy AND a black box ... that's just too much)
This is a good talk but it's ~4 years old now, so a lot has changed in that time in the world of JavaScript. Which is not to say Best Practices have changed, but exactly how much of a performance hit you take for certain things has.
Thanks so much! Great explanation :) 
Thanks so much for your help! I really liked the simplicity of this solution. I implemented this by adding a div with a class of "post-container" over the Title/Image combination. 'Lo and behold: it worked! Can't thank you enough for the help!
Well, there are a number of issues with this. But the main one is that there shouldn't be any `for` loops. The `keypress` event is called every time a character is typed, so what's happening here is that when you press any key inside the text box, it's looping over your comparison 20 times. If you press enter (which is the key that you're looking for), you're going to get that alert box 20 times. If you want to have a specific number of questions, then keep a count outside of any functions. If you want to get fancy, add a skip button and keep track of the number they got correct. var stats = { count: 0, max: 20, correct: 0 }; The big piece that you're missing is a function that will handle all of the changes when the user gets an answer correct. You will call this one time in your `$( document ).ready()` to start the quiz. function next( skip ) { skip = skip || false; // Update stats. stats.count++; if ( skip === false ) { stats.correct++; } // Check if we've reached the maximum number of questions. if ( stats.count == stats.max ) { // Remove the keypress event. $( '#answer' ).off( 'keypress' ); // Here you could hide the input box altogether and then display // their stats. return; } // Generate a new random number. random = getRandomInt( 0, capitals.length - 1 ); // Update the #country text and clear the #answer value. // You already know how to do this. return; } Now whether you're checking the answer or they click a skip button, you can just call `next()` and it updates the stats and text accordingly. You can now ditch the `for` loop in the `keypress` event. $( '#answer' ).on( 'keypress', function( event ) { var key = event.keyCode || event.which; // If the user isn't checking their answer, just exit the event. if ( key != 13 ) { return; } // Compare the answer using toLowerCase() because we // don't know what letter casing the user will input. Inside // an $.on() event, $( this ) will refer to the element that // the event is attached to. if ( $( this ).val().toLowerCase() == capitals[ random ][ 0 ].toLowerCase() ) { // Correct answer. We can omit passing a boolean to next() because // the function will assume the answer was correct. next(); } return; });
That is MIND CANDY! Now, all we have to do is link it to audio to make a cool visualizer!
I will say though, that this isn't the best way to write it. There's no need to make the h1 variable if it's only going to be used once. I guess maybe for some easier-to-read code. I'd also make the background color default to "transparent" instead of white. Yeah, chances are the background behind the text will be white, but if it's not, it will then highlight the text as white when you mouse off it.
How about the best advice of all: don't use it if you're targeting Safari and iOS. It won't work. This caused all sorts of silent bugs for me in iOS because the JSON object didn't work. The solution was to use a JQuery extension.
This is exactly what I just came to say. He was testing in Chrome v1. I'd be really curious to see some of his same browser tests in modern browsers to see how the speeds have changed. If you look just in the examples he gave, more recent browsers of the time were significantly faster, I can only imagine the trend has continued and a lot of the optimization techniques of the time wouldn't make any noticeable difference today.
Not 100% sure on these myself but here's my theory anyway var b = "" &amp;&amp; "tentamen"; comparisons return true or false, as 0 is a falsey value, it reads to us humans something like var a = 0(false) or "tentamen"(true) a = "tentamen" b is because "" is a falsey value so the &amp;&amp; comparison fails c again "" is a empty string(false) but "tentamen" is true (similar to a) d because false &amp;&amp; true = false so after the comparison is complete the results type is converted back to its original int. Try these out in the console: var d = 0 &amp;&amp; "" var d = 0 &amp;&amp; false var d = 0 &amp;&amp; true I am no where near confident with my answer but hope if I am wrong someone will point me out :D http://james.padolsey.com/javascript/truthy-falsey/ for more info on true/falsey values 
I've seen a few talks and posts from Nicholas Zakas, I really like his style. I'll check this video out even if it's old.
Great link. Thanks. I think I got it now. 1. The left part of the binary operator( &amp;&amp;, ||) determines the datatype the 'false' will be converted to *if* the statement evaluates to false. 2. 0 and "" are considered false, any other is true (in this example) 
When writing a self invoking function like this (function($) { //... })(jQuery); JSLINT complains, if we write it like this (function($) { //.... }(jQuery)); JSLINT doesn't complain, can someone tell me why? 
ES5 (IE9+): function MyClass(){ this.someVariable = 10; } MyClass.prototype = { get someVariable(){ return this._someVariable; }, set someVariable(v){ this._someVariable = v; } } ES6: const someVariable = new Symbol('someVariable'); class MyClass { constructor(){ this.someVariable = 10; } get someVariable(){ return this[someVariable]; } set someVariable(v){ this[someVariable] = v; } } 
Also here's a useful thing: [Dense JSON stringifier](https://gist.github.com/4217856)
As soon as I saw a chart saying Firefox 3, I had a WTF moment and bombed out at that point. Would very much like to know the present state of things!
[jQuery performs a loop](https://github.com/jquery/jquery/blob/master/src/css.js#L112) when applying a style to a jQuery object contains multiple elements, calling `.css()` on every element individually. So the only difference is a pure JS loop vs jQuery each(). [But jQuery's each() is already optimized](https://github.com/jquery/jquery/blob/master/src/core.js#L557). So performance-wise, the difference will be negligible. 
Rephrased it :)
Can't tell if troll or closed-minded NodeJS zealot... NodeJS has a fraction of the adoption and project lifespan that jQuery has had.
You're way too vague for me to tell if you're serious or not; what do you mean by "won't work" and "didn't work"? Do you have any repro code?
You almost got it right, but javascript does not convert a value to another datatype using logical operators. I recommend you to read [this](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Logical_Operators ). In short: a || b and a &amp;&amp; b always return either a or b. a || b returns a if a is truthy, and returns b otherwise. a &amp;&amp; b returns b if a is truthy, and returns a otherwise.
They are testing your understanding of using boolean operators, because JS boolean operators [return the _last value_](http://en.wikipedia.org/wiki/Short-circuit_evaluation); while in many languages -- I'll use PHP as an example -- using an operator such as `&amp;&amp;` or `||` can only result in a boolean: // php 0 || "tentamen"; // === true "" &amp;&amp; "tentamen"; // === false "" || "tentamen"; // === true 0 &amp;&amp; "tentamen"; // === false However, in JS, using `&amp;&amp;` or `||` will return the _last value_ from the expression. The logic follows the same basic rules, but the result is what's different.
I like your approach. Curious to know what you, and everyone else here, thinks about coding on the fly (like on a whiteboard) in an interview. Do you do that? Is it helpful to the interviewer?
This this this! It's also why JS performance is hard. What was true just 6 months ago can now be flat wrong. Over the last year I've seen the difference between string concatenation vs array.join trick inverse, and normal arrays outperform typed arrays.
Yes, the returning of non-boolean values was a mystery to me. But it all makes sense now. 
It doesn't really have much of a use, and is in fact usually harmful to use since `new Boolean(false)` is truthy (all objects are truthy except document.all). Here's the ES6 implementation of Boolean https://github.com/Benvie/continuum/blob/gh-pages/engine/builtins/%40boolean.js The reason it exists is because all values in JavaScript except null and undefined can be treated like objects. That is, you can access properties on them without it causing an error. true.toString() // "true" To maintain symmetry with the rest of the builtins, it is possible to create actual Boolean wrapper objects, but that doesn't indicate it's a good idea.
You almost never want a Boolean object. I'm sure someone, somewhere has a reason to use them but most of us do not.
Typecast.js resolves all of these kinds of confusion. While it may be fun errata, if you want to use JS for development, its better to use a typecasting library than try to memorize all of the various eccentricities of Javascript. http://typecastjs.org
Typecast.js resolves all of these kinds of confusion. While it may be fun errata, if you want to use JS for development, its better to use a typecasting library than try to memorize all of the various eccentricities of Javascript. http://typecastjs.org
Typecast.js is a really good starting library for starting out with JS, especially coming from strongly typed languages. It resolves all of typing confusion, and makes it so you dont need to memorize all of the various typing eccentricities in Javascript. http://typecastjs.org
I've always half assed javascript, cursing about the language and using jQuery to get around it. I'm just going through all this at the moment : [https://developer.mozilla.org/en-US/docs/JavaScript/Guide](https://developer.mozilla.org/en-US/docs/JavaScript/Guide) and this is where I found the reference about the Boolean object but with little explanation. I want to work with the language and become proficient since it doesn't seem to be going anywhere else and it's becoming pervasive. I've also ordered JavaScript: The Good Parts. I will look into your suggested library once I can wrap my head around the language a little more or maybe it's the wrong approach? It's a bit overwhelming to have all those libraries and nothing really seems to be the standard or I don't have any reference point to compare them and make a decision as to which ones I should be using. I have also though about reading and understanding the whole jQuery source, do you think it's a good idea? If you have suggestions as to what I should do to become really good at javascript, I would love to know.
You can paste that code into the console to rerun it.
I would also offer the warning/suggestion to avoid custom compilers like CoffeeScript and Clojure until you already have a foundation in JS. A good foundation will serve you for years, while using a custom compiler will limit your ability to understand things that go wrong underneath.
So I guess it's a bit like string literals behave with a transient String object in order to perform "stringy type" operations on them?
I'm not sure I get what you're trying to do, but the code example you gave would throw an exception since you're trying to set something on window.console immediately after seeing that there is no window.console.
I'm trying to write automatic unit tests, so I don't have to do anything like that manually
oops, in trying to shrink my actual code to a minimal example I seem to have broken it. Fixed now.
snudown tip: if you put text `inside a &lt;code&gt; run`, then you don't need to escape `formatting characters like ^ or *` (except for \`, of course).
To be more specific, it returns the last evaluated value, not the last value in the statement.
Not trolling, and I'm a programming language polyglot. It's just a simple observation that Node.js has [fostered a ridiculously large number of libraries for Javascript in a few short years](https://npmjs.org/) while jQuery [has had significant difficulties with their plugin repository](http://news.softpedia.com/news/Jquery-Closes-Plug-In-Repository-Due-to-Spamming-237881.shtml) and [won't even publish statistics about their plugins](http://plugins.jquery.com/). Where Node.js has fostered a community, jQuery is very top-down and plugin usage by web developers is low (I personally haven't seen any high profile sites that take advantage of the plugins -- they all tend to "roll their own" just like old school C/C++ programmers did in the 80s/90s). It's Cathedral versus Bazaar, and the Node guys figured out that the best way to foster a community is to mimic the successful communities in the same programming domain (Python, Ruby in back-end systems programming).
I strongly disagree. Every JavaScript developer needs to know how the boolean operators work, and have it down cold. You can't just substitute some library for that knowledge.
Are you using a unit testing framework, or are you trying to roll your own? I really don't recommend you do the latter, at least for your very first unit tests. I'd recommend you use something like [Zombie.js](http://zombie.labnotes.org/) for your unit tests. [This section of the site explains how to do unit tests with Zombie, assert, and mocha](http://zombie.labnotes.org/#Believing) (assert being the utility to throw errors when things aren't as you expect them to be and mocha being the testing framework). Note that the ``before`` function lets you set up your tests, the ``it("should do something", function(done) {`` lets you define your various tests, and (the not shown in that page but useful for you) ``after`` function lets you perform actions after your tests have run. So your tests could look something like: describe("my utility behavior", function() { var temporaryConsoleLog; before(function(done) { if(console &amp;&amp; console.log) { temporaryConsoleLog = console.log; console.log = undefined; } // Continue setup here done(); }); it('should work!', function(done) { // Tests go here }); after(function(done) { if(temporaryConsoleLog) console.log = temporaryConsoleLog; // Any other teardown you need done(); }); }); (Full Disclosure: I personally dislike mocha and prefer [nodeunit](https://github.com/caolan/nodeunit), but it's now unmaintained and the majority of unit testing tutorials out there use mocha, so that's why I used it here.)
&gt; jashkenas 5 points 19 hours ago A hero arrives!
Won't work and didn't work mean that iPad doesn't process the function JSON.stringify because it doesn't seem to have the native JSON object. When it hits the function call, the newer iPad (we have an old and new iPad, testing was done on the newer version) will stop processing the rest of the Javascript, as typically happens when Javascript hits an error. Sample code: var v = {"test":1}; console.log(JSON.stringify(v)); console.log("Should output this as well."); The fix we found was to use a JQuery extension instead. As soon as we stopped using JSON.stringify, the iPad started processing all of the Javascript on the site.
Ok, it sounded like your argument was more of a logical fallacy though: _NodeJS made X popular, therefore X is the most popular for all of javascript_. But now that you've given a more substantive argument, I can address it properly. &gt; and won't even publish statistics about their plugins. I can't dispute that the jQuery plugin sites have always been a mess and have been one of the weakest aspects of the project. Not even going to argue there. But, the fact that they _don't_ do something is not the same as saying that they _won't_. Unless there's missing discourse that you haven't referenced, you're unfairly putting words in their mouths. Besides, it's not a pissing contest to see who has the most plugins; the goal of the jQuery plugin repo is to offer quality over quantity. As for NPM, are you arguing that all 21,956 packages are of high-quality, are non-redundant, and are still functional under the current version of NodeJS? NPM works great for what it does, but I sure wouldn't take the # of packages as anything but a sign that _there's lots of packages_. NPM has little quality control, it's really governed by not much more than a popularity contest -- which speaks nothing to the quality of the code involved. &gt; jQuery is very top-down and plugin usage by web developers is low (I personally haven't seen any high profile sites that take advantage of the plugins -- they all tend to "roll their own" [...] This is sampling bias, and possibly confirmation bias; most high-profile sites will roll-their-own, but I don't believe that such a situation is the result of the relative quality of the plugin repository -- it's simply because the high-profile sites are innovators, and so they're not going to just drop-in a plugin that'll make their site just like everyone else's. Instead, they're out to create a unique, best-in-class solution that sets them apart from the competition, and a generic plugin is never going to satisfy such a demand. Additionally, those high-profile sites have vastly greater development resources available to them then your run-of-the-mill hobbyist or small-time dev shop (where rolling-your-own is many times not a feasible option). On the other hand, those small dev shops get requests all the time to _'make this widget just like the one on Apple.com'_ and so forth, and those types of widgets get ported to generic jQuery plugins all the time. Do you remember when the carousel widget was first introduced? Of course there were no plugins for it immediately, but now we have [at least 55](http://www.tripwiremagazine.com/2012/12/jquery-carousel.html) of them. Once a new type of widget is introduced it's only a matter of time before a handful of plugins are created to mimic it. Lastly, high-profile sites are a minority on the web -- by a very large margin; there's a countless number of small sites for every "high-profile" site. So, only using high-profile sites as your sample set is going to give inaccurate results.
Thank you for the thorough and well-written response. Greatly appreciated. I'm currently playing with both qUnit and Jasmine, haven't yet heard of Zombie, checking it out now. I pretty much have an equivalent set-up to your example, but the problem I'm having is that the code I'm trying to test has already executed in the self-invoking `(function(){})()` block, and I don't know how to re-invoke it after resetting console.log to undefined. I'm currently thinking I should be using some sort of js dependency tool to load my library on demand and only when I want. Any suggestions?
Yes, thanks for the clarification.
Good catch. I originally didn't have it in a code block and forgot to remove it. Cheers
oh here's a suggestion ... so http://jgraph.github.com/mxgraph/docs/js-api/files/shape/mxText-js.html that function would probably work better as object passing then as a function with 20 arguments.
If your library is meant to be run in browsers, then you'll have a bunch of quirks to work around that are meant for only certain browsers. That means you'll have code paths that will only be testable by running the tests _in certain browsers_. I don't think it's worth trying to avoid this. Thus I recommend that your test should only verify that `console.log` exists and is a function. If you want to make sure it's being created properly if absent, test in a browser that doesn't have a native `console.log`. If your library is meant to be run only in node, or some other environment that ordinarily provides `console.log`, I'd argue that this test isn't worth writing in the first place.
[require.js](http://requirejs.org/)
The other harmful thing about it happens when you test equality. No two objects are identical to each other: Air-Raganwald:oscin-es.github.com raganwald$ node &gt; true === true true &gt; new Boolean(true) === new Boolean(true) false 
Not a problem, clarification never hurts.
What I like about require.js is that I don't have to compile my scripts each time I test something. Therefore I can work faster. When I release for production I can use the requirejs optimizer to compile to the final version.
In my case, I'll (may)be using a script loader only for my automatic tests - so unless I get a crazy amount of tests in place, I won't be worrying about performance. I'll take a peek.
There's a problem with your reasoning: Even if the high profile sites rolled their own each time, why didn't they bundle it up into a plugin and contribute back to the community? This behavior is common in companies that use Node.js. For instance, [the company I work for has a github account](https://github.com/uber/) for Node.js, Objective-C, Python, Java, and C++ libraries we have either created and given to the community or forked from the community and improved (and sometimes accepted back into trunk). (And various developers have their own libraries that are then used at the company and then the company basically helps pay for the development of said libraries, [such as my own](https://github.com/dfellis?tab=repositories). The Cathedral versus Bazaar really does have a play in all of this. NPM was originally an outside project, but then the company behind Node.js, Joyent, hired him to continue working on it (and eventually take over Node.js itself). mocha, commander, and many other popular and useful libraries came from outside of Joyent. A very good example of a bazaar (with a small "church" being the core Node.js development, which allows outside contributors assuming they sign the copyright assignment form). jQuery, while being a community project, is more insular. If it isn't given the official blessing of the jQuery Foundation (as jQuery UI and jQuery Mobile have been) most jQuery users do not pay any attention to it. This is probably an unfortunate side-effect of jQuery's focus on being the *one* library you need for all of your DOM interactions. You may be right that lower-profile sites use jQuery plugins more often, but is that a statement about quality or allocated time? And why is it that high profile sites eschew jQuery plugins? The jQuery community really needs to answer these questions if they want to remain relevant in a world where differences in the DOM of various browsers reduces to near nothing and [the DOM steals jQuery's best ideas](https://developer.mozilla.org/en-US/docs/DOM/Document.querySelectorAll).
It provides a lots of utility that JavaScript doesn't provide natively but definitely should and it polyfills some stuff (mainly array functions like foreach or reduce) for older engines if you use it to call them.
I don't really get the point of this article... Why would one not use 'this'? The article makes it sound like the default choice would be to use the variable, and the obscure correct way is 'this'. I would think it would be the other way around, with 'this' being the default since that is exactly what it is for. Is it really that common for people to do that accidentally?
Bah, unfortunately I still have a similar problem... Part of my logging function is that it looks for a the global true/false variable `window.myLib_debug` and, if true, it logs the argument, if false, it ignores the call. It seems that even if I manually change `window.myLib_debug`, my `util.log` retains the old value (because of the clousure?) So... guesse I'm back to the script-loader idea. Updating my example now to show this code.
Thanks - I'll certainly have to look into this a bit more in depth. Good point on the relative pointlessness of the rendering capability - can't seem to come up with any real case where that would help my project.
Exactly! `true` is one "thing," whereas each `new Boolean(true)` is a *different* thing.
Or in short, objects have an identity, primitives are compared by value.
Window is a dependency you have no control over. So make it a parameter of the function and inject window when you call it normally. When you test it, pass in a stub window object that you have defined with an undefined console object. Assert that the object is undefined after you have called your function under test. Success !
I'm extremely disappointed this wasn't the first suggestion. =( 
might be worth xposting to /r/forhire edit: nvm, you're all over this
Well, in everyone's defense, my question kinda changed throughout all this. To be clear, are you suggesting adding window as an optional parameter of the `log()` function? This will get a little sloppy, since my actual code allows log() to take multiple arguments, but it *does* look like a solution. The code may be a bit ugly ( `log(foo, null, null, mock_window)` ) but I think that's something I can live with inside of my test code
&gt; For one, as already discussed, the plugin repo has historically sucked. I'm sure many have done this, though. We're looking at a chicken-and-egg problem here. The jQuery plugins repo has sucked because people haven't contributed high quality plugins to it and people haven't contributed high quality plugins to it because the repo has sucked. &gt; By bringing up the point that high profiles are innovators, not copycats; by that definition, they can't use pre-made plugins. Even if they're innovators, why didn't they contribute their plugins to the ecosystem? If the innovators did that, they could focus on just the things they need that *aren't* already in the repo, or could collaborate on improving other plugins. &gt; Does it matter? I got into this initially because you stated "there are far more libraries using that [CommonJS] pattern". That's the point of contention, at least for me. But, it's probably an unwinnable argument, because I doubt either of us have any hard data to back up the claims made. &gt; &gt; Either way, great discussion. You make many good points, and I agree that jQuery has a long ways to go before their plugins are seen as 1st class options. If a tree falls in the woods and no one is there to hear it, does it make a sound? Even if we could get hard data from the jQuery team on the number of plugins in their repo and it turned out there were more plugins than in NPM, considering how little they're used, do they really count towards which API is more common?
Exactly, by doing this you can choose to pass in the actual window object or you can throw together the following JSON object: { log: undefined } Pass that into your test call and then make dependency free assertions against this test object. This is a great book on dependency injection. http://www.amazon.com/Dependency-Injection-NET-Mark-Seemann/dp/1935182501
If your log function is checking `window.myLib_debug`, then it won't retain the old value, even if it's defined in a closure. Something else is going wrong.
I think I understand the code, but I'm actually a little confused about what this actually does -- what's a reddit Listing Item? The reddit JSON can be a little ... nested alright.
(citation needed)
Yes, I looked at Typecast.js. It looks like an interesting and possibly useful library. However, it's no substitute for understanding the most basic JavaScript operators. As andytuba points out, the `||` and `&amp;&amp;` operators are used frequently in JavaScript code you'll encounter in the wild - either code you've inherited and must maintain, or sample code you find on the web. If you choose to never use those operators in your own code and use Typecast.js instead, you still need to *understand* them. Otherwise you'll be confused and mystified whenever you run across them. And that's what the OP was asking about: not "should I ever use these operators", but "help me understand why these operators give the results they do." Edit: I see we don't really disagree on the point that JavaScript programmers should know the language. Your first post sounded to me like you were advocating the use of the library instead of that learning. Sorry if I misunderstood your intention!
I think you'd have to show us the code to spot the problem. Most likely there is something that you do between items that you should also be doing at the start. For example, if you have a &lt;/div&gt;&lt;div&gt; between items but are forgetting to open a &lt;div&gt; to start with.
You're calling the hello function and assigning the result to onclick. Don't do that. ~~buttonnode.onclick = hello();~~ buttonnode.onclick = hello; 
Get an example running on jsfiddle.net and link it here, so we can see what you're doing.
Ok! I use a * as the csv hard return for the first split, and the , as the second split //Imports csv txt file window.onload = function importing() { var iframe_window = window.frames["getTextFrame"]; var iframe_body_html = iframe_window.document.getElementsByTagName("body")[0].innerHTML; var listContents = iframe_body_html; //Splits into 1D Array var listArray = listContents.split('*'); //Splits into 2D Array for (i = 0;i &lt; listArray.length;i++) { listArray[i] = listArray[i].split(','); } //Write list items for (i = 0;i &lt; listArray.length;i++) { var li = document.createElement("li"); li.innerHTML = listArray[i][0]; var ul = document.getElementById("outputList"); ul.appendChild(li); } } &lt;ul style="list-style: none; color: red" id="outputList"&gt;
remove the function hello() and change " buttonnode.onclick = hello(); " to buttonnode.onclick = function (){ alert("HI"); }; 
Just make the call to ``browserify`` part of a [pre-commit Git Hook](http://git-scm.com/book/en/Customizing-Git-Git-Hooks), then your code will be updated each time you save your progress. That negates that advantage of Require.js completely.
There's `browserify --watch` that will recompile your script every time a file changes. There's `--debug` too that will use sourceURLs to give you better stack traces.
No no no. // UNIT UNDER TEST function addConsole (window) { // initialization if(!window.console) { window.console = {}; window.console.log = function(){}; } } // TEST function testAddConsole () { var window = {}; addConsole(window); if (!window.console) return FAIL; if (!window.console.log) return FAIL; if (!_.isFunction(window.console.log)) return FAIL; return PASS; } To call log, just call it normally: // make sure we have a console (only needed once). The window parameter is the real window. addConsole(window); // now use it as you normally would. Window doesn't get passed here! window.console.log("whatever"); You inject dependencies when you construct your object graph, not when you use it.
I'm trying to come up with an example when to use them and I'm not doing well. It's too "wrapper." Wrapping a variable is like wrapping a present--it's only meant to obscure. I didn't post this to disagree with you really, I'm just honestly curious: when would someone use it? _Someone_ wanted this feature built. 
this is what you are looking for OP
&gt;I've always half assed javascript, cursing about the language and using jQuery to get around it. Are you actually cursing about the language or cursing about the DOM?
new? It's been around since they invented HTML5...
http://jsfiddle.net/aJa92/1/
Thank you very much!
Dependency Injection and proper OOP principles. I'll explain: In order for a bartender to make a drink, he needs alcohol, mixers, and a glass. He doesn't care how any of these things are made, he just knows he needs these things. So, the bar gives the bartender these things and the bartender then uses them to make some drinks. What's nice about this setup, is that the bar can give the bartender, different dependencies and expect the same result, that the bartender produced a drink. See it's only the customer that needs to know what KIND of drink it is. The customer, really, doesn't care how the drink is made, so long as it's the specific instance of that kind of drink. What's also nice about this setup, is that the customer, may not be so picky about how he gets a drink. The customer after all, just really wants a drink and is apathetic to how he gets one. So the bar is just more a convenient way of for a customer to get a drink. Allt he customer has to worry about, is the bartender and that's it. So, say you want to make sure the customer never drinks and drives. Well, the customer would have to drink a certain amount before it exceeds a certain threshold correct? So you need to test the customer. It's easy to do so in the setup I just provided. While in a real life situation, the customer would be going to the bar to get a drink, in a testing situation, you would just hand the customer a drink directly. Perhaps a drink that is 10 times stronger than anything at the bar because you really want the customer to get nice and drunk, very fast, to see if the customer would then get behind the wheel of a car. And that, is a very important test, made very easy, through dependency injection, separation of concerns, and I suppose a kind of factory pattern.
http://imgur.com/25jiIHr
It's been around since [Firefox **3**](https://developer.mozilla.org/en-US/docs/DOM/File). The [first working draft](http://www.w3.org/TR/2009/WD-FileAPI-20091117/) of the specification was introduced in **November 2009**. Oh, and only the only IE to support it is IE10+: http://caniuse.com/#feat=fileapi
I think you're missing the point. The point is, the code you've shown is too verbose. My proposal and example gives addSetter(X, 'someVariable'); //one line, gives both getter and setter Can you make a generic one-line setter using those special es5 / es6 get&amp;set methods?
alternative with documentFragments: http://jsfiddle.net/E2EzU/1/
Still waiting for FileSaver though and if anyone's up for it: &gt; [Yes, its still happening. I've been busy unfortunately. I'm trying to find someone else or an intern to finish this off.](https://bugzilla.mozilla.org/show_bug.cgi?id=648998#c4)
Heh, yeah I'm drawing a complete blank as well. My guess is that it's really just for the automatic coercion that JS does. e.g. `true.toString()` coerced to an object and then calls Boolean.prototype.toString with the coerced value as `this`. The same happens for the other native types, string and number. This way one can define methods on Boolean.prototype and then call them on boolean values. I only said "almost no one" because if I hadn't the single person on earth who does would have crawled out of the woodwork to chastise me ;-) Edit: looks like someone already mentioned coercion in this thread. That's the only thing I can think of as well.
JS does this automatically though so there's really no need to do it manually.
 function addAccessor(obj, key, value){ Object.defineProperty(obj, key, { configurable: true, writable: true, get: function(){ return value; }, set: function(v){ value = v; } }); }
Now just hook it up to a sound input and make it change depending on music levels/tempo.
Yes, I thought of this too. Should be totally doable with [web audio API](https://developer.mozilla.org/en-US/docs/Introducing_the_Audio_API_Extension), but I think I'll have to rewrite this clean before adding more features :P
I very recently implemented &lt;a download&gt;. So this works at least in Firefox. http://jsbin.com/umafiz/3/edit. Edit: Oh further down he links to his own shim.
thanks! this helps a lot! i now get a &lt;pre&gt; before [0][0] does this yell you anything?
thanks! this helps a lot! i now get a &lt;pre&gt; before [0][0] does this yell you anything?
Yeah it means you're not giving us the whole story here. It's hard to help when you don't show us exactly what you're working with 
Congrats on getting published!
Thanks!
Thanks. I have no idea what's next. I want to write something targeted towards people who are already pretty good at JavaScript, but I have no idea what.
After having read all about the Asian green broadbill, I have no idea either. Beautiful plumage, though.
I'm not sure what your beef with require.js is, but a lot of your statements are simply incorrect: require.js requests everything asynchronously by default, but when you deploy to production you're supposed to run [r.js](http://requirejs.org/docs/optimization.html) to minimize your code. Browserify sounds like it requires this step each time and some other posters have mentioned ways (`browserify --watch`) to get it to automate this when the script changes. Comparing non-minimized requirejs to always-minimized browserify is apples and oranges. The whole "two(2) syntaxes! So Confusing!!!" can be summed up in two sentences: Use 'define' to pull in dependencies and define a new module. Use 'require' to pull in dependencies, but don't define a new module. That's it. Otherwise they work the same. 'require' also isn't *only* for top-level calls - you can use it anywhere if you want to pull in a dependency somewhere, and if you really wanted to you could use 'define' for the top level call of your app, there's just no need to. Your require.js syntax example is overly complex (and incorrect, it's 'require' not 'require*js*') - the 'define' version would have worked as well. Jam and NPM are just different repositories - being in Jam doesn't mean you're using require.js and being in npm doesn't mean you're using CommonJS - require.js is even [hosted in NPM](https://npmjs.org/package/requirejs). And since you're wrong about needing 'require' for top-level syntax, you're also wrong about your last statement, too - although it would probably be pretty contrived in either system. However, I will say that I have only used require.js up to this point and I will try out browserify to see how it works - though right now it just looks like the same thing with a slightly different syntax.
I have no idea, sorry. That sounds like a bug in whatever browser Android is using - the ability to scroll through image heavy websites seems fairly important to me. I might be misunderstanding the issue, though.
Congratulations!
Congratulations!
Great job! I'll order one
You didn't even look at the citations I provided. ``requirejs`` [is the method recommended in the Require.js documentation](http://requirejs.org/docs/api.html#jsfiles) not ``require``. As far as r.js, why even have an asynchronous module loading system if you're going to do all the loading synchronously in production? You're simply setting yourself up for pain if there's a bug in r.js that causes module loading to differ between dev and prod, or if you have a race condition in your source code that's not visible with the delays induced by asynchronous loading but show up when synchronously loading the production source file (not r.js's fault, but one of the core faults in the whole AMD anti-pattern). That last part is the reason why I can't stand Require.js and the Asynchronous Module Loading pattern -- if you're not using it in production, you're making your dev environment *more complex and harder to prove correct* than your production environment, and if you are using AMD in production, you're making your users wait longer for your website to load up, [and that's the difference between whether a user sticks with you or not if you have a competitor](http://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html?pagewanted=all&amp;_r=0). I simply cannot understand the people who use Require.js. You get all of the downsides of more complex debugging in your dev applications (because of dev/prod differences in loading modules) and still have to build for production, or you get a simpler debugging in your dev applications but your production is tortuously slow and you lose readers/customers/eyeballs/whatever. And on top of it all you use a module definition system that *has* to differ between top-level and module, and a syntax that makes my eyes bleed (the module definition itself is assumed to be synchronous -- the module function has to ``return myModule``, not ``callback(myModule)``, so its schizophrenic, at that -- the only asynchronous part is loading the code).
This actually describes me. I spend all day writing jQuery, and I barely know any JS. I'm getting it now. 
Wasn't this book originally called Javascript from jQuery? I bought this a few months back. I'm only on the 4th chapter, but so far it is excellent. Congrats and thanks for writing this.
Yep, it was. That was when it was aimed entirely at people who only really knew jQuery - the change in the name and the moving of the old chapter one to an appendix means that it is now appropriate for both the people who don't know JavaScript at all, and those who do but aren't 100% confident with it yet. Thanks!
don't know if these will work, but: 1) try using divs with background-image instead of images 2) or, put transparent divs above the images
I like [modern.ie](http://www.modern.ie/), but it is just focused on internet explorer.
Well damn dude, there's being published, and then there's being publising by O'Reilly! Very cool :) I might pick this up next paycheck, 99% of my JS related code is jQuery based (I do mostly backend) and I've been doing this the slower way of digging into JS from scratch.
Not that I'm aware of.
No it does not. I generally don't commit every small change I make, especially when debugging. Therefore a pre-commit hook doesn't do anything. However it doesn't really matter. All these tools do the same thing, and they all have their pros and cons. There isn't really a best one, it's just what you (or your boss) likes best.
Congrats! Are you, by chance, giving a free eBook version to the first redditor that asks in this thread?
Awesome! As a follow up exercise, you might want to think about what will happen if someone enters something that isn't a number into the prompt box.
Can I ask you why not? You can always ``git rebase -i master`` afterwards and squash the commits, or pick out changes you decided later weren't actually all that good in the first place. Let git keep track of every change you make while you're working on it, then tidy it up when you're ready to merge.
Cool stuff, nicely done!
Because small changes are also easily managed using the undo key in my text-editor. Especially when I'm debugging or just trying new things out I just want to be able to make a small change (e.g. adding a console.log), save and test, without having to run any tools. Of course when I am creating new features I do commit a lot.
thanks! hoping to find more profiles with numbers/punctuation and plug them in.
I hope so, I totally have time right now to read it ;)
I'm not sure if you meant to be sarcastic, or if you're getting downvoted because people disagree with you, but I agree, at least about the stakes of the game. Browsers are changing rapidly and we can only sustain 'live-and-let-live' for so long before we firmly decide what we want from future browsers. 
Congrats, I just picked up a copy ;) http://www.amazon.com/Learning-from-jQuery-ebook/dp/B00B7QV7R6/ref=sr_1_2?ie=UTF8&amp;qid=1359691427&amp;sr=8-2&amp;keywords=learning+from+jquery
Questions like this are often asked in /r/programming and what may seem like a flippant answer is usually given: what would *you* like to create? There's lots of stuff you can do in the browser - greasemonkey scripts to make reddit look nicer or turn tables into charts on wikipedia, a keyword-based slideshow that hits the flickr API, a simple game or animation using SVG or canvas, a calculator .. it's such a big world it's hard to direct someone with no knowledge of what they might find interesting, useful or motivating. Step 1: think up things you'd like to see or do Step 2: try and imagine if any of the knowledge you already have could be used to build it Step 3: pare it down to a simple core you can mostly imagine how to do and start hacking Step 4: if you get stuck or want feedback, put up a jsfiddle and ask a specific question here
Thank you so much! I feel bad that I keep bothering you, but I've tried for hours now to implement what you wrote into the file but it's not working :( After the popup box which says either "Yes" or "No" to a right or wrong answer, the name of the country does not change. I did put in the -- $('div#country').html(capitals[random][0]); -- but nothing changes. I also tried getting rid of the entire -- $('#answer').keypress(function(event){ -- function, in case I was misreading your directions, but when I do that nothing at all happens when I press enter (even if I insert an alert box). Again I feel bad for asking you for help once more :( I really want to move on this part and move onto the next bit. Here is the code in its entirety: $( document ).ready( function() { var stats = { count: 0, max: 20, correct: 0 }; var capitals = [ ["Albania", "tirana"], ["Andorra", "andorra la vella"], ["Armenia", "yerevan"], ["Austria", "vienna"], ["Azerbaijan", "baku"], ["Belarus", "minsk"], ["Belgium", "brussels"], ["Bosnia and Herzegovina", "sarajevo"], ["Bulgaria", "sofia"], ["Croatia", "zagreb"], ["Cyprus", "nicosia"], ["Czech Republic", "prague"], ["Denmark", "copenhagen"], ["Estonia", "tallinn"], ["Finland", "helsinki"], ["France", "paris"], ["Germany", "berlin"], ["Greece", "athens"], ["Georgia", "tbilisi"], ["Hungary", "budapest"], ["Iceland", "reykjavik"], ["Italy", "rome"], ["Latvia", "riga"], ["Kazakhstan", "astana"], ["Liechtenstein", "vaduz"] ]; function getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; }; var random = getRandomInt( 0, capitals.length - 1 ); $('div#country').html(capitals[random][0]); $('#answer').keypress(function(event){ var keycode = (event.keyCode ? event.keyCode : event.which); if(keycode == '13'){ var answer = $("#answer").val(); if(answer == capitals[random][1]) { alert("Yes"); } else { alert("No"); } } // ends if(keycode) event.stopPropagation(); }); // end keypress function next( skip ) { skip = skip || false; // Update stats. stats.count++; if ( skip === false ) { stats.correct++; } // Check if we've reached the maximum number of questions. if ( stats.count == stats.max ) { // Remove the keypress event. $( '#answer' ).off( 'keypress' ); // Here you could hide the input box altogether and then display // their stats. return; } // Generate a new random number. random = getRandomInt( 0, capitals.length - 1 ); // Update the #country text and clear the #answer value. // You already know how to do this. $('div#country').html(capitals[random][0]); alert("test"); return; } // var random = getRandomInt(0, 24); // $('div#country').html(capitals[random][0]); $( '#answer' ).on( 'keypress', function( event ) { var key = event.keyCode || event.which; // If the user isn't checking their answer, just exit the event. if ( key != 13 ) { return; } // Compare the answer using toLowerCase() because we // don't know what letter casing the user will input. Inside // an $.on() event, $( this ) will refer to the element that // the event is attached to. if ( $( this ).val().toLowerCase() == capitals[ random ][ 0 ].toLowerCase() ) { // Correct answer. We can omit passing a boolean to next() because // the function will assume the answer was correct. next(); } return; }); }); // end document ready 
I now noticed that when I add these two lines: random = getRandomInt( 0, capitals.length - 1 ); $('div#country').html(capitals[random][0]); to: $('#answer').keypress(function(event){ var keycode = (event.keyCode ? event.keyCode : event.which); if(keycode == '13'){ var answer = $("#answer").val(); if(answer == capitals[random][1]) { alert("Yes"); } else { alert("No"); } random = getRandomInt( 0, capitals.length - 1 ); $('div#country').html(capitals[random][0]); } // ends if(keycode) event.stopPropagation(); }); // end keypress --------------- It actually changes on each refresh! But I do it over and over again and it doesn't stop after a certain point. I feel that the segment I just posted and the $( '#answer' ).on( 'keypress', function( event ) { one is kind of disjointed. I don't know how they work together. 
This should put you in the right direction: http://javascriptissexy.com/how-to-learn-javascript-properly/
A great way to become better is to just make something and then learn from your mistakes, or testing the code you wrote, find its weak points and see what you can do about it.
This is my third straight response to you (instead of editing what I wrote), but... I got it to work!!! I changed a few things of what you wrote around, but here it is: ---------------------- $( document ).ready( function() { var stats = { count: 1, correct: 0 }; var capitals = [ ["Bulgaria", "sofia"], ["Croatia", "zagreb"], ["Cyprus", "nicosia"], ["Czech Republic", "prague"], ["Denmark", "copenhagen"], ["Estonia", "tallinn"], ["Finland", "helsinki"], ["France", "paris"], ["Germany", "berlin"], ["Greece", "athens"], ["Georgia", "tbilisi"], ["Hungary", "budapest"], ["Italy", "rome"] ]; function getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; }; var random = getRandomInt( 0, capitals.length - 1 ); $('div#country').html(capitals[random][0]); function next( skip ) { skip = skip || false; // Update stats. stats.count++; // if ( skip === false ) { stats.correct++; } // Check if we've reached the maximum number of questions. if ( stats.count == capitals.length ) { // Removes the keypress event. $( '#answer' ).off( 'keypress' ); $('div#country').html("COMPLETE"); alert("You got " + stats.correct + " correct."); // Here you could hide the input box altogether and then display // their stats. return; } // Generate a new random number. random = getRandomInt( 0, capitals.length - 1 ); // Update the #country text and clear the #answer value. // You already know how to do this. $('div#country').html(capitals[random][0]); $('#answer').val(""); return; } $('#answer').keypress(function(event){ var keycode = (event.keyCode ? event.keyCode : event.which); if ( keycode != 13 ) { return; } if(keycode == '13'){ var answer = $("#answer").val(); if(answer.toLowerCase() == capitals[random][1].toLowerCase()) { stats.correct++; alert("This was question number " + stats.count + " and you got " + stats.correct + " correct"); } else { alert("No"); } } // ends if(keycode) next() }); // end keypress }); // end document ready ---------------------- Now the next two big tasks will be making sure the same random country doesn't repeat in the sequence, and putting a 15 second timer. Again, thanks so much for your help and steering me in the right direction. I read over your code many times, but there are still a few concepts which remain a little bit unclear to me. For example: 1) Why did you pick: var key = event.keyCode || event.which; instead of my: var keycode = (event.keyCode ? event.keyCode : event.which); And what's the difference between the two? No idea how both actually work. 2) How exactly the keypress (function? value?) works, more specifically this part: $( '#answer' ).off( 'keypress' ); 3) What is: skip = skip || false; What does that mean skip or false.... I got rid of the: if ( skip === false ) { stats.correct++; } Due to it messing up the correct counter and because I just don't understand that line completely. There is so much to learn! 
&gt; 99% of my JS related code is jQuery based (I do mostly backend) What use does jQuery have on the backend?
Does Facebook have a lits of images of letters or is there some other way this works?
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
Awwww, poor you.
Who or what is forcing you to use the latest versions of these libraries?
I'm in the UK, and the cheapest place I found quickly was Amazon. It won't give me a non-mobile link right now, though.
I can't speak for the jQuery UI changes but most of the jQuery changes seem aimed at a simpler more consistent API. They're moving forward and you can decide to move with them, which will always cause some upgrade pains. Whether or not that's worth it you'll have to decide for yourself. &gt; Seriously who is running the show over there now? This is madness. That would be /u/dmethvin. If you have any questions about the direction jQuery is moving in, you'd best check out this presentation: http://www.youtube.com/watch?v=ZP8FyroOGfk&amp;list=PL5FDB952E58A82293
Well I use jQuery extensively in my own stuff. jQueryUI even more so as I'm using autocomplete, dialog, datepicker, slider. If I don't upgrade then it'll be even more of a headache later as you'd probably have to do even more work or even more rewrite if you went from say 1.8 to 2.2. Also you can't be stuck using some outdated version of the library. Then there's no support/bug fixes.
I wasn't aware there was a market for learning JS by those who already understand jQuery... I'm an "old" guy though so for me jQuery is just a JS library. Apparently that library is so good at abstracting the problem you can use it without understanding JS :| Bizarre. Sorry... Did I mention I'm old enough to remember AJAX before jQuery? Last year the kid at the office tells me "Well, yes but jQuery *is* JavaScript". I was like "wut?! nooooo... jQuery is a library. Of a language. With a domain specific *query* language parser. Wut u talkin' 'bout Willis?" Should have known then there's a O'Reilly book in there somewhere. O'Reilly - because "learning backwards" doesn't exist. 
When I started writing the book, it was called "JavaScript from jQuery", and it was aimed exclusively at people who had been using jQuery a lot, but didn't know JavaScript - which is a surprisingly large number of people. Obviously, this doesn't work, so this book was designed to teach them JavaScript from their existing knowledge of jQuery. There are also a lot of people who know a fair amount of JavaScript, but don't know how to do stuff like AJAX and event handling without jQuery. Since I started writing it that number shrunk a bit, so we renamed it to "Learning from jQuery" and moved the first chapter, "JavaScript Basics" to an Appendix - now, it's still suitable for people who don't know JavaScript at all, but it is also good for the second group, people who know JavaScript but still feel they could learn more or want to learn to code without jQuery.
Perhaps I'm missing something, and if working with JS on the server-side complicates things then forgive my ignorance, but can't this be achieved by simple assignment: obj.hobbies[1].since = '01/01/2010' Again, I apologize if that oversimplifies it, and if that's not a possible solution, I'd love to learn why. Thanks!
I tried that too one time. It's a nightmare to develop. First you create 26 images, then you create 26 Facebook pages with the images as profile pics. Then you copy the Facebook page id's and replace every letter from the input with [[fbpageid]]. In my case, Facebook started deleting those pages within a few days, so a few letters were missed. Also, there is a limit on how many pages you an create on facebook within a specific time. Never again :)
I get it it's just weird for me. I'm classically trained in general CompSci. To me saying "Learning [Javascript] from jQuery" is like saying "Learning C/C++ from SQL" because there is a popular C/C++ library which implements a SQL clause parser or saying "Learning LISP from Matlab" because there is a popular LISP library which implements a Matlab parser. It's bizarre to my old-dog brain. I cannot wrap it around the idea that people are approaching the learning curve from an arbitrary point.
Hi, as I said in the post, sometimes the attribute you want to set is "declared" into a path stored into a string. For example, in my case I have an XML file where I say: set the JS attribute "contact.dependants[0].firstname" to a value coming from a CSV file (it's a kind of CSV-&gt;JS mapping). Does it make any sense? :)
SQL doesn't replace bits of C++, so that's a pretty different example. It's more like "Ruby from Rails".
? jQuery doesn't "replace bits" of JavaScript. It is a utility for dealing with the DOM. It has a DSL with its own grammar and clauses for *querying* DOM elements. If it had a name it could be HTML DOM Query Language - HDQL. It might have even become a standard if anyone but jQuery implemented it. Just like SQL is a DSL with its own grammar for querying relational data and there was a C library called cSQuery that was super popular (for some external reason) and someone wrote a book "Learning C from cSQuery" 
I've developed a quite large mobile web application with a similar setup where I rely heavily on events. The different components don't know and don't care about where the events come from or are sent to. I really like that approach, but I know now in hindsight that I overused it. If all communication is event based, the application can become difficult to grasp, because nobody knows anything about anyone. It works great in a dashboard like application, where there are lots of different components that really shouldn't know about each other, but I sometimes prefer to pay the price of tight coupling to make my code more straigt forward.
So, *Uberhipster*, you're saying you were into Javascript before it got popular?
I see what you did there but I wasn't into it until after Crockford revival. Before that I had to do it so I did it but it was more of pain than anything else. After Crockford's PR campaign to vindicate JavaScript as good language in its own right I started enjoying it and experimenting with it.
[I have no ideas, how spoiler can be made.](http://pastebin.com/YBf1cRzF "spoiler") 
Yes, poor everybody. Instead of writing their UI entirely from scratch on vanilla DOM, they've been able to save days, weeks, months of work. And now all they need to do is read a changelog that somebody else has prepared for them, to see what they need to do to incorporate the latest generous helping of free and Free code. Or they could keep using the current code, which will keep on working for a long time. Of course, you are not a crappy programmer, and you have tests for all your code, so you can easily identify what breaks, right?
var x = {}; or var x = []; or var x = function() {}; Spoilers don't seem to work in this subreddit.
I think support for proper spoilers is done using the custom stylesheet for each subreddit.
Anything that isn't a Boolean. Not a very good riddle. Unless the majority of people here don't know what a strict comparator is.
For other odd JS stuff: [WAT by Gary Bernhardt](https://www.destroyallsoftware.com/talks/wat)
Actually, x can be a lot of things. x can be objects (e.g. 'Object', 'console', etc.) x can be functions (e.g. 'eval', 'Array', etc.) x can be some set of strings (exception such as '', ' ', etc.) x can be numbers (exception: 0 and 1)
Reminds me about this post from James Padolsey about truthey/falsey values: http://james.padolsey.com/javascript/truthy-falsey/
check out the modules aspect of the closure compiler, plovr makes it extremely easy. also why only simple optimisations and not advanced.
advanced requires that you abide by the closure's norms. For a widely adopted independent package like the one i am suggesting, it would not be possible to use advanced.
it doesn't, you can write your code any which way you like, but you will get static analysis. if you don't annotate then the compiler won't be able to optimise, if you do, the compiler will.
I'd love to see how you react had you been using ember.js. 
yes
a curios reply.
Live version here: [http://ht2.co.uk/jm/rak/](http://ht2.co.uk/jm/rak/) Very aware that actual functionality is pretty limited, I'm actually more interested in the RequireJS implementation (including builds via node js) and the ability to communicate between modules using Amplify. I'm about to start on a reasonably large single page app, hence the experimenting. All comments welcomed!
Have you considered switching to CommonJS/Browserify? I wrote a post about it a while back to try to explain some of my thoughts: http://0fps.wordpress.com/2013/01/22/commonjs-why-and-how/ http://www.reddit.com/r/javascript/comments/1731e5/commonjs_why_and_how/c81uo6g?context=3 My thinking right now is that using AMD is not really worth it, since it lacks a coherent package/dependency manager; and that require.js is a pretty inefficient way to solve the module problem. I believe the best solution to the whole module problem in the near term is npm/browserify. As an added bonus, it is also much easier to test JavaScript modules from the commandline.
Correct, I don't work with js that often, but when I do I use jquery. I'd like to play around with angular.js and node.js a bit more for fun. 
That's not true at all, you have to follow a number of strict requirements when writing code intended for use with Advanced Optimizations, or it's likely that the compilation process will break your code. One of the main pitfalls with advanced is that you can't mix `object.property` and `object['property']`, which occurs frequently in regular JS. [There are more examples of techniques you need to avoid here.](https://developers.google.com/closure/compiler/docs/api-tutorial3#dangers)
Why should it be that way? I don't really follow your argument... You don't have to transfer extra boilerplate if you compile using browserify/(uglify.js|Google closure); in fact you typically end up moving far fewer bits since npm can optimize dependencies within your program. Also, building and compiling a single script means you can do more aggressive interprocedural optimizations. (Not to mention the fact that it cuts the number of extra HTTP requests down to 1.) Combine that with the fact that you can now use a huge number of ready-to-go libraries to solve whatever problem you have immediately, with none of the copy-and-paste stuff you get with AMD; and I think it is a pretty clear winner.
You're dismissing a huge benefit based on old-fashioned superstition. That argument about "old versions of IE" holds no water. If you are targetting one of those platform you have bigger problems than getting a coherent module system to work. Most of those browsers are so broken you need to write a completely separate version of your app! ECMAScript 5 is bog standard by now, and all the major browsers implement it correctly. Take a look at this [compatibility table](http://kangax.github.com/es5-compat-table/). What Node is good for is testing algorithms and data structures. The basic background stuff you need to make your application work. For example, here is a library I wrote that just does mesh processing: https://github.com/mikolalysenko/simplicial-complex You don't need it to talk to any DOM or browser specific things to do that stuff. And testing it from the commandline stream lines things so much: I don't have to create any shim webpages or complicated harnesses, all I do is just run "node test.js" 
your example uses renaming, now when you minify this is a problem in anycase even if you use another minifier. doing window['funcName'] = funcName is the crappy solution code that is not linked in will be removed yes, dead code removal is a feature and it is a great feature. I use the compiler everyday and the performance benefits you get with advanced mode are awesome and since you will be using the deps builder to figure dependencies and compiling all your code together and splitting it into modules using the compiler, you can really use advanced mode.
Don't forget speed. I see people bitch about the time it takes to run Rails tests but I get seriously annoyed having to refresh the browser each time to run my tests.
I also like Browserify and CommonJS.
Downvote for ambigious title. I thought it was about AMD the company.
This is r/javascript...
Another gotcha you gotta be careful for is if you use try/catch. The advanced optimizations without the correct flag will pull try/catch out. 
Browserify itself has a 12kb size. That becomes 5kb when uglified and ~2kb gzipped. Then for each file (module) that is included a "require" header is added: require.define("[filename]", function( require, module, exports, __dirname, __filename, process, global) { /* payload */ }); Do you see a striking resemblance with requirejs here? I do... [edited to make code more readable]
You're spot on as regards dashboards being perfect for this. "...I know now in hindsight that I overused it." Yeah, I hear you. I have been cautious about not enforcing the communication-by-events-only methodology. Some of the apps I need to deliver are dashboard-like, whereas others are more desktop-like. The components of the desktop-y ones are arranged in a hierarchy of object references, and while they may communicate via eventing, they can get access to one another where a boost in simplicity warrants it. Thanks for offering this (sentiment about overuse).
Well, if you are really worried about ~2kb, then by all means go for broke and try to optimize the hell out of it. Though keep in mind that is about the size of a single HTTP header with a few cookies.
heh google would kill for ~2kb =) Each require header is ~125 bytes... We are talking large scale projects here so 1,000 files is a modest number... that equals ~125,000 more bytes. Now for 125k of overhead i am killing too &gt;:}
I used a jQuery plugin once!! I can haz job?
Well, that's a plausible argument for not using node.js to test. Most of the stuff I've done in the browser is Canvas/HTML5 based, in which case you can just write off IE8 immediately, and so this is a moot point. I can totally understand why you might want to do that for compatibility purposes if you are doing something less bleeding edge that just needs to work. However, you still haven't done a good job defending the use of AMD. Selectively loading/unloading modules at run time is highly inefficient, since you pay the cost of an extra HTTP request per each package. A better option would be to compile separate versions of your app for each browser you plan on supporting, and then selectively loading just that one package once you can detect the platform you are running on.
..or dojo
&gt; [...] results in creating one extra closure for every file in your codebase. We all are knowledgeable folks here and know what this means or doesn’t mean. Am I missing something? One extra closure per file costs virtually nothing. It's a top-level closure so it's just a few bytes of memory at worst. 
Now that you've explained that setAttribute's path argument is sourced from data, not code, it makes more sense. Without that context, I got the same impression as jibegod that you were reinventing basic JavaScript syntax.
ES6 will solve this problem handedly. http://benvie.github.com/continuum/
web cam access sometimes fails in firefox and def in IE
If you want to be good at something there are no shortcuts. If you find learning bits and bytes boring/difficult maybe programming is not your thing. 
[/r/dailyprogrammer](http://www.reddit.com/r/dailyprogrammer)
I sent you a coupon for a free copy of my book http://leanpub.com/javascript-allonge. No bytes of memory or binary, although it is aimed at an audience of people interested in some of the subtleties of JavaScript's functions.
I meant it in the respect that people use jQuery functions instead of JavaScript's native functions - there are people who have never made an AJAX call without using jQuery for it. The book is aimed at them.
You are so awesome! I will definitely check it out! Thank you so much! **edit:** This book is really amazing so far! (It makes me wish I drank coffee! LOL) Also, I wish I had read this book BEFORE going through the Codecademy JS tracks. Lesson learned - always go to Reddit first.
I made a little script to test various values, could someone check if the logic is correct? var boolObjTrue = new Boolean(true); boolObjTrue.value = true; /* add a marker to identify in output */ var boolObjFalse = new Boolean(false); boolObjFalse.value = false; /* add a marker to identify in output */ values = [ {}, [], 0, 1, 2, 3, 0.5, "", "hello", true, false, boolObjTrue, boolObjFalse, undefined, null, NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.MAX_VALUE, Number.MIN_VALUE, function(){} ]; var satisfies = []; var satisfiesNot = []; values.forEach(function(x) { if(( x == true) === false &amp;&amp; (!x == true) === false &amp;&amp; ( x === true) === false &amp;&amp; (!x === true) === false) { satisfies.push(x); } else { satisfiesNot.push(x); } }); console.log("Satisfies: ", satisfies); console.log("Does NOT satisfy: ", satisfiesNot); Outputs: Satisfies: [Object {}, [], 2, 3, 0.5, "hello", Boolean { value=false}, Infinity, -Infinity, 1.7976931348623157e+308, 5e-324, function()] Does NOT satisfy: [0, 1, "", true, false, Boolean { value=true}, undefined, null, NaN]
I had to learn all that stuff in college and I have never once needed that knowledge for anything. I'm a javascript programmer (primarily using the [dojo toolkit](http://dojotoolkit.org/)) and I never used javascript before I started working (though I was familiar with Java and C++), so I think you'll be fine. It's been quite a few years, but I believe I started with the [W3 tutorial](http://www.w3schools.com/js/default.asp).
I have a project I've been using for about a year which I will open source sometime this spring. When I do you might see how and why I use AMD. Until then I can't talk about it, unfortunately... 
Can you clarify on what you consider to be the 'craziness' of javascript?
I find this to be True... don't know what's with the Down-votes... 
Thanks for this! I have, as a matter of fact, already completed the Javascript, Web Fundamentals, and Python tracks on Codecademy (and just started Ruby!). I think it was a wonderful tool for getting your feet wet, but really left me with some tremendous gaps. I decided to pick up Eloquent Javascipt (which begins with a section on binary) and work through it to improve my grasp and tighten up my scripts. I also picked up a few books at Half Priced and noticed all of them begin with binary too. I figured it was the similar to the edX Java class I took that started with the history of computers - good to know, probably should know, but not pertinent to being a decent Java developer lol. Thanks for your help!!
You can grab anyone's profile pic by using the [[profile_id]] convention. Someone had enough time to create 26 fake accounts and used each letter as the profile pic. 
This is so inspiring! Thank you for sharing! I'm continually worried about the fact that I am completely self-taught (er...internet-taught). I was a Film major in college haha. While editing and programming share some characteristics, it's no where near as in complex. I feel like my resume is a joke without a CS degree lol. 
Who the fuck is doing shit at the bit level regularly in javascript? If he were doing assembly or c/c++ I could see it, javascript? Gimme a fucking break. Oh, how do you allocate memory in Javascript, I'm curious. (shortcut: http://stackoverflow.com/questions/1026495/does-javascript-have-a-memory-heap)
Don't know either... Maybe we live in a time were copy/pasting without understanding is a virtue. Strange times...
scoping, scoping, scoping. It bites new javascript users repeatedly.
It's actually somewhat important, though I think it's often taught poorly. There are 8 bits in a byte. Each character is a byte. These bytes take up either disk space or computer memory. When you create variables and store them in memory, there's only so much to go around. Books don't do a good job of explaining this, but what it basically boils down to is if you don't have a reasonable understanding that the performance of a computer boils down to *all* the programs running on a computer, not just your program, then you can run into problems later. var name = "Homer") = 5 bytes of data. Maybe a little more for the variable itself. Those bytes are 1s and 0s. So no, you don't really need to know binary conversion, but those bits, bytes, and memory stuff, if taught properly, give you an understanding of how the computer turns your JS code into code it can understand.
Me, and tons of other developers. Never heard about TypedArrays for instance? Or just working with binary streams in nodejs? Good luck without doing "shit" at the bit-level.
I'm sorry you're getting down-voted so much. I don't find it boring (tedious though, yes), or difficult - I just think taking the time to learn it now is not the most efficient use of my time (in my personal situation). And, even if one does find bits and bytes to be boring or difficult, I don't think that necessarily means "programming isn't their thing". I don't particularly care *how* my amplifier or pedals convert my guitar sound, but I find song writing intoxicating :)
JavaScript is 99% useful for web only, in which case memory allocation is not an issue. Actually, that's one of the great things about JavaScript is the large set of things you don't have to worry about. I agree with The Poose's comment below about starting with Code Academy or something... and just trying projects of increasing difficulty. **BY FAR THE BEST BOOK ON JAVASCRIPT:** *JavaScript: The Good Parts* - by Douglas Crockford. Douglas Crockford sits on the committee that defines the JavaScript language. And, oh yeah, he also invented JSON. You can download the free ebook here: **[http://it-ebooks.info/book/274/](http://it-ebooks.info/book/274/)** 
Also - might you be confusing Java and JavaScript? They are very different :-)
Memory allocation and management is absolutely an issue in JavaScript web applications. http://blog.socialcast.com/javascript-memory-management/ 
I just started this book and so far it's fantastic! good work. Starting out with a heavy dose of using functions is a great approach.
With the exception of string.js, I'm pretty much all server-side JS with Node right now, so I don't have much of an opinion other than AMD/Require.js looks really ugly. I've seen some through out CommonJS/Browserify, but what are your thoughts on CommonJS/Component? (http://github.com/component)
So you're worried about the gap in learning but you're not willing to dive into the gritty stuff? Have patience, read the books. Part of learning programming and becoming a stellar coder has nothing to do with the language itself but the core concepts behind computing and code theory. 
I would never hire someone with your attitude.
Great analogy. I may just steal it for use when calibrating/training my more jr devs!
Ah, interesting. It looks like this is scoped for very large applications, but it's still good info at any level. Thanks for sharing! Still, though, the amount of *necessary* effort put in to memory management in JavaScript vs. other programming languages is much less :-)
The Good Parts is not a good place to start. It's too high-level for non-programmers wanting to learn JS. edit: my bad! did not see your comment just before the bold text.
There is always the classic: [JavaScript, The Definitive Guide](http://www.amazon.com/JavaScript-Definitive-Guide-Activate-Guides/dp/0596805527/ref=sr_1_1?ie=UTF8&amp;qid=1359741997&amp;sr=8-1&amp;keywords=javascript+the+definitive+guide). At one time it was the only book that Crockford would recommend on JavaScript (besides his own). edit: it's now in the 6th edition, so it stays up to date.
Yes, I'm a contributor! Express.io is my library :)
jprichardson i am not familiarized with Component but i sense that the comment i made about browserify and the overhead that is carried over the wire applies to Component too ( http://www.reddit.com/r/javascript/comments/17ox38/why_i_dont_like_amd_and_what_ill_do_about_it/c87iofk )
* Being able to set a global variable by forgetting a var statement. * For loop is not modern, based on the c for-loop. * Excessive syntax, with curly braces, semi-colons, and the keyword function. * Some of the type munging is weird, like adding null and 2, or a string and a object. * The difference between === and ==, or !== and !=. * Proptypal objects are kind of a weird way to do classes. That's what I would say is kind of crazy.
Beg to defer? Either that's a cute pun or a case of engrish. Seems like the latter. The actual phrase is "beg to differ".
What books are you reading? I don't know of any JS books that go into stuff like that.
Every programmer should understand the relationship between your code and memory. Not just "fantastic, brilliant" ones. You can probably get away with not knowing much with javascript but I feel like there will come a time where it will matter but you're not going to care because you've never cared before and never learnt and then someone else will end up having to go in and clean stuff up.
Can I have one too please!
Not willing and *wanting to postpone* are two different things. The main goal is to make myself employable as quick as possible as the company I work for is imploding. 
THIS is something I needed to hear. Like I said in my post, I understand they are necessary or they wouldn't be in the books, I just needed to know if not dedicating a lot of time to this would bite me later on, and as you've said it certainly could. I have to be honest, the idea of competing for space with other programs hadn't even crossed my mind. I was still living in the land of unlimited space until your comment. Thank you :)
Thanks for the tip about the profile picture! 
&gt; It's recommended for experienced programmers who want to learn the programming language of the Web...
Man, where was this post 3 days ago. I just order this book from Amazon for $14! I was worried it would be a little too high level or theory oriented so I started with a couple of basic text books, Eloquent JavaScript, and now a new book given to me for free by homoiconic! :) Thanks for the tip about memory allocation on the web, I was sweating a little lol
I'll have to check this one out too. Thanks for the suggestion!
Thank you! This is kind of the route I wanted to take, I was just looking for a little confirmation that skipping the details that I considered not pertinent to creating a little program was okay. And to be honest, I am scared of writing shitty code lol. Imagine my surprise when I finally got down writing a while loop that was 6 lines long and then found another way to do it just one line using range and sum. grrrrrrrrrr lol
thank you, corrected
I wouldn't say its a joke without a CS degree.... a lot of developers are self taught without CS degrees. From what I've noticed, most companies care about what you have actually done and what your portfolio looks like and don't care as much if you have a CS degree (not saying it doesn't help though).
Don't sweat it. I honestly learned more on the job (during my internship) in just a few weeks than I did in all 4 years at university. I didn't go to an amazing school or anything, but in COSC we spent so much time learning about bytes and memory and all that other stuff that I've never used in the real world that we hardly ever took time to learn how to actually *program* anything practical. In programming you learn by doing, so just stick with it and you'll be amazed at what you can do! All that being said, I have no idea how easy/hard it will be for you to find a job in programming without a COSC/MIS degree (as useless as such a degree might be). Keep with it though, and I'm sure good things will come! Bonus: This article on [code conventions](http://javascript.crockford.com/code.html) by Douglas Crockford is another invaluable resource that I'd recommend you check out.
pretty presumptuous in regard to my character! haha I specifically put "a great waste of my time(**for now**)". My goal **is** to be one of those "fantastic, brilliant" programmers, and I specify that I know learning every detail is a part of that in my post - I just didn't know if I could skip it for now (for the purposes of making myself as employable as possible as quickly as possible) and come back to it later :)
True, it's not a book for absolute beginners. But it's a full reference and covers JavaScript from beginning to end, bottom to top, whereas Good Parts only covers advanced patterns and features.
Yep, hence the first part of my comment :-) 
I use a lot of the new(er) JS features, but this guy said he's "learning" and a newbie. Starting off with that is fucking stupid. So you're bitmanipulating shit in JS, I feel for you and your JS brethren.
Great analogy :)
Nice, I'd never work for you either, so it goes both ways.
gracias! edited.
Just started cracking into JS myself, and *The Definitive Guide* is phenomenal, especially its reference sections. However, before I opened it up I read through most of the first 20 chapters of [Professional Javascript for Web Developers] (http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764579088.html). It covers the basics fairly well, especially if you are comfortable with the stuff you have worked through in CodeAcademy. It also goes pretty deep into a lot of the common issues people have working with JS. 
I don't like coffeescript largely because whitespace causing errors annoys me at an existential level. Am I, as a java programmer, liable to mess up indents? No, because we're hardcore about writing in a strict and highly formal manner. But I strongly believe that an errant space should never ever ever ever ever cause an error. I will say I don't mind using jade. Shit, even I think HTML is overly goddamn verbose. 
"Fuck it, we'll do it live!"
Dare to suck.
Yes. I know. Coming from a CS background that approach is peculiar to me. 
I try and stay away from the screeds of other libraries out there and only use the main ones. Otherwise it's a major headache every month trying to maintain a single site.
Thanks! I've heard about both but haven't investigated either. Do you have any previous coding experience or are you starting from scratch? I'm starting to feel like maybe I should have gone with The Definitive Guide instead of The Good Parts...whoops!
The thing I didn't realize earlier about with is that even this is completely unpredictable: function doStuff() { var a = 2; with(0) { return a; } } You'd expect `doStuff()` to always return 2, but it won't. Throw in a `Object.prototype.a = 3;`, and now doStuff() returns 3. So that's sad. 
nailer you are opening all kinds of subjects in such a short post =) &gt; I get that Closure Compiler is different from AMD, but I still don't understand how it wouldn't need to do the same things AMD does from your post. As i write in my post, AMD does MORE than just dependency management. And it's not the compiler that does the job it's the [DepsWriter](https://developers.google.com/closure/library/docs/depswriter) ... &gt; Why wouldn't logical dependencies need to exist on production? Who said that? They do need to be there... I am not following you on this... &gt; There are tools to combine files if you're worried about require overhead if that's what you mean. That beats the whole purpose of having a system that you declare the dependencies of each file and these dependencies are then resolved so the files are included or concatenated in the right order... &gt; Creating a closure is how JS has always done privacy. I haven't seen a better alternatives. This issue is out of scope. We are talking about Dependency Management. Personally, i don't care about privacy. When i author a library, that library is intended to be used by developers. I trust developers. I trust that if you see a method or a property starting with an underscore you know you are entering dangerous territory. I want to give you the freedom to do it. &gt; Going back to wrapping everything in closure compiler module format Three things here: 1. Closure's Dep Management doesn't require wrapping. You merely declare the file's identity. That's a one liner. 2. You don't have to even do that, you may include all external deps directly in your document as script tags. 3. How can you talk about something that hasn't even been implemented yet? Because i am assuming your comment is about the solution that i plan on implementing by ripping Closure's Deps System and creating a new product. I can't think you are actually talking about the Google Closure Library here, right? I can see you have honest questions about several things, i'd ask you to try and make them a little more targeted so i can be more specific to use-cases. But at the end of the day, i am merely stating my opinion =) 
When I was a newbie bitmasks sounded fascinating, not stupid.
Yay I'm online this time :)
what books are you reading 
The W3 tutorial you linked is not good stuff. Avoid it.
You may want to also checkout /r/learnjavascript.
Eventually, you will want to learn this, but you do not have to right away.
Good work!
Two books I can recommend as a professional spending 95% of my time writing JavaScript: * [JavaScript Patterns](http://books.google.com/books/about/JavaScript_Patterns.html?id=WTZqecc9olUC) by Stoyan Stefanov * [Mixu's Node Book](http://book.mixu.net/) by... Mixu - Free! I would spend time on learning about prototypical inheritance and how to implement inheritance and composite patterns in a native JavaScript way.
No, you don't need to know any of this to be a good beginner-intermediate JavaScript programmer.
Yeah, that's a tough one to balance. If you're looking to move quickly, whatever field you're looking to work in, build up a portfolio of proof of concepts and experiments that demonstrate your abilities. Figure out what it is you want to demonstrate and then get examples online. I've had a few devs I hired not on previous client work but on POCs and personal projects that show they know what they're doing.
I recommend you keep working with that book, it is excellent. He's just trying to give you an idea of why there are limits on number sizes and what they are. He's not talking about memory allocation. Most language books start with the native data types and what the sizes are. Don't be intimidated. One big point on this book is the console at the bottom of the screen, you can just type in js as you read and try things out.
Unfortunately not in Austin..
&gt; Why??? About the only thing I can agree on is removal of IE6 support. They knew that removing oldIE support was a major change, and so they took the opportunity to fix a number of outstanding problems at the same time: &gt; jQuery 1.9 removes or modifies several APIs that behaved inconsistently or inefficiently in the past. The majority of these changes have been foreshadowed by their deprecation in previous versions of jQuery, particularly 1.7 and 1.8. &gt; &gt; In making these changes, the team's goal was to fix behavior that makes jQuery inconsistent or hard to use, and in the process improve both file size and overall performance. In the software world if you don't occasionally shake the accumulated cruft off, you're left with code that's teeming with special cases, inconsistency, behavior that's confusing to newcomers, and so on. Removing cruft means that the jQuery team can be more productive because they don't have to spend time supporting bizarre and inconsistent behavior for the sole reason of "that's how it's always worked." It is their choice to make, not yours. They are the ones that have to support the code, not you. If the changes are surprising, then you probably hadn't been paying attention to the deprecation notices, which is a requisite for using any code. 
This is way more fun than I would have gussed. As I posted in game - I'd love to see this as open source and learn from it. Very cool.
I can recommend to learn it.
Depending on character encoding, characters may be single-byte entities. In UTF-8, characters may also consist of more than one byte, which is why you want to be careful in your specific language domain that your string library is multibyte safe.
This game is fun. I really enjoy playing CTF games and this one is pretty simple yet fast paced and entertaining.
"It is their choice to make, not yours." And that's a problem and a huge risk inherent in using open source free software. An end user has no control of the development process or direction of the software. And some of the software creators/maintainers sometimes decide to go and break backwards compatibility just because they can. They don't care if they orphan lots of websites with old code and leave them with a difficult upgrade path. They don't care if it costs businesses hours and hours of developer time (potentially thousands of dollars per business) to upgrade the site and keep it up to date. Sure jQuery library is "free" in terms of the cost to initially download it and time savings it provides for developers. But with constant updates and maintenance required to keep up to date with it and now large backwards compatibility changes, then it actually crosses over from the good value side of the scale and now starts costing businesses money to keep using it.
I really like it! nice job! Is it open source? Woud love to look at the node code.
Had a blast playing with you guys - Ballsout
I'm not so sure about that... https://github.com/component/component/wiki/F.A.Q 
by chance, are you reading a Java book and not a Javascript book?
I helped build this tool for doing automated tests across all the browsers (all the way down to ie6): http://ci.testling.com/ testling-ci uses browserify internally for the "files" field so it has native support for the kind of commonjs-style modules you'd find on npm. Once your tests are running you get a badge to put in your readme like these ones: https://github.com/substack/gamma.js https://github.com/substack/node-falafel https://github.com/dominictarr/scuttlebutt https://github.com/Colingo/presence
knowing how far along i am, would you tell me if you were? ;)
awesome, thank you. I just ordered it from amazon along with The Definitive Guide :)
thank you for the suggestions! i actually just got done with the codecademy track for JS and they saved prototype and inheritance for the very end and really didn't give it the attention i felt it deserved. of everything else they drilled down and gave great detail on, i was really disappointed with how skimpy that section was :(
nope, although i have tinkered with java in the past :) big difference in the two lol
It's awesome! And quite fun!
Pick up the "Head First" book for javascript. It's a slightly different type of learning. It is NOT by any means an exhaustive course, but if you find normal developer books a little dry, it's another method.
Great game. Some bonuses were a little unclear but other than that, it was a blast.
I think the book you are looking for is 'javascript: the good parts'
Are you using a graphics library for this at all or are you working directly with the canvas context?
Sounds like you're reading books on Java, not javascript.
I don't understand it either. Are people having that much trouble figuring out what code they want? PREFACE: **What follows is about javascript in the browser, not node.** At some point the javascript "build process"--such as it is--is "figure out what files you want and in what order, then concatenate and minify them." The best way I ever saw this implemented let your server controller request js includes that ran before the controller's js. All of this modular talk seems to me to be a pipe dream. Focusing overmuch on Modules mean library bloat. My experience with being obsessed with making 'includes' easy is... well, code that consists mostly of includes. I'll look into Google's Closure dependency system. 
Almost unplayable on FF (18) for me, but runs pretty smooth in Chrome. Loved every minute of it (I was 'ball some'). Can't wait to see what you do with it. 
No, no, no, it will NOT hurt you. I was a minor in computer science (learned Java and C) and have been a professional web developer since I graduated. I think I've had to manipulate data at the bit level maybe twice since college, and that wasn't in javascript. At that time, I just gave myself a refresher. Plus, Most JS stuff is done on the client side. Optimization isn't as important on that end as it is on the server side. If you're learning javascript (assuming you know html/css), you'd probably want to start off as a front-end developer anyway. This isn't hardcore programming, but you will most likely get the chance to do some back-end stuff at some point. And if you want to get out of tech support hell ASAP, just learn jQuery + HTML + CSS. Make a few sites, then start applying/looking for jobs. A lot of ppl think you should learn javascript first. Then again, they aren't working at your shit job. Don't listen to people who say you need to learn X to be a programmer. Becoming a good programmer is more about doing than learning. Don't try to fill your head with information by inhaling books or relentlessly doing tutorials. Create something, something small, something stupid. Still lost? Then copy something cool that has already been done, but implement it yourself. You'll go from having a vague notion of a concept to knowing it backwards and forwards. Learning comes from reinforcement, not necessarily studying, especially in programming. For instance, I'm learning about node.js. To do this, I went through a couple of brief tutorials (2 hrs total). Now, I'm creating a site that is basically a ripoff of gamefaqs.com, but with more pizzaz (some cool front-end JS stuff). And the more I learn about Node, the more features I will add to the site. Here's the main reason why I give this advice: When I started working with other coders, I realized I could ask them to explain difficult concepts to me. For the life of me, I couldn't understand callback and anonymous functions in javascript even though it is now such a simple concept. I spent maybe two weeks trying to understand it. I asked the senior developer at work, and he explained it to me in 5 minutes. As an aside, I learned about concurrency and multi-threading in college. When I needed to use it for a project, I had to study it again. That initial studying was somewhat worthless since I learned about these concepts in the abstract. TL;DR - You don't need to know this. Learn stuff as you need it. The pressure of having to "know" certain things is one of the biggest impediments to becoming a competent coder. (And, in some ways, I see it as a way for coders to make it seem like their profession is harder to get into than it really is). What makes you a great coder is having a passion for it so that you do it in your spare time, always experimenting, always learning, making mistakes and failing forward(learning from mistakes). PS - If you want to be a "programmer", learn Java or C. Free JS Resources: http://programming-motherfucker.com/become.html#JavaScript
awesome! thanks for the recommendation! I'm willing to read anything and everything :)
Wow, thank you for taking the time to write all that! I actually LOLed at "A lot of ppl think you should learn javascript first. Then again, they aren't working at your shit job." haha It's like you work here too! To be honest, at this point I don't know if I want to be a "programmer" or a web dev, but the opportunity to make web pages has presented itself so I'm running with it. I will definitely checkout your link!! Thanks again!
Good advice. I'd say go through it until it becomes a roadblock. I would also learn about bits and bytes from a general computer science/programming book and not a javascript specific book.
Don't think most JavaScript books also go into a lot of binary and memory allocation so your question as written doesn't really make sense, but books are an outdated way to learn anything, especially programming. Look for some interactive tutorials or videos. The main thing is to find interesting little projects to play around with, so that you keep practicing programming. Best way to learn is to look at source code of other projects that do things you are interested in and then modify that code to do what you want it to do. Also you might take a look at CoffeeScript and LiveScript. 
&gt; pretty presumptuous in regard to my character Honestly, he's really not. This is such a common pattern amongst self-taught devs that it's practically a cliche. The trouble is that things like bitflipping and low-level memory operations are *boring* - you don't want to do them now because they're boring and not obviously applicable, and I *guarantee* you that by the time you're learning about recursion and closures and prototype-based inheritance and the like, the idea of going back and spending days learning about something as mundane and fiddly and non-applicable-looking as flipping binary bits will seem even worse. And worse, because "you've got that far without needing it" you'll be even more likely to convince yourself that you don't *really* need it, and the longer it goes on the more pronounced these trends will tend to get. The thing is, while you probably won't ever need to understand things like bit-juggling and memory optimisation to write javascript code, if you ever want to get *really good* at it (hell, if you ever want to get really good at *any* programming or development-oriented skill) you need to know it. Every new aspect or understanding you gain about these sorts of low-level subjects give you a fundamentally different way of looking at code and problems, and the mark of a great developer is someone whose mental toolbox is absolutely stuffed with different tools and ways of conceptualising problems, so they can always find the best one most suited to the job in hand. For example, you've said elsewhere that you'd never considered the need to optimise for memory-usage until someone mentioned it...and if you stick around in the shallow end and don't worry about being a great developer you can probably go a *whole career* without worrying unduly about it (assuming you don't start writing huge client-side JS apps or games, or code for mobile devices). However, once you learn about optimising for memory, you have another way of thinking about and assessing the quality of your code, and you'll write *better code* as a result. Then later on you'll learn about "Big O" notation and optimising for speed, and how many problems can be solved in two or more ways, where you can choose to trade off between faster but more memory-hungry solutions, or slower but more memory-efficient ones. Or you'll learn about memory-management and memory leaks, and even though Javascript is memory managed and supposed to abstract away most of that sort of concern for you, by paying attnetion to *how* it does that you'll write more efficient programs that free up memory when they should and don't slow your browser down, and once again you'll be writing *better code*. However, the two things all these low-level skills have in common are: * They're boring as hell when you first start learning them, and * You can't *ever* predict how vital they are to being a good developer before you've learned them (but once you do, you'll find they inform your entire approach to *most if not all* of the problems you tackle thereafter). Stillalone isn't being presumptuous in the slightest, though I can see why you might think that. Rather, this is such a common-to-the-point-of-absolute-cliche issue that it's very, *very likely* to happen to you, despite your best intentions. Don't consider it presumptuous guessing - consider it sound advice from people who've mastered *all* the skills you're still picking-and-choosing which bits you want to learn, and who have *already watched* untold numbers of less experienced developers make the same decisions as you and end up never actually going back and covering the boring fundamentals... and thereby ultimately hamstringing their own development. You may well be one of the ones who does go back and learn all the fundamentals later (and I salute you if you do!), but recognise that the corner-cutting you're planning on is incredibly common amongst impatient learners, and that *as a direct result* there are teeming hordes of mediocre developers who never really excel or develop past a certain point, because they simply lack the basic understandings necessary for the more advanced concepts to really "click", and having spent months or years programming already, lack all motivation to knuckle down and learn the "unimportant" bits they've missed.
&gt; JavaScript is 99% useful for web only This might have been true five years ago, but these days Javascript is increasingly also being seen on the server (node.js), in desktop widgets (practically every OS), in desktop apps (Windows 8) and in mobile native app development (PhoneGap and similar frameworks). Hell, it's pretty much the *preferred language* for writing Windows 8 Metro apps in, which caused much butthurt recently amongst C#/VB .NET/Silverlight developers when it was announced. And when you consider the OP is talking about *starting* a career that might last for decades, this is really out of date advice to offer him. &gt; in which case memory allocation is not an issue Wow - *there's* someone who's never written a non-trivial client-side javascript application. ;-)
yeah this owns. i really didn't expect it to be that cool.
He actually didn't invent JSON, but yeah, he's a cool dude.
Yeah, I'm relearning js too. This would be awesome to open-source. Love to learn from it!
Start here: http://www.456bereastreet.com/archive/200909/java_is_not_javascript/
BTW - Client side code is pretty readable, although comments would help ;)
I prefered the first version when we did not explode :( But it's still quite awesome !
Dang! I thought I would be able to avoid comments like yours by including the 99% bit... Its Reddit = I should know better :-) But, you are correct! I'm actually going to start some Win8 + JavaScript project soon. JavaScript is incredibly flexible and powerful... Which is why it'll probably be around for a while. And because the toolset required to start (a browser + notepad) is ubiquitous, its a great first language to play with and learn, in my opinion.
Yes, he did: [rfc](http://tools.ietf.org/html/rfc4627)
Sorry - I normally hate predictable nit-picking comments, but in this case "99%" was just so far off the mark (and increasingly so as time goes on) that I felt compelled to correct it. Time was JS was viewed as "that weird little language for moving divs around", but it hasn't really been that for years now, and in the future it's fast becoming not just the "assembly language of the web", but also a fully-fledged cross-platform/cross-format (web, desktop, mobile, apps, network services, servers, etc) universal programming language in its own right. It is a great language however - aside from some quirks it's amazingly expressive, and permissive to the point of positive sluttiness. They say "to become popular, a programming language has to be the scripting language of a popular system" - Javascript is the scripting language of the web (arguably the most popular computing platform ever devised by man), and thanks to the flexibility of the language and the prevalence of JS programmers now, increasingly it's becoming the scripting language of anything that wants to *interact* with the web, too.
This is what I thought at first, but maybe it's referring to the size of the source code? By the way, I can't imagine the source code for an extra closure being significant either.
Caught myself playing for a half hour, awesome game!
can i get a coupon too? i plan on getting all 3 of your books :D
That was fun as FUCK!. 
i was lagging a good amount but my internet has sucked lately so thats probably why
Fun game indeed. Cheers to ball named biaz! It was fun to play with you. ;)
...I'm watching someone try to inject code. Wow they are stupid.
Well "The JSON format was originally specified by Douglas Crockford, and is described in RFC 4627" so... http://en.wikipedia.org/wiki/JSON 
just to add on if you have go to access week[4] in the array and the array has only four elements. then your going to get undefined for trying to access week[4] because arrays start at position 0 not 1. So your 4th element in the array is located at index week[3]. just a heads up.
it was worth checking for input sanitization. easy to forget when working on a project that doesn't involve moving people's critical data.
I replied about this in another comment: http://www.reddit.com/r/javascript/comments/17ox38/why_i_dont_like_amd_and_what_ill_do_about_it/c87of0y Hope that helps
Thats just a awesome game... My only problem is that I lag a lot (we were 6 balls on the table) - but its properly my computer. Some small modifications I would like, something that explains what the green icons do, maybe with a F1 help or something But really thumbs up! You should post it in /r/games, you could properly get some more ideas from them. And just because im a newbie to node, do you have the code shared on github or similar?
hmmm i now understand that component is more of a package manager? I think it's not relevant to deps management
Love it man. Great job so far.
What the heck javascript book begins by talking about memory management and binary? never seen such a beast, as far as the mainstream one go.
Agreed, sir!
Good stuff as usual. Thanks!
Sweet man! Will you release the code on github or something? I'm starting to learn JS to try and get into making HTML5 games.
this was very very fun, we were competing!
Yeah, i've noticed too the lag that was why I commented that even though it was playable for me.
Would love to see a tutorial on this! Great work!
Awesome dude. Looks like we may have crashed it? Fantastic besides the lag.
I can see how things would get confusing... Like a million components staring up at the sky, waiting to see broadcasted data in a channel they subscribe to. 
&gt; The best way I ever saw this implemented let your server controller request js includes that ran before the controller's js. That's what we're doing now, and it works great! However; it doesn't help much in terms of dependency management.
Its not that crazy to understand, people just tend to abuse the global scope for assigning variables 
Could you provide a little bit more explanation of what you're trying to do? Are you trying to get the href from an anchor tag? O.o
Okay, so all my links are in standard html &amp;lt; a href=""&gt;.... I'm trying to convert that same method to JS. That way when JavaScript is disabled, so are the links
its cool, appreciate the response :) i'm still getting those books though! learning haskell + your book should complement very well!
Would you be willing to elaborate further? When I say "disable" the links, I do mean when JavaScript is disabled. I want to make it so that, as a user, you can be taught how to use web applications and browsers. I have tutorials on how to find and enable JavaScript on IE9 (which I hate ಠ_ಠ), Chrome, Firefox, Opera, and Safari, that display when JavaScript is disabled. Being I dunno jQuery, I can't set it so that when the query reads "MOZ" it'll only display the Firefox portion of the "JAVASCRIPT IS DISABLED" text. How would I incorporate .on-js into my CSS? My CSS is external, and encoding is Standard UTF8. I have a template jQuery for my drop down menus and can read it, but I cannot write it. I can logically interpret what each line means. Is .on-js a legitimate signal, or is it a user-made signal like var or int?
Not sure what exactly you're doing, but here's my suggestion: Put your 'href' values in a 'data-href' value instead, and set the href attribute to '#'. Ex: &lt;a href="#" data-href="http://www.reddit.com"&gt;Link&lt;/a&gt; Then, set an event listener on the body element. Specifically, we're looking for clicks on any anchor elements, and setting the browser's location to whatever 'data-href' is set to. document.body.addEventListener('click', function (event) { event.preventDefault(); if (event.target.tagName === 'A') { document.location = event.target.getAttribute('data-href'); } }, true); Note: Research how older versions of IE handle events. You'll notice I set this particular event to fire during the 'capture' phase, rather than 'bubble'. I'll leave it to you to figure out why. 
Coffeescript is great, and with "Source Mapping" getting more support, debugging isnt that bad. BUT I would argue coffeescript is harder to deal with for a beginner because it can make debugging less intuative. Coffeescript is more there for programmers coming from other language backgrounds who want simmilar features as the languages they already know. Javascript's features arent necisarily bad if they are all you know. Some people are just already comfortable with other things. IMO I would avoid CoffeeScript and wait for EMCA Script 6 to come out. It adds lots of things like classes to native javascript. There are "shivs" that allow you to code in EMCA Script 6 today, just like coffeescript, even though its still not offically deployed in any browsers yet (however it will be the offical future of javascript) Still, if you're already comfortable with Ruby or Python, you might enjoy CoffeeScript.
I enjoyed this immensely.
Fantastic game. Very good controls and the teamplay is great, I'm scared to see good MMOs in node.js. 
fun! - enjoyed it. 
This was sweet. You just gave me a good hour (!?) of fun. Thank you. I'll join the others and say that if you open source this on GitHub or something, then I'll totally help close some tickets/identify the memory leak/whatever. (I do full-stack web dev)
Thanks for the Carpal Tunnel asshole!!!
I understand you are looking for a specific answer, but I strongly recommend taking a step back and describing to us what problem you are trying to solve. The concept of trying to use JavaScript to hide links sounds like you are trying to introduce some kind of access control. Remember that JavaScript provides no security, any user can use the Dom inspector in a browser and access the raw source and thus the hidden anchor tag urls. Access control requires a server side component in order to do it right.
It's some CSS declaration that is either native to the browser or included in one of your style sheets. Use the Dom inspector and right click on the element. Look at what tags are around it and the associated styles. It sounds like a pre tag.
Yes... I was about to make write up a quick fix for him, something like writing out the links with inline javascript, nothing fancy but gets the job done... But before posting that I would wanted to express this (your) point!
Can you give us an idea of what libraries/frameworks you used to create this?
&gt;I feel like it is a great waste of my time (for now) to know that the number 114 is made up of 64 bits. No, this is a very important detail. In JavaScript, there are only [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point) double precision floating point numbers. This means, for example, that 0.1 + 0.2 isn't 0.3 (it's 0.30000000000000004). It also means that integer values only work correctly up to 2^53 (9 quadrillion). It also means that there is a difference between 0 and -0. It also means that there are the magical values `NaN` and +/- `Infinity`.
"Few minutes" .. an hour later. This game is INTENSE. I'm yelling at my screen right now.
I read a bit of the sample PDF. I also just finished Crockford's JavaScript the Good Parts, and as a burgeoning coder, I understood about 80% of it. This book seems to be in conflict with Crockford. In particular the Allonge sample PDF seemed to teach a "classical" style and made the following statement: &gt; JavaScript has classes and methods, they just aren’t formally called classes and methods in the language’s syntax. I was under the impression that JS did *not* have classes. Can anyone more experienced comment on this? 
So, typing WASD in the chat box makes your ball move regardless. Just pointing that out.
That's the same situation we're in. We've been looking to hire a front end developer for about a year, but most applicants are just web devs that has worked with Wordpress, jQuery and a little MySQL. Senior front end devs are very hard to come by, so we've finally given up, we're now looking for a junior dev instead that we'll train in-house.
I tried Googleing first but didn't really come up with much. What is the point/benefit of having the :8080 after the domain?
fuck you op, I spent 5 hours playing your game,... it was great.. OG here moffos edit: shout outs to Jeffvader and Gary who played great!!!
The sample PDF also says things like: &gt; JavaScript has “classes,” for some definition of “class.” You’ve met them already, they’re constructors that are designed to work with the `new` keyword and have behaviour in their `.prototype` element. And most importantly, it says: &gt; JavaScript right out of the box has everything you need for defining classes, methods, mixins, and even inheritance (as we’ll see in Extending Classes with Inheritance). If we choose to adopt a library with more streamlined syntax, it’s vital to understand JavaScript’s semantics well enough to know what is happening “under the hood” so that we can work directly with objects, functions, methods, and prototypes when needed. The book has a single, main purposes: To take a functions-first approach to JavaScript. Everything in JavaScript revolves around functions, and JavaScript's functions have their own particular flavour. Therefore, the book is about functions, functions, functions. And that certainly includes covering the way functions and prototypes are used to write classical-style programs. If you read the book and then work with the Backbone library, for example, you'll know exactly what is happening under the hood when you "extend" `Backbone.Model` or `Backbone.View`.
He is probably running a webserver on that domain already, which means port 80 is already taken. The default port is 80. If you use a non default port you can add it at the end of the url. You can only use each port once per server/domain/ip address. That's why he had to go with 8080 :) Ports that are not 80 for webservers is something you see often in local development environments like WAMP or the Visual Studio built in IIS Express.
That's pretty rad!
It's a bit like saying "I just got my drivers license where do I drive to?". Where would you like to drive? Why did you learn Javascript? If you like to drive to client-side land you could make a reusable widget. Auto complete maybe? If you want to do some server stuff with Node.js you could try and create a child process that calls image magic and make a batch image resizer or something.
Ya, it could definitely use more maps, and more power ups, but it is really fun, I have been playing it for over an hour and I don't even game.
To be quite honest I am just fiddling around right now. I'm not even really sure what all of the options are. Is there a place that lays out the common directions people go with Javascript? Right now I am just doing the challenges on Daily Programmer.
This is really fun!
Ahh I see, thanks! 
Codecademy has you learn jquery, which is your stepping stone to bigger and better things. If you invest your time into learning how to properly write and test a backbone.js application, you'll come out with a much better understanding of JS. It's also a good start on server side JS, which can be tough to get your brain around. Here's a good blog post that helped me. https://github.com/kjbekkelund/writings/blob/master/published/understanding-backbone.md Reading the source code of projects you think are cool can also be really helpful. 
Good job! This is great :)
Thanks, I'll look into it :)
I've played this wayyy too much - Ballin
No, I don't mind that they can still see it in the source. I just want to simply hide them from the page until js is re-enabled. I'm not trying to keep any part or whole page secretive. I just want certain content to display at certain times. JavaScript on will display ghe normal site. JavaScript off will display a notice in place of the original content.
It looks like this has been around for about three years, can't believe I didn't know about it.
Practice. Set yourself a goal - maybe plugin or something and do it. It's imo way better than other forms of learning (not only in js/programming, but in everything).
MAKE SOMETHING.
Awesomely addicting! Great job.
Go build stuff. The best way to learn a language/how to code is to do it. You'll write stuff, it won't work, so you'll debug, and read docs, and read stackoverflow questions, and then you'll end up with working code. Rinse, wash, repeat. Welcome to the wonderful world of programming!
I have micro framework similar in some ways that I want to release soon.
Semi-relevant: Anyone in particular know why closure compiler prefers for(;;) to while(1)?
Umm... it's both a client-side package manager and it manages dependencies. The FAQ (which I linked) lists this several times.
for(;;) is 1 character shorter
Without a semicolon, this will interpret the next statement as loop block.
Nginx cannot proxy websocket connections. Besides that you usually do not want anything between the client and nodejs for performance reasons.
Backwards compatibility?
I would fire up underscore.js and start learning how to use javascript funtionally (no clue how well codecademy prepares you for functional programming)
Anybody still playing? What happened?
Build something. Even if it already exists. I got to where you are pretty much and decided to build an Ability Score Calculator for Pathfinder. I just finished it up tonight. That taught me A LOT.
Learn a module system so you can cleanly use code other people have written and start contributing modules of your own for the greater good. I personally like to put modules on [npm](https://npmjs.org) since I write a lot of [node](http://nodejs.org) so I wrote [browserify](http://browserify.org) so that I can use the same modules and module system I'm used to in node in the browser too. [voxel.js](http://voxeljs.com/) is a project that uses tiny node-style modules in the browser with browserify and is very approachable for newcomers. As you build your own experiments, search for tiny modules to fill in the gaps and to simplify what you're trying to accomplish. There are tens of thousands of modules on [npm](https://npmjs.org) so often there are multiple modules that can do what you need. If you don't find a module that does what you need then it's super easy to publish a module to npm if you can build something independently of your project that solves your problem in a reusable way. I would avoid spending too much time looking at large projects like jquery since much of their structure and code is wrought with arbitrary historical, legacy, browser-quirk, and performance-based decisions which are not very comprehensible to beginners or advanced users for that matter.
I highly recommend https://developer.mozilla.org/en-US/learn/javascript It groups tutorials by "introductory," "intermediate," and "advanced." CodeAcademy is one of the introductory tutorials, so there's a lot still to learn.
I think the module pattern is where a closure works well, the only "leak" here is us using the module *within* another module and keeping a reference to it. Which is what we wanted to do. The only place where it's an issue is when you're repeatedly creating leaking closures i.e in a recursive call or setTimeout. Or IE6. You are right that creating closures requires responsibility, I guess CommonJS wins here since they are implicit, not so sure about AMD with all that nested hell and loose coupling. Also, CommonJS kind of locks you into having all of your code in modules, so there's actually *less* risk of these kind of problems showing up as the only thing exposed is a "require" function that you should use once to boot, from then the modules require each other using their deps. Not to mention the benefits; improved workflow, productivity gains and a generic peace of mind. They far exceed any drawbacks you might have about the extra bytes or leak fears or whatever.
If you're pulling 1,000 files of ~5kb, that's 5 megabytes. 5mb + 125kb is insignificant. I highly doubt that you're pulling 1,000 unique files in a project all at once, so let's say you split these in, say, 10 pieces so you don't pull them all together. Now every sub-build you have is 524kb instead of 512kb. But hey, you're now modular, so you can find common patterns in your 1,000 file code base and split those into modules. So in real life situations you're actually going to be *reducing* code by using AMD or CommonJS. You're also going to be reducing *time* coding and testing because you now have a pool of thousands of modules (at least in CommonJS) that are ready to be consumed without you writing anything.
I can't recommend moment.js enough for anything that requires extensive working with dates.
~~Could you give an explanation on why you can't recommend it?~~ Don't mind me.
he can't recommend it *enough*
trivia time: n the olden days, using C we would: #define ever (;;) and then use it as: for ever ( do something ) 
I absolutely agree with your points. Loose coupling is a very good practice but abusing it causes a lot of impedance when developing. Quoting: &gt;Parent components should communicate with its children via direct methods calls. It does make sense to me because parent components already know about their children — they created them during instantiation phase of got them through the constructor arguments. So it doesn’t harm “loosly-coupled” architecture at all. &gt;Children shouldn’t be aware of its parents so “child-parent” communication strategy is the point where using events is acceptable and useful for components’ reusability. That means you shouldn’t hold references to a parent component and only trigger events so other components up through a component hierarchy could react on them." 100% agree. In fact, this concept is being applied to a framework I'm working on, called Spoon.js: https://github.com/IndigoUnited/spoon.js Check out the concepts and you will see that it matches your opinion on this subject.
I once created a similar library, but now I highly recommend not to use these kind of libraries. Prototypal inheritance and functional programming requires some time to learn if you're coming from a classical oop background (like I did), however it is much more powerful. When you use libraries like these you'll never learn to use the full power of javascript.
have you had any luck with erasing vector lines?
&gt; Functional programming alone does not scale. Who told you this? Concurrency is much easier to do in functional programming than in oop programming, which also makes scaling easier to do. I don't think you should program pure functional, in fact I'm a huge fan of a hybrid solution. However, I don't think simulating classes is the right way to do this. Programmers from a classical oop background won't bother to learn about functions, closures and other brilliant stuff in javascript if they don't have to. When I first started to program in Javascript, I programmed in a classical OOP style. However, I have noticed that as I became a better software developer I slowly started to embrace the functional and prototypal parts of javascript, and I found out that I can create better programs in a shorter amount of time using these techniques. &gt; Prototypal inheritance, although powerful and flexible, lacks most of the features developers require. Which features are you referring to? Most, if not all, features from classical OOP can be emulated with prototypal inheritance, while the reverse is not true.
Some code examples with dejavu: https://github.com/IndigoUnited/spoon.js/blob/master/src/core/Joint.js https://github.com/IndigoUnited/spoon.js/blob/master/src/core/BaseView.js https://github.com/IndigoUnited/spoon.js/blob/master/src/core/View.js https://github.com/IndigoUnited/spoon.js/blob/master/src/core/Controller.js https://github.com/IndigoUnited/spoon.js/blob/master/src/core/Broadcaster/Broadcaster.js
Leaves blank page without cookies enabled (FF); would be nice to catch that.
Assuming that `input` is a reference to your input element and that `output` is a reference to your output element: input.onchange = function (){ &amp;nbsp;&amp;nbsp;var month = this.value &amp;nbsp;&amp;nbsp;// Is the month in the correct range? &amp;nbsp;&amp;nbsp;if ( month &gt;= 1 &amp;&amp; 12 &gt;= month ){ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Months in JS start from 0. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var date = new Date((new Date).getFullYear(), month-1, 1) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;output.value = date.toLocaleString() &amp;nbsp;&amp;nbsp;} else { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;output.value = 'Invalid month' &amp;nbsp;&amp;nbsp;} }
Can somebody give me an example where classes and inheritance are really great? I don't want to see the 'Lets say you have many different animals so you have a base animal class' crap. This is great for explaining OO to a beginner but has zero values for me writing code in the real world. My experience is that for OO to be really usable you actually need to be a really good developer and study it hard.
I'm not running Google Chrome, sorry!
Fix your feature detection script. I am using WebKit and it does support the WebAudioAPI, but typeof webkitAudioContext == 'object' and not 'function'... by the way, nice idea, but forcing to have a facebook account to be able to post the score is a drag.
Well, I'd say that this is true if you use a more functional style in JS as well. It's just as hard to write nice, maintainable code whichever style you write in. Different styles open up different possibilities, and I guess the trick is to know how and when to use the different possibilities.
Thanks, I'll get it changed when I get back. What browser are you using? It requires the createOscillator web audio api node. 
I love it :p
All of them! But both Safari &gt;= 6 and WebKit supports what you need for your application to work. It is just that the AudioContextConstructor is not a function but an object. A better future-proof feature detection for you app could be: var supportsWebAudioAPIAndOscillatorNode = (function(){ &amp;nbsp;&amp;nbsp;var audiocontext &amp;nbsp;&amp;nbsp;try { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;audiocontext = new (window['AudioContext'] || window['webkitAudioContext']) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return "createOscillator" in audiocontext &amp;nbsp;&amp;nbsp;} catch (e) { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false &amp;nbsp;&amp;nbsp;} }())
Prototype inheritance suffers fom the very same problem. What people do is to mixin stuff into constructors prototype. dejavu also supports mixins in order to borrow behavior from other objects/classes. It even works with vanilla constructors/objects. Also, if you use AMD you can only require the Class and leave the other stuff out, like abstract classes or interfaces.
This is a really cool use of the Web Audio API
Totally agree. Some people will always argue that it's hard/limited to do classical OOP, and that functional is the way to go! Awesome for them. Personally, I use both approaches all the time, depending on what will do the job better and/or quicker. I am in charge of a few projects, with teams of 3-5 elements, and it would be a shot in the head to force everyone to "just go this way". Both strategies are valid approaches to several problems, each with its advantages/disadvantages. The main problem here, I think, is the fact that both strategies solve a big set of common, everyday, programming issues, and some people are just unable to accept that the other is just as valid. It mostly comes down to, and note that I'm generalising: - Traditional OOP, you'll have to build a solid contract on everything that is part of your system, which is good if you're building a big software, with some major modules, but might be impedance when developing small modules; - Prototypal inheritance and functional is awesome to get something going really fast, and exceptionally good when you need to make something simple (this doesn't mean it can't do big aswel), but due to its exceeding flexibility, having several people on the same project might lead to harder to maintain code; If you have the mental agility to keep moving back and forth between both strategies, you'll get the best of both worlds. If you don't, and just want to keep doing your own style, regardless of what it is, that's fine too! Now, if you need to constantly push your own style, without making an effort to understand why people use other styles, have a good life! You're an idiot... You're the reason why dolphins die. How can you live with yourself? I think I'll make a meme out of this.
Exactly.
get rid of ~~var month = this.value~~ and change accordingly: var date = new Date((new Date).getFullYear(), **inMonth**-1, 1);
I agree that it might be overkill for some use cases, but the beauty of it is that you can go as thin as you need, since you don't have to use it all, nor include it all (through AMD), and ultimately, you can just not use it :) I don't use dejavu for everything I do, regardless of being a fan+contributor. Totally agree that it is overkill sometimes.
Man you need to market this more! Been playing all alone haha.
Personally I find prototypal approach much more convenient than attempting to recreate classical inheritance in javascript. I have been experimenting with lotsa libraries like jsclass earlier but realized that all it brings to my code is additional magic and wrappers. That was until I understood mixins. http://rezoner.net/javascript-classes-components-and-bullshit-1,698
Typecast.js (http://Typecastjs.org) helps resolve/avoid Javascript's weirdness' like this.
It's nifty, although I'm a bit irked at 2 things: 1. What pitch corresponds to the max and min on the range? 2. the gamification aspect if #1 were better indicated, or compensate by something like mapping my curves linearly to get closer to the target, #2 would be less of an issue.
Also, beware the difference between a function declaration and a named function expression: foo(); function foo() { alert("Hello!"); } Works, but: foo(); (function foo() { alert("Hello!"); }) Does not, and neither does: foo();! function foo() { alert("Hello!"); } Thanks to that spurious bang that you might accidentally type.
Beware further that function declarations will hoist out of blocks. The following code: if(something) { function foo() { }; } else { function foo() { }; } Is probably not doing what you want (I believe all non-spidermonkey impls will hoist both functions regardless of if conditional, and the last one wins, while spidermonkey will hoist just the executed one). ES6 proposed to fix this garbage by making functions hoist only to the nearest block, but turns out that code like above is very common on the web :(
Isn't there an IE7 or IE8 quirk where named function expressions leak, so your second and third examples would work in those browsers?
Girlfriend watching something on my second screen so can't use audio :( Good luck though, upvote to get you some more exposure. Also don't have facebook
What browser/os/cpu ?
The next time I fire up an IE VM, I must remember to find out what this does: var factorial = function myself (n) { return n === 0 ? 1 : n * myself(n - 1); };
&gt;Sign in with Facebook to post a score and just like that, I stopped caring about it.
This should work fine in all versions. However the aforementioned bug in IE &lt; 9 will result in a binding to myself being created in the outer scope, which may conflict/override other bindings.
Great site, and it's even better if it helps with your research
Isn't having multiple implementations of a programming language from multiple vendors a lot of un?
 Parent.prototype = { C: function () { ... }; } Remove that comma. Tell me what happens.
Here is a dangerous example of variable hoisting var a = 5; (function() { if(a == undefined) { var a = 7; } console.log(a); }) () ;
It's pretty much a slideshow for me. Which is too bad, because from what i can see it looks neat. Firefox 18.0.1 Windows 7 Intel 15-2410M @ 2.30 GHz
Why not download it? Besides, I love FF but if you're interested in JS then you should get Chrome. V8 is wicked awesome.
This works for me, btw: f1.js: var Parent = function() {}; Parent.prototype = { C: function() {} }; module.exports.Parent = Parent; f2.js: var Parent = require('./f1').Parent, util = require('util'), Obj = function(){ this.bar = 'bar' }; util.inherits(Obj, Parent); Obj.prototype.A = function(){ console.log('a method'); }; Obj.prototype.B = function(){ }; module.exports.Obj = Obj; f3.js: var Obj = require('./f2').Obj, obj = new Obj(); obj.A(); running *node f3* produces a method
I'm pretty sure the problem isn't the require statement, I'm loading up the right file. This is the actual code that i'm using https://github.com/CalvinRodo/WedXpress/blob/master/DataLayer/RegistryDB.js
So what are you doing differently then me? Could it just be the version of node i'm running. I'm developing this in Webstorm. I'll try running it from the command line. 
I don't see any exports from that file, for starters. you also use "my" which isn't defined anywhere. I see you have stuff like: var RegistryDB = require('../DataLayer/RegistryDB.js').RegistryDB, But since RegistryDB doesn't export RegistryDB, you're kinda boned ;P
Any situation where you may have multiple implementations of an interface, e.g. sparse vs dense matrices.
Looks fine on my iPhone 4S
Okay I lied that's not the actual code I'm working, I've now pushed the latest version to my repo check the link again. Also the *my* didn't really matter since I couldn't call the function so it never got to that line. It was a leftover from making my objects the crockford functional way. 
Actually, a function definition inside a block is invalid ECMAScript. But ECMAScript allows syntax extensions, so each JavaScript engine has extended the syntax to allow function definitions inside blocks. But they didn't all implement the *same* syntax extension, so as you mentioned different browsers will handle this differently. So, bottom line, never do it!
Played on my android. Can't turbo from abominable snowman. Like being 5 all over again.
All engine's extensions around functions in blocks are actually valid ECMAScript due to Chapter 16, which states that implementations are allowed to extend program syntax and regexps. There are some areas where all browsers agree on the semantics of functions in blocks (as evident by their being present in many of the most popular sites and a couple libraries). I think a big reason to avoid functions in blocks right now is because their future is uncertain. Without knowing what ES6 semantics will be, writing functions in blocks carries some risk that your code will be incompatible with the web in a few years.
Would be nice if you could get a playback of what graph you actually drew.
Seems like this didn't get a whole lot of attention a few years ago but I think it's amazing. I was actually looking for [this](http://www.reddit.com/r/javascript/comments/ctg36/gameboy_emulation_in_javascript_the_cpu/) and came across this one first! Enjoy. :)
Great suggesting and nice catch on the prettyText. My next goal is to tackle the clientside stuff. Thanks for the heads up.
I'm trying. It's the cart-before-the-horse problem right now. People leave because it's just them. It's just them because people leave! :)
Thanks for the heads up - I'll put it on the list. 
If you're interested, I tried to give a longer answer here: https://github.com/raganwald/homoiconic/blob/master/2013/02/prototypes.md Others may have more insightful things to say about classes vs. prototypes.
"Doctor, it hurts when I do this." *Don't do that!*
I've played alone a few times. I'm MR. BALLS/BATMAN/Obama haha. edit: Can't wait until the login is done so I can pick one of 3 personalities.
Yeah, I hope to use it as a bargaining chip when validating my geek cred.
Firefox 18(or what ever isbnewest), Archlinux, Atom N330. Maybe it's just me since iphone is mighty slower than my atom, and the iphone user gets it.
I'm gearing up for that. I'm a little afraid the server will melt. Soon though. 
I applaud the effort, but this seems like yet another attempt by a team unfamiliar with JavaScript to disguise the language as something they're used to. Unfortunately, this tends to produce [leaky abstractions](http://www.joelonsoftware.com/articles/LeakyAbstractions.html) and complex, hard-to-debug code. As a long-time JavaScript developer and lead on a large JavaScript team, I encourage our programmers to really learn the language instead of looking for crutches. In the end, their code becomes simpler and more powerful than something based on pseudo-classical OOP. 
It is a compressed version of http://301.untergrund.net/elevated.html (92k) -- but the JS is compressed into a PNG image, a technique that has been around since 2008, but was new to me. The compression is explained here: http://daeken.com/superpacking-js-demos
What's the bang do?
this is awesome. even in 92k some of those textures must be procedurally generated. Plus the filters, very nice.
Mario Land is still ridiculously hard to this day.
Data structures and algorithms. Also, design patterns.
Try double tapping :)
Runs amazingly well. Any cool things we can do with the debugger?
In fact I did not know this feature of javascript at the beginning of my javascript experience
Really interesting reads and something to takeaway and mull over, thank you.
You can actually already do that. Once you are on the leaderboard click "Playback Graph" and it will play back exactly what you have drawn.
Not JavaScript will interpret this as the expression "not function-declaration", which will be evaluated as false, but without the declaration being made.
Oh I definitely want to get better acquainted with JS before even thinking about venturing into CoffeeScript! Certainly looks interesting but I think I have enough on my plate getting to grips with JS. I don't have any familiarity with Ruby or Python either - an absolute beginner alas! 
Don't use this. Browsers are removing support for target-densitydpi. https://bugs.webkit.org/show_bug.cgi?id=88047
So javascript has prototypes AND constructors. Thanks, but it seems even here, .constructor gets the short shrift. Queue.prototype is a fully fleshed example, but square(2).constructor gets only two lines. I cant remember seeing .constructor used in any patterns. What is it good for?
Ah, i see you dropped your claim about functional languages not scaling to big systems :) &gt;Between this two pieces of code, which one you feel more organised and readable? The one that is not present. FUNCTIONAL. :)) On a serious note, you are comparing prototypes with OO. What does it have to do with functional programming? I'm no fan of JS, with or without OO. It's one of the crappiest languages out there.
&gt; I cant remember seeing .constructor used in any patterns. What is it good for? Pretty much nothing.
A very interesting read, cheers!
&gt; You will have something that works just like a simple class-based system, with the constructor function and its prototype acting as the "class." &gt; But if you want more, you have a flexible system that does allow you to do much much more. It's up to you. That's kinda not-really-true, at least for Javascript's rather limited (and limiting) object system: dynamically typed class-based languages (Ruby, Python) generally offer very similar affordances. They may have some or different limitations (e.g. Ruby's dichotomy between methods and other callables), but not comparatively less flexibility (in many ways more, as they expose a metaobject protocol which javascript's limited prototypal features have trouble matching)
Without digging into the source code of `util.inherits`, I would suspect that your problem lies in the inheritance joining step. I would recommend moving the code into the same file and attempt to generate the minimum-possible repro case. That way, you can be sure it isn't related to flubbing the exports or some sort of procedural error. var util = require('util'); var assert = require('assert'); var Parent = function() {}; Parent.prototype.foo = function() { return 'foo'; }; var Child = function() { Parent.apply(this, arguments); }; util.inherits(Child, Parent); Child.prototype.bar = function() { return 'bar'; }; var parentInstance = new Parent(); var childInstance = new Child(); // Assert that we're running nodejs v0.8.x assert((/^v0\.8/).test(process.version)); // Assert that our parent instance behaves as we expect it to assert(parentInstance.foo() === 'foo'); assert(parentInstance.bar === undefined); // Assert that our child instance behaves as we expect it to assert(childInstance.foo() === 'foo'); assert(childInstance.bar() === 'bar'); This runs fine in my local node instance.
Very cool - My computer's fan is going bonkers now.
Given an object, it tells you the constructor that constructed it (or, well, that's the idea). `constructor` is really just a property of the default `prototype` property of the constructor function (actually, of any function). That is, after creating `function Nullo() { ... }` you have this (where `[[Prototype]]` is the reference to the prototype of an object): Nullo .----------------. | [[Prototype]] -|----------&gt; Function.prototype | prototype -|------. '----------------' | Nullo.prototype ^ | .--------------. | '--&gt;| constructor -|-. | '--------------' | '------------------------------------'
Idiot question here, because I know I've read the answer before: why is it conventional to say: Foo.prototype.bar = function () { ... }; Foo.prototype.baz = function () { ... }; rather than: Foo.prototype = { bar: function () { }, baz: function () { } }; ?
You're clobbering the old prototype in the 2nd example, which _could_ be problematic if you're using inheritance.
Thanks, I want to see the refactor of this. I'm prone to writing functions just like that form submit event handler.
your sample code here certainly uses a bad require, since 'c' is not showing up in the prototype. try a console.dir(Parent) after you require foo.js. Also can you share the file where you're using RegistryDB.js
Take a look: https://github.com/CalvinRodo/WedXpress/blob/master/routes/RegistryAdmin.js
I think by "more" the author means more than the simple class-based system you get by just using `new` on a function with a prototype. Not more than what you get from Ruby or Python. I certainly think that JavaScript probably offers more than the target audience of this article probably realizes.
I mean both. JavaScript's prototypical inheritance is a little more awkward for some things, because it provides a very basic building block that you have to use to put more complex object or meta-object protocols together. But it does quite a few things easier if you "cut with the grain" and embrace its functional nature. For example, method decorators a'la Python are trivial in JavaScript and require not special syntactic support. Mixins are another area that are awkward if you try to replicate Ruby's semantics but trivial if you think of them as object decorator functions.
For small values of "pretty much." It's about as useful as Ruby's `.class` method. Not a day-to-day thing, but very handy when diddling with certain meta-programming things.
I like Underscore's `_.extend` so that you can have the best of both worlds: _.extend(Foo.prototype, { bar: function () { }, baz: function () { } };
Eh, decorators in python don't require special syntactic support. Without the special syntax, decorators in python look a lot like in JavaScript: def isAnAdministrator(): ... return hasAdminPrivs isAnAdministrator = logsItsResults(isAnAdministrator) The only significant difference here is that python doesn't have multiline anonymous functions, so you have to write the function name more times. That really doesn't have anything to do with inheritance.
Could you elaborate more on that? Because I am using 2nd approach 100% of time - and never thought that I am actually overwriting something important. Thought that prototype for a "fresh" object is empty anyways.
Functions decorators are significantly easier without the BDFL's all-consuming hatred for lambdas :-) But I wasn't suggesting that they have anything to do with inheritance, just that JavaScript's inheritance is a little more awkward than classist languages, but other things are easier and just fall out of its structure, like Pythion. Ruby, OTOH, is a complete clusterfuck of affordances for all kinds of things. Objects, Eigenclasses, Modules, Classes, callbacks, ...
Why are they removing support for it? The bug's description is simply: &gt; Remove support for target-densitydpi in the viewport meta tag With no reasoning what so ever as to why it should be removed.
what does console.log(Object.getPrototypeOf(regDB)); spit out in your index?
It is fresh if you're creating it right before setting it, so there's no harm in overwriting it, but let's say you have a fancy method with this api: Object.inherits(SubClass, SuperClass), which basically properly sets up the prototype and constructor for protopal inheritance. function SuperClass(){} SuperClass.prototype.bar = function() {}; function SubClass(){} Object.inherits(SubClass, SuperClass); // SubClass now has bar method METHOD 1 - adding to the prototype SubClass.prototype.baz = function(){}; var sub = new SubClass(); sub.bar(); // OK METHOD 2 - overwriting the prototype SubClass.prototype = { baz: function(){} }; var sub = new SubClass(); sub.bar(); // TypeError: Object has no method 'bar' 
 { GetRegistryItems : [Function], SaveRegistryItem : [Function], DeleteRegistryItem : [Function] } *edited for formatting.
ConnectToDb is not showing up there.. don't you need to call the super constructor (DB) in your RegistryDB constructor?
Yeah I was thinking today that I probably have to do that. I'm going to give it a shot when I get home. 
&gt; let's say you have a fancy method with this api: Object.inherits(SubClass, SuperClass) I made it up to help with the explanation. You can replace it with whatever inheritance framework method you like, although I modeled it off of node's utils.inherits.
..So you're telling me youtube HD videos load faster purely due to some mathematical compression algorithms..???
The evented system that Flight is putting forward is more for communication across different components rather than parent to child communication. Passing up the communication to the parent is great, and works well *within* components, but doesn't really help if you want that message passed across to a sibling rather than a parent. Instead you'd have to listen to the child from their parent and pass the message across (and then that message may need to be passed down the chain to the child that needs it). I'm not sure that events are hard to debug. Yes your call stack will have some calls to a library in it, but you just skip those and get to the part in your code where your function is called. As long as you namespace your events and have them well named it's very easy to keep track of them. I'd say it's much easier to read evented code. You just trigger your events from any part of any component (that's easy to understand) and then if your events follow consistent guidelines it's easy to see that what you're listening for when you come to your "on" method. I usually use a mediator for an application that can take namespaced events (https://github.com/rhysbrettbowen/PlastronJS/blob/master/mediator.js) and then listen for those. It's perfect for cross component communication (I can have things like error events fire and have a single error component to report on them). Also: "they created them during instantiation phase" - is not always true especially if you use DI. The parent may actually instantiate them, but it doesn't always know what it is instantiating.
I see. So the moral of the story is, if you're trying to pretend Javascript is another language, the underlying abstractions leak through. Got it! :-) *I'm not being dismissive btw - if emulating classical inheritance works for your team by all means do it; the fact that the `inherits` machinery stomps on the prototype is unfortunate, but obvious as long as you know there are prototypes underneath.*
I know it's sacrilegious, but I prefer to just add extend onto the Function prototype: var Bar = Foo.extend({ doSomething: function() { }, anotherMethod: function() { } }) ... or ... var Bar = (function() { // constructor here }). extend( Foo, { doSomething: function() { }, anotherMethod: function() { } )}
I was actually trying to show that stomping on the prototype after using inherits is what you want to avoid :) But you're right. For all the same reasons why one would tend to favor composition over inheritance in an OO language, I would also favor it in JS.
*Well that's just, like, your opinion, man.* I think we can agree it's not in day-to-day use. After that... I wouldn't say it has no uses, but I would say that I haven't used it in client code, only inside of a helper library.
Yours is not the only book I've seen it in, but yours is the one I stole the reference from :) I'm not letting your "five paragraphs" get to me, I just have no background in binary or memory allocation or compilation or anything else that was probably taught in an introductory course to CS majors. The brief overviews that I've seen (like your 5 paragraphs) were not enough to get me feeling particularly comfortable with binary and the like, so I was asking this question to reddit to see if it warranted anymore research than what was provided. It was not my intention to insult you in anyway by referencing your book, I'm actually really, really enjoying it! 
wonder who downvoted this and why. Seems like a really nice explanation of DI to me. +1
This is great, thank you. I think I'm convinced now not to create my own `log` function, but just to use the standard `console.log`. One question this raises for me though: Now that we're creating an `addConsole()` function, my library will obviously need to call it. Where should I do so, right after the function declaration? function addConsole (window) { ... }; addConsole (window); __edit__: while we're at it, maybe you can address some of my other concerns. 1. When my debug flag is not on, should I just pass `{}` as window to `addConsole`? 2. This approach seems to require that `addConsole` be a "public" method, where previously this code was effectively hidden. I just want to be sure that this is best practice, as whatever lessons I pickup here will be applied on a much larger scale.
They are both looking at the same event. You should make some change in state (add class or something) after the first click and check for that changed state on a single event. If it exists $('#dropdown').fadeTo('fast', 0.1); else $('#dropdown').fadeTo('fast', 1);
you're attaching both handlers to the same event, so they're both firing at once. What you probably want to do is keep track of the dropdown's state somewhere and have the event handler decide whether it needs to fade in or out when the click occurs.
&gt; For some reason it hasn't loaded the jQuery library in jsfiddle That's because the library selector on the top left is set to "No-Library (pure JS)". You should set that to jQuery, save the fiddle, and give us the new URL.
Glad you're enjoying the book. Apologies about my tone in the parent message.
This is a tutorial I wrote on how to create a Bootstrap-driven accordion that is rendered using nested Backbone.Marionette views. I hope you'll enjoy it ! If you want to see a few more (simpler) tutorials : http://davidsulc.com/blog/category/backbone-js/backbone-marionette/
This is a tutorial I wrote on how to create a Bootstrap-driven accordion that is rendered using nested Backbone.Marionette views. I hope you'll enjoy it ! If you want to see a few more (simpler) tutorials : http://davidsulc.com/blog/category/backbone-js/backbone-marionette/
No problemo - happy to share
"The original source for this article [can be found here.](http://mkeas.org/intro-to-backbonejs)" What is the point of this article then?
I really like this! God damn I can't wait til data channel actually works.
I'm wondering how common it is among javascript developers to understand all of this. I've been programming javascript for 15 years, and have no problem following the code examples, but I still don't really have a grasp on the differences between the terminology of classes, prototypes, instances, methods, and to some extent constructors and objects. To me, everything is an object in Javascript. But yeah... I can guarantee no one else who does JavaScript at my work would understand any of this. I guess I'm wondering... I'm all for learning more and knowing as much as possible about the languages I code in, but can anyone explain with examples how is this helpful information to a coder?
Oh, I knew that it was a negation when used "properly," I thought that it had some special meaning there. Fairly strange that you can negate a function declaration. At least I have strict mode. Thanks!
Ahhhhhh I think i came across this solution in code academy! thanks for the subtle clue :p
I thought there was supposed to be a Udacity course starting that goes over the making of (at least parts) this game. https://www.udacity.com/course/cs255
Don't apologize, I can see how it might have come off as flippant. You are a very talented writer and I am truly enjoying and learning a lot from your book. So, with that said - you put the binary in the book, so do you think I should research it more before moving forward? Well, I already moved forward in your book, but you get the idea :) Clearly the input of someone who literally wrote the book would be extremely valuable to me.
sigh. **Backbone isn't MVC.**
Inventing something means it did not previously exist. He created a specification for it and advocated its use as a lightweight interchange format, but JSON already existed as part of the JavaScript language. He has stated in lectures (see his O'Reilly talk on JSON) that he is NOT the inventor and that other people were using JSON before he recognized its usefulness.
Look. /r/javascript is the only place I publish. I feel ok sharing my articles here because I'm pretty active on Reddit generally and here in particular. I usually don't get much reblogging or whatever the term is. The way I see it, my articles have that one chance to make an impact, and if I'm busy trying to get them "visibility" instead of writing new articles, I'm wasting my time. Getting eyeballs in exchange for my content, so that _you_ can make advertising money isn't exactly the sort of deal I respect. Now I don't know if I've got some stupid notion of integrity, because I'm pretty sure I could grab a lot more attention than I do. But you're reblogging a two-month old article that was out of date when it was written: **Backbone isn't MVC,** you can _tell_ because mkeas mentions controllers **exactly once**. 
I find it strange to copy word for word the original article and slap on different css. It makes more sense to write a brief summary about the article and post a link to it (the way reddit does it).
Then it would be clear that there isn't any new content being presented. 
&gt; return "Uh oh, you're name is Joe!"; Uh oh.
I don't understand why some programmers get so tribal when it comes to language preferences. There was a lot of hatred and misinformation in that comment thread simply because "their" language wasn't chosen. Crazy.
For me, the differences comes down to stuff like [this](http://stackoverflow.com/a/3362623). There a new prototype is made on the fly, with a different constructor, so you can use apply on constructors. You could solve that problem in OO languages too, but the solutions would look different.
Don't know who downvoted you when you're right. Backbone is more MVVM than MVC. The article is out of date and ripped off from another author anyway.
&gt; I'm all for learning more and knowing as much as possible about the languages I code in, but can anyone explain with examples how is this helpful information to a coder? My experience is that if you "Stay on the path," you can avoid a lot of this stuff. By which I mean, i you stick to established patterns and very stable libraries or combinations/stacks. However, if you customize something, or combine a few things that weren't meant to be combined together, or try a new library that hasn't been perfected for exactly what you're doing, you sometimes run out of pavement. At that point, knowledge of what's happening "under the hood" is vital. And it rarely costs you to know this, so if you're conservative you can read things like this and file them away in your mind, you don't have to rush out and do anything aggressive like write your own framework. JM2C.
I have nothing that is working...I copied some if else statement off the internet and tried to switch out variables with what I am using but nothing really worked. here is what they used: if (time&lt;10) { x="Good morning"; } else if (time&lt;20) { x="Good day"; } else { x="Good evening"; } I changed time, "x", and everything in quotes to what I wanted but it did not cause any change 
obviously, the code i pasted was multiple lines, not single lined
It depends on the problem. I have a lot of asynchronous code, which is single threaded, but still a nightmare when it had OO. I've had to move it further and further towards a functional style to help move out my side effects, and remove the tracking of side effects (which was there to get around the fact that it's asynchronous). I also have functional code which is just a mess. Functions passed to functions which return functions which you call, who then give you a function, and return a function, and so on. A mess. Functional, OO, or a mix; It really depends on the problem domain. edit: TypeScript / Dart / CoffeeScript etc, isn't just all about adding classes. It's also about adding in modules, and building languages which are easier to tool for. In TypeScript's case, it's also about adding as much static typing, without getting far away from the outputted JS. In fact many of them will make functional programming much, *much* easier. Shorter syntax for generating functions, language features for conveying more information about functions (such as which 'this' it should be bound to), and type information to ensure their usage is correct. So I just don't agree they are all about adding on a better class system over typical JS.
I'm sure it's a great library, and to be fast, does require a lot of good work. I also love JS, and used to be heavily pro-OO. However my thinking is really starting to change. Not that OO is bad, but OO in JS is bad. One of the main problems is, what do you actually gain? For example I could do OO in TypeScript, Dart, or Java, compile to JS, and have checks and protection built into my class at edit/compile time. TypeScript even compiles to JS on the fly; I'm sure there are many others which do too. It'll also be clearer, your intentions are more obvious (i.e. your class starts with the word 'class'), and uses less code. Now a good use case for JS is for when you want very unconventional OO. For example I have a library for building special field/functions for event handlers, and common bits of logic like that, which the OO has some comprehension of (so there is a tad less boiler plate). That's taking advantge of it's prototypal nature, to build something you don't get in other languages. I've also built functions which can be used as both a regular function, or as a constructor. That's a use case for JS. But if you just want a regular class, why bother doing it in JS?
Fillable PDF doesn't sound like JavaScript, am I missing something?
The project is here: https://github.com/calvinrodo/wedxpress I'll try some other inherit modules, but from looking at the code in util.inherit I don't see anything too crazy in there. 
http://jsfiddle.net/cPFKE/6/ 1) The jsFiddle hadn't included jQuery 2) You'd defined tecoGetQuote as a variable that has an anonymous function assigned to it rather than a named function. [The former is defined at parse-time where as the latter is defined at runtime](http://stackoverflow.com/questions/336859/javascript-var-functionname-function-vs-function-functionname) 3) Your addCommas function was undefined. 
you can create a custom calculation script that uses javascript 
The 3 drop down boxes I am using to cause the dependent drop down = Breslow Depth (≤1.0; 1.01-2.0;2.01-4.0;&gt;4.0) Ulceration (No, Yes) Mitsoes/mm^2 (&lt;1; ≥1) Now the autofill would be the Clinical Stage of the cancer (1a; 1b; 2a; 2b; 3a; 3b; 4)
the "time" was just used in the example I copied. I changed, or wanted to change it to the depth (drop down box 1)
Yes! Thank you! However, when I push it to the live site, the JS fails again. Perhaps I should have linked the original beta design of the site: http://treatyenergy.scdmarketing.com/ I forgot to set the jQuery to 1.7.2 because it's already defined in the &lt;head&gt; tag of the site. The tecoGetQuote is set inline with the HighCharts/HighStocks API. However, the coding on top of it is added, it just won't function still even with the jQuery loading, the other var functions loading, and other JS working. addCommas was left out because this is how it was defined: var addCommas = function(nStr) { nStr += ''; x = nStr.split('.'); x1 = x[0]; x2 = x.length &gt; 1 ? '.' + x[1] : ''; var rgx = /(\d+)(\d{3})/; while (rgx.test(x1)) { x1 = x1.replace(rgx, '$1' + ',' + '$2'); } return x1 + x2; } I'm lost, I've never had to use the YQL coding structures and I'm fairly new at JS. Thanks for the help! edit: the primary change was made with your recommendation of it being 'function' instead of 'var' but the issue still persists even AFTER making your recommended change. 
It's MVP, actually.
[Here's a few things I use it for](https://gist.github.com/tencircles/4712048)
that is the funniest thing I have heard all week.
You're wrong about this. Everyone can still use whatever language they prefer. JS is just a recommendation.
Language wars are basically politics. You invest lots of time learning a language, and your fortunes (not just intellectual, but status, sex, money) are tied to it. As JS popularity rises, JS experts benefit. As Python popularity drops, Python experts suffer. So you fight tooth and nail to see your language succeed. Which in the relatively meritocratic world of nerddom means deriding other languages on discussion boards.
I think it pays to just keep learning languages if software development is your career, unless you can guarantee yourself a job in a specific language's domain.
So...how do these JS apps plan to handle desktop multiprocessing? 
Probably in a fashion similar to webworkers or the way nodejs does it? I would guess
At this point, why use gtk to render apps at all? Why not just use local web apps and remote web apps all rendering to html.
I, for one, welcome our new unreadable overlords
Crashes in chrome-dev 26 Mac OS 10.8.6
Use a switch case statement.
Thats what I thought, but one thing that seems to be continuing to happen is that, if I call a function from within another function, that is in turn called by that long line of callbacks(and right now all my functions are using callbacks), the function seems to not wait for that function to finish and keeps going, if you get what I mean. Is there a way to do that or should I just try and re-order my functions so I am effectively doing just one calculation per function and always make it only get called by the callback? If you dont get what I mean, one of the functions is calculating a few different offsets and such to an amount, both positive and negative, so it is its own run of callback functions within callback functions, and that is called by just one function in the main callback function run. Those other callback functions dont complete before the main callback function run keeps going. 
Why are you using all these callbacks in the first place, if the functions are simply doing some math? Just do the math and return the value. Or do these math functions call your sever to do the math and that's why they need to be asynchronous? Could you give a little more complete and realistic example? It's hard to tell what you really need to do from the simplified example, just because I suspect that many of the callbacks don't need to happen at all. If you're not calling back to your server to do the math, you likely don't need the callbacks at all.
The functions do a series of calcs to get various info and then pass it back, and to complete some of those calcs they must query a webSQL database. When I was doing it with just the calcs getting done with no callbacks, it was resulting in variables not being complete before the next calc was triggered, and that was even without a sql query. There is no server side component in what I am doing as the webSQL is stored client side. 
If it's going to optimize anything - sure, why not? I currently use Gnome 3, but daaamn, it's unoptimized as hell. Random CPU spikes from Gnome Shell, etc., and I already use everything I can - linux-ck-core2, bfq, ulatencyd, verynice and e4rat. The thing is you can't have "integrated" *and* fast DE under Linux. Xfce exists, but it's nowhere as internally integrated as Gnome with its Shell and so on.
Correct me if I'm wrong but nodejs can't use multiprocessing.
Not true multiprocessing, but it has clustering/worker functionality. http://nodejs.org/api/cluster.html
Have you looked at this jquery to backbone step by step guide. https://github.com/kjbekkelund/writings/blob/master/published/understanding-backbone.md
phantomjs threads better than this with workers. oh node, i just don't get it.
One reason is good enough to me: Web-browsers don't give good access to all event types. Some keyboard buttons are practically off-limits in web apps, including backspace! Getting control of the context menus in a web browser is a security issue. Hell, almost everything is a security issue in a webbrowser.
Will definitely try it on my next project.
This fascinating. With Chrome OS, Firefox OS, WebOS, Gnome and even Metro we're seeing moves towards web technologies appearing front and centre on our devices, like it or not. I happen to like it.
Learning languages is good but it may not solve career problems because companies are looking developers with n years of experience in x language. You may learn and understand different concepts from many programming languages but how can you gain real work experience in many languages simultaneously? 
 Simple Calculator Create a program that will calculate the sum, difference, product, quotient or remainder of the two numbers. Example Output: SIMPLE CALCULATOR Enter the first number: 10 Enter the second number: 5 Select an arithmetic operation: (a)-Addition, (b)-Subtraction, (c)-Multiplication, (d)-Division, (e)-Modulo: e The remainder of 10 and 5 is 0. 
That's a completely broken use of it, if the original constructor takes any argument it'll blow up on call, the pattern is completely unsafe. And types (in javascript) are identified through the prototype chain, the constructor is only used by `instanceof` to get the prototype, so `aresameclass` is also broken for similar reasons: two objects with the same prototype are of the same type, even if their constructors are different.
Don't research it now -- research it the next time you actually need it in a practical situation. Be it bitmap flags, quickly finding the first power of two that's higher than a number, or an actual problem with floating-point imprecision or over/underflows. Binary representations do 'leak' though to the surface in everyday programming, but they're, for most people, not all that interesting as a thing in themselves.
It would seem awesome if it were the only thing you knew.
Thanks for that, I actually had it open in a tab when you posted. I like the step-by-step approach from using only jQuery/JS to "this is why Backbone is useful".
no, but you can have multiple instances of node each running in it's own process. why *wouldn't* you run desktops apps in their own process ?
The error console reveals : XMLHttpRequest cannot load http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.financ…0A%09%09&amp;&amp;format=json&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys. Origin http://treatyenergy.scdmarketing.com is not allowed by Access-Control-Allow-Origin. I'm guessing you need to to create / add your user consumer key for yahoo to be able to load data via your live site. http://developer.yahoo.com/auth/
node's **javascript** runs in one thread, but the c++ to which node has bindings (ie, libuv and native user libraries) absolutely can and does run multithread. So, there's that.
He never said they couldn't use a non-JS language.
Which is quite sad. JavaScript (with the help of V8, et al.) has really made some strides to performance and usability. Yes, there are some corners you can paint yourself into, but overall the language has just matured like mad.
Sounds like a false dichotomy to me
My question? So are you saying micro-templating is kind of hack but it's acceptable to use? Which is fine, just trying to get a conversation going to see if I should start using it.
Can you post any actual code? Nothing I've seen you mention has to be asynchronous so there's no requirement that you use callbacks*. * Though it might be decided to divide the calculation into portions that can be processed periodically until complete to ensure browser responsiveness.
I fully disagree, though it's your opinion, and I respect it. :) For me, the server should only be in charge of providing an API which will be consumed by all your application ecosystem. That provides a highly-decoupled, common interface for all your apps. Notice I'm not talking about REST, or JSON-RPC, just telling that the presentation layer should be done by the consumer.
using jreisig's micro-templating, or a more fully-baked version ([mustache.js](http://mustache.github.com/), etc) vastly simplifies vanilla js client-side templating. code that might have looked like this: // vanilla JS hello_div = document.createElement('div'); hello_div.setAttribute('class', 'hello'); my_list = document.createElement('ul'); hello_div.appendChild(my_list); list_item = document.createElement('li'); list_item.innerHTML = 'My list item'; my_list.appendChild(list_item); // jQuery hello_div = $('&lt;div class="hello"&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/div&gt;'); hello_div.children('ul').append('&lt;li&gt;My list&lt;li&gt;'); now can look something like this: &lt;script id="user" type="text/html"&gt; &lt;li&gt; &lt;p class="name"&gt;Hello I'm {{ name }}&lt;/p&gt; &lt;p&gt;&lt;a href="http://twitter.com/{{ twitter }}"&gt;@{{ twitter }}&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/script&gt; (this is from [icanhazjs](http://icanhazjs.com/); i thought they did a pretty good job of explaining the rationale behind js templating). Basically, it promotes a more modular design pattern. Keep in mind, these tools were developed mainly with web apps in mind, using a RESTful API or the like to pull in data.
I think it depends. In general, I agree with what you're saying *but* there are cases where I say to shovel it off to the server. Such as, if you're already using a framework which encourages it (such as CodeIgniter) or if your site is very JavaScript-intensive. If you've got more pressing matters to deal with on the client-side then there's no reason to risk making the site unresponsive with costly client-side templating.
Great! Yeah I should have had more detail in the original post - it's for pulling in different JSON from a RESTful service to display on the client side. Thanks for the good example.
But then any view requires javascript, which is my mind a non-starter.
This is where the problem and solution was. The issue wasn't in the coding. The issue was in the request from the YahooAPI and the lack of the callback function. Hence the solution was to simply add the following: var dataFormat = "&amp;callback=?&amp;format=json&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"; Just by adding the &amp;callback=? to the YQL formatting changed it to a JSONp, which allowed the .getJSON call to function. I didn't need to add a consumer key. I just needed to enable AccessControl through a different domain with JSONp. Thanks for the help!
I use something like this and find that is very easy to implement without the need to use a fully baked templating engine. Here is an example of what I use for small projects. [Easy Templating](http://content.infotrustllc.com/infotrust-blog/bid/180384/)
or you can use closure templates which work on both client and server.
But PHP works so much better as a templating language. Javascript just sucks for templating, in my view.
Jeremy Ashkenas also does it.
closure templates is a templating language, not javascript. it compiles down to javascript and it compiles to java
The world is changing, let me give some reasons why I believe this is no longer a good idea: * Performance - under high load, its much more desirable to farm off mundane tasks to clients since they can now handle them. Yes you can use a template cache, but you still have to transfer that rendered template. * Simple example - A user displaying a semi-large table of data. Generate this on the server and you can quickly run into a huge HTML file, while the templates on client side could be a simple row for each. The data is lightweight JSON instead of heavy HTML. * Servers become stateless data facilitators, not content manipulators. * If the server is aware of the markup, it must also keep track of each users and their state (page number, browser screen size, sessions, etc). The user state is moving from the server/session into the browser. * Development on larger applications is much simpler when using an MV* style framework. Your server provides a REST API to manage your resources, and you're done the back end. Your front end code manages the views from there. As someone who has come full circle with plenty of experience, I can assure you this isn't just a fad. Enterprise systems will always lag, but they are becoming aware of the necessity to offload work whenever possible. Companies are moving towards cloud / off premise solutions...and those that aren't are making heavy use of virtual machine farms. 
Optimally, I'd say you want to do it in both ends and share the (compiled!) templates. Even if you ignore things like helping out crawlers and getting nicely indexable urls, it's a lot faster to pull and render the data on the servers than to wait multiple roundtrips for things to load (eg. document ready triggering) and then making your requests to the server to fetch the data. This is what [Twitter used to do](http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html) before changing to rendering also on the back-end (among other things) to improve load times.
This is a great example, let's explore: Let's assume this has 1k records, and you know you should build server based paging. So your server is now sending 25 records each time, but you must keep track of the users page#, and #records. What about the dataset? Do you cache it? Or lazily just re-run the query for each page change. Assume the user went through 5 pages and printed that page off. You made 6 requests, ran 6 queries in that time. Even if you opted to serve up the entire HTML table (120k), and it would take 500ms to generate, and 250ms to serve up (nearly a second). Now - add 500 of these users to your system, and the problem compounds. End of the month report time, and you are generating massive traffic (both in server processing &amp; bandwidth consumption). Had you been using client side templating, you could simply provide a lightweight REST API that provides ONLY data. Your static, cached HTML page would contain the templates, and the browser would create the large table in memory. You could still page your JSON data on the client or server, but you would cut down on server processing &amp; response time dramatically. Want to cache the data? Simple, store it in a flat file.json and serve that up ever hour. This approach will certainly work better as you scale in my opinion.
It's pretty hard to make a dynamic web page if only the server is allowed to render content. 
I use ICanHaz for all my apps, because its faster and easier. I also wrote everything with Backbone, so my app is entirely handled by JS and simply interacts with the data through an API layer. It works beautifully for a web app. It doesn't work as well for a website you need index by search engines since the JS won't get executed
I use the templating functionality in Underscore, and definitely dig it (along with all the other useful stuff that comes with Underscore). If you have JSON objects and you want to render HTML, I find it a pretty clear and concise option.
My point is that the original page should be rendered on the server. Javascript templating usually seems to imply that the browser is doing all the rendering. 
More succinctly there is a maxim I keep in mind when solving problems "You can't make a computer run faster, but you can make it do less." In this case, delegating the work of template generation to the client side can free up a small but cumulative amount of resources for the server(s) to do business logic &amp; data retrieval.
The point is how the data is escaped against XSS. Answer: * none with John Reisig solution * yes with icanhazjs
Depends on the use case and audience. Our public site, which we work hard to make sure passes a bunch of ADA accessibility checks, we template everything server-side and simply progressively enhance client-side. One of our web applications, everything is done in AngularJS against an API. SEO isn't a concern, browser support isn't a concern, partial offline support is a concern. Beyond that, though, any place where you're currently manipulating the DOM and setting values to render content is likely a good practice to move to a templating solution unless you have a compelling reason not to.
The recent Ruby on Rails YAML security hole has me seriously reconsidering the whole localhost-server, browser-client model. Anytime you open a TCP port locally, it's a security hole. We're a lot more likely to use a cutting edge stack locally which is more likely to have gaping security holes (again see Rails).
Fun! By the way, it's not their JS engines, it's their rendering engines: http://en.wikipedia.org/wiki/Web_browser_engine
Do you have a good link for reading about this? I'm currently working on a localhost-server, browser-client application, so I want to make sure I've got my bases covered, even though I don't use Ruby or YAML.
Came here to post that. I was a bit confused at first when I saw "Javascript engine used by Apple's Safari and Google Chrome", since they don't share a JS engine.
Indeed, you're right. For example, WebKit does much more than just JS: http://en.wikipedia.org/wiki/WebKit#Components. The relevant clues should be fixed now. Glad you thought it was fun!
For an industry that worked so hard to get the JS out of HTML, people sure do seem hell-bent to put HTML in their JS.
Micro templating can be done on the server easily: https://github.com/clux/combustion
Pretty fun. I'm missing the ke$ha questions, what's this about?
Please expand on that.
Use promises / deferred. http://net.tutsplus.com/tutorials/javascript-ajax/wrangle-async-tasks-with-jquery-promises/ My rule of thumb is, if there's is more than 1 callback, use promises. 
5 is on Function.prototype, 16 is the surname :)
How can I check if I did it right?
21: The "ref" means reference, as in documentation. It's the three letters you should always include when Googling anything about CSS or JS lest you end up at w3schools.com.
The most popular js lib you know:D.
HA -- I think "The three letters you should add when Googling anything about CSS or JS lest you end up at w3schools.com" is a way better clue -- can I steal that?
&gt;Our language of choice needs to be dynamic... As in dynamic typing? Why?
it will show you a win screen
When you fill everything in correctly it says, "Puzzle Complete." But there's no notification of which you've gotten wrong before that.
Go for it.
we are currently building dynamic content on the fly, with unique content per user. Currently we are just building the data into a string and then inserting it into the DOM - I honestly hadn't seen this micro-templating until a coworker showed it to me. The benefit I see is the code is much more readable then strings and variables put together but wanted to make sure there weren't any cons.
It is pretty fun. I x-posted the crossword to /r/learnjavascript, hope you don't mind: http://www.reddit.com/r/learnjavascript/comments/17y8to/uashieve_made_a_crossword_to_test_your_js/
&gt; Nothing I've seen you mention has to be asynchronous WebSQL.
Thanks -- it's in there now.
No, because it's increasingly common to use things like NoScript. I'd rather have a simple page that works regardless, than have no user view.
I will give this to the old guy at work, a "C" programmer, who now learning JS. I guess he do better with printed version :P
Refuses to let me in due to using IE10. Usually best practice to give people a way in anyway. Out of curiosity, what are you depending on that isn't available in IE? Edit: FWIW, it works fine in IE10 (and probably earlier, considering it only works in quirks mode).
Not at all - share it how you like.
Even with PHP, you'll generally be better off using a templating language like Twig than just directly embedding code. And that's where something like Mustache comes in on the JS side.
It was posted to /r/learnjavascript a few days ago, too, actually.
I haven't used Websql at all but I had thought from the specs that there was a synchronous interface: http://www.w3.org/TR/webdatabase/#synchronous-database-api
It's a common best practice and it isn't a hack. Check out mustache, dust, underscore, etc. Major libraries like Backbone and Knockout essentially assume you'll be templating your views.
I think this explains it pretty well http://www.insinuator.net/2013/01/rails-yaml/ but I'm not an expert
what is 5 across?
Also, it's unload, not beforeunload. beforeunload is fired when a request to navigate away is processed, and can still cancel it; unload is fired after that, when the page is actually being left. So if "the user navigates away from the page" means "the user clicks a link or does something similar", then they're both fired (unless beforeunload cancels it, in which case unload isn't fired). But if it means the user actually ends up leaving the page, then it's "unload". Also, technically, ECMA specifies ECMAScript, not JavaScript.
Yeah, funny, but seriously what is it? IE10 actually supports everything I've needed to use.
But why?
the $ is an alias for 'jQuery' when coding. ke$ha likes dollar signs too.
I'm guessing they have stuff on their site that isn't supported by IE10. WebGL maybe? Easier to exclude IE10 then to deal with individual config for each app. I, personally, am still pissed at MS for IE6 bullshit. Anyone remember Frontpage?
ke**$**ha
That was fun. Thanks.
I don't think it's "REF". [hover for spoiler](http://www.reddit.com/r/javascript/comments/17y30y/i_made_a_crossword_to_test_your_javascript/ "MDN - Mozilla Developer Network")
bind
No, it isn't specific to jQuery but it is stylistically very much jQuery. If you see anycode like, $('#...').blah you can be sure its jQuery.
ecma 5 shit? grumble grumble... At least I can say I learned something today
opera user. i have firefox for when stuff doesnt work. still SOL i guess. meh
Nah, it really isn't specific to jQuery. Multiple libraries use it as an alias for `document.querySelector`, along with `$$` as an alias for `document.querySelectorAll`.
Who started that trend?
I got all of them except for five down, which I believe should be unload.
*ahem* please sir may I have one too? :-)
It actually is only working in quirks mode, so I would bet IE9 and IE10 behave the same (in that it works). I suspect a lot of your issues are due to the fact that you are rendering in Quirks Mode across all browsers. This is because your document is lacking a doctype. Quirks mode behavior does indeed vary significantly across browsers. Adding the HTML5 doctype and getting your pages working in standards mode will likely enable the same code to run cleanly across all major browsers, IE9+ included. You can test to see what mode your page is rendering in by checking the value of document.compatMode. If it says "BackCompat", you're rendering in quirks and are going to suffer lots of strange issues.
Word. Thanks.
[Answers](/s " 1. Var 2. Apply 3. Netscape 4. XMLHttpRequest 5A. Bind 5D. BeforeUnload 6. Prototype 7. Null 8. Webkit 9. Gecko 10. Trident 11. Commas 12. Closure 13. Blur 14. Moz 15. NodeJS 16. Crockford 17. Resig 18. ECMA 19A. TheGoodParts 19D. This 20. Alert 21. MDN 22. JQuery ")
Quite. I have yet to see a perfect template management system. Ideally we aren't putting HTML code in our javascript, but giving programmatic access to (theoretically) **non-modifiable** template strings can really clear up your thinking as a javascript developer. I don't _have_ to write or know the HTML/css, I just have a variable that contains the template, and I throw a data object at it, and the css guy does the rest. The scarier tendency IMO is making HTML templates as smart as possible. Angular does this; Can-JS essentially lets you write in-line javascript. 
Thanks, that's helpful.
You're thinking of the HTML attribute event handler name, which was historically written in mixed case and with the "on" prefix. The event itself is called "beforeunload", it's all lowercase when bound from script and whatever case your chosen HTML standard dictates.
This is simply no longer the state of the web development world. (I mean, heck, the Resig article is _five years ago_.) All of the major frameworks out there both assume javascript is enabled and discourage server-side rendering. If you're doing _any_ rendering on the browser, server-side rendering begins to become redundant. 
You're missing a doctype which causes the page to render in quirks mode, giving the cross browser inconsistencies. There's not much functionality which requires anything but IE4+, so give it a doctype and use ordinary DOM. You could also benefit from some script bundling, the startup seems a bit slow.
FB is not required. It's just there for those who want to help spread awareness of the research tool by challenging their friends. We want (ok, need) as many people as possible to participate. If FB can help us get to 50k or 50m then it's good. We're aiming to publish all the raw data as well as the analysis (so others can analyse it too). The log term aim that started this project is the desire to be able to represent large amounts of data to blind and visually impaired people - because charts don't work too well if you can't see them, and this in turn affects inclusion, accessibility of education materials, and may open many employment roles that are otherwise not feasible. 
Thanks.
i tried "prototype" but there was a conflict.
You say it's being "compared" but compared against what? This seems more like a high-level flyby of it's different features. Why would I want to use this MVC framework over something like Backbone or Angular?
This one is a bit unfair. Some of us just blocked w3cschools, expertexchange, etc.
Hmm ... I just changed it to "attempts to navigate away ...". Though I'm open to suggestions for both that and the ECMA clue.
That was actually quite challenging. Not a huge fan of the name problems (ie who wrote this book), but the rest of it was great! [Answers](http://imgur.com/4AgaRw3)
PrototypeJS had it a year before jQuery came out and it's used by most JavaScript framework from that time such as Mootools.
"Wake up in the mornin feelin like jQuery"
I enjoyed this :) cheers mate
Maybe "Body that specifies standards for both JavaScript and Microsoft's JScript."
huh?
I think it might have been Prototype.
I've know about it for awhile but never really looked too much into it because I didn't know too much application for it (the documentation lacked a tutorial, that said, the documentation is great, just didn't know a good application for it for personal use) THANKS
Beware of resig's micro templating because it uses "with", which tends to make the JS engine run incredibly slow. One thing to look out for in choosing a templating engine is whether it uses "with" or at least gives you an option not to use "with." In underscore I think the option is called "varname," in Jade, it's a boolean option called "self." I personally use doT templates which are incredibly fast, lightweight, and doesn't use with at all.
Lost it at Ke$ha's favorite JS library.
Well, it's compared following the original evaluation I linked to in the post, which compares a whole bunch of frameworks. I just slotted Obviel into that list. You got to start somewhere. A precise comparison with other systems is fraught with difficulties, one of which is that I might be wrong about the other systems. That said, I'll list a few bits: * Obviel has extensive i18n support. If you need to have the same dynamic web UI presented in multiple languages and translatable strings in both JS and templates that can be automatically extracted into a standard .po file you can then translate, Obviel's got it for you. Including advanced features like pluralization. I haven't seen other client side web frameworks come close. * Obviel does more than Backbone - Backbone requires you to pull in other bits and pieces such as a template language, whereas Obviel has this available as part of a coherent system (though it is possible to plug in other template languages). * Compared to Angular, Obviel associates templates with views separately instead of building on the same DOM. I suspect this makes composition of UI out of separate components a bit more easy to do in Obviel. Obviel can do similar things to AngularJS in the templates as they're HTML-aware, such as binding events, but Obviel partitions the UI into multiple templates that are hooked up to models. * Obviel Sync offers some interesting approaches to keep models in sync with a server. Basically it provides a declarative way to communicate with backends, without the need to subclass your models like you'd do with Backbone. But undocumented as of yet, so doesn't count. Otherwise Obviel has very extensive documentation in one place. Thank you for your interest! 
Since you are supposed to come up with a solution yourself, I will only point you at some search terms that will speed up your task: "js drag drop events".
Thank you! I did not mean for people to do it for me! Just where i should start :)
[This should give you a good place to start.](http://searchengineland.com/guide/how-to-use-google-to-search)
Thanks for the reply - I will look into doT.js
i thought it was call but the first letter didnt match, so I was confused, whats the difference?
What the fuck is a ke$ha
`call` calls the function, `bind` returns a new function.
also check http://esprima.org/demo/functiontrace.html
Excellent.
The only answer is to not stick with what you have already learned. Just pick something that seems interesting and go for it. Personally I think Node is the most handy thing to be comfortable with.
There are a few things you can focus on. * Look into other frameworks to get a feel for how they work. Some popular ones include Angular, Backbone and Ember. * Look into using knockout and html5/js to build a mobile app using phonegap or icenium. * Learn to use a javascript preprocessor language like TypeScript or Coffeescript and see how both work and which you feel comfortable with. * Learn to use a css preprocessor language like LESS or SASS. * Focus on unit testing? Have you unit tested javascript before? Look at using qUnit, Jasmine, or Mocha to test your client side code and give you code coverage. Any of these would work, personally I went from js-&gt; jquery-&gt;knockout to all of the above.
For debugging I really recommend Chrome, and for JavaScript performance testing http://jsperf.com/ I found very useful.
Uh... events, anyone?
It would seem that you're right. I guess I should edit that to IE 8 and earlier?
Yes, thats completely true, and it's a common mistake in JS. One thing is the property of the object (which is the element node), and other, the attributes of the node. So, element.value = 'hello' And element.setAttribute('value', 'hello') Are **different** things, though the browser usually detects changes on both for updating the rendered view. Take a look on my JS talk about debugging, at slide 62 (https://speakerdeck.com/mjesun/debugging-js#62). By the way, DOM **only** gets changes made through setAttribute and removeAttribute :)
I believe trailing comma in object literals was fixed in IE8, so IE 7 and earlier is most accurate :)
this is assuming of course that I know where to look.
Uh, no. How is this different from global state?
Nope, sorry, there are only slides :( I do not have video nor audio about it; but I think thay by looking the slides you can more or less get the idea about what is it about.
Alright.. I'll have to check it out when I take a poop. Audio in the car, reading in teh bathroom... 
Except that this doesn't run on an Arduino. For that you'll need an ARM microcontroller. The site mentions a few compatible ones.
Hmm -- when I was searching to make sure I wasn't spreading lies (didn't work I guess) there was no shortage of people complaining about that "making its way into IE9" and what release will fix it, etc. It certainly seems to be a prevalent enough misconception that people didn't have any trouble with the clue. Still, I'd like things to be accurate and there's no reason to beat on the dead horse that is IE7. Any suggestions for a replacement clue/answer? It can even vindicate some other misconception about IE if you'd like, since I seem guilty of besmirching its rep.
Wooh! Party like it's 2009! Also, why isn't /r/node linked in this subreddit's sidebar? 
Thats actually a good point, I hadn't thought about using events... It would allow me to trigger the functions only once that function had completed. And as I am using jqMobi I dont think I can do use promises, so I think this may just be the alternative solution I need. Thanks!
What is 2 down?
you sound like a proper redditor.
Wow, I'm gonna have to check that out.
Yeah, this is but one of many misconceptions about IE floating around. Old information dies hard, I guess. We take very seriously the commitment to "same markup" (as in, code you write and test with IE works on every other browser and vice versa), which is why I asked the original question. Anything that IE doesn't do the same as other browsers is a great data point to have :) People are usually surprised to learn that IE9 had most of ES5 implemented, the only exception being Strict Mode which was added in IE10. A clue might be: "IE9 implemented ES5 with this notable exception." (Really Chakra implemented ES5, but I can't really figure how to word that in the clue concisely). Native JSON was added in IE8, clue might be: "IE8 added this native built-in for serializing and stringifying objects" BTW, if you're curious what IE9 and IE10 brought to the table, check out the guides for developers. They're pretty handy, good reference to have. 9: http://msdn.microsoft.com/en-us/ie/ff468705.aspx 10: http://msdn.microsoft.com/en-us/library/ie/hh673549(v=vs.85).aspx
Well, I could use an if and just have true as one... And else for the rest.... But if I have other inputs inside labels that are not checkboxes, then I need to add a case for null... I didn't really think about it.... Read a post the other day, it is cleaner code wise to do a switch.... What are your thoughts? 
Haha. Reading has always been in the bathroom long before reddit. Just started the audio in car since I got a new deck with Bluetooth....
You know, we come across the most idiotic names in these JavaScript projects. But for once, it actually kind of works. I like it- Espruino.
&gt; * What would you change about javascript? The syntax for prototypical inheritance. Something like an "extends" keyword would be more intuitive. &gt; * What do you like about jQuery? How it abstracts away DOM traversal and does a pretty damn good job of handling a lot of cross-browser gotchas. &gt; * What would you change about jQuery? Every time you use it, you create a new jQuery object and a lot of the time you don't need everything that comes along with that. I'd like to see that lightened up. &gt; * Define a closure When the state of one or more variables that would have fallen out of scope persist due to capturing them in a deeper or otherwise recurring scope.
No. That's just scope. A correct example would be returning the inner function to be called outside of the outer function, after the outer function has exited; var x = "Hello World"; function outer(){ var x = 'Goodbye World'; var inner = function(){ console.log(x); } return inner; } outer()(); As we can see here, the inner function is returned and then executed. It still has a closure around the variable x. *edit: added a variable x outside the outer function to illustrate that the inner function is holding a reference to its own lexical scoping*
This doesn't seem to work on the ipad either - no keyboard appears for which to enter an answer.
Makes sense, not sure I'm too familiar with the whole double ()(); piece - from my own test of this code however it looks like that's necessary. Also, is what you've written essentially the same as the following? var x = "Hello World"; function outer() { var x = 'Goodbye World'; (function(n) { console.log(n); })(x); } outer();
Great article, some really good points there. Would have liked to see some discusiion about urls in a Single Page Application world though.
Great points, I agree.
EDIT: I apparently hadn't refreshed reddit in a while when I decided to respond to this, as Reg has already answered your question very clearly. I didn't have the sound on, but the code he ended up with doesn't demonstrate closures particularly well. Paraphrasing a bit, this is what the demo code was: function outer (param) { var outerString = "outside"; function inner () { alert(param + "|" + outerString); } inner(); } outer('parameter'); While this does demonstrate a nested scope, and the nested function does technically create a closure containing variables from the outer scope, the more interesting use of closures is to *return* a closure that retains a reference to variables, so you can use them later without having to explicitly pass them around. If we modify the example to return `inner` we get a better demonstration: function outer (param) { var outerString = "outside"; function inner () { alert(param + "|" + outerString); } return inner; } var alerter = outer('Hello'); alerter() In this example, `alerter` carries a reference to `param` and `outerString` along with it, always alerting the string "Hello|outside". This is what is meant by "closing over" a variable. Next, lets choose some meaningful names and make the inner function take a parameter as well, to get something resembling a useful function that creates a closure. function prepender (prefix) { function prepend (string) { return prefix + string; } return prepend; } var greet = prepender("Hello, "); alert(greet('Arnold')); Like the last example, the outer function creates a new function and returns it, so now we can create greetings for any name we like, without having to repeat `"Hello, " + ...` everywhere. This is still a pretty trivial example but it demonstrates a common use of closures: initializing some private state and returning a public interface (either an object or a single function) for interacting with it in a controlled manner. For a slightly less trivial example here's a simple LRU (least-recently-used) cache. This cache will allow a maximum of `size` keys to be set at any time and ejects the last key to be accessed. function LRUCache(size) { var cache = {}; var keys = []; function touchKey (key) { for (var i = 0, len = keys.length; i &lt; len; i++) { if (keys[i] == key) { // Move key to the "last-used" position at the tail of the list keys.push(keys.splice(i, 1)[0]); return true; } } return false; // Key was not found } return { get: function (key) { touchKey(key) return cache[key]; }, set: function (key, val) { if (touchKey(key) &amp;&amp; keys.length == size) { delete cache[keys.shift()] } return cache[key] = val } } } So that turned out much longer than I expected, but hopefully it's useful.
Dreamweaver and alerts, The good old days...
URL design is imperative for REST based applications as well. So many sites I've worked with feel like they "wing it" when it comes to URLs.
&gt;What would you change about javascript? ASI (automatic semicolon insertion) rules are many and often confusing. I'd do away with the whole thing. &gt;What do you like about jQuery? Easy DOM traversal/manipulation, cross browser compatibility, easy AJAX, removes some of the gotchas associated with native functions (for example map) &gt; What would you change about jQuery? Built in templating option would be nice. I would probably also rename .empty() to .clear() and have .empty be more like PHP's empty where a boolean value of true is returned if the provided argument is null, undefined, false, or 0. &gt; Define a closure Variables bound to a referencing environment outside the immediate lexical scope.
I agree, I didn't mean the url design for the REST API, but the use of urls in the browser. It's a great thing the propagate state over urls, but the full state of a SAP is probably to big to fit into a url, and the url will most definitely not be beautiful. Url design for the server is well documented, and I think most people agree with this article, but url design articles for a SAPs isn't something I've found a lot of.
Thanks for making me learn about Function.length I did not know how I could learn the arity of functions in JS
Also, ISO-8859-1 :)
No source? Lame.
The Arduino Due is arm: http://arduino.cc/en/Main/ArduinoBoardDue
It was just a little jarring to me. For true false, I pretty much always do an if. Switch statement has it's place, but I don't think in this case. Also, I'm assuming we're just seeing a part of the code, but if we're not, you gotta make sure your variables are declared in the right context. As is both label_array and checked_bool would be declared as global, and that's not a good idea. The third thing is more of a style/readibility issue. When you're repeating something like "label_array[i].childNodes[0]", it might be easier to throw it in a variable.
what is a closure in javascript? What's the simplest non-trivial example?
Alright, thank you. The variables, I am aware of, did that quickly and didn't have the files open so just made a quick mock up. As for making the childNode[0] part of the variable, I appreciate that. Thanks for that also. I didn't ever think of that... Just extending my labelarry to include that. Thanks again. I picked up a book and got through a few chapters last night that I have been meaning to read... Very glad for that. 
What's the deal about jQuery? Are you hiring jQuery developers instead of JS developers? I don't think you should judge a programmer based on his library preferences. I don't like those questions.
Look at Common Modules and requirejs
they asked me. I do think that jQuery has taken such a big role that it does deserve to get treated differently that vanilla js.
The questions are pretty standard with a jQuery shop. Heck swap out JavaScript/jQuery and enter in any technology and the questions will be asked in any interview. The first three are looking to have a dialog. The 4th is a standard JavaScript question that every JavaScript developer should know and the answer is a few words. 
Who gives a shit? Most (sane) applications developed using this aren't going to even be using more than 10% CPU of a single core due to waiting for disk IO, network IO or user input - and that's a ridiculously high estimate.
I get what you're saying but what if a large portion of their code base is written using jQuery? I'd rather hire a guy who already knows how to navigate it rather than spend a week or two getting used to the jQuery way of doing things. No matter how good your JS skills are, there's still a learning curve to finding the "right" way of doing things with a given framework.
Firefox should work fine - you're just unable to see the page at all? What version do you have?
Thanks for the references. I forgot that changing the answer would be a bit of a pain because it would involve laying out the crossword again, but I think I achieved the stated goal with this new clue for 11 down: "Contrary to popular belief, Internet Explorer 8 and 9 allow these at the end of object literals when in standards mode"
I'm using Firefox 18. It basically happened while writing the loop. See below for how the code "evolved", one line per change. This is how I write loops. I close parentheses first, then add stuff inside them. The problem is that the loop statement was already valid before I could add the increment. for () {} for (i = 0;) {} for (i = 0; i &lt; 10;) // &lt;-- endless loop happened here before I could add i++
You realise that a week or 2 is a very minimal amount of time ? If you are hiring someone for a permanent position that will typically be held for 3-5 years, a week or 2 is a drop in the ocean.
I was asked all of those except what I would change about jQuery for my current job.
You state alot of false statements. First, functional style does scale. And no, classes in js is not faster BECAUSE there isnt classes in js, you are just emulating classes but you still use the prototype (I am not saying that the emulation is slower either, speed is not the essential here ) Secondly It is not something magical with either functional style or OOP that makes it possible/impossible to create large projects. For you to say that you cant create large projects because you dont have classes makes me want to facepalm my self so hard, but I wont do that. Tests, patterns, code reviews, constantly refactoring etc makes it possible to create large managable projects, not classes...
Concurrency models with web workers? (coming in HTML5?) Larger package-managed projects in commonjs/requirejs or something like the TypeScript package system (this is coming native in ES6?) Work on the canvas with a port of something like gtk/awt (I've been seeing this around, and combining the other two - a windowing engine for the js Canvas?)
Hmm, okay: can't really make that work afaik, but thx for clearing that up. (to be clear: I don't know of a way to 'limit execution time' or similar in JS - setTimeout doesn't do the trick. the alternative is to have an explicit 'run' button, but that seems less elegant than slightly changing coding technique)
What's your opinion of closure vs prototype pattern? I am of the opinion of using prototype Well, explained here [http://blogs.msdn.com/b/simonince/archive/2010/04/15/javascript-prototypes-versus-closures.aspx](http://blogs.msdn.com/b/simonince/archive/2010/04/15/javascript-prototypes-versus-closures.aspx) I do it because &gt;On two instances of Example A, the function definitions (note: not the return value – the definition) for printName are equal. That is, they are the same function being called on two different instances. The reasons in the quote is why I specifically use the prototype keyword.
Do you know of any good articles that show the unique strategies and strengths of the prototypal versus classical models? While I understand most of the details of how to make and work with prototypal objects, as well as some of the pitfalls, I still believe that I am thinking of things with a more classical mindset, then translating that into prototype-based structures. I'd like to find a good article about how people think and design strategies and structures in the JS model, with the JS model in mind. 
Good question. [This](https://github.com/raganwald/homoiconic/blob/master/2013/02/prototypes.md#classes-vs-prototypes-in-javascript) was posted not too long ago. Also [crockford](http://www.crockford.com/javascript/inheritance.html) is the man.
Depends how "private" you want to keep your properties, how complex your get/set functions are, what platforms you have to support (i.e., are you targeting browsers that support Object.defineProperty), and if you need your app to be super-efficient. Those are the only pragmatic concerns I see when choosing closure vs prototype patterns. Everything else is just a question of style.
You don't need to have constructors for each of your prototype objects. A person is never different from another person in your code (Person does not have any arguments), so it could be an object, that is put in the _proto_ chain with Object.create(). var Animal = { heartbeat: function(){ return 'bump bump, bump bump' } }; var Person = Object.create(Animal); Person.ears = 2; var Boy = Object.create(Person); Boy.toy = 'truck'; var bart = Object.create(Boy); Now the last link in the chain (Boy) could also be modified to be created with a constructor function, but in my case I prefer an init function: Boy.toy = 'truck'; Boy.init = function(name) { this.name = name; }; var bart = Object.create(Boy); bart.init('Bart Simpson');
Yes. that is unfortunately the case. I think making it friendly to devices with no keyboard would involve either: a) Implementing a touch-based keyboard in the crossword itself b) Having a text field appear that you could then give focus, which would bring up the keyboard and forward those characters on to the crossword. Of course, anyone is free to mod it and implement those or some other solution :)
Thanks.
Right you are. I used those while I was playing around with it but they are not used in this code. Thank you for the criticism.
That's what I always say about #3. I took that link because I wanted to reference the sentence about the performance issue of closure vs. prototype.
Nice first blog post, bookmarked your site to check back on progress. I'd throw a bit of design criticism your way, but I suspect its generally pretty obvious stuff you may already be aware of. God knows my blog needs a lot of design attention - but I can't seem to take the time to tackle it ;-)
Unfortunately that one isn't supported yet. The Olimexino (pins in the same location as a normal Arduino, with an SD card slot and a li-ion charger) is half the price though.
&gt; When prepender is assigned to greet, it instead returns the inner function. So what do we call the outer function at this time? It clearly still exists somewhere and demonstrates the enclosure feature -- maintaining the member variable "prefix" and all. The scope created by the outer function still exists, but it is detached from the outer function for all intents and purposes (in reality, an interpreter might keep a hidden reference to the function that created a scope, but this is hidden from the JavaScript side of things). &gt; Are there terms for the current state of each function independently or each variable? Or are they all merely classes with additional properties to denote the enclosed state with the set member variables? The mechanism by which variables are closed over is implementation specific. For example, V8 performs some static analysis of functions to determine which variables are closed over, and only retains references to the ones it needs, but this was not always the case. &gt; e.g. When I print the greet variable I see the inner function as simple text. Is this a reflection of what is happening behind the scenes? Just a text stored class with some other unseen properties? The only thing that isn't implementation specific is that JavaScript functions return their source when they are stringified. How the interpreter actually retains the closed over variables and maintains references to them from the function object itself is not defined (or visible to) JavaScript itself. &gt; I would love to visualize what is actually happening and where all this is stored in memory. Do you know of a way to debug or watch javascript manipulate memory when this is happening? Coming from a C background some of these concepts are difficult to visualize without watching memory addresses in hex flicker. :) As mentioned above, this can't be done in a way that is true for JavaScript in general, because the runtime memory model is implementation-specific.
Thanks for the shout-out! And yes, Crockford is the man, he is a visionary.
Video Poker you play solo. So, if your personal hand gets anywhere from pair of Jacks to a Royal Flush, you'll be rewarded according to what hand you got and how much you bet. 
Stripe is un-fucking-believably awesome.
Ah, I don't 'get'/play poker... so that explains that.. 
Seems to bug out when you get a straight. Its happened to me twice now where there was a straight immediately from the deal. I click to hold all 5 cards and then click draw. The cards go darker but nothing else happens. Clicking draw again reorders the cards but they are otherwise the same, and still darkened. Clicking one more time swaps one card for something different and says that you lose. Then everything comes back to normal for the next hand.
was it A,2,3,4,5? You just reminded me that I forgot to program Ace as being a value of 1 in a low-value straight! Will get to that now. If that's not it, let me know so I can find and fix. EDIT: Just read the part about the cards staying dark and glitching out. Seems major :( I'll get to work on it now
While I like what you're trying to show here, you should know that due to function hoisting, your code bombs out due to an undefined property on Animal (check the console): http://jsfiddle.net/pvqgC/1/ This is because your function declarations are being hoisted to the top of the functional scope, while your prototype assignments reside in normal execution order. This can be alleviated by swapping out all your function declarations with function expressions, which don't get hoisted. Here would be how to organize it properly: http://jsfiddle.net/pvqgC/ (Also, I'd argue that it's more logical to put the origin (Animal) at the top of the file anyway, cascading down to its "offspring" at the bottom.)
No, it was other values. Just had the same problem with a full house, too. 
Apologies! They are all fixed now :)
I clicked "Bet Max" and it shows bet:5 but I only see my money in the upper right going down by one each hand. I won a two pair and only got $2 winnings. 
Good to see new JS programmers actually making things. Also, happy cake day. I'm going to apologize in advance that this is all going to be criticism. Please don't take it the wrong way. I'm on your side. At the end of the day, you made something that pretty much works, and you're looking to improve, and that's great. I took a look at your source, and some of the logic and loop nesting is kind of terrifying. I don't want to scare you away from making things with talk of big O notation and complexity analysis, but any time you have nested for loops that are like 5 levels deep, you should consider maybe you can do it another way that's easier to keep track of in your head. Like, this is clearly a problem: &gt; if ( win == true ) { break; } }; if ( win == true ) { break; } }; if ( win == true ) { break; } }; if ( win == true ) { break; } }; if ( win == true ) { break; } }; if ( win == true ) { break; } }; if ( win == true ) { break; } }; if ( win == true ) { break; } }; In terms of DRY, your CheckStraightFlush function should just be something like: return CheckStraight(x) &amp;&amp; CheckFlush(x); When you're checking for things like pairs, I think it's usually easiest to just do some counting, like an array of 13 counts (one per rank), loop through the hand once, increment the appropriate count for each card, and then just check if any of your counts are equal to 2. Miscellaneous other notes: * Throughout, you're using the bitwise AND (&amp;) operator, instead of boolean AND (&amp;&amp;), which might not be what you're intending. * On line 33 of newpoker.js, you're using a for loop for a single iteration, which is unnecessary. * For most of your for loops, you're polluting the global space by not declaring your looping variable within the scope of the function by prefixing them with the var keyword. * If you return from a function, it's not necessary to call break afterward (e.g. line 171).
Alright, I'll look into that. Perhaps I should have done more testing after I converted the whole thing to prototype object-based :) 
It's been fixed! 
Yes, this is exactly what I wanted to hear! Brilliant idea for the CheckStraightFlush by the way, combining the 2 other functions! My brain was focused on "How do I code this fresh" rather than "How can I use existing code". It takes a bit of effort to form my thinking this way. It's all a complex puzzle for me. All of those notes really help. I'll look deep into how I can shrink my code... if ( win == true ) { break; } I used this line so the loop didn't keep searching unnecessarily after I found a win. It was perhaps a bandaid fix to throw it after every loop/if statement. Is there a better way to stop a deep-nested loop after it found what it needed? Thanks again
The short answer is that you can't validate it. The best that you can do is to generate the graph on the server based on the same information. That is if you gave them year total of $100, $200 and $300 and generated a graph client side then there's no way to look at the image data that you get back and some how validate it. Perhaps at best you could confirm the dimensions to be that of the graph. You can't parse the image to get accurate data back. So that means that either you trust the client side (because they only hurt themselves as it messes up their reports) or instead of sending images the client side code sends the raw data. For example your tool lets them tweak the graph to predict future year profits, then your tool would send back the data and the server would draw the graph server side.
Now try it with automatic holding for suggested hands (like at the casino)! Well done.
I was hoping that this would differentiate prototypal inheritance from classical inheritance, but I'm not seeing anything to set it apart from what I do everyday in Python. The following code works exactly the same: class Animal(): def heartbeat(self): return "bump bump, bump bump" class Person(Animal): def __init__(self): self.ears = 2 class Boy(Person): def __init__(self): self.toy = "truck" boy = Boy() boy.heartbeat() #=&gt; "bump bump, bump bump" boy.ears #=&gt; 2 boy.toy #=&gt; "truck" What makes prototypal inheritance special? I realize that you're using functions instead of traditional objects here, but I'm not sure that makes much of a difference when functions are first class objects. Boy.prototype = new Person(); And what's going on here? Looks like you're instantiating a function, which weirds me out. That's not to suggest that it's wrong (it runs when I try it in node); I'm just learning the language and struggling with some of the more *different* parts. Speaking of different, the ordering weirds me out, are you taking advantage of hoisting? Is that common? I saw hoisting as something to try and program around rather than to take advantage of.
Dude, I am totally going to take your suggestion with the Codenami ;) NICE UI design! Mind if I 'borrow' your concept? 
Response to all and each: "Awesome!"
Must be that time if the month. Next we'll be learning about closures. it's 1998 all over again. I think I'm going to go make myself a DHtml elastic chain of stars to chase my mouse cursor. Angelfire, here I come! 
Seriously. I love seeing their blog posts, always something really cool. 
break is the appropriate way to exit loops, but you really just want to avoid deep nested loops in general. They're like the number one way to write code that performs like crap, because if the input set gets large at all, it spirals out of control, because it's exponential complexity. Consider: for(var x=0; x&lt;5; x++){ for(var y=0; y&lt;5; y++){ for(var z=0; z&lt;5; z++){ // This stuff will run 5 * 5 * 5 = 5^3 = 125 times } } } That's not that bad if there are only 5 things you're iterating over, but go to 10? That's 1000 iterations. 20? 8000 iterations. These aren't big changes, but the difference in iterations is huge, and it's worse the more you nest, as that will raise the exponent. Always look for ways to break a problem down to simpler parts. Consider finding a pair. What is a pair? It's a hand where two of the cards have the same rank. What about 3 of a kind? It's a hand where 3 of the cards have the same rank. In the case of your code, you can identify ranks by card.val. This is a counting problem, so just count. function countRanks(cards){ var counts = []; var i, numRanks = 13; // initialize counts to 0 for(i=0; i&lt;numRanks; i++){ counts.push(0); } var numCards = cards.length; for(i=0; i&lt;numCards; i++){ // increment the count that corresponds to this card's rank var card = cards[i]; counts[card.val]++; } return counts; } Then, if you want to check for a pair, you can do something like: function hasPair(cards){ var rankCounts = countRanks(cards); // If there's a pair, at least one of the counts will be equal to 2 var pairIndex = rankCounts.indexOf(2); return (pairIndex != -1); } And you can apply the same approach to finding three of a kind/two pair/full house/4 of a kind. Just look at the counts. And you only had to iterate over the cards once. (Note: You used 1-based indexing for your card values, so this code won't work directly because of how I initialized the counts array, but hopefully you get the idea.) Also, don't name variables stuff like x if you can help it. I know that's what they do in math, and programming is about abstraction the way math is, but not quite that far. Just try to be more descriptive.
very **very** cool, but dont rely to heavily on front-end validation folks.
You need to do edge detection. The boxes hang off the page. Also you do not detect when the screen resizes.
The prototypical use of closures is the "invoke anyonymous function returning object literal" pattern: var $man_or_boy = (function() { // Read as: "function K takes n and returns a function taking nothing // returning n", i.e. (K(n))() === n. function K(n) function() n; function A(k,x1,x2,x3,x4,x5) { function B() A(--k,B,x1,x2,x3,x4); return k &lt;= 0 ? x4() + x5() : B(); } return { test : function(n) A(n,K(1),K(-1),K(-1),K(1),K(0))) }; })(); window.onload = (function() { if (window.console &amp;&amp; window.console.log) window.console.log($man_or_boy.test(10)); }); This allows one to implement data hiding in Javascript. Note that one is unable to modify the `A` and `K` functions used by `$man_or_boy.test`, so short of actually just overwriting `$man_or_boy.test`, one cannot modify its behaviour. Of course this particular example is a bit long-winded since one doesn't have to return an object literal when all it contains is one function, but that's a minor detail, really. PS: It's interesting reading over http://rosettacode.org/wiki/Man_or_boy_test. I think JavaScript and Perl (5 or 6) are the languages that make the function and invocation look the nicest. Scala comes in a close 4th - only losing points due to the really ugly parameter list after `A(`.
I seem to win an awful lot. Also, I could be wrong, but isn't an A,2,3,4,5 a straight as well?
No, this is a weekly occurrence. Closures, prototypes/oop/inheritance, truthy/falsey, "understanding `this`"... these topics pervade this sub to no end.
So that's a release candidate that I assume you got from https://developer.mozilla.org/en-US/docs/Firefox_19_for_developers? Our load-balancer allows SSLv3 for the protocol, and the following ciphers, which are the defaults for an Amazon Web Services Elastic Load Balancer: AES128-SHA AES256-SHA DES-CBC3-SHA RC4-MD5 RC4-SHA Those seem to be sufficient for FF 18.0.2, which for me says that it's using AES-256. Got any ideas on if this is just temporary or if they're actually changing what ciphers will be supported in FF19?
copy the bookmarlet code over to here: http://jsbeautifier.org/ and get it readable. then edit all the remote calls to locally saved copies of those assets. http://readable-static.tastefulwords.com/target.js this has further calls to remote versions of jquery and a few other options that I didn't dive deeply into to resolve.
why not? why waste a round trip when javascript can certainly verify that a field has 16 numbers?
well, anyone can just modify your front-end code. but im sure most of you know that AND use a payment gateway which does this for you.
In general it's probably not a good idea to embed entire scripts in a single bookmarklet unless it's for something simple. jQuery alone is around 60kb big. What you'll need is to try to turn the script into a userscript which then can be run on any page, something that shouldn't take too much work
Sounds great, but (as with any client-side validation) use it to supplement, not replace server-side validation.
Does their format check the validity of the numbers as well? I mean this specifically: http://en.wikipedia.org/wiki/Luhn_algorithm
Yes A-5 is straight, and that's one of the items on my to-fix list. I win a lot, too. Not sure how or why, since I never win this much at the casino. Perhaps they apply a hidden house edge? As you can see by the code, it's perfectly random ... if this were a real casino, based on all the stories of people winning, I'd be losing a lot of money
OP please post the result if you manage to do this, I would really like a no-network-delays version of Readable.
It's good for work-flow type stuff. Lots of people have gotten so used to less or sass that they can barely stand writing css anymore. Grunt is a great way to set up your workflow to handle less/sass and js compilation. If you already know grunt, it's trivial to set up. The alternative is cobbling together some other set of tools to do the same (Codekit, various cli tools). I'd say that alone is a big win. There's also a ton of plugins to make it easy to go beyond those basics. If you don't already know grunt, that sounds like the perfect project to learn it with. Trying to do the more advanced stuff while learning can make it harder.
Great points by /u/YuleTideCamel. Adding a couple more... * You might really like dojo for large javascript projects. It offers encapsulation, powerful widgeting and templating and polymorphism [it also offers nearly everything that jquery does]. Also these days I never really write any js without underscorejs so that one too. * I'm not sure about your dev setup but if you don't use chrome developer tools I'd really invest into learning them - they make js development a pleasure. 
These features are really powerful but it seems it only works with static HTML projects. I mean all assets must be relatively included from actual folders. If you are using virtual folders, url rewrites or dynamic urls like in django or similar frameworks it won't be able to find the files you are editing. Yet, brackets still has the most innovative features I've seen on an editor. I hope they overcome those kind of problems, I'm willing to pay up to $100 for these features. Even though it's an open source project :)
&gt; The URL is the driving force of the state of your application. [Nagare](http://www.nagare.org) has a completely different approach. It's similar to seaside for smalltalk, both of which ask: "why should I be defining my urls" -- Nagare certainly can define them, but it's optional. 
Agreed. Server-side languages and frameworks pose a challenge, but we're pretty confident we can make it work (this is just the beginning).
Cool! These kinds of ways to prototype are awesome. I usually use Sublime Text on the left and have a browser window that auto-refreshes every 5 seconds when there isn't any mouse/keyboard activity... but this is way better. Another thing that might be of interest is a hack I've created recently to get a same sort of functionality in Etherpad. This means you can collaboratively prototype Javascript code. To try it out do the following: * Create a pad on http://etherpad.mozilla.com/ * Empty your document * Open Developer Console/FireBug/any javascript interpreter (Ctrl+Shift+i in Chrome) * Paste the following in there and execute it: http://pastebin.com/pj2mjdRZ * An empty window should open (if you have popups blocked, allow all popups, refresh and start over). * Now type for example: document.write('hello world') * Press enter (new line) and you should see "hello world" appearing in the popup window. The window is updated anytime a line is removed or added.
Is Nagare a single page app (which isn't actually the term I'd use) framework? It certainly doesn't look it. 
Godspeed :)
Good idea. I'll try to get another one out soon, but anyone reading this can also make your dream come true by modding my crossword ... What other languages were you thinking of?
I made this. It's just the start of what should be a much more comprehensive listing. I actually updated it today to include some PHP libraries as well, it's not necessarily just for Javascript.
From a css perspective, I would say make the target element position relative if it isnt already absolute. Then inject the popover into that element. That way the zero zero coordinates will be the element itself and not the page. THis is important for when the page resizes, it will allow the popover to move with the element without any extra javascript computation. 
Just started getting into Sublime but this really makes me want to check out Brackets - thanks for posting this vid. 
Exactly, server-side validation will always be a must. Client-side validation is just for the enhanced experience of the user.
Doesn't LiveReload do the same thing, but lets you use your own editor? It also compiles Coffee and LESS etc. AFAICT the only bonus is having the 'true live' JS editing as opposed to reloading the whole page, but I'd still rather use sublime. Could it be used as a sublime plugin or LiveReload extension?
This looks incredible. Thank you for sharing this.
There's just one more thing... Sublime Text's multiple selections--I use this all the time when I code. If Brackets had that, I'd be sold.
I use https://github.com/guard/guard but I hear https://github.com/gruntjs/grunt can do file watching/livereload connections, too. 
Seeing as Javascript is a client side language, or at least the manner in which you're using it is, then it will most certainly take longer than if you were using a server side language like PHP.
Grunt is a build tool. If there are build steps you can and want to automate, Grunt (or any other build tool) can be used for that. If there aren't any nails, a hammer won't be of much use.
do you think the performance gap is enough for me as a front end designer to learn PHP or another server side language?
Your solution accomplishes the same thing as what you started with, only now there is a (pointless) wrapper involved. What didn't you like about keeping variables in the closure of the constructor in the first place?
Why not learn node.js? :)
&gt; As per usual, one of the perks of making things better is that you can troll #jquery folks. Seriously?
Depending on what server you use you are better off with [Server Side Includes (SSI)](http://en.wikipedia.org/wiki/Server_Side_Includes).
You're right in that the meaning and the importance of urls are the same in a REST API as in a SAP, but I'd say that the design process of the two are a bit different. In a REST API the urls are quite straight forward. To get a collection of orders, you call /orders/, and to get a specific order you just append the id to that url. But in a SAP, your views are much more complex so designing you urls is more of a challenge, imho.
Why do you need it to be private? Generally, I see things in languages like JS and Python being "private-by-convention" and being prefixed (or sometimes suffixed) by an underscore.
seriously. i just didn't want you to feel bad about your choices, and just blamed me for trolling instead. worked like a charm
you're totally not my client :)
I can't understand your question. When you use .load where do you get the content from? There's insignificant difference because both ways work the same way. When you use .load() your browser makes a request and loads the response into the page. When it's loaded directly it's pretty much the same procedure. 
Why is there an almost ~1sec delay from clicking on a column header to the actual sorting to finish? This is annoying. The API isn't impressive either. I wish people would move away from 'options' and do it like D3.js.
Hmm, I suppose they release early to limited number of users to test the waters? Assuming this might just be how FF 19 is for everyone when installed, you could report a bug: https://developer.mozilla.org/en-US/docs/Mozilla/QA/Bug_writing_guidelines?redirectlocale=en-US&amp;redirectslug=Bug_writing_guidelines
Don't go for PHP, it's terrible. :) Node should be easy to learn for you, Ruby and Python are fun, too.
Not very comprehensive, yet good to start with...
In almost all cases, you want the server to do as little work as possible. However, you should consider the "flow" of your application. For most web pages it begins with the client making a request to the server. The server processes the request, and responds with some HTML and JavaScript for the client to run. At this point, timing is key. jQuery.load (an AJAX wrapper) is going to tell the client to make *another* request which the server will have to process and respond to. The purpose of AJAX is to help reduce the amount of work being done on each page by only loading a little bit of data and holding the rest back until the user specifically asks for it (eg. the click of a 'more' button). If your jQuery.load call is happening immediately, with no input from your user, then you've defeated the purpose of AJAX and you should probably have the server do that work on the initial request. If you're waiting for user input before calling jQuery.load, then you're doing things just fine the way they are. As for anyone bashing PHP: it has plenty of problems, but it's still cheap, quick, and extremely common. If you're on a shared web-host, there's a good chance that you're stuck with it. For the problem above, &lt;?php include("template.html"); ?&gt; is probably all that's required.
Well, having more skills in your tool set, even if it's not your main focus, certainly can't hurt. A server side language is always going to be faster than a client side one though, as the server has to fulfill the request before the client can ever get it's hands on it. As theduro mentioned though, there is node.js which would certainly be something you'd be capable of learning being that you're familiar with Javascript.
I'm glad to see they finally moved away from using `&lt;table&gt;` elements. Is it using virtual rendering for large data sets?
Oh my... a lot of outdated stuff and bad advice.
Python would be cool. I don't like PHP, but am forced to use it for work, so it would be cool to have one for that too.
I knew this looked familiar. the angular version was built by the same guys who made the knockout grid http://ericmbarnard.github.com/KoGrid/ 
HOLY... I think my browser just hung up. Well... let's wait for the next generation ;)
What's wrong with using a table to show tabular data?
IMO this will improve the selection look/feel Remove the commented out properties: .ztree li a.curSelectedNode { /*padding-top: 0px;*/ /*border: 1px #FFB951 solid;*/ outline:1px #FFB951 solid; } 
Surprisingly, I am getting no lag with Firefox 18 &amp; Win7.
Maybe I'm ill-informed but does anyone even use the HTML comments trick anymore? Aside from the fact that you should avoid inline scripts (making it pointless) and it's just plain gross to look at, I believe all semi-modern browsers support JavaScript. If the user disables it, the tag is completely ignored. Feel free to correct me if I'm wrong in any regard.
&gt;Why must we enforce this restriction? Simply to prevent anyone from messing with the inner workings of your class, even by accident. Making some members completely inaccessible from outside a class is much more effective than any "private by convention" approach. Such pseudo-private members just create more unnecessary need for communication and thus more noise. I prefer that only the public API is visible and nothing else.
I cannot argue that it is more effective, but I disagree that further communication is required. It (seems to me that it) is very widespread knowledge that underscore prefixed names are not to be touched. I'm more understanding of your opinion in languages that provide a `private` keyword, but I'm partial to programming in the convention set out by a language, rather than trying to bend it to my will. If a programmer has to go so far as to hide a member in a constructor closure, they're trying to bend the language to their will.
For better encapsulation; I don't want all of my methods to have access to the constructor's arguments, or any of the methods that are private to the constructor or other methods.
A valid perspective. I prefer not to rely on the underscore though, because sometimes, people just use the underscored things from the outside anyway. I've seen plenty of YUI code that says myNodeList._nodes even though they should have used the public accessors.
would you really go so far as to say its flawed? I mean its just not as accessible to people who aren't familiar w the concept?
Nice, but you can tell the animations are done with pure JS, and not transformations. They are not as smooth as they could be.