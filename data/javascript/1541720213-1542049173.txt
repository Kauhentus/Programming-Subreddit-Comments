They didn’t really invent much it’s kind of just their hyperscript 
ok
Thank you for the cool JS list.
Yes, but it's a pain in the ass. I had such serious issues with getting vue's typescript support to play nice with class components that I gave up on using class decorators, and I've had better luck with the built in Vue.extend({}) syntax. I'm subscribed to three different typescript issues on the vue.js repo. But I'd rather jump through all those extra hoops than give up on type safety in my templates. After using react extensively it feels weird to have your template detached from the component.
Thanks, I suspected so! 
If you are writing good React code, and componentizing things right, it doesn't. 
Thanks, never heard of it before. [It doesn't seem to fare well in performance though.](https://imgur.com/Ao1LNHJ)
You can just use any library which has these features, with React or Vue, these are meant to be minimal frameworks. For example: Vue.draggable
It’s funny you saying that. I’ve been working the past 1.5 years as a frontend dev and I totally agree with you. I understand but also don’t, why is JS recommended as a first language. And the entry level for juniors it’s gonna keep getting harder and harder imo. Right now I took a break to try and figure out which language I’m gonna pick next so I can get better knowledge in terms of programming fundamentals (I still consider myself a beginner), and Golang and C are on the table. The only thing holding me back is the market where I live in.
It’s funny you saying that. I’ve been working the past 1.5 years as a frontend dev and I totally agree with you. I understand but also don’t, why is JS recommended as a first language. And the entry level for juniors it’s gonna keep getting harder and harder imo. Right now I took a break to try and figure out which language I’m gonna pick next so I can get better knowledge in terms of programming fundamentals (I still consider myself a beginner), and Golang and C are on the table. The only thing holding me back is the market where I live in.
The biggest difference is that jsx is really just a tool that makes it easier to look at a bunch of functions being composed together. this -&gt; class MyApp extends React.Component { constructor(props) { super(props) this.state = {count: 0} } render() { return ( &lt;div&gt; &lt;h1&gt;&lt;span className="green"&gt;Counter App!&lt;/span&gt;&lt;/h1&gt; &lt;button onClick={() =&gt; this.setState(prev =&gt; {count: prev.count + 1})}&gt;{this.state.count}&lt;/button&gt; &lt;p&gt;click me&lt;/p&gt; &lt;/div&gt; ); } } const Page = () =&gt; &lt;div className="container"&gt;&lt;MyApp /&gt;&lt;/div&gt; becomes class MyApp extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } render() { return React.createElement( "div", null, React.createElement( "h1", null, React.createElement( "span", { className: "green" }, "Counter App!" ) ), React.createElement( "button", { onClick: () =&gt; this.setState(prev =&gt; { count: prev.count + 1; }) }, this.state.count ), React.createElement( "p", null, "click me" ) ); } } const Page = () =&gt; React.createElement( "div", { className: "container" }, React.createElement(MyApp, null) ); It's literally just composing functions together for you. That's all a React App is, functions composed with other functions. JSX just makes this way of doing things possible, because otherwise no one in their right mind would want to look at that code. But once you make it easier on the eyes, it turns out to be a really good way of managing UI states.
It actually depends on what sector you want to work on. C / C++ / Rust will get a good low level learning but comming from higher level languages it might get hard for you. Just don't feel lost. Lots of resources are there online. C is an old language and so are most of the resources. I am currently creating a programming language (https://nuua.io) and I'm learning a lot with it. Anyway, you should choose a sector and research the best native language you might find. Do not be scared of old tech. 
Totally uncontrollable, but the graphics is awesome. 
Not true, you need to know when to use computed and pure computed, subscribes and various other actions. Also you can easily use jQuery and create your own bindings, templating can have performance issues but that depends upon nested objects
That is true. A couple months back I thought about picking up C++ to pursuit audio development, but once again, the market for that type of niche is very small where I live. So right now I’m trying to pick a language and a field (like you were saying) to find a job anywhere outside of my country. Cool thing you are making your own language! Def want to check it when it’s finished. 
Huh? Are you disputing those benchmarks? https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html
Haha great news, may I ask what country? You can add your email if you want to get notified!! :D
Yep, I can't see the code sample to determine if the library is being used correctly
what is this?
[There you go](https://github.com/krausest/js-framework-benchmark/tree/master/frameworks/keyed/knockout)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [krausest/js-framework-benchmark/.../**knockout** (master → 8344bc3)](https://github.com/krausest/js-framework-benchmark/tree/8344bc3bdb803a24b3073708889e56df1421877f/frameworks/keyed/knockout) ---- 
But they both need a browser, checkmate /s
There's no need to throw out homophobic slurs. Grow up man. 
And it works on a phone! But not on a phone in Reddit on iPhone 😞
Never heard of fintech. And thanks for the tip, i will check it out!
Yeah so self.data(buildData(1000)); would work out better in knockout by chunking the array, so cant dispute that this would cause poor performance and possibly hanging of the UI.
E-mail added :) I’m from Portugal! We’re probably neighbors if you’re from Catalunya :D
Yes indeed :D, thanks a lot!! And good luck finding the sector and a language you like :D
Thanks! Would love to see a medium post wrote by you, expanding the ideas of your first reply. You got some cool viewpoints on it that might be cool for people starting out!
You Don't Know JS is excellent. https://github.com/getify/You-Dont-Know-JS
Will do! Probably here: https://medium.com/@consoletvs or at my site: https://erik cat Check out an article titled: software disenchantment by Nikita. You will love it
I think his style is efficient and simply stated. He doesn't waste your time.
Thanks for these suggestions!
weird flex, but okay
Worked fine for me.
And me!
Hi /u/neotorama, please don't. Thanks.
ok maybe I didn’t get your gist then. I think these frameworks are designed to be pluggabble so any library that doesn’t contain both data binding and dragdtop etc is fair game is what I meant , hth
Hi /u/faded_filth, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Thanks for your feedback.
Yep... My current project (https://msos.midspike.com) is almost entirely made of JS (jQuery)
Who is forcing you to use something you do not know or understand? Is Mongoose/REST failing you in your current use case?
one ? is how much logic should be allowed in your templating language. You have to think where that line is for you. Do you want a lot , very little or the whole damn thing. Personally I want my templates to have just enough logic but be mostly html . I want clear separation of logic.. This is why I dislike Jsx. Not that you can’t do it cleanly, but It’s too easy to dump a ton of logic in there that shouldn’t be separated out . Once you start it’s easy to add to before you know it’s a mess. It takes a lot of discipline imo .
On the other hand, you're never going to avoid a lot of rewrite work later down the road, and spending 10x as long making everything abstracted to hell often isn't the best use of company time when they need to ship in 6 weeks for large customer X that wants to pay the company $1 quadrillion dollars (according to the sales guys). 
Let’s be honest here, they both look pretty bad . The second I see functions mixed with html I see the mixing of logic and template. Maybe I’m old school but this is a recipe for a mess. How are you not tempted to start dumping code into those functions? 
I absolutely detested working with Mithril, maybe detest is too strong of a word, but the documentation could have been WAY better.
Is it me or those handlebars seem so much better
you are correct , but templating languages are usually so dead simple , you can pick up in under 5 min. If is usually an if . Loops are loops, your not learning Lisp , ( though that would be cool) . The point is moot . 
Omg yes, creating any layout in mxml was trivial compared to HTML/css. 
its a lot easier if you give up on typescript
Aside from 1 , those seem like bad reasons. I thought the big reason why JSX was because you mixed too much logic in with template code. While it allows easy quick js with html, This leads to poor separation of logic and bad code structure. You should not have much logic in your template, otherwise you might be doing it wrong. 
Lol, do not buy her this
That’s why Vue out of the box implementation is actually quite nice. You get the simplicity of a template Lang with the power of dropping in components. 
Enjoy your ban :)
You absolutely can maintain to separation in jsx, but It takes discipline. And in my opinion it takes a lot of discipline. We all know It’s very easy to just start in lining logic in the template code. In fact there are a lot of people that think this is actually a good thing 
Yeah I agree, this is an excellent resource. Definitely lots of in-depth information about some of the more mysterious or complicated parts of JS.
Hmmm, the whole Point is there is no separation of code , Its pretty dangerous to just start in lining code into HTML. Eventually you’re going to have a mess on your hands.Template languages were designed to be simple for this reason. If you’re putting to much logic in your templates you’re doing it wrong. 
OK technically you’re right it’s not templating language. But it is absolutely used like one. That’s the problem. 
I tried it build some stuff and actually have the opposite reaction. The main thing I disliked about react was JSX
I set the opacity to 0.
If you're still interested, a version is \[here\]([http://llamatrauma.x10host.com/](http://llamatrauma.x10host.com/)). I may abandon this due to its high lag depending on the computer, though.
In some cases though, you **want** to mix logic with templates. Sometimes you want global state, sometimes you want local state. This is particularly useful for UI logic. Bad code structure can exist in any programming language and any framework. If you code shit, it's going to be shit. 
Hi. Mithril author here. In what way could it improve?
:hoverable?
I hang out in ##javascript and follow the discussion. There are some very experienced JS devs in there, and I like to soak up the information. It's also fun to help others solve their problems, someone posts a jsfiddle with a broken bit, and you can help them solve it, and also help them code it better. I think it's similar to rubber duck debugging, the more you explain something, the more you understand it. I like beginners because they ask "why?" about the weirdest shit, and rather than just "it be like it do" you go and look it up for yourself because you don't know either.
Just played around with it. that's really cool
Of course you want logic in your template.Almost every single template language has some logic in it. The questions are: how much Logic Should one be allowed to put into a template code.? ... Is it bad practice to put huge functions Inside what essentially is template code. I’d argue yes. Is it better to limit the capabilities of templates to prevent this type misuse of freedom? I’d say yes. If so, don’t you limit What you can do in a template ? There is little that can’t be done without jsx imo - so you don’t limit anything.The only differences is where do you put your code. Inline a template or outside That’s not to say that you can’t write clean code with JSX. It just gives you the freedom Which inevitably will lead to some poor structure. It takes a lot of discipline.
+1 To balance, everything has trade off. Many activity do simple operation with little to no logic (get order api for example) or majority logic is coupled with third party (ex: content-type, header) that it can makes the indirection costly without much added benefit. I'm not saying that it's not worth / useless to decouple / dependency inject / layering the code. I'm saying it has cost (development and maintenance), and how much it will benefit compared to the cost will be decisive for different kind of project.
you should probably make this into a curated list on github
I disagree. Yes, some parts of a page in an application need to be entirely dynamic, but that's rarely the case for an entire web page.
To be fair, replicating a desktop operating system is hardly a typical use case.
I would say both look like a cesspool of crap.You might be right that one is better than the other but they are both a kind a version of feces. I too code a lot of JS. II have so many years under my belt now it’s actually more embarrassing then something to be proud of. LOL. 
Thanks! I plan on competing with Windows some day... I still have an extremely long road ahead of me. For now, the concept design sets the stage for the future of MSOS.
To preface this response, I just wanted to say my experiences with Mithril were using version 1.x.x. I actually worked at the same company you did in Toronto, and so I guess my overall headaches were caused by the same issues you had with Angular(I left in March this year and they still had it as a part of the code base). They ended up doing a weird mix of Angular/Mithril that really took the joy out of learning your library, and was counter-intuitive to what I saw the use cases being. I felt like my hands were tied. To answer your question, the previous version's documentation didn't do well with consistency and accessibility of content for developers, specifically when dealing with how to treat the MVVM pattern. I found people were putting things wherever they wanted in terms of logic, and so it was harder to move around the codebase and have an intuition as to where things would be, as you would have with say, Flux's observer(esque) pattern design. My two cents would be to give some suggestions in the documentation as to how you would break down complex logic. Just took a look at the new documentation, and you've done a wonderful job of fixing my main complaints. So rest assured, you've got a convert here. Is there a main place (discord/gitter) where I can join the conversation and be an active participant in developing projects with Mithril 2.x.x?
Oh, I see. Funny thing, I just had a chat with them over zoom this week about how to tackle a migration. They said they were still using 0.2.x (so my guess is you were talking about the old docs with the gray/green color scheme). As for a community chat, there is one at gitter: https://gitter.im/mithriljs/mithril.js
that would be the one lol. Thanks for being so attentive with your users and open to constructive criticism. 
Decoupling business logic is well and fine. But his examples are far more than that. It looks like he wants to rewrapping basic things like express. 
Wtf am I even looking at? This is a "component list?"
thank you. That is a good point that i need to keep in mind. I think part of my problem is that i fear now that i am going to try to find work ..most jobs want framework knowledge, im scared i will be asked how does it "work" behind the scenes. If i start to learn a framework it takes away from learning the underlying stuff thats going on...but if i just keep learning pure js i may not find a job :/
Ok thx. I will investigate 
u/ridicalis, thanks for mentioning react-hyperscript - I found out about hyperscript-helpers by following your link. Honestly, why on EARTH did Facebook go with something as jarring and asinine as jsx instead of simply creating JavaScript functions named after the HTML elements???
Frankly I don't think half of the devs using something like React really understand how it works under the hood. As long as you are able to build software using the libraries, that should be good enough to get a job. Further understanding on how they actually work will help in solving any potential problems faster. If you were to learn for example React, you would be exposed to a lot of "pure" JS concepts as well. At least provided you try to learn it in such a way that if you encounter something you don't understand you would try to learn about it, rather than just assuming "it just works that way for reasons"
I meant in programming as a whole, bad wording! 
I actually just bought Colt's after reading reviews for both. Grider's doesn't cover big 0 (time and space complexity) which are super critical to talking about algorithms. Almost all the time when you have to whiteboard, the interviewer doesn't care about the brute force solution. Generally the point of asking you about the algorithm is to do it in a way that optimizes either space or time or both. A good example is like iterating through a string vs trying every combination a string. Without that sort discourse, I can't recommend Grider's at all. 
thanks for the nice post. I was leaning more towards vue but i think your right i should focus on building more things. I believe I have a solid JS background. For the most part i understand how JS works (exec. contexts.. event loop.. "hoisting" etc.) .."this" at times is still a bit weird. 
Yeah, I've never been able to understand why Facebook has to break everything by inventing a DSL instead of just using standards and going with something like hyperhtml.
is there one already?
In what ways are they not ideal? Would it have performance issues? The map would be a major part of the app, showing people the location of nearby exchanges. what I meant by auto matching, is like if one person wants to get rid of X, and one person wants X, then it could match them together. That way, at least for one of the people, it would just take a quick click. hope that makes sense. Also, thanks so much for your reply.
The maps just don't behave as smoothly as they do natively. I'd just try it out before you go all in to see if you are happy w the UX of them. As for the matching this really sounds like it might be best done on the server, but it really depends on volume and other requirements. Loosely it sounds like it could be done in the app, but it might be better on the server and then when a match is made you could send a notification. Plenty of ways to skin this cat.
On the other hand how often do you change something so fundamental in your app? I'm asking because I saw many times apps with complicated abstraction layer created to separate api and your logic in case of this hypothetical change of your framework etc. Framework was of course never changed but this layer was often incomplete (it doesn't offer all features of underlying framework) and introduces new place for bugs.
Alright. Thank you for your input.
I know I don't have to use GraphQL, I'm just trying to figure out when it will give me an advantage, and when it will just increase complexity for no reason. I like learning new stuff, I'm happy to switch, I just want to know when it's the right thing to do and when it's not. I have no problems using Mongoose/REST, but if GraphQL will make my projects easier, faster, more fun to develop then I want to switch. If it won't then I don't.
Yes. If you're running hundreds of servers, that's the problem. 
While true, it's still far less to learn than any templating language out there. Especially when you can use standard JS for looping and utility functions (uppercase, etc), over custom syntax like \`\*[ngFor](https://angular.io/api/common/NgForOf)="let hero of heroes"\` and \`v-on:submit.prevent=""\`
Furthermore, here are links actually examining evidence: http://danluu.com/empirical-pl/#wat_summary https://medium.com/javascript-scene/the-shocking-secret-about-static-types-514d39bf30a3 Summary: There is not much evidence for the claim, if any. By the way, I myself use types (Flow as well as TS). They *do* have advantages (why else would I do it), but the situation especially in JS land is anything but black/white, as 99.999% of the people speaking up claim. The type checkers for JS are buggy and incomplete, both Flow and JS. I spent more time on the types than on my actual code. Sure, not everybody ends up that way, if you happen to use exactly the sweet spot of those systems and nothing else you will be fine. I recommend reading through a few pages of the issues people have in both, Flow and TypeScript Github repos ("Issues"), to get a feeling for the many limitations and uncertainties.
&gt; I will add to the article the following link to this large scale study http://web.cs.ucdavis.edu/~filkov/papers/lang_github.pdf to support the sentence. http://danluu.com/empirical-pl/#wat_summary &gt; The authors looked at the 50 most starred repos on github for each of the 20 most popular languages plus TypeScript (minus CSS, shell, and vim). For each of these projects, they looked at the languages used. The text in the body of the study doesn't support the strong claims made in the abstract. Additionally, the study appears to use a fundamentally flawed methodology that's not capable of revealing much information. Even if the methodology were sound, the study uses bogus data and has what Pinker calls the igon value problem.
I think you can use `backdrop-filter` CSS rule with `grayscale()` filter function, but it's not available for Firefox. https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#grayscale() See below for description of the `grayscale()` filter function. https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/grayscale The only other alternative I could think of is to use canvas and draw the grayscale version of the web page's snapshot image beneath the object.
Markup is definitely a lot easier to read than a series of nested/un-nested create element methods.
Markup mixed like with js is like mixing Japanese and English . Not clean. 
why don't you just do function2(cb){ cb(); // this will call the callback }
It's not feasible to have continuous integration testing when you have +100 views and a large team of developers working on the same code base every day. Integration testing also takes a lot of time, where as type mismatching get caught instantly by your lint tool. That being said we still have automatic integration testing - things can still go wrong that's not directly related to type mismatch. TS isn't a silver bullet by any means
If the `function2()` function doesn't need to restrict which callback function is allowed to be used, then there's no need to check the argument. Otherwise, it's not a bad approach. Although the callback checkings can be simplified like below. function function2(cb) { var allowedCallbacks = [function1, function3, function4]; if (allowedCallbacks.includes(cb)) cb(); }
I'd say your next step is learning TypeScript.
Depends really. No language, framework, or paradigm is exempt from unreadable code. Plus, code cleanliness is half subjective half objective.
Yes, I really want to. No build step _in development_ is a big pain in the ass removed. For production you minify of course. 
I'd always recommend anyone to learn this for basics: https://addyosmani.com/resources/essentialjsdesignpatterns/book/ It's not written with ES6 (or 7) in mind but the basics apply. I think it's extremely valuable to know basic ES5. But mostly, it teaches you design patterns. You don't need to know the code itself, just know and remember the name and what problem(s) it solves. From there on you can Google whatever you need in the future. 
Learn the **concepts**, which can be applied to any language: compilers, data structures, algorithms, logic, set theory, etc...
1. Create a project in React to demonstrate modals and modals-inceptions: covers React portals, attention to details (what happens when you navigate away from the route?, what happens when you open a modal from another modal? etc.) 2. Implement Nim game with the ability to play it with another human and/or with an AI. This one is nice for algorithms, project structuring, project vision etc. 3. (a long, extremely long time ago): Just code up this layout in HTML and CSS. 4. Create a vanilla JS script that will create 7 black circles, arranged liked [this](https://i.stack.imgur.com/k7wEs.png) (the big circle should not be drawn). Each circle should change its color from black to intense red, but as a JS animation (hint: set the color as `rgb(0, 0, 0)` and increase the red flag). When one circles goes from black to red, the following circle should start to animate.
I love interviews, and have been to around 30 over the years. In the process, I've gathered quite a taxonomy of interview challenges. Most JS interviews present some generic algorithmic problems, similar to the [easy ones on leetcode](https://leetcode.com/problemset/algorithms/?difficulty=Easy). The problem I've seen 4 (four) times was to find anagrams (words made of the same letters) in a string — e.g. `'leg food gel trap' -&gt; [['leg', 'gel'], ['trap'], ['food']]`. If you can elaborate on the complexity of your algorithm, the interviewers are generally amazed. A solid way to go, but offering candidates with zero knowledge on theory of complexity to optimize the code usually leaves them clueless, which is a drawback of this technique. CSS questions usually involve either writing a stylesheet for a particular widget, or coming up with as many ways to do something in CSS as possible — horizontal + vertical centering comes to mind. Some people like to give problems regarding the darkest corners of JS: var x = 10; x.foo = 'foo'; console.log(x.foo); // what's logged? I hate this type of questions, because knowing some random facts about the language reveals little about useful development skills. Code-at-home assessments are more rare and more fun. I've done two of these: one involved writing a searchable select component from scratch, the other (which I liked even more) was to rewrite a small jQuery app using whatever techniques you wish. Another challenge I've seen but have not participated in was to write a map app with search by address. There are also architectural questions on several levels. Some ask you to implement and explain the benefits of a design pattern (e.g. observer), while the others go a level up and challenge you to propose an architecture for a whole service (how would you implement a website to plan train trips?). Among these, I prefer the latter. The logic problems, such as "you're in a circular train — how do you count the carriages", are a red flag to me when it comes to developer interviews. Partly because I'm bad at these, partly because they have absolutely no relation to technical skill, but most of all because because it shows the lack of preparation to a particular interview — you can present a candidate for any position with such a problem. The company I work at now is notorious for asking technical questions from unrelated areas. For example, during a CSS interview you may suddenly get a question about the types of non-relational databases. If you happen to know it (which you might with several years of experience in web dev), good for you. If you don't, it's fine — above all, you're supposed to not dismiss the question right away. The scary thing about the interviews I conducted is that a problem like "write a function to sum the array" scares away half the candidates.
Dude, you asked me to explain my position and I did just that. And now you're accusing me of not being capable of constructively debating? Grow up.
They seem to be having good demos... Some of them are really good, what makes you say that?
I said what I said because you should never mix any logic with presentation. If we're talking about Android specifically, then best practice is to follow MVVM or MVP and to split your "presentational logic" from the view into a separate isolated layer. In the end you will have your normal data models and controllers and then you add your template view plus presenter. This way you isolate all of the behaviour specifics from the view itself. Your view is clean and void of any logic whatsoever and your presenter can enrich any view with the required behaviours. They just have to communicate through a known interface. That makes views and presenters re-usable and even composable.
This looks much more complicated because this is the basic example. Now imagine you want to add animations triggered by external data changes. If approach doesn't work anymore and your template starts to look like a mess. And if a few months later you want to change all of your animations, you will have to go through all of your React components and change ReactCSSTransitionGroups there or whatever you use. With separated approach you just change one implementation and everything works.
Visite scoutcoupon.com for free JavaScript course
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [sedwards2009/extraterm/.../**keybindings** (master → d2855ec)](https://github.com/sedwards2009/extraterm/tree/d2855ecf3f3e181178694475bbb5017c1a16f57b/extraterm/src/render_process/settings/keybindings) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9cpblj.)
React + Redux is not that far away from MVC. You just split your controllers into actions and reducers and then merge presentation logic into your views. I'd rather say that React approach is a side evolution, in terms that in most cases MVC has evolved into MVVM (splitting the view from its behaviour) into something that can be called MVAR (Model, View, Action, Reducer, lol) by splitting business logic into two parts and leaving view layer as it was a decade ago. I prefer to have MVVM and then we can easily split our logic into reducers and actions. Fixing views is a harder task in my opinion, because you need to develop sophisticated tools. Even JSX requires new tools which has to be developed. But splitting your logic inside controllers doesn't require any external effort.
The way I see it is that it is like a language that has many interpretations and spellings, but needs to be 100% for each dialect to run.
[removed]
I've created a JQuery plugin that can animate elements on scroll. You can create custom animations or predefined ones to animate elements as they enter/leave the viewport. &amp;#x200B; [https://github.com/akzhy/skroll](https://github.com/akzhy/skroll)
Thank you for showing me Meiosis! On the surface it reminds me a lot of CycleJS, but it manages to address one of the things I've always struggled with: nested state. I could easily see myself using it in lieu of the stuff I've been doing w/ Redux lately.
Mithril js seems like a step backwards, the code is unreadable for non trivial examples, using strings for view components is error prone. Meiosis looks like a good pattern, might replace redux with it, too many dependencies as it is in js land. This post worsens my js fatigue.
Recommending moment.js like its 2010 without any shame
That's neat, but I feel bad for anyone who joins a meeting late (or has to restart the app) with a slow connection. Downloading a full history of the meeting is probably overkill for that situation when they really just want to jump in and continue.
 var x = 10; x.foo = 'foo'; console.log(x.foo); // what's logged? are you serious? This type of basic shit was just in my 2nd year uni subject, surely it get's more in-depth than this?
Isn JSX just a rather limited DSL?
Wasm is being made as a companion to js, no?
From my understanding, _kinda_. I think the _hope_ is that WASM will allow you to bootstrap your logic in &lt;Favorite Language&gt; and then use JS along side &lt;Favorite Language&gt; but in practice, I'm not seeing that becoming a real thing for another few years, if ever.
This is the journey I always take when building new services: - First, make a REST/gRPC interface over your service. This is the "contract" that other services can depend on - Once you have more than _n_ services that your clients interact with, and it's getting annoying to merge the responses into a single value for your client, add a GraphQL _gateway_ What that _n_ value is changes depending on my mood but it's usually 3. Most times, I don't need to write the gateway and I just use REST/gRPC. However, if I do need to add a GraphQL interface _on top_, it's a different service in a different world that leverages the work I made in the first step. The long and the short of it is this: GraphQL solves a _specific_ problem and if you don't _feel_ that problem, just use what you're comfortable with. Unless that's SOAP. Then just stop.
 var x = function(){}; x.foo = 'foo'; console.log(x.foo); // whats's logged? well, you know. javascript
&gt; MVC JSX and components is the view, the state and the business logic is the model, the routing is the controller. Did you really get rid of MVC?
Yep! Something we’ve thought about. But at the moment the history is very light (even long meetings are only a few KB). But we’re looking into ways to reduce the payload. That brings its own challenges though (race conditions and missing events between initial payload) Something we are looking to optimise in future.
Yes, that's a bad approach. Your function should not know what its callback is. You function should just call your callback if it exists. &amp;#x200B; example: const cbFunc = (cb) =&gt; { const newDate = new Date(); if (cb) { cb(newDate); } } const func1 = () =&gt; console.log('func1'); const func2 = () =&gt; console.log('func2'); const func3 = () =&gt; console.log('func3'); const cbAssignments = { 1: func1, 2: func2, 3: func3 }; const func4 = (param) =&gt; { return cbFunc(cbAssignments[param]) } func4(1); // outputs func1 func4(2); // outputs func2 func4(3); // outputs func3 func4(4); // does not output anything &amp;#x200B;
To add on to Gary's comment, there are ways to do this. Snapshotting the derived state from the actions and sending that instead of the whole action list is one way.
&gt;Because it has many flaws and if you want to run code in the browser you don't have a choice Everybody wanted Flash killed. Deal with it now. /joke
Piggybacking on the top comment here. Both garbage collection and the event loop are very important things to be aware of in JS-land. Fully understanding how GC works will prevent you from creating memory leaks in your app. While not as a big deal in smaller client-side apps that have full-page reloads it becomes a real issue when dealing with large single page apps or node servers. You should have an intimate knowledge of scope/context/closures to really grasp the nuances of garbage collection. Cyclical references are also a gotcha in reference to GC. The event loop is 100% a must-have piece of knowledge. It will allow you to reason about asynchronous code much easier. Again, knowing closures well is probably required to have a good understanding of the event loop and the call stack. Quoting a very famous JS trivia question here: i = 0 while (i &lt; 4) { setTimeout(() =&gt; console.log(i), 200) i++ } What would the above code log to the console? [If you didn't answer `4` four times, then you don't know closures.](/spoiler) Those are both very important concepts to know about the javascript engine. There are also some key things that should be known about the language, like prototypal inheritance. Certain programming paradigms that are not specific to javascript are also very crucial to know, like functional programming, composition, monads, object-oriented programming, declarative vs imperative, currying, partial application, reactive programming, and observables to name a few. If you're working with the browser then you really need to keep up to date with the latest browser API's as well. Things change fast in our field. Best of luck. It's a fun road ahead if you've got the stomach for it.
When I interview candidates, nothing is off the table. I want to find out how much they know, even for things that aren't directly applicable to the job description they're interviewing for. To be honest, I've never been impressed by someone who tries to sound like they know about things that they don't, really. It shows in the interview and I don't think I've ever voted to hire someone that did that. And I can't remember anyone getting hired that was like that, either. If by "prepare" you mean "make a sample site using the technology", I'm all for it. There are things you could do on the backend with React, like server side rendering, that would definitely be nice to be able to talk about in the interview. But if you mean "read about it" then it's not going to help near as much as you hope. IMO, focus on their main backend language. Find out what framework they use and make something in it. Anything, no matter how small.
Fuck all yall bitch-ass mods. yall be actin up on your high horse, meanwhile runnin mouth at ur users, callin their shit digital barf n shit, just cause we don't speak ur language, we don't think like you. Mods need to respec their own authority, recognize their position of power, and set a good example. yall need to encourage ur people, not bring em down. Peace.
&gt; 1) Why there is so much hate toward JS ? It started as a "toy" programming language. It eventually devolved into a more respectable language, but then, because of its popularity, it attracted many subpar programmers, with zero knowledge on the fundamentals, "script kiddies" so to speak. &gt; 2) Why OO programmers put all their hope in WebAssembly ? Lower execution level, which could allow near-native performance. Also, it would give JavaScript and other languages the ability to run outside the browser without a huge dependency like Electron. &gt; 3) Can the lack of standard hurt the JS community in the long run ? (Ide, npm, too much choice etc) It's good to have standards, if the standards are well made. C++ has terrible standards, for example. Maybe it's better to let JavaScript evolve in the wild, then make standard whathever becomes *de facto*. &gt; 4) From your humble opinion, why the React approach is more popular than Angular ? Angular is more verbose, and it restricts the way you write things, because it's very opinionated. React allows a high degree of freedom (and it has good and bad consequences). &gt; 5) Can Node compete with Asp.Net core or another tech stack in term of speed ? It depends of the application, I guess. There's no silver bullet.
Enjoy your sad existence kenman. I really do think you're at risk of suicide, which is why I'm telling you now to call someone if these thoughts start to become plans of action. It can be anyone: your mommy, your daddy, or your mommy and daddys shared cellphone. Just get someone on the line to remind you of the important little boy that you are, who grew up to be a very important moderator for a vewy important sub-weddit. I'm proud of you and it's time to spread your wings and fly. Too long have you been limited by the digital walls of /r/javascript. Imagine being the moderator for real life: When someone does something that doesn't follow the rules, then you swoop in like, "Sorry ma'am, you're not supposed to put ice in rosé. Thanks for your understanding." You're capable of so much more, kenman (if that is your real name). And I want to be around to see that happen. Peace
&gt; using strings for view components Huh?
Surely it has, the point is that I have never seen anyone have problems like this in a real project.
Awesome, thanks man for the links, especially the "study of studies" [http://danluu.com/empirical-pl/#wat\_summary](http://danluu.com/empirical-pl/#wat_summary) seems to me from my quick look so far the most accurate way of looking at static vs dynamic discussion and the author has valid points about the results from my mentioned study. I will look at this more in depth later and I will also add it to the article so that anyone can make his own opinion based on the presented resources and studies. I have the similar experience as you with Flow and TS, the static typing in JavaScript is not ideal, but I usually prefer to work with them in bigger projects. The biggest downside for me is that I felt decreased efficiency, therefore I was looking into ways how to increase it and one way is to use automatic type generation from graphql like in the article. The workflow is still not ideal, but in my personal experience it helped a lot in our team on the frontend to decrease the time of updating the static typings manually. 
Your Uni is teaching JavaScript?
Codility challenges... Count the number of zeroes in a number. Trick here was that they'd multiply two numbers which could each go up to a million. This meant that as I was doing the solution of bit-shifting in JS didn't work on on big numbers since JS after some point doesn't consider numbers as ints or longs anymore but go floating point... The other one was a bit more convoluted but basically you needed dynamic programming to make it (as they expected linear runtime where a naive solution (like I came up with) was more n squared). I had 2 hours to complete them (total). Don't remember the exact number but it was definitely over 50%, and wasn't considered for an interview. I didn't really like that. Maybe I should also add that I kinda fucked up because I waited a week to actually do the challenges...
Brutalize my morse code converter app: [https://github.com/jckuhl/morse](https://github.com/jckuhl/morse) &amp;#x200B; Functional webpage, so you can see what the code is doing. [https://projectbreakpoint-morse.netlify.com/](https://projectbreakpoint-morse.netlify.com/) &amp;#x200B; Come at me bros! I want to be better! Think of me as the Bride from Kill Bill and be my Pai Mei!
Yes, I forgot to mention dynamic programming! Sometimes it's enough to just say "oh, that's dynamic programming" to get praise and move on to the next problem ;-)
&gt; . Your function should not know what its callback is Source for this?
To counter this, I was using and disliking TypeScript until I learned Rust, which is strongly typed. I then went back to TypeScript and, although it's not strictly the same, it clicked immediately.
Thanks for your inputs. I've built some projects with react as well. I'll try to recollect that and probably focus more on NodeJS and DBMS etc.
Common sense.
I would like you to elaborate on this comment. Did you read this list thoroughly. -How can small little components and modules be half baked frameworks? - Vanilla is a widely known reference to our pure JavaScript, while I understand you may not personally like it, what else should I refer it too? Last but not least, why are you such a cunt? 
This surprises me, because in most interviews I’ve had the problems are more like the medium or hard leetcode questions and you must know how to analyze runtime and space as an expectation. I imagine it may be different for an explicitly SE role, so it’s interesting to hear what’s asked for others in a JavaScript role. In my experience doing web dev interviews, code at home problems are a bit more common, but seemed a bit larger, like creating a small game. Those seem a little more relevant to the actual work and definitely were more fun. I agree that realistic problems are probably the best indicator of someone’s skill. 
oh my god dude, do yourself a favor and save this comment so you can look at it after you've been working in the industry for 10 years and cringe at how awful and stupid it is.
Hi /u/Naxufarius, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/laurentabbal, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/Peter_Pupper, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I think that if you have a good use case for a function like \`payload =&gt; (dispatch, getState) =&gt; () =&gt; {}\`, explicitly writing it out is just fine. Syntactic sugar to make it a shorter expression just means more syntax to remember, while providing little or no semantic advantage. Compare and contrast to this bit of syntactic sugra from Ember. Instead of writing \`computed('[foo.bar](https://foo.bar)', 'foo.baz', function () { ... })\`, we can write \`computed('[foo.{bar](https://foo.bar),baz}', function () { ... })\`. It's shorter, but it also gathers all the sub-properties of \`foo\` together, which improves the organization of the dependencies, much as destructuring assignments aren't just shorter, they gather related things together. I don't see any additional benefit to the shorter syntax at this time.
I'm frankly no expert on leetcode questions, I was under the impression that hard ones were in the randomized algorithm territory but now that I checked again you may be correct. May be a stupid question, but what is an SE role? I'm not good with corporate acronyms either. Also, for context, I'm in Russia, so the market may be a bit different.
Pleasantly surprised to see something nice said about Ember -- it's what I use in my day-job. It gets a lot of flak, but it has a lot of really nifty features like that computed syntax you highlighted. What I like about that syntax in particular is that it's roughly equivalent to globbing, and so the mental overhead is reduced if you're familiar with globs.
Oh sorry, software engineering The hard questions seem to frequently repeat algorithms I’ve seen in university under a B.Sc in Computer Science I think Russia tends to have similar or even higher expectations, all the peers I had from Russia were excellent, although this might just be some sort of selection bias 
Mithril views use hyperscript (plain function calls similar to Preact's `h`). You can also use JSX (and many do) Readability is something that I've heard people argue both ways ("hyperscript is more readable" vs "JSX is more readable") but given that you could use either, I don't understand why someone would say Mithril views are hard to read. A non-trivial example of Mithril code would typically look similar to one in React, since both use a component-oriented virtual-dom architecture.
&gt; 80% of my project's javascript can be done flawlessly with jQuery That would mean that 80% of your project's javascript can be done flawlessly WITHOUT jQuery as well. With the advent of ES6, it has negated the need for jQuery. Depending on what browsers you support, a transpiler may be needed, but even then, the code that you will output will be smaller without jQuery than with it, so you're pulling in a 200kb library for no reason other than you're familiar with it. 
While I don’t necessarily agree with he principle advocates there in re: presentation logic separation, it does make sense within the context you present it. I personally have been happy to move away from that model but it makes sense in the Android realm as currently constructed. 
As a follow up have you done any react native and compared?
Scrolling is broken on that page (Chrome in Windows).
I work with JavaScript every single day as my job and I didn’t know the answer. Why would I know that? I’ve never tried to set a property on a number.
SE roles definitely pay more, like double, but webdev seems easier to get into and generally more relaxed as a job I think 
I disagree that it would never have been invented today. If speed doesn't matter, why do preact and inferno have such momentum?
Not at all. It's a DSL that executes on top of, not independently from, JavaScript itself. Which means anything you can do using JS, you can also do with JSX.
Idk man I'm doing kick-ass admin panels with AdminLTE -&gt; bootstrap -&gt; jQuery. &gt; so you're pulling in a 200kb library for no reason other than you're familiar with it. This is simply front-end guy level retarded. Bootstrap requires jQuery so with both combined I can use all of their widgets in seconds, they are nicely extendable and well tested so a MASSIVE VALUE for these 200kb. It's understandable you haven't heard of .min files [https://mathiasbynens.be/demo/jquery-size](https://mathiasbynens.be/demo/jquery-size) or that the browser is caching the resources so its actually 1st time - 70kb next time is 0b. I'm all up for ES6 tho. I'm just waiting for it to mature more to fully adopt it. I still do not see how a standard(language) version has anything to do with a framwork/library of a language. This so much confirms the hate on jQuery........
 Absolutely languages have the ability to be more messy or not. It’s a matter of the rules you define . That’s why critique a language. Saying that all languages can be messy is not really an argument for anything 
Sorry to be that guy but it's, "Veni Vidi Vici!". Not, "Vene Vidi Vici!. Other than that thanks I'm stoked to try this out =D
It's fundamentally different in a number of critical ways. First and foremost, React is nothing more than the "V" when taken by itself. It has no idea of any sort of controller whatsoever, and the state of a react component is just set functionally. React has no way of referring to or updating a "model" because none really exists for React. If you want to expand your definition of what we're talking about and throw state and view management into the mix, now we're talking about using something like Redux. Fair enough, you probably are going to do something like that, but two key points: 1) Redux is NOT required. For example, you can use JSX in Vue, and go more traditional MVC. 2) React-Redux is not really at all like traditional MVC or MVVM Calling reducers and actions "controllers by another name" is a bit reductive. To be clear, there will always be something talking to the models and the views if you haven't mucked that all together. If you want to call the "whatever else" controllers, sure then it's MVC, but I don't think that's the right way to look at it. In traditional MVC, there is typically a one to one(ish) relationship between a view and a controller. You build a view, and a controller manages it. Now, you might say "actually this one controller manages three views" or "I have two controllers, one for business logic and one for presentation logic" but the basic idea is the same. The Redux approach completely centralizes management of all state in the application and takes responsibility for centrally managing view updates. This is a fundamentally different approach to state management and has broad implications across a number of places in a library. An individual reducer might be used across a broad number of components, and each component might use many reducers. You can group literally all state management in your application into a single reducer, or you can spread it out as makes sense to you logically - which might be completely different organizationally than how your components are constructed. You might have entity specific reducers for handling operations on specific models which cross-cut a broad variety of views. You might have component specific action creators which are oriented at event handling, but have literally no idea which reducers are going to handle it. It's much closer to a pub/sub model than it is to MVC. And your views are subscribing to pieces of the redux state, not individual reducers in any way. Views are reducers are completely decoupled from each other.
Please see response on sister comment.
Ah, just discovered that it stops working once you click on any of the chapter marks at the top. I guess nobody except me uses them.
Good catch, will update! Thanks!
Hmm, I can't recreate this on Chrome for Linux. By chapter marks, you are referring to the main menu navigation right? Are any errors thrown in the console?
I'm referring to `#nav`, yes. Nothing in the console.
Using typescript for node is definitely not a good idea. Unless you don't care about performance and your just making toy services. Node.js is javascript, but you really need to know how it interprets that javascript to make services performant and anything Microsoft is going to generate for you is not going to factor that in since its node.js specific. 
What browser are you using? I'm not experiencing this.
Hmm, interesting. That was a free theme I found online, but then ripped out jQuery since it felt appropriate, probably a related bug somehow. I don't have access to a Windows machine at the moment, but I'll take a look when I get home and see if I can spot the issue. Thanks for the heads up!
What's wrong with moment.js?
 Absolutely languages have the ability to be more messy or not. It’s a matter of the rules you define . That’s why critique a language. Saying that all languages can be messy is not really an argument for anything 
Where’s the question?
You can literally always say that and be right. The point is that browsers, at least the worst ones, which you had to support, used to be downright shitty. That is the difference.
I've been thinking about UI dev for some time now and I really want to split everything into multiple layers. I even want to split rendering outside of view/presentation. This is kind of complicated solution at first, but it allows to develop different parts completely independently. That also means that high level UI developer will never see HTML/CSS, just a mark-up which abstractly defines the layout. That will also allow to map/render components on different platforms with ease. This is something similar to what Qt is doing, but a step further.
Isn’t that more what Babel solves though?
I tried React Native about two years ago, it was in a very poor state at the time (bugs, performance issues, etc). I haven't touched it ever since so I can't comment on that. I guess loads of have changed in that time.
&gt; The server side rendering madness of javascript Yeah it's frankly amazing to me how "SSR" has become this buzzword in the JS community.
I’ll be checking back to see if you bought at least the first responder’s dinner, OP.
Fair. 
You can with do statements. JSX 2 will likely resolve like that by default. But either way, it's probably better anyway to keep this tidy: let mail = user.email if (!mail) mail = "Not email for this user" return &lt;span&gt;{mail}&lt;/span&gt;
In the beginning, script in a browser was never envisioned to be anything more than twiddling form elements and rudimentary dynamic HTML. It was not created as a fully fledged language on purpose. Anyways, it grew up, and is like a half language now. This is actually reasonable for dynamic UIs in a browser, since it is geared towards the browser API. The trouble starts when you decide it should be the one universal language. It not that, and is a terrible choice. My god, why not use Java? Because newcomers cling to the first language they use, and that is frequently JavaScript.
I believe its mostly due to SEO concerns although google said something like "chill, our crawlers are executing the js before analysing just as a regular browser" but I honestly don't believe it doesn't harm SEO. And the second is that people finally realised that SSR is tens of times faster in terms of progressive page rendering. Hence the madness in this environment... the sentiment shift from client side virtual dom rendering to SSR took what... less than an year? But the shift in technology architecture is huge... I'm optimistic though, looking forward in hope that vue.js will balance the best of both worlds. They allow for attaching the js component to an html (If I'm not mistaken) but it was a tiny section in their documentation and it doesn't seem like this is the way they advocate. So I will wait another 1-2-3 years to mature and I hope they become a reasonable framework to use!
Ya sorry, I have resentment on this subject. IMO both candidates and employers tend to be lazy. So anyone who works hard just has to put in extra effort to find their match in a sea of mediocrity.
It's not markup. It never was. How much react have you done? If you work with it for more than a week it quickly becomes aparent that it is an extreamly clean way of managing your UI. The issue people have with react is that all it does is manage UI. Everything else in it comes from you, so you need to follow good patterns.
I’d argue that if you have hundreds of servers (I assume you mean web services, one server could have many nodejs services inside) that it’s more a of a company wide decision to write good code across the board. I know from experience that if you have hundreds of applications and whenever any team wants to swap out a library the vast majority of the business logic for it has to be rewritten, on an enterprise level you’re going to have millions of dollars of waste which will be terribly expensive to rectify but also terribly expensive not to.
&gt; On the other hand how often do you change something so fundamental in your app? Depends on the type of work you do, but in my experience, often enough. The company I work for runs a web service that's been in existence for over a decade. We've stayed in the same stack (.Net) the whole time, using ASP, and we're on our 3rd completely different web framework with different API's for all the web stack stuff (request, response, etc.). We often - including right now with both Core and MVC5 - have multiple major web framework version using common shared code in production at the same time. And then you get fun stuff like web framework v1 returned empty strings when you dereferenced a non-existent key from the dictionary of query string parameters, v2 returned null, and v3 throws an exception. Bet your ass we wrap that stuff in our own abstractions. How many different ways and best practices have their been for doing something simple like making an HTTP request over the last 15 years in your stack of choice? What do you use for policies like timeout and retry? What did you use 5 years ago, 10 years ago? Messaging and pub/sub? Data access? Even IoC containers. Now, if you're doing project, hourly billed type projects for external customers, then you might not change big pieces as much, and those projects might not go through the kind of continuous refinement that internal projects do. But I've seen major pieces get changed plenty and for good reasons and almost inevitably - if not done poorly - make adapting to change easier. 
im torn between vue and react. react seems the more likely to find a job / work ...vue seems more fun 
Same broken for me -- clicking on any of the navigation marks that forces the scrolling will break the user input on my end. It scrolls to the demo in question, but then I'm locked in place on the page -- mousewheel doesn't work and the scrollbar itself is also locked from being manually dragged. Up to date Chrome on Windows 10 Pro
The specific code snippet is indeed weirdly indented. Here's what it looks like after using a [beautifier](https://beautifier.io/): ```js var people = [ { id: 0, name: "John Doe", age: 47 }, { id: 1, name: "Jane Doe", age: 88 }, { id: 2, name: "Mason Louis", age: 17 } ]; ``` I also replaced the `;` between the elements in the array with commas (`,`), because that's the correct JS syntax.
When passing around the object to other functions, it might not be redundant. It might also be coming from some data store somewhere like that.
&gt; 1) Why there is so much hate toward JS ? Because people who are bad at JS complain loudly. &gt; 2) Why OO programmers put all their hope in WebAssembly ? I guess so they don't have to learn JS &gt; 4) From your humble opinion, why the React approach is more popular than Angular ? React has a small API and is basically just JavaScript. A large react app can become complex, but there is a simple, small API at it's core. Angular feels more like a framework. 
Hmm, really weird. I think it must be something with the theme I'm using, it was a free one available online and I tried to swap out to jQuery and probably broke it along the way. I've disabled the smooth scrolling and fixed menu which I think will resolve the problem in the interim until I get access to a Windows machine to actually diagnose the error. It might take a bit for Pages to update, but if you don't mind and have a second, let me know if the issue still persists. 
Slick library. I'd suggest an option for "locking" the final sliding position to center on the nearest element. Right now, it's common to partially show two items, which doesn't feel clean and is more difficult to read than a single item taking up the majority of the carousel display.
Learning, yes I learnt to take things easy. Keeping doing good work in ur ability but more importantly look at the brighter life outside of work. Family and kids make you better not the github source repo or valuation of startup.
Oh I've read all of their reasons... and disagree with their conclusion. 
Relying on array order to manually access objects from a hand-written store is not very simple nor stable. The example in the OP is too abstract to give precise advice, but in general, I would make this a nested object literal instead, using your id as the key for each child object. Like this: const people = { 49593: { // person id // name, age, etc. } };
Thanks, the ";"s were a mistake on my part.
Look into this, perhaps there is something for you: https://www.udemy.com/understand-javascript/ It absolutely helped me a lot!
[removed]
keeping the data structure you have (although /u/Baryn has a good solution) i'd do something like: `function getUserById(id) { return people.find(person =&gt;` [`person.id`](https://person.id) === id); }
So since it doesn't use VDOM, every time it renders, it completely replaces the HTML? Or does it attempt to diff against the current DOM and make changes?
Hi /u/garyfromqueens, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
An actively maintained repository that is apart of 1000's of projects and was request my last post by the community. No, there is no shame in that. 
You're tripping boy. 
I anagrammed bolster to lobster at first glance so now I’m gonna go review some PRs harshly to lobster my ego
I threw in ID to give the example more beef. Would this be what you are proposing though (keeping IDs)? const people = { 0: { name: "John Doe", age: 47 } 1: { name: "Jane Doe", age: 88 } 2: { name: "Mason Louis", age: 17 } }; &amp;#x200B;
Use a code formatter like prettier, never think of it again.
I feel bad for using ID in the example because I feel everyone is more fixated on it. I'm more interested in keeping the objects in the array and whether that's good or bad. In my program, the real code isn't using an OD, and there is a finite number of elements (16). The person who got upset over my code suggest doing a constructor, and filling the array with instances. When I did, the end result look about the same, so I'm confused why that's better. I think this person is just more interested in constructors and arrays that they asserted it as being the better idea. &amp;#x200B;
I think you’re assumption is right. They’re over complicating something that just doesn’t need it Also if you have a limit of 16 items, then performance really doesn’t matter. 
That's right, especially if the IDs are not always going to be in perfect 0-N order.
Well, quite simple a list of dependency free components. You're use of quotation marks around "component list" somewhat confused me, so let's go over this: &amp;nbsp; According to Wikipedia, the definition and characteristics of a component: &amp;nbsp; &gt; An individual software component is a software package, a web service, a web resource, or a module that encapsulates a set of related functions (or data). &amp;nbsp; All the listed projects can be referred to as components. They could also be called modules, vendors or plugins. So why are you so confused as to what you're looking at? The fact you used "WTF" in your comment is a clear indication your intention was to place focus on the "component" reference I have used but you have not taken the time to communicate your reasoning for this, I mean are these are these not components? If not, then what are they? what should I call them? &amp;nbsp; Lastly, you're free to communicate your thoughts but do so in a constructive manner you fuck boy. 
Meiosis is poetry. Enjoy it and if you need and support the author foxdonut is pretty active in the mithril [Gitter](https://gitter.im/mithriljs/mithril.js) chat and most Mithril users are familiar with the pattern.
Looks nice :) 
No that wasn't the point. I screwed up posting code on reddit. The thing the person didn't like was my array of objects. &amp;#x200B;
Cool, nice job!
That's what I expected it to do as well.
Hi /u/NicosReddit, last warning on the personal attacks.
It's noice. So whenever state changes we have to `this.queueRender()`, right? Would be great to have some reactivity or maybe an integration with MobX.
?? What's weird in my comment? 
Yes. That's one way to do it. But queueRender is a little low level, when you explicitly mutate the DOM. The other would where state flows from the top, attrsChanged by defaults does this automatically - which is the basically what the functional component (LiteFn) is. dispatch/update is the other way to facilitate this as well. That's probably what should be used to connect with mobx, etc. 
As far as i can gather your question really is if you should use this object literal pattern, or an object constructor pattern. I would say it depends, if your constructor would have an obvious order to its arguments such as: vector(x, y) ; or if the constructor adds some logic to the creation of the object, like adding some required properties that would always be which don't deviate from one object to an other, or which can be determined based on the other properties of the object; going for a constructor pattern can be quite expressive. But for something like the objects presented here the order of the arguments to a constructor would not be obvious so I would advice against the constructor pattern since it forces the reader to look at the definition of the constructor to determine what each argument actually represents without adding clarity to the instantiation of the object, in this case the object literal pattern you've used is better since it has a higher signal to noise ratio.
Looks interesting, indeed. I was just wondering, how do you maintain the consistent ordering of events for all the connected clients? Does every event generated on the client have to go through the backend first before reaching the local redux store?
Interesting indeed. I guess this is where the interviewer got his idea from. I'd guess in this case I can't I use a library since it makes the solution 1 line.
This is perfectly fine imo. It maps well with most tables representations and communicates meaning clearly. Why would you instantiate static data without functions? An array of arrays [[0, "john", 17], [...]] is possible, but the "compression" it gives has never been noticeable. If you feel you need to spare these extra bits of ram, you have an architecture problem. Same for the double object {0:{name: "john", age: 17}, 1:...} You do that because you need fast access to one entry. You will better off by querying a datastore (fetchUser(0);), not by building one! ps if you do that anyway, don't remove the id from inner object. I would love for you to get back to that person and ask him _why_ he thinks this looks like total SEAT, and how he will do it.
Thank you. The amount of carousel libraries that leverage plain old native scrolling is too damn low. Have you considered using the new css scroll snapping? I believe support is sparse at the moment, but would be a nice progressive enhancement type feature
How about this... ``` function accumulateArrays(arrayOfArrays, fn) { const [acc, ...rest] = arrayOfArrays; return rest.reduce((acc, row) =&gt; acc.map((cell, ix) =&gt; fn(cell, row[ix])), acc) } ```
You didn't have to tell him you wouldn't use it because you have your own.
Very interesting project. I just recently started looking into \`hyperHtml\` and \`lit-html\`, but I don't want to give up the simplicity of something like React's functional components. These approaches appear to necessitate a class based approach. Have you given any thought (or have any interest) in approaching this VDOM-less approach functionally?
Arrays of objects are very common in js. You did perfectly fine.
OK, thanks for the answer. It could also be curious to see whether something like [this](https://en.wikipedia.org/wiki/Lamport_timestamps) could be applied in the context of your app and how well could it fit with the whole architecture.
Hmmm are you using a rendering library? I would try manually destroying the older canvas contexts? requestAnimationFrame shouldn't be causing performance issues, here, but always try to minimize the amount of code that gets run within its callback. It seems possible that you are updating the old canvas contexts without realizing it. Hard to tell without code. Try it out in Firefox, too. They've got great dev tools, as well.
[https://github.com/prasannavl/litecomponent#functional](https://github.com/prasannavl/litecomponent#functional) There's the functional example. You can actually use \`LiteFn\` and then, override any of the lifecycle methods yourself from the prototype. 
Yeah I think starting with refactoring to get rid of the extra canvases is where you should start. It sounds like a lot of extra computation that doesn't result in anything positive for the user. Also, if your game gets more complicated and you add more features, it could add a lot of unnecessary complexity to your game.
&gt;I’m not convinced I have hooked my state and router the best way It's pretty neat, although I didn't see an initial state definition.
No rendering library right now - it's a pretty vanilla effort, where I loop through a tilemap to call drawImage() a bunch of times, ending up with a single large prerender which I also just use drawImage() on to my main canvas. Is there a way in JS that I can manually destroy the contexts? Right now the process is pretty much `level.prerenders = []; // previously had 5, 10, etc.` So in that way, I'm leaving it up to the GC to get rid of them. I never actually attach them to the DOM in any way - anything the user sees is drawn to the main canvas. But if there's a way I could "give a hint" to the GC, or the GPU process, etc. - it would be great!
I would keep the ID as part of the object as well. There may be times you need the ID and it's useful to keep handy.
Because it added nothing to the conversation. It wasn't a suggestion, it wasn't a critique, it was just a statement that you wouldn't use it - which does nothing for anyone.
You must be lost
Learn about JavaScript engine implementation, e. g. [V8](https://v8.dev/docs). It really can't get any deeper.
Nope, never even heard of it to be honest. I'll take a look now though, definitely have a few planned upgrades to add. One of my main objectives though is to keep the plug-in super small. All of these carousel plugins are like 20+kb and no one is using basically any of the features. 
JSON is just a way of encoding JavaScript objects into a string so that it can safely be passed around. You're not using JSON at all here, you're simply using objects. And that's the proper solution if you ask me.
Hard to tell without code. Sounds complex. https://stackoverflow.com/questions/18456160/how-to-destroy-reload-the-canvas-in-html-5 Safari and Firefox both have Canvas dev tools. They might help you debug this. 
You have two options: 1. Use one off-screen canvas to construct your tiles, and cache the image data from each tile to use later. 2. Just [use Phaser](http://phaser.io/). Using the Canvas API directly to build a game makes about as much sense as writing your own JavaScript interpreter to build a checkout form.
I agree with @name_was_taken. However, If you want an easier way of accessing your users, you might want to store them in an Object or Map instead. That way you can easily call `people[id]` to get the users with that id, or `people.get(id)` if it were a Map. If you don't care about accessing them easily by id, then nevermind. That looks totally fine to me. 
Maybe dumb, but for the first one couldn't you just convert the number to a string and count the char occurrences? let count = (total + '').split().filter(c=&gt;c==='0').length; 
This \^\^\^ It's called a key:value pair for a reason - if the key itself stores a value, that store it in the value part.
Nah, you're fine - they were just being an arse.
yes. technically x is a function, but javascript functions are objects too
Right - you started with one approach and as you went along your development process it seems like you found out that your initial approach wasn't appropriate. Therefore you should go with a different approach
&gt; so now I can use people[1].name etc for accessing the data on each of these people If you want to access the data of each object in an array, you can do this: people.forEach(person =&gt; { // Do things here console.log("Name: ", person.name); });
We actively use https://github.com/marcuswestin/store.js which has a nice API, and a lot of backwards compatibility.
I didn't forget. I chose to not acknowledge 
They have a few versions of different weights, depending on the level of backwards compatibility you need. We use the `store.modern.min.js` variant which doesn't include legacy browsers like IE6/7, and only weighs `7.21KB` raw, and `~2.5KB` gzipped.
it's about the same size as local-storage-fallback i mentioned in OP (5.56 KB), but has much more users/support. So seems like better option. Thanks for your help!
If that statement did nothing you guys would just have ignored it. Sigh, just reddit people doing their reddit things. Move on, nobody ain't time to waste online. 
If this were me I'd create a utility method strictly for building out this type of a request if it's one you're going to build often. I would have package for everything involving people. Or persons. ``` ---myproject/ -----main.go -----people/ ---------person.go ``` main.go ``` package main import ( "fmt" "github.com/myusername/example/people" ) func main() { people := []people.Person{ people.New(0, "bob", 40), people.New(1, "john", 12), people.New(2, "ron", 80), } fmt.Println(people) } ``` people/person.go ``` package people type Person struct { id int name string age int } func New(id int, name string, age int) Person { return Person{ id: id, name: name, age: age, } } ``` 
CherryJimbo, one thing to clarify - does \`store.modern.min.js\` have cookie fallback? I mean are there in modern browsers situations when both localSotrage and sessionStorage are not available?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [marcuswestin/store.js/.../**store.modern.js** (master → b8e22fe)](https://github.com/marcuswestin/store.js/blob/b8e22fea8738fc19da4d9e7dbf1cda6e5185c481/dist/store.modern.js) ---- 
Don't get mad
This is even less info than I get from my average recruiter email. 
this will sort of let you do a for each but on a specified index. I'm not sure if this is exactly what you are looking for but it should get you pretty close. &amp;#x200B; `const arrays = [[1,2],[3,4],[1,1]]` `const everyNthElement = (arrays, index) =&gt; (cb) =&gt; {` `arrays.forEach(arr =&gt; cb(arr[index]));` `}` `const everySecondElement = everyNthElement(arrays, 1);` `everySecondElement(elm =&gt; console.log(elm));`
IMHO these libraries always lead to one thing. Vulnerabilities, exploits and hacks. 
Is it accessible?
JSON is a set of rules for organizing data. Check this site – https://www.json.org/ I'm honestly curious to see how that other person would have done it? If you really need fast lookup then you could have an object with IDs as keys but this is just as clear.
side note—what's with eric elliot's side twitter account where he pretends to be animated black woman? https://mobile.twitter.com/JS_Cheerleader it's a strange grift
Good understanding of jQuery, what year is it? 
Would D3 fit in this list?
"Notably, inheritance and subclass polymorphism were NOT considered essential ingredients of OOP by Alan Kay, the man who coined the term and brought OOP to the masses." Interesting... 
It’s been mentioned several times above, but not explicitly by name. Using a Map data type instead of an Array is considered less brittle. In ES5, that would look like an object of objects with the keys equal to each person’s id. In ES6 you can use the new Map data type. I personally think they were being way to harsh without giving constructive feedback. Also, having the look up as a function (also mentioned in other answers) will make the implementation cleaner and DRYer, ensuring you won’t need to change code in multiple places.
What do you mean?
There’s nothing from with this.
Wtf...
You got that right.
var LIGHT\_RADIUS = 35; var STOPLIGHT\_WIDTH = 120; var STOPLIGHT\_HEIGHT = 350; var DIST\_BETWEEN\_LIGHTS = 100; var GRAY\_COLOR = "#737071"; var centerX = getWidth() / 2; var centerY = getHeight() / 2; &amp;#x200B; function start(){ var rect = new Rectangle(STOPLIGHT\_WIDTH, STOPLIGHT\_HEIGHT); rect.setPosition(centerX - STOPLIGHT\_WIDTH / 2, centerY - STOPLIGHT\_HEIGHT / 2); rect.setColor(GRAY\_COLOR); add(rect); drawCircle([Color.red](https://Color.red), centerY - DIST\_BETWEEN\_LIGHTS); drawCircle(Color.yellow, centerY); drawCircle([Color.green](https://Color.green), centerY + DIST\_BETWEEN\_LIGHTS); } &amp;#x200B; function drawCircle(color, y){ var circle = new Circle(LIGHT\_RADIUS); circle.setPosition(centerX, y); circle.setColor(color); add(circle); }
Saving for later
What's the pay though?
React is the view that we can agree on. By routing I meant react-router not Redux. I am not sure where you would fit Redux would fit in the MVC model. Probably still in the view as it holds not real business logic. Although reducer might be seen as such? Damn that remind me how much I hate Redux. The model is where the business logic is supposed to happen... Maybe you still have a bit of that in SPAs theses days... 
&gt; IMO, when people say "Your code looks like shit" and don't offer to help improve it, their opinion doesn't mean much. Helping to improve, as in actually getting involved in fixing it, would be a second step, the first one would be to point out what's wrong and eventually explain why. Often the first step is enough. I wouldn't instantly label people as egomaniacs, yet I fully agree with your point: criticism is valuable as long as it is constructive. It's not that it always has to be constructive, but if it isn't, it doesn't help at all indeed, since one can't fix things if he doesn't understand what's wrong.
My answer is that yes, it is a bad approach. But not because of _the principle of it_, as someone else suggests, but because of the implementation details. Let me suggest a _general approach_ to this decision and my answer will become more clear. I'll call _core code_ your "function2". In fact, I'll call that `coreFn`. I'll call _client code_ the code I write that calls `coreFn` and finally, `cbX` (`cb1`, `cb2`....) any generic _"callback"_. There are two main ways you may think of and they answer /u/UntestedMethod's _on point_ question: - The first one is the more open and _typical_ case. `coreFn` does not care about `cbX`. Whatever I pass from client code as a callback, will be executed. [CASE1] - The second is one where `coreFn` will only accept certain callbacks. Only if you pass a _valid_ `cb1` or `cb2` then it will be executed. An error may or may not be raised otherwise. [CASE2] Now, the first [CASE1] way is [simple to implement](https://jsfiddle.net/1qvxm9jt/5/) (fiddle) and so I won't dwell on it. Before we implement the second one [CASE2], though, we should _think_ for a moment: **Why** do we want this? In [CASE1], _client code_ has complete control and responsibility over the callbacks `cbX`. _Client code_ decides which callback to use and has total ownership over this decision. What we seek/achieve with [CASE2] is the opposite: We give control and responsibility over the callbacks to the `coreFn`. Now _client code_ cannot just use any callback it wants. And it is `coreFn` the one that decides about the _validity_ or _appropriateness_ of `cb7` or `cb2`. So, this is it. It is about control, ownership and responsibility. With this in mind, both approaches are "valid" or good. They each serve a different purpose and there is no need to discard, say, [CASE2], claiming that `coreFn` should never care about the callback, or discard [CASE1] saying that callbacks should always be validated. Both may be applicable for different circumstances. But, why is your implementation _bad_? Well, it's bad on two accounts: 1. It doesn't protect enough the ownership of _core code_ over the callback functions. 2. It gives _client code_ too much knowledge/responsibility over the callback functions. Let's see these problems. About the first problem: We've decided that _core code_ owns and is responsible for the callbacks, but they are _too open_ to access from _client code_. In fact, some rogue _client code_ might decide to do [something stupid like this](https://jsfiddle.net/1qvxm9jt/6/) (fiddle). The second problem may be a little more subtle, but it's actually at the centre of the whole thing. We are forcing _client code_ to care about callbacks to at least some extent. _Client code_ needs to know which callbacks are valid, their names, it also _needs_ to have the access mentioned above because otherwise how can it pass them to `coreFn`? So it has to care that they are in scope. What does this all mean? It means that we haven't correctly transferred the ownership to `coreFn`. Finally (sorry if this is getting too long), we can think of a more solid approach to [CASE2]. [We do this](https://jsfiddle.net/1qvxm9jt/7/) (fiddle) by first closing access to the callbacks, and then making _client code_ **select** which one it wants instead of having to **pass** it. (Note that the final code is merely _illustrative_ of the approach. There are various -better- ways in which you would implement the same idea. This one is chosen for simplicity.) ---- So, to summarize, the idea is _valid_ if you need such restriction, but the implementation you proposed had some shortcomings. ---- PS. You might think of a _third way_, where you can pass any callback but then _core code_ may impose some generic restrictions on it. Sure, it can be done, but in general the _need_ for this is _rare_.
Well, if you want something looking like Smalltalk you should look more at ruby than JavaScript though..
This was a really good article. Eric puts a lot of time into his content and it shows. He always clearly has an agenda of selling his courses but regardless his content is always on point.
Sorry my explanation wasn't clear, count the 0s in the base 2 representation of the number
The people I see who proclaim that VS code is somehow better than JetBrain products, well in this particular instance WebStorm are the ones who are not utilizing the tools it provides. My guess would be that they simply do not work in environments where those tools become handy. Although there there are some generic tools: - Although local history cache might be something useful to anyone. Effective global search might be better used only by those who work with huge codebases. I noticed that VS code stepped up a lot, and I use it on my weaker machines. It really brings a lot of useful features one may not expect from code editor. However, for everyday work in continues integration environment it cannot compete with JetBrain stuff. Btw I use PHPstorm = Webstorm + first class php support and SQL integration. 
&gt; where he pretends to be Where does the owner of that account pretend to be someone? All I can see is that the person chose some random image. I use cat images for various accounts. I'm pretending to be a cat? Thank you, anonymous Internet psychologist. /s
maybe i'm in the minority here but I have such a hard time reading OOP code
[Ceptr](http://ceptr.org/) is an interesting project trying to do exactly this by treating all objects as *receivers* which *listen* for signals on certain carriers. Every object is autonomous and, being virtual machines, each receptor is its own computer with its own runtime. You don't tell objects what to do, nor do you point at an object. Objects emit their signals within a virtual membrane and all objects within that membrane are able to process that signal if they want to.
So PWA Visual Studio Code incoming? 
Why do you think he blames you for how you wrote an array? He might think that using the array in first place is wrong. 
What tool does Webstorm have that VSCode doesn’t? And considering you’re CI/CD should vbe automated and tied to a VCS branching strategy, I’m not sure how an IDE plays a role.
Yes, C++ and Java are not what was intended with OOP. A classic example of no one understanding the essence of an idea and just repeating other people endlessly until it morphs into something completely different. Then, that new thing is terrible so people write off OOP entirely. For a more purist view on OOP, check out the writings of Sandi Metz and Avdi Grimm. Yea, they come from the Ruby community, but I have applied their ideas to JS as well. JS can definitely be object-oriented, in the good way. I mean everything is an object in JS, objects are super flexible. That combined with dynamic typing can make for some very nice code. 
https://github.com/kusti8/proton-native
I wrote a ray tracer: [example image](https://raw.githubusercontent.com/BYossarian/scene/master/demos/mesh-example/deer.png) [https://github.com/BYossarian/scene](https://github.com/BYossarian/scene) I actually started playing around with it a few years ago, but I've added a bunch of features recently (including meshes), and threw together some basic documentation this week. Gonna add texture mapping soon. I'm really happy with how some of the renders have turned out! ([something a little more abstract](https://raw.githubusercontent.com/BYossarian/scene/master/demos/node-example/totem.png))
Better than tampermonkey?
Well the services such as Slack, Viscose, etc already "install chrome" along with themselves, but it is kind of hidden, you will not see Chrome itself appear in your apps if you don't have it installed already
Well I’ll be damned. Look at Windows.
I created a plugin that can animate elements as they enter/leave viewport when scrolled. https://github.com/akzhy/skroll It offers custom and predefined animations, option to set custom viewport, queued animations and other options. Suggestions and feedback are appreciated.
Electron allows chrome apps to run where security policies requires a certified exe or IE/edge. (E.g. WebRTC does not work in IE or edge, but does work in chrome. IT Org’s will not let you install chrome, but will let you install you own exe.) PWAs do not help here (not allowed to install chrome) . Please do not kill electron!
Alan Kay went into a lot of detail on this point in [this talk he did at OOPSLA](https://www.youtube.com/watch?v=oKg1hTOQXoY) in 1997. One of his famous quotes about C++ is [here](https://www.youtube.com/watch?v=oKg1hTOQXoY&amp;t=634s) in the video. It's a long talk, but I think worth watching. The downside to watching things like this is it can be a little demoralizing because you start to realize that so, so many of our programming languages and tools feel primitive and hacky compared to what was possible 35-40 years ago - things like Smalltalk and Lisp Machines. I know *why* those tools didn't prosper at the time. They were expensive and not very accessible to a wide audience. But I fear that as a result, we've climbed really far up an evolutionary tree that's a bit of a dead end. Recently, just for fun, I decided to fire up Turbo Pascal in DosBox and work through a an old TP book I found at the library. I expected it to feel ridiculously outdated and archaic. And...it didn't. It didn't *feel* outdated. I actually enjoyed it. I enjoyed that the entire damn thing - IDE + debugger + compiler - is half the size of jQuery. 
I am not saying that having the simple functionalities that PWA's provide for isn't nice, it sure it, but they aren't anywhere near what node, electron, proton, react-native, etc. can do. It seems to me that the idea of a browser as an embedded content host in general is a really terrible idea that for some odd reason Google is relentlessly trying to brute-force against all odds. Just like with Web-components, it is as if they have completely lost contact with the real world, which is moving away from the dom and its crippling limitations. We have a virtual dom now and thereby javascript can natively render on any platform imaginable without any limitations and corners cut. The next step (from Electron) seems obvious: javascript will render native desktop applications without the need for Chrome, or a dom. A package won't be 200mb for a hello world println, it won't eat half of the computers ram, it'll have access to the full platform.
Your script is already correct, except that you've configured JSFiddle to load the script at `On Load`. This makes your script be made like below by JSFiddle. window.onload = function() { function description() { //... } }; That causes your `description()` be made as a local function instead of a global function. Thus, it's not accessible anywhere except within that `onload` handler function. To fix it, change the JSFiddle *Load Type* setting to `No wrap - bottom of &lt;body&gt;`.
Is sounds like more of a replacement for “chrome apps” (for non Chrome OS) that they are killing off https://blog.chromium.org/2016/08/from-chrome-apps-to-web.html?m=1. Although the extensions API is way more powerful.. I’m not sure I follow killing it for this. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Thank you so much for this. I understand some (requires some more re-reading) One question- why you call it client code? Isn't client code also written by me?
I think this is also being worked on as I read somewhere that transparency of the body is being looked into. Fingers crossed it doesn’t take too long 🤞
Theoretically, you can/will be able to use other browsers - especially Mozilla is also pushing this hard for Firefox. In practice, I'm still afraid that developers will only focus on Chrome.
It actually [supports full VSCode](https://twitter.com/CompuIves/status/1052594462768148480) nowadays.
I'm currently developing a PWA for an enterprise app, and we are a couple Chrome releases behind, so even then feature support is spotty. As Bluecewe mentions, they are web standards; however, I think the 'can I use' pages tell a better story here: * [ServiceWorkers](https://caniuse.com/#feat=serviceworkers) have very wide support. They handle offline site caching. If you want to use it, I strongly recommend Google's [Workbox](https://developers.google.com/web/tools/workbox/) library, which should have wide compatibility. * [Web App Manifest](https://caniuse.com/#feat=web-app-manifest) is DEFINITELY trailing. However, in older Chromes and Firefoxes, this degrades somewhat gracefully. You only lose the desktop icon; a well-made ServiceWorker still means a user can go to your URL in the browser and have a functional app. * [BLOB URLs](https://caniuse.com/#feat=bloburls) have very wide support. These are used to inject a generated file into a link - like an img's src tag or a download link. * [IndexedDB](https://caniuse.com/#feat=indexeddb) has very wide support. This lets you have a no-sql/JSON data store that survives browser restarts but NOT cache clears. [Dexie](https://dexie.org/) is a great library for this; [Vue-idb](https://github.com/ddgll/vue-idb) is a nice Vue binding for it. * [Web Workers](https://caniuse.com/#feat=webworkers) have wide support. These are essentially background threads. * [CORS](https://caniuse.com/#feat=cors) gives you a way of requesting resources from other domains. While they need to allow it via a CORS flag on the web server, it allows you to make an PWA reach other servers without getting blocked or security popups, and is useful for 3P service integrations. There are a number of other features, like sensor access, that are useful for getting the feel of a native application. Support varies, but Firefox is generally just behind a bit. Even Edge, though further behind, is getting closer. [Vue](https://vuejs.org/) is really nice for this as it lets you easily make Single-File Components that can be reusable. :) Even better, the [Vue CLI 3](https://cli.vuejs.org/) project generator has a [PWA preset](https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa) that pre-bundles Workbox into your build process. :D
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [vuejs/vue-cli/.../**cli-plugin-pwa** (dev → 5d49d57)](https://github.com/vuejs/vue-cli/tree/5d49d5796648cc92277cef79616cc66aa6148f73/packages/%40vue/cli-plugin-pwa) ---- 
If you consider the install flow, your user is already in chrome to even install it. With that in context, I don't see the problem. This is a feature of Chrome, that uses the web APIs that allow for PWAs.
Right. Spawning a websocket or http server or accessing the filesystem are two examples of features, which are not possible PWAs, but essential for a whole lot of apps.
As other mentioned PWA functionality is based on standards already implemented in Firefox and Edge as well, meaning you can have offline functionality and push notification as long as the browser is open(so the service worker can be triggered). But "the last mile" work of actually integrating the app into the OS is only Chrome and [Edge](https://developer.microsoft.com/en-us/windows/pwa) right now AFAIK
You don’t need to write much to the DOM though, you can draw to a &lt;canvas&gt; as webGL games and Flipboard famously do.
I created a project template for **.NET Core** with **Vue**, Vuex, TypeScript, Vue router, Bulma, Sass and Webpack 4. https://github.com/danijelh/aspnetcore-vue-typescript-template The template is used to showcase how to use Vue with .NET as a multi-page(multiple mini spa's) application to enhance existing or build complete Vue pages inside different **.cshtml** files.
When you put it that way, I remembered that I haven't checked how both of those tools looks on mobile.
Apple added PWA support, but it's basically well hidden and doesn't include notifications.
That's not a web platform feature though IIRC, that's an API opened up to windows store apps.
I thought slack was an electron app 
The easy answer is that chrome apps are pretty much restricted to chrome, while PWAs can theoretically run in any browser. It might have been much easier to support chrome apps once Edge and Firefox started supporting certain chrome extension apis, but I suspect that you won't get an official standard unless Apple, Google, Microsoft and Mozilla agree to formally create a standards spec out of web extensions.
Good point. Some custom window style can really make your app stand out. I write a lot of tools for work in electron, and I almost always include a custom title bar and window controls. Really adds that extra something. 
It's a bit more nuanced than that. Chrome runs on chromium and so does electron. Chrome != Chromium, as it's a superset of features on top of chromium. 
But his whole point was that without the DOM/HTML/CSS pipeline from Chromium the bundle size would drop drastically. The Javascript engine is not the part causing the size issues. 
Oh, don't give that too much attention, but in any case: _Client code_ is an expression that is used to indicate the relationship between one piece of code and another. It doesn't really matter too much who writes it - or where it's executed. Whenever a piece of code **A** calls another piece of code **B**, then we express that as saying **A** is a _client_ of **B**. This can apply, as I said, to anything: A part of the same system you have written alone, code that someone else writes that calls your library or service, etc. It is _generally_ used not only to express this relation but also because of the implication that _client code_ is usually _indeterminated_ or unknown, a piece of code can have many _clients_, and it forms a relationship of a certain dependency, but they still maintain their own responsibilities. PS: Don't hesitate to ask if anything was not very clear.
also im not going to require my users to have chrome.
can i use firefox and or edge?
&gt; Seriously? Are you really that immature/insecure? Yes, but it's not insecurity nor is it immaturity, it's merely you getting bullied, much like your days in high school. &gt; As the most upvoted (serious) comment in this thread says "Your list doesn't make sense. Half of it are half-baked frameworks." You mean the comment that the user deleted because it was inaccurate? &gt; A compartmentalized, reusable set of html and associated functionality. Did you not read this list? Every single "library" on it is a drop in, there is no "half baked frameworks" on this list at all. If you had taken the time to read the submission you would understand that all the projects listed are essentially JS components. 
electron seems way better lol
Sometimes, people need to know their place and there is nothing like a personal attack to ensure they stay in line. 
Also, as far as I know, the version of Chromium that comes with Electron handles just the render functionality and doesn't have other typical Chrome browser features like tabbing. 
Not so much control, but they do have a dialog that asks you if you want to add the website to your homescreen/desktop. It's not like they're actively blacklisting or white listing which websites count as PWAs. Microsoft however is actually adding PWAs to the windows store, but you can still manually add shortcuts from the menu button.
Electron won't be killed. If something better comes along, it'll need some time to be used in the wild and real world applications and proven to be at least as effective. Effective meaning having a low-learning curve and not being hard to find developers for. It's a shame Electron is such a memory hog because other than that, Electron is pretty great to work with and allowed us to stop relying on the browser for our internal company app and have complete control over the environment they're working in, making bug tracking easier while also reducing bugs that inevitably arise from browser version quirks. 
You owe me nothing. Again, any time you spend on this is appreciated. CrxCmp, likely as close to custom elements as you will get without browser help. You tell me if Web Components gets you closer than this. Project made up of a number of projects behind the scenes. All mine. Work that spanned 7 to 8 years, on and off. Please do not hesitate to ask, if you have any questions.
Im not sure I understand. You have 3 options as I see it. 1. Build in the browser and use &lt;canvas&gt; 2. Build an electron app and use &lt;canvas&gt; 3. Run a JS file on desktop with either: WSH, Rhino or Node (needs to be installed) / build a NativeScript app on mobile HTML/DOM is then only required in the first 2 options to display a &lt;canvas&gt;. Option 3 can use native User interface elements without DOM. Chromium bundling is only required for option 2.
That seems like a very strange way to approach security. They’ll let you install any old .exe but not one millions of people use?
That is pretty close to an accordion, it’s basic JavaScript or you can use a library, as this has been done millions of times, why reinvent the wheel.
That's a very easy fix on windows. Just need to disable the bits for WS_CAPTION and WS_SYSMENU for that particular window. I'm not sure how PWA's are implemented, but if they are a stand-alone instance of the browser it should be easy to implement. If it uses node I could easily write a c module that will flip those bits for that window.
If I could just remember a users file that they opened locally across refreshes... that is the only thing that has me use electron over pwa
I have been working on an automatic/intelligent z-index manager based on user interaction or mutations to the DOM. Please check it out: [https://github.com/mcarlucci/layercake](https://github.com/mcarlucci/layercake) My script currently uses a few expensive operations to perform the task and I already have a few ideas on how to optimize, but please do rip it apart and any and all feedback is much appreciated! Thanks!
Couldn't you just use LocalStorage?
I love jetbrains. On a new MacBook Pro and it’s just too slow. I’ve spent hours pulling out extensions googling around trying to make it faster. Eventually I moved back to vs code it’s speed just blows jetbrains out of the water. Honestly sublime blows vs code out of the water for speed too. But it’s missing too many features. VS code is a good middle ground for me. If somehow I could get jetbrains as fast as vs code I’d be using that for sure.
Electron is also 5 major versions behind Chromium, with the latest being Chromium 67. That's a lot of known security holes to worry about.
Edge makes you install PWAs through the windows store on desktop, but otherwise yes.
Edge supports PWAs, though. If you don't use vendor-specific APIs or implementations (WebRTC, WinRT, etc.) then you should be fine.
The point that [u/drcmda](https://www.reddit.com/user/drcmda/) was making was that a native alternative to DOM/HTML should be the replacement/evolution to the "electron way". Your first and second suggestions still has the bulk of the DOM pipeline(its still there even if you don't use it), but only the second has nodejs api's that gives extra features that electron has over PWA's. Suggestion 3 is closer to what [u/drcmda](https://www.reddit.com/user/drcmda/) describes, but the JS runtime shuld be bundled with a GUI rendering lib of some kind.
Worth noting that MS's PWAs will be stuck on EdgeHTML/Chakra, which isn't the most ideal.
I’m unsure if a cross platform, OS independent GUI lib would actually be possible with the current trend in locking down operating systems and sandboxing apps. It’s something that’s been tried a few times over too, Java 👀 . It looks like MS is trying to do something with .net core too for a GUI but I can’t see that appearing on iOS/macOS anytime soon. What might be possible is a framework like NativeScript but for all platforms which wouldn’t be a stretch too far, I don’t think. The issue with that though is that you still have to ship separate package bundles to each platform/store and if there’s an issue with an app you’ll need some platform specific experience to fix.
Works with javascript disabled?
*Some* apps... VSCode, Postman yes, Slack, Gitter, Spotify, Discord not so much. I've been using those as "PWAs" that run in their own window for years already with Chrome's Add-to-desktop feature.
Can’t you just feature detect and provide an alternative experience/implementation for runtimes without compatibility of those API’s.
It’s great to talk to everyone interested in PWA’s 🙏 does anyone have a group/channel/forum we can join to help each other out/discuss/ask questions? I’d like to keep in touch.
Right. If, for example, you want to integrate your electron app with discord (using discord-rpc) - this is not something a PWA can do. I'm all for PWAs, but they are not a replacement in every case.
Gnome: gjs
Depends who you ask, but, IMO that is definitely a feature. You know that every electron app you ship will have a specific runtime that you can test against. Also, you know that every electron app will not randomly upgrade, break a feature you rely on, etc. The downside is the binary size, which I can see being an issue for some people, but the average person probably doesn't care.
They do not use node unfortunately. They are still sandboxed web apps running in the browser in which you ‘installed’ them with (without the usual browser chrome). Currently only Chrome supports ‘installation’ on Windows directly from the browser. If they are installed from the windows store they are basically executed inside a privilege Edge instance with access to the WinRT API’s.
😮 sounds nice.
Yes. What I meant, is you can build custom elements such as they work with javascript disabled. The 'file' sample.html in project 2.01, covers a bit what I call SHML and HTML+P in the link provided. I did not manage to introduce these topics well. That is the point of all of this, which is to see whether spending more time to open source is worth it.
Hi /u/vatsal_01, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/blashipeiomxx, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
hmmm, I'm more familiar with win32 API, but looks like WinRT doesn't expose `findwindow()` and `SetWindowLongPtr()` / `GetWindowLongPtr()`. I thought UWP supported c++ backends, so setting style on launch would be pretty easy if someone could access win32 api's (but are these cross platform? would need to just wrap #ifdef __win32" All windows on the system can have their styles modified. I have spent a lot of time playing with windows styles on a project of mine, and it doesn't even require admin rights, just the correct API calls.
Ionic 4 is framework agnostic. You can use any framework you’d like. 
For those of you wanting to create an ES6 or React library, I've released a Webpack 4, Babel 7 starter kit: [https://github.com/hodgef/js-library-boilerplate](https://github.com/hodgef/js-library-boilerplate) I have enabled Dependabot on it so as to keep the dependencies always fresh. Feel free to try it out, feedback is always appreciated.
Couple other things that make me skeptical about this argument (at least with desktop apps.) How many apps should abandon having a mostly feature complete browser version? As a way to attract users to try before you install. *Maybe* some subset of React will let you do that if you're very careful, but there will be some cost. How long until you realize your app needs a webview anyway? Then how long until you find it's easier to update stuff in the webview than the rest of the app? Deciding against HTML/CSS seems like you're closing a door on possibilities that you may regret not having later.
How many Electron apps don't have a web version that is developed to work in all current browsers though.
But how about with mean.js. I want to remove the angular portion and replace by Ionic. I don't know how to remove or disable this angular part and include Ionic!!!
You explained it, I looked at the demo, and I still can't figure out why this is necessary. 
I’m unsure whether the window can be modified. The window implementation is hidden from us and is an MS provided wrapper which is either an instance of Edge or a custom window they provide with embedded EdgeHTML? Either way, it’s only possible to call WinRT API’s currently. I wonder if it is possible to access the window through Windows.UI.Core and if MS allow manipulation of that? Would be interested to see if someone could test this out.
if you are talking about postman chrome app, i think they have been discontinued because google planned to end the support for [chrome apps](http://blog.getpostman.com/2017/11/01/goodbye-postman-chrome-app/) 
Can you link me an app to install? I can run it through SPY++
If you have any questions, please do not hesitate to ask. And remember, CrxCmp is as complicated as you need it to be. Incidentally, click the green icon when looking at code to hide the code comments, then later on you might wish to read them.
A combination of the useful, the obvious (PRettier etc) and the WTF?? (FiraCode??)
Hi /u/MaximusDanz, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board). Thanks for your understanding.
Excellent article, thanks for the write-up on PWAs
Hard to say, because I don't really know much about the landscape. This is more if you're targetting specific environments, like, say you're making point of sale software - it doesn't make sense to offer a web version.
If the question is "should I open source this", I struggle the think of reasons the answer would ever be "no".
If you could let me know how it goes that would be great 👍 (even if we get nowhere)
Its really not. It would be as an introduction to PWA's. But writing such an article in contrast to Electron.js is just plain wrong in every way, shape and form. PWA is basically packaging a website as an application while electron let's you build actual applications using web tech. 
Could you advise where you can install/add to desktop manually inside Edge? I didn’t think they added this yet?
MCSE/MCOP shops, where logic goes to die of sepsis. I used to work in a place like this. MS certified IT personnel are taught parlor tricks, not technology, and the last thing they need is having to think about things that cannot be solved with an Add Server Role wizard. 
Sure, if you want to make it a widely-used open source project. But you could do as little as strap an MIT license on it and stick it on github; better than it rotting on a hard drive somewhere.
Isn’t it possibly to access the filesystem using a web worker?
Google is already killing Electron by cutting out the middle man between PWAs and Chrome with [Carlo](https://github.com/GoogleChromeLabs/carlo). It's not very far fetched to assume that with some standard support in browsers using PWA tech could bring HTML /CSS as UI toolkit not only for Node.js but also Python or any other similar platform. 
Sounds like the same issue as CORS. The gatekeeper will be the server, not the client.
I’ve seen Carlo but I’m unsure of what this provides/solves? Is it ‘just’ a mechanism to use chrome as a rendering engine for js running through a local node instance?
Doesn’t do anything on mobile (safari)
I did some messing around with spy++ and it looks like the title bar is it's own child window. I tried to modify the main window and it disabled rendering of the client area. After looking at the messages sent I tried to reenable the rendering of the client area by sending the opposite message of the the disable to no avail. After digging through MSDN I came across DWM (Desktop Windows Management) and started playing with that. Seems like the solution here might be modifying a child window. Heres the code I attempted playing around with to see if it was possible: https://hastebin.com/zovitanipa.c
Shit I literally just finished up my electron app after a few months. Guess I'll just go fuck myself!
Not exactly true, as you can access WinRT API’s when the PWA is installed from the Windows store, can run WebAssembly, webGL and utilise all existing JS API’s for Bluetooth, accelerometer, camera, virtual file system etc etc
this looks like the real solution https://docs.microsoft.com/en-us/windows/uwp/design/shell/title-bar
As it is it just remotes Chrome using puppeteer and makes the SPA you provide it to interact with your Node app. But Electron is nothing more than that, The important bit is that, much like with multiple tabs/windows there is only one of each of Chrome's yak shaving processes running (and not one of each **per application** as in Electron). The step forward would be to standardize browser interface that provides local browser (that can then be Firefox, Chromium, Edge and by 2038 who knows, even Safari might catch up) whichever the user has selected as default. Then this interface could provide standard and very omnipresent cross platform UI widget system for software in any language. 
That looks promising. I wonder if it’s actually possible. 
That header is set _by the client_. You cannot trust it for security.
Or I could create a product out of it for the mobile market, which is what I had mostly used it for, or I could continue to pursue my C++ project which is to be built on the same formal models, and try to make a product out of that. There is no shame wanting to benefit from your work, because any other benefit is either charity or theft. Sure if I ever leave the industry, for example, there is no point letting the code rot, like you said.
So an end user would first have to install node and chrome(if not already installed), download your JS file and execute it through node somehow?
It's going to depend on your configuration. What is *not* going to work: Any sort of script tags where the end users browser is making the request. (aka. your paying client places some sort of script tag on their website that reaches out to your CDN). That means your client is going to need some modicum of technical know how. What will work: your client has code on their server that delegates to your script, your script returns the data the the paying clients server, and then the server returns the parsed data to the actual browser client. The flow would be something like: 1. End user makes request to your paying clients server 2. Paying clients server sees the request. 3. The _clients server_ makes a request to dmarti21's server (this allows them to pass credentials securely, or set up an ip whitelist etc) 4. dmarti21's server processes, and returns the string/data. 5. Paying client server gets response from dmarti21, and embeds it into response 6. End users browser gets the response and renders it. 
I just played around with a UWP app using the following code w/ c++ auto coreTitleBar = CoreApplication::GetCurrentView()-&gt;TitleBar; coreTitleBar-&gt;ExtendViewIntoTitleBar = true; This was the end result: https://i.imgur.com/Y5aVP0l.png you can draw your own custom title bar, but the caption buttons in the top right cannot be changed. The CoreTitleBar class has properties that tell you the dimensions to draw your own title bar. The caption buttons are automatically hidden if you go to full screen however.
https://www.laptopmag.com/articles/pin-website-windows-10-start You should be able to just pin a website to start and then drag the shortcut onto desktop.
Did you follow any good resources for your tree shaking, just tinker until you got there or a bit of both? 
Tinkered until I got there. It required a deep dive into webpack which unlocked all sorts of other useful things.
Not yet, but it will be in later releases.
Was that running locally interacting with the twitter app or injected into the running process? Apologies for my naivety.
No, it was running on my own local app that I created to test it out. It seems like you can't inject it into running processes without doing some extra black magic.
And was your local app a UWP one?
Node and the app code would be packaged and sent together, but either the app, package manager, or user would have to install Chrom(ium?) if they don't already have it.
in a local file, like outside of CORS?
I worked on my EJS based scaffolding tool Hoppla and tried to improve the recursive handling of excluded files and folders with many binary files (like .git). https://github.com/hopplajs/hoppla
 &gt;Then this interface could provide standard and very omnipresent cross platform UI widget system for software in any language. evergreen comment! 
Also, how likely are you to say, "yeah, sure!" when you visit a website and it pops up with "wanna install us as an app?" That's a big 0% for me.
Ionic is Angular. 
You can from a c++ UWP but that MS link mentions (in the purple ‘note’ section) that only titlebar color is able to be manipulated from C# or HTML apps. I assumed (rightly or wrongly) that a PWA would be classified under this implementation.
you can do it with C# as well. If you read further down there's plenty of examples. I suggest reading the entire page if you are interested in manipulating the title bar.
LocalStorage?...what is that wizardry you speak of?
From MS site: Note Simple color customization is available to UWP apps using XAML, DirectX, and HTML. Full customization is available only to UWP apps using XAML. I take that to mean only XAML apps can do full customization (so yep I was wrong about the implementation language being important, sorry I misread) still I don’t know how MS implemented the window? (If it does use XAML then maybe it’s possible for us to customise the titlebar, otherwise it might just be color we can alter)
I was initially referring to this. I thought I read that a while it was possible through web workers, but looks like it’s not actually implemented in any browser yet... https://wicg.github.io/entries-api/
I don't really consider the WinRT api to be a standard PWA thing though. &amp;#x200B; For starters you need a special manifest file specific to windows, and while I'm not 100 percent sure you might need to be approved on the windows store in order to use WinRT apis. &amp;#x200B; Whereas I'm pretty sure if I linked to [https://airhorner.com](https://airhorner.com) anyone could use it offline on a newer browser even if they don't really have an install dialog yet. &amp;#x200B; &amp;#x200B; &amp;#x200B;
They are talking about the stand alone Postman app you can download from their website.
Not sure if sarcasm/joking
check out this example (clone and run the sln file) https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/TitleBar/js you can do it with JS too, but it's more convoluted.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Microsoft/Windows-universal-samples/.../**js** (master → 7c7832e)](https://github.com/Microsoft/Windows-universal-samples/tree/7c7832e1f144e4fc836603fd70e1352024a5fe1a/Samples/TitleBar/js) ---- 
Yep I agree with those sentiments. I was curious if I’d missed a feature about manually adding to desktop in Edge (with minimal browser chrome)
Looks like it. &amp;#x200B; Javascript was originally created for netscape and you can track down the Navigator object to about Netscape 2.0 &amp;#x200B; [https://web.archive.org/web/20060318153542/wp.netscape.com/eng/mozilla/3.0/handbook/javascript/index.html](https://web.archive.org/web/20060318153542/wp.netscape.com/eng/mozilla/3.0/handbook/javascript/index.html)
It's not HTML either. It's JavaScript.
Agreed haha, most are inherited from \`create-react-app\`, you'll see some parts of the config commented out to adapt it to a library output ;)
Being that we offer an SDK for our platform there are places we are setting z-index values for global features. Our SDK provides a UI library where devs can build out a custom UI. The problem we were seeing was that entire features in our platform was unusable because things like background overlays were being set to higher z-index values than intended. But in other places worked as expected. A dev could override the value but that could cause issues in other places that an SDK client may not regress on, not to mention multiple SDK clients setting different z-index values for different reasons and in an unnormalized way makes for a very big prime and fragile UI. So we thought to ourselves, what is the purpose of a z-index in the context of a user flow anyway? Well it turns out, it’s pretty damn predictable. The top layer or the last layer/overlay rendered in the DOM will always be what’s most pressing to the user to interact with first making it predictable to automate. Can you think of use cases where this wouldn’t be the case?
I think it would be nice to have a [readme.md](https://readme.md) per repo where you lay out what the repo is about, the install instructions and so on. Also, please [https://choosealicense.com/](https://choosealicense.com/) and include it in your repo's root dir. It's a cool gesture to those that are considering cloning your work.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jckuhl/morse/.../**package.json#L5** (master → 0d5e099)](https://github.com/jckuhl/morse/blob/0d5e0993b701d548e2e55e495bf21c6ae2a201bc/package.json#L5) ---- 
If you have a bunch of stuff overlaying other stuff, this seems like a hack to avoid proper UI/UX design. If you don't, this seems unnecessary. If you're offering an SDK that other people routinely break for their purposes, either you need better design or your customers need to quit fiddling around with things under the hood. It's totally possible that I'm reading this wrong, I guess; I've never seen a UI where this was necessary, but I don't know exactly what your SDK does/looks like, so I honestly can't say for sure.
I don't know what kind of applications you use, but some obscure windows excuse for a file system access is hardly a use case against cross platform fill 8n applications 
Hi /u/adrien2p, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/attreya12, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
The problem I see is that it is asking you to return a function 2 times in the first example and 5 times in the second example - you don't know from the calling parameters which return is expected. OTOH, following a factory model would work (right?): addSubtract(1)(2)(3).collect() == 0 addSubtract(2)(1)(1)(5)(3)(2).collect() == 6
Look up thread support in wasm. They just started a preview of it in Chrome only and they have examples on the announcement. Due to Spectre, it got delayed for about a year.
&gt; Desktop applications used to feel clunky and UI components always seemed outdated. Electron has definitely brought some sexiness to the desktop game! So this is what it has come to... ugh
If additional call in the end is allowed, I'd solve it this way: ``` function as(agg, x) { if (x === undefined) { return agg } return sa.bind(null, agg + x) } function sa(agg, x) { if (x === undefined) { return agg } return as.bind(null, agg - x) } function addSub(x) { if (x === undefined) { return 0 } return as.bind(null, x) } ``` ``` &gt; addSub(1)(2)(3)() 0 &gt; addSub(2)(1)(1)(5)(3)(2)() 6 ```
You've done it, that works: function addSubtract(x) { var numbers = []; var inner = function(y) { numbers.push(y); return inner; } inner.valueOf = function() { return numbers.reduce((a, c, i, s) =&gt; { if (i % 2 == 1 || i == 0) { return a + c; } else { return a - c; } }, 0); }; inner.view = () =&gt; numbers; return inner(x); } addSubtract(2)(1)(1)(5)(3)(2) + 0 addSubtract(1)(2)(3) + 0
Exactly! As per my comment below: During the interview I asked if we could add an additional call to the end of the method so we know when to return the value compared to when we should add/subtract... and he said no :/ Ex: addSubtract(1)(2)(3)(); 
You've done it, that works: function addSubtract(x) { var numbers = []; var inner = function(y) { numbers.push(y); return inner; } inner.valueOf = function() { return numbers.reduce((a, c, i, s) =&gt; { if (i % 2 == 1 || i == 0) { return a + c; } else { return a - c; } }, 0); }; inner.view = () =&gt; numbers; return inner(x); } addSubtract(2)(1)(1)(5)(3)(2) + 0 addSubtract(1)(2)(3) + 0 
They're thinking that they don't know how to vet people so asking hard technical questions and seeing how you respond is as good a way as any to determine suitability. That said, this interview style gets used by people who don't accept its limitations and you wind up in a scenario where they expect encyclopedic knowledge. 
Users can open very large data files with our app (http://jbrowse.org) and it'd be basically impossible to move these into localstorage
Glad to hear it. I don't think an interviewer expects this. This is some obscure behavior. They were probably just trying to test currying and didn't realize the two questions were incompatible. I imagine if you gave this answer, they would assume it doesn't work, haha. The hiring manager I work with has a playbook of questions, and I've had to inform him on more than one occasion that a provided solution did in fact work, when he did not realize such. JavaScript is great that way. :)
There was a couple of guys that did this with C or C++ way back in the olden days. It was called pizza party.
If only there were some way he could test whether a given solution worked... :)
This is great, using the valueOf was some smart thinking! Hm, any chance you could share some of your managers playbook questions here? Feel free to say no, don't want his secrets to be out in the wild :) 
Goodbye Electron, Hello nwjs :))
&gt; goodbye electron, hecko nwjs :)) FTFY
I could not install Java or any other tool requiring admin privileges, but I could download and run executables. 
Nicely recalled. I remember reading about `valueOf` a long time ago but I wouldn't have thought of it if asked this question. I came up with this implementation: function addSubtract(x) { let sign = 1; const f = (y) =&gt; { x += y * sign; sign *= -1; return f; }; f.valueOf = () =&gt; x; return f; } +addSubtract(2)(1)(1)(5)(3)(2); // -&gt; 6
The best I think you can do is overwrite `valueOf` and/or `toString` of the function you return from the curry. It's not perfect, considering the following const ret = addSubtract(1)(2)(3) You need to include an operator to call into `toString` or `valueOf`, like `0 + ret` or `'' + ret` Here is somone else's answer in this thread modified with the `valueOf` overwrite to get it to return the value without an extra call: function as(agg, x) { const ret = sa.bind(null, agg + x) ret.valueOf = () =&gt; agg + x return ret } function sa(agg, x) { const ret = as.bind(null, agg - x) ret.valueOf = () =&gt; agg - x return ret } function addSub(x) { const ret = as.bind(null, x) ret.valueOf = () =&gt; x return ret } console.log(0 + addSub(1)(2)(3)) console.log(0 + addSub(2)(1)(1)(5)(3)(2))
I'm still on mobile so I don't have access to them right now. I've been wanting to write a Medium article on interview questions for JavaScript. If I get around to it, I'll change up some that we use to cover the concepts without allowing people to cheat their way in to the company.
I have a PWA website that works with Edge, so you don't need Windows Store.
Electron requires a user to be willing to download an installer and run it. Electron also does share state with the users browser cache. Electron code has to be written carefully if you want to reuse it in a browser.
I'm only sarcastic in days that end in "y"
So, switch from HTML+CSS+JS to QML.
Simple enough. Curry with toString override. 
The answer is. Thank you for your time. This is not the right company for me.
That is what I would answer btw.
This was commented here a couple of days ago. The sorter function (the function you pass to `sort`) needs to return -1, 0, or 1, **not a boolean**.
I’m not sure why overlays would be considered “hacky”? It’s a normal UI flow to have prompts, popovers and drawers. If we controlled how SDKs created their UIs this wouldn’t be an issue. But they are able to compose their UI however they’d like using our UI library. Because we can’t predict how they might compose their UI it doesn’t make sense to hard code z-index values into our components. Instead, we offer a automated manger to avoid collision and bugs by dynamically setting the z-index value based on mutations to the DOM. Does that make more sense?
My new favourite comment.
Listen for scroll, compare the scroll height with the position of the div on the screen (accounting for the viewport height)
Oh I see, can you help me with that? I'm not good at this 
If you want it without the hassle you can use a library like [http://imakewebthings.com/waypoints/](http://imakewebthings.com/waypoints/) 
That's a shitty way to propose installing PWA. If they have download / install button and you went the app, why not? As a user you just wouldn't know. Edge supports them, Chrome supports them, Firefox and Safari will. Majority of software would benefit from it.
you mean, how to read cli argument using a library and write to json without ordering an actual pizza.
No, PWAs actually work out of the box on Windows 10 - with no extra software installed. They are even downloadable from Microsoft Store. 
Yah good luck getting rid of Electron when most companies need to support IE10+. One of the key features of Electron is the browser is baked in, there's no need to support old browsers.
My answer would've been "No"
they can't access the file system? what kind of app is that?
that would be great, cheers!
Same case as Chrome.
I was literally looking at learning electron yesterday. Still gonna do it buts still
&gt;This was commented here a couple of days ago. The sorter function (the function you pass to sort) needs to return -1, 0, or 1, not a boolean as you're doing there. a friend just shared `($(a).data('sort') &lt; $(b).data('sort'))?1:0` to replace as code for the return but it doesn't work./ 
You still have to do the `+ 0`, though, which isn't part of the original question. I think the interview question was just a poor one.
Main argument: Extending not owned prototypes is overall a bad idea for future maintenance. The new property may be used in the future by its owner.
I made my first Npm package after refactoring an older script I made (And removing jQuery as a dependency) Npm package: https://www.npmjs.com/package/ripplescript It makes beautiful ripples on a target container! I'd love some feedback and maybe some ideas of improvements I can make. I'm also not sure if I followed best practices in making the Npm package (If those exists) so I'd love some insight on that too.
You could technically override the `toString` too, if you wanted it to be console logged.
Then you should take the question to /r/LearnJavascript as that is the place for JavaScript help.
A very similar question was asked over 8 years ago partially in response to prototype.js, which relied heavily on modifying the prototype of objects it didn’t own. I’d suggest reading this: https://humanwhocodes.com/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/
yes &amp;#x200B;
ah the art of doing things the hard way! now you just need to implement it with [carrier pigeons](https://tools.ietf.org/html/rfc2549).
Where is the variable quizContainer defined? Are you sure it exists?
I've been working on a Vue component library. It's still somewhat new, so please be gentle. [https://github.com/nvms/vue-atlas](https://github.com/nvms/vue-atlas) [Documentation](https://vue-atlas.com) I'm particularly proud of the [LayoutManager](https://vue-atlas.com/documentation/layoutmanager) component.
You don't say?
And a controllable environment, you don't need to worry about browser compatibility when you can control the "bowser" and version.
It still seems like that would cause more problems than it would solve, depending on the client. The last thing I would want with a UI is for a script to set my z-index values for me, as it seems like it would interfere with the design, since I now have an element of design I have no control over. But I also probably wouldn't be using an SDK, so maybe I'm not seeing it because I'm not the target market. Are the users of the SDK well-versed in CSS and/or JS, or is this more for less-knowledgable users?
Unless this is a job for currying JS functions you should have told them to fuck off and left.
[removed]
You need to harness the power of asynchronous programming. [This section](https://github.com/apache/cordova-plugin-file#write-to-a-file-) of that plugin's docs has an example of using the \`onwriteend\` callback to accomplish this.
Create some dumb WordPress blog with 2-3 posts, get this blog approved by Google for AdSense... Use this account to add AdSense to any website (including your game). They basically need to verify at least one website to approve your AdSense account and you are free to use it on other websites as well (this was the case years ago and I doubt something changed)
It looks like the plugin supports callbacks. If you trigger the read from the success callback it should be ready. 
I'm pretty sure Microsoft has been working on native PWA support for Windows 10. I wonder how that effort is going. In any case, I'm always in favor of more tools for people to use!
This is the type of fun projects, that I read Reddit for! 
I here you. Im definitely attempting to solve a specific need. Our SDK users are not very knowledgeable on the front end so it’d be one less thing they’d need to worry about and it would make our platform more predictable and less buggy. Thanks for all the feedback!
I here you. Im definitely attempting to solve a specific need. Our SDK users are not very knowledgeable on the front end so it’d be one less thing they’d need to worry about and it would make our platform more predictable and less buggy. Thanks for all the feedback!
Not too proud to admit I don’t understand how any of these solutions work. Tip of a hat to programmers better than myself! Also, don’t do this IRL in case I gotta take your project over. 
Where've you been for the past few years lol
If not passing any arguments to the last call is okay I would've done it like this: const curry = (start, sign) =&gt; next =&gt; next === undefined ? start : curry(start + next * sign, sign * -1) const addSubtract = first =&gt; curry(first, 1) console.log('addSubtract(1)(2)(3) = ', addSubtract(1)(2)(3)()) console.log('addSubtract(1)(2)(3)(4)(5)(6) = ', addSubtract(1)(2)(3)(4)(5)(6)())
What’s the terminal on the readme?
Yeah, I'd walk out, I've never had a problem landing a position in 20 years. The question in no way shape or form tests whether you might be able to deal with *actual* problems you may encounter on a daily basis
A function can return another function which means you can call the return value: function f() { return function() {}; } let ret = f(); ret(); // Now inline ret: f()(); Now if that inner function itself returns a function you can call things repeatedly: function f() { return f; } f()()()()();
Try posting a jsfiddle. Better yet, try stackoverflow.com. 
Make a mini test app first, from beginning to built application. Make sure what you're starting will actually work!
I am not sure if I am fully understanding. This is just a tool. In the end it comes down to the developers on whether they want to develop with graceful degradation or not. However, what is important is that CrxCmp gives the developer that option, and with ease. Read the 'file' sample.html in project 2.01 to get an idea, of why and how this works. When I say graceful degradation, I do not mean hide the custom element completely. Instead, I mean it continues to work with as little limitations as possible when javascript is disabled. Try disabling javascript on the eyeandtea.com website, to see what I am talking about. Please note that I do not condone nor oppose bypassing the Chinese firewall. I simply do not understand the situation.
Unless it’s one of those fill-in-the-blank or correct the simple issue problems, I’d just do it without asking for permission first. They should be evaluating your problem-solving abilities, not that you do it exactly the way they would. And if they insist there’s only one correct way of doing things, might be a flag for you to consider.
recording from asciinema &amp; the animated SVG made using svg-term-cli
Someone got their feelings hurt. You’ll be okay, little buddy. 
So? Nothing wrong with Electron. If you chase the latest trends, you won't ever get a deep knowledge of anything.
I mean, the question is more than a bit of a reach, so any possible answer is going to be a reach as well. I still think the interview question was a bad one.
Stupid tests like this that have absolutely no grounding in the work you will do are simply retarded.
Just wait until you see the number of Electron apps that'd be exactly the same as a bookmark but the title bar wouldn't be as cool.
Thanks!
For better performance it is disabled on mobile by default, however it can be enabled if needed.
Btw, this pack doesn’t depend on jQuery.
This probably won't be a popular comment, but I actually really like this question. It doesn't rely on the programmer knowing any obscure, irrelevant mathematics or algorithms, and instead tests you on some important concepts I'd expect any JS programmer to know in 2018: currying, closures, recursion, and default parameters.I would absolutely ask this in an interview, and I'm the type of person who HATES leetcode-style algorithm nonsense. Here's my solution: ``` const addSubtract = (sum, op = 'add') =&gt; { const result = (newNum) =&gt; { const newSum = op === 'add' ? sum + newNum : sum - newNum; const newOp = op === 'add' ? 'sub' : 'add'; return addSubtract(newSum, newOp); }; result.valueOf = () =&gt; sum; return result; }; ``` The only tricky part about this question is how to terminate the currying. Since you're not allowed to terminate using `()`, you have to rely on the "hack" of reassigning `valueOf` to get this to work. If I were interviewing a candidate, I'd wait for them to ask about this and give them a hint by telling them about what `valueOf` does (i.e. it's a function that exists as a property for every object in JS), and then I'd expect them to understand that, since functions are first-class in JS, they can reassign the `valueOf` function to get the functionality they need. 
Nice! Very nice!
I'm worried that if I don't convince myself the folks I'm hiring can turn a problem into plausible code, I'll end up hiring bullshit artists. Although my rules are "the syntax barely matters, and make up any method you need to solve it, with the understanding that you may be asked to implement any of those methods later on." 
nice try codesandbox marketing department
I don't understand why it's ok to write such code during an interview, when in reality you'd probably get a bad reputation at work if you do actually code like this.
Have you considered helping people learn how to use google effectively?
You have three ternaries there and I think its making the code unreadable. You don't even need branching to do this! const addSubtract = (n, x = 1) =&gt; { const _addSubtract = (m) =&gt; addSubtract(n + (m * x), -x) _addSubtract.valueOf = () =&gt; n _addSubtract.toString = () =&gt; String(n) return _addSubtract }
I hate this mentality of don't do complicated things ever because some new grad might inherit it. That sounds like a failure of onboarding a team member. 
&gt; I would definitely be okay with asking this question in an interview, and I'm the type of person who DESPISES leetcode-style algorithm nonsense. &gt; The only tricky part about this question is how to terminate the currying and get the result. Since you're not allowed to terminate using (), you have to rely on the "hack" of reassigning valueOf to get this to work. Sorry, but this makes it a terrible interview question.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tunnckoCore/parse-commit-message/.../**37e31b20604512d5509f539ee9cf2fa9ae78311d** (next → 37e31b2)](https://github.com/tunnckoCore/parse-commit-message/tree/37e31b20604512d5509f539ee9cf2fa9ae78311d) ---- 
Even more tricks going on here than currying a function
“Answer this unnecessarily over-complicated and obscure problem that would never actually be seen in a real-world application” Yeah, no thanks. I despise these kinds of interview questions, and would not want to work for someone who asks them. It’s great to see some of the solutions here though 👌
Yea, a subclass of an int is an int, however if you ever end up with a mixed container your fucked. If you use it in a set or in a dictionary, the hash won't be different from the normal hash of an int-- so if you end up putting, say, CustomInt(2) as a key, then update 2, then iterate over the dictionary, the original key would have the custom call but because you updated it with a non custom one it doesn't. Furthermore this can screw with some containment checks.
&gt;has definitely brought some sexiness sums up web design for the past few years. fuck what works let's make it sexy
Could you link to your game? Would like to try it out.
Interesting topic 🔥
You can probably still adapt jt
The point is why are you trying to figure out a hack for something that a file can easily do? What’s more universal than a FILE? Why are you trying to get around a limitation of the browser with weird solutions? Why are you totally fine with reinventing things that have existed since the 1960s, like FILES?
\&gt; your .exe does something bad, they only have to sue / fire you. &amp;#x200B; You haven't read a software license recently, have you.
codesandbox.io
idk ask the iOS devs
It's definitely a \_gotcha!\_ question...I can't imagine (nor have I run into) a situation where programming like that is entirely necessary in JS. I do hope the interviewer felt smart though!
Will do, thanks!
Lol, this kind of over complicated nonsense is exactly what I expect from a new grad. Write readable code.
Chrome used to have this years ago. Then we used Fluid but the development halted. Hope someone keeps this feature going long enough for us to rely on it. 
In that case, OP is probably better off not working at this company
I came up with this: `function addSubtract(a) {` `if(!a) return 0;` `return function(b) {` `if(!b) return a;` `return function(c) {` `if(!c) return a + b;` `return addSubtract(a + b - c);` `}` `}` `}` I still cant wrap my head around it. Is it readable/okay code ?
 !== is harder to see than !== &amp;#x200B; ??
The second one is supposed to be a =/= but I was tired when I wrote that.
we have a take home assignment but don't do any live coding exercises
i heard about currying while watching some douglas crockford video but cant say ive ever used it 
I’m even more against take home bullshit than I am live coding exercises. You want me to work on my free time? Pay me
obviously not. its all taken into consideration. So what was your interview experience that did not have a take home, no coding questions, yet you were vetted as a capable dev? 
Talked about my experiences and answered questions. It was awesome
firing somebody sucks more than not hiring them, for all parties involved. if someone's going to be paid to write code all day long and I'm not checking that they can accomplish the basic features of that job, then I would argue I shouldn't be in charge of hiring. it sounds amazing to me that you got hiring for a dev job without any of that happening. did they at least ask you to solve some kind of problem on a whiteboard? anything to indicate you might be able to think clearly through a problem? 
Yes, modules are how you separate code in different files. What's included in a module is another story. As a rule of thumb, any chunk of code that is more than a few hundred lines is too long.
The isn't a lot of consensus as far as I can tell. ES modules do seem pretty sweet. That's currently my preferred way but I'm in a similar boat as you. 
The concept is to understand how you’d handle an unknown number of arguments. This is often used for core functions, as you’ve probably noticed, like console.log, to interpolate values into a c-style format string. It’s a simple enough question that it wouldn’t hurt to ask in an interview, and you could follow it up by asking how you’d handle the problem for environments that didn’t support ES6 syntax. Usually questions asked are kept simple, so the explanation isn’t convoluted.
No whiteboard, nothing. Just a lot of questions about what I thought about developer stuff like state management, deployment methodology, etc. Best interview I’ve had in SWE so far, although not the first one where I didn’t complete any coding exercises as part of it. Having been part of interviews on both sides, I know that hiring is mostly about rejecting people for arbitrary reasons, until one hapless sucker makes it through. Simply set up 1,000 hurdles and wait.... that’s hiring. 
Ask for a use case.
lol, I wished they paid me.
you spammed this link to a lot of subreddits, do you know that certain people find that very rude?
Sorry, will never do it again...😫😪
If you *really* want `new` to return a callable it's possible. I don't recommend it though (side note - TypeScript *hates* this). class A { constructor() { function defaultCallable() { console.log('default called'); return this; } Object.setPrototypeOf(defaultCallable, A.prototype); return defaultCallable; } foo() { console.log('foo called'); return this; } } const a = new A(); a().foo(); console.log(a instanceof A); // true It's a bit more reasonable without ES6 class syntax function A() { function defaultCallable() { console.log('default called'); return defaultCallable; } Object.setPrototypeOf(defaultCallable, A.prototype); return defaultCallable; } A.prototype.foo = function() { console.log('foo called'); return this; }
Does it work? Form the first look you are trying to use undeclared variables all over the place
It's just a check on your.understanding of recursion. I'll expect addSubstract function signatue to be addSubstract(arg, sign, accumulator) 
Thanks, will do 😀
On Firefox, not really although most standards are supported, on edge yes.
A simpler way to do it without storing the internal array would be like this. ``` const addSubtract = (n) =&gt; { let cur = n let mul = 1 const addsubt = (i) =&gt; { cur = cur + (i * mul) mul = mul * -1 return addsubt } addsubt.valueOf = () =&gt; cur return addsubt } ``` https://codepen.io/timothyjoh/pen/rQMyxO for the codepen
This is what google is for. If you don't know how to solve some obscure programming problem you can look it up. But you should know a lot about javascript. It would be much better if they just ask you javascript questions regarding things that you would commonly need to know as web developer. The only place I've seen functions even close to that is in game development. Most likely you won't be writing stuff like that as a web developer. I've been studying game development with html canvas and javascript and i've seen some pretty complicated functions but nothing as convoluted as this.
Yup. I remember being asked an overly complex question and asked for more clarity. "Oh we don't know, the director put it on the test"
I haven't been able to find an existing way to curry either a function with variable length arguments, or with one argument as an array. I assume it's possible to write a custom curry function to handle this. I tried Ramda and Lodash libs. Any thoughts?
You know, now that I look back on it, I think I've been on the candidate side of one of those kind of interviews. Small startup, fully remote. I kept wondering when the small talk would stop and the actual interview would start. And then it never started and I was politely thanked for my time. I remember thinking that was all rather odd. But maybe I just don't do well with that interview format. With that said, I know there are other interviewers on our current interview lineup that feel comfortable being regaled with tales of engineering feats, and that seems to work for them. At the risk of being basic, I think I must keep asking coders to code stuff. I've just seen too many incredibly impressive resumes handed out by fast talkers that name dropped all the right buzzwords and referenced all the latest trends yet couldn't come up with a rudimentary algorithm to solve simple problems. I refer to those as "candidates with upper management potential." And yes, the exercise has its limits. From what I've seen, most people code at about 20% of their actual ability during an interview. Hence the explicit directions to not worry about syntax, or even whether any particular API exists to solve a problem. The coding questions end up being about converting a problem from English into math (or whatever fuzzy approximation of math we refer to as coding) and solving that using whatever happens to be in their utility belt. 
Let me also add something something to the conversation after my comment there: I strongly disagree with the writer saying these PWAs are comparable to desktop applications, there was even the word "clunky" to attribute them. The task of making a web app — how sophisticated it may get — feel, behave and integrate like a native app for the os it's running on is _near insurmountable_. Not using native UI components from the os' primary framework for interface building (like Cocoa/AppKit on the Mac) comes at an immensely high price. We have seen this times before with non-native desktop apps written in Java.
Yea I've looked at some of the apps I use daily that are made with electron and I'm not gonna be dissuaded by one article. 
[removed]
Meteor.js
what r u trying to create?
The use case for currying is when your function is a traveling explorer and has to go to many different places to collect nice things. In code, if your function is handed around and one by one collects its parameters from different places instead of from one place. You use it when you need to do something with data that exist sin different scopes, maybe even different modules, as a way to get it all into one scope to be able to use it all at once. What people normally do is hand the *data* itself around, so there is no need for partial application or currying. This is the reverse (sort of), instead of passing data around you pass the functions themselves around and they collect the data at the place where it is created. This is how you can do a computation in a function that spans space and time (the collection of parameters may also be from the same location/scope but at different point in time - the more common approach without curried function would be to collect it e.g. in an array).
So what did he actually expect?
Good call, with the + operator to force casting. I have a similar implementation, I like the idea of binding the state to the returned function: function addSubtract (input) { const state = this const sign = state ? state[0] * -1 : -1 const value = state ? state[1] + (input * sign) : input const nextAddSubtract = addSubtract.bind([ sign, value ]) nextAddSubtract.valueOf = () =&gt; value return nextAddSubtract } &amp;#x200B;
wonder if dominos has an api🤔
Apperantly there’s [this](https://github.com/RIAEvangelist/node-dominos-pizza-api/blob/master/README.md)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [RIAEvangelist/node-dominos-pizza-api/.../**README.md** (master → 294f72f)](https://github.com/RIAEvangelist/node-dominos-pizza-api/blob/294f72feaa6a1da55eb9b2dda5d6171be1872423/README.md) ---- 
Yeah, the world **really** needs another one of those articles. /s
Looks nice, but is to expensive for what it does. Good luck. 😉
Those millennials...
They just checking how do you handle complexity.. are you give up or you trying something.. 
Why "in node.js" 
&gt; so this is strictly relating to Node How so
function addSubtract() { console.log("addSubtract(1)(2)(3) -&gt; 1 + 2 - 3 -&gt; 0") console.log("addSubtract(1)(2)(3)(4)(5)(6) -&gt; 1 + 2 - 3 + 4 - 5 + 6 -&gt; 5 etc.") }
Thanks for the response. I couldn't get your first example to work right, and MDN discourages the use of setPrototypeOf for performance reasons. I was initially exploring attaching references of the class methods to the function that is returned, but that didn't seem great either.
Welcome to web development 2018
Even now Carlo recommend zeit/pkg
I think it is a nice question. Functional programming concepts are used widely these days, and it tests your ability do use js constructs in a functional way. I assume they expect you to run the resulting function with () in the end. With that, it's not too hard. var addSubtract = m =&gt; n =&gt; n === undefined ? m : subtractor(m + n); var subtractor = m =&gt; n =&gt; n === undefined ? m : addSubtract(m - n); Each method returns the next operation as a function, and if no argument is provided, returns the result of the previous function. With that, addSubtract(1)(2)(3)(4)(5)(6)() will return 5.
 function addSubtract(a, step = 1) { return (b =&gt; { if (b === undefined) { return a }; return addSubtract(a + (b * step), -step); }) } console.log(addSubtract(2)(1)(3)()) === 0; Sadly i need that last execution on the end.
I hate to be "that guy" but the timeframes on hackathons assume you've built things before, and people generally show up with frameworks and boilerplate ready to go. If you've never used node.js, your first seven hours is going to involve producing "hello world", followed by an echo API or something. 
I doubt the maintainability of those apps you've shipped. I left a long answer in your previous responses. The short, I don't see any arguments on your part other than "I don't like to see markup syntax close to javascript syntax". Which is personal preference. Personal preference is not an argument.
currying is a valid coding question, and should be used more IMHO
Currying is used a lot, it's just that often it's just used at 1 level only and when doing composition. but think of redux's `connect` function, it takes most the arguments it needs up front, then returns a new function thet expects the last argument, with "auto curry" you could give it 1 argument at the time or all of them at once. But saying that currying is never seen in real word applications is wrong 
You can extend prototypes in the browser environment, but since each browser uses a different interpreter, extending objects like the DOM might create unexpected behaviors. I'm not saying you can only do this in Node. I'm asking if this is acceptable in a Node.js environment.
They have/are. See the twitter app in the windows store.
maybe its just cause i'm retarded but man those variable names make this pretty much incomprehensible to me
this feels vaguely like the promise of many many things that have happened before. 
It has nothing to do with node or browser but with what you actually do. There is nothing JS runtime specific (and V8 is in both the most widely used browser and node).
shit in healthcare, you're still frequently using XP. 
it's something alright. obnoxious. 
Could that help? https://github.com/sahat/hackathon-starter/blob/master/README.md
there we go fracturing the world again. Luckily, few people use Edge. 
Yup, completely agree - JSFiddle has less features and longer feedback cycle to see your changes, but CPU usage of Codesandbox is abysmal! Sharing and to some extent even coding more interactive demos or anything with animations is big no-no with Codesandbox. There are better suited tools out there for that like Codepen, JSBin and JSFiddle. Besides, it's not a zero-sum game - I'd rather have both a screwdriver and a hammer instead of just a hammer.
It is perfectly okay to not know what currying is. I didn't now for over a decade of being a developer and even though I know now I still don't use it as a pattern.
I would personally ask the candidate how they might write their own currying function tbh
And QML gives you that (well, Qt Script, which is a variant of Ecmascript just like JS is), plus an object model that is actually designed for application interfaces.
Second worst interview question I've ever seen. The worst was "hey would you take €500/month for this internship?"
You can use modules. But generally by using a modern framework like Angular there is inherent code organization. For myself now that I have used Angular and Typescript for a couple of years I wouldn’t want to write vanilla JS if I can help it.
maybe they're testing if you are able to call bullshit when you see it
Really good stuff! Thanks. I'm gonna use it for my next project.
Do you accept honest but largely negative criticism? I mean, after seeing your posts here about CrxOop and CrxCmp and how they are received, I think you should already have a clear picture of the general interest on them (I would sincerely say it's "not a lot"). But you may or may not want to listen to some possible reasons for it.
Just for fun I tried to make it as short as possible (assuming ES6) function addSubtract(n, c = 1) { const x = (m) =&gt; { n += c++ % 2 ? m : -m; return x; }; x.valueOf = () =&gt; n; x.toString = () =&gt; n.toString(); return x; } You still need something to trigger the "valueOf" work, e.g. in chrome console: addSubtract(1)(2)(3) f 0 +addSubtract(1)(2)(3) 0
You might be right. According to [devdocs from 1999 ](https://web.archive.org/web/19990423121049/http://developer.netscape.com:80/docs/manuals/js/client/jsref/index.htm) the `navigator` object &gt; Contains information about the version of Navigator in use. This object was implemented since JavaScript 1.0 which was indeed introduced in Netscape Navigator 2.0.
Javascript isn't an interpreted language?
That means you don't have quizContainer. Your code doesn't show where it's came from, but since it's null and nulls are rare in JS, mostly from dom-api, you probably was looking for it with some querySelector and didn't find. If it's simple html file, put your script at the bottom of your html, or wrap execution of js in window.onload callback.
PWA can be installed on user request. Showing a popup to first time visitors is straight moronic. You're completely right nobody would install it this way. Turn it into a regular install button as in any other software website or display a popup only for returning users.
&gt;I couldn't get your first example to work right I was returning the wrong thing from `defaultCallable`. It should work now. &gt;MDN discourages the use of setPrototypeOf for performance reasons. I was initially exploring attaching references of the class methods to the function that is returned, but that didn't seem great either. Those are the only two ways I've done something like this, and I agree that neither is a very good solution. You could also try wrapping a function in a [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). 
This is the best guide to functional programming I know and told me all the basics: https://mostly-adequate.gitbooks.io/mostly-adequate-guide/
You're hired!
Hope you don't mind me commenting here instead of doing so on Medium... I do share your point that TDD is not so much about _writing tests_ but rather about _driving_ or _guiding the programmer towards a solution_. Well, you say "to enlightenment", but ok. However, I think that there are two interesting details in here. One is the the claim that nobody tells you this about TDD. I guess to some extent you need a catchy title. But people actually _do_ tell you about this. At least if you listen to the appropriate people, of course. But, I mean, even the Wikipedia page for TDD explains the process as a driving or guiding process. Any way, I won't give you a hard time for this because, yeah, ok, it's just a catchy title :) But then again... The truth is there **is** something that nobody tells you about TDD. TDD is a _design technique_, it is a _driving process_ that helps you reach a certain type of solution to your problem. And there's the rub: it guides towards a _specific type of solution_. TDD is a methodology where, through the imposition of certain restrictions or rules, you're guided to reach a solution. Obviously any solution you reach has to lie within the boundaries and restrictions that the process imposes. I think it is fair to at least assume this is true, without yet judging whether this is good or not. In fact, I think that arguing whether the specific type of solution is or isn't the _best one_ is something that has evaded discussion, and the problem is that generally TDD proponents just assume the _implication_ that it is indeed. I have seen, in a number of occasions -in myself and in other people-, how applying TDD produced a certain solution which, of course, worked. But then, following TDD prevented reaching a different design which turned out to be more appropriate. This happens precisely _because of the guiding restrictions_ TDD imposes. Particularly, the restriction of _minimal implementation_ is quite strong. Ignoring things that we actually know we will need in a little while, makes us either do additional work (and sometimes a fair amount of it) or settle for a certain solution that is _enslaved_ by our previous choice. Again, with all this, I don't mean to argue that a solution produced through TDD is _never_ the best possible solution. Just that is isn't _always_ and that most TDD proponents just seem to have assumed without challenge that it actually is. I'm not, for the record, against TDD. I do think it has benefits and is a good option for _certain_ situations. Anyway, I won't be the person to challenge this assumption because I don't have the strength or will to do so, but I think that it is a dangerous assumption that has gone unquestioned for too long. I merely present this doubt here to you, knowing that you like to think about such things as "how we do things" and why, just in case it may spark your curiosity and make you, maybe, ponder upon these things. If it doesn't, so be it. There is no obligation, obviously.
Yeah I agree. Still for some reason a lot of big software companies seem to be heading in roughly this direction and developing cross platform UI software is still either a very demanding and expensive process or takes solutions such as Electron whose inordinate memory, CPU and space demands are hated by developers and users alike. 
Something like this? function addSubtract(x, i=1) =&gt; { const func = function(x) { return addSubtract(x, i*(-1)) } func.valueOf = () =&gt; x; return func; } 
Ah that makes sense! Thanks!
I'm sorry but the only advantages of PWAs compared to Electron are less RAM usage and an easier installation? I don't understand the excitement for this.
Really? I mean I’m not a fan of these kinds of technical questions but I’d still answer it so I at least don’t look incompetent. The job isn’t necessarily bad at all just because it has this question in the interview 
Yeah this thread is full of people appalled at the fact that somebody was asked about currying when it’s something you should 100% know if you consider yourself good at JavaScript
The point is not to write the code, but to be able to solve the puzzle. It's also about the attitude you show when presented with the puzzle. 
This is beautiful. Are you available to hire?
So can JS in general, but also in the role of a server?
The question appears to be designed to test your knowledge of basic craft, and your approach to problem solving. Granted, it is quite a hard one though.
I think they were trying to find out if you understood the concept - like the Fizz Buzz test. A simple solution could look like this (below). ``` function addSubtract(one) { return (two) =&gt; { return (three) =&gt; { return one + two - three; } } } ``` I wouldn't sweat it too much, next time! 
Please check our /r/learnjavascript
I have and have had coworkers that would crush a test but don’t produce any code because they are horrifically lazy. Hiring someone who doesn’t know code at all or sucks at whiteboarding but has a good work ethic would be infinitely better.
You could be twice as efficient (half the clicks!) if you listed them out as links instead of using a select :D
but the function signature its not like they said.....but i got your point.
You’re not allowed the extra function call.
Maybe check out [https://ponyfoo.com/books/mastering-modular-javascript](Mastering Modular JavaScript) by Nicolas Bevacqua
Electron is a hack LOL
Templates inside js code are far away from being a stellar invention. We had this in the 90s and early 2000s already. It’s called spaghetti code.
literally `this`
Honestly, that does not sound like you take criticism well _at all_. You're already justifying and defending yourself -and even _warning_ me- and I haven't even said a single thing yet. I certainly do not have any vested interest in any "popularity contests" and I wasn't even thinking about comparing this to anything else. Seriously, reading this I'd rather not give you any feedback. In any case, good luck with your projects.
Inline scripts are a special case that needs to be allowed by your CORS policy. You'll need to add this: `script-src 'unsafe-inline';` Alternatively, a more secure approach is using script hashes to allow inline resources: https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity
The correct answer is, "Sure, but it wouldn't be a good idea from a clarity or maintainability perspective."
Yep... notice how I changed the flair to solved and linked to an article on accordions... I actually didn't know the term accordion was used in this scenario, so I couldn't know to google directly for that. I have almost solved the problem. I have the opening and closing of boxes, now I want it to work with boxes having different colours. 
I know not what else I have beyond the English. I do hope visitors read both our comments. For example, if you were already comparing and I saw, I would not have said compare. In any case, thank you for the wishes to the extent of your intent.
I would suggest that you run a spellchecker over your post. so sentences like &gt; If you wnat to load all modules after initail load then use PreloadAllModules as a PreloadingStrategy. wouldn't put your audience off. 
Oops! yup I'll do that now. Thanks 🙏🏼
This guy UXs.
The fact that there are caviats to the question to me makes it a poor question to ask. There are plenty of other questions that don't rely on obscure language features.
I could be missing your point, but using let and const instead of var is suggested for proper function scope/encapsulation.
I had an interview friday and they seemed thrilled that i understood fat arrow functions, knew 'this' was the function context, and i didnt hate JQuery. Goofball shit like OPs question would have killed me
I've had that as a pairing exercise - started a simple a+b then eventually changed to a, b, ...n - just as a "what if" on the original as a course to refractor. 
&gt; For asynchronous JavaScript most people use async.js Do they?
I wonder how may devs use old.reddit.com over the new UI..?
Unhelpful, and the query is more about front-end web-dev than it is about javascript specifically.
This isn’t just currying though. Read the question again. 
In JavaScript you're eventually –if not immediately– going to have to program under an async paradigm. To create well-organized maintainable code under this scheme I would suggest looking at functional programming concepts and techniques. This is a good place to start: https://mostly-adequate.gitbooks.io/mostly-adequate-guide/
Can we get a discount code? 
Bingo. So many people in this thread are flipping out and saying they'd walk out of the interview. You know what? GOOD. If you're so arrogant that a tough question makes you walk away, *we don't want you*. Do they really expect to go through a programming career without ever once running into a single tough problem that requires creativity and thought to solve? I mean, if they do, that's a good way to signal to upper management: I'm replaceable by cheap overseas labour. Good Christ. No wonder it's so hard to find good developers. 
&gt;Yeah this thread is full of people appalled at the fact that somebody was asked about currying do you consider yourself good at javascript? how would you solve this problem then? as soon as you apply a little bit of thought to this, you realize it's not a currying question and you understand why people are appalled at it.
The reply is: Thank you for proving that you have no interest in solving complex problems and thank you for telling us that you're not worth the salary we were going to pay you. We're glad you proved it to us upfront, rather than wasting months and thousands of dollars on your incurious and arrogant self. We wish you luck on the boring low-paying data entry job you eventually find which will end up being outsourced to Asia one day once they realise how truly incapable of complex thought you are. Good day.
I’d consider currying to be fairly obscure in JS. If you search the term on MDN you will get no results. “JavaScript currying” in Google’s top 5 results span from 2013 to 2018, one of which argues that it goes against the principals of JavaScript. I’ve been a professional JS dev for 6 years now and today is legitimately the first time I have heard the term. I had to Google real world examples of it in JS and could only find 2 I’m familiar with: Assigning context with `bind` and using `connect` with React and Redux. Both examples are pretty straight forward and not recursive, like this interview question wants. Perhaps currying just is much more common in other languages? I would have struggled to answer this question and ultimately would have relied on my go to interview answer of, “I’m not sure how to proceed so I would search MDN and StackOverflow to get a better understanding of how to approach the problem.”
heh i'd never want to work on a team that thought this kind of a solution to a problem was okay, and justified this kind of awful complexity by saying "it's a deep appreciation for craft." what an immature and short sighted attitude to take.
&gt; Tries to call bullshit &gt; “Please check the number and try again”
Interviews should test whether you can write good code, not whether you can write bad code or code that is not going to make it into production without being refactored to be something entirely different.
Are you trying to prove the parent comments point even more or did you intend to sound clever and experianced?
Old reddit is more compact. More info per page. 
That you or anyone could think that’s a realistic problem is hilarious. I’ve been in the industry for ages. This is all nonsense.
Wow he deliberately said no to that? That really makes the interview question crazy, there's no reason you ever want to ask for such an obscure solution just to satisfy that specific syntax. I could've sort of understood the question when they *wanted* you to bring up the additional call to the end as a way to distinguish between the two behaviors (adding another number, and returning the result). But even then it's a bit of an odd question.
This is one of those problems that's simple enough and silly enough that I would presume that it's not easily Googled. The function behavior is probably bad for teamwork, but the knowledge the question asks for is just basic JS syntax.
It's not insane to think that developers should be able to tackle a problem. I'm sorry you're so arrogant that you'd walk out of an interview when faced with a difficult question. I'm glad you would, though, because that tells me everything I need to know about you: You're not interested in challenges, and will submit sub-par work when you inevitably face one. I encourage you to continue this attitude. It saves me a ton of work when hiring. 
"Real world" questions require a ton of setup with little payoff. Many candidates are intimidated and put off by the setup because it may seem that we're asking for domain-specific knowledge when in fact we're judging fundamental problem solving. By distilling this into a "puzzle" as you call it, we cut to the chase: Here's a challenge, how do you approach it?
Hi /u/ReKLV, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/DankPotato_666, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/patrickono, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/thelynched, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/cryptomatthias, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/pseudonympholepsy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
React is *all about* encapsulation into "components" (basically functions, but sometimes classes). As others have said vanilla Javascript can be organized by module (or class, if you're into that sort of thing), but if you're looking form more encapsulation baked in as a philosophy I'd strongly recommend checking out React.
old subs use old css themes. less breaking changes. think flairs for sportsball, less garish default backgrounds in the old vs new.
ITT: People are real butthurt that they can't solve it, or that employers have the right to ask questions they can't solve. As someone said already, the point is to see how you handle a challenge, assess your attitude. Based on 99% of the replies here, and 99% of JS non-veteran coders, I wouldn't hire them either. Literally the worst.
Phew, dodged a bullet. Almost ended up working with THAT guy.
Haha that’s so disturbingly common. The interviewer doesn’t understand the problem and only wants you to solve it. Which means you don’t even get feedback on your solution. 
Oh good, can't wait to see what their codebase is like. Probably a bunch of unreadable chains. 
&gt; No wonder it's so hard to find good developers. Yeah it’s almost like they don’t want to work for a place that asks ridiculous interview questions with nonsensical limitations on them. Gosh!
I’ve been at this for well over a decade and I’ve probably used currying three times, maybe two. 
This really has nothing to do with JavaScript
Wow that book!!! Thanks for sharing.
It seems unnecessary to bring in a library (jQuery) just to attach an event handler.
is there a reason you chose not to use canvas?
His answer has the extra function call that OP said was strictly disallowed. 
For the 1000th time in this thread. The question is not about currying or functional programming paradigms. OP was not allowed to use a final method call. Meaning he has to figure out someway for the function to either return another function, or resolve to a value depending on its position in the curry chain. It’s a bullshit question. 
I think I would have asked if the input could be an array of numbers instead, which makes the problem significantly easier. They may have wanted you to suggest alternatives so that currying is unnecessary. In that case, iterate over the list and flip the sign of ever odd number. Then just sum them. 
Check out my new library: jAddition. It takes two jQuery objects containing a number in the number property, adds them together, and returns a jQuery object with the sum in its number property.
I think if you allow a final `()` to get the value then this question tests just javascript programming prowess without any odd hacks. Here's my solution (which looking around is the same as others, but a little more readable imo. Y'all need to stop trying to minify your code manually. Remember, humans have to read and understand it and you can minify with tooling for the machines) ``` function addSubtract(initial = 0) { let value = initial; let shouldAdd = true; return function nextOperation(num) { if (num === undefined) { return value; } value += shouldAdd ? num : -num; shouldAdd = !shouldAdd; return nextOperation; } } ``` So if I were to ask this question in an interview, I'd start here, allowing the additional `()` to get the value. Then, once they got that, I'd ask them if there would be any way (even a super hacky way) to drop the final `()`. This would not be held against them for not knowing, but if they did know this it would signal deeper JS knowledge.
I just tried to project an idea, If you don't want to include jQuery then use native methods to achieve that part.
I'm jConfused! 😥
Woah I wish I could do that in vanilla javascript.
I don't, I just opted out of the redesign.
Common man. You know what I mean. You use html and JavaScript in jsx. It’s not a template but it’s certainly used like one. I see so many people are so satisfied with ending all debate saying it’s not html! It’s not a templating language! 
It’s not even “complicated”, it’s just a different pattern- one I haven’t seen in any environment I’ve worked in for the last 5 years. There is always multiple ways of solving the same problem - the “best” way is to use the most clear, concise, and least subject to errors or bugs method of solving the problem... not just to you now: to you in the future, to your team, and to your team in the future. I remember reading that some libraries use currying in the back end (I think jquery does), but I wouldn’t want to write functions like in op. Some environments might use currying a lot, but god that sounds annoying.
Actually, all major browsers support them already, natively! Modules + import/export. &lt;script type="module" src="your-module.js"&gt;
W3 schools is a good resource to get started
I’m not a mathematician. I know how to solve problems and move data around, I don’t want to do calculus in my code lol.
Thanks for the article. How about you explain more about why we would want to do what you are doing. Not everyone is facing that problem, so some context would be helpful 
Because it's pure bloat. It's old. It has become a "one size fits all" project, like WordPress, jquery, BootStrap and many others. They we're amazing at the time, but the world has moved on. If you are a careless developer, sure go ahead, you probably already use all the other services I mentioned above. When you want a lean codebase, don't even dare to add moment.js &amp;#x200B;
There is no excuse for relying on jQuery for new projects nowadays. If you’re supporting a legacy codebase and have no choice, you have my pity. Anyone else should not be using that bloated library. 
For the people saying, "this is a terrible question," and would "walk out..." It could be that the interviewer is trying to gain insight into the thinking process of the applicant, i.e. How do they handle tough problems? If I asked this question, I wouldn't fail anyone that couldn't answer the question. I'd learn a bit about their thinking process. Do they immediately throw up their hands and give up? Would they be inquisitive and say, "hmm, you'd have to return something that is a number and is invokable as a function, which can't be done..." Or do they have _incredible_ knowledge and a curiosity like /u/CharlesStover ? If an applicant was willing to sit and think about it for a minute or two, I'd be much more confident that they'd sit and think critically about the code their writing, without always blindly sticking to what they already know and understand.
What's the advantage of currying?
I do
Hi /u/yossid11, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Why would you store the prefix and suffix directly in the html? If all you're doing is retrieving them to be used, store them as strings in JS
Wrong kind
This is extremely vague. What are the actual requirements?
\`Array.splice()\` ? [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/splice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)
It's just stupid in a stressful interview situation. You will weed out people that can't perform well in such a situation. As that kind of stress has nothing to do your actual work day, you may send home lots of great candidates. 
If I got past your phone interview when you intended to ask this question, then you're even more retarded than I thought
For communication between tabs.
 I was asked not to use canvas.
Hey! A UX discussion in r/javascript. So let's discuss. At a certain point that many options becomes unusable because: * if you're on your phone (or theoretically any device, depending on the amount of subs) you will run out of real estate. * According to Miller's Law, the average person can only keep track of 7 or so items at once. The longer the list, the less likely the user is to be able to remember what's even in the list. * According to Hick's Law, the more items available, the more time it takes to choose. Therefor as the list grows, the harder it is to use. The first of my bullets is mostly a UI concern, but as we know, UI informs UX greatly (it's the point of the thread). But, that, in combination with the other two UX laws mentioned, suggest the the select list is a better option because it contextualizes the users' actions. It does so by saying "while you're on this page, all you have to focus on this page but if you'd like to change context (change sub) you can divert 100% of your attention to this new list." Now you could say, but the select list will still have more items than Miller's Law allows for. True, it's still not the best UX here. Better would be to form that data in objects so they can be pre-filtered like programming subs, humor subs, blah subs. Parent groups could be selected or children could be single selected. Or, a typeahead of some sort in combo with pre-filtered subs. In other words, less clicks is not always the better UX. For example, "are you feeling lucky" is a single click action for google, but that doesn't improve really anything about what you're using google for. This is why good UX results in more complicated code and planning. We have to take many things into account, whether it's one click or two, if there's still analysis paralysis you'll still have a bad experience. Or, whether it's one click or more, if you can't see your content and options all in one view, it's a bad ux (and bad ui). Long story short, we have to reduce complexity before the user ever encounters it and that means more complicated code and thinking (and that's probably why you fight with your UX people).
While JavaScript doesn't have classes, you can use functions as pseudo-classes to group specific functions together. If you do it like this: myModule = function() { this.somePublicFunction = function() { } function somePrivateFunction() { } } myModule.somePublicFunction() //will call somePublicFunction myModule.somePrivateFunction() //will throw an error, because somePrivateFunction is not a member of myModule, even though it is defined inside it &amp;#x200B;
I personally use it because it's convenient in many cases, the library is light, and it has close to zero performance issues (in some benchmarks, it actually improved performance) compared to using vanilla only. For example, I highly prefer the jQuery fetch ($.ajax) to that meh fetch API Mozilla introduced.
Oh my, the 85KB of data. How am I going to live with myself when my webpage eats up so much bandwidth?!
It definitely does, as the industry evolves constantly.
It's not really for adding/subtracting numbers like this. The idea is to use a function to return a function -- create a dynamic function that is used to modify something later on. Redux uses this with its `connect` HOC.
I run the code and it says “cannot fine method getRange((class),(class))”
Ahh right, so you wouldn't use it as a replacement for arguments 
You mean overall ide? I am webstorm guy, so my vote for ws
you can do that??
Thanks for sharing your experience &amp;#x200B;
Can't screenshot it but yeah there's a dropdown on the top right.
I just dropped the price to $19. [https://niceverynice.com/little-widgets/](https://niceverynice.com/little-widgets/)
just found in https://old.reddit.com/prefs, ctrl+f for "redesign"
I think you're right. I just dropped the price to $19. Thank you. [https://niceverynice.com/little-widgets/](https://niceverynice.com/little-widgets/)
&gt; You want me to work on my free time? Pay me Yeah. You want me to come in for an in-person interview? Pay me! 
i use webpack. i forgot to mention that in the question. thank you.
Modern JS rutnimes are not interpreters. Do you know how they work? With on-the-fly profiling and compilation?
Huh? Sure I have, and have written a few as well. What part about limits of liability do you think I don’t understand?
It does have a slightly lower density (17 vs 22 including headers, 21 vs 24 when on the page) but the infinite page load more than makes up for it.
Id say visual studio code. 
VS Code.
VS Code, Atom in second place
You're going to get a lot of different answers here because there's no defacto "best" editor. It depends if you want something lightweight, like Sublime Text, or a fully fledged IDE like Webstorm, or VS Code. Personally, I really enjoy using Sublime Text.
You can't, really. You can use curryN, but you still have to provide the function arity up front, which essentially makes it non variadic. Basically, currying doesn't work unless it knows where to stop. Otherwise it can't know when you intend to be done. You could try converting functions with variadic inputs into accepting a list instead. 
I meant the best by opinion. I have a very little experience with javascript and i want the editor that when you use it you say "wow".
Visual Studio Code is the best JavaScript text editor. Webstorm is worth mentioning, but that's an IDE and also not free.
Human beings themselves.
What if there will be an ai that knows javascript?
That 85k can add seconds of parse time on mobiles.
^ this guy does
We used Netbeans in school, got to love the built-in PHP web server.
You are aware that the QML JS engine is basically like 4 or 5 years out of date, at best? 
Making a alarm clock using JavaScript one that can play a sound. Hmm sorry 
So I have a clock but now trying to add the alarm part. It’s digital
You're a dick. If you don't want to use it don't. There's no reason to shit on it. I met your own mother hates you.
I'm on the vscode band wagon. Start time smashes atom. Plugin system is easy. Never had a crash. 
This is another topic altogether but i want to say that react has "too much choice ecosystem" which i hate! but i can't say wrong.
I wouldn't walk out or not attempt to solve the problem but I would think the person who came up with that question is trying to show off more than testing for JS proficiency. Also, overwriting `valueOf` is only a partial solution. Triple equality checks, `instanceof`, `typeof`, and `Number.prototype` methods won't work as expected on the returned value.
I agree. I've been working in function patterns for a while now and have found myself encapsulating as much as I can in separate functions. I'm finding this definitely enhances the flexibility of my code, decoupling everything, but now I have tons of encapsulated functions and it's not always clear where the best place to put everything is. I recently started encapsulating conditionals as functions and am finding lots of repeating. I could abstract these to a conditionals file but I feel like that could potentially hurt readibility. I love js. So many options for how to make things. I'll be checking out everything posted here for sure.
Every article on code interview questions are bullshit, so yeah, in that sense we still need one.
Javascript has had classes for a while now
thanks for response. First i was attacked for not having experience. Then i give clear examples of experience and I get told that everything i made was probably trash without even seeing it. The fact of the matter is you are trying to use experience to thwart the debate. Even though i have 15 years of development under my belt, sometimes the best of questions come from people with fresh eyes and see things with little biased. You make personal preferences out to be things done with out reason. Everything can be considered a personal choice, but the question is why is it personal choice? If you understand the upsides and downsides of choice then its an informed choice. We are simply trying to understand the ups and downs to informed choice. Clearly its a proven technology , in fact they all are, its going to work, its just what are the ups and downs. If no downside risk it presented, that suggests that technology is perfect. Nothing is. The choices to me are much more about the give and takes to situations rather than absolutes. This is no exception. &amp;#x200B; I'll check your rebuttal perhaps there is more there. &gt;In short, separating code which which has to be directly coupled (within component context) to just later to pollute declarative style with imperative pieces of code to couple everything back up to operational state is not a 'good practice'. What this describes seems very possible in JSX too, but across the board just poor implementation no matter what implementation. &amp;#x200B; I mean you definitely are able to have separations of concerns in JSX. If you didnt there would be a major problem. Having an onClick to function defined in the component is separation of concerns. Its just that often because its JS, and its familiar , The undisciplined (which there are many , especially when it comes to deadlines) will start writing copious amounts of JS right in render . It may start with a small inline function. Then you add another line or a variable, then another. This will work and there is nothing stopping it. This is clearly a bad practice. &amp;#x200B;
Does it matter? Is it a bottleneck somewhere in your app? If not, I don’t think it should be something you need to measure. Is it easier for your app to put it in css or JavaScript? If it’s css do that. If it’s JavaScript do that. To just answer the question though my off the cuff guess would be css. 
Or you can just favorite them in the redesign: [https://i.imgur.com/hsZEmHY.png](https://i.imgur.com/hsZEmHY.png)
This looks very similar to [reactn](https://medium.com/@Charles_Stover/replacing-redux-with-reactn-to-reduce-complexity-and-bundle-size-aa7009cd1209) Could you share your thoughts about what could be the differences? Thanks a lot! This is a very nice article! 😄
I don't. I've fully embraced the redesign for consuming content. New reddit makes it a lot easier to browse posts, comments, and quickly go between my favorite subs. That being said, modding is still a bit of a pain so I use old reddit for that.
6 months ago I'd join those who suggest VS Code. But I switched to vim around that time and now simply can't go back to VS Code even using vim key bindings. I enabled VS code color scheme because I really like it as well as bunch of plugins and now really enjoy it, learning something new every day. So VS Code if you're not familiar with vim or don't have time to learn it otherwise go ahead with vim.
The point of this short article is to demonstrate a concept regarding local storage. Who cares if it's implemented with jQuery?
The difference is in the asymmetrical amount of effort. The company is already spending money on an in person interview
async functions just make a set of calls to asynchronous functions synchronous. If you need to make a bunch of I/O calls to continue a task, using async is, in effect, going backwards. You will wait for each to complete before moving to the next rather that running them all at once. You're holding up the main thread. Using promises to do the same results in a lot more code (and memory usage). If you disagree, rewrite the above sample using Promises or async or whatever. lets see how readable and efficient your code is.
Adding thousands of lines of code to save a few characters means you're a bad developer.
CSS is the better option so long as you've not got some stupidly OTT selector. But why do you ask?
TIL you can listen to localstorage. Thanks!
Not understanding how caching and OOP works, and implying including the jQuery CDN adds thousands lines of code (or slows loading noticeably after first load) - means you're a bad developer. Then again, I wouldn't expect much more on /r/javascript.
On the first time ever the client loads the jQuery CDN.
jEdit.
Redux is NOT tied to react in any way.
Open jQuery’s source code sometime and count the lines of code. Then try to make a valid argument why you should use jQuery instead of vanilla JS in 2018. 
And it comes with lots of bugs/purposeful limitations and generally is horrible. :(
No.. but `react-redux` is.
That's a disingenuous comparison, you give the new reddit much more horizontal space, while the old reddit -- with less horizontal space -- ends up stacking elements that it normally doesn't. Here's an apples-to-apples comparison on my 1680x1050* display, logged out, no addons: https://i.imgur.com/4sKMJeJ.png Old reddit: 12 posts New reddit: 9.5ish posts \* minus 30px due to Windows taskbar 
You don't think it has valuable information?
Because every line of code is automatically executed the moment it is included, right? Tell me, do you happen to be a bootcamp grad, or a "self-taught dev"?
i think it's just so you can more easily add future variables, just a good practice
Isn't that content security policy not cors?
How do you reconcile what you just described, which seems to be guidance for users being introduced to an app (or workflow) for the first time, vs. users who'll be using the same interface over hundreds, if not thousands, of iterations? In other words, I could see grouping being useful for new users but being an annoyance to experienced users. Personally, I think the higher learning curve of the long list would take me a little longer to internalize, but I think I'd be more effective with it over the long run. It just seems to me that with all the changes reddit has been making, they're heavily optimizing for new users.
Hi /u/idan13, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/throrawayquestions23, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/smell_of_onions, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/AshishKhuraishy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Or you can have the best of both worlds, css in js! :D \`\`\` '.foo': { 'text-transform': 'uppercase' } \`\`\`
Agreed. Just because the author doesn't know something doesn't mean everyone doesn't know it. To me these titles just make me want to say "cool" and move on. I only clicked on this one because I hadn't heard the term JavaScript indexing.
I started this week building a port-checker for node.js (https://github.com/imlinus/Portr) Ended it with a 24-hour hackathon
Turn it off. When I started using linting, I turned off some of the more annoying rules, for example with TSLint by default you must have sorted members in objects/classes, I just wholly disagree with this approach so I turn off the rule
Oh wow you're retarded! So you think no matter how long the original source code is, when it's minified it's only a few lines of code? It's no wonder you aren't gainfully employed as a software engineer.
&gt;I highly prefer the jQuery fetch ($.ajax) to that meh fetch API Mozilla introduced. Ah so you know nothing about consuming the main thread with network requests then? Fetch API is superior to jQuery's ajax in every possible way.
Rofl, that went way over your head, didn't it. Judging by your lack of response (and evey other post, really), I suppose "bootcamp grad" was on point. And of course it's no wonder when I'm not looking for a job, on account of making more freelance per hour than any job in my area. But of course, you wouldn't understand that - making money from freelance requires you to actually be good, after all.
I should probably try React before making these kinds of comments.
Cleaner code. It's less clutter. It makes it clear you are only using that part of an object. Setting defaults. Generally I don't like them but when working on a large team its helpful
Maybe to encourage avoiding non-obvious globals? E.g. 'document' vs. 'window.document'. Destructuring allows you to see the 'source' object, I guess. More likely it's so that you can easily destructure additional properties in the future, like Shadaez said. Think of the good practice of avoiding curly-brace-less ifs - one reason to avoid those is because you'll likely add additional statements later on.
jQuery unminified has 10,364 lines of code. You don't count lines of code after minification, you muppet. You're a "freelancer" who "prefers" jQuery. Which means you're unemployable because your skill set is quite dated. So you probably spend most of your time building WordPress sites using Bootstrap and jQuery. Am I right? I'm right. I'm a senior front end engineer for a world class ecommerce company that does half a million dollars of revenue a day. I'm currently the most senior engineer aside from the architect. One of the primary reasons I was hired was to guide the team into modern front end technology. To replace jQuery, among other things. I'm evangelically anti-jQuery. The library served a purpose a decade ago. Nowadays there is *no* reason to use it. It has no purpose other than to add bloat and dependency hell. It's incompatible with modern JS frameworks.
I've applied destructuring variables to some old components in my code and it looks a lot cleaner. It's overkill for a single variable, but on the other hand, makes it super easy to add more variables as your component grows. Destructuring at the top of your lifecycle functions makes it easier to refactor/rename in the future.
Does Edge expose any install prompt, though? Last I checked it installation was only enabled through either the store or on mobile.
1. As the senior-most engineer in the company beside the architect, the web application's success rides on my performance. It's measurable. Adding bloat to the client hits the bottom line in a noticeable way. If you were ever employed as a software engineer, especially in a role of any importance, you'd understand what I mean. 2. jQuery doesn't do anything that vanilla JS can't do in much MUCH fewer lines of code. There is no reason to use it. Literally no advantage to using jQuery anymore, and there hasn't been for several years. 3. jQuery adds unnecessary bloat. It doesn't matter that it can be cached. Why bother? When it comes to high volume software, you don't want any unnecessary code. All of the code is parsed and compiled when it is requested by the browser, even if it isn't executed immediately. 4. What do you think that network snapshot has to do with dependencies? Do you know what a dependency is in software? It's a piece of software that your code depends on to run. To properly maintain a modern code base, you must strictly manage dependency relationships. Otherwise you're fucked for scaling. jQuery doesn't have any concept of dependency relationships. It registers everything to a global object. jQuery plugins are all added to the same global object in the global scope. If you build software with any meaningful complexity and use a lot of jQuery, you have no way of knowing what depends on what. It's a nightmare to refactor and modernize. Trust me, I'm doing it right now. 5. jQuery performs expensive DOM updates and it is incompatible with a shadow DOM. [It is NOT compatible with React](https://medium.com/@wisecobbler/if-you-think-you-need-jquery-in-your-react-app-you-re-doing-it-wrong-77899ed7217e). It may be compatible with Vue, I wouldn't know. That's one framework I have no experience with ([looks like it isn't compatible with Vue for the same reasons as React](https://vuejsdevelopers.com/2017/05/20/vue-js-safely-jquery-plugin/)). But it's still obsolete, so there's still no reason to use it. Trust me, dude. You are clinging to an outdated, obsolete library that relies on anti-patterns to get the job done. You should ditch it and learn a modern framework, or hell, just use vanilla JS. Nothing you write in jQuery can't be done more easily in vanilla. Plus, if you ever want an actual job in software, you won't get hired with a portfolio full of jQuery. I've worked for a couple major software companies and applicants who list jQuery on their resume actually get lower priority than others. It's a red flag to employers who don't want to have to retrain you on how to build software.
I love reactN. I was pretty excited about hooks, but now having used hooks and reactN for the last week or so I’m stoked! 
There's some contexts where I can't ever imagine wanting more variables, for example in a title, or in logic e.g. if (this.state.isLoading). I understand sometimes (often) it's useful and I use it when I can and feel it makes sense, but in some cases like these, the *always* part seems to make things more cumbersome and I'm not gleaning the value. 🤔
&gt; I'm a senior front end engineer for a world class ecommerce company that does half a million dollars of revenue a day. I'm currently the most senior engineer aside from the architect. Could you embellish a little bit more here? It's almost copypasta worthy but it just needs a liiiittle bit more.
I've linked some good resources that should cover the basics. A lot of them will use `document.querySelector()`, which uses the same selection notation as JQuery. I do want to point out that querySelector for an ID will always be slower than selecting the element with `document.getElementById()`, however most of the time that doesn't matter. Only in high performance tools where element selection happens a lot does that really matter. https://www.digitalocean.com/community/tutorials/how-to-modify-attributes-classes-and-styles-in-the-dom https://www.digitalocean.com/community/tutorials/introduction-to-the-dom https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents https://javascript.info/dom-nodes https://javascript.info/modifying-document https://www.kirupa.com/html5/modifying_dom_elements.htm
Redux is the most popular state management solution for React. Its not the best nor exclusive to just react, but saying redux is 'NOT' tied to react in any way is... well... just not the case
So? Upgrading that isn't such a big deal. The important bit is that HTML+CSS get replaced with QML, which is a million times better suited for application interfaces.
Better scope it right!
You can: const curry = fn =&gt; (...args) =&gt; { if (args.length &lt; fn.length) { return (...restArgs) =&gt; curry(fn)(...args, ...restArgs); } return fn.apply(this, args); }; Function.length is the arity of a function - see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length
Honestly, I don't want to laugh at this, cause this is a detailed comment, but I can't help it in regards to one specific point: &gt;Plus, if you ever want an actual job in software, you won't get hired with a portfolio full of jQuery [And many other stuff regarding jQuery and employment] I just can't help but laugh at this. Not because this isn't true, mind you. I would honestly disregard any developer who bases his portfolio on jQuery, or even vanillaJS. There are impressive things that can be done on the front-end, but I am yet to see a portfolio with such things that aren't based on a framework like Vue/React/Angular. Writing anything impressive on the front-end alone is incredibly hard without a framework. I don't do pure front end works usually though, cause there is really no money in it. The better clients I had (*still have in the case of some) have hired me for full system projects - and had you ever designed and tried to build and maintain a full system, you'd understand just how negligible loading this tiny library is. And probably understand how vastly underplayed most people in big companies are, as the c-level execs and top salespeople get a share far bigger than they deserve - the most amusing thing is that even though you say your input is measurable, I'd bet not once have you enjoyed a bonus worth even a 10th of that saved revenue. &gt;jQuery performs expensive DOM updates and it is incompatible with a shadow DOM. It is NOT compatible with React. It may be compatible with Vue, I wouldn't know. That's one framework I have no experience with (looks like it isn't compatible with Vue for the same reasons as React). But it's still obsolete, so there's still no reason to use it. You seem to have missed the point - of course if you use jQuery to manipulate elements created using (and tied to) a virtual DOM, you're gonna have a bad time. Play stupid games, win stupid prizes. jQuery has a lot of functionality, and if you don't write shit code that tries to shoehorn it into every line, much of it is perfectly compatible with anything you want. The easiest example is the $.ajax module. I am yet to see it fail just because it is used inside a framework. Another example is the [bootstrap tooltip](https://getbootstrap.com/docs/4.1/components/tooltips/), It is initiated using $(&lt;whatever&gt;).tooltip(). Many places suggest putting $(document).ready(function(){ $('[data-toggle="tooltip"]').tooltip();}); somewhere and forgetting about it. Now, try to use it with Vue components, and it fails. So, somebody like you will scream "aha! it's incompatible with Vue! What a horrible library!". And yet, somebody with actual knowledge of [Vue's lifecycle](https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram) will understand that the proper place to put $(&lt;whatever&gt;).tooltip() is actually inside the 'mounted' object inside the component which has the tooltips. Look at this magic, suddenly it does work. And you have a nice tooltips on that form in a back-office application, without working more than 2 minutes (being generous) to implement it. 
Yes they do. Separation of concern applies. Obviously. However, how we separate, or what we separate shifted. It's not the syntax which we separate, but domains. Especially in frontend. Hence "you should not mix your css with your js" doesn't hold much truth by itself. You must explain how mixing syntax is 'tainting' it. I've already explained my point of view. It allows for declarative style as well as it cuts needless buffer code, which adds nothing, decouples nothing, makes code harder to reason about and work with. And it doesn't help reading, because you have to connect the dots. However, reading through the example you are providing.. um. No-one does that. It doesn't make sense. How would you return statements? You can only return an expression. You would really need to go out of your way to make that kind of messy code work to begin with. Perhaps I was too quick to react to your concerns. You referring to rather crazy examples. I though you're generally stating that any syntax mixing is 'bad practice'. Which it isn't. 
This will make your code unmaintainable. Never do this. Bad. &amp;#x200B; For a more serious answer, Node will almost certainly change its internal APIs, and add new features and properties to all of them, in the future. These new things may break your code by conflicting with names you have chosen, or they may render your code obsolete. Also, doing this can be confusing to developers as they struggle to remember which properties or methods are form your library and which are native to Node. &amp;#x200B; You can make a very friendly interface by instead wrapping the node apis in your own and presenting your own. 
Learning this type of thing doesn't seem like it would be pretty of onboarding. Seems like free time learning to me (at least it was in my case).
I'm glad you love it. If you have any feedback, don't hesitate to post it to the GitHub Issues. I want to make sure it hits as many use cases as possible. :)
Thats what I don't like about my solution. Any idea how I could potentially solve this?
I'm on a 4k but 200% DPI so my display output should exactly match yours. Shouldn't matter though as the posts are all a fixed height, maybe one of us knows a density trick the other doesn't :). https://i.imgur.com/bXgAGK4.png https://i.imgur.com/gyrgFNY.jpg 
I run it with warnings. I think it's definitely useful if you have multiple assignments, but I can still skip it if I need to.
I agree that QML is better than HTML for user interfaces, I'd rather see QML adopted by browsers, than go back to the weird QML Javascript implementation. They've been rather resistant to implementing new features or absorbing V8... so.. I don't see much happening there in the future, either. Also, Qt's licensing is driving people away from it. 
Yeah. That was my mistake. When I did the side by side comparison, I didn't realize that Reddit had opened the new sidebar. That forced the posts with long title to grow larger vertically and it take up more room. Counting in fullscreen showed similar results as you.
CSS. It's CSS. Going with my gut on this one.
Here's a `valueOf` solution that uses a tiny internal state machine. I felt my soul leaving my body when I wrote it. var addSubtract = (function () { var operators = { addition: function (x, y) { return x + y; }, subtraction: function (x, y) { return x - y; } }; return function input(x) { var stateMachine = { currentState: 'addition', states: { addition: { transitions: { toggle: 'subtraction' } }, subtraction: { transitions: { toggle: 'addition' } } } }; function toggle() { var states = stateMachine.states; var currentState = stateMachine.currentState; stateMachine.currentState = states[currentState].transitions['toggle']; } function operate(x, y) { var result = operators[stateMachine.currentState](x, y); toggle(); return result; } var accumulator = x; function output(y) { accumulator = operate(accumulator, y); return output; }; output.valueOf = function () { return accumulator; }; output.toString = function () { return String(output.valueOf()); }; return output; }; })(); &amp;#x200B;
I felt like the original solution wasn't over-engineered enough.
I really like it simply for the fact of if someone dumb comes along and changes things and switches an order of the variables it doesn't matter at all and that I can set defaults on the incoming method if someone didn't pass it in.
yeah OP work on your marketing strategy. lol
Yeah - I love destructuring, but it's definitely not something you'd do *all* the time; my general rule tends to be that if I need more than one variable from one object, if I want to indicate all of the items that an object should contain (ie. React props, an options object, etc), or if I want to give a bunch of grouped variables some defaults - then I'll destructure it. Anybody who says *always do XYZ* is likely misinterpreting the usefulness of part of the language; also see arrow functions, haha.
I wonder if it could be so that tree shaking works better. Basically so that the “compiler” (like webpack) knows what code it can exclude. 
We use it various web component libraries, other use it with Vue etc. IMO saying it is not tied to react is factually correct.
if you only count users on evergreen browsers, yes caniuse says practical support is currently about 80%, which is far too low for my preferences, given that the fix is just installing rollup
:)
You just said exactly what I was thinking but more eloquently and in more detail. To add to your point 1., the select menu would also have to scroll on a mobile so there's no escaping that.
So every usage of the variable doesn't require a long chain of object keys. More important if you use it more than once. Also if you are going to assign a default you can do it earlier and at the top of the function if its undefined. 
I always destructure this.props and this.state, and almost everything for that matter. &amp;#x200B; It looks cleaner and it's less code repetition. repeating this.state every time you call your variable is repeating. &amp;#x200B; But also I use standardjs linter, which doesn't have that rule. The only time I don't destructure is when the object itself helps with the name. For example, database.getProfile('john'). The "database" actually helps readability, whereas "this.state" rarely does.
A zip bomb, also known as a zip of death or decompression bomb, is a malicious archive file designed to crash or render useless the program or system reading it. It is often employed to disable antivirus software, in order to create an opening for more traditional viruses.
JavaScript is parsed each time the file is loaded.
Bad bot.
Are you sure about that? Because I am 98.1255% sure that FunCicada is not a bot. --- ^(I am a neural network being trained to detect spammers | Summon me with !isbot &lt;username&gt; |) ^(/r/spambotdetector |) [^(Optout)](https://www.reddit.com/message/compose?to=whynotcollegeboard&amp;subject=!optout&amp;message=!optout) ^(|) [^(Original Github)](https://github.com/SM-Wistful/BotDetection-Algorithm)
I'm &gt;98.1255% certain you're wrong. Bad bot.
Once again you show your ignorance. jQuery’s Ajax ties up the main thread. Fetch API does not. That’s a perfect example of jQuery’s stated inferiority. The article mentions that you shouldn’t use jQuery with Vue because Vue will blow away your DOM manipulation. Same goes for most front end frameworks. jQuery is obsolete. It’s the old method of front end. You are a dinosaur if you still utilize it. Especially in greenfield projects. You are shooting your self in the foot. I get paid six figures for my contributions with very healthy bonuses. I’m doing just fine, thanks :) I can tutor you if you want to get to my level. I’ve tutored quite a few junior developers in my time. 
Because when trying to teach, unstated assumptions involving third parties is bad. 
LMAO you are so pathetic 
&gt;Why Ember never got to where Vue is today? A first reason is they are too different to intend to do the same job. A second reason is, EmberJS is not sexy! Look at the [website](https://www.emberjs.com/). &amp;#x200B; It's tough to compare two technologies so differents which accomplish both a great job for different purposes. &amp;#x200B; EmberJS has been, and is still, the **hidden** competitor working in the dark that both Angular and React have based parts of their architecture on: * EmberJS brought the Data Down Action Up pattern to React * EmberJS brought the to Angular its [CLI](https://github.com/angular/angular-cli/issues/3894) &amp;#x200B; VueJS compare to [GlimmerJS](https://glimmerjs.com) \- the View layer that EmberJS is based upon - sounds quite interesting! Despite his popularity, GlimmerJS has the best performance of all the current rendering engines landscape (comparing real-world DOM application). &amp;#x200B; The point is, why use EmberJS if you only need a rendering engine for some components aside your server-side rendering application? Then, ReactJS and VueJS bring great solutions. However, what the point to develop a Single Page Application with React or VueJS while you need a router and state manager. Both of those **libraries** need complementary libraries to level your SPA up. In an enterprise perspective, each dependency brings a maintenance risk/cost. &amp;#x200B; Just a word on Ember, React and Angular I started developing SPAs with EmberJS, and for sure the **learning curve is a thing**. I felt lost within the convention and all the different ways to accomplish a single thing. Nevertheless, I worked from the version 1.13 to version the 3 and, **every upgrade has been smooth and painless**. As a first experience on an SPA framework, I only realized how good is EmberJS when I started dealing with React and Angular2+ applications.
Does classes have proper encapsulation?
I think jQuery ui might be something you'd want to look into, in particular the Draggable/Droppable interactions. https://jqueryui.com/draggable/ For drawing the connections/making those connections 'mean' someting, jCanvas might be the way to go? https://projects.calebevans.me/jcanvas/
What do you like more? const foo = this.context.foo; const bar = this.context.bar; const baz = this.context.baz; Or: const { foo, bar, baz } = this.context
Take a look at [socket.io](https://socket.io/) if you need a way to communicate with a server. (Sorta wants you to work on a node server)
Sorry I didn't specify too well, so I just want some links of a tutorials or a guide for it or advice from you guys
ohhh snap, yeah that is a bit of a strange question then. i stand corrected. 
Assigning to a local variable (doesn't have to be via be destructuring) prevents having to do a repeated property lookup. Property lookups can be "slow" for objects like `this.props` or `this.state`, although I think this most likely won't matter, in practice, for most code.
canvas
d3.js is a good place to start for SVG graphs.
D3 could also be a good choice. It's a very powerful UI toolkit. Other than that perhaps just use raw canvas API. Is the circuit diagram based on a grid system? 
[JointJS](https://www.jointjs.com/)
Or simply use Firebase to store and observe users answers
You're probably looking for an array, but honestly what you should be looking for is a beginner's javascript tutorial. You're going to have a hell of a time making anything without learning the language first. Good luck.
You can use an array for this. Googling it would give you the most helpful information regarding arrays.
let greetings = [ "Hi", "Hello" ] console.log(greetings[0]) // "Hi"
thanks a lot! I'll look into it
Thanks a ton!
I'll look into arrays then, thank you!
damn, i could have come up with this solution on my own (i know currying and recursion) but i have been a java developer for 20 years, so when i looked at the code i just said “nope, the return value is an integer, you cannot call it as a function” :(
[removed]
I agree with the others pointing you at Canvas, but they're not really answering your question about which UI framework to use. If you're looking to build with components, React is probably the right place for you to end up. React is a great way to abstract both stateful and presentational UI elements. What's even greater is that React has some neato libraries that allow you to render beyond the DOM. Check out https://konvajs.github.io/docs/react/ - this library is a 2D canvas-rendering engine that greatly simplifies working with a GPU-accelerated canvas in javascript, but allows you to compose your renderings with React components. 
You may want to try calling `$form.get(0)` as the first parameter to `Stripe.bankAccount.createToken`. [https://api.jquery.com/category/miscellaneous/dom-element-methods/](https://api.jquery.com/category/miscellaneous/dom-element-methods/)
Then You're fired!
I agree it’s important
Obviously prefer the former. I understand the benefit of destructuring. I don't understand the benefit of *always* destructuring. For example in the case where there will ever only be one variable used.
okay so I've figured out basically how an array works, one question though how would I make an if statement checks if a line of text has any of the values stored in an array, not just one of them
Definitely configure ESLint to your own preferences. ESLint's standard config is just someone's opinion about format. 
[There is a short youtube video](https://www.youtube.com/watch?v=X9BJQizLXKg) where you can see how both versions (mine and aa) behave. [There is source code](https://github.com/viktor-ku/afterall-garbage). 1. It's running as fast (I set all 4 tasks timeouts to 1 second) in both scripts it takes 3 seconds. 2. My script has no dependencies 3. My script has much more flexibility in terms of error handling and resource passing in and out 4. My script has much more testing potential (how should I test aa thing anyway?)
Start by looking at [for-loops](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for). They're a stable of many programming languages. Alternatively, you could use the [some-function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) that is available for arrays, but that requires understanding of passing around functions. To check if a string (the message) contains a specific value, you can use the [includes-function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) of strings.
Use a for loop with a nested if statement. Go to freecodecamp.org and start with the JavaScripts basics.
You should really start out with a tutorial or something.
If you’re looking for suggestions, step 1 would be give the URL of the website 
For even more compactness, and using the same style across all of reddit just append .compact to the end of the url. E.g: https://www.reddit.com/r/javascript/comments/9w3hg2/waste_time_on_reddit_more_efficiently_with/.compact Or https://www.reddit.com/r/javascript.compact Been using this quite some time now, it's just nice and easy on the eyes.
[removed]
[What year is it?!](https://media.giphy.com/media/xT9DPHKbMA78EA0XGE/giphy.gif)
(I'm having trouble sleeping, I'm awake and saw this post, I'm re-reading it and trying to find value in it but it obviously came out as stream of consciousness, hopefully it conveys something and if you need clarification I'm happy to fill it in) I've written like .... 5 or so failed circuit simulator GUI's ... (not the simulators themselves, just the drag / drop interface) Failed due to various considerations, and sometimes I got busy and the old code was "crufty" &lt;3 ... ( attic code can rot in the strangest of ways... am I right? ;) ) I've used various combinations of Jquery/React/Redux/Canvas/SVG. Lessons learned/Things I've struggled with, no particular order: Canvas "is great in theory" I'd like to like canvas. No really. But I find that with things like react floating around and no good "react-canvas" that works like "react-dom" to render to a canvas, it's not always fun to write for it. I'd love to have component's I can create that render correctly to the canvas (like this example I wrote a week or so ago: https://codesandbox.io/s/9yl0px1rpp ) but that example feels cheaty! It doesn't feel "reacty" and "correct" and "not-going-to-break-in-the-future" ( Honestly I'd love a generic react-&lt;object&gt; rendering/updating library ... but that's for another thread ) I'll be the first to jump up and say "but .. that's fucking dumb, canvas is great" - yes I know, I get you! But... with SVG I get ... a viewbox! That's panning/zooming for free mate! You also get great testable outputs for your components !! expect a circle at 10 10? Because you placed a component there? I can examine my output agrees with my expectations!! I can bind react events to things like mouse over a random line anywhere on the screen... that's pretty spiffy! I've found I'm more successful rendering strictly from some state and rendering everything so it's always consistent. I did nothing to optimize my react code, and my recent attempts in React have been more successful than previous incarnations. Even feeling quite usable, even running some usability tests (lots of items). Most of the issues I ran into for myself revolved around representation of the data for a "full gui" - I wanted multi-select drag and drop of components. I found this... oddly hard. For one I'm fighting DOM things like... the mouse over event's getting to the wrong place if the user drags the mouse to fast (use an dynamically created overlay to bypass this). And where do I render these dragged lines... do I render them as an offset &lt;g&gt; ? based on the mouse drag vector, or do I actually update behind the scenes phantom lines that do the right things. I sill haven't gotten my grid snap to work right, it seemed liked such a simple thing to do, but I end up with vertexes being stuck at odd offsets and never sorted that out. But worse yet I'm still sorting out how to render these structures, and emit consistent data to redux. I remember having various race conditions for things like "selected vertex index 1"... but yet I'm updating where the dragged final destination of that vertex is, so I'd get flashes of the newly updated vertex being offset by the drag distance in the drag overlay, because the drag was complete, but the drag layer was still drawing from the referenced index.... (just oddities with state not updating the 'isDragging' flags , but still something that plagued me) I would say to sum it up, that for me I had a lot less struggle when using SVG compared to canvas when using react, redux is easily capable of 1000's of events per second, so it handled things like the mouse for instance. IT may have performance limits, but I was able to handle test scenes with 100+ sections, with 5-10 nodes each (all randomly located) Redux seemed like a nice convenience - Redux may not be your cup of tea.
Well, my first thought is, you are just passing your form directly to the createToken. Shouldn't you make it after the way it is set up in stripes reference? stripe.createToken('bank_account', { country: 'US', currency: 'usd', routing_number: '110000000', account_number: '000123456789', account_holder_name: 'Jenny Rosen', account_holder_type: 'individual', }).then(function(result) { // Handle result.error or result.token }); &amp;#x200B; My suggestion is that you take your elements and and put them into this example accordingly. OR you could log into your stripe, go into the logs and see what the error is on stripes side. Hope this helps in any way :)
Dynamic typing
&gt; less clicks is not always the better UX. "not always" Did you miss that we are not talking about an "always" thing, but about one very specific use case? Where there is *nothing else on the page*, and this one selection is the one core thing the user cares about, and the only one too? So of what use is it when you go off on a discussion about stuff that is not relevant, because nobody tried to make a case for "never use options"?
You're talking about caching. But once the browser has retrieved the file from cache, it still needs to parse and compile it before executing. It is this process that takes time, blocking the execution of the script.
You don't even understand the question despite it having been discussed in detail before you posted? If you want to see failure, look in a mirror.
Technical interviews!
So the JS was either out of date or wrong - it was based on V2 and stripe is on V3 now. &amp;#x200B; I'm updating my answer now
You mean latter?
Made a js app for fun. [Steganogram](http://www.steganogram.co) You can add images with a message which is embedded into the image using a technique called [Steganography](https://en.wikipedia.org/wiki/Steganography) features and uploads it to imgur anonymously. Encoding is done on the client side and tested only on Chrome. 
It may be a language barrier but I'm finding it difficult to understand exactly what you want. Maybe try making a picture of the kind of thing you want to make?
&gt;TDD is a design technique , it is a driving process that helps you reach a certain type of solution to your problem. Quote from the [previous post](https://itnext.io/the-missing-practical-step-by-step-test-driven-development-a7140ca4b71): \&gt; Maybe the end result is not the [**best** solution](https://hackernoon.com/how-to-destroy-the-myth-of-the-proper-solution-94ca958def1f). Test-Driven Development is not about being perfect, it's about writing code so that the tests can drive you to **some** solution. It helps you to build up a better understanding of the problem. It doesn't turn you magically into a great coder, problem solver or software designer. How is that different from what you said? Is anywhere in the post that says otherwise? &amp;#x200B; &amp;#x200B;
Everyone is mentioning array here, how far wrong is the idea of using an object and then access to this object keys as greetings? Asking for a friend...
No, certainly, that is more or less the point I made. Then again, I hadn't read that _other_ post. Sorry. I also wasn't saying your post says anything contrary to this. I just meant that just _which solution_ you can reach through TDD is "largely" an unexplored territory. Not just the idea that "it's not the best solution". I feel like most TDD proponents haven't explored just _what kind of solution_ you can actually produce. In any case, it was not meant as a confrontation, just a suggestion of a subject which I think fits much more with the idea of "the one thing nobody tells you about TDD". Nothing more.
Your module is your encapsulation. A module should look something like this: let privateVar1, privateVar2 const privateMethod1 = () =&gt; {} const privateMethod2 = () =&gt; {} const privateMethod3 = () =&gt; {} const publicMethod1 = () =&gt; {} const publicMethod2 = () =&gt; {} const publicMethod3 = () =&gt; {} module.exports = {publicMethod1, publicMethod2, publicMethod3} Then in some other file you import it: const myModule = require('./myModule') myModule.publicMethod1() If your module requires a constructor you can export a function instead of an object: let privateVar1, privateVar2 const privateMethod1 = () =&gt; {} const privateMethod2 = () =&gt; {} const privateMethod3 = () =&gt; {} const publicMethod1 = () =&gt; {} const publicMethod2 = () =&gt; {} const publicMethod3 = () =&gt; {} const init = function (arg1, arg2) { // I don't use an arrow function here to be able to use "new" when initializing privateVar1 = arg1 privateVar2 = arg2 return {publicMethod1, publicMethod2, publicMethod3} } module.exports = init Then you can import it this way: const MyModule = require('./MyModule') const myModule = new MyModule() // the new doesn't do anything in this case but it looks nice myModule.publicMethod1() Some people like to use classes and "this". Personally I don't and a lot of people agree that you should avoid using "this" and classes and opt for composition instead because it's simpler to use.
I wouldn’t ask which is faster, but where is it more appropriate this processing happen. Perhaps it’s better to ask, do I want this to happen before render or at render?
What do you actually want to obtain? To check if the users exist and create them if not? ``` const processRequest = () =&gt; { const { request } = this.props.data; if (!request) { return; } [ { naam: request.project.lead_naam, email: request.project.lead_email }, ...request.project.teamlid ].forEach(async (user) =&gt; { const doesUserExist = await this.searchUser(user.email); if (!doesUserExist) { this.createUser(user.email, user.naam); } }); } ```
For your specific case, as a first thought, a few things could be improved: * I don't see the value in declaring empty vars that you directly push something right after. You could just declare the arrays directly with values in it. * Your usage of the *map* array method seems weird to me. Your `pushemails` and `pushnamen` seem only created to push stuff in the arrays declared above, they are basically noise in your code. You should either ditch the 2 constants and use *forEach* to manually push stuff in another array ; or use *map* to create new arrays and then use those arrays. Here you're doing a mix of both, it's unclear what you really want to do. * I guess everything could be handled into one array of users who have a name and an email, instead of dealing with two arrays. As a general help for writing "readable code", there a lots of best practices you can find online or on paper. One great and recent book you can find is https://basecodefieldguide.com/ by Jason McCreary. It's in the PHP world but most of the stuff applies to any language. You can find lots of commented code sample on his twitter. For big refactors of legacy code that you don't really know how it works, one great workflow to have is to start writing tests for the existing code, make them all pass, then start the refactoring. At the end of refactoring, all tests should still pass. 
Those vars point to the actual input elements where you can read the value from. So this way you don't have to write `document.getElementById` whenever you want to access the input element. Also I would suggest not to use `var` instead use `let` and whenever possible `const`
Why would you do that though? Isn't it slower bu definitipn because the data is more complicated. What I was thinking as alternative for an array, would be just a string with separators. That would probably be a better alternative in some weird cases when the new moon eclipses the sun :)
&gt;Excellent &amp;#x200B;
no links to tool homepages
A try-catch tutorial in 2018? You got to be kidding me.
How is it going so far with Mead's course?
Why? It is still useful, especially with the usage of async/await.
Beginners needing material to learn from is not something that goes away just because it's 2018.
Can you provide a browser compatibility grid? So far I see no difference from this library to [Grid CSS with media queries](https://www.w3schools.com/css/css_grid.asp).
Did any of you actually use Google? https://www.google.com/search?q=javascript+try+catch+tutorial&amp;oq=javascript+try+catch+tutorial
Thanks nice tips. I will use the workflow with testing, sounds good.
You are completely wrong. Async functions do not magically make functions that are asynchronous synchronous, it just allows you to write code *as if they were synchronous*. The underlying behaviour is still very much asynchronous. Furthermore, promises (which is what async functions use under the hood) execute immediately within a microtask of the event loop, which does not "hold up the main thread" (there is no main thread, JavaScript only executes in the context of one thread - hence why there is an event loop). You can absolutely run two IO calls at once - here is one way of doing so: async function main() { const [result1, result2] = await Promise.all([IOCall1(), IOCall2()]); } The calls to `IOCall1()` and `IOCall2()` run pretty much at the exact same time because their execution contexts are pushed into the microtask queue within the same iteration of the JS engine's event loop. `Promise.all` is a helper that will combine the results of both promises into a new promise, and you can `await` on that promise for both results to complete. `await` is the construct that is used to explicitly "wait" for the result of a promise. I would rewrite the solution, but u/kuroljov beat me to it. The code in his sample repo is perfectly adequate to demonstrate that you can accomplish the same thing using JavaScript's built-in language constructs.
Tried that too, behaved just like require('./moment.js'). Regarding the dependencies bundle, is something I'll have to take a look because it packs jQuery at least a couple times and other huge library, "bundling" at about 5MB !!
Yes, it exists at the times explained in OP. The surprising thing was deleting it (thinking it was using the npm module, required like require('moment')) would make the whole thing break. And AFAIK, I tried with an untouch moment.js, same deal.
&gt;const processRequest = () =&gt; { const { request } = this.props.data; if (!request) { return; } \[ { naam: request.project.lead\_naam, email: request.project.lead\_email }, ...request.project.teamlid \].forEach(async (user) =&gt; { const doesUserExist = await this.searchUser(user.email); if (!doesUserExist) { this.createUser(user.email, user.naam); } }); } Yeah like this is what I want. But i want the skill to refactor my code to that. I feel like i'm missing some basic JS skills and because of that my code becomes so ugly. But thanks dude, your code is super nice. 
I would suggest the following: 1) Add Typescript support incrementally. It's possible to mix Typescript and Javascript in the same project. 2) Make sure that you first write some tests for the file you are planning to convert to typescript, and then add in typescript, and then run the tests all the time (through a test runner) so that you have more confidence in your converted code. 3) Don't make too many changes at once. Write some small tests and then make some small changes and test them. 4) Don't worry about changing directory structure in case you don't have the knowledge or the patience to learn a new buiild process. An different directory structure has nothing to do with conversion to typescript. 5) Good luck.
Websockets will let you emit events from the api to the connected client, sounds like what you're after?
Thanks man, this will help
this will cause unnecessary calls. But yeah I have thought of that.
[This](https://www.hhi.is/gulln%C3%A1man/leikirnir/) website and the counter on it
If you're working on Node just search for socket.io npm package it'll be the easiest one for you to start with. Otherwise you could go for ws or webrtc packages also. 
Yeah, it depends on your goals I guess. If you just wanr to knock something up quickly then it might be the way to go. If you want to be more refined, the sure, WebSockets may be better for you. My guess is for this use-case it's not going to matter to you either way (no perceivable difference in the function of the app).
Also, check out Total.js flow. Best I’ve seen so far. 
I made a game engine for JavaScript canvas and made geometry wars with it. I did all of this for fun but also for my portfolio as I try to make the switch from mechanical engineer to software dev. It works with a controller as well (except for maybe safari) The game engine needs a bit of work before it could be an npm install, and some features are hard coded for now like the camera. I’m also planning on adding an inspector for development and level design. Repo: https://github.com/SecondCommand/GEOWars
lol it's 2018 bro, I use artisinal handcrafted apps none of this automation bullcrap that's dehumanizing our trade.
Title is literally saying ”React redux” so comment-op is off topic
Please make a grid in pure CSS with different height columns that flow the right way. It's impossible. You could use css-columns, but then they go 147 258 369 In order to have flexible column-height and a order of 123 456 789 You need a js-lib, masonry has been the big player for years. But new leaner libs are always welcome.
This is how far CSS will get you (bulma css in this example) [https://i.imgur.com/wizwuD1.png](https://i.imgur.com/wizwuD1.png)
I would ask them open-ended questions about their philosophy of code and working on a team. Try to find out what working with the person will be like. 
I grabbed all the posts I wrote on the basics of JavaScript and created a nice package, targeting beginners of the language (but also pre-ES6-2016-2017-2018). Hopefully, someone will find it useful!
Ask then to explain something to you that you find challenging. See if they make it easier to understand, or more complicated. I understand that you might not be looking for a mentor, but it’s (or at least, should be) a key requirement for a senior engineer to be able to articulate solutions to complex problems. 
dont be a lazy ass google it
Just read a bunch of articles. Is it better using MQTT rather than WebSockets? &amp;#x200B;
No need to use ligatures with FiraCode.
On the project page there is this `&lt;script src="node_modules/magic-grid/dist/magic-grid.min.js"&gt;` Is exposing node\_modules a common practive? Is it safe?
Can interview him for you, if you don't mind to get help from other end of the world)
I tried with a sample app and worked fine and when I tried on the product app it crashed with some weird errors and various promise rejection error, right now I want to add support for typescript in my project and coding new modules in typescript meanwhile planned to give some time for migrating existing code but hard luck with fixing the bugs Now I am getting this strange error Path must be a string. Received undefined (node:18420) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead. (node:18420) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Cannot find module '/home/bct/codebase/myapp/server/app/models/admin.js' (node:18420) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code. 
I always favour CSS over JS where possible. I'd say CSS from experience but I haven't tested.
educate yourself https://en.wikipedia.org/wiki/Usability
That is a blog post moron. Not a product you pay for
So you copied and pasted a bunch of stuff and require an email to access it? No thanks.
dont care about what is h(aram|alal) bro. Get ur head outa ur ass
This is awesome! My current mentor can be a bit difficult to understand at times. As the junior I have plenty I find challenging and can ask. Thank you, I really like this one! 
Thank you! I can think of some questions to ask about this.
I always destructure my props and other objects as it lets me see right away which properties i’m using in my component with ease
Thank you! I like the idea of playing noob and seeing how they react. My direct mentor is remote, this candidate will be the only person I can interact with in person who does what I do at a senior level. So it will be interesting to interact with them in this respect.
Libraries don't add functionality that JavaScript doesn't already innately support, and JavaScript does not innately support currying with variable length arguments.
Well shit, I guess I'll take my lumps... 
Correct. Arguments are the optimal way to pass data to a function. You use it to dynamically create a function. addSub(1) creates a function that subtracts a number from 1, while addSub(2) creates a function that subtracts a number from 2. You have shared logic between the resulting functions: a function that subtracts a number from `x`. Instead of creating both `subFrom1` and `subFrom2`, you create a function that returns those functions, only having to write the logic to subtract once. You aren't saving much with add/subtract, but with more intense functions that share logic, you can save a _lot_ of redundant code, which can be important if the logic is to change between them, like API call logic or state management logic. Currying additionally tests your knowledge of loops, recursion, etc. to see how you would optimally handle the fact that you are doing the same thing some number of times; but most importantly that you know how to dynamically create a function.
Thanks, I realise that I've actually been using this without knowing what it's called.
It works by calculating values for the "top" and "left" css attributes. It should work in every browser.
He's not a lazy ass so you should un-link that, he'll prefer it that way!
Hi /u/KidKazii, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
[https://codepen.io/tw3/pen/BGQdeE](https://codepen.io/tw3/pen/BGQdeE) function addSubtract(firstArg) { let sum; let isAdd; const sumFn = (addend) =&gt; { if (sum == null) { sum = addend; } else { isAdd = !isAdd; const factor = isAdd ? 1 : -1; sum += factor * addend; } console.log({addend, sum}); return sumFn; }; sumFn(firstArg); return sumFn; } addSubtract(1)(2)(3)(4)(5)(6); 
Put in another way, I write blog posts with the ending goal of making a little ebook out of them, if this sounds better. 
Try pressing start over and over. 
Sure will do. Thanks
Also doesnt go past 25min
Yep. It's 25 min timer. My bad I should have mentioned that. Anyway thanks 
My bad. It's 25 min timer. Should have mentioned that.
My bad. It's 25 min timer. Should have mentioned that.
Hi /u/mistyharsh, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/kucukkanat, please refrain from personal attacks. Thanks.
yeah me being called a pig is not a personal attack at all right? Dont care!
 Is the draggable setting only supposed to work on devices with touchscreen? it doesnt let me drag via mouse, though there's an example on the docs.
In addition to what others have said, also ask your existing senior mentor. They’ll likely have a good set of questions you can evaluate from your perspective.
I can't really help debug the code unless i see the code. Try taking some specific file you want to convert to typescript and upload it to github or create a gist there. i can help you convert it to typescript with some tests if you want.
Building your knowledge and experience from multiple sources helps you be more well-rounded anyway. I would never solely trust the perspective of one single person. Nobody knows everything.
Canvas elements allow child elements that it won't actually display. I believe this was intended at least in part to provide accessibility options for users with screen readers; if a screen reader can see it, so will a crawler, I think. &amp;#x200B; If you've got a real-time / action oriented game, you probably won't be updating the dom fast enough to provide a fully accessible experience, but you could use it to at least provide textual descriptions / alternative renderings for things like menus, options, and on-canvas text. &amp;#x200B; I have no idea if that would be sufficient, and other ideas- such as running a separate blog site for the game with ads- might work better.
It's not an uninteresting list, but some of these seem very theoretical. Does anyone have experience with these tools?
Thanks for showing me something new! I haven’t heard of that before. I just have all the sprites in an array. It translates to the object’s position to render it, then restores back before the next object. That’s still hard coded for every sprite and I’ll abstract that out soon. The project was originally a week long challenge and I still have some cobwebs left from back then. 
Don't be a lazy ass, includes links in your article. If you want people to take your post(s) seriously then you can't be so hostile.
As someone who is literally teaching an introductory class on web development, I don't think any of my students could handle using any of these tools except the Chrome Developer's Tools (and even they required some explanation). These tools might be useful for more advanced learners, but this definitely isn't a list of resources for beginners.
We're using Next.js (so, static react site) with SASS. Trying to steer clear of jQuery wherever possible (though there are still some libraries/widgets where we have to use it).
Can't complain really, for one week that's accomplishment. I can think for sure that the code for the grid behind the player wasn't easy math. Atleast you have a renderer that works somewhat flexible, that's good. I would've done the same. The scene graph though is basically your array with the sprites in it but a class that you can instantiate. It acts like a container which can accept different entites. For example you could have a container called enemies and a container called player, rendering the the corresponding entities respectively. You then normally have an root container which has all the other container you create, and when you want to update the entities inside the containers each frame, you loop through all the containers recursively and call the update functions of the entities (though this can be done differently). Have you planned other projects?
Fantastic advice. 
this is instigation :)
That's kind to offer, but OP would probably have to interview you first to ensure you're capable of interviewing. If you're more senior, then OP now has two problems!
...what? You wan't ppl to join a slack to understand the concept of `this`? 
Lots of really fantastic ideas, thank you so much! There's a bunch of interview notes already done maybe their github is in there somewhere and I can see if they have anything I can check out. Thank you for that last bit! I really appreciate that my company asked me to be a part of the interview and value my opinion enough. I've almost been with them for a year and the team is awesome and I'd like to make sure the next person we bring on is as awesome
[removed]
Yes.
Holy shit, this runs like hot garbage.
lolwat
Could you please elaborate more on the error-hiding anti-pattern?
It would be nice if the example of a pure function were actually a pure function. (Where is the definition for "h"?)
There's some overlap between the use cases, but sure, you can use them both if you want. See /u/rwieruch 's post [How to use Redux with Apollo Client and GraphQL](https://www.robinwieruch.de/react-redux-apollo-client-state-management-tutorial/) for some specifics on using them together. Also, see my post [Redux - Not Dead Yet!](https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/) for some thoughts on how they relate.
Sure. The example is taken from the HyperApp demo page. You can find the definition here: [https://github.com/jorgebucaran/hyperapp/blob/master/src/index.js](https://github.com/jorgebucaran/hyperapp/blob/master/src/index.js)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jorgebucaran/hyperapp/.../**index.js** (master → 2342924)](https://github.com/jorgebucaran/hyperapp/blob/234292456997a12eb628e6991fb29dfb94071712/src/index.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9kfqoi.)
Thank you!!
Geometry wars is awesome
It is probably not Axios. npm recently had many hiccups in the download statistics. And this week, many (all?) packages had significantly lower numbers.
It looks like the typical NPM stats bug that persists for at least a couple of years and every once in a while appears to take effect on some group of packages or other. As a general rule, don't pay attention to sudden drops in NPM stats. If you do not feel confident about a particular package's latest stats: a. look at some other popular packages (see below) to see if they are having a similar issue, or b. wait a couple of weeks. (*) [React](https://www.npmjs.com/package/react), [Babel core](https://www.npmjs.com/package/babel-core), [Babel CLI](https://www.npmjs.com/package/babel-cli), [Angular](https://www.npmjs.com/package/angular), [lodash](https://www.npmjs.com/package/lodash), [Express](https://www.npmjs.com/package/express), [NPM](https://www.npmjs.com/package/npm), [Bluebird](https://www.npmjs.com/package/bluebird)... They all seem to present a similar drop in the last two weeks.